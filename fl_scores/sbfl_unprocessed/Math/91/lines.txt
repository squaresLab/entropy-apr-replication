/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,261,return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,260,double dOn = object.doubleValue();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,259,double nOd = doubleValue();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,270,return (double)numerator / (double)denominator;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,608,u = -t;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,604,t /= 2; // cast out twos
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,577,u = -u;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,610,v = t;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,617,return -u * (1 << k); // gcd is u*2^k
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,616,} while (t != 0);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,613,t = (v - u) / 2;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,607,if (t > 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,603,while ((t & 1) == 0) { // while t is even..
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,597,int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,590,if (k == 31) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,584,while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,583,int k = 0;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,580,v = -v;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,579,if (v > 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,576,if (u > 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,563,if ((u == 0) || (v == 0)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,562,int v = q;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,561,int u = p;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,236,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,235,this.denominator = den;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,234,this.numerator = num;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,230,if (den < 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,224,if (d > 1) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,223,int d = MathUtils.gcd(num, den);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,214,if (den < 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,210,if (den == 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/fraction/Fraction.java,209,super();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1246,return ret;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1244,ret = addAndCheck(a, -b, msg);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1240,throw new ArithmeticException(msg);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1238,ret = a - b;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1237,if (a < 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1236,if (b == Long.MIN_VALUE) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1235,String msg = "overflow: subtract";
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1220,return (int)s;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1218,throw new ArithmeticException("overflow: subtract");
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1217,if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1216,long s = (long)x - (long)y;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1202,return (Math.exp(x) - Math.exp(-x)) / 2.0;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1191,return (x == ZS) ? ZS : (x > ZS) ? PS : NS;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1176,return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1162,return (x == 0) ? 0 : (x > 0) ? 1 : -1;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1148,return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1146,return Float.NaN;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1145,if (Float.isNaN(x)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1130,return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1128,return Double.NaN;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1127,if (Double.isNaN(x)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1111,return (x == ZB) ? ZB : (x > ZB) ? PB : NB;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1097,return unscaled;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1095,throw new IllegalArgumentException("Invalid rounding method.");
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1093,break;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1092,unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1088,throw new ArithmeticException("Inexact result from rounding");
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1087,if (unscaled != Math.floor(unscaled)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1084,break;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1082,unscaled = Math.floor(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1080,unscaled = Math.ceil(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1079,if (fraction >= 0.5) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1078,double fraction = unscaled - Math.floor(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1077,unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1074,break;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1071,unscaled = Math.ceil(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1069,unscaled = Math.floor(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1067,if (Math.floor(unscaled) / 2.0 == Math.floor(Math
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1064,unscaled = Math.floor(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1063,} else if (fraction < 0.5) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1062,unscaled = Math.ceil(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1061,if (fraction > 0.5) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1060,double fraction = unscaled - Math.floor(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1057,break;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1055,unscaled = Math.floor(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1053,unscaled = Math.ceil(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1052,if (fraction > 0.5) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1051,double fraction = unscaled - Math.floor(unscaled);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1050,unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1048,break;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1046,unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1044,unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1043,if (sign == -1) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1041,break;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1040,unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1038,break;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1036,unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1034,unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1033,if (sign == -1) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1031,switch (roundingMethod) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1014,return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1013,float factor = (float)Math.pow(10.0f, scale) * sign;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,1012,float sign = indicator(x);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,996,return round(x, scale, BigDecimal.ROUND_HALF_UP);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,981,return Double.NaN;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,979,return x;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,978,if (Double.isInfinite(x)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/91/src/java/org/apache/commons/math/util/MathUtils.java,977,} catch (NumberFormatException ex) {
