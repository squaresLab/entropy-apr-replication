/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/EstimatedParameter.java,63,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/EstimatedParameter.java,62,this.bound = bound;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/EstimatedParameter.java,61,estimate   = firstEstimate;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/EstimatedParameter.java,60,this.name  = name;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/EstimatedParameter.java,59,boolean bound) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,58,return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,173,sum += jacobian[k + i] * jacobian[k + j];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,172,for (int k = 0; k < max; k += cols) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,171,double sum = 0;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,170,for (int j = i; j < cols; ++j) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,169,for (int i = 0; i < cols; ++i) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,168,double[][] jTj = new double[cols][cols];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,167,final int max  = cols * rows;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,166,final int cols = problem.getAllParameters().length;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,165,final int rows = problem.getMeasurements().length;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,162,updateJacobian();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,172,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,147,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,146,this.ignored = ignored;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,84,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,83,this.ignored       = ignored;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,82,this.measuredValue = measuredValue;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,81,this.weight        = weight;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,80,boolean ignored) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,168,} while ((getCostEvaluations() < 2) ||
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,166,updateResidualsAndCost();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,165,previous = cost;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,162,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,157,parameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i, 0));
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,156,for (int i = 0; i < parameters.length; ++i) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,748,bp[i][j] -= bp[col][j] * lu[i][col];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,747,for (int j = 0; j < nColB; j++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,736,bp[i][j] -= bp[col][j] * lu[i][col];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,735,for (int j = 0; j < nColB; j++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,102,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,101,measurements.add(m);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,94,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,93,parameters.add(p);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,86,return (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,77,return (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,74,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,72,unbound.add(p);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,71,if (! p.isBound()) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,70,EstimatedParameter p = (EstimatedParameter) iterator.next();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,69,for (Iterator iterator = parameters.iterator(); iterator.hasNext();) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,68,List unbound = new ArrayList(parameters.size());
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,51,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,50,measurements = new ArrayList();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,49,parameters   = new ArrayList();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,48,public SimpleEstimationProblem() {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/EstimatedParameter.java,107,return bound;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,847,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,754,return outMat;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,753,RealMatrixImpl outMat = new RealMatrixImpl(bp);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,746,for (int i = 0; i < col; i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,744,bp[col][j] /= lu[col][col];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,743,for (int j = 0; j < nColB; j++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,742,for (int col = nCol - 1; col >= 0; col--) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,734,for (int i = col + 1; i < nCol; i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,733,for (int col = 0; col < nCol; col++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,728,bp[row][col] = b.getEntry(permutation[row], col);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,727,for (int col = 0; col < nColB; col++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,726,for (int row = 0; row < nRowB; row++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,725,double[][] bp = new double[nRowB][nColB];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,722,int nRowB = b.getRowDimension();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,721,int nColB = b.getColumnDimension();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,720,int nCol = this.getColumnDimension();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/linear/RealMatrixImpl.java,591,return false;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java,57,return costEvaluations;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,155,return ignored;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,153,RealMatrix dX = a.solve(b);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,145,b = b.add(bDecrement);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,144,a = a.add(wGradGradT);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,139,wggRow[l] =  weight * gk * grad[l];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,138,for (int l = 0; l < parameters.length; ++l) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,137,double gk = grad[k];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,136,double[] wggRow = wggData[k];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,135,for (int k = 0; k < parameters.length; ++k) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,131,bDecrementData[j][0] = weight * residual * grad[j];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,130,grad[j] = measurements[i].getPartial(parameters[j]);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,129,for (int j = 0; j < parameters.length; ++j) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,126,double residual = measurements[i].getResidual();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,125,double weight   = measurements[i].getWeight();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,123,if (! measurements [i].isIgnored()) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,122,for (int i = 0; i < measurements.length; ++i) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,121,RealMatrix a = new RealMatrixImpl(parameters.length, parameters.length);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,120,RealMatrix b = new RealMatrixImpl(parameters.length, 1);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,119,incrementJacobianEvaluationsCounter();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,115,double previous = Double.POSITIVE_INFINITY;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,112,double[][] wggData        = wGradGradT.getDataRef();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,111,RealMatrixImpl wGradGradT = new RealMatrixImpl(parameters.length, parameters.length);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,110,double[][] bDecrementData = bDecrement.getDataRef();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,109,RealMatrixImpl bDecrement = new RealMatrixImpl(parameters.length, 1);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,108,double[] grad             = new double[parameters.length];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,105,initializeEstimate(problem);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,77,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,76,this.convergence          = convergence;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,75,this.steadyStateThreshold = steadyStateThreshold;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,74,setMaxCostEval(maxCostEval);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/100/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,73,double steadyStateThreshold) {
