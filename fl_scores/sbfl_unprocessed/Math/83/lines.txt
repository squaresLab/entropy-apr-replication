/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,349,coefficients[i] = 0;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,190,doIteration(tableau);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,151,return false;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,297,return null;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,179,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,92,return coefficients.dotProduct(point) + constantTerm;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,481,return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,458,return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,357,return new RealPointValuePair(coefficients, f.getValue(coefficients));
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,352,coefficients[i] =
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,351,basicRows.add(basicRow);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,346,if (basicRows.contains(basicRow)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,345,Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,344,for (int i = 0; i < coefficients.length; i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,343,Set<Integer> basicRows = new HashSet<Integer>();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,342,double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,341,Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,340,double[] coefficients = new double[getOriginalNumDecisionVariables()];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,321,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,320,this.numArtificialVariables = 0;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,319,this.tableau = new Array2DRowRealMatrix(matrix);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,317,matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,315,matrix[i][j] = getEntry(i + 1, j + 1);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,314,for (int j = 0; j < width - 1; j++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,313,for (int i = 0; i < height; i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,312,double[][] matrix = new double[height][width];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,311,int height = getHeight() - 1;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,310,int width = getWidth() - numArtificialVariables - 1;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,86,return value;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,51,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,50,this.value  = value;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,49,this.point = point.clone();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,48,public RealPointValuePair(final double[] point, final double value) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,192,return tableau.getSolution();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,176,if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,172,doIteration(tableau);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,171,while (!isPhase1Solved(tableau)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,154,return true;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,137,return true;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,134,return false;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,133,if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,132,for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,129,if (tableau.getNumArtificialVariables() == 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1292,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1287,if (data.length != n) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,889,return dot;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,887,dot += data[i] * v[i];
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,886,for (int i = 0; i < data.length; i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,885,double dot = 0;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,884,checkVectorDimensions(v.length);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,189,while (!isOptimal(tableau)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,188,tableau.discardArtificialVariables();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,150,if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,149,for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,146,if (tableau.getNumArtificialVariables() > 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/util/MathUtils.java,372,return 1;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/util/MathUtils.java,370,return -1;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/util/MathUtils.java,369,} else if (x < y) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/util/MathUtils.java,368,return 0;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/util/MathUtils.java,367,if (equals(x, y, eps)) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,497,return numArtificialVariables;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,373,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,371,tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,370,for (int j = 0; j < getWidth(); j++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,307,if (numArtificialVariables == 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,187,solvePhase1(tableau);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,185,final SimplexTableau tableau =
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,167,if (tableau.getNumArtificialVariables() == 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,121,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,118,tableau.subtractRow(i, pivotRow, multiplier);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,117,double multiplier = tableau.getEntry(i, pivotCol);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,116,if (i != pivotRow) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,115,for (int i = 0; i < tableau.getHeight(); i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,112,tableau.divideRow(pivotRow, pivotVal);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,111,double pivotVal = tableau.getEntry(pivotRow, pivotCol);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,106,if (pivotRow == null) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,105,Integer pivotRow = getPivotRow(pivotCol, tableau);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,104,Integer pivotCol = getPivotColumn(tableau);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,102,incrementIterationsCounter();
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,89,return minRatioPos;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,85,minRatioPos = i;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,84,minRatio = ratio;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,83,if (ratio < minRatio) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,82,double ratio = rhs / tableau.getEntry(i, col);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,81,if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,80,double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,79,for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,78,Integer minRatioPos = null;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,77,double minRatio = Double.MAX_VALUE;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,67,return minPos;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,64,minPos = i;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,63,minValue = tableau.getEntry(0, i);
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,62,if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,61,for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,60,Integer minPos = null;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,59,double minValue = 0;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,51,}
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,50,this.epsilon = epsilon;
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,49,public SimplexSolver(final double epsilon) {
/home/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/83/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,43,}
