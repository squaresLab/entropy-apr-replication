{
  "files": [
    {
      "features": [
        {
          "CONSTANT": {
            "3": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            },
            "false": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            }
          },
          "FEATURES_LOGICAL_EXPRESSION": {
            "logical_expression_0_false": {
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_LEFT": "false",
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_RIGHT": "false",
              "LE10_ATOMIC_EXPRESSION_MULTIPLE_VAR_AS_BOOLEAN": "false",
              "LE10_ATOMIC_EXPRESSION_SAME_INVOCATION_TARGET": "false",
              "LE10_ATOMIC_EXPRESSION_USED_IN_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE10_CONTAINS_ALL_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE1_EXISTS_RELATED_BOOLEAN_EXPRESSION": "false",
              "LE2_IS_BOOLEAN_METHOD_PARAM_TYPE_VAR": "false",
              "LE3_IS_COMPATIBLE_VAR_NOT_INCLUDED": "false",
              "LE4_EXISTS_LOCAL_UNUSED_VARIABLES": "false",
              "LE5_COMPLEX_REFERENCE": "false",
              "LE6_HAS_NEGATION": "false",
              "LE8_SCOPE_VAR_USED_OTHER_BOOLEXPER": "false",
              "LE9_EQUAL_NOTEQUAL_NULL_CHECK": "false",
              "LE9_MIX_CHECK": "false",
              "LE9_NORMAL_CHECK": "false",
              "LE9_NULL_CHECK": "false"
            }
          },
          "FEATURES_METHODS": {
            "<init>": {
              "M10_METHOD_CALL_WITH_NULL_GUARD": "false",
              "M10_WRAPTTED_IN_OTHER_CALLS": "false",
              "M11_Satrt_With_Get": "false",
              "M12_Has_Var_Similar_In_Name": "false",
              "M12_METHOD_CALL_WITH_TRY_CATCH": "false",
              "M13_Argument_Has_Primitive": "false",
              "M1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "M1_LOCAL_VAR_NOT_USED": "false",
              "M1_OVERLOADED_METHOD": "false",
              "M2_SIMILAR_METHOD_WITH_SAME_RETURN": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
              "M3_ANOTHER_METHOD_WITH_PARAMETER_RETURN_COMP": "false",
              "M4_Field_NOT_ASSIGNED": "false",
              "M4_Field_NOT_USED": "false",
              "M4_PARAMETER_RETURN_COMPABILITY": "true",
              "M5_MI_WITH_COMPATIBLE_VAR_TYPE": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
              "M6_INV_Invocation_INV_REPLACE_BY_VAR": "false",
              "M7_INV_Invocation_INV_REPLACE_BY_INV": "false",
              "M7_OBJECT_USED_IN_ASSIGNMENT": "false",
              "M8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
              "M8_RETURN_PRIMITIVE": "false",
              "M9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
              "M9_RETURN_OBJECTIVE": "true"
            }
          },
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {
            "args": {
              "V10_VAR_TYPE_Similar_VAR": "false",
              "V11_VAR_COMPATIBLE_TYPE_IN_CONDITION": "false",
              "V12_VAR_Invocation_VAR_REPLACE_BY_VAR": "false",
              "V13_VAR_Invocation_VAR_REPLACE_BY_INVOCATION": "false",
              "V14_VAR_INSTANCE_OF_CLASS": "false",
              "V16_IS_METHOD_PARAMETER_TYPE_VAR": "true",
              "V17_VAR_IS_ENUMERATION": "false",
              "V18_Has_Method_Similar_In_Name": "false",
              "V19_With_Special_Name": "false",
              "V1_IS_TYPE_COMPATIBLE_METHOD_CALL_PARAM_RETURN": "true",
              "V1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "V1_LOCAL_VAR_NOT_USED": "false",
              "V2_HAS_VAR_SIM_NAME": "false",
              "V2_HAS_VAR_SIM_NAME_COMP_TYPE": "false",
              "V3_HAS_CONSTANT": "false",
              "V4B_USED_MULTIPLE_AS_PARAMETER": "false",
              "V4_FIRST_TIME_USED_AS_PARAMETER": "true",
              "V4_Field_NOT_ASSIGNED": "false",
              "V4_Field_NOT_USED": "false",
              "V5_HAS_VAR_IN_TRANSFORMATION": "false",
              "V6_IS_METHOD_RETURN_TYPE_VAR": "true",
              "V8_VAR_OBJECT": "true",
              "V8_VAR_PRIMITIVE": "false",
              "V9_VAR_TYPE_Similar_Literal": "false"
            }
          },
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public final java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {\n    return compute(args[0].computeValue(context), args[1].computeValue(context)) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE;\n}",
            "src_parent": "public abstract class CoreOperationRelationalExpression extends org.apache.commons.jxpath.ri.compiler.CoreOperation {\n    protected CoreOperationRelationalExpression(org.apache.commons.jxpath.ri.compiler.Expression[] args) {\n        super(args);\n    }\n\n    public final java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {\n        return compute(args[0].computeValue(context), args[1].computeValue(context)) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE;\n    }\n\n    protected final int getPrecedence() {\n        return 3;\n    }\n\n    protected final boolean isSymmetric() {\n        return false;\n    }\n\n    protected abstract boolean evaluateCompare(int compare);\n\n    private boolean compute(java.lang.Object left, java.lang.Object right) {\n        left = reduce(left);\n        right = reduce(right);\n        if (left instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (left)).reset();\n        }\n        if (right instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (right)).reset();\n        }\n        if ((left instanceof java.util.Iterator) && (right instanceof java.util.Iterator)) {\n            return findMatch(((java.util.Iterator) (left)), ((java.util.Iterator) (right)));\n        }\n        if (left instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (left)), right);\n        }\n        if (right instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (right)), left);\n        }\n        return evaluateCompare(compare(left, right));\n    }\n\n    private java.lang.Object reduce(java.lang.Object o) {\n        if (o instanceof org.apache.commons.jxpath.ri.axes.SelfContext) {\n            o = ((org.apache.commons.jxpath.ri.EvalContext) (o)).getSingleNodePointer();\n        }\n        if (o instanceof java.util.Collection) {\n            o = ((java.util.Collection) (o)).iterator();\n        }\n        return o;\n    }\n\n    private boolean containsMatch(java.util.Iterator it, java.lang.Object value) {\n        while (it.hasNext()) {\n            java.lang.Object element = it.next();\n            if (evaluateCompare(compare(element, value))) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private boolean findMatch(java.util.Iterator lit, java.util.Iterator rit) {\n        java.util.HashSet left = new java.util.HashSet();\n        while (lit.hasNext()) {\n            left.add(lit.next());\n        } \n        while (rit.hasNext()) {\n            if (containsMatch(left.iterator(), rit.next())) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private int compare(java.lang.Object l, java.lang.Object r) {\n        double ld = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(l);\n        double rd = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(r);\n        return ld == rd ? 0 : ld < rd ? -1 : 1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "CONSTANT": {
            "3": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            },
            "false": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            }
          },
          "FEATURES_LOGICAL_EXPRESSION": {
            "logical_expression_0_false": {
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_LEFT": "false",
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_RIGHT": "false",
              "LE10_ATOMIC_EXPRESSION_MULTIPLE_VAR_AS_BOOLEAN": "false",
              "LE10_ATOMIC_EXPRESSION_SAME_INVOCATION_TARGET": "false",
              "LE10_ATOMIC_EXPRESSION_USED_IN_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE10_CONTAINS_ALL_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE1_EXISTS_RELATED_BOOLEAN_EXPRESSION": "false",
              "LE2_IS_BOOLEAN_METHOD_PARAM_TYPE_VAR": "false",
              "LE3_IS_COMPATIBLE_VAR_NOT_INCLUDED": "false",
              "LE4_EXISTS_LOCAL_UNUSED_VARIABLES": "false",
              "LE5_COMPLEX_REFERENCE": "false",
              "LE6_HAS_NEGATION": "false",
              "LE8_SCOPE_VAR_USED_OTHER_BOOLEXPER": "false",
              "LE9_EQUAL_NOTEQUAL_NULL_CHECK": "false",
              "LE9_MIX_CHECK": "false",
              "LE9_NORMAL_CHECK": "false",
              "LE9_NULL_CHECK": "false"
            }
          },
          "FEATURES_METHODS": {
            "<init>": {
              "M10_METHOD_CALL_WITH_NULL_GUARD": "false",
              "M10_WRAPTTED_IN_OTHER_CALLS": "false",
              "M11_Satrt_With_Get": "false",
              "M12_Has_Var_Similar_In_Name": "false",
              "M12_METHOD_CALL_WITH_TRY_CATCH": "false",
              "M13_Argument_Has_Primitive": "false",
              "M1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "M1_LOCAL_VAR_NOT_USED": "false",
              "M1_OVERLOADED_METHOD": "false",
              "M2_SIMILAR_METHOD_WITH_SAME_RETURN": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
              "M3_ANOTHER_METHOD_WITH_PARAMETER_RETURN_COMP": "false",
              "M4_Field_NOT_ASSIGNED": "false",
              "M4_Field_NOT_USED": "false",
              "M4_PARAMETER_RETURN_COMPABILITY": "true",
              "M5_MI_WITH_COMPATIBLE_VAR_TYPE": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
              "M6_INV_Invocation_INV_REPLACE_BY_VAR": "false",
              "M7_INV_Invocation_INV_REPLACE_BY_INV": "false",
              "M7_OBJECT_USED_IN_ASSIGNMENT": "false",
              "M8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
              "M8_RETURN_PRIMITIVE": "false",
              "M9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
              "M9_RETURN_OBJECTIVE": "true"
            }
          },
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {
            "args": {
              "V10_VAR_TYPE_Similar_VAR": "false",
              "V11_VAR_COMPATIBLE_TYPE_IN_CONDITION": "false",
              "V12_VAR_Invocation_VAR_REPLACE_BY_VAR": "false",
              "V13_VAR_Invocation_VAR_REPLACE_BY_INVOCATION": "false",
              "V14_VAR_INSTANCE_OF_CLASS": "false",
              "V16_IS_METHOD_PARAMETER_TYPE_VAR": "true",
              "V17_VAR_IS_ENUMERATION": "false",
              "V18_Has_Method_Similar_In_Name": "false",
              "V19_With_Special_Name": "false",
              "V1_IS_TYPE_COMPATIBLE_METHOD_CALL_PARAM_RETURN": "true",
              "V1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "V1_LOCAL_VAR_NOT_USED": "false",
              "V2_HAS_VAR_SIM_NAME": "false",
              "V2_HAS_VAR_SIM_NAME_COMP_TYPE": "false",
              "V3_HAS_CONSTANT": "false",
              "V4B_USED_MULTIPLE_AS_PARAMETER": "false",
              "V4_FIRST_TIME_USED_AS_PARAMETER": "true",
              "V4_Field_NOT_ASSIGNED": "false",
              "V4_Field_NOT_USED": "false",
              "V5_HAS_VAR_IN_TRANSFORMATION": "false",
              "V6_IS_METHOD_RETURN_TYPE_VAR": "true",
              "V8_VAR_OBJECT": "true",
              "V8_VAR_PRIMITIVE": "false",
              "V9_VAR_TYPE_Similar_Literal": "false"
            }
          },
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "protected abstract boolean evaluateCompare(int compare);",
            "src_parent": "public abstract class CoreOperationRelationalExpression extends org.apache.commons.jxpath.ri.compiler.CoreOperation {\n    protected CoreOperationRelationalExpression(org.apache.commons.jxpath.ri.compiler.Expression[] args) {\n        super(args);\n    }\n\n    public final java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {\n        return compute(args[0].computeValue(context), args[1].computeValue(context)) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE;\n    }\n\n    protected final int getPrecedence() {\n        return 3;\n    }\n\n    protected final boolean isSymmetric() {\n        return false;\n    }\n\n    protected abstract boolean evaluateCompare(int compare);\n\n    private boolean compute(java.lang.Object left, java.lang.Object right) {\n        left = reduce(left);\n        right = reduce(right);\n        if (left instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (left)).reset();\n        }\n        if (right instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (right)).reset();\n        }\n        if ((left instanceof java.util.Iterator) && (right instanceof java.util.Iterator)) {\n            return findMatch(((java.util.Iterator) (left)), ((java.util.Iterator) (right)));\n        }\n        if (left instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (left)), right);\n        }\n        if (right instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (right)), left);\n        }\n        return evaluateCompare(compare(left, right));\n    }\n\n    private java.lang.Object reduce(java.lang.Object o) {\n        if (o instanceof org.apache.commons.jxpath.ri.axes.SelfContext) {\n            o = ((org.apache.commons.jxpath.ri.EvalContext) (o)).getSingleNodePointer();\n        }\n        if (o instanceof java.util.Collection) {\n            o = ((java.util.Collection) (o)).iterator();\n        }\n        return o;\n    }\n\n    private boolean containsMatch(java.util.Iterator it, java.lang.Object value) {\n        while (it.hasNext()) {\n            java.lang.Object element = it.next();\n            if (evaluateCompare(compare(element, value))) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private boolean findMatch(java.util.Iterator lit, java.util.Iterator rit) {\n        java.util.HashSet left = new java.util.HashSet();\n        while (lit.hasNext()) {\n            left.add(lit.next());\n        } \n        while (rit.hasNext()) {\n            if (containsMatch(left.iterator(), rit.next())) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private int compare(java.lang.Object l, java.lang.Object r) {\n        double ld = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(l);\n        double rd = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(r);\n        return ld == rd ? 0 : ld < rd ? -1 : 1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "CONSTANT": {
            "3": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            },
            "false": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            }
          },
          "FEATURES_LOGICAL_EXPRESSION": {
            "logical_expression_0_false": {
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_LEFT": "false",
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_RIGHT": "false",
              "LE10_ATOMIC_EXPRESSION_MULTIPLE_VAR_AS_BOOLEAN": "false",
              "LE10_ATOMIC_EXPRESSION_SAME_INVOCATION_TARGET": "false",
              "LE10_ATOMIC_EXPRESSION_USED_IN_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE10_CONTAINS_ALL_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE1_EXISTS_RELATED_BOOLEAN_EXPRESSION": "false",
              "LE2_IS_BOOLEAN_METHOD_PARAM_TYPE_VAR": "false",
              "LE3_IS_COMPATIBLE_VAR_NOT_INCLUDED": "false",
              "LE4_EXISTS_LOCAL_UNUSED_VARIABLES": "false",
              "LE5_COMPLEX_REFERENCE": "false",
              "LE6_HAS_NEGATION": "false",
              "LE8_SCOPE_VAR_USED_OTHER_BOOLEXPER": "false",
              "LE9_EQUAL_NOTEQUAL_NULL_CHECK": "false",
              "LE9_MIX_CHECK": "false",
              "LE9_NORMAL_CHECK": "false",
              "LE9_NULL_CHECK": "false"
            }
          },
          "FEATURES_METHODS": {
            "<init>": {
              "M10_METHOD_CALL_WITH_NULL_GUARD": "false",
              "M10_WRAPTTED_IN_OTHER_CALLS": "false",
              "M11_Satrt_With_Get": "false",
              "M12_Has_Var_Similar_In_Name": "false",
              "M12_METHOD_CALL_WITH_TRY_CATCH": "false",
              "M13_Argument_Has_Primitive": "false",
              "M1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "M1_LOCAL_VAR_NOT_USED": "false",
              "M1_OVERLOADED_METHOD": "false",
              "M2_SIMILAR_METHOD_WITH_SAME_RETURN": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
              "M3_ANOTHER_METHOD_WITH_PARAMETER_RETURN_COMP": "false",
              "M4_Field_NOT_ASSIGNED": "false",
              "M4_Field_NOT_USED": "false",
              "M4_PARAMETER_RETURN_COMPABILITY": "true",
              "M5_MI_WITH_COMPATIBLE_VAR_TYPE": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
              "M6_INV_Invocation_INV_REPLACE_BY_VAR": "false",
              "M7_INV_Invocation_INV_REPLACE_BY_INV": "false",
              "M7_OBJECT_USED_IN_ASSIGNMENT": "false",
              "M8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
              "M8_RETURN_PRIMITIVE": "false",
              "M9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
              "M9_RETURN_OBJECTIVE": "true"
            }
          },
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {
            "args": {
              "V10_VAR_TYPE_Similar_VAR": "false",
              "V11_VAR_COMPATIBLE_TYPE_IN_CONDITION": "false",
              "V12_VAR_Invocation_VAR_REPLACE_BY_VAR": "false",
              "V13_VAR_Invocation_VAR_REPLACE_BY_INVOCATION": "false",
              "V14_VAR_INSTANCE_OF_CLASS": "false",
              "V16_IS_METHOD_PARAMETER_TYPE_VAR": "true",
              "V17_VAR_IS_ENUMERATION": "false",
              "V18_Has_Method_Similar_In_Name": "false",
              "V19_With_Special_Name": "false",
              "V1_IS_TYPE_COMPATIBLE_METHOD_CALL_PARAM_RETURN": "true",
              "V1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "V1_LOCAL_VAR_NOT_USED": "false",
              "V2_HAS_VAR_SIM_NAME": "false",
              "V2_HAS_VAR_SIM_NAME_COMP_TYPE": "false",
              "V3_HAS_CONSTANT": "false",
              "V4B_USED_MULTIPLE_AS_PARAMETER": "false",
              "V4_FIRST_TIME_USED_AS_PARAMETER": "true",
              "V4_Field_NOT_ASSIGNED": "false",
              "V4_Field_NOT_USED": "false",
              "V5_HAS_VAR_IN_TRANSFORMATION": "false",
              "V6_IS_METHOD_RETURN_TYPE_VAR": "true",
              "V8_VAR_OBJECT": "true",
              "V8_VAR_PRIMITIVE": "false",
              "V9_VAR_TYPE_Similar_Literal": "false"
            }
          },
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean compute(java.lang.Object left, java.lang.Object right) {\n    left = reduce(left);\n    right = reduce(right);\n    if (left instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n        ((org.apache.commons.jxpath.ri.axes.InitialContext) (left)).reset();\n    }\n    if (right instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n        ((org.apache.commons.jxpath.ri.axes.InitialContext) (right)).reset();\n    }\n    if ((left instanceof java.util.Iterator) && (right instanceof java.util.Iterator)) {\n        return findMatch(((java.util.Iterator) (left)), ((java.util.Iterator) (right)));\n    }\n    if (left instanceof java.util.Iterator) {\n        return containsMatch(((java.util.Iterator) (left)), right);\n    }\n    if (right instanceof java.util.Iterator) {\n        return containsMatch(((java.util.Iterator) (right)), left);\n    }\n    return evaluateCompare(compare(left, right));\n}",
            "src_parent": "public abstract class CoreOperationRelationalExpression extends org.apache.commons.jxpath.ri.compiler.CoreOperation {\n    protected CoreOperationRelationalExpression(org.apache.commons.jxpath.ri.compiler.Expression[] args) {\n        super(args);\n    }\n\n    public final java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {\n        return compute(args[0].computeValue(context), args[1].computeValue(context)) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE;\n    }\n\n    protected final int getPrecedence() {\n        return 3;\n    }\n\n    protected final boolean isSymmetric() {\n        return false;\n    }\n\n    protected abstract boolean evaluateCompare(int compare);\n\n    private boolean compute(java.lang.Object left, java.lang.Object right) {\n        left = reduce(left);\n        right = reduce(right);\n        if (left instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (left)).reset();\n        }\n        if (right instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (right)).reset();\n        }\n        if ((left instanceof java.util.Iterator) && (right instanceof java.util.Iterator)) {\n            return findMatch(((java.util.Iterator) (left)), ((java.util.Iterator) (right)));\n        }\n        if (left instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (left)), right);\n        }\n        if (right instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (right)), left);\n        }\n        return evaluateCompare(compare(left, right));\n    }\n\n    private java.lang.Object reduce(java.lang.Object o) {\n        if (o instanceof org.apache.commons.jxpath.ri.axes.SelfContext) {\n            o = ((org.apache.commons.jxpath.ri.EvalContext) (o)).getSingleNodePointer();\n        }\n        if (o instanceof java.util.Collection) {\n            o = ((java.util.Collection) (o)).iterator();\n        }\n        return o;\n    }\n\n    private boolean containsMatch(java.util.Iterator it, java.lang.Object value) {\n        while (it.hasNext()) {\n            java.lang.Object element = it.next();\n            if (evaluateCompare(compare(element, value))) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private boolean findMatch(java.util.Iterator lit, java.util.Iterator rit) {\n        java.util.HashSet left = new java.util.HashSet();\n        while (lit.hasNext()) {\n            left.add(lit.next());\n        } \n        while (rit.hasNext()) {\n            if (containsMatch(left.iterator(), rit.next())) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private int compare(java.lang.Object l, java.lang.Object r) {\n        double ld = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(l);\n        double rd = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(r);\n        return ld == rd ? 0 : ld < rd ? -1 : 1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "CONSTANT": {
            "3": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            },
            "false": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            }
          },
          "FEATURES_LOGICAL_EXPRESSION": {
            "logical_expression_0_false": {
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_LEFT": "false",
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_RIGHT": "false",
              "LE10_ATOMIC_EXPRESSION_MULTIPLE_VAR_AS_BOOLEAN": "false",
              "LE10_ATOMIC_EXPRESSION_SAME_INVOCATION_TARGET": "false",
              "LE10_ATOMIC_EXPRESSION_USED_IN_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE10_CONTAINS_ALL_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE1_EXISTS_RELATED_BOOLEAN_EXPRESSION": "false",
              "LE2_IS_BOOLEAN_METHOD_PARAM_TYPE_VAR": "false",
              "LE3_IS_COMPATIBLE_VAR_NOT_INCLUDED": "false",
              "LE4_EXISTS_LOCAL_UNUSED_VARIABLES": "false",
              "LE5_COMPLEX_REFERENCE": "false",
              "LE6_HAS_NEGATION": "false",
              "LE8_SCOPE_VAR_USED_OTHER_BOOLEXPER": "false",
              "LE9_EQUAL_NOTEQUAL_NULL_CHECK": "false",
              "LE9_MIX_CHECK": "false",
              "LE9_NORMAL_CHECK": "false",
              "LE9_NULL_CHECK": "false"
            }
          },
          "FEATURES_METHODS": {
            "<init>": {
              "M10_METHOD_CALL_WITH_NULL_GUARD": "false",
              "M10_WRAPTTED_IN_OTHER_CALLS": "false",
              "M11_Satrt_With_Get": "false",
              "M12_Has_Var_Similar_In_Name": "false",
              "M12_METHOD_CALL_WITH_TRY_CATCH": "false",
              "M13_Argument_Has_Primitive": "false",
              "M1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "M1_LOCAL_VAR_NOT_USED": "false",
              "M1_OVERLOADED_METHOD": "false",
              "M2_SIMILAR_METHOD_WITH_SAME_RETURN": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
              "M3_ANOTHER_METHOD_WITH_PARAMETER_RETURN_COMP": "false",
              "M4_Field_NOT_ASSIGNED": "false",
              "M4_Field_NOT_USED": "false",
              "M4_PARAMETER_RETURN_COMPABILITY": "true",
              "M5_MI_WITH_COMPATIBLE_VAR_TYPE": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
              "M6_INV_Invocation_INV_REPLACE_BY_VAR": "false",
              "M7_INV_Invocation_INV_REPLACE_BY_INV": "false",
              "M7_OBJECT_USED_IN_ASSIGNMENT": "false",
              "M8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
              "M8_RETURN_PRIMITIVE": "false",
              "M9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
              "M9_RETURN_OBJECTIVE": "true"
            }
          },
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {
            "args": {
              "V10_VAR_TYPE_Similar_VAR": "false",
              "V11_VAR_COMPATIBLE_TYPE_IN_CONDITION": "false",
              "V12_VAR_Invocation_VAR_REPLACE_BY_VAR": "false",
              "V13_VAR_Invocation_VAR_REPLACE_BY_INVOCATION": "false",
              "V14_VAR_INSTANCE_OF_CLASS": "false",
              "V16_IS_METHOD_PARAMETER_TYPE_VAR": "true",
              "V17_VAR_IS_ENUMERATION": "false",
              "V18_Has_Method_Similar_In_Name": "false",
              "V19_With_Special_Name": "false",
              "V1_IS_TYPE_COMPATIBLE_METHOD_CALL_PARAM_RETURN": "true",
              "V1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "V1_LOCAL_VAR_NOT_USED": "false",
              "V2_HAS_VAR_SIM_NAME": "false",
              "V2_HAS_VAR_SIM_NAME_COMP_TYPE": "false",
              "V3_HAS_CONSTANT": "false",
              "V4B_USED_MULTIPLE_AS_PARAMETER": "false",
              "V4_FIRST_TIME_USED_AS_PARAMETER": "true",
              "V4_Field_NOT_ASSIGNED": "false",
              "V4_Field_NOT_USED": "false",
              "V5_HAS_VAR_IN_TRANSFORMATION": "false",
              "V6_IS_METHOD_RETURN_TYPE_VAR": "true",
              "V8_VAR_OBJECT": "true",
              "V8_VAR_PRIMITIVE": "false",
              "V9_VAR_TYPE_Similar_Literal": "false"
            }
          },
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private java.lang.Object reduce(java.lang.Object o) {\n    if (o instanceof org.apache.commons.jxpath.ri.axes.SelfContext) {\n        o = ((org.apache.commons.jxpath.ri.EvalContext) (o)).getSingleNodePointer();\n    }\n    if (o instanceof java.util.Collection) {\n        o = ((java.util.Collection) (o)).iterator();\n    }\n    return o;\n}",
            "src_parent": "public abstract class CoreOperationRelationalExpression extends org.apache.commons.jxpath.ri.compiler.CoreOperation {\n    protected CoreOperationRelationalExpression(org.apache.commons.jxpath.ri.compiler.Expression[] args) {\n        super(args);\n    }\n\n    public final java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {\n        return compute(args[0].computeValue(context), args[1].computeValue(context)) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE;\n    }\n\n    protected final int getPrecedence() {\n        return 3;\n    }\n\n    protected final boolean isSymmetric() {\n        return false;\n    }\n\n    protected abstract boolean evaluateCompare(int compare);\n\n    private boolean compute(java.lang.Object left, java.lang.Object right) {\n        left = reduce(left);\n        right = reduce(right);\n        if (left instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (left)).reset();\n        }\n        if (right instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (right)).reset();\n        }\n        if ((left instanceof java.util.Iterator) && (right instanceof java.util.Iterator)) {\n            return findMatch(((java.util.Iterator) (left)), ((java.util.Iterator) (right)));\n        }\n        if (left instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (left)), right);\n        }\n        if (right instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (right)), left);\n        }\n        return evaluateCompare(compare(left, right));\n    }\n\n    private java.lang.Object reduce(java.lang.Object o) {\n        if (o instanceof org.apache.commons.jxpath.ri.axes.SelfContext) {\n            o = ((org.apache.commons.jxpath.ri.EvalContext) (o)).getSingleNodePointer();\n        }\n        if (o instanceof java.util.Collection) {\n            o = ((java.util.Collection) (o)).iterator();\n        }\n        return o;\n    }\n\n    private boolean containsMatch(java.util.Iterator it, java.lang.Object value) {\n        while (it.hasNext()) {\n            java.lang.Object element = it.next();\n            if (evaluateCompare(compare(element, value))) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private boolean findMatch(java.util.Iterator lit, java.util.Iterator rit) {\n        java.util.HashSet left = new java.util.HashSet();\n        while (lit.hasNext()) {\n            left.add(lit.next());\n        } \n        while (rit.hasNext()) {\n            if (containsMatch(left.iterator(), rit.next())) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private int compare(java.lang.Object l, java.lang.Object r) {\n        double ld = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(l);\n        double rd = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(r);\n        return ld == rd ? 0 : ld < rd ? -1 : 1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "CONSTANT": {
            "3": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            },
            "false": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            }
          },
          "FEATURES_LOGICAL_EXPRESSION": {
            "logical_expression_0_false": {
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_LEFT": "false",
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_RIGHT": "false",
              "LE10_ATOMIC_EXPRESSION_MULTIPLE_VAR_AS_BOOLEAN": "false",
              "LE10_ATOMIC_EXPRESSION_SAME_INVOCATION_TARGET": "false",
              "LE10_ATOMIC_EXPRESSION_USED_IN_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE10_CONTAINS_ALL_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE1_EXISTS_RELATED_BOOLEAN_EXPRESSION": "false",
              "LE2_IS_BOOLEAN_METHOD_PARAM_TYPE_VAR": "false",
              "LE3_IS_COMPATIBLE_VAR_NOT_INCLUDED": "false",
              "LE4_EXISTS_LOCAL_UNUSED_VARIABLES": "false",
              "LE5_COMPLEX_REFERENCE": "false",
              "LE6_HAS_NEGATION": "false",
              "LE8_SCOPE_VAR_USED_OTHER_BOOLEXPER": "false",
              "LE9_EQUAL_NOTEQUAL_NULL_CHECK": "false",
              "LE9_MIX_CHECK": "false",
              "LE9_NORMAL_CHECK": "false",
              "LE9_NULL_CHECK": "false"
            }
          },
          "FEATURES_METHODS": {
            "<init>": {
              "M10_METHOD_CALL_WITH_NULL_GUARD": "false",
              "M10_WRAPTTED_IN_OTHER_CALLS": "false",
              "M11_Satrt_With_Get": "false",
              "M12_Has_Var_Similar_In_Name": "false",
              "M12_METHOD_CALL_WITH_TRY_CATCH": "false",
              "M13_Argument_Has_Primitive": "false",
              "M1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "M1_LOCAL_VAR_NOT_USED": "false",
              "M1_OVERLOADED_METHOD": "false",
              "M2_SIMILAR_METHOD_WITH_SAME_RETURN": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
              "M3_ANOTHER_METHOD_WITH_PARAMETER_RETURN_COMP": "false",
              "M4_Field_NOT_ASSIGNED": "false",
              "M4_Field_NOT_USED": "false",
              "M4_PARAMETER_RETURN_COMPABILITY": "true",
              "M5_MI_WITH_COMPATIBLE_VAR_TYPE": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
              "M6_INV_Invocation_INV_REPLACE_BY_VAR": "false",
              "M7_INV_Invocation_INV_REPLACE_BY_INV": "false",
              "M7_OBJECT_USED_IN_ASSIGNMENT": "false",
              "M8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
              "M8_RETURN_PRIMITIVE": "false",
              "M9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
              "M9_RETURN_OBJECTIVE": "true"
            }
          },
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {
            "args": {
              "V10_VAR_TYPE_Similar_VAR": "false",
              "V11_VAR_COMPATIBLE_TYPE_IN_CONDITION": "false",
              "V12_VAR_Invocation_VAR_REPLACE_BY_VAR": "false",
              "V13_VAR_Invocation_VAR_REPLACE_BY_INVOCATION": "false",
              "V14_VAR_INSTANCE_OF_CLASS": "false",
              "V16_IS_METHOD_PARAMETER_TYPE_VAR": "true",
              "V17_VAR_IS_ENUMERATION": "false",
              "V18_Has_Method_Similar_In_Name": "false",
              "V19_With_Special_Name": "false",
              "V1_IS_TYPE_COMPATIBLE_METHOD_CALL_PARAM_RETURN": "true",
              "V1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "V1_LOCAL_VAR_NOT_USED": "false",
              "V2_HAS_VAR_SIM_NAME": "false",
              "V2_HAS_VAR_SIM_NAME_COMP_TYPE": "false",
              "V3_HAS_CONSTANT": "false",
              "V4B_USED_MULTIPLE_AS_PARAMETER": "false",
              "V4_FIRST_TIME_USED_AS_PARAMETER": "true",
              "V4_Field_NOT_ASSIGNED": "false",
              "V4_Field_NOT_USED": "false",
              "V5_HAS_VAR_IN_TRANSFORMATION": "false",
              "V6_IS_METHOD_RETURN_TYPE_VAR": "true",
              "V8_VAR_OBJECT": "true",
              "V8_VAR_PRIMITIVE": "false",
              "V9_VAR_TYPE_Similar_Literal": "false"
            }
          },
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean containsMatch(java.util.Iterator it, java.lang.Object value) {\n    while (it.hasNext()) {\n        java.lang.Object element = it.next();\n        if (evaluateCompare(compare(element, value))) {\n            return true;\n        }\n    } \n    return false;\n}",
            "src_parent": "public abstract class CoreOperationRelationalExpression extends org.apache.commons.jxpath.ri.compiler.CoreOperation {\n    protected CoreOperationRelationalExpression(org.apache.commons.jxpath.ri.compiler.Expression[] args) {\n        super(args);\n    }\n\n    public final java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {\n        return compute(args[0].computeValue(context), args[1].computeValue(context)) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE;\n    }\n\n    protected final int getPrecedence() {\n        return 3;\n    }\n\n    protected final boolean isSymmetric() {\n        return false;\n    }\n\n    protected abstract boolean evaluateCompare(int compare);\n\n    private boolean compute(java.lang.Object left, java.lang.Object right) {\n        left = reduce(left);\n        right = reduce(right);\n        if (left instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (left)).reset();\n        }\n        if (right instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (right)).reset();\n        }\n        if ((left instanceof java.util.Iterator) && (right instanceof java.util.Iterator)) {\n            return findMatch(((java.util.Iterator) (left)), ((java.util.Iterator) (right)));\n        }\n        if (left instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (left)), right);\n        }\n        if (right instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (right)), left);\n        }\n        return evaluateCompare(compare(left, right));\n    }\n\n    private java.lang.Object reduce(java.lang.Object o) {\n        if (o instanceof org.apache.commons.jxpath.ri.axes.SelfContext) {\n            o = ((org.apache.commons.jxpath.ri.EvalContext) (o)).getSingleNodePointer();\n        }\n        if (o instanceof java.util.Collection) {\n            o = ((java.util.Collection) (o)).iterator();\n        }\n        return o;\n    }\n\n    private boolean containsMatch(java.util.Iterator it, java.lang.Object value) {\n        while (it.hasNext()) {\n            java.lang.Object element = it.next();\n            if (evaluateCompare(compare(element, value))) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private boolean findMatch(java.util.Iterator lit, java.util.Iterator rit) {\n        java.util.HashSet left = new java.util.HashSet();\n        while (lit.hasNext()) {\n            left.add(lit.next());\n        } \n        while (rit.hasNext()) {\n            if (containsMatch(left.iterator(), rit.next())) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private int compare(java.lang.Object l, java.lang.Object r) {\n        double ld = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(l);\n        double rd = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(r);\n        return ld == rd ? 0 : ld < rd ? -1 : 1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "CONSTANT": {
            "3": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            },
            "false": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            }
          },
          "FEATURES_LOGICAL_EXPRESSION": {
            "logical_expression_0_false": {
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_LEFT": "false",
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_RIGHT": "false",
              "LE10_ATOMIC_EXPRESSION_MULTIPLE_VAR_AS_BOOLEAN": "false",
              "LE10_ATOMIC_EXPRESSION_SAME_INVOCATION_TARGET": "false",
              "LE10_ATOMIC_EXPRESSION_USED_IN_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE10_CONTAINS_ALL_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE1_EXISTS_RELATED_BOOLEAN_EXPRESSION": "false",
              "LE2_IS_BOOLEAN_METHOD_PARAM_TYPE_VAR": "false",
              "LE3_IS_COMPATIBLE_VAR_NOT_INCLUDED": "false",
              "LE4_EXISTS_LOCAL_UNUSED_VARIABLES": "false",
              "LE5_COMPLEX_REFERENCE": "false",
              "LE6_HAS_NEGATION": "false",
              "LE8_SCOPE_VAR_USED_OTHER_BOOLEXPER": "false",
              "LE9_EQUAL_NOTEQUAL_NULL_CHECK": "false",
              "LE9_MIX_CHECK": "false",
              "LE9_NORMAL_CHECK": "false",
              "LE9_NULL_CHECK": "false"
            }
          },
          "FEATURES_METHODS": {
            "<init>": {
              "M10_METHOD_CALL_WITH_NULL_GUARD": "false",
              "M10_WRAPTTED_IN_OTHER_CALLS": "false",
              "M11_Satrt_With_Get": "false",
              "M12_Has_Var_Similar_In_Name": "false",
              "M12_METHOD_CALL_WITH_TRY_CATCH": "false",
              "M13_Argument_Has_Primitive": "false",
              "M1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "M1_LOCAL_VAR_NOT_USED": "false",
              "M1_OVERLOADED_METHOD": "false",
              "M2_SIMILAR_METHOD_WITH_SAME_RETURN": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
              "M3_ANOTHER_METHOD_WITH_PARAMETER_RETURN_COMP": "false",
              "M4_Field_NOT_ASSIGNED": "false",
              "M4_Field_NOT_USED": "false",
              "M4_PARAMETER_RETURN_COMPABILITY": "true",
              "M5_MI_WITH_COMPATIBLE_VAR_TYPE": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
              "M6_INV_Invocation_INV_REPLACE_BY_VAR": "false",
              "M7_INV_Invocation_INV_REPLACE_BY_INV": "false",
              "M7_OBJECT_USED_IN_ASSIGNMENT": "false",
              "M8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
              "M8_RETURN_PRIMITIVE": "false",
              "M9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
              "M9_RETURN_OBJECTIVE": "true"
            }
          },
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {
            "args": {
              "V10_VAR_TYPE_Similar_VAR": "false",
              "V11_VAR_COMPATIBLE_TYPE_IN_CONDITION": "false",
              "V12_VAR_Invocation_VAR_REPLACE_BY_VAR": "false",
              "V13_VAR_Invocation_VAR_REPLACE_BY_INVOCATION": "false",
              "V14_VAR_INSTANCE_OF_CLASS": "false",
              "V16_IS_METHOD_PARAMETER_TYPE_VAR": "true",
              "V17_VAR_IS_ENUMERATION": "false",
              "V18_Has_Method_Similar_In_Name": "false",
              "V19_With_Special_Name": "false",
              "V1_IS_TYPE_COMPATIBLE_METHOD_CALL_PARAM_RETURN": "true",
              "V1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "V1_LOCAL_VAR_NOT_USED": "false",
              "V2_HAS_VAR_SIM_NAME": "false",
              "V2_HAS_VAR_SIM_NAME_COMP_TYPE": "false",
              "V3_HAS_CONSTANT": "false",
              "V4B_USED_MULTIPLE_AS_PARAMETER": "false",
              "V4_FIRST_TIME_USED_AS_PARAMETER": "true",
              "V4_Field_NOT_ASSIGNED": "false",
              "V4_Field_NOT_USED": "false",
              "V5_HAS_VAR_IN_TRANSFORMATION": "false",
              "V6_IS_METHOD_RETURN_TYPE_VAR": "true",
              "V8_VAR_OBJECT": "true",
              "V8_VAR_PRIMITIVE": "false",
              "V9_VAR_TYPE_Similar_Literal": "false"
            }
          },
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean findMatch(java.util.Iterator lit, java.util.Iterator rit) {\n    java.util.HashSet left = new java.util.HashSet();\n    while (lit.hasNext()) {\n        left.add(lit.next());\n    } \n    while (rit.hasNext()) {\n        if (containsMatch(left.iterator(), rit.next())) {\n            return true;\n        }\n    } \n    return false;\n}",
            "src_parent": "public abstract class CoreOperationRelationalExpression extends org.apache.commons.jxpath.ri.compiler.CoreOperation {\n    protected CoreOperationRelationalExpression(org.apache.commons.jxpath.ri.compiler.Expression[] args) {\n        super(args);\n    }\n\n    public final java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {\n        return compute(args[0].computeValue(context), args[1].computeValue(context)) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE;\n    }\n\n    protected final int getPrecedence() {\n        return 3;\n    }\n\n    protected final boolean isSymmetric() {\n        return false;\n    }\n\n    protected abstract boolean evaluateCompare(int compare);\n\n    private boolean compute(java.lang.Object left, java.lang.Object right) {\n        left = reduce(left);\n        right = reduce(right);\n        if (left instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (left)).reset();\n        }\n        if (right instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (right)).reset();\n        }\n        if ((left instanceof java.util.Iterator) && (right instanceof java.util.Iterator)) {\n            return findMatch(((java.util.Iterator) (left)), ((java.util.Iterator) (right)));\n        }\n        if (left instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (left)), right);\n        }\n        if (right instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (right)), left);\n        }\n        return evaluateCompare(compare(left, right));\n    }\n\n    private java.lang.Object reduce(java.lang.Object o) {\n        if (o instanceof org.apache.commons.jxpath.ri.axes.SelfContext) {\n            o = ((org.apache.commons.jxpath.ri.EvalContext) (o)).getSingleNodePointer();\n        }\n        if (o instanceof java.util.Collection) {\n            o = ((java.util.Collection) (o)).iterator();\n        }\n        return o;\n    }\n\n    private boolean containsMatch(java.util.Iterator it, java.lang.Object value) {\n        while (it.hasNext()) {\n            java.lang.Object element = it.next();\n            if (evaluateCompare(compare(element, value))) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private boolean findMatch(java.util.Iterator lit, java.util.Iterator rit) {\n        java.util.HashSet left = new java.util.HashSet();\n        while (lit.hasNext()) {\n            left.add(lit.next());\n        } \n        while (rit.hasNext()) {\n            if (containsMatch(left.iterator(), rit.next())) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private int compare(java.lang.Object l, java.lang.Object r) {\n        double ld = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(l);\n        double rd = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(r);\n        return ld == rd ? 0 : ld < rd ? -1 : 1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "CONSTANT": {
            "3": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            },
            "false": {
              "C1_SAME_TYPE_CONSTANT": "false",
              "C2_SAME_TYPE_CONSTANT_VAR": "false",
              "C2_SAME_TYPE_VAR": "false"
            }
          },
          "FEATURES_LOGICAL_EXPRESSION": {
            "logical_expression_0_false": {
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_LEFT": "false",
              "LE10_ATOMIC_EXPRESSION_COMPARISION_SAME_RIGHT": "false",
              "LE10_ATOMIC_EXPRESSION_MULTIPLE_VAR_AS_BOOLEAN": "false",
              "LE10_ATOMIC_EXPRESSION_SAME_INVOCATION_TARGET": "false",
              "LE10_ATOMIC_EXPRESSION_USED_IN_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE10_CONTAINS_ALL_INVOCATION_COMPARISION_VARIABLE": "false",
              "LE1_EXISTS_RELATED_BOOLEAN_EXPRESSION": "false",
              "LE2_IS_BOOLEAN_METHOD_PARAM_TYPE_VAR": "false",
              "LE3_IS_COMPATIBLE_VAR_NOT_INCLUDED": "false",
              "LE4_EXISTS_LOCAL_UNUSED_VARIABLES": "false",
              "LE5_COMPLEX_REFERENCE": "false",
              "LE6_HAS_NEGATION": "false",
              "LE8_SCOPE_VAR_USED_OTHER_BOOLEXPER": "false",
              "LE9_EQUAL_NOTEQUAL_NULL_CHECK": "false",
              "LE9_MIX_CHECK": "false",
              "LE9_NORMAL_CHECK": "false",
              "LE9_NULL_CHECK": "false"
            }
          },
          "FEATURES_METHODS": {
            "<init>": {
              "M10_METHOD_CALL_WITH_NULL_GUARD": "false",
              "M10_WRAPTTED_IN_OTHER_CALLS": "false",
              "M11_Satrt_With_Get": "false",
              "M12_Has_Var_Similar_In_Name": "false",
              "M12_METHOD_CALL_WITH_TRY_CATCH": "false",
              "M13_Argument_Has_Primitive": "false",
              "M1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "M1_LOCAL_VAR_NOT_USED": "false",
              "M1_OVERLOADED_METHOD": "false",
              "M2_SIMILAR_METHOD_WITH_SAME_RETURN": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
              "M2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
              "M3_ANOTHER_METHOD_WITH_PARAMETER_RETURN_COMP": "false",
              "M4_Field_NOT_ASSIGNED": "false",
              "M4_Field_NOT_USED": "false",
              "M4_PARAMETER_RETURN_COMPABILITY": "true",
              "M5_MI_WITH_COMPATIBLE_VAR_TYPE": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
              "M5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
              "M6_INV_Invocation_INV_REPLACE_BY_VAR": "false",
              "M7_INV_Invocation_INV_REPLACE_BY_INV": "false",
              "M7_OBJECT_USED_IN_ASSIGNMENT": "false",
              "M8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
              "M8_RETURN_PRIMITIVE": "false",
              "M9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
              "M9_RETURN_OBJECTIVE": "true"
            }
          },
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {
            "args": {
              "V10_VAR_TYPE_Similar_VAR": "false",
              "V11_VAR_COMPATIBLE_TYPE_IN_CONDITION": "false",
              "V12_VAR_Invocation_VAR_REPLACE_BY_VAR": "false",
              "V13_VAR_Invocation_VAR_REPLACE_BY_INVOCATION": "false",
              "V14_VAR_INSTANCE_OF_CLASS": "false",
              "V16_IS_METHOD_PARAMETER_TYPE_VAR": "true",
              "V17_VAR_IS_ENUMERATION": "false",
              "V18_Has_Method_Similar_In_Name": "false",
              "V19_With_Special_Name": "false",
              "V1_IS_TYPE_COMPATIBLE_METHOD_CALL_PARAM_RETURN": "true",
              "V1_LOCAL_VAR_NOT_ASSIGNED": "false",
              "V1_LOCAL_VAR_NOT_USED": "false",
              "V2_HAS_VAR_SIM_NAME": "false",
              "V2_HAS_VAR_SIM_NAME_COMP_TYPE": "false",
              "V3_HAS_CONSTANT": "false",
              "V4B_USED_MULTIPLE_AS_PARAMETER": "false",
              "V4_FIRST_TIME_USED_AS_PARAMETER": "true",
              "V4_Field_NOT_ASSIGNED": "false",
              "V4_Field_NOT_USED": "false",
              "V5_HAS_VAR_IN_TRANSFORMATION": "false",
              "V6_IS_METHOD_RETURN_TYPE_VAR": "true",
              "V8_VAR_OBJECT": "true",
              "V8_VAR_PRIMITIVE": "false",
              "V9_VAR_TYPE_Similar_Literal": "false"
            }
          },
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private int compare(java.lang.Object l, java.lang.Object r) {\n    double ld = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(l);\n    double rd = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(r);\n    return ld == rd ? 0 : ld < rd ? -1 : 1;\n}",
            "src_parent": "public abstract class CoreOperationRelationalExpression extends org.apache.commons.jxpath.ri.compiler.CoreOperation {\n    protected CoreOperationRelationalExpression(org.apache.commons.jxpath.ri.compiler.Expression[] args) {\n        super(args);\n    }\n\n    public final java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {\n        return compute(args[0].computeValue(context), args[1].computeValue(context)) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE;\n    }\n\n    protected final int getPrecedence() {\n        return 3;\n    }\n\n    protected final boolean isSymmetric() {\n        return false;\n    }\n\n    protected abstract boolean evaluateCompare(int compare);\n\n    private boolean compute(java.lang.Object left, java.lang.Object right) {\n        left = reduce(left);\n        right = reduce(right);\n        if (left instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (left)).reset();\n        }\n        if (right instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {\n            ((org.apache.commons.jxpath.ri.axes.InitialContext) (right)).reset();\n        }\n        if ((left instanceof java.util.Iterator) && (right instanceof java.util.Iterator)) {\n            return findMatch(((java.util.Iterator) (left)), ((java.util.Iterator) (right)));\n        }\n        if (left instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (left)), right);\n        }\n        if (right instanceof java.util.Iterator) {\n            return containsMatch(((java.util.Iterator) (right)), left);\n        }\n        return evaluateCompare(compare(left, right));\n    }\n\n    private java.lang.Object reduce(java.lang.Object o) {\n        if (o instanceof org.apache.commons.jxpath.ri.axes.SelfContext) {\n            o = ((org.apache.commons.jxpath.ri.EvalContext) (o)).getSingleNodePointer();\n        }\n        if (o instanceof java.util.Collection) {\n            o = ((java.util.Collection) (o)).iterator();\n        }\n        return o;\n    }\n\n    private boolean containsMatch(java.util.Iterator it, java.lang.Object value) {\n        while (it.hasNext()) {\n            java.lang.Object element = it.next();\n            if (evaluateCompare(compare(element, value))) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private boolean findMatch(java.util.Iterator lit, java.util.Iterator rit) {\n        java.util.HashSet left = new java.util.HashSet();\n        while (lit.hasNext()) {\n            left.add(lit.next());\n        } \n        while (rit.hasNext()) {\n            if (containsMatch(left.iterator(), rit.next())) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private int compare(java.lang.Object l, java.lang.Object r) {\n        double ld = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(l);\n        double rd = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(r);\n        return ld == rd ? 0 : ld < rd ? -1 : 1;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {},
        {
          "repairPatterns": {
            "codeMove": 0,
            "condBlockExcAdd": 0,
            "condBlockOthersAdd": 0,
            "condBlockRem": 0,
            "condBlockRetAdd": 0,
            "constChange": 0,
            "copyPaste": 0,
            "expArithMod": 0,
            "expLogicExpand": 0,
            "expLogicMod": 0,
            "expLogicReduce": 0,
            "missNullCheckN": 0,
            "missNullCheckP": 0,
            "notClassified": 0,
            "singleLine": 0,
            "unwrapIfElse": 0,
            "unwrapMethod": 0,
            "unwrapTryCatch": 0,
            "wrapsElse": 0,
            "wrapsIf": 0,
            "wrapsIfElse": 0,
            "wrapsLoop": 0,
            "wrapsMethod": 0,
            "wrapsTryCatch": 0,
            "wrongMethodRef": 0,
            "wrongVarRef": 0
          }
        }
      ],
      "file_name": "Developer"
    }
  ],
  "id": "patch1#5-JxPath-7"
}