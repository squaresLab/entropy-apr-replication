diff --git a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
index 627271f9..84693502 100644
--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
@@ -154,35 +154,7 @@ class MakeDeclaredNamesUnique
 
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
-    switch (n.getType()) {
-      case Token.NAME:
-        String newName = getReplacementName(n.getString());
-        if (newName != null) {
-          Renamer renamer = nameStack.peek();
-          if (renamer.stripConstIfReplaced()) {
-            // TODO(johnlenz): Do we need to do anything about the javadoc?
-            n.removeProp(Node.IS_CONSTANT_NAME);
-          }
-          n.setString(newName);
-          t.getCompiler().reportCodeChange();
-        }
-        break;
-
-      case Token.FUNCTION:
-        // Remove the function body scope
-        // Remove function recursive name (if any).
-        nameStack.pop();
-        break;
-
-        // Note: The parameters and function body variables live in the
-        // same scope, we introduce the scope when in the "shouldTraverse"
-        // visit of LP, but remove it when when we exit the function above.
-
-      case Token.CATCH:
-        // Remove catch except name from the stack of names.
-        nameStack.pop();
-        break;
-    }
+    
   }
 
   /**