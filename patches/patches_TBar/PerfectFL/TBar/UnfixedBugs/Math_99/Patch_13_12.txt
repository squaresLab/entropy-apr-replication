diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java
index d51ec7a9f..a20170a02 100644
--- a/src/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/java/org/apache/commons/math/util/MathUtils.java
@@ -683,36 +683,7 @@ public final class MathUtils {
         return (x >= ZS) ? PS : NS;
     }
 
-    /**
-     * <p>
-     * Returns the least common multiple of the absolute value of two numbers,
-     * using the formula <code>lcm(a,b) = (a / gcd(a,b)) * b</code>.
-     * </p>
-     * Special cases:
-     * <ul>
-     * <li>The invocations <code>lcm(Integer.MIN_VALUE, n)</code> and
-     * <code>lcm(n, Integer.MIN_VALUE)</code>, where <code>abs(n)</code> is a
-     * power of 2, throw an <code>ArithmeticException</code>, because the result
-     * would be 2^31, which is too large for an int value.</li>
-     * <li>The result of <code>lcm(0, x)</code> and <code>lcm(x, 0)</code> is
-     * <code>0</code> for any <code>x</code>.
-     * </ul>
-     * 
-     * @param a any number
-     * @param b any number
-     * @return the least common multiple, never negative
-     * @throws ArithmeticException
-     *             if the result cannot be represented as a nonnegative int
-     *             value
-     * @since 1.1
-     */
-    public static int lcm(int a, int b) {
-        if (a==0 || b==0){
-            return 0;
-        }
-        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
-        return lcm;
-    }
+    
 
     /** 
      * <p>Returns the