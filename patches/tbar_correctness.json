[{'bugID': 'Math50', 'Tbar_delete': ['if (x == x1) {'], 'Tbar_add': ['if (x>x1) {'], 'Correct_delete': ['x0  =  0.5  *  (x0  +  x1  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  '], 'Correct_add': ['   ']}, {'bugID': 'Chart8', 'Tbar_delete': ['this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());'], 'Tbar_add': ['this(time, zone, Locale.getDefault());'], 'Correct_delete': ['this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());  '], 'Correct_add': ['this(time, zone, Locale.getDefault()); ']}, {'bugID': 'Closure4', 'Tbar_delete': ['if (detectImplicitPrototypeCycle()) {'], 'Tbar_add': ['if (detectInheritanceCycle()) {'], 'Correct_delete': ['if  (detectImplicitPrototypeCycle())  {  '], 'Correct_add': ['if(detectInheritanceCycle()  )  { ']}, {'bugID': 'Closure62', 'Tbar_delete': ['&& 0 <= charno && charno < sourceExcerpt.length()) {'], 'Tbar_add': ['&& 0 <= charno && charno<=sourceExcerpt.length()) {'], 'Correct_delete': ['if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  '], 'Correct_add': ['if(excerpt.equals(LINE) &&  0  <=  charno  &&  charno  <=  sourceExcerpt.length())  { ']}, {'bugID': 'Math30', 'Tbar_delete': ['final int n1n2prod = n1 * n2;'], 'Tbar_add': ['final double n1n2prod = n1 * n2;'], 'Correct_delete': ['final  int  n1n2prod  =  n1  *  n2;  '], 'Correct_add': ['final  double  n1n2prod  =  n1  *  n2; ']}, {'bugID': 'Math85', 'Tbar_delete': ['if (fa * fb >= 0.0 ) {'], 'Tbar_add': ['if (fa * fb>0.0 ) {'], 'Correct_delete': ['if  (fa  *  fb  >=  0.0  )  {  '], 'Correct_add': ['if  (fa  *  fb  >  0.0)  { ']}, {'bugID': 'Lang57', 'Tbar_delete': ['return cAvailableLocaleSet.contains(locale);'], 'Tbar_add': ['return availableLocaleList().contains(locale);'], 'Correct_delete': ['return  cAvailableLocaleSet.contains(locale);  '], 'Correct_add': ['return  cAvailableLocaleList.contains(locale); ']}, {'bugID': 'Chart11', 'Tbar_delete': ['PathIterator iterator2 = p1.getPathIterator(null);'], 'Tbar_add': ['PathIterator iterator2 = p2.getPathIterator(null);'], 'Correct_delete': ['PathIterator  iterator2  =  p1.getPathIterator(null);  '], 'Correct_add': ['PathIterator  iterator2  =  p2.getPathIterator(null); ']}, {'bugID': 'Closure86', 'Tbar_delete': ['return true;'], 'Tbar_add': ['return false;'], 'Correct_delete': ['return  true;  '], 'Correct_add': ['return  false; ']}, {'bugID': 'Chart20', 'Tbar_delete': ['super(paint, stroke, paint, stroke, alpha);'], 'Tbar_add': ['super(paint, stroke, outlinePaint, outlineStroke, alpha);'], 'Correct_delete': ['super(paint, stroke, paint, stroke, alpha); ', 'super(paint, stroke, outlineStroke, alpha); '], 'Correct_add': ['super(paint, stroke, outlineStroke, alpha);', 'super(paint, stroke, outlinePaint, outlineStroke, alpha); ']}, {'bugID': 'Chart1', 'Tbar_delete': ['if (dataset != null) {'], 'Tbar_add': ['if (dataset == null) {'], 'Correct_delete': ['if  (dataset  !=  null)  {  '], 'Correct_add': ['if(dataset  ==  null)  { ']}, {'bugID': 'Math70', 'Tbar_delete': ['return solve(min, max);'], 'Tbar_add': ['return solve(f, min, max);'], 'Correct_delete': ['return solve(min, max); ', 'return solve(f, max); '], 'Correct_add': ['return solve(f, max);', 'return solve(f, min, max); ']}, {'bugID': 'Closure126', 'Tbar_delete': ['if (NodeUtil.hasFinally(n)) {'], 'Tbar_add': ['if ((NodeUtil.hasFinally(n)) && (n.isLabel())) {'], 'Correct_delete': [' Node elseBlock = n.getFirstChild();', ' tryMinimizeExits(finallyBlock, exitType, labelName);', 'tryMinimizeExits(finallyBlock, exitType, labelName); ', 'tryMinimizeExits(n, exitType, labelName); tryMinimizeExits(n, exitType, labelName); } '], 'Correct_add': [' ', 'tryMinimizeExits(n, exitType, labelName);', 'tryMinimizeExits(n, exitType, labelName); tryMinimizeExits(n, exitType, labelName); }', 'if(finallyBlock == null) { tryMinimizeExits(n, exitType, labelName); } ']}, {'bugID': 'Closure46', 'Tbar_delete': ['@Override', 'public JSType getLeastSupertype(JSType that) {', 'if (!that.isRecordType()) {', 'return super.getLeastSupertype(that);', '}', 'RecordTypeBuilder builder = new RecordTypeBuilder(registry);', 'for (String property : properties.keySet()) {', 'if (that.toMaybeRecordType().hasProperty(property) &&', 'that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(', 'getPropertyType(property))) {', 'builder.addProperty(property, getPropertyType(property),', 'getPropertyNode(property));', '}', '}', 'return builder.build();', '}'], 'Tbar_add': [''], 'Correct_delete': ['if (!that.isRecordType()) { ', 'if(that.isRecordType() || that.isConstructor()) { if(That.isRecordType() || that.isConstructor()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isConstructor()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isInferred()) { ', 'if(that.isRecordType() ||!that.isConstructor()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isInferred()) { ', 'if(that.isRecordType() ||!that.isConstructor()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) { if(this.isRecordType() ||!that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() || that.isUnknownType()) { if(that.isRecordType() || this.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() || that.isConstructor()) { ', 'if(that.isRecordType() || that.isInterface()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) { ', 'if(that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType()) { if(that.isRecordType()) < return super.getLeastSupertype(that); ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() || that.isUnknownType()) { if(this.isRecordType() || that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() || that.isUnknownType()) { if(!that.isRecordType() || that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType()) { ', 'if(that.isRecordType() || that.isAllType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isInferred()) { ', 'if(that.isRecordType() ||!that.isAllType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType()) { ', 'if(that.isRecordType() || that.isFunctionType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isFunctionType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isFunctionType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isFunctionType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) { if(That.isRecordType() ||!that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType()) { ', 'if(that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isInferred()) { ', 'if(that.isRecordType() ||!that.isAllType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isUnknownType() &&!that.isRecordType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isFunctionType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType()) { if(that.isRecordType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isConstructor()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isUnknownType() || that.isFunctionType() ||!that.isRecordType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) { ', 'if(that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) { ', 'if(that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) { ', 'if(that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isConstructor() || that.isUnknownType() ||!that.isRecordType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() || that.isConstructor()) { ', 'if(that.isUnknownType() || that.isConstructor()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType()) { ', 'if(that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isInferred()) { ', 'if(that.isRecordType() ||!that.isAllType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isConstructor()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() || that.isConstructor()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType() || that.isUnknownType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isRecordType()) { ', 'if (!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) { ', 'if  (!that.isRecordType())  {  ', 'if  (!that.isRecordType())  {  '], 'Correct_add': ['if(that.isRecordType() || that.isConstructor()) {', 'if(that.isRecordType() || that.isConstructor()) { if(That.isRecordType() || that.isConstructor()) {', 'if(this.isRecordType() || that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isUnknownType() ||!that.isConstructor()) {', 'if(!that.isUnknownType() ||!that.isConstructor()) { ', 'if(that.isRecordType() ||!that.isInferred()) {', 'if(that.isRecordType() ||!that.isConstructor()) {', 'if(!that.isRecordType() ||!that.isConstructor()) { ', 'if(that.isRecordType() ||!that.isInferred()) {', 'if(that.isRecordType() ||!that.isConstructor()) {', 'if(this.isRecordType() ||!that.isConstructor()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) {', 'if(that.isRecordType() ||!that.isUnknownType()) { if(this.isRecordType() ||!that.isUnknownType()) {', 'if(this.isRecordType() ||!that.isRecordType()) { ', 'if(that.isRecordType() || that.isUnknownType()) {', 'if(that.isRecordType() || that.isUnknownType()) { if(that.isRecordType() || this.isUnknownType()) {', 'if(that.isRecordType() || this.isRecordType()) { ', 'if(that.isRecordType() || that.isConstructor()) {', 'if(that.isRecordType() || that.isInterface()) {', 'if(this.isRecordType() || that.isInterface()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) {', 'if(that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) {', 'if(!that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) { ', 'if(that.isRecordType()) {', 'if(that.isRecordType()) { if(that.isRecordType()) < return super.getLeastSupertype(that);', 'if(this.isRecordType()) { if(that.isRecordType()) { return super.getLeastSupertype(that); } ', 'if(that.isRecordType() || that.isUnknownType()) {', 'if(that.isRecordType() || that.isUnknownType()) { if(this.isRecordType() || that.isUnknownType()) {', 'if(this.isRecordType() || that.isEquivalentTo(getLeastSupertype(that))) { ', 'if(that.isRecordType() || that.isUnknownType()) {', 'if(that.isRecordType() || that.isUnknownType()) { if(!that.isRecordType() || that.isUnknownType()) {', 'if(!that.isRecordType() || that.isRecordType()) { ', 'if(that.isRecordType()) {', 'if(that.isRecordType() || that.isAllType()) {', 'if(this.isRecordType() || that.isAllType()) { ', 'if(that.isRecordType() ||!that.isInferred()) {', 'if(that.isRecordType() ||!that.isAllType()) {', 'if(!that.isRecordType() ||!that.isAllType()) { ', 'if(that.isRecordType()) {', 'if(that.isRecordType() || that.isFunctionType()) {', 'if(this.isRecordType() || that.isFunctionType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isUnknownType() ||!that.isFunctionType()) {', 'if(that.isFunctionType() ||!that.isFunctionType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isUnknownType() ||!that.isFunctionType()) {', 'if(that.isUnknownType() ||!that.isUnknownType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isUnknownType() ||!that.isFunctionType()) {', 'if(!that.isUnknownType() ||!that.isFunctionType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) {', 'if(that.isRecordType() ||!that.isUnknownType()) { if(That.isRecordType() ||!that.isUnknownType()) {', 'if(that!= null) { ', 'if(that.isRecordType()) {', 'if(that.isUnknownType()) {', 'if(that!= null || that.isUnknownType()) { ', 'if(that.isRecordType() ||!that.isInferred()) {', 'if(that.isRecordType() ||!that.isAllType()) {', 'if(this.isRecordType() ||!that.isAllType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isUnknownType() &&!that.isRecordType()) {', 'if(that!= null || that.isUnknownType() &&!that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isUnknownType() ||!that.isFunctionType()) {', 'if(that!= null || that.isUnknownType() ||!that.isFunctionType()) { ', 'if(that.isRecordType()) {', 'if(that.isRecordType()) { if(that.isRecordType()) {', 'if(that!= null || that.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isUnknownType() ||!that.isConstructor()) {', 'if(that!= null || that.isUnknownType() ||!that.isConstructor()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isUnknownType() || that.isFunctionType() ||!that.isRecordType()) {', 'if(that.isRecordType() || that.isUnknownType() || that.isFunctionType() ||!that.isRecordType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) {', 'if(that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) {', 'if(that.isConstructor() || that.isUnknownType() ||!that.isUnknownType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) {', 'if(that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) {', 'if(that.isUnknownType() || that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) {', 'if(that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) {', 'if(that!= null || that.isConstructor() || that.isRecordType() ||!that.isUnknownType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isConstructor() || that.isUnknownType() ||!that.isRecordType()) {', 'if(that!= null || that.isConstructor() || that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isRecordType() || that.isConstructor()) {', 'if(that.isUnknownType() || that.isConstructor()) {', 'if(that!= null || that.isUnknownType() || that.isConstructor()) { ', 'if(that.isRecordType()) {', 'if(that.isUnknownType()) {', 'if(that.isUnknownType() || that.isSubtype(getNativeType(JSTypeNative.UNKNOWN_TYPE))) { ', 'if(that.isRecordType() ||!that.isInferred()) {', 'if(that.isRecordType() ||!that.isAllType()) {', 'if(that.isAllType() ||!that.isAllType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that.isUnknownType() ||!that.isConstructor()) {', 'if(that.isUnknownType() ||!that.isInterface()) { ', 'if(that.isRecordType() || that.isConstructor()) {', 'if(this.isRecordType() || that.isConstructor()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) {', 'if(!that.isRecordType() ||!that.isUnknownType()) { ', 'if(that.isRecordType() ||!that.isUnknownType()) {', 'if(this.isRecordType() ||!that.isUnknownType()) { ', 'if(that.isRecordType() || that.isUnknownType()) {', 'if(this.isRecordType() || that.isUnknownType()) { ', 'if(that.isRecordType()) {', 'if(this.isRecordType()) { ', 'if(that.isUnknownType() ||!that.isRecordType()) {', 'if(that!= null || that.isUnknownType() ||!that.isRecordType()) { ', 'if(that.isRecordType()  ||!that.isRecordType())  { ', 'if(that!=  null  ||!that.isRecordType())  { ']}, {'bugID': 'Time19', 'Tbar_delete': ['} else if (offsetLocal > 0) {'], 'Tbar_add': ['} else if (offsetLocal>=0) {'], 'Correct_delete': ['}  else  if  (offsetLocal  >  0)  {  '], 'Correct_add': ['}  else  if(offsetLocal  >=  0)  { ']}, {'bugID': 'Lang6', 'Tbar_delete': ['pos += Character.charCount(Character.codePointAt(input, pos));'], 'Tbar_add': ['pos += Character.charCount(Character.codePointAt(input, pt));'], 'Correct_delete': ['    pos += Character.charCount(Character.codePointAt(input, pos));'], 'Correct_add': ['    pos += Character.charCount(Character.codePointAt(input, pt));']}, {'bugID': 'Math5', 'Tbar_delete': ['return NaN;'], 'Tbar_add': ['return INF;'], 'Correct_delete': ['return  NaN;  '], 'Correct_add': ['return  INF; ']}, {'bugID': 'Math57', 'Tbar_delete': ['int sum = 0;'], 'Tbar_add': ['double sum = 0;'], 'Correct_delete': ['int  sum  =  0;  ', 'int  sum  =  0;  '], 'Correct_add': ['double  sum  =  0; ', 'float  sum  =  0; ']}, {'bugID': 'Chart12', 'Tbar_delete': ['this.dataset = dataset;'], 'Tbar_add': ['setDataset(dataset);'], 'Correct_delete': [' this.dataset = dataset;'], 'Correct_add': [' setDataset(dataset);']}, {'bugID': 'Math82', 'Tbar_delete': ['if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {'], 'Tbar_add': ['if (MathUtils.compareTo(entry, 0, epsilon)>0) {'], 'Correct_delete': ['if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  '], 'Correct_add': ['if(MathUtils.compareTo(entry,  0,  epsilon)  >  0)  { ']}, {'bugID': 'Lang26', 'Tbar_delete': ['Calendar c = new GregorianCalendar(mTimeZone);'], 'Tbar_add': ['Calendar c = new GregorianCalendar(mTimeZone, this.mLocale);'], 'Correct_delete': ['Calendar c = new GregorianCalendar(mTimeZone); ', 'Calendar c = new GregorianCalendar(mDaylight); ', 'Calendar c = new GregorianCalendar(mTimeZone,mDaylight); '], 'Correct_add': ['Calendar c = new GregorianCalendar(mDaylight);', 'Calendar c = new GregorianCalendar(mTimeZone,mDaylight); ', 'Calendar c = new GregorianCalendar(mTimeZone,mLocale); ']}, {'bugID': 'Lang26', 'Tbar_delete': ['Calendar c = new GregorianCalendar(mTimeZone);'], 'Tbar_add': ['Calendar c = new GregorianCalendar(mTimeZone, this.mLocale);'], 'Correct_delete': ['Calendar c = new GregorianCalendar(mTimeZone); ', 'Calendar c = new GregorianCalendar(mDaylight); ', 'Calendar c = new GregorianCalendar(mTimeZone,mDaylight); '], 'Correct_add': ['Calendar c = new GregorianCalendar(mDaylight);', 'Calendar c = new GregorianCalendar(mTimeZone,mDaylight); ', 'Calendar c = new GregorianCalendar(mTimeZone,mLocale); ']}, {'bugID': 'Chart9', 'Tbar_delete': ['if (endIndex < 0) {'], 'Tbar_add': ['if (endIndex < startIndex || (endIndex < 0)) {'], 'Correct_delete': ['if  (endIndex  <  0)  {  '], 'Correct_add': ['if(startIndex  >  endIndex)  { ']}, {'bugID': 'Math75', 'Tbar_delete': ['return getCumPct((Comparable<?>) v);'], 'Tbar_add': ['return getPct((Comparable<?>) v);'], 'Correct_delete': ['return  getCumPct((Comparable<?>)  v);  '], 'Correct_add': ['return  getPct((  Comparable  <?>)v); ']}, {'bugID': 'Closure115', 'Tbar_delete': ['if (block.hasChildren()) {'], 'Tbar_add': ['if (block.isFromExterns()) {'], 'Correct_delete': ['return  CanInlineResult.NO;  '], 'Correct_add': ['if(hasSideEffects  &&  NodeUtil.mayHaveSideEffects(cArg))  {  return  CanInlineResult.NO;  } ']}, {'bugID': 'Chart24', 'Tbar_delete': ['int g = (int) ((value - this.lowerBound) / (this.upperBound'], 'Tbar_add': ['int g = (int) ((v - this.lowerBound) / (this.upperBound'], 'Correct_delete': ['int  g  =  (int)  ((value  this.lowerBound)  /  (this.upperBound  this.lowerBound)  *  255.0);  '], 'Correct_add': ['int  g  =  (int)((  v  -  this.lowerBound)/  (this.upperBound  -  this.lowerBound)*  255.0 ); ']}, {'bugID': 'Closure73', 'Tbar_delete': ['if (c > 0x1f && c <= 0x7f) {'], 'Tbar_add': ['if (c > 0x1f && c<0x7f) {'], 'Correct_delete': ['if  (c  >  0x1f  &&  c  <=  0x7f)  {  '], 'Correct_add': ['if(c  >  0x1f  &&  c  <  0x7f)  { ']}, {'bugID': 'Math32', 'Tbar_delete': ['if ((Boolean) tree.getAttribute()) {', '// the instance covers the whole space', 'setSize(Double.POSITIVE_INFINITY);', 'setBarycenter(Vector2D.NaN);', '} else {', 'setSize(0);', '}'], 'Tbar_add': ['setSize(0);'], 'Correct_delete': ['if ((Boolean) tree.getAttribute()) { ', 'if(tree!= null &&(Boolean)tree.getAttribute()) { ', 'if(tree.getCut() != null &&(Boolean)tree.getAttribute()) { '], 'Correct_add': ['if(tree!= null &&(Boolean)tree.getAttribute()) {', 'if(tree.getCut() != null &&(Boolean)tree.getAttribute()) { ', 'if(tree.getCut() == null &&(Boolean)tree.getAttribute()) { ']}, {'bugID': 'Math33', 'Tbar_delete': ['if (Precision.compareTo(entry, 0d, maxUlps) > 0) {'], 'Tbar_add': ['if (entry > this.epsilon && (Precision.compareTo(entry, 0d, maxUlps) > 0)) {'], 'Correct_delete': ['if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  ', 'if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  '], 'Correct_add': ['if  (restrictToNonNegative  &&  Precision.compareTo(entry,  0d,  maxUlps)>  0)  { ', 'if  (Precision.compareTo(entry,  0d,  epsilon)  >  0)  {  ']}, {'bugID': 'Chart7', 'Tbar_delete': ['long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()'], 'Tbar_add': ['long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()'], 'Correct_delete': ['long  s  =  getDataItem(this.minMiddleIndex).getPeriod().getStart()  .getTime();  ', 'long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()  .getTime(); '], 'Correct_add': ['long  s  =  getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime(); ', 'long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()  .getTime(); ']}, {'bugID': 'Lang59', 'Tbar_delete': ['str.getChars(0, strLen, buffer, size);'], 'Tbar_add': ['str.getChars(0, width, buffer, size);'], 'Correct_delete': [' if(width > 0) { for(int i = 0; i < width; i++) { ensureCapacity(i + length); } ', ' str.getChars(0, strLen, buffer, size);'], 'Correct_add': [' if(width > 0) { for(int i = 0; i < width; i++) { ensureCapacity(ilength); }', 'if(width > 0) { for(int i = 0; i < width; i++) { ensureCapacity(sizepadChar); } ', ' str.getChars(0, width, buffer, size);']}, {'bugID': 'Closure38', 'Tbar_delete': ["if (x < 0 && prev == '-') {"], 'Tbar_add': ["if (x<=0 && prev == '-') {"], 'Correct_delete': ["if  (x  <  0  &&  prev  ==  '-')  {  ", "if  (x  <  0  &&  prev  ==  '-')  {  "], 'Correct_add': ["if  (prev  <  0  ||  prev  ==  '-')  { ", "if  (x  <=  0  &&  prev  ==  '-')  { "]}]