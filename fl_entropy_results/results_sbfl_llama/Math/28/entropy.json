{"line_number": 138, "line_type": "original", "code": "                Integer minRow = null;", "entropy": 3.6531901359558105, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [8.514484405517578, 9.898781776428223, 4.551932334899902, 1.4738795757293701, 0.14920039474964142, 0.9786525964736938, 0.005399524699896574], "tokens": [462, 8102, 1375, 4301, 353, 1870, 29936]}
{"line_number": 138, "line_type": "generated", "code": "\n     * @param tableau simple tableau for the problem\n     * @throws MaxCountExceededException if the maximal iteration count has been exceeded\n     * @throws UnboundedSolutionException if the model is found not to", "entropy": 0.07453618198633194, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [0.09308849275112152, 0.1783423274755478, 0.027327071875333786, 0.4938099980354309, 0.06333599984645844, 0.29267266392707825, 0.002110398607328534, 0.35814788937568665, 0.1310606598854065, 0.00046588058467023075, 0.04128590598702431, 0.007414442487061024, 0.022807655856013298, 0.01648414134979248, 0.08331995457410812, 0.0864274874329567, 0.004088377580046654, 0.7903800010681152, 9.97731985989958e-05, 0.35482752323150635, 0.0016615884378552437, 0.001046705641783774, 8.844937838148326e-05, 0.00010322991875000298, 0.00047052756417542696, 0.016977451741695404, 0.007179295644164085, 0.018015796318650246, 0.011871167458593845, 0.0005393957253545523, 0.01144533883780241, 0.0015806573210284114, 0.003497200319543481, 0.00017915551143232733, 0.005977491848170757, 0.05438646301627159, 0.2891579270362854, 0.004002299625426531, 0.026296615600585938, 8.785339014139026e-05, 0.23031070828437805, 0.00401405431330204, 0.000205018965061754, 0.00012933371181134135, 0.00012110930401831865, 0.008194515481591225, 0.03230999410152435, 0.0410209484398365, 0.017315641045570374, 0.010868755169212818, 0.028725814074277878, 0.0006046851049177349], "tokens": [13, 268, 334, 732, 3207, 1591, 585, 2560, 1591, 585, 363, 278, 1108, 13, 268, 334, 732, 386, 5727, 5918, 3981, 1252, 3947, 287, 2451, 565, 278, 23183, 12541, 2302, 756, 1063, 13461, 287, 13, 268, 334, 732, 386, 5727, 853, 29306, 13296, 918, 2451, 565, 278, 1904, 338, 1476, 451, 304]}
{"line_number": 139, "line_type": "original", "code": "                int minIndex = tableau.getWidth();", "entropy": 2.1406185626983643, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.705810070037842, 5.759815216064453, 4.521608352661133, 1.524327039718628, 0.07931104302406311, 1.5484062433242798, 8.5588610090781e-05, 0.006498514208942652, 0.01934226043522358, 1.0904040336608887, 1.291193962097168], "tokens": [462, 938, 1375, 3220, 353, 1591, 585, 29889, 657, 6110, 890]}
{"line_number": 139, "line_type": "generated", "code": "\n     * @return true if a feasible solution was found\n     * @throws MaxCountExceededException if the maximal iteration count has been exceeded\n     * @throws UnboundedSolutionException if the model is found not to", "entropy": 0.1951804906129837, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.26829367876052856, 0.1657751053571701, 0.24886420369148254, 0.01668030023574829, 1.0271644592285156, 1.8587230443954468, 0.06560730934143066, 1.4079217910766602, 0.6859923601150513, 0.0015278107021003962, 0.16000135242938995, 0.8954204320907593, 0.047377683222293854, 1.0873064994812012, 0.20053169131278992, 0.22556085884571075, 0.010518351569771767, 0.026502002030611038, 0.00011169286881340668, 0.2452043741941452, 0.0016437364974990487, 0.00056429672986269, 3.7788631743751466e-05, 0.0001070442158379592, 0.0005142558366060257, 0.01742389425635338, 0.008928139694035053, 0.02853270061314106, 0.01604854315519333, 0.0006683023530058563, 0.016757672652602196, 0.0015468548517674208, 0.004059646278619766, 0.00015698630886618048, 0.004126605577766895, 0.06193982809782028, 0.8264172077178955, 0.006566968280822039, 0.04818651080131531, 7.617183291586116e-05, 0.23051860928535461, 0.004414456430822611, 0.00018094333063345402, 0.0003002431185450405, 0.0001532914029667154, 0.009022773243486881, 0.06360271573066711, 0.06897236406803131, 0.021337127313017845, 0.01747274398803711, 0.043254412710666656, 0.0007681279676035047], "tokens": [13, 268, 334, 732, 2457, 1565, 565, 263, 28326, 1821, 1650, 471, 1476, 13, 268, 334, 732, 386, 5727, 5918, 3981, 1252, 3947, 287, 2451, 565, 278, 23183, 12541, 2302, 756, 1063, 13461, 287, 13, 268, 334, 732, 386, 5727, 853, 29306, 13296, 918, 2451, 565, 278, 1904, 338, 1476, 451, 304]}
{"line_number": 140, "line_type": "original", "code": "                for (Integer row : minRatioPositions) {", "entropy": 2.2832584381103516, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [6.45244836807251, 11.256778717041016, 0.4377095401287079, 3.5393238067626953, 2.1468148231506348, 0.1076161116361618, 5.409339904785156, 0.14265358448028564, 0.0262718815356493, 0.12773464620113373, 0.012108158320188522, 0.01387121994048357, 0.009687318466603756], "tokens": [462, 363, 313, 7798, 1948, 584, 1375, 29934, 20819, 9135, 2187, 29897, 426]}
{"line_number": 140, "line_type": "generated", "code": "\n     * @throws UnboundedSolutionException if the model is found not to have a bounded solution\n     */\n    protected void solvePhase1(final SimplexTableau tableau)\n        throws MaxCountExceededException,", "entropy": 0.0697648674249649, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.3264070451259613, 0.15990179777145386, 0.4997636675834656, 0.014751527458429337, 0.15115998685359955, 0.00016211149340961128, 0.4192775785923004, 0.010682777501642704, 0.0002989322238136083, 0.00012170527770649642, 0.0002619877050165087, 0.01504408661276102, 0.05490905046463013, 0.07537709921598434, 0.02956560254096985, 0.01632183976471424, 0.0413845032453537, 0.0009870424401015043, 0.003166069043800235, 0.004477357026189566, 0.007298710290342569, 0.006370001472532749, 0.013773282058537006, 0.30072492361068726, 0.1277497559785843, 0.0024209495168179274, 0.04885755479335785, 0.33233076333999634, 0.04081451892852783, 0.38951370120048523, 0.025234175845980644, 0.0002681849291548133, 0.17055191099643707, 0.004581905901432037, 0.10847875475883484, 0.0027749149594455957, 0.0007176207727752626, 0.0006005152827128768, 0.00011944057769142091, 0.0023795643355697393, 0.00011228884250158444, 0.012580087408423424, 0.046017102897167206, 0.08408291637897491, 0.004114021547138691, 0.02268005721271038, 0.0014856740599498153, 0.00025876989820972085, 0.002292982302606106, 5.185469490243122e-05, 4.5536911784438416e-05, 0.04446859657764435], "tokens": [13, 268, 334, 732, 386, 5727, 853, 29306, 13296, 918, 2451, 565, 278, 1904, 338, 1476, 451, 304, 505, 263, 12635, 1650, 13, 268, 3776, 13, 1678, 6364, 1780, 4505, 4819, 559, 29896, 29898, 8394, 3439, 10709, 3562, 585, 1591, 585, 29897, 13, 4706, 8026, 5918, 3981, 1252, 3947, 287, 2451, 29892]}
{"line_number": 141, "line_type": "original", "code": "                    int i = tableau.getNumObjectiveFunctions();", "entropy": 1.5749289989471436, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.300905704498291, 2.3614513874053955, 7.278831481933594, 2.9976601600646973, 0.3166327178478241, 2.6126749515533447, 0.00015722469834145159, 0.010556099005043507, 0.048853468149900436, 0.3015597462654114, 0.21044521033763885, 0.018005024641752243, 0.0009488132782280445, 0.00021908267808612436, 0.16503259539604187], "tokens": [462, 268, 938, 474, 353, 1591, 585, 29889, 657, 8009, 2061, 573, 6678, 29879, 890]}
{"line_number": 141, "line_type": "generated", "code": "\n     */\n    protected void solvePhase1(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException {\n\n        while (true) {\n            doIteration(tableau", "entropy": 0.13625553250312805, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.2148991972208023, 0.22684040665626526, 0.31663915514945984, 0.0030739696230739355, 0.060416363179683685, 0.18887920677661896, 0.04047147557139397, 0.3861454725265503, 0.027297493070364, 0.0002926159941125661, 0.19433782994747162, 0.005933527834713459, 0.032962821424007416, 0.003106413409113884, 0.0006571040721610188, 0.0010764762992039323, 6.961580220377073e-05, 0.003195539116859436, 8.225102646974847e-05, 0.014564272947609425, 0.04355552792549133, 0.06822840124368668, 0.004325082991272211, 0.021164873614907265, 0.0013981815427541733, 0.00019608005823101848, 0.00022790218645241112, 4.184158387943171e-05, 2.5152843591058627e-05, 0.016831407323479652, 0.008540770038962364, 0.0004463391669560224, 3.731181277544238e-05, 3.909988299710676e-05, 1.4424220353248529e-05, 0.024662001058459282, 0.011362249031662941, 0.43208247423171997, 0.10696366429328918, 1.8436633348464966, 0.28022924065589905, 0.634196400642395, 0.0020762570202350616, 0.0009897815762087703, 0.003653638530522585, 0.17271672189235687, 1.679268479347229, 0.004108204040676355, 0.0002796259068418294, 0.002364460611715913, 0.0006337541271932423, 2.3245540432981215e-05], "tokens": [13, 268, 3776, 13, 1678, 6364, 1780, 4505, 4819, 559, 29896, 29898, 8394, 3439, 10709, 3562, 585, 1591, 585, 29897, 13, 4706, 8026, 5918, 3981, 1252, 3947, 287, 2451, 29892, 853, 29306, 13296, 918, 2451, 426, 13, 13, 4706, 1550, 313, 3009, 29897, 426, 13, 9651, 437, 13463, 362, 29898, 2371, 585]}
{"line_number": 142, "line_type": "original", "code": "                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {", "entropy": 2.315006732940674, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.05865478515625, 1.4601250886917114, 6.069366455078125, 5.110902786254883, 4.873288631439209, 5.640886306762695, 0.21746040880680084, 0.6016805171966553, 0.00021252757869660854, 0.007649415638297796, 0.014278506860136986, 2.3068671226501465, 0.5508537292480469, 0.08501415699720383, 0.35585978627204895, 0.0634993463754654, 3.452749729156494, 5.446368217468262, 4.598806381225586, 2.4549694061279297, 6.660074234008789, 0.46555012464523315, 0.2748190760612488, 0.04947845637798309, 0.05575409159064293], "tokens": [462, 268, 363, 313, 29936, 474, 529, 1591, 585, 29889, 657, 6110, 580, 448, 29871, 29896, 2607, 1375, 4301, 2804, 1948, 29936, 474, 4862, 426]}
{"line_number": 142, "line_type": "generated", "code": "\n     * @throws OptimizationException if an error occurred during optimization\n     */\n    protected void solvePhase1(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException,", "entropy": 0.18240463733673096, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.22998937964439392, 0.14928479492664337, 1.271498441696167, 0.03359828144311905, 0.4503384232521057, 6.353653589030728e-05, 1.8439003229141235, 0.006313142832368612, 0.08964474499225616, 0.07798630744218826, 0.1201266422867775, 0.25643518567085266, 0.3069261908531189, 1.1203691959381104, 1.5958082675933838, 0.35314053297042847, 0.042209163308143616, 0.09019313007593155, 0.11502353847026825, 0.001128037110902369, 0.055993080139160156, 0.1765444576740265, 0.05108583718538284, 0.33977729082107544, 0.025026435032486916, 0.00017176583060063422, 0.11567998677492142, 0.004259917419403791, 0.03956242650747299, 0.0035173948854207993, 0.0003780603874474764, 0.0011449456214904785, 2.6940935640595853e-05, 0.0030240542255342007, 2.8729025871143676e-05, 0.013415660709142685, 0.036560721695423126, 0.0886039137840271, 0.005173865240067244, 0.10100915282964706, 0.0009726322605274618, 5.1020273531321436e-05, 0.0003796095261350274, 8.583032467868179e-06, 1.5020257706055418e-05, 0.0023357984609901905, 0.23786646127700806, 0.00020275443966966122, 1.07287787614041e-05, 1.4781842764932662e-05, 1.311301275563892e-06, 0.028219841420650482], "tokens": [13, 268, 334, 732, 386, 5727, 20693, 326, 2133, 2451, 565, 385, 1059, 10761, 2645, 13883, 13, 268, 3776, 13, 1678, 6364, 1780, 4505, 4819, 559, 29896, 29898, 8394, 3439, 10709, 3562, 585, 1591, 585, 29897, 13, 4706, 8026, 5918, 3981, 1252, 3947, 287, 2451, 29892, 853, 29306, 13296, 918, 2451, 29892]}
{"line_number": 143, "line_type": "original", "code": "                        if (row == tableau.getBasicRow(i)) {", "entropy": 2.395493745803833, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.688611030578613, 3.908005952835083, 3.889484405517578, 0.19319671392440796, 6.977840423583984, 2.7450172901153564, 2.4667768478393555, 0.0003328961320221424, 0.005957583896815777, 0.015725532546639442, 4.204384803771973, 0.10484190285205841, 0.04469091817736626, 4.876584053039551, 0.1768646389245987, 0.029584236443042755], "tokens": [462, 308, 565, 313, 798, 1275, 1591, 585, 29889, 657, 16616, 4301, 29898, 29875, 876, 426]}
{"line_number": 143, "line_type": "generated", "code": "\n    protected void solvePhase1(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {\n\n        while (true) {\n            Integer", "entropy": 0.11202818900346756, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.1730249971151352, 0.17318591475486755, 0.2530800700187683, 0.03820895031094551, 0.333431601524353, 0.027682652696967125, 0.0002366024418734014, 0.20236285030841827, 0.009329650551080704, 0.04216207563877106, 0.0053550610318779945, 0.0006349454633891582, 0.0014837696217000484, 6.16293036728166e-05, 0.005927128717303276, 5.5549986427649856e-05, 0.01840594969689846, 0.03728107362985611, 0.12677443027496338, 0.005251067224889994, 0.053454384207725525, 0.0011695933062583208, 0.00013290952483657748, 0.00030214988510124385, 3.3854863431770355e-05, 3.504691630951129e-05, 0.0037523354403674603, 0.12499787658452988, 0.00025733973598107696, 3.4927710657939315e-05, 0.00010918975021922961, 5.602820692729438e-06, 0.058644406497478485, 0.14313183724880219, 0.001450082752853632, 5.1020273531321436e-05, 1.3947389561508317e-05, 5.817244164063595e-05, 3.290122185717337e-05, 6.544376083184034e-05, 0.020139025524258614, 0.004161983262747526, 0.30877581238746643, 0.06755764037370682, 1.7125985622406006, 0.18994106352329254, 0.3900761306285858, 0.0017947532469406724, 0.0008546037715859711, 0.0026651835069060326, 0.18716692924499512, 1.0980650186538696], "tokens": [13, 1678, 6364, 1780, 4505, 4819, 559, 29896, 29898, 8394, 3439, 10709, 3562, 585, 1591, 585, 29897, 13, 4706, 8026, 5918, 3981, 1252, 3947, 287, 2451, 29892, 853, 29306, 13296, 918, 2451, 29892, 1939, 8263, 294, 1821, 13296, 918, 2451, 426, 13, 13, 4706, 1550, 313, 3009, 29897, 426, 13, 9651, 8102]}
{"line_number": 144, "line_type": "original", "code": "                            if (i < minIndex) {", "entropy": 4.035029411315918, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [5.997086048126221, 4.233957767486572, 8.546624183654785, 0.24509896337985992, 8.258788108825684, 1.6977131366729736, 5.362245559692383, 5.720178604125977, 0.23445561528205872, 0.054144490510225296], "tokens": [462, 632, 565, 313, 29875, 529, 1375, 3220, 29897, 426]}
{"line_number": 144, "line_type": "generated", "code": "\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {\n\n        int nbIterations = 0;\n        while (true) {\n            Integer pivotCol = getPivot", "entropy": 0.30030712485313416, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.41113021969795227, 0.24506257474422455, 0.032924991101026535, 0.0839671790599823, 0.0016552807064726949, 0.000198821333469823, 0.00027783826226368546, 2.407998726994265e-05, 4.1483970562694594e-05, 0.020576585084199905, 0.17579679191112518, 0.00023624490131624043, 3.266281055402942e-05, 6.139089964563027e-05, 3.576272320060525e-06, 0.10053900629281998, 0.09200230985879898, 0.001686342409811914, 4.768258077092469e-05, 1.07287787614041e-05, 6.353653589030728e-05, 3.135155202471651e-05, 8.904537389753386e-05, 0.11364518105983734, 0.0472399927675724, 0.3712262213230133, 0.11739110201597214, 2.6597342491149902, 3.2496979236602783, 0.8469337224960327, 1.3268948793411255, 0.3321703374385834, 0.15083904564380646, 0.09406596422195435, 0.017025621607899666, 0.002287511248141527, 0.005553650204092264, 0.19956305623054504, 1.183476448059082, 0.16497790813446045, 0.7604896426200867, 0.0029012751765549183, 0.0013183006085455418, 0.0033830334432423115, 0.2715739905834198, 1.94063138961792, 0.15498663485050201, 0.23139116168022156, 0.015243696980178356, 0.03731173649430275, 0.14747685194015503, 8.010543388081715e-05], "tokens": [13, 4706, 8026, 5918, 3981, 1252, 3947, 287, 2451, 29892, 853, 29306, 13296, 918, 2451, 29892, 1939, 8263, 294, 1821, 13296, 918, 2451, 426, 13, 13, 4706, 938, 302, 29890, 13463, 800, 353, 29871, 29900, 29936, 13, 4706, 1550, 313, 3009, 29897, 426, 13, 9651, 8102, 24438, 1625, 353, 679, 29925, 11002]}
{"line_number": 145, "line_type": "original", "code": "                                minIndex = i;", "entropy": 4.7713727951049805, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.9703898429870605, 1.5238347053527832, 11.88161563873291, 3.5859789848327637, 0.10539532452821732, 8.007399559020996, 0.32499340176582336], "tokens": [462, 462, 1375, 3220, 353, 474, 29936]}
{"line_number": 145, "line_type": "generated", "code": "\n        while (true) {\n            doIteration(tableau);\n            if (isPhase1Complete(tableau)) {\n                break;\n            }\n        }\n    }\n\n    /**\n     * Solves", "entropy": 0.22113682329654694, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.08753229677677155, 0.24775613844394684, 1.6473596096038818, 0.2534061670303345, 0.5763972997665405, 0.0025763672310858965, 0.0017539369873702526, 0.00913346279412508, 0.19415396451950073, 1.0425200462341309, 0.003978908993303776, 0.00022837892174720764, 0.0025070447009056807, 0.0007108307327143848, 8.189342770492658e-05, 0.0012715120101347566, 0.010133014060556889, 0.5357990860939026, 0.38505780696868896, 0.1696961522102356, 1.3076000213623047, 1.2988897562026978, 0.0013011569390073419, 0.08399370312690735, 1.1427114009857178, 0.16166989505290985, 0.0028156896587461233, 7.271502545336261e-05, 0.02780323661863804, 0.002859553089365363, 0.010854722931981087, 0.13752347230911255, 0.42557939887046814, 0.0007391819381155074, 0.0029350321274250746, 0.008475997485220432, 0.0005110388156026602, 0.011411396786570549, 0.2322906255722046, 0.00213668798096478, 0.01784425787627697, 0.6462191939353943, 0.011023573577404022, 0.004704715684056282, 0.034578293561935425, 0.06399896740913391, 0.029463980346918106, 0.04447498172521591, 0.0003457663697190583, 8.201262971851975e-05, 0.5921846628189087, 0.01996411196887493], "tokens": [13, 4706, 1550, 313, 3009, 29897, 426, 13, 9651, 437, 13463, 362, 29898, 2371, 585, 416, 13, 9651, 565, 313, 275, 4819, 559, 29896, 17813, 29898, 2371, 585, 876, 426, 13, 18884, 2867, 29936, 13, 9651, 500, 13, 4706, 500, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 4956, 1960]}
{"line_number": 146, "line_type": "original", "code": "                                minRow = row;", "entropy": 4.671067237854004, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.405364513397217, 1.7884495258331299, 11.501762390136719, 3.7340991497039795, 0.18502508103847504, 7.476363658905029, 0.60640549659729], "tokens": [462, 462, 1375, 4301, 353, 1948, 29936]}
{"line_number": 146, "line_type": "generated", "code": "\n        // first, we need to determine if we are dealing with a maximization or minimization problem\n        // if there is an objective function, we can check the sign of the objective function\n        // for maximization, we want to find a", "entropy": 1.0843552350997925, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.1247408390045166, 0.26893895864486694, 1.4686061143875122, 3.774564743041992, 0.7970249056816101, 2.0069777965545654, 0.983670711517334, 0.02555447816848755, 3.6176319122314453, 1.4960689544677734, 1.5096888542175293, 1.5489295721054077, 1.4390863180160522, 0.007244508247822523, 0.49009591341018677, 1.2169184684753418, 0.0445173978805542, 0.34379324316978455, 0.5804838538169861, 0.004453383851796389, 0.09081001579761505, 0.13701842725276947, 0.05917218700051308, 0.8786976337432861, 2.1413936614990234, 1.9200204610824585, 0.802861213684082, 2.00264048576355, 1.0529812574386597, 0.32947617769241333, 0.8993735313415527, 1.096190333366394, 1.8011343479156494, 2.345229148864746, 1.0090380907058716, 0.6547805666923523, 0.09664174914360046, 0.3813389241695404, 1.7863527536392212, 0.443778395652771, 0.8653867840766907, 0.030410699546337128, 0.36077195405960083, 3.0785088539123535, 2.1948375701904297, 0.04090801253914833, 1.2534070014953613, 1.3061227798461914, 2.1590938568115234, 1.5369017124176025, 1.1545419692993164, 0.7276570796966553], "tokens": [13, 4706, 849, 937, 29892, 591, 817, 304, 8161, 565, 591, 526, 16743, 411, 263, 5256, 2133, 470, 6260, 2133, 1108, 13, 4706, 849, 565, 727, 338, 385, 12091, 740, 29892, 591, 508, 1423, 278, 1804, 310, 278, 12091, 740, 13, 4706, 849, 363, 5256, 2133, 29892, 591, 864, 304, 1284, 263]}
{"line_number": 150, "line_type": "original", "code": "                }", "entropy": 8.142778396606445, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.783116340637207, 7.502439498901367], "tokens": [462, 500]}
{"line_number": 150, "line_type": "generated", "code": "\n        final int numIterations = getIterationLimit();\n        while (true) {\n            doIteration(tableau);\n            if (getIterationsCount() > numIterations) {\n                throw new MaxCountExceed", "entropy": 0.3521516025066376, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.03278714045882225, 0.3091248571872711, 2.7909984588623047, 0.6865514516830444, 1.4275134801864624, 1.6238343715667725, 0.14278526604175568, 0.2035134881734848, 0.7812156081199646, 0.291199266910553, 0.9085991382598877, 0.6740444302558899, 0.19210979342460632, 0.006658509839326143, 0.15544544160366058, 2.167541742324829, 0.05993044376373291, 1.202573299407959, 0.0017832106677815318, 0.0013066334649920464, 0.002500504720956087, 0.14573220908641815, 1.0047250986099243, 0.0028887945227324963, 0.00023052419419400394, 0.001986912451684475, 0.000565249880310148, 6.496695277746767e-05, 0.0011548285838216543, 0.0021510813385248184, 0.17813675105571747, 0.22186815738677979, 0.04954266920685768, 0.48684626817703247, 0.01167323999106884, 0.14751161634922028, 1.159558892250061, 0.004767123609781265, 1.0395839214324951, 0.025179658085107803, 0.0003970073303207755, 0.0001938155182870105, 0.04742350056767464, 0.0013615157222375274, 0.0013096098555251956, 0.01810477301478386, 0.06493289023637772, 0.00380589603446424, 0.024738410487771034, 0.0020248640794306993, 0.00044848397374153137, 0.0009554826538078487], "tokens": [13, 4706, 2186, 938, 954, 13463, 800, 353, 679, 13463, 362, 24445, 890, 13, 4706, 1550, 313, 3009, 29897, 426, 13, 9651, 437, 13463, 362, 29898, 2371, 585, 416, 13, 9651, 565, 313, 657, 13463, 800, 3981, 580, 1405, 954, 13463, 800, 29897, 426, 13, 18884, 3183, 716, 5918, 3981, 1252, 3947]}
{"line_number": 151, "line_type": "original", "code": "                return minRow;", "entropy": 6.1711320877075195, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.344795227050781, 8.3637113571167, 10.603503227233887, 3.376976490020752, 0.16667066514492035], "tokens": [462, 736, 1375, 4301, 29936]}
{"line_number": 151, "line_type": "generated", "code": "\n        while (true) {\n\n            Integer pivotCol = getPivotColumn(tableau);\n            Integer pivotRow = getPivotRow(tableau, pivotCol);\n            if (pivotRow == null) {\n               ", "entropy": 0.1530885398387909, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.07243159413337708, 0.1631547063589096, 1.980871558189392, 0.09979238361120224, 0.5684641599655151, 0.0015675650211051106, 0.00150781380943954, 0.005068785510957241, 1.7513362169265747, 0.08066944032907486, 1.1963286399841309, 0.08344694972038269, 0.2526957094669342, 0.019065342843532562, 0.062307506799697876, 0.10166753828525543, 0.00016664070426486433, 0.005719012580811977, 0.06621578335762024, 0.0011147005716338754, 8.821448318485636e-06, 0.058941371738910675, 0.0021346656139940023, 0.10001686960458755, 0.675376296043396, 0.001978465588763356, 0.0012249593855813146, 0.01026942115277052, 0.022861137986183167, 0.0027393694035708904, 5.769562994828448e-05, 0.0036317838821560144, 0.004913517739623785, 0.0003002431185450405, 0.0009517907164990902, 0.0003225283289793879, 0.001515550771728158, 8.940297266235575e-05, 0.0024785057175904512, 0.0013955625472590327, 0.31206026673316956, 0.023894207552075386, 0.0027139282319694757, 0.00632048724219203, 2.8609820219571702e-05, 0.05016099289059639, 0.03109169565141201, 0.002998025855049491, 0.025829490274190903, 0.0005797850899398327, 0.0042408062145113945, 0.09588559716939926], "tokens": [13, 4706, 1550, 313, 3009, 29897, 426, 13, 13, 9651, 8102, 24438, 1625, 353, 679, 29925, 11002, 4409, 29898, 2371, 585, 416, 13, 9651, 8102, 24438, 4301, 353, 679, 29925, 11002, 4301, 29898, 2371, 585, 29892, 24438, 1625, 416, 13, 9651, 565, 313, 29886, 11002, 4301, 1275, 1870, 29897, 426, 13, 18884]}
{"line_number": 127, "line_type": "original", "code": "                }", "entropy": 7.296384334564209, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [7.514643669128418, 7.078125], "tokens": [462, 500]}
{"line_number": 127, "line_type": "generated", "code": "\n        // if the pivot column is an artificial variable, we need to perform an extra step\n        if (pivotCol >= tableau.getNumObjectiveFunctions()) {\n            final int artificialVariableOffset = tableau.getArtific", "entropy": 0.5542048811912537, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.08539402484893799, 0.8105202913284302, 0.3560181260108948, 3.9203226566314697, 0.8724172115325928, 1.3686795234680176, 1.241126298904419, 0.28785812854766846, 1.3809138536453247, 0.041961368173360825, 0.1682816743850708, 0.3212636411190033, 1.1906648874282837, 1.0663455724716187, 0.028608351945877075, 2.8806204795837402, 1.7679604291915894, 0.9831445813179016, 0.3765745759010315, 0.44967156648635864, 0.04956479370594025, 0.5442731380462646, 0.015602894127368927, 0.33083394169807434, 0.00018630675913300365, 0.04425124451518059, 0.21597230434417725, 0.022002987563610077, 8.713819261174649e-05, 0.000358159770257771, 0.0007013006834313273, 0.6336228847503662, 0.7542679309844971, 0.018763311207294464, 0.0017485818825662136, 0.0002460177056491375, 0.39775070548057556, 0.0009968079393729568, 0.004087071865797043, 0.24393141269683838, 1.5633505582809448, 0.3487303555011749, 1.6876029968261719, 0.9567931890487671, 1.3006130456924438, 0.0077287922613322735, 0.055894672870635986, 3.766942609217949e-05, 0.0008663953049108386, 0.000521523819770664, 0.01882859133183956, 8.797258487902582e-05], "tokens": [13, 4706, 849, 565, 278, 24438, 1897, 338, 385, 23116, 2286, 29892, 591, 817, 304, 2189, 385, 4805, 4331, 13, 4706, 565, 313, 29886, 11002, 1625, 6736, 1591, 585, 29889, 657, 8009, 2061, 573, 6678, 29879, 3101, 426, 13, 9651, 2186, 938, 23116, 16174, 10302, 353, 1591, 585, 29889, 657, 9986, 928]}
{"line_number": 121, "line_type": "original", "code": "                        int column = i + tableau.getArtificialVariableOffset();", "entropy": 2.6508657932281494, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.998824596405029, 3.842625141143799, 5.691768646240234, 4.217294692993164, 0.37657490372657776, 8.910111427307129, 2.4210851192474365, 1.1000111103057861, 0.0007569308509118855, 0.00407769251614809, 0.015687040984630585, 9.334150314331055, 0.012643535621464252, 0.0006461439770646393, 1.8035045862197876, 0.2553088068962097, 0.07964861392974854], "tokens": [462, 308, 938, 1897, 353, 474, 718, 1591, 585, 29889, 657, 9986, 928, 616, 16174, 10302, 890]}
{"line_number": 121, "line_type": "generated", "code": "\n            return;\n        }\n\n        // perform the actual pivot operation\n        tableau.pivot(pivotRow, pivotCol);\n    }\n\n    /**\n     * Runs the Simplex method on the given model.", "entropy": 0.3136651813983917, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.17022036015987396, 1.0295305252075195, 2.059396266937256, 0.021446695551276207, 0.02142009139060974, 0.05406589061021805, 0.003981640096753836, 0.03924921900033951, 0.3256012201309204, 0.08191616833209991, 1.2541704177856445, 2.2266287803649902, 0.1364150494337082, 0.64405357837677, 0.10409751534461975, 0.8700438737869263, 0.1931706815958023, 0.06275442987680435, 0.7289544939994812, 0.0018638873007148504, 0.004080898128449917, 0.19424879550933838, 0.0018466339679434896, 0.008690867573022842, 0.021025275811553, 0.0020590072963386774, 0.08540398627519608, 0.007534893695265055, 0.014652971178293228, 0.002967242617160082, 0.015244870446622372, 0.005473508033901453, 1.0724042654037476, 0.005560289137065411, 0.004384191241115332, 0.08776861429214478, 0.07765931636095047, 0.08221311122179031, 0.30518290400505066, 0.0008112476789392531, 0.0011145814787596464, 2.517246961593628, 0.00662629958242178, 0.3774642050266266, 0.43189647793769836, 0.0008719933102838695, 0.15602336823940277, 0.33040833473205566, 0.013442007824778557, 0.07368220388889313, 0.23126742243766785, 0.14234966039657593], "tokens": [13, 9651, 736, 29936, 13, 4706, 500, 13, 13, 4706, 849, 2189, 278, 3935, 24438, 5858, 13, 4706, 1591, 585, 29889, 29886, 11002, 29898, 29886, 11002, 4301, 29892, 24438, 1625, 416, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 390, 6948, 278, 3439, 10709, 1158, 373, 278, 2183, 1904, 29889]}
{"line_number": 122, "line_type": "original", "code": "                        final double entry = tableau.getEntry(row, column);", "entropy": 1.7660547494888306, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [7.551565170288086, 3.5184054374694824, 4.58027982711792, 0.765529990196228, 2.2822070121765137, 0.13180750608444214, 0.04226778820157051, 0.00016223068814724684, 0.0020703088957816362, 0.0026472308672964573, 0.005381739232689142, 0.001901843468658626, 7.002189636230469, 0.07371221482753754, 2.2744300365448, 0.02231651544570923], "tokens": [462, 308, 2186, 3765, 6251, 353, 1591, 585, 29889, 657, 9634, 29898, 798, 29892, 1897, 416]}
{"line_number": 122, "line_type": "generated", "code": "\n        tableau.pivot(pivotRow, pivotCol);\n<|mask:1|>\n    }\n\n    /** {@inheritDoc} */\n    public boolean solve(final SimplexTableau tableau)\n       ", "entropy": 0.26803818345069885, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.1073797270655632, 0.3555225729942322, 1.9056111574172974, 0.000532008707523346, 0.00498646916821599, 0.5934821963310242, 0.001416513929143548, 0.013195804320275784, 0.021697524935007095, 0.0017414417816326022, 0.0803719237446785, 0.009974870830774307, 0.01829206757247448, 0.0033475097734481096, 0.028154823929071426, 0.007235158234834671, 1.417231559753418, 0.009679172188043594, 0.4754679799079895, 0.029903726652264595, 0.6011063456535339, 0.01676599681377411, 0.40525099635124207, 0.34144288301467896, 0.7692024111747742, 0.0037225254345685244, 0.00856157299131155, 0.15314245223999023, 0.14780956506729126, 0.0908304825425148, 1.5310319662094116, 0.0023057085927575827, 0.0008634176338091493, 0.0012479382567107677, 0.003823234234005213, 0.007324153557419777, 0.0022088908590376377, 0.01976637728512287, 0.5008280277252197, 1.65049409866333, 0.8412386775016785, 0.10536571592092514, 0.4124237298965454, 0.5566314458847046, 0.001574349240399897, 0.13349659740924835, 0.004702698905020952, 0.046124111860990524, 0.0024239225313067436, 0.18635870516300201, 0.2475714236497879, 0.05712108686566353], "tokens": [13, 4706, 1591, 585, 29889, 29886, 11002, 29898, 29886, 11002, 4301, 29892, 24438, 1625, 416, 13, 29966, 29989, 13168, 29901, 29896, 29989, 29958, 13, 1678, 500, 13, 13, 1678, 7762, 26633, 262, 27069, 14526, 29913, 3776, 13, 1678, 970, 7223, 4505, 29898, 8394, 3439, 10709, 3562, 585, 1591, 585, 29897, 13, 4706]}
{"line_number": 123, "line_type": "original", "code": "                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {", "entropy": 1.42490553855896, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.941084861755371, 3.524862766265869, 2.9261679649353027, 0.08137542009353638, 2.990321397781372, 0.0052275871858000755, 8.093983342405409e-05, 0.0014493685448542237, 1.312258005142212, 0.09249485284090042, 7.928204536437988, 0.10478844493627548, 0.2333545833826065, 3.3956542015075684, 0.701024055480957, 0.06505599617958069, 0.42252105474472046, 0.001430798671208322, 0.0030240542255342007, 0.0005408254801295698, 2.2426981925964355, 1.6983306407928467, 3.8602101802825928, 3.9106194972991943, 3.62381911277771, 0.014985487796366215, 1.989339828491211, 0.0018331881146878004, 0.006184488069266081, 0.018082179129123688, 0.7667604684829712, 0.03629692643880844, 0.014687977731227875, 2.196948766708374, 0.15121081471443176, 0.033674124628305435], "tokens": [462, 308, 565, 313, 29925, 3757, 2459, 29889, 10954, 29898, 8269, 29892, 29871, 29896, 29881, 29892, 4236, 29965, 29880, 567, 29897, 2607, 1948, 29889, 10954, 29898, 2371, 585, 29889, 657, 16616, 4301, 29898, 4914, 4961, 426]}
{"line_number": 123, "line_type": "generated", "code": "\n        tableau.pivot(pivotRow, pivotCol);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void solve()\n        throws NoFeasibleSolutionException, Unbounded", "entropy": 0.2981448173522949, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.13661742210388184, 0.6168960332870483, 1.9100935459136963, 0.0007481159991584718, 0.005488801747560501, 0.7354164719581604, 0.0012650828575715423, 0.014153928495943546, 0.021059593185782433, 0.0012040039291605353, 0.06229652836918831, 0.006476958282291889, 0.029981473460793495, 0.003749009920284152, 0.030653048306703568, 0.005118836183100939, 0.9004244804382324, 0.006434793118387461, 0.005440666805952787, 0.10129164904356003, 0.21590889990329742, 0.1385957896709442, 0.34854957461357117, 0.0008719933102838695, 0.0008708022069185972, 2.4377734661102295, 0.007077385671436787, 0.0008588915807195008, 0.0014860312221571803, 0.004569208715111017, 0.015144366770982742, 0.002684562699869275, 0.3109807074069977, 0.0016066036187112331, 0.017368948087096214, 0.5555788278579712, 1.7167799472808838, 0.7584980130195618, 0.874472975730896, 0.6332569718360901, 0.05359664931893349, 0.005564556922763586, 0.9116559028625488, 1.2756991386413574, 4.8040190449682996e-05, 0.0066461944952607155, 0.00030191155383363366, 0.000797311426140368, 8.5588610090781e-05, 0.029724495485424995, 0.5779619812965393, 0.0037032850086688995], "tokens": [13, 4706, 1591, 585, 29889, 29886, 11002, 29898, 29886, 11002, 4301, 29892, 24438, 1625, 416, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 26633, 262, 27069, 14526, 29913, 13, 268, 3776, 13, 1678, 970, 1780, 4505, 580, 13, 4706, 8026, 1939, 8263, 294, 1821, 13296, 918, 2451, 29892, 853, 29306]}
{"line_number": 124, "line_type": "original", "code": "                            return row;", "entropy": 5.258227825164795, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.919973373413086, 4.401698112487793, 6.731626510620117, 7.214433670043945, 1.023406982421875], "tokens": [462, 632, 736, 1948, 29936]}
{"line_number": 124, "line_type": "generated", "code": "\n        // compute the new basic variable value\n        final double rhs = tableau.getEntry(pivotRow, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(pivotRow, pivot", "entropy": 0.32687467336654663, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.15374614298343658, 0.7647327184677124, 0.7398761510848999, 3.9435644149780273, 0.30711624026298523, 1.4119555950164795, 1.5093090534210205, 0.735576331615448, 0.42403098940849304, 0.7342526912689209, 0.3221583962440491, 0.5797663331031799, 0.05849678814411163, 3.138869047164917, 0.19315162301063538, 0.014535841532051563, 0.00014900050882715732, 0.001115891383960843, 0.0031936378218233585, 0.04191838577389717, 0.00114125432446599, 0.0066685751080513, 0.0001958416833076626, 0.0012234115274623036, 0.008953778073191643, 0.014238785021007061, 6.294052582234144e-05, 0.00044216870446689427, 0.0007794441189616919, 0.009275912307202816, 0.0015754204941913486, 0.005404622759670019, 0.0022539705969393253, 0.0005975367967039347, 0.01816459372639656, 0.004031151533126831, 0.09163495153188705, 0.1893659383058548, 0.019331621006131172, 1.4884450435638428, 0.02430267073214054, 0.01112897228449583, 0.00011526874004630372, 0.0009176096064038575, 0.0011031500762328506, 0.0032071841415017843, 0.0007420408655889332, 0.0028646644204854965, 0.00013076403411105275, 0.0007811117684468627, 0.0005712069687433541, 0.010313666425645351], "tokens": [13, 4706, 849, 10272, 278, 716, 6996, 2286, 995, 13, 4706, 2186, 3765, 29365, 353, 1591, 585, 29889, 657, 9634, 29898, 29886, 11002, 4301, 29892, 1591, 585, 29889, 657, 6110, 580, 448, 29871, 29896, 416, 13, 4706, 2186, 3765, 6251, 353, 1591, 585, 29889, 657, 9634, 29898, 29886, 11002, 4301, 29892, 24438]}
{"line_number": 104, "line_type": "original", "code": "                    minRatioPositions.add(i);", "entropy": 1.4484601020812988, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [8.119668006896973, 2.6023690700531006, 4.208075523376465, 0.12287338078022003, 0.009246621280908585, 0.17155638337135315, 0.007680410053580999, 0.5582595467567444, 1.2722179889678955, 0.01880297251045704, 0.28331390023231506, 0.00745739508420229], "tokens": [462, 268, 1375, 29934, 20819, 9135, 2187, 29889, 1202, 29898, 29875, 416]}
{"line_number": 104, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Find the row with the most negative coefficient in the objective function row.\n     * @param tableau simple tableau for the problem\n     * @return row with the most negative coefficient\n     */\n", "entropy": 0.3051919639110565, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.06520387530326843, 0.36935165524482727, 0.0025090661365538836, 0.003230711678043008, 0.023817501962184906, 0.045816708356142044, 0.05429060757160187, 0.08053471893072128, 0.00033098942367359996, 0.0003768687602132559, 3.3900816440582275, 1.283346176147461, 2.2375667095184326, 1.7582120895385742, 0.2118861973285675, 2.0961530208587646, 0.14202433824539185, 0.2910013794898987, 0.900638222694397, 0.0802881047129631, 0.2557583451271057, 0.068888358771801, 0.2980591058731079, 0.46324604749679565, 0.08732617646455765, 0.0013960388023406267, 0.0021131346002221107, 0.33279892802238464, 0.01123895775526762, 0.07003837823867798, 0.0006870055221952498, 0.08585449308156967, 0.02683350443840027, 0.0004889961564913392, 0.013040616177022457, 0.0011938833631575108, 0.0007943335804156959, 0.006380543578416109, 0.00022968991834204644, 0.0036145609337836504, 0.003818365279585123, 0.2676316797733307, 0.2856387794017792, 0.10593203455209732, 0.02548208273947239, 0.1329401433467865, 0.007360601332038641, 0.0204155296087265, 0.18155817687511444, 0.004129692446440458, 0.06816515326499939, 0.0002681849291548133], "tokens": [13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 10987, 278, 1948, 411, 278, 1556, 8178, 10825, 297, 278, 12091, 740, 1948, 29889, 13, 268, 334, 732, 3207, 1591, 585, 2560, 1591, 585, 363, 278, 1108, 13, 268, 334, 732, 2457, 1948, 411, 278, 1556, 8178, 10825, 13, 268, 3776, 13]}
{"line_number": 119, "line_type": "original", "code": "                for (Integer row : minRatioPositions) {", "entropy": 1.5803570747375488, "is_bug_line": true, "sus_score": 0.31622776601683794, "per_token_entropy": [7.242396354675293, 8.986544609069824, 0.009708096273243427, 1.952928066253662, 0.7930418252944946, 0.1834145486354828, 1.3269989490509033, 0.01649235002696514, 0.0038004331290721893, 0.015275043435394764, 0.0018779276870191097, 0.007754697930067778, 0.0044080475345253944], "tokens": [462, 363, 313, 7798, 1948, 584, 1375, 29934, 20819, 9135, 2187, 29897, 426]}
{"line_number": 119, "line_type": "generated", "code": "\n        if (pivotRow == null) {\n            if (tableau.isFeasible()) {\n                // we have a solution\n                setResult(Optimum.OPTIMAL);\n                return;\n            }\n           ", "entropy": 0.48985299468040466, "is_bug_line": true, "sus_score": 0.31622776601683794, "per_token_entropy": [0.11672941595315933, 0.43190398812294006, 0.46779853105545044, 0.03400279954075813, 0.11428414285182953, 0.00038366109947673976, 0.85869300365448, 0.11113869398832321, 0.012089785188436508, 0.35179683566093445, 0.002011896576732397, 0.018551180139183998, 0.0959336906671524, 1.6834466457366943, 0.09672009944915771, 1.5261647701263428, 0.00020203932945150882, 0.0066664437763392925, 1.2360377311706543, 1.162678599357605, 1.728519782773219e-05, 0.003103917697444558, 0.8513372540473938, 0.0009415484382770956, 0.007563880644738674, 0.07791805267333984, 1.4233578443527222, 2.1164021492004395, 0.8720360398292542, 1.1771960258483887, 1.352145791053772, 0.7311511635780334, 0.1365891396999359, 2.068540334701538, 0.6027815341949463, 0.03051534667611122, 0.7364052534103394, 0.5782154202461243, 0.7359535098075867, 0.42773690819740295, 0.029664436355233192, 9.059865078597795e-06, 0.23009952902793884, 0.001928376266732812, 0.5360581874847412, 0.7474859952926636, 0.002067572670057416, 0.0037759689148515463, 0.010916040278971195, 0.0008778294431976974, 1.2806707620620728, 0.371658056974411], "tokens": [13, 4706, 565, 313, 29886, 11002, 4301, 1275, 1870, 29897, 426, 13, 9651, 565, 313, 2371, 585, 29889, 275, 8263, 294, 1821, 3101, 426, 13, 18884, 849, 591, 505, 263, 1650, 13, 18884, 731, 3591, 29898, 20624, 12539, 29889, 14094, 2260, 29931, 416, 13, 18884, 736, 29936, 13, 9651, 500, 13, 9651]}
{"line_number": 120, "line_type": "original", "code": "                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {", "entropy": 0.9391688108444214, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.482470989227295, 2.9701647758483887, 7.1255784034729, 0.011135456152260303, 0.28510260581970215, 0.15984612703323364, 0.010587356984615326, 0.9107589721679688, 0.24183516204357147, 0.012169870547950268, 0.012724989093840122, 0.020635908469557762, 0.18048030138015747, 2.038458114839159e-05, 0.001364849042147398, 0.0045836856588721275, 0.9115992784500122, 4.574010848999023, 0.001443654764443636, 0.0003601856005843729, 0.2563035488128662, 2.253030106658116e-05, 0.06293254345655441, 0.16575197875499725, 0.01376787293702364, 0.0027353274635970592], "tokens": [462, 268, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474, 529, 1591, 585, 29889, 657, 8009, 9986, 928, 616, 10444, 1849, 890, 474, 4862, 426]}
{"line_number": 120, "line_type": "generated", "code": "\n            // this is an unbounded problem\n            throw new UnboundedSolutionException();\n        }\n\n        // the pivot element is the one at row pivotRow and column pivotCol\n        final double pivotElement = tableau.getEntry", "entropy": 0.6298539042472839, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.20141148567199707, 0.3026912808418274, 1.422622561454773, 3.292397975921631, 0.9248450398445129, 2.1542022228240967, 0.7745538353919983, 0.023682929575443268, 1.0363041162490845, 0.49920445680618286, 0.10586480051279068, 0.3006189465522766, 0.007308769505470991, 0.0036668223328888416, 0.0002840353990904987, 0.0003023882454726845, 0.00045110538485459983, 0.00023588736075907946, 0.8839802145957947, 0.0036174117121845484, 0.14734013378620148, 0.00949840433895588, 0.17545926570892334, 0.3054443299770355, 0.09185486286878586, 1.1285958290100098, 3.458712100982666, 1.6255654096603394, 2.0111172199249268, 1.263592004776001, 0.979185163974762, 2.2288217544555664, 1.268377661705017, 1.3339810371398926, 1.7609590291976929, 0.015311202965676785, 0.6237664818763733, 0.16400060057640076, 0.053683191537857056, 0.11808202415704727, 0.08928469568490982, 0.051778145134449005, 0.572997510433197, 0.1391264945268631, 0.12045896053314209, 1.0063750743865967, 0.037385232746601105, 0.016233056783676147, 0.0008438840159215033, 0.000800408364739269, 0.006378174759447575, 0.009143621660768986], "tokens": [13, 9651, 849, 445, 338, 385, 443, 29306, 1108, 13, 9651, 3183, 716, 853, 29306, 13296, 918, 2451, 890, 13, 4706, 500, 13, 13, 4706, 849, 278, 24438, 1543, 338, 278, 697, 472, 1948, 24438, 4301, 322, 1897, 24438, 1625, 13, 4706, 2186, 3765, 24438, 2642, 353, 1591, 585, 29889, 657, 9634]}
{"line_number": 227, "line_type": "original", "code": "            doIteration(tableau);", "entropy": 1.9985952377319336, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [10.228147506713867, 5.345901966094971, 0.33870184421539307, 0.013057442381978035, 0.011803899891674519, 0.028960928320884705, 0.0018811402842402458, 0.020307600498199463], "tokens": [632, 437, 13463, 362, 29898, 2371, 585, 416]}
{"line_number": 227, "line_type": "generated", "code": "\n\n    /**\n     * Get the maximal number of iterations.\n     * @return the maximal number of iterations\n     */\n    public int getMaxIterations() {\n        return maxIterations;\n    }\n\n    /**\n", "entropy": 0.23653092980384827, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.0951600968837738, 1.0656427145004272, 0.2904522120952606, 0.0903501957654953, 0.7559478282928467, 0.002230182057246566, 0.0011173202656209469, 2.5121371746063232, 0.2859499454498291, 2.2534070014953613, 0.3344500958919525, 0.005048029124736786, 0.19103319942951202, 1.5052974224090576, 0.029592106118798256, 0.0034002603497356176, 0.005412092432379723, 0.33947187662124634, 0.005303361918777227, 0.9971164464950562, 0.1272066831588745, 0.025024808943271637, 0.0028436246793717146, 0.011800955049693584, 0.7105307579040527, 0.004915652796626091, 0.1761641949415207, 0.0023523299023509026, 0.03707478567957878, 0.11241386830806732, 0.02815123088657856, 0.0020443748217076063, 0.005147062707692385, 0.02236093021929264, 0.009118815883994102, 0.014283795841038227, 0.0025623366236686707, 0.006361472886055708, 0.020942743867635727, 0.004222525749355555, 0.06592922657728195, 0.0026012177113443613, 0.014372752979397774, 0.01235639676451683, 0.0019132657907903194, 0.003916095942258835, 0.0025723245926201344, 0.0020411626901477575, 0.04449527710676193, 0.03529811277985573, 0.005212289281189442, 0.014857592061161995], "tokens": [13, 13, 1678, 7762, 13, 268, 334, 3617, 278, 23183, 1353, 310, 24372, 29889, 13, 268, 334, 732, 2457, 278, 23183, 1353, 310, 24372, 13, 268, 3776, 13, 1678, 970, 938, 679, 7976, 13463, 800, 580, 426, 13, 4706, 736, 4236, 13463, 800, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13]}
{"line_number": 209, "line_type": "original", "code": "    }", "entropy": 5.335750579833984, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [6.923200607299805, 3.748300313949585], "tokens": [268, 500]}
{"line_number": 209, "line_type": "generated", "code": "\n\n    /** {@inheritDoc} */\n    @Override\n    public PointValuePair doOptimize()\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {\n        final", "entropy": 0.07640036195516586, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.04826909676194191, 0.7206113338470459, 0.30752336978912354, 0.07026387006044388, 0.6414586901664734, 0.0016734894597902894, 0.0011064843274652958, 0.0010682597057893872, 0.0020038066431879997, 0.014674938283860683, 0.0029221950098872185, 0.008802538737654686, 0.06356121599674225, 0.007180952932685614, 0.0027127391658723354, 0.004173142369836569, 0.17732739448547363, 0.2559889853000641, 0.007111711893230677, 0.0024531767703592777, 0.3845632076263428, 0.005679660011082888, 0.0015038858400657773, 0.00022587609419133514, 0.2537284791469574, 0.05387117341160774, 0.028162935748696327, 0.003702691290527582, 0.019757261499762535, 0.007208529394119978, 0.0026964517310261726, 0.00555744394659996, 0.0025247621815651655, 0.001600771676748991, 0.01723667047917843, 0.07233733683824539, 0.006543637719005346, 0.0027473345398902893, 0.0016501632053405046, 0.0005428509321063757, 0.1661841720342636, 0.06794419884681702, 0.004225967917591333, 0.0009919252479448915, 0.0008238735608756542, 0.002908525988459587, 0.02062411420047283, 0.0010736184194684029, 0.023055465891957283, 0.0032153832726180553, 0.2517763376235962, 0.21726664900779724], "tokens": [13, 13, 1678, 7762, 26633, 262, 27069, 14526, 29913, 3776, 13, 1678, 732, 4640, 13, 1678, 970, 8984, 1917, 20547, 437, 20624, 326, 675, 580, 13, 4706, 8026, 5918, 3981, 1252, 3947, 287, 2451, 29892, 853, 29306, 13296, 918, 2451, 29892, 1939, 8263, 294, 1821, 13296, 918, 2451, 426, 13, 4706, 2186]}
