{"line_number": 406, "line_type": "original", "code": "            coefficients[i] = 0;", "entropy": 2.977149248123169, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [9.206932067871094, 11.835942268371582, 0.4375894069671631, 2.343488931655884, 0.08167944848537445, 0.40405377745628357, 2.0758543014526367, 0.08251381665468216, 0.32629066705703735], "tokens": [632, 16127, 29961, 29875, 29962, 353, 29871, 29900, 29936]}
{"line_number": 406, "line_type": "generated", "code": "\n        for (int j = 0; j", "entropy": 0.11508657783269882, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.12699377536773682, 0.33861178159713745, 0.5043708682060242, 0.0013462775386869907, 0.004038868937641382, 0.13479891419410706, 0.0006911749369464815, 0.1279137134552002, 0.02256852574646473, 0.003617530455812812, 0.0010008569806814194], "tokens": [13, 4706, 363, 313, 524, 432, 353, 29871, 29900, 29936, 432]}
{"line_number": 407, "line_type": "original", "code": "            continue;", "entropy": 7.007552146911621, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [4.652065277099609, 16.326078414916992, 0.0445115827023983], "tokens": [632, 6773, 29936]}
{"line_number": 407, "line_type": "generated", "code": "\n            .subtract(tableau.getRowVector(subtrahendRow)\n<|mask:1|><|mask:0|>\n                .mapMultiplyToSelf(multiple)));\n    }\n\n   ", "entropy": 0.15529678761959076, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.6408371329307556, 1.0537570714950562, 0.06967063993215561, 0.3112378418445587, 0.00025293012731708586, 7.223821739898995e-05, 0.05303380638360977, 0.2087620347738266, 6.663577369181439e-05, 0.0022806129418313503, 0.0013244913425296545, 0.009749770164489746, 0.003861472476273775, 0.001642546383664012, 0.002939073368906975, 0.00010740180005086586, 5.113947918289341e-05, 4.792098479811102e-05, 0.00010215714428341016, 1.2967272996902466, 0.020778246223926544, 1.2635724544525146, 0.0005607224884442985, 0.0117806913331151, 0.0023836076725274324, 0.4710829555988312, 0.01079116016626358, 0.22277727723121643, 0.0008678245940245688, 0.006323922425508499, 0.002090889262035489, 0.16441868245601654, 0.0017074067145586014, 0.17303121089935303, 0.06210419163107872, 0.8624677062034607, 0.0021128966473042965, 0.019486887380480766, 0.006692139897495508, 3.266281055402942e-05, 0.0057154567912220955, 0.4433169960975647, 0.0016853903653100133, 0.029295090585947037, 0.010714621283113956, 0.5133098363876343, 0.0028782153967767954, 0.08051085472106934, 0.00026973424246534705, 0.00034505134681239724, 0.009678581729531288, 0.016125261783599854], "tokens": [13, 9651, 869, 1491, 29873, 1461, 29898, 2371, 585, 29889, 657, 4301, 12877, 29898, 1491, 3018, 29882, 355, 4301, 29897, 13, 29966, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29900, 29989, 29958, 13, 18884, 869, 1958, 6857, 666, 368, 1762, 24313, 29898, 20787, 17884, 13, 1678, 500, 13, 13, 1678]}
{"line_number": 261, "line_type": "original", "code": "            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),", "entropy": 1.3391213417053223, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [7.089380264282227, 1.24942946434021, 5.550635814666748, 5.442206382751465, 1.0608946084976196, 0.06830355525016785, 1.661754846572876, 2.286591053009033, 0.01671101525425911, 0.024853188544511795, 0.0005862186080776155, 0.00023052419419400394, 0.014541245996952057, 1.4542831182479858, 0.986240804195404, 0.22372378408908844, 0.00011085849109804258, 0.0032431883737444878, 0.6285064816474915, 0.01407270971685648, 0.3452458381652832], "tokens": [632, 736, 716, 22985, 21529, 29898, 13646, 29889, 657, 29907, 7297, 4543, 29879, 2141, 1958, 6857, 666, 368, 6278, 29896, 511]}
{"line_number": 261, "line_type": "generated", "code": "\n        return null;\n    }\n\n    /**\n     * Checks whether the given row is basic.\n     * @param row index of the row to check\n     * @return the column that the variable is basic in.  null", "entropy": 0.12893268465995789, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.28411054611206055, 0.6932471990585327, 1.1771208047866821, 1.1332107782363892, 0.0019501493079587817, 0.04006819427013397, 0.18046258389949799, 0.0030853785574436188, 0.005477894563227892, 0.024433085694909096, 0.05707390978932381, 0.02317253313958645, 0.04848818853497505, 0.001278893556445837, 0.00033420699764974415, 1.3958218097686768, 0.15187528729438782, 0.0839741975069046, 0.06313993781805038, 0.07755893468856812, 0.5521795153617859, 0.03875129297375679, 0.11241514980792999, 0.02038983441889286, 0.007234921678900719, 0.0003995097358711064, 0.00033396866638213396, 0.0036314274184405804, 0.0006968930247239769, 0.03878890722990036, 0.05668560415506363, 0.0015994624700397253, 0.0037296514492481947, 0.032877810299396515, 0.002869062591344118, 0.0007788485381752253, 0.005810157395899296, 0.0009509570081718266, 0.000302745756926015, 0.0004037995240651071, 0.003422001376748085, 0.05693709850311279, 0.12000527232885361, 0.03670678660273552, 0.00792608316987753, 0.05358082801103592, 0.003085140837356448, 0.0037284637801349163, 0.004010492470115423, 0.015615452080965042, 0.042842429131269455, 0.029925363138318062], "tokens": [13, 4706, 736, 1870, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 5399, 29879, 3692, 278, 2183, 1948, 338, 6996, 29889, 13, 268, 334, 732, 3207, 1948, 2380, 310, 278, 1948, 304, 1423, 13, 268, 334, 732, 2457, 278, 1897, 393, 278, 2286, 338, 6996, 297, 29889, 29871, 1870]}
{"line_number": 339, "line_type": "original", "code": "                columnsToDrop.add(i);", "entropy": 3.020019054412842, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [9.305906295776367, 15.15993881225586, 0.2894137501716614, 0.10283147543668747, 0.4819422960281372, 0.10593331605195999, 0.018349654972553253, 1.6119259595870972, 0.10392970591783524], "tokens": [462, 4341, 1762, 15063, 29889, 1202, 29898, 29875, 416]}
{"line_number": 339, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns whether the problem is at a basic state.\n     * @return whether the model has been solved\n     */\n    boolean isBasic() {\n        for (int i = getNumObjective", "entropy": 0.2116839438676834, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.04039362818002701, 0.41587910056114197, 0.006489512976258993, 0.009019938297569752, 0.07014929503202438, 0.0754101574420929, 0.06955132633447647, 0.06503409892320633, 0.0020713796839118004, 0.0006205302197486162, 1.1283520460128784, 0.5264907479286194, 0.10671137273311615, 0.32520371675491333, 0.20698152482509613, 1.1717488765716553, 1.0634801387786865, 1.3027132749557495, 1.4781795740127563, 0.06566524505615234, 0.018432751297950745, 0.0023442425299435854, 0.0018807833548635244, 0.04033065587282181, 0.01112897228449583, 0.05834566056728363, 0.036020636558532715, 0.29773271083831787, 0.4739915132522583, 0.10799295455217361, 0.04055000841617584, 0.05378927290439606, 0.024449139833450317, 0.011964816600084305, 0.0004957877099514008, 0.01401628740131855, 0.09917377680540085, 0.01253335177898407, 0.11665207892656326, 0.0499851293861866, 0.0012971091782674193, 0.004456113558262587, 0.10384611785411835, 0.3661138117313385, 0.000996331567876041, 0.009819773025810719, 0.07865484803915024, 0.0011794761521741748, 0.7755353450775146, 0.05272750183939934, 0.009168545715510845, 0.001813197392039001], "tokens": [13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 16969, 3692, 278, 1108, 338, 472, 263, 6996, 2106, 29889, 13, 268, 334, 732, 2457, 3692, 278, 1904, 756, 1063, 7484, 13, 268, 3776, 13, 1678, 7223, 338, 16616, 580, 426, 13, 4706, 363, 313, 524, 474, 353, 679, 8009, 2061, 573]}
{"line_number": 226, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess", "entropy": 1.6243294477462769, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [9.782597541809082, 13.054398536682129, 0.7279289364814758, 0.1482067108154297, 0.1634628027677536, 0.0035847469698637724, 0.850495457649231, 0.030362823978066444, 0.48071640729904175, 0.5657294988632202, 0.003532005939632654, 0.0028484982904046774, 0.0013666347367689013, 0.02128869853913784, 0.14120548963546753, 0.17462371289730072, 0.005880436860024929, 0.027909433469176292, 0.4845135807991028, 1.857962727546692, 0.01639302633702755, 0.015787841752171516, 1.5374653339385986, 8.885644912719727], "tokens": [462, 4636, 29889, 842, 9634, 29898, 798, 29892, 679, 29903, 2364, 16174, 10302, 580, 718, 269, 2364, 9037, 10024, 448, 29896, 416, 849, 19163]}
{"line_number": 226, "line_type": "generated", "code": "\n    /**\n     * Get the offset of the first slack variable.\n     * @return offset of the first slack variable\n     */\n    protected final int getSlackVariableOffset() {\n        return numDecisionVariables +", "entropy": 0.1773252785205841, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.056612271815538406, 0.2613241970539093, 0.08432312309741974, 0.0859774574637413, 0.0038379596080631018, 0.0006924853660166264, 0.6106827259063721, 0.12509633600711823, 0.9135950803756714, 0.6590867638587952, 0.08888284862041473, 1.3997316360473633, 0.3648627698421478, 0.00014041867689229548, 0.02990708313882351, 0.8891198039054871, 0.06186475232243538, 0.003737727412953973, 0.008841650560498238, 0.08002480864524841, 0.004041955806314945, 0.798424482345581, 0.6437218189239502, 0.3430793285369873, 0.04800427705049515, 0.006659456994384527, 0.0006568658282049, 0.005091794766485691, 0.1921195387840271, 0.003842472331598401, 0.010717805474996567, 0.0009483369067311287, 0.019003119319677353, 0.28424134850502014, 0.2706011235713959, 0.0020409247372299433, 0.0006401873542927206, 0.0015509016811847687, 0.00019262365822214633, 0.00044312194222584367, 0.0002015625941567123, 0.0009202298242598772, 0.0009414292871952057, 0.005919544491916895, 0.030743684619665146, 0.035748183727264404, 0.4312012791633606, 0.027765439823269844, 0.00040797016117721796, 0.0005007919971831143, 0.00011550712952157483, 0.32208454608917236], "tokens": [13, 1678, 7762, 13, 268, 334, 3617, 278, 9210, 310, 278, 937, 269, 2364, 2286, 29889, 13, 268, 334, 732, 2457, 9210, 310, 278, 937, 269, 2364, 2286, 13, 268, 3776, 13, 1678, 6364, 2186, 938, 679, 29903, 2364, 16174, 10302, 580, 426, 13, 4706, 736, 954, 6185, 2459, 10444, 1849, 718]}
{"line_number": 162, "line_type": "original", "code": "        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);", "entropy": 2.10906982421875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [7.919672012329102, 8.520556449890137, 0.7621970772743225, 0.006473523564636707, 0.011225284077227116, 0.17535804212093353, 1.7171932458877563, 11.359380722045898, 0.03629715368151665, 0.5470931529998779, 0.029705865308642387, 0.1372079998254776, 2.525299549102783, 1.9108563661575317, 4.767226696014404, 0.25952982902526855, 0.20396924018859863, 0.5542441010475159, 0.0003937899600714445, 0.7375198602676392], "tokens": [308, 1897, 4775, 29879, 29889, 1202, 29898, 8186, 29954, 1299, 18474, 29918, 26865, 29918, 15032, 29127, 29918, 24461, 6670, 416]}
{"line_number": 162, "line_type": "generated", "code": "\n            // slack variable coefficients\n            if (constraint.getRelationship() == Relationship.LEQ ||\n                constraint.getRelationship() == Relationship.GEQ) {\n                matrix.setEntry(row", "entropy": 0.12306774407625198, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.052359677851200104, 0.4930570721626282, 0.5664422512054443, 0.6884182691574097, 0.0001501924270996824, 0.09457549452781677, 0.35608774423599243, 0.0549030676484108, 0.061292193830013275, 0.8239044547080994, 0.03627289831638336, 0.1392204612493515, 0.005921558942645788, 0.006454217713326216, 0.009704318828880787, 0.0002964295563288033, 8.11782301752828e-05, 0.08406845480203629, 0.22998683154582977, 0.005354705266654491, 1.9073468138230965e-06, 1.9073468138230965e-06, 0.00039664984797127545, 0.49012523889541626, 0.0014869834994897246, 1.3109521865844727, 0.010261161252856255, 0.15172380208969116, 0.008389350026845932, 0.0002273062855238095, 7.64102369430475e-05, 0.0004457433824427426, 3.4570634852570947e-06, 5.245195097813848e-06, 6.842378934379667e-05, 0.0010268182959407568, 0.000327652640407905, 3.3378546504536644e-06, 8.22540732769994e-06, 2.0146166207268834e-05, 0.397691935300827, 0.00010013079008786008, 0.04227373003959656, 0.002581242239102721, 0.002055676421150565, 0.09902521967887878, 0.15664805471897125, 0.00019298121333122253, 0.004107847809791565, 0.0003477922291494906, 0.00042763148667290807, 0.0099671995267272], "tokens": [13, 9651, 849, 269, 2364, 2286, 16127, 13, 9651, 565, 313, 13646, 29889, 657, 9662, 800, 4034, 580, 1275, 6376, 800, 4034, 29889, 1307, 29984, 3830, 13, 18884, 7276, 29889, 657, 9662, 800, 4034, 580, 1275, 6376, 800, 4034, 29889, 1692, 29984, 29897, 426, 13, 18884, 4636, 29889, 842, 9634, 29898, 798]}
{"line_number": 199, "line_type": "original", "code": "            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,", "entropy": 1.443162202835083, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.112118721008301, 8.599130630493164, 0.5651803016662598, 0.3957734704017639, 0.18131814897060394, 0.007662546820938587, 6.090504169464111, 0.15521785616874695, 0.06303226947784424, 3.0484368801116943, 0.7994637489318848, 0.002169637940824032, 0.0053258915431797504, 0.005680371075868607, 0.027171742171049118, 1.311669111251831, 0.031039923429489136, 0.004897621460258961, 0.014288966543972492], "tokens": [632, 4636, 29889, 842, 9634, 29898, 29920, 3220, 29892, 679, 29903, 2364, 16174, 10302, 580, 448, 29871, 29896, 29892]}
{"line_number": 199, "line_type": "generated", "code": "\n            if (constraint.getValue()", "entropy": 0.33239370584487915, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.10521453619003296, 0.71412193775177, 1.2727311849594116, 0.0903923436999321, 0.20957429707050323, 0.015163740143179893, 0.24898512661457062, 0.002966410480439663], "tokens": [13, 9651, 565, 313, 13646, 29889, 23433, 580]}
{"line_number": 215, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() - 1,", "entropy": 1.4752146005630493, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.170416831970215, 13.55854320526123, 0.37612152099609375, 0.4639928936958313, 0.4953785538673401, 0.005385059397667646, 0.581537663936615, 0.020533375442028046, 1.3760156631469727, 0.2692748010158539, 0.0014590105274692178, 0.0022876302246004343, 0.0011798333143815398, 0.009459435939788818, 3.1641054153442383, 0.03768857941031456, 0.010104691609740257, 0.010378203354775906], "tokens": [462, 4636, 29889, 842, 9634, 29898, 798, 29892, 679, 29903, 2364, 16174, 10302, 580, 448, 29871, 29896, 29892]}
{"line_number": 215, "line_type": "generated", "code": "\n        return constraint;\n    }\n\n    /**\n     * Compute the sum of the absolute values of the coefficients.\n     * @param coefficients coefficients\n     * @return sum of the absolute values of the coefficients\n     */\n   ", "entropy": 0.24975186586380005, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.16829265654087067, 0.20679503679275513, 0.3270871639251709, 0.11343171447515488, 0.030314715579152107, 0.021502817049622536, 0.11425139009952545, 0.0025486627127975225, 0.0042708381079137325, 0.03921288251876831, 0.07532359659671783, 0.039117395877838135, 0.060712020844221115, 0.0009654866298660636, 0.0014331794809550047, 2.98787260055542, 0.10969654470682144, 0.24925962090492249, 0.7655687928199768, 0.025347618386149406, 0.2960018515586853, 2.584622383117676, 0.2006312757730484, 0.02345774881541729, 0.19805900752544403, 0.3466486632823944, 0.8770781755447388, 0.04515353590250015, 0.0011431594612076879, 0.0032202552538365126, 0.10955028980970383, 0.005058466922491789, 0.16397389769554138, 0.5429572463035583, 0.6619076132774353, 0.002649489790201187, 0.0012368656462058425, 0.0012411518255248666, 0.004711597226560116, 0.1956750750541687, 0.3649332821369171, 0.6725912094116211, 0.035695504397153854, 0.025807766243815422, 0.13990548253059387, 0.01161137968301773, 0.008036776445806026, 0.08105865865945816, 0.002441165968775749, 0.02065739408135414, 0.0005448763840831816, 0.01582961529493332], "tokens": [13, 4706, 736, 7276, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 11796, 29872, 278, 2533, 310, 278, 8380, 1819, 310, 278, 16127, 29889, 13, 268, 334, 732, 3207, 16127, 16127, 13, 268, 334, 732, 2457, 2533, 310, 278, 8380, 1819, 310, 278, 16127, 13, 268, 3776, 13, 1678]}
{"line_number": 298, "line_type": "original", "code": "        double sum = 0;", "entropy": 2.514554262161255, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.4078450202941895, 6.851139068603516, 3.3400931358337402, 0.08899606019258499, 0.5206276178359985, 0.01780315488576889, 0.37537333369255066], "tokens": [308, 3765, 2533, 353, 29871, 29900, 29936]}
{"line_number": 298, "line_type": "generated", "code": "\n          }\n        }\n\n        // drop the columns\n        dropColumns(columnsToDrop);\n\n        // drop the objective function\n        dropRows(0, 1);\n    }\n\n    /**\n     * Remov", "entropy": 0.35702598094940186, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.12576745450496674, 0.20929816365242004, 0.0034874591510742903, 0.06357519328594208, 0.07203001528978348, 0.0014627005439251661, 0.011298365890979767, 0.17770810425281525, 0.06930332630872726, 1.4119207859039307, 0.9590809345245361, 0.7332508563995361, 0.18391098082065582, 0.33866453170776367, 0.03966990113258362, 1.569793462753296, 0.040383435785770416, 0.04540817067027092, 0.02282140590250492, 0.00012289722508285195, 0.00017951308109331876, 0.0934140607714653, 0.00309892650693655, 0.9100528359413147, 0.11590199917554855, 0.3401072025299072, 1.906527042388916, 0.21517272293567657, 1.354754090309143, 0.4537166357040405, 0.5838943123817444, 0.04475851729512215, 1.3464959859848022, 0.947100818157196, 0.008197944611310959, 0.46161383390426636, 0.129546657204628, 0.3349109888076782, 0.033538684248924255, 0.009997296147048473, 0.0012231733417138457, 0.9425058960914612, 0.0013467537937685847, 0.003123644972220063, 0.033784426748752594, 0.05855457857251167, 0.024818768724799156, 0.07345017045736313, 0.0013825867790728807, 0.00015054999676067382, 2.0500361919403076, 0.003034631721675396], "tokens": [13, 3986, 500, 13, 4706, 500, 13, 13, 4706, 849, 5768, 278, 4341, 13, 4706, 5768, 14289, 29898, 13099, 1762, 15063, 416, 13, 13, 4706, 849, 5768, 278, 12091, 740, 13, 4706, 5768, 10661, 29898, 29900, 29892, 29871, 29896, 416, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 5240, 586]}
{"line_number": 299, "line_type": "original", "code": "        for (double coefficient : coefficients.toArray()) {", "entropy": 2.081106662750244, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.876191139221191, 3.9221832752227783, 0.007801183965057135, 7.154057502746582, 2.029466390609741, 0.09630651026964188, 2.6634325981140137, 1.338477373123169, 0.8655316829681396, 0.006780828349292278, 0.008556608110666275, 0.004492666106671095], "tokens": [308, 363, 313, 8896, 10825, 584, 16127, 29889, 517, 2588, 3101, 426]}
{"line_number": 299, "line_type": "generated", "code": "\n        }\n\n        // drop columns\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n            dropColumn(columnsToDrop.get(i));\n        }\n", "entropy": 0.1737978160381317, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.08700212091207504, 0.776060163974762, 0.1427096128463745, 0.010387169197201729, 0.1742648482322693, 0.04850386083126068, 1.2421395778656006, 0.9527943134307861, 1.2463821172714233, 0.43529319763183594, 0.03729026019573212, 0.9552419781684875, 0.0033422820270061493, 0.307138592004776, 0.37940511107444763, 0.022795654833316803, 0.31038856506347656, 0.0005321278586052358, 0.0007564543629996479, 0.0003833036171272397, 0.0006398299592547119, 0.2631710469722748, 0.016473939642310143, 0.0070752548053860664, 0.0006276782951317728, 0.005237548612058163, 0.006467601750046015, 0.057697273790836334, 0.00734415277838707, 0.0026026444975286722, 0.02253134548664093, 0.12110857665538788, 0.003825609339401126, 0.0037024538032710552, 0.0016363576287403703, 0.001954194623976946, 0.1969480812549591, 1.0229970216751099, 0.08335142582654953, 0.01953096129000187, 0.009130746126174927, 0.00019167017308063805, 0.00010096516780322418, 0.0004825619689654559, 0.0004839917819481343, 0.000481132126878947, 0.0011697123991325498, 0.027180558070540428, 0.0010309863137081265, 0.018109455704689026, 0.00034874555421993136, 0.0010412277188152075], "tokens": [13, 4706, 500, 13, 13, 4706, 849, 5768, 4341, 13, 4706, 363, 313, 524, 474, 353, 4341, 1762, 15063, 29889, 2311, 580, 448, 29871, 29896, 29936, 474, 6736, 29871, 29900, 29936, 474, 489, 29897, 426, 13, 9651, 5768, 4409, 29898, 13099, 1762, 15063, 29889, 657, 29898, 29875, 2483, 13, 4706, 500, 13]}
{"line_number": 300, "line_type": "original", "code": "            sum -= coefficient;", "entropy": 5.908336162567139, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [10.333699226379395, 11.566398620605469, 2.0537848472595215, 5.114678382873535, 0.4731180667877197], "tokens": [632, 2533, 22361, 10825, 29936]}
{"line_number": 300, "line_type": "generated", "code": "\n        for (int col : columnsToDrop) {\n            removeColumn(col);\n        }\n    }\n\n    /**\n     * Remove the given column from the tableau.\n     * @param col index of the column to", "entropy": 0.29125627875328064, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.03638601675629616, 0.5277348160743713, 1.9696874618530273, 0.005642320960760117, 0.5180445909500122, 1.0817713737487793, 0.26275938749313354, 0.00988752767443657, 0.00045718232286162674, 0.0015351902693510056, 0.006413472816348076, 0.001888517290353775, 0.0014666287461295724, 0.15311606228351593, 1.9124095439910889, 0.04597759619355202, 0.024783998727798462, 0.008964057080447674, 0.03962785378098488, 0.0028279335238039494, 0.044991374015808105, 0.0006530536338686943, 0.005516899283975363, 0.5522799491882324, 0.0017928492743521929, 0.0059661162085831165, 0.06963961571455002, 0.049193985760211945, 0.0304708294570446, 0.08696900308132172, 0.0011741180205717683, 0.000409161759307608, 2.5880050659179688, 0.7186039090156555, 1.5663328170776367, 0.322768896818161, 0.1822662651538849, 0.4653782248497009, 0.1171768456697464, 0.01266272272914648, 0.2156348079442978, 0.1211957037448883, 0.0037354708183556795, 0.001520192832686007, 0.1012999415397644, 0.0005326044629327953, 0.23657989501953125, 0.8845208883285522, 0.013948693871498108, 0.09941966831684113, 0.0102836973965168, 0.02302214875817299], "tokens": [13, 4706, 363, 313, 524, 784, 584, 4341, 1762, 15063, 29897, 426, 13, 9651, 3349, 4409, 29898, 1054, 416, 13, 4706, 500, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 15154, 278, 2183, 1897, 515, 278, 1591, 585, 29889, 13, 268, 334, 732, 3207, 784, 2380, 310, 278, 1897, 304]}
{"line_number": 302, "line_type": "original", "code": "        return sum;", "entropy": 6.561679363250732, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.23425817489624, 7.5544281005859375, 11.633576393127441, 0.8244532346725464], "tokens": [308, 736, 2533, 29936]}
{"line_number": 302, "line_type": "generated", "code": "\n        for (int i = 0; i", "entropy": 0.3041316866874695, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.08575975149869919, 0.6724621653556824, 1.5139254331588745, 0.0037108862306922674, 0.010908612050116062, 0.4379858374595642, 0.008633077144622803, 0.015018134377896786, 0.39743128418922424, 0.19769594073295593, 0.0019173111068084836], "tokens": [13, 4706, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474]}
{"line_number": 347, "line_type": "original", "code": "            columnsToDrop.add(col);", "entropy": 2.7335383892059326, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [9.837930679321289, 9.765253067016602, 0.4915771782398224, 0.19117894768714905, 1.0472763776779175, 0.1311054229736328, 0.04518885537981987, 2.8239362239837646, 0.2683992385864258], "tokens": [632, 4341, 1762, 15063, 29889, 1202, 29898, 1054, 416]}
{"line_number": 347, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the current solution.\n     *\n     * @return current solution\n     */\n    protected PointValuePair getSolution(final RealVector point) {\n<|mask:1|><", "entropy": 0.2787780463695526, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.15050047636032104, 1.962569236755371, 0.06714396178722382, 0.007895214483141899, 0.05725562572479248, 0.10884714126586914, 0.06944123655557632, 0.06560217589139938, 0.0017487009754404426, 0.000854961050208658, 1.1982017755508423, 0.1070975512266159, 1.2139338254928589, 1.214111566543579, 0.7170878052711487, 0.02303507924079895, 0.0021490592043846846, 0.0030448525212705135, 0.10353682190179825, 0.004758699797093868, 0.001746677909977734, 0.007658879738301039, 0.2435608059167862, 0.034336891025304794, 0.003796632867306471, 0.0197749100625515, 0.0020736397709697485, 0.044666752219200134, 0.0015432840446010232, 0.024641532450914383, 0.2557678520679474, 0.6180508732795715, 0.007044715341180563, 0.0023393663577735424, 0.07505655288696289, 0.1796749383211136, 0.0014315128792077303, 0.31919747591018677, 0.46153736114501953, 1.8066047430038452, 0.41029855608940125, 1.5204213857650757, 0.3489269018173218, 0.004048010800033808, 0.003968460485339165, 0.6372301578521729, 0.001259844284504652, 0.005842512473464012, 0.002032121177762747, 0.21514792740345, 0.008921878412365913, 0.14903834462165833], "tokens": [13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 3617, 278, 1857, 1650, 29889, 13, 268, 334, 13, 268, 334, 732, 2457, 1857, 1650, 13, 268, 3776, 13, 1678, 6364, 8984, 1917, 20547, 679, 13296, 918, 29898, 8394, 8195, 12877, 1298, 29897, 426, 13, 29966, 29989, 13168, 29901, 29896, 29989, 5299]}
{"line_number": 224, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack", "entropy": 1.4239041805267334, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [6.94941520690918, 14.329370498657227, 0.36865368485450745, 1.1773490905761719, 0.07968450337648392, 0.004095975775271654, 2.14668607711792, 0.08031967282295227, 1.4376592636108398, 0.3792375326156616, 0.0018638873007148504, 0.0032253647223114967, 0.0015256681945174932, 0.023258958011865616, 0.3583337664604187, 0.3116045296192169, 0.011152667924761772, 0.12183503061532974, 0.5900858640670776, 1.6142077445983887, 0.022959355264902115, 0.013595134019851685, 4.731983184814453, 0.16569925844669342, 2.0738186836242676, 0.023888155817985535], "tokens": [462, 4636, 29889, 842, 9634, 29898, 798, 29892, 679, 29903, 2364, 16174, 10302, 580, 718, 269, 2364, 9037, 10024, 29871, 29896, 416, 29871, 849, 269, 2364]}
{"line_number": 224, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the offset of the artificial variables in this tableau.\n     * @return offset of the artificial variables\n     */\n    protected final int getArtificialVariableOffset() {\n        return num", "entropy": 0.21943546831607819, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.34311315417289734, 0.6615757346153259, 0.01721932925283909, 0.004410777240991592, 0.022514795884490013, 0.02726617269217968, 0.016208307817578316, 0.03240220993757248, 0.0011742371134459972, 0.00035720644518733025, 0.3694736957550049, 0.08717290312051773, 0.8000702261924744, 0.701073408126831, 0.06884852051734924, 1.7530542612075806, 0.6183218955993652, 0.6933591365814209, 1.1366053819656372, 0.022798217833042145, 0.0046000611037015915, 0.04622701555490494, 0.032711803913116455, 0.002473630243912339, 0.0037295327056199312, 0.06736107170581818, 0.003443979425355792, 1.0932868719100952, 0.4976288378238678, 0.20007739961147308, 0.10974407941102982, 0.05367856100201607, 0.6082090735435486, 0.002400257159024477, 0.007653674576431513, 0.00040725519647821784, 0.005160820204764605, 0.14411620795726776, 0.170181542634964, 0.0015028145862743258, 0.00043930893298238516, 0.004980301018804312, 0.001105769770219922, 0.00042167355422861874, 0.00044264530879445374, 0.00018499570433050394, 0.0005975367967039347, 0.0006375664379447699, 0.0018156962469220161, 0.41797471046447754, 0.07844997942447662, 0.4719799757003784], "tokens": [13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 3617, 278, 9210, 310, 278, 23116, 3651, 297, 445, 1591, 585, 29889, 13, 268, 334, 732, 2457, 9210, 310, 278, 23116, 3651, 13, 268, 3776, 13, 1678, 6364, 2186, 938, 679, 9986, 928, 616, 16174, 10302, 580, 426, 13, 4706, 736, 954]}
{"line_number": 332, "line_type": "original", "code": "        List<Integer> columnsToDrop = new ArrayList<Integer>();", "entropy": 1.6091252565383911, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [7.0586934089660645, 8.458074569702148, 0.10359454154968262, 1.3506771326065063, 0.0011449456214904785, 3.244215488433838, 0.6097044348716736, 0.11784183979034424, 0.03263865411281586, 0.22200116515159607, 0.01909867487847805, 1.0685895681381226, 0.10658901184797287, 0.1348896473646164], "tokens": [308, 2391, 29966, 7798, 29958, 4341, 1762, 15063, 353, 716, 9791, 29966, 7798, 8295]}
{"line_number": 332, "line_type": "generated", "code": "\n        return false;\n    }\n\n    /**\n     * Returns whether the problem is at an infeasible state.\n     * @return whether the model is infeasible\n     */\n    boolean isInfeasible", "entropy": 0.16001127660274506, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.12717193365097046, 0.23035217821598053, 0.48241233825683594, 1.2596744298934937, 0.0023460264783352613, 0.017534945160150528, 0.24607837200164795, 0.0032056395430117846, 0.011001761071383953, 0.04088020324707031, 0.11436378210783005, 0.07612714916467667, 0.06689156591892242, 0.0019262346904724836, 0.0004390706308186054, 0.9821537733078003, 0.47386401891708374, 0.1006602793931961, 0.30301544070243835, 0.24418021738529205, 1.2291107177734375, 0.36361807584762573, 0.7761325836181641, 0.00022754464589525014, 0.000621959799900651, 0.0019112430745735765, 0.016743253916502, 0.02269182726740837, 0.009390825405716896, 0.007275041658431292, 0.001555662602186203, 0.020761549472808838, 0.0027214179281145334, 0.06868960708379745, 0.016945572569966316, 0.4461367130279541, 0.3106934726238251, 0.10754792392253876, 0.011931716464459896, 0.0009814451914280653, 0.002592656761407852, 0.023470791056752205, 0.005561592988669872, 0.005178253632038832, 0.00014220656885299832, 0.016685927286744118, 0.047073282301425934, 0.005778394173830748, 0.011244615539908409, 0.0001357701694360003, 0.0006254147156141698, 0.002130026463419199], "tokens": [13, 4706, 736, 2089, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 16969, 3692, 278, 1108, 338, 472, 385, 297, 1725, 294, 1821, 2106, 29889, 13, 268, 334, 732, 2457, 3692, 278, 1904, 338, 297, 1725, 294, 1821, 13, 268, 3776, 13, 1678, 7223, 338, 797, 1725, 294, 1821]}
{"line_number": 333, "line_type": "original", "code": "        columnsToDrop.add(0);", "entropy": 3.095870018005371, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [7.370262145996094, 12.90307331085205, 0.5004938840866089, 0.10325323790311813, 0.0790567472577095, 0.016067780554294586, 0.004989078734070063, 6.466793060302734, 0.41884151101112366], "tokens": [308, 4341, 1762, 15063, 29889, 1202, 29898, 29900, 416]}
{"line_number": 333, "line_type": "generated", "code": "\n            if (Precision.compareTo(getEntry(0, i), 0d, maxUlps)", "entropy": 0.15141916275024414, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.2610686719417572, 0.660816490650177, 0.6818553805351257, 0.4366455078125, 0.35578814148902893, 0.0008380476501770318, 0.0002157455455744639, 0.0020292659755796194, 0.16608451306819916, 0.0006743779522366822, 0.0058588674291968346, 0.8686715364456177, 0.04602290689945221, 0.005906982813030481, 0.23256652057170868, 0.0005365362740121782, 0.008994538336992264, 0.003945068921893835, 0.030304307118058205, 0.016760721802711487, 0.24723400175571442, 0.0008086272282525897, 0.05101979523897171, 0.00024482590379193425, 0.00042500998824834824, 0.0005855038180015981, 0.002415717113763094], "tokens": [13, 9651, 565, 313, 29925, 3757, 2459, 29889, 18307, 1762, 29898, 657, 9634, 29898, 29900, 29892, 474, 511, 29871, 29900, 29881, 29892, 4236, 29965, 29880, 567, 29897]}
{"line_number": 336, "line_type": "original", "code": "        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {", "entropy": 1.136046290397644, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [8.256244659423828, 6.269851207733154, 0.0033949140924960375, 0.050073008984327316, 4.650458812713623, 0.03584549203515053, 0.8908677697181702, 0.0838308185338974, 0.027653083205223083, 0.0013718727277591825, 0.0007418026216328144, 0.00042381841922178864, 0.14504703879356384, 0.0067038629204034805, 0.0035464982502162457, 0.038779161870479584, 7.831216335296631, 0.0021629766561090946, 0.000770391256082803, 0.01910288631916046, 0.004135034512728453, 0.06372620165348053, 0.01010964810848236, 0.0032611305359750986, 0.0018391376361250877], "tokens": [308, 363, 313, 524, 474, 353, 679, 8009, 2061, 573, 6678, 29879, 890, 474, 529, 679, 9986, 928, 616, 16174, 10302, 890, 474, 4862, 426]}
{"line_number": 336, "line_type": "generated", "code": "\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is at an infeasible state.\n     * @return whether the model is infeasible\n     */\n   ", "entropy": 0.1469331830739975, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.1638394147157669, 0.5196826457977295, 0.14711183309555054, 0.29657649993896484, 0.07164791971445084, 0.002068405505269766, 0.0021346656139940023, 0.2521021068096161, 0.03657704219222069, 0.02799881063401699, 0.0006687788409180939, 0.0011319665936753154, 0.01654241792857647, 0.0008247073274105787, 0.0018154582940042019, 0.029548589140176773, 0.05673933029174805, 0.05014534667134285, 0.06006437912583351, 0.0017903504194691777, 0.001046467456035316, 1.1497570276260376, 0.4783550500869751, 0.11451539397239685, 0.3530143201351166, 0.22231446206569672, 1.1651077270507812, 0.48329320549964905, 0.8430390357971191, 0.00035148640745319426, 0.0005909841856919229, 0.002305113710463047, 0.015852143988013268, 0.02650710940361023, 0.010470104403793812, 0.006586035247892141, 0.0016638495726510882, 0.025328325107693672, 0.00831227283924818, 0.056999821215867996, 0.017312126234173775, 0.4168349504470825, 0.32070696353912354, 0.11887513846158981, 0.012510042637586594, 0.0011944787111133337, 0.0026524621061980724, 0.02458721399307251, 0.0030093167442828417, 0.007798108737915754, 0.00019298121333122253, 0.010430348105728626], "tokens": [13, 9651, 500, 13, 4706, 500, 13, 4706, 736, 1565, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 16969, 3692, 278, 1108, 338, 472, 385, 297, 1725, 294, 1821, 2106, 29889, 13, 268, 334, 732, 2457, 3692, 278, 1904, 338, 297, 1725, 294, 1821, 13, 268, 3776, 13, 1678]}
{"line_number": 337, "line_type": "original", "code": "            final double entry = tableau.getEntry(0, i);", "entropy": 0.8942226767539978, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [7.593540668487549, 4.238103866577148, 0.23153121769428253, 0.6866796612739563, 0.20910455286502838, 0.15161634981632233, 0.00012444675667211413, 0.0008250646642409265, 0.0005380851216614246, 0.000990615226328373, 0.0019873883575201035, 0.20347575843334198, 0.0005208089714869857, 0.040611933916807175, 0.05368918180465698], "tokens": [632, 2186, 3765, 6251, 353, 1591, 585, 29889, 657, 9634, 29898, 29900, 29892, 474, 416]}
{"line_number": 337, "line_type": "generated", "code": "\n        }\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is at an infeasible state.\n     * @return whether the model has been solved\n     */\n    boolean isInfeas", "entropy": 0.18261510133743286, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.10099266469478607, 0.5768575668334961, 0.004840560257434845, 0.0027769359294325113, 0.23711363971233368, 0.03351401537656784, 0.02577175199985504, 0.0005709686665795743, 0.0008912881603464484, 0.01376305241137743, 0.0006420934805646539, 0.0013448490062728524, 0.026443954557180405, 0.04884268343448639, 0.05130499601364136, 0.05937553942203522, 0.00145329674705863, 0.0008370947907678783, 1.1670607328414917, 0.5063076615333557, 0.11100705713033676, 0.3482711613178253, 0.22326228022575378, 1.1404669284820557, 0.49505212903022766, 0.888641357421875, 0.0003466005437076092, 0.0005900310934521258, 0.0024845702573657036, 0.015321534126996994, 0.028063373640179634, 0.011025930754840374, 0.003270873799920082, 0.0016627785516902804, 0.02586073987185955, 0.007481059525161982, 0.056372981518507004, 0.016607843339443207, 0.3911598026752472, 1.3374305963516235, 0.1313430517911911, 1.1931514739990234, 0.1055867001414299, 0.0037089858669787645, 0.007804377935826778, 0.00016342257731594145, 0.005009717773646116, 0.04518236219882965, 0.007028498221188784, 0.030811307951807976, 0.00034600470098666847, 0.0007644353318028152], "tokens": [13, 4706, 500, 13, 4706, 736, 1565, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 16969, 3692, 278, 1108, 338, 472, 385, 297, 1725, 294, 1821, 2106, 29889, 13, 268, 334, 732, 2457, 3692, 278, 1904, 756, 1063, 7484, 13, 268, 3776, 13, 1678, 7223, 338, 797, 1725, 294]}
{"line_number": 338, "line_type": "original", "code": "            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {", "entropy": 0.9188882112503052, "is_bug_line": true, "sus_score": 0.23570226039551587, "per_token_entropy": [9.356752395629883, 2.4957985877990723, 0.1881367713212967, 1.6494543552398682, 0.0005737089086323977, 0.0004924515378661454, 0.002278947737067938, 0.0854511633515358, 0.00042000532266683877, 0.0052923341281712055, 3.522364377975464, 0.014832221902906895, 0.16568399965763092, 0.13475297391414642, 0.040192220360040665, 0.002221023431047797, 4.947429656982422, 0.03705227002501488, 0.0015442363219335675, 0.0003935516288038343, 0.02847326546907425, 1.1661779880523682, 0.015221741981804371, 0.0032982020638883114, 0.022002752870321274, 0.004804020747542381], "tokens": [632, 565, 313, 29925, 3757, 2459, 29889, 18307, 1762, 29898, 8269, 29892, 29871, 29900, 29881, 29892, 4236, 29965, 29880, 567, 29897, 1405, 29871, 29900, 29897, 426]}
{"line_number": 338, "line_type": "generated", "code": "\n        return true;\n    }\n\n    /**\n     * @param objectiveFunction the objective function\n     * @return whether the objective function is at an optimal state\n     */\n    boolean isOptimal(final int objectiveFunction) {", "entropy": 0.4762391448020935, "is_bug_line": true, "sus_score": 0.23570226039551587, "per_token_entropy": [0.09040617197751999, 0.30958303809165955, 0.25401294231414795, 0.2533379793167114, 0.0009654866298660636, 0.002646517474204302, 0.059101399034261703, 0.0014965059235692024, 0.0031969649717211723, 0.043512843549251556, 0.07432960718870163, 0.061196327209472656, 0.06617840379476547, 0.0022306579630821943, 0.0005465444410219789, 2.3018100261688232, 1.1077107191085815, 3.401115894317627, 1.7406158447265625, 2.519899845123291, 0.3052288591861725, 0.06660743057727814, 1.4230167865753174, 0.0030570938251912594, 0.21628212928771973, 0.007392433006316423, 0.6123716235160828, 1.9379785060882568, 0.17865556478500366, 0.8534500002861023, 0.10065392404794693, 0.32462605834007263, 2.22611403465271, 1.0478394031524658, 0.13992775976657867, 0.4433706998825073, 0.21161282062530518, 0.0025449765380471945, 0.05958693474531174, 0.0009051040397025645, 0.0077348253689706326, 0.5233378410339355, 0.08053559809923172, 0.3815403878688812, 0.0036305959802120924, 0.04530905932188034, 0.09106167405843735, 1.166393518447876, 0.005099504254758358, 0.00042060110718011856, 0.0033494106028229, 0.0009043894242495298], "tokens": [13, 4706, 736, 1565, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 732, 3207, 12091, 6678, 278, 12091, 740, 13, 268, 334, 732, 2457, 3692, 278, 12091, 740, 338, 472, 385, 14413, 2106, 13, 268, 3776, 13, 1678, 7223, 338, 20624, 3039, 29898, 8394, 938, 12091, 6678, 29897, 426]}
{"line_number": 344, "line_type": "original", "code": "        for (int i = 0; i < getNumArtificialVariables(); i++) {", "entropy": 0.7190993428230286, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [5.2464799880981445, 3.8490865230560303, 0.025794290006160736, 0.11142261326313019, 0.22322499752044678, 0.007867065258324146, 0.2678021490573883, 0.28707796335220337, 0.01733626239001751, 0.003121030516922474, 0.011439328081905842, 0.7263571619987488, 0.3625568747520447, 4.540154457092285, 0.0014947204617783427, 0.0007994554471224546, 0.06195349618792534, 0.00011324241495458409, 0.035337354987859726, 0.028974825516343117, 0.005211340729147196, 0.006579285021871328], "tokens": [308, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474, 529, 679, 8009, 9986, 928, 616, 10444, 1849, 890, 474, 4862, 426]}
{"line_number": 344, "line_type": "generated", "code": "\n     * @return the current solution\n     */\n    public RealVector getSolution() {\n        final RealVector solution = new ArrayRealVector(getWidth() - 1);\n        for (int i = 0; i", "entropy": 0.27580153942108154, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.4236496090888977, 0.7420322299003601, 0.022240037098526955, 0.2652095556259155, 0.40530186891555786, 0.49874332547187805, 0.5279849767684937, 0.08115308731794357, 0.5155538320541382, 0.09093977510929108, 0.15547145903110504, 0.006312313489615917, 0.07208747416734695, 1.7416249513626099, 0.7083792686462402, 0.35980474948883057, 0.07029331475496292, 0.3958740830421448, 0.0006860524881631136, 0.0799546018242836, 0.0040646325796842575, 0.004612876567989588, 0.24136677384376526, 0.9104795455932617, 0.7530452013015747, 0.05055082216858864, 0.5725225210189819, 0.06032826378941536, 0.410302996635437, 0.008151949383318424, 0.0005757343024015427, 7.521823135903105e-05, 0.015827268362045288, 0.19735662639141083, 0.8129698634147644, 0.4460830092430115, 0.026823988184332848, 0.22526246309280396, 0.0603800006210804, 0.1826779693365097, 0.006091007497161627, 0.20764802396297455, 0.8684067726135254, 0.0014992436626926064, 0.015051250346004963, 0.10252219438552856, 0.001745130866765976, 0.1971064656972885, 0.505885660648346, 0.0117024602368474, 0.001465200330130756], "tokens": [13, 268, 334, 732, 2457, 278, 1857, 1650, 13, 268, 3776, 13, 1678, 970, 8195, 12877, 679, 13296, 918, 580, 426, 13, 4706, 2186, 8195, 12877, 1650, 353, 716, 4398, 21713, 12877, 29898, 657, 6110, 580, 448, 29871, 29896, 416, 13, 4706, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474]}
{"line_number": 345, "line_type": "original", "code": "          int col = i + getArtificialVariableOffset();", "entropy": 1.753625512123108, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [7.214987277984619, 4.130287170410156, 2.861957550048828, 0.12932230532169342, 4.13007926940918, 0.5223018527030945, 0.8646724820137024, 2.7698867321014404, 0.000925112864933908, 0.0008092227508313954, 0.011120484210550785, 0.004952544346451759, 0.15582896769046783], "tokens": [965, 938, 784, 353, 474, 718, 679, 9986, 928, 616, 16174, 10302, 890]}
{"line_number": 345, "line_type": "generated", "code": "\n     * @return current solution\n     */\n    public RealVector getSolution() {\n        return new ArrayRealVector(getSolution(), false);\n    }\n\n    /**\n     * Get the current solution.\n     *", "entropy": 0.27730751037597656, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.33049941062927246, 0.4217386543750763, 0.4763000011444092, 0.16540729999542236, 0.772383987903595, 0.6148897409439087, 0.12194161862134933, 0.438771516084671, 0.1968402862548828, 0.09407953172922134, 0.0019980960059911013, 0.032935600727796555, 1.2742382287979126, 0.5916017889976501, 0.3231865167617798, 0.05877086892724037, 0.3520979881286621, 0.000639710808172822, 0.0536644384264946, 0.004358435980975628, 0.009261621162295341, 0.2782733142375946, 1.3290503025054932, 2.1017768383026123, 0.040029481053352356, 0.0010846928926184773, 0.00013362467871047556, 0.01237888541072607, 0.9843860864639282, 0.5568490028381348, 0.002421425189822912, 1.4533025026321411, 0.10499099642038345, 0.005398220382630825, 0.003585103200748563, 0.042316924780607224, 0.0012812747154384851, 0.003055786481127143, 0.077106773853302, 0.04526906833052635, 0.04397520422935486, 0.018109925091266632, 0.0038543473929166794, 0.00036769305006600916, 0.34924715757369995, 0.03351286053657532, 0.19489166140556335, 0.11261530965566635, 0.14091706275939941, 0.011418468318879604, 0.13000796735286713, 0.0027769359294325113], "tokens": [13, 268, 334, 732, 2457, 1857, 1650, 13, 268, 3776, 13, 1678, 970, 8195, 12877, 679, 13296, 918, 580, 426, 13, 4706, 736, 716, 4398, 21713, 12877, 29898, 657, 13296, 918, 3285, 2089, 416, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 3617, 278, 1857, 1650, 29889, 13, 268, 334]}
