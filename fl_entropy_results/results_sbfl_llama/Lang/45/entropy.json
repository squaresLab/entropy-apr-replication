{"line_number": 607, "line_type": "original", "code": "        if (str == null) {", "entropy": 1.5670456886291504, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.414684772491455, 4.116756439208984, 0.044070228934288025, 0.517758309841156, 0.31400230526924133, 0.0031619099900126457, 0.1215384304523468, 0.0043938048183918], "tokens": [308, 565, 313, 710, 1275, 1870, 29897, 426]}
{"line_number": 607, "line_type": "generated", "code": "\n    /**\n     *", "entropy": 0.20810624957084656, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.10232581943273544, 0.6336742043495178, 0.49755731225013733, 0.009334138594567776, 0.004993230104446411, 0.0007527616689912975], "tokens": [13, 1678, 7762, 13, 268, 334]}
{"line_number": 608, "line_type": "original", "code": "            return null;", "entropy": 3.248107433319092, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.533536911010742, 2.727839946746826, 0.7261973023414612, 0.00485515221953392], "tokens": [632, 736, 1870, 29936]}
{"line_number": 608, "line_type": "generated", "code": "\n\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.1372465342283249, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.08045816421508789, 1.1546292304992676, 0.18714191019535065, 0.3903716802597046, 0.12499956041574478, 0.002983050188049674, 0.0029756813310086727, 0.004101674538105726, 0.019415805116295815, 0.0026253541000187397, 0.036737583577632904, 0.04401456192135811, 0.006342283450067043, 0.0016301688738167286, 0.0002712835557758808], "tokens": [13, 13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 610, "line_type": "original", "code": "        if (str.length() == 0) {", "entropy": 1.287752389907837, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.89912748336792, 4.20051383972168, 0.07074779272079468, 0.7737146615982056, 1.2272593975067139, 0.06302163749933243, 0.002195212058722973, 1.9977976083755493, 0.12438162416219711, 0.03727889060974121, 0.05253840610384941, 0.004451722372323275], "tokens": [308, 565, 313, 710, 29889, 2848, 580, 1275, 29871, 29900, 29897, 426]}
{"line_number": 610, "line_type": "generated", "code": "\n\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.17279355227947235, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.11015182733535767, 1.3210830688476562, 0.22121021151542664, 0.6291513442993164, 0.1792711466550827, 0.0027526842895895243, 0.0031697528902441263, 0.0046147750690579414, 0.021685276180505753, 0.0027739638462662697, 0.041889578104019165, 0.045795757323503494, 0.006579640321433544, 0.0015505446353927255, 0.00022373080719262362], "tokens": [13, 13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 611, "line_type": "original", "code": "            return StringUtils.EMPTY;", "entropy": 1.9321939945220947, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.550689697265625, 3.4362387657165527, 3.233670711517334, 0.4412675201892853, 0.02294677309691906, 0.6881144642829895, 0.0015156697481870651, 0.0009004590683616698, 0.014400954358279705], "tokens": [632, 736, 1714, 12177, 29889, 29923, 3580, 15631, 29936]}
{"line_number": 611, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.10537796467542648, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.08980342000722885, 0.4521060883998871, 0.723239004611969, 0.09618308395147324, 0.002203062642365694, 0.003262199927121401, 0.004190593026578426, 0.02015608362853527, 0.002656385535374284, 0.035642359405756, 0.037552304565906525, 0.005705144722014666, 0.0022908414248377085, 0.000300958170555532], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 618, "line_type": "original", "code": "        if (upper == -1 || upper > str.length()) {", "entropy": 1.2156274318695068, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.414900302886963, 4.432042598724365, 0.0750976949930191, 1.678804636001587, 1.8528200387954712, 0.7504255771636963, 0.0055564953945577145, 0.9313236474990845, 0.17280267179012299, 0.5095553398132324, 0.28942251205444336, 0.04238445684313774, 0.0011828100541606545, 0.07135813683271408, 0.006732991896569729], "tokens": [308, 565, 313, 21064, 1275, 448, 29896, 3830, 7568, 1405, 851, 29889, 2848, 3101, 426]}
{"line_number": 618, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.05409913510084152, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.07929540425539017, 0.5939275622367859, 0.4699118435382843, 0.008146747015416622, 0.006188279017806053, 0.000655793643090874, 0.541100263595581, 0.00015639036428183317, 1.2278481335670222e-05, 0.01237888541072607, 0.0035464982502162457, 0.05426689609885216, 0.21734407544136047, 0.03292279690504074, 0.016107313334941864, 0.0007877822499722242, 0.0003997480380348861, 0.2881496846675873, 0.0003636414185166359, 0.0007759897271171212, 4.51792984677013e-05, 0.014023810625076294, 0.0028986602555960417, 0.0032474659383296967, 0.0001616347290109843, 0.0001658063702052459, 0.0034979130141437054, 0.01266060397028923, 0.0066059306263923645, 0.00082923355512321, 0.002460430609062314, 0.0016420703614130616, 0.002240292262285948, 0.005355653818696737, 4.6491513785440475e-06, 0.00039939055568538606, 0.004225374665111303, 0.000408327643526718, 1.4424220353248529e-05, 0.00015531764074694365, 0.003850666107609868, 0.0007289375062100589, 0.003444929840043187, 0.285920113325119, 0.007023289799690247, 0.0017085968283936381, 0.0007188120507635176, 0.11326205730438232, 0.006741398945450783, 0.001019911258481443, 0.0007731309160590172, 0.00048303857329301536], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 619, "line_type": "original", "code": "            upper = str.length();", "entropy": 2.4916932582855225, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.274035453796387, 5.957574367523193, 0.18746612966060638, 1.9658921957015991, 0.006311365868896246, 0.003640573238953948, 0.04693441092967987], "tokens": [632, 7568, 353, 851, 29889, 2848, 890]}
{"line_number": 619, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.12130124121904373, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.06377586722373962, 0.6578976511955261, 0.7962539196014404, 0.07953434437513351, 0.0023855105973780155, 0.0031015409622341394, 0.004192373715341091, 0.014651326462626457, 0.0026914584450423717, 0.0325869619846344, 0.03383674845099449, 0.005028102546930313, 0.001987864263355732, 0.00029345019720494747], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 622, "line_type": "original", "code": "        if (upper < lower) {", "entropy": 1.5759532451629639, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [6.914658069610596, 3.6170129776000977, 0.044898491352796555, 0.8845959901809692, 0.8625881671905518, 0.1601758599281311, 0.11376062035560608, 0.009934741072356701], "tokens": [308, 565, 313, 21064, 529, 5224, 29897, 426]}
{"line_number": 622, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.05124131217598915, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.10995085537433624, 0.6005053520202637, 0.42853984236717224, 0.00897197239100933, 0.006548730190843344, 0.0006974886637181044, 0.48150184750556946, 0.0001711698860162869, 1.6927575416048057e-05, 0.012193541042506695, 0.00380340195260942, 0.04739985242486, 0.16000135242938995, 0.033685535192489624, 0.016073646023869514, 0.0007325111655518413, 0.00043764073052443564, 0.28579285740852356, 0.00031799983116798103, 0.00087878224439919, 4.649054244509898e-05, 0.015159512870013714, 0.002910784212872386, 0.0038237092085182667, 0.00016056202002801, 0.00018285033002030104, 0.004098587669432163, 0.012465540319681168, 0.0073648616671562195, 0.0008491248008795083, 0.0025755350943654776, 0.0016646826406940818, 0.0024635223671793938, 0.0046500167809426785, 4.6491513785440475e-06, 0.00036554806865751743, 0.004522334318608046, 0.0004999579978175461, 1.3947389561508317e-05, 0.0001811817055568099, 0.003837247146293521, 0.0006637753685936332, 0.003962998278439045, 0.29093748331069946, 0.007519039791077375, 0.0020754244178533554, 0.00082601752365008, 0.08268525451421738, 0.007470765151083469, 0.0010595666244626045, 0.0008041008841246367, 0.00048196621355600655], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 623, "line_type": "original", "code": "            upper = lower;", "entropy": 3.3868110179901123, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [9.585729598999023, 6.4325361251831055, 0.18400907516479492, 0.5298347473144531, 0.2019471824169159], "tokens": [632, 7568, 353, 5224, 29936]}
{"line_number": 623, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.11673356592655182, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.07766758650541306, 0.5501137375831604, 0.8229985237121582, 0.08369684964418411, 0.0023409125860780478, 0.0034319807309657335, 0.0041822828352451324, 0.01640487089753151, 0.0025417660363018513, 0.03033842332661152, 0.03308657929301262, 0.005422526504844427, 0.001770715811289847, 0.00027307120035402477], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 626, "line_type": "original", "code": "        StringBuffer result = new StringBuffer();", "entropy": 1.4097157716751099, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.755797863006592, 4.691552639007568, 0.600509524345398, 0.11882041394710541, 0.02214641310274601, 0.020943794399499893, 0.0008873577462509274, 0.0003195490571670234, 0.4764643609523773], "tokens": [308, 1714, 7701, 1121, 353, 716, 1714, 7701, 890]}
{"line_number": 626, "line_type": "generated", "code": "\n    /**\n     *", "entropy": 0.30403926968574524, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.06052128225564957, 0.8986340165138245, 0.8458832502365112, 0.012623053975403309, 0.0057596671395003796, 0.0008142255246639252], "tokens": [13, 1678, 7762, 13, 268, 334]}
{"line_number": 627, "line_type": "original", "code": "        int index = StringUtils.indexOf(str, \" \", lower);", "entropy": 1.0860953330993652, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.707897186279297, 3.7332191467285156, 0.09042119979858398, 0.061677485704422, 3.1773250102996826, 0.006200363393872976, 0.002856224775314331, 0.13546042144298553, 0.007868011482059956, 0.016143091022968292, 0.016640320420265198, 1.8092447519302368, 0.07651615142822266, 0.03145021200180054, 0.41850945353507996], "tokens": [308, 938, 2380, 353, 1714, 12177, 29889, 19402, 29898, 710, 29892, 376, 9162, 5224, 416]}
{"line_number": 627, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.05357306823134422, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.09180483967065811, 0.5175559520721436, 0.44716593623161316, 0.009943593293428421, 0.003897452959790826, 0.0006688979919999838, 0.5215373039245605, 0.0001754606782924384, 1.6927575416048057e-05, 0.016106491908431053, 0.004335884470492601, 0.062458816915750504, 0.18405181169509888, 0.04807199537754059, 0.019203344359993935, 0.0004226268210913986, 0.00031609306461177766, 0.29372239112854004, 0.0003921216703020036, 0.00025018901214934886, 3.85038583772257e-05, 0.015478480607271194, 0.003452533157542348, 0.004808054305613041, 0.00048458753735758364, 0.00028224775451235473, 0.00600178400054574, 0.018741082400083542, 0.010571668855845928, 0.0013141338713467121, 0.00356300943531096, 0.001978703308850527, 0.002741033909842372, 0.006909406278282404, 4.291525328881107e-06, 0.00039188333903439343, 0.004775428678840399, 7.462222856702283e-05, 2.1457441107486375e-05, 0.00017391123401466757, 0.00323320715688169, 0.0008251837571151555, 0.004122094251215458, 0.3238290846347809, 0.010261515155434608, 0.0021877181716263294, 0.000871040450874716, 0.12683753669261932, 0.0072465199045836926, 0.001039203256368637, 0.0009199915803037584, 0.000521523819770664], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 628, "line_type": "original", "code": "        if (index == -1) {", "entropy": 1.4221394062042236, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.064979076385498, 3.650604724884033, 0.039415404200553894, 0.5182773470878601, 1.1217026710510254, 0.08492031693458557, 0.0018892312655225396, 0.3126782774925232, 0.0047876485623419285], "tokens": [308, 565, 313, 2248, 1275, 448, 29896, 29897, 426]}
{"line_number": 628, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.14103499054908752, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.10296161472797394, 0.5583836436271667, 1.106693983078003, 0.11729750037193298, 0.002490753773599863, 0.003301528748124838, 0.004138952121138573, 0.01710718683898449, 0.0026160799898207188, 0.026148557662963867, 0.026211034506559372, 0.005133898463100195, 0.0017356107709929347, 0.0002693767019081861], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 629, "line_type": "original", "code": "            result.append(str.substring(0, upper));", "entropy": 1.2162458896636963, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.29751205444336, 4.137722492218018, 0.07570240646600723, 0.05085008963942528, 0.12085718661546707, 0.6371305584907532, 0.09083592891693115, 0.04092208668589592, 0.002799165900796652, 0.5944687724113464, 0.003564197337254882, 0.7161425352096558, 0.042688120156526566], "tokens": [632, 1121, 29889, 4397, 29898, 710, 29889, 20363, 29898, 29900, 29892, 7568, 2483]}
{"line_number": 629, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It", "entropy": 0.07787653058767319, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.07805632054805756, 0.4242844879627228, 0.6630550622940063, 0.08114571869373322, 0.002412862842902541, 0.0030359390657395124, 0.0038928219582885504, 0.01531472522765398, 0.0027308098506182432, 0.031175587326288223, 0.03448835015296936, 0.005243714898824692, 0.0021059971768409014, 0.0003040566807612777, 1.2072948217391968, 8.093983342405409e-05, 9.179073458653875e-06, 0.011943024583160877, 0.003751978976652026, 0.07551848888397217, 0.5689777731895447, 0.06964807212352753, 0.013385784812271595, 0.0003051292151212692, 0.0002648479712661356, 0.3167903423309326, 0.0003295593778602779, 0.0005508335889317095, 3.0517112463712692e-05, 0.017609326168894768, 0.003502902342006564, 0.004550933837890625, 0.00011669908417388797, 0.00015043080202303827, 0.0024882566649466753, 0.011911572888493538, 0.0054590436629951, 0.0008885487914085388, 0.0024656630121171474, 0.0017525089206174016, 0.002520481590181589, 0.010367348790168762, 5.960446742392378e-06, 0.00044860312482342124, 0.004812562372535467, 0.00010430268594063818, 2.5152843591058627e-05, 0.00015901254664640874, 0.004026995971798897, 0.0008148210472427309, 0.0033614104613661766, 0.3559097945690155], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739]}
{"line_number": 631, "line_type": "original", "code": "            if (upper != str.length()) {", "entropy": 2.390620708465576, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [8.985156059265137, 3.950911045074463, 0.10163092613220215, 2.296917676925659, 3.8688180446624756, 4.4556965827941895, 0.02240942418575287, 0.0033642619382590055, 0.20729830861091614, 0.01400265097618103], "tokens": [632, 565, 313, 21064, 2804, 851, 29889, 2848, 3101, 426]}
{"line_number": 631, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.06609325110912323, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.08671960234642029, 0.4456702470779419, 0.5938580632209778, 0.008692285045981407, 0.006180459633469582, 0.0008137490367516875, 0.7300670146942139, 0.00019762947340495884, 2.002696055569686e-05, 0.01684359833598137, 0.004642066545784473, 0.05958828330039978, 0.2980034351348877, 0.05361834168434143, 0.021315887570381165, 0.0009652484441176057, 0.00042834642226807773, 0.3013944923877716, 0.0004318020073696971, 0.0007291757501661777, 4.51792984677013e-05, 0.020018914714455605, 0.003996719140559435, 0.004315350204706192, 0.00013457823661156, 0.0001774868869688362, 0.003043901873752475, 0.011063659563660622, 0.007305337581783533, 0.0009514334378764033, 0.0025028828531503677, 0.0018009409541264176, 0.0028313808143138885, 0.006285304669290781, 4.768360213347478e-06, 0.00042358008795417845, 0.005525553598999977, 0.0003073934931308031, 2.1219027985353023e-05, 0.0002004899288294837, 0.004263003822416067, 0.000906175933778286, 0.004665916319936514, 0.3705975413322449, 0.012569139711558819, 0.0030507948249578476, 0.0009944260818883777, 0.3261401057243347, 0.009277920238673687, 0.0014447261346504092, 0.0011260127648711205, 0.0006774752982892096], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 632, "line_type": "original", "code": "                result.append(StringUtils.defaultString(appendToEnd));", "entropy": 1.419672966003418, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.137929916381836, 9.68450927734375, 0.1541522890329361, 0.06434308737516403, 0.14754031598567963, 1.8413194417953491, 0.04066401720046997, 0.005555072799324989, 0.1651897430419922, 0.004093126393854618, 0.004048248287290335, 0.0316484235227108, 0.0028580077923834324, 0.001772262854501605, 0.009470300748944283], "tokens": [462, 1121, 29889, 4397, 29898, 1231, 12177, 29889, 4381, 1231, 29898, 4397, 1762, 5044, 2483]}
{"line_number": 632, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.10099824517965317, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.06745100766420364, 0.5348961353302002, 0.6245008111000061, 0.08485964685678482, 0.0025154873728752136, 0.0034294859506189823, 0.004178603179752827, 0.017169879749417305, 0.002620598068460822, 0.030302919447422028, 0.03438607603311539, 0.005485719535499811, 0.0018850667402148247, 0.00029404606902971864], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 634, "line_type": "original", "code": "        } else if (index > upper) {", "entropy": 2.321658134460449, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.283048152923584, 4.822729587554932, 5.597560882568359, 1.7109086513519287, 0.05560153350234032, 2.3737664222717285, 1.1625266075134277, 0.14288188517093658, 0.06521135568618774, 0.00234650238417089], "tokens": [308, 500, 1683, 565, 313, 2248, 1405, 7568, 29897, 426]}
{"line_number": 634, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.05445675924420357, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.08779940754175186, 0.5051090121269226, 0.6179285049438477, 0.008187421597540379, 0.005026797764003277, 0.000692961853928864, 0.5515773296356201, 0.0001419681793777272, 1.549708758830093e-05, 0.012758063152432442, 0.003603752003982663, 0.04272855445742607, 0.17114388942718506, 0.028120169416069984, 0.015854373574256897, 0.0006671110168099403, 0.0003084660565946251, 0.26610809564590454, 0.00036113892565481365, 0.0003281293320469558, 2.074220174108632e-05, 0.013775280676782131, 0.003120079869404435, 0.003452770644798875, 0.00013910756388213485, 0.00016473367577418685, 0.0030110995285212994, 0.010513987392187119, 0.006171337328851223, 0.0009047467028722167, 0.00216535571962595, 0.001513170194812119, 0.0022005646023899317, 0.005284270271658897, 4.291525328881107e-06, 0.00029797881143167615, 0.0044165924191474915, 0.00011598391574807465, 9.775113539944869e-06, 0.00017891713650897145, 0.0032689727377146482, 0.0006893880781717598, 0.0037005534395575523, 0.28533732891082764, 0.0076126232743263245, 0.002389316214248538, 0.0008437649230472744, 0.14308719336986542, 0.006598588544875383, 0.0009828743059188128, 0.0008069596369750798, 0.0005123494775034487], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 635, "line_type": "original", "code": "            result.append(str.substring(0, upper));", "entropy": 1.1756364107131958, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.233537673950195, 4.342796802520752, 0.05508743226528168, 0.04879273101687431, 0.09792158752679825, 0.6537500023841858, 0.05956413596868515, 0.026495035737752914, 0.0032056395430117846, 0.4587245583534241, 0.003173436503857374, 0.2581652104854584, 0.042059097439050674], "tokens": [632, 1121, 29889, 4397, 29898, 710, 29889, 20363, 29898, 29900, 29892, 7568, 2483]}
{"line_number": 635, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.10710843652486801, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.06944146007299423, 0.5000830888748169, 0.7484953999519348, 0.08539687097072601, 0.0026008610147982836, 0.003490904113277793, 0.004222525749355555, 0.015126166865229607, 0.0024204738438129425, 0.02835148572921753, 0.03176287189126015, 0.005364072509109974, 0.0024650683626532555, 0.00029690624796785414], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 636, "line_type": "original", "code": "            result.append(StringUtils.defaultString(appendToEnd));", "entropy": 1.0988916158676147, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.384726524353027, 5.0174641609191895, 0.05293940380215645, 0.05091580003499985, 0.1311265379190445, 1.5858930349349976, 0.023583851754665375, 0.004423238802701235, 0.19337810575962067, 0.0027995225973427296, 0.002837562235072255, 0.022603023797273636, 0.0021525088232010603, 0.0014173472300171852, 0.007113724015653133], "tokens": [632, 1121, 29889, 4397, 29898, 1231, 12177, 29889, 4381, 1231, 29898, 4397, 1762, 5044, 2483]}
{"line_number": 636, "line_type": "generated", "code": "\n    /**\n     *", "entropy": 0.23573943972587585, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.07220359891653061, 0.4951258897781372, 0.8324260711669922, 0.00789426825940609, 0.006021691020578146, 0.0007649118197150528], "tokens": [13, 1678, 7762, 13, 268, 334]}
{"line_number": 638, "line_type": "original", "code": "            result.append(str.substring(0, index));", "entropy": 1.0212384462356567, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [8.724663734436035, 2.888176441192627, 0.012107922695577145, 0.03969591110944748, 0.0704946368932724, 0.3059636354446411, 0.11225011199712753, 0.008329533040523529, 0.0022656265646219254, 0.7787388563156128, 0.0017072877380996943, 0.22095151245594025, 0.11075343936681747], "tokens": [632, 1121, 29889, 4397, 29898, 710, 29889, 20363, 29898, 29900, 29892, 2380, 2483]}
{"line_number": 638, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.11903251707553864, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.09970487654209137, 0.6654564142227173, 0.7264293432235718, 0.07738374173641205, 0.002507758093997836, 0.0038778597954660654, 0.004083628766238689, 0.013701556250452995, 0.0026257107965648174, 0.03170570731163025, 0.030983757227659225, 0.0049923998303711414, 0.002715354785323143, 0.00028713393840007484], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 639, "line_type": "original", "code": "            result.append(StringUtils.defaultString(appendToEnd));", "entropy": 1.0508191585540771, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.172185897827148, 4.8543901443481445, 0.039923422038555145, 0.03398782014846802, 0.1243547797203064, 1.3197813034057617, 0.018919017165899277, 0.004804614000022411, 0.16195634007453918, 0.0017245433991774917, 0.0025760105345398188, 0.018062274903059006, 0.0015941066667437553, 0.0012206730898469687, 0.006806048098951578], "tokens": [632, 1121, 29889, 4397, 29898, 1231, 12177, 29889, 4381, 1231, 29898, 4397, 1762, 5044, 2483]}
{"line_number": 639, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.11050568521022797, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.10038051754236221, 0.482144296169281, 0.783103883266449, 0.07683424651622772, 0.0022691949270665646, 0.0036971091758459806, 0.004509636666625738, 0.01381067093461752, 0.002642237115651369, 0.033780623227357864, 0.03606686368584633, 0.005540846846997738, 0.002044612541794777, 0.0002549561613705009], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 641, "line_type": "original", "code": "        return result.toString();", "entropy": 2.1297805309295654, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.414527893066406, 5.167769432067871, 0.14844144880771637, 0.03041948936879635, 0.005429047625511885, 0.012095792219042778], "tokens": [308, 736, 1121, 29889, 7711, 890]}
{"line_number": 641, "line_type": "generated", "code": "\n\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as", "entropy": 0.10566461831331253, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.09569365531206131, 1.090174674987793, 0.24374832212924957, 1.470542550086975, 0.015246748924255371, 0.00818860437721014, 0.001115891383960843, 0.968772292137146, 0.00025781645672395825, 4.327203714638017e-05, 0.022703131660819054, 0.005080883391201496, 0.08301236480474472, 0.22473645210266113, 0.062031589448451996, 0.020622245967388153, 0.0008424547268077731, 0.000406301929615438, 0.2958551049232483, 0.0004683827864937484, 0.0003668589051812887, 5.8053239627042785e-05, 0.021756665781140327, 0.0044931406155228615, 0.004559834022074938, 0.00011812942830147222, 0.00020561488054227084, 0.0030957176350057125, 0.009276739321649075, 0.007541282568126917, 0.0009809688199311495, 0.002167734783142805, 0.001615291927009821, 0.0027573206461966038, 0.0063348207622766495, 4.529942543740617e-06, 0.0004318020073696971, 0.006086386274546385, 8.642300235806033e-05, 1.1324817933200393e-05, 0.00018439977429807186, 0.0044997865334153175, 0.0008270895341411233, 0.005472796503454447, 0.41216862201690674, 0.018392140045762062, 0.004229291807860136, 0.0009366653976030648, 0.35285165905952454, 0.010928656905889511, 0.0014671048847958446, 0.0011100566480308771], "tokens": [13, 13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408]}
