{"line_number": 51, "line_type": "original", "code": "    public static double solve(UnivariateRealFunction f, double x0, double x1)", "entropy": 1.0638266801834106, "is_bug_line": false, "sus_score": 0.7291510701179504, "per_token_entropy": [2.5344438552856445, 9.292710304260254, 0.08004681766033173, 1.0618404150009155, 2.7608697414398193, 0.0760183334350586, 0.21149183809757233, 0.0013621109537780285, 0.00022456508304458112, 0.028057346120476723, 0.011849727481603622, 0.07999498397111893, 0.0034728473983705044, 1.5147863626480103, 2.96626353263855, 0.4533764123916626, 0.1294230818748474, 0.394707053899765, 0.0751039981842041, 0.004643134772777557, 0.6596714854240417], "tokens": [268, 970, 2294, 3765, 4505, 29898, 2525, 27432, 403, 21713, 6678, 285, 29892, 3765, 921, 29900, 29892, 3765, 921, 29896, 29897]}
{"line_number": 51, "line_type": "generated", "code": "\n     *", "entropy": 0.1441190242767334, "is_bug_line": false, "sus_score": 0.7291510701179504, "per_token_entropy": [0.2455432265996933, 0.17705389857292175, 0.00975992251187563], "tokens": [13, 268, 334]}
{"line_number": 199, "line_type": "original", "code": "            throw new ConvergenceException(", "entropy": 2.145932674407959, "is_bug_line": false, "sus_score": 0.6728124618530273, "per_token_entropy": [8.527913093566895, 6.282505512237549, 0.8076704144477844, 1.1329723596572876, 0.003490904113277793, 0.009103459306061268, 0.037098564207553864, 0.366707980632782], "tokens": [632, 3183, 716, 1281, 369, 10238, 2451, 29898]}
{"line_number": 199, "line_type": "generated", "code": "\n    /**\n     * Find a zero near the midpoint of the given interval.\n     *\n     * @param f Function to solve.\n     * @param min Lower bound for the interval.\n     * @param max Upper bound for", "entropy": 0.2596374750137329, "is_bug_line": false, "sus_score": 0.6728124618530273, "per_token_entropy": [0.22320573031902313, 0.6485553979873657, 0.13976441323757172, 0.4609617590904236, 0.011949856765568256, 0.0012996093137189746, 2.5147862434387207, 0.24064196646213531, 0.8831813335418701, 1.0714912414550781, 0.16439330577850342, 0.3285616338253021, 0.003748534945771098, 0.06130576133728027, 0.7191669344902039, 1.8584166765213013, 0.054473165422677994, 0.2948107123374939, 0.10405347496271133, 0.0016936019528657198, 0.001116844010539353, 1.1636455059051514, 0.00220567942596972, 0.0003083468764089048, 0.18007127940654755, 0.0049026040360331535, 0.45548516511917114, 0.39492732286453247, 0.462458074092865, 0.1334175318479538, 0.18264718353748322, 0.0031919742468744516, 0.003202312160283327, 5.185469490243122e-05, 0.0016279076226055622, 0.0009598892065696418, 0.49744540452957153, 0.059828490018844604, 0.007109581492841244, 0.06116347014904022, 0.018192922696471214, 0.0031547797843813896, 0.0554601214826107, 0.0012466285843402147, 6.8662193370983e-05, 3.158996332786046e-05, 0.0005380851216614246, 0.0001699779968475923, 0.001623861026018858, 0.01618391089141369, 0.0018139113672077656, 0.0004357342259027064], "tokens": [13, 1678, 7762, 13, 268, 334, 10987, 263, 5225, 2978, 278, 7145, 3149, 310, 278, 2183, 7292, 29889, 13, 268, 334, 13, 268, 334, 732, 3207, 285, 6680, 304, 4505, 29889, 13, 268, 334, 732, 3207, 1375, 27723, 3216, 363, 278, 7292, 29889, 13, 268, 334, 732, 3207, 4236, 24929, 3216, 363]}
{"line_number": 104, "line_type": "original", "code": "     * <code>Integer.MAX_VALUE</code> iterations to throw a ", "entropy": 1.6988645792007446, "is_bug_line": false, "sus_score": 0.6696341037750244, "per_token_entropy": [5.748028755187988, 0.5040141940116882, 3.899510622024536, 0.6964370608329773, 0.02786955237388611, 2.5110292434692383, 0.012098264880478382, 0.8940422534942627, 0.002909595612436533, 0.0016767027555033565, 0.05935913696885109, 0.0010220548138022423, 0.17503106594085693, 0.4877263903617859, 6.481817245483398, 7.171232223510742, 0.9568498730659485, 0.9489079713821411], "tokens": [418, 334, 529, 401, 29958, 7798, 29889, 12648, 29918, 19143, 829, 401, 29958, 24372, 304, 3183, 263, 29871]}
{"line_number": 104, "line_type": "generated", "code": "\n     * @param upperBound upper bound (b never is greater than this\n     * value)\n     * @param maximumIterations maximum number of iterations to perform\n     * @return a two element array holding {a, b}\n    ", "entropy": 0.07409484684467316, "is_bug_line": false, "sus_score": 0.6696341037750244, "per_token_entropy": [0.13873691856861115, 0.019963176921010017, 0.0004549183649942279, 0.025596775114536285, 0.0027629081159830093, 0.017662031576037407, 0.001178523525595665, 0.001727637485601008, 0.000945240433793515, 0.0021588134113699198, 0.0015939876902848482, 0.03609791025519371, 0.0027757470961660147, 0.0002454218047205359, 0.0005667987279593945, 0.0010633773636072874, 0.05954122170805931, 0.1255444586277008, 0.0008997444529086351, 0.011159033514559269, 0.009450461715459824, 0.08629747480154037, 0.940185010433197, 0.0018197420286014676, 0.010372539982199669, 0.031784698367118835, 0.026831183582544327, 0.0004899493651464581, 0.000714523543138057, 0.31318286061286926, 0.06744442880153656, 0.0016149348812177777, 0.08683796972036362, 0.5325831174850464, 0.8040174841880798, 0.03771073743700981, 0.2792135775089264, 0.0005365362740121782, 0.02671883814036846, 0.00820610299706459, 0.016667168587446213, 0.0044486369006335735, 0.002951553324237466, 0.0020801827777177095, 0.015695607289671898, 0.009149174205958843, 0.005975951440632343, 0.0004203628050163388, 0.0027348517905920744, 0.014412587508559227, 0.014809317886829376, 0.04689960181713104], "tokens": [13, 268, 334, 732, 3207, 7568, 17109, 7568, 3216, 313, 29890, 2360, 338, 7621, 1135, 445, 13, 268, 334, 995, 29897, 13, 268, 334, 732, 3207, 7472, 13463, 800, 7472, 1353, 310, 24372, 304, 2189, 13, 268, 334, 732, 2457, 263, 1023, 1543, 1409, 13587, 426, 29874, 29892, 289, 29913, 13, 268]}
{"line_number": 120, "line_type": "original", "code": "     * function", "entropy": 6.042333126068115, "is_bug_line": false, "sus_score": 0.6631174087524414, "per_token_entropy": [4.634394645690918, 9.093940734863281, 4.398663520812988], "tokens": [418, 334, 740]}
{"line_number": 120, "line_type": "generated", "code": "\n        setup(function);\n        double a = initial;\n        double b = initial;\n        double fa = function.value(a);\n        double fb = function.value(b);\n        int i = 0;\n", "entropy": 0.2616455554962158, "is_bug_line": false, "sus_score": 0.6631174087524414, "per_token_entropy": [0.3112024664878845, 0.6370970606803894, 1.6514678001403809, 0.010622506961226463, 0.1942012906074524, 0.05939710512757301, 0.02764960378408432, 0.6426455974578857, 1.9134001731872559, 0.7062728404998779, 0.1743483692407608, 0.36420363187789917, 1.2841486930847168, 0.03543400764465332, 0.03980406001210213, 0.05480658635497093, 0.08469778299331665, 0.007532291114330292, 0.0906977728009224, 0.024318842217326164, 0.024661187082529068, 0.2818852663040161, 0.6733161211013794, 0.3920271098613739, 0.13808651268482208, 0.13736574351787567, 0.0018651961581781507, 0.05381322279572487, 0.025995831936597824, 0.09389429539442062, 0.027051080018281937, 0.015530947595834732, 0.036609452217817307, 0.05251408740878105, 0.012747234664857388, 0.002011896576732397, 0.00229322025552392, 0.03206677734851837, 0.00014399446081370115, 0.00019226610311307013, 0.00017045476124621928, 0.0023267597425729036, 0.0015723258256912231, 0.028852064162492752, 0.48598116636276245, 1.1818925142288208, 1.2844562530517578, 0.07991476356983185, 0.03806930035352707, 0.12839685380458832, 0.011497310362756252, 0.04441796988248825], "tokens": [13, 4706, 6230, 29898, 2220, 416, 13, 4706, 3765, 263, 353, 2847, 29936, 13, 4706, 3765, 289, 353, 2847, 29936, 13, 4706, 3765, 2258, 353, 740, 29889, 1767, 29898, 29874, 416, 13, 4706, 3765, 285, 29890, 353, 740, 29889, 1767, 29898, 29890, 416, 13, 4706, 938, 474, 353, 29871, 29900, 29936, 13]}
{"line_number": 60, "line_type": "original", "code": "     * ", "entropy": 2.4325249195098877, "is_bug_line": false, "sus_score": 0.6304726600646973, "per_token_entropy": [5.315858840942383, 1.07725989818573, 0.9044556021690369], "tokens": [418, 334, 29871]}
{"line_number": 60, "line_type": "generated", "code": "\n     * @param f the function to solve\n     * @param initial the start value to bracket a root\n     * @param lowerBound lower bound for the interval\n     * @param upperBound upper bound for the interval\n     * @", "entropy": 0.25435370206832886, "is_bug_line": false, "sus_score": 0.6304726600646973, "per_token_entropy": [0.06630893796682358, 0.05183722823858261, 0.0017849955474957824, 0.5855691432952881, 0.0036684852093458176, 0.04550590738654137, 0.31193557381629944, 0.04085983708500862, 0.5578018426895142, 2.3948545455932617, 0.16957250237464905, 0.03046817146241665, 2.884823152271565e-05, 0.00134222989436239, 0.0005938435206189752, 1.2495118379592896, 0.9325985908508301, 0.9447543621063232, 0.08040140569210052, 0.4990540146827698, 2.2247352600097656, 6.4490144723095e-05, 0.42136359214782715, 0.06150374561548233, 0.5383937358856201, 0.0055557843297719955, 2.3841574147809297e-05, 0.004202107898890972, 0.013503049500286579, 0.00566958449780941, 0.08317834883928299, 1.261575698852539, 0.09371141344308853, 0.09757629036903381, 0.11426340788602829, 0.0562024861574173, 0.1902875304222107, 0.001784638618119061, 4.172316494077677e-06, 0.00021908267808612436, 0.0003488647344056517, 0.0004234609368722886, 0.002936696168035269, 0.008756572380661964, 0.005060957279056311, 0.0004992430913262069, 0.00017998983094003052, 0.00047267231275327504, 0.012136776931583881, 0.03589643910527229, 0.0005411829333752394, 0.016868917271494865], "tokens": [13, 268, 334, 732, 3207, 285, 278, 740, 304, 4505, 13, 268, 334, 732, 3207, 2847, 278, 1369, 995, 304, 4105, 3522, 263, 3876, 13, 268, 334, 732, 3207, 5224, 17109, 5224, 3216, 363, 278, 7292, 13, 268, 334, 732, 3207, 7568, 17109, 7568, 3216, 363, 278, 7292, 13, 268, 334, 732]}
{"line_number": 198, "line_type": "original", "code": "        if (fa * fb >= 0.0 ) {", "entropy": 2.072371006011963, "is_bug_line": true, "sus_score": 0.6263667345046997, "per_token_entropy": [7.063171863555908, 8.599418640136719, 0.14455392956733704, 4.717319488525391, 0.40392524003982544, 0.02269788645207882, 0.4695781469345093, 2.439531087875366, 0.01763228140771389, 0.001157209975644946, 0.40208882093429565, 0.000753476400859654, 4.584524154663086, 0.14683756232261658], "tokens": [308, 565, 313, 5444, 334, 285, 29890, 6736, 29871, 29900, 29889, 29900, 1723, 426]}
{"line_number": 198, "line_type": "generated", "code": "\n    /**\n     * Creates a solver for univariate real equations.\n     *\n     * @return a solver for univariate real equations.\n     */\n    public static UnivariateRealSolver create() {", "entropy": 0.2747519016265869, "is_bug_line": true, "sus_score": 0.6263667345046997, "per_token_entropy": [0.18013320863246918, 0.4886133074760437, 0.13828906416893005, 0.45036810636520386, 0.00938220415264368, 0.00093606993323192, 2.4463436603546143, 0.003689270233735442, 0.3039507567882538, 0.8915277719497681, 0.0004223884898237884, 1.589986801147461, 0.8547991514205933, 0.0015240018256008625, 0.0007441850611940026, 0.1492137461900711, 0.5787025690078735, 0.16312362253665924, 0.018790921196341515, 0.002388721564784646, 0.00755962124094367, 1.145880937576294, 0.003787250956520438, 0.0032323752529919147, 0.12022727727890015, 0.5790249705314636, 0.3740312159061432, 0.6747751832008362, 0.0012874656822532415, 0.4805935025215149, 0.052144259214401245, 0.007429588586091995, 0.00650751544162631, 0.042878858745098114, 0.008417602628469467, 0.3126277029514313, 0.011271608993411064, 0.007027314510196447, 0.4473431408405304, 0.006656259763985872, 0.02332010120153427, 0.08469624817371368, 0.04804074764251709, 0.038213539868593216, 0.0029993331991136074, 0.0030611343681812286, 0.01621393859386444, 0.0019691854249686003, 0.0016138636274263263, 1.1913739442825317, 0.29491758346557617, 0.015045966021716595], "tokens": [13, 1678, 7762, 13, 268, 334, 6760, 1078, 263, 899, 369, 363, 443, 27432, 403, 1855, 10693, 29889, 13, 268, 334, 13, 268, 334, 732, 2457, 263, 899, 369, 363, 443, 27432, 403, 1855, 10693, 29889, 13, 268, 3776, 13, 1678, 970, 2294, 853, 27432, 403, 21713, 13296, 369, 1653, 580, 426]}
{"line_number": 119, "line_type": "original", "code": "     * @throws FunctionEvaluationException if an error occurs evaluating the", "entropy": 1.2682031393051147, "is_bug_line": false, "sus_score": 0.6245604157447815, "per_token_entropy": [5.2244954109191895, 10.45846176147461, 1.0609056949615479, 0.9519128799438477, 0.00011240804451517761, 2.7836670875549316, 0.0034381584264338017, 0.0005128260818310082, 0.001670038211159408, 0.0021757043432444334, 0.13033084571361542, 0.17959265410900116, 0.033858299255371094, 0.2026386559009552, 0.36879706382751465, 0.000681883015204221, 0.156202033162117], "tokens": [418, 334, 732, 386, 5727, 6680, 29923, 4387, 362, 2451, 565, 385, 1059, 10008, 6161, 1218, 278]}
{"line_number": 119, "line_type": "generated", "code": "\n        setup(function);\n        UnivariateRealSolver solver = LazyHolder.FACTORY.newDefaultSolver();\n        solver.setMaximalIterationCount(maximumIterations);\n        return solver", "entropy": 0.14214013516902924, "is_bug_line": false, "sus_score": 0.6245604157447815, "per_token_entropy": [0.1387733370065689, 0.3022717833518982, 1.0979769229888916, 0.008870718069374561, 0.18772414326667786, 0.053379349410533905, 0.020157018676400185, 0.37463536858558655, 1.3658983707427979, 0.0007313199457712471, 8.21318244561553e-05, 0.015592096373438835, 0.040566377341747284, 9.619726915843785e-05, 0.1349848508834839, 0.003034512745216489, 0.014763743616640568, 0.06630514562129974, 0.0003564914222806692, 0.0001919085334520787, 0.0029825749807059765, 0.04071849584579468, 0.00036399890086613595, 0.001022888463921845, 0.007589790038764477, 0.010918162763118744, 0.6469534039497375, 0.03355424478650093, 0.00047874910524114966, 0.055694106966257095, 0.01694287732243538, 0.05260999873280525, 0.8366273641586304, 0.0007346553611569107, 0.0012137673329561949, 0.011349048465490341, 0.1441706120967865, 1.3456543684005737, 0.042183104902505875, 0.0021799865644425154, 3.909988299710676e-05, 0.002039615996181965, 0.060021042823791504, 0.00018594920402392745, 0.00034028460504487157, 0.0001070442158379592, 0.016208073124289513, 0.014887658879160881, 0.06812050193548203, 0.13471859693527222, 0.013610774651169777, 0.0006733057671226561], "tokens": [13, 4706, 6230, 29898, 2220, 416, 13, 4706, 853, 27432, 403, 21713, 13296, 369, 899, 369, 353, 19575, 29891, 11439, 29889, 4519, 1783, 18929, 29889, 1482, 4592, 13296, 369, 890, 13, 4706, 899, 369, 29889, 842, 7976, 3039, 13463, 362, 3981, 29898, 27525, 398, 13463, 800, 416, 13, 4706, 736, 899, 369]}
{"line_number": 224, "line_type": "original", "code": "     * @throws IllegalArgumentException if f is null", "entropy": 1.5600576400756836, "is_bug_line": false, "sus_score": 0.6160879731178284, "per_token_entropy": [6.663025856018066, 5.345865249633789, 1.3496718406677246, 3.17518949508667, 0.0019860798493027687, 1.5010781288146973, 0.0037408152129501104, 0.031998198479413986, 0.0028969962149858475, 0.14627797901630402, 1.917824387550354, 0.0741165429353714, 0.06707752496004105], "tokens": [418, 334, 732, 386, 5727, 1720, 12018, 15730, 2451, 565, 285, 338, 1870]}
{"line_number": 224, "line_type": "generated", "code": "\n    /**\n     * Solve the equation", "entropy": 0.5676589012145996, "is_bug_line": false, "sus_score": 0.6160879731178284, "per_token_entropy": [0.16339203715324402, 0.3878766596317291, 0.06773991137742996, 0.46176642179489136, 0.013319795951247215, 0.0010582567192614079, 2.285770893096924, 0.6503029465675354, 0.9906442165374756, 0.6547179818153381], "tokens": [13, 1678, 7762, 13, 268, 334, 4956, 345, 278, 6306]}
{"line_number": 166, "line_type": "original", "code": "            double initial, double lowerBound, double upperBound, ", "entropy": 2.2320358753204346, "is_bug_line": false, "sus_score": 0.6139505505561829, "per_token_entropy": [7.920252799987793, 4.137166976928711, 9.131448745727539, 2.433981418609619, 1.7275161743164062, 0.040120646357536316, 0.02368840202689171, 0.01103182602673769, 0.3130353093147278, 0.03192049264907837, 0.001950506237335503, 1.002341628074646, 2.242008686065674], "tokens": [632, 3765, 2847, 29892, 3765, 5224, 17109, 29892, 3765, 7568, 17109, 29892, 29871]}
{"line_number": 166, "line_type": "generated", "code": "\n     */\n    public static double midpoint(double a, double b) {\n        return (a + b) / 2.0;\n    }\n\n    /**\n     * Compute the bisection point of two values", "entropy": 0.22669807076454163, "is_bug_line": false, "sus_score": 0.6139505505561829, "per_token_entropy": [0.30324864387512207, 0.17483191192150116, 0.5681965351104736, 0.019621090963482857, 0.16937607526779175, 0.31344273686408997, 0.021250886842608452, 0.3051256239414215, 0.10337278991937637, 0.09897404164075851, 0.052318159490823746, 0.27524176239967346, 0.011878707446157932, 0.008285554125905037, 0.060195714235305786, 0.0022703842259943485, 0.04247506335377693, 0.09965880960226059, 0.04394417628645897, 0.2539787292480469, 0.19528397917747498, 0.4432615041732788, 0.06160855293273926, 0.02876218594610691, 0.0016312400111928582, 0.06697696447372437, 1.1331783533096313, 0.021737419068813324, 0.0010917185572907329, 0.38547664880752563, 0.0015886317705735564, 0.09454382210969925, 0.04340829327702522, 0.3307262063026428, 0.00363107118755579, 0.04159767925739288, 0.33158189058303833, 0.35133299231529236, 0.03231830522418022, 0.042497456073760986, 0.012394191697239876, 0.0006136203301139176, 0.8081429600715637, 0.07699264585971832, 0.07945529371500015, 2.171008586883545, 0.00042512916843406856, 0.0005831210291944444, 1.6420962810516357, 0.13586938381195068, 0.2896941602230072, 0.03110174834728241], "tokens": [13, 268, 3776, 13, 1678, 970, 2294, 3765, 7145, 3149, 29898, 8896, 263, 29892, 3765, 289, 29897, 426, 13, 4706, 736, 313, 29874, 718, 289, 29897, 847, 29871, 29906, 29889, 29900, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 11796, 29872, 278, 289, 895, 428, 1298, 310, 1023, 1819]}
{"line_number": 108, "line_type": "original", "code": "     * {@link #bracket(UnivariateRealFunction, double, double, double, int)}, ", "entropy": 1.1724268198013306, "is_bug_line": false, "sus_score": 0.6115673184394836, "per_token_entropy": [5.764659881591797, 0.3964305520057678, 7.701412677764893, 0.5559609532356262, 0.9872417449951172, 1.1634509563446045, 0.009007415734231472, 0.24217085540294647, 0.09178221970796585, 0.00018761781393550336, 0.0001532914029667154, 0.022026659920811653, 0.0010702840518206358, 0.06451912969350815, 0.22150665521621704, 0.015615804120898247, 0.12321901321411133, 0.02990291826426983, 0.03345049172639847, 2.1267940998077393, 0.13716071844100952, 5.569858551025391, 1.7082338333129883], "tokens": [418, 334, 26633, 2324, 396, 2634, 3522, 29898, 2525, 27432, 403, 21713, 6678, 29892, 3765, 29892, 3765, 29892, 3765, 29892, 938, 19230, 29871]}
{"line_number": 108, "line_type": "generated", "code": "\n     * @throws ConvergenceException if a root can not be bracketted\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException", "entropy": 0.016555937007069588, "is_bug_line": false, "sus_score": 0.6115673184394836, "per_token_entropy": [0.14133000373840332, 0.041462164372205734, 0.0036648032255470753, 0.14562885463237762, 0.007962154224514961, 1.3947389561508317e-05, 0.04660575091838837, 1.6569954823353328e-05, 0.000188332938705571, 0.0006157647585496306, 0.01031083520501852, 0.04579029232263565, 0.007570150773972273, 0.07671137154102325, 0.0011743560899049044, 0.0004897110629826784, 0.0067113228142261505, 0.04104234650731087, 0.0004294188693165779, 7.950943836476654e-05, 0.07636187225580215, 0.04896596446633339, 0.0005193791585043073, 0.02638416178524494, 0.0002882065309677273, 7.629365427419543e-06, 0.04229886829853058, 8.332382276421413e-05, 1.7881377516459906e-06, 5.9126061387360096e-05, 0.00024101213784888387, 0.006088756024837494, 0.00792359933257103, 0.0007689617923460901, 0.0005820487276650965, 0.004089208785444498, 4.327203714638017e-05, 0.014545945450663567, 0.011916167102754116, 0.002439501229673624, 0.00023862851958256215, 0.006722690537571907, 0.011915814131498337, 0.0074300616979599, 0.0021782023832201958, 0.001311395550146699, 0.0007491880678571761, 7.152531907195225e-06, 0.008576583117246628, 3.6238969187252223e-05, 0.0001958416833076626, 0.00014041867689229548], "tokens": [13, 268, 334, 732, 386, 5727, 1281, 369, 10238, 2451, 565, 263, 3876, 508, 451, 367, 4105, 384, 1803, 287, 13, 268, 334, 732, 386, 5727, 6680, 29923, 4387, 362, 2451, 565, 385, 1059, 10008, 6161, 1218, 278, 13, 268, 334, 740, 13, 268, 334, 732, 386, 5727, 1720, 12018, 15730, 2451]}
{"line_number": 223, "line_type": "original", "code": "     * @param f  input function", "entropy": 3.4084036350250244, "is_bug_line": false, "sus_score": 0.6083552241325378, "per_token_entropy": [6.719022750854492, 5.6902971267700195, 1.3884578943252563, 0.6576172113418579, 0.9423182606697083, 4.358815670013428, 7.310083866119385, 0.20061548054218292], "tokens": [418, 334, 732, 3207, 285, 29871, 1881, 740]}
{"line_number": 223, "line_type": "generated", "code": "\n    /**\n     * Returns a factory for creating", "entropy": 0.7252143621444702, "is_bug_line": false, "sus_score": 0.6083552241325378, "per_token_entropy": [0.16425321996212006, 0.27567166090011597, 0.07057318091392517, 0.46590301394462585, 0.013746473006904125, 0.0009463122696615756, 3.0294837951660156, 0.8388615846633911, 1.688624620437622, 0.9307977557182312, 0.49849605560302734], "tokens": [13, 1678, 7762, 13, 268, 334, 16969, 263, 12529, 363, 4969]}
{"line_number": 193, "line_type": "original", "code": "            fb = function.value(b);", "entropy": 2.1399242877960205, "is_bug_line": false, "sus_score": 0.6039917469024658, "per_token_entropy": [9.142376899719238, 9.539793968200684, 1.6738686561584473, 0.09965696930885315, 0.8180798292160034, 0.01022529136389494, 0.004254575818777084, 0.007030983921140432, 0.038727324455976486, 0.065228670835495], "tokens": [632, 285, 29890, 353, 740, 29889, 1767, 29898, 29890, 416]}
{"line_number": 193, "line_type": "generated", "code": "\n    /**\n     * Creates a solver for finding only real roots of the given function.\n     *\n     * @param function Function to solve.\n     * @return a solver for finding only real roots of the given function.", "entropy": 0.38360896706581116, "is_bug_line": false, "sus_score": 0.6039917469024658, "per_token_entropy": [0.157578706741333, 0.7236745357513428, 0.11208292096853256, 0.44981542229652405, 0.010208889842033386, 0.0011512563796713948, 2.8228983879089355, 0.003655895357951522, 0.3333212435245514, 0.9047021269798279, 0.00046921687317080796, 1.4693758487701416, 1.984338402748108, 0.7579039931297302, 1.0498660802841187, 0.13087107241153717, 0.8009963035583496, 1.7802734375, 0.1659964770078659, 0.45902499556541443, 0.20181898772716522, 0.03160291537642479, 0.0024968183133751154, 0.003109503071755171, 1.0666446685791016, 0.0019884591456502676, 0.0009367844904772937, 0.10701850801706314, 0.030477305874228477, 0.5654324293136597, 0.5802447199821472, 1.024330973625183, 0.03062518686056137, 0.147470161318779, 0.0061528547666966915, 0.0027518521528691053, 0.005676341243088245, 0.030044404789805412, 0.25759440660476685, 0.19413305819034576, 0.08166791498661041, 0.00037508129025809467, 0.25257226824760437, 0.4298061430454254, 0.2494339942932129, 0.0037863010074943304, 0.0030157347209751606, 0.29420706629753113, 0.0230563972145319, 0.06136731430888176, 0.07573523372411728, 0.0638878121972084], "tokens": [13, 1678, 7762, 13, 268, 334, 6760, 1078, 263, 899, 369, 363, 9138, 871, 1855, 16778, 310, 278, 2183, 740, 29889, 13, 268, 334, 13, 268, 334, 732, 3207, 740, 6680, 304, 4505, 29889, 13, 268, 334, 732, 2457, 263, 899, 369, 363, 9138, 871, 1855, 16778, 310, 278, 2183, 740, 29889]}
{"line_number": 184, "line_type": "original", "code": "        double fa;", "entropy": 5.621294021606445, "is_bug_line": false, "sus_score": 0.6038300395011902, "per_token_entropy": [6.907233715057373, 9.721758842468262, 5.394311904907227, 0.4618718922138214], "tokens": [308, 3765, 2258, 29936]}
{"line_number": 184, "line_type": "generated", "code": "\n     */\n    private static class FactoryHolder {\n<|mask:1|>\n        /**\n         * Factory that creates the default {@link UnivariateRealSolver}.\n         */\n        static final UnivariateRealSolver", "entropy": 0.3696514368057251, "is_bug_line": false, "sus_score": 0.6038300395011902, "per_token_entropy": [0.3892158269882202, 0.7032755017280579, 0.39625635743141174, 0.01210062112659216, 0.08985517919063568, 0.08766258507966995, 0.008915734477341175, 0.08533065021038055, 0.45610153675079346, 0.018319807946681976, 0.02098255231976509, 0.023544147610664368, 1.0537855625152588, 0.003310677595436573, 0.10309862345457077, 0.008849567733705044, 0.4070042669773102, 0.005996569991111755, 0.23644043505191803, 0.19151997566223145, 0.11768702417612076, 0.12641625106334686, 0.7247437238693237, 0.0382978692650795, 0.0005390383303165436, 0.6505464315414429, 1.4031426906585693, 1.3308753967285156, 1.954875111579895, 0.5476952195167542, 2.815713882446289, 0.0144045976921916, 0.715637743473053, 0.00035553809721022844, 0.00017248096992261708, 0.28248175978660583, 0.2847425639629364, 9.107174992095679e-05, 1.4165701866149902, 0.0304196048527956, 0.03589735925197601, 0.29452696442604065, 0.005881858989596367, 0.03430429473519325, 1.7263849973678589, 0.2154935598373413, 0.12125959247350693, 0.0005578630371019244, 0.00046623803791590035, 0.027411630377173424, 0.0022568251006305218, 0.0004583738627843559], "tokens": [13, 268, 3776, 13, 1678, 2024, 2294, 770, 27561, 11439, 426, 13, 29966, 29989, 13168, 29901, 29896, 29989, 29958, 13, 4706, 7762, 13, 308, 334, 27561, 393, 10017, 278, 2322, 26633, 2324, 853, 27432, 403, 21713, 13296, 369, 1836, 13, 308, 3776, 13, 4706, 2294, 2186, 853, 27432, 403, 21713, 13296, 369]}
{"line_number": 206, "line_type": "original", "code": "        ", "entropy": 9.430550575256348, "is_bug_line": false, "sus_score": 0.5964792370796204, "per_token_entropy": [9.430550575256348], "tokens": [3986]}
{"line_number": 206, "line_type": "generated", "code": "\n    /**\n     * Returns the default factory.\n     * @return the default factory.\n     */\n    public static UnivariateRealSolverFactory getDefaultSolverFactory() {\n        return LazyHolder.FACTORY;", "entropy": 0.24840198457241058, "is_bug_line": false, "sus_score": 0.5964792370796204, "per_token_entropy": [0.17178520560264587, 0.5165103077888489, 0.09414148330688477, 0.4052293002605438, 0.008199954405426979, 0.000742398202419281, 2.9618442058563232, 0.922423779964447, 1.2715250253677368, 1.3324003219604492, 1.1733324527740479, 0.09268545359373093, 0.00381337758153677, 0.017319155856966972, 1.1190712451934814, 0.021598251536488533, 0.26404669880867004, 0.09562789648771286, 0.12616945803165436, 0.49012231826782227, 0.022000771015882492, 0.008636386133730412, 0.12059749662876129, 0.006872823927551508, 0.02146022953093052, 0.3069557547569275, 0.024050280451774597, 0.022596614435315132, 0.0038448472041636705, 0.0019990478176623583, 0.00554867135360837, 0.0017214493127539754, 0.002316412515938282, 0.012404435314238071, 0.07028409093618393, 0.21262991428375244, 0.7757359743118286, 0.0006599632324650884, 0.0220328401774168, 0.0373382642865181, 0.00627594580873847, 0.006930716335773468, 0.038534872233867645, 0.021163005381822586, 0.034526124596595764, 0.00501849502325058, 0.0040710438042879105, 0.004474271554499865, 0.004395348019897938, 0.0030137142166495323, 0.0038182465359568596, 0.016406863927841187], "tokens": [13, 1678, 7762, 13, 268, 334, 16969, 278, 2322, 12529, 29889, 13, 268, 334, 732, 2457, 278, 2322, 12529, 29889, 13, 268, 3776, 13, 1678, 970, 2294, 853, 27432, 403, 21713, 13296, 369, 5126, 679, 4592, 13296, 369, 5126, 580, 426, 13, 4706, 736, 19575, 29891, 11439, 29889, 4519, 1783, 18929, 29936]}
{"line_number": 229, "line_type": "original", "code": "        }", "entropy": 7.673194885253906, "is_bug_line": false, "sus_score": 0.5940956473350525, "per_token_entropy": [7.819296360015869, 7.527093410491943], "tokens": [308, 500]}
{"line_number": 229, "line_type": "generated", "code": "\n\n    /**\n     * Solves the given equation by searching for a zero in the given interval.\n     * A default {@link UnivariateRealSolverFactory} is used to create the\n     * solver.\n     *\n", "entropy": 0.3981187641620636, "is_bug_line": false, "sus_score": 0.5940956473350525, "per_token_entropy": [0.14009462296962738, 1.749464511871338, 0.41518735885620117, 0.08161265403032303, 0.47755008935928345, 0.009372402913868427, 0.0007856381707824767, 2.230830192565918, 0.8805304169654846, 0.531532883644104, 1.18071711063385, 0.5806764364242554, 0.701616108417511, 2.012144088745117, 0.433138906955719, 0.3726455867290497, 0.10113456845283508, 0.38420844078063965, 0.01287834346294403, 0.05591631680727005, 0.5913035273551941, 0.6479737758636475, 0.020971812307834625, 0.002741509350016713, 0.00042465253500267863, 0.9783780574798584, 0.029385268688201904, 1.686518669128418, 0.007685496937483549, 0.35532039403915405, 0.00017093151109293103, 3.8742269680369645e-05, 0.0197683647274971, 0.0007859955076128244, 2.312633478140924e-05, 0.10095775127410889, 0.38305574655532837, 0.20228339731693268, 0.030002528801560402, 0.2879178524017334, 1.143072485923767, 0.24882592260837555, 0.4239767789840698, 0.0004379982128739357, 3.8980677345534787e-05, 0.45666784048080444, 0.062049515545368195, 0.20666134357452393, 0.11862170696258545, 0.007451241835951805, 0.0002302858338225633, 0.33639729022979736], "tokens": [13, 13, 1678, 7762, 13, 268, 334, 4956, 1960, 278, 2183, 6306, 491, 11975, 363, 263, 5225, 297, 278, 2183, 7292, 29889, 13, 268, 334, 319, 2322, 26633, 2324, 853, 27432, 403, 21713, 13296, 369, 5126, 29913, 338, 1304, 304, 1653, 278, 13, 268, 334, 899, 369, 29889, 13, 268, 334, 13]}
{"line_number": 203, "line_type": "original", "code": "                      numIterations, maximumIterations, initial,", "entropy": 2.7836978435516357, "is_bug_line": false, "sus_score": 0.5926861763000488, "per_token_entropy": [8.209959983825684, 3.5617642402648926, 10.746186256408691, 0.31458690762519836, 0.0463145412504673, 3.397787570953369, 3.4879369735717773, 0.02198362909257412, 0.0030686217360198498, 0.7231285572052002, 2.4978220462799072, 0.39383506774902344], "tokens": [462, 539, 954, 13463, 800, 29892, 7472, 13463, 800, 29892, 2847, 29892]}
{"line_number": 203, "line_type": "generated", "code": "\n    /**\n     * Find a zero near the midpoint of the bracketing interval.\n     *\n     * @param f Function to solve.\n     * @param bracketingInterval Interval that brackets a root.\n     *", "entropy": 0.410392165184021, "is_bug_line": false, "sus_score": 0.5926861763000488, "per_token_entropy": [0.19523504376411438, 0.8181950449943542, 0.1167391687631607, 0.4637020230293274, 0.009822133928537369, 0.001320205512456596, 2.506834030151367, 0.2418268322944641, 0.8363490700721741, 1.017304539680481, 0.13885292410850525, 0.31795892119407654, 0.0038769098464399576, 0.059766169637441635, 0.7687073349952698, 1.9238258600234985, 0.0005038899253122509, 0.9589099884033203, 0.08098555356264114, 0.39135318994522095, 0.08935675770044327, 0.0017289465758949518, 0.002199494047090411, 1.2573715448379517, 0.002095647621899843, 0.0008538890979252756, 0.23539839684963226, 0.007341667544096708, 0.9200401306152344, 0.46446484327316284, 0.44017547369003296, 0.2002086490392685, 0.31325554847717285, 0.0037461596075445414, 0.002519886940717697, 9.500529267825186e-05, 0.0015708976425230503, 0.0021531034726649523, 2.294424057006836, 0.010763800702989101, 0.08886975795030594, 0.6529368162155151, 0.7155960202217102, 0.00013159839727450162, 0.426365464925766, 0.06166874244809151, 0.09870114922523499, 0.9152187705039978, 1.2666393518447876, 0.010592547245323658, 0.0006280356901697814, 0.001210790709592402], "tokens": [13, 1678, 7762, 13, 268, 334, 10987, 263, 5225, 2978, 278, 7145, 3149, 310, 278, 4105, 3522, 292, 7292, 29889, 13, 268, 334, 13, 268, 334, 732, 3207, 285, 6680, 304, 4505, 29889, 13, 268, 334, 732, 3207, 4105, 3522, 292, 12506, 4124, 791, 393, 20476, 263, 3876, 29889, 13, 268, 334]}
{"line_number": 106, "line_type": "original", "code": "     * is a root between <code>lowerBound</code> and <code>upperBound</code>", "entropy": 1.452589750289917, "is_bug_line": false, "sus_score": 0.5888497233390808, "per_token_entropy": [5.523045539855957, 0.5279059410095215, 10.83398151397705, 3.770642042160034, 1.7725645303726196, 4.480486869812012, 0.9899482727050781, 0.009373110719025135, 0.03805151209235191, 1.272221326828003, 0.42102140188217163, 0.029411429539322853, 0.0005534547381103039, 0.003537589218467474, 0.1877097189426422, 2.147130250930786, 0.005099266767501831, 0.003854466136544943, 0.6155012249946594, 0.01795900985598564, 0.12143412977457047, 0.0014277036534622312, 0.6367037892341614], "tokens": [418, 334, 338, 263, 3876, 1546, 529, 401, 29958, 13609, 17109, 829, 401, 29958, 322, 529, 401, 29958, 21064, 17109, 829, 401, 29958]}
{"line_number": 106, "line_type": "generated", "code": "\n     * @param maximumIterations maximum number of iterations to perform\n     * @return a two element array holding {a, b}\n     * @throws ConvergenceException if a root can not be bracketted\n     *", "entropy": 0.06670673191547394, "is_bug_line": false, "sus_score": 0.5888497233390808, "per_token_entropy": [0.16360077261924744, 0.028340013697743416, 0.0008922410197556019, 0.02461966499686241, 0.052279241383075714, 0.05797765031456947, 0.0004146431456319988, 0.0012980615720152855, 0.35545873641967773, 0.05982444807887077, 0.0019738255068659782, 0.09008866548538208, 0.5572489500045776, 1.2312747240066528, 0.04739382863044739, 0.302775114774704, 0.0015963680343702435, 0.06107151508331299, 0.016324421390891075, 0.01885795406997204, 0.0053574321791529655, 0.002923621330410242, 0.0023918135557323694, 0.017505193129181862, 0.009466639719903469, 0.006435503717511892, 0.00042298430344089866, 0.0031436095014214516, 0.016393378376960754, 0.01685836724936962, 0.10625087469816208, 0.00029380773776210845, 0.007748192176222801, 0.001313062384724617, 1.168244216387393e-05, 0.0215580016374588, 1.585470999998506e-05, 0.00013433984713628888, 0.000436091679148376, 0.0050957091152668, 0.025673462077975273, 0.005249407142400742, 0.04533173143863678, 0.000906056840904057, 0.0003586364327929914, 0.003764211433008313, 0.020947881042957306, 0.0001454247540095821, 5.602679812000133e-05, 0.0499815009534359, 0.019093645736575127, 0.00017510310863144696], "tokens": [13, 268, 334, 732, 3207, 7472, 13463, 800, 7472, 1353, 310, 24372, 304, 2189, 13, 268, 334, 732, 2457, 263, 1023, 1543, 1409, 13587, 426, 29874, 29892, 289, 29913, 13, 268, 334, 732, 386, 5727, 1281, 369, 10238, 2451, 565, 263, 3876, 508, 451, 367, 4105, 384, 1803, 287, 13, 268, 334]}
{"line_number": 131, "line_type": "original", "code": "     /**", "entropy": 6.163291931152344, "is_bug_line": false, "sus_score": 0.5853134393692017, "per_token_entropy": [5.642551898956299, 6.684031963348389], "tokens": [418, 7762]}
{"line_number": 131, "line_type": "generated", "code": "\n        }\n<|mask:1|>\n        double a = initial - 1.0;\n        double b = initial + 1.0;\n        double fa = function.value(a);\n        double fb =", "entropy": 0.17099250853061676, "is_bug_line": false, "sus_score": 0.5853134393692017, "per_token_entropy": [0.25980594754219055, 0.5161767601966858, 0.29679253697395325, 0.05140895023941994, 1.6024651527404785, 0.011281038634479046, 0.3337033987045288, 0.014355478808283806, 0.49244871735572815, 0.007791958283632994, 0.17400415241718292, 0.12661215662956238, 0.38136017322540283, 0.7714677453041077, 0.5240371227264404, 0.09776020050048828, 0.2585000693798065, 0.1390218287706375, 0.08437725156545639, 0.0029262362513691187, 0.731382429599762, 0.0008856903295964003, 0.14228235185146332, 0.07179948687553406, 0.05337030813097954, 0.026226362213492393, 0.0712774395942688, 0.0017164511373266578, 0.0070119258016347885, 0.0011157722910866141, 0.001213171985000372, 0.00010394509445177391, 0.0006441186997108161, 5.2569914259947836e-05, 0.002862524939700961, 0.02175689861178398, 0.5652426481246948, 0.5751309990882874, 0.1406068056821823, 0.09778743982315063, 0.056217700242996216, 0.0012487717904150486, 0.07324190437793732, 0.010525546967983246, 0.029882092028856277, 0.012434576638042927, 0.01280643604695797, 0.012815380468964577, 0.016558131203055382, 0.004072231240570545, 0.0021437061950564384, 0.0008971241768449545], "tokens": [13, 4706, 500, 13, 29966, 29989, 13168, 29901, 29896, 29989, 29958, 13, 4706, 3765, 263, 353, 2847, 448, 29871, 29896, 29889, 29900, 29936, 13, 4706, 3765, 289, 353, 2847, 718, 29871, 29896, 29889, 29900, 29936, 13, 4706, 3765, 2258, 353, 740, 29889, 1767, 29898, 29874, 416, 13, 4706, 3765, 285, 29890, 353]}
{"line_number": 200, "line_type": "original", "code": "                      \"number of iterations={0}, maximum iterations={1}, \" +", "entropy": 1.927490472793579, "is_bug_line": false, "sus_score": 0.5848860144615173, "per_token_entropy": [8.182467460632324, 3.4817934036254883, 6.6305975914001465, 5.831899166107178, 0.2258201688528061, 0.29853397607803345, 1.248680591583252, 0.5975481271743774, 0.1584777683019638, 2.8458871841430664, 0.4160589575767517, 0.040980443358421326, 0.03609687462449074, 0.3098178803920746, 0.4695674777030945, 0.06561992317438126], "tokens": [462, 539, 376, 4537, 310, 24372, 3790, 29900, 1118, 7472, 24372, 3790, 29896, 1118, 376, 718]}
{"line_number": 200, "line_type": "generated", "code": "\n    /**\n     * Creates a solver factory.\n     *", "entropy": 0.5130897164344788, "is_bug_line": false, "sus_score": 0.5848860144615173, "per_token_entropy": [0.22934235632419586, 0.5212241411209106, 0.10973627865314484, 0.4527384042739868, 0.012247240170836449, 0.0013799677835777402, 2.72061824798584, 0.003908852580934763, 0.3152289390563965, 0.9079806804656982, 0.0004664763400796801, 1.6606048345565796, 1.1928387880325317, 0.06075352802872658, 0.003214313881471753, 0.01715218462049961], "tokens": [13, 1678, 7762, 13, 268, 334, 6760, 1078, 263, 899, 369, 12529, 29889, 13, 268, 334]}
{"line_number": 221, "line_type": "original", "code": "    /**", "entropy": 3.982177972793579, "is_bug_line": false, "sus_score": 0.5779038071632385, "per_token_entropy": [3.9493980407714844, 4.014957904815674], "tokens": [268, 7762]}
{"line_number": 221, "line_type": "generated", "code": "\n    /**\n     * Find a root in the given interval.\n     *", "entropy": 0.41982126235961914, "is_bug_line": false, "sus_score": 0.5779038071632385, "per_token_entropy": [0.10583402216434479, 0.5157948732376099, 0.07371176779270172, 0.5744951367378235, 0.008041388355195522, 0.0006057572900317609, 2.544605255126953, 0.1768282800912857, 1.3458068370819092, 1.2561403512954712, 0.06704987585544586, 0.1452038735151291, 0.02165832929313183, 0.24443036317825317, 0.054308220744132996, 0.001698124222457409, 0.0007488307310268283], "tokens": [13, 1678, 7762, 13, 268, 334, 10987, 263, 3876, 297, 278, 2183, 7292, 29889, 13, 268, 334]}
{"line_number": 159, "line_type": "original", "code": "     * satisfying the desired conditions", "entropy": 5.89973783493042, "is_bug_line": false, "sus_score": 0.5775089263916016, "per_token_entropy": [6.412996768951416, 5.9148430824279785, 12.673874855041504, 2.527675151824951, 5.387977600097656, 2.4810595512390137], "tokens": [418, 334, 24064, 278, 7429, 5855]}
{"line_number": 159, "line_type": "generated", "code": "\n    /**\n     * This method attempts to find two values a and b satisfying", "entropy": 0.2632007598876953, "is_bug_line": false, "sus_score": 0.5775089263916016, "per_token_entropy": [0.07709882408380508, 1.2487772703170776, 0.09393803030252457, 0.09322229027748108, 0.03814239799976349, 0.0006360176485031843, 1.4843440055847168, 0.12101278454065323, 0.2191380262374878, 0.0021453716326504946, 0.04031909257173538, 0.9299570322036743, 0.029348457232117653, 0.07903052866458893, 0.004228461068123579, 0.0006718761869706213, 0.0124026695266366], "tokens": [13, 1678, 7762, 13, 268, 334, 910, 1158, 14734, 304, 1284, 1023, 1819, 263, 322, 289, 24064]}
