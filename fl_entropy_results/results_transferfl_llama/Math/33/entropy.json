{"line_number": 339, "line_type": "original", "code": "                columnsToDrop.add(i);", "entropy": 3.020019054412842, "is_bug_line": false, "sus_score": 0.5824349522590637, "per_token_entropy": [9.305906295776367, 15.15993881225586, 0.2894137501716614, 0.10283147543668747, 0.4819422960281372, 0.10593331605195999, 0.018349654972553253, 1.6119259595870972, 0.10392970591783524], "tokens": [462, 4341, 1762, 15063, 29889, 1202, 29898, 29875, 416]}
{"line_number": 339, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns whether the problem is at an infeasible state.\n     * @return whether the model is infeasible\n     */\n    boolean isInfeasible() {\n        for", "entropy": 0.14013859629631042, "is_bug_line": false, "sus_score": 0.5824349522590637, "per_token_entropy": [0.04039362818002701, 0.41587910056114197, 0.006489512976258993, 0.009019938297569752, 0.07014929503202438, 0.0754101574420929, 0.06955132633447647, 0.06503409892320633, 0.0020713796839118004, 0.0006205302197486162, 1.1283520460128784, 0.5264907479286194, 0.10671137273311615, 0.32520371675491333, 0.20698152482509613, 1.1717488765716553, 0.4541051387786865, 0.9114255905151367, 0.00034421717282384634, 0.0005255748401395977, 0.00225242436863482, 0.015953749418258667, 0.029103940352797508, 0.011409275233745575, 0.004349890165030956, 0.001693720929324627, 0.026051001623272896, 0.007162133697420359, 0.059142522513866425, 0.01646408997476101, 0.40095943212509155, 0.34588372707366943, 0.13235624134540558, 0.011928771622478962, 0.0010901705827564, 0.0025252378545701504, 0.02554715797305107, 0.010126994922757149, 0.007867774926126003, 0.00013433984713628888, 0.013010846450924873, 0.07086940109729767, 0.005279527045786381, 0.019446786493062973, 0.0002181292074965313, 0.0005153281381353736, 0.0010268182959407568, 0.003189597511664033, 0.0008554374799132347, 0.004518062341958284, 0.08896224945783615, 0.3808044493198395], "tokens": [13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 16969, 3692, 278, 1108, 338, 472, 385, 297, 1725, 294, 1821, 2106, 29889, 13, 268, 334, 732, 2457, 3692, 278, 1904, 338, 297, 1725, 294, 1821, 13, 268, 3776, 13, 1678, 7223, 338, 797, 1725, 294, 1821, 580, 426, 13, 4706, 363]}
{"line_number": 337, "line_type": "original", "code": "            final double entry = tableau.getEntry(0, i);", "entropy": 0.8942226767539978, "is_bug_line": false, "sus_score": 0.5633394122123718, "per_token_entropy": [7.593540668487549, 4.238103866577148, 0.23153121769428253, 0.6866796612739563, 0.20910455286502838, 0.15161634981632233, 0.00012444675667211413, 0.0008250646642409265, 0.0005380851216614246, 0.000990615226328373, 0.0019873883575201035, 0.20347575843334198, 0.0005208089714869857, 0.040611933916807175, 0.05368918180465698], "tokens": [632, 2186, 3765, 6251, 353, 1591, 585, 29889, 657, 9634, 29898, 29900, 29892, 474, 416]}
{"line_number": 337, "line_type": "generated", "code": "\n        }\n        return true;\n    }\n\n    /**\n     * Checks whether the model is infeasible.\n     * @return whether the model is infeasible\n     */\n    boolean isInfeas", "entropy": 0.2102673202753067, "is_bug_line": false, "sus_score": 0.5633394122123718, "per_token_entropy": [0.10099266469478607, 0.5768575668334961, 0.004840560257434845, 0.0027769359294325113, 0.23711363971233368, 0.03351401537656784, 0.02577175199985504, 0.0005709686665795743, 0.0008912881603464484, 0.01376305241137743, 0.0006420934805646539, 0.0013448490062728524, 0.026443954557180405, 0.04884268343448639, 0.05130499601364136, 0.05937553942203522, 0.00145329674705863, 0.0008370947907678783, 2.8154983520507812, 0.31579428911209106, 0.6216338872909546, 0.23940785229206085, 2.1630828380584717, 0.7003536820411682, 1.2898391485214233, 0.10760936886072159, 0.0004593271005433053, 0.0029522664844989777, 0.16571874916553497, 0.06155116483569145, 0.004137408919632435, 0.005191061645746231, 0.058899227529764175, 0.04486612230539322, 0.5590094327926636, 0.03840697184205055, 0.08051041513681412, 0.09194120764732361, 0.040115147829055786, 0.0016320730792358518, 0.000243634101934731, 0.002927543828263879, 0.0739656612277031, 0.0022872735280543566, 0.02265710011124611, 0.0006368515896610916, 0.004260154906660318, 0.16113834083080292, 0.017069920897483826, 0.051993753761053085, 0.00020358874462544918, 0.0005694198189303279], "tokens": [13, 4706, 500, 13, 4706, 736, 1565, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 5399, 29879, 3692, 278, 1904, 338, 297, 1725, 294, 1821, 29889, 13, 268, 334, 732, 2457, 3692, 278, 1904, 338, 297, 1725, 294, 1821, 13, 268, 3776, 13, 1678, 7223, 338, 797, 1725, 294]}
{"line_number": 338, "line_type": "original", "code": "            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {", "entropy": 0.9188882112503052, "is_bug_line": true, "sus_score": 0.5612953901290894, "per_token_entropy": [9.356752395629883, 2.4957985877990723, 0.1881367713212967, 1.6494543552398682, 0.0005737089086323977, 0.0004924515378661454, 0.002278947737067938, 0.0854511633515358, 0.00042000532266683877, 0.0052923341281712055, 3.522364377975464, 0.014832221902906895, 0.16568399965763092, 0.13475297391414642, 0.040192220360040665, 0.002221023431047797, 4.947429656982422, 0.03705227002501488, 0.0015442363219335675, 0.0003935516288038343, 0.02847326546907425, 1.1661779880523682, 0.015221741981804371, 0.0032982020638883114, 0.022002752870321274, 0.004804020747542381], "tokens": [632, 565, 313, 29925, 3757, 2459, 29889, 18307, 1762, 29898, 8269, 29892, 29871, 29900, 29881, 29892, 4236, 29965, 29880, 567, 29897, 1405, 29871, 29900, 29897, 426]}
{"line_number": 338, "line_type": "generated", "code": "\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is unbounded.\n     * @return whether the problem is unbounded\n     */\n    boolean isUnbounded() {\n        for (int i =", "entropy": 0.13993556797504425, "is_bug_line": true, "sus_score": 0.5612953901290894, "per_token_entropy": [0.09040617197751999, 0.30958303809165955, 0.25401294231414795, 0.2533379793167114, 0.0009654866298660636, 0.002646517474204302, 0.059101399034261703, 0.0014965059235692024, 0.0031969649717211723, 0.043512843549251556, 0.07432960718870163, 0.061196327209472656, 0.06617840379476547, 0.0022306579630821943, 0.0005465444410219789, 1.1689975261688232, 0.5249271392822266, 0.11502502113580704, 0.35617977380752563, 0.22326026856899261, 1.5511517524719238, 0.008381903171539307, 0.2786870300769806, 0.02915210649371147, 0.002455436158925295, 0.0015675650211051106, 0.0366678312420845, 0.019246144220232964, 0.07951871305704117, 0.011263711377978325, 0.8040630221366882, 0.030143307521939278, 0.029825281351804733, 0.0021503677126020193, 0.0807720422744751, 0.00249824533239007, 0.017225656658411026, 0.0006796196103096008, 0.012506275437772274, 0.08707904815673828, 0.005920729599893093, 0.010435421019792557, 0.0017501289257779717, 0.004860490560531616, 0.001258653705008328, 0.0041594901122152805, 0.12157253175973892, 0.4078255295753479, 0.0006204110686667264, 0.00421172333881259, 0.016870558261871338, 0.0009975224966183305], "tokens": [13, 4706, 736, 1565, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 16969, 3692, 278, 1108, 338, 443, 29306, 29889, 13, 268, 334, 732, 2457, 3692, 278, 1108, 338, 443, 29306, 13, 268, 3776, 13, 1678, 7223, 338, 2525, 29306, 580, 426, 13, 4706, 363, 313, 524, 474, 353]}
{"line_number": 336, "line_type": "original", "code": "        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {", "entropy": 1.136046290397644, "is_bug_line": false, "sus_score": 0.5611366033554077, "per_token_entropy": [8.256244659423828, 6.269851207733154, 0.0033949140924960375, 0.050073008984327316, 4.650458812713623, 0.03584549203515053, 0.8908677697181702, 0.0838308185338974, 0.027653083205223083, 0.0013718727277591825, 0.0007418026216328144, 0.00042381841922178864, 0.14504703879356384, 0.0067038629204034805, 0.0035464982502162457, 0.038779161870479584, 7.831216335296631, 0.0021629766561090946, 0.000770391256082803, 0.01910288631916046, 0.004135034512728453, 0.06372620165348053, 0.01010964810848236, 0.0032611305359750986, 0.0018391376361250877], "tokens": [308, 363, 313, 524, 474, 353, 679, 8009, 2061, 573, 6678, 29879, 890, 474, 529, 679, 9986, 928, 616, 16174, 10302, 890, 474, 4862, 426]}
{"line_number": 336, "line_type": "generated", "code": "\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is unbounded.\n     * @return whether the model has been solved\n     */\n    boolean isUnbounded() {\n", "entropy": 0.16338716447353363, "is_bug_line": false, "sus_score": 0.5611366033554077, "per_token_entropy": [0.1638394147157669, 0.5196826457977295, 0.14711183309555054, 0.29657649993896484, 0.07164791971445084, 0.002068405505269766, 0.0021346656139940023, 0.2521021068096161, 0.03657704219222069, 0.02799881063401699, 0.0006687788409180939, 0.0011319665936753154, 0.01654241792857647, 0.0008247073274105787, 0.0018154582940042019, 0.029548589140176773, 0.05673933029174805, 0.05014534667134285, 0.06006437912583351, 0.0017903504194691777, 0.001046467456035316, 1.1497570276260376, 0.4783550500869751, 0.11451539397239685, 0.3530143201351166, 0.22231446206569672, 1.5557327270507812, 0.008281061425805092, 0.28344157338142395, 0.027693435549736023, 0.0037962766364216805, 0.0014365125680342317, 0.032023828476667404, 0.01982446387410164, 0.07338558882474899, 0.010942570865154266, 0.6109330654144287, 1.3391032218933105, 0.176415354013443, 0.13402020931243896, 0.06080995500087738, 0.007463429588824511, 0.009358584880828857, 0.0009534580749459565, 0.00901344045996666, 0.045467179268598557, 0.004913161508738995, 0.014958007261157036, 0.002032121177762747, 0.0038281031884253025, 0.0010280092246830463, 0.0012634160229936242], "tokens": [13, 9651, 500, 13, 4706, 500, 13, 4706, 736, 1565, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 16969, 3692, 278, 1108, 338, 443, 29306, 29889, 13, 268, 334, 732, 2457, 3692, 278, 1904, 756, 1063, 7484, 13, 268, 3776, 13, 1678, 7223, 338, 2525, 29306, 580, 426, 13]}
{"line_number": 261, "line_type": "original", "code": "            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),", "entropy": 1.3391213417053223, "is_bug_line": false, "sus_score": 0.5185545086860657, "per_token_entropy": [7.089380264282227, 1.24942946434021, 5.550635814666748, 5.442206382751465, 1.0608946084976196, 0.06830355525016785, 1.661754846572876, 2.286591053009033, 0.01671101525425911, 0.024853188544511795, 0.0005862186080776155, 0.00023052419419400394, 0.014541245996952057, 1.4542831182479858, 0.986240804195404, 0.22372378408908844, 0.00011085849109804258, 0.0032431883737444878, 0.6285064816474915, 0.01407270971685648, 0.3452458381652832], "tokens": [632, 736, 716, 22985, 21529, 29898, 13646, 29889, 657, 29907, 7297, 4543, 29879, 2141, 1958, 6857, 666, 368, 6278, 29896, 511]}
{"line_number": 261, "line_type": "generated", "code": "\n        for (int row = 1; row", "entropy": 0.4362281560897827, "is_bug_line": false, "sus_score": 0.5185545086860657, "per_token_entropy": [0.2842142581939697, 0.6857311725616455, 2.2552902698516846, 0.004606231581419706, 0.24546471238136292, 0.44398242235183716, 0.04877592623233795, 0.15533176064491272, 0.643986701965332, 0.021837962791323662, 0.00928819552063942], "tokens": [13, 4706, 363, 313, 524, 1948, 353, 29871, 29896, 29936, 1948]}
{"line_number": 226, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess", "entropy": 1.6243294477462769, "is_bug_line": false, "sus_score": 0.5178564190864563, "per_token_entropy": [9.782597541809082, 13.054398536682129, 0.7279289364814758, 0.1482067108154297, 0.1634628027677536, 0.0035847469698637724, 0.850495457649231, 0.030362823978066444, 0.48071640729904175, 0.5657294988632202, 0.003532005939632654, 0.0028484982904046774, 0.0013666347367689013, 0.02128869853913784, 0.14120548963546753, 0.17462371289730072, 0.005880436860024929, 0.027909433469176292, 0.4845135807991028, 1.857962727546692, 0.01639302633702755, 0.015787841752171516, 1.5374653339385986, 8.885644912719727], "tokens": [462, 4636, 29889, 842, 9634, 29898, 798, 29892, 679, 29903, 2364, 16174, 10302, 580, 718, 269, 2364, 9037, 10024, 448, 29896, 416, 849, 19163]}
{"line_number": 226, "line_type": "generated", "code": "\n    /**\n     * Get the offset of the slack variables in this tableau.\n     * @return offset of the slack variables\n     */\n    protected final int getSlackVariableOffset() {\n        return numDecisionVari", "entropy": 0.19397884607315063, "is_bug_line": false, "sus_score": 0.5178564190864563, "per_token_entropy": [0.056612271815538406, 0.2613241970539093, 0.08432312309741974, 0.0859774574637413, 0.0038379596080631018, 0.0006924853660166264, 0.6106827259063721, 0.12509633600711823, 0.9135950803756714, 0.6590867638587952, 0.08888284862041473, 1.1809816360473633, 0.0004127365828026086, 0.28938135504722595, 0.7219499349594116, 1.1544537544250488, 0.03192984685301781, 0.005571076646447182, 0.04968821257352829, 0.0553959496319294, 0.003921558149158955, 0.00727172801271081, 0.07640097290277481, 0.004567309748381376, 0.9422045350074768, 0.5488634705543518, 0.3886040151119232, 0.0648617297410965, 0.0005783553933724761, 0.02942647784948349, 0.5281194448471069, 0.004176703747361898, 0.010359208099544048, 0.0010162194957956672, 0.01751140132546425, 0.20199160277843475, 0.23545360565185547, 0.001854725182056427, 0.0006736631621606648, 0.001100768567994237, 0.000198821333469823, 0.00045003299601376057, 0.00021765247220173478, 0.0008930747280828655, 0.0009110590908676386, 0.005626792553812265, 0.03512134402990341, 0.05108742415904999, 0.5139142274856567, 0.02858611010015011, 0.0004943578969687223, 0.0005659647285938263], "tokens": [13, 1678, 7762, 13, 268, 334, 3617, 278, 9210, 310, 278, 269, 2364, 3651, 297, 445, 1591, 585, 29889, 13, 268, 334, 732, 2457, 9210, 310, 278, 269, 2364, 3651, 13, 268, 3776, 13, 1678, 6364, 2186, 938, 679, 29903, 2364, 16174, 10302, 580, 426, 13, 4706, 736, 954, 6185, 2459, 10444]}
{"line_number": 299, "line_type": "original", "code": "        for (double coefficient : coefficients.toArray()) {", "entropy": 2.081106662750244, "is_bug_line": false, "sus_score": 0.5136599540710449, "per_token_entropy": [6.876191139221191, 3.9221832752227783, 0.007801183965057135, 7.154057502746582, 2.029466390609741, 0.09630651026964188, 2.6634325981140137, 1.338477373123169, 0.8655316829681396, 0.006780828349292278, 0.008556608110666275, 0.004492666106671095], "tokens": [308, 363, 313, 8896, 10825, 584, 16127, 29889, 517, 2588, 3101, 426]}
{"line_number": 299, "line_type": "generated", "code": "\n        }\n\n        // drop the columns\n        dropColumns(columnsToDrop);\n\n        // set the objective function to the first objective function\n        setObjective(0);\n    }\n\n    /**\n     * Sets", "entropy": 0.514348030090332, "is_bug_line": false, "sus_score": 0.5136599540710449, "per_token_entropy": [0.08700212091207504, 0.776060163974762, 0.1427096128463745, 0.010387169197201729, 0.1742648482322693, 0.04850386083126068, 1.2421395778656006, 0.9527943134307861, 0.6995071172714233, 0.18740445375442505, 0.3461480438709259, 0.032414790242910385, 1.7218533754348755, 0.04367433115839958, 0.04667685925960541, 0.026746345683932304, 0.00015746307326480746, 0.00045253525604493916, 0.09322381764650345, 0.001167569193057716, 0.8295860290527344, 0.08061247318983078, 0.3137054741382599, 3.0803074836730957, 0.4375346302986145, 1.492213487625122, 0.5196977257728577, 1.0381993055343628, 1.1334691047668457, 1.93162202835083, 1.4972978830337524, 0.1256243735551834, 0.20409220457077026, 0.042006634175777435, 1.5606913566589355, 0.3497675657272339, 0.016476284712553024, 1.111725091934204, 0.3845011293888092, 0.2251788079738617, 0.0009313059854321182, 0.4729464650154114, 0.00029059001826681197, 0.0009386900928802788, 0.02958342619240284, 0.038752440363168716, 0.0190337635576725, 0.08383849263191223, 0.0009868042543530464, 0.00011276562872808427, 3.053631544113159, 0.037455279380083084], "tokens": [13, 4706, 500, 13, 13, 4706, 849, 5768, 278, 4341, 13, 4706, 5768, 14289, 29898, 13099, 1762, 15063, 416, 13, 13, 4706, 849, 731, 278, 12091, 740, 304, 278, 937, 12091, 740, 13, 4706, 731, 2061, 573, 29898, 29900, 416, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 317, 1691]}
{"line_number": 215, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() - 1,", "entropy": 1.4752146005630493, "is_bug_line": false, "sus_score": 0.5113018155097961, "per_token_entropy": [6.170416831970215, 13.55854320526123, 0.37612152099609375, 0.4639928936958313, 0.4953785538673401, 0.005385059397667646, 0.581537663936615, 0.020533375442028046, 1.3760156631469727, 0.2692748010158539, 0.0014590105274692178, 0.0022876302246004343, 0.0011798333143815398, 0.009459435939788818, 3.1641054153442383, 0.03768857941031456, 0.010104691609740257, 0.010378203354775906], "tokens": [462, 4636, 29889, 842, 9634, 29898, 798, 29892, 679, 29903, 2364, 16174, 10302, 580, 448, 29871, 29896, 29892]}
{"line_number": 215, "line_type": "generated", "code": "\n        return constraint;\n    }\n\n    /**\n     * Get the sum of the coefficients, but with negative coefficients inverted.\n     * @param coefficients coefficients to sum\n     * @return sum of coefficients\n     */\n    private", "entropy": 0.35449686646461487, "is_bug_line": false, "sus_score": 0.5113018155097961, "per_token_entropy": [0.16829265654087067, 0.20679503679275513, 0.3270871639251709, 0.11343171447515488, 0.030314715579152107, 0.021502817049622536, 0.11425139009952545, 0.0025486627127975225, 0.0042708381079137325, 0.03921288251876831, 0.07532359659671783, 0.039117395877838135, 0.060712020844221115, 0.0009654866298660636, 0.0014331794809550047, 0.9488099813461304, 0.4049484133720398, 2.0222489833831787, 0.01738874800503254, 0.2703227996826172, 1.1223585605621338, 1.3905138969421387, 1.757797360420227, 1.0548162460327148, 2.012451648712158, 0.5667078495025635, 0.7367177605628967, 0.00022921319759916514, 0.27922096848487854, 0.016420351341366768, 0.0019255208317190409, 0.004127318039536476, 0.12669901549816132, 0.002031288342550397, 0.16431765258312225, 0.5386921167373657, 1.2564246654510498, 0.34590446949005127, 0.0757104754447937, 0.0037886761128902435, 0.0011197017738595605, 0.0018575809663161635, 0.002886179368942976, 0.2974863350391388, 0.5810946226119995, 0.4512391984462738, 0.5000914335250854, 0.0031042741611599922, 0.0382063090801239, 0.0008879532688297331, 0.017787110060453415, 0.2122424989938736], "tokens": [13, 4706, 736, 7276, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 3617, 278, 2533, 310, 278, 16127, 29892, 541, 411, 8178, 16127, 21292, 287, 29889, 13, 268, 334, 732, 3207, 16127, 16127, 304, 2533, 13, 268, 334, 732, 2457, 2533, 310, 16127, 13, 268, 3776, 13, 1678, 2024]}
{"line_number": 347, "line_type": "original", "code": "            columnsToDrop.add(col);", "entropy": 2.7335383892059326, "is_bug_line": false, "sus_score": 0.506749153137207, "per_token_entropy": [9.837930679321289, 9.765253067016602, 0.4915771782398224, 0.19117894768714905, 1.0472763776779175, 0.1311054229736328, 0.04518885537981987, 2.8239362239837646, 0.2683992385864258], "tokens": [632, 4341, 1762, 15063, 29889, 1202, 29898, 1054, 416]}
{"line_number": 347, "line_type": "generated", "code": "\n        final double[] solution = new double[getWidth()];\n        final double[] primalValues = new double[getWidth()];\n        final double[] dualValues = new double[getHeight()];\n        final double[] reducedCost", "entropy": 0.43242910504341125, "is_bug_line": false, "sus_score": 0.506749153137207, "per_token_entropy": [0.15050047636032104, 0.4625691771507263, 1.2579368352890015, 0.7552085518836975, 0.25744569301605225, 1.4841845035552979, 0.12653905153274536, 0.12660133838653564, 0.00395813025534153, 0.005702892318367958, 0.2982454299926758, 0.9175115823745728, 0.0004926898400299251, 0.82590252161026, 0.00533099053427577, 0.23006032407283783, 1.7277435064315796, 0.3803463280200958, 0.11778653413057327, 3.2841193675994873, 0.0313781276345253, 1.4844785928726196, 0.025185005739331245, 0.3550759255886078, 0.0018818541429936886, 0.0038517348002642393, 0.08059586584568024, 0.737455427646637, 0.00023874769976828247, 0.2472229301929474, 0.00348353898152709, 0.17936651408672333, 0.5818131566047668, 0.11733365058898926, 0.02212192676961422, 0.3206562101840973, 0.009002571925520897, 0.08467981964349747, 0.012930476106703281, 0.00039986721822060645, 0.0007890925044193864, 0.012733464129269123, 0.7654361724853516, 0.0003197873884346336, 0.2392553687095642, 0.002567092888057232, 0.6796547174453735, 1.6003776788711548, 0.4650379717350006, 0.2961464524269104, 1.7025489807128906, 0.0041077290661633015], "tokens": [13, 4706, 2186, 3765, 2636, 1650, 353, 716, 3765, 29961, 657, 6110, 580, 1385, 13, 4706, 2186, 3765, 2636, 1903, 284, 9065, 353, 716, 3765, 29961, 657, 6110, 580, 1385, 13, 4706, 2186, 3765, 2636, 14581, 9065, 353, 716, 3765, 29961, 657, 7011, 580, 1385, 13, 4706, 2186, 3765, 2636, 12212, 25733]}
{"line_number": 298, "line_type": "original", "code": "        double sum = 0;", "entropy": 2.514554262161255, "is_bug_line": false, "sus_score": 0.5024615526199341, "per_token_entropy": [6.4078450202941895, 6.851139068603516, 3.3400931358337402, 0.08899606019258499, 0.5206276178359985, 0.01780315488576889, 0.37537333369255066], "tokens": [308, 3765, 2533, 353, 29871, 29900, 29936]}
{"line_number": 298, "line_type": "generated", "code": "\n          }\n        }\n\n        // drop the columns\n        dropColumns(columnsToDrop);\n\n        // remove the artificial variables from the objective function\n        for (int i = 0; i", "entropy": 0.40221425890922546, "is_bug_line": false, "sus_score": 0.5024615526199341, "per_token_entropy": [0.1267518401145935, 0.20998795330524445, 0.003431505523622036, 0.06263227760791779, 0.07098733633756638, 0.001462819636799395, 0.011150428093969822, 0.1768818199634552, 0.06915905326604843, 1.41121506690979, 0.9585020542144775, 0.7340951561927795, 0.18409565091133118, 0.34058141708374023, 0.040218327194452286, 1.5684174299240112, 0.03970576450228691, 0.044781774282455444, 0.02247295156121254, 0.00012444675667211413, 0.000176652567461133, 0.09341417253017426, 0.003098451066762209, 0.9084670543670654, 0.11760944873094559, 0.34017157554626465, 2.4771227836608887, 0.42588141560554504, 1.1142098903656006, 0.7856348752975464, 1.3037657737731934, 0.10142511129379272, 2.030653953552246, 0.2926868200302124, 0.1362663060426712, 0.06535553187131882, 1.2155828475952148, 0.0026844439562410116, 0.12644167244434357, 0.14221523702144623, 0.008645604364573956, 0.24270771443843842, 0.08094411343336105, 0.006481814198195934, 0.0013435394503176212], "tokens": [13, 3986, 500, 13, 4706, 500, 13, 13, 4706, 849, 5768, 278, 4341, 13, 4706, 5768, 14289, 29898, 13099, 1762, 15063, 416, 13, 13, 4706, 849, 3349, 278, 23116, 3651, 515, 278, 12091, 740, 13, 4706, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474]}
{"line_number": 333, "line_type": "original", "code": "        columnsToDrop.add(0);", "entropy": 3.095870018005371, "is_bug_line": false, "sus_score": 0.4873667359352112, "per_token_entropy": [7.370262145996094, 12.90307331085205, 0.5004938840866089, 0.10325323790311813, 0.0790567472577095, 0.016067780554294586, 0.004989078734070063, 6.466793060302734, 0.41884151101112366], "tokens": [308, 4341, 1762, 15063, 29889, 1202, 29898, 29900, 416]}
{"line_number": 333, "line_type": "generated", "code": "\n            if (!Precision.equals(tableau.getEntry(0, i), 0d, maxUlps)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n   ", "entropy": 0.1009821966290474, "is_bug_line": false, "sus_score": 0.4873667359352112, "per_token_entropy": [0.25961440801620483, 0.6665505170822144, 0.6808582544326782, 1.1136394739151, 0.3367629647254944, 0.0004957877099514008, 0.0002232540718978271, 0.0035780949983745813, 0.013049793429672718, 0.013441301882266998, 0.6217186450958252, 0.00032479254878126085, 0.0011922164121642709, 0.0005209281225688756, 0.008404717780649662, 0.00305031961761415, 0.21392300724983215, 0.0004694551753345877, 0.007626583334058523, 0.004353925585746765, 0.029839398339390755, 0.011622101999819279, 0.28338733315467834, 0.004509042948484421, 0.05078074708580971, 0.0002933310461230576, 0.00045908879837952554, 0.0005243833875283599, 0.04515968635678291, 0.0028790475334972143, 0.003375429892912507, 0.08452953398227692, 0.027001071721315384, 0.009575272910296917, 0.0006554362480528653, 0.00301965675316751, 0.008462403900921345, 0.0008118432597257197, 0.005195923615247011, 0.21560262143611908, 0.0022003266494721174, 0.004138002637773752, 0.32663261890411377, 0.040025703608989716, 0.03560243919491768, 0.0005696581210941076, 0.0013781820889562368, 0.022563397884368896, 0.0006997520686127245, 0.0018343779956921935, 0.026091301813721657, 0.05185635760426521], "tokens": [13, 9651, 565, 5384, 29925, 3757, 2459, 29889, 10954, 29898, 2371, 585, 29889, 657, 9634, 29898, 29900, 29892, 474, 511, 29871, 29900, 29881, 29892, 4236, 29965, 29880, 567, 876, 426, 13, 18884, 736, 2089, 29936, 13, 9651, 500, 13, 4706, 500, 13, 4706, 736, 1565, 29936, 13, 1678, 500, 13, 13, 1678]}
{"line_number": 355, "line_type": "original", "code": "            if (!columnsToDrop.contains(j)) {", "entropy": 2.587963581085205, "is_bug_line": false, "sus_score": 0.4847034811973572, "per_token_entropy": [8.482501029968262, 1.474400281906128, 4.890347957611084, 4.767569065093994, 0.5618592500686646, 0.641382098197937, 0.030245786532759666, 0.01789320446550846, 0.009106766432523727, 9.893739700317383, 0.2643868923187256, 0.02212880551815033], "tokens": [632, 565, 5384, 13099, 1762, 15063, 29889, 11516, 29898, 29926, 876, 426]}
{"line_number": 355, "line_type": "generated", "code": "\n          Integer rowIndex = colIndex > 0 ? getBasicRow(colIndex) : null;\n          if (rowIndex != null) {\n              basicRows.add(rowIndex);\n              coefficients[i] = getEntry(", "entropy": 0.12371079623699188, "is_bug_line": false, "sus_score": 0.4847034811973572, "per_token_entropy": [0.08268920332193375, 0.4389774203300476, 0.7937349081039429, 0.7211967706680298, 0.5889384746551514, 0.008192742243409157, 0.6067426204681396, 0.00040951924165710807, 0.3667396903038025, 0.033133748918771744, 0.0008374521275982261, 0.023213766515254974, 0.020396491512656212, 0.0005006728461012244, 0.0004349001101218164, 0.0006084974738769233, 0.007795624900609255, 0.00015758226800244302, 0.004923837725073099, 0.0010901705827564, 0.07219406217336655, 0.0013341344892978668, 0.004563868511468172, 0.4399545192718506, 0.25845450162887573, 0.038761842995882034, 0.02723694033920765, 0.00020168177434243262, 0.29749971628189087, 0.0012198395561426878, 0.08657924085855484, 0.005700996145606041, 0.006937227211892605, 0.4399668872356415, 0.29394739866256714, 0.000339569611242041, 0.00019894051365554333, 0.00010513706365600228, 0.002042233245447278, 0.008558854460716248, 5.125986263010418e-06, 0.00715680792927742, 0.0014063954586163163, 0.210166797041893, 0.23595301806926727, 0.0007520469953306019, 0.0037454471457749605, 0.000936189026106149, 0.010940802283585072, 0.25440338253974915, 0.01982867158949375, 0.0011543523287400603], "tokens": [13, 3986, 8102, 1948, 3220, 353, 784, 3220, 1405, 29871, 29900, 1577, 679, 16616, 4301, 29898, 1054, 3220, 29897, 584, 1870, 29936, 13, 3986, 565, 313, 798, 3220, 2804, 1870, 29897, 426, 13, 795, 6996, 10661, 29889, 1202, 29898, 798, 3220, 416, 13, 795, 16127, 29961, 29875, 29962, 353, 679, 9634, 29898]}
{"line_number": 224, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack", "entropy": 1.4239041805267334, "is_bug_line": false, "sus_score": 0.4842516779899597, "per_token_entropy": [6.94941520690918, 14.329370498657227, 0.36865368485450745, 1.1773490905761719, 0.07968450337648392, 0.004095975775271654, 2.14668607711792, 0.08031967282295227, 1.4376592636108398, 0.3792375326156616, 0.0018638873007148504, 0.0032253647223114967, 0.0015256681945174932, 0.023258958011865616, 0.3583337664604187, 0.3116045296192169, 0.011152667924761772, 0.12183503061532974, 0.5900858640670776, 1.6142077445983887, 0.022959355264902115, 0.013595134019851685, 4.731983184814453, 0.16569925844669342, 2.0738186836242676, 0.023888155817985535], "tokens": [462, 4636, 29889, 842, 9634, 29898, 798, 29892, 679, 29903, 2364, 16174, 10302, 580, 718, 269, 2364, 9037, 10024, 29871, 29896, 416, 29871, 849, 269, 2364]}
{"line_number": 224, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the offset into the tableau for the slack variables.\n     * @return offset\n     */\n    protected final int getSlackVariableOffset() {\n        return numDecisionVariables", "entropy": 0.21195048093795776, "is_bug_line": false, "sus_score": 0.4842516779899597, "per_token_entropy": [0.34311315417289734, 0.6615757346153259, 0.01721932925283909, 0.004410777240991592, 0.022514795884490013, 0.02726617269217968, 0.016208307817578316, 0.03240220993757248, 0.0011742371134459972, 0.00035720644518733025, 0.3694736957550049, 0.08717290312051773, 0.8000702261924744, 2.388573408126831, 0.07199706882238388, 0.4832626283168793, 0.006686811335384846, 1.0843377113342285, 0.30523157119750977, 0.9991589188575745, 0.00023040501400828362, 0.11715468764305115, 0.08895756304264069, 0.05418367683887482, 0.002774082822725177, 0.004281758330762386, 0.06902165710926056, 0.003232494229450822, 0.8584873080253601, 0.8546972870826721, 0.0034313867799937725, 0.005320199765264988, 0.0006200536736287177, 0.004159846343100071, 0.1576010137796402, 0.16363194584846497, 0.0011953121284022927, 0.00030870441696606576, 0.0006179092451930046, 0.00013863079948350787, 0.00021753329201601446, 0.00012957210128661245, 0.0005427317810244858, 0.0006316096987575293, 0.0030146650969982147, 0.4427897036075592, 0.06655479222536087, 0.3641687035560608, 0.0303887277841568, 0.000301673193462193, 0.00033539868309162557, 9.667406266089529e-05], "tokens": [13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 3617, 278, 9210, 964, 278, 1591, 585, 363, 278, 269, 2364, 3651, 29889, 13, 268, 334, 732, 2457, 9210, 13, 268, 3776, 13, 1678, 6364, 2186, 938, 679, 29903, 2364, 16174, 10302, 580, 426, 13, 4706, 736, 954, 6185, 2459, 10444, 1849]}
{"line_number": 344, "line_type": "original", "code": "        for (int i = 0; i < getNumArtificialVariables(); i++) {", "entropy": 0.7190993428230286, "is_bug_line": false, "sus_score": 0.4838219881057739, "per_token_entropy": [5.2464799880981445, 3.8490865230560303, 0.025794290006160736, 0.11142261326313019, 0.22322499752044678, 0.007867065258324146, 0.2678021490573883, 0.28707796335220337, 0.01733626239001751, 0.003121030516922474, 0.011439328081905842, 0.7263571619987488, 0.3625568747520447, 4.540154457092285, 0.0014947204617783427, 0.0007994554471224546, 0.06195349618792534, 0.00011324241495458409, 0.035337354987859726, 0.028974825516343117, 0.005211340729147196, 0.006579285021871328], "tokens": [308, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474, 529, 679, 8009, 9986, 928, 616, 10444, 1849, 890, 474, 4862, 426]}
{"line_number": 344, "line_type": "generated", "code": "\n     * @return the current solution\n     */\n    RealVector getSolution() {\n        final RealVector solution = new ArrayRealVector(getNumDecisionVariables());\n        for (int i = 0; i", "entropy": 0.24938470125198364, "is_bug_line": false, "sus_score": 0.4838219881057739, "per_token_entropy": [0.4260592460632324, 0.7422663569450378, 0.021943161264061928, 0.26558756828308105, 0.40543386340141296, 0.49354034662246704, 0.5281053781509399, 0.08015795052051544, 0.5183960199356079, 0.09126625955104828, 0.15546973049640656, 0.006308996584266424, 0.07117186486721039, 1.2195887565612793, 0.2588465213775635, 0.09298747777938843, 0.4614483714103699, 0.0009526243666186929, 0.09614302217960358, 0.0036956837866455317, 0.004731530323624611, 0.2315504252910614, 0.8434168100357056, 0.7250324487686157, 0.03622139245271683, 0.5443940162658691, 0.05743438005447388, 0.4541154205799103, 0.009138306602835655, 0.0005847889697179198, 8.5588610090781e-05, 0.016068249940872192, 0.19542460143566132, 0.9232401847839355, 0.6641928553581238, 0.0029592791106551886, 0.002481597475707531, 3.182837463100441e-05, 0.3013817071914673, 0.0026102541014552116, 0.25064876675605774, 0.3634435534477234, 0.0018256916664540768, 0.08421903103590012, 0.10896238684654236, 0.002577556297183037, 0.2839958667755127, 0.40034717321395874, 0.017338605597615242, 0.001413180842064321], "tokens": [13, 268, 334, 732, 2457, 278, 1857, 1650, 13, 268, 3776, 13, 1678, 8195, 12877, 679, 13296, 918, 580, 426, 13, 4706, 2186, 8195, 12877, 1650, 353, 716, 4398, 21713, 12877, 29898, 657, 8009, 6185, 2459, 10444, 1849, 3310, 13, 4706, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474]}
{"line_number": 351, "line_type": "original", "code": "        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];", "entropy": 1.1984498500823975, "is_bug_line": false, "sus_score": 0.4833238422870636, "per_token_entropy": [7.905004978179932, 2.0109634399414062, 0.8434349298477173, 4.089942455291748, 2.4906582832336426, 0.29815465211868286, 1.1801097393035889, 0.01607622765004635, 0.0691034272313118, 0.5325547456741333, 0.33151713013648987, 0.0010745710460469127, 0.6616856455802917, 0.1551385372877121, 0.024608034640550613, 0.024861561134457588, 0.14578218758106232, 0.17561540007591248, 0.0008141063735820353, 0.25293612480163574, 10.361008644104004, 0.1621549427509308, 0.19981299340724945, 0.12746025621891022, 0.004003012087196112, 0.0001597276859683916, 0.293511301279068], "tokens": [308, 3765, 2636, 2636, 4636, 353, 716, 3765, 29961, 657, 7011, 580, 448, 29871, 29896, 3816, 657, 6110, 580, 448, 4341, 1762, 15063, 29889, 2311, 580, 1385]}
{"line_number": 351, "line_type": "generated", "code": "\n      double min = Double.POSITIVE_INFINITY;\n      int minIndex = 0;\n      for (int i = 0; i", "entropy": 0.35783544182777405, "is_bug_line": false, "sus_score": 0.4833238422870636, "per_token_entropy": [0.08471836894750595, 0.4496602416038513, 1.5793533325195312, 1.9145947694778442, 1.1736092567443848, 0.6500622034072876, 0.0003122795606032014, 0.40054023265838623, 8.892617915989831e-05, 2.634490556374658e-05, 8.844937838148326e-05, 8.583032467868179e-06, 1.4781842764932662e-05, 2.4676019165781327e-05, 0.013526218011975288, 0.003291548229753971, 0.13933153450489044, 1.1931648254394531, 0.35978618264198303, 1.5712647438049316, 0.010675700381398201, 1.1038892269134521, 0.025991998612880707, 0.002670177025720477, 0.004355468321591616, 0.26427993178367615, 0.35924381017684937, 0.006292767822742462, 0.08483435213565826, 0.14084862172603607, 0.003934856969863176, 0.3288600742816925, 0.6318547129631042, 0.02049693651497364, 0.0025440254248678684], "tokens": [13, 418, 3765, 1375, 353, 11599, 29889, 24815, 1806, 18474, 29918, 24065, 1177, 11937, 29936, 13, 418, 938, 1375, 3220, 353, 29871, 29900, 29936, 13, 418, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474]}
{"line_number": 526, "line_type": "original", "code": "     * @return number of decision variables", "entropy": 3.5272669792175293, "is_bug_line": false, "sus_score": 0.4824408292770386, "per_token_entropy": [5.668510913848877, 10.53463363647461, 1.9810820817947388, 0.8933142423629761, 6.141773223876953, 0.006047285161912441, 2.970369815826416, 0.02240394428372383], "tokens": [418, 334, 732, 2457, 1353, 310, 10608, 3651]}
{"line_number": 526, "line_type": "generated", "code": "\n          return Objects.equals(f, rhs.f) &&\n                  Objects.equals(tableau, rhs.tableau) &&\n                  numDecisionVariables == rhs.numDecisionVariables &&\n                 ", "entropy": 0.2015637904405594, "is_bug_line": false, "sus_score": 0.4824408292770386, "per_token_entropy": [0.07414477318525314, 0.44253143668174744, 0.3721250295639038, 2.0166337490081787, 0.015420611947774887, 0.0034830637741833925, 0.0541997104883194, 0.0016626594588160515, 1.136849045753479, 0.024489041417837143, 0.39920565485954285, 0.0017597679980099201, 0.06290903687477112, 0.02686692774295807, 0.19360071420669556, 0.04056420177221298, 0.3795934319496155, 0.603105902671814, 0.19313962757587433, 0.0006050424999557436, 0.0016520674107596278, 0.04687594249844551, 0.0005075835506431758, 1.6303757429122925, 0.0021815330255776644, 0.012914706952869892, 0.009674331173300743, 0.0008120815036818385, 0.0026662535965442657, 0.00042655906872823834, 0.7259973287582397, 0.013216039165854454, 0.003935806918889284, 0.08187124878168106, 0.01085000578314066, 1.571603536605835, 0.07933241128921509, 0.0015598285244777799, 0.0008636558777652681, 0.0002946419408544898, 0.011214438825845718, 0.0019497923785820603, 0.000851387856528163, 0.002610729541629553, 0.0004128557338844985, 0.0005060345865786076, 0.00015138434537220746, 0.0002899941464420408, 0.18229736387729645, 0.002305827336385846, 0.03487500920891762, 0.00335119292140007], "tokens": [13, 3986, 736, 4669, 29879, 29889, 10954, 29898, 29888, 29892, 29365, 29889, 29888, 29897, 2607, 13, 462, 29871, 4669, 29879, 29889, 10954, 29898, 2371, 585, 29892, 29365, 29889, 2371, 585, 29897, 2607, 13, 462, 29871, 954, 6185, 2459, 10444, 1849, 1275, 29365, 29889, 1949, 6185, 2459, 10444, 1849, 2607, 13, 462, 29871]}
{"line_number": 362, "line_type": "original", "code": "          columnLabels.remove((int) columnsToDrop.get(i));", "entropy": 1.8718671798706055, "is_bug_line": false, "sus_score": 0.4814458191394806, "per_token_entropy": [6.730958461761475, 8.405323028564453, 0.2554052174091339, 0.006757739465683699, 0.040297336876392365, 0.6281766891479492, 5.978718280792236, 1.2722628116607666, 0.04347723349928856, 6.630983352661133, 0.18948835134506226, 0.8144535422325134, 0.1394810676574707, 0.11719052493572235, 0.026550527662038803, 0.4275369644165039, 0.11467856913805008], "tokens": [965, 1897, 4775, 29879, 29889, 5992, 3552, 524, 29897, 4341, 1762, 15063, 29889, 657, 29898, 29875, 2483]}
{"line_number": 362, "line_type": "generated", "code": "\n          } else if (basicRow != null) {\n            basicRows.add(basicRow);\n            coefficients[i] = getEntry(basicRow, getRhsOffset());\n          } else {\n            coefficients[i] =", "entropy": 0.12898018956184387, "is_bug_line": false, "sus_score": 0.4814458191394806, "per_token_entropy": [0.09675711393356323, 0.8338717222213745, 0.011911691166460514, 0.38382285833358765, 0.6567591428756714, 0.017538459971547127, 0.06861180812120438, 0.006395586766302586, 0.3785759210586548, 0.0045393044129014015, 0.20231017470359802, 0.000809818331617862, 0.00980123970657587, 1.0260192155838013, 0.7931639552116394, 0.00022301571152638644, 0.00019596086349338293, 0.00021407696476671845, 0.0009495278936810791, 0.008362988941371441, 0.00034564718953333795, 0.006880282424390316, 0.002855392638593912, 0.40141573548316956, 0.2295709252357483, 0.0004262015863787383, 0.0024414039216935635, 0.0006157647585496306, 0.006149537395685911, 0.3679291605949402, 0.03855884447693825, 0.0013247294118627906, 0.008790958672761917, 0.0011448265286162496, 0.003562177997082472, 0.19276906549930573, 0.020130380988121033, 0.0002847504511009902, 0.0006697318749502301, 0.05443331599235535, 0.004643609281629324, 0.3030741512775421, 0.00891868770122528, 0.15572194755077362, 0.03914204239845276, 0.0048256125301122665, 0.2245374172925949, 0.12277881056070328, 0.0003716255014296621, 0.0006083783227950335, 0.0005843124235980213, 0.0006300609675236046], "tokens": [13, 3986, 500, 1683, 565, 313, 16121, 4301, 2804, 1870, 29897, 426, 13, 9651, 6996, 10661, 29889, 1202, 29898, 16121, 4301, 416, 13, 9651, 16127, 29961, 29875, 29962, 353, 679, 9634, 29898, 16121, 4301, 29892, 679, 29934, 9499, 10302, 3310, 13, 3986, 500, 1683, 426, 13, 9651, 16127, 29961, 29875, 29962, 353]}
{"line_number": 332, "line_type": "original", "code": "        List<Integer> columnsToDrop = new ArrayList<Integer>();", "entropy": 1.6091252565383911, "is_bug_line": false, "sus_score": 0.4810344874858856, "per_token_entropy": [7.0586934089660645, 8.458074569702148, 0.10359454154968262, 1.3506771326065063, 0.0011449456214904785, 3.244215488433838, 0.6097044348716736, 0.11784183979034424, 0.03263865411281586, 0.22200116515159607, 0.01909867487847805, 1.0685895681381226, 0.10658901184797287, 0.1348896473646164], "tokens": [308, 2391, 29966, 7798, 29958, 4341, 1762, 15063, 353, 716, 9791, 29966, 7798, 8295]}
{"line_number": 332, "line_type": "generated", "code": "\n        return false;\n    }\n\n    /**\n     * Returns whether the problem is at an infeasible state.\n     * @return whether the model is infeasible\n     */\n    boolean isInfeasible", "entropy": 0.16001127660274506, "is_bug_line": false, "sus_score": 0.4810344874858856, "per_token_entropy": [0.12717193365097046, 0.23035217821598053, 0.48241233825683594, 1.2596744298934937, 0.0023460264783352613, 0.017534945160150528, 0.24607837200164795, 0.0032056395430117846, 0.011001761071383953, 0.04088020324707031, 0.11436378210783005, 0.07612714916467667, 0.06689156591892242, 0.0019262346904724836, 0.0004390706308186054, 0.9821537733078003, 0.47386401891708374, 0.1006602793931961, 0.30301544070243835, 0.24418021738529205, 1.2291107177734375, 0.36361807584762573, 0.7761325836181641, 0.00022754464589525014, 0.000621959799900651, 0.0019112430745735765, 0.016743253916502, 0.02269182726740837, 0.009390825405716896, 0.007275041658431292, 0.001555662602186203, 0.020761549472808838, 0.0027214179281145334, 0.06868960708379745, 0.016945572569966316, 0.4461367130279541, 0.3106934726238251, 0.10754792392253876, 0.011931716464459896, 0.0009814451914280653, 0.002592656761407852, 0.023470791056752205, 0.005561592988669872, 0.005178253632038832, 0.00014220656885299832, 0.016685927286744118, 0.047073282301425934, 0.005778394173830748, 0.011244615539908409, 0.0001357701694360003, 0.0006254147156141698, 0.002130026463419199], "tokens": [13, 4706, 736, 2089, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 16969, 3692, 278, 1108, 338, 472, 385, 297, 1725, 294, 1821, 2106, 29889, 13, 268, 334, 732, 2457, 3692, 278, 1904, 338, 297, 1725, 294, 1821, 13, 268, 3776, 13, 1678, 7223, 338, 797, 1725, 294, 1821]}
{"line_number": 354, "line_type": "original", "code": "          for (int j = 0; j < getWidth(); j++) {", "entropy": 0.903956413269043, "is_bug_line": false, "sus_score": 0.48065856099128723, "per_token_entropy": [7.29703426361084, 5.255191802978516, 0.004157946910709143, 0.10365193337202072, 0.10715635120868683, 0.003565860213711858, 0.3919012248516083, 0.3102540671825409, 0.01270297821611166, 0.005245968233793974, 0.008919160813093185, 0.2385655790567398, 1.4676638841629028, 0.14719794690608978, 0.008955196477472782, 0.003776918863877654, 0.0013180625392124057], "tokens": [965, 363, 313, 524, 432, 353, 29871, 29900, 29936, 432, 529, 679, 6110, 890, 432, 4862, 426]}
{"line_number": 354, "line_type": "generated", "code": "\n        Integer basicRow = getBasicRow(i + 1);\n        if (basicRow != null) {\n          basicRows.add(basicRow);\n          coefficients[i] = getEntry(basicRow, getRhsOffset", "entropy": 0.16175711154937744, "is_bug_line": false, "sus_score": 0.48065856099128723, "per_token_entropy": [0.1504175066947937, 0.8552980422973633, 2.6460657119750977, 0.7343206405639648, 0.03863351419568062, 0.019563693553209305, 0.23775255680084229, 0.0049179065972566605, 0.0051236990839242935, 0.007647759281098843, 0.2920619249343872, 0.257639080286026, 0.8717826008796692, 0.008652695454657078, 0.052831538021564484, 0.017853040248155594, 0.16746772825717926, 0.15521907806396484, 0.04028279334306717, 0.013435538858175278, 0.021277379244565964, 0.28363892436027527, 0.0015109085943549871, 0.06538768857717514, 0.0024534144904464483, 0.006739504635334015, 0.16190849244594574, 0.21501745283603668, 0.0009083197801373899, 0.0006444760947488248, 0.0003948624071199447, 0.0022657455410808325, 0.00655157258734107, 0.00017987063620239496, 0.00734782125800848, 0.0021236028987914324, 0.2101738601922989, 0.3503049612045288, 0.00152233534026891, 0.016901150345802307, 0.0036585084162652493, 0.013067795895040035, 0.30187156796455383, 0.02541467919945717, 0.0012346034636721015, 0.004801410716027021, 0.0008492438937537372, 0.004432377405464649, 0.09411750733852386, 0.026021499186754227, 0.0006012300727888942, 0.0010805251076817513], "tokens": [13, 4706, 8102, 6996, 4301, 353, 679, 16616, 4301, 29898, 29875, 718, 29871, 29896, 416, 13, 4706, 565, 313, 16121, 4301, 2804, 1870, 29897, 426, 13, 3986, 6996, 10661, 29889, 1202, 29898, 16121, 4301, 416, 13, 3986, 16127, 29961, 29875, 29962, 353, 679, 9634, 29898, 16121, 4301, 29892, 679, 29934, 9499, 10302]}
{"line_number": 361, "line_type": "original", "code": "        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {", "entropy": 1.2346956729888916, "is_bug_line": false, "sus_score": 0.48029953241348267, "per_token_entropy": [7.361231803894043, 5.903743267059326, 0.008086560294032097, 0.1584867238998413, 4.458079814910889, 0.11544528603553772, 7.779827117919922, 0.6404975652694702, 0.9380213618278503, 0.06749145686626434, 0.2861182987689972, 1.280737280845642, 1.3380606174468994, 0.050866857171058655, 0.028014807030558586, 0.014380508102476597, 0.012580323033034801, 0.259786993265152, 0.016224142163991928, 0.018705397844314575, 0.01765945553779602, 0.09325400739908218, 0.009856837801635265, 0.005221894942224026, 0.005013513378798962], "tokens": [308, 363, 313, 524, 474, 353, 4341, 1762, 15063, 29889, 2311, 580, 448, 29871, 29896, 29936, 474, 6736, 29871, 29900, 29936, 474, 489, 29897, 426]}
{"line_number": 361, "line_type": "generated", "code": "\n            if (Precision.compareTo(getEntry(0, colIndex), 0d, maxUlps)", "entropy": 0.3216298222541809, "is_bug_line": false, "sus_score": 0.48029953241348267, "per_token_entropy": [0.18117086589336395, 0.6926478743553162, 1.8553849458694458, 0.06903734058141708, 1.740304708480835, 0.00031990656862035394, 2.0503786799963564e-05, 0.0010063351364806294, 0.12110920995473862, 0.0005585778853856027, 0.008718166500329971, 0.8203315138816833, 0.026782672852277756, 0.0018436592072248459, 1.114727258682251, 0.0013310391223058105, 0.3550856411457062, 0.0011556621175259352, 0.03137524053454399, 0.16125543415546417, 0.08839616924524307, 0.27219152450561523, 0.0017057405784726143, 1.4564803838729858, 0.0002656822034623474, 0.0001072826053132303, 8.630380034446716e-05, 0.0022347019985318184], "tokens": [13, 9651, 565, 313, 29925, 3757, 2459, 29889, 18307, 1762, 29898, 657, 9634, 29898, 29900, 29892, 784, 3220, 511, 29871, 29900, 29881, 29892, 4236, 29965, 29880, 567, 29897]}
{"line_number": 352, "line_type": "original", "code": "        for (int i = 1; i < getHeight(); i++) {", "entropy": 0.6544702649116516, "is_bug_line": false, "sus_score": 0.47865378856658936, "per_token_entropy": [7.415734767913818, 1.0160167217254639, 0.0041285050101578236, 0.06514210999011993, 0.3087690770626068, 0.003799007972702384, 0.2267124056816101, 0.8916847705841064, 0.012734170071780682, 0.002644139574840665, 0.09143185615539551, 0.16308189928531647, 0.8243076205253601, 0.07224097102880478, 0.020740533247590065, 0.004805325530469418, 0.002021057065576315], "tokens": [308, 363, 313, 524, 474, 353, 29871, 29896, 29936, 474, 529, 679, 7011, 890, 474, 4862, 426]}
{"line_number": 352, "line_type": "generated", "code": "\n        for (int i = 0; i", "entropy": 0.29476988315582275, "is_bug_line": false, "sus_score": 0.47865378856658936, "per_token_entropy": [0.08752170205116272, 1.145070195198059, 0.7349490523338318, 0.003110334975644946, 0.07083675265312195, 0.28931647539138794, 0.003098807530477643, 0.33795425295829773, 0.5594167113304138, 0.009187917225062847, 0.0020061859395354986], "tokens": [13, 4706, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474]}
