{"line_number": 855, "line_type": "original", "code": "", "entropy": 2.8623547554016113, "is_bug_line": false, "sus_score": 0.39880380034446716, "per_token_entropy": [5.313765048980713, 0.4109443426132202], "tokens": [29871, 13]}
{"line_number": 855, "line_type": "generated", "code": "\n<|mask:1|><|mask:0|>\n<|mask:1|><|mask:0|>\n<|mask:1|><|mask:0|>\n<|mask:1|><|mask", "entropy": 0.07641825079917908, "is_bug_line": false, "sus_score": 0.39880380034446716, "per_token_entropy": [0.11855394393205643, 0.30138304829597473, 0.013549034483730793, 0.04940970242023468, 0.004930599592626095, 0.5864831209182739, 0.01642715185880661, 0.14853855967521667, 0.004048367030918598, 0.015710745006799698, 0.0020378315821290016, 0.5810970067977905, 0.00625829491764307, 0.98026442527771, 0.17969146370887756, 0.1747395247220993, 0.007476089987903833, 0.024525798857212067, 0.003546379506587982, 0.18810535967350006, 0.0033208958338946104, 0.05985555052757263, 0.0018650771817192435, 0.004578701686114073, 0.001914812484756112, 0.03588160499930382, 0.0015466167824342847, 0.07201903313398361, 0.02152988500893116, 0.08343324065208435, 0.004092533141374588, 0.010262341238558292, 0.0021080193109810352, 0.05290299654006958, 0.0014156806282699108, 0.03027470037341118, 0.0012013844680041075, 0.0027462646830826998, 0.00112791801802814, 0.01134810596704483, 0.0009255892946384847, 0.030620215460658073, 0.010289006866514683, 0.06618309020996094, 0.0029490573797374964, 0.006340743508189917, 0.0014055621577426791, 0.025567028671503067, 0.0009548871894367039, 0.015575547702610493, 0.0008272086852230132, 0.0019089824054390192], "tokens": [13, 29966, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29900, 29989, 29958, 13, 29966, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29900, 29989, 29958, 13, 29966, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29900, 29989, 29958, 13, 29966, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168]}
{"line_number": 627, "line_type": "original", "code": "        int index = StringUtils.indexOf(str, \" \", lower);", "entropy": 1.0860953330993652, "is_bug_line": false, "sus_score": 0.3470227122306824, "per_token_entropy": [6.707897186279297, 3.7332191467285156, 0.09042119979858398, 0.061677485704422, 3.1773250102996826, 0.006200363393872976, 0.002856224775314331, 0.13546042144298553, 0.007868011482059956, 0.016143091022968292, 0.016640320420265198, 1.8092447519302368, 0.07651615142822266, 0.03145021200180054, 0.41850945353507996], "tokens": [308, 938, 2380, 353, 1714, 12177, 29889, 19402, 29898, 710, 29892, 376, 9162, 5224, 416]}
{"line_number": 627, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.05357306823134422, "is_bug_line": false, "sus_score": 0.3470227122306824, "per_token_entropy": [0.09180483967065811, 0.5175559520721436, 0.44716593623161316, 0.009943593293428421, 0.003897452959790826, 0.0006688979919999838, 0.5215373039245605, 0.0001754606782924384, 1.6927575416048057e-05, 0.016106491908431053, 0.004335884470492601, 0.062458816915750504, 0.18405181169509888, 0.04807199537754059, 0.019203344359993935, 0.0004226268210913986, 0.00031609306461177766, 0.29372239112854004, 0.0003921216703020036, 0.00025018901214934886, 3.85038583772257e-05, 0.015478480607271194, 0.003452533157542348, 0.004808054305613041, 0.00048458753735758364, 0.00028224775451235473, 0.00600178400054574, 0.018741082400083542, 0.010571668855845928, 0.0013141338713467121, 0.00356300943531096, 0.001978703308850527, 0.002741033909842372, 0.006909406278282404, 4.291525328881107e-06, 0.00039188333903439343, 0.004775428678840399, 7.462222856702283e-05, 2.1457441107486375e-05, 0.00017391123401466757, 0.00323320715688169, 0.0008251837571151555, 0.004122094251215458, 0.3238290846347809, 0.010261515155434608, 0.0021877181716263294, 0.000871040450874716, 0.12683753669261932, 0.0072465199045836926, 0.001039203256368637, 0.0009199915803037584, 0.000521523819770664], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 858, "line_type": "original", "code": "", "entropy": 2.8623547554016113, "is_bug_line": false, "sus_score": 0.3457704484462738, "per_token_entropy": [5.313765048980713, 0.4109443426132202], "tokens": [29871, 13]}
{"line_number": 858, "line_type": "generated", "code": "\n<|mask:1|><|mask:1|><|mask:0|>\n<|mask:1|><|mask:1|><|mask:1|><|mask:0|>\n<|mask:1", "entropy": 0.06223434954881668, "is_bug_line": false, "sus_score": 0.3457704484462738, "per_token_entropy": [0.11855394393205643, 0.30138304829597473, 0.013549034483730793, 0.04940970242023468, 0.004930599592626095, 0.5864831209182739, 0.01642715185880661, 0.14853855967521667, 0.004048367030918598, 0.015710745006799698, 0.0020378315821290016, 0.9092220067977905, 0.00499797472730279, 0.34319359064102173, 0.0019165972480550408, 0.004932260140776634, 0.0015405465383082628, 0.15425220131874084, 0.0018396135419607162, 0.07052596658468246, 0.00911137368530035, 0.06316982209682465, 0.004756801761686802, 0.012888111174106598, 0.0019881022162735462, 0.1067076250910759, 0.0025069257244467735, 0.0045382361859083176, 0.0011403016978874803, 0.0029702140018343925, 0.0011248220689594746, 0.04046277701854706, 0.001049682730808854, 0.008821799419820309, 0.0012161486083641648, 0.0025864739436656237, 0.0009192770230583847, 0.02835044264793396, 0.0007077334448695183, 0.04648707062005997, 0.001347468001767993, 0.003694139886647463, 0.0009689403814263642, 0.028162240982055664, 0.0011150578502565622, 0.012906704097986221, 0.003488884773105383, 0.04410182684659958, 0.003540796460583806, 0.008320784196257591, 0.0013323486782610416, 0.03221003711223602], "tokens": [13, 29966, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29900, 29989, 29958, 13, 29966, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29900, 29989, 29958, 13, 29966, 29989, 13168, 29901, 29896]}
{"line_number": 639, "line_type": "original", "code": "            result.append(StringUtils.defaultString(appendToEnd));", "entropy": 1.0508191585540771, "is_bug_line": false, "sus_score": 0.3428764343261719, "per_token_entropy": [9.172185897827148, 4.8543901443481445, 0.039923422038555145, 0.03398782014846802, 0.1243547797203064, 1.3197813034057617, 0.018919017165899277, 0.004804614000022411, 0.16195634007453918, 0.0017245433991774917, 0.0025760105345398188, 0.018062274903059006, 0.0015941066667437553, 0.0012206730898469687, 0.006806048098951578], "tokens": [632, 1121, 29889, 4397, 29898, 1231, 12177, 29889, 4381, 1231, 29898, 4397, 1762, 5044, 2483]}
{"line_number": 639, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.06897643953561783, "is_bug_line": false, "sus_score": 0.3428764343261719, "per_token_entropy": [0.10045965760946274, 0.48805132508277893, 0.7674666047096252, 0.008560390211641788, 0.006227848585695028, 0.0008107712492346764, 0.6637151837348938, 0.00018153927521780133, 1.8715683836489916e-05, 0.017132850363850594, 0.004239619243890047, 0.05722173675894737, 0.2958191931247711, 0.05001393333077431, 0.019617116078734398, 0.0007538337376900017, 0.0003496989083942026, 0.30121511220932007, 0.00045193947153165936, 0.0005218812730163336, 4.446407547220588e-05, 0.019346237182617188, 0.00406344560906291, 0.004771750420331955, 0.00013755806139670312, 0.00020549570035655051, 0.0032309493981301785, 0.010440965183079243, 0.007733997423201799, 0.0009588173124939203, 0.002267529722303152, 0.0017244244227185845, 0.0028988979756832123, 0.006382675841450691, 4.529942543740617e-06, 0.00046695294440723956, 0.005119429435580969, 0.00014673586701974273, 1.728519782773219e-05, 0.0001820160250645131, 0.003855297341942787, 0.0008326877141371369, 0.004597450606524944, 0.38802507519721985, 0.013754469342529774, 0.003097024979069829, 0.0009453595266677439, 0.3066071569919586, 0.009039194323122501, 0.0013365155318751931, 0.001073499326594174, 0.0006379238329827785], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 638, "line_type": "original", "code": "            result.append(str.substring(0, index));", "entropy": 1.0212384462356567, "is_bug_line": false, "sus_score": 0.33868974447250366, "per_token_entropy": [8.724663734436035, 2.888176441192627, 0.012107922695577145, 0.03969591110944748, 0.0704946368932724, 0.3059636354446411, 0.11225011199712753, 0.008329533040523529, 0.0022656265646219254, 0.7787388563156128, 0.0017072877380996943, 0.22095151245594025, 0.11075343936681747], "tokens": [632, 1121, 29889, 4397, 29898, 710, 29889, 20363, 29898, 29900, 29892, 2380, 2483]}
{"line_number": 638, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.07157087326049805, "is_bug_line": false, "sus_score": 0.33868974447250366, "per_token_entropy": [0.0996362566947937, 0.6637747287750244, 0.8510724902153015, 0.008295721374452114, 0.007676506415009499, 0.0008449559682048857, 0.6356430649757385, 0.00018892886873800308, 1.9907753085135482e-05, 0.01639818586409092, 0.0045992303639650345, 0.05803850665688515, 0.24619393050670624, 0.04824785143136978, 0.018522275611758232, 0.0006887924391776323, 0.0003856868715956807, 0.28951388597488403, 0.00039319414645433426, 0.0008581769652664661, 4.207999518257566e-05, 0.018455572426319122, 0.0037971078418195248, 0.004634710028767586, 0.0001394651480950415, 0.00020144341397099197, 0.003819315228611231, 0.011057528667151928, 0.008731638081371784, 0.0010758809512481093, 0.002538555534556508, 0.0017553649377077818, 0.0030797929503023624, 0.006275590509176254, 4.291525328881107e-06, 0.00042524831951595843, 0.005195805337280035, 0.0001879753835964948, 2.1934269170742482e-05, 0.00018308870494365692, 0.0037276323419064283, 0.0008997444529086351, 0.004728089552372694, 0.3881846070289612, 0.013428246602416039, 0.0033426384907215834, 0.001053850632160902, 0.27249205112457275, 0.008238380774855614, 0.0013165149139240384, 0.0010700459824874997, 0.0005888396990485489], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 626, "line_type": "original", "code": "        StringBuffer result = new StringBuffer();", "entropy": 1.4097157716751099, "is_bug_line": false, "sus_score": 0.3385893702507019, "per_token_entropy": [6.755797863006592, 4.691552639007568, 0.600509524345398, 0.11882041394710541, 0.02214641310274601, 0.020943794399499893, 0.0008873577462509274, 0.0003195490571670234, 0.4764643609523773], "tokens": [308, 1714, 7701, 1121, 353, 716, 1714, 7701, 890]}
{"line_number": 626, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.06196146085858345, "is_bug_line": false, "sus_score": 0.3385893702507019, "per_token_entropy": [0.0607374869287014, 0.8989662528038025, 0.8486019372940063, 0.012617286294698715, 0.005749355535954237, 0.000813034363090992, 0.43389326333999634, 0.00012814177898690104, 1.168244216387393e-05, 0.011313453316688538, 0.0035165634471923113, 0.04261501133441925, 0.11869369447231293, 0.03585883229970932, 0.01507579255849123, 0.0009307105210609734, 0.00037865620106458664, 0.26232168078422546, 0.000296310376143083, 0.0005030558677390218, 2.729855441430118e-05, 0.013038968667387962, 0.0025839770678430796, 0.003418674925342202, 0.0001627074379939586, 0.0002366024418734014, 0.0052179815247654915, 0.012841036543250084, 0.008647376671433449, 0.0010376551654189825, 0.002147869672626257, 0.0015141224721446633, 0.002441998338326812, 0.0045167566277086735, 3.2186455882765586e-06, 0.0002806984703056514, 0.004424307029694319, 0.00011765264935093, 1.0847986231965479e-05, 0.00017355366435367614, 0.0032177597749978304, 0.0006463822210207582, 0.0038733473047614098, 0.27806660532951355, 0.00787002220749855, 0.002046397188678384, 0.0008412636234425008, 0.10036445409059525, 0.0071301767602562904, 0.00102324562612921, 0.0006434039096347988, 0.00040725519647821784], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 631, "line_type": "original", "code": "            if (upper != str.length()) {", "entropy": 2.390620708465576, "is_bug_line": false, "sus_score": 0.3384424149990082, "per_token_entropy": [8.985156059265137, 3.950911045074463, 0.10163092613220215, 2.296917676925659, 3.8688180446624756, 4.4556965827941895, 0.02240942418575287, 0.0033642619382590055, 0.20729830861091614, 0.01400265097618103], "tokens": [632, 565, 313, 21064, 2804, 851, 29889, 2848, 3101, 426]}
{"line_number": 631, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It", "entropy": 0.0883675217628479, "is_bug_line": false, "sus_score": 0.3384424149990082, "per_token_entropy": [0.08671960234642029, 0.4456702470779419, 0.9844830632209778, 0.09979087114334106, 0.002105759223923087, 0.0037131428252905607, 0.003755660727620125, 0.015622024424374104, 0.002533323597162962, 0.02913415990769863, 0.028074385598301888, 0.005662590730935335, 0.002178321359679103, 0.0002836778585333377, 1.3839704990386963, 8.797258487902582e-05, 8.821448318485636e-06, 0.012496385723352432, 0.003716468345373869, 0.08650598675012589, 0.5726499557495117, 0.07443263381719589, 0.014999463222920895, 0.0005657264264300466, 0.00022968991834204644, 0.3098202347755432, 0.0003673355677165091, 0.0006090931710787117, 1.9430925021879375e-05, 0.01736227050423622, 0.0037245445419102907, 0.0038941281381994486, 0.00011491115583339706, 0.00016032364510465413, 0.0026430694852024317, 0.013164862059056759, 0.005388616118580103, 0.0008177988929674029, 0.0025988395791500807, 0.001708358759060502, 0.002524643437936902, 0.010442852973937988, 5.602820692729438e-06, 0.00043847484630532563, 0.005044945515692234, 0.0001958416833076626, 1.3589766240329482e-05, 0.00016318420239258558, 0.00416269525885582, 0.0008550802012905478, 0.0033768555149435997, 0.3461030125617981], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739]}
{"line_number": 629, "line_type": "original", "code": "            result.append(str.substring(0, upper));", "entropy": 1.2162458896636963, "is_bug_line": false, "sus_score": 0.3339526951313019, "per_token_entropy": [9.29751205444336, 4.137722492218018, 0.07570240646600723, 0.05085008963942528, 0.12085718661546707, 0.6371305584907532, 0.09083592891693115, 0.04092208668589592, 0.002799165900796652, 0.5944687724113464, 0.003564197337254882, 0.7161425352096558, 0.042688120156526566], "tokens": [632, 1121, 29889, 4397, 29898, 710, 29889, 20363, 29898, 29900, 29892, 7568, 2483]}
{"line_number": 629, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.09676160663366318, "is_bug_line": false, "sus_score": 0.3339526951313019, "per_token_entropy": [0.07879610359668732, 0.4304654896259308, 0.6634106636047363, 0.08172515034675598, 0.0024133387487381697, 0.0029927962459623814, 0.003903983859345317, 0.015307563357055187, 0.002722131321206689, 0.031145082786679268, 0.03411133214831352, 0.005244782194495201, 0.0021162275224924088, 0.0003077510336879641], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 641, "line_type": "original", "code": "        return result.toString();", "entropy": 2.1297805309295654, "is_bug_line": false, "sus_score": 0.32965248823165894, "per_token_entropy": [7.414527893066406, 5.167769432067871, 0.14844144880771637, 0.03041948936879635, 0.005429047625511885, 0.012095792219042778], "tokens": [308, 736, 1121, 29889, 7711, 890]}
{"line_number": 641, "line_type": "generated", "code": "\n    /**\n     *", "entropy": 0.23336222767829895, "is_bug_line": false, "sus_score": 0.32965248823165894, "per_token_entropy": [0.09421515464782715, 0.6998329162597656, 0.5885332822799683, 0.009750242345035076, 0.006977714132517576, 0.0008640132145956159], "tokens": [13, 1678, 7762, 13, 268, 334]}
{"line_number": 635, "line_type": "original", "code": "            result.append(str.substring(0, upper));", "entropy": 1.1756364107131958, "is_bug_line": false, "sus_score": 0.32952821254730225, "per_token_entropy": [9.233537673950195, 4.342796802520752, 0.05508743226528168, 0.04879273101687431, 0.09792158752679825, 0.6537500023841858, 0.05956413596868515, 0.026495035737752914, 0.0032056395430117846, 0.4587245583534241, 0.003173436503857374, 0.2581652104854584, 0.042059097439050674], "tokens": [632, 1121, 29889, 4397, 29898, 710, 29889, 20363, 29898, 29900, 29892, 7568, 2483]}
{"line_number": 635, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.10710843652486801, "is_bug_line": false, "sus_score": 0.32952821254730225, "per_token_entropy": [0.06944146007299423, 0.5000830888748169, 0.7484953999519348, 0.08539687097072601, 0.0026008610147982836, 0.003490904113277793, 0.004222525749355555, 0.015126166865229607, 0.0024204738438129425, 0.02835148572921753, 0.03176287189126015, 0.005364072509109974, 0.0024650683626532555, 0.00029690624796785414], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 622, "line_type": "original", "code": "        if (upper < lower) {", "entropy": 1.5759532451629639, "is_bug_line": true, "sus_score": 0.32842543721199036, "per_token_entropy": [6.914658069610596, 3.6170129776000977, 0.044898491352796555, 0.8845959901809692, 0.8625881671905518, 0.1601758599281311, 0.11376062035560608, 0.009934741072356701], "tokens": [308, 565, 313, 21064, 529, 5224, 29897, 426]}
{"line_number": 622, "line_type": "generated", "code": "\n\n    //-----------------------------------------------------------------------\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there.", "entropy": 0.09758416563272476, "is_bug_line": true, "sus_score": 0.32842543721199036, "per_token_entropy": [0.10995085537433624, 1.3348803520202637, 0.15636660158634186, 0.6758858561515808, 0.09716878831386566, 0.0026955006178468466, 0.003373529063537717, 0.003997550345957279, 0.016068484634160995, 0.0025106121320277452, 0.03099057450890541, 0.03696875646710396, 0.005684875417500734, 0.0017019324004650116, 0.00024184639914892614, 1.4439421892166138, 9.679325739853084e-05, 8.821448318485636e-06, 0.012127591297030449, 0.00393497571349144, 0.08395326137542725, 0.6039921045303345, 0.061665941029787064, 0.012517224065959454, 0.00042632073746062815, 0.0001991788885788992, 0.2957617938518524, 0.0003357561945449561, 0.0006968930247239769, 2.3483953555114567e-05, 0.01565934531390667, 0.0032841814681887627, 0.0034881718456745148, 0.00012659224739763886, 0.00014804698002990335, 0.0026907450519502163, 0.016323482617735863, 0.005188570823520422, 0.0008322112844325602, 0.002363865962252021, 0.00144091690890491, 0.0022287548054009676, 0.010035417042672634, 5.8412379075889476e-06, 0.0004332319076638669, 0.004207686986774206, 0.00018749863374978304, 9.775113539944869e-06, 0.00014125302550382912, 0.0038479347713291645, 0.0006787856691516936, 0.0028860606253147125], "tokens": [13, 13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889]}
{"line_number": 628, "line_type": "original", "code": "        if (index == -1) {", "entropy": 1.4221394062042236, "is_bug_line": false, "sus_score": 0.32842543721199036, "per_token_entropy": [7.064979076385498, 3.650604724884033, 0.039415404200553894, 0.5182773470878601, 1.1217026710510254, 0.08492031693458557, 0.0018892312655225396, 0.3126782774925232, 0.0047876485623419285], "tokens": [308, 565, 313, 2248, 1275, 448, 29896, 29897, 426]}
{"line_number": 628, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.0622994527220726, "is_bug_line": false, "sus_score": 0.32842543721199036, "per_token_entropy": [0.1041259840130806, 0.5562034845352173, 0.5587621927261353, 0.008331778459250927, 0.004741615150123835, 0.000722266617231071, 0.6608130931854248, 0.00020323118951637298, 1.823885577323381e-05, 0.015122996643185616, 0.004129929933696985, 0.05768151953816414, 0.22216804325580597, 0.04568176344037056, 0.0196306761354208, 0.0005620330339297652, 0.00030155404238030314, 0.2930707037448883, 0.00039176418795250356, 0.00040642108069732785, 3.4927710657939315e-05, 0.016266249120235443, 0.003485677298158407, 0.004201870411634445, 0.00016091958968900144, 0.00016735584358684719, 0.003457403741776943, 0.010651050135493279, 0.008074143901467323, 0.0009729895391501486, 0.0025624556001275778, 0.0015803002752363682, 0.003059589536860585, 0.005408416967839003, 4.529942543740617e-06, 0.0003691230376716703, 0.005025493446737528, 0.0001370812824461609, 1.9550132492440753e-05, 0.00019035911827813834, 0.00369900930672884, 0.0007995745982043445, 0.004363895393908024, 0.35524484515190125, 0.013165450654923916, 0.003123882692307234, 0.0009233264136128128, 0.22877731919288635, 0.007682657800614834, 0.0012985378270968795, 0.0010128850117325783, 0.0005813338793814182], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 610, "line_type": "original", "code": "        if (str.length() == 0) {", "entropy": 1.287752389907837, "is_bug_line": false, "sus_score": 0.3278876543045044, "per_token_entropy": [6.89912748336792, 4.20051383972168, 0.07074779272079468, 0.7737146615982056, 1.2272593975067139, 0.06302163749933243, 0.002195212058722973, 1.9977976083755493, 0.12438162416219711, 0.03727889060974121, 0.05253840610384941, 0.004451722372323275], "tokens": [308, 565, 313, 710, 29889, 2848, 580, 1275, 29871, 29900, 29897, 426]}
{"line_number": 610, "line_type": "generated", "code": "\n\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.17279355227947235, "is_bug_line": false, "sus_score": 0.3278876543045044, "per_token_entropy": [0.11015182733535767, 1.3210830688476562, 0.22121021151542664, 0.6291513442993164, 0.1792711466550827, 0.0027526842895895243, 0.0031697528902441263, 0.0046147750690579414, 0.021685276180505753, 0.0027739638462662697, 0.041889578104019165, 0.045795757323503494, 0.006579640321433544, 0.0015505446353927255, 0.00022373080719262362], "tokens": [13, 13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 618, "line_type": "original", "code": "        if (upper == -1 || upper > str.length()) {", "entropy": 1.2156274318695068, "is_bug_line": false, "sus_score": 0.3274732530117035, "per_token_entropy": [7.414900302886963, 4.432042598724365, 0.0750976949930191, 1.678804636001587, 1.8528200387954712, 0.7504255771636963, 0.0055564953945577145, 0.9313236474990845, 0.17280267179012299, 0.5095553398132324, 0.28942251205444336, 0.04238445684313774, 0.0011828100541606545, 0.07135813683271408, 0.006732991896569729], "tokens": [308, 565, 313, 21064, 1275, 448, 29896, 3830, 7568, 1405, 851, 29889, 2848, 3101, 426]}
{"line_number": 618, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.05409913510084152, "is_bug_line": false, "sus_score": 0.3274732530117035, "per_token_entropy": [0.07929540425539017, 0.5939275622367859, 0.4699118435382843, 0.008146747015416622, 0.006188279017806053, 0.000655793643090874, 0.541100263595581, 0.00015639036428183317, 1.2278481335670222e-05, 0.01237888541072607, 0.0035464982502162457, 0.05426689609885216, 0.21734407544136047, 0.03292279690504074, 0.016107313334941864, 0.0007877822499722242, 0.0003997480380348861, 0.2881496846675873, 0.0003636414185166359, 0.0007759897271171212, 4.51792984677013e-05, 0.014023810625076294, 0.0028986602555960417, 0.0032474659383296967, 0.0001616347290109843, 0.0001658063702052459, 0.0034979130141437054, 0.01266060397028923, 0.0066059306263923645, 0.00082923355512321, 0.002460430609062314, 0.0016420703614130616, 0.002240292262285948, 0.005355653818696737, 4.6491513785440475e-06, 0.00039939055568538606, 0.004225374665111303, 0.000408327643526718, 1.4424220353248529e-05, 0.00015531764074694365, 0.003850666107609868, 0.0007289375062100589, 0.003444929840043187, 0.285920113325119, 0.007023289799690247, 0.0017085968283936381, 0.0007188120507635176, 0.11326205730438232, 0.006741398945450783, 0.001019911258481443, 0.0007731309160590172, 0.00048303857329301536], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 607, "line_type": "original", "code": "        if (str == null) {", "entropy": 1.5670456886291504, "is_bug_line": false, "sus_score": 0.32592302560806274, "per_token_entropy": [7.414684772491455, 4.116756439208984, 0.044070228934288025, 0.517758309841156, 0.31400230526924133, 0.0031619099900126457, 0.1215384304523468, 0.0043938048183918], "tokens": [308, 565, 313, 710, 1275, 1870, 29897, 426]}
{"line_number": 607, "line_type": "generated", "code": "\n    /**\n     *", "entropy": 0.20810624957084656, "is_bug_line": false, "sus_score": 0.32592302560806274, "per_token_entropy": [0.10232581943273544, 0.6336742043495178, 0.49755731225013733, 0.009334138594567776, 0.004993230104446411, 0.0007527616689912975], "tokens": [13, 1678, 7762, 13, 268, 334]}
{"line_number": 611, "line_type": "original", "code": "            return StringUtils.EMPTY;", "entropy": 1.9321939945220947, "is_bug_line": false, "sus_score": 0.32557716965675354, "per_token_entropy": [9.550689697265625, 3.4362387657165527, 3.233670711517334, 0.4412675201892853, 0.02294677309691906, 0.6881144642829895, 0.0015156697481870651, 0.0009004590683616698, 0.014400954358279705], "tokens": [632, 736, 1714, 12177, 29889, 29923, 3580, 15631, 29936]}
{"line_number": 611, "line_type": "generated", "code": "\n\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.15302887558937073, "is_bug_line": false, "sus_score": 0.32557716965675354, "per_token_entropy": [0.09075482189655304, 1.5081825256347656, 0.17132078111171722, 0.2996704876422882, 0.10595240443944931, 0.0025234543718397617, 0.0030381970573216677, 0.003949818201363087, 0.02237270399928093, 0.0025466412771493196, 0.03387869521975517, 0.042889710515737534, 0.006385163404047489, 0.0017049076268449426, 0.00026258357684127986], "tokens": [13, 13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 851, "line_type": "original", "code": "", "entropy": 2.8623547554016113, "is_bug_line": false, "sus_score": 0.32229721546173096, "per_token_entropy": [5.313765048980713, 0.4109443426132202], "tokens": [29871, 13]}
{"line_number": 851, "line_type": "generated", "code": "\n<|mask:1|><|mask:0|><|mask:1|>\n<|mask:1|><|mask:0|><|mask:1|><|mask:0|>\n<|mask:1", "entropy": 0.0960991233587265, "is_bug_line": false, "sus_score": 0.32229721546173096, "per_token_entropy": [0.11855394393205643, 0.30138304829597473, 0.013549034483730793, 0.04940970242023468, 0.004930599592626095, 0.5864831209182739, 0.01642715185880661, 0.14853855967521667, 0.004048367030918598, 0.015710745006799698, 0.0020378315821290016, 0.5810970067977905, 0.00625829491764307, 0.48026442527770996, 0.001640761154703796, 0.00667260168120265, 0.0016056514577940106, 0.8916234970092773, 0.0028389885555952787, 0.7602565288543701, 0.02587212435901165, 0.08837848901748657, 0.006739741191267967, 0.020497171208262444, 0.0031491946429014206, 0.19791367650032043, 0.003193043638020754, 0.013182745315134525, 0.0012324602575972676, 0.00414643157273531, 0.0010752854868769646, 0.04969139024615288, 0.001190549461171031, 0.018158506602048874, 0.0018227167893201113, 0.0028693003114312887, 0.0012717501958832145, 0.03492117300629616, 0.0010875507723540068, 0.020829150453209877, 0.0013316344702616334, 0.0029154198709875345, 0.0011965028243139386, 0.1896359920501709, 0.0012154342839494348, 0.20442429184913635, 0.005359211005270481, 0.04903373122215271, 0.0035744127817451954, 0.008443254046142101, 0.001359015703201294, 0.038112908601760864], "tokens": [13, 29966, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29900, 29989, 5299, 29989, 13168, 29901, 29896, 29989, 29958, 13, 29966, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29900, 29989, 5299, 29989, 13168, 29901, 29896, 29989, 5299, 29989, 13168, 29901, 29900, 29989, 29958, 13, 29966, 29989, 13168, 29901, 29896]}
{"line_number": 634, "line_type": "original", "code": "        } else if (index > upper) {", "entropy": 2.321658134460449, "is_bug_line": false, "sus_score": 0.3222048282623291, "per_token_entropy": [7.283048152923584, 4.822729587554932, 5.597560882568359, 1.7109086513519287, 0.05560153350234032, 2.3737664222717285, 1.1625266075134277, 0.14288188517093658, 0.06521135568618774, 0.00234650238417089], "tokens": [308, 500, 1683, 565, 313, 2248, 1405, 7568, 29897, 426]}
{"line_number": 634, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     *\n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter", "entropy": 0.08337410539388657, "is_bug_line": false, "sus_score": 0.3222048282623291, "per_token_entropy": [0.08779940754175186, 0.5051090121269226, 0.6179285049438477, 0.008187421597540379, 0.005026797764003277, 0.000692961853928864, 0.5515773296356201, 0.0001419681793777272, 1.549708758830093e-05, 0.012758063152432442, 0.003603752003982663, 0.04272855445742607, 0.17114388942718506, 0.028120169416069984, 0.015854373574256897, 0.0006671110168099403, 0.0003084660565946251, 1.7036080360412598, 0.0017830915749073029, 4.827859811484814e-05, 0.05195199325680733, 0.004133016336709261, 0.0026530565228313208, 0.00021407696476671845, 0.00013779645087197423, 0.0021308590658009052, 0.017034996300935745, 0.006636602338403463, 0.00138853897806257, 0.0035014767199754715, 0.002360892714932561, 0.002707627136260271, 0.019499747082591057, 8.22540732769994e-06, 0.000674616196192801, 0.011148542165756226, 0.0002616301644593477, 1.966933996300213e-05, 0.00019143179815728217, 0.009290912188589573, 0.0014297273010015488, 0.0032447329722344875, 0.24852582812309265, 0.0047944108955562115, 0.0019032713025808334, 0.0007815881981514394, 0.17173269391059875, 0.006446518935263157, 0.0009639384225010872, 0.0011513754725456238, 0.0008722314960323274, 0.0005586970364674926], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263, 3443]}
{"line_number": 636, "line_type": "original", "code": "            result.append(StringUtils.defaultString(appendToEnd));", "entropy": 1.0988916158676147, "is_bug_line": false, "sus_score": 0.3159567713737488, "per_token_entropy": [9.384726524353027, 5.0174641609191895, 0.05293940380215645, 0.05091580003499985, 0.1311265379190445, 1.5858930349349976, 0.023583851754665375, 0.004423238802701235, 0.19337810575962067, 0.0027995225973427296, 0.002837562235072255, 0.022603023797273636, 0.0021525088232010603, 0.0014173472300171852, 0.007113724015653133], "tokens": [632, 1121, 29889, 4397, 29898, 1231, 12177, 29889, 4381, 1231, 29898, 4397, 1762, 5044, 2483]}
{"line_number": 636, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.10365360230207443, "is_bug_line": false, "sus_score": 0.3159567713737488, "per_token_entropy": [0.07295624911785126, 0.49503201246261597, 0.7074108719825745, 0.07618813216686249, 0.002174871740862727, 0.003500407561659813, 0.004280334338545799, 0.014339967630803585, 0.002427133498713374, 0.03151651844382286, 0.034033678472042084, 0.005124291870743036, 0.0019042231142520905, 0.0002618685248307884], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 619, "line_type": "original", "code": "            upper = str.length();", "entropy": 2.4916932582855225, "is_bug_line": false, "sus_score": 0.313435822725296, "per_token_entropy": [9.274035453796387, 5.957574367523193, 0.18746612966060638, 1.9658921957015991, 0.006311365868896246, 0.003640573238953948, 0.04693441092967987], "tokens": [632, 7568, 353, 851, 29889, 2848, 890]}
{"line_number": 619, "line_type": "generated", "code": "\n\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.11748051643371582, "is_bug_line": false, "sus_score": 0.313435822725296, "per_token_entropy": [0.06309763342142105, 1.0490405559539795, 0.13866117596626282, 0.323921263217926, 0.08753480762243271, 0.002603952307254076, 0.0026755272410809994, 0.003765874309465289, 0.01677842251956463, 0.002484213560819626, 0.0285696592181921, 0.035740017890930176, 0.00562868919223547, 0.001450797077268362, 0.00025519452174194157], "tokens": [13, 13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
{"line_number": 608, "line_type": "original", "code": "            return null;", "entropy": 3.248107433319092, "is_bug_line": false, "sus_score": 0.31159842014312744, "per_token_entropy": [9.533536911010742, 2.727839946746826, 0.7261973023414612, 0.00485515221953392], "tokens": [632, 736, 1870, 29936]}
{"line_number": 608, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.1400194615125656, "is_bug_line": false, "sus_score": 0.31159842014312744, "per_token_entropy": [0.08042901754379272, 0.6963327527046204, 0.9551333785057068, 0.11194287985563278, 0.002689318498596549, 0.0032587540335953236, 0.004425849765539169, 0.017422135919332504, 0.0028788098134100437, 0.038644637912511826, 0.0388079434633255, 0.005834216717630625, 0.0021454906091094017, 0.0003271759778726846], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
