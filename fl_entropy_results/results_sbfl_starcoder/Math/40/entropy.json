{"line_number": 393, "line_type": "original", "code": "        this.allowed = allowedSolution;", "entropy": 0.70703125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [3.384765625, 2.14453125, 0.0010986328125, 0.083251953125, 0.0026111602783203125, 0.00594329833984375, 0.0003781318664550781, 0.0347900390625], "tokens": [351, 458, 32, 11327, 280, 6660, 13628, 45]}
{"line_number": 393, "line_type": "generated", "code": "    /** {@inheritDoc} */\n    public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, double startValue, double startValueLowerBound,\n                        double startValueUpperBound, AllowedSolution allowedSolution) {\n        this", "entropy": 0.216796875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [2.029296875, 0.322265625, 0.78564453125, 0.0003483295440673828, 0.0012159347534179688, 0.01052093505859375, 0.106201171875, 0.2149658203125, 0.174072265625, 0.1666259765625, 0.00551605224609375, 0.1097412109375, 0.00147247314453125, 0.00040841102600097656, 0.00011718273162841797, 0.09332275390625, 1.430511474609375e-06, 0.035369873046875, 0.00698089599609375, 0.00423431396484375, 0.2191162109375, 0.01158905029296875, 0.004451751708984375, 0.1998291015625, 0.025238037109375, 0.03021240234375, 0.37255859375, 0.1773681640625, 0.020294189453125, 0.0023403167724609375, 0.32958984375, 0.309326171875, 0.994140625, 0.7177734375, 1.6083984375, 0.311279296875, 0.0164794921875, 0.1800537109375, 0.50048828125, 0.0005059242248535156, 0.00041937828063964844, 0.0013780593872070312, 0.0006575584411621094, 0.0159454345703125, 0.11358642578125, 4.0531158447265625e-06, 0.0004858970642089844, 0.0005273818969726562, 0.0022716522216796875, 0.011962890625, 0.8779296875, 0.152587890625], "tokens": [264, 1022, 3088, 18446, 111, 569, 284, 562, 2064, 10932, 26, 410, 1769, 14066, 30, 1683, 27623, 2447, 296, 30, 2064, 1847, 30, 715, 2064, 1769, 30, 2064, 1477, 882, 30, 2064, 1477, 882, 6724, 4716, 30, 715, 2064, 1477, 882, 9878, 4716, 30, 38886, 13628, 6660, 13628, 27, 301, 291, 458]}
{"line_number": 394, "line_type": "original", "code": "        return super.solve(maxEval, f, min, max, startValue);", "entropy": 0.31103515625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.38671875, 0.64990234375, 0.27001953125, 0.0013189315795898438, 0.012725830078125, 0.001873016357421875, 0.01398468017578125, 0.0018167495727539062, 0.0011072158813476562, 0.0179901123046875, 0.0008578300476074219, 0.0074615478515625, 0.000461578369140625, 0.003955841064453125, 0.10430908203125, 0.0775146484375, 0.0011682510375976562, 0.044342041015625], "tokens": [351, 442, 2599, 32, 19596, 26, 1449, 14066, 30, 296, 30, 1847, 30, 1769, 30, 1477, 882, 293]}
{"line_number": 394, "line_type": "generated", "code": "\n    /**\n     * {@inheritDoc}\n     * <p>\n     * This method simply calls\n     * {@link #solve(int,org.apache.commons.math4.analysis.UnivariateFunction,double,double,double,org.apache.", "entropy": 0.263671875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [1.0380859375, 0.3828125, 1.173828125, 4.971027374267578e-05, 2.55078125, 0.00601959228515625, 0.004459381103515625, 0.01346588134765625, 0.11993408203125, 0.50439453125, 0.00893402099609375, 0.00646209716796875, 0.019622802734375, 0.0001684427261352539, 1.7666015625, 0.11029052734375, 1.6103515625, 0.021575927734375, 0.387939453125, 0.00029397010803222656, 0.02020263671875, 0.059234619140625, 0.1043701171875, 0.27880859375, 0.0200653076171875, 0.032867431640625, 0.0009756088256835938, 1.326171875, 4.172325134277344e-05, 0.1651611328125, 4.1484832763671875e-05, 6.663799285888672e-05, 2.0265579223632812e-06, 0.0022602081298828125, 0.9287109375, 1.4185905456542969e-05, 0.005283355712890625, 1.811981201171875e-05, 0.10968017578125, 8.344650268554688e-07, 0.0013828277587890625, 0.0018157958984375, 0.0518798828125, 0.0011959075927734375, 0.0190277099609375, 0.06646728515625, 0.53076171875, 0.053863525390625, 0.1636962890625, 0.0002970695495605469, 0.036773681640625, 2.1219253540039062e-05], "tokens": [284, 1022, 275, 319, 3088, 18446, 111, 275, 319, 333, 98, 48, 275, 319, 1348, 1411, 9639, 7399, 275, 319, 3088, 1204, 588, 19596, 26, 410, 30, 1088, 32, 2104, 32, 8369, 32, 3812, 38, 32, 11382, 32, 1061, 27623, 2447, 30, 2627, 30, 2627, 30, 2627, 30, 1088, 32, 2104, 32]}
{"line_number": 128, "line_type": "original", "code": "        this.maximalOrder = maximalOrder;", "entropy": 1.552734375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [3.02734375, 9.5, 0.004177093505859375, 2.556640625, 0.26953125, 0.350830078125, 0.2880859375, 0.6669921875, 0.0305938720703125, 0.0025463104248046875, 0.386962890625], "tokens": [351, 458, 32, 1449, 2977, 2871, 280, 1769, 2977, 2871, 45]}
{"line_number": 128, "line_type": "generated", "code": "\n            y[2] = computeObjectiveValue(x[2]);\n            if (Precision.equals(y[2], 0.0, 1)) {\n                // return the second endpoint if it is a perfect root.\n                return x[2", "entropy": 0.03485107421875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.289306640625, 0.87255859375, 0.0004024505615234375, 0.029815673828125, 0.0001176595687866211, 0.033782958984375, 0.027496337890625, 1.800060272216797e-05, 3.814697265625e-06, 0.000865936279296875, 0.0014333724975585938, 5.638599395751953e-05, 0.0014619827270507812, 0.00018024444580078125, 0.2320556640625, 0.05975341796875, 0.0018358230590820312, 0.00772857666015625, 4.863739013671875e-05, 0.0001074075698852539, 7.522106170654297e-05, 0.0015735626220703125, 5.245208740234375e-05, 0.00978851318359375, 7.641315460205078e-05, 0.0009427070617675781, 4.4226646423339844e-05, 0.0089111328125, 0.0002777576446533203, 0.0027141571044921875, 0.0207977294921875, 0.00493621826171875, 0.004001617431640625, 0.0011749267578125, 0.045623779296875, 0.0150909423828125, 0.00794219970703125, 0.004146575927734375, 0.054046630859375, 0.002353668212890625, 0.00995635986328125, 0.0006995201110839844, 0.00225067138671875, 0.0008754730224609375, 0.01085662841796875, 0.0006651878356933594, 0.0143890380859375, 0.0199127197265625, 0.00211334228515625, 0.0007214546203613281, 0.0014448165893554688, 0.004543304443359375], "tokens": [324, 533, 77, 36, 79, 280, 7596, 33312, 882, 26, 106, 77, 36, 1989, 324, 415, 308, 20398, 32, 3574, 26, 107, 77, 36, 614, 225, 34, 32, 34, 30, 225, 35, 490, 301, 400, 434, 442, 322, 3100, 6998, 415, 561, 438, 312, 17233, 3051, 32, 400, 442, 816, 77, 36]}
{"line_number": 129, "line_type": "original", "code": "        this.allowed = AllowedSolution.ANY_SIDE;", "entropy": 1.7939453125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [3.111328125, 8.90625, 0.029022216796875, 4.265625, 0.0169830322265625, 0.173828125, 9.381771087646484e-05, 0.00016438961029052734, 4.953125, 0.0022182464599609375, 0.00032520294189453125, 0.078369140625], "tokens": [351, 458, 32, 11327, 280, 38886, 13628, 32, 15205, 81, 25590, 45]}
{"line_number": 129, "line_type": "generated", "code": "\n            // check if the  endpoints bracket the root\n            if (y[0] * y[2] < 0) {\n                nbPoints        = 3;\n                signChangeIndex = 1;\n            } else {\n                // all points have", "entropy": 0.2763671875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.484375, 0.77001953125, 0.556640625, 0.7763671875, 0.219970703125, 2.4296875, 1.5302734375, 0.5693359375, 0.033599853515625, 0.004856109619140625, 0.02288818359375, 0.289306640625, 0.2086181640625, 0.1435546875, 2.110004425048828e-05, 0.345703125, 0.00031566619873046875, 0.01094818115234375, 0.00041103363037109375, 0.00037288665771484375, 0.0005402565002441406, 4.029273986816406e-05, 0.1552734375, 0.0002472400665283203, 7.224082946777344e-05, 0.07098388671875, 0.002956390380859375, 0.81640625, 0.67626953125, 3.0875205993652344e-05, 0.2841796875, 3.4809112548828125e-05, 0.0063629150390625, 0.05242919921875, 0.00015091896057128906, 0.005603790283203125, 0.0007433891296386719, 7.748603820800781e-06, 4.291534423828125e-06, 5.745887756347656e-05, 0.00989532470703125, 0.343994140625, 0.00021588802337646484, 0.145263671875, 0.001300811767578125, 0.0150604248046875, 0.1971435546875, 0.20654296875, 0.900390625, 1.2880859375, 0.77783203125, 0.01061248779296875], "tokens": [324, 434, 1505, 415, 322, 225, 17532, 33828, 322, 3051, 324, 415, 308, 107, 77, 34, 79, 319, 533, 77, 36, 79, 333, 225, 34, 27, 301, 400, 12939, 6834, 351, 280, 225, 37, 45, 400, 2596, 1791, 1284, 280, 225, 35, 45, 324, 320, 813, 301, 400, 434, 1169, 4981, 1159]}
{"line_number": 130, "line_type": "original", "code": "    }", "entropy": 3.359375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [5.0625, 1.658203125], "tokens": [264, 320]}
{"line_number": 130, "line_type": "generated", "code": "\n            }\n\n            if (y[1] * y[2] < 0) {\n\n                // the interval brackets the root\n                nbPoints        = 3;\n                signChangeIndex = 1;\n\n            } else {\n\n                // the endpoints do not", "entropy": 0.22705078125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [2.04296875, 0.143310546875, 0.423095703125, 1.365234375, 0.0239105224609375, 0.0240478515625, 4.7206878662109375e-05, 1.029296875, 0.00029015541076660156, 0.007160186767578125, 0.0005259513854980469, 0.00018405914306640625, 0.00024700164794921875, 8.094310760498047e-05, 0.167236328125, 0.00019061565399169922, 8.356571197509766e-05, 0.032623291015625, 0.0017881393432617188, 0.2890625, 0.0560302734375, 0.587890625, 2.41796875, 0.313720703125, 0.0869140625, 0.003490447998046875, 0.02020263671875, 0.0170440673828125, 5.0067901611328125e-06, 0.1778564453125, 5.364418029785156e-06, 0.01068115234375, 0.02618408203125, 6.210803985595703e-05, 0.002780914306640625, 0.00020229816436767578, 2.86102294921875e-06, 1.3113021850585938e-06, 4.3392181396484375e-05, 0.0038967132568359375, 0.0694580078125, 3.7670135498046875e-05, 0.0487060546875, 0.0003025531768798828, 0.0022602081298828125, 0.09393310546875, 0.0904541015625, 0.03106689453125, 0.2257080078125, 1.943359375, 0.0236053466796875, 0.0009679794311523438], "tokens": [324, 320, 1064, 415, 308, 107, 77, 35, 79, 319, 533, 77, 36, 79, 333, 225, 34, 27, 301, 2110, 434, 322, 7898, 30544, 322, 3051, 400, 12939, 6834, 351, 280, 225, 37, 45, 400, 2596, 1791, 1284, 280, 225, 35, 45, 1064, 320, 813, 301, 2110, 434, 322, 17532, 745, 646]}
{"line_number": 124, "line_type": "original", "code": "        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);", "entropy": 1.6923828125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [2.615234375, 8.5, 7.94140625, 1.18359375, 0.00354766845703125, 0.0731201171875, 0.173583984375, 0.0001703500747680664, 0.186279296875, 0.68798828125, 0.000789642333984375, 0.0013608932495117188, 0.630859375], "tokens": [351, 2599, 26, 9535, 26201, 30, 7976, 26201, 30, 667, 882, 26201, 293]}
{"line_number": 124, "line_type": "generated", "code": "\n        } else {\n\n            // search for a sign change\n            int previousSign = y[0] < 0? -1 : 1;\n            for (nbPoints = 3; nbPoints < maximalOrder; nbPoints++) {\n                final", "entropy": 0.294921875, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.98388671875, 0.003955841064453125, 0.022369384765625, 0.1591796875, 0.4619140625, 0.02105712890625, 1.19140625, 0.025543212890625, 0.2109375, 0.0226287841796875, 0.002918243408203125, 0.2325439453125, 2.21875, 2.703125, 0.088623046875, 0.204833984375, 0.5322265625, 5.5670738220214844e-05, 0.0916748046875, 0.01123809814453125, 0.438720703125, 0.004825592041015625, 0.00015652179718017578, 0.22119140625, 0.0100250244140625, 0.0005235671997070312, 0.003360748291015625, 0.259521484375, 0.0146942138671875, 0.0014362335205078125, 0.01361846923828125, 0.5849609375, 0.0006127357482910156, 0.9716796875, 1.800060272216797e-05, 0.0031757354736328125, 0.00145721435546875, 0.69580078125, 0.038970947265625, 0.0101318359375, 1.1920928955078125e-06, 0.5478515625, 0.15234375, 0.0001074075698852539, 0.0008397102355957031, 1.1220703125, 0.07122802734375, 3.4570693969726562e-06, 0.09375, 0.0025081634521484375, 0.1488037109375, 0.7314453125], "tokens": [291, 320, 813, 301, 1064, 434, 3233, 436, 312, 2596, 1539, 324, 629, 4552, 3388, 280, 533, 77, 34, 79, 333, 225, 34, 1018, 429, 35, 499, 225, 35, 45, 324, 436, 308, 1490, 6834, 280, 225, 37, 45, 12939, 6834, 333, 1769, 2977, 2871, 45, 12939, 6834, 1987, 301, 400, 1158]}
{"line_number": 125, "line_type": "original", "code": "        if (maximalOrder < 2) {", "entropy": 1.119140625, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [2.525390625, 1.9443359375, 0.1500244140625, 4.02734375, 0.04571533203125, 0.0064697265625, 2.2109375, 0.041717529296875, 1.0791015625, 0.028472900390625, 0.251708984375], "tokens": [351, 415, 308, 1449, 2977, 2871, 333, 225, 36, 27, 301]}
{"line_number": 125, "line_type": "generated", "code": "\n            // evaluate second endpoint\n            y[2] = computeObjectiveValue(x[2]);\n            if (Precision.equals(y[2], 0.0, 1)) {\n                // return the second endpoint if it is a perfect root.", "entropy": 0.1082763671875, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [1.498046875, 0.82275390625, 1.25, 0.7890625, 0.277099609375, 0.1708984375, 0.12481689453125, 0.0004799365997314453, 0.049835205078125, 0.0001951456069946289, 0.0251922607421875, 0.0163421630859375, 2.9206275939941406e-05, 1.4662742614746094e-05, 0.0006113052368164062, 0.005146026611328125, 7.605552673339844e-05, 0.0036907196044921875, 0.00029921531677246094, 0.2237548828125, 0.0599365234375, 0.00258636474609375, 0.00771331787109375, 5.2809715270996094e-05, 0.0001150369644165039, 7.49826431274414e-05, 0.002475738525390625, 9.584426879882812e-05, 0.014007568359375, 0.00011539459228515625, 0.0013599395751953125, 4.208087921142578e-05, 0.0106353759765625, 0.0002378225326538086, 0.0034503936767578125, 0.037994384765625, 0.004680633544921875, 0.003993988037109375, 0.0010280609130859375, 0.03546142578125, 0.01959228515625, 0.0251922607421875, 0.00937652587890625, 0.07012939453125, 0.0036106109619140625, 0.027252197265625, 0.0006451606750488281, 0.0019893646240234375, 0.0029239654541015625, 0.007625579833984375, 0.0006766319274902344, 0.0165252685546875], "tokens": [324, 434, 13396, 3100, 6998, 324, 533, 77, 36, 79, 280, 7596, 33312, 882, 26, 106, 77, 36, 1989, 324, 415, 308, 20398, 32, 3574, 26, 107, 77, 36, 614, 225, 34, 32, 34, 30, 225, 35, 490, 301, 400, 434, 442, 322, 3100, 6998, 415, 561, 438, 312, 17233, 3051, 32]}
{"line_number": 265, "line_type": "original", "code": "                        --end;", "entropy": 4.578125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [11.296875, 4.265625, 2.71875, 0.0281219482421875], "tokens": [6797, 769, 416, 45]}
{"line_number": 265, "line_type": "generated", "code": "\n\n            // update the bracketing interval\n            if (nextY < 0) {\n                // we have found a sign change, update the high bracket\n                xB = nextX;\n                yB = nextY;\n                agingB = 0;", "entropy": 0.3017578125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [0.568359375, 0.1513671875, 1.0478515625, 0.430419921875, 0.8505859375, 0.01788330078125, 0.1641845703125, 0.6953125, 0.64697265625, 0.06353759765625, 0.5087890625, 0.149169921875, 0.5556640625, 0.0780029296875, 0.0011653900146484375, 0.153076171875, 0.0027561187744140625, 0.0936279296875, 0.44384765625, 0.81298828125, 0.6142578125, 0.491943359375, 0.0906982421875, 1.1376953125, 0.01531219482421875, 0.31982421875, 1.49609375, 0.12646484375, 0.95751953125, 0.17626953125, 0.351806640625, 0.89111328125, 0.62158203125, 0.1995849609375, 0.09967041015625, 3.731250762939453e-05, 0.0005788803100585938, 0.041748046875, 0.06658935546875, 0.00038623809814453125, 0.0004131793975830078, 0.01381683349609375, 4.756450653076172e-05, 0.0004935264587402344, 0.2529296875, 0.1514892578125, 0.00014138221740722656, 0.0307464599609375, 0.016754150390625, 0.058807373046875, 0.019989013671875, 0.006526947021484375], "tokens": [1064, 434, 1974, 322, 33828, 299, 7898, 324, 415, 308, 1978, 75, 333, 225, 34, 27, 301, 400, 434, 996, 1159, 2431, 312, 2596, 1539, 30, 1974, 322, 3857, 33828, 400, 816, 52, 280, 2354, 74, 45, 400, 533, 52, 280, 2354, 75, 45, 400, 1894, 299, 52, 280, 225, 34, 45]}
{"line_number": 235, "line_type": "original", "code": "                targetY = -REDUCTION_FACTOR * yB;", "entropy": 1.5107421875, "is_bug_line": true, "sus_score": 0.24253562503633297, "per_token_entropy": [5.7578125, 5.390625, 0.023834228515625, 0.0244903564453125, 2.5859375, 1.6865234375, 4.470348358154297e-05, 4.267692565917969e-05, 0.00043201446533203125, 0.015380859375, 0.74853515625, 3.3984375, 0.0146942138671875], "tokens": [2071, 1760, 75, 280, 429, 7097, 35054, 81, 31100, 319, 533, 52, 45]}
{"line_number": 235, "line_type": "generated", "code": "\n            } else if (nextY < 0) {\n                // the guessed root is on the wrong side of the sign change point\n                // we need to update the bracketing interval\n                agingA = agingB = 0;\n                if", "entropy": 0.378662109375, "is_bug_line": true, "sus_score": 0.24253562503633297, "per_token_entropy": [0.2408447265625, 0.0017728805541992188, 0.2939453125, 0.9580078125, 0.136962890625, 0.267333984375, 0.0037746429443359375, 0.6123046875, 0.0236053466796875, 0.00023818016052246094, 0.2420654296875, 0.0008440017700195312, 0.349609375, 0.2415771484375, 1.328125, 0.0509033203125, 0.00020647048950195312, 0.04071044921875, 0.08856201171875, 0.85791015625, 0.0260467529296875, 0.64013671875, 0.00440216064453125, 0.232421875, 0.134765625, 0.481689453125, 0.004077911376953125, 0.86474609375, 0.7333984375, 0.759765625, 0.9482421875, 0.546875, 0.01422882080078125, 1.435546875, 0.1630859375, 1.2109375, 0.179931640625, 0.028350830078125, 0.63232421875, 1.5859375, 1.4901161193847656e-05, 0.7607421875, 0.223388671875, 0.779296875, 7.271766662597656e-05, 0.0579833984375, 0.65283203125, 0.050445556640625, 0.001972198486328125, 0.0003502368927001953, 0.1854248046875, 0.6025390625], "tokens": [324, 320, 813, 415, 308, 1978, 75, 333, 225, 34, 27, 301, 400, 434, 322, 37615, 1246, 3051, 438, 544, 322, 6643, 5209, 432, 322, 2596, 1539, 2260, 400, 434, 996, 1849, 372, 1974, 322, 33828, 299, 7898, 400, 1894, 299, 51, 280, 1894, 299, 52, 280, 225, 34, 45, 400, 415]}
{"line_number": 294, "line_type": "original", "code": "                nbPoints = end - start;", "entropy": 2.69140625, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [8.7734375, 7.48828125, 0.06182861328125, 0.525390625, 3.810546875, 0.2381591796875, 0.11163330078125, 0.51416015625], "tokens": [2071, 12939, 6834, 280, 943, 429, 1477, 45]}
{"line_number": 294, "line_type": "generated", "code": "\n        return Double.NaN;\n\n    }\n\n    /**\n     * Guess a root for a polynomial using inverse polynomial interpolation.\n     * <p>\n     * This method is a translation in Java of the corresponding\n     * <a href=\"http://ab-init", "entropy": 0.51318359375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.66162109375, 1.1806640625, 1.2734375, 0.0009593963623046875, 0.0005049705505371094, 0.00640106201171875, 0.1622314453125, 0.006938934326171875, 1.1025390625, 0.1492919921875, 0.51416015625, 8.130073547363281e-05, 1.2177734375, 4.363059997558594e-05, 0.2237548828125, 1.013671875, 1.40625, 0.9453125, 1.4736328125, 1.09765625, 1.30859375, 0.00885009765625, 0.053131103515625, 0.30517578125, 0.033538818359375, 0.004566192626953125, 1.486328125, 0.11602783203125, 0.00507354736328125, 0.057220458984375, 3.147125244140625e-05, 0.9306640625, 0.149658203125, 0.64697265625, 1.529296875, 2.380859375, 0.7958984375, 0.0726318359375, 0.0310211181640625, 0.093017578125, 1.8662109375, 0.7236328125, 8.64267349243164e-05, 0.158447265625, 0.01230621337890625, 0.008026123046875, 0.01617431640625, 0.25634765625, 0.00470733642578125, 1.19140625, 0.00030612945556640625, 0.0003323554992675781], "tokens": [291, 442, 6934, 32, 11126, 45, 446, 320, 446, 1022, 275, 319, 8085, 503, 312, 3051, 436, 312, 25137, 1471, 19385, 25137, 23334, 32, 275, 319, 333, 98, 48, 275, 319, 1348, 1411, 438, 312, 13178, 328, 4949, 432, 322, 8435, 275, 319, 333, 83, 976, 347, 525, 555, 360, 31, 1664]}
{"line_number": 295, "line_type": "original", "code": "                System.arraycopy(x, start, x, 0, nbPoints);", "entropy": 0.89208984375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [8.6796875, 3.650390625, 0.0025787353515625, 0.08209228515625, 0.00043129920959472656, 0.3056640625, 0.01348876953125, 1.134765625, 0.0059356689453125, 0.357421875, 0.04534912109375, 0.69482421875, 0.0011873245239257812, 0.00022482872009277344, 0.164794921875, 0.00036597251892089844, 0.026031494140625], "tokens": [2071, 1171, 32, 40863, 26, 106, 30, 1477, 30, 816, 30, 225, 34, 30, 12939, 6834, 293]}
{"line_number": 295, "line_type": "generated", "code": "\n        // no convergence: return the best point found so far\n        return x[signChangeIndex];\n\n    }", "entropy": 0.6357421875, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.389404296875, 0.650390625, 3.84765625, 1.3046875, 1.2509765625, 1.7099609375, 0.37158203125, 0.2481689453125, 0.61962890625, 0.89794921875, 0.341552734375, 0.00029778480529785156, 0.12091064453125, 0.375, 0.154052734375, 0.10064697265625, 1.130859375, 8.249282836914062e-05, 0.0004949569702148438, 0.183837890625, 0.275146484375, 0.0091094970703125], "tokens": [291, 434, 1289, 47454, 44, 442, 322, 5273, 2260, 2431, 1259, 9019, 291, 442, 816, 77, 1333, 1791, 1284, 970, 446, 320]}
{"line_number": 296, "line_type": "original", "code": "                System.arraycopy(y, start, y, 0, nbPoints);", "entropy": 1.048828125, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [8.421875, 3.59765625, 0.00931549072265625, 0.1024169921875, 0.001232147216796875, 2.970703125, 0.0172576904296875, 1.6591796875, 0.0130615234375, 0.455078125, 0.0067291259765625, 0.02789306640625, 0.00021541118621826172, 0.00021207332611083984, 0.52392578125, 0.0006570816040039062, 0.01751708984375], "tokens": [2071, 1171, 32, 40863, 26, 107, 30, 1477, 30, 533, 30, 225, 34, 30, 12939, 6834, 293]}
{"line_number": 296, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [], "tokens": []}
{"line_number": 297, "line_type": "original", "code": "                signChangeIndex -= start;", "entropy": 3.50390625, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [9.0078125, 7.23046875, 0.061492919921875, 0.0208740234375, 4.671875, 3.470703125, 0.07373046875], "tokens": [2071, 2596, 1791, 1284, 5912, 1477, 45]}
{"line_number": 297, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [], "tokens": []}
{"line_number": 260, "line_type": "original", "code": "                    if (signChangeIndex - start >= end - signChangeIndex) {", "entropy": 1.4501953125, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [5.08203125, 3.2265625, 0.0616455078125, 0.76220703125, 0.0006651878356933594, 0.0021457672119140625, 8.09375, 1.7880859375, 1.7421875, 2.177734375, 0.01534271240234375, 0.13525390625, 3.2901763916015625e-05, 4.184246063232422e-05, 0.1044921875, 0.01386260986328125], "tokens": [4696, 415, 308, 1333, 1791, 1284, 429, 1477, 2377, 943, 429, 2596, 1791, 1284, 27, 301]}
{"line_number": 260, "line_type": "generated", "code": "\n                } else {\n                    // we drop the highest point, we don't have to shift the arrays\n                    System.arraycopy(x, 0, x, 1, nbPoints);\n                    System.arraycopy(y, 0, y, 1", "entropy": 0.09735107421875, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.147216796875, 0.0006947517395019531, 0.01311492919921875, 0.091064453125, 0.040557861328125, 0.016265869140625, 0.0188751220703125, 0.005840301513671875, 0.00170135498046875, 0.0183258056640625, 0.00400543212890625, 0.382568359375, 0.22607421875, 1.560546875, 0.00037407875061035156, 0.293212890625, 0.0013036727905273438, 0.1146240234375, 0.3505859375, 0.040496826171875, 0.2178955078125, 0.146484375, 5.8770179748535156e-05, 4.5299530029296875e-06, 2.3603439331054688e-05, 0.0006999969482421875, 0.00019431114196777344, 1.31640625, 0.03204345703125, 0.0005140304565429688, 0.0065155029296875, 6.973743438720703e-05, 0.00029850006103515625, 0.00028061866760253906, 0.00014269351959228516, 0.0013179779052734375, 3.135204315185547e-05, 0.00904083251953125, 0.0005855560302734375, 0.0004916191101074219, 6.4373016357421875e-06, 2.276897430419922e-05, 1.1920928955078125e-06, 0.0009026527404785156, 5.125999450683594e-06, 1.049041748046875e-05, 0.00016200542449951172, 1.3470649719238281e-05, 0.0005340576171875, 4.76837158203125e-06, 4.887580871582031e-06, 9.167194366455078e-05], "tokens": [400, 320, 813, 301, 528, 434, 996, 6278, 322, 18399, 2260, 30, 996, 2800, 1330, 1159, 372, 5733, 322, 12051, 528, 1171, 32, 40863, 26, 106, 30, 225, 34, 30, 816, 30, 225, 35, 30, 12939, 6834, 293, 528, 1171, 32, 40863, 26, 107, 30, 225, 34, 30, 533, 30, 225, 35]}
{"line_number": 269, "line_type": "original", "code": "                    nextX = Double.NaN;", "entropy": 2.908203125, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [9.78125, 6.2890625, 2.111328125, 0.2406005859375, 4.6015625, 0.0028209686279296875, 0.2137451171875, 0.018096923828125], "tokens": [4696, 2354, 74, 280, 6934, 32, 11126, 45]}
{"line_number": 269, "line_type": "generated", "code": "\n            y[signChangeIndex] = nextY;\n\n            // update the bracketing interval\n            agingA = agingB;\n            agingB = 0;\n\n            // update the bracketing interval\n            if (nextY > 0) {", "entropy": 0.37451171875, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [1.1240234375, 0.282470703125, 0.0011844635009765625, 0.0002989768981933594, 8.52346420288086e-05, 5.257129669189453e-05, 0.0011529922485351562, 0.0077667236328125, 0.0117034912109375, 8.106231689453125e-05, 0.005405426025390625, 0.395263671875, 0.273193359375, 0.921875, 0.59716796875, 0.8359375, 0.0162506103515625, 0.188232421875, 0.74072265625, 1.9208984375, 0.0006036758422851562, 0.10400390625, 0.319091796875, 0.479736328125, 0.0028324127197265625, 0.0638427734375, 0.1317138671875, 0.10919189453125, 0.52294921875, 0.00011539459228515625, 0.002376556396484375, 0.0491943359375, 0.62255859375, 0.050323486328125, 0.0302581787109375, 0.93896484375, 0.31884765625, 1.3076171875, 0.17138671875, 1.6572265625, 0.022552490234375, 0.7724609375, 1.650390625, 0.595703125, 0.0611572265625, 0.331298828125, 0.228759765625, 1.453125, 0.061187744140625, 0.0023174285888671875, 0.07525634765625, 0.003265380859375], "tokens": [324, 533, 77, 1333, 1791, 1284, 79, 280, 2354, 75, 45, 1064, 434, 1974, 322, 33828, 299, 7898, 324, 1894, 299, 51, 280, 1894, 299, 52, 45, 324, 1894, 299, 52, 280, 225, 34, 45, 1064, 434, 1974, 322, 33828, 299, 7898, 324, 415, 308, 1978, 75, 848, 225, 34, 27, 301]}
{"line_number": 290, "line_type": "original", "code": "            if ((nbPoints > 2) && (end - start != nbPoints)) {", "entropy": 1.6484375, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [5.59375, 4.2109375, 2.75, 2.046875, 0.018951416015625, 1.64453125, 0.2340087890625, 0.82177734375, 0.025146484375, 0.028594970703125, 0.2021484375, 5.88671875, 0.27197265625, 0.2364501953125, 5.90234375, 0.69677734375, 0.00032329559326171875, 0.73388671875, 0.019744873046875], "tokens": [1468, 415, 1833, 1490, 6834, 848, 225, 36, 27, 962, 308, 416, 429, 1477, 863, 12939, 6834, 490, 301]}
{"line_number": 290, "line_type": "generated", "code": "\n            }\n\n        }", "entropy": 0.478271484375, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.56298828125, 0.0033206939697265625, 1.3251953125, 0.0218658447265625], "tokens": [324, 320, 584, 320]}
{"line_number": 299, "line_type": "original", "code": "            } else  if (nbPoints == x.length) {", "entropy": 2.552734375, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [8.4375, 6.078125, 2.015625, 6.671875, 2.234375, 0.21875, 3.078125, 0.03643798828125, 0.409912109375, 5.9453125, 0.05078125, 0.00634765625, 0.416015625, 0.1522216796875], "tokens": [1468, 320, 813, 225, 415, 308, 1490, 6834, 610, 816, 32, 1322, 27, 301]}
{"line_number": 299, "line_type": "generated", "code": "\n     * </p>\n     * @param targetY target value for the y coordinate\n     * @param x values for the x coordinate\n     * @param y values for the y coordinate\n     * @param start index of the first element to consider\n     * @", "entropy": 0.352783203125, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.386962890625, 0.033599853515625, 1.447265625, 0.02325439453125, 0.05877685546875, 0.0176544189453125, 0.03387451171875, 0.1795654296875, 0.004917144775390625, 0.078369140625, 0.212890625, 0.06298828125, 0.826171875, 1.2822265625, 0.6103515625, 1.900390625, 0.9716796875, 0.50439453125, 8.225440979003906e-05, 0.003143310546875, 0.0013179779052734375, 0.25830078125, 3.482421875, 1.0400390625, 0.0570068359375, 0.10028076171875, 0.292724609375, 0.33544921875, 9.059906005859375e-05, 0.0002663135528564453, 0.0014429092407226562, 0.00731658935546875, 0.0153656005859375, 0.0025539398193359375, 0.00044989585876464844, 0.0078125, 0.0031871795654296875, 0.03375244140625, 5.7220458984375e-05, 0.0032176971435546875, 0.01284027099609375, 0.2340087890625, 0.54443359375, 0.221435546875, 0.173583984375, 0.03338623046875, 1.451171875, 0.120361328125, 1.005859375, 0.257080078125, 2.086162567138672e-05, 0.0009546279907226562], "tokens": [275, 319, 576, 98, 48, 275, 319, 477, 753, 1760, 75, 1760, 786, 436, 322, 533, 12651, 275, 319, 477, 753, 816, 2078, 436, 322, 816, 12651, 275, 319, 477, 753, 533, 2078, 436, 322, 533, 12651, 275, 319, 477, 753, 1477, 1650, 432, 322, 1932, 1994, 372, 6295, 275, 319, 477]}
{"line_number": 316, "line_type": "original", "code": "            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);", "entropy": 0.98681640625, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [5.3359375, 7.78125, 0.0012722015380859375, 0.460693359375, 0.0034580230712890625, 0.4365234375, 0.01332855224609375, 10.046875, 0.0029888153076171875, 0.01922607421875, 0.5537109375, 0.44384765625, 0.06787109375, 0.2196044921875, 2.5272369384765625e-05, 1.33514404296875e-05, 0.04473876953125, 0.00548553466796875, 0.0194091796875, 0.0006427764892578125, 1.01953125, 0.0022029876708984375, 0.026214599609375, 0.04296875, 7.867813110351562e-06, 5.125999450683594e-06, 0.091796875], "tokens": [1468, 1171, 32, 40863, 26, 106, 30, 2596, 1791, 1284, 30, 816, 30, 2596, 1791, 1284, 474, 225, 35, 30, 12939, 6834, 429, 2596, 1791, 1284, 293]}
{"line_number": 316, "line_type": "generated", "code": "\n            x[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);\n        }\n\n        // evaluate Q at targetY\n        double delta = y[end - 1", "entropy": 0.2449951171875, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.08624267578125, 1.412109375, 0.043701171875, 0.01116180419921875, 0.036285400390625, 0.186279296875, 1.060546875, 0.5185546875, 8.535385131835938e-05, 0.0032444000244140625, 0.07537841796875, 0.0003368854522705078, 0.0004634857177734375, 0.0007157325744628906, 0.09490966796875, 0.027435302734375, 0.00017559528350830078, 0.0005536079406738281, 0.0013895034790039062, 0.01140594482421875, 0.00304412841796875, 0.07080078125, 7.343292236328125e-05, 0.00014126300811767578, 0.0007390975952148438, 5.996227264404297e-05, 7.152557373046875e-06, 4.756450653076172e-05, 0.0004706382751464844, 0.0007939338684082031, 0.00017893314361572266, 0.0003058910369873047, 0.0125579833984375, 0.34130859375, 0.00048661231994628906, 0.5087890625, 0.07037353515625, 0.673828125, 0.4130859375, 0.55126953125, 0.77294921875, 0.1619873046875, 0.381103515625, 0.337158203125, 2.220703125, 0.3125, 1.5908203125, 0.0006642341613769531, 0.72998046875, 0.0021076202392578125, 0.0014400482177734375, 0.01218414306640625], "tokens": [324, 816, 77, 91, 79, 280, 308, 107, 77, 91, 474, 225, 35, 79, 429, 533, 77, 91, 1130, 517, 308, 106, 77, 91, 474, 225, 35, 79, 429, 816, 77, 91, 1989, 291, 320, 584, 434, 13396, 1910, 821, 1760, 75, 291, 2064, 7715, 280, 533, 77, 416, 429, 225, 35]}
{"line_number": 317, "line_type": "original", "code": "            x[signChangeIndex] = nextX;", "entropy": 2.873046875, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [3.98828125, 1.33203125, 0.029083251953125, 13.5078125, 0.0023059844970703125, 0.0091705322265625, 1.845703125, 0.49267578125, 10.2421875, 0.02154541015625, 0.14501953125], "tokens": [1468, 816, 77, 1333, 1791, 1284, 79, 280, 2354, 74, 45]}
{"line_number": 317, "line_type": "generated", "code": "\n            x[i] = (y[i + 1] * (x[i + 1] - x[i]) - y[i] * (x[i] - x[i - delta])) / (y[i +", "entropy": 0.1556396484375, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.14453125, 1.2021484375, 0.041351318359375, 0.21826171875, 0.07147216796875, 0.3251953125, 1.2744140625, 0.37353515625, 0.00014293193817138672, 0.01511383056640625, 0.04888916015625, 0.008880615234375, 0.0001952648162841797, 0.0013980865478515625, 0.533203125, 0.98974609375, 0.2286376953125, 0.00200653076171875, 0.039642333984375, 0.148193359375, 0.04901123046875, 0.0022869110107421875, 0.0005922317504882812, 0.0304107666015625, 0.01036834716796875, 0.000698089599609375, 0.00756072998046875, 0.0364990234375, 0.00875091552734375, 0.049896240234375, 5.984306335449219e-05, 0.0009517669677734375, 0.0084991455078125, 0.0182342529296875, 0.043243408203125, 0.0006580352783203125, 5.030632019042969e-05, 0.00035119056701660156, 0.024322509765625, 0.0031490325927734375, 0.0010662078857421875, 0.004364013671875, 0.0004284381866455078, 0.00812530517578125, 1.1376953125, 0.08782958984375, 0.2135009765625, 0.6533203125, 0.01155853271484375, 5.1140785217285156e-05, 0.00021660327911376953, 0.01447296142578125], "tokens": [324, 816, 77, 91, 79, 280, 308, 107, 77, 91, 474, 225, 35, 79, 319, 308, 106, 77, 91, 474, 225, 35, 79, 429, 816, 77, 91, 1130, 429, 533, 77, 91, 79, 319, 308, 106, 77, 91, 79, 429, 816, 77, 91, 429, 7715, 5259, 517, 308, 107, 77, 91, 474]}
{"line_number": 318, "line_type": "original", "code": "            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);", "entropy": 1.1123046875, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [5.4921875, 9.390625, 0.0015201568603515625, 0.947265625, 0.0037250518798828125, 2.041015625, 0.0031986236572265625, 9.4375, 0.003223419189453125, 0.01390838623046875, 0.7431640625, 0.344970703125, 0.044403076171875, 0.1419677734375, 2.8252601623535156e-05, 4.458427429199219e-05, 0.1846923828125, 0.1075439453125, 0.01457977294921875, 0.0010509490966796875, 0.93115234375, 0.0030269622802734375, 0.06256103515625, 0.0286407470703125, 1.895427703857422e-05, 0.00016498565673828125, 0.09588623046875], "tokens": [1468, 1171, 32, 40863, 26, 107, 30, 2596, 1791, 1284, 30, 533, 30, 2596, 1791, 1284, 474, 225, 35, 30, 12939, 6834, 429, 2596, 1791, 1284, 293]}
{"line_number": 318, "line_type": "generated", "code": "\n                x[j] = (x[j] - x[i]) / (y[j] - y[i]);\n            }\n        }\n\n        // evaluate Q at targetY\n        double result = 0;\n        for (int i = start", "entropy": 0.22314453125, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.054901123046875, 0.8154296875, 0.00174713134765625, 0.004817962646484375, 0.459228515625, 0.466064453125, 0.49755859375, 0.2412109375, 5.984306335449219e-05, 0.00727081298828125, 0.018890380859375, 0.027679443359375, 0.0009889602661132812, 0.00012302398681640625, 1.3134765625, 0.0043182373046875, 0.026031494140625, 0.00411224365234375, 0.00948333740234375, 3.4928321838378906e-05, 0.0234832763671875, 0.095947265625, 0.0006494522094726562, 0.002162933349609375, 0.00037550926208496094, 0.0310211181640625, 0.646484375, 0.338623046875, 0.00015854835510253906, 0.131591796875, 0.0002830028533935547, 0.2158203125, 0.0758056640625, 0.392333984375, 0.371826171875, 0.475830078125, 0.6103515625, 0.1427001953125, 0.331298828125, 0.12371826171875, 1.5029296875, 0.01383209228515625, 1.19140625, 0.0034313201904296875, 0.1336669921875, 0.08221435546875, 0.1351318359375, 0.0004897117614746094, 0.0005917549133300781, 0.211669921875, 0.000186920166015625, 0.36572265625], "tokens": [400, 816, 77, 92, 79, 280, 308, 106, 77, 92, 79, 429, 816, 77, 91, 1130, 517, 308, 107, 77, 92, 79, 429, 533, 77, 91, 1989, 324, 320, 291, 320, 584, 434, 13396, 1910, 821, 1760, 75, 291, 2064, 1056, 280, 225, 34, 45, 291, 436, 308, 410, 595, 280, 1477]}
{"line_number": 319, "line_type": "original", "code": "            y[signChangeIndex] = nextY;", "entropy": 2.3359375, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [4.19921875, 4.5546875, 0.0004603862762451172, 13.53125, 0.007366180419921875, 0.0212249755859375, 0.2069091796875, 0.1009521484375, 2.91796875, 0.124267578125, 0.01971435546875], "tokens": [1468, 533, 77, 1333, 1791, 1284, 79, 280, 2354, 75, 45]}
{"line_number": 319, "line_type": "generated", "code": "\n            }\n        }\n\n        // evaluate Q(targetY) by Horner's scheme\n        double result = x[end - 1];\n        for (int i = end - 2; i >= start; --i) {\n            result = x[", "entropy": 0.179443359375, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.1981201171875, 0.0005807876586914062, 0.09271240234375, 0.0004031658172607422, 0.139892578125, 0.07012939453125, 0.411376953125, 0.368408203125, 1.6025390625, 0.548828125, 0.0174560546875, 0.02227783203125, 0.818359375, 0.20166015625, 1.6689300537109375e-06, 0.84375, 0.4287109375, 0.169921875, 0.13720703125, 0.97998046875, 0.0090179443359375, 0.43701171875, 0.0005249977111816406, 0.0286865234375, 0.0572509765625, 0.47705078125, 0.001007080078125, 0.0250701904296875, 0.119384765625, 0.0307464599609375, 0.0005502700805664062, 0.000392913818359375, 0.253662109375, 0.00015270709991455078, 0.034637451171875, 0.0027408599853515625, 0.0005974769592285156, 0.05413818359375, 0.0031299591064453125, 0.01337432861328125, 0.021484375, 0.00496673583984375, 0.0025119781494140625, 0.0185546875, 0.0002617835998535156, 0.0005669593811035156, 0.0026187896728515625, 0.2109375, 0.006908416748046875, 0.0260467529296875, 0.43505859375, 2.002716064453125e-05], "tokens": [324, 320, 291, 320, 584, 434, 13396, 1910, 26, 1977, 75, 27, 810, 44519, 1384, 1182, 12841, 291, 2064, 1056, 280, 816, 77, 416, 429, 225, 35, 970, 291, 436, 308, 410, 595, 280, 943, 429, 225, 36, 45, 595, 2377, 1477, 45, 769, 91, 27, 301, 324, 1056, 280, 816, 77]}
