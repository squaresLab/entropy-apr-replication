{"line_number": 339, "line_type": "original", "code": "                         coefficients[i] = 0;", "entropy": 3.123046875, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [11.15625, 10.6328125, 1.302734375, 0.2763671875, 0.04339599609375, 0.296875, 3.373046875, 0.66259765625, 0.362060546875], "tokens": [8240, 26370, 77, 91, 79, 280, 225, 34, 45]}
{"line_number": 339, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the RHS offset of the table", "entropy": 0.200927734375, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [1.5361328125, 0.57080078125, 0.06439208984375, 0.00010764598846435547, 0.1275634765625, 0.018096923828125, 0.35546875, 0.004993438720703125, 0.001979827880859375, 0.005153656005859375, 0.00039696693420410156, 0.030242919921875, 0.0126953125, 0.0013179779052734375, 0.01502227783203125, 0.001003265380859375, 0.071044921875, 0.002666473388671875, 0.0023136138916015625, 0.0028171539306640625, 0.00011396408081054688, 0.01206207275390625, 0.00673675537109375, 0.04693603515625, 0.04052734375, 0.048309326171875, 0.0003705024719238281, 0.0014190673828125, 0.00039005279541015625, 0.0003147125244140625, 0.0012578964233398438, 0.03436279296875, 0.0019855499267578125, 0.004642486572265625, 1.6689300537109375e-06, 4.8279762268066406e-05, 0.00012183189392089844, 2.9802322387695312e-06, 0.004184722900390625, 0.037811279296875, 0.00018477439880371094, 0.18701171875, 0.01259613037109375, 0.126953125, 5.8531761169433594e-05, 0.438720703125, 0.6259765625, 3.80078125, 0.11273193359375, 1.9541015625, 0.046173095703125, 0.07342529296875], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 40892, 3401, 432, 322, 1858]}
{"line_number": 172, "line_type": "original", "code": "                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess", "entropy": 2.275390625, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [9.6328125, 9.6796875, 0.85888671875, 3.15625, 0.05322265625, 1.748046875, 1.669921875, 0.004451751708984375, 0.0031261444091796875, 0.074462890625, 0.2322998046875, 0.1063232421875, 0.003490447998046875, 0.12152099609375, 0.01309967041015625, 6.57421875, 0.040802001953125, 0.05853271484375, 1.9033203125, 9.5625], "tokens": [6797, 5045, 77, 643, 1674, 371, 31185, 3818, 3457, 346, 474, 28039, 1881, 13419, 280, 429, 35, 45, 434, 35800]}
{"line_number": 172, "line_type": "generated", "code": "\n     * @return number of objective functions\n     */\n    private int getNumObjectiveFunctions() {\n        return (f.getCoefficients().getDimension() > 0)? 1 : 0;\n    }\n\n    /**\n     * Get the offset of the", "entropy": 0.187744140625, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.5263671875, 0.045867919921875, 0.1126708984375, 0.0024509429931640625, 0.1407470703125, 0.004543304443359375, 0.13427734375, 0.01479339599609375, 0.2265625, 0.01461029052734375, 0.02716064453125, 1.5966796875, 0.005016326904296875, 0.0001380443572998047, 0.0003314018249511719, 2.562999725341797e-05, 0.0014905929565429688, 0.0009531974792480469, 0.1217041015625, 0.260009765625, 0.705078125, 0.60888671875, 0.1673583984375, 0.18408203125, 0.207275390625, 0.0004661083221435547, 0.016571044921875, 0.051910400390625, 0.0161285400390625, 0.0039825439453125, 1.0732421875, 0.0185546875, 0.478759765625, 0.051116943359375, 0.00203704833984375, 0.0177154541015625, 0.1085205078125, 0.004547119140625, 0.0016317367553710938, 0.0222625732421875, 0.003276824951171875, 0.103515625, 0.00054168701171875, 0.1485595703125, 0.02630615234375, 0.1551513671875, 5.888938903808594e-05, 0.1580810546875, 0.076171875, 1.236328125, 0.80029296875, 0.07989501953125], "tokens": [275, 319, 477, 601, 1451, 432, 25110, 4442, 275, 569, 284, 945, 629, 44929, 33312, 10905, 346, 301, 291, 442, 308, 88, 32, 371, 8973, 101, 922, 371, 9883, 346, 848, 225, 34, 27, 1018, 225, 35, 499, 225, 34, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 3401, 432, 322]}
{"line_number": 279, "line_type": "original", "code": "                    return null;", "entropy": 3.70703125, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [8.078125, 3.779296875, 2.955078125, 0.01172637939453125], "tokens": [4696, 442, 744, 45]}
{"line_number": 279, "line_type": "generated", "code": "\n        return new RealPointValuePair(coefficients, mostNegative);\n    }\n\n    /**\n     * Get the number of columns in the tableau.\n     * @return the number of columns in the tableau\n     */\n    public int getWidth() {\n        return", "entropy": 0.28564453125, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [0.373779296875, 0.63720703125, 0.03076171875, 0.06695556640625, 0.000255584716796875, 3.266334533691406e-05, 0.01097869873046875, 1.404296875, 0.003688812255859375, 0.01434326171875, 0.157470703125, 0.000274658203125, 0.05047607421875, 0.03326416015625, 0.0014314651489257812, 0.3271484375, 0.0599365234375, 0.044189453125, 0.0002090930938720703, 1.029296875, 0.1627197265625, 2.326171875, 0.005222320556640625, 3.046875, 0.448486328125, 0.2391357421875, 0.689453125, 0.01287841796875, 0.496826171875, 0.08154296875, 0.00604248046875, 0.1180419921875, 0.001316070556640625, 0.444580078125, 0.03997802734375, 0.0011529922485351562, 0.0120086669921875, 0.06890869140625, 0.0081634521484375, 0.00421142578125, 0.0001112222671508789, 0.372802734375, 0.00948333740234375, 0.0031108856201171875, 1.7880859375, 0.0209503173828125, 0.0885009765625, 0.040069580078125, 0.0026226043701171875, 0.0007700920104980469, 0.039520263671875, 0.03125], "tokens": [291, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 4630, 17152, 293, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 6090, 328, 322, 1858, 4452, 32, 275, 319, 477, 601, 322, 1451, 432, 6090, 328, 322, 1858, 4452, 275, 569, 284, 562, 629, 622, 2611, 346, 301, 291, 442]}
{"line_number": 325, "line_type": "original", "code": "        double[] coefficients = new double[getOriginalNumDecisionVariables()];", "entropy": 1.7880859375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.078125, 2.955078125, 6.02734375, 3.994140625, 0.1341552734375, 2.568359375, 0.01284027099609375, 0.1116943359375, 4.24609375, 0.407958984375, 0.017547607421875, 0.0256805419921875, 0.0006079673767089844, 0.457763671875], "tokens": [351, 2064, 1178, 26370, 280, 537, 2064, 77, 371, 11296, 2567, 24453, 10165, 22086]}
{"line_number": 325, "line_type": "generated", "code": "\n            tableau.setEntry(minuendRow, j,\n                            tableau.getEntry(minuendRow, j) -\n                            multiple * tableau.getEntry(subtrahendRow, j));\n        }\n    }\n\n    /**\n     *", "entropy": 0.07843017578125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.31103515625, 0.201171875, 3.3736228942871094e-05, 0.0011968612670898438, 0.03558349609375, 0.00011491775512695312, 0.0020503997802734375, 0.111328125, 1.2993812561035156e-05, 9.5367431640625e-07, 1.0728836059570312e-06, 0.0004153251647949219, 0.006061553955078125, 0.0003743171691894531, 2.109375, 0.050537109375, 9.5367431640625e-07, 0.0002989768981933594, 0.00010025501251220703, 0.00019276142120361328, 0.00341033935546875, 1.9311904907226562e-05, 6.198883056640625e-06, 5.245208740234375e-06, 0.00014889240264892578, 0.0023517608642578125, 0.00020313262939453125, 0.0283966064453125, 0.640625, 0.055755615234375, 0.002208709716796875, 0.03765869140625, 2.0265579223632812e-06, 0.0001684427261352539, 7.772445678710938e-05, 0.00022125244140625, 0.0012636184692382812, 1.1920928955078125e-06, 1.1920928955078125e-07, 1.5139579772949219e-05, 8.71419906616211e-05, 0.00023031234741210938, 0.000965118408203125, 0.009368896484375, 0.187744140625, 0.00045371055603027344, 0.050811767578125, 0.0005445480346679688, 0.1805419921875, 0.0242767333984375, 0.02252197265625, 8.416175842285156e-05], "tokens": [324, 1858, 4452, 32, 470, 2711, 26, 887, 103, 416, 2352, 30, 594, 30, 1014, 1858, 4452, 32, 48895, 26, 887, 103, 416, 2352, 30, 594, 27, 429, 1014, 4609, 319, 1858, 4452, 32, 48895, 26, 1113, 359, 2371, 416, 2352, 30, 594, 876, 291, 320, 284, 320, 446, 1022, 275, 319]}
{"line_number": 326, "line_type": "original", "code": "        Integer basicRow =", "entropy": 6.48828125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [5.2265625, 13.7578125, 12.59375, 0.69580078125, 0.1761474609375], "tokens": [351, 4401, 6550, 2352, 280]}
{"line_number": 326, "line_type": "generated", "code": "\n                        multiple * tableau.getEntry(subtrahendRow, j));\n        }\n    }\n\n    /**\n     * Adds a multiple of one row to another.\n     * <p>\n     * After application of this operation, the following will hold:\n    ", "entropy": 0.10223388671875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [2.69921875, 0.1329345703125, 0.0058441162109375, 0.0531005859375, 5.841255187988281e-06, 0.0005230903625488281, 0.00014710426330566406, 0.0005049705505371094, 0.0015888214111328125, 2.0265579223632812e-06, 2.384185791015625e-07, 8.344650268554688e-06, 2.6226043701171875e-06, 0.0004210472106933594, 0.0011186599731445312, 0.01236724853515625, 0.045135498046875, 8.869171142578125e-05, 0.037017822265625, 0.00080108642578125, 0.198486328125, 0.03436279296875, 0.02532958984375, 5.7697296142578125e-05, 1.7451171875, 0.1981201171875, 0.0005636215209960938, 0.0061492919921875, 0.00609588623046875, 0.0016050338745117188, 0.0176544189453125, 0.0012149810791015625, 0.0310211181640625, 0.00426483154296875, 8.249282836914062e-05, 0.025604248046875, 0.002529144287109375, 0.00020492076873779297, 0.001590728759765625, 8.58306884765625e-06, 0.007076263427734375, 0.007495880126953125, 0.0002067089080810547, 0.0004794597625732422, 0.0015935897827148438, 0.002788543701171875, 0.0002548694610595703, 0.0005650520324707031, 0.0009889602661132812, 0.00034880638122558594, 0.0016279220581054688, 0.0008549690246582031], "tokens": [715, 4609, 319, 1858, 4452, 32, 48895, 26, 1113, 359, 2371, 416, 2352, 30, 594, 876, 291, 320, 284, 320, 446, 1022, 275, 319, 15450, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275]}
{"line_number": 328, "line_type": "original", "code": "        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());", "entropy": 1.0283203125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [3.115234375, 3.939453125, 4.70703125, 0.08270263671875, 0.054656982421875, 7.84375, 2.025390625, 0.81591796875, 0.0168914794921875, 0.050994873046875, 0.95849609375, 0.00992584228515625, 0.08746337890625, 0.59033203125, 0.067138671875, 0.0015401840209960938, 0.0305023193359375, 0.00010156631469726562, 0.0011501312255859375, 0.11968994140625, 0.00409698486328125, 9.655952453613281e-06, 0.0006799697875976562, 0.1529541015625], "tokens": [351, 2064, 4630, 17152, 280, 6550, 2352, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 328, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Adds a multiple of one row to another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   summandRow = summandRow + multiple * summandRow\n     * </", "entropy": 0.1297607421875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.322021484375, 0.2802734375, 0.218994140625, 0.0287017822265625, 0.0277252197265625, 7.11679458618164e-05, 1.87109375, 0.206787109375, 0.0005826950073242188, 0.006748199462890625, 0.00679779052734375, 0.0017042160034179688, 0.0196075439453125, 0.0014820098876953125, 0.033477783203125, 0.004634857177734375, 6.413459777832031e-05, 0.02850341796875, 0.002655029296875, 0.0002409219741821289, 0.0017271041870117188, 3.0517578125e-05, 0.0076904296875, 0.00762176513671875, 0.00021469593048095703, 0.0004897117614746094, 0.0014276504516601562, 0.0029277801513671875, 0.0002620220184326172, 0.0005059242248535156, 0.0009560585021972656, 0.0003437995910644531, 0.0015516281127929688, 0.0008530616760253906, 1.4781951904296875e-05, 0.04156494140625, 0.475830078125, 0.459228515625, 0.00962066650390625, 0.05108642578125, 0.09625244140625, 0.001384735107421875, 0.004100799560546875, 0.0256805419921875, 0.0017518997192382812, 0.003543853759765625, 0.81640625, 0.87451171875, 0.7744140625, 0.0137481689453125, 0.00011754035949707031, 0.0062255859375], "tokens": [284, 320, 446, 1022, 275, 319, 15450, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 3632, 995, 2352, 280, 3632, 995, 2352, 474, 4609, 319, 3632, 995, 2352, 275, 319, 576]}
{"line_number": 329, "line_type": "original", "code": "        for (int i = 0; i < coefficients.length; i++) {", "entropy": 0.8310546875, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [5.07421875, 2.732421875, 0.00960540771484375, 0.035064697265625, 0.7333984375, 0.00984954833984375, 0.578125, 0.076171875, 0.0148162841796875, 0.002864837646484375, 0.0149688720703125, 5.359375, 0.07366943359375, 0.00884246826171875, 0.08428955078125, 0.1092529296875, 0.01015472412109375, 0.036651611328125], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 26370, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 329, "line_type": "generated", "code": "\n    /**\n     * Subtracts a multiple of one row from another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   minuendRow = minuendRow - multiple * subtrahendRow", "entropy": 0.1005859375, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [0.90771484375, 0.1778564453125, 0.043121337890625, 2.372264862060547e-05, 3.337890625, 0.11663818359375, 0.1580810546875, 0.005374908447265625, 0.0023212432861328125, 0.015625, 0.172119140625, 0.004749298095703125, 0.01214599609375, 0.12249755859375, 0.01146697998046875, 0.0002205371856689453, 0.0106048583984375, 0.0016870498657226562, 0.0002856254577636719, 0.0012340545654296875, 1.2636184692382812e-05, 0.01485443115234375, 0.000957489013671875, 0.00012040138244628906, 0.00014078617095947266, 0.0001747608184814453, 0.00042510032653808594, 0.0003008842468261719, 0.0003178119659423828, 0.0002872943878173828, 0.00017642974853515625, 0.000934600830078125, 0.0007295608520507812, 0.00011265277862548828, 0.0156402587890625, 0.043121337890625, 0.00014925003051757812, 9.548664093017578e-05, 0.00811004638671875, 0.00972747802734375, 0.003101348876953125, 0.00011610984802246094, 9.822845458984375e-05, 1.1324882507324219e-05, 0.0117645263671875, 0.0013599395751953125, 0.0007510185241699219, 0.00722503662109375, 4.9948692321777344e-05, 5.841255187988281e-06, 3.504753112792969e-05, 0.00868988037109375], "tokens": [284, 1022, 275, 319, 48588, 101, 312, 4609, 432, 1591, 2698, 645, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 1847, 103, 416, 2352, 280, 1847, 103, 416, 2352, 429, 4609, 319, 1361, 359, 2371, 416, 2352]}
{"line_number": 330, "line_type": "original", "code": "            basicRow = getBasicRow(getNumObjectiveFunctions() + i);", "entropy": 1.4248046875, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [7.65625, 9.21875, 0.252197265625, 0.119140625, 0.763671875, 0.052734375, 0.005584716796875, 0.025726318359375, 1.45703125, 0.05511474609375, 0.0006127357482910156, 0.259765625, 0.0296478271484375, 1.4423828125, 0.044189453125], "tokens": [1468, 6550, 2352, 280, 622, 7099, 2352, 26, 15207, 33312, 10905, 346, 474, 595, 293]}
{"line_number": 330, "line_type": "generated", "code": "\n    /**\n     * Returns the basic variable for the specified variable.\n     * <p>\n     * If the specified variable is not basic, this method returns\n     * {@code null}.\n     * </p>\n     * @param column the variable to check\n    ", "entropy": 0.55029296875, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [0.53564453125, 0.178466796875, 0.045684814453125, 3.886222839355469e-05, 2.80078125, 0.311767578125, 2.353515625, 0.599609375, 1.091796875, 0.36865234375, 0.734375, 2.041015625, 0.57470703125, 0.07794189453125, 0.00148773193359375, 1.126953125, 0.016143798828125, 0.00504302978515625, 0.02313232421875, 6.318092346191406e-05, 1.779296875, 0.66015625, 0.67333984375, 0.1031494140625, 0.231689453125, 0.60791015625, 0.72607421875, 0.2012939453125, 2.154296875, 0.1390380859375, 0.81201171875, 0.87255859375, 0.0012578964233398438, 0.255859375, 0.42431640625, 0.06622314453125, 0.07989501953125, 0.40087890625, 0.01122283935546875, 0.045745849609375, 3.600120544433594e-05, 0.006458282470703125, 0.00823974609375, 0.0003809928894042969, 0.2413330078125, 0.004398345947265625, 1.0185546875, 0.990234375, 0.393310546875, 1.3095703125, 1.4033203125, 0.10595703125], "tokens": [284, 1022, 275, 319, 3759, 322, 6550, 2677, 436, 322, 3191, 2677, 32, 275, 319, 333, 98, 48, 275, 319, 1670, 322, 3191, 2677, 438, 646, 6550, 30, 458, 1411, 3217, 275, 319, 3088, 687, 744, 4009, 275, 319, 576, 98, 48, 275, 319, 477, 753, 2623, 322, 2677, 372, 1505, 275]}
{"line_number": 333, "line_type": "original", "code": "                coefficients[i] =", "entropy": 3.322265625, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [6.4453125, 10.34375, 2.65625, 0.246826171875, 0.10687255859375, 0.13720703125], "tokens": [2071, 26370, 77, 91, 79, 280]}
{"line_number": 333, "line_type": "generated", "code": "\n     */\n    protected int getWidth() {\n        return tableau.getColumnDimension() - 1;\n    }\n\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected int getHeight()", "entropy": 0.10546875, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [0.71142578125, 0.07037353515625, 0.0265045166015625, 0.385009765625, 0.0255126953125, 0.0017290115356445312, 0.009002685546875, 0.003002166748046875, 0.0034656524658203125, 0.1839599609375, 0.03936767578125, 0.32666015625, 3.814697265625e-06, 0.006259918212890625, 0.02777099609375, 0.0007987022399902344, 0.6484375, 0.6357421875, 0.420654296875, 0.0222625732421875, 0.08514404296875, 0.319580078125, 0.0004634857177734375, 0.0921630859375, 0.007476806640625, 0.0106353759765625, 1.4781951904296875e-05, 0.051055908203125, 0.006412506103515625, 0.1591796875, 0.0051116943359375, 0.0030345916748046875, 0.004070281982421875, 0.00016129016876220703, 0.031982421875, 0.01448822021484375, 1.811981201171875e-05, 0.0117950439453125, 0.00039505958557128906, 0.07293701171875, 0.003459930419921875, 0.0030670166015625, 0.002655029296875, 7.18832015991211e-05, 1.009765625, 0.00885772705078125, 0.0178375244140625, 0.0147552490234375, 0.0012102127075195312, 0.00018298625946044922, 6.878376007080078e-05, 0.0002593994140625], "tokens": [275, 569, 284, 2522, 629, 622, 2611, 346, 301, 291, 442, 1858, 4452, 32, 19239, 9883, 346, 429, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 629, 622, 3024, 346]}
{"line_number": 336, "line_type": "original", "code": "            if (basicRow != null) {", "entropy": 2.14453125, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [6.14453125, 1.79296875, 0.06951904296875, 5.3203125, 3.482421875, 2.107421875, 0.0438232421875, 0.2607421875, 0.07354736328125], "tokens": [1468, 415, 308, 6390, 2352, 863, 744, 27, 301]}
{"line_number": 336, "line_type": "generated", "code": "\n    /**\n     * Get the number of original decision variables.\n     * @return number of original decision variables\n     */\n    protected final int getOriginalNumDecisionVariables() {\n        return originalNumDecisionVariables;\n    }\n\n    /**\n     * Get the number of original", "entropy": 0.23046875, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [0.326171875, 1.30859375, 0.0384521484375, 0.0003287792205810547, 0.20458984375, 0.0140838623046875, 1.76953125, 0.00414276123046875, 2.23828125, 0.264892578125, 0.00807952880859375, 0.41357421875, 0.033172607421875, 0.00258636474609375, 0.12359619140625, 0.0007576942443847656, 0.36962890625, 0.0017242431640625, 0.041015625, 0.01027679443359375, 0.001644134521484375, 0.036529541015625, 0.01169586181640625, 0.0248565673828125, 0.25390625, 0.290771484375, 0.0010290145874023438, 0.012359619140625, 0.0019779205322265625, 0.0017805099487304688, 0.0012369155883789062, 0.00030541419982910156, 0.005313873291015625, 0.006595611572265625, 0.051605224609375, 0.0113372802734375, 1.056640625, 0.020294189453125, 0.0682373046875, 0.010040283203125, 0.0223388671875, 0.5673828125, 0.00782012939453125, 0.41650390625, 0.018768310546875, 0.0127716064453125, 3.5643577575683594e-05, 0.208740234375, 0.036590576171875, 0.421630859375, 0.002819061279296875, 1.2275390625], "tokens": [284, 1022, 275, 319, 1390, 322, 1451, 432, 4707, 17200, 4886, 32, 275, 319, 477, 601, 1451, 432, 4707, 17200, 4886, 275, 569, 284, 2522, 1158, 629, 622, 11296, 2567, 24453, 10165, 346, 301, 291, 442, 4707, 2567, 24453, 10165, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 4707]}
{"line_number": 337, "line_type": "original", "code": "                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {", "entropy": 1.2978515625, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [8.859375, 2.482421875, 0.01715087890625, 0.05438232421875, 0.8095703125, 0.01593017578125, 3.30078125, 0.1456298828125, 0.0003724098205566406, 0.50341796875, 0.199951171875, 0.07073974609375, 2.578125, 1.4248046875, 0.00017130374908447266, 0.09820556640625, 0.0267486572265625, 7.70703125, 0.166748046875, 0.0190887451171875, 0.020751953125, 0.041534423828125], "tokens": [2071, 436, 308, 410, 594, 280, 44929, 33312, 10905, 473, 594, 333, 44929, 33312, 10905, 346, 474, 595, 45, 594, 1987, 301]}
{"line_number": 337, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }", "entropy": 0.038238525390625, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [0.51806640625, 0.12548828125, 0.03515625, 2.6702880859375e-05, 0.17578125, 0.01395416259765625, 0.350341796875, 0.00441741943359375, 0.002429962158203125, 0.004276275634765625, 0.00022137165069580078, 0.0286712646484375, 0.0025005340576171875, 4.0411949157714844e-05, 0.00909423828125, 0.0005116462707519531, 0.077880859375, 0.0022220611572265625, 0.0018596649169921875, 0.0023555755615234375, 6.866455078125e-05, 0.005939483642578125, 0.0013217926025390625, 0.0215911865234375, 0.03167724609375, 0.04119873046875, 0.00032901763916015625, 0.0002772808074951172, 0.00028014183044433594, 0.0005407333374023438, 0.0014934539794921875, 0.0173492431640625, 0.0015630722045898438, 0.004791259765625, 8.344650268554688e-07, 4.2438507080078125e-05, 9.584426879882812e-05, 4.291534423828125e-06, 0.00682830810546875, 0.07684326171875, 0.0009870529174804688], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320]}
{"line_number": 338, "line_type": "original", "code": "                    if (tableau.getEntry(basicRow, j) == 1) {", "entropy": 1.5654296875, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [10.8828125, 3.927734375, 0.1312255859375, 2.78125, 0.0015726089477539062, 0.2259521484375, 0.1915283203125, 0.00296783447265625, 3.755859375, 0.245849609375, 0.027587890625, 1.0615234375, 0.05340576171875, 1.71484375, 0.06939697265625, 2.365234375, 0.5888671875, 0.148681640625], "tokens": [4696, 415, 308, 1274, 4452, 32, 48895, 26, 6390, 2352, 30, 594, 27, 610, 225, 35, 27, 301]}
{"line_number": 338, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get an entry in the tableau", "entropy": 0.133056640625, "is_bug_line": true, "sus_score": 0.3333333333333333, "per_token_entropy": [0.7255859375, 0.1312255859375, 0.036163330078125, 4.2319297790527344e-05, 0.25341796875, 0.0185699462890625, 0.444580078125, 0.004711151123046875, 0.002109527587890625, 0.0070648193359375, 0.00041222572326660156, 0.034027099609375, 0.003078460693359375, 0.0005788803100585938, 0.010894775390625, 0.0008087158203125, 0.08331298828125, 0.0025653839111328125, 0.0028228759765625, 0.00266265869140625, 7.95125961303711e-05, 0.0059356689453125, 0.002544403076171875, 0.032745361328125, 0.04254150390625, 0.063232421875, 0.00040030479431152344, 0.0007910728454589844, 0.000537872314453125, 0.0007109642028808594, 0.0024471282958984375, 0.024505615234375, 0.00205230712890625, 0.0074005126953125, 5.960464477539062e-07, 8.404254913330078e-05, 0.00016617774963378906, 4.172325134277344e-06, 0.006610870361328125, 0.12066650390625, 0.00043582916259765625, 0.90966796875, 0.017425537109375, 0.00875091552734375, 1.5735626220703125e-05, 0.45458984375, 1.837890625, 0.0732421875, 1.4619140625, 0.01076507568359375, 0.06854248046875, 0.0023193359375], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 600, 3414, 328, 322, 1858, 4452]}
{"line_number": 344, "line_type": "original", "code": "        return new RealPointValuePair(coefficients, f.getValue(coefficients));", "entropy": 2.109375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [5.73046875, 2.197265625, 7.30859375, 4.1328125, 1.0537109375, 0.1259765625, 0.12176513671875, 3.24609375, 0.004459381103515625, 0.1011962890625, 4.82421875, 3.8125, 1.615234375, 1.4033203125, 0.08135986328125, 0.0003237724304199219, 0.09320068359375], "tokens": [351, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 296, 32, 6682, 26, 34036, 101, 876]}
{"line_number": 344, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the entry at the specified row and column.\n     * @param row row index\n     * @param column column index\n     * @return the entry at (row, column)\n     */\n    protected final double getEntry(final", "entropy": 0.204833984375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.183349609375, 0.0399169921875, 0.188232421875, 0.0185546875, 0.01561737060546875, 3.075599670410156e-05, 0.50830078125, 0.56591796875, 1.8349609375, 1.2119140625, 0.50146484375, 0.29150390625, 0.88330078125, 0.03271484375, 0.003536224365234375, 0.2138671875, 0.0088653564453125, 0.00012433528900146484, 0.1162109375, 0.002269744873046875, 0.0980224609375, 0.444580078125, 0.1595458984375, 0.11865234375, 3.2186508178710938e-06, 8.96453857421875e-05, 0.0021724700927734375, 0.091064453125, 0.018768310546875, 0.0015611648559570312, 0.0054473876953125, 0.0010051727294921875, 0.0010986328125, 0.00041794776916503906, 1.16015625, 0.441162109375, 0.595703125, 0.465576171875, 0.01153564453125, 0.0028247833251953125, 0.04071044921875, 0.005977630615234375, 0.047760009765625, 0.05010986328125, 0.004547119140625, 0.0306549072265625, 0.207763671875, 0.002582550048828125, 0.0001150369644165039, 6.306171417236328e-05, 0.00052642822265625, 0.0200653076171875], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 3414, 821, 322, 3191, 2698, 461, 2623, 32, 275, 319, 477, 753, 2698, 2698, 1650, 275, 319, 477, 753, 2623, 2623, 1650, 275, 319, 477, 601, 322, 3414, 821, 308, 643, 30, 2623, 27, 275, 569, 284, 2522, 1158, 2064, 622, 2711, 26, 3220]}
{"line_number": 459, "line_type": "original", "code": "        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;", "entropy": 2.3984375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.10546875, 3.66015625, 9.1484375, 0.01407623291015625, 0.017791748046875, 0.0020809173583984375, 6.8203125, 5.6875, 0.6044921875, 0.006855010986328125, 4.8671875, 3.017578125, 0.24609375, 0.0006046295166015625, 1.720703125, 0.0572509765625, 0.00160980224609375, 1.203125], "tokens": [351, 442, 21432, 705, 3910, 17152, 1018, 1929, 24453, 10165, 499, 1929, 24453, 10165, 429, 225, 35, 45]}
{"line_number": 459, "line_type": "generated", "code": "\n\n      } catch (ClassCastException cce) {\n        return false;\n      }\n\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int hashCode() {\n        return Objects.hash(f, constraints, epsilon, tableau,\n                            restrictToNon", "entropy": 0.29052734375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.763671875, 0.00689697265625, 0.09161376953125, 0.04150390625, 0.08160400390625, 0.000331878662109375, 0.87451171875, 0.00839996337890625, 0.0031948089599609375, 0.0009503364562988281, 1.9453125, 0.062164306640625, 0.0010986328125, 0.0001283884048461914, 0.0126495361328125, 0.0003407001495361328, 0.609375, 0.0006589889526367188, 0.11065673828125, 0.03472900390625, 0.1732177734375, 0.0002551078796386719, 0.0041656494140625, 0.0003840923309326172, 0.0102996826171875, 0.01308441162109375, 0.00031948089599609375, 0.002071380615234375, 0.0036563873291015625, 0.07330322265625, 0.0008368492126464844, 0.0039520263671875, 0.0012140274047851562, 0.736328125, 0.55126953125, 2.17578125, 0.0010700225830078125, 0.0159454345703125, 0.0018396377563476562, 1.3671875, 0.01163482666015625, 0.35595703125, 0.0162811279296875, 2.005859375, 0.0299224853515625, 1.435546875, 3.802776336669922e-05, 0.1453857421875, 0.81201171875, 0.5126953125, 0.00011658668518066406, 0.0011720657348632812], "tokens": [1687, 320, 2368, 308, 1339, 36932, 281, 369, 27, 301, 291, 442, 901, 45, 397, 320, 446, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 629, 17772, 346, 301, 291, 442, 14596, 32, 2888, 26, 88, 30, 13383, 30, 23477, 30, 1858, 4452, 30, 1014, 21432, 705, 3910]}
{"line_number": 293, "line_type": "original", "code": "        int width = getWidth() - numArtificialVariables - 1;", "entropy": 1.34375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [3.474609375, 6.42578125, 4.2109375, 0.0134735107421875, 0.52685546875, 0.0726318359375, 0.9599609375, 0.025787353515625, 3.748046875, 0.0272369384765625, 0.0002522468566894531, 0.00411224365234375, 1.890625, 0.0687255859375, 0.03192138671875, 0.018890380859375], "tokens": [351, 629, 1861, 280, 622, 2611, 346, 429, 1929, 5271, 31251, 10165, 429, 225, 35, 45]}
{"line_number": 293, "line_type": "generated", "code": "\n        }\n        return new RealPointValuePair(coefficients, mostNegative);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toString() {\n        final StringBuilder builder = new StringBuilder();\n        builder.append(\"Tableau [\\n", "entropy": 0.357177734375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.255859375, 0.6767578125, 0.277587890625, 0.460693359375, 0.036956787109375, 0.134521484375, 0.0003352165222167969, 6.80685043334961e-05, 0.0122222900390625, 0.6640625, 0.0059356689453125, 0.0240478515625, 0.60986328125, 0.00012791156768798828, 0.050689697265625, 0.049285888671875, 0.0027370452880859375, 0.50390625, 0.0985107421875, 0.052001953125, 3.1113624572753906e-05, 3.234375, 0.1851806640625, 0.00466156005859375, 0.0120697021484375, 0.2352294921875, 0.0086822509765625, 0.6650390625, 0.00273895263671875, 0.023956298828125, 0.11505126953125, 1.9580078125, 0.0079193115234375, 0.01180267333984375, 0.002613067626953125, 0.09674072265625, 1.8076171875, 0.34375, 1.0791015625, 0.004276275634765625, 0.01568603515625, 0.0004374980926513672, 0.10504150390625, 0.09283447265625, 0.4091796875, 0.0048675537109375, 0.0014886856079101562, 0.55078125, 1.5009765625, 0.0081024169921875, 2.162109375, 0.017547607421875], "tokens": [291, 320, 291, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 4630, 17152, 293, 284, 320, 446, 1022, 275, 319, 3088, 18446, 111, 275, 569, 284, 477, 1788, 284, 562, 892, 11345, 346, 301, 291, 1158, 9706, 4906, 280, 537, 9706, 473, 291, 4906, 32, 1689, 440, 1599, 4452, 22613, 96]}
{"line_number": 294, "line_type": "original", "code": "        int height = getHeight() - 1;", "entropy": 1.8408203125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [4.14453125, 4.8671875, 7.3671875, 0.0144805908203125, 1.0908203125, 0.16259765625, 1.9130859375, 0.06146240234375, 0.55419921875, 0.0091705322265625, 0.059173583984375], "tokens": [351, 629, 2384, 280, 622, 3024, 346, 429, 225, 35, 45]}
{"line_number": 294, "line_type": "generated", "code": "\n        return new RealPointValuePair(new ArrayRealVector(coefficients), mostNegative);\n    }\n\n    /**\n     * Solve the phase 1 problem using the simplex algorithm.\n     * @return the number of iterations performed\n     * @throws MathUserException", "entropy": 0.52294921875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.176513671875, 0.4619140625, 0.044891357421875, 0.1300048828125, 0.0006508827209472656, 0.0001125335693359375, 0.0186614990234375, 1.1171875, 0.06329345703125, 0.007099151611328125, 0.002216339111328125, 0.007701873779296875, 0.0322265625, 0.0001863241195678711, 0.5146484375, 0.90185546875, 0.00037860870361328125, 0.0245513916015625, 0.056182861328125, 0.0023937225341796875, 0.4599609375, 0.09918212890625, 0.05877685546875, 3.8504600524902344e-05, 2.6171875, 0.233154296875, 2.521484375, 0.2020263671875, 0.09515380859375, 0.64892578125, 2.52734375, 1.8134765625, 0.7421875, 4.029273986816406e-05, 0.8193359375, 0.1453857421875, 0.08087158203125, 0.162841796875, 0.77685546875, 0.379638671875, 1.1435546875, 2.732421875, 0.005031585693359375, 0.40478515625, 1.1396484375, 0.343017578125, 0.826171875, 0.050689697265625, 0.08221435546875, 1.8505859375, 0.64501953125, 0.036651611328125], "tokens": [291, 442, 537, 11443, 1943, 14782, 26, 890, 2629, 6877, 2863, 26, 34036, 101, 471, 4630, 17152, 293, 284, 320, 446, 1022, 275, 319, 47005, 322, 11225, 225, 35, 3708, 1471, 322, 7396, 1909, 8218, 32, 275, 319, 477, 601, 322, 1451, 432, 17576, 13555, 275, 319, 477, 5117, 4175, 1240, 984]}
{"line_number": 295, "line_type": "original", "code": "        double[][] matrix = new double[height][width];", "entropy": 1.6474609375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [3.90625, 4.14453125, 5.109375, 2.44140625, 0.176025390625, 0.3212890625, 0.00432586669921875, 0.0096893310546875, 3.37109375, 0.10748291015625, 0.0875244140625, 0.08465576171875], "tokens": [351, 2064, 11336, 5045, 280, 537, 2064, 77, 2273, 1674, 1644, 970]}
{"line_number": 295, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Solve the problem.\n     * @return true if the solution is optimal\n     * @throws MathUserException if the problem is infeasible or unbounded\n     */\n    public boolean solve() {\n        initialize();\n        return solvePhase", "entropy": 0.55419921875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.218017578125, 0.126708984375, 0.509765625, 0.0858154296875, 0.061798095703125, 5.6743621826171875e-05, 2.59765625, 0.2666015625, 2.0390625, 0.6494140625, 0.0836181640625, 0.2225341796875, 0.70361328125, 0.373779296875, 1.490234375, 0.06658935546875, 1.021484375, 1.41796875, 0.60888671875, 0.4990234375, 0.498291015625, 1.24609375, 0.11669921875, 0.08245849609375, 1.818359375, 0.27783203125, 0.0318603515625, 0.08819580078125, 0.6650390625, 0.62939453125, 0.2259521484375, 1.6552734375, 0.0003085136413574219, 0.0027561187744140625, 0.7060546875, 0.03875732421875, 8.344650268554688e-05, 0.07257080078125, 0.179931640625, 0.0335693359375, 0.583984375, 0.03765869140625, 0.0018243789672851562, 0.0020198822021484375, 0.36279296875, 0.197509765625, 2.2265625, 0.033447265625, 0.25244140625, 1.5380859375, 1.2646484375, 0.90283203125], "tokens": [284, 320, 446, 1022, 275, 319, 47005, 322, 3708, 32, 275, 319, 477, 601, 861, 415, 322, 5295, 438, 24824, 275, 319, 477, 5117, 4175, 1240, 984, 415, 322, 3708, 438, 328, 1225, 38294, 556, 707, 28959, 275, 569, 284, 562, 1905, 10932, 346, 301, 291, 7379, 473, 291, 442, 10932, 12230]}
{"line_number": 296, "line_type": "original", "code": "        for (int i = 0; i < height; i++) {", "entropy": 0.83544921875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [4.765625, 2.5625, 0.01214599609375, 0.04888916015625, 0.4853515625, 0.00391387939453125, 0.249267578125, 0.0308380126953125, 0.01522064208984375, 0.0030307769775390625, 0.009185791015625, 4.88671875, 0.2301025390625, 0.03631591796875, 0.00516510009765625, 0.0248260498046875], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 2384, 45, 595, 1987, 301]}
{"line_number": 296, "line_type": "generated", "code": "\n    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair get", "entropy": 0.11529541015625, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [1.0478515625, 0.168701171875, 0.073974609375, 7.545948028564453e-05, 1.201171875, 0.1494140625, 1.9052734375, 0.473388671875, 0.34765625, 0.0225982666015625, 0.001003265380859375, 0.0867919921875, 0.0015249252319335938, 0.0007829666137695312, 0.002719879150390625, 9.143352508544922e-05, 0.060546875, 0.0008630752563476562, 0.0038852691650390625, 0.006317138671875, 0.028228759765625, 0.0137786865234375, 0.0008788108825683594, 0.0005373954772949219, 0.0010900497436523438, 0.0027942657470703125, 0.0009632110595703125, 0.0005769729614257812, 0.00031304359436035156, 0.0013742446899414062, 0.00524139404296875, 0.0001595020294189453, 0.002910614013671875, 0.0014791488647460938, 0.0004837512969970703, 0.008270263671875, 1.5854835510253906e-05, 0.002704620361328125, 0.0094146728515625, 0.0005483627319335938, 0.0179595947265625, 0.0531005859375, 0.037994384765625, 0.00310516357421875, 0.009124755859375, 0.022735595703125, 0.0177154541015625, 0.06585693359375, 0.0966796875, 0.01947021484375, 0.0012407302856445312, 0.0144805908203125], "tokens": [284, 1022, 275, 319, 1390, 322, 1550, 5295, 32, 275, 319, 333, 98, 48, 275, 319, 3088, 1204, 588, 19596, 111, 1395, 526, 3823, 1932, 436, 458, 372, 526, 322, 24824, 5295, 32, 275, 319, 576, 98, 48, 275, 319, 477, 601, 1550, 5295, 275, 569, 284, 2522, 11443, 1943, 14782, 622]}
{"line_number": 297, "line_type": "original", "code": "            for (int j = 0; j < width - 1; j++) {", "entropy": 1.0126953125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.1953125, 2.822265625, 0.0149993896484375, 0.063232421875, 1.505859375, 0.005008697509765625, 1.6533203125, 0.03253173828125, 0.0202178955078125, 0.0108642578125, 0.02191162109375, 3.92578125, 2.53515625, 0.30029296875, 0.0343017578125, 0.02117919921875, 0.024871826171875, 0.0075836181640625, 0.03662109375], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 1861, 429, 225, 35, 45, 594, 1987, 301]}
{"line_number": 297, "line_type": "generated", "code": "\n    /**\n     * Get the value of the objective function at the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return value of the", "entropy": 0.2109375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.9140625, 0.337890625, 0.09600830078125, 8.058547973632812e-05, 1.2646484375, 0.1492919921875, 2.51953125, 0.1953125, 0.2193603515625, 0.55712890625, 0.048919677734375, 0.78759765625, 0.1912841796875, 1.3720703125, 0.2034912109375, 0.0833740234375, 0.0133056640625, 0.0008921623229980469, 0.383544921875, 0.0018262863159179688, 0.002223968505859375, 0.004489898681640625, 0.00067138671875, 0.211669921875, 0.0005207061767578125, 0.0010385513305664062, 0.01137542724609375, 0.02313232421875, 0.05023193359375, 0.005828857421875, 0.0007724761962890625, 0.0065155029296875, 0.02374267578125, 0.011810302734375, 0.005779266357421875, 0.005634307861328125, 0.0167999267578125, 0.014251708984375, 0.007434844970703125, 0.007663726806640625, 0.0030002593994140625, 0.0009608268737792969, 0.0166473388671875, 5.9723854064941406e-05, 0.0007123947143554688, 0.00313568115234375, 0.0014514923095703125, 0.0390625, 0.00811767578125, 1.0947265625, 0.0027217864990234375, 0.04583740234375], "tokens": [284, 1022, 275, 319, 1390, 322, 786, 432, 322, 25110, 667, 821, 322, 1550, 5295, 32, 275, 319, 333, 98, 48, 275, 319, 3088, 1204, 588, 19596, 111, 1395, 526, 3823, 1932, 436, 458, 372, 526, 322, 24824, 5295, 32, 275, 319, 576, 98, 48, 275, 319, 477, 601, 786, 432, 322]}
{"line_number": 298, "line_type": "original", "code": "                matrix[i][j] = getEntry(i + 1, j + 1);", "entropy": 1.0517578125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [7.19140625, 6.84375, 0.87060546875, 1.2060546875, 0.1715087890625, 0.9248046875, 0.139892578125, 0.1265869140625, 1.4892578125, 0.058380126953125, 0.00832366943359375, 0.09271240234375, 1.044921875, 0.1102294921875, 0.0019140243530273438, 0.005634307861328125, 0.497314453125, 0.9755859375, 0.2357177734375, 0.011688232421875, 0.06591796875], "tokens": [2071, 5045, 77, 91, 1674, 92, 79, 280, 622, 2711, 26, 91, 474, 225, 35, 30, 594, 474, 225, 35, 293]}
{"line_number": 298, "line_type": "generated", "code": "\n     * Get the number of basic variables.\n     * @return the number of basic variables\n     */\n    private int getNumBasicVariables() {\n        return getNumObjectiveFunctions() + getOriginalNumDecisionVariables() -\n               getNumArtificialVariables();\n    }\n\n    /**", "entropy": 0.36474609375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [1.40234375, 0.51123046875, 1.705078125, 0.16748046875, 2.703125, 0.00629425048828125, 2.234375, 0.359375, 0.642578125, 0.17724609375, 0.004673004150390625, 0.21728515625, 0.006763458251953125, 0.2266845703125, 0.01305389404296875, 0.0017299652099609375, 0.012603759765625, 0.007305145263671875, 0.28564453125, 0.0264892578125, 0.039520263671875, 1.025390625, 0.02191162109375, 0.32861328125, 0.0574951171875, 0.034271240234375, 0.0025653839111328125, 0.0037593841552734375, 0.060943603515625, 0.69482421875, 1.36328125, 0.55322265625, 0.0005741119384765625, 0.004932403564453125, 0.0121307373046875, 0.381591796875, 0.0280609130859375, 0.0007200241088867188, 0.0019292831420898438, 5.0187110900878906e-05, 0.1259765625, 0.055938720703125, 1.5634765625, 1.10546875, 0.361572265625, 0.0005435943603515625, 0.006641387939453125, 0.07122802734375, 0.033905029296875, 0.00039696693420410156, 0.25830078125, 0.055572509765625], "tokens": [275, 319, 1390, 322, 1451, 432, 6550, 4886, 32, 275, 319, 477, 601, 322, 1451, 432, 6550, 4886, 275, 569, 284, 945, 629, 44929, 7099, 10165, 346, 301, 291, 442, 44929, 33312, 10905, 346, 474, 622, 11296, 2567, 24453, 10165, 346, 429, 3083, 44929, 5271, 31251, 10165, 473, 284, 320, 446, 1022]}
{"line_number": 300, "line_type": "original", "code": "            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());", "entropy": 1.5283203125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [5.46875, 5.2265625, 1.12109375, 3.5859375, 0.59033203125, 8.421875, 0.798828125, 0.07513427734375, 0.017730712890625, 0.06622314453125, 1.5283203125, 4.06640625, 0.281982421875, 0.0027294158935546875, 0.09033203125, 1.7236328125, 0.05511474609375, 0.0009012222290039062, 0.0012559890747070312, 1.6943359375, 1.0595703125, 7.796287536621094e-05, 0.004734039306640625, 0.80078125], "tokens": [1468, 5045, 77, 91, 1674, 1644, 429, 225, 35, 79, 280, 622, 2711, 26, 91, 474, 225, 35, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 300, "line_type": "generated", "code": "\n     * </p>\n     * @param multiple multiple to subtract\n     * @param row row to subtract from\n     * @param rowMultiple row multiple\n     */\n    protected void subtractRow(final double multiple, final int row,\n                              final double rowMultiple)", "entropy": 0.26513671875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.7158203125, 0.028533935546875, 0.822265625, 0.004756927490234375, 0.015838623046875, 0.035797119140625, 0.0012350082397460938, 0.1402587890625, 0.0005869865417480469, 1.7568359375, 1.21484375, 0.7109375, 0.39013671875, 0.1436767578125, 7.867813110351562e-05, 0.0005021095275878906, 9.34600830078125e-05, 1.1025390625, 0.66455078125, 0.0426025390625, 0.0799560546875, 0.1461181640625, 0.018829345703125, 0.001911163330078125, 0.0006556510925292969, 0.0009794235229492188, 1.0546875, 0.465576171875, 0.78369140625, 0.3837890625, 0.38525390625, 0.1448974609375, 0.0164947509765625, 0.80615234375, 0.0162353515625, 0.0226898193359375, 0.07220458984375, 0.08746337890625, 0.0606689453125, 0.045654296875, 0.0011758804321289062, 5.1856040954589844e-05, 0.58984375, 0.0236358642578125, 0.002056121826171875, 0.0009975433349609375, 0.77880859375, 0.004825592041015625, 0.0016117095947265625, 0.0015726089477539062, 4.5180320739746094e-05, 0.0006670951843261719], "tokens": [275, 319, 576, 98, 48, 275, 319, 477, 753, 4609, 4609, 372, 27799, 275, 319, 477, 753, 2698, 2698, 372, 27799, 645, 275, 319, 477, 753, 2698, 11726, 2698, 4609, 275, 569, 284, 2522, 763, 27799, 2352, 26, 3220, 2064, 4609, 30, 1158, 629, 2698, 30, 4985, 1158, 2064, 2698, 11726, 27]}
