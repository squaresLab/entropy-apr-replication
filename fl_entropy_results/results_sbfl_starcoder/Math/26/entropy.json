{"line_number": 182, "line_type": "original", "code": "            throw new FractionConversionException(value, a0, 1l);", "entropy": 1.61328125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [4.0859375, 6.71875, 0.01300811767578125, 0.05401611328125, 0.02288818359375, 0.0009336471557617188, 0.052459716796875, 0.0335693359375, 0.03363037109375, 5.171875, 0.31591796875, 0.197998046875, 2.71484375, 0.10589599609375, 5.40234375, 0.880859375], "tokens": [1468, 1422, 537, 40823, 14350, 984, 26, 853, 30, 312, 34, 30, 225, 35, 94, 293]}
{"line_number": 182, "line_type": "generated", "code": "\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;", "entropy": 0.08209228515625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.5234375, 0.1068115234375, 0.0004100799560546875, 0.0024356842041015625, 5.4836273193359375e-06, 0.0023899078369140625, 0.0152435302734375, 0.00020074844360351562, 0.00115966796875, 0.023773193359375, 7.343292236328125e-05, 0.0006232261657714844, 0.16259765625, 0.0012559890747070312, 0.053253173828125, 0.01348876953125, 0.2230224609375, 0.51513671875, 0.0010328292846679688, 0.0323486328125, 1.5854835510253906e-05, 0.0011339187622070312, 0.39306640625, 0.0035419464111328125, 0.0078125, 0.2083740234375, 0.00616455078125, 0.0005240440368652344], "tokens": [324, 458, 32, 29805, 9693, 280, 308, 410, 27, 2678, 36, 45, 291, 320, 813, 301, 324, 458, 32, 1516, 11290, 280, 308, 410, 27, 298, 35, 45]}
{"line_number": 210, "line_type": "original", "code": "                throw new FractionConversionException(value, p2, q2);", "entropy": 1.2841796875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.85546875, 3.697265625, 0.03228759765625, 1.9365234375, 0.044189453125, 0.00022089481353759766, 0.05291748046875, 0.29833984375, 0.032989501953125, 4.40625, 0.72509765625, 0.0231475830078125, 0.07672119140625, 0.003765106201171875, 0.0765380859375], "tokens": [2071, 1422, 537, 40823, 14350, 984, 26, 853, 30, 298, 36, 30, 2678, 36, 293]}
{"line_number": 210, "line_type": "generated", "code": "\n        }\n\n        if (num == 0) {\n            this.numerator = 0;\n            this.denominator = 1;\n            return;\n        }\n\n        if (num < 0) {\n            if (den < 0) {", "entropy": 0.113525390625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.1199951171875, 0.12481689453125, 0.68798828125, 0.71728515625, 0.0266265869140625, 0.63916015625, 0.016876220703125, 0.0120849609375, 2.467632293701172e-05, 0.007659912109375, 0.0031681060791015625, 0.0289764404296875, 0.35986328125, 0.0002065896987915039, 0.0033092498779296875, 0.00045609474182128906, 0.0321044921875, 0.0013818740844726562, 1.5854835510253906e-05, 0.0012359619140625, 0.01110076904296875, 0.0010843276977539062, 7.009506225585938e-05, 0.00015842914581298828, 1.3113021850585938e-06, 0.00025773048400878906, 0.0001575946807861328, 0.00202178955078125, 0.00017440319061279297, 0.27001953125, 0.0014734268188476562, 0.00267791748046875, 0.01666259765625, 0.002201080322265625, 0.10760498046875, 0.89306640625, 0.022552490234375, 0.5634765625, 0.5205078125, 0.00013518333435058594, 9.179115295410156e-06, 0.4921875, 0.00162506103515625, 0.00856781005859375, 0.1915283203125, 0.0008454322814941406, 0.0004711151123046875, 0.005985260009765625, 5.078315734863281e-05, 2.7418136596679688e-06, 0.003139495849609375, 0.0007476806640625], "tokens": [291, 320, 584, 415, 308, 1516, 610, 225, 34, 27, 301, 324, 458, 32, 1516, 11290, 280, 225, 34, 45, 324, 458, 32, 29805, 9693, 280, 225, 35, 45, 324, 442, 45, 291, 320, 584, 415, 308, 1516, 333, 225, 34, 27, 301, 324, 415, 308, 5114, 333, 225, 34, 27, 301]}
{"line_number": 188, "line_type": "original", "code": "            this.numerator = (int) a0;", "entropy": 1.2421875, "is_bug_line": false, "sus_score": 0.20851441405707477, "per_token_entropy": [7.1953125, 1.0546875, 0.0119476318359375, 1.4365234375, 0.0011377334594726562, 0.1097412109375, 0.47998046875, 0.03778076171875, 0.0197906494140625, 4.296875, 0.2008056640625, 0.06378173828125], "tokens": [1468, 458, 32, 1516, 11290, 280, 308, 410, 27, 312, 34, 45]}
{"line_number": 188, "line_type": "generated", "code": "\n    }", "entropy": 0.268310546875, "is_bug_line": false, "sus_score": 0.20851441405707477, "per_token_entropy": [0.5283203125, 0.0084228515625], "tokens": [284, 320]}
{"line_number": 189, "line_type": "original", "code": "            this.denominator = 1;", "entropy": 1.55859375, "is_bug_line": false, "sus_score": 0.20851441405707477, "per_token_entropy": [8.296875, 2.5078125, 0.06939697265625, 1.3349609375, 0.00037360191345214844, 0.053802490234375, 1.4775390625, 0.148681640625, 0.1456298828125], "tokens": [1468, 458, 32, 29805, 9693, 280, 225, 35, 45]}
{"line_number": 189, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.20851441405707477, "per_token_entropy": [], "tokens": []}
{"line_number": 190, "line_type": "original", "code": "            return;", "entropy": 4.00390625, "is_bug_line": false, "sus_score": 0.20851441405707477, "per_token_entropy": [7.84765625, 3.94140625, 0.220703125], "tokens": [1468, 442, 45]}
{"line_number": 190, "line_type": "generated", "code": "\n\n    /**\n     * Create a fraction given the numerator and denominator.\n     *\n     * @param num the numerator.\n     * @param den the denominator.\n     * @throws IllegalArgumentException if the denominator is zero.\n     */\n    public Fraction(int num", "entropy": 0.20947265625, "is_bug_line": false, "sus_score": 0.20851441405707477, "per_token_entropy": [1.4716796875, 0.17919921875, 0.056549072265625, 5.9485435485839844e-05, 1.123046875, 0.024749755859375, 0.197265625, 0.52001953125, 0.1451416015625, 0.435546875, 0.00017964839935302734, 0.08050537109375, 0.01959228515625, 0.50927734375, 0.12432861328125, 0.002574920654296875, 0.62646484375, 0.0002186298370361328, 0.01398468017578125, 0.0008916854858398438, 0.0131378173828125, 1.7802734375, 0.002887725830078125, 8.857250213623047e-05, 0.11212158203125, 0.0038738250732421875, 9.715557098388672e-05, 0.0002231597900390625, 0.00027871131896972656, 0.054412841796875, 0.0002639293670654297, 0.0037212371826171875, 0.0059967041015625, 0.01395416259765625, 0.322021484375, 0.005725860595703125, 0.049468994140625, 1.6748046875, 0.0107421875, 0.01898193359375, 0.0277252197265625, 0.048431396484375, 0.396484375, 0.14990234375, 0.0032024383544921875, 0.2451171875, 0.01366424560546875, 0.19287109375, 0.018035888671875, 0.0135650634765625, 0.173583984375, 0.0005292892456054688], "tokens": [446, 1022, 275, 319, 2648, 312, 18795, 2702, 322, 1929, 11290, 461, 39920, 32, 275, 319, 275, 319, 477, 753, 1929, 322, 1929, 11290, 32, 275, 319, 477, 753, 5537, 322, 39920, 32, 275, 319, 477, 5117, 12137, 415, 322, 39920, 438, 5934, 32, 275, 569, 284, 562, 40823, 26, 410, 1929]}
{"line_number": 215, "line_type": "original", "code": "                p0 = p1;", "entropy": 4.2734375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [5.125, 11.9140625, 4.140625, 3.865234375, 2.8046875, 0.90478515625, 1.162109375], "tokens": [2071, 298, 34, 280, 298, 35, 45]}
{"line_number": 215, "line_type": "generated", "code": "\n                                              num, den);\n            }\n            num = -num;\n            den = -den;\n        }\n\n        // Reduce numerator and denominator by greatest common denominator.\n        int gcd = getGreatestCommonDenominator(num, den);\n        if (gcd", "entropy": 0.261474609375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [1.9296875, 0.1473388671875, 0.0092620849609375, 0.0172119140625, 0.028656005859375, 0.0439453125, 0.0004017353057861328, 0.08154296875, 0.03753662109375, 0.0013151168823242188, 0.024139404296875, 0.00926971435546875, 0.0007295608520507812, 0.0019550323486328125, 0.00018477439880371094, 9.584426879882812e-05, 0.0007886886596679688, 0.0024280548095703125, 5.1975250244140625e-05, 0.0097198486328125, 0.00037407875061035156, 0.62939453125, 0.72607421875, 1.9482421875, 1.1396484375, 0.0159454345703125, 0.0138397216796875, 0.00807952880859375, 0.1865234375, 0.2841796875, 0.000713348388671875, 0.318603515625, 0.0855712890625, 0.048492431640625, 1.7763671875, 0.8642578125, 0.005519866943359375, 1.4140625, 0.189697265625, 0.74560546875, 0.00028777122497558594, 0.50146484375, 9.775161743164062e-06, 0.03167724609375, 0.04461669921875, 0.0033855438232421875, 0.0008721351623535156, 0.0010995864868164062, 0.123046875, 0.14697265625, 0.00252532958984375, 0.0007624626159667969], "tokens": [13588, 1929, 30, 5537, 293, 324, 320, 324, 1929, 280, 429, 1516, 45, 324, 5537, 280, 429, 5114, 45, 291, 320, 584, 434, 37565, 1929, 11290, 461, 39920, 810, 48299, 4942, 39920, 32, 291, 629, 43422, 280, 622, 57, 37753, 5240, 43484, 9693, 26, 1516, 30, 5537, 293, 291, 415, 308, 46060]}
{"line_number": 216, "line_type": "original", "code": "                p1 = p2;", "entropy": 3.30078125, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [5.171875, 8.0234375, 3.7578125, 0.10113525390625, 3.76953125, 1.2060546875, 1.0791015625], "tokens": [2071, 298, 35, 280, 298, 36, 45]}
{"line_number": 216, "line_type": "generated", "code": "\n            }\n            num = -num;\n            den = -den;\n        }\n        if (num == 0) {\n            this.numerator = 0;\n            this.denominator = 1;\n            return;\n        }\n        // reduce num", "entropy": 0.1431884765625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.155517578125, 0.0238037109375, 0.1407470703125, 0.053009033203125, 0.0014667510986328125, 0.0273284912109375, 0.009521484375, 0.0005559921264648438, 0.006885528564453125, 0.0002682209014892578, 0.00013327598571777344, 0.0008282661437988281, 0.0021190643310546875, 0.0002148151397705078, 0.08392333984375, 0.0014162063598632812, 1.0048828125, 0.8583984375, 0.00510406494140625, 0.040924072265625, 0.01116943359375, 0.0279693603515625, 3.1948089599609375e-05, 0.008026123046875, 0.00180816650390625, 0.0253753662109375, 0.90185546875, 0.00018930435180664062, 0.0081634521484375, 0.0005364418029785156, 0.03582763671875, 0.0010805130004882812, 1.4543533325195312e-05, 0.0006165504455566406, 0.027069091796875, 0.0011577606201171875, 2.0623207092285156e-05, 0.00011861324310302734, 2.86102294921875e-06, 0.00025200843811035156, 0.0001499652862548828, 0.004016876220703125, 6.461143493652344e-05, 0.49072265625, 0.00173187255859375, 0.0018644332885742188, 0.0421142578125, 0.0035400390625, 0.6083984375, 1.7998046875, 0.70849609375, 0.31640625], "tokens": [324, 320, 324, 1929, 280, 429, 1516, 45, 324, 5537, 280, 429, 5114, 45, 291, 320, 291, 415, 308, 1516, 610, 225, 34, 27, 301, 324, 458, 32, 1516, 11290, 280, 225, 34, 45, 324, 458, 32, 29805, 9693, 280, 225, 35, 45, 324, 442, 45, 291, 320, 291, 434, 11665, 1929]}
{"line_number": 217, "line_type": "original", "code": "                q0 = q1;", "entropy": 6.44140625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [6.79296875, 13.7578125, 8.3984375, 0.0100860595703125, 12.7421875, 0.46875, 2.93359375], "tokens": [2071, 2678, 34, 280, 2678, 35, 45]}
{"line_number": 217, "line_type": "generated", "code": "\n            num = -num;\n            den = -den;\n        }\n\n        // use Euclid's algorithm to reduce this fraction to lowest terms\n        int numA = FastMath.abs(num);\n        int denA = FastMath.abs(", "entropy": 0.1939697265625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.058685302734375, 0.2052001953125, 0.0029144287109375, 0.0309600830078125, 0.0174713134765625, 0.0008192062377929688, 0.0086669921875, 0.0005807876586914062, 0.0002713203430175781, 0.0016546249389648438, 0.0021800994873046875, 0.00026488304138183594, 0.031646728515625, 0.001010894775390625, 0.82373046875, 0.73779296875, 1.1669921875, 0.1556396484375, 0.0367431640625, 4.5299530029296875e-06, 0.00014829635620117188, 0.046112060546875, 0.48046875, 0.5654296875, 0.0165252685546875, 0.76904296875, 0.0204010009765625, 0.1988525390625, 0.00445556640625, 0.0012693405151367188, 0.09930419921875, 0.61572265625, 2.658203125, 1.1904296875, 0.06451416015625, 0.0245819091796875, 0.0004887580871582031, 2.014636993408203e-05, 0.0001062154769897461, 0.0003681182861328125, 0.0001373291015625, 0.0003705024719238281, 0.0033893585205078125, 0.0016803741455078125, 0.0292205810546875, 0.00867462158203125, 0.00016379356384277344, 0.0003306865692138672, 6.556510925292969e-06, 4.1604042053222656e-05, 2.3365020751953125e-05, 3.266334533691406e-05], "tokens": [324, 1929, 280, 429, 1516, 45, 324, 5537, 280, 429, 5114, 45, 291, 320, 584, 434, 793, 516, 103, 573, 314, 1182, 8218, 372, 11665, 458, 18795, 372, 25624, 5955, 291, 629, 1929, 51, 280, 15938, 5717, 32, 3596, 26, 1516, 293, 291, 629, 5537, 51, 280, 15938, 5717, 32, 3596, 26]}
{"line_number": 218, "line_type": "original", "code": "                q1 = q2;", "entropy": 5.32421875, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [7.15625, 13.703125, 4.45703125, 0.01300811767578125, 9.765625, 0.93359375, 1.2578125], "tokens": [2071, 2678, 35, 280, 2678, 36, 45]}
{"line_number": 218, "line_type": "generated", "code": "\n            den = -den;\n        }\n\n        if (num == 0) {\n            this.numerator = 0;\n            this.denominator = 1;\n            return;\n        }\n\n        long g = gcd(num, den);\n        if", "entropy": 0.179443359375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.06317138671875, 0.0009613037109375, 0.0003521442413330078, 0.0017652511596679688, 0.0062255859375, 0.0008296966552734375, 0.0211029052734375, 0.0007305145263671875, 0.72412109375, 1.2685546875, 0.005542755126953125, 0.041717529296875, 0.018646240234375, 0.0173187255859375, 2.765655517578125e-05, 0.00795745849609375, 0.002414703369140625, 0.0889892578125, 0.80419921875, 0.00019371509552001953, 0.00484466552734375, 0.00029277801513671875, 0.05218505859375, 0.0008444786071777344, 1.4662742614746094e-05, 0.0007042884826660156, 0.0204620361328125, 0.0010786056518554688, 2.0384788513183594e-05, 0.0001252889633178711, 3.814697265625e-06, 0.000270843505859375, 0.0001322031021118164, 0.00222015380859375, 6.16312026977539e-05, 0.4599609375, 0.0015363693237304688, 0.0006246566772460938, 0.013824462890625, 0.003894805908203125, 0.1810302734375, 1.1787109375, 1.8125, 0.012908935546875, 1.7490234375, 0.00841522216796875, 0.0278778076171875, 0.00286102294921875, 0.00330352783203125, 0.0007719993591308594, 0.276611328125, 0.4326171875], "tokens": [324, 5537, 280, 429, 5114, 45, 291, 320, 584, 415, 308, 1516, 610, 225, 34, 27, 301, 324, 458, 32, 1516, 11290, 280, 225, 34, 45, 324, 458, 32, 29805, 9693, 280, 225, 35, 45, 324, 442, 45, 291, 320, 584, 1946, 485, 280, 43422, 26, 1516, 30, 5537, 293, 291, 415]}
{"line_number": 219, "line_type": "original", "code": "                a0 = a1;", "entropy": 2.857421875, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [8.953125, 4.37890625, 3.0546875, 0.039581298828125, 2.5, 0.47021484375, 0.59716796875], "tokens": [2071, 312, 34, 280, 312, 35, 45]}
{"line_number": 219, "line_type": "generated", "code": "\n        }\n        if (num == 0) {\n            this.numerator = 0;\n            this.denominator = 1;\n            return;\n        }\n        long n = num;\n        long d = den;\n        // use Eucl", "entropy": 0.1561279296875, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.04620361328125, 0.00887298583984375, 0.7099609375, 0.93359375, 0.00872802734375, 0.05267333984375, 0.0208282470703125, 0.046905517578125, 3.933906555175781e-05, 0.00946044921875, 0.0020236968994140625, 0.0231475830078125, 0.71044921875, 0.00020897388458251953, 0.01194000244140625, 0.00046443939208984375, 0.04229736328125, 0.0014009475708007812, 2.205371856689453e-05, 0.0007634162902832031, 0.025299072265625, 0.0012989044189453125, 1.6689300537109375e-05, 0.0001589059829711914, 2.9802322387695312e-06, 0.00027489662170410156, 0.00021457672119140625, 0.0042724609375, 0.0001342296600341797, 0.444580078125, 0.0021381378173828125, 0.00116729736328125, 0.016510009765625, 0.0022640228271484375, 0.677734375, 1.2060546875, 1.009765625, 0.084716796875, 0.24267578125, 0.041259765625, 0.00525665283203125, 0.0037479400634765625, 0.00087738037109375, 0.0004711151123046875, 0.0036907196044921875, 0.0005769729614257812, 0.2403564453125, 0.490478515625, 0.71337890625, 0.24560546875, 0.019317626953125, 6.794929504394531e-06], "tokens": [291, 320, 291, 415, 308, 1516, 610, 225, 34, 27, 301, 324, 458, 32, 1516, 11290, 280, 225, 34, 45, 324, 458, 32, 29805, 9693, 280, 225, 35, 45, 324, 442, 45, 291, 320, 291, 1946, 310, 280, 1929, 45, 291, 1946, 343, 280, 5537, 45, 291, 434, 793, 516, 103, 573]}
{"line_number": 220, "line_type": "original", "code": "                r0 = r1;", "entropy": 3.884765625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [8.2734375, 6.96875, 4.19140625, 0.02606201171875, 7.0390625, 0.135498046875, 0.55419921875], "tokens": [2071, 540, 34, 280, 540, 35, 45]}
{"line_number": 220, "line_type": "generated", "code": "\n        // reduce numerator and denominator by greatest common denominator\n        if (num == 0) {\n            this.numerator = 0;\n            this.denominator = 1;\n            return;\n        }\n\n        if (num < 0) {", "entropy": 0.2120361328125, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.76025390625, 1.8193359375, 0.420166015625, 0.372314453125, 0.006855010986328125, 0.016326904296875, 0.023284912109375, 0.246826171875, 0.1260986328125, 0.000705718994140625, 0.35205078125, 0.3115234375, 1.109375, 0.0121307373046875, 0.34912109375, 0.199951171875, 0.05450439453125, 9.09566879272461e-05, 0.0254974365234375, 0.003246307373046875, 0.01407623291015625, 0.279052734375, 0.0001773834228515625, 0.00621795654296875, 0.0006780624389648438, 0.031707763671875, 0.0031070709228515625, 6.42538070678711e-05, 0.0008492469787597656, 0.03594970703125, 0.0015916824340820312, 2.3245811462402344e-05, 0.00021326541900634766, 3.6954879760742188e-06, 0.00028514862060546875, 0.001277923583984375, 0.007038116455078125, 0.0004374980926513672, 1.126953125, 0.002254486083984375, 0.000591278076171875, 0.00934600830078125, 0.0013189315795898438, 0.8662109375, 1.6630859375, 0.01502227783203125, 0.50244140625, 0.1610107421875, 0.034332275390625, 7.963180541992188e-05, 0.0455322265625, 0.0027408599853515625], "tokens": [291, 434, 11665, 1929, 11290, 461, 39920, 810, 48299, 4942, 39920, 291, 415, 308, 1516, 610, 225, 34, 27, 301, 324, 458, 32, 1516, 11290, 280, 225, 34, 45, 324, 458, 32, 29805, 9693, 280, 225, 35, 45, 324, 442, 45, 291, 320, 584, 415, 308, 1516, 333, 225, 34, 27, 301]}
{"line_number": 193, "line_type": "original", "code": "        long p0 = 1;", "entropy": 2.525390625, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [6.3984375, 4.79296875, 5.01171875, 1.1357421875, 0.041961669921875, 1.55078125, 1.001953125, 0.274658203125], "tokens": [351, 1946, 298, 34, 280, 225, 35, 45]}
{"line_number": 193, "line_type": "generated", "code": "\n     * @param value the int value to convert to a fraction.\n     */\n    public Fraction(int value) {\n        this(value, 1);\n    }\n\n    /**\n     * Create a fraction from an int and an int.\n     * The fraction", "entropy": 0.214111328125, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.13134765625, 0.392822265625, 0.76123046875, 0.003589630126953125, 1.5771484375, 0.16796875, 1.115234375, 0.2396240234375, 0.11370849609375, 0.01146697998046875, 0.0821533203125, 0.0029144287109375, 0.12744140625, 0.1334228515625, 0.1856689453125, 0.408935546875, 0.01342010498046875, 0.1639404296875, 0.0225372314453125, 0.0181884765625, 0.0521240234375, 0.02197265625, 0.059844970703125, 0.05487060546875, 0.072509765625, 0.167236328125, 1.091796875, 0.012481689453125, 0.00408172607421875, 0.046783447265625, 0.06072998046875, 0.04852294921875, 0.0380859375, 0.0022449493408203125, 0.1629638671875, 0.007373809814453125, 0.01486968994140625, 7.021427154541016e-05, 0.038360595703125, 0.001697540283203125, 0.0185089111328125, 0.045928955078125, 0.4296875, 0.086181640625, 0.908203125, 1.6455078125, 0.0234222412109375, 0.09161376953125, 0.1134033203125, 0.00027179718017578125, 0.1317138671875, 0.00556182861328125], "tokens": [275, 319, 477, 753, 786, 322, 629, 786, 372, 4483, 372, 312, 18795, 32, 275, 569, 284, 562, 40823, 26, 410, 786, 27, 301, 291, 458, 26, 853, 30, 225, 35, 293, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 645, 600, 629, 461, 600, 629, 32, 275, 319, 886, 18795]}
{"line_number": 194, "line_type": "original", "code": "        long q0 = 0;", "entropy": 2.9140625, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [5.0390625, 5.2890625, 5.1640625, 4.09765625, 0.046173095703125, 0.091064453125, 3.41015625, 0.1766357421875], "tokens": [351, 1946, 2678, 34, 280, 225, 34, 45]}
{"line_number": 194, "line_type": "generated", "code": "\n     */\n    public Fraction(int num) {\n        this(num, 1);\n    }\n\n    /**\n     * Create a fraction from an int.\n     * The fraction is num / denom.\n     * @param num the numerator.", "entropy": 0.09869384765625, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.1357421875, 0.08837890625, 0.01873779296875, 0.206298828125, 0.0218658447265625, 0.02288818359375, 0.054229736328125, 0.0166778564453125, 0.11505126953125, 0.051239013671875, 0.10308837890625, 0.1856689453125, 1.099609375, 0.0130767822265625, 0.0019502639770507812, 0.0206298828125, 0.00379180908203125, 0.0255584716796875, 0.041534423828125, 0.0015344619750976562, 0.125244140625, 0.006809234619140625, 0.015411376953125, 7.30752944946289e-05, 0.0487060546875, 0.00139617919921875, 0.032623291015625, 0.0679931640625, 0.3916015625, 0.05328369140625, 1.140625, 0.02789306640625, 0.00013780593872070312, 0.1558837890625, 0.005954742431640625, 0.0032196044921875, 0.036865234375, 0.005039215087890625, 0.242431640625, 0.0333251953125, 0.09808349609375, 0.0002987384796142578, 0.0845947265625, 9.47713851928711e-05, 0.0023345947265625, 0.01544952392578125, 8.392333984375e-05, 0.0001329183578491211, 0.0126800537109375], "tokens": [275, 569, 284, 562, 40823, 26, 410, 1929, 27, 301, 291, 458, 26, 1516, 30, 225, 35, 293, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 645, 600, 629, 32, 275, 319, 886, 18795, 438, 1929, 517, 24257, 32, 275, 319, 477, 753, 1929, 322, 1929, 11290, 32]}
{"line_number": 195, "line_type": "original", "code": "        long p1 = a0;", "entropy": 3.2734375, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [6.4921875, 7.5703125, 2.314453125, 1.40234375, 0.0242919921875, 7.65625, 0.0285186767578125, 0.70361328125], "tokens": [351, 1946, 298, 35, 280, 312, 34, 45]}
{"line_number": 195, "line_type": "generated", "code": "\n    public Fraction(int num) {\n        this.numerator = num;\n        this.denominator = 1;\n    }\n\n    /**\n     * Create a fraction from a double value.\n     * <p>\n     * This constructor uses the <a", "entropy": 0.21630859375, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.079833984375, 0.415283203125, 0.009521484375, 0.00725555419921875, 0.08984375, 0.0017671585083007812, 0.02813720703125, 0.07086181640625, 0.06048583984375, 0.1790771484375, 0.390380859375, 0.006038665771484375, 0.0001367330551147461, 0.0870361328125, 0.0171966552734375, 0.0109710693359375, 0.0158233642578125, 0.002765655517578125, 7.402896881103516e-05, 0.00018453598022460938, 1.6689300537109375e-06, 0.00035190582275390625, 0.0033550262451171875, 6.92605972290039e-05, 0.0006728172302246094, 0.05987548828125, 0.004024505615234375, 0.1695556640625, 0.0104217529296875, 0.005634307861328125, 3.743171691894531e-05, 0.06622314453125, 0.0017642974853515625, 0.0288238525390625, 0.056060791015625, 0.56396484375, 0.433837890625, 0.99609375, 0.060791015625, 0.2183837890625, 0.0002727508544921875, 1.3740234375, 0.09613037109375, 0.01253509521484375, 0.1024169921875, 2.2292137145996094e-05, 2.408203125, 0.0865478515625, 0.8076171875, 0.448974609375, 1.6787109375, 0.08050537109375], "tokens": [284, 562, 40823, 26, 410, 1929, 27, 301, 291, 458, 32, 1516, 11290, 280, 1929, 45, 291, 458, 32, 29805, 9693, 280, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 645, 312, 2064, 786, 32, 275, 319, 333, 98, 48, 275, 319, 1348, 4374, 5251, 322, 333, 83]}
{"line_number": 196, "line_type": "original", "code": "        long q1 = 1;", "entropy": 2.94921875, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [5.390625, 5.421875, 6.609375, 5.05859375, 0.07073974609375, 0.56591796875, 0.058807373046875, 0.4208984375], "tokens": [351, 1946, 2678, 35, 280, 225, 35, 45]}
{"line_number": 196, "line_type": "generated", "code": "\n        this.numerator = num;\n        this.denominator = 1;\n    }\n\n    /**\n     * Create a fraction from an int.\n     * The fraction is num / 1.\n     * @param num the numerator.\n     */\n   ", "entropy": 0.07489013671875, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.14013671875, 0.197021484375, 0.106689453125, 0.00543212890625, 0.00037217140197753906, 0.051605224609375, 0.058074951171875, 0.044830322265625, 0.025054931640625, 0.0023403167724609375, 2.2172927856445312e-05, 0.0003993511199951172, 2.1457672119140625e-06, 0.00045013427734375, 0.0026493072509765625, 0.0002605915069580078, 0.0010585784912109375, 0.08514404296875, 0.00168609619140625, 0.116455078125, 0.00861358642578125, 0.004791259765625, 3.159046173095703e-05, 0.05987548828125, 0.0015850067138671875, 0.036651611328125, 0.0244293212890625, 0.76708984375, 0.07244873046875, 1.107421875, 0.00518798828125, 3.516674041748047e-05, 0.043853759765625, 0.0038318634033203125, 0.00255584716796875, 0.0205841064453125, 0.007572174072265625, 0.434326171875, 0.0015783309936523438, 0.0053863525390625, 0.002056121826171875, 8.952617645263672e-05, 0.059539794921875, 0.0002620220184326172, 0.01192474365234375, 0.06951904296875, 0.0008440017700195312, 0.00017690658569335938, 0.0069732666015625, 0.0021457672119140625, 0.28515625, 0.00820159912109375], "tokens": [291, 458, 32, 1516, 11290, 280, 1929, 45, 291, 458, 32, 29805, 9693, 280, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 645, 600, 629, 32, 275, 319, 886, 18795, 438, 1929, 517, 225, 35, 32, 275, 319, 477, 753, 1929, 322, 1929, 11290, 32, 275, 569, 284]}
{"line_number": 198, "line_type": "original", "code": "        long p2 = 0;", "entropy": 1.8330078125, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [6.62890625, 4.3671875, 1.640625, 0.70361328125, 0.255615234375, 0.3466796875, 0.6591796875, 0.06280517578125], "tokens": [351, 1946, 298, 36, 280, 225, 34, 45]}
{"line_number": 198, "line_type": "generated", "code": "\n\n    /**\n     * Create a fraction from a double.\n     * @param value the double value to convert to a fraction.\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n    public Fraction(double value", "entropy": 0.13818359375, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [1.341796875, 0.028778076171875, 0.01337432861328125, 3.552436828613281e-05, 0.11279296875, 0.0022068023681640625, 0.0560302734375, 0.0166473388671875, 0.91748046875, 0.5751953125, 0.56494140625, 0.181396484375, 0.0009102821350097656, 2.060546875, 0.0012950897216796875, 0.0309600830078125, 0.038238525390625, 0.049896240234375, 0.005008697509765625, 0.038665771484375, 0.0057830810546875, 0.0161285400390625, 0.00092315673828125, 0.00797271728515625, 0.0232391357421875, 0.03619384765625, 0.2073974609375, 0.0186309814453125, 0.380859375, 0.041412353515625, 0.00232696533203125, 7.271766662597656e-06, 0.0164947509765625, 0.043182373046875, 0.01561737060546875, 0.00304412841796875, 0.003948211669921875, 0.033355712890625, 0.06976318359375, 3.4332275390625e-05, 0.03277587890625, 0.0007348060607910156, 5.364418029785156e-05, 0.04974365234375, 0.022430419921875, 0.0889892578125, 0.008514404296875, 0.00792694091796875, 0.005336761474609375, 0.0016307830810546875, 0.0080718994140625, 0.00039267539978027344], "tokens": [446, 1022, 275, 319, 2648, 312, 18795, 645, 312, 2064, 32, 275, 319, 477, 753, 786, 322, 2064, 786, 372, 4483, 372, 312, 18795, 32, 275, 319, 477, 5117, 40823, 14350, 984, 415, 322, 45253, 18795, 3803, 372, 275, 319, 263, 15941, 300, 32, 275, 569, 284, 562, 40823, 26, 2627, 786]}
{"line_number": 199, "line_type": "original", "code": "        long q2 = 1;", "entropy": 2.89453125, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [6.99609375, 5.52734375, 5.765625, 2.298828125, 0.2305908203125, 1.1728515625, 0.8466796875, 0.321533203125], "tokens": [351, 1946, 2678, 36, 280, 225, 35, 45]}
{"line_number": 199, "line_type": "generated", "code": "\n\n    /**\n     * Create a fraction from an int numerator and an int denominator.\n     * @param num the numerator.\n     * @param den the denominator.\n     * @throws FractionConversionException if the denominator is zero.\n     */\n    public Fraction", "entropy": 0.1524658203125, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.5625, 0.0703125, 0.01806640625, 3.4809112548828125e-05, 0.221923828125, 0.0023651123046875, 0.0609130859375, 0.0227813720703125, 0.59814453125, 0.0714111328125, 1.37109375, 0.0163116455078125, 0.0791015625, 0.3466796875, 0.0125732421875, 0.01160430908203125, 0.0099639892578125, 0.0340576171875, 0.0002846717834472656, 0.264892578125, 0.000789642333984375, 0.00548553466796875, 0.07379150390625, 0.0007343292236328125, 0.0002868175506591797, 0.0211181640625, 0.0015420913696289062, 9.739398956298828e-05, 0.00017726421356201172, 0.00011730194091796875, 0.09967041015625, 0.0004146099090576172, 0.00396728515625, 0.007442474365234375, 0.0380859375, 0.228759765625, 0.0038700103759765625, 0.0082855224609375, 1.5126953125, 1.0771484375, 4.184246063232422e-05, 0.0245819091796875, 0.0296783447265625, 0.2861328125, 0.052337646484375, 0.31689453125, 0.1922607421875, 0.004268646240234375, 0.1427001953125, 0.0084686279296875, 0.008453369140625, 0.0008172988891601562], "tokens": [446, 1022, 275, 319, 2648, 312, 18795, 645, 600, 629, 1929, 11290, 461, 600, 629, 39920, 32, 275, 319, 477, 753, 1929, 322, 1929, 11290, 32, 275, 319, 477, 753, 5537, 322, 39920, 32, 275, 319, 477, 5117, 40823, 14350, 984, 415, 322, 39920, 438, 5934, 32, 275, 569, 284, 562, 40823]}
{"line_number": 201, "line_type": "original", "code": "        int n = 0;", "entropy": 3.859375, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [5.96875, 10.671875, 5.19140625, 0.061126708984375, 4.37109375, 0.67724609375, 0.0767822265625], "tokens": [351, 629, 310, 280, 225, 34, 45]}
{"line_number": 201, "line_type": "generated", "code": "\n     * num / den.\n     * @param num the numerator.\n     * @param den the denominator.\n     * @throws ArithmeticException if the denominator is zero.\n     */\n    public Fraction(int num, int den) {\n        if (den", "entropy": 0.11785888671875, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.269775390625, 0.00405120849609375, 1.1416015625, 0.019378662109375, 0.6298828125, 0.17578125, 0.457275390625, 0.0004987716674804688, 0.351806640625, 0.00029158592224121094, 0.0018854141235351562, 0.032684326171875, 0.0005145072937011719, 0.0003445148468017578, 0.0285186767578125, 0.002513885498046875, 0.00011777877807617188, 0.00013065338134765625, 4.756450653076172e-05, 0.0008230209350585938, 0.0005106925964355469, 0.0034275054931640625, 0.004520416259765625, 0.03802490234375, 0.434326171875, 0.003971099853515625, 0.01029205322265625, 0.662109375, 0.00040459632873535156, 0.01392364501953125, 0.006195068359375, 0.041290283203125, 0.01062774658203125, 0.8388671875, 0.0318603515625, 0.0063018798828125, 0.1748046875, 0.008697509765625, 0.00713348388671875, 0.0009822845458984375, 0.00260162353515625, 0.0301361083984375, 0.0002396106719970703, 0.0005164146423339844, 0.002262115478515625, 1.4424324035644531e-05, 0.001251220703125, 0.25341796875, 0.130859375, 0.27294921875, 0.008697509765625, 0.00909423828125], "tokens": [275, 319, 1929, 517, 5537, 32, 275, 319, 477, 753, 1929, 322, 1929, 11290, 32, 275, 319, 477, 753, 5537, 322, 39920, 32, 275, 319, 477, 5117, 47721, 984, 415, 322, 39920, 438, 5934, 32, 275, 569, 284, 562, 40823, 26, 410, 1929, 30, 629, 5537, 27, 301, 291, 415, 308, 5114]}
{"line_number": 202, "line_type": "original", "code": "        boolean stop = false;", "entropy": 3.255859375, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [5.2109375, 10.3046875, 3.849609375, 0.11865234375, 0.0210113525390625, 0.0245819091796875], "tokens": [351, 1905, 4719, 280, 901, 45]}
{"line_number": 202, "line_type": "generated", "code": "\n     * @param num the numerator.\n     * @param den the denominator.\n     * @throws ArithmeticException if the denominator is {@code zero}.\n     */\n    public Fraction(int num, int den) {\n        if (den == 0)", "entropy": 0.09417724609375, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.11138916015625, 0.056304931640625, 0.1873779296875, 0.0011930465698242188, 0.0208587646484375, 0.1400146484375, 0.0011415481567382812, 0.0004596710205078125, 0.08428955078125, 0.00852203369140625, 0.0002015829086303711, 0.0002810955047607422, 0.00015234947204589844, 0.05810546875, 0.0004050731658935547, 0.00560760498046875, 0.005054473876953125, 0.043670654296875, 0.3486328125, 0.0030269622802734375, 0.0088958740234375, 0.802734375, 0.0005583763122558594, 0.013885498046875, 0.01023101806640625, 0.07501220703125, 0.00665283203125, 1.4541015625, 0.004695892333984375, 0.0221405029296875, 0.10333251953125, 0.013092041015625, 0.1878662109375, 0.01430511474609375, 0.0272064208984375, 0.00418853759765625, 0.007564544677734375, 0.0645751953125, 0.0005621910095214844, 0.0011110305786132812, 0.002750396728515625, 2.3603439331054688e-05, 0.001804351806640625, 0.2127685546875, 0.26904296875, 0.463134765625, 0.0102691650390625, 0.0167388916015625, 0.01421356201171875, 0.00031065940856933594, 7.557868957519531e-05, 0.00958251953125], "tokens": [275, 319, 477, 753, 1929, 322, 1929, 11290, 32, 275, 319, 477, 753, 5537, 322, 39920, 32, 275, 319, 477, 5117, 47721, 984, 415, 322, 39920, 438, 3088, 687, 5934, 4009, 275, 569, 284, 562, 40823, 26, 410, 1929, 30, 629, 5537, 27, 301, 291, 415, 308, 5114, 610, 225, 34, 27]}
{"line_number": 204, "line_type": "original", "code": "            ++n;", "entropy": 5.8671875, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [7.53515625, 12.03125, 3.65625, 0.2474365234375], "tokens": [1468, 3311, 96, 45]}
{"line_number": 204, "line_type": "generated", "code": "\n     */\n    public Fraction(int num, int den) {\n        if (den == 0) {\n            throw new FractionException(\"The denominator must not be zero\");\n        }\n        if (den < 0) {\n            num = -num;", "entropy": 0.125244140625, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.182861328125, 0.267578125, 0.0222625732421875, 0.0263519287109375, 0.0028972625732421875, 0.00787353515625, 0.08551025390625, 0.0007352828979492188, 0.003726959228515625, 0.003734588623046875, 0.00018107891082763672, 0.002826690673828125, 0.0232696533203125, 0.34619140625, 0.435791015625, 0.01442718505859375, 0.08575439453125, 0.0254974365234375, 0.00018215179443359375, 0.00020420551300048828, 0.0174407958984375, 0.01131439208984375, 0.03216552734375, 0.035003662109375, 0.01090240478515625, 0.64990234375, 0.14892578125, 0.755859375, 0.392822265625, 0.0469970703125, 0.27783203125, 0.1181640625, 0.0003859996795654297, 0.00716400146484375, 0.1346435546875, 0.041717529296875, 0.0001729726791381836, 0.8369140625, 0.67236328125, 0.01485443115234375, 0.361083984375, 0.0270843505859375, 0.00019812583923339844, 3.707408905029297e-05, 0.0089263916015625, 0.0014495849609375, 0.0256195068359375, 0.3125, 0.004535675048828125, 0.02392578125, 0.005840301513671875, 0.0007119178771972656], "tokens": [275, 569, 284, 562, 40823, 26, 410, 1929, 30, 629, 5537, 27, 301, 291, 415, 308, 5114, 610, 225, 34, 27, 301, 324, 1422, 537, 40823, 984, 440, 1318, 39920, 2298, 646, 526, 5934, 724, 291, 320, 291, 415, 308, 5114, 333, 225, 34, 27, 301, 324, 1929, 280, 429, 1516, 45]}
{"line_number": 205, "line_type": "original", "code": "            double r1 = 1.0 / (r0 - a0);", "entropy": 2.173828125, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [6.2109375, 6.57421875, 1.2568359375, 5.36328125, 0.03436279296875, 2.52734375, 0.1278076171875, 0.472900390625, 0.00699615478515625, 0.71142578125, 0.97900390625, 9.2890625, 0.07623291015625, 1.5615234375, 1.513671875, 0.1307373046875, 0.1241455078125], "tokens": [1468, 2064, 540, 35, 280, 225, 35, 32, 34, 517, 308, 100, 34, 429, 312, 34, 293]}
{"line_number": 205, "line_type": "generated", "code": "\n     */\n    public Fraction(int num, int den) {\n        if (den == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                             Integer.valueOf(num), Integer", "entropy": 0.140380859375, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.296875, 0.056793212890625, 0.0193634033203125, 0.0138397216796875, 0.002414703369140625, 0.00353240966796875, 0.03350830078125, 0.0003440380096435547, 0.0008101463317871094, 0.0020542144775390625, 2.4318695068359375e-05, 0.004314422607421875, 0.428955078125, 0.482421875, 0.51123046875, 0.01019287109375, 0.012969970703125, 0.01467132568359375, 0.00025653839111328125, 4.792213439941406e-05, 0.01004791259765625, 0.0214080810546875, 0.12890625, 0.01078033447265625, 0.04376220703125, 0.1866455078125, 0.010009765625, 3.5762786865234375e-07, 0.2149658203125, 0.1654052734375, 0.01910400390625, 9.763240814208984e-05, 0.10760498046875, 0.001422882080078125, 0.0033626556396484375, 5.710124969482422e-05, 9.775161743164062e-06, 1.049041748046875e-05, 1.2080078125, 0.01364898681640625, 0.00016188621520996094, 0.0002281665802001953, 5.7220458984375e-06, 0.051605224609375, 2.0390625, 0.7734375, 8.606910705566406e-05, 0.0980224609375, 0.00019025802612304688, 0.01129913330078125, 0.0102386474609375, 0.27099609375], "tokens": [275, 569, 284, 562, 40823, 26, 410, 1929, 30, 629, 5537, 27, 301, 291, 415, 308, 5114, 610, 225, 34, 27, 301, 324, 1422, 537, 4175, 37375, 984, 26, 24225, 19298, 32, 13977, 81, 16043, 65, 4683, 7267, 81, 521, 81, 4002, 8750, 30, 13687, 4401, 32, 9162, 26, 1516, 471, 4401]}
