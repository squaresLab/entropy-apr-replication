{"line_number": 169, "line_type": "original", "code": "            return;", "entropy": 5.50390625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [7.26953125, 2.240234375, 7.00390625], "tokens": [1468, 442, 45]}
{"line_number": 169, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [], "tokens": []}
{"line_number": 152, "line_type": "original", "code": "                return false;", "entropy": 4.5078125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [8.796875, 2.3125, 6.7265625, 0.1927490234375], "tokens": [2071, 442, 901, 45]}
{"line_number": 152, "line_type": "generated", "code": "    /**\n     * Returns the pivot column.\n     * @param tableau simple tableau for the problem\n     * @return the pivot column\n     */\n    protected Integer getPivotColumn(final SimplexTableau tableau) {\n        int minCol = -", "entropy": 0.267333984375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [1.9267578125, 0.20068359375, 0.392333984375, 0.001277923583984375, 1.1240234375, 0.1444091796875, 0.6533203125, 0.2249755859375, 1.0751953125, 0.1900634765625, 0.0009622573852539062, 0.046051025390625, 0.00930023193359375, 0.010009765625, 0.0003447532653808594, 0.2103271484375, 0.0024051666259765625, 0.0003490447998046875, 0.04595947265625, 0.0015048980712890625, 0.003170013427734375, 0.00467681884765625, 0.0020046234130859375, 0.0004911422729492188, 0.003337860107421875, 0.32470703125, 0.1507568359375, 0.0031490325927734375, 0.10626220703125, 0.412841796875, 0.01690673828125, 0.55029296875, 0.298583984375, 0.0016689300537109375, 0.0003337860107421875, 0.00021326541900634766, 0.001888275146484375, 0.016693115234375, 0.000408172607421875, -0.0, 1.7881393432617188e-06, 2.7418136596679688e-06, 0.00011086463928222656, 5.960464477539062e-07, 0.00037026405334472656, 0.00276947021484375, 0.11224365234375, 1.857421875, 1.466796875, 1.1328125, 0.26806640625, 0.90966796875], "tokens": [264, 1022, 275, 319, 3759, 322, 20991, 2623, 32, 275, 319, 477, 753, 1858, 4452, 4281, 1858, 4452, 436, 322, 3708, 275, 319, 477, 601, 322, 20991, 2623, 275, 569, 284, 2522, 4401, 622, 28267, 2137, 26, 3220, 28421, 1909, 1599, 4452, 1858, 4452, 27, 301, 291, 629, 1847, 871, 280, 429]}
{"line_number": 191, "line_type": "original", "code": "            doIteration(tableau);", "entropy": 1.6103515625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.96875, 4.22265625, 0.056060791015625, 0.01029205322265625, 0.006664276123046875, 0.00010275840759277344, 0.009063720703125], "tokens": [1468, 745, 21863, 26, 1274, 4452, 293]}
{"line_number": 191, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [], "tokens": []}
{"line_number": 155, "line_type": "original", "code": "        return true;", "entropy": 3.646484375, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [5.203125, 1.1240234375, 8.1875, 0.06866455078125], "tokens": [351, 442, 861, 45]}
{"line_number": 155, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [], "tokens": []}
{"line_number": 193, "line_type": "original", "code": "        return tableau.getSolution();", "entropy": 1.240234375, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [5.2890625, 0.798828125, 2.166015625, 0.00017917156219482422, 0.11016845703125, 0.5732421875, 0.464111328125, 0.521484375], "tokens": [351, 442, 1858, 4452, 32, 371, 13628, 473]}
{"line_number": 193, "line_type": "generated", "code": "    /**\n     * Returns the pivot column for the simplex method.\n     * @param tableau simple tableau for the problem\n     * @return the pivot column\n     */\n    protected int getPivotColumn(final SimplexTableau tableau) {\n       ", "entropy": 0.27978515625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [1.8935546875, 0.15234375, 0.42431640625, 0.0003325939178466797, 1.1298828125, 0.12359619140625, 0.59619140625, 0.22216796875, 1.908203125, 0.3955078125, 1.9423828125, 8.940696716308594e-06, 1.0068359375, 0.2252197265625, 0.19921875, 0.0005054473876953125, 0.09063720703125, 0.008880615234375, 0.01230621337890625, 0.00044417381286621094, 0.2232666015625, 0.00244140625, 0.0005402565002441406, 0.053802490234375, 0.0019464492797851562, 0.0088348388671875, 0.005985260009765625, 0.0014734268188476562, 0.0007486343383789062, 0.0030498504638671875, 0.461669921875, 0.17529296875, 0.00348663330078125, 0.351318359375, 0.322021484375, 0.0212860107421875, 0.479736328125, 1.9111328125, 0.00794219970703125, 0.0014553070068359375, 0.000827789306640625, 0.0030002593994140625, 0.01922607421875, 0.0031909942626953125, 2.384185791015625e-07, 4.0531158447265625e-06, 2.0265579223632812e-06, 0.000244140625, 1.9073486328125e-06, 0.000537872314453125, 0.003940582275390625, 0.1514892578125], "tokens": [264, 1022, 275, 319, 3759, 322, 20991, 2623, 436, 322, 7396, 1909, 1411, 32, 275, 319, 477, 753, 1858, 4452, 4281, 1858, 4452, 436, 322, 3708, 275, 319, 477, 601, 322, 20991, 2623, 275, 569, 284, 2522, 629, 622, 28267, 2137, 26, 3220, 28421, 1909, 1599, 4452, 1858, 4452, 27, 301, 291]}
{"line_number": 147, "line_type": "original", "code": "        if (tableau.getNumArtificialVariables() > 0) {", "entropy": 0.6357421875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [3.28515625, 2.806640625, 0.2237548828125, 0.98388671875, 0.00039196014404296875, 0.00717926025390625, 0.2452392578125, 0.044769287109375, 0.0003314018249511719, 0.003787994384765625, 0.002105712890625, 2.482421875, 0.0038547515869140625, 0.0025691986083984375, 0.031402587890625, 0.051361083984375], "tokens": [351, 415, 308, 1274, 4452, 32, 15207, 5271, 31251, 10165, 346, 848, 225, 34, 27, 301]}
{"line_number": 147, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [], "tokens": []}
{"line_number": 150, "line_type": "original", "code": "        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {", "entropy": 0.2783203125, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [3.27734375, 3.2265625, 0.01314544677734375, 0.06573486328125, 0.0787353515625, 0.0034885406494140625, 0.60546875, 6.687641143798828e-05, 0.001190185546875, 0.0171051025390625, 0.00957489013671875, 9.262561798095703e-05, 0.0099334716796875, 0.01312255859375, 0.00844573974609375, 0.0262298583984375, 0.00011801719665527344, 0.0025959014892578125, 0.0171966552734375, 0.09368896484375, 0.002483367919921875, 0.0056915283203125, 0.00119781494140625, 0.00518798828125, 0.0012264251708984375, 0.00409698486328125, 0.0220184326171875], "tokens": [351, 436, 308, 410, 595, 280, 1858, 4452, 32, 15207, 33312, 10905, 473, 595, 333, 1858, 4452, 32, 21422, 346, 429, 225, 35, 45, 595, 1987, 301]}
{"line_number": 150, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [], "tokens": []}
{"line_number": 151, "line_type": "original", "code": "            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {", "entropy": 0.62841796875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [7.07421875, 2.52734375, 0.252197265625, 1.7841796875, 0.186279296875, 0.0015172958374023438, 2.5, 0.00933074951171875, 0.44580078125, 0.0001995563507080078, 0.01421356201171875, 0.0640869140625, 0.0045013427734375, 0.1053466796875, 0.0038166046142578125, 1.4267578125, 0.0234832763671875, 0.047119140625, 0.00849151611328125, 0.0753173828125, 0.0362548828125, 0.01363372802734375, 0.2412109375, 0.0028171539306640625, 0.001621246337890625, 0.023284912109375, 0.10260009765625], "tokens": [1468, 415, 308, 5717, 2755, 32, 23908, 26, 1274, 4452, 32, 48895, 26, 34, 30, 595, 471, 225, 34, 30, 23477, 27, 333, 225, 34, 27, 301]}
{"line_number": 151, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [], "tokens": []}
{"line_number": 189, "line_type": "original", "code": "        tableau.discardArtificialVariables();", "entropy": 2.18359375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [4.6640625, 4.95703125, 0.004543304443359375, 0.058013916015625, 9.3984375, 0.2008056640625, 8.153915405273438e-05, 0.349853515625, 0.0189056396484375], "tokens": [351, 1858, 4452, 32, 29853, 5271, 31251, 10165, 473]}
{"line_number": 189, "line_type": "generated", "code": "\n    /**\n     * Returns the pivot column.\n     * @param tableau simple tableau for the problem\n     * @return the pivot column\n     */\n    private int getPivotColumn(final SimplexTableau tableau) {\n        int pivotCol = -", "entropy": 0.231201171875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [2.126953125, 0.10736083984375, 0.255615234375, 5.7816505432128906e-05, 1.1142578125, 0.1143798828125, 0.623046875, 0.2147216796875, 1.0400390625, 0.187255859375, 0.0007410049438476562, 0.056304931640625, 0.00769805908203125, 0.011566162109375, 0.0003783702850341797, 0.2269287109375, 0.0027942657470703125, 0.0004088878631591797, 0.04937744140625, 0.00188446044921875, 0.003692626953125, 0.00403594970703125, 0.00160980224609375, 0.0005145072937011719, 0.00354766845703125, 0.335205078125, 0.1365966796875, 0.00335693359375, 0.1009521484375, 0.376953125, 0.0036163330078125, 0.85205078125, 1.466796875, 0.0077972412109375, 0.0019006729125976562, 0.00151824951171875, 0.00275421142578125, 0.0244140625, 0.0017070770263671875, 2.384185791015625e-07, 2.9802322387695312e-06, 3.2186508178710938e-06, 0.0003185272216796875, 2.1457672119140625e-06, 0.0004978179931640625, 0.002872467041015625, 0.0799560546875, 0.88623046875, 0.4658203125, 0.2044677734375, 0.09246826171875, 0.82177734375], "tokens": [284, 1022, 275, 319, 3759, 322, 20991, 2623, 32, 275, 319, 477, 753, 1858, 4452, 4281, 1858, 4452, 436, 322, 3708, 275, 319, 477, 601, 322, 20991, 2623, 275, 569, 284, 945, 629, 622, 28267, 2137, 26, 3220, 28421, 1909, 1599, 4452, 1858, 4452, 27, 301, 291, 629, 20991, 871, 280, 429]}
{"line_number": 190, "line_type": "original", "code": "        while (!isOptimal(tableau)) {", "entropy": 0.62255859375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [3.361328125, 3.15625, 0.1175537109375, 0.04864501953125, 0.052276611328125, 2.2411346435546875e-05, 0.0019626617431640625, 0.0007843971252441406, 7.557868957519531e-05, 0.03277587890625, 0.07537841796875], "tokens": [351, 2218, 1429, 297, 5482, 2977, 26, 1274, 4452, 490, 301]}
{"line_number": 190, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [], "tokens": []}
{"line_number": 42, "line_type": "original", "code": "        this(DEFAULT_EPSILON);", "entropy": 2.38671875, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [2.134765625, 8.0546875, 3.203125, 5.20703125, 0.00122833251953125, 0.0616455078125, 0.0008711814880371094, 0.4296875], "tokens": [351, 458, 26, 5807, 81, 18386, 42027, 293]}
{"line_number": 42, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Solve the linear programming problem.\n     * @param model the linear programming model to solve\n     * @return the point/value pair giving the optimal value of the linear programming\n     * problem\n     * @throws OptimizationException if the max", "entropy": 0.444091796875, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [1.693359375, 0.4189453125, 0.357666015625, 0.0767822265625, 0.06634521484375, 0.00021708011627197266, 1.9033203125, 0.341064453125, 0.42822265625, 1.462890625, 0.07147216796875, 0.98291015625, 0.0435791015625, 0.0037097930908203125, 0.2408447265625, 0.1451416015625, 0.335205078125, 1.9482421875, 0.316650390625, 0.1895751953125, 0.54931640625, 0.85400390625, 0.09490966796875, 0.029449462890625, 0.006633758544921875, 0.0021038055419921875, 0.01654052734375, 0.9130859375, 0.64013671875, 1.3251953125, 0.0455322265625, 0.0802001953125, 0.028350830078125, 0.00681304931640625, 0.054962158203125, 0.5078125, 0.460205078125, 0.039794921875, 2.19140625, 0.498779296875, 1.25, 0.00823974609375, 0.11431884765625, 0.537109375, 0.04876708984375, 0.003021240234375, 0.049774169921875, 0.465576171875, 1.4781951904296875e-05, 0.02508544921875, 0.39697265625, 0.830078125], "tokens": [284, 320, 446, 1022, 275, 319, 47005, 322, 10081, 16031, 3708, 32, 275, 319, 477, 753, 1542, 322, 10081, 16031, 1542, 372, 10932, 275, 319, 477, 601, 322, 2260, 33, 853, 6092, 21239, 322, 24824, 786, 432, 322, 10081, 16031, 275, 319, 3708, 275, 319, 477, 5117, 41916, 984, 415, 322, 1769]}
{"line_number": 43, "line_type": "original", "code": "    }", "entropy": 2.609375, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [2.978515625, 2.240234375], "tokens": [264, 320]}
{"line_number": 43, "line_type": "generated", "code": "\n        final Integer pivotColumn = getPivotColumn(tableau);\n        final Integer pivotRow = getPivotRow(pivotColumn, tableau);\n        if (pivotRow == null) {\n            throw new NoFeasibleSolutionException();\n        }\n        // pivot", "entropy": 0.2349853515625, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [1.404296875, 1.427734375, 0.328125, 0.248046875, 0.658203125, 0.073486328125, 0.0135955810546875, 0.0002589225769042969, 0.00025391578674316406, 0.0027446746826171875, 0.004001617431640625, 7.510185241699219e-06, 0.0038909912109375, 0.1298828125, 0.6806640625, 0.020660400390625, 0.0029449462890625, 0.001728057861328125, 0.054901123046875, 0.004428863525390625, 0.0002428293228149414, 0.0009050369262695312, 0.0005350112915039062, 0.0019235610961914062, 9.107589721679688e-05, 0.0026531219482421875, 0.005184173583984375, 7.62939453125e-06, 0.001224517822265625, 0.408203125, 0.320556640625, 0.10467529296875, 0.025238037109375, 0.051239013671875, 0.092529296875, 0.0022602081298828125, 0.1300048828125, 0.0139617919921875, 0.1602783203125, 0.4501953125, 0.040283203125, 1.2568359375, 0.0185394287109375, 0.0004730224609375, 0.0016193389892578125, 6.759166717529297e-05, 0.48046875, 0.09521484375, 0.0001761913299560547, 0.34423828125, 1.798828125, 1.3505859375], "tokens": [291, 1158, 4401, 20991, 2137, 280, 622, 28267, 2137, 26, 1274, 4452, 293, 291, 1158, 4401, 20991, 2352, 280, 622, 28267, 2352, 26, 23444, 2137, 30, 1858, 4452, 293, 291, 415, 308, 23444, 2352, 610, 744, 27, 301, 324, 1422, 537, 3139, 9008, 38294, 13628, 984, 473, 291, 320, 291, 434, 20991]}
{"line_number": 49, "line_type": "original", "code": "    public SimplexSolver(final double epsilon) {", "entropy": 1.7568359375, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [5.8828125, 6.8671875, 3.22265625, 1.33514404296875e-05, 1.4990234375, 0.7705078125, 0.64404296875, 0.0753173828125, 0.1395263671875, 0.03045654296875, 0.1915283203125], "tokens": [264, 562, 28421, 1909, 17766, 26, 3220, 2064, 23477, 27, 301]}
{"line_number": 49, "line_type": "generated", "code": "\n        Integer pivotCol = getPivotColumn(tableau);\n        Integer pivotRow = getPivotRow(pivotCol, tableau);\n        if (pivotRow == null) {\n            throw new OptimizationException(\"The model is unbounded.\");\n        }\n        double", "entropy": 0.31005859375, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [0.26220703125, 1.94140625, 0.21044921875, 0.93505859375, 0.09747314453125, 0.038818359375, 0.0001773834228515625, 0.0005331039428710938, 0.001140594482421875, 0.0015249252319335938, 3.814697265625e-06, 0.0032176971435546875, 0.11016845703125, 0.57080078125, 0.00533294677734375, 0.0016193389892578125, 0.005184173583984375, 0.010345458984375, 0.0001220703125, 0.0008897781372070312, 0.0007162094116210938, 0.0017337799072265625, 3.3974647521972656e-05, 0.0015401840209960938, 0.00446319580078125, 2.0265579223632812e-06, 0.0009398460388183594, 0.399169921875, 0.38037109375, 0.12939453125, 0.037933349609375, 0.108154296875, 0.11529541015625, 0.00260162353515625, 0.11871337890625, 0.024444580078125, 0.1253662109375, 0.470947265625, 0.035247802734375, 0.35205078125, 1.0013580322265625e-05, 0.102294921875, 2.189453125, 1.6923828125, 0.568359375, 0.6337890625, 0.00010287761688232422, 1.78515625, 0.06463623046875, 0.0001519918441772461, 0.314697265625, 2.271484375], "tokens": [291, 4401, 20991, 871, 280, 622, 28267, 2137, 26, 1274, 4452, 293, 291, 4401, 20991, 2352, 280, 622, 28267, 2352, 26, 23444, 871, 30, 1858, 4452, 293, 291, 415, 308, 23444, 2352, 610, 744, 27, 301, 324, 1422, 537, 41916, 984, 440, 1318, 1542, 438, 707, 28959, 5368, 291, 320, 291, 2064]}
{"line_number": 50, "line_type": "original", "code": "        this.epsilon = epsilon;", "entropy": 2.87890625, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [2.81640625, 7.8828125, 0.0782470703125, 7.73828125, 0.22998046875, 1.318359375, 0.0977783203125], "tokens": [351, 458, 32, 20094, 280, 23477, 45]}
{"line_number": 50, "line_type": "generated", "code": "\n        final int pivotColumn = getPivotColumn(tableau);\n        final int pivotRow = getPivotRow(pivotColumn, tableau);\n        if (pivotRow == null) {\n            throw new OptimizationException(\"No pivot row found\");\n        }\n       ", "entropy": 0.2548828125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [1.2978515625, 1.3193359375, 1.5986328125, 0.71533203125, 0.685546875, 0.10260009765625, 0.0205841064453125, 0.0006532669067382812, 0.0009646415710449219, 0.0102081298828125, 0.006404876708984375, 4.267692565917969e-05, 0.006153106689453125, 0.1011962890625, 0.556640625, 0.179443359375, 0.00402069091796875, 0.0016956329345703125, 0.04425048828125, 0.0043487548828125, 0.0007448196411132812, 0.0015134811401367188, 0.0010271072387695312, 0.0028839111328125, 0.00031495094299316406, 0.00229644775390625, 0.00565338134765625, 9.5367431640625e-06, 0.002414703369140625, 0.38720703125, 0.422607421875, 0.1029052734375, 0.038421630859375, 0.04217529296875, 0.07177734375, 0.0027713775634765625, 0.1246337890625, 0.04180908203125, 0.18994140625, 0.40576171875, 0.04022216796875, 0.3642578125, 1.239776611328125e-05, 0.10833740234375, 1.677734375, 0.7548828125, 0.1253662109375, 0.38037109375, 0.81005859375, 0.12017822265625, 0.0002739429473876953, 0.3642578125], "tokens": [291, 1158, 629, 20991, 2137, 280, 622, 28267, 2137, 26, 1274, 4452, 293, 291, 1158, 629, 20991, 2352, 280, 622, 28267, 2352, 26, 23444, 2137, 30, 1858, 4452, 293, 291, 415, 308, 23444, 2352, 610, 744, 27, 301, 324, 1422, 537, 41916, 984, 440, 2023, 20991, 2698, 2431, 724, 291, 320, 291]}
{"line_number": 51, "line_type": "original", "code": "    }", "entropy": 2.703125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [3.138671875, 2.26953125], "tokens": [264, 320]}
{"line_number": 51, "line_type": "generated", "code": "\n        final Integer pivotColumn = getPivotColumn(tableau);\n        if (pivotColumn == null) {\n            // unbounded solution\n            throw new OptimizationException(\"unbounded solution\");\n        }\n        final Integer pivotRow = getPivotRow(pivotColumn,", "entropy": 0.2371826171875, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [1.3095703125, 1.3720703125, 0.293701171875, 0.24462890625, 0.65869140625, 0.083740234375, 0.0126190185546875, 0.00028252601623535156, 0.0002529621124267578, 0.0027065277099609375, 0.0036220550537109375, 7.033348083496094e-06, 0.0032806396484375, 0.12744140625, 0.98828125, 0.0161285400390625, 0.0288238525390625, 0.00012755393981933594, 0.038238525390625, 0.0015249252319335938, 0.0236053466796875, 0.007625579833984375, 0.185791015625, 0.728515625, 2.49609375, 0.0012569427490234375, 0.8623046875, 0.4443359375, 0.0904541015625, 0.0386962890625, 0.2391357421875, 9.894371032714844e-06, 0.1441650390625, 1.0478515625, 0.0005331039428710938, 0.04022216796875, 0.056488037109375, 0.079833984375, 0.0002980232238769531, 0.288330078125, 0.3037109375, 0.053924560546875, 0.0034637451171875, 0.0014057159423828125, 0.005870819091796875, 0.0031986236572265625, 0.0002620220184326172, 0.00021600723266601562, 0.00039958953857421875, 0.0012216567993164062, 2.8371810913085938e-05, 0.004695892333984375], "tokens": [291, 1158, 4401, 20991, 2137, 280, 622, 28267, 2137, 26, 1274, 4452, 293, 291, 415, 308, 23444, 2137, 610, 744, 27, 301, 324, 434, 707, 28959, 5295, 324, 1422, 537, 41916, 984, 440, 311, 28959, 5295, 724, 291, 320, 291, 1158, 4401, 20991, 2352, 280, 622, 28267, 2352, 26, 23444, 2137, 30]}
{"line_number": 59, "line_type": "original", "code": "        double minValue = 0;", "entropy": 2.125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [3.037109375, 7.50390625, 2.15625, 0.334228515625, 0.038177490234375, 3.296875, 0.1263427734375, 0.5126953125], "tokens": [351, 2064, 1847, 882, 280, 225, 34, 45]}
{"line_number": 59, "line_type": "generated", "code": "\n        }\n\n        // pivot\n        tableau.pivot(pivotRow, pivotCol);\n\n        // check optimality\n        if (isOptimal(tableau)) {\n            throw new NoFeasibleSolutionException();\n        }\n\n    }\n\n    /**\n     * Returns {@", "entropy": 0.3623046875, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [0.20849609375, 0.1121826171875, 0.90234375, 0.9150390625, 1.6748046875, 0.63671875, 1.0048828125, 1.6689300537109375e-06, 0.0262603759765625, 0.2188720703125, 0.0193634033203125, 0.00887298583984375, 0.434326171875, 0.005939483642578125, 0.0037822723388671875, 0.00372314453125, 0.0273590087890625, 1.392578125, 0.26416015625, 0.82763671875, 0.5341796875, 0.071533203125, 0.2066650390625, 0.3876953125, 0.04010009765625, 1.529296875, 0.81298828125, 8.14199447631836e-05, 0.25244140625, 0.046783447265625, 1.1324882507324219e-05, 0.166259765625, 0.0029850006103515625, 0.08038330078125, 0.9306640625, 0.0017557144165039062, 0.88720703125, 0.01763916015625, 0.0010995864868164062, 0.0016202926635742188, 7.43865966796875e-05, 0.035186767578125, 0.476318359375, 0.0015230178833007812, 1.240234375, 0.003875732421875, 0.215576171875, 0.0295257568359375, 0.04071044921875, 8.559226989746094e-05, 1.31640625, 0.81787109375], "tokens": [291, 320, 584, 434, 20991, 291, 1858, 4452, 32, 23444, 26, 23444, 2352, 30, 20991, 871, 293, 584, 434, 1505, 24824, 543, 291, 415, 308, 297, 5482, 2977, 26, 1274, 4452, 490, 301, 324, 1422, 537, 3139, 9008, 38294, 13628, 984, 473, 291, 320, 446, 320, 446, 1022, 275, 319, 3759, 3088]}
{"line_number": 60, "line_type": "original", "code": "        Integer minPos = null;", "entropy": 2.275390625, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [3.46875, 5.51953125, 4.66015625, 0.52685546875, 0.0948486328125, 1.6376953125, 0.01560211181640625], "tokens": [351, 4401, 1847, 2996, 280, 744, 45]}
{"line_number": 60, "line_type": "generated", "code": "\n        double pivotValue = tableau.getEntry(pivotRow, pivotCol);\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth(); i++) {\n            tableau.setEntry(pivotRow, i, table", "entropy": 0.219482421875, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [0.34423828125, 2.12890625, 0.486572265625, 1.6904296875, 0.01102447509765625, 0.07708740234375, 3.2186508178710938e-06, 0.00013911724090576172, 0.01251983642578125, 0.000335693359375, 0.001003265380859375, 0.0029315948486328125, 0.0011234283447265625, 0.003299713134765625, 6.210803985595703e-05, 0.0190887451171875, 0.285400390625, 0.82958984375, 0.005970001220703125, 0.004913330078125, 0.2403564453125, 0.003520965576171875, 1.677734375, -0.0, 4.756450653076172e-05, 0.55029296875, 0.001880645751953125, 6.687641143798828e-05, 0.040374755859375, 0.005496978759765625, 0.017791748046875, 0.00977325439453125, 2.5033950805664062e-06, 0.0002808570861816406, 0.94287109375, 0.29052734375, 0.019989013671875, 0.01088714599609375, 0.0038089752197265625, 0.0430908203125, 0.472900390625, 8.225440979003906e-06, 0.000423431396484375, 0.5703125, 0.05023193359375, 0.003482818603515625, 0.00341796875, 0.00293731689453125, 0.0007295608520507812, 0.015899658203125, 0.00347137451171875, 0.52392578125], "tokens": [291, 2064, 20991, 882, 280, 1858, 4452, 32, 48895, 26, 23444, 2352, 30, 20991, 871, 293, 291, 436, 308, 410, 595, 280, 1858, 4452, 32, 15207, 33312, 10905, 473, 595, 333, 1858, 4452, 32, 21422, 473, 595, 1987, 301, 324, 1858, 4452, 32, 470, 2711, 26, 23444, 2352, 30, 595, 30, 1858]}
{"line_number": 61, "line_type": "original", "code": "        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {", "entropy": 0.5556640625, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [3.48828125, 3.794921875, 0.00855255126953125, 0.025726318359375, 0.333740234375, 0.004543304443359375, 1.626953125, 3.2186508178710938e-06, 0.0007081031799316406, 0.21826171875, 0.01242828369140625, 8.559226989746094e-05, 0.087646484375, 0.0288848876953125, 0.018951416015625, 0.023651123046875, 2.86102294921875e-06, 0.0003829002380371094, 3.71484375, 1.51953125, 0.0127410888671875, 0.0187225341796875, 0.00904083251953125, 0.00672149658203125, 0.0156402587890625, 0.010406494140625, 0.0222015380859375], "tokens": [351, 436, 308, 410, 595, 280, 1858, 4452, 32, 15207, 33312, 10905, 473, 595, 333, 1858, 4452, 32, 21422, 346, 429, 225, 35, 45, 595, 1987, 301]}
{"line_number": 61, "line_type": "generated", "code": "\n        final double pivotEntry = tableau.getEntry(pivotRow, pivotCol);\n        for (int i = 0; i < tableau.getWidth(); i++) {\n            tableau.setEntry(pivotRow, i, tableau.getEntry", "entropy": 0.1485595703125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [0.63818359375, 1.61328125, 0.1317138671875, 0.287841796875, 1.2646484375, 0.0186614990234375, 0.0242156982421875, 4.0531158447265625e-06, 0.0002982616424560547, 0.0080413818359375, 0.000415802001953125, 0.0014438629150390625, 0.00390625, 0.0006794929504394531, 0.002002716064453125, 0.0001697540283203125, 0.0022563934326171875, 0.25048828125, 0.87939453125, 0.004913330078125, 0.005176544189453125, 0.26220703125, 0.003841400146484375, 0.33935546875, 0.00205230712890625, 0.00457000732421875, 0.0016937255859375, 0.033966064453125, 0.0291595458984375, 4.76837158203125e-07, 4.1604042053222656e-05, 0.5078125, 0.030731201171875, 0.0251922607421875, 0.00634002685546875, 0.002597808837890625, 0.04986572265625, 0.376708984375, 5.4836273193359375e-06, 0.00023448467254638672, 0.298583984375, 0.050048828125, 0.0024127960205078125, 0.004238128662109375, 0.0032978057861328125, 0.0009794235229492188, 0.01983642578125, 0.0029544830322265625, 0.52587890625, 1.1920928955078125e-07, 0.00016486644744873047, 0.0058746337890625], "tokens": [291, 1158, 2064, 20991, 2711, 280, 1858, 4452, 32, 48895, 26, 23444, 2352, 30, 20991, 871, 293, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1858, 4452, 32, 21422, 473, 595, 1987, 301, 324, 1858, 4452, 32, 470, 2711, 26, 23444, 2352, 30, 595, 30, 1858, 4452, 32, 48895]}
{"line_number": 62, "line_type": "original", "code": "            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {", "entropy": 1.33203125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [4.4765625, 3.662109375, 0.21240234375, 2.02734375, 0.41015625, 0.0019969940185546875, 2.3046875, 0.0057830810546875, 0.34716796875, 0.0007410049438476562, 0.01104736328125, 0.026275634765625, 0.001438140869140625, 4.83984375, 0.001079559326171875, 6.984375, 0.0271148681640625, 7.828125, 0.392822265625, 0.085205078125, 0.07269287109375, 0.01499176025390625, 2.041015625, 0.008636474609375, 0.00453948974609375, 0.04547119140625, 0.1317138671875], "tokens": [1468, 415, 308, 5717, 2755, 32, 23908, 26, 1274, 4452, 32, 48895, 26, 34, 30, 595, 471, 1847, 882, 30, 23477, 27, 333, 225, 34, 27, 301]}
{"line_number": 62, "line_type": "generated", "code": "\n        tableau.setPivotElement(pivotRow, pivotCol, 1);\n\n        // solve the new tableau\n        final SimplexTableau newTableau = tableau.solve();\n\n        // replace the old tableau with the new tableau\n       ", "entropy": 0.5048828125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [0.3896484375, 0.90234375, 0.00011348724365234375, 0.0032558441162109375, 0.388916015625, 0.73828125, 0.7666015625, 0.0279998779296875, 0.0982666015625, 0.2666015625, 0.005962371826171875, 0.0118865966796875, 0.0037136077880859375, 0.06475830078125, 0.03668212890625, 0.0088043212890625, 0.7958984375, 0.4111328125, 0.154052734375, 3.4296875, 1.056640625, 3.197265625, 0.65576171875, 0.0014829635620117188, 0.69384765625, 1.7177734375, 1.0869140625, 2.0265579223632812e-06, 0.385986328125, 0.0014753341674804688, 0.85986328125, 0.01442718505859375, 0.0020885467529296875, 0.02142333984375, 0.3759765625, 4.0531158447265625e-06, 0.0015153884887695312, 0.26708984375, 0.1180419921875, 0.361572265625, 0.1810302734375, 2.802734375, 0.179931640625, 1.1728515625, 0.058074951171875, 0.00414276123046875, 0.403564453125, 0.0247344970703125, 0.0875244140625, 1.8662109375, 0.0007448196411132812, 0.16455078125], "tokens": [291, 1858, 4452, 32, 470, 28267, 1308, 26, 23444, 2352, 30, 20991, 871, 30, 225, 35, 293, 584, 434, 10932, 322, 537, 1858, 4452, 291, 1158, 28421, 1909, 1599, 4452, 537, 1599, 4452, 280, 1858, 4452, 32, 19596, 473, 584, 434, 7084, 322, 3610, 1858, 4452, 623, 322, 537, 1858, 4452, 291]}
{"line_number": 63, "line_type": "original", "code": "                minValue = tableau.getEntry(0, i);", "entropy": 2.328125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [7.05859375, 10.890625, 3.177734375, 0.04534912109375, 2.603515625, 0.00023603439331054688, 0.005344390869140625, 0.09735107421875, 0.0020999908447265625, 0.195556640625, 0.0006084442138671875, 6.15234375, 0.040618896484375], "tokens": [2071, 1847, 882, 280, 1858, 4452, 32, 48895, 26, 34, 30, 595, 293]}
{"line_number": 63, "line_type": "generated", "code": "\n        tableau.setEntry(pivotRow, pivotCol, 1);\n        tableau.setEntry(pivotRow, tableau.getWidth() - 1, tableau.getEntry(pivotRow, tableau.getWidth() - 1)", "entropy": 0.186767578125, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [0.243896484375, 1.365234375, 6.079673767089844e-06, 0.0023784637451171875, 0.483154296875, 0.46484375, 0.0029010772705078125, 0.0033416748046875, 0.026397705078125, 0.000911712646484375, 0.00341033935546875, 0.00435638427734375, 0.0007033348083496094, 0.07489013671875, 0.0208587646484375, 0.8486328125, 1.3642578125, 2.201171875, 3.4570693969726562e-06, 0.0009775161743164062, 0.5, 0.46875, 0.0029582977294921875, 0.1695556640625, 0.062225341796875, 0.032470703125, 0.099609375, -0.0, 4.315376281738281e-05, 0.0240631103515625, 0.004364013671875, 0.00042247772216796875, 0.00994110107421875, 0.0008511543273925781, 0.0020160675048828125, 1.119140625, 1.5497207641601562e-06, 0.00386810302734375, 0.0159149169921875, 0.0006861686706542969, 0.008026123046875, 0.0003972053527832031, 0.0005102157592773438, 0.02984619140625, -0.0, 0.0001995563507080078, 0.0018444061279296875, 0.00478363037109375, 0.0014848709106445312, 0.007175445556640625, 0.00012993812561035156, 0.026611328125], "tokens": [291, 1858, 4452, 32, 470, 2711, 26, 23444, 2352, 30, 20991, 871, 30, 225, 35, 293, 291, 1858, 4452, 32, 470, 2711, 26, 23444, 2352, 30, 1858, 4452, 32, 21422, 346, 429, 225, 35, 30, 1858, 4452, 32, 48895, 26, 23444, 2352, 30, 1858, 4452, 32, 21422, 346, 429, 225, 35, 27]}
{"line_number": 64, "line_type": "original", "code": "                minPos = i;", "entropy": 3.984375, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [7.84765625, 10.484375, 2.498046875, 0.11456298828125, 2.857421875, 0.106201171875], "tokens": [2071, 1847, 2996, 280, 595, 45]}
{"line_number": 64, "line_type": "generated", "code": "\n\n        // subtract the pivot row from all other rows\n        for (int i = 0; i < tableau.getHeight(); i++) {\n            if (i!= pivotRow) {\n                double factor = tableau.getEntry(i, pivotCol);", "entropy": 0.20556640625, "is_bug_line": false, "sus_score": 0.2672612419124244, "per_token_entropy": [0.7451171875, 0.16162109375, 1.9462890625, 1.056640625, 0.80224609375, 0.63525390625, 0.09912109375, 0.479736328125, 0.67626953125, 0.0284423828125, 0.33056640625, 0.219482421875, 0.006191253662109375, 0.02716064453125, 0.112060546875, 0.00461578369140625, 0.1546630859375, 0.01025390625, 0.0033702850341796875, 0.0018415451049804688, 0.004474639892578125, 0.017333984375, 1.1920928955078125e-07, 2.09808349609375e-05, 0.057830810546875, 0.01561737060546875, 0.01389312744140625, 0.002536773681640625, 0.0023899078369140625, 0.05621337890625, 0.0755615234375, 0.031646728515625, 0.041412353515625, 0.1622314453125, 0.0004608631134033203, 0.005443572998046875, 0.0194091796875, 0.00516510009765625, 0.07086181640625, 1.154296875, 1.052734375, 0.00616455078125, 0.103759765625, -0.0, 6.389617919921875e-05, 0.0009150505065917969, 0.0003540515899658203, 0.274169921875, 0.0003495216369628906, 0.0035228729248046875, 0.00226593017578125, 0.0035305023193359375], "tokens": [584, 434, 27799, 322, 20991, 2698, 645, 1169, 1604, 5760, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1858, 4452, 32, 22382, 473, 595, 1987, 301, 324, 415, 308, 91, 863, 20991, 2352, 27, 301, 400, 2064, 10365, 280, 1858, 4452, 32, 48895, 26, 91, 30, 20991, 871, 293]}
