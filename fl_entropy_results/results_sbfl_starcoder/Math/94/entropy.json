{"line_number": 413, "line_type": "original", "code": "            return (Math.abs(u) + Math.abs(v));", "entropy": 1.6015625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [7.12890625, 4.33984375, 2.638671875, 4.59765625, 0.01103973388671875, 0.259033203125, 0.01214599609375, 0.5703125, 0.059967041015625, 0.1719970703125, 0.410888671875, 0.004062652587890625, 1.3947486877441406e-05, 3.826618194580078e-05, 0.0006375312805175781, 5.41796875], "tokens": [1468, 442, 308, 5717, 32, 3596, 26, 103, 27, 474, 4175, 32, 3596, 26, 104, 876]}
{"line_number": 413, "line_type": "generated", "code": "\n    /**\n     * Gets the greatest common divisor of two numbers, using the \"binary gcd\"\n     * method which avoids division and modulo operations. See Knuth 4.5.2\n     * algorithm B. This algorithm is due to <NAME> (", "entropy": 0.156005859375, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [1.77734375, 0.5771484375, 0.10516357421875, 0.0003249645233154297, 2.2265625, 0.053466796875, 0.4248046875, 0.0009093284606933594, 0.01264190673828125, 0.09320068359375, 0.7099609375, 0.1669921875, 0.69970703125, 0.0643310546875, 0.01262664794921875, 0.1910400390625, 0.00598907470703125, 0.29052734375, 0.0018100738525390625, 0.005077362060546875, 4.8279762268066406e-05, 0.0009722709655761719, 0.05084228515625, 0.0011453628540039062, 0.00030231475830078125, 0.0004429817199707031, 0.00038123130798339844, 0.0042877197265625, 0.0075225830078125, 0.013427734375, 0.000446319580078125, 1.1920928955078125e-07, 0.004421234130859375, 2.682209014892578e-05, 2.9802322387695312e-06, 8.344650268554688e-07, 1.1920928955078125e-06, 0.0003235340118408203, 0.0018930435180664062, 5.6862831115722656e-05, 0.00157928466796875, 0.00034427642822265625, 0.005901336669921875, 0.019866943359375, 0.007251739501953125, 7.140636444091797e-05, 0.0008559226989746094, 0.0001188516616821289, 0.5048828125, 0.00016486644744873047, 0.006870269775390625, 0.056884765625], "tokens": [284, 1022, 275, 319, 7124, 322, 48299, 4942, 33482, 432, 3134, 7515, 30, 1471, 322, 313, 7003, 43422, 20, 275, 319, 1411, 1510, 43585, 20654, 461, 41647, 7373, 32, 2802, 44327, 860, 225, 38, 32, 39, 32, 36, 275, 319, 8218, 551, 32, 1348, 8218, 438, 7254, 372, 333, 2474, 48, 308]}
{"line_number": 430, "line_type": "original", "code": "            u /= 2;", "entropy": 4.91796875, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [7.40625, 10.7578125, 10.8828125, 0.1844482421875, 0.186279296875, 0.0963134765625], "tokens": [1468, 1044, 14374, 225, 36, 45]}
{"line_number": 430, "line_type": "generated", "code": "\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++) {\n            result = 31 * result + hash(value", "entropy": 0.068115234375, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [0.11700439453125, 0.456298828125, 0.00670623779296875, 0.002956390380859375, 0.01165771484375, 0.0013408660888671875, 0.0069122314453125, 0.0213623046875, 0.0379638671875, 0.00197601318359375, 0.0022029876708984375, 0.0009140968322753906, 0.00035262107849121094, 0.006961822509765625, 0.0005679130554199219, 0.290771484375, 0.2412109375, 0.270751953125, 0.00405120849609375, 0.0177764892578125, 0.0684814453125, 0.045379638671875, 0.010833740234375, 0.06671142578125, 0.0022678375244140625, 0.2381591796875, 0.036590576171875, 0.0023479461669921875, 0.150390625, 0.0016498565673828125, 0.2047119140625, 8.749961853027344e-05, 0.0034847259521484375, 0.0039520263671875, 0.0002117156982421875, 0.0009331703186035156, 0.019805908203125, 0.07550048828125, 0.0007719993591308594, 0.0015611648559570312, 0.08685302734375, 0.7724609375, 0.0007495880126953125, 0.03558349609375, 0.0015134811401367188, 0.01629638671875, 0.0009717941284179688, 0.00017547607421875, 0.00933074951171875, 0.17822265625, 0.0027179718017578125, 0.0035305023193359375], "tokens": [291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987, 301, 324, 1056, 280, 225, 37, 35, 319, 1056, 474, 3677, 26, 853]}
{"line_number": 431, "line_type": "original", "code": "            v /= 2;", "entropy": 3.982421875, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [8.0625, 7.5625, 7.6796875, 0.314208984375, 0.1336669921875, 0.1339111328125], "tokens": [1468, 354, 14374, 225, 36, 45]}
{"line_number": 431, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float", "entropy": 0.0195465087890625, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [0.133056640625, 0.030975341796875, 0.126953125, 0.0209503173828125, 0.01331329345703125, 0.0006899833679199219, 0.2249755859375, 0.06903076171875, 0.0085601806640625, 0.0005960464477539062, 0.00010919570922851562, 0.005832672119140625, 0.0015239715576171875, 0.0015087127685546875, 0.143798828125, 0.007282257080078125, 0.0015125274658203125, 0.008636474609375, 0.00012803077697753906, 0.01354217529296875, 1.6570091247558594e-05, 0.0034465789794921875, 0.0005602836608886719, 0.0012197494506835938, 0.0026149749755859375, 0.00047516822814941406, 0.00012099742889404297, 1.3232231140136719e-05, 7.82012939453125e-05, 0.0152587890625, 0.00019288063049316406, 5.4836273193359375e-05, 0.00019741058349609375, 0.0007214546203613281, 0.0007977485656738281, 0.0003113746643066406, 0.00310516357421875, 0.06390380859375, 0.005886077880859375, 0.001758575439453125, 0.00014579296112060547, 7.915496826171875e-05, 0.00201416015625, 9.202957153320312e-05, 0.00390625, 0.00040650367736816406, 0.0005583763122558594, 0.00013136863708496094, 0.00583648681640625, 0.004749298095703125, 0.08209228515625, 0.0025348663330078125], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174]}
{"line_number": 432, "line_type": "original", "code": "            k++; // cast out twos.", "entropy": 3.2265625, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [8.5078125, 6.53515625, 2.666015625, 3.013671875, 2.779296875, 0.0179443359375, 1.1015625, 3.409385681152344e-05, 4.4140625], "tokens": [1468, 831, 3334, 434, 9936, 963, 8206, 500, 32]}
{"line_number": 432, "line_type": "generated", "code": "\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float(value", "entropy": 0.03662109375, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [0.71240234375, 0.128662109375, 0.027557373046875, 0.0002493858337402344, 0.2724609375, 0.20263671875, 0.01434326171875, 0.0011806488037109375, 0.00014138221740722656, 0.007114410400390625, 0.0019588470458984375, 0.0011959075927734375, 0.233154296875, 0.01433563232421875, 0.0018463134765625, 0.011474609375, 0.00021338462829589844, 0.0299835205078125, 1.823902130126953e-05, 0.006237030029296875, 0.0009641647338867188, 0.0018091201782226562, 0.00373077392578125, 0.0004124641418457031, 0.00010669231414794922, 1.5616416931152344e-05, 8.058547973632812e-05, 0.01458740234375, 0.00013625621795654297, 0.00026297569274902344, 0.0002911090850830078, 0.0009169578552246094, 0.0010700225830078125, 0.00020635128021240234, 0.0031681060791015625, 0.058380126953125, 0.007022857666015625, 0.002048492431640625, 0.00023746490478515625, 0.00012731552124023438, 0.00501251220703125, 0.0001589059829711914, 0.01055145263671875, 0.0006494522094726562, 0.00145721435546875, 0.0004150867462158203, 0.004718780517578125, 0.005382537841796875, 0.1102294921875, 0.0024547576904296875, 0.0001881122589111328, 0.00015592575073242188], "tokens": [284, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174, 26, 853]}
{"line_number": 450, "line_type": "original", "code": "                u = -t;", "entropy": 4.69140625, "is_bug_line": false, "sus_score": 0.18257418583505536, "per_token_entropy": [7.25, 9.3359375, 0.919921875, 3.6484375, 5.828125, 1.1611328125], "tokens": [2071, 1044, 280, 429, 102, 45]}
{"line_number": 450, "line_type": "generated", "code": "\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double indicator(final double x) {\n        return (x >= ZD)? PD : ND;\n    }\n\n    /**\n     *", "entropy": 0.074462890625, "is_bug_line": false, "sus_score": 0.18257418583505536, "per_token_entropy": [0.46044921875, 0.1348876953125, 0.020263671875, 0.00493621826171875, 0.184326171875, 0.003978729248046875, 0.00959014892578125, 0.0008740425109863281, 0.334228515625, 0.0010538101196289062, 0.0003554821014404297, 0.0010137557983398438, 0.0002598762512207031, 0.1719970703125, 0.053558349609375, 0.00167083740234375, 0.007965087890625, 0.0006804466247558594, 0.0013561248779296875, 0.03729248046875, 0.30517578125, 0.1429443359375, 0.025726318359375, 0.0118560791015625, 0.0005745887756347656, 0.031890869140625, 0.00928497314453125, 0.0033626556396484375, 0.10443115234375, 0.00629425048828125, 0.0007452964782714844, 0.0019388198852539062, 0.00537109375, 0.08953857421875, 0.227783203125, 0.8486328125, 0.048095703125, 0.044586181640625, 0.310302734375, 0.09210205078125, 0.0123138427734375, 0.0005784034729003906, 0.0254669189453125, 0.0020465850830078125, 0.008209228515625, 0.0005331039428710938, 0.0224456787109375, 0.0005793571472167969, 0.040069580078125, 0.004344940185546875, 0.0138702392578125, 0.00051116943359375], "tokens": [275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064, 18384, 26, 3220, 2064, 816, 27, 301, 291, 442, 308, 106, 2377, 2523, 54, 27, 1018, 30354, 499, 31500, 45, 284, 320, 446, 1022, 275, 319]}
{"line_number": 446, "line_type": "original", "code": "                t /= 2; // cast out twos", "entropy": 4.1484375, "is_bug_line": false, "sus_score": 0.17149858514250882, "per_token_entropy": [8.8125, 13.1328125, 13.7109375, 0.572265625, 0.1142578125, 0.9150390625, 3.6171875, 3.853515625, 0.01123046875, 0.87353515625, 5.710124969482422e-05], "tokens": [2071, 273, 14374, 225, 36, 45, 434, 9936, 963, 8206, 500]}
{"line_number": 446, "line_type": "generated", "code": "\n     * -1.0 if x < 0.\n     * \n     * @param x the value, a double\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double indicator(", "entropy": 0.0662841796875, "is_bug_line": false, "sus_score": 0.17149858514250882, "per_token_entropy": [1.4765625, 0.00972747802734375, 0.057525634765625, 0.0015964508056640625, 0.003116607666015625, 0.00015354156494140625, 0.025970458984375, 0.00154876708984375, 0.00910186767578125, 0.0018815994262695312, 0.0002570152282714844, 0.03851318359375, 0.4755859375, 0.0008802413940429688, 0.04620361328125, 0.0004467964172363281, 0.013092041015625, 0.0019321441650390625, 0.005008697509765625, 0.0298614501953125, 0.01195526123046875, 0.194580078125, 0.006793975830078125, 0.09552001953125, 0.55908203125, 0.0001760721206665039, 0.0006952285766601562, 0.0011434555053710938, 0.1168212890625, 0.002460479736328125, 0.0032749176025390625, 0.0034198760986328125, 0.05535888671875, 0.0009703636169433594, 0.00048065185546875, 0.001621246337890625, 0.0002872943878173828, 0.0704345703125, 0.0015268325805664062, 0.001094818115234375, 0.002593994140625, 0.0003075599670410156, 0.0005393028259277344, 0.0028228759765625, 0.01537322998046875, 0.0479736328125, 0.01416015625, 0.00492095947265625, 0.00033664703369140625, 0.025054931640625, 0.0036258697509765625, 0.003604888916015625], "tokens": [275, 319, 429, 35, 32, 34, 415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 2064, 275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064, 18384, 26]}
{"line_number": 421, "line_type": "original", "code": "            u = -u;", "entropy": 2.787109375, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [8.015625, 6.31640625, 0.469482421875, 0.483154296875, 1.2392578125, 0.201904296875], "tokens": [1468, 1044, 280, 429, 103, 45]}
{"line_number": 421, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [], "tokens": []}
{"line_number": 452, "line_type": "original", "code": "                v = t;", "entropy": 5.140625, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [9.4765625, 7.72265625, 0.91796875, 6.2734375, 1.318359375], "tokens": [2071, 354, 280, 273, 45]}
{"line_number": 452, "line_type": "generated", "code": "\n    public static double indicator(final double x) {\n        return Math.copySign(1.0, x);\n    }\n\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1", "entropy": 0.0811767578125, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.347900390625, 0.5107421875, 0.0017910003662109375, 0.031280517578125, 0.01369476318359375, 0.005031585693359375, 0.1575927734375, 0.0141754150390625, 0.001224517822265625, 0.00498199462890625, 0.0130462646484375, 0.12481689453125, 0.30322265625, 1.20703125, 0.00682830810546875, 0.11651611328125, 0.03582763671875, 0.01428985595703125, 0.1329345703125, 0.2568359375, 0.00359344482421875, 0.1171875, 0.00592041015625, 0.00737762451171875, 0.089111328125, 0.00189208984375, 0.08135986328125, 0.00881195068359375, 0.00560760498046875, 5.340576171875e-05, 0.049468994140625, 0.0650634765625, 0.09820556640625, 0.0298309326171875, 0.0018024444580078125, 0.0003459453582763672, 0.0012464523315429688, 0.0004742145538330078, 0.0004363059997558594, 0.0589599609375, 0.0024318695068359375, 0.10284423828125, 0.0006542205810546875, 0.09967041015625, 0.0005130767822265625, 0.0031604766845703125, 0.009368896484375, 0.0015363693237304688, 0.00018084049224853516, 0.01708984375, 0.06011962890625, 0.0001316070556640625], "tokens": [284, 562, 907, 2064, 18384, 26, 3220, 2064, 816, 27, 301, 291, 442, 4175, 32, 2991, 3388, 26, 35, 32, 34, 30, 816, 293, 284, 320, 446, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35]}
{"line_number": 420, "line_type": "original", "code": "        if (u > 0) {", "entropy": 1.99609375, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [4.79296875, 2.234375, 0.12066650390625, 7.5390625, 2.908203125, 0.17919921875, 0.0213165283203125, 0.1258544921875, 0.044097900390625], "tokens": [351, 415, 308, 103, 848, 225, 34, 27, 301]}
{"line_number": 420, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float", "entropy": 0.04473876953125, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [0.471923828125, 0.3583984375, 0.3544921875, 0.049224853515625, 0.01727294921875, 0.00011456012725830078, 0.309814453125, 0.275634765625, 0.0267333984375, 0.0096588134765625, 0.00038909912109375, 0.02398681640625, 0.002262115478515625, 0.0037899017333984375, 0.21826171875, 0.0003421306610107422, 0.00909423828125, 0.01309967041015625, 0.00023615360260009766, 0.02581787109375, 5.733966827392578e-05, 0.0014801025390625, 0.000720977783203125, 0.0024318695068359375, 0.005157470703125, 0.0007619857788085938, 0.00016057491302490234, 2.47955322265625e-05, 0.00018990039825439453, 0.0033721923828125, 0.00016069412231445312, 0.0002999305725097656, 0.00025081634521484375, 0.0011386871337890625, 0.002239227294921875, 0.0003440380096435547, 0.005603790283203125, 0.0386962890625, 0.01120758056640625, 0.0018291473388671875, 0.0002646446228027344, 0.0001423358917236328, 0.0029201507568359375, 0.00030422210693359375, 0.007724761962890625, 0.0005445480346679688, 0.0015382766723632812, 0.0011730194091796875, 0.01287078857421875, 0.00811767578125, 0.040679931640625, 0.0031719207763671875], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174]}
{"line_number": 423, "line_type": "original", "code": "        if (v > 0) {", "entropy": 1.51171875, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [3.4296875, 3.107421875, 0.1944580078125, 3.29296875, 2.5546875, 0.458984375, 0.12054443359375, 0.390869140625, 0.05023193359375], "tokens": [351, 415, 308, 104, 848, 225, 34, 27, 301]}
{"line_number": 423, "line_type": "generated", "code": "\n    /**\n     * Returns the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to", "entropy": 0.170654296875, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [1.9560546875, 0.5205078125, 0.0833740234375, 0.0001760721206665039, 0.411865234375, 1.326171875, 3.216796875, 0.01421356201171875, 0.0122833251953125, 0.059417724609375, 0.268310546875, 0.057708740234375, 0.01291656494140625, 0.001285552978515625, 0.1373291015625, 0.144775390625, 0.137939453125, 0.01788330078125, 0.00016963481903076172, 0.04559326171875, 0.0704345703125, 0.278564453125, 0.01189422607421875, 8.90493392944336e-05, 0.0006880760192871094, 0.0013532638549804688, 0.00896453857421875, 0.0010957717895507812, 0.00013530254364013672, 0.0005135536193847656, 0.00034356117248535156, 0.015350341796875, 0.0002491474151611328, 0.0006785392761230469, 0.0029811859130859375, 0.0198516845703125, 0.0008039474487304688, 2.384185791015625e-07, 0.0033111572265625, 3.147125244140625e-05, 0.0002779960632324219, 4.5299530029296875e-06, 1.9073486328125e-06, 0.000499725341796875, 0.0005064010620117188, 0.0017337799072265625, 0.0131683349609375, 0.01194000244140625, 0.00514984130859375, 0.00022077560424804688, 0.0004112720489501953, 0.00045299530029296875], "tokens": [284, 1022, 275, 319, 3759, 322, 48299, 4942, 33482, 432, 322, 7976, 786, 432, 3134, 7515, 30, 275, 319, 1471, 322, 313, 7003, 43422, 20, 1411, 1510, 43585, 20654, 461, 41647, 275, 319, 7373, 32, 2802, 44327, 860, 225, 38, 32, 39, 32, 36, 8218, 551, 32, 1348, 8218, 438, 7254, 372]}
{"line_number": 424, "line_type": "original", "code": "            v = -v;", "entropy": 5.09765625, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [7.15625, 8.984375, 0.82373046875, 7.2421875, 6.2421875, 0.15185546875], "tokens": [1468, 354, 280, 429, 104, 45]}
{"line_number": 424, "line_type": "generated", "code": "\n     * \n     * @param array the array to be hashed\n     * @return the hash code\n     */\n    public static int hash(double array[]) {\n        int hash = 0;\n        for (int i = 0; i < array.length", "entropy": 0.1580810546875, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [0.42236328125, 0.037506103515625, 0.403076171875, 0.0007624626159667969, 0.03125, 0.006320953369140625, 0.70458984375, 0.0176849365234375, 0.060943603515625, 0.0038890838623046875, 0.0075836181640625, 0.00021338462829589844, 0.01470947265625, 0.0001957416534423828, 0.00033736228942871094, 0.005924224853515625, 0.00200653076171875, 0.005825042724609375, 0.0006170272827148438, 0.039764404296875, 0.207763671875, 0.0197296142578125, 0.013671875, 0.0006909370422363281, 0.0037326812744140625, 0.051971435546875, 0.00618743896484375, 0.28955078125, 1.4404296875, 0.0277099609375, 0.0015439987182617188, 0.039398193359375, 0.9189453125, 1.2861328125, 0.005573272705078125, 0.07061767578125, 1.162109375, 0.0019407272338867188, 0.039398193359375, 0.16552734375, 0.00260162353515625, 0.0850830078125, 0.0235443115234375, 0.0011625289916992188, 0.27392578125, 0.052520751953125, 0.1260986328125, 0.0012006759643554688, 0.1295166015625, 0.0022525787353515625, 0.00018465518951416016, 0.0007114410400390625], "tokens": [275, 319, 5384, 319, 477, 753, 1417, 322, 1417, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 2627, 1417, 9795, 301, 291, 629, 3677, 280, 225, 34, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1417, 32, 1322]}
{"line_number": 427, "line_type": "original", "code": "        int k = 0;", "entropy": 1.970703125, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [2.7734375, 3.578125, 7.13671875, 0.20263671875, 0.024383544921875, 0.0028400421142578125, 0.07794189453125], "tokens": [351, 629, 831, 280, 225, 34, 45]}
{"line_number": 427, "line_type": "generated", "code": "\n     */\n    public static int hash(double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++)", "entropy": 0.0634765625, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [0.48486328125, 0.0257110595703125, 0.0165557861328125, 0.01428985595703125, 0.0008082389831542969, 0.00473785400390625, 0.07147216796875, 0.005779266357421875, 0.48388671875, 0.1767578125, 0.0294189453125, 0.0016307830810546875, 0.0027294158935546875, 0.03668212890625, 0.1607666015625, 0.006168365478515625, 0.0036220550537109375, 0.0112457275390625, 0.0006771087646484375, 0.0063018798828125, 0.020965576171875, 0.0174713134765625, 0.005374908447265625, 0.006137847900390625, 0.0026493072509765625, 0.0005950927734375, 0.01003265380859375, 0.00016105175018310547, 0.1654052734375, 0.29443359375, 0.2154541015625, 0.005710601806640625, 0.021942138671875, 0.1156005859375, 0.012237548828125, 0.01139068603515625, 0.041534423828125, 0.0017499923706054688, 0.356201171875, 0.03271484375, 0.00431060791015625, 0.08758544921875, 0.00237274169921875, 0.2142333984375, 0.00012373924255371094, 0.0014963150024414062, 0.0016965866088867188, 0.00026917457580566406, 0.0008940696716308594, 0.031646728515625, 0.07342529296875, 0.0007901191711425781], "tokens": [275, 569, 284, 562, 907, 629, 3677, 26, 2627, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987]}
{"line_number": 428, "line_type": "original", "code": "        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are", "entropy": 1.18359375, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [3.478515625, 7.17578125, 2.607421875, 7.26953125, 0.25732421875, 0.07012939453125, 0.056304931640625, 0.03253173828125, 0.0062103271484375, 0.0081787109375, 0.006870269775390625, 2.849609375, 1.7763671875, 0.1644287109375, 0.007160186767578125, 0.0021800994873046875, 0.0026760101318359375, 0.01192474365234375, 0.001918792724609375, 0.0043792724609375, 0.0005178451538085938, 1.8671875, 3.451171875, 0.90380859375, 2.65625, 0.7998046875, 0.381591796875, 0.11212158203125, 0.1885986328125, 2.6796875, 0.9482421875, 1.1044921875, 0.092529296875, 0.0213775634765625, 0.44482421875], "tokens": [351, 2218, 1833, 103, 549, 225, 35, 27, 610, 225, 34, 962, 308, 104, 549, 225, 35, 27, 610, 225, 34, 962, 831, 333, 225, 37, 35, 27, 301, 434, 2218, 1044, 461, 354, 884]}
{"line_number": 428, "line_type": "generated", "code": "\n    public static int hash(double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++) {\n           ", "entropy": 0.105224609375, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [1.05859375, 0.97802734375, 0.00316619873046875, 0.004894256591796875, 0.16552734375, 0.015228271484375, 0.57080078125, 0.310791015625, 0.0290069580078125, 0.0119781494140625, 0.0162506103515625, 0.08624267578125, 0.23388671875, 0.01239013671875, 0.0033435821533203125, 0.018096923828125, 0.0012836456298828125, 0.006961822509765625, 0.029144287109375, 0.0270843505859375, 0.006420135498046875, 0.00323486328125, 0.0016908645629882812, 0.0005712509155273438, 0.01018524169921875, 0.00021374225616455078, 0.331298828125, 0.30712890625, 0.219970703125, 0.00640106201171875, 0.0192718505859375, 0.10333251953125, 0.0567626953125, 0.019683837890625, 0.0484619140625, 0.00733184814453125, 0.25048828125, 0.026824951171875, 0.01031494140625, 0.067626953125, 0.0018091201782226562, 0.2021484375, 0.0002276897430419922, 0.0121917724609375, 0.003993988037109375, 0.0005550384521484375, 0.0021190643310546875, 0.0239410400390625, 0.09619140625, 0.0014123916625976562, 0.002593994140625, 0.04473876953125], "tokens": [284, 562, 907, 629, 3677, 26, 2627, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987, 301, 324]}
{"line_number": 434, "line_type": "original", "code": "        if (k == 31) {", "entropy": 2.072265625, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [3.474609375, 2.365234375, 0.17822265625, 7.8515625, 0.89208984375, 0.1905517578125, 3.9609375, 1.4423828125, 0.318115234375, 0.049713134765625], "tokens": [351, 415, 308, 93, 610, 225, 37, 35, 27, 301]}
{"line_number": 434, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [], "tokens": []}
{"line_number": 439, "line_type": "original", "code": "        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;", "entropy": 2.68359375, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [3.69140625, 4.671875, 5.625, 0.202880859375, 3.404296875, 10.84375, 2.72265625, 0.77294921875, 3.931640625, 0.986328125, 2.763671875, 0.04730224609375, 3.064453125, 0.424072265625, 0.047882080078125, 6.96875, 0.1312255859375, 4.46484375, 1.740234375, 1.181640625, 0.03125, 0.01419830322265625, 1.9951171875, 5.609375, 3.271484375, 3.5390625, 0.263427734375], "tokens": [351, 629, 273, 280, 1833, 103, 549, 225, 35, 27, 610, 225, 35, 27, 1018, 354, 499, 25298, 103, 517, 225, 36, 27, 1109, 551, 37, 12822]}
{"line_number": 439, "line_type": "generated", "code": "\n     */\n    public static byte signum(byte x) {\n        return (byte) ((x >> 7) | (-(x >> 7) & 1));\n    }\n\n    /**\n     * For a short value x, this method returns (", "entropy": 0.13916015625, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [1.080078125, 0.11187744140625, 0.0272369384765625, 0.046478271484375, 0.002613067626953125, 0.02215576171875, 0.061492919921875, 0.028564453125, 0.0175628662109375, 0.0367431640625, 0.0010519027709960938, 0.0028018951416015625, 0.006908416748046875, 0.07281494140625, 0.341552734375, 0.1658935546875, 0.291748046875, 0.56640625, 0.61962890625, 0.03826904296875, 0.41015625, 0.0887451171875, 0.00672149658203125, 0.025665283203125, 0.06890869140625, 0.78369140625, 0.1944580078125, 0.01007843017578125, 0.54248046875, 0.0014257431030273438, 0.0008797645568847656, 0.047576904296875, 0.1324462890625, 0.02398681640625, 0.33447265625, 0.00933837890625, 0.2398681640625, 0.0018167495727539062, 0.060150146484375, 0.005825042724609375, 0.007472991943359375, 6.639957427978516e-05, 0.06268310546875, 0.0245513916015625, 0.607421875, 0.0011138916015625, 0.00041294097900390625, 7.164478302001953e-05, 0.0006289482116699219, 0.00038504600524902344, 0.00012826919555664062, 0.003070831298828125], "tokens": [275, 569, 284, 562, 907, 3432, 2596, 378, 26, 2263, 816, 27, 301, 291, 442, 308, 2263, 27, 1833, 106, 3776, 225, 41, 27, 523, 7197, 26, 106, 3776, 225, 41, 27, 549, 225, 35, 876, 284, 320, 446, 1022, 275, 319, 2616, 312, 4504, 786, 816, 30, 458, 1411, 3217, 308]}
{"line_number": 445, "line_type": "original", "code": "            while ((t & 1) == 0) { // while t is even..", "entropy": 1.8515625, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [6.890625, 10.84375, 2.265625, 5.40625, 1.3720703125, 0.57568359375, 0.5302734375, 0.096435546875, 0.01340484619140625, 0.01512908935546875, 0.002696990966796875, 0.26171875, 0.1307373046875, 2.62890625, 2.046875, 0.578125, 0.00743865966796875, 0.02423095703125, 1.484375], "tokens": [1468, 2218, 1833, 102, 549, 225, 35, 27, 610, 225, 34, 27, 301, 434, 2218, 273, 438, 4444, 497]}
{"line_number": 445, "line_type": "generated", "code": "\n     * For a double value x, this method returns (byte)(+1) if x >= 0 and\n     * (byte)(-1) if x < 0.\n     * \n     * @param x the value, a double\n     * @", "entropy": 0.092041015625, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [0.7734375, 0.1275634765625, 0.3310546875, 0.2115478515625, 1.9619140625, 0.027587890625, 0.00971221923828125, 0.0027370452880859375, 0.0025653839111328125, 0.0012121200561523438, 0.0042266845703125, 0.484375, 0.1522216796875, 0.01393890380859375, 0.0020236968994140625, 0.0002758502960205078, 0.0048828125, 0.0009732246398925781, 0.0153961181640625, 0.07110595703125, 0.0014057159423828125, 0.0003204345703125, 0.023712158203125, 0.01605224609375, 7.534027099609375e-05, 0.0032634735107421875, 0.0001500844955444336, 7.87973403930664e-05, 0.00033020973205566406, 3.3855438232421875e-05, 0.00011718273162841797, 0.00020241737365722656, 0.0004520416259765625, 0.0009355545043945312, 0.00011301040649414062, 0.00017559528350830078, 0.0149688720703125, 0.232666015625, 0.0030422210693359375, 0.04559326171875, 0.00011587142944335938, 0.01340484619140625, 0.0018892288208007812, 0.00460052490234375, 0.0090179443359375, 0.0027751922607421875, 0.08123779296875, 0.003993988037109375, 0.11724853515625, 0.00685882568359375, 0.00015401840209960938, 0.00022518634796142578], "tokens": [275, 319, 2616, 312, 2064, 786, 816, 30, 458, 1411, 3217, 308, 2263, 2502, 29, 35, 27, 415, 816, 2377, 225, 34, 461, 275, 319, 308, 2263, 2502, 31, 35, 27, 415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 2064, 275, 319, 477]}
{"line_number": 449, "line_type": "original", "code": "            if (t > 0) {", "entropy": 2.6953125, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [7.15234375, 4.9453125, 1.25390625, 6.41796875, 2.822265625, 0.5654296875, 0.019134521484375, 0.544921875, 0.53955078125], "tokens": [1468, 415, 308, 102, 848, 225, 34, 27, 301]}
{"line_number": 449, "line_type": "generated", "code": "\n     * \n     * @param x the value, a double\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double indicator(final double x) {\n        return (x >= 0", "entropy": 0.12841796875, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [0.295166015625, 0.234375, 1.3701171875, 0.0016508102416992188, 0.0283203125, 0.004833221435546875, 0.00591278076171875, 0.11376953125, 0.0215301513671875, 0.27099609375, 0.016754150390625, 0.1685791015625, 0.423095703125, 0.00018477439880371094, 0.0022525787353515625, 0.0024242401123046875, 0.176025390625, 0.0029430389404296875, 0.007778167724609375, 0.0009365081787109375, 0.25146484375, 0.0011358261108398438, 0.0003483295440673828, 0.001239776611328125, 0.00019669532775878906, 0.15234375, 0.034820556640625, 0.001495361328125, 0.007404327392578125, 0.0006833076477050781, 0.0013837814331054688, 0.034393310546875, 0.0726318359375, 0.1749267578125, 0.01312255859375, 0.0087432861328125, 0.0004763603210449219, 0.0287322998046875, 0.00812530517578125, 0.00266265869140625, 0.1041259765625, 0.005706787109375, 0.0005102157592773438, 0.0009264945983886719, 0.0030574798583984375, 0.023529052734375, 0.2578125, 0.7734375, 0.0556640625, 0.048126220703125, 1.4560546875, 0.0014400482177734375], "tokens": [275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 2064, 275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064, 18384, 26, 3220, 2064, 816, 27, 301, 291, 442, 308, 106, 2377, 225, 34]}
{"line_number": 455, "line_type": "original", "code": "            t = (v - u) / 2;", "entropy": 2.4453125, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [6.09765625, 7.640625, 0.15087890625, 1.951171875, 5.05078125, 3.880859375, 2.701171875, 0.295166015625, 0.7490234375, 0.284912109375, 0.03515625, 0.513671875], "tokens": [1468, 273, 280, 308, 104, 429, 1044, 27, 517, 225, 36, 45]}
{"line_number": 455, "line_type": "generated", "code": "\n        }\n        return (x >= ZD)? PD : ND;\n    }\n\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x\n     * < ", "entropy": 0.06719970703125, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [0.1126708984375, 0.052215576171875, 0.390869140625, 0.25048828125, 0.40771484375, 0.0088958740234375, 0.05572509765625, 0.666015625, 0.1046142578125, 0.01448822021484375, 0.0005931854248046875, 0.041412353515625, 0.002605438232421875, 0.005313873291015625, 0.0008678436279296875, 0.072509765625, 0.00035953521728515625, 0.052276611328125, 0.004749298095703125, 0.0038623809814453125, 0.0001595020294189453, 0.025604248046875, 0.055267333984375, 0.11083984375, 0.054107666015625, 0.0015668869018554688, 0.0003368854522705078, 0.0013208389282226562, 0.00047969818115234375, 0.0003914833068847656, 0.048126220703125, 0.0016660690307617188, 0.0908203125, 0.000850677490234375, 0.11651611328125, 0.0005517005920410156, 0.002208709716796875, 0.00751495361328125, 0.0013628005981445312, 0.00013554096221923828, 0.0174407958984375, 0.0849609375, 0.00013208389282226562, 0.0003867149353027344, 0.00024211406707763672, 0.00479888916015625, 0.007045745849609375, 0.25244140625, 0.356201171875, 1.2755393981933594e-05, 0.0024471282958984375, 0.00047898292541503906], "tokens": [291, 320, 291, 442, 308, 106, 2377, 2523, 54, 27, 1018, 30354, 499, 31500, 45, 284, 320, 446, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 275, 319, 333, 225]}
{"line_number": 458, "line_type": "original", "code": "        } while (t != 0);", "entropy": 1.9638671875, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [6.41796875, 4.2421875, 5.09765625, 0.1116943359375, 1.5419921875, 0.0919189453125, 0.127197265625, 0.0022754669189453125, 0.037109375], "tokens": [351, 320, 2218, 308, 102, 863, 225, 34, 293]}
{"line_number": 458, "line_type": "generated", "code": "\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x\n     * < 0. Returns <code>NaN</code> if <code>x</code", "entropy": 0.05694580078125, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [0.65283203125, 0.07403564453125, 0.0156707763671875, 0.00023031234741210938, 0.2281494140625, 0.144775390625, 0.208740234375, 0.05078125, 0.00189971923828125, 0.000507354736328125, 0.0017442703247070312, 0.000492095947265625, 0.0006155967712402344, 0.06951904296875, 0.0021610260009765625, 0.1168212890625, 0.0008606910705566406, 0.15087890625, 0.0004906654357910156, 0.002735137939453125, 0.01421356201171875, 0.001750946044921875, 8.20159912109375e-05, 0.0310211181640625, 0.08746337890625, 0.0001417398452758789, 0.00034737586975097656, 0.00012755393981933594, 0.00501251220703125, 0.00820159912109375, 0.25244140625, 0.57373046875, 1.7881393432617188e-05, 0.0028629302978515625, 0.0006923675537109375, 0.0002181529998779297, 0.0020885467529296875, 0.1915283203125, 0.01220703125, 0.003810882568359375, 0.00011682510375976562, 0.01451873779296875, 0.01473236083984375, 6.651878356933594e-05, 0.0010480880737304688, 0.00884246826171875, 0.0089874267578125, 0.00015544891357421875, 0.00012159347534179688, 0.0004489421844482422, 0.0005736351013183594, 7.069110870361328e-05], "tokens": [284, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 275, 319, 333, 225, 34, 32, 3759, 333, 687, 48, 11126, 377, 687, 48, 415, 333, 687, 48, 106, 377, 687]}
{"line_number": 459, "line_type": "original", "code": "        return -u * (1 << k); // gcd is u*2^k", "entropy": 1.9306640625, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [6.69921875, 3.548828125, 3.6953125, 1.595703125, 3.39453125, 1.9541015625, 2.681640625, 1.1162109375, 0.63037109375, 0.2152099609375, 2.0625, 1.6494140625, 1.041015625, 3.697265625, 0.67138671875, 0.0019702911376953125, 0.005626678466796875, 0.09136962890625], "tokens": [351, 442, 429, 103, 319, 308, 35, 1264, 831, 293, 434, 43422, 438, 1044, 28, 36, 80, 93]}
{"line_number": 459, "line_type": "generated", "code": "\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x\n     * < 0. Returns <code>NaN</code> if <code>x</code", "entropy": 0.061981201171875, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [0.64208984375, 0.09490966796875, 0.0200042724609375, 0.0002827644348144531, 0.380859375, 0.1610107421875, 0.23828125, 0.048828125, 0.002178192138671875, 0.0005116462707519531, 0.0022296905517578125, 0.0005598068237304688, 0.0006113052368164062, 0.0748291015625, 0.0020236968994140625, 0.10272216796875, 0.0009889602661132812, 0.1768798828125, 0.0005664825439453125, 0.0026702880859375, 0.0172576904296875, 0.00197601318359375, 0.00010001659393310547, 0.037841796875, 0.0849609375, 0.00016117095947265625, 0.0003504753112792969, 0.0001589059829711914, 0.005565643310546875, 0.010162353515625, 0.27392578125, 0.52783203125, 2.110004425048828e-05, 0.0031585693359375, 0.0006937980651855469, 0.00021409988403320312, 0.00225067138671875, 0.225341796875, 0.01343536376953125, 0.003971099853515625, 0.0001327991485595703, 0.017486572265625, 0.0185394287109375, 0.00010561943054199219, 0.0011034011840820312, 0.0103912353515625, 0.0099639892578125, 0.00021445751190185547, 0.00018608570098876953, 0.0004608631134033203, 0.0006775856018066406, 2.4318695068359375e-05], "tokens": [284, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 275, 319, 333, 225, 34, 32, 3759, 333, 687, 48, 11126, 377, 687, 48, 415, 333, 687, 48, 106, 377, 687]}
{"line_number": 412, "line_type": "original", "code": "        if (u * v == 0) {", "entropy": 1.26171875, "is_bug_line": true, "sus_score": 0.15811388300841897, "per_token_entropy": [3.580078125, 3.078125, 0.07403564453125, 0.791015625, 5.9921875, 0.0643310546875, 0.07391357421875, 0.1689453125, 0.0031070709228515625, 0.00792694091796875, 0.05010986328125], "tokens": [351, 415, 308, 103, 319, 354, 610, 225, 34, 27, 301]}
{"line_number": 412, "line_type": "generated", "code": "\n    /**\n     * Returns the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to", "entropy": 0.10589599609375, "is_bug_line": true, "sus_score": 0.15811388300841897, "per_token_entropy": [1.1142578125, 0.376708984375, 0.072021484375, 0.0005421638488769531, 1.3095703125, 0.202392578125, 0.93701171875, 0.00879669189453125, 0.0160064697265625, 0.10467529296875, 0.39892578125, 0.0634765625, 0.0285186767578125, 0.0034942626953125, 0.1556396484375, 0.266357421875, 0.084716796875, 0.017303466796875, 0.00011241436004638672, 0.02752685546875, 0.036712646484375, 0.1441650390625, 0.01137542724609375, 0.00011038780212402344, 0.0007224082946777344, 0.0012969970703125, 0.01306915283203125, 0.0020732879638671875, 0.00018608570098876953, 0.0005965232849121094, 0.0004742145538330078, 0.031890869140625, 0.00014913082122802734, 0.0009794235229492188, 0.003597259521484375, 0.031494140625, 0.0008974075317382812, 5.960464477539062e-07, 0.004215240478515625, 3.135204315185547e-05, 0.0001596212387084961, 5.4836273193359375e-06, 2.0265579223632812e-06, 0.00057220458984375, 0.00048613548278808594, 0.0013065338134765625, 0.01325225830078125, 0.01143646240234375, 0.005794525146484375, 0.0002796649932861328, 0.0007410049438476562, 0.0006909370422363281], "tokens": [284, 1022, 275, 319, 3759, 322, 48299, 4942, 33482, 432, 322, 7976, 786, 432, 3134, 7515, 30, 275, 319, 1471, 322, 313, 7003, 43422, 20, 1411, 1510, 43585, 20654, 461, 41647, 275, 319, 7373, 32, 2802, 44327, 860, 225, 38, 32, 39, 32, 36, 8218, 551, 32, 1348, 8218, 438, 7254, 372]}
