{"line_number": 406, "line_type": "original", "code": "            coefficients[i] = 0;", "entropy": 2.4609375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [7.0703125, 10.5625, 0.5205078125, 0.2052001953125, 0.01165771484375, 0.046722412109375, 2.888671875, 0.032196044921875, 0.8173828125], "tokens": [1468, 26370, 77, 91, 79, 280, 225, 34, 45]}
{"line_number": 406, "line_type": "generated", "code": "\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - multiple * tableau.getEntry(sub", "entropy": 0.0810546875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.82958984375, 0.351318359375, 0.0018205642700195312, 0.0011053085327148438, 0.08819580078125, 0.0006418228149414062, 0.0262451171875, 0.0005660057067871094, 0.0012025833129882812, 0.00015354156494140625, 0.0012617111206054688, 0.0609130859375, 0.006519317626953125, 0.002185821533203125, 0.0025920867919921875, 0.0007953643798828125, 0.0017423629760742188, 0.1243896484375, 0.1640625, 3.5762786865234375e-07, 0.0004715919494628906, 0.04876708984375, 2.849102020263672e-05, 0.0006804466247558594, 0.049346923828125, 8.58306884765625e-06, 1.0728836059570312e-06, 9.5367431640625e-07, 0.00032019615173339844, 0.0020809173583984375, 0.00014138221740722656, 0.8505859375, 1.5497207641601562e-06, 0.00012171268463134766, 0.001300811767578125, 0.0003459453582763672, 0.02392578125, 8.702278137207031e-06, 7.987022399902344e-06, 3.814697265625e-06, 0.0001838207244873047, 0.0033416748046875, 0.000614166259765625, 0.313232421875, 0.9638671875, 0.11474609375, 0.154296875, 1.5854835510253906e-05, 0.006328582763671875, 0.000331878662109375, 0.0008816719055175781, 0.013519287109375], "tokens": [291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 622, 2611, 473, 594, 1987, 301, 324, 1858, 4452, 32, 470, 2711, 26, 887, 103, 416, 2352, 30, 594, 30, 1858, 4452, 32, 48895, 26, 887, 103, 416, 2352, 30, 594, 27, 429, 4609, 319, 1858, 4452, 32, 48895, 26, 1113]}
{"line_number": 407, "line_type": "original", "code": "            continue;", "entropy": 6.55859375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [3.025390625, 16.59375, 0.054718017578125], "tokens": [1468, 4036, 45]}
{"line_number": 407, "line_type": "generated", "code": "\n           .subtract(multiple * tableau.getRowVector(subtrahendRow)));\n    }\n\n    /**\n     * Adds a multiple of one row to another.\n     * <p>\n     * After application of this operation, the following will hold:\n    ", "entropy": 0.09344482421875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [1.6015625, 0.022186279296875, 0.1180419921875, 0.01222991943359375, 0.5810546875, 0.05145263671875, 0.0144500732421875, 7.510185241699219e-06, 0.0005888938903808594, 0.00022232532501220703, 0.000598907470703125, 0.00023543834686279297, 0.002384185791015625, 4.76837158203125e-06, 1.1920928955078125e-07, 2.5033950805664062e-06, 7.748603820800781e-06, 0.0977783203125, 0.10614013671875, 0.00045180320739746094, 0.1131591796875, 0.0276031494140625, 0.0198974609375, 0.00015735626220703125, 1.734375, 0.1881103515625, 0.0010814666748046875, 0.00545501708984375, 0.00997161865234375, 0.0031375885009765625, 0.0168914794921875, 0.0022068023681640625, 0.06219482421875, 0.003154754638671875, 6.520748138427734e-05, 0.03924560546875, 0.0019121170043945312, 0.0002913475036621094, 0.000759124755859375, 1.2040138244628906e-05, 0.006885528564453125, 0.0063323974609375, 0.000141143798828125, 0.00043845176696777344, 0.0010175704956054688, 0.0031585693359375, 0.00020945072174072266, 0.0005660057067871094, 0.0007691383361816406, 0.0002551078796386719, 0.0017042160034179688, 0.0002142190933227539], "tokens": [324, 638, 25330, 26, 12565, 319, 1858, 4452, 32, 30093, 2863, 26, 1113, 359, 2371, 416, 2352, 4236, 284, 320, 446, 1022, 275, 319, 15450, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275]}
{"line_number": 261, "line_type": "original", "code": "            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),", "entropy": 2.15625, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [4.70703125, 1.208984375, 7.46484375, 8.6171875, 3.8515625, 0.348388671875, 2.958984375, 1.576171875, 0.05120849609375, 0.0295257568359375, 0.00717926025390625, 1.73046875, 3.19140625, 0.373779296875, 0.1279296875, 0.0023670196533203125, 0.423828125], "tokens": [1468, 442, 537, 13935, 9012, 26, 12704, 32, 371, 8973, 101, 922, 1110, 27732, 3736, 35, 471]}
{"line_number": 261, "line_type": "generated", "code": "\n        if (col < getArtificialVariableOffset()) {\n            return basicColumns.get(col);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Checks whether the given row is basic.\n     * @param row index of", "entropy": 0.309814453125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.3525390625, 1.1884765625, 0.2000732421875, 1.2138671875, 0.703125, 1.3095703125, 1.7236328125, 0.0007114410400390625, 0.005496978759765625, 0.0065460205078125, 0.1656494140625, 0.01392364501953125, 0.1265869140625, 0.51611328125, 0.8984375, 2.13671875, 0.35498046875, 0.041778564453125, 0.00516510009765625, 0.0280303955078125, 0.050628662109375, 0.05517578125, 0.0017595291137695312, 0.76318359375, 0.5283203125, 0.06390380859375, 0.2744140625, 0.337646484375, 0.0008473396301269531, 0.023193359375, 0.0007123947143554688, 0.1285400390625, 0.0024738311767578125, 0.1629638671875, 0.03851318359375, 0.0277862548828125, 0.00020575523376464844, 1.7099609375, 0.05584716796875, 0.0684814453125, 0.0653076171875, 0.51611328125, 0.033233642578125, 0.0806884765625, 0.0159149169921875, 0.00968170166015625, 4.374980926513672e-05, 0.005649566650390625, 0.00047850608825683594, 0.01277923583984375, 0.0863037109375, 0.0009403228759765625], "tokens": [291, 415, 308, 748, 333, 622, 5271, 31251, 3818, 3457, 1157, 301, 324, 442, 6550, 7627, 32, 371, 26, 748, 293, 291, 320, 813, 301, 324, 442, 744, 45, 291, 320, 284, 320, 446, 1022, 275, 319, 17279, 4946, 322, 2702, 2698, 438, 6550, 32, 275, 319, 477, 753, 2698, 1650, 432]}
{"line_number": 339, "line_type": "original", "code": "                columnsToDrop.add(i);", "entropy": 2.345703125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [9.21875, 9.171875, 0.1207275390625, 0.018157958984375, 0.064208984375, 0.317626953125, 0.0167388916015625, 1.951171875, 0.226318359375], "tokens": [2071, 6090, 705, 6243, 32, 669, 26, 91, 293]}
{"line_number": 339, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns the index of the first column of the basic variables.\n     * @return the index of the first column of the basic variables\n     */\n    protected int getBasicVariableColumnIndex() {\n        return getArtificialVariableOffset()", "entropy": 0.390625, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.2159423828125, 0.05181884765625, 0.28955078125, 0.0633544921875, 0.034210205078125, 0.00014579296112060547, 0.841796875, 0.6533203125, 3.322265625, 0.0867919921875, 0.06005859375, 1.4921875, 1.390625, 2.0390625, 0.21484375, 2.28125, 0.1285400390625, 0.427490234375, 0.1107177734375, 0.004291534423828125, 0.10101318359375, 0.004573822021484375, 0.089599609375, 0.051361083984375, 0.0083770751953125, 0.002536773681640625, 0.006561279296875, 0.013671875, 0.0038604736328125, 0.00620269775390625, 0.0033931732177734375, 0.004184722900390625, 0.358642578125, 0.011627197265625, 0.01190185546875, 1.4765625, 0.03173828125, 0.01268768310546875, 0.61962890625, 0.962890625, 0.3212890625, 0.66943359375, 0.07855224609375, 0.0013265609741210938, 0.06060791015625, 0.1151123046875, 0.8935546875, 0.352783203125, 3.325939178466797e-05, 0.0014295578002929688, 0.00423431396484375, 0.326904296875], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 322, 1650, 432, 322, 1932, 2623, 432, 322, 6550, 4886, 32, 275, 319, 477, 601, 322, 1650, 432, 322, 1932, 2623, 432, 322, 6550, 4886, 275, 569, 284, 2522, 629, 622, 7099, 3818, 2137, 1284, 346, 301, 291, 442, 622, 5271, 31251, 3818, 3457, 346]}
{"line_number": 226, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess", "entropy": 1.4150390625, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [8.8046875, 4.7734375, 0.0106201171875, 0.032257080078125, 0.1697998046875, 0.0040740966796875, 0.88232421875, 0.005725860595703125, 0.267578125, 1.8955078125, 0.0006031990051269531, 0.0004298686981201172, 0.0142822265625, 0.02630615234375, 0.0435791015625, 0.0022411346435546875, 0.488037109375, 2.400390625, 0.0159912109375, 0.00809478759765625, 0.63037109375, 10.65625], "tokens": [2071, 5045, 32, 470, 2711, 26, 643, 30, 622, 31185, 3818, 3457, 346, 474, 28039, 1881, 18326, 429, 35, 293, 434, 35800]}
{"line_number": 226, "line_type": "generated", "code": "\n    /**\n     * Get the offset of the slack variables in the tableau.\n     * @return offset\n     */\n    protected final int getSlackVariableOffset() {\n        return numDecisionVariables + numArtificialVariables;\n    }\n\n    /**\n     * Get the", "entropy": 0.20263671875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.75, 0.07110595703125, 0.031494140625, 0.0009722709655761719, 0.311279296875, 0.1148681640625, 1.23046875, 0.8515625, 0.1041259765625, 0.640625, 0.155517578125, 0.67626953125, 0.2064208984375, 0.71826171875, 0.0027904510498046875, 0.267822265625, 0.048797607421875, 0.00762176513671875, 0.04718017578125, 0.002716064453125, 0.93603515625, 0.89453125, 0.0024166107177734375, 0.005336761474609375, 0.32421875, 0.390869140625, 0.0010318756103515625, 0.000667572021484375, 0.00025391578674316406, 3.3020973205566406e-05, 2.86102294921875e-05, 0.0005536079406738281, 0.0007805824279785156, 0.02532958984375, 0.033721923828125, 0.6845703125, 0.0265655517578125, 3.3855438232421875e-05, 0.4248046875, 0.271728515625, 0.047821044921875, 4.76837158203125e-07, 4.3272972106933594e-05, 0.10858154296875, 0.016204833984375, 0.0001552104949951172, 0.08843994140625, 0.0017824172973632812, 0.0038127899169921875, 0.00018095970153808594, 0.00701141357421875, 0.0028285980224609375], "tokens": [284, 1022, 275, 319, 1390, 322, 3401, 432, 322, 28039, 4886, 328, 322, 1858, 4452, 32, 275, 319, 477, 601, 3401, 275, 569, 284, 2522, 1158, 629, 622, 31185, 3818, 3457, 346, 301, 291, 442, 1929, 24453, 10165, 474, 1929, 5271, 31251, 10165, 45, 284, 320, 446, 1022, 275, 319, 1390, 322]}
{"line_number": 162, "line_type": "original", "code": "        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);", "entropy": 2.80859375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [4.44921875, 8.9140625, 1.3994140625, 0.026885986328125, 0.2060546875, 2.5703125, 11.4375, 0.078857421875, 4.5078125, 0.052764892578125, 3.32421875, 0.048858642578125, 0.344482421875, 1.9443359375], "tokens": [351, 2623, 8718, 32, 669, 26, 43518, 81, 7416, 81, 16188, 81, 11379, 293]}
{"line_number": 162, "line_type": "generated", "code": "\n\n            // slack variable coefficients\n            if (constraint.getRelationship() == Relationship.EQ) {\n                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar, 1);\n                artificialVar++;\n            } else {\n                matrix", "entropy": 0.239990234375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.413818359375, 0.0380859375, 1.9658203125, 0.34765625, 0.1673583984375, 0.1343994140625, 1.962890625, 0.10498046875, 0.490234375, 0.018585205078125, 0.129638671875, 0.0087890625, 0.043243408203125, 0.1590576171875, 0.004390716552734375, 3.6716461181640625e-05, 1.10546875, 0.2476806640625, 0.001506805419921875, 0.1148681640625, 0.394287109375, 0.00011265277862548828, 0.00383758544921875, 0.00045943260192871094, 0.0003046989440917969, 0.01160430908203125, 0.00022971630096435547, 0.38818359375, 1.474609375, 0.006183624267578125, 0.00998687744140625, 0.03094482421875, 0.081787109375, 0.0428466796875, 0.050872802734375, 5.960464477539062e-07, 8.940696716308594e-06, 0.07452392578125, 0.3232421875, 0.00200653076171875, 0.06268310546875, 0.1343994140625, 0.367919921875, 9.417533874511719e-06, 9.34600830078125e-05, 0.08599853515625, 0.096435546875, 0.0007214546203613281, 0.283447265625, 0.50048828125, 0.086669921875, 0.50634765625], "tokens": [1064, 434, 28039, 2677, 26370, 324, 415, 308, 12704, 32, 371, 13175, 346, 610, 38246, 32, 2697, 27, 301, 400, 5045, 32, 470, 2711, 26, 643, 30, 622, 5271, 31251, 3818, 3457, 346, 474, 5549, 31251, 1881, 30, 225, 35, 293, 400, 5549, 31251, 1881, 3334, 324, 320, 813, 301, 400, 5045]}
{"line_number": 199, "line_type": "original", "code": "            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,", "entropy": 1.4833984375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [3.939453125, 9.1640625, 0.1585693359375, 0.157958984375, 0.1905517578125, 0.01097869873046875, 5.80859375, 0.0677490234375, 0.04931640625, 3.716796875, 0.74755859375, 0.0025234222412109375, 0.001735687255859375, 0.10797119140625, 2.5546875, 0.0179290771484375, 0.00434112548828125, 0.004825592041015625], "tokens": [1468, 5045, 32, 470, 2711, 26, 108, 1284, 30, 622, 31185, 3818, 3457, 346, 429, 225, 35, 30]}
{"line_number": 199, "line_type": "generated", "code": "\n            normalized.add(new LinearConstraint(constraint.getCoefficients(),\n                constraint.getValue() - getInvertedCoefficientSum(constraint.getCoefficients()),\n                constraint.getRelationship()));\n        }\n        return normalized;\n    }\n\n    /**\n     * Get", "entropy": 0.18408203125, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.26513671875, 1.068359375, 0.005382537841796875, 0.0130615234375, 0.00914764404296875, 1.1328125, 0.050811767578125, 0.004756927490234375, 0.0225677490234375, 0.317138671875, 0.278076171875, 0.04022216796875, 0.084228515625, 0.00025963783264160156, 0.155517578125, 0.80029296875, 0.61767578125, 0.0008597373962402344, 0.89208984375, 1.0517578125, 0.43359375, 0.63818359375, 0.24609375, 0.0041351318359375, 0.02423095703125, 0.004138946533203125, 0.002559661865234375, 0.024017333984375, 0.0033206939697265625, 0.002376556396484375, 0.00011622905731201172, 3.910064697265625e-05, 0.02752685546875, 0.044189453125, 0.0278167724609375, 0.0002777576446533203, 0.0015230178833007812, 0.00015807151794433594, 0.044342041015625, 0.100341796875, 0.0011320114135742188, 0.1768798828125, 0.0079498291015625, 0.0164031982421875, 0.0007352828979492188, 0.01160430908203125, 0.0016889572143554688, 0.219970703125, 0.032135009765625, 0.021209716796875, 5.3048133850097656e-05, 0.638671875], "tokens": [324, 17666, 32, 669, 26, 890, 13935, 9012, 26, 12704, 32, 371, 8973, 101, 1026, 400, 13118, 32, 6682, 346, 429, 622, 383, 17445, 8973, 4934, 26, 12704, 32, 371, 8973, 101, 6182, 400, 13118, 32, 371, 13175, 5073, 291, 320, 291, 442, 17666, 45, 284, 320, 446, 1022, 275, 319, 1390]}
{"line_number": 215, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() - 1,", "entropy": 1.37890625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.55859375, 8.2421875, 0.0816650390625, 0.12225341796875, 0.081787109375, 0.0034160614013671875, 0.389404296875, 0.00498199462890625, 0.340087890625, 1.3916015625, 0.0004429817199707031, 0.0007686614990234375, 0.0150604248046875, 6.17578125, 0.028656005859375, 0.00388336181640625, 0.003719329833984375], "tokens": [2071, 5045, 32, 470, 2711, 26, 643, 30, 622, 31185, 3818, 3457, 346, 429, 225, 35, 30]}
{"line_number": 215, "line_type": "generated", "code": "\n        return constraint;\n    }\n\n    /**\n     * Get the sum of the coefficients of the decision variables.\n     * @param coefficients array of coefficients\n     * @return sum of the coefficients of the decision variables\n     */\n    private double getInvertedCoefficientSum(", "entropy": 0.305419921875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.32373046875, 0.1943359375, 0.031341552734375, 0.02252197265625, 0.06005859375, 0.0019969940185546875, 0.2410888671875, 0.048248291015625, 0.023895263671875, 8.96453857421875e-05, 0.708984375, 0.2017822265625, 1.10546875, 0.023406982421875, 0.162841796875, 0.98681640625, 0.97119140625, 0.56982421875, 2.822265625, 0.031585693359375, 1.2080078125, 0.08636474609375, 0.004047393798828125, 0.0916748046875, 0.2047119140625, 0.09039306640625, 2.224609375, 0.1624755859375, 0.308349609375, 0.248779296875, 0.001194000244140625, 0.00046896934509277344, 0.006664276123046875, 0.265380859375, 0.14208984375, 0.63232421875, 0.2166748046875, 0.73291015625, 0.035125732421875, 0.0234832763671875, 0.0031566619873046875, 0.05657958984375, 0.020263671875, 0.0180511474609375, 0.267333984375, 0.1099853515625, 0.00408935546875, 0.18212890625, 3.6954879760742188e-06, 9.238719940185547e-05, 3.147125244140625e-05, 0.0009331703186035156], "tokens": [291, 442, 13118, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 3632, 432, 322, 26370, 432, 322, 17200, 4886, 32, 275, 319, 477, 753, 26370, 1417, 432, 26370, 275, 319, 477, 601, 3632, 432, 322, 26370, 432, 322, 17200, 4886, 275, 569, 284, 945, 2064, 622, 383, 17445, 8973, 4934, 26]}
{"line_number": 298, "line_type": "original", "code": "        double sum = 0;", "entropy": 1.8134765625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [2.71875, 6.015625, 3.232421875, 0.038970947265625, 0.1727294921875, 0.00260162353515625, 0.51171875], "tokens": [351, 2064, 3632, 280, 225, 34, 45]}
{"line_number": 298, "line_type": "generated", "code": "\n          }\n        }\n\n        // drop the columns\n        dropColumns(columnsToDrop);\n    }\n\n    /**\n     * Removes the phase 2 objective function and the non-basic artificial variables\n     * from this tableau.\n     */\n    protected void dropPhase", "entropy": 0.322021484375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.6376953125, 0.0036106109619140625, 0.05987548828125, 0.001560211181640625, 0.30126953125, 1.3583984375, 1.4501953125, 0.68798828125, 0.9306640625, 0.38671875, 2.056640625, 0.168212890625, 0.042755126953125, 0.0217437744140625, 4.839897155761719e-05, 2.3245811462402344e-05, 0.055877685546875, 0.2274169921875, 0.0022830963134765625, 0.142578125, 0.0275115966796875, 0.030975341796875, 3.135204315185547e-05, 2.474609375, 0.28466796875, 1.3955078125, 0.007213592529296875, 0.159423828125, 0.1514892578125, 0.03167724609375, 1.0771484375, 0.552734375, 0.60498046875, 0.00940704345703125, 0.046630859375, 0.464599609375, 0.0005903244018554688, 0.05133056640625, 0.6787109375, 0.00047588348388671875, 0.00848388671875, 0.016845703125, 0.002544403076171875, 0.00014472007751464844, 0.01366424560546875, 0.044219970703125, 0.03167724609375, 0.007030487060546875, 0.0384521484375, 0.006908416748046875, 0.0011692047119140625, 0.0006933212280273438], "tokens": [616, 320, 291, 320, 584, 434, 6278, 322, 6090, 291, 6278, 7627, 26, 6057, 705, 6243, 293, 284, 320, 446, 1022, 275, 319, 24992, 322, 11225, 225, 36, 25110, 667, 461, 322, 2979, 31, 6390, 5549, 31251, 4886, 275, 319, 645, 458, 1858, 4452, 32, 275, 569, 284, 2522, 763, 6278, 12230]}
{"line_number": 299, "line_type": "original", "code": "        for (double coefficient : coefficients.toArray()) {", "entropy": 1.7197265625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [3.458984375, 4.09765625, 0.016693115234375, 6.08203125, 1.896484375, 0.019134521484375, 1.3046875, 1.91015625, 0.08331298828125, 0.0037899017333984375, 0.048675537109375], "tokens": [351, 436, 308, 2627, 17134, 499, 26370, 32, 14320, 1157, 301]}
{"line_number": 299, "line_type": "generated", "code": "\n        }\n\n        // remove the columns\n        for (int i = 0; i < columnsToDrop.size(); i++) {\n            int column = columnsToDrop.get(i);\n            tableau.setColumn(column, new ArrayRealVector", "entropy": 0.3837890625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.5830078125, 0.72412109375, 0.77392578125, 0.97412109375, 1.79296875, 0.654296875, 1.3359375, 0.66845703125, 0.64794921875, 0.00701904296875, 0.58056640625, 0.96826171875, 0.08843994140625, 1.0361328125, 0.0260467529296875, 0.009857177734375, 0.0032520294189453125, 0.0036220550537109375, 0.11083984375, 0.0018215179443359375, 3.7670135498046875e-05, 0.0003333091735839844, 5.054473876953125e-05, 0.004486083984375, 0.11199951171875, 0.005313873291015625, 0.0018405914306640625, 0.38916015625, 1.37109375, 1.7451171875, 0.1424560546875, 0.01120758056640625, 3.5762786865234375e-05, 2.1457672119140625e-06, 0.0004820823669433594, 0.0084991455078125, 0.00010907649993896484, 0.00787353515625, 0.0144195556640625, 0.091552734375, 0.94580078125, 4.839897155761719e-05, 0.377197265625, 0.7265625, 0.0261993408203125, 0.0209503173828125, 0.6005859375, 0.009185791015625, 2.091796875, 0.138916015625, 0.1119384765625, 0.00017201900482177734], "tokens": [291, 320, 584, 434, 3345, 322, 6090, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 6090, 705, 6243, 32, 891, 473, 595, 1987, 301, 324, 629, 2623, 280, 6090, 705, 6243, 32, 371, 26, 91, 293, 324, 1858, 4452, 32, 470, 2137, 26, 2592, 30, 537, 2629, 6877, 2863]}
{"line_number": 300, "line_type": "original", "code": "            sum -= coefficient;", "entropy": 5.0, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.88671875, 9.1875, 3.037109375, 5.3203125, 0.57373046875], "tokens": [1468, 3632, 5912, 17134, 45]}
{"line_number": 300, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the number of artificial variables in this tableau.\n     * @return the number of artificial variables in this tableau\n     */\n    protected int getNumArtificialVariables() {\n        return this.numArtificialVariables;", "entropy": 0.2318115234375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [1.251953125, 0.0093841552734375, 0.1590576171875, 0.03668212890625, 0.03570556640625, 6.246566772460938e-05, 1.9130859375, 0.31005859375, 2.189453125, 0.0031948089599609375, 1.51953125, 0.00795745849609375, 0.00829315185546875, 0.7880859375, 0.164306640625, 0.09375, 0.0014591217041015625, 0.07025146484375, 0.04144287109375, 0.0027790069580078125, 0.0278472900390625, 0.0007781982421875, 0.73388671875, 0.0212554931640625, 0.004283905029296875, 0.014892578125, 0.0036773681640625, 0.0034427642822265625, 0.363037109375, 0.01132965087890625, 0.0017499923706054688, 0.0006351470947265625, 0.59814453125, 0.004634857177734375, 0.005939483642578125, 0.484619140625, 0.65771484375, 0.0005197525024414062, 0.0010080337524414062, 6.9141387939453125e-06, 0.00010645389556884766, 0.0005474090576171875, 0.0006203651428222656, 0.03790283203125, 0.0171661376953125, 0.442626953125, 7.700920104980469e-05, 0.005584716796875, 0.0005168914794921875, 8.58306884765625e-06, 0.0003476142883300781, 0.0037994384765625], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 5549, 31251, 4886, 328, 458, 1858, 4452, 32, 275, 319, 477, 601, 322, 1451, 432, 5549, 31251, 4886, 328, 458, 1858, 4452, 275, 569, 284, 2522, 629, 44929, 5271, 31251, 10165, 346, 301, 291, 442, 458, 32, 1516, 5271, 31251, 10165, 45]}
{"line_number": 302, "line_type": "original", "code": "        return sum;", "entropy": 4.20703125, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [2.900390625, 4.125, 8.6484375, 1.1484375], "tokens": [351, 442, 3632, 45]}
{"line_number": 302, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the index of the first non-artificial variable in the objective function.\n     * @return the index of the first non-artificial variable in the objective function.\n     */\n    protected int getFirstNonArtificialVariable", "entropy": 0.315185546875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [1.3837890625, 0.02105712890625, 0.205078125, 0.038604736328125, 0.039215087890625, 4.1961669921875e-05, 1.875, 0.293701171875, 3.01953125, 0.13330078125, 0.06658935546875, 0.8681640625, 1.001953125, 0.0362548828125, 0.407958984375, 0.0014810562133789062, 0.21142578125, 0.6298828125, 0.293701171875, 0.66357421875, 0.2470703125, 0.2314453125, 0.0218658447265625, 0.004852294921875, 0.07489013671875, 0.0158538818359375, 0.57861328125, 0.03369140625, 0.03424072265625, 0.00411224365234375, 0.007183074951171875, 0.004535675048828125, 0.0021076202392578125, 0.0003371238708496094, 0.0001513957977294922, 0.0016946792602539062, 0.0273895263671875, 0.0022735595703125, 0.0012950897216796875, 0.0070648193359375, 0.69970703125, 0.0035533905029296875, 0.01125335693359375, 0.007579803466796875, 0.330078125, 0.23486328125, 0.11297607421875, 1.349609375, 0.035888671875, 0.209716796875, 0.0005698204040527344, 0.908203125], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 1650, 432, 322, 1932, 2979, 31, 502, 31251, 2677, 328, 322, 25110, 667, 32, 275, 319, 477, 601, 322, 1650, 432, 322, 1932, 2979, 31, 502, 31251, 2677, 328, 322, 25110, 667, 32, 275, 569, 284, 2522, 629, 622, 3472, 3910, 5271, 31251, 3818]}
{"line_number": 347, "line_type": "original", "code": "            columnsToDrop.add(col);", "entropy": 3.00390625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [6.8046875, 11.125, 1.13671875, 1.3623046875, 0.426025390625, 0.1585693359375, 0.00948333740234375, 5.83984375, 0.1673583984375], "tokens": [1468, 6090, 705, 6243, 32, 669, 26, 748, 293]}
{"line_number": 347, "line_type": "generated", "code": "    }\n\n    /**\n     * Get the current value of the objective function.\n     *\n     * @return current value of the objective function\n     */\n    protected double getObjectiveValue() {\n        double value = 0;\n        for (int i = 0", "entropy": 0.273193359375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [2.3046875, 0.68798828125, 0.322998046875, 0.1038818359375, 0.05242919921875, 0.0004839897155761719, 1.0849609375, 0.08062744140625, 1.2705078125, 1.150390625, 0.2113037109375, 0.04364013671875, 0.15771484375, 0.0948486328125, 0.2261962890625, 0.032501220703125, 0.0010786056518554688, 0.212158203125, 6.99758529663086e-05, 0.004154205322265625, 0.009246826171875, 0.85009765625, 0.2015380859375, 0.0229949951171875, 0.09820556640625, 0.002410888671875, 0.003971099853515625, 0.09857177734375, 0.06793212890625, 0.0177001953125, 0.358154296875, 0.0419921875, 0.1986083984375, 0.173828125, 0.1514892578125, 0.0032215118408203125, 0.00762176513671875, 0.5029296875, 1.2666015625, 0.72509765625, 0.0037822723388671875, 0.1357421875, 0.0006766319274902344, 0.76611328125, 0.09185791015625, 0.07086181640625, 0.001312255859375, 0.031829833984375, 0.056732177734375, 0.0011854171752929688, 0.182861328125, 0.01441192626953125], "tokens": [264, 320, 446, 1022, 275, 319, 1390, 322, 1550, 786, 432, 322, 25110, 667, 32, 275, 319, 275, 319, 477, 601, 1550, 786, 432, 322, 25110, 667, 275, 569, 284, 2522, 2064, 622, 33312, 882, 346, 301, 291, 2064, 786, 280, 225, 34, 45, 291, 436, 308, 410, 595, 280, 225, 34]}
{"line_number": 224, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack", "entropy": 1.458984375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [8.234375, 10.6640625, 0.15380859375, 0.57275390625, 0.343994140625, 0.00962066650390625, 2.126953125, 0.007171630859375, 0.650390625, 0.55810546875, 0.0002779960632324219, 0.00038623809814453125, 0.011260986328125, 0.057830810546875, 0.027618408203125, 0.0007009506225585938, 0.1539306640625, 3.892578125, 0.019012451171875, 0.0246734619140625, 4.7421875, 0.022613525390625, 1.291015625], "tokens": [2071, 5045, 32, 470, 2711, 26, 643, 30, 622, 31185, 3818, 3457, 346, 474, 28039, 1881, 18326, 225, 35, 293, 225, 434, 28039]}
{"line_number": 224, "line_type": "generated", "code": "\n        return 1;\n    }\n\n    /**\n     * Get the number of slack variables in this tableau.\n     * @return number of slack variables\n     */\n    protected final int getNumSlackVariables() {", "entropy": 0.2122802734375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [1.736328125, 0.1258544921875, 0.11444091796875, 0.71728515625, 0.036773681640625, 0.0872802734375, 0.0006628036499023438, 0.126708984375, 0.03240966796875, 0.016326904296875, 0.000244140625, 0.18408203125, 0.072509765625, 1.6181640625, 0.0022430419921875, 1.091796875, 0.01461029052734375, 0.452880859375, 0.04913330078125, 0.02069091796875, 0.00025081634521484375, 0.03765869140625, 0.0316162109375, 0.0086822509765625, 0.01904296875, 0.0102996826171875, 0.98046875, 0.00421142578125, 0.0296783447265625, 0.004878997802734375, 0.3095703125, 0.002857208251953125, 0.0079803466796875, 0.263427734375, 0.3623046875, 0.0009260177612304688, 0.117919921875, 0.0044097900390625, 0.0002734661102294922, 0.00348663330078125, 0.0029468536376953125], "tokens": [291, 442, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 28039, 4886, 328, 458, 1858, 4452, 32, 275, 319, 477, 601, 1451, 432, 28039, 4886, 275, 569, 284, 2522, 1158, 629, 44929, 31185, 10165, 346, 301]}
{"line_number": 332, "line_type": "original", "code": "        List<Integer> columnsToDrop = new ArrayList<Integer>();", "entropy": 1.2822265625, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [3.515625, 8.4140625, 0.033172607421875, 0.509765625, 0.0010919570922851562, 3.333984375, 1.2861328125, 0.1827392578125, 0.00616455078125, 0.05450439453125, 0.0222930908203125, 0.5068359375, 0.0023784637451171875, 0.0836181640625], "tokens": [351, 1682, 46, 3061, 48, 6090, 705, 6243, 280, 537, 5059, 46, 3061, 2923]}
{"line_number": 332, "line_type": "generated", "code": "\n        return (optimality == OPTIMAL);\n    }\n\n    /**\n     * Returns whether the problem is at a feasible state.\n     * @return whether the model has been solved\n     */\n    boolean isFeasible() {", "entropy": 0.31787109375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.155517578125, 0.6015625, 2.111328125, 2.396484375, 1.3955078125, 0.7294921875, 1.0263671875, 0.00023949146270751953, 0.01200103759765625, 0.81005859375, 0.057647705078125, 0.0006670951843261719, 0.15283203125, 0.0426025390625, 0.0362548828125, 0.0001366138458251953, 0.66748046875, 0.34765625, 0.08843994140625, 0.09674072265625, 0.07867431640625, 0.75390625, 0.60009765625, 0.6865234375, 0.01537322998046875, 0.0289154052734375, 0.02911376953125, 0.01268768310546875, 0.0010356903076171875, 0.013916015625, 0.0008540153503417969, 0.01702880859375, 0.030731201171875, 0.231689453125, 0.78369140625, 0.08575439453125, 0.2196044921875, 0.2022705078125, 0.007289886474609375, 0.002727508544921875, 0.0765380859375, 0.001094818115234375, 0.0087127685546875, 0.0007114410400390625, 0.0009355545043945312, 0.0011034011840820312], "tokens": [291, 442, 308, 42379, 543, 610, 9361, 12551, 726, 293, 284, 320, 446, 1022, 275, 319, 3759, 4946, 322, 3708, 438, 821, 312, 5246, 38294, 1603, 32, 275, 319, 477, 601, 4946, 322, 1542, 1401, 2583, 19479, 275, 569, 284, 1905, 438, 9008, 38294, 346, 301]}
{"line_number": 333, "line_type": "original", "code": "        columnsToDrop.add(0);", "entropy": 2.771484375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [3.18359375, 13.421875, 0.1798095703125, 0.050933837890625, 0.04803466796875, 0.038543701171875, 0.006343841552734375, 7.5, 0.501953125], "tokens": [351, 6090, 705, 6243, 32, 669, 26, 34, 293]}
{"line_number": 333, "line_type": "generated", "code": "\n        }\n        return true;\n    }\n\n    /**\n     * Returns the solution vector.\n     * @return the solution vector\n     */\n    RealVector getSolutionVector() {\n        return tableau.getRowVector(0);\n    }\n\n    /**\n     * Returns the", "entropy": 0.3115234375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.8564453125, 0.00982666015625, 0.1617431640625, 0.11199951171875, 0.2366943359375, 0.010162353515625, 0.044708251953125, 0.0014677047729492188, 0.2734375, 0.09039306640625, 0.039581298828125, 0.0004324913024902344, 1.0498046875, 0.64990234375, 2.34765625, 2.123046875, 1.1494140625, 0.22216796875, 0.0011320114135742188, 0.08258056640625, 0.018096923828125, 0.09014892578125, 0.03955078125, 0.0243377685546875, 0.1727294921875, 0.5361328125, 0.0055999755859375, 0.666015625, 0.0020618438720703125, 0.00843048095703125, 0.04754638671875, 0.436767578125, 0.00428009033203125, 0.005214691162109375, 0.0924072265625, 0.81689453125, 1.525390625, 3.170967102050781e-05, 0.00354766845703125, 0.72021484375, 0.07196044921875, 0.00046515464782714844, 0.34130859375, 0.15283203125, 0.012237548828125, 0.00013959407806396484, 0.2008056640625, 0.06085205078125, 0.033477783203125, 0.0003066062927246094, 0.548828125, 0.1043701171875], "tokens": [291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 5295, 4026, 32, 275, 319, 477, 601, 322, 5295, 4026, 275, 569, 284, 11443, 2863, 622, 13628, 2863, 346, 301, 291, 442, 1858, 4452, 32, 30093, 2863, 26, 34, 293, 284, 320, 446, 1022, 275, 319, 3759, 322]}
{"line_number": 336, "line_type": "original", "code": "        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {", "entropy": 0.8525390625, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [3.869140625, 4.83984375, 0.01435089111328125, 0.08038330078125, 0.2431640625, 0.006336212158203125, 1.1171875, 0.027587890625, 0.00012695789337158203, 0.087890625, 0.008819580078125, 0.0035533905029296875, 0.25390625, 7.08984375, 0.000732421875, 0.0706787109375, 0.007328033447265625, 0.133544921875, 0.01438140869140625, 0.01015472412109375, 0.0198822021484375], "tokens": [351, 436, 308, 410, 595, 280, 44929, 33312, 10905, 473, 595, 333, 622, 5271, 31251, 3818, 3457, 473, 595, 1987, 301]}
{"line_number": 336, "line_type": "generated", "code": "\n            }\n        }\n        return true;", "entropy": 0.152099609375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.433837890625, 0.323974609375, 0.17041015625, 0.0005440711975097656, 0.2261962890625, 0.0364990234375, 0.0216522216796875, 0.003231048583984375], "tokens": [324, 320, 291, 320, 291, 442, 861, 45]}
{"line_number": 337, "line_type": "original", "code": "            final double entry = tableau.getEntry(0, i);", "entropy": 0.81787109375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [3.923828125, 5.015625, 0.1383056640625, 1.4326171875, 0.23291015625, 0.2490234375, 0.0005917549133300781, 0.0148162841796875, 0.001308441162109375, 0.0035686492919921875, 0.373779296875, 0.00030803680419921875, 0.0269927978515625, 0.036285400390625], "tokens": [1468, 1158, 2064, 3414, 280, 1858, 4452, 32, 48895, 26, 34, 30, 595, 293]}
{"line_number": 337, "line_type": "generated", "code": "\n        }\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is at an infeasible state.\n     * @return whether the model is infeasible\n     */\n    boolean isInfeasible() {\n        for (int i = 0", "entropy": 0.1612548828125, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.25146484375, 0.047149658203125, 0.220703125, 0.050384521484375, 0.034454345703125, 0.001922607421875, 0.07366943359375, 0.00104522705078125, 0.2060546875, 0.081298828125, 0.030792236328125, 0.00017440319061279297, 0.79150390625, 0.91357421875, 0.1844482421875, 0.177001953125, 0.0849609375, 0.90771484375, 0.7236328125, 0.33837890625, 0.0003974437713623047, 0.01319122314453125, 0.036895751953125, 0.02783203125, 0.016815185546875, 0.0009183883666992188, 0.030029296875, 0.0037784576416015625, 0.0347900390625, 0.035736083984375, 0.2418212890625, 0.48583984375, 0.0899658203125, 0.03753662109375, 0.0030765533447265625, 0.050445556640625, 0.00927734375, 0.00634002685546875, 0.09381103515625, 0.16064453125, 0.00018346309661865234, 0.0002665519714355469, 0.003520965576171875, 0.0014715194702148438, 0.076171875, 0.66748046875, 0.0007991790771484375, 0.0138397216796875, 0.0872802734375, 0.0007338523864746094, 0.91162109375, 0.1185302734375], "tokens": [291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 4946, 322, 3708, 438, 821, 600, 328, 1225, 38294, 1603, 32, 275, 319, 477, 601, 4946, 322, 1542, 438, 328, 1225, 38294, 275, 569, 284, 1905, 43349, 1225, 38294, 346, 301, 291, 436, 308, 410, 595, 280, 225, 34]}
{"line_number": 338, "line_type": "original", "code": "            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {", "entropy": 0.92822265625, "is_bug_line": true, "sus_score": 0.23570226039551587, "per_token_entropy": [6.1171875, 1.732421875, 0.1607666015625, 2.685546875, 0.0015516281127929688, 1.107421875, 0.01497650146484375, 2.40234375, 0.00846099853515625, 0.09161376953125, 0.2186279296875, 0.041839599609375, 0.018524169921875, 4.203125, 0.0298004150390625, 2.6941299438476562e-05, 0.03533935546875, 1.451171875, 0.0023403167724609375, 0.004215240478515625, 0.01678466796875, 0.08038330078125], "tokens": [1468, 415, 308, 20398, 32, 23908, 26, 3038, 30, 225, 34, 86, 30, 1769, 28522, 1069, 27, 848, 225, 34, 27, 301]}
{"line_number": 338, "line_type": "generated", "code": "\n        return true;\n    }\n\n    /**\n     * Returns the value of the objective function at the current solution.\n     * @return the value of the objective function at the current solution\n     */\n    double getObjectiveValue() {\n        double value = 0;", "entropy": 0.244140625, "is_bug_line": true, "sus_score": 0.23570226039551587, "per_token_entropy": [0.2220458984375, 0.341064453125, 0.08489990234375, 0.00356292724609375, 0.1292724609375, 0.0017385482788085938, 0.2464599609375, 0.077880859375, 0.0301361083984375, 0.00014889240264892578, 0.80615234375, 0.71337890625, 1.8701171875, 0.13525390625, 0.1075439453125, 0.36669921875, 0.1024169921875, 0.8896484375, 0.270751953125, 1.8232421875, 0.72509765625, 0.1097412109375, 0.040008544921875, 0.00275421142578125, 0.11041259765625, 0.019195556640625, 0.0662841796875, 0.10498046875, 0.0027179718017578125, 0.0012607574462890625, 0.0073089599609375, 0.005584716796875, 0.1131591796875, 0.001873016357421875, 0.003459930419921875, 0.0012941360473632812, 0.5400390625, 0.2254638671875, 0.01934814453125, 0.3154296875, 0.1041259765625, 0.1844482421875, 0.1826171875, 0.0030307769775390625, 0.00799560546875, 0.0440673828125, 0.23486328125, 0.5029296875, 0.0024623870849609375, 0.095703125, 0.0006165504455566406, 0.6953125], "tokens": [291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 786, 432, 322, 25110, 667, 821, 322, 1550, 5295, 32, 275, 319, 477, 601, 322, 786, 432, 322, 25110, 667, 821, 322, 1550, 5295, 275, 569, 284, 2064, 622, 33312, 882, 346, 301, 291, 2064, 786, 280, 225, 34, 45]}
{"line_number": 344, "line_type": "original", "code": "        for (int i = 0; i < getNumArtificialVariables(); i++) {", "entropy": 0.5986328125, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [3.142578125, 3.7734375, 0.06378173828125, 0.0816650390625, 0.131103515625, 0.00608062744140625, 0.56787109375, 0.04547119140625, 0.026092529296875, 0.001972198486328125, 0.032806396484375, 0.383544921875, 2.9140625, 0.00040149688720703125, 0.0367431640625, 0.0396728515625, 0.0472412109375, 0.007110595703125, 0.07635498046875], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 5271, 31251, 10165, 473, 595, 1987, 301]}
{"line_number": 344, "line_type": "generated", "code": "\n     * @return the solution\n     */\n    RealVector getSolution() {\n        double[] solution = new double[getNumVariables()];\n        for (int i = 0; i < getNumObjectiveFunctions(); i++) {\n            solution[i] = tableau", "entropy": 0.2459716796875, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.63720703125, 0.0267181396484375, 0.1556396484375, 0.08013916015625, 0.31591796875, 1.0869140625, 0.53857421875, 0.59619140625, 0.039794921875, 0.962890625, 0.0063018798828125, 0.0755615234375, 0.034027099609375, 0.038665771484375, 0.031402587890625, 0.197265625, 1.703125, 0.0049285888671875, 0.79052734375, 0.04205322265625, 0.025543212890625, 0.0018787384033203125, 0.0023193359375, 1.4912109375, 1.2802734375, 0.023162841796875, 0.138427734375, 0.275634765625, 0.001129150390625, 0.0215606689453125, 0.08831787109375, 0.0012874603271484375, 0.379150390625, 0.0299530029296875, 0.01082611083984375, 0.0019378662109375, 0.0015764236450195312, 0.185546875, 0.8544921875, 1.7523765563964844e-05, 0.010040283203125, 0.004573822021484375, 0.001071929931640625, 0.0002551078796386719, 0.041168212890625, 0.07818603515625, 0.00131988525390625, 0.0294189453125, 0.01113128662109375, 0.0030002593994140625, 0.43310546875, 7.152557373046875e-07], "tokens": [275, 319, 477, 601, 322, 5295, 275, 569, 284, 11443, 2863, 622, 13628, 346, 301, 291, 2064, 1178, 5295, 280, 537, 2064, 77, 15207, 10165, 22086, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 33312, 10905, 473, 595, 1987, 301, 324, 5295, 77, 91, 79, 280, 1858, 4452]}
{"line_number": 345, "line_type": "original", "code": "          int col = i + getArtificialVariableOffset();", "entropy": 2.044921875, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [6.96875, 4.6875, 4.32421875, 0.125244140625, 4.359375, 1.291015625, 2.052734375, 0.56591796875, 0.0011949539184570312, 0.0298309326171875, 0.001953125, 0.119873046875], "tokens": [2033, 629, 932, 280, 595, 474, 622, 5271, 31251, 3818, 3457, 473]}
{"line_number": 345, "line_type": "generated", "code": "\n     */\n    RealVector getSolution() {\n        return solution;\n    }\n\n    /**\n     * Get the current objective value.\n     *\n     * @return the current objective value\n     */\n    double getObjectiveValue() {\n        double value = 0d;", "entropy": 0.322021484375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.66357421875, 0.1981201171875, 0.0255889892578125, 1.123046875, 0.009613037109375, 0.1932373046875, 0.142822265625, 0.0606689453125, 0.0211639404296875, 0.17236328125, 1.544921875, 1.650390625, 0.1004638671875, 0.10919189453125, 0.0003712177276611328, 0.288330078125, 0.06463623046875, 0.05523681640625, 0.00066375732421875, 0.72802734375, 0.054962158203125, 0.96044921875, 1.5927734375, 0.413818359375, 0.1265869140625, 0.058197021484375, 0.0019273757934570312, 0.21875, 7.462501525878906e-05, 0.0022068023681640625, 0.0022678375244140625, 1.74609375, 0.363037109375, 0.08758544921875, 0.037628173828125, 0.4521484375, 0.043792724609375, 0.00830078125, 0.136474609375, 0.0860595703125, 0.046112060546875, 0.047698974609375, 0.00151824951171875, 0.0012674331665039062, 0.0184326171875, 1.4306640625, 0.6748046875, 0.0024967193603515625, 0.12255859375, 0.0008029937744140625, 0.8642578125, 0.0006947517395019531], "tokens": [275, 569, 284, 11443, 2863, 622, 13628, 346, 301, 291, 442, 5295, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 1550, 25110, 786, 32, 275, 319, 275, 319, 477, 601, 322, 1550, 25110, 786, 275, 569, 284, 2064, 622, 33312, 882, 346, 301, 291, 2064, 786, 280, 225, 34, 86, 45]}
