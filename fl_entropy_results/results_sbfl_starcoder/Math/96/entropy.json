{"line_number": 277, "line_type": "original", "code": "        if (isNaN()) {", "entropy": 1.7734375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [3.849609375, 3.9453125, 0.1824951171875, 2.333984375, 0.289794921875, 0.036407470703125], "tokens": [351, 415, 308, 26821, 1157, 301]}
{"line_number": 277, "line_type": "generated", "code": "\n    /**\n     * Test for the equality of two Complex objects.\n     * <p>\n     * If both the real and imaginary parts of two Complex numbers\n     * are exactly the same, and neither is <code>Double.NaN</code>, the", "entropy": 0.105224609375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [1.2041015625, 0.1868896484375, 0.08306884765625, 0.00016605854034423828, 2.76953125, 0.0218353271484375, 0.2000732421875, 0.1151123046875, 0.00676727294921875, 0.0245361328125, 0.04144287109375, 0.0882568359375, 0.1473388671875, 0.017974853515625, 0.0014514923095703125, 0.051788330078125, 0.0016222000122070312, 0.0005345344543457031, 0.007732391357421875, 1.5854835510253906e-05, 0.0887451171875, 0.0288848876953125, 0.00226593017578125, 0.00027298927307128906, 0.0008578300476074219, 0.00017404556274414062, 7.748603820800781e-06, 0.0023040771484375, 0.00032591819763183594, 0.0011777877807617188, 0.01092529296875, 0.0146484375, 0.006256103515625, 9.548664093017578e-05, 0.020721435546875, 0.01428985595703125, 0.0002073049545288086, 0.0002830028533935547, 0.076904296875, 0.041168212890625, 0.0035266876220703125, 0.0003902912139892578, 0.012176513671875, 0.006847381591796875, 0.00010442733764648438, 0.1639404296875, 2.396106719970703e-05, 0.00023639202117919922, 9.560585021972656e-05, 5.817413330078125e-05, 0.0010967254638671875, 0.004070281982421875], "tokens": [284, 1022, 275, 319, 2108, 436, 322, 28599, 432, 3134, 19915, 4684, 32, 275, 319, 333, 98, 48, 275, 319, 1670, 4335, 322, 4011, 461, 17463, 3172, 8710, 432, 3134, 19915, 7515, 275, 319, 884, 11114, 322, 2432, 30, 461, 25209, 438, 333, 687, 48, 4075, 32, 11126, 377, 687, 2717, 322]}
{"line_number": 280, "line_type": "original", "code": "        return 37 * (17 * MathUtils.hash(imaginary) + ", "entropy": 2.244140625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [3.59375, 1.8310546875, 4.58203125, 8.71875, 4.8671875, 2.421875, 1.8779296875, 3.6796875, 2.005859375, 0.30126953125, 4.02734375, 1.2822265625, 0.0008006095886230469, 0.814453125, 0.032012939453125, 2.2734375, 0.0023365020751953125, 0.20068359375, 0.263427734375, 2.087890625], "tokens": [351, 442, 225, 37, 41, 319, 308, 35, 41, 319, 4175, 2755, 32, 2888, 26, 17792, 3172, 27, 474, 225]}
{"line_number": 280, "line_type": "generated", "code": "\n     * @param c  Complex number to multiply by\n     * @return a new Complex instance with the product of this and the\n     * argument\n     * @throws NullArgumentException if <code>c</code> is <code>null</code>\n    ", "entropy": 0.365478515625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.389892578125, 0.03857421875, 1.0634765625, 0.021881103515625, 0.87939453125, 1.7177734375, 1.412109375, 0.05023193359375, 0.1968994140625, 0.329833984375, 0.48388671875, 0.2763671875, 0.0012025833129882812, 0.0174713134765625, 0.0068511962890625, 1.595703125, 0.1690673828125, 0.1046142578125, 1.0830078125, 1.458984375, 0.62890625, 0.82275390625, 0.90625, 0.275146484375, 0.375, 0.6630859375, 1.1298828125, 0.000507354736328125, 0.416748046875, 0.10400390625, 0.6630859375, 0.1634521484375, 0.1766357421875, 0.2149658203125, 0.0033321380615234375, 0.07867431640625, 0.77197265625, 0.002071380615234375, 9.000301361083984e-05, 0.01788330078125, 0.024139404296875, 0.001056671142578125, 0.00023102760314941406, 0.0017499923706054688, 0.15625, 0.0016946792602539062, 9.059906005859375e-05, 0.004390716552734375, 0.0025615692138671875, 0.0023326873779296875, 0.034332275390625, 0.0635986328125], "tokens": [275, 319, 477, 753, 281, 225, 19915, 1451, 372, 22213, 810, 275, 319, 477, 601, 312, 537, 19915, 1980, 623, 322, 4054, 432, 458, 461, 322, 275, 319, 2793, 275, 319, 477, 5117, 9282, 8308, 415, 333, 687, 48, 85, 377, 687, 48, 438, 333, 687, 48, 1693, 377, 687, 48, 275]}
{"line_number": 363, "line_type": "original", "code": "        return createComplex(real * rhs.real - imaginary * rhs.imaginary,", "entropy": 1.5654296875, "is_bug_line": false, "sus_score": 0.22360679774997896, "per_token_entropy": [4.0546875, 10.734375, 3.787109375, 0.017974853515625, 0.0963134765625, 3.517578125, 1.8076171875, 2.703125, 0.01641845703125, 0.29443359375, 2.556640625, 0.01446533203125, 0.00037741661071777344, 0.0284271240234375, 0.05010986328125, 0.00023746490478515625, 0.0010900497436523438, 0.000308990478515625, 0.06939697265625], "tokens": [351, 442, 1487, 12267, 26, 4543, 319, 9322, 32, 4543, 429, 17463, 3172, 319, 9322, 32, 17792, 3172, 30]}
{"line_number": 363, "line_type": "generated", "code": "Inverse Cosine</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     * cos<sup>-1</sup>(a + bi) = -i (log(a + bi) + i arg(a +", "entropy": 0.198486328125, "is_bug_line": false, "sus_score": 0.22360679774997896, "per_token_entropy": [0.76025390625, 0.3251953125, 0.006084442138671875, 0.12408447265625, 0.01305389404296875, 0.02178955078125, 0.469970703125, 0.07269287109375, 0.0576171875, 0.0031890869140625, 0.1378173828125, 0.1767578125, 0.00641632080078125, 0.54248046875, 0.006580352783203125, 0.38818359375, 0.09661865234375, 0.042877197265625, 0.000278472900390625, 0.037109375, 0.11785888671875, 0.297607421875, 0.00519561767578125, 5.53131103515625e-05, 0.58154296875, 0.484375, 1.0849609375, 0.0300750732421875, 0.00012218952178955078, 0.002208709716796875, 8.761882781982422e-05, 0.09075927734375, 0.58349609375, 0.135498046875, 0.0101165771484375, 0.0010461807250976562, 0.0005393028259277344, 0.685546875, 0.00545501708984375, 0.078857421875, 0.088623046875, 0.0158843994140625, 0.580078125, 0.17529296875, 0.005962371826171875, 0.0034084320068359375, 0.004131317138671875, 0.5927734375, 0.98486328125, 0.30712890625, 0.00028395652770996094, 0.0799560546875], "tokens": [23173, 7109, 482, 377, 83, 48, 432, 458, 8640, 1451, 32, 275, 319, 34818, 322, 17568, 44, 275, 319, 333, 1001, 48, 275, 319, 10712, 46, 5540, 13119, 35, 377, 5540, 1563, 83, 474, 10789, 27, 280, 429, 91, 308, 751, 26, 83, 474, 10789, 27, 474, 595, 1638, 26, 83, 474]}
{"line_number": 358, "line_type": "original", "code": "        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||", "entropy": 0.39404296875, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [3.970703125, 1.03515625, 0.08154296875, 0.90771484375, 0.00060272216796875, 0.2132568359375, 0.00014269351959228516, 0.0021114349365234375, 0.27294921875, 0.0555419921875, 0.1383056640625, 0.338623046875, 0.00015664100646972656, 0.005878448486328125, 2.0623207092285156e-05, 0.004241943359375, 0.2279052734375, 0.00011420249938964844, 0.37255859375, 0.254638671875], "tokens": [351, 415, 308, 4075, 32, 28823, 11949, 26, 4543, 27, 1276, 6934, 32, 28823, 11949, 26, 17792, 3172, 27, 1276]}
{"line_number": 358, "line_type": "generated", "code": "\n    }\n    \n    /**\n     * Returns a {@link ComplexFormat} instance suitable for\n     * creating complex strings.\n     * \n     * @return a complex format instance\n     */\n    public static ComplexFormat getComplexFormat() {\n        return ComplexFormat.getInstance();\n   ", "entropy": 0.372802734375, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [0.46728515625, 0.80078125, 0.56494140625, 0.0418701171875, 0.03143310546875, 7.236003875732422e-05, 1.484375, 0.21142578125, 0.325439453125, 0.64013671875, 0.509765625, 0.62451171875, 0.01354217529296875, 1.779296875, 0.364501953125, 0.0187530517578125, 1.763671875, 0.00016045570373535156, 0.84423828125, 1.544921875, 0.75244140625, 0.6884765625, 0.1339111328125, 0.0013418197631835938, 0.52197265625, 9.810924530029297e-05, 0.01328277587890625, 0.053955078125, 0.1500244140625, 0.331787109375, 0.319091796875, 1.0576171875, 0.7421875, 0.07916259765625, 0.01422882080078125, 0.0272979736328125, 0.497802734375, 0.005214691162109375, 0.00011837482452392578, 0.2205810546875, 0.016082763671875, 0.0002918243408203125, 0.01128387451171875, 0.003833770751953125, 0.032501220703125, 0.1788330078125, 1.212890625, 0.00605010986328125, 0.037445068359375, 0.1290283203125, 0.015869140625, 0.10601806640625], "tokens": [284, 320, 2170, 1022, 275, 319, 3759, 312, 3088, 1204, 19915, 2207, 111, 1980, 19655, 436, 275, 319, 6892, 8640, 5852, 32, 275, 319, 5384, 319, 477, 601, 312, 8640, 2179, 1980, 275, 569, 284, 562, 907, 19915, 2207, 622, 12267, 2207, 346, 301, 291, 442, 19915, 2207, 32, 7426, 473, 284]}
{"line_number": 258, "line_type": "original", "code": "                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ", "entropy": 0.71484375, "is_bug_line": true, "sus_score": 0.18257418583505536, "per_token_entropy": [8.921875, 8.0, 0.1920166015625, 1.0830078125, 1.7119140625, 0.000911712646484375, 1.35546875, 0.0007271766662597656, 1.806640625, 0.005786895751953125, 3.814697265625e-05, 0.032989501953125, 0.76318359375, 0.03399658203125, 0.8955078125, 0.5380859375, 0.00609588623046875, 0.0252532958984375, 3.5881996154785156e-05, 0.1614990234375, 0.0005087852478027344, 4.0531158447265625e-05, 0.0073394775390625, 6.0625, 0.0526123046875, 1.9697265625, 0.0033416748046875, 0.29150390625, 0.447998046875, 0.9921875, 0.00926971435546875, 0.0003707408905029297, 0.0001888275146484375, 0.00011074542999267578, 0.005474090576171875, 0.00019609928131103516, 2.9206275939941406e-05, 0.001483917236328125, 0.00632476806640625, 0.00022792816162109375, 0.00386810302734375, 0.00868988037109375, 0.012054443359375, 0.0016193389892578125, 0.0003135204315185547, 2.574920654296875e-05, 9.942054748535156e-05, 7.474422454833984e-05, 0.00011134147644042969, 0.0010995864868164062, 0.019073486328125, 0.00017154216766357422, 0.007740020751953125, 0.0007925033569335938, 4.374980926513672e-05, 0.10882568359375, 5.20703125], "tokens": [4696, 2152, 280, 308, 4075, 32, 2627, 705, 6189, 3952, 8733, 26, 4543, 27, 610, 6934, 32, 2627, 705, 6189, 3952, 8733, 26, 14312, 32, 371, 6877, 5156, 962, 308, 4075, 32, 2627, 705, 6189, 3952, 8733, 26, 17792, 3172, 27, 610, 6934, 32, 2627, 705, 6189, 3952, 8733, 26, 14312, 32, 371, 42364, 3172, 5073, 225]}
{"line_number": 258, "line_type": "generated", "code": "\n     */\n    public boolean isNaN() {\n        return Double.isNaN(real) || Double.isNaN(imaginary);\n    }\n    \n    /**\n     * Returns true if no part of this complex number is NaN; false otherwise\n     *\n     * @return ", "entropy": 0.1815185546875, "is_bug_line": true, "sus_score": 0.18257418583505536, "per_token_entropy": [0.591796875, 0.06536865234375, 0.046295166015625, 0.021148681640625, 0.01062774658203125, 0.0005779266357421875, 0.0001004934310913086, 0.036163330078125, 0.0134735107421875, 0.2435302734375, 0.08355712890625, 1.2724609375, 0.00039196014404296875, 0.0246734619140625, 0.0004172325134277344, 0.2059326171875, 0.004993438720703125, 0.028411865234375, 0.0052642822265625, 0.00030803680419921875, 0.00211334228515625, 0.0004451274871826172, 0.0013360977172851562, 3.3855438232421875e-05, 0.0034389495849609375, 0.141845703125, 0.002349853515625, 0.66552734375, 0.031707763671875, 0.05694580078125, 0.00025081634521484375, 0.98779296875, 0.97265625, 0.036376953125, 1.708984375, 1.0048828125, 0.00832366943359375, 0.018829345703125, 0.0200042724609375, 0.00510406494140625, 0.005496978759765625, 0.11029052734375, 0.054107666015625, 0.1505126953125, 0.08575439453125, 0.255126953125, 0.003566741943359375, 0.2183837890625, 0.0006055831909179688, 0.003421783447265625, 0.00295257568359375, 0.2227783203125], "tokens": [275, 569, 284, 562, 1905, 438, 11126, 346, 301, 291, 442, 6934, 32, 26821, 26, 4543, 27, 1276, 6934, 32, 26821, 26, 17792, 3172, 293, 284, 320, 2170, 1022, 275, 319, 3759, 861, 415, 1289, 1742, 432, 458, 8640, 1451, 438, 21644, 45, 901, 5878, 275, 319, 275, 319, 477, 601, 225]}
{"line_number": 355, "line_type": "original", "code": "        if (isNaN() || rhs.isNaN()) {", "entropy": 1.2568359375, "is_bug_line": false, "sus_score": 0.18257418583505536, "per_token_entropy": [5.6640625, 2.2421875, 0.053192138671875, 5.4609375, 0.20263671875, 0.0277099609375, 0.10552978515625, 0.0022144317626953125, 0.00930023193359375, 0.0301971435546875, 0.0189208984375], "tokens": [351, 415, 308, 26821, 346, 1276, 9322, 32, 26821, 1157, 301]}
{"line_number": 355, "line_type": "generated", "code": "\n        return NaN;\n    }\n    \n    /**\n     * Returns a {@code String} representation of this complex number.\n     * @return a string representation of this complex number\n     */\n    @Override\n    public String toString() {\n        String result = \"(\";\n        if", "entropy": 0.24755859375, "is_bug_line": false, "sus_score": 0.18257418583505536, "per_token_entropy": [1.7646484375, 0.2198486328125, 0.4306640625, 0.005680084228515625, 0.11871337890625, 0.0049285888671875, 0.39501953125, 0.025115966796875, 0.027587890625, 0.0001475811004638672, 1.5908203125, 0.1944580078125, 0.3369140625, 0.826171875, 0.32568359375, 0.002498626708984375, 0.09222412109375, 0.0007262229919433594, 0.004375457763671875, 0.03594970703125, 0.0018815994262695312, 0.0169677734375, 0.05999755859375, 0.0029277801513671875, 0.7939453125, 0.0193023681640625, 0.2208251953125, 0.04034423828125, 0.0104827880859375, 0.002986907958984375, 0.027191162109375, 0.07110595703125, 0.006954193115234375, 0.1717529296875, 0.0228424072265625, 0.017242431640625, 0.4033203125, 0.0008845329284667969, 0.0247039794921875, 0.007556915283203125, 0.003086090087890625, 0.0006260871887207031, 0.032073974609375, 0.00995635986328125, 0.12158203125, 1.708984375, 1.728515625, 0.06439208984375, 0.263916015625, 0.07366943359375, 0.313720703125, 0.232177734375], "tokens": [291, 442, 21644, 45, 284, 320, 2170, 1022, 275, 319, 3759, 312, 3088, 687, 892, 111, 10293, 432, 458, 8640, 1451, 32, 275, 319, 477, 601, 312, 802, 10293, 432, 458, 8640, 1451, 275, 569, 284, 477, 1788, 284, 562, 892, 11345, 346, 301, 291, 892, 1056, 280, 31063, 45, 291, 415]}
{"line_number": 255, "line_type": "original", "code": "                if (rhs.isNaN()) {", "entropy": 2.626953125, "is_bug_line": false, "sus_score": 0.17407765595569785, "per_token_entropy": [7.33203125, 4.34765625, 0.81640625, 7.2578125, 0.66796875, 0.359619140625, 0.160400390625, 0.08087158203125], "tokens": [2071, 415, 308, 14312, 32, 26821, 1157, 301]}
{"line_number": 255, "line_type": "generated", "code": "\n     */\n    public boolean isNaN() {\n        return (Double.isNaN(real) || Double.isNaN(imaginary));\n    }\n    \n    /**\n     * Returns true if either the real or imaginary part of this complex number\n     * is NaN and neither", "entropy": 0.2296142578125, "is_bug_line": false, "sus_score": 0.17407765595569785, "per_token_entropy": [0.381103515625, 0.53759765625, 0.02685546875, 0.0252532958984375, 0.01058197021484375, 0.0004761219024658203, 0.000301361083984375, 0.04974365234375, 0.00952911376953125, 0.118408203125, 0.0709228515625, 0.5537109375, 0.517578125, 7.2479248046875e-05, 0.38134765625, 0.0001499652862548828, 0.251220703125, 0.06304931640625, 0.056182861328125, 0.01175689697265625, 0.00027871131896972656, 0.004238128662109375, 0.0002620220184326172, 0.001251220703125, 2.9087066650390625e-05, 0.034881591796875, 0.06329345703125, 0.00197601318359375, 0.75341796875, 0.036712646484375, 0.0496826171875, 0.0003139972686767578, 0.87841796875, 0.5634765625, 0.041656494140625, 1.806640625, 1.0810546875, 0.00643157958984375, 0.06719970703125, 0.0034885406494140625, 0.00029921531677246094, 0.3994140625, 0.1591796875, 0.403564453125, 0.391357421875, 0.307861328125, 0.496826171875, 0.00030040740966796875, 0.09521484375, 0.2120361328125, 0.374755859375, 0.63720703125], "tokens": [275, 569, 284, 562, 1905, 438, 11126, 346, 301, 291, 442, 308, 4075, 32, 26821, 26, 4543, 27, 1276, 6934, 32, 26821, 26, 17792, 3172, 876, 284, 320, 2170, 1022, 275, 319, 3759, 861, 415, 3154, 322, 4011, 556, 17463, 3172, 1742, 432, 458, 8640, 1451, 275, 319, 438, 21644, 461, 25209]}
{"line_number": 263, "line_type": "original", "code": "            }", "entropy": 5.92578125, "is_bug_line": false, "sus_score": 0.17407765595569785, "per_token_entropy": [7.0703125, 4.78125], "tokens": [1468, 320]}
{"line_number": 263, "line_type": "generated", "code": "    /**\n     * Returns a {@code String} representation of this complex number.\n     *\n     * @return a string representation of this complex number\n     */\n    public String toString() {\n        return \"(\" + real + \", \" + imaginary + \")\";\n    }", "entropy": 0.2257080078125, "is_bug_line": false, "sus_score": 0.17407765595569785, "per_token_entropy": [1.806640625, 0.205810546875, 0.166015625, 0.0015497207641601562, 1.5576171875, 0.397705078125, 0.724609375, 0.54296875, 0.97265625, 0.001941680908203125, 0.1815185546875, 0.002880096435546875, 0.0217437744140625, 0.278076171875, 0.01245880126953125, 0.01418304443359375, 0.043792724609375, 0.0021800994873046875, 1.0439453125, 0.0001933574676513672, 0.0977783203125, 0.00499725341796875, 0.357421875, 0.1044921875, 0.009063720703125, 0.005283355712890625, 0.07818603515625, 0.035491943359375, 0.00811004638671875, 0.2392578125, 0.04034423828125, 0.038787841796875, 0.18310546875, 0.005832672119140625, 0.0010242462158203125, 0.04803466796875, 0.01100921630859375, 0.147705078125, 1.564453125, 0.296142578125, 0.0125732421875, 0.11236572265625, 0.0066070556640625, 0.247802734375, 0.0009737014770507812, 0.004299163818359375, 0.00351715087890625, 0.00012993812561035156, 0.00965118408203125, 0.020538330078125, 0.05865478515625, 0.002437591552734375], "tokens": [264, 1022, 275, 319, 3759, 312, 3088, 687, 892, 111, 10293, 432, 458, 8640, 1451, 32, 275, 319, 275, 319, 477, 601, 312, 802, 10293, 432, 458, 8640, 1451, 275, 569, 284, 562, 892, 11345, 346, 301, 291, 442, 31063, 474, 4011, 474, 3003, 313, 474, 17463, 3172, 474, 34348, 284, 320]}
{"line_number": 254, "line_type": "original", "code": "                Complex rhs = (Complex)other;", "entropy": 3.044921875, "is_bug_line": false, "sus_score": 0.17149858514250882, "per_token_entropy": [8.09375, 8.171875, 7.375, 0.393798828125, 0.0765380859375, 0.00308990478515625, 0.0121612548828125, 3.24609375, 0.029632568359375], "tokens": [2071, 19915, 9322, 280, 308, 12267, 27, 2455, 45]}
{"line_number": 254, "line_type": "generated", "code": "\n     * otherwise, false.\n     *\n     * @return {@code true} if either or both parts of this complex number\n     *         is NaN; {@code false} if neither part is NaN\n     */\n    public boolean isNaN() {\n        return Double", "entropy": 0.27099609375, "is_bug_line": false, "sus_score": 0.17149858514250882, "per_token_entropy": [0.374267578125, 0.075439453125, 1.986328125, 1.1650390625, 0.30419921875, 0.82373046875, 0.310791015625, 0.03436279296875, 0.7734375, 0.0034332275390625, 0.0158538818359375, 0.01546478271484375, 0.86767578125, 0.00502777099609375, 0.00467681884765625, 0.0005006790161132812, 0.029541015625, 0.04937744140625, 0.476806640625, 0.0017995834350585938, 0.05499267578125, 0.00714111328125, 0.026611328125, 0.150146484375, 0.06903076171875, 1.224609375, 0.0006999969482421875, 0.572265625, 0.0855712890625, 0.294921875, 0.1253662109375, 0.2144775390625, 0.00047326087951660156, 0.0012454986572265625, 0.0021228790283203125, 0.77685546875, 0.11865234375, 0.90185546875, 0.00028634071350097656, 0.00833892822265625, 0.427001953125, 0.08660888671875, 0.029083251953125, 0.0149078369140625, 0.0085906982421875, 0.0007853507995605469, 0.0001842975616455078, 0.0207366943359375, 0.0076446533203125, 0.1759033203125, 0.061920166015625, 1.3017578125], "tokens": [275, 319, 5878, 30, 901, 32, 275, 319, 275, 319, 477, 601, 3088, 687, 861, 111, 415, 3154, 556, 4335, 8710, 432, 458, 8640, 1451, 275, 319, 263, 438, 21644, 45, 3088, 687, 901, 111, 415, 25209, 1742, 438, 21644, 275, 569, 284, 562, 1905, 438, 11126, 346, 301, 291, 442, 6934]}
{"line_number": 250, "line_type": "original", "code": "        } else if (other == null) {", "entropy": 2.01953125, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [3.248046875, 4.66796875, 5.0390625, 1.4599609375, 0.1588134765625, 2.955078125, 1.35546875, 1.0390625, 0.2314453125, 0.030609130859375], "tokens": [351, 320, 813, 415, 308, 2455, 610, 744, 27, 301]}
{"line_number": 250, "line_type": "generated", "code": "\n    /**\n     * Get a string representation of the complex number.\n     * <p>\n     * The format is:<code>re +/- im i</code>, where <code>re</code> is\n     * the real part and <code>", "entropy": 0.3701171875, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [0.46630859375, 1.615234375, 0.06634521484375, 0.0006999969482421875, 1.599609375, 0.6318359375, 0.353759765625, 0.1748046875, 0.038726806640625, 0.47021484375, 0.2037353515625, 0.03753662109375, 0.080078125, 0.02435302734375, 0.0009889602661132812, 0.88330078125, 0.01104736328125, 0.002285003662109375, 0.04180908203125, 0.00015604496002197266, 0.298583984375, 0.48681640625, 0.191162109375, 2.517578125, 1.0771484375, 0.4296875, 0.7646484375, 0.1055908203125, 0.2159423828125, 0.353759765625, 0.275146484375, 0.394775390625, 0.001277923583984375, 0.68310546875, 0.6376953125, 1.427734375, 0.01021575927734375, 0.004138946533203125, 0.060699462890625, 0.00485992431640625, 0.0005688667297363281, 0.00557708740234375, 0.61083984375, 1.12109375, 0.0018444061279296875, 0.0693359375, 0.03057861328125, 0.03656005859375, 0.71142578125, 0.0079345703125, 0.00133514404296875, 0.0026798248291015625], "tokens": [284, 1022, 275, 319, 1390, 312, 802, 10293, 432, 322, 8640, 1451, 32, 275, 319, 333, 98, 48, 275, 319, 886, 2179, 438, 14006, 687, 48, 268, 474, 15913, 3960, 595, 377, 687, 2717, 2154, 333, 687, 48, 268, 377, 687, 48, 438, 275, 319, 322, 4011, 1742, 461, 333, 687, 48]}
{"line_number": 248, "line_type": "original", "code": "        if (this == other) { ", "entropy": 2.765625, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [5.0703125, 4.078125, 0.1531982421875, 2.640625, 0.99609375, 4.57421875, 0.08251953125, 0.0278167724609375, 7.265625], "tokens": [351, 415, 308, 578, 610, 1604, 27, 301, 225]}
{"line_number": 248, "line_type": "generated", "code": "\n    public double getReal() {\n        return real;\n    }\n\n    /**\n     * Check for the imaginary unit.\n     * <p>\n     * The imaginary unit is the number with positive imaginary part and\n     * zero real part.  It", "entropy": 0.387939453125, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.39697265625, 0.2393798828125, 0.043212890625, 0.0024433135986328125, 0.0106658935546875, 0.01059722900390625, 0.016387939453125, 0.11505126953125, 0.0021953582763671875, 0.00499725341796875, 0.0007719993591308594, 0.0151824951171875, 0.0012617111206054688, 0.97021484375, 0.01558685302734375, 0.0272216796875, 0.0006837844848632812, 1.6552734375, 0.93896484375, 0.5146484375, 0.98681640625, 0.00020897388458251953, 0.06298828125, 0.419189453125, 0.0545654296875, 0.0007014274597167969, 0.80029296875, 0.00943756103515625, 0.0012178421020507812, 0.0175323486328125, 0.00017714500427246094, 1.466796875, 0.50244140625, 0.0003218650817871094, 0.0072021484375, 0.07000732421875, 1.2548828125, 0.685546875, 0.56787109375, 1.306640625, 0.755859375, 3.5762786865234375e-07, 0.62060546875, 0.482421875, 0.658203125, 0.0010538101196289062, 1.650390625, 0.00048661231994628906, 0.0018138885498046875, 0.3525390625, 1.2568359375, 1.1904296875], "tokens": [284, 562, 2064, 622, 6877, 346, 301, 291, 442, 4011, 45, 284, 320, 446, 1022, 275, 319, 3456, 436, 322, 17463, 3172, 4201, 32, 275, 319, 333, 98, 48, 275, 319, 886, 17463, 3172, 4201, 438, 322, 1451, 623, 11557, 17463, 3172, 1742, 461, 275, 319, 5934, 4011, 1742, 32, 225, 2030]}
{"line_number": 266, "line_type": "original", "code": "        return ret;", "entropy": 5.9375, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [2.97265625, 12.7578125, 7.9140625, 0.1085205078125], "tokens": [351, 442, 2152, 45]}
{"line_number": 266, "line_type": "generated", "code": "\n     * <code>Double.NEGATIVE_INFINITY</code>); false otherwise\n     *\n     * @return  true if either the real or imaginary part of this complex number\n     * takes an infinite value (either <code>Double.POSITIVE_INFINITY</", "entropy": 0.07421875, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.90087890625, 0.009857177734375, 0.0635986328125, 0.01406097412109375, 0.0008063316345214844, 0.0017604827880859375, 0.0007138252258300781, 0.0178985595703125, 0.0003979206085205078, 0.00023746490478515625, 0.0204925537109375, 0.0006604194641113281, 0.9443359375, 0.12396240234375, 0.11309814453125, 0.3251953125, 0.01885986328125, 0.31787109375, 0.00018978118896484375, 0.0053253173828125, 0.0021953582763671875, 0.298095703125, 0.03106689453125, 0.003665924072265625, 0.005817413330078125, 0.05609130859375, 0.0003578662872314453, 0.0024261474609375, 0.0004210472106933594, 0.00010609626770019531, 0.0025882720947265625, 0.01108551025390625, 0.005374908447265625, 0.02960205078125, 0.0908203125, 0.03094482421875, 0.0005884170532226562, 0.046478271484375, 0.0011959075927734375, 0.0001646280288696289, 0.0011281967163085938, 0.2086181640625, 0.000865936279296875, 0.1392822265625, 0.003650665283203125, 0.0001016855239868164, 0.0023746490478515625, 0.00038170814514160156, 0.0005450248718261719, 0.00027298927307128906, 0.00043392181396484375, 0.0021038055419921875], "tokens": [275, 319, 333, 687, 48, 4075, 32, 43518, 81, 36069, 377, 687, 19870, 901, 5878, 275, 319, 275, 319, 477, 601, 225, 861, 415, 3154, 322, 4011, 556, 17463, 3172, 1742, 432, 458, 8640, 1451, 275, 319, 8727, 600, 20280, 786, 308, 32192, 333, 687, 48, 4075, 32, 42270, 81, 36069, 377]}
{"line_number": 872, "line_type": "original", "code": "        return new Complex(real, imaginary);", "entropy": 0.7314453125, "is_bug_line": false, "sus_score": 0.1270001270001905, "per_token_entropy": [5.29296875, 0.389404296875, 0.343017578125, 1.0341796875, 0.1953125, 0.005710601806640625, 0.0028018951416015625, 0.005992889404296875, 8.33272933959961e-05, 0.048736572265625], "tokens": [351, 442, 537, 19915, 26, 4543, 30, 17463, 3172, 293]}
{"line_number": 872, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.1270001270001905, "per_token_entropy": [], "tokens": []}
{"line_number": 310, "line_type": "original", "code": "        return Double.isNaN(real) || Double.isNaN(imaginary);        ", "entropy": 1.9853515625, "is_bug_line": false, "sus_score": 0.0949157995752499, "per_token_entropy": [3.298828125, 5.94921875, 6.0546875, 0.0112457275390625, 3.578125, 0.00597381591796875, 0.214599609375, 0.55224609375, 0.1917724609375, 0.086181640625, 0.00033211708068847656, 0.11328125, 0.0009937286376953125, 0.0212249755859375, 0.00014221668243408203, 8.234375, 5.4453125], "tokens": [351, 442, 6934, 32, 26821, 26, 4543, 27, 1276, 6934, 32, 26821, 26, 17792, 3172, 293, 263]}
{"line_number": 310, "line_type": "generated", "code": "\n        }\n        \n        return new Complex(real * rhs.real - imaginary * rhs.imaginary, \n                          real * rhs.imaginary + imaginary * rhs.real);\n    }\n    \n    /**\n     * Return the product of this complex number and the", "entropy": 0.16943359375, "is_bug_line": false, "sus_score": 0.0949157995752499, "per_token_entropy": [0.3779296875, 0.038543701171875, 1.154296875, 1.6669921875, 0.10296630859375, 0.00372314453125, 0.047637939453125, 0.30517578125, 0.052978515625, 0.002277374267578125, 0.0003845691680908203, 0.050872802734375, 0.010162353515625, 0.0027217864990234375, 1.8477439880371094e-05, 0.0017375946044921875, 0.00640106201171875, 6.854534149169922e-05, 0.0004253387451171875, 1.0013580322265625e-05, 0.0028972625732421875, 1.931640625, 0.21533203125, 0.136962890625, 0.0015439987182617188, 0.0011739730834960938, 4.0531158447265625e-05, 0.0003597736358642578, 0.00017786026000976562, 0.0027217864990234375, 0.01708984375, 7.033348083496094e-06, 0.00186920166015625, 0.004947662353515625, 0.00015282630920410156, 0.0003426074981689453, 0.017791748046875, 0.08758544921875, 0.0015468597412109375, 0.459716796875, 0.01337432861328125, 0.0220489501953125, 3.349781036376953e-05, 1.3515625, 0.0721435546875, 0.26953125, 0.009552001953125, 0.07904052734375, 0.01041412353515625, 0.0004374980926513672, 0.0175628662109375, 0.26025390625], "tokens": [291, 320, 2746, 442, 537, 19915, 26, 4543, 319, 9322, 32, 4543, 429, 17463, 3172, 319, 9322, 32, 17792, 3172, 30, 225, 3775, 4011, 319, 9322, 32, 17792, 3172, 474, 17463, 3172, 319, 9322, 32, 4543, 293, 284, 320, 2170, 1022, 275, 319, 2744, 322, 4054, 432, 458, 8640, 1451, 461, 322]}
{"line_number": 299, "line_type": "original", "code": "        return real;", "entropy": 3.763671875, "is_bug_line": false, "sus_score": 0.09284766908852593, "per_token_entropy": [3.642578125, 1.4248046875, 7.25, 2.73828125], "tokens": [351, 442, 4011, 45]}
{"line_number": 299, "line_type": "generated", "code": "\n     */\n    public Complex multiply(Complex rhs) {\n        if (isNaN() || rhs.isNaN()) {\n            return NaN;\n        }\n        if (isInfinite() || rhs.isInfinite()) {\n            return copySign(INF, this.signum", "entropy": 0.2059326171875, "is_bug_line": false, "sus_score": 0.09284766908852593, "per_token_entropy": [0.62548828125, 1.296875, 0.042755126953125, 0.0189666748046875, 0.038909912109375, 0.07244873046875, 0.0016527175903320312, 0.2216796875, 0.00585174560546875, 0.0181121826171875, 0.0178375244140625, 0.289306640625, 0.86669921875, 0.06256103515625, 0.39794921875, 0.0131683349609375, 0.0012178421020507812, 0.00780487060546875, 0.0018796920776367188, 0.0002694129943847656, 0.01216888427734375, 0.004032135009765625, 0.026947021484375, 0.03875732421875, 0.072509765625, 0.0016345977783203125, 0.0195159912109375, 0.0007457733154296875, 0.9267578125, 0.278076171875, 0.07843017578125, 0.49755859375, 4.088878631591797e-05, 0.017730712890625, 0.0204010009765625, 0.0047454833984375, 0.00015652179718017578, 0.0006260871887207031, 5.364418029785156e-06, 0.006832122802734375, 0.001251220703125, 0.01561737060546875, 0.0194854736328125, 1.517578125, 0.0838623046875, 0.00493621826171875, 0.0426025390625, 0.09375, 0.385986328125, 0.916015625, 1.36328125, 0.259765625], "tokens": [275, 569, 284, 562, 19915, 22213, 26, 12267, 9322, 27, 301, 291, 415, 308, 26821, 346, 1276, 9322, 32, 26821, 1157, 301, 324, 442, 21644, 45, 291, 320, 291, 415, 308, 28823, 11949, 346, 1276, 9322, 32, 28823, 11949, 1157, 301, 324, 442, 1933, 3388, 26, 10192, 30, 458, 32, 1333, 378]}
{"line_number": 76, "line_type": "original", "code": "        super();", "entropy": 7.875, "is_bug_line": false, "sus_score": 0.08638684255813601, "per_token_entropy": [3.59375, 10.8046875, 9.21875], "tokens": [351, 2599, 473]}
{"line_number": 76, "line_type": "generated", "code": "\n     * double arithmetic.</p>\n     *\n     * @param rhs the addend\n     * @return the sum\n     */\n    public Complex add(Complex rhs) {\n        if (isNaN() || rhs.isNaN()) {\n            return NaN;\n        }\n        \n       ", "entropy": 0.1903076171875, "is_bug_line": false, "sus_score": 0.08638684255813601, "per_token_entropy": [1.34375, 0.00728607177734375, 2.365234375, 0.0125274658203125, 0.474365234375, 0.0032558441162109375, 0.00693511962890625, 0.05548095703125, 0.0002532005310058594, 0.3525390625, 6.0677528381347656e-05, 0.005954742431640625, 0.0012998580932617188, 0.043060302734375, 0.42138671875, 0.70166015625, 0.0002646446228027344, 0.023834228515625, 6.914138793945312e-05, 0.0003008842468261719, 0.00024306774139404297, 1.2958984375, 0.1439208984375, 0.2298583984375, 0.8349609375, 0.01491546630859375, 0.00435638427734375, 0.0017938613891601562, 0.00974273681640625, 0.0010347366333007812, 0.033477783203125, 0.00023746490478515625, 0.003627777099609375, 0.00986480712890625, 0.27978515625, 0.43798828125, 0.0251617431640625, 0.1917724609375, 0.023712158203125, 0.0022106170654296875, 0.0128173828125, 0.00852203369140625, 0.00018405914306640625, 0.0046844482421875, 0.00429534912109375, 0.012908935546875, 0.01806640625, 0.04132080078125, 0.0002503395080566406, 0.0146942138671875, 0.00171661376953125, 0.416259765625], "tokens": [275, 319, 2064, 34461, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 9322, 322, 1015, 416, 275, 319, 477, 601, 322, 3632, 275, 569, 284, 562, 19915, 1015, 26, 12267, 9322, 27, 301, 291, 415, 308, 26821, 346, 1276, 9322, 32, 26821, 1157, 301, 324, 442, 21644, 45, 291, 320, 2746]}
{"line_number": 77, "line_type": "original", "code": "        this.real = real;", "entropy": 2.359375, "is_bug_line": false, "sus_score": 0.08638684255813601, "per_token_entropy": [4.30078125, 7.66015625, 0.34765625, 0.8642578125, 0.73828125, 1.330078125, 1.27734375], "tokens": [351, 458, 32, 4543, 280, 4011, 45]}
{"line_number": 77, "line_type": "generated", "code": "\n     * @param rhs the addend\n     * @return the sum\n     */\n    public Complex add(Complex rhs) {\n        if (isNaN() || rhs.isNaN()) {\n            return NaN;\n        }\n        \n        if (isInfinite() && rhs.isIn", "entropy": 0.156982421875, "is_bug_line": false, "sus_score": 0.08638684255813601, "per_token_entropy": [0.282470703125, 0.04632568359375, 0.74755859375, 0.007358551025390625, 0.03240966796875, 0.5947265625, 0.787109375, 0.00038242340087890625, 0.0281829833984375, 0.00021445751190185547, 0.0009455680847167969, 0.0004150867462158203, 1.080078125, 0.19140625, 0.2486572265625, 0.58984375, 0.02752685546875, 0.009765625, 0.004322052001953125, 0.01009368896484375, 0.0007572174072265625, 0.04119873046875, 0.0007085800170898438, 0.005802154541015625, 0.0101470947265625, 0.2418212890625, 0.7490234375, 0.031951904296875, 0.372802734375, 0.03485107421875, 0.003017425537109375, 0.01580810546875, 0.01074981689453125, 0.00040078163146972656, 0.005764007568359375, 0.003910064697265625, 0.01422119140625, 0.01910400390625, 0.056732177734375, 0.00037097930908203125, 0.01415252685546875, 0.0019130706787109375, 0.46337890625, 0.28369140625, 0.03704833984375, 0.30810546875, 7.557868957519531e-05, 0.301025390625, 0.419677734375, 0.023101806640625, 0.0021190643310546875, 0.002223968505859375], "tokens": [275, 319, 477, 753, 9322, 322, 1015, 416, 275, 319, 477, 601, 322, 3632, 275, 569, 284, 562, 19915, 1015, 26, 12267, 9322, 27, 301, 291, 415, 308, 26821, 346, 1276, 9322, 32, 26821, 1157, 301, 324, 442, 21644, 45, 291, 320, 2746, 415, 308, 28823, 11949, 346, 962, 9322, 32, 28823]}
{"line_number": 78, "line_type": "original", "code": "        this.imaginary = imaginary;", "entropy": 2.2734375, "is_bug_line": false, "sus_score": 0.08638684255813601, "per_token_entropy": [4.12890625, 8.46875, 0.6767578125, 4.15234375, 0.0006966590881347656, 1.5185546875, 1.345703125, 0.00473785400390625, 0.1761474609375], "tokens": [351, 458, 32, 17792, 3172, 280, 17463, 3172, 45]}
{"line_number": 78, "line_type": "generated", "code": "\n     * @param rhs The complex number to add.\n     * @return The sum of this and the other complex number.\n     */\n    public Complex add(Complex rhs) {\n        return new Complex(this.real + rhs.real, this.imag", "entropy": 0.248779296875, "is_bug_line": false, "sus_score": 0.08638684255813601, "per_token_entropy": [0.65478515625, 0.1522216796875, 0.0911865234375, 0.007709503173828125, 0.0238037109375, 1.33984375, 0.281982421875, 0.02813720703125, 0.0033969879150390625, 0.7509765625, 0.462158203125, 0.04095458984375, 0.0007991790771484375, 0.005222320556640625, 0.0008716583251953125, 1.5078125, 0.378173828125, 0.88427734375, 0.0203399658203125, 0.31591796875, 0.5048828125, 1.0908203125, 0.303466796875, 0.0029735565185546875, 0.0059661865234375, 0.2291259765625, 0.2132568359375, 0.03839111328125, 0.006557464599609375, 0.00405120849609375, 0.005939483642578125, 0.0008373260498046875, 0.055389404296875, 0.000598907470703125, 0.00677490234375, 0.01241302490234375, 0.2105712890625, 1.1015625, 0.08636474609375, 0.0004725456237792969, 0.0372314453125, 1.373046875, 0.00356292724609375, 0.05975341796875, 0.0251312255859375, 0.0024127960205078125, 0.00022590160369873047, 0.451416015625, 0.0071258544921875, 0.1494140625, 7.164478302001953e-05, 0.0004444122314453125], "tokens": [275, 319, 477, 753, 9322, 886, 8640, 1451, 372, 1015, 32, 275, 319, 477, 601, 886, 3632, 432, 458, 461, 322, 1604, 8640, 1451, 32, 275, 569, 284, 562, 19915, 1015, 26, 12267, 9322, 27, 301, 291, 442, 537, 19915, 26, 578, 32, 4543, 474, 9322, 32, 4543, 30, 458, 32, 17792]}
{"line_number": 79, "line_type": "original", "code": "    }", "entropy": 3.357421875, "is_bug_line": false, "sus_score": 0.08638684255813601, "per_token_entropy": [2.884765625, 3.830078125], "tokens": [264, 320]}
{"line_number": 79, "line_type": "generated", "code": "\n     */\n    public Complex add(Complex rhs) {\n        if (isNaN() || rhs.isNaN()) {\n            return NaN;\n        }\n        \n        if (isInfinite() || rhs.isInfinite()) {\n            return INF;\n        }\n        \n        return new Complex(", "entropy": 0.139404296875, "is_bug_line": false, "sus_score": 0.08638684255813601, "per_token_entropy": [0.69775390625, 1.2353515625, 0.0308074951171875, 0.0078887939453125, 0.002170562744140625, 0.0185546875, 0.0006189346313476562, 0.0606689453125, 0.0004527568817138672, 0.006183624267578125, 0.0132293701171875, 0.184814453125, 0.7744140625, 0.0218505859375, 0.410888671875, 0.03424072265625, 0.0021266937255859375, 0.01096343994140625, 0.005626678466796875, 0.0002092123031616211, 0.004913330078125, 0.0034389495849609375, 0.0119476318359375, 0.0222930908203125, 0.0494384765625, 0.00043582916259765625, 0.01300048828125, 0.001430511474609375, 0.4873046875, 0.363037109375, 0.044219970703125, 0.39306640625, 4.982948303222656e-05, 0.255615234375, 0.88134765625, 0.006809234619140625, 0.00012302398681640625, 0.0012445449829101562, 7.62939453125e-06, 0.005382537841796875, 0.0010023117065429688, 0.0206451416015625, 0.26171875, 0.259765625, 0.00014007091522216797, 0.018524169921875, 0.00024318695068359375, 0.248779296875, 0.3115234375, 0.050872802734375, 0.00018990039825439453, 0.007686614990234375], "tokens": [275, 569, 284, 562, 19915, 1015, 26, 12267, 9322, 27, 301, 291, 415, 308, 26821, 346, 1276, 9322, 32, 26821, 1157, 301, 324, 442, 21644, 45, 291, 320, 2746, 415, 308, 28823, 11949, 346, 1276, 9322, 32, 28823, 11949, 1157, 301, 324, 442, 47257, 45, 291, 320, 2746, 442, 537, 19915, 26]}
