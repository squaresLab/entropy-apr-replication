{"line_number": 482, "line_type": "original", "code": "                    sigma = sigma * Math.exp(0.2+cs/damps);", "entropy": 1.2109375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [5.9296875, 10.859375, 0.50732421875, 3.45703125, 1.0556640625, 0.6357421875, 0.003932952880859375, 0.267822265625, 0.033294677734375, 0.06842041015625, 0.002269744873046875, 0.062286376953125, 0.0799560546875, 0.0283660888671875, 0.0083465576171875, 0.00473785400390625, 3.921985626220703e-05, 0.0006976127624511719, 0.004947662353515625], "tokens": [4696, 16355, 280, 16355, 319, 4175, 32, 2832, 26, 34, 32, 36, 29, 1729, 33, 86, 757, 101, 293]}
{"line_number": 482, "line_type": "generated", "code": "\n                }\n            }\n        }\n        // Checks whether the number of finite bounds is equal to the dimension.\n        if (hasFiniteBounds) {\n            if (lB.length!= init.length || uB.length!= init.length) {", "entropy": 0.454345703125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.0087890625, 0.359375, 0.7607421875, 0.1146240234375, 0.58935546875, 0.0163726806640625, 1.0087890625, 0.8486328125, 0.28857421875, 0.473388671875, 1.4775390625, 3.01171875, 0.0106201171875, 2.826171875, 0.85302734375, 0.51953125, 1.513671875, 0.046112060546875, 0.18359375, 1.0595703125, 0.328369140625, 0.045166015625, 0.1412353515625, 0.048919677734375, 0.11376953125, 0.003398895263671875, 8.487701416015625e-05, 0.59716796875, 0.003570556640625, 0.28369140625, 0.296875, 0.037200927734375, 0.80322265625, 4.553794860839844e-05, 0.0004336833953857422, 4.088878631591797e-05, 0.034088134765625, 1.3515625, 0.00021851062774658203, 3.7789344787597656e-05, 0.37060546875, 1.458984375, 1.1920928955078125e-07, 9.799003601074219e-05, 5.9723854064941406e-05, 0.002529144287109375, 0.0091400146484375, 3.337860107421875e-05, 1.2278556823730469e-05, 0.253173828125, 0.013153076171875], "tokens": [400, 320, 324, 320, 291, 320, 291, 434, 17279, 4946, 322, 1451, 432, 32916, 11615, 438, 5040, 372, 322, 8742, 32, 291, 415, 308, 2040, 40643, 8285, 27, 301, 324, 415, 308, 94, 52, 32, 1322, 863, 3219, 32, 1322, 1276, 1044, 52, 32, 1322, 863, 3219, 32, 1322, 27, 301]}
{"line_number": 476, "line_type": "original", "code": "                        break generationLoop;", "entropy": 2.68359375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [7.390625, 1.5029296875, 4.5, 0.005237579345703125, 0.02008056640625], "tokens": [6797, 1626, 11745, 7497, 45]}
{"line_number": 476, "line_type": "generated", "code": "\n                }\n            }\n        }\n\n        if (hasFiniteBounds && hasInfiniteBounds) {\n            throw new IllegalArgumentException(\n                    \"Either all or no bounds must be finite\");\n        }\n\n        if (init.length!= lB.length || init.length!=", "entropy": 0.3642578125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.267333984375, 0.0103759765625, 0.29296875, 0.0030345916748046875, 0.166748046875, 0.0093994140625, 1.2978515625, 1.3583984375, 0.62353515625, 1.16796875, 0.224853515625, 9.107589721679688e-05, 0.724609375, 0.224853515625, 0.0005192756652832031, 5.519390106201172e-05, 0.017608642578125, 0.0084686279296875, 0.0635986328125, 0.1397705078125, 0.1141357421875, 0.822265625, 0.673828125, 0.9521484375, 0.1651611328125, 0.7041015625, 0.30517578125, 0.43359375, 0.8779296875, 0.779296875, 0.1998291015625, 0.005603790283203125, 0.1632080078125, 0.89013671875, 0.216796875, 0.0019626617431640625, 0.395263671875, 1.0615234375, 0.33349609375, 1.0625, 0.2783203125, 0.00027251243591308594, 0.078857421875, 0.434326171875, 3.993511199951172e-05, 2.396106719970703e-05, 1.621246337890625e-05, 0.87353515625, 0.51611328125, 0.0001913309097290039, 1.9431114196777344e-05, 0.0032329559326171875], "tokens": [400, 320, 324, 320, 291, 320, 584, 415, 308, 2040, 40643, 8285, 962, 1401, 39524, 8285, 27, 301, 324, 1422, 537, 12137, 26, 528, 313, 25678, 1169, 556, 1289, 11615, 2298, 526, 32916, 724, 291, 320, 584, 415, 308, 1664, 32, 1322, 863, 456, 52, 32, 1322, 1276, 3219, 32, 1322, 863]}
{"line_number": 583, "line_type": "original", "code": "            lambda = 4 + (int) (3. * Math.log(dimension));", "entropy": 1.138671875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.390625, 5.7109375, 0.8515625, 1.970703125, 1.7998046875, 0.033203125, 1.6376953125, 0.5400390625, 0.06610107421875, 0.499267578125, 0.0164947509765625, 3.671875, 0.056304931640625, 0.15185546875, 0.00396728515625, 0.08758544921875, 0.0016756057739257812, 0.08380126953125, 0.0699462890625], "tokens": [1468, 9254, 280, 225, 38, 474, 308, 410, 27, 308, 37, 32, 319, 4175, 32, 751, 26, 11694, 876]}
{"line_number": 583, "line_type": "generated", "code": "\n        // initialize dynamic (internal) strategy parameters and constants\n        cc = (4. + mueff / dimension) /\n                (dimension + 4. + 2. * mueff / dimension);\n        cs = (mueff + 2.)", "entropy": 0.14501953125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.56005859375, 1.1572265625, 1.224609375, 0.98779296875, 0.47265625, 0.007144927978515625, 0.037506103515625, 0.340087890625, 0.07757568359375, 0.1466064453125, 0.0011415481567382812, 0.1729736328125, 1.6728515625, 0.06890869140625, 0.112060546875, 0.0108184814453125, 0.08404541015625, 0.007328033447265625, 0.01030731201171875, 7.271766662597656e-06, 0.0103607177734375, 0.0181732177734375, 0.0029754638671875, 0.0028018951416015625, 0.223876953125, 0.0003807544708251953, 0.002323150634765625, 0.00033783912658691406, 0.0002065896987915039, 0.00043654441833496094, 0.0132293701171875, 0.0020389556884765625, 0.03741455078125, 0.002788543701171875, 0.004596710205078125, 0.0008978843688964844, 0.0012311935424804688, 3.814697265625e-06, 0.00018930435180664062, 0.0018634796142578125, 0.001049041748046875, 0.0228118896484375, 0.029022216796875, 0.0005970001220703125, 0.0029506683349609375, 0.0009531974792480469, -0.0, 0.0005183219909667969, 0.00014781951904296875, 3.707408905029297e-05, 0.00170135498046875, 0.0062255859375], "tokens": [291, 434, 7379, 7094, 308, 3259, 27, 13689, 3377, 461, 12388, 291, 10639, 280, 308, 38, 32, 474, 35813, 486, 517, 8742, 27, 517, 400, 308, 11694, 474, 225, 38, 32, 474, 225, 36, 32, 319, 35813, 486, 517, 8742, 293, 291, 9101, 280, 308, 95, 340, 486, 474, 225, 36, 7447]}
{"line_number": 751, "line_type": "original", "code": "                    negccov = negcovMax;", "entropy": 2.564453125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.41796875, 8.796875, 0.445556640625, 0.006488800048828125, 0.51025390625, 2.23828125, 5.6640625, 0.7490234375, 0.25244140625], "tokens": [4696, 7528, 85, 12626, 280, 7528, 12626, 2708, 45]}
{"line_number": 751, "line_type": "generated", "code": "\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update of the mean xmean.\n     *\n     * @param arx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz", "entropy": 0.2376708984375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.369384765625, 0.005733489990234375, 0.04254150390625, 0.000499725341796875, 0.125732421875, 0.00127410888671875, 0.65283203125, 0.00019252300262451172, 0.07586669921875, 0.0009341239929199219, 0.18798828125, 0.061676025390625, 0.0263519287109375, 0.0002665519714355469, 1.3203125, 0.82373046875, 0.318115234375, 1.486328125, 1.6201171875, 0.031768798828125, 0.40478515625, 0.044189453125, 0.0032825469970703125, 0.0283203125, 0.0006356239318847656, 0.008514404296875, 0.0016851425170898438, 1.1533203125, 0.48486328125, 1.634765625, 0.0002269744873046875, 0.0147552490234375, 0.0196075439453125, 0.1282958984375, 0.041229248046875, 0.06781005859375, 0.0887451171875, 0.0069427490234375, 0.2117919921875, 0.01052093505859375, 0.032257080078125, 4.088878631591797e-05, 0.0232696533203125, 0.01580810546875, 0.0010890960693359375, 0.0139617919921875, 0.007198333740234375, 0.0767822265625, 0.0009632110595703125, 0.003108978271484375, 0.197998046875, 0.4833984375], "tokens": [528, 320, 400, 320, 324, 320, 291, 320, 284, 320, 446, 1022, 275, 319, 4000, 432, 322, 5651, 816, 6009, 32, 275, 319, 275, 319, 477, 753, 2099, 106, 506, 25812, 31, 11939, 5045, 432, 322, 2793, 16540, 40889, 322, 275, 319, 1550, 2126, 3393, 32, 275, 319, 477, 753, 2099, 108]}
{"line_number": 246, "line_type": "original", "code": "        this(0);", "entropy": 2.404296875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [2.373046875, 0.80078125, 0.354736328125, 6.625, 1.87109375], "tokens": [351, 458, 26, 34, 293]}
{"line_number": 246, "line_type": "generated", "code": "\n    }\n\n    /**\n     * @param lambda Population size.\n     * @param inputSigma Initial search volume; sigma of offspring objective variables.\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if", "entropy": 0.048004150390625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.98486328125, 0.428466796875, 0.1837158203125, 0.07891845703125, 0.0186309814453125, 0.0007672309875488281, 0.22607421875, 0.007137298583984375, 0.112548828125, 0.00798797607421875, 4.744529724121094e-05, 0.00046181678771972656, 0.0019044876098632812, 0.026519775390625, 0.00402069091796875, 0.0004513263702392578, 0.000682830810546875, 0.1070556640625, 0.0008378028869628906, 0.0020904541015625, 0.00037479400634765625, 0.0001024007797241211, 0.004459381103515625, 0.0008287429809570312, 0.00017464160919189453, 0.0004076957702636719, 2.396106719970703e-05, 7.259845733642578e-05, 0.0021266937255859375, 0.004070281982421875, 0.1102294921875, 0.0109100341796875, 0.0019254684448242188, 0.0013446807861328125, 0.10504150390625, 0.0025806427001953125, 0.007122039794921875, 0.0002315044403076172, 7.343292236328125e-05, 0.0002422332763671875, 0.001094818115234375, 0.00312042236328125, 0.0225982666015625, 0.0011625289916992188, 0.0001971721649169922, 0.00026154518127441406, 0.008819580078125, 0.0004706382751464844, 0.00962066650390625, 0.0005559921264648438, 0.0002994537353515625, 0.0016927719116210938], "tokens": [284, 320, 446, 1022, 275, 319, 477, 753, 9254, 13088, 3899, 1334, 32, 275, 319, 477, 753, 1509, 28326, 5768, 3233, 6864, 45, 16355, 432, 2126, 3393, 25110, 4886, 32, 275, 319, 477, 753, 1769, 31219, 7462, 2977, 1451, 432, 17576, 32, 275, 319, 477, 753, 4719, 48599, 14071, 372, 4719, 415]}
{"line_number": 247, "line_type": "original", "code": "    }", "entropy": 3.357421875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [2.58984375, 4.125], "tokens": [264, 320]}
{"line_number": 247, "line_type": "generated", "code": "\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the", "entropy": 0.03094482421875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [1.1259765625, 0.18310546875, 0.005321502685546875, 0.0024929046630859375, 0.08428955078125, 0.0090179443359375, 0.0300140380859375, 0.0008845329284667969, 0.0005002021789550781, 0.0032176971435546875, 0.0087432861328125, 0.0008406639099121094, 0.0018825531005859375, 0.0018939971923828125, 0.004177093505859375, 0.00951385498046875, 0.00971221923828125, 0.0007238388061523438, 0.0173492431640625, 0.0008211135864257812, 0.0005631446838378906, 0.00043010711669921875, 0.004482269287109375, 0.047332763671875, 0.0009064674377441406, 0.0002053976058959961, 0.0002605915069580078, 0.011566162109375, 8.606910705566406e-05, 5.7697296142578125e-05, 0.0189208984375, 3.4570693969726562e-06, 1.704692840576172e-05, 0.0012483596801757812, 0.0005478858947753906, 6.0677528381347656e-05, 0.0003554821014404297, 0.0003230571746826172, 0.005390167236328125, 0.00907135009765625, 0.00020265579223632812, 0.0005016326904296875, 0.00016808509826660156, 0.0013685226440429688, 3.170967102050781e-05, 0.001415252685546875, 6.496906280517578e-05, 0.0012845993041992188, 0.0002722740173339844, 0.001026153564453125, 0.00010979175567626953, 0.0002124309539794922], "tokens": [275, 319, 477, 753, 4719, 48599, 14071, 372, 4719, 415, 25110, 667, 786, 438, 14763, 2784, 275, 319, 3088, 687, 4719, 48599, 4009, 275, 319, 477, 753, 36511, 53, 1400, 1884, 604, 1464, 322, 40204, 5045, 1974, 1411, 32, 275, 319, 477, 753, 27601, 4495, 5104, 432, 2815, 17576, 30, 2154, 322]}
{"line_number": 253, "line_type": "original", "code": "        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,", "entropy": 1.8125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [3.06640625, 13.6875, 4.3515625, 0.0577392578125, 0.0127410888671875, 7.8671875, 0.039703369140625, 3.2421875, 0.0004227161407470703, 0.11279296875, 0.0013265609741210938, 0.0002493858337402344, 0.004364013671875, 0.149169921875, 0.0010900497436523438, 0.0021724700927734375, 0.0008006095886230469, 0.0157623291015625], "tokens": [351, 458, 26, 5962, 30, 744, 30, 4040, 81, 3459, 10812, 19419, 30, 4040, 81, 15707, 43781, 30]}
{"line_number": 253, "line_type": "generated", "code": "\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param valueChecker Value checker.\n     */\n    public CMAESOptimizer(int lambda,", "entropy": 0.099853515625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [1.5390625, 0.01340484619140625, 0.427490234375, 0.0025234222412109375, 0.00023162364959716797, 0.00034618377685546875, 0.00037169456481933594, 0.000698089599609375, 8.58306884765625e-05, 7.903575897216797e-05, 0.00460052490234375, 0.042510986328125, 0.0014667510986328125, 0.0009751319885253906, 0.0013341903686523438, 0.0173492431640625, 0.01007080078125, 0.0013427734375, 0.0028972625732421875, 0.01476287841796875, 0.0021038055419921875, 0.0003895759582519531, 0.004302978515625, 0.019989013671875, 0.00012409687042236328, 0.002201080322265625, 0.00439453125, 0.000186920166015625, 0.001514434814453125, 0.0011301040649414062, 0.00209808349609375, 0.017120361328125, 0.06298828125, 0.0010347366333007812, 0.0216827392578125, 0.40380859375, 0.00875091552734375, 1.40625, 0.0428466796875, 0.473876953125, 0.2274169921875, 0.25927734375, 0.01776123046875, 0.0919189453125, 0.0007829666137695312, 1.6689300537109375e-06, 0.00018036365509033203, 3.135204315185547e-05, 0.00131988525390625, 0.03497314453125, 0.00021398067474365234, 0.0002295970916748047], "tokens": [275, 319, 4723, 328, 1135, 2953, 884, 963, 432, 11615, 32, 275, 319, 477, 753, 3995, 9500, 9750, 32, 275, 319, 477, 753, 4450, 13487, 14071, 33179, 706, 438, 21588, 32, 275, 319, 477, 753, 786, 14003, 3846, 26664, 32, 275, 569, 284, 562, 390, 1400, 940, 29248, 26, 410, 9254, 30]}
{"line_number": 256, "line_type": "original", "code": "    }", "entropy": 4.16796875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [3.439453125, 4.89453125], "tokens": [264, 320]}
{"line_number": 256, "line_type": "generated", "code": "\n     */\n    public CMAESOptimizer(int lambda, double[] inputSigma,\n                          int maxIterations, double stopFitness,\n                          boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n                          RandomGenerator random, boolean generateStatistics,", "entropy": 0.0281829833984375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.51513671875, 0.5234375, 0.0302276611328125, 0.16845703125, 0.0009241104125976562, 2.9802322387695312e-06, 0.00013315677642822266, 2.2649765014648438e-05, 0.0014142990112304688, 0.028778076171875, 0.0002205371856689453, 0.00018608570098876953, 0.03192138671875, 0.0007967948913574219, 0.0002951622009277344, 2.86102294921875e-06, 0.00010514259338378906, 0.0672607421875, 0.0008392333984375, 2.8967857360839844e-05, 1.3589859008789062e-05, 1.6689300537109375e-05, 0.00469970703125, 0.00025391578674316406, 2.2530555725097656e-05, 2.8371810913085938e-05, 0.00862884521484375, 0.0007109642028808594, 4.5180320739746094e-05, 2.0265579223632812e-06, 2.1457672119140625e-06, 1.7642974853515625e-05, 0.009368896484375, 6.198883056640625e-05, 1.3113021850585938e-06, 3.254413604736328e-05, 0.022064208984375, 1.9550323486328125e-05, 2.9802322387695312e-06, 1.3113021850585938e-06, 2.384185791015625e-07, 2.2649765014648438e-06, 9.143352508544922e-05, 0.00894927978515625, 0.0011262893676757812, 0.00019276142120361328, 2.9206275939941406e-05, 0.0008063316345214844, 0.0143280029296875, 0.00012791156768798828, 1.6927719116210938e-05, 0.0240631103515625], "tokens": [275, 569, 284, 562, 390, 1400, 940, 29248, 26, 410, 9254, 30, 2064, 1178, 1509, 28326, 30, 3775, 629, 1769, 31219, 30, 2064, 4719, 48599, 30, 3775, 1905, 36511, 53, 1400, 30, 629, 27601, 4495, 30, 629, 1505, 9008, 302, 444, 1534, 30, 3775, 9500, 4815, 3995, 30, 1905, 4450, 13487, 30]}
{"line_number": 459, "line_type": "original", "code": "                    break generationLoop;", "entropy": 4.45703125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.75, 9.15625, 3.369140625, 0.0015621185302734375, 0.0103607177734375], "tokens": [4696, 1626, 11745, 7497, 45]}
{"line_number": 459, "line_type": "generated", "code": "        if (init.length!= dimension) {\n            throw new DimensionMismatchException(init.length, dimension);\n        }\n        if (lB.length!= dimension) {\n            throw new DimensionMismatchException(lB.length, dimension);\n        }", "entropy": 0.127685546875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [1.7080078125, 0.69873046875, 0.08758544921875, 0.431640625, 0.451416015625, 0.0005598068237304688, 0.05633544921875, 0.6845703125, 0.06597900390625, 0.0231170654296875, 0.077880859375, 0.0159454345703125, 0.133056640625, 0.5693359375, 0.003177642822265625, 0.0013856887817382812, 0.0164794921875, 0.0989990234375, 0.0009684562683105469, 0.00025272369384765625, 0.0072784423828125, 0.193359375, 0.039215087890625, 0.009674072265625, 0.0002484321594238281, 0.281982421875, 0.1492919921875, 0.0293121337890625, 0.173583984375, 0.0006537437438964844, 0.41796875, 4.947185516357422e-05, 0.0283355712890625, 0.02374267578125, 0.12445068359375, 0.0016231536865234375, 0.00547027587890625, 0.004276275634765625, 0.0006175041198730469, 0.0023517608642578125, 0.00012218952178955078, 3.075599670410156e-05, 0.0005278587341308594, 0.00794219970703125, 5.936622619628906e-05, 8.83340835571289e-05, 8.726119995117188e-05, 0.000293731689453125, 0.00415802001953125, 0.0012674331665039062, 0.0012302398681640625, 0.0003974437713623047], "tokens": [351, 415, 308, 1664, 32, 1322, 863, 8742, 27, 301, 324, 1422, 537, 17417, 31102, 984, 26, 1664, 32, 1322, 30, 8742, 293, 291, 320, 291, 415, 308, 94, 52, 32, 1322, 863, 8742, 27, 301, 324, 1422, 537, 17417, 31102, 984, 26, 94, 52, 32, 1322, 30, 8742, 293, 291, 320]}
{"line_number": 535, "line_type": "original", "code": "                boundaries = new double[2][];", "entropy": 1.8017578125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [8.1328125, 3.41015625, 1.4150390625, 0.130126953125, 0.041351318359375, 0.5625, 0.0311737060546875, 0.01529693603515625, 2.474609375], "tokens": [2071, 28116, 280, 537, 2064, 77, 36, 1674, 970]}
{"line_number": 535, "line_type": "generated", "code": "\n        // Initialize dynamic (internal) search parameters.\n        // Initialize step-size control parameters and constants.\n        c1 = 4 / (dimension + 4);\n        cmu = (dimension + 2) / (dimension + 3);\n       ", "entropy": 0.370849609375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.1693115234375, 0.9033203125, 1.263671875, 0.319091796875, 0.06072998046875, 0.21875, 0.0625, 0.76123046875, 0.93212890625, 0.51171875, 0.0985107421875, 1.0712890625, 1.322265625, 0.453125, 0.09442138671875, 0.03271484375, 0.75537109375, 0.50537109375, 0.1871337890625, 0.517578125, 0.03656005859375, 0.04718017578125, 1.9765625, 0.22802734375, 0.035552978515625, 0.5625, 0.92724609375, 0.841796875, 0.0478515625, 0.58544921875, 0.0260772705078125, 0.004978179931640625, 0.0081634521484375, 0.54150390625, 0.0537109375, 0.0986328125, 0.0019893646240234375, 0.0005183219909667969, 0.81787109375, 0.7783203125, 0.302978515625, 0.0003898143768310547, 0.03271484375, 0.0455322265625, 0.00015056133270263672, 0.350341796875, 0.0323486328125, 0.0015201568603515625, 0.027618408203125, 0.46484375, 0.00775909423828125, 0.156982421875], "tokens": [291, 434, 8958, 7094, 308, 3259, 27, 3233, 3377, 32, 291, 434, 8958, 3111, 31, 891, 3498, 3377, 461, 12388, 32, 291, 281, 35, 280, 225, 38, 517, 308, 11694, 474, 225, 38, 293, 291, 281, 6974, 280, 308, 11694, 474, 225, 36, 27, 517, 308, 11694, 474, 225, 37, 293, 291]}
{"line_number": 536, "line_type": "original", "code": "                boundaries[0] = lB;", "entropy": 2.2421875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [7.0703125, 9.890625, 0.6357421875, 0.1898193359375, 0.0068817138671875, 0.0180206298828125, 2.220703125, 0.003192901611328125, 0.133544921875], "tokens": [2071, 28116, 77, 34, 79, 280, 456, 52, 45]}
{"line_number": 536, "line_type": "generated", "code": "\n        if (inputSigma == null) {\n            sigma = Math.max(1e-12, dimension * 1e-3);\n        } else {\n            sigma = Math.max(1e-12, MathArrays.max(", "entropy": 0.42529296875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.1888427734375, 1.23046875, 0.01255035400390625, 0.142822265625, 0.00014317035675048828, 0.287109375, 0.00093841552734375, 0.0333251953125, 0.029144287109375, 0.095703125, 0.853515625, 0.0165252685546875, 0.9775390625, 0.1339111328125, 0.7626953125, 0.00868988037109375, 2.119140625, 0.73291015625, 0.0017719268798828125, 0.62158203125, 1.2919921875, 0.13818359375, 2.794921875, 1.7568359375, 0.7763671875, 0.3369140625, 0.5458984375, 0.0023040771484375, 1.7978515625, 0.15576171875, 0.1719970703125, 0.00031828880310058594, 0.494873046875, 0.0089263916015625, 0.022674560546875, 0.06768798828125, 0.00823211669921875, 0.6767578125, 0.011138916015625, 0.1531982421875, 0.0028400421142578125, 0.306884765625, 0.01397705078125, 0.0001342296600341797, 0.027252197265625, 0.035858154296875, 0.0030345916748046875, 0.43994140625, 0.27294921875, 0.0004558563232421875, 1.5341796875, 0.01009368896484375], "tokens": [291, 415, 308, 1131, 28326, 610, 744, 27, 301, 324, 16355, 280, 4175, 32, 1449, 26, 35, 87, 31, 35, 36, 30, 8742, 319, 225, 35, 87, 31, 37, 293, 291, 320, 813, 301, 324, 16355, 280, 4175, 32, 1449, 26, 35, 87, 31, 35, 36, 30, 4175, 9978, 32, 1449, 26]}
{"line_number": 537, "line_type": "original", "code": "                boundaries[1] = uB;", "entropy": 2.236328125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [7.015625, 7.0546875, 0.375732421875, 0.437255859375, 0.07489013671875, 0.01922607421875, 4.95703125, 0.001796722412109375, 0.194580078125], "tokens": [2071, 28116, 77, 35, 79, 280, 1044, 52, 45]}
{"line_number": 537, "line_type": "generated", "code": "\n        // initialize mu\n        mu = (int) (lambda / 2);\n        // initialize c1\n        c1 = (4 + mu) / (7 + 32 * mu);\n        // initialize cmu\n        cmu = Math.sqrt", "entropy": 0.439208984375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.634765625, 1.3427734375, 0.69921875, 1.4521484375, 0.2459716796875, 0.96142578125, 0.031982421875, 1.830078125, 0.08258056640625, 0.01189422607421875, 0.59765625, 0.0791015625, 0.0411376953125, 0.010101318359375, 0.0007748603820800781, 0.4599609375, 0.345703125, 0.51318359375, 0.69189453125, 2.880859375, 1.638671875, 0.8505859375, 0.412841796875, 0.00850677490234375, 0.01165008544921875, 0.8515625, 0.048583984375, 0.270751953125, 0.0245819091796875, 0.07928466796875, 3.9577484130859375e-05, 0.0007872581481933594, 1.8818359375, 0.256591796875, 0.0213775634765625, 0.01270294189453125, 0.82958984375, 0.122802734375, 0.02001953125, 0.018798828125, 0.023956298828125, 0.03094482421875, 0.0101165771484375, 0.0241851806640625, 0.0023784637451171875, 0.0711669921875, 0.1085205078125, 0.0013208389282226562, 0.00024259090423583984, 1.5751953125, 0.0075531005859375, 0.7197265625], "tokens": [291, 434, 7379, 11768, 291, 11768, 280, 308, 410, 27, 308, 5962, 517, 225, 36, 293, 291, 434, 7379, 281, 35, 291, 281, 35, 280, 308, 38, 474, 11768, 27, 517, 308, 41, 474, 225, 37, 36, 319, 11768, 293, 291, 434, 7379, 281, 6974, 291, 281, 6974, 280, 4175, 32, 8663]}
{"line_number": 540, "line_type": "original", "code": "                for (int i = 0; i < lB.length; i++) {", "entropy": 1.2568359375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [5.07421875, 6.8515625, 0.0447998046875, 0.05755615234375, 4.8515625, 0.062225341796875, 0.01137542724609375, 0.01461029052734375, 0.00743865966796875, 0.0023517608642578125, 0.004215240478515625, 6.3203125, 0.410888671875, 0.0124664306640625, 0.005764007568359375, 0.0222320556640625, 0.0926513671875, 0.007659912109375, 0.025970458984375], "tokens": [2071, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 456, 52, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 540, "line_type": "generated", "code": "\n            if (sigmaArray[i][0] > 0.5) {\n                sigmaArray[i][0] = 0.5;\n            }\n        }\n\n        sigma = new RealMatrixImpl(sigmaArray);\n\n        // initialize mu\n        mu", "entropy": 0.29931640625, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.85595703125, 0.57470703125, 0.047393798828125, 0.49755859375, 0.02252197265625, 0.0005660057067871094, 0.0029735565185546875, 0.030731201171875, 0.001857757568359375, 0.003963470458984375, 1.2138671875, 0.2052001953125, 0.90478515625, 0.0285797119140625, 0.7275390625, 0.1927490234375, 0.00768280029296875, 0.0477294921875, 0.5556640625, 0.0156097412109375, 0.0003590583801269531, 0.0003631114959716797, 0.003932952880859375, 0.0006346702575683594, 0.0005517005920410156, 0.0034313201904296875, 0.022735595703125, 0.0150146484375, 0.0003643035888671875, 0.1649169921875, 0.29638671875, 0.191650390625, 0.0005788803100585938, 0.666015625, 0.004306793212890625, 1.568359375, 1.978515625, 0.10443115234375, 0.9892578125, 0.404541015625, 0.0040740966796875, 0.0760498046875, 0.0027618408203125, 0.1187744140625, 0.00032210350036621094, 0.041107177734375, 0.62451171875, 0.150390625, 0.52685546875, 0.77783203125, 0.346435546875, 0.54248046875], "tokens": [324, 415, 308, 11756, 1261, 77, 91, 1674, 34, 79, 848, 225, 34, 32, 39, 27, 301, 400, 16355, 1261, 77, 91, 1674, 34, 79, 280, 225, 34, 32, 39, 45, 324, 320, 291, 320, 584, 16355, 280, 537, 11443, 4161, 3482, 26, 11756, 1261, 293, 584, 434, 7379, 11768, 291, 11768]}
{"line_number": 541, "line_type": "original", "code": "                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {", "entropy": 0.9375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [8.15625, 2.21875, 0.1058349609375, 2.171875, 0.0036525726318359375, 0.619140625, 0.0002033710479736328, 0.0067596435546875, 3.99609375, 0.00562286376953125, 0.006099700927734375, 0.73583984375, 0.004749298095703125, 0.189697265625, 2.84375, 0.218994140625, 0.007259368896484375, 0.0003025531768798828, 0.0032482147216796875, 0.0006275177001953125, 0.0014047622680664062, 0.2301025390625, 0.033233642578125], "tokens": [4696, 415, 308, 4075, 32, 28823, 11949, 26, 4464, 5270, 77, 35, 1674, 91, 79, 429, 28116, 77, 34, 1674, 91, 5259, 301]}
{"line_number": 541, "line_type": "generated", "code": "\n        // initialize mu\n        mu = lambda / 2;", "entropy": 0.58837890625, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.2403564453125, 0.994140625, 0.9931640625, 1.4140625, 0.364990234375, 1.125, 0.048583984375, 1.1982421875, 0.056884765625, 0.12188720703125, 0.0006909370422363281, 0.5009765625], "tokens": [291, 434, 7379, 11768, 291, 11768, 280, 9254, 517, 225, 36, 45]}
{"line_number": 514, "line_type": "original", "code": "                hasFiniteBounds = true;", "entropy": 2.419921875, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [4.125, 11.0390625, 0.7958984375, 0.089599609375, 0.22705078125, 0.6455078125, 0.016845703125], "tokens": [2071, 1401, 40643, 8285, 280, 861, 45]}
{"line_number": 514, "line_type": "generated", "code": "\n            }\n        }\n    }\n\n    /**\n     * Check whether the current point is feasible.\n     *\n     * @param x Point to be checked.\n     * @return true if feasible.\n     */\n    private boolean isFeasible(double[] x", "entropy": 0.53466796875, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [1.0419921875, 0.004360198974609375, 0.11505126953125, 0.001552581787109375, 0.83349609375, 0.0025386810302734375, 0.4208984375, 0.12890625, 0.058441162109375, 7.069110870361328e-05, 4.2421875, 1.966796875, 0.57373046875, 3.78515625, 1.0693359375, 0.475341796875, 1.5107421875, 0.0007677078247070312, 0.68701171875, 0.133544921875, 0.076904296875, 0.7041015625, 0.00189208984375, 0.0567626953125, 0.1234130859375, 0.9931640625, 1.2607421875, 0.70703125, 0.41552734375, 0.211181640625, 0.134521484375, 0.00861358642578125, 0.040496826171875, 0.033966064453125, 0.2215576171875, 1.4267578125, 0.08831787109375, 1.3330078125, 0.001079559326171875, 0.73291015625, 0.00820159912109375, 0.09454345703125, 0.007354736328125, 0.1502685546875, 0.007686614990234375, 0.74462890625, 0.0218353271484375, 0.0009741783142089844, 0.0946044921875, 1.033203125, 0.022796630859375, 0.0027561187744140625], "tokens": [324, 320, 291, 320, 284, 320, 446, 1022, 275, 319, 3456, 4946, 322, 1550, 2260, 438, 5246, 38294, 32, 275, 319, 275, 319, 477, 753, 816, 6431, 372, 526, 8137, 32, 275, 319, 477, 601, 861, 415, 5246, 38294, 32, 275, 569, 284, 945, 1905, 438, 9008, 38294, 26, 2627, 1178, 816]}
{"line_number": 515, "line_type": "original", "code": "                break;", "entropy": 4.97265625, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [4.7890625, 10.1171875, 0.018096923828125], "tokens": [2071, 1626, 45]}
{"line_number": 515, "line_type": "generated", "code": "\n                }\n            }\n        }", "entropy": 0.1265869140625, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [0.51708984375, 0.0034580230712890625, 0.07122802734375, 0.0006561279296875, 0.1644287109375, 0.00232696533203125], "tokens": [400, 320, 324, 320, 291, 320]}
{"line_number": 521, "line_type": "original", "code": "            for (int i = 0; i < lB.length; i++) {", "entropy": 0.66162109375, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [3.78125, 6.4375, 0.017242431640625, 0.0916748046875, 0.454345703125, 0.005580902099609375, 0.00421905517578125, 0.007717132568359375, 0.0056304931640625, 0.0017681121826171875, 0.005542755126953125, 1.701171875, 0.00439453125, 0.0019407272338867188, 0.00109100341796875, 0.005107879638671875, 0.01085662841796875, 0.005641937255859375, 0.0248260498046875], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 456, 52, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 521, "line_type": "generated", "code": "\n                }\n            }\n        } else {\n            // Initialize a default value of sigma.\n            inputSigma = new double[init.length];\n            for (int i = 0; i < init.length; i++) {\n                inputSigma[i]", "entropy": 0.3486328125, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [0.40673828125, 0.05548095703125, 0.384765625, 0.004566192626953125, 0.215087890625, 0.005584716796875, 0.96728515625, 0.3037109375, 0.13525390625, 0.93359375, 3.05078125, 3.1328125, 0.97705078125, 0.92041015625, 2.125, 1.0419921875, 0.859375, 0.1937255859375, 0.60205078125, 2.777576446533203e-05, 0.00548553466796875, 0.1190185546875, 0.0016422271728515625, 0.002044677734375, 0.11981201171875, 0.0002639293670654297, 8.738040924072266e-05, 0.000942230224609375, 0.1812744140625, 0.378173828125, 0.002197265625, 0.0011892318725585938, 0.00807952880859375, 0.0028095245361328125, 0.0009870529174804688, 0.0020275115966796875, 0.0013427734375, 0.0013971328735351562, 0.00118255615234375, 0.28173828125, 0.00012886524200439453, 0.00011408329010009766, 0.001354217529296875, 0.0165557861328125, 0.0024051666259765625, 0.005489349365234375, 0.1861572265625, 0.47900390625, 2.7418136596679688e-06, 0.0002269744873046875, 0.0005559921264648438, 0.0007672309875488281], "tokens": [400, 320, 324, 320, 291, 320, 813, 301, 324, 434, 8958, 312, 1244, 786, 432, 16355, 32, 324, 1509, 28326, 280, 537, 2064, 77, 1664, 32, 1322, 970, 324, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 3219, 32, 1322, 45, 595, 1987, 301, 400, 1509, 28326, 77, 91, 79]}
{"line_number": 522, "line_type": "original", "code": "                if (Double.isInfinite(lB[i]) ||", "entropy": 0.96728515625, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [3.279296875, 0.440673828125, 0.1356201171875, 2.0078125, 0.0005736351013183594, 0.405517578125, 0.00043582916259765625, 0.0060577392578125, 5.234375, 0.0166778564453125, 0.005062103271484375, 0.005214691162109375, 0.77197265625, 1.2294921875], "tokens": [2071, 415, 308, 4075, 32, 28823, 11949, 26, 94, 52, 77, 91, 1130, 1276]}
{"line_number": 522, "line_type": "generated", "code": "\n            }\n        }\n    }\n\n    /**\n     * Converts the initial guess to a valid point.\n     *\n     * @param p Initial guess.\n     * @return Valid initial guess.\n     * @throws NumberIsTooSmallException if the initial guess is too", "entropy": 0.5859375, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [0.5751953125, 0.045684814453125, 0.175537109375, 0.0029544830322265625, 1.2001953125, 0.00246429443359375, 0.365234375, 0.11669921875, 0.08203125, 6.008148193359375e-05, 3.517578125, 1.19140625, 2.15234375, 1.0185546875, 1.087890625, 1.48828125, 2.744140625, 1.0537109375, 0.6669921875, 0.198974609375, 0.06121826171875, 1.056640625, 0.001995086669921875, 0.1107177734375, 0.39892578125, 2.28125, 0.9853515625, 0.06890869140625, 0.1251220703125, 0.0217437744140625, 0.005767822265625, 0.0209808349609375, 0.11016845703125, 1.0302734375, 0.5791015625, 0.2025146484375, 0.10693359375, 0.01287841796875, 0.716796875, 0.0251312255859375, 0.1243896484375, 1.349609375, 0.0016880035400390625, 0.00434112548828125, 0.80029296875, 1.33514404296875e-05, 0.07562255859375, 0.9326171875, 0.258544921875, 0.1160888671875, 0.321533203125, 0.8759765625], "tokens": [324, 320, 291, 320, 284, 320, 446, 1022, 275, 319, 25337, 322, 2815, 11089, 372, 312, 2080, 2260, 32, 275, 319, 275, 319, 477, 753, 298, 5768, 11089, 32, 275, 319, 477, 601, 5381, 2815, 11089, 32, 275, 319, 477, 5117, 5104, 1622, 20563, 12470, 984, 415, 322, 2815, 11089, 438, 5133]}
{"line_number": 529, "line_type": "original", "code": "            if (hasInfiniteBounds) {", "entropy": 1.6708984375, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [4.88671875, 2.56640625, 0.1746826171875, 5.03515625, 0.35498046875, 0.03350830078125, 0.1661376953125, 0.1478271484375], "tokens": [1468, 415, 308, 2040, 39524, 8285, 27, 301]}
{"line_number": 529, "line_type": "generated", "code": "\n     */\n    private void initDynamicParameter() {\n        // Initialization of the dynamic search parameters\n        if (lambda == 0) {\n            // Initialization of lambda\n            lambda = 4 + Math.floor(3 * Math.log(n));\n        }", "entropy": 0.5869140625, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [1.0, 0.482421875, 0.023406982421875, 0.101806640625, 0.078857421875, 0.77685546875, 0.9033203125, 2.1015625, 0.2061767578125, 0.0242919921875, 0.271728515625, 0.888671875, 2.072265625, 0.18896484375, 0.51904296875, 0.626953125, 0.29345703125, 0.0828857421875, 0.34423828125, 1.7509765625, 0.11798095703125, 2.37890625, 1.1220703125, 0.276123046875, 0.153076171875, 0.198974609375, 0.014617919921875, 0.09881591796875, 1.294921875, 2.248046875, 0.208251953125, 1.251953125, 0.8173828125, 0.87744140625, 0.0472412109375, 1.4833984375, 0.217529296875, 0.131591796875, 0.85791015625, 0.04840087890625, 0.421875, 0.040374755859375, 0.005504608154296875, 0.326416015625, 0.090087890625, 0.0022907257080078125, 0.457275390625, 0.0130615234375, 1.943359375, 0.229248046875, 0.399169921875, 0.0007562637329101562], "tokens": [275, 569, 284, 945, 763, 3219, 7183, 3012, 346, 301, 291, 434, 33176, 432, 322, 7094, 3233, 3377, 291, 415, 308, 5962, 610, 225, 34, 27, 301, 324, 434, 33176, 432, 9254, 324, 9254, 280, 225, 38, 474, 4175, 32, 9121, 26, 37, 319, 4175, 32, 751, 26, 96, 876, 291, 320]}
{"line_number": 384, "line_type": "original", "code": "                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))", "entropy": 2.24609375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [8.015625, 9.8125, 6.078125, 0.325927734375, 0.9443359375, 0.058258056640625, 0.1209716796875, 0.052490234375, 0.010589599609375, 14.2734375, 1.712890625, 0.5185546875, 0.0206146240234375, 2.419921875, 0.038787841796875, 0.99560546875, 0.1939697265625, 0.2437744140625, 0.00250244140625, 0.254150390625, 1.103515625], "tokens": [9316, 2099, 29640, 280, 816, 6009, 32, 669, 26, 7644, 32, 20123, 26, 282, 108, 32, 19239, 4161, 26, 93, 490]}
{"line_number": 384, "line_type": "generated", "code": "\n                if (iterations >= maxIterations) {\n                    break generationLoop;\n                }\n                // update bestever and sigma0\n                if (bestFitness < bestever) {\n                    bestever = bestFitness;\n                    sigma0 = sigma;\n                }", "entropy": 0.451416015625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.2734375, 0.6787109375, 0.2020263671875, 2.076171875, 0.477294921875, 0.2398681640625, 0.036376953125, 0.333740234375, 0.017120361328125, 0.055450439453125, 0.0947265625, 0.499755859375, 4.673004150390625e-05, 0.00036072731018066406, 0.02362060546875, 0.0013284683227539062, 0.8046875, 1.138671875, 2.578125, 1.669921875, 1.1982421875, 1.4541015625, 1.69140625, 0.671875, 0.52978515625, 0.294189453125, 0.076171875, 0.69873046875, 0.70166015625, 1.2236328125, 0.31640625, 0.1556396484375, 0.465087890625, 0.03131103515625, 0.03076171875, 0.0252685546875, 9.012222290039062e-05, 0.005001068115234375, 0.0033626556396484375, 0.0002875328063964844, 0.0011196136474609375, 0.315673828125, 0.266845703125, 0.033477783203125, 0.20263671875, 0.099609375, 0.2861328125, 0.1495361328125, 0.00286102294921875], "tokens": [400, 415, 308, 22400, 2377, 1769, 31219, 27, 301, 528, 1626, 11745, 7497, 45, 400, 320, 400, 434, 1974, 5273, 4340, 461, 16355, 34, 400, 415, 308, 8773, 48599, 333, 5273, 4340, 27, 301, 528, 5273, 4340, 280, 5273, 48599, 45, 528, 16355, 34, 280, 16355, 45, 400, 320]}
{"line_number": 413, "line_type": "original", "code": "                    updateCovariance(hsig, bestArx, arz, arindex, xold);", "entropy": 1.4072265625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [5.265625, 7.55859375, 1.4970703125, 0.003124237060546875, 2.375, 1.666015625, 3.135204315185547e-05, 0.1402587890625, 0.469970703125, 0.0024089813232421875, 1.638671875, 0.4248046875, 2.1484375, 1.4140625, 0.53515625, 0.78125, 0.46337890625, 0.99267578125, 2.044921875, 0.0219268798828125, 0.09783935546875], "tokens": [4696, 1974, 2235, 17965, 26, 3914, 365, 30, 5273, 3421, 106, 30, 2099, 108, 30, 2099, 1055, 30, 816, 1455, 293]}
{"line_number": 413, "line_type": "generated", "code": "\n                    break generationLoop;\n                }\n                // Handle termination criteria\n                // Break, if maximal iterations are reached\n                if (iterations >= maxIterations) {\n                    break generationLoop;\n                }\n                // Break, if maximal runtime is reached\n                if (System", "entropy": 0.51513671875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [1.1826171875, 0.48876953125, 0.06512451171875, 5.4836273193359375e-06, 0.0012302398681640625, 0.109375, 0.001087188720703125, 0.331787109375, 0.734375, 4.28515625, 2.3671875, 0.88916015625, 0.642578125, 1.0703125, 0.5400390625, 0.195556640625, 0.003673553466796875, 2.146484375, 0.63427734375, 1.4169921875, 0.4521484375, 0.72607421875, 0.09674072265625, 0.138916015625, 0.0158233642578125, 0.2012939453125, 0.2105712890625, 0.00970458984375, 0.0038394927978515625, 0.06878662109375, 0.01277923583984375, 0.134033203125, 0.07550048828125, 0.12054443359375, 1.9073486328125e-06, 0.00029206275939941406, 0.0096435546875, 0.0010919570922851562, 0.398193359375, 0.292236328125, 0.64599609375, 0.058349609375, 0.0053558349609375, 1.580078125, 0.081298828125, 2.087890625, 0.052490234375, 0.01157379150390625, 0.2137451171875, 0.1514892578125, 0.08465576171875, 1.740234375], "tokens": [528, 1626, 11745, 7497, 45, 400, 320, 400, 434, 7968, 34704, 15261, 400, 434, 19868, 30, 415, 1769, 2977, 17576, 884, 16673, 400, 415, 308, 22400, 2377, 1769, 31219, 27, 301, 528, 1626, 11745, 7497, 45, 400, 320, 400, 434, 19868, 30, 415, 1769, 2977, 6091, 438, 16673, 400, 415, 308, 1598]}
