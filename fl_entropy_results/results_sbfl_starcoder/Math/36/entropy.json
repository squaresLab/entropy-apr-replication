{"line_number": 732, "line_type": "original", "code": "        float result = numerator.floatValue() / denominator.floatValue();", "entropy": 0.90234375, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [5.01171875, 8.25, 0.52685546875, 0.255615234375, 0.274169921875, 0.0042266845703125, 0.042572021484375, 0.0295257568359375, 0.0001392364501953125, 0.01177215576171875, 0.007106781005859375, 0.01171112060546875, 0.00817108154296875, 0.0013628005981445312, 0.0002853870391845703, 0.0022430419921875], "tokens": [351, 1897, 1056, 280, 1929, 11290, 32, 1808, 882, 346, 517, 39920, 32, 1808, 882, 473]}
{"line_number": 732, "line_type": "generated", "code": "\n    /**\n     * <p>\n     * Access the numerator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>int</tt>.\n     */\n    public int getNumerator", "entropy": 0.0232086181640625, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [0.54345703125, 0.07275390625, 0.0224609375, 0.00019156932830810547, 0.02520751953125, 0.0004284381866455078, 0.0002218484878540039, 0.007904052734375, 4.458427429199219e-05, 0.12054443359375, 0.0007863044738769531, 0.006526947021484375, 0.00020051002502441406, 0.0013294219970703125, 0.052978515625, 0.00893402099609375, 0.0202178955078125, 6.29425048828125e-05, 0.16259765625, 0.0010557174682617188, 3.147125244140625e-05, 0.0020885467529296875, 0.034820556640625, 0.0001266002655029297, 0.0008878707885742188, 0.00015616416931152344, 0.0005207061767578125, 0.00426483154296875, 0.0001157522201538086, 0.00876617431640625, 2.014636993408203e-05, 0.0013189315795898438, 0.00033211708068847656, 0.00217437744140625, 0.0013256072998046875, 0.00015056133270263672, 0.0008225440979003906, 0.025421142578125, 0.0031223297119140625, 0.0007867813110351562, 1.0609626770019531e-05, 0.005489349365234375, 0.00021386146545410156, 7.677078247070312e-05, 0.0024261474609375, 0.0070343017578125, 0.0200653076171875, 0.01641845703125, 0.0177764892578125, 0.0017976760864257812, 0.0007405281066894531, 7.641315460205078e-05], "tokens": [284, 1022, 275, 319, 333, 98, 48, 275, 319, 8258, 322, 1929, 11290, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 275, 319, 576, 98, 48, 275, 319, 275, 319, 477, 601, 322, 1929, 11290, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 275, 569, 284, 562, 629, 44929, 11290]}
{"line_number": 735, "line_type": "original", "code": "        return result;", "entropy": 2.78125, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [4.3125, 0.478759765625, 6.0390625, 0.29638671875], "tokens": [351, 442, 1056, 45]}
{"line_number": 735, "line_type": "generated", "code": "\n     * </p>\n     *\n     * @return the numerator as a <tt>int</tt>.\n     */\n    public int getNumeratorAsInt() {\n        return numerator.intValue();\n    }\n\n    /**\n     * <p>\n     *", "entropy": 0.024627685546875, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [0.4287109375, 0.367919921875, 0.028472900390625, 0.00046944618225097656, 0.0019197463989257812, 0.0458984375, 0.0012369155883789062, 0.04486083984375, 0.0005445480346679688, 0.0019683837890625, 0.0007433891296386719, 0.002391815185546875, 0.0018472671508789062, 5.6743621826171875e-05, 0.0009169578552246094, 0.04473876953125, 0.004238128662109375, 0.0018939971923828125, 4.4345855712890625e-05, 0.00942230224609375, 0.00047278404235839844, 0.00011515617370605469, 0.007049560546875, 0.126220703125, 0.0256195068359375, 0.012451171875, 0.00885009765625, 0.0018291473388671875, 0.00015211105346679688, 1.0967254638671875e-05, 0.0001785755157470703, 0.0005259513854980469, 0.0009708404541015625, 0.0029392242431640625, 0.045257568359375, 0.0060272216796875, 0.002300262451171875, 1.6927719116210938e-05, 0.0016660690307617188, 0.0006318092346191406, 0.0017805099487304688, 0.0151824951171875, 0.00022971630096435547, 0.0206146240234375, 0.0018968582153320312, 0.0074310302734375, 4.7206878662109375e-05, 0.0014858245849609375, 3.2782554626464844e-05, 1.4066696166992188e-05, 0.00044536590576171875, 9.179115295410156e-06], "tokens": [275, 319, 576, 98, 48, 275, 319, 275, 319, 477, 601, 322, 1929, 11290, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 275, 569, 284, 562, 629, 44929, 11290, 1465, 1428, 346, 301, 291, 442, 1929, 11290, 32, 22802, 473, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319]}
{"line_number": 131, "line_type": "original", "code": "            final BigInteger gcd = num.gcd(den);", "entropy": 2.79296875, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [6.625, 2.00390625, 4.1015625, 11.328125, 0.40673828125, 4.640625, 1.18359375, 0.33203125, 0.003299713134765625, 0.0767822265625, 0.0144805908203125], "tokens": [1468, 1158, 21743, 43422, 280, 1929, 32, 46060, 26, 5114, 293]}
{"line_number": 131, "line_type": "generated", "code": "\n        final int  exponent = (int) ((bits & exponentBitsMask) >> exponentBitsShift);\n        final long mantissa = bits & mantissaBitsMask;\n        if (exponent == 0) {\n            // subnormal number\n            k", "entropy": 0.36669921875, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.275146484375, 0.51171875, 0.59033203125, 0.11767578125, 1.5322265625, 0.009002685546875, 0.62548828125, 0.0193634033203125, 0.5107421875, 0.5234375, 0.0015239715576171875, 0.2423095703125, 1.1044921875, 0.87939453125, 1.279296875, 0.007843017578125, 0.252197265625, 0.346923828125, 0.447265625, 0.3701171875, 0.07855224609375, 0.08795166015625, 0.1488037109375, 0.047515869140625, 0.025634765625, 0.29248046875, 5.245208740234375e-06, 0.00421142578125, 0.66552734375, 0.0015964508056640625, 0.0462646484375, 0.01216888427734375, 7.510185241699219e-06, 0.020843505859375, 7.462501525878906e-05, 0.0019283294677734375, 1.2724609375, 1.81640625, 0.0831298828125, 0.017333984375, 0.091796875, 0.10125732421875, 0.032135009765625, 0.01910400390625, 0.0038604736328125, 0.1431884765625, 1.0078125, 0.20068359375, 0.00414276123046875, 0.873046875, 0.658203125, 1.65234375], "tokens": [291, 1158, 629, 225, 19715, 280, 308, 410, 27, 1833, 5960, 549, 19715, 8733, 6275, 27, 3776, 19715, 8733, 10210, 293, 291, 1158, 1946, 345, 29913, 2496, 280, 7030, 549, 345, 29913, 2496, 8733, 6275, 45, 291, 415, 308, 28323, 610, 225, 34, 27, 301, 324, 434, 1361, 4382, 1451, 324, 831]}
{"line_number": 132, "line_type": "original", "code": "            if (BigInteger.ONE.compareTo(gcd) < 0) {", "entropy": 2.12890625, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [5.51953125, 3.677734375, 0.2469482421875, 6.078125, 0.1669921875, 4.5703125, 0.00908660888671875, 2.6953125, 0.00872802734375, 8.40625, 0.51513671875, 2.048828125, 0.00371551513671875, 0.00739288330078125, 0.028106689453125, 0.09356689453125], "tokens": [1468, 415, 308, 21541, 32, 4431, 32, 23908, 26, 46060, 27, 333, 225, 34, 27, 301]}
{"line_number": 132, "line_type": "generated", "code": "\n        final long exponent = (bits & 0x7FF0000000000000L) >> 52;\n        final long mantissa = bits & 0x000FFFFFFFFFFFFFL;", "entropy": 0.066162109375, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.64306640625, 0.4150390625, 0.2060546875, 0.07318115234375, 0.0025959014892578125, 0.689453125, 0.00444793701171875, 0.0160064697265625, 0.01485443115234375, 6.67572021484375e-06, 2.3603439331054688e-05, 1.3113021850585938e-05, 0.60546875, 1.7762184143066406e-05, 2.7418136596679688e-06, 5.960464477539062e-07, 1.1920928955078125e-07, 1.6689300537109375e-06, 9.5367431640625e-07, 9.5367431640625e-07, 2.7418136596679688e-06, 1.430511474609375e-06, 1.1920928955078125e-07, 1.1920928955078125e-07, 4.76837158203125e-07, 8.344650268554688e-06, 0.005405426025390625, 0.0010700225830078125, 0.2939453125, 0.004726409912109375, 0.00019621849060058594, 0.00010752677917480469, 0.00634002685546875, 0.04461669921875, 0.04852294921875, 0.004352569580078125, 0.0235748291015625, 0.00975799560546875, 2.7418136596679688e-06, 0.0018835067749023438, 0.31005859375, 0.0006351470947265625, 0.002017974853515625, 2.4437904357910156e-05, 0.004505157470703125, 0.000247955322265625, 1.4185905456542969e-05, 0.00014865398406982422, 0.004886627197265625, 0.0026798248291015625, 0.00010848045349121094, 0.00032901763916015625], "tokens": [291, 1158, 1946, 19715, 280, 308, 5960, 549, 225, 34, 106, 41, 1139, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 62, 27, 3776, 225, 39, 36, 45, 291, 1158, 1946, 345, 29913, 2496, 280, 7030, 549, 225, 34, 106, 34, 34, 34, 13951, 4139, 3314, 45]}
{"line_number": 138, "line_type": "original", "code": "            if (BigInteger.ZERO.compareTo(den) > 0) {", "entropy": 1.49609375, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [5.41796875, 2.1328125, 0.11468505859375, 6.99609375, 0.05438232421875, 2.90625, 0.0225677490234375, 1.599609375, 0.002696990966796875, 2.443359375, 0.2276611328125, 1.810546875, 0.002834320068359375, 0.0016880035400390625, 0.0703125, 0.13671875], "tokens": [1468, 415, 308, 21541, 32, 13977, 32, 23908, 26, 5114, 27, 848, 225, 34, 27, 301]}
{"line_number": 138, "line_type": "generated", "code": "\n        final int k = (int) (exponent >> 52) - 1075;\n\n        // compute the fraction (m * 2^k) / (1 << 52)\n        m <<= 52;\n        BigInteger", "entropy": 0.399658203125, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [1.0830078125, 1.8544921875, 0.316162109375, 0.427001953125, 0.14892578125, 0.5986328125, 0.041229248046875, 0.1866455078125, 0.6552734375, 0.0029582977294921875, 0.311767578125, 0.0017671585083007812, 8.738040924072266e-05, 0.00011670589447021484, 0.043304443359375, 0.0002034902572631836, 0.015869140625, 0.0226898193359375, 0.0002694129943847656, 0.361083984375, 0.02752685546875, 0.032073974609375, 1.0859375, 0.2177734375, 0.62451171875, 1.1279296875, 1.0693359375, 1.4755859375, 1.0302734375, 0.1634521484375, 0.005039215087890625, 0.00012445449829101562, 0.301513671875, 0.56982421875, 0.0272674560546875, 0.0357666015625, 0.470703125, 0.759765625, 0.10528564453125, 0.0104217529296875, 0.0016956329345703125, 0.323486328125, 0.09478759765625, 0.126708984375, 1.1669921875, 0.3056640625, 0.1416015625, 0.8837890625, 0.08038330078125, 0.67578125, 0.1578369140625, 1.603515625], "tokens": [291, 1158, 629, 831, 280, 308, 410, 27, 308, 28323, 3776, 225, 39, 36, 27, 429, 225, 35, 34, 41, 39, 45, 584, 434, 7596, 322, 18795, 308, 95, 319, 225, 36, 80, 93, 27, 517, 308, 35, 1264, 225, 39, 36, 27, 291, 345, 40167, 225, 39, 36, 45, 291, 21743]}
{"line_number": 144, "line_type": "original", "code": "            numerator   = num;", "entropy": 3.072265625, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [6.23828125, 10.3125, 0.004589080810546875, 0.7265625, 0.09356689453125, 1.9541015625, 2.16796875], "tokens": [1468, 1929, 11290, 261, 280, 1929, 45]}
{"line_number": 144, "line_type": "generated", "code": "\n            k = k - 1;\n        }\n\n        // compute the fraction\n        if (k >= 0) {\n            m = m << (k - 64);\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.", "entropy": 0.316650390625, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.064697265625, 0.341552734375, 1.0546875, 0.002155303955078125, 0.28564453125, 0.046051025390625, 2.8967857360839844e-05, 0.0005717277526855469, 0.0194091796875, 0.00030922889709472656, 0.89794921875, 0.22021484375, 1.8662109375, 0.75439453125, 0.7431640625, 1.7236328125, 1.205078125, 0.1414794921875, 0.2509765625, 0.358642578125, 0.033203125, 0.008544921875, 0.007511138916015625, 0.0005464553833007812, 0.096923828125, 1.6630859375, 0.078857421875, 0.065185546875, 0.02801513671875, 0.380859375, 1.2998046875, 0.461181640625, 0.00811004638671875, 0.68359375, 0.1585693359375, 0.0221099853515625, 0.466064453125, 0.270751953125, 0.0002390146255493164, 0.2469482421875, 6.42538070678711e-05, 0.039306640625, 0.0017070770263671875, 0.0003094673156738281, 0.00439453125, 0.1380615234375, 0.1829833984375, 0.052734375, 0.0106964111328125, 8.499622344970703e-05, 0.06402587890625, 0.01186370849609375], "tokens": [324, 831, 280, 831, 429, 225, 35, 45, 291, 320, 584, 434, 7596, 322, 18795, 291, 415, 308, 93, 2377, 225, 34, 27, 301, 324, 345, 280, 345, 1264, 308, 93, 429, 225, 40, 38, 293, 324, 1929, 11290, 261, 280, 21743, 32, 9162, 26, 95, 293, 324, 39920, 280, 21743, 32]}
{"line_number": 145, "line_type": "original", "code": "            denominator = den;", "entropy": 4.23046875, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [7.27734375, 9.015625, 0.47265625, 3.2734375, 1.11328125], "tokens": [1468, 39920, 280, 5537, 45]}
{"line_number": 145, "line_type": "generated", "code": "\n        }\n        if (k >= 0) {\n            // we need to move the point of insertion to the right\n            k -= 52;\n            m = m << (52 - k);\n        } else {\n            // we need to move", "entropy": 0.46240234375, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.1668701171875, 0.0021762847900390625, 0.619140625, 1.2900390625, 0.26123046875, 0.509765625, 1.1123046875, 0.1268310546875, 0.04083251953125, 0.038238525390625, 0.0009064674377441406, 0.0596923828125, 1.060546875, 1.599609375, 1.099609375, 0.0780029296875, 2.1328125, 0.04345703125, 0.0296630859375, 0.30126953125, 1.6533203125, 1.4111328125, 0.16259765625, 1.5419921875, 0.505859375, 2.353515625, 0.1099853515625, 0.0205841064453125, 0.470703125, 0.80810546875, 0.00580596923828125, 0.1878662109375, 0.87939453125, 0.58447265625, 0.2115478515625, 0.149169921875, 0.27587890625, 0.6982421875, 0.0389404296875, 0.1788330078125, 0.0170135498046875, 0.0771484375, 0.75537109375, 0.0004305839538574219, 0.2030029296875, 0.01093292236328125, 0.0162353515625, 0.042755126953125, 0.032257080078125, 0.0055694580078125, 0.0019407272338867188, 0.06341552734375], "tokens": [291, 320, 291, 415, 308, 93, 2377, 225, 34, 27, 301, 324, 434, 996, 1849, 372, 5169, 322, 2260, 432, 28926, 372, 322, 2091, 324, 831, 5912, 225, 39, 36, 45, 324, 345, 280, 345, 1264, 308, 39, 36, 429, 831, 293, 291, 320, 813, 301, 324, 434, 996, 1849, 372, 5169]}
{"line_number": 119, "line_type": "original", "code": "    public BigFraction(BigInteger num, BigInteger den) {", "entropy": 2.271484375, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [5.23046875, 2.76171875, 0.0069427490234375, 9.989738464355469e-05, 0.002216339111328125, 15.5859375, 2.095703125, 0.9091796875, 0.07830810546875, 0.01322174072265625, 0.05108642578125, 0.5078125], "tokens": [264, 562, 7758, 20709, 26, 21541, 1929, 30, 21743, 5537, 27, 301]}
{"line_number": 119, "line_type": "generated", "code": "\n     */\n    public BigFraction(final double value) {\n        this(value, 0.0, 1000000000);\n    }\n\n    /**\n     * Create a fraction given the double value and maximum error allowed.", "entropy": 0.2213134765625, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [0.52783203125, 0.384521484375, 0.162841796875, 0.04815673828125, 0.00598907470703125, 9.894371032714844e-06, 0.00254058837890625, 0.056884765625, 0.0023059844970703125, 0.0014104843139648438, 0.0215606689453125, 0.0306243896484375, 0.40185546875, 0.256103515625, 0.044586181640625, 1.19140625, 0.0236053466796875, 0.294677734375, 0.74755859375, 1.0, 0.1287841796875, 0.49560546875, 0.38525390625, 0.1484375, 0.236083984375, 0.0268707275390625, 0.175537109375, 0.46337890625, 0.57861328125, 0.07122802734375, 0.58154296875, 0.18359375, 0.175048828125, 0.26806640625, 0.126953125, 0.0007996559143066406, 0.12420654296875, 0.00969696044921875, 0.044952392578125, 4.7087669372558594e-05, 0.50390625, 0.0054473876953125, 0.171142578125, 0.1585693359375, 0.089111328125, 0.0765380859375, 0.026092529296875, 0.349853515625, 0.14453125, 0.058837890625, 0.4697265625, 0.022857666015625], "tokens": [275, 569, 284, 562, 7758, 20709, 26, 3220, 2064, 786, 27, 301, 291, 458, 26, 853, 30, 225, 34, 32, 34, 30, 225, 35, 34, 34, 34, 34, 34, 34, 34, 34, 34, 293, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 2702, 322, 2064, 786, 461, 7091, 1048, 6660, 32]}
{"line_number": 120, "line_type": "original", "code": "        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);", "entropy": 0.90625, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [3.17578125, 3.900390625, 0.193359375, 0.0009150505065917969, 2.51171875, 0.0016422271728515625, 3.94140625, 0.333984375, 0.299560546875, 0.0017881393432617188, 0.0006508827209472656, 0.0023345947265625, 0.122314453125, 0.0006127357482910156, 6.568431854248047e-05, 0.0149993896484375], "tokens": [351, 4175, 2755, 32, 42698, 26, 1516, 30, 7089, 1191, 19298, 32, 5493, 527, 7267, 293]}
{"line_number": 120, "line_type": "generated", "code": "\n     */\n    public BigFraction(final double value) {\n        this(value, 0.0, 1000000000, 1000000000);\n    }\n\n    /**\n     *", "entropy": 0.25244140625, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [0.67626953125, 0.08795166015625, 0.021881103515625, 0.0187835693359375, 0.00264739990234375, 5.9604644775390625e-06, 0.0007672309875488281, 0.1376953125, 0.0018358230590820312, 0.0010671615600585938, 0.01352691650390625, 0.158935546875, 0.552734375, 0.33203125, 0.0187835693359375, 0.36376953125, 0.004016876220703125, 0.61767578125, 0.99755859375, 1.123046875, 0.086181640625, 0.5439453125, 0.490478515625, 0.1060791015625, 0.1927490234375, 0.0189971923828125, 0.29541015625, 0.41650390625, 0.5810546875, 0.066650390625, 0.61181640625, 0.2271728515625, 0.2230224609375, 1.576171875, 0.41650390625, 0.455078125, 0.409912109375, 0.06597900390625, 0.26611328125, 0.0677490234375, 0.043670654296875, 0.013885498046875, 0.056884765625, 0.0225982666015625, 0.057098388671875, 0.445556640625, 0.066650390625, 0.0006957054138183594, 0.11834716796875, 0.01122283935546875, 0.038909912109375, 6.854534149169922e-05], "tokens": [275, 569, 284, 562, 7758, 20709, 26, 3220, 2064, 786, 27, 301, 291, 458, 26, 853, 30, 225, 34, 32, 34, 30, 225, 35, 34, 34, 34, 34, 34, 34, 34, 34, 34, 30, 225, 35, 34, 34, 34, 34, 34, 34, 34, 34, 34, 293, 284, 320, 446, 1022, 275, 319]}
{"line_number": 121, "line_type": "original", "code": "        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);", "entropy": 1.2578125, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [5.9765625, 7.19140625, 0.039703369140625, 0.0010623931884765625, 0.81884765625, 0.0013904571533203125, 6.8046875, 0.1571044921875, 0.2261962890625, 0.0015897750854492188, 0.0001888275146484375, 0.000377655029296875, 0.1314697265625, 0.00029206275939941406, 4.0531158447265625e-06, 2.467632293701172e-05, 0.037811279296875], "tokens": [351, 4175, 2755, 32, 42698, 26, 5114, 30, 7089, 1191, 19298, 32, 16043, 65, 4683, 7267, 293]}
{"line_number": 121, "line_type": "generated", "code": "\n    public BigFraction(final double value) {\n        this(value, DEFAULT_SCALE);\n    }\n\n    /**\n     * Create a fraction given the double value and maximum error allowed.\n     * <p>\n     * The algorithm used is described in <a", "entropy": 0.2310791015625, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [0.08380126953125, 0.04620361328125, 0.00321197509765625, 1.9073486328125e-05, 0.0011310577392578125, 0.137939453125, 0.00305938720703125, 0.0016345977783203125, 0.017120361328125, 0.1387939453125, 0.419921875, 0.6279296875, 0.0264129638671875, 0.4775390625, 0.0086212158203125, 1.533203125, 0.0002033710479736328, 0.2919921875, 1.0009765625, 0.03875732421875, 0.0004413127899169922, 0.16015625, 0.01352691650390625, 0.0308074951171875, 9.453296661376953e-05, 0.2476806640625, 0.002651214599609375, 0.051361083984375, 0.1126708984375, 0.0328369140625, 0.0188446044921875, 0.004375457763671875, 0.274169921875, 0.09075927734375, 0.0294036865234375, 0.288330078125, 0.024169921875, 0.058197021484375, 9.298324584960938e-05, 0.053863525390625, 0.001056671142578125, 0.000720977783203125, 0.005992889404296875, 1.6570091247558594e-05, 1.15234375, 1.2392578125, 0.067138671875, 0.84375, 0.9912109375, 0.6064453125, 0.73828125, 0.0153961181640625], "tokens": [284, 562, 7758, 20709, 26, 3220, 2064, 786, 27, 301, 291, 458, 26, 853, 30, 4040, 81, 19958, 293, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 2702, 322, 2064, 786, 461, 7091, 1048, 6660, 32, 275, 319, 333, 98, 48, 275, 319, 886, 8218, 1654, 438, 10303, 328, 333, 83]}
{"line_number": 122, "line_type": "original", "code": "        if (BigInteger.ZERO.equals(den)) {", "entropy": 1.8349609375, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [6.1171875, 1.3154296875, 0.12237548828125, 11.046875, 0.43359375, 0.1549072265625, 0.050201416015625, 0.3798828125, 0.0076446533203125, 1.9208984375, 0.0863037109375, 0.38134765625], "tokens": [351, 415, 308, 21541, 32, 13977, 32, 3574, 26, 5114, 490, 301]}
{"line_number": 122, "line_type": "generated", "code": "\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NUMBER, value);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_NUMBER", "entropy": 0.11981201171875, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [0.6328125, 1.6875, 0.1253662109375, 0.057098388671875, 0.000133514404296875, 0.0556640625, 9.512901306152344e-05, 0.003330230712890625, 1.005859375, 0.01155853271484375, 0.041412353515625, 0.0089569091796875, 0.0146942138671875, 0.055755615234375, 0.0016393661499023438, 0.0020961761474609375, 0.040771484375, 0.08612060546875, 0.00023806095123291016, 0.05126953125, 0.12286376953125, 1.2685546875, 0.11981201171875, 0.079833984375, 0.006092071533203125, 0.021209716796875, 0.0007548332214355469, 0.47802734375, 0.03485107421875, 0.016876220703125, 0.0182952880859375, 1.7881393432617188e-05, 0.004428863525390625, 4.649162292480469e-06, 0.0001533031463623047, 0.00025200843811035156, 0.0460205078125, 0.0013580322265625, 0.0094146728515625, 0.011505126953125, 0.0008764266967773438, 0.003131866455078125, 0.0001068115234375, 0.0008959770202636719, 0.017852783203125, 3.814697265625e-06, 8.487701416015625e-05, 0.0025501251220703125, 0.0007572174072265625, 8.106231689453125e-06, 0.016143798828125, 0.06610107421875], "tokens": [291, 415, 308, 4075, 32, 26821, 26, 853, 490, 301, 324, 1422, 537, 4175, 25907, 26, 24225, 19298, 32, 30548, 81, 10463, 30, 786, 293, 291, 320, 291, 415, 308, 4075, 32, 28823, 11949, 26, 853, 490, 301, 324, 1422, 537, 4175, 25907, 26, 24225, 19298, 32, 10192, 521, 2345, 81, 10463]}
{"line_number": 125, "line_type": "original", "code": "        if (BigInteger.ZERO.equals(num)) {", "entropy": 1.8486328125, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [7.20703125, 1.3583984375, 0.044158935546875, 9.28125, 0.202880859375, 0.18408203125, 0.06732177734375, 0.1676025390625, 0.0081329345703125, 1.21875, 2.25, 0.200927734375], "tokens": [351, 415, 308, 21541, 32, 13977, 32, 3574, 26, 1516, 490, 301]}
{"line_number": 125, "line_type": "generated", "code": "\n            numerator   = BigInteger.ZERO;\n            denominator = BigInteger.ONE;\n        } else {\n            // get the fractional part\n            double f = value - Math.floor(value);\n            // get the integral part\n            double i = Math.floor", "entropy": 0.42724609375, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [0.462890625, 0.16650390625, 0.00264739990234375, 0.07952880859375, 1.0967254638671875e-05, 0.017547607421875, 0.0009412765502929688, 0.0126800537109375, 0.0010538101196289062, 0.0015382766723632812, 0.00020253658294677734, 0.0002321004867553711, 0.0009889602661132812, 0.00021123886108398438, 0.01091766357421875, 0.0003941059112548828, 0.03466796875, 0.01067352294921875, 0.128173828125, 0.2109375, 0.5654296875, 1.3017578125, 2.251953125, 0.231689453125, 1.205078125, 1.7802734375, 0.08050537109375, 0.7490234375, 1.009765625, 0.9716796875, 0.1907958984375, 1.041015625, 0.80615234375, 1.40625, 0.0185546875, 0.026824951171875, 0.00036907196044921875, 0.0013275146484375, 0.0006957054138183594, 1.7861328125, 1.541015625, 2.173828125, 0.10528564453125, 0.5966796875, 0.0016937255859375, 0.0882568359375, 1.025390625, 0.054443359375, 0.00537872314453125, 0.047119140625, 0.0005669593811035156, 0.00678253173828125], "tokens": [324, 1929, 11290, 261, 280, 21743, 32, 13977, 45, 324, 39920, 280, 21743, 32, 4431, 45, 291, 320, 813, 301, 324, 434, 622, 322, 18795, 279, 1742, 324, 2064, 296, 280, 786, 429, 4175, 32, 9121, 26, 853, 293, 324, 434, 622, 322, 30017, 1742, 324, 2064, 595, 280, 4175, 32, 9121]}
{"line_number": 148, "line_type": "original", "code": "    }", "entropy": 3.34765625, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [6.4453125, 0.2490234375], "tokens": [264, 320]}
{"line_number": 148, "line_type": "generated", "code": "\n        } else {\n            // move the point to just before the binary point\n            m = m << (21 - k);", "entropy": 0.486083984375, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [0.52197265625, 0.0135650634765625, 0.273193359375, 0.2548828125, 0.56982421875, 0.79296875, 2.328125, 0.58740234375, 0.11468505859375, 0.9443359375, 0.912109375, 0.86083984375, 0.005680084228515625, 0.4208984375, 0.002254486083984375, 0.278076171875, 0.49267578125, 0.056182861328125, 0.033843994140625, 0.339599609375, 0.34228515625, 0.5771484375, 1.732421875, 0.1422119140625, 0.01226806640625, 0.0295562744140625], "tokens": [291, 320, 813, 301, 324, 434, 5169, 322, 2260, 372, 2258, 2670, 322, 5298, 2260, 324, 345, 280, 345, 1264, 308, 36, 35, 429, 831, 293]}
{"line_number": 366, "line_type": "original", "code": "        this(BigInteger.valueOf(num), BigInteger.ONE);", "entropy": 1.673828125, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [4.3125, 4.828125, 0.9599609375, 4.03125, 0.007171630859375, 0.1414794921875, 0.005615234375, 0.269775390625, 0.4326171875, 0.45556640625, 0.0025081634521484375, 6.2265625, 0.09625244140625], "tokens": [351, 458, 26, 21541, 32, 9162, 26, 1516, 471, 21743, 32, 4431, 293]}
{"line_number": 366, "line_type": "generated", "code": "\n     *\n     * @param numerator\n     *            the numerator, for example the three in 'three sevenths'\n     * @param denominator\n     *            the denominator, for example the seven in 'three sevenths'\n     * @throws", "entropy": 0.1160888671875, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.6279296875, 0.290283203125, 0.6435546875, 0.0220947265625, 0.07452392578125, 0.0116119384765625, 0.07208251953125, 0.23046875, 0.18115234375, 0.00022137165069580078, 0.030059814453125, 0.607421875, 0.0138702392578125, 0.0002677440643310547, 0.6689453125, 0.11358642578125, 0.09979248046875, 0.043609619140625, 0.08074951171875, 0.0008950233459472656, 0.0084991455078125, 0.0087738037109375, 0.88232421875, 0.00177001953125, 0.0010080337524414062, 0.3017578125, 0.007289886474609375, 0.00033974647521972656, 0.0421142578125, 0.0007076263427734375, 0.00994110107421875, 0.002071380615234375, 0.00011169910430908203, 0.0004963874816894531, 0.0022430419921875, 0.040130615234375, 0.00662994384765625, 0.0013551712036132812, 0.00016736984252929688, 0.07763671875, 0.034515380859375, 4.220008850097656e-05, 4.3272972106933594e-05, 1.5616416931152344e-05, 0.00445556640625, 1.2159347534179688e-05, 2.7418136596679688e-06, 0.03082275390625, 0.03155517578125, 0.5107421875, 0.0163421630859375, 0.1986083984375], "tokens": [275, 319, 275, 319, 477, 753, 1929, 11290, 275, 319, 1468, 322, 1929, 11290, 30, 436, 2280, 322, 8019, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 753, 39920, 275, 319, 1468, 322, 39920, 30, 436, 2280, 322, 46213, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 5117]}
{"line_number": 367, "line_type": "original", "code": "    }", "entropy": 2.896484375, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [2.771484375, 3.021484375], "tokens": [264, 320]}
{"line_number": 367, "line_type": "generated", "code": "\n\n    /**\n     * <p>\n     * Create a {@link BigFraction} from a <code>double</code>.\n     * </p>\n     *\n     * @param value\n     *            the <code>double</code> value to convert to", "entropy": 0.23779296875, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [2.30078125, 0.0609130859375, 0.0199737548828125, 0.0004401206970214844, 0.126708984375, 0.00043582916259765625, 0.00020968914031982422, 0.0051727294921875, 6.794929504394531e-06, 1.3076171875, 0.00765228271484375, 0.2705078125, 5.173683166503906e-05, 0.0009860992431640625, 8.118152618408203e-05, 0.004077911376953125, 1.5107421875, 0.1610107421875, 0.1298828125, 0.5654296875, 0.00027823448181152344, 2.041015625, 0.0008873939514160156, 0.0012655258178710938, 0.40283203125, 0.888671875, 0.001964569091796875, 0.1632080078125, 0.0002598762512207031, 0.0009531974792480469, 0.00397491455078125, 0.0003685951232910156, 0.343994140625, 0.0003533363342285156, 0.088623046875, 0.0014123916625976562, 0.1563720703125, 0.01390838623046875, 9.202957153320312e-05, 0.0021228790283203125, 0.1275634765625, 0.77294921875, 0.020660400390625, 0.00010609626770019531, 0.005321502685546875, 0.00035643577575683594, 6.008148193359375e-05, 0.0258941650390625, 0.05322265625, 0.08721923828125, 0.0498046875, 0.63720703125], "tokens": [446, 1022, 275, 319, 333, 98, 48, 275, 319, 2648, 312, 3088, 1204, 7758, 20709, 111, 645, 312, 333, 687, 48, 2627, 377, 687, 4503, 275, 319, 576, 98, 48, 275, 319, 275, 319, 477, 753, 786, 275, 319, 1468, 322, 333, 687, 48, 2627, 377, 687, 48, 786, 372, 4483, 372]}
{"line_number": 133, "line_type": "original", "code": "                num = num.divide(gcd);", "entropy": 3.310546875, "is_bug_line": false, "sus_score": 0.14433756729740646, "per_token_entropy": [7.9296875, 4.99609375, 3.08203125, 7.69140625, 0.55224609375, 2.904296875, 0.01377105712890625, 2.58984375, 0.0343017578125], "tokens": [2071, 1929, 280, 1929, 32, 23987, 26, 46060, 293]}
{"line_number": 133, "line_type": "generated", "code": "\n        final long mantissa = bits & 0x000fffffffffffffL;\n\n        if (exponent == 0) {\n            if (mantissa == 0) {\n                numerator   = BigInteger.ZERO;\n                denominator = BigInteger", "entropy": 0.1094970703125, "is_bug_line": false, "sus_score": 0.14433756729740646, "per_token_entropy": [0.334716796875, 0.432861328125, 0.09454345703125, 0.0307464599609375, 0.1824951171875, 4.649162292480469e-06, 0.0125579833984375, 0.0535888671875, 0.0007839202880859375, 0.03179931640625, 0.00041174888610839844, 0.006389617919921875, 0.0018587112426757812, 0.00011301040649414062, 0.0005717277526855469, 0.0005788803100585938, 0.00693511962890625, 0.00144195556640625, 0.004703521728515625, 0.72607421875, 1.419921875, 0.09002685546875, 0.00862884521484375, 0.01457977294921875, 0.002685546875, 0.000164031982421875, 0.36474609375, 0.0038089752197265625, 0.2308349609375, 0.5703125, 0.003650665283203125, 0.010772705078125, 7.62939453125e-06, -0.0, 0.053497314453125, 0.0005068778991699219, 7.152557373046875e-06, 0.01702880859375, 0.00203704833984375, 0.067626953125, 0.57177734375, 0.0012331008911132812, 0.1507568359375, 1.3113021850585938e-06, 0.0911865234375, 0.0006241798400878906, 0.07891845703125, 0.001178741455078125, 0.004180908203125, 0.00047969818115234375, 8.14199447631836e-05, 0.01079559326171875], "tokens": [291, 1158, 1946, 345, 29913, 2496, 280, 7030, 549, 225, 34, 106, 34, 34, 34, 20629, 35030, 62, 45, 584, 415, 308, 28323, 610, 225, 34, 27, 301, 324, 415, 308, 95, 29913, 2496, 610, 225, 34, 27, 301, 400, 1929, 11290, 261, 280, 21743, 32, 13977, 45, 400, 39920, 280, 21743]}
{"line_number": 134, "line_type": "original", "code": "                den = den.divide(gcd);", "entropy": 2.904296875, "is_bug_line": false, "sus_score": 0.14433756729740646, "per_token_entropy": [8.140625, 7.91015625, 0.134033203125, 4.1015625, 0.07879638671875, 4.875, 0.00714111328125, 0.85888671875, 0.038177490234375], "tokens": [2071, 5537, 280, 5537, 32, 23987, 26, 46060, 293]}
{"line_number": 134, "line_type": "generated", "code": "\n\n        // handle special cases m is zero\n        if (m == 0) {\n            numerator   = BigInteger.ZERO;\n            denominator = BigInteger.ONE;\n            return;\n        }\n\n        // handle special cases m is an integer\n        if ((exponent ==", "entropy": 0.2235107421875, "is_bug_line": false, "sus_score": 0.14433756729740646, "per_token_entropy": [0.8955078125, 0.2227783203125, 0.97509765625, 0.353515625, 0.01166534423828125, 0.394775390625, 0.9658203125, 0.0265655517578125, 0.281982421875, 0.0203094482421875, 0.020660400390625, 0.251708984375, 0.0181121826171875, 0.0010976791381835938, 1.9788742065429688e-05, 0.190185546875, 0.004856109619140625, 0.06396484375, 0.241455078125, 0.00016355514526367188, 0.09130859375, 1.7881393432617188e-06, 0.08062744140625, 0.0007643699645996094, 0.10888671875, 0.0017156600952148438, 0.005645751953125, 0.0016241073608398438, 5.9723854064941406e-05, 0.044097900390625, 3.4332275390625e-05, 0.048614501953125, 0.0030994415283203125, 0.58154296875, 0.229248046875, 0.0015001296997070312, 0.00788116455078125, 0.0009784698486328125, 0.06427001953125, 0.0538330078125, 1.2333984375, 0.130859375, 0.1650390625, 1.8994140625, 0.0255584716796875, 0.509765625, 0.3388671875, 0.1302490234375, 0.06060791015625, 0.3369140625, 0.096923828125, 0.43505859375], "tokens": [584, 434, 2887, 7456, 6792, 345, 438, 5934, 291, 415, 308, 95, 610, 225, 34, 27, 301, 324, 1929, 11290, 261, 280, 21743, 32, 13977, 45, 324, 39920, 280, 21743, 32, 4431, 45, 324, 442, 45, 291, 320, 584, 434, 2887, 7456, 6792, 345, 438, 600, 4991, 291, 415, 1833, 28323, 610]}
{"line_number": 126, "line_type": "original", "code": "            numerator   = BigInteger.ZERO;", "entropy": 1.42578125, "is_bug_line": false, "sus_score": 0.1414213562373095, "per_token_entropy": [7.40234375, 3.416015625, 0.00543975830078125, 0.6318359375, 0.0004665851593017578, 0.9365234375, 0.00400543212890625, 0.43017578125, 0.00963592529296875], "tokens": [1468, 1929, 11290, 261, 280, 21743, 32, 13977, 45]}
{"line_number": 126, "line_type": "generated", "code": "\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION, value);\n        }\n\n        // use float representation if possible to preserve precision\n        if (Math.abs(value) < Float.MAX_VALUE) {\n            final float f", "entropy": 0.402099609375, "is_bug_line": false, "sus_score": 0.1414213562373095, "per_token_entropy": [0.245849609375, 0.1395263671875, 0.001617431640625, 0.0202789306640625, 0.0020961761474609375, 0.003173828125, 0.0220489501953125, 7.724761962890625e-05, 0.00018274784088134766, 0.0020599365234375, 0.0016450881958007812, 5.841255187988281e-06, 0.0001850128173828125, 0.00457763671875, 0.001041412353515625, 1.2755393981933594e-05, 0.465576171875, 0.266357421875, 0.07794189453125, 0.031982421875, 0.0002410411834716797, 0.57861328125, 0.83447265625, 2.494140625, 2.33203125, 1.85546875, 2.2734375, 0.87451171875, 0.79150390625, 0.986328125, 0.57666015625, 0.418212890625, 0.76416015625, 0.10565185546875, 1.126953125, 0.025177001953125, 0.1534423828125, 0.27783203125, 0.0504150390625, 0.2064208984375, 0.54248046875, 0.6142578125, 0.0059051513671875, 0.343994140625, 1.3947486877441406e-05, 0.00014519691467285156, 0.1995849609375, 0.0033130645751953125, 0.1729736328125, 0.69482421875, 0.0865478515625, 0.236083984375], "tokens": [324, 1422, 537, 4175, 25907, 26, 24225, 19298, 32, 10192, 521, 2345, 81, 5975, 81, 42508, 30, 786, 293, 291, 320, 584, 434, 793, 1897, 10293, 415, 4195, 372, 24070, 12485, 291, 415, 308, 5717, 32, 3596, 26, 853, 27, 333, 8174, 32, 3459, 81, 5975, 27, 301, 324, 1158, 1897, 296]}
{"line_number": 127, "line_type": "original", "code": "            denominator = BigInteger.ONE;", "entropy": 1.8583984375, "is_bug_line": false, "sus_score": 0.1414213562373095, "per_token_entropy": [6.23828125, 6.0078125, 0.0728759765625, 0.52880859375, 0.00445556640625, 0.12890625, 0.0253448486328125], "tokens": [1468, 39920, 280, 21743, 32, 4431, 45]}
{"line_number": 127, "line_type": "generated", "code": "\n        }\n        final long bits = Double.doubleToLongBits(value);\n        final boolean negative = (bits & 0x8000000000000000L)!= 0;\n        int exponent", "entropy": 0.21630859375, "is_bug_line": false, "sus_score": 0.1414213562373095, "per_token_entropy": [0.370361328125, 0.038543701171875, 1.2392578125, 0.91845703125, 0.90380859375, 0.0755615234375, 0.1505126953125, 0.1790771484375, 0.00013494491577148438, 0.0002123117446899414, 1.4066696166992188e-05, 0.227783203125, 3.0040740966796875e-05, 0.00020706653594970703, 0.003124237060546875, 0.0005359649658203125, 0.29296875, 0.84912109375, 0.80859375, 0.265625, 0.0189666748046875, 0.51025390625, 0.0018835067749023438, 0.10943603515625, 1.125, 0.0037689208984375, 0.00017333030700683594, 0.0002684593200683594, 9.059906005859375e-06, 1.0013580322265625e-05, 3.6716461181640625e-05, 0.0032482147216796875, 3.0994415283203125e-06, 1.2993812561035156e-05, 5.900859832763672e-05, 0.0009732246398925781, 7.987022399902344e-05, 2.1696090698242188e-05, 1.6808509826660156e-05, 7.033348083496094e-06, 5.14984130859375e-05, 8.702278137207031e-06, 4.673004150390625e-05, 0.09967041015625, 0.0008440017700195312, 0.07989501953125, 0.0004379749298095703, 1.0013580322265625e-05, 0.202880859375, 0.1605224609375, 1.8857421875, 0.71875], "tokens": [291, 320, 291, 1158, 1946, 7030, 280, 6934, 32, 2627, 705, 3952, 8733, 26, 853, 293, 291, 1158, 1905, 11003, 280, 308, 5960, 549, 225, 34, 106, 42, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 62, 27, 863, 225, 34, 45, 291, 629, 19715]}
{"line_number": 685, "line_type": "original", "code": "        double result = numerator.doubleValue() / denominator.doubleValue();", "entropy": 1.4248046875, "is_bug_line": true, "sus_score": 0.1336306209562122, "per_token_entropy": [5.9140625, 7.62890625, 4.38671875, 0.170166015625, 1.55859375, 0.055023193359375, 0.1014404296875, 0.0496826171875, 0.037750244140625, 0.0256500244140625, 0.0187835693359375, 0.003734588623046875, 0.00348663330078125, 0.003643035888671875], "tokens": [351, 2064, 1056, 280, 1929, 11290, 32, 46952, 346, 517, 39920, 32, 46952, 473]}
{"line_number": 685, "line_type": "generated", "code": "\n        return result;\n    }\n\n    /**\n     * <p>\n     * Gets the fraction as a <tt>int</tt>. This returns the whole number part\n     * of the fraction.\n     * </p>\n     *\n     * @return the whole", "entropy": 0.053436279296875, "is_bug_line": true, "sus_score": 0.1336306209562122, "per_token_entropy": [0.416015625, 0.01468658447265625, 0.027435302734375, 0.004180908203125, 0.01232147216796875, 0.00044226646423339844, 0.03448486328125, 0.0246734619140625, 0.00269317626953125, 1.1444091796875e-05, 0.00884246826171875, 2.396106719970703e-05, 9.763240814208984e-05, 0.0038776397705078125, 5.602836608886719e-06, 0.045806884765625, 0.1820068359375, 0.038330078125, 0.0015659332275390625, 0.474609375, 0.00732421875, 0.0139617919921875, 2.956390380859375e-05, 0.08258056640625, 0.0003879070281982422, 0.0005564689636230469, 0.015045166015625, 0.051177978515625, 0.50537109375, 0.00096893310546875, 0.5400390625, 0.02935791015625, 0.06231689453125, 0.07025146484375, 4.0531158447265625e-06, 0.00030684471130371094, 0.0011396408081054688, 0.00943756103515625, 0.024261474609375, 0.002346038818359375, 0.00010466575622558594, 0.0018262863159179688, 2.384185791015625e-05, 0.00020611286163330078, 0.00043129920959472656, 2.658367156982422e-05, 0.0124969482421875, 1.2040138244628906e-05, 0.0024013519287109375, 0.00027823448181152344, 0.0187225341796875, 0.03466796875], "tokens": [291, 442, 1056, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 7124, 322, 18795, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 1348, 3217, 322, 9844, 1451, 1742, 275, 319, 432, 322, 18795, 32, 275, 319, 576, 98, 48, 275, 319, 275, 319, 477, 601, 322, 9844]}
{"line_number": 688, "line_type": "original", "code": "        return result;", "entropy": 2.185546875, "is_bug_line": true, "sus_score": 0.1336306209562122, "per_token_entropy": [5.828125, 1.8408203125, 1.04296875, 0.0328369140625], "tokens": [351, 442, 1056, 45]}
{"line_number": 688, "line_type": "generated", "code": "\n    /**\n     * <p>\n     * Gets the fraction as a <tt>int</tt>. This returns the whole number part\n     * of the fraction.\n     * </p>\n     *\n     * @return the whole number fraction part.\n     *", "entropy": 0.0916748046875, "is_bug_line": true, "sus_score": 0.1336306209562122, "per_token_entropy": [0.92431640625, 0.1683349609375, 0.03192138671875, 0.00027632713317871094, 0.02227783203125, 0.00010859966278076172, 0.00029015541076660156, 0.00659942626953125, 1.1920928955078125e-05, 0.1492919921875, 0.09344482421875, 0.07073974609375, 0.0035724639892578125, 0.434814453125, 0.01338958740234375, 0.01239013671875, 5.626678466796875e-05, 0.0750732421875, 0.0007166862487792969, 0.0007066726684570312, 0.0167999267578125, 0.0509033203125, 0.4912109375, 0.0009293556213378906, 0.4306640625, 0.023345947265625, 0.06304931640625, 0.072265625, 5.125999450683594e-06, 0.0003800392150878906, 0.0011768341064453125, 0.01027679443359375, 0.0249176025390625, 0.0028438568115234375, 0.00012755393981933594, 0.002017974853515625, 3.528594970703125e-05, 0.00023162364959716797, 0.000701904296875, 0.00010323524475097656, 0.0183258056640625, 1.5616416931152344e-05, 0.00661468505859375, 0.0006399154663085938, 0.0213623046875, 0.0298614501953125, 0.006908416748046875, 0.2374267578125, 0.11016845703125, 0.88134765625, 0.0007901191711425781, 0.251953125], "tokens": [284, 1022, 275, 319, 333, 98, 48, 275, 319, 7124, 322, 18795, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 1348, 3217, 322, 9844, 1451, 1742, 275, 319, 432, 322, 18795, 32, 275, 319, 576, 98, 48, 275, 319, 275, 319, 477, 601, 322, 9844, 1451, 18795, 1742, 32, 275, 319]}
