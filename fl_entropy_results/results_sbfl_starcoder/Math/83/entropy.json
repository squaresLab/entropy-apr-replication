{"line_number": 349, "line_type": "original", "code": "              coefficients[i] = 0;", "entropy": 3.001953125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.9453125, 11.6875, 0.26123046875, 0.05596923828125, 0.0087890625, 0.0219879150390625, 4.19921875, 0.274169921875, 0.55712890625], "tokens": [2850, 26370, 77, 91, 79, 280, 225, 34, 45]}
{"line_number": 349, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the entry in the", "entropy": 0.11260986328125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.1597900390625, 0.057281494140625, 0.0950927734375, 0.007720947265625, 0.0055084228515625, 1.3232231140136719e-05, 0.055908203125, 0.006038665771484375, 0.154541015625, 0.004261016845703125, 0.0027103424072265625, 0.0030574798583984375, 0.00016438961029052734, 0.0293426513671875, 0.00257110595703125, 2.5391578674316406e-05, 0.0245361328125, 0.00018739700317382812, 0.07562255859375, 0.0031185150146484375, 0.0031757354736328125, 0.0022029876708984375, 0.00010251998901367188, 0.006763458251953125, 0.0008139610290527344, 0.00492095947265625, 0.012359619140625, 0.0268402099609375, 0.0004355907440185547, 0.00021219253540039062, 0.0001266002655029297, 0.00041484832763671875, 0.0003719329833984375, 0.0296173095703125, 0.0016717910766601562, 0.0029430389404296875, 2.384185791015625e-07, 4.124641418457031e-05, 9.274482727050781e-05, 1.0728836059570312e-06, 0.00890350341796875, 0.85009765625, 0.0014314651489257812, 0.128662109375, 0.02264404296875, 0.00859832763671875, 5.805492401123047e-05, 0.482666015625, 0.4794921875, 1.96484375, 0.8603515625, 0.267578125], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 3414, 328, 322]}
{"line_number": 297, "line_type": "original", "code": "                return null;", "entropy": 2.234375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [4.8359375, 3.951171875, 0.13916015625, 0.00873565673828125], "tokens": [2071, 442, 744, 45]}
{"line_number": 297, "line_type": "generated", "code": "\n              } else {\n                  basicRows.add(basicRow);\n                  coefficients[i] = basicRow == null? 0 : getEntry(basicRow, getRhsOffset());\n              }\n          }\n      return new RealPointValuePair(coefficients,", "entropy": 0.2130126953125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [1.2705078125, 0.366455078125, 1.0556640625, 0.384521484375, 0.263671875, 0.81982421875, 0.00476837158203125, 0.0004527568817138672, 0.003021240234375, 0.00043845176696777344, 0.00270843505859375, 3.504753112792969e-05, 0.0009326934814453125, 0.2998046875, 0.6259765625, 0.0006861686706542969, 0.0268707275390625, 0.0013284683227539062, 0.0103912353515625, 1.2880859375, 0.0015277862548828125, 0.08111572265625, 0.0032634735107421875, 0.0181121826171875, 0.28759765625, 0.00937652587890625, 0.0908203125, 0.16455078125, 0.0284423828125, 0.001049041748046875, 0.00726318359375, 0.0004992485046386719, 0.0012712478637695312, 0.0936279296875, 0.06512451171875, 1.3113021850585938e-06, 6.973743438720703e-05, 0.62158203125, 0.3369140625, 0.0008115768432617188, 0.2388916015625, 0.01288604736328125, 0.56201171875, 1.27734375, 0.0309600830078125, 0.18505859375, 0.00013589859008789062, 3.4928321838378906e-05, 0.00826263427734375, 0.51416015625, 0.00485992431640625, 0.003597259521484375], "tokens": [1090, 320, 813, 301, 1750, 6550, 7252, 32, 669, 26, 6390, 2352, 293, 1750, 26370, 77, 91, 79, 280, 6550, 2352, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035, 1090, 320, 616, 320, 397, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30]}
{"line_number": 310, "line_type": "original", "code": "        int width = getWidth() - numArtificialVariables - 1;", "entropy": 1.017578125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [4.6171875, 3.16015625, 2.83203125, 0.050201416015625, 0.399658203125, 0.05499267578125, 0.408447265625, 0.050079345703125, 2.400390625, 0.01456451416015625, 0.00030803680419921875, 0.00298309326171875, 2.10546875, 0.1165771484375, 0.023590087890625, 0.05010986328125], "tokens": [351, 629, 1861, 280, 622, 2611, 346, 429, 1929, 5271, 31251, 10165, 429, 225, 35, 45]}
{"line_number": 310, "line_type": "generated", "code": "\n    /**\n     * Returns the number of non-basic variables.\n     * @return the number of non-basic variables\n     */\n    public int getNumNonBasicVariables() {\n        return width - getNumObjectiveFunctions() - numArtificialVariables;\n    }", "entropy": 0.346923828125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.67822265625, 0.3232421875, 0.06488037109375, 0.00010251998901367188, 3.064453125, 0.386962890625, 1.94921875, 0.00476837158203125, 2.5703125, 0.17919921875, 0.884765625, 0.42236328125, 0.8037109375, 0.1171875, 0.0206146240234375, 0.59326171875, 0.00681304931640625, 0.289794921875, 0.0254364013671875, 0.002063751220703125, 0.0252685546875, 0.005321502685546875, 0.0009098052978515625, 0.003208160400390625, 0.1397705078125, 0.016876220703125, 0.0152435302734375, 0.86376953125, 0.02679443359375, 0.2841796875, 0.155517578125, 0.1734619140625, 0.07025146484375, 0.003047943115234375, 0.00252532958984375, 0.0794677734375, 0.212158203125, 1.6875, 0.0278778076171875, 0.806640625, 0.064697265625, 0.00152587890625, 0.2066650390625, 0.01300048828125, 0.2978515625, 0.003383636474609375, 8.738040924072266e-05, 0.0004634857177734375, 0.09808349609375, 0.0207366943359375, 0.00029206275939941406], "tokens": [284, 1022, 275, 319, 3759, 322, 1451, 432, 2979, 31, 6390, 4886, 32, 275, 319, 477, 601, 322, 1451, 432, 2979, 31, 6390, 4886, 275, 569, 284, 562, 629, 44929, 3910, 7099, 10165, 346, 301, 291, 442, 1861, 429, 44929, 33312, 10905, 346, 429, 1929, 5271, 31251, 10165, 45, 284, 320]}
{"line_number": 311, "line_type": "original", "code": "        int height = getHeight() - 1;", "entropy": 1.4541015625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [3.162109375, 4.4765625, 4.81640625, 0.1004638671875, 0.84423828125, 0.09735107421875, 1.6064453125, 0.05059814453125, 0.6748046875, 0.0156402587890625, 0.151123046875], "tokens": [351, 629, 2384, 280, 622, 3024, 346, 429, 225, 35, 45]}
{"line_number": 311, "line_type": "generated", "code": "\n     * @return the solution to the problem\n     */\n    public RealPointValuePair getSolution(double[] coefficients) {\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n\n    /**\n     * Get the current solution.", "entropy": 0.4892578125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [1.041015625, 0.293701171875, 1.7451171875, 0.82373046875, 0.82763671875, 2.90234375, 1.63671875, 0.1673583984375, 1.212890625, 1.1611328125, 0.475341796875, 0.06597900390625, 0.6748046875, 0.286376953125, 0.0036258697509765625, 0.0004851818084716797, 0.39697265625, 0.380126953125, 0.80810546875, 1.501953125, 0.364501953125, 1.2822265625, 0.07122802734375, 0.01259613037109375, 0.350830078125, 1.36328125, 0.413818359375, 0.004505157470703125, 1.6570091247558594e-05, 2.384185791015625e-07, 0.002140045166015625, 0.02783203125, 0.00019168853759765625, 0.006191253662109375, 0.0845947265625, 0.0002834796905517578, 0.01543426513671875, 0.0015134811401367188, 0.001583099365234375, 3.5762786865234375e-07, 0.0028743743896484375, 0.02520751953125, 0.001110076904296875, 0.482177734375, 0.1328125, 0.157470703125, 0.00017595291137695312, 1.5029296875, 0.1121826171875, 1.37890625, 0.86181640625, 0.36865234375], "tokens": [275, 319, 477, 601, 322, 5295, 372, 322, 3708, 275, 569, 284, 562, 11443, 1943, 14782, 622, 13628, 26, 2627, 1178, 26370, 27, 301, 291, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 296, 32, 6682, 26, 34036, 101, 876, 284, 320, 446, 1022, 275, 319, 1390, 322, 1550, 5295, 32]}
{"line_number": 312, "line_type": "original", "code": "        double[][] matrix = new double[height][width];", "entropy": 1.6513671875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [3.111328125, 5.4296875, 5.51171875, 2.0234375, 0.147216796875, 0.58544921875, 0.0880126953125, 0.03631591796875, 2.5859375, 0.05352783203125, 0.1405029296875, 0.10614013671875], "tokens": [351, 2064, 11336, 5045, 280, 537, 2064, 77, 2273, 1674, 1644, 970]}
{"line_number": 312, "line_type": "generated", "code": "\n     * @param row1 the row to subtract from\n     * @param row2 the row to subtract\n     * @param factor the factor to multiply {@code row1} by before subtracting\n     */\n    private void subtractRow(final int row1,", "entropy": 0.271728515625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.328369140625, 0.0926513671875, 0.46630859375, 0.002094268798828125, 1.34765625, 1.2080078125, 0.51708984375, 0.91064453125, 0.1527099609375, 0.2098388671875, 0.0477294921875, 0.134033203125, 0.00041961669921875, 0.0001289844512939453, 0.00013518333435058594, 0.0904541015625, 0.0012607574462890625, 0.01415252685546875, 0.0037517547607421875, 0.01413726806640625, 0.2034912109375, 0.037933349609375, 0.02716064453125, 0.006465911865234375, 0.0048980712890625, 0.7744140625, 0.136474609375, 0.521484375, 0.6416015625, 0.66552734375, 1.89453125, 0.0009174346923828125, 0.007579803466796875, 0.5927734375, 0.005939483642578125, 0.060791015625, 0.0980224609375, 0.1119384765625, 0.001392364501953125, 0.2340087890625, 0.2353515625, 0.0206451416015625, 0.23193359375, 0.00664520263671875, 0.2281494140625, 0.96826171875, 0.68798828125, 0.0699462890625, 0.10723876953125, 0.0093231201171875, 0.0012969970703125, 0.0002149343490600586], "tokens": [275, 319, 477, 753, 2698, 35, 322, 2698, 372, 27799, 645, 275, 319, 477, 753, 2698, 36, 322, 2698, 372, 27799, 275, 319, 477, 753, 10365, 322, 10365, 372, 22213, 3088, 687, 2698, 35, 111, 810, 2670, 27799, 299, 275, 569, 284, 945, 763, 27799, 2352, 26, 3220, 629, 2698, 35, 30]}
{"line_number": 313, "line_type": "original", "code": "        for (int i = 0; i < height; i++) {", "entropy": 0.859375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [3.68359375, 3.943359375, 0.094482421875, 0.0379638671875, 1.0361328125, 0.0094146728515625, 0.27734375, 0.01435089111328125, 0.00743865966796875, 0.0014123916625976562, 0.038421630859375, 4.3515625, 0.032684326171875, 0.053558349609375, 0.007366180419921875, 0.1630859375], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 2384, 45, 595, 1987, 301]}
{"line_number": 313, "line_type": "generated", "code": "\n     * @param rowToSubtract the row to subtract from\n     * @param rowToSubtractFrom the row to subtract\n     * @param multiple the multiple to subtract\n     */\n    private void subtract(final int rowToSubtract,\n                         final int rowToSubtract", "entropy": 0.28564453125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.413330078125, 0.048858642578125, 0.55712890625, 0.002071380615234375, 1.3837890625, 2.091796875, 1.0361328125, 0.9677734375, 0.14794921875, 0.160888671875, 0.09735107421875, 0.239990234375, 0.441162109375, 0.0006079673767089844, 0.000583648681640625, 0.0005612373352050781, 0.488525390625, 0.215087890625, 0.0904541015625, 0.122314453125, 0.0286712646484375, 0.00464630126953125, 0.02069091796875, 0.0484619140625, 0.173095703125, 0.0170440673828125, 0.00209808349609375, 0.00379180908203125, 0.82421875, 0.13623046875, 0.055755615234375, 0.9697265625, 0.0166778564453125, 0.18701171875, 0.25244140625, 0.01904296875, 0.3037109375, 0.0051422119140625, 0.089599609375, 2.119140625, 0.07379150390625, 0.138671875, 0.031097412109375, 0.0014438629150390625, 0.0001894235610961914, 0.00980377197265625, 0.8037109375, 0.005859375, 0.0032672882080078125, 0.0016078948974609375, 0.0003769397735595703, 1.7523765563964844e-05], "tokens": [275, 319, 477, 753, 2698, 705, 34460, 322, 2698, 372, 27799, 645, 275, 319, 477, 753, 2698, 705, 34460, 1792, 322, 2698, 372, 27799, 275, 319, 477, 753, 4609, 322, 4609, 372, 27799, 275, 569, 284, 945, 763, 27799, 26, 3220, 629, 2698, 705, 34460, 30, 656, 1158, 629, 2698, 705, 34460]}
{"line_number": 314, "line_type": "original", "code": "            for (int j = 0; j < width - 1; j++) {", "entropy": 0.92529296875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [5.76953125, 3.162109375, 0.280029296875, 0.172119140625, 0.72021484375, 0.00909423828125, 0.294677734375, 0.0174407958984375, 0.007297515869140625, 0.0039005279541015625, 0.1488037109375, 2.5390625, 4.11328125, 0.1295166015625, 0.019622802734375, 0.01104736328125, 0.040252685546875, 0.0194244384765625, 0.11492919921875], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 1861, 429, 225, 35, 45, 594, 1987, 301]}
{"line_number": 314, "line_type": "generated", "code": "\n     * </p>\n     * @param multiple the multiple to subtract\n     * @param row the row to subtract from\n     * @param subtractRow the row to subtract\n     */\n    private void subtractMultipleOfRow(final double multiple, final int row,", "entropy": 0.32421875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.95361328125, 0.0206298828125, 0.759765625, 0.023345947265625, 0.013397216796875, 0.035003662109375, 0.001132965087890625, 0.8291015625, 0.0018320083618164062, 2.392578125, 0.75048828125, 0.043182373046875, 0.75439453125, 0.51611328125, 0.3037109375, 0.0002894401550292969, 0.0007443428039550781, 0.00019502639770507812, 1.0830078125, 0.3759765625, 0.1134033203125, 0.07373046875, 0.0357666015625, 0.1871337890625, 0.05340576171875, 0.058380126953125, 0.0013723373413085938, 0.01305389404296875, 1.37890625, 1.0400390625, 0.0482177734375, 0.0113372802734375, 0.0155181884765625, 0.037506103515625, 0.07659912109375, 0.2132568359375, 0.011016845703125, 0.356689453125, 0.0036334991455078125, 0.1539306640625, 0.9931640625, 1.48046875, 0.0018291473388671875, 0.61376953125, 0.1668701171875, 0.04486083984375, 0.002132415771484375, 0.00012481212615966797, 0.76904296875, 0.033782958984375, 0.0069580078125, 0.0016641616821289062], "tokens": [275, 319, 576, 98, 48, 275, 319, 477, 753, 4609, 322, 4609, 372, 27799, 275, 319, 477, 753, 2698, 322, 2698, 372, 27799, 645, 275, 319, 477, 753, 27799, 2352, 322, 2698, 372, 27799, 275, 569, 284, 945, 763, 27799, 11726, 1419, 2352, 26, 3220, 2064, 4609, 30, 1158, 629, 2698, 30]}
{"line_number": 315, "line_type": "original", "code": "                matrix[i][j] = getEntry(i + 1, j + 1);", "entropy": 1.287109375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [6.4453125, 6.05859375, 0.7919921875, 2.111328125, 0.293212890625, 0.517578125, 0.0408935546875, 0.365478515625, 3.63671875, 0.02935791015625, 0.004604339599609375, 0.0928955078125, 2.130859375, 0.150634765625, 0.002742767333984375, 0.0050201416015625, 2.10546875, 1.6142578125, 0.433349609375, 0.01506805419921875, 0.192626953125], "tokens": [2071, 5045, 77, 91, 1674, 92, 79, 280, 622, 2711, 26, 91, 474, 225, 35, 30, 594, 474, 225, 35, 293]}
{"line_number": 315, "line_type": "generated", "code": "\n     * </p>\n     * @param minuendRow the row to subtract from\n     * @param multiple the multiple\n     * @param subtrahendRow the row to subtract\n     */\n    private void subtractRowFromRow(final int minu", "entropy": 0.19873046875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.642578125, 0.05609130859375, 1.0234375, 0.0096435546875, 0.0064544677734375, 0.04827880859375, 0.00197601318359375, 0.7412109375, 0.00177001953125, 0.1968994140625, 0.00011277198791503906, 0.000110626220703125, 0.03131103515625, 0.52001953125, 0.35546875, 0.15185546875, 0.2467041015625, 0.06585693359375, 0.2412109375, 0.00016772747039794922, 0.00020301342010498047, 9.620189666748047e-05, 1.2470703125, 0.09234619140625, 0.1346435546875, 0.86279296875, 0.0003330707550048828, 0.0001227855682373047, 0.00019860267639160156, 0.01261138916015625, 0.00103759765625, 2.0742416381835938e-05, 6.663799285888672e-05, 0.00356292724609375, 0.014892578125, 0.01401519775390625, 0.0131378173828125, 0.0188446044921875, 0.048492431640625, 0.18505859375, 0.0159149169921875, 0.34765625, 0.005474090576171875, 0.26611328125, 0.79931640625, 1.552734375, 0.068603515625, 0.0144500732421875, 0.10211181640625, 0.1148681640625, 0.056732177734375, 3.516674041748047e-05], "tokens": [275, 319, 576, 98, 48, 275, 319, 477, 753, 1847, 103, 416, 2352, 322, 2698, 372, 27799, 645, 275, 319, 477, 753, 4609, 322, 4609, 275, 319, 477, 753, 1361, 359, 2371, 416, 2352, 322, 2698, 372, 27799, 275, 569, 284, 945, 763, 27799, 2352, 1792, 2352, 26, 3220, 629, 1847, 103]}
{"line_number": 317, "line_type": "original", "code": "            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());", "entropy": 1.3125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [5.28125, 6.9453125, 1.619140625, 2.353515625, 0.411376953125, 5.73046875, 0.58837890625, 0.12109375, 0.0235595703125, 0.1197509765625, 1.1162109375, 2.150390625, 0.020263671875, 0.0034656524658203125, 0.2227783203125, 1.0419921875, 0.07855224609375, 0.0016336441040039062, 0.0016651153564453125, 2.42578125, 0.8525390625, 9.930133819580078e-05, 0.006290435791015625, 0.385498046875], "tokens": [1468, 5045, 77, 91, 1674, 1644, 429, 225, 35, 79, 280, 622, 2711, 26, 91, 474, 225, 35, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 317, "line_type": "generated", "code": "\n     * @param divisorRow index of the row", "entropy": 0.1533203125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.7236328125, 0.0775146484375, 0.0194549560546875, 0.0006504058837890625, 0.4404296875, 0.07208251953125, 0.036651611328125, 0.0016546249389648438, 0.01323699951171875, 0.1478271484375], "tokens": [275, 319, 477, 753, 33482, 2352, 1650, 432, 322, 2698]}
{"line_number": 319, "line_type": "original", "code": "        this.tableau = new Array2DRowRealMatrix(matrix);", "entropy": 1.4326171875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [4.4296875, 4.4765625, 0.006977081298828125, 1.8544921875, 0.0234375, 3.69921875, 2.9296875, 3.521484375, 0.009063720703125, 0.0004527568817138672, 9.85860824584961e-05, 0.0012645721435546875, 0.00018322467803955078, 0.01506805419921875, 1.697265625, 0.261962890625], "tokens": [351, 458, 32, 1274, 4452, 280, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 4873, 293]}
{"line_number": 319, "line_type": "generated", "code": "\n    private void subtractRow(final int dividendRow, final double divisor) {\n        double[] dividend = tableau.getRow(dividendRow);\n        double[] divisorRow = tableau.getRow(getBasicRow(getRhsOffset", "entropy": 0.38232421875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.41259765625, 0.35693359375, 0.01910400390625, 0.64404296875, 0.8955078125, 0.8515625, 0.1971435546875, 0.0196380615234375, 0.09075927734375, 0.00040340423583984375, 0.0001760721206665039, 0.002521514892578125, 0.0017766952514648438, 0.1256103515625, 0.0819091796875, 0.004062652587890625, 0.0254669189453125, 0.01507568359375, 0.1392822265625, 1.2861328125, 0.38916015625, 1.2255859375, 0.00629425048828125, 0.0018768310546875, 0.59228515625, 1.822265625, 0.0276641845703125, 1.3740234375, 0.1944580078125, 0.053985595703125, 0.00485992431640625, 4.76837158203125e-07, 7.62939453125e-06, 0.024505615234375, 0.059051513671875, 0.411376953125, 0.04376220703125, 1.88671875, 1.025390625, 0.00653839111328125, 0.255859375, 4.3272972106933594e-05, 0.0115814208984375, 0.0025577545166015625, 0.006603240966796875, 1.287109375, 1.724609375, 0.0117340087890625, 0.72412109375, 1.5302734375, 3.4332275390625e-05, 0.001102447509765625], "tokens": [284, 945, 763, 27799, 2352, 26, 3220, 629, 4451, 314, 416, 2352, 30, 1158, 2064, 33482, 27, 301, 291, 2064, 1178, 4451, 314, 416, 280, 1858, 4452, 32, 30093, 26, 27710, 416, 2352, 293, 291, 2064, 1178, 33482, 2352, 280, 1858, 4452, 32, 30093, 26, 371, 7099, 2352, 26, 43907, 3914, 3457]}
{"line_number": 320, "line_type": "original", "code": "        this.numArtificialVariables = 0;", "entropy": 1.82421875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [3.546875, 5.2421875, 0.00582122802734375, 8.59375, 1.6259765625, 0.0018100738525390625, 0.0300140380859375, 0.7001953125, 0.288818359375, 0.01285552978515625, 0.006732940673828125], "tokens": [351, 458, 32, 1516, 5271, 31251, 10165, 280, 225, 34, 45]}
{"line_number": 320, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Divides a row by a nonzero element.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   rowToDivide = rowToDivide / divisor\n     * </p>\n    ", "entropy": 0.2744140625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [1.09375, 0.00351715087890625, 0.3310546875, 0.041351318359375, 0.021514892578125, 0.0001430511474609375, 2.71484375, 0.165771484375, 0.59814453125, 0.1416015625, 0.09808349609375, 0.1890869140625, 1.5654296875, 1.4580078125, 1.5771484375, 0.60107421875, 0.04669189453125, 0.002597808837890625, 0.61865234375, 0.004550933837890625, 0.002231597900390625, 0.0153656005859375, 0.00013446807861328125, 0.05584716796875, 0.0546875, 0.0009784698486328125, 0.0016984939575195312, 0.012939453125, 0.01020050048828125, 0.003070831298828125, 0.0042877197265625, 0.0039825439453125, 0.0022525787353515625, 0.0087890625, 0.004734039306640625, 0.0009341239929199219, 0.1195068359375, 0.39306640625, 1.2373046875, 0.045623779296875, 0.560546875, 0.13525390625, 0.0082550048828125, 0.000331878662109375, 0.022308349609375, 0.1104736328125, 0.10546875, 0.0012912750244140625, 0.060455322265625, 0.0001138448715209961, 0.0020732879638671875, 0.005146026611328125], "tokens": [284, 320, 446, 1022, 275, 319, 17536, 12804, 312, 2698, 810, 312, 2979, 6158, 1994, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 2698, 705, 38518, 280, 2698, 705, 38518, 517, 33482, 275, 319, 576, 98, 48, 275]}
{"line_number": 321, "line_type": "original", "code": "    }", "entropy": 2.3359375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [4.37890625, 0.291748046875], "tokens": [264, 320]}
{"line_number": 321, "line_type": "generated", "code": "\n            setEntry(dividendRow, j, getEntry(dividendRow, j) / divisor);\n        }\n    }\n\n    /**\n     * Adds a multiple of one row to another.\n     * <p>\n     * After application of this operation,", "entropy": 0.103515625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.658203125, 0.6943359375, 0.004756927490234375, 0.007007598876953125, 0.0022106170654296875, 4.887580871582031e-06, 4.887580871582031e-06, 0.002593994140625, 0.0100250244140625, 0.00110626220703125, 0.1298828125, 0.0010919570922851562, 0.00047397613525390625, 0.0004906654357910156, 1.9073486328125e-06, 1.0728836059570312e-05, 0.0004367828369140625, 0.00493621826171875, 0.0211639404296875, 0.1483154296875, 0.0017290115356445312, 0.0186767578125, 0.58447265625, 0.00020122528076171875, 0.463134765625, 0.0016460418701171875, 0.260498046875, 0.03759765625, 0.02142333984375, 0.00052642822265625, 1.9853515625, 0.1334228515625, 0.0008540153503417969, 0.004650115966796875, 0.01175689697265625, 0.00518035888671875, 0.026092529296875, 0.002468109130859375, 0.04071044921875, 0.007354736328125, 4.458427429199219e-05, 0.06329345703125, 0.003009796142578125, 0.00042128562927246094, 0.002841949462890625, 0.00011086463928222656, 0.0080718994140625, 0.004329681396484375, 0.00022399425506591797, 0.0005803108215332031, 0.0013990402221679688, 0.0030040740966796875], "tokens": [324, 739, 2711, 26, 27710, 416, 2352, 30, 594, 30, 622, 2711, 26, 27710, 416, 2352, 30, 594, 27, 517, 33482, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 15450, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30]}
{"line_number": 340, "line_type": "original", "code": "      double[] coefficients = new double[getOriginalNumDecisionVariables()];", "entropy": 1.716796875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [3.689453125, 5.1171875, 2.373046875, 2.845703125, 0.14404296875, 0.67236328125, 0.00540924072265625, 0.053131103515625, 3.794921875, 3.625, 0.92578125, 0.65087890625, 0.00921630859375, 0.1319580078125], "tokens": [647, 2064, 1178, 26370, 280, 537, 2064, 77, 371, 11296, 2567, 24453, 10165, 22086]}
{"line_number": 340, "line_type": "generated", "code": "\n        }\n    }\n\n    /**\n     * @return the number of rows in the tableau\n     */\n    protected int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * @return the number of columns in the tableau\n    ", "entropy": 0.257568359375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.383056640625, 0.6669921875, 0.21826171875, 0.0021190643310546875, 0.279296875, 0.04248046875, 0.032196044921875, 1.4185905456542969e-05, 3.072265625, 0.802734375, 0.59521484375, 1.26171875, 0.005870819091796875, 2.09765625, 0.75439453125, 0.263916015625, 0.50634765625, 0.007568359375, 0.50830078125, 0.016845703125, 0.007564544677734375, 0.493896484375, 0.01464080810546875, 0.55224609375, 0.11895751953125, 0.0031337738037109375, 0.0008678436279296875, 0.071533203125, 0.01183319091796875, 0.09375, 5.960464477539062e-07, 0.0017938613891601562, 0.0259246826171875, 0.001125335693359375, 0.057769775390625, 0.09576416015625, 8.797645568847656e-05, 0.06982421875, 0.006866455078125, 0.0027179718017578125, 4.4226646423339844e-05, 0.0823974609375, 0.0237579345703125, 0.02874755859375, 0.02001953125, 0.00423431396484375, 0.039642333984375, 0.01885986328125, 0.003139495849609375, 0.0036678314208984375, 0.0004036426544189453, 0.025054931640625], "tokens": [291, 320, 284, 320, 446, 1022, 275, 319, 477, 601, 322, 1451, 432, 5760, 328, 322, 1858, 4452, 275, 569, 284, 2522, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 477, 601, 322, 1451, 432, 6090, 328, 322, 1858, 4452, 275]}
{"line_number": 341, "line_type": "original", "code": "      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());", "entropy": 1.9248046875, "is_bug_line": true, "sus_score": 0.30151134457776363, "per_token_entropy": [4.0234375, 5.3203125, 2.888671875, 0.48681640625, 0.3876953125, 0.0107269287109375, 0.1282958984375, 0.70458984375, 0.437255859375, 0.005374908447265625, 0.0235748291015625, 4.23828125, 2.3046875, 6.68359375, 0.176513671875, 4.73046875, 0.1632080078125], "tokens": [647, 4401, 11003, 1881, 7099, 2352, 280, 622, 7099, 2352, 26, 371, 17152, 24453, 3818, 3457, 1035]}
{"line_number": 341, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Adds a multiple of one row to another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   summandRow = summandRow + multiple * addendRow\n     * </", "entropy": 0.1099853515625, "is_bug_line": true, "sus_score": 0.30151134457776363, "per_token_entropy": [0.490478515625, 0.34130859375, 0.2447509765625, 0.034210205078125, 0.0254974365234375, 6.866455078125e-05, 1.962890625, 0.1988525390625, 0.0010290145874023438, 0.006420135498046875, 0.008941650390625, 0.00229644775390625, 0.0228271484375, 0.0020503997802734375, 0.043792724609375, 0.005970001220703125, 5.066394805908203e-05, 0.0421142578125, 0.0032100677490234375, 0.00024247169494628906, 0.0023250579833984375, 2.6106834411621094e-05, 0.006969451904296875, 0.006671905517578125, 0.00013327598571777344, 0.0004258155822753906, 0.0009746551513671875, 0.002178192138671875, 0.00023102760314941406, 0.0005044937133789062, 0.0008554458618164062, 0.0003674030303955078, 0.00156402587890625, 0.0012350082397460938, 4.363059997558594e-05, 0.04248046875, 0.48583984375, 0.39111328125, 0.007343292236328125, 0.06353759765625, 0.07293701171875, 0.0009822845458984375, 0.0029239654541015625, 0.023834228515625, 0.0015802383422851562, 0.003627777099609375, 1.1259765625, 0.00562286376953125, 0.0034656524658203125, 0.0180511474609375, 0.0001163482666015625, 0.006732940673828125], "tokens": [284, 320, 446, 1022, 275, 319, 15450, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 3632, 995, 2352, 280, 3632, 995, 2352, 474, 4609, 319, 1015, 416, 2352, 275, 319, 576]}
{"line_number": 342, "line_type": "original", "code": "      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());", "entropy": 0.85791015625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [6.359375, 5.17578125, 1.896484375, 0.02593994140625, 0.10772705078125, 8.03125, 0.08599853515625, 0.007152557373046875, 0.00014281272888183594, 0.2464599609375, 0.00603485107421875, 0.13671875, 0.56298828125, 0.004428863525390625, 0.250244140625, 0.85546875, 0.0673828125, 0.00183868408203125, 0.04278564453125, 9.310245513916016e-05, 1.4066696166992188e-05, 2.396106719970703e-05, 0.002445220947265625, 0.1102294921875, 0.00952911376953125, 6.9141387939453125e-06, 0.0004112720489501953, 0.02154541015625], "tokens": [647, 2064, 4630, 17152, 280, 11003, 1881, 7099, 2352, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 15272, 1881, 7099, 2352, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 342, "line_type": "generated", "code": "\n\n    /**\n     * Adds a multiple of one row to another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   summandRow = summandRow + multiple * addendRow\n     * </p>", "entropy": 0.1385498046875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [1.3984375, 0.08526611328125, 0.031524658203125, 2.467632293701172e-05, 2.755859375, 0.244140625, 0.0022735595703125, 0.00780487060546875, 0.0122528076171875, 0.0037689208984375, 0.0262603759765625, 0.00295257568359375, 0.052825927734375, 0.0079193115234375, 8.177757263183594e-05, 0.049163818359375, 0.0032749176025390625, 0.00035500526428222656, 0.0025005340576171875, 2.5510787963867188e-05, 0.00836944580078125, 0.0074615478515625, 0.0001518726348876953, 0.00048661231994628906, 0.0010709762573242188, 0.0020771026611328125, 0.0003235340118408203, 0.0005478858947753906, 0.0010366439819335938, 0.0004749298095703125, 0.0018901824951171875, 0.0012845993041992188, 1.704692840576172e-05, 0.050140380859375, 0.52880859375, 0.55126953125, 0.009735107421875, 0.053863525390625, 0.104248046875, 0.0010204315185546875, 0.00399017333984375, 0.03271484375, 0.002590179443359375, 0.0036373138427734375, 1.111328125, 0.007572174072265625, 0.0039215087890625, 0.0187225341796875, 0.0001385211944580078, 0.007564544677734375, 6.127357482910156e-05, 0.0008034706115722656], "tokens": [446, 1022, 275, 319, 15450, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 3632, 995, 2352, 280, 3632, 995, 2352, 474, 4609, 319, 1015, 416, 2352, 275, 319, 576, 98, 48]}
{"line_number": 343, "line_type": "original", "code": "      Set<Integer> basicRows = new HashSet<Integer>();", "entropy": 1.07421875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [5.14453125, 7.76171875, 0.07452392578125, 0.0163726806640625, 0.0007781982421875, 0.29736328125, 0.0091094970703125, 0.0174713134765625, 0.08880615234375, 0.14013671875, 0.30419921875, 0.0027256011962890625, 0.10888671875], "tokens": [647, 1756, 46, 3061, 48, 6550, 7252, 280, 537, 14260, 46, 3061, 2923]}
{"line_number": 343, "line_type": "generated", "code": "\n    /**\n     * Add a multiple of one row to another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   sumRow = summandRow + multiple * sumRow\n     * </p>\n     *", "entropy": 0.145263671875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.443115234375, 0.1956787109375, 0.028717041015625, 3.4689903259277344e-05, 3.3984375, 0.274658203125, 0.035858154296875, 0.0126495361328125, 0.042572021484375, 0.008544921875, 0.027740478515625, 0.005828857421875, 0.10943603515625, 0.0164794921875, 0.00016689300537109375, 0.08074951171875, 0.004543304443359375, 0.0006723403930664062, 0.0035037994384765625, 8.177757263183594e-05, 0.01322174072265625, 0.01556396484375, 0.00023663043975830078, 0.0005640983581542969, 0.0014467239379882812, 0.0024871826171875, 0.0005025863647460938, 0.00086212158203125, 0.0014591217041015625, 0.0006556510925292969, 0.0024623870849609375, 0.0015697479248046875, 1.811981201171875e-05, 0.0684814453125, 0.6552734375, 0.68701171875, 0.0267333984375, 0.338134765625, 0.411865234375, 0.023834228515625, 0.01068878173828125, 0.007381439208984375, 0.0047454833984375, 0.50830078125, 0.040283203125, 0.0219879150390625, 0.00023221969604492188, 0.01007080078125, 0.00012826919555664062, 0.0009765625, 0.0020542144775390625, 0.00035190582275390625], "tokens": [284, 1022, 275, 319, 2222, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 3632, 2352, 280, 3632, 995, 2352, 474, 4609, 319, 3632, 2352, 275, 319, 576, 98, 48, 275, 319]}
{"line_number": 344, "line_type": "original", "code": "      for (int i = 0; i < coefficients.length; i++) {", "entropy": 0.93505859375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [3.4765625, 4.69140625, 0.0135498046875, 0.0650634765625, 0.477783203125, 0.01174163818359375, 0.403076171875, 0.063232421875, 0.0262298583984375, 0.0026760101318359375, 0.028656005859375, 7.22265625, 0.07012939453125, 0.012603759765625, 0.09075927734375, 0.0968017578125, 0.0092620849609375, 0.06829833984375], "tokens": [647, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 26370, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 344, "line_type": "generated", "code": "\n     * @param pivotColumn column index\n     * @param pivotRow row index\n     * @param pivotMultiple pivot multiple\n     * @param pivotRowIsBasic true if the pivot row is basic\n     */\n    protected void pivot(final int pivotColumn, final", "entropy": 0.482177734375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.9619140625, 0.1524658203125, 1.818359375, 0.209716796875, 2.234375, 1.021484375, 0.849609375, 0.2498779296875, 0.1982421875, 0.0858154296875, 0.005767822265625, 0.180419921875, 0.73046875, 0.032623291015625, 0.06298828125, 0.003368377685546875, 0.08251953125, 0.57373046875, 0.00908660888671875, 0.5283203125, 0.78662109375, 1.6083984375, 1.451171875, 0.92431640625, 0.2479248046875, 1.3642578125, 0.038909912109375, 0.72412109375, 1.4169921875, 1.0283203125, 0.92431640625, 0.4091796875, 0.52734375, 0.031646728515625, 0.2685546875, 0.15478515625, 0.076171875, 0.2279052734375, 1.0458984375, 0.18408203125, 0.4697265625, 0.07568359375, 0.119873046875, 0.0194244384765625, 0.6826171875, 0.054473876953125, 0.13134765625, 0.0031585693359375, 0.00027823448181152344, 0.0027027130126953125, 0.00022602081298828125, 0.08587646484375], "tokens": [275, 319, 477, 753, 20991, 2137, 2623, 1650, 275, 319, 477, 753, 20991, 2352, 2698, 1650, 275, 319, 477, 753, 20991, 11726, 20991, 4609, 275, 319, 477, 753, 20991, 2352, 1622, 7099, 861, 415, 322, 20991, 2698, 438, 6550, 275, 569, 284, 2522, 763, 20991, 26, 3220, 629, 20991, 2137, 30, 1158]}
{"line_number": 345, "line_type": "original", "code": "          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);", "entropy": 2.30078125, "is_bug_line": true, "sus_score": 0.30151134457776363, "per_token_entropy": [7.765625, 9.65625, 6.77734375, 0.29248046875, 0.10791015625, 0.2276611328125, 0.01152801513671875, 0.002246856689453125, 0.0185546875, 7.62890625, 0.6689453125, 0.0012102127075195312, 1.720703125, 0.283935546875, 1.59375, 0.063720703125], "tokens": [2033, 4401, 6550, 2352, 280, 622, 7099, 2352, 26, 15207, 33312, 10905, 346, 474, 595, 293]}
{"line_number": 345, "line_type": "generated", "code": "\n     * \n     * @return width of the tableau\n     */\n    protected int getWidth() {\n        return tableau.getColumnDimension();\n    }\n\n    /**\n     * Get the height of the tableau.", "entropy": 0.1431884765625, "is_bug_line": true, "sus_score": 0.30151134457776363, "per_token_entropy": [0.24365234375, 0.028900146484375, 1.822265625, 0.0018796920776367188, 0.0222015380859375, 0.0012559890747070312, 0.70703125, 0.1976318359375, 0.03424072265625, 0.01490020751953125, 0.0005512237548828125, 0.1220703125, 0.0219573974609375, 0.022735595703125, 0.4248046875, 0.02362060546875, 0.0023651123046875, 0.011932373046875, 0.0021839141845703125, 0.002170562744140625, 0.2218017578125, 0.04608154296875, 0.85888671875, 2.6226043701171875e-06, 0.004947662353515625, 0.007534027099609375, 0.0007233619689941406, 0.7255859375, 0.0509033203125, 0.0005254745483398438, 0.10052490234375, 0.00936126708984375, 0.01959228515625, 1.9311904907226562e-05, 0.06298828125, 0.00743865966796875, 0.138671875, 0.0046234130859375, 0.0027751922607421875, 0.00336456298828125, 0.00017189979553222656, 0.041961669921875], "tokens": [275, 319, 5384, 319, 477, 601, 1861, 432, 322, 1858, 4452, 275, 569, 284, 2522, 629, 622, 2611, 346, 301, 291, 442, 1858, 4452, 32, 19239, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32]}
{"line_number": 346, "line_type": "original", "code": "          if (basicRows.contains(basicRow)) {", "entropy": 1.9375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [6.4375, 3.255859375, 0.21630859375, 4.9921875, 1.3388671875, 0.98828125, 2.1796875, 0.0244140625, 3.423828125, 0.0160369873046875, 0.1485595703125, 0.2232666015625], "tokens": [2033, 415, 308, 6390, 7252, 32, 4752, 26, 6390, 2352, 490, 301]}
{"line_number": 346, "line_type": "generated", "code": "\n     */\n    protected int getWidth() {\n        return tableau.getColumnDimension() + numArtificialVariables;\n    }\n\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau", "entropy": 0.149658203125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [1.345703125, 0.10174560546875, 0.0238800048828125, 0.45947265625, 0.026397705078125, 0.0020351409912109375, 0.00909423828125, 0.004405975341796875, 0.0032176971435546875, 0.2156982421875, 0.04119873046875, 0.489501953125, 2.5033950805664062e-06, 0.00415802001953125, 0.00798797607421875, 0.0007572174072265625, 0.63330078125, 0.9814453125, 1.0078125, 0.022552490234375, 3.1948089599609375e-05, 0.0005064010620117188, 0.6748046875, 0.162109375, 0.0006093978881835938, 0.132080078125, 0.0126953125, 0.018096923828125, 2.6345252990722656e-05, 0.08612060546875, 0.009368896484375, 0.184814453125, 0.004543304443359375, 0.0030689239501953125, 0.004642486572265625, 0.00022983551025390625, 0.040191650390625, 0.02362060546875, 1.4424324035644531e-05, 0.040069580078125, 0.0003135204315185547, 0.0941162109375, 0.004405975341796875, 0.0031223297119140625, 0.0025081634521484375, 0.0001049041748046875], "tokens": [275, 569, 284, 2522, 629, 622, 2611, 346, 301, 291, 442, 1858, 4452, 32, 19239, 9883, 346, 474, 1929, 5271, 31251, 10165, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452]}
{"line_number": 351, "line_type": "original", "code": "              basicRows.add(basicRow);", "entropy": 2.4765625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [11.0703125, 11.0, 0.048919677734375, 0.01279449462890625, 0.026824951171875, 0.002483367919921875, 0.13427734375, 0.0003528594970703125, 0.007091522216796875], "tokens": [2850, 6550, 7252, 32, 669, 26, 6390, 2352, 293]}
{"line_number": 351, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the value of a particular entry", "entropy": 0.191650390625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.55517578125, 0.1517333984375, 0.026123046875, 4.088878631591797e-05, 0.355224609375, 0.028289794921875, 0.377197265625, 0.00484466552734375, 0.0029888153076171875, 0.00518798828125, 0.0002391338348388672, 0.039093017578125, 0.00467681884765625, 0.00067138671875, 0.036651611328125, 0.0007314682006835938, 0.09527587890625, 0.0029315948486328125, 0.003204345703125, 0.0023899078369140625, 8.726119995117188e-05, 0.00670623779296875, 0.0013904571533203125, 0.01690673828125, 0.0341796875, 0.051666259765625, 0.0003223419189453125, 0.0002684593200683594, 0.0002651214599609375, 0.0005817413330078125, 0.0011005401611328125, 0.0279388427734375, 0.002223968505859375, 0.007663726806640625, 2.384185791015625e-07, 5.9604644775390625e-05, 8.26120376586914e-05, 9.5367431640625e-07, 0.0093994140625, 0.023101806640625, 0.00017178058624267578, 0.379150390625, 0.02593994140625, 0.007160186767578125, 0.00014030933380126953, 0.5556640625, 0.53271484375, 2.375, 0.30224609375, 1.2470703125, 2.09765625, 0.57177734375], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 786, 432, 312, 8409, 3414]}
{"line_number": 352, "line_type": "original", "code": "              coefficients[i] =", "entropy": 4.05078125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [10.0390625, 12.1015625, 1.248046875, 0.6259765625, 0.050872802734375, 0.2420654296875], "tokens": [2850, 26370, 77, 91, 79, 280]}
{"line_number": 352, "line_type": "generated", "code": "\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the number of objective functions.\n     *", "entropy": 0.1307373046875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.47900390625, 0.032318115234375, 0.138671875, 0.0182647705078125, 0.27099609375, 0.005046844482421875, 0.0036373138427734375, 0.00653076171875, 0.0002884864807128906, 0.058380126953125, 0.06207275390625, 0.00251007080078125, 0.05621337890625, 0.002399444580078125, 0.08636474609375, 0.0031261444091796875, 0.0025043487548828125, 0.0027866363525390625, 0.00017583370208740234, 0.0308380126953125, 0.00408172607421875, 0.03497314453125, 0.0323486328125, 0.047393798828125, 0.0003037452697753906, 0.00041556358337402344, 0.000514984130859375, 0.0004978179931640625, 0.0006241798400878906, 0.0311126708984375, 0.0025463104248046875, 0.007541656494140625, 5.960464477539062e-07, 5.0902366638183594e-05, 9.202957153320312e-05, 8.344650268554688e-07, 0.011627197265625, 0.021087646484375, 0.00016164779663085938, 0.1650390625, 0.02685546875, 0.1331787109375, 8.392333984375e-05, 0.5390625, 0.5078125, 1.86328125, 0.0031566619873046875, 1.7265625, 0.034881591796875, 0.30810546875, 0.034820556640625, 0.0008745193481445312], "tokens": [275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 25110, 4442, 32, 275, 319]}
