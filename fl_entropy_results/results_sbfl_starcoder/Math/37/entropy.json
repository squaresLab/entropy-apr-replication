{"line_number": 1178, "line_type": "original", "code": "        if (Double.isNaN(realPart) ||", "entropy": 0.99853515625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [3.478515625, 1.017578125, 0.11004638671875, 2.494140625, 0.0009541511535644531, 0.4638671875, 0.0018205642700195312, 0.99365234375, 1.4892578125, 0.70458984375, 0.2303466796875], "tokens": [351, 415, 308, 4075, 32, 26821, 26, 4543, 2639, 27, 1276]}
{"line_number": 1178, "line_type": "generated", "code": "\n    /** {@inheritDoc} */\n    @Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other instanceof Complex) {\n            final Complex rhs = (Complex) other;\n            if", "entropy": 0.114990234375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.9287109375, 0.1861572265625, 1.17578125, 0.0004930496215820312, 0.0006327629089355469, 0.00505828857421875, 0.022430419921875, 0.45849609375, 0.0015878677368164062, 0.01073455810546875, 0.007007598876953125, 0.67724609375, 0.0055999755859375, 0.0016736984252929688, 0.1015625, 0.47998046875, 0.027130126953125, 0.00412750244140625, 0.0970458984375, 0.02081298828125, 0.01290130615234375, 0.0789794921875, 0.00412750244140625, 0.00030303001403808594, 0.0135345458984375, 0.0044403076171875, 0.01029205322265625, 0.022674560546875, 0.0009484291076660156, 0.0002677440643310547, 0.001880645751953125, 0.00045228004455566406, 0.185546875, 0.005962371826171875, 0.05377197265625, 0.0211181640625, 0.287109375, 0.0265655517578125, 0.0679931640625, 0.002330780029296875, 0.138427734375, 0.396484375, 0.0009889602661132812, 0.1943359375, 0.0012035369873046875, 0.00167083740234375, 3.2782554626464844e-05, 0.0003631114959716797, 0.00928497314453125, 0.00022614002227783203, 0.03302001953125, 0.1907958984375], "tokens": [284, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 1905, 12423, 26, 959, 1604, 27, 301, 291, 415, 308, 578, 610, 1604, 27, 301, 324, 442, 861, 45, 291, 320, 291, 415, 308, 2455, 5113, 19915, 27, 301, 324, 1158, 19915, 9322, 280, 308, 12267, 27, 1604, 45, 324, 415]}
{"line_number": 1182, "line_type": "original", "code": "        return new Complex(realPart, imaginaryPart);", "entropy": 1.1416015625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.78515625, 1.7060546875, 1.64453125, 0.52490234375, 0.395263671875, 0.76416015625, 3.591796875, 0.1539306640625, 0.0275115966796875, 0.0007648468017578125, 0.0047454833984375, 0.0968017578125], "tokens": [351, 442, 537, 19915, 26, 4543, 2639, 30, 17463, 3172, 2639, 293]}
{"line_number": 1182, "line_type": "generated", "code": "\n\n    /** {@inheritDoc} */\n    @Override\n    public int hashCode() {\n        return 37 * hash(imaginary) + hash(real);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public boolean equals(Object object) {\n       ", "entropy": 0.2491455078125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [1.8798828125, 0.10986328125, 0.98974609375, 0.00044608116149902344, 0.0004596710205078125, 0.002399444580078125, 0.0142669677734375, 0.2333984375, 0.001255035400390625, 0.005153656005859375, 0.005954742431640625, 0.87548828125, 0.0210113525390625, 0.005168914794921875, 0.005229949951171875, 0.028839111328125, 1.34765625, 0.11431884765625, 0.1123046875, 1.33203125, 0.02239990234375, 1.3466796875, 0.111083984375, 1.2666015625, 2.110004425048828e-05, 0.003498077392578125, 0.04913330078125, 0.01922607421875, 0.0003237724304199219, 0.0009374618530273438, 0.002288818359375, 0.0084228515625, 0.0004000663757324219, 0.04833984375, 0.01035308837890625, 0.8408203125, 5.7697296142578125e-05, 6.771087646484375e-05, 0.004482269287109375, 0.0031604766845703125, 0.052490234375, 0.00040912628173828125, 0.0010929107666015625, 0.002727508544921875, 0.0030422210693359375, 0.00016391277313232422, 0.0007462501525878906, 0.05364990234375, 1.939453125, 0.007568359375, 0.002010345458984375, 0.0650634765625], "tokens": [446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 629, 17772, 346, 301, 291, 442, 225, 37, 41, 319, 3677, 26, 17792, 3172, 27, 474, 3677, 26, 4543, 293, 284, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 1905, 12423, 26, 959, 1300, 27, 301, 291]}
{"line_number": 1022, "line_type": "original", "code": "        double real2 = 2.0 * real;", "entropy": 0.75146484375, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [6.8203125, 1.0576171875, 1.005859375, 0.06695556640625, 0.00511932373046875, 0.00455474853515625, 0.0018529891967773438, 0.0248870849609375, 0.00034737586975097656, 0.0016613006591796875, 0.0193939208984375, 0.004337310791015625], "tokens": [351, 2064, 4011, 36, 280, 225, 36, 32, 34, 319, 4011, 45]}
{"line_number": 1022, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/InverseTangent.html\" TARGET=\"_top\">\n     * inverse tangent</a> of this complex number.\n     * Implements the formula:", "entropy": 0.073974609375, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [0.11480712890625, 0.1004638671875, 0.359619140625, 0.046051025390625, 0.02520751953125, 2.491474151611328e-05, 0.316650390625, 0.0190887451171875, 1.283203125, 0.00017845630645751953, 0.00022304058074951172, 0.00029206275939941406, 0.0016431808471679688, 0.004123687744140625, 0.0017805099487304688, 4.410743713378906e-05, 0.0015840530395507812, 2.9802322387695312e-05, 1.1920928955078125e-06, 0.00015163421630859375, 1.1920928955078125e-06, 5.125999450683594e-06, 0.00011265277862548828, 1.4066696166992188e-05, 0.00033354759216308594, 0.6806640625, 0.61083984375, 7.975101470947266e-05, 4.5299530029296875e-06, 0.001552581787109375, 0.01007843017578125, 9.357929229736328e-05, 0.0005717277526855469, 0.00014495849609375, 0.000545501708984375, 1.7881393432617188e-06, 0.07611083984375, 0.0018453598022460938, 0.00045228004455566406, 3.0040740966796875e-05, 0.0002734661102294922, 0.0060577392578125, 0.03570556640625, 0.0016908645629882812, 0.00019466876983642578, 0.001506805419921875, 0.0160369873046875, 9.02414321899414e-05, 0.10211181640625, 0.0006694793701171875, 0.02313232421875, 0.002178192138671875], "tokens": [284, 320, 446, 1022, 275, 319, 12836, 322, 275, 319, 333, 83, 976, 347, 525, 555, 3812, 5860, 32, 105, 362, 43579, 32, 508, 33, 23173, 48472, 32, 916, 20, 21207, 5617, 1393, 413, 275, 319, 19385, 48285, 377, 83, 48, 432, 458, 8640, 1451, 32, 275, 319, 34818, 322, 17568, 44]}
{"line_number": 1023, "line_type": "original", "code": "        double imaginary2 = 2.0 * imaginary;", "entropy": 0.875, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [5.85546875, 2.70703125, 3.287109375, 0.00024771690368652344, 0.1944580078125, 0.0134124755859375, 0.0408935546875, 0.0005788803100585938, 0.06103515625, 0.0006747245788574219, 0.0052032470703125, 0.061248779296875, 9.560585021972656e-05, 0.0196075439453125], "tokens": [351, 2064, 17463, 3172, 36, 280, 225, 36, 32, 34, 319, 17463, 3172, 45]}
{"line_number": 1023, "line_type": "generated", "code": "\n    /**\n     * Compute the argument (also known as the phase angle or polar angle) of\n     * this complex number.\n     * The argument is the angle between the positive real axis and the point\n     * representing this number in the complex plane.\n     *", "entropy": 0.140869140625, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [0.69775390625, 0.125732421875, 0.042572021484375, 0.0001436471939086914, 0.701171875, 0.03271484375, 0.237060546875, 0.35546875, 0.10418701171875, 0.1473388671875, 0.0006651878356933594, 0.0203704833984375, 0.043670654296875, 0.669921875, 0.321533203125, 0.74462890625, 0.06695556640625, 0.0062103271484375, 0.1802978515625, 0.73779296875, 1.3113021850585938e-06, 0.0005064010620117188, 0.004177093505859375, 8.189678192138672e-05, 0.0022640228271484375, 0.44482421875, 7.140636444091797e-05, 0.406005859375, 0.07305908203125, 0.049224853515625, 0.15771484375, 0.0151519775390625, 0.056396484375, 0.01052093505859375, 0.001827239990234375, 0.0150909423828125, 0.0036182403564453125, 0.01751708984375, 0.0400390625, 0.337646484375, 0.0018053054809570312, 1.4901161193847656e-05, 0.09063720703125, 0.00038909912109375, 0.099609375, 0.006381988525390625, 0.0019779205322265625, 0.0197906494140625, 0.0016307830810546875, 0.01302337646484375, 0.218994140625, 6.210803985595703e-05], "tokens": [284, 1022, 275, 319, 12836, 322, 2793, 308, 12227, 8967, 619, 322, 11225, 8775, 556, 38060, 8775, 27, 432, 275, 319, 458, 8640, 1451, 32, 275, 319, 886, 2793, 438, 322, 8775, 3733, 322, 11557, 4011, 6013, 461, 322, 2260, 275, 319, 12681, 458, 1451, 328, 322, 8640, 14442, 32, 275, 319]}
{"line_number": 1024, "line_type": "original", "code": "        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);", "entropy": 0.63671875, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [5.82421875, 4.02734375, 2.341796875, 0.1732177734375, 0.25146484375, 7.581710815429688e-05, 0.00024771690368652344, 1.7060546875, 0.00164794921875, 0.141845703125, 0.135498046875, 0.0114593505859375, 0.0176849365234375, 0.0006928443908691406, 2.193450927734375e-05, 0.0008568763732910156, 0.0006866455078125, -0.0, 0.00013899803161621094, 0.00389862060546875, 7.748603820800781e-06, 0.00012958049774169922, 0.0029735565185546875], "tokens": [351, 2064, 343, 280, 15938, 5717, 32, 4952, 26, 4543, 36, 27, 474, 15938, 5717, 32, 331, 615, 26, 17792, 3172, 36, 293]}
{"line_number": 1024, "line_type": "generated", "code": "\n\n    /**\n     * Compute the argument (also known as the phase or polar angle) of this\n     * complex number.\n     * The argument is the angle between the positive real axis and the\n     * point representing this number in the complex plane.\n     * The", "entropy": 0.1668701171875, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [0.9365234375, 0.0914306640625, 0.03192138671875, 6.854534149169922e-05, 0.82763671875, 0.0298004150390625, 0.1746826171875, 0.3935546875, 0.1142578125, 0.1751708984375, 0.0006203651428222656, 0.022491455078125, 0.041046142578125, 0.806640625, 0.8271484375, 0.07220458984375, 0.0019989013671875, 0.0203704833984375, 0.0227203369140625, 0.0306854248046875, 1.3113021850585938e-06, 0.00815582275390625, 0.0001004934310913086, 0.0023326873779296875, 0.5791015625, 6.568431854248047e-05, 0.705078125, 0.07086181640625, 0.048065185546875, 0.146728515625, 0.0158233642578125, 0.07965087890625, 0.01207733154296875, 0.0017080307006835938, 0.01531219482421875, 0.003936767578125, 0.0141143798828125, 0.0312347412109375, 1.615234375, 4.00543212890625e-05, 0.0220489501953125, 0.08367919921875, 0.00016963481903076172, 0.10198974609375, 0.0051422119140625, 0.0021381378173828125, 0.0199127197265625, 0.00133514404296875, 0.0112457275390625, 0.202392578125, 7.593631744384766e-05, 0.259521484375], "tokens": [446, 1022, 275, 319, 12836, 322, 2793, 308, 12227, 8967, 619, 322, 11225, 556, 38060, 8775, 27, 432, 458, 275, 319, 8640, 1451, 32, 275, 319, 886, 2793, 438, 322, 8775, 3733, 322, 11557, 4011, 6013, 461, 322, 275, 319, 2260, 12681, 458, 1451, 328, 322, 8640, 14442, 32, 275, 319, 886]}
{"line_number": 1026, "line_type": "original", "code": "        return createComplex(FastMath.sin(real2) / d,", "entropy": 0.65185546875, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [4.46484375, 2.275390625, 0.6689453125, 0.070556640625, 0.054718017578125, 0.63671875, 0.0002665519714355469, 0.0016536712646484375, 0.49072265625, 1.3984375, 0.204833984375, 0.061859130859375, 0.03778076171875, 0.02996826171875, 0.00543975830078125, 0.0238037109375], "tokens": [351, 442, 1487, 12267, 26, 12200, 5717, 32, 7102, 26, 4543, 36, 27, 517, 343, 30]}
{"line_number": 1026, "line_type": "generated", "code": "\n    /**\n     * Compute the argument (also known as the phase angle or polar angle) of\n     * this complex number.\n     * The argument is the angle between the positive real axis and the\n     * point representing this number in the complex plane.\n     *", "entropy": 0.185791015625, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [1.146484375, 0.1593017578125, 0.053955078125, 0.00013530254364013672, 1.1064453125, 0.052490234375, 0.305419921875, 0.5244140625, 0.11553955078125, 0.1962890625, 0.0006036758422851562, 0.0264739990234375, 0.04095458984375, 0.6083984375, 0.391357421875, 0.74755859375, 0.07598876953125, 0.00687408447265625, 0.2108154296875, 0.82373046875, 2.5033950805664062e-06, 0.0008683204650878906, 0.007534027099609375, 0.00011932849884033203, 0.0025463104248046875, 0.5517578125, 0.00011456012725830078, 0.480224609375, 0.09814453125, 0.04364013671875, 0.1527099609375, 0.0194091796875, 0.058441162109375, 0.01372528076171875, 0.002105712890625, 0.0142059326171875, 0.0048065185546875, 0.0178680419921875, 0.0518798828125, 1.0615234375, 2.4318695068359375e-05, 0.0258331298828125, 0.10400390625, 0.00021219253540039062, 0.086669921875, 0.004802703857421875, 0.0021228790283203125, 0.0205841064453125, 0.001598358154296875, 0.01153564453125, 0.2310791015625, 0.0001232624053955078], "tokens": [284, 1022, 275, 319, 12836, 322, 2793, 308, 12227, 8967, 619, 322, 11225, 8775, 556, 38060, 8775, 27, 432, 275, 319, 458, 8640, 1451, 32, 275, 319, 886, 2793, 438, 322, 8775, 3733, 322, 11557, 4011, 6013, 461, 322, 275, 319, 2260, 12681, 458, 1451, 328, 322, 8640, 14442, 32, 275, 319]}
{"line_number": 1066, "line_type": "original", "code": "        double real2 = 2.0 * real;", "entropy": 1.0810546875, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [3.12109375, 3.32421875, 3.07421875, 2.291015625, 0.0589599609375, 0.484619140625, 0.0518798828125, 0.206787109375, 0.007450103759765625, 0.005977630615234375, 0.321533203125, 0.01751708984375], "tokens": [351, 2064, 4011, 36, 280, 225, 36, 32, 34, 319, 4011, 45]}
{"line_number": 1066, "line_type": "generated", "code": "\n     */\n    public List<Complex> nthRoot(int n) {\n        if (isNaN) {\n            return Collections.singletonList(NaN);\n        }\n        if (isInf) {\n            return Collections.singletonList(this);\n        }\n\n        double a =", "entropy": 0.216064453125, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [0.421142578125, 0.169189453125, 0.055755615234375, 0.051422119140625, 0.0679931640625, 0.004322052001953125, 0.002166748046875, 0.0008254051208496094, 0.026763916015625, 0.11700439453125, 0.0014867782592773438, 0.06890869140625, 0.0006957054138183594, 0.002185821533203125, 0.0232391357421875, 0.2415771484375, 0.6337890625, 0.039031982421875, 0.1956787109375, 0.225341796875, 0.0029048919677734375, 0.01312255859375, 0.10198974609375, 0.430908203125, 0.032257080078125, 0.0012273788452148438, 0.0024852752685546875, 0.0178680419921875, 0.00027179718017578125, 0.028472900390625, 0.0010118484497070312, 0.876953125, 0.281494140625, 0.079345703125, 0.99072265625, 0.94384765625, 0.34033203125, 0.001346588134765625, 0.0174713134765625, 0.1861572265625, 0.040679931640625, 0.0050048828125, 0.0004210472106933594, 0.00872802734375, 1.8984375, 0.00887298583984375, 0.051788330078125, 0.0022869110107421875, 0.53076171875, 0.853515625, 1.1162109375, 0.0225677490234375], "tokens": [275, 569, 284, 562, 1682, 46, 12267, 48, 46245, 4058, 26, 410, 310, 27, 301, 291, 415, 308, 26821, 27, 301, 324, 442, 15496, 32, 36551, 26, 11126, 293, 291, 320, 291, 415, 308, 297, 7559, 27, 301, 324, 442, 15496, 32, 36551, 26, 578, 293, 291, 320, 584, 2064, 312, 280]}
{"line_number": 1067, "line_type": "original", "code": "        double imaginary2 = 2.0 * imaginary;", "entropy": 1.3232421875, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [3.05078125, 3.130859375, 9.3359375, 0.0002856254577636719, 1.9404296875, 0.05328369140625, 0.08782958984375, 0.0020275115966796875, 0.64697265625, 0.00797271728515625, 0.00617218017578125, 0.256591796875, 9.21487808227539e-05, 0.016357421875], "tokens": [351, 2064, 17463, 3172, 36, 280, 225, 36, 32, 34, 319, 17463, 3172, 45]}
{"line_number": 1067, "line_type": "generated", "code": "\n     */\n    public List<Complex> nthRoot(int n) throws NotPositiveException {\n        if (n <= 0) {\n            throw new NotPositiveException(LocalizedFormats.ROOTS_OF_NEG_NUMBER, n);\n        }\n       ", "entropy": 0.15673828125, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [0.65869140625, 0.1961669921875, 0.052154541015625, 0.053955078125, 0.0595703125, 0.005126953125, 0.0018339157104492188, 0.0008969306945800781, 0.0216522216796875, 0.11358642578125, 0.0017604827880859375, 0.1783447265625, 0.0013837814331054688, 0.00257110595703125, 0.75390625, 0.017242431640625, 0.00044417381286621094, 1.0728836059570312e-06, 0.047088623046875, 0.318603515625, 0.44677734375, 0.020843505859375, 0.0280303955078125, 0.10589599609375, 0.0003597736358642578, 0.0002880096435546875, 0.00818634033203125, 0.01088714599609375, 0.024810791015625, 0.032196044921875, 0.0279693603515625, 0.00299835205078125, 0.00012481212615966797, 3.5762786865234375e-07, 0.05352783203125, 0.06439208984375, 0.006343841552734375, 0.00015044212341308594, 1.2890625, 0.06414794921875, 0.0027904510498046875, 0.1861572265625, 3.9458274841308594e-05, 0.99755859375, 0.60595703125, 0.09344482421875, 0.1307373046875, 0.455810546875, 0.007709503173828125, 0.070068359375, 0.001323699951171875, 0.92626953125], "tokens": [275, 569, 284, 562, 1682, 46, 12267, 48, 46245, 4058, 26, 410, 310, 27, 2571, 3182, 17991, 984, 301, 291, 415, 308, 96, 2511, 225, 34, 27, 301, 324, 1422, 537, 3182, 17991, 984, 26, 24225, 19298, 32, 7789, 69, 81, 2109, 81, 25531, 81, 10463, 30, 310, 293, 291, 320, 291]}
{"line_number": 1068, "line_type": "original", "code": "        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);", "entropy": 1.77734375, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [4.6484375, 3.7578125, 4.9375, 0.12091064453125, 0.5771484375, 2.5033950805664062e-05, 5.2928924560546875e-05, 13.1484375, 0.00032830238342285156, 0.0289154052734375, 7.30078125, 3.95703125, 2.318359375, 0.027435302734375, 0.0391845703125, 1.6450881958007812e-05, 0.0009737014770507812, 0.0021533966064453125, 0.001438140869140625, 0.00598907470703125, 0.0008254051208496094, 0.0026702880859375, 0.004184722900390625], "tokens": [351, 2064, 343, 280, 15938, 5717, 32, 331, 615, 26, 4543, 36, 27, 474, 15938, 5717, 32, 4952, 26, 17792, 3172, 36, 293]}
{"line_number": 1068, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [], "tokens": []}
{"line_number": 1070, "line_type": "original", "code": "        return createComplex(FastMath.sinh(real2) / d,", "entropy": 2.212890625, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [3.24609375, 1.923828125, 3.06640625, 1.927734375, 2.140625, 0.49072265625, 5.745887756347656e-05, 0.00023162364959716797, 6.90234375, 6.5546875, 0.1051025390625, 4.4296875, 5.2578125, 1.1376953125, 0.14404296875, 0.0794677734375, 0.21337890625], "tokens": [351, 442, 1487, 12267, 26, 12200, 5717, 32, 7102, 90, 26, 4543, 36, 27, 517, 343, 30]}
{"line_number": 1070, "line_type": "generated", "code": "\n        if (n <= 0) {\n            throw new NotPositiveException(LocalizedFormats.DEGREE, n);\n        }\n        List<Complex> result = new ArrayList<Complex>(n);\n        double a = getArgument();\n        double nReci", "entropy": 0.2607421875, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [0.57568359375, 0.97802734375, 0.0311737060546875, 0.039215087890625, 0.42138671875, 0.0005321502685546875, 0.000980377197265625, 0.01029205322265625, 0.00978851318359375, 0.036529541015625, 0.0501708984375, 0.037322998046875, 0.00695037841796875, 0.0004410743713378906, 5.960464477539062e-07, 0.059539794921875, 0.04107666015625, 0.004375457763671875, 0.0001596212387084961, 0.6123046875, 0.0011434555053710938, 0.06634521484375, 0.2293701171875, 0.0010099411010742188, 0.032135009765625, 0.0010004043579101562, 0.81640625, 1.3310546875, 0.0014276504516601562, 0.005123138427734375, 0.0002536773681640625, 0.336669921875, 0.0187530517578125, 0.046142578125, 0.00994110107421875, 0.0262603759765625, 0.004253387451171875, 0.1090087890625, 0.01015472412109375, 0.0051422119140625, 0.393310546875, 1.3408203125, 1.47265625, 0.01453399658203125, 0.841796875, 0.330322265625, 0.1463623046875, 0.08697509765625, 0.1357421875, 1.529296875, 0.830078125, 0.468505859375], "tokens": [291, 415, 308, 96, 2511, 225, 34, 27, 301, 324, 1422, 537, 3182, 17991, 984, 26, 24225, 19298, 32, 42633, 7722, 30, 310, 293, 291, 320, 291, 1682, 46, 12267, 48, 1056, 280, 537, 5059, 46, 12267, 1563, 96, 293, 291, 2064, 312, 280, 622, 3484, 473, 291, 2064, 310, 435, 1871]}
{"line_number": 1018, "line_type": "original", "code": "        if (isNaN) {", "entropy": 2.3828125, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [6.89453125, 1.662109375, 0.103515625, 5.25390625, 0.263427734375, 0.12152099609375], "tokens": [351, 415, 308, 26821, 27, 301]}
{"line_number": 1018, "line_type": "generated", "code": "\n            return NaN;\n        }\n\n        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);\n\n        return createComplex(FastMath.sinh(real2) / d,\n                             FastMath.sin(", "entropy": 0.0289154052734375, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [0.239501953125, 0.11614990234375, 0.249755859375, 0.004070281982421875, 0.07110595703125, 0.004779815673828125, 0.294921875, 0.1397705078125, 0.06158447265625, 0.007762908935546875, 0.005390167236328125, 2.7418136596679688e-06, 1.0967254638671875e-05, 0.00385284423828125, 3.5762786865234375e-07, 0.00013399124145507812, 0.00022029876708984375, 0.00011789798736572266, 0.0008678436279296875, 0.00029468536376953125, 0.0006809234619140625, 8.821487426757812e-06, 2.276897430419922e-05, 8.487701416015625e-05, 6.186962127685547e-05, 0.0007071495056152344, 1.0728836059570312e-06, 0.00012314319610595703, 8.761882781982422e-05, 0.21875, 0.022552490234375, 0.0019044876098632812, 9.262561798095703e-05, 0.0009708404541015625, 0.00328826904296875, 6.079673767089844e-06, 2.09808349609375e-05, 8.702278137207031e-06, 2.6226043701171875e-05, 0.00012183189392089844, 9.85860824584961e-05, 9.357929229736328e-05, 0.00453948974609375, 0.00019156932830810547, 0.0001480579376220703, 0.0001239776611328125, 0.048431396484375, 0.00010693073272705078, 3.6954879760742188e-06, 4.100799560546875e-05, 6.663799285888672e-05, 5.221366882324219e-05], "tokens": [324, 442, 21644, 45, 291, 320, 584, 2064, 343, 280, 15938, 5717, 32, 331, 615, 26, 4543, 36, 27, 474, 15938, 5717, 32, 4952, 26, 17792, 3172, 36, 293, 584, 442, 1487, 12267, 26, 12200, 5717, 32, 7102, 90, 26, 4543, 36, 27, 517, 343, 30, 6035, 15938, 5717, 32, 7102, 26]}
{"line_number": 1063, "line_type": "original", "code": "        if (isNaN) {", "entropy": 1.03125, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [2.94140625, 0.51513671875, 0.347412109375, 1.65625, 0.5029296875, 0.225830078125], "tokens": [351, 415, 308, 26821, 27, 301]}
{"line_number": 1063, "line_type": "generated", "code": "\n     * @param n Degree of root.\n     * @return a List of {@code n} {@link Complex} roots of {@code this}.\n     * @throws NotPositiveException if {@code n <= 0}.\n     */\n    public List<", "entropy": 0.23486328125, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [0.84814453125, 0.0276336669921875, 1.4501953125, 0.04827880859375, 0.0236663818359375, 0.403076171875, 0.08734130859375, 0.0020294189453125, 0.0158538818359375, 0.09429931640625, 0.0166015625, 0.00027751922607421875, 0.005657196044921875, 0.03753662109375, 0.53564453125, 0.290283203125, 0.935546875, 0.80712890625, 0.017486572265625, 0.0279388427734375, 0.019989013671875, 0.95458984375, 0.8525390625, 0.004878997802734375, 0.416259765625, 0.76611328125, 0.8427734375, 0.04046630859375, 0.0002620220184326172, 0.000629425048828125, 0.031524658203125, 0.055267333984375, 0.1356201171875, 0.038482666015625, 0.0716552734375, 0.50634765625, 0.193603515625, 0.00022029876708984375, 0.0171051025390625, 0.0347900390625, 5.352497100830078e-05, 0.002475738525390625, 0.7939453125, 0.00024056434631347656, 5.459785461425781e-05, 0.0183258056640625, 0.076171875, 0.517578125, 0.0302276611328125, 0.05645751953125, 0.05291748046875, 0.003387451171875], "tokens": [275, 319, 477, 753, 310, 1513, 10347, 432, 3051, 32, 275, 319, 477, 601, 312, 1682, 432, 3088, 687, 310, 111, 3088, 1204, 19915, 111, 33032, 432, 3088, 687, 458, 4009, 275, 319, 477, 5117, 3182, 17991, 984, 415, 3088, 687, 310, 2511, 225, 34, 4009, 275, 569, 284, 562, 1682, 46]}
{"line_number": 1166, "line_type": "original", "code": "        return new Complex(realPart, imaginaryPart);", "entropy": 1.28125, "is_bug_line": false, "sus_score": 0.18569533817705186, "per_token_entropy": [5.48046875, 0.87890625, 2.017578125, 0.7861328125, 0.865234375, 1.8193359375, 3.0703125, 0.291015625, 0.02557373046875, 0.0010251998901367188, 0.00635528564453125, 0.132568359375], "tokens": [351, 442, 537, 19915, 26, 4543, 2639, 30, 17463, 3172, 2639, 293]}
{"line_number": 1166, "line_type": "generated", "code": "\n    public ComplexField newField() {\n        return ComplexField.getInstance();\n    }\n\n    /**\n     * Get the real part of a complex number.\n     *\n     * @return the real part.\n     */\n    public double getRealPart() {\n        return", "entropy": 0.294677734375, "is_bug_line": false, "sus_score": 0.18569533817705186, "per_token_entropy": [0.89697265625, 0.317626953125, 1.1455078125, 1.58203125, 1.4150390625, 1.0009765625, 0.405517578125, 0.01189422607421875, 0.191162109375, 0.050628662109375, 0.20068359375, 0.01395416259765625, 0.0011339187622070312, 0.0006475448608398438, 0.002979278564453125, 0.068115234375, 0.0034236907958984375, 0.37890625, 0.0634765625, 0.794921875, 3.540515899658203e-05, 1.236328125, 0.1043701171875, 1.7314453125, 0.0567626953125, 0.65478515625, 1.009765625, 0.2318115234375, 0.000576019287109375, 0.01013946533203125, 0.00847625732421875, 0.00092315673828125, 0.184814453125, 2.1457672119140625e-05, 0.00888824462890625, 0.006908416748046875, 0.2076416015625, 0.055419921875, 0.002285003662109375, 0.17626953125, 0.0038967132568359375, 0.222412109375, 0.033203125, 0.0280609130859375, 0.0426025390625, 0.0003218650817871094, 0.0002536773681640625, 0.70947265625, 0.00876617431640625, 0.00597381591796875, 0.035888671875, 0.00743865966796875], "tokens": [284, 562, 19915, 1176, 537, 1176, 346, 301, 291, 442, 19915, 1176, 32, 7426, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 4011, 1742, 432, 312, 8640, 1451, 32, 275, 319, 275, 319, 477, 601, 322, 4011, 1742, 32, 275, 569, 284, 562, 2064, 622, 6877, 2639, 346, 301, 291, 442]}
{"line_number": 385, "line_type": "original", "code": "        return real;", "entropy": 4.91015625, "is_bug_line": false, "sus_score": 0.1649572197684645, "per_token_entropy": [4.71875, 2.486328125, 10.109375, 2.328125], "tokens": [351, 442, 4011, 45]}
{"line_number": 385, "line_type": "generated", "code": "\n     */\n    public Complex multiply(Complex factor) {\n        MathUtils.checkNotNull(factor);\n        if (isNaN || factor.isNaN) {\n            return NaN;\n        }\n        if (isInfinite || factor.isInfinite) {\n            return getZero().", "entropy": 0.169677734375, "is_bug_line": false, "sus_score": 0.1649572197684645, "per_token_entropy": [1.1337890625, 0.17724609375, 0.034637451171875, 0.11285400390625, 0.0293731689453125, 0.021759033203125, 0.001544952392578125, 0.1988525390625, 0.0015649795532226562, 0.2271728515625, 0.1622314453125, 0.317626953125, 0.239501953125, 0.0263214111328125, 6.651878356933594e-05, 0.0027370452880859375, 8.130073547363281e-05, 0.00371551513671875, 0.0078277587890625, 0.385986328125, 0.3212890625, 0.066162109375, 0.13134765625, 0.012176513671875, 0.0139312744140625, 0.0001417398452758789, 4.1604042053222656e-05, 0.246337890625, 0.0028171539306640625, 0.0194549560546875, 0.0293426513671875, 0.030609130859375, 0.0008983612060546875, 0.02398681640625, 0.0010557174682617188, 0.417724609375, 0.54541015625, 0.06890869140625, 0.11102294921875, 7.915496826171875e-05, 0.2154541015625, 0.004718780517578125, 0.000774383544921875, 0.0003190040588378906, 8.344650268554688e-07, 0.035736083984375, 0.0007548332214355469, 0.011566162109375, 0.039703369140625, 2.267578125, 0.65625, 0.463134765625], "tokens": [275, 569, 284, 562, 19915, 22213, 26, 12267, 10365, 27, 301, 291, 4175, 2755, 32, 42698, 26, 9410, 293, 291, 415, 308, 26821, 1276, 10365, 32, 26821, 27, 301, 324, 442, 21644, 45, 291, 320, 291, 415, 308, 28823, 11949, 1276, 10365, 32, 28823, 11949, 27, 301, 324, 442, 622, 8039, 922]}
{"line_number": 376, "line_type": "original", "code": "        return imaginary;", "entropy": 5.9375, "is_bug_line": false, "sus_score": 0.1643989873053573, "per_token_entropy": [3.568359375, 12.53125, 9.3046875, 0.006748199462890625, 4.28125], "tokens": [351, 442, 17463, 3172, 45]}
{"line_number": 376, "line_type": "generated", "code": "\n     * has one or more infinite parts (same test as for\n     * {@link #isInfinite}).\n     *\n     * @param  factor value to be multiplied by {@code this Complex}.\n     * @return {@code this * factor}.\n     *", "entropy": 0.263916015625, "is_bug_line": false, "sus_score": 0.1643989873053573, "per_token_entropy": [0.95703125, 0.0257720947265625, 0.15185546875, 0.64013671875, 7.164478302001953e-05, 0.0277099609375, 0.039031982421875, 0.0035686492919921875, 1.1572265625, 0.70263671875, 1.044921875, 1.3095703125, 0.0931396484375, 0.5712890625, 6.854534149169922e-05, 0.02667236328125, 0.10797119140625, 0.0285186767578125, 0.07672119140625, 0.00026488304138183594, 1.9755859375, 0.0218658447265625, 0.0013532638549804688, 1.0390625, 0.0003390312194824219, 0.116943359375, 0.0015659332275390625, 0.355712890625, 0.0036182403564453125, 0.1280517578125, 0.0062408447265625, 0.488037109375, 0.00301361083984375, 2.5391578674316406e-05, 0.01013946533203125, 0.3837890625, 2.6226043701171875e-06, 8.130073547363281e-05, 0.912109375, 0.187255859375, 0.0062408447265625, 0.0004177093505859375, 0.0007491111755371094, 0.0035343170166015625, 0.0296783447265625, 0.0008683204650878906, 0.0130767822265625, 0.003936767578125, 0.0014200210571289062, 0.25048828125, 0.01136016845703125, 0.80908203125], "tokens": [275, 319, 1401, 1591, 556, 1829, 20280, 8710, 308, 8786, 894, 619, 436, 275, 319, 3088, 1204, 588, 28823, 11949, 12665, 275, 319, 275, 319, 477, 753, 225, 10365, 786, 372, 526, 12044, 3032, 810, 3088, 687, 458, 19915, 4009, 275, 319, 477, 601, 3088, 687, 458, 319, 10365, 4009, 275, 319]}
{"line_number": 98, "line_type": "original", "code": "    public Complex(double real, double imaginary) {", "entropy": 2.3671875, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [6.140625, 14.28125, 1.0546875, 5.9921875, 0.318115234375, 0.10009765625, 0.229248046875, 0.0298614501953125, 0.0011730194091796875, 0.0031566619873046875, 0.056610107421875, 0.2069091796875], "tokens": [264, 562, 19915, 26, 2627, 4011, 30, 2064, 17463, 3172, 27, 301]}
{"line_number": 98, "line_type": "generated", "code": "\n     * any of the real or imaginary parts, returns {@code NaN}\n     * unless the other part is also {@code NaN}.\n     * In that case, {@code NaN} is returned.\n     * <br/>\n     * <b>Note", "entropy": 0.25341796875, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [0.1473388671875, 0.0005192756652832031, 0.32373046875, 0.163818359375, 0.038116455078125, 0.0188446044921875, 0.02703857421875, 0.0004565715789794922, -0.0, 0.0701904296875, 0.03082275390625, 0.6943359375, 0.34814453125, 0.02630615234375, 0.00415802001953125, 0.271240234375, 0.54296875, 9.810924530029297e-05, 0.888671875, 0.0258331298828125, 0.94873046875, 0.50927734375, 5.900859832763672e-05, 0.8369140625, 0.0022907257080078125, 3.7789344787597656e-05, 0.00010633468627929688, 0.171142578125, 0.0056610107421875, 0.00039958953857421875, 0.982421875, 1.7392578125, 0.0014209747314453125, 0.003520965576171875, 0.59912109375, 0.1746826171875, 0.1802978515625, 0.93798828125, 0.0082550048828125, 0.00040149688720703125, 0.037200927734375, 0.0182037353515625, 0.0010900497436523438, 0.541015625, 0.3603515625, 0.0032291412353515625, 0.00493621826171875, 6.020069122314453e-05, 0.88916015625, 0.56396484375, 0.000339508056640625, 0.0285797119140625], "tokens": [275, 319, 1346, 432, 322, 4011, 556, 17463, 3172, 8710, 30, 3217, 3088, 687, 21644, 111, 275, 319, 7351, 322, 1604, 1742, 438, 2329, 3088, 687, 21644, 4009, 275, 319, 701, 688, 1135, 30, 3088, 687, 21644, 111, 438, 4717, 32, 275, 319, 333, 839, 2039, 275, 319, 333, 84, 48, 5217]}
{"line_number": 99, "line_type": "original", "code": "        this.real = real;", "entropy": 4.6015625, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [3.888671875, 16.59375, 1.587890625, 3.44140625, 2.7109375, 2.013671875, 1.9912109375], "tokens": [351, 458, 32, 4543, 280, 4011, 45]}
{"line_number": 99, "line_type": "generated", "code": "\n     * values are returned in the following way.\n     * <ul>\n     * <li>If either {@code this} or {@code addend} has an infinite value\n     * in the real or imaginary part, the infinite value is returned,", "entropy": 0.199462890625, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [0.9560546875, 0.00780487060546875, 0.947265625, 0.03692626953125, 0.55908203125, 0.00408172607421875, 0.1312255859375, 1.072265625, 0.82763671875, 0.425048828125, 0.1199951171875, 0.00033473968505859375, 0.049468994140625, 0.004314422607421875, 0.058380126953125, 0.0024356842041015625, 6.103515625e-05, 0.321044921875, 4.5299530029296875e-05, 0.0016613006591796875, 0.04022216796875, 0.307373046875, 0.244140625, 0.0003921985626220703, 0.0036106109619140625, 0.01226043701171875, 0.00572967529296875, 3.731250762939453e-05, 0.0001169443130493164, 0.0016689300537109375, 4.7206878662109375e-05, 0.000583648681640625, 0.1331787109375, 0.42724609375, 0.047698974609375, 0.0005717277526855469, 0.42626953125, 5.0187110900878906e-05, 0.1807861328125, 0.26220703125, 0.067626953125, 0.131103515625, 0.00543975830078125, -0.0, 0.453369140625, 0.004146575927734375, 0.57177734375, 0.10882568359375, 0.06439208984375, 0.1937255859375, 0.01218414306640625, 1.146484375], "tokens": [275, 319, 2078, 884, 4717, 328, 322, 2412, 3352, 32, 275, 319, 333, 338, 48, 275, 319, 333, 374, 48, 2797, 3154, 3088, 687, 458, 111, 556, 3088, 687, 1015, 416, 111, 1401, 600, 20280, 786, 275, 319, 328, 322, 4011, 556, 17463, 3172, 1742, 30, 322, 20280, 786, 438, 4717, 30]}
{"line_number": 100, "line_type": "original", "code": "        this.imaginary = imaginary;", "entropy": 3.271484375, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [3.623046875, 13.1875, 0.57958984375, 5.85546875, 8.046627044677734e-05, 4.28515625, 1.279296875, 0.0029506683349609375, 0.61865234375], "tokens": [351, 458, 32, 17792, 3172, 280, 17463, 3172, 45]}
{"line_number": 100, "line_type": "generated", "code": "\n     * according to the rules for {@link #add(Complex)}.\n     *\n     * @param addend Value to be added to this {@code Complex}.\n     * @return {@code this + addend}.\n     */\n    public Complex add(Complex add", "entropy": 0.08367919921875, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [0.451904296875, 0.006656646728515625, 0.00396728515625, 5.5789947509765625e-05, 0.007114410400390625, 0.0034847259521484375, 0.006481170654296875, 0.41455078125, 0.1002197265625, 0.475830078125, 0.04656982421875, 0.033966064453125, 0.20947265625, 0.431884765625, 0.01898193359375, 0.0007739067077636719, 0.2445068359375, 7.069110870361328e-05, 0.00992584228515625, 0.0013303756713867188, 0.78759765625, 1.4662742614746094e-05, 0.34912109375, 4.0531158447265625e-06, 0.0002601146697998047, 0.0016775131225585938, 0.001667022705078125, 0.0280609130859375, 0.0206756591796875, 0.00021386146545410156, 0.0008907318115234375, 0.130859375, 0.0029621124267578125, 1.3947486877441406e-05, 0.00130462646484375, 0.00013887882232666016, 0.0013017654418945312, 5.245208740234375e-05, 0.0011196136474609375, 0.0191802978515625, 0.00042366981506347656, 1.33514404296875e-05, 0.1297607421875, 0.03167724609375, 0.2161865234375, 0.00846099853515625, 0.045013427734375, 0.004131317138671875, 0.00104522705078125, 0.0002677440643310547, 0.1009521484375, 0.0005459785461425781], "tokens": [275, 319, 9267, 372, 322, 7019, 436, 3088, 1204, 588, 669, 26, 12267, 31842, 275, 319, 275, 319, 477, 753, 1015, 416, 3846, 372, 526, 3640, 372, 458, 3088, 687, 19915, 4009, 275, 319, 477, 601, 3088, 687, 458, 474, 1015, 416, 4009, 275, 569, 284, 562, 19915, 1015, 26, 12267, 1015]}
{"line_number": 102, "line_type": "original", "code": "        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);", "entropy": 1.072265625, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [5.15234375, 6.41015625, 0.52294921875, 0.03570556640625, 5.38671875, 0.00014722347259521484, 0.0014400482177734375, 0.00034618377685546875, 0.238037109375, 0.0266265869140625, 0.01425933837890625, 0.057220458984375, 8.559226989746094e-05, 0.0011358261108398438, 0.00023746490478515625, 0.0223236083984375, 0.00036644935607910156, 1.419921875], "tokens": [351, 438, 11126, 280, 6934, 32, 26821, 26, 4543, 27, 1276, 6934, 32, 26821, 26, 17792, 3172, 293]}
{"line_number": 102, "line_type": "generated", "code": "\n     * @param  addend Value to be added to this {@code Complex}.\n     * @return {@code this + addend}.\n     */\n    public Complex add(Complex addend) {\n        if (isNaN || addend.isNaN) {\n           ", "entropy": 0.0635986328125, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [0.17822265625, 0.0284271240234375, 0.0753173828125, 0.0046539306640625, 0.5048828125, 0.006076812744140625, 4.673004150390625e-05, 0.1529541015625, 3.790855407714844e-05, 0.0001863241195678711, 0.0016927719116210938, 0.0016994476318359375, 0.047210693359375, 0.01342010498046875, 3.5881996154785156e-05, 0.0011587142944335938, 0.057952880859375, 0.0033435821533203125, 9.047985076904297e-05, 0.0001367330551147461, 4.112720489501953e-05, 0.0072174072265625, 4.315376281738281e-05, 0.00423431396484375, 0.00708770751953125, 0.00033664703369140625, 1.0013580322265625e-05, 0.26708984375, 0.035369873046875, 0.10345458984375, 0.0116119384765625, 0.03228759765625, 0.0100250244140625, 0.00380706787109375, 0.000423431396484375, 0.1485595703125, 0.0013275146484375, 8.344650268554688e-07, 0.0008478164672851562, 0.01214599609375, 0.12298583984375, 0.53564453125, 0.00695037841796875, 0.0853271484375, 0.0132904052734375, 0.0242767333984375, 2.384185791015625e-07, 0.0012569427490234375, 0.00010788440704345703, 0.78466796875, 0.00159454345703125, 0.00634002685546875], "tokens": [275, 319, 477, 753, 225, 1015, 416, 3846, 372, 526, 3640, 372, 458, 3088, 687, 19915, 4009, 275, 319, 477, 601, 3088, 687, 458, 474, 1015, 416, 4009, 275, 569, 284, 562, 19915, 1015, 26, 12267, 1015, 416, 27, 301, 291, 415, 308, 26821, 1276, 1015, 416, 32, 26821, 27, 301, 324]}
{"line_number": 103, "line_type": "original", "code": "        isInfinite = !isNaN &&", "entropy": 3.505859375, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [5.1875, 5.9765625, 1.7724609375, 2.23828125, 8.1640625, 1.1484375, 0.061553955078125], "tokens": [351, 438, 39524, 280, 653, 26821, 962]}
{"line_number": 103, "line_type": "generated", "code": "\n     * @return {@code this + addend}\n     */\n    public Complex add(Complex addend) {\n        double sumReal = real + addend.getReal();\n        double sumImaginary = imaginary + addend.getImaginary();", "entropy": 0.12445068359375, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [0.084228515625, 0.086669921875, 0.005237579345703125, 0.0002092123031616211, 0.007152557373046875, 6.341934204101562e-05, 0.0051116943359375, 0.006412506103515625, 0.0004887580871582031, 9.298324584960938e-06, 0.1690673828125, 0.3466796875, 0.12164306640625, 0.01934814453125, 0.02117919921875, 0.0081787109375, 0.0030670166015625, 0.000385284423828125, 0.164306640625, 0.0010623931884765625, 7.152557373046875e-07, 0.0009698867797851562, 0.0139923095703125, 0.127685546875, 2.021484375, 1.7294921875, 0.08026123046875, 0.062164306640625, 0.0999755859375, 0.0001201629638671875, 0.0005841255187988281, 5.125999450683594e-06, 7.534027099609375e-05, 0.353271484375, 0.00047898292541503906, 0.85302734375, 0.02545166015625, 0.021209716796875, 0.00023555755615234375, 0.0016326904296875, 0.025909423828125, 0.00040268898010253906, 5.6743621826171875e-05, 2.9802322387695312e-06, 0.0001665353775024414, 0.00031256675720214844, 2.002716064453125e-05, 7.62939453125e-06, 0.0011749267578125, 0.00012922286987304688, 5.7220458984375e-06, 0.0005049705505371094], "tokens": [275, 319, 477, 601, 3088, 687, 458, 474, 1015, 416, 111, 275, 569, 284, 562, 19915, 1015, 26, 12267, 1015, 416, 27, 301, 291, 2064, 3632, 6877, 280, 4011, 474, 1015, 416, 32, 371, 6877, 473, 291, 2064, 3632, 42364, 3172, 280, 17463, 3172, 474, 1015, 416, 32, 371, 42364, 3172, 473]}
{"line_number": 105, "line_type": "original", "code": "    }", "entropy": 2.2109375, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [3.60546875, 0.81591796875], "tokens": [264, 320]}
{"line_number": 105, "line_type": "generated", "code": "\n\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this + addend)}.\n     * Uses the definitional formula\n     * <pre>\n     *  <code>\n     *   (a + bi) + (c", "entropy": 0.0968017578125, "is_bug_line": false, "sus_score": 0.13216372009101796, "per_token_entropy": [1.2236328125, 0.018218994140625, 0.038421630859375, 6.461143493652344e-05, 0.1258544921875, 0.050750732421875, 0.0235595703125, 0.0006580352783203125, 0.0003082752227783203, 0.002231597900390625, 1.6808509826660156e-05, 6.67572021484375e-05, 1.7404556274414062e-05, 0.0655517578125, 0.00020682811737060547, 0.11859130859375, 1.4424324035644531e-05, 0.0003616809844970703, 9.226799011230469e-05, 1.470703125, 0.054229736328125, 0.00582122802734375, 0.57666015625, 0.049407958984375, 0.00019109249114990234, 0.5947265625, 0.00010645389556884766, 0.0249176025390625, 0.00014281272888183594, 0.00031948089599609375, 0.007335662841796875, 7.295608520507812e-05, 0.01261138916015625, 0.00908660888671875, 0.0009937286376953125, 0.0006074905395507812, 9.28640365600586e-05, 0.0214996337890625, 0.0037288665771484375, 0.00043272972106933594, 0.0005898475646972656, 0.001499176025390625, 0.00017392635345458984, 0.003887176513671875, 0.0033359527587890625, 5.459785461425781e-05, 0.07147216796875, 0.0005483627319335938, 3.0279159545898438e-05, 0.23583984375, 0.213623046875, 0.0003497600555419922], "tokens": [446, 1022, 275, 319, 3759, 312, 3088, 687, 19915, 111, 13696, 786, 438, 275, 319, 3088, 687, 308, 578, 474, 1015, 416, 31842, 275, 319, 26079, 322, 5644, 279, 17568, 275, 319, 333, 1001, 48, 275, 319, 225, 333, 687, 48, 275, 319, 261, 308, 83, 474, 10789, 27, 474, 308, 85]}
