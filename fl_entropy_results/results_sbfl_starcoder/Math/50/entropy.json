{"line_number": 188, "line_type": "original", "code": "                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));", "entropy": 1.0166015625, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [9.1953125, 5.90234375, 0.78662109375, 0.0479736328125, 4.3984375, 0.0721435546875, 0.873046875, 1.1865234375, 0.0139312744140625, 0.032135009765625, 0.031036376953125, 0.27587890625, 0.0204620361328125, 0.0107269287109375, 0.08489990234375, 3.4296875, 3.853515625, 7.939338684082031e-05, 0.0012664794921875, 1.64453125, 0.0025787353515625, 1.6376953125, 7.271766662597656e-06, 0.0762939453125, 0.01433563232421875, 2.5391578674316406e-05, 5.698204040527344e-05, 0.0167388916015625, 0.0020084381103515625, 0.00849151611328125, 0.2060546875, 0.0204925537109375, 0.69287109375, 0.0272064208984375], "tokens": [6797, 816, 34, 280, 225, 34, 32, 39, 319, 308, 106, 34, 474, 816, 35, 429, 15938, 5717, 32, 1449, 26, 2051, 362, 319, 15938, 5717, 32, 3596, 26, 106, 35, 471, 35012, 876]}
{"line_number": 188, "line_type": "generated", "code": "\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BE", "entropy": 0.1036376953125, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.55615234375, 1.6708984375, 0.0517578125, 0.142578125, 0.0025177001953125, 0.5703125, 0.1947021484375, 0.7001953125, 4.470348358154297e-05, 9.906291961669922e-05, 0.0036754608154296875, 0.039886474609375, 0.10345458984375, 0.249267578125, 0.047149658203125, 0.016845703125, 0.000911712646484375, 0.04107666015625, 0.1668701171875, 0.05517578125, 0.1741943359375, 0.002231597900390625, 0.007144927978515625, 0.00037980079650878906, 0.044708251953125, 0.068359375, 0.0003619194030761719, 0.0253753662109375, 0.001583099365234375, 0.0067138671875, 2.7418136596679688e-06, 1.430511474609375e-06, 6.091594696044922e-05, 0.0028209686279296875, 0.0012865066528320312, 0.015716552734375, 0.00012767314910888672, 0.0001723766326904297, 0.00036072731018066406, 0.002239227294921875, 0.00028705596923828125, 0.0002818107604980469, 0.0005669593811035156, 6.473064422607422e-05, 0.0007295608520507812, 2.5272369384765625e-05, 0.0062408447265625, 0.0008416175842285156, 0.0001302957534790039, 0.08172607421875, 0.2861328125, 0.047454833984375], "tokens": [528, 442, 816, 35, 45, 400, 1135, 17789, 81, 25590, 44, 528, 415, 308, 47910, 27, 301, 715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 1135, 20169, 81, 25590, 44, 528, 415, 1429, 47910, 27, 301, 715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 1135, 6744]}
{"line_number": 189, "line_type": "original", "code": "                        f0 = computeObjectiveValue(x0);", "entropy": 1.6787109375, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [8.4296875, 7.95703125, 0.422119140625, 0.380615234375, 1.1611328125, 0.0017213821411132812, 8.165836334228516e-05, 0.00406646728515625, 0.043243408203125, 0.06683349609375, 0.00922393798828125], "tokens": [6797, 296, 34, 280, 7596, 33312, 882, 26, 106, 34, 293]}
{"line_number": 189, "line_type": "generated", "code": "\n                    break;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_", "entropy": 0.071044921875, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.380859375, 1.0732421875, 0.00043845176696777344, 0.007350921630859375, 0.003841400146484375, 0.022003173828125, 4.0531158447265625e-06, 1.0728836059570312e-05, 0.0004940032958984375, 0.186767578125, 0.039398193359375, 0.2301025390625, 0.0249481201171875, 0.01480865478515625, 0.0021114349365234375, 0.41748046875, 0.65673828125, 0.04620361328125, 0.225341796875, 0.002605438232421875, 0.0221710205078125, 0.00026416778564453125, 0.232177734375, 0.04583740234375, 0.00034689903259277344, 0.0009694099426269531, 0.00019085407257080078, 0.00031065940856933594, 1.7881393432617188e-06, 2.6226043701171875e-06, 8.14199447631836e-05, 0.006397247314453125, 0.0013284683227539062, 0.01519775390625, 0.00016033649444580078, 0.0002263784408569336, 0.0013303756713867188, 0.0031642913818359375, 0.0006475448608398438, 0.0002942085266113281, 0.0004239082336425781, 6.42538070678711e-05, 0.0007319450378417969, 3.0875205993652344e-05, 0.00531768798828125, 0.0008502006530761719, 0.00011456012725830078, 0.002162933349609375, 0.01104736328125, 0.005828857421875, 5.960464477539062e-07, 2.7418136596679688e-06], "tokens": [528, 1626, 45, 400, 1135, 17789, 81, 25590, 44, 528, 415, 308, 47910, 27, 301, 715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 1135, 20169, 81, 25590, 44, 528, 415, 1429, 47910, 27, 301, 715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 1135, 6744, 5875, 81]}
{"line_number": 239, "line_type": "original", "code": "                    return x1;", "entropy": 2.919921875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [10.1796875, 2.66015625, 0.89111328125, 0.84716796875, 0.0203399658203125], "tokens": [4696, 442, 816, 35, 45]}
{"line_number": 239, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [], "tokens": []}
{"line_number": 187, "line_type": "original", "code": "                    if (x == x1) {", "entropy": 2.193359375, "is_bug_line": true, "sus_score": 0.3779644730092272, "per_token_entropy": [7.56640625, 2.478515625, 0.1927490234375, 3.9296875, 4.42578125, 0.59912109375, 0.375244140625, 0.1639404296875, 0.009674072265625], "tokens": [4696, 415, 308, 106, 610, 816, 35, 27, 301]}
{"line_number": 187, "line_type": "generated", "code": "\n                return x1;\n            }\n        }\n    }", "entropy": 0.1268310546875, "is_bug_line": true, "sus_score": 0.3779644730092272, "per_token_entropy": [0.186279296875, 0.546875, 0.052459716796875, 0.06500244140625, 0.003177642822265625, 0.0438232421875, 0.0008983612060546875, 0.275146484375, 0.0007829666137695312, 0.21484375, 0.006378173828125], "tokens": [400, 442, 816, 35, 45, 324, 320, 291, 320, 284, 320]}
{"line_number": 124, "line_type": "original", "code": "        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);", "entropy": 1.1806640625, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [4.4453125, 7.72265625, 4.5, 1.34375, 0.9033203125, 0.0047454833984375, 0.013641357421875, 0.027618408203125, 0.008636474609375, 0.94482421875, 0.00604248046875, 0.03253173828125, 0.033935546875, 0.9208984375, 0.061981201171875, 2.06640625, 3.568359375, 0.0014743804931640625, 0.002048492431640625, 0.53076171875, 0.0016355514526367188, 0.00021219253540039062, 0.0181732177734375], "tokens": [351, 442, 10932, 26, 1449, 14066, 30, 296, 30, 1847, 30, 1769, 30, 1477, 882, 30, 38886, 13628, 32, 15205, 81, 25590, 293]}
{"line_number": 124, "line_type": "generated", "code": "\n                // Reset the inverted flag.\n                inverted = false;\n            }\n            else {\n                // The value of x1 has not switched to the other bound.\n                if (fx > -ftol) {\n                    // The new point is an over-approx", "entropy": 0.43212890625, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [1.0380859375, 0.7373046875, 1.73828125, 0.5263671875, 1.0029296875, 0.1688232421875, 0.307373046875, 0.06329345703125, 0.013580322265625, 0.00047469139099121094, 0.004070281982421875, 0.0001671314239501953, 0.09722900390625, 0.0008563995361328125, 1.8828125, 0.697265625, 0.32373046875, 0.0219573974609375, 0.0897216796875, 0.333251953125, 1.1494140625, 0.012939453125, 0.10162353515625, 0.83544921875, 0.3544921875, 0.113525390625, 0.072021484375, 0.269775390625, 0.0103607177734375, 0.00252532958984375, 0.0022125244140625, 0.92041015625, 0.8720703125, 0.414306640625, 0.24951171875, 1.6328125, 1.0244140625, 0.82958984375, 0.06494140625, -0.0, 0.4853515625, 0.001605987548828125, 0.07183837890625, 0.14794921875, 0.6845703125, 0.73388671875, 1.4619140625, 0.122314453125, 0.517578125, 0.25341796875, 0.0014562606811523438, 0.0036907196044921875], "tokens": [400, 434, 10059, 322, 37592, 4655, 32, 400, 37592, 280, 901, 45, 324, 320, 324, 813, 301, 400, 434, 886, 786, 432, 816, 35, 1401, 646, 35464, 372, 322, 1604, 5085, 32, 400, 415, 308, 5185, 848, 429, 708, 362, 27, 301, 528, 434, 886, 537, 2260, 438, 600, 2288, 31, 20449]}
{"line_number": 237, "line_type": "original", "code": "                switch (allowed) {", "entropy": 2.3203125, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [8.9609375, 4.49609375, 0.0095672607421875, 0.422607421875, 0.00199127197265625, 0.032318115234375], "tokens": [2071, 3578, 308, 11327, 27, 301]}
{"line_number": 237, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [], "tokens": []}
{"line_number": 171, "line_type": "original", "code": "            if (f1 * fx < 0) {", "entropy": 1.4140625, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [4.78125, 4.5, 0.1370849609375, 0.7333984375, 0.280029296875, 2.55078125, 2.419921875, 1.353515625, 0.0287933349609375, 0.0003991127014160156, 0.1240234375, 0.052520751953125], "tokens": [1468, 415, 308, 88, 35, 319, 20670, 333, 225, 34, 27, 301]}
{"line_number": 171, "line_type": "generated", "code": "\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n           ", "entropy": 0.053680419921875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.198486328125, 0.1798095703125, 0.2783203125, 0.05010986328125, 0.0017995834350585938, 0.0212554931640625, 0.0138702392578125, 0.00029015541076660156, 4.3392181396484375e-05, 2.86102294921875e-06, 2.1576881408691406e-05, 2.6226043701171875e-06, 0.0007624626159667969, 0.004962921142578125, 0.0016574859619140625, 0.0009102821350097656, 0.00136566162109375, 0.0012445449829101562, 0.439453125, 0.0003147125244140625, 2.384185791015625e-05, 0.00350189208984375, 0.0018396377563476562, 0.019805908203125, 0.0016613006591796875, 0.0004138946533203125, 0.000751495361328125, 0.00501251220703125, 0.68798828125, 0.0031299591064453125, 0.0924072265625, 0.0015735626220703125, 0.001007080078125, 0.08099365234375, 0.33935546875, 0.0015840530395507812, 0.0150146484375, 0.05828857421875, 0.03717041015625, 0.0032787322998046875, 0.002178192138671875, 0.026092529296875, 0.00644683837890625, 0.005161285400390625, 0.006591796875, 0.00443267822265625, 0.00012385845184326172, 0.001972198486328125, 0.0017805099487304688, 0.031097412109375, 0.0008988380432128906, 0.15478515625], "tokens": [528, 320, 528, 1626, 45, 400, 1135, 399, 3183, 2478, 81, 25590, 44, 528, 415, 308, 88, 35, 2377, 225, 34, 27, 301, 715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 1244, 44, 528, 434, 9043, 7152, 7292, 32, 528, 1422, 537, 4175, 4292, 924, 473, 400, 320, 324]}
{"line_number": 174, "line_type": "original", "code": "                x0 = x1;", "entropy": 1.8271484375, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [5.203125, 6.5234375, 0.7216796875, 0.0205230712890625, 0.1458740234375, 0.1356201171875, 0.042022705078125], "tokens": [2071, 816, 34, 280, 816, 35, 45]}
{"line_number": 174, "line_type": "generated", "code": "\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the interval is too small, given the absolute", "entropy": 0.1885986328125, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.12384033203125, 0.0985107421875, 0.0025272369384765625, 0.00652313232421875, 0.0019283294677734375, 0.404296875, 0.0003693103790283203, 3.981590270996094e-05, 0.004680633544921875, 0.00626373291015625, 0.0257415771484375, 0.005451202392578125, 0.0012693405151367188, 0.001735687255859375, 0.0001939535140991211, 0.0031890869140625, 0.00023305416107177734, 0.032135009765625, 0.001117706298828125, 0.0005879402160644531, 0.01165771484375, 0.5380859375, 0.0012044906616210938, 0.0118255615234375, 0.04290771484375, 0.020660400390625, 0.001979827880859375, 0.0018186569213867188, 0.0206146240234375, 0.0031890869140625, 0.0039825439453125, 0.0015926361083984375, 0.00160980224609375, 0.00013446807861328125, 0.0010900497436523438, 0.0016632080078125, 0.00560760498046875, 0.0005106925964355469, 0.09173583984375, 0.000560760498046875, 0.57177734375, 0.048583984375, 0.1986083984375, 0.319580078125, 2.388671875, 0.8603515625, 1.4580078125, 0.015899658203125, 0.26904296875, 1.025390625, 0.021881103515625, 1.146484375], "tokens": [528, 415, 308, 88, 35, 2377, 225, 34, 27, 301, 715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 1244, 44, 528, 434, 9043, 7152, 7292, 32, 528, 1422, 537, 4175, 4292, 924, 473, 400, 320, 324, 320, 1064, 434, 1670, 322, 7898, 438, 5133, 5532, 30, 2702, 322, 7976]}
{"line_number": 175, "line_type": "original", "code": "                f0 = f1;", "entropy": 2.373046875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [6.87109375, 7.6015625, 0.89501953125, 0.1778564453125, 0.9404296875, 0.006404876708984375, 0.11676025390625], "tokens": [2071, 296, 34, 280, 296, 35, 45]}
{"line_number": 175, "line_type": "generated", "code": "\n                        return x1;\n                    }\n                    break;\n                }\n            }\n\n            // If the interval is too small, we can't get closer to the root\n            // than we already are.\n            if (FastMath.abs(x1 - x0)", "entropy": 0.247802734375, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.2496337890625, 0.2210693359375, 0.031463623046875, 0.01534271240234375, 0.00991058349609375, 0.06011962890625, 0.0005555152893066406, 0.050384521484375, 0.0021915435791015625, 0.00037169456481933594, 0.01105499267578125, 1.01953125, 0.1356201171875, 0.0010623931884765625, 0.49658203125, 0.05426025390625, 0.16845703125, 0.29736328125, 2.40234375, 0.9599609375, 1.2841796875, 0.0194854736328125, 0.24365234375, 1.583984375, 0.218505859375, 0.06500244140625, 0.122802734375, 1.7998046875, 0.00518798828125, 0.041900634765625, 0.046875, 0.1427001953125, 0.0003170967102050781, 0.06646728515625, 0.004276275634765625, 0.0229949951171875, 0.0006628036499023438, 0.034027099609375, 0.1380615234375, 0.237060546875, 0.158447265625, 0.319091796875, 4.780292510986328e-05, 0.00010383129119873047, 0.0645751953125, 0.007144927978515625, 0.003955841064453125, 0.064697265625, 0.00102996826171875, 0.0005402565002441406, 0.0005521774291992188, 8.547306060791016e-05], "tokens": [715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 320, 324, 320, 1064, 434, 1670, 322, 7898, 438, 5133, 5532, 30, 996, 883, 1330, 622, 30682, 372, 322, 3051, 324, 434, 2784, 996, 3425, 884, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 106, 35, 429, 816, 34, 27]}
{"line_number": 176, "line_type": "original", "code": "                inverted = !inverted;", "entropy": 2.935546875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [6.1328125, 9.15625, 0.0180816650390625, 2.287109375, 0.004146575927734375, 0.00939178466796875], "tokens": [2071, 37592, 280, 653, 47910, 45]}
{"line_number": 176, "line_type": "generated", "code": "\n                    }\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the absolute accuracy of the last approximation is small enough,\n            // then we can't get any closer to the root than", "entropy": 0.2449951171875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.1005859375, 0.007205963134765625, 0.1522216796875, 0.0025157928466796875, 0.0010557174682617188, 0.058807373046875, 0.63525390625, 0.0011768341064453125, 0.00838470458984375, 0.04412841796875, 0.018096923828125, 0.002429962158203125, 0.002079010009765625, 0.0193023681640625, 0.00263214111328125, 0.00478363037109375, 0.00963592529296875, 0.0014848709106445312, 0.00016224384307861328, 0.0026988983154296875, 0.0013341903686523438, 0.0226593017578125, 0.0025997161865234375, 0.237548828125, 0.0009675025939941406, 1.015625, 0.07452392578125, 0.26416015625, 0.31396484375, 2.8671875, 0.79296875, 0.859375, 0.033905029296875, 0.583984375, 0.006500244140625, 0.01462554931640625, 1.2880859375, 1.23046875, 0.099853515625, 0.048126220703125, 0.00022172927856445312, 0.4345703125, 0.1429443359375, 0.0556640625, 0.161865234375, 0.040130615234375, 0.7255859375, 0.07086181640625, 0.0285491943359375, 0.0103302001953125, 0.0257720947265625, 0.21484375], "tokens": [528, 320, 528, 1626, 45, 400, 1244, 44, 528, 434, 9043, 7152, 7292, 32, 528, 1422, 537, 4175, 4292, 924, 473, 400, 320, 324, 320, 1064, 434, 1670, 322, 7976, 14222, 432, 322, 2401, 39431, 438, 5532, 8448, 30, 324, 434, 1615, 996, 883, 1330, 622, 1346, 30682, 372, 322, 3051, 2784]}
{"line_number": 178, "line_type": "original", "code": "                switch (method) {", "entropy": 3.0546875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [4.83984375, 8.3984375, 0.0254669189453125, 5.02734375, 0.0149078369140625, 0.0192108154296875], "tokens": [2071, 3578, 308, 1959, 27, 301]}
{"line_number": 178, "line_type": "generated", "code": "\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }", "entropy": 0.1427001953125, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.342529296875, 1.1162109375, 0.0014429092407226562, 0.01503753662109375, 0.053497314453125, 0.021759033203125, 0.0025234222412109375, 0.0017137527465820312, 0.0161895751953125, 0.003162384033203125, 0.00550079345703125, 0.004024505615234375, 0.0024566650390625, 0.0004181861877441406, 0.0020999908447265625, 0.00267791748046875, 0.1356201171875, 0.0037174224853515625, 0.1182861328125, 0.002819061279296875, 1.1455078125, 0.004940032958984375, 0.409423828125, 0.013092041015625], "tokens": [400, 1244, 44, 528, 434, 9043, 7152, 7292, 32, 528, 1422, 537, 4175, 4292, 924, 473, 400, 320, 324, 320, 291, 320, 284, 320]}
{"line_number": 198, "line_type": "original", "code": "            x1 = x;", "entropy": 2.46875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [4.8828125, 7.46484375, 1.37109375, 0.0662841796875, 0.3212890625, 0.708984375], "tokens": [1468, 816, 35, 280, 816, 45]}
{"line_number": 198, "line_type": "generated", "code": "\n                default:\n                    throw new MathInternalError();\n                }\n            }\n\n            // Update the interval.\n            x1 = x;\n        }\n    }", "entropy": 0.267822265625, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.1336669921875, 0.276123046875, 0.0005383491516113281, 0.01043701171875, 0.50048828125, 0.001575469970703125, 0.000843048095703125, 0.00015926361083984375, 5.733966827392578e-05, 0.0007686614990234375, 0.01255035400390625, 0.00028228759765625, 0.022796630859375, 0.0011920928955078125, 0.424072265625, 0.0963134765625, 1.2880859375, 0.304443359375, 1.796875, 1.2998046875, 0.316650390625, 0.2578125, 0.0275421142578125, 0.0022220611572265625, 0.00930023193359375, 0.02197265625, 0.83837890625, 0.0046844482421875, 0.367919921875, 0.0125579833984375], "tokens": [400, 1244, 44, 528, 1422, 537, 4175, 4292, 924, 473, 400, 320, 324, 320, 1064, 434, 4000, 322, 7898, 32, 324, 816, 35, 280, 816, 45, 291, 320, 284, 320]}
{"line_number": 199, "line_type": "original", "code": "            f1 = fx;", "entropy": 2.576171875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [5.703125, 8.3515625, 0.73095703125, 0.2437744140625, 0.3994140625, 0.0303192138671875], "tokens": [1468, 296, 35, 280, 20670, 45]}
{"line_number": 199, "line_type": "generated", "code": "\n                }\n            }\n\n            // Update the function value and function value accuracy.\n            f1 = fx;\n        }\n    }", "entropy": 0.442138671875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [1.0390625, 0.006435394287109375, 0.021514892578125, 0.0014295578002929688, 0.451904296875, 0.10931396484375, 1.1552734375, 0.392822265625, 0.90087890625, 0.88671875, 1.3798828125, 1.7998046875, 0.61767578125, 0.68994140625, 0.479736328125, 0.046417236328125, 0.0604248046875, 0.00740814208984375, 0.014312744140625, 0.0027484893798828125, 0.0047760009765625, 0.611328125, 0.00597381591796875, 0.356201171875, 0.014373779296875], "tokens": [400, 320, 324, 320, 1064, 434, 4000, 322, 667, 786, 461, 667, 786, 14222, 32, 324, 296, 35, 280, 20670, 45, 291, 320, 284, 320]}
{"line_number": 204, "line_type": "original", "code": "            if (FastMath.abs(f1) <= ftol) {", "entropy": 1.14453125, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [7.05859375, 2.64453125, 0.11102294921875, 1.6103515625, 0.00031757354736328125, 0.0002701282501220703, 0.02764892578125, 0.0030918121337890625, 2.001953125, 0.1781005859375, 0.068359375, 0.88134765625, 3.591796875, 0.0634765625, 0.06280517578125, 0.0103302001953125], "tokens": [1468, 415, 308, 12200, 5717, 32, 3596, 26, 88, 35, 27, 2511, 296, 14598, 27, 301]}
{"line_number": 204, "line_type": "generated", "code": "\n    /**\n     * Compute the objective function value at the specified point.\n     *\n     * @param x Point at which the objective function must be evaluated.\n     * @return the value of the objective function.\n     */\n    protected abstract double computeObjectiveValue(", "entropy": 0.2734375, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [1.4267578125, 0.303955078125, 0.1702880859375, 0.00027251243591308594, 1.734375, 0.227294921875, 0.481689453125, 0.11773681640625, 0.0672607421875, 1.2900390625, 0.332275390625, 1.349609375, 0.413818359375, 0.049713134765625, 0.1705322265625, 0.00848388671875, 0.58203125, 0.0005259513854980469, 0.036895751953125, 0.0027332305908203125, 0.1429443359375, 0.2000732421875, 0.1339111328125, 0.00035858154296875, 0.88330078125, 0.3720703125, 0.0206146240234375, 0.363037109375, 0.0006833076477050781, 0.167236328125, 0.00775909423828125, 0.0028324127197265625, 0.0017156600952148438, 0.00421905517578125, 0.0023193359375, 0.35009765625, 0.69091796875, 0.00469207763671875, 0.0391845703125, 0.057830810546875, 0.002941131591796875, 0.71142578125, 0.018035888671875, 0.348876953125, 0.0195465087890625, 0.51806640625, 0.375732421875, 0.01163482666015625, 0.000698089599609375, 4.506111145019531e-05, 0.00010561943054199219, 0.00301361083984375], "tokens": [284, 1022, 275, 319, 12836, 322, 25110, 667, 786, 821, 322, 3191, 2260, 32, 275, 319, 275, 319, 477, 753, 816, 6431, 821, 1510, 322, 25110, 667, 2298, 526, 22423, 32, 275, 319, 477, 601, 322, 786, 432, 322, 25110, 667, 32, 275, 569, 284, 2522, 5547, 2064, 7596, 33312, 882, 26]}
{"line_number": 235, "line_type": "original", "code": "            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),", "entropy": 0.6357421875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [6.72265625, 2.5390625, 0.1251220703125, 2.466796875, 0.0001214742660522461, 0.00042700767517089844, 0.058197021484375, 0.0035552978515625, 0.708984375, 0.65625, 0.347412109375, 0.04364013671875, 0.1138916015625, 0.004680633544921875, 2.0546875, 2.076171875, 4.0531158447265625e-05, 0.0026607513427734375, 0.462646484375, 0.01332855224609375, 0.83740234375, 2.110004425048828e-05, 0.01751708984375, 0.0153961181640625, 2.396106719970703e-05, 0.0008025169372558594, 0.03021240234375, 0.0014963150024414062, 0.0083465576171875, 0.358642578125, 0.038330078125], "tokens": [1468, 415, 308, 12200, 5717, 32, 3596, 26, 106, 35, 429, 816, 34, 27, 333, 15938, 5717, 32, 1449, 26, 2051, 362, 319, 15938, 5717, 32, 3596, 26, 106, 35, 471]}
{"line_number": 235, "line_type": "generated", "code": "\n\n    /**\n     * {@link SecantSolver <em>Secant</em>} solver.\n     */\n    private static class SecantSolver extends UnivariateSolver {\n\n        /**\n         * Simple constructor.\n         *\n         * @param f Function.\n         */\n       ", "entropy": 0.4296875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [1.693359375, 0.11810302734375, 0.475830078125, 0.00023829936981201172, 3.046875, 0.1959228515625, 2.685546875, 0.00013828277587890625, 0.00896453857421875, 0.2222900390625, 0.0006313323974609375, 0.0002827644348144531, 0.029510498046875, 0.0005435943603515625, 0.0118255615234375, 0.00015032291412353516, 0.10931396484375, 2.041015625, 0.55908203125, 0.1168212890625, 0.677734375, 0.0191497802734375, 0.82421875, 0.455322265625, 0.1611328125, 0.0096588134765625, 1.1682510375976562e-05, 0.0001150369644165039, 0.29736328125, 1.4248046875, 0.001674652099609375, 0.330322265625, 0.60302734375, 0.2066650390625, 0.0447998046875, 0.7529296875, 0.00010502338409423828, 1.7646484375, 0.0062255859375, 0.00469970703125, 0.00437164306640625, 0.362548828125, 0.25048828125, 0.0035266876220703125, 0.01233673095703125, 0.001659393310546875, 1.3388671875, 0.578125, 0.37548828125, 0.0020198822021484375, 0.50439453125, 0.00974273681640625], "tokens": [446, 1022, 275, 319, 3088, 1204, 5534, 692, 17766, 333, 405, 48, 3091, 692, 377, 405, 14649, 17821, 32, 275, 569, 284, 945, 907, 443, 5534, 692, 17766, 2026, 1683, 27623, 17766, 301, 584, 1022, 276, 319, 7155, 4374, 32, 276, 319, 276, 319, 477, 753, 296, 4540, 32, 276, 569, 291]}
{"line_number": 252, "line_type": "original", "code": "        }", "entropy": 4.6015625, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [6.53125, 2.67578125], "tokens": [351, 320]}
{"line_number": 252, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [], "tokens": []}
{"line_number": 68, "line_type": "original", "code": "        super(absoluteAccuracy);", "entropy": 3.345703125, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [3.373046875, 5.7265625, 5.13671875, 4.44140625, 0.0015268325805664062, 1.40234375], "tokens": [351, 2599, 26, 11148, 26201, 293]}
{"line_number": 68, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Solve for a zero inside the given interval with the given accuracy.\n     *\n     * @param f the function to solve.\n     * @param min Lower bound for the interval.\n     * @param max Upper bound for the interval", "entropy": 0.191650390625, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [0.23388671875, 0.11761474609375, 0.3740234375, 0.052459716796875, 0.5537109375, 2.6702880859375e-05, 1.4560546875, 0.009765625, 0.04364013671875, 0.0268707275390625, 1.091796875, 0.04058837890625, 0.68115234375, 0.0149078369140625, 0.58740234375, 0.6552734375, 0.060638427734375, 0.412353515625, 0.02191162109375, 0.00372314453125, 0.0010824203491210938, 0.11859130859375, 5.650520324707031e-05, 0.01067352294921875, 0.002193450927734375, 0.80615234375, 0.68017578125, 0.062103271484375, 0.52685546875, 0.2041015625, 0.421875, 0.0015048980712890625, 1.8596649169921875e-05, 0.000255584716796875, 0.00044465065002441406, 0.331787109375, 0.1468505859375, 0.02911376953125, 0.0643310546875, 0.00904083251953125, 0.00946807861328125, 0.006771087646484375, 0.001522064208984375, 1.3113021850585938e-06, 0.00019180774688720703, 4.291534423828125e-05, 0.0899658203125, 0.00867462158203125, 0.0002741813659667969, 8.118152618408203e-05, 0.0001881122589111328, 0.00030994415283203125], "tokens": [284, 320, 446, 1022, 275, 319, 47005, 436, 312, 5934, 6517, 322, 2702, 7898, 623, 322, 2702, 14222, 32, 275, 319, 275, 319, 477, 753, 296, 322, 667, 372, 10932, 32, 275, 319, 477, 753, 1847, 35245, 5085, 436, 322, 7898, 32, 275, 319, 477, 753, 1769, 42079, 5085, 436, 322, 7898]}
{"line_number": 69, "line_type": "original", "code": "        this.allowed = AllowedSolution.ANY_SIDE;", "entropy": 1.1767578125, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [4.62109375, 3.255859375, 0.0142059326171875, 3.935546875, 0.0106201171875, 1.9921875, 0.0006489753723144531, 0.0007929801940917969, 0.2220458984375, 0.0007195472717285156, 1.1205673217773438e-05, 0.0606689453125], "tokens": [351, 458, 32, 11327, 280, 38886, 13628, 32, 15205, 81, 25590, 45]}
{"line_number": 69, "line_type": "generated", "code": "\n    /**\n     * Solve for a zero in the given interval.\n     *\n     * @param maxEval Maximum number of evaluations.\n     * @param f Function.\n     * @param min Lower bound for the interval.\n     * @param max Upper bound", "entropy": 0.12078857421875, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [0.681640625, 0.207275390625, 0.3388671875, 4.398822784423828e-05, 1.234375, 0.007480621337890625, 0.042236328125, 0.02215576171875, 0.6513671875, 0.0033626556396484375, 0.00701141357421875, 0.014617919921875, 1.205078125, 0.01534271240234375, 0.00208282470703125, 0.1990966796875, 8.153915405273438e-05, 0.010528564453125, 0.0028228759765625, 0.312744140625, 0.009613037109375, 0.1148681640625, 0.014404296875, 7.95125961303711e-05, 0.051361083984375, 6.4373016357421875e-06, 0.010223388671875, 0.0012903213500976562, 6.67572021484375e-06, 0.00021326541900634766, 0.00028395652770996094, 0.01239013671875, 0.19775390625, 0.6044921875, 0.0008082389831542969, 2.777576446533203e-05, 0.0001512765884399414, 0.00045561790466308594, 0.09814453125, 0.026214599609375, 0.0150146484375, 0.034149169921875, 0.023529052734375, 0.0079498291015625, 0.002712249755859375, 0.0008058547973632812, 3.6954879760742188e-06, 0.0002009868621826172, 0.00013589859008789062, 0.0870361328125, 0.00823211669921875, 0.00030922889709472656], "tokens": [284, 1022, 275, 319, 47005, 436, 312, 5934, 328, 322, 2702, 7898, 32, 275, 319, 275, 319, 477, 753, 1769, 14066, 18690, 1451, 432, 6130, 993, 32, 275, 319, 477, 753, 296, 4540, 32, 275, 319, 477, 753, 1847, 35245, 5085, 436, 322, 7898, 32, 275, 319, 477, 753, 1769, 42079, 5085]}
{"line_number": 70, "line_type": "original", "code": "        this.method = method;", "entropy": 1.7353515625, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [4.50390625, 5.1171875, 0.06591796875, 1.7919921875, 0.1903076171875, 0.398681640625, 0.08087158203125], "tokens": [351, 458, 32, 1959, 280, 1411, 45]}
{"line_number": 70, "line_type": "generated", "code": "    /**\n     * Solve for a zero inside the given interval with the given accuracy.\n     *\n     * @param maxEval Maximum number of evaluations.\n     * @param f Function to solve.\n     * @param min Lower bound for the interval.\n    ", "entropy": 0.1873779296875, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [1.318359375, 0.31396484375, 0.3544921875, 0.00041794776916503906, 1.51953125, 0.007312774658203125, 0.061248779296875, 0.0222015380859375, 0.77880859375, 0.042724609375, 0.88720703125, 0.016357421875, 0.86669921875, 0.463134765625, 0.11566162109375, 0.5078125, 0.0254364013671875, 0.005855560302734375, 0.0027866363525390625, 0.14404296875, 0.00012922286987304688, 0.01535797119140625, 0.00341796875, 0.556640625, 0.0119171142578125, 0.10638427734375, 0.01052093505859375, 6.723403930664062e-05, 0.0748291015625, 7.748603820800781e-06, 0.0118865966796875, 0.0019121170043945312, 1.5497207641601562e-05, 0.00027632713317871094, 0.00027680397033691406, 0.0176239013671875, 0.369140625, 0.783203125, 0.1201171875, 0.01262664794921875, 0.0009427070617675781, 4.279613494873047e-05, 0.00015354156494140625, 0.00035500526428222656, 0.0877685546875, 0.0233612060546875, 0.01861572265625, 0.035308837890625, 0.007511138916015625, 0.00896453857421875, 0.00635528564453125, 0.0007305145263671875], "tokens": [264, 1022, 275, 319, 47005, 436, 312, 5934, 6517, 322, 2702, 7898, 623, 322, 2702, 14222, 32, 275, 319, 275, 319, 477, 753, 1769, 14066, 18690, 1451, 432, 6130, 993, 32, 275, 319, 477, 753, 296, 4540, 372, 10932, 32, 275, 319, 477, 753, 1847, 35245, 5085, 436, 322, 7898, 32, 275]}
{"line_number": 71, "line_type": "original", "code": "    }", "entropy": 3.044921875, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [0.77587890625, 5.3125], "tokens": [264, 320]}
{"line_number": 71, "line_type": "generated", "code": "\n    public double doSolve() {\n        final UnivariateRealFunction f = getFunction();\n        final double min = getMin();\n        final double max = getMax();\n        final double startValue = getStartValue();", "entropy": 0.2220458984375, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [1.298828125, 0.82666015625, 0.2177734375, 0.472412109375, 0.000640869140625, 0.0009984970092773438, 0.427490234375, 0.3896484375, 1.49609375, 0.82861328125, 6.198883056640625e-06, 0.0011005401611328125, 0.0003352165222167969, 0.11163330078125, 0.10296630859375, 0.454833984375, 0.23681640625, 0.1514892578125, 0.3671875, 0.252197265625, 0.0311737060546875, 0.3271484375, 0.0213165283203125, 0.018524169921875, 0.0195770263671875, 0.0269622802734375, 0.006221771240234375, 0.01123046875, 0.0003352165222167969, 0.0286712646484375, 0.00040602684020996094, 4.5299530029296875e-05, 5.8650970458984375e-05, 0.349365234375, 0.294677734375, 0.044464111328125, 0.64208984375, 0.07318115234375, 0.0017147064208984375, 0.0107879638671875, 0.001129150390625, 7.76052474975586e-05, 0.00033855438232421875], "tokens": [284, 562, 2064, 745, 37530, 346, 301, 291, 1158, 1683, 27623, 6877, 2447, 296, 280, 622, 2447, 473, 291, 1158, 2064, 1847, 280, 622, 2928, 473, 291, 1158, 2064, 1769, 280, 39486, 473, 291, 1158, 2064, 1477, 882, 280, 622, 2130, 882, 473]}
{"line_number": 149, "line_type": "original", "code": "        final double ftol = getFunctionValueAccuracy();", "entropy": 1.3662109375, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [6.1171875, 2.771484375, 0.0347900390625, 2.36328125, 2.12890625, 0.0098724365234375, 1.5703125, 0.00044918060302734375, 3.361701965332031e-05, 0.00043582916259765625, 0.0283660888671875], "tokens": [351, 1158, 2064, 296, 14598, 280, 622, 2447, 882, 26201, 473]}
{"line_number": 149, "line_type": "generated", "code": "\n            // If the interval is inverted, swap the bounds.\n            if (inverted) {\n                final double tmp = x0;\n                x0 = x1;\n                x1 = tmp;\n                tmp = f0;\n                f0 = f1;", "entropy": 0.2381591796875, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.51513671875, 0.34375, 0.89453125, 0.312744140625, 1.4921875, 0.791015625, 0.48828125, 0.148193359375, 1.5234375, 0.62451171875, 0.28125, 0.888671875, 0.205078125, 0.0235443115234375, 0.0070037841796875, 0.0013303756713867188, 0.00379180908203125, 0.0011091232299804688, 0.0164794921875, 0.2283935546875, 0.00234222412109375, 0.8349609375, 0.1239013671875, 0.0033245086669921875, 0.1641845703125, 0.00011563301086425781, 0.01061248779296875, 0.0012960433959960938, 0.00046634674072265625, 0.00485992431640625, 0.0005750656127929688, 0.0036773681640625, 8.213520050048828e-05, 0.0011692047119140625, 6.091594696044922e-05, 3.2782554626464844e-05, 5.412101745605469e-05, 0.0020656585693359375, 3.540515899658203e-05, 1.1650390625, 1.2587890625, 0.00955963134765625, 0.0011911392211914062, 0.0015058517456054688, 0.00011587142944335938, 0.00014579296112060547, 4.6253204345703125e-05, 0.0002627372741699219, 0.0002818107604980469, 0.0005555152893066406, 5.8531761169433594e-05, 2.7418136596679688e-05], "tokens": [324, 434, 1670, 322, 7898, 438, 37592, 30, 12947, 322, 11615, 32, 324, 415, 308, 47910, 27, 301, 400, 1158, 2064, 3691, 280, 816, 34, 45, 400, 816, 34, 280, 816, 35, 45, 400, 816, 35, 280, 3691, 45, 400, 3691, 280, 296, 34, 45, 400, 296, 34, 280, 296, 35, 45]}
