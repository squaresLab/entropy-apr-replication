{"line_number": 710, "line_type": "original", "code": "        if (a==0 || b==0){", "entropy": 1.19921875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [2.55859375, 1.884765625, 0.247314453125, 1.2197265625, 1.9541015625, 0.56884765625, 0.77294921875, 0.0291595458984375, 0.054534912109375, 0.0041656494140625, 3.896484375], "tokens": [351, 415, 308, 83, 379, 34, 1276, 323, 379, 34, 1511]}
{"line_number": 710, "line_type": "generated", "code": "\n        return 0;\n    }\n\n    /**\n     * <p>\n     * Returns the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which makes use of the fact that the gcd\n     * of two positive", "entropy": 0.312255859375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [1.5859375, 0.6513671875, 0.4736328125, 0.0287933349609375, 0.2115478515625, 0.1959228515625, 0.0227508544921875, 0.88427734375, 0.10638427734375, 0.11883544921875, 0.0004715919494628906, 1.369140625, 0.00775146484375, 0.0049896240234375, 0.2254638671875, 0.0002071857452392578, 0.39599609375, 0.134521484375, 1.615234375, 0.0165557861328125, 0.004055023193359375, 0.299560546875, 0.1817626953125, 0.058349609375, 0.02618408203125, 0.00018835067749023438, 0.07135009765625, 0.2449951171875, 0.0968017578125, 0.0007987022399902344, 5.543231964111328e-05, 0.01154327392578125, 0.0207672119140625, 0.57421875, 0.26123046875, 0.041290283203125, 0.004146575927734375, 0.005069732666015625, 0.0010814666748046875, 1.322265625, 0.09417724609375, 2.3245811462402344e-05, 1.720703125, 1.171875, 1.5735626220703125e-05, 0.71435546875, 0.69482421875, 0.321533203125, 2.2172927856445312e-05, 0.080810546875, 0.0033550262451171875, 0.155029296875], "tokens": [291, 442, 225, 34, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 3759, 322, 48299, 4942, 33482, 432, 322, 7976, 786, 432, 3134, 7515, 30, 275, 319, 1471, 322, 313, 7003, 43422, 20, 1411, 1510, 7410, 793, 432, 322, 8434, 688, 322, 43422, 275, 319, 432, 3134, 11557]}
{"line_number": 711, "line_type": "original", "code": "            return 0;", "entropy": 3.029296875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [6.1171875, 4.234375, 3.87890625, 0.271484375, 0.64794921875], "tokens": [1468, 442, 225, 34, 45]}
{"line_number": 711, "line_type": "generated", "code": "\n     * @throws ArithmeticException if the result can not be represented as a long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b) {\n        long ret = a * b;\n        if (", "entropy": 0.15625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.6240234375, 0.57861328125, 0.01073455810546875, 0.168212890625, 0.0011529922485351562, 5.233287811279297e-05, 0.09246826171875, 0.0003705024719238281, 0.00412750244140625, 0.06396484375, 0.0017032623291015625, 0.0019092559814453125, 0.002155303955078125, 0.00232696533203125, 0.258544921875, 0.468017578125, 0.1109619140625, 0.28564453125, 0.484130859375, 0.0210723876953125, 0.00170135498046875, 0.046051025390625, 0.00039696693420410156, 1.998046875, 0.06048583984375, 0.00908660888671875, 0.0248870849609375, 0.01226806640625, 0.0006847381591796875, 0.0030422210693359375, 0.001056671142578125, 0.0237884521484375, 8.249282836914062e-05, 0.0002574920654296875, 0.021820068359375, 0.001033782958984375, 0.0010290145874023438, 0.0013303756713867188, 3.254413604736328e-05, 0.002422332763671875, 0.01464080810546875, 0.07122802734375, 0.180908203125, 1.5439453125, 0.09478759765625, 0.0034847259521484375, 0.01555633544921875, 0.0005121231079101562, 0.003631591796875, 0.0308990478515625, 0.50927734375, 0.265625], "tokens": [275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646, 526, 17718, 619, 312, 1946, 275, 319, 477, 8119, 225, 35, 32, 36, 275, 569, 284, 562, 907, 1946, 17476, 2185, 2140, 26, 3222, 312, 30, 1946, 323, 27, 301, 291, 1946, 2152, 280, 312, 319, 323, 45, 291, 415, 308]}
{"line_number": 713, "line_type": "original", "code": "        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));", "entropy": 1.55859375, "is_bug_line": true, "sus_score": 0.7071067811865475, "per_token_entropy": [2.765625, 5.86328125, 3.439453125, 0.0855712890625, 1.388671875, 2.375, 0.162841796875, 0.08056640625, 0.04443359375, 5.22265625, 3.849609375, 0.01056671142578125, 0.1973876953125, 0.62939453125, 4.08984375, 0.646484375, 4.3046875, 0.07415771484375, 0.01428985595703125, 0.3955078125, 0.0703125, 0.0750732421875, 0.052520751953125], "tokens": [351, 629, 456, 4072, 280, 4175, 32, 3596, 26, 8829, 2185, 2140, 26, 83, 517, 43422, 26, 83, 30, 323, 471, 323, 876]}
{"line_number": 713, "line_type": "generated", "code": "\n     */\n    public static long mulAndCheck(long a, long b) {\n        long m = a * b;\n        if (m < Long.MIN_VALUE || m > Long.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow", "entropy": 0.060333251953125, "is_bug_line": true, "sus_score": 0.7071067811865475, "per_token_entropy": [0.6220703125, 0.2822265625, 0.04437255859375, 0.0214080810546875, 0.0009517669677734375, 0.0038471221923828125, 0.0015401840209960938, 0.0256805419921875, 8.90493392944336e-05, 0.0003142356872558594, 0.06842041015625, 0.0025806427001953125, 0.0012865066528320312, 0.00238800048828125, 7.545948028564453e-05, 0.0018529891967773438, 0.0263214111328125, 0.1519775390625, 0.157958984375, 1.0595703125, 0.003932952880859375, 0.0239105224609375, 0.01288604736328125, 0.0006189346313476562, 0.00390625, 0.08221435546875, 0.032684326171875, 0.0244140625, 0.06378173828125, 0.1568603515625, 0.13671875, 0.0010356903076171875, 8.344650268554688e-06, 6.508827209472656e-05, 5.042552947998047e-05, 0.00244903564453125, 0.006786346435546875, 0.00055694580078125, 0.007740020751953125, 0.00017535686492919922, 0.0001087188720703125, 1.800060272216797e-05, 8.58306884765625e-06, 0.008544921875, 0.00626373291015625, 0.03094482421875, 0.01222991943359375, 0.001155853271484375, 0.0009093284606933594, 0.00018548965454101562, 0.002971649169921875, 0.03778076171875], "tokens": [275, 569, 284, 562, 907, 1946, 17476, 2185, 2140, 26, 3222, 312, 30, 1946, 323, 27, 301, 291, 1946, 345, 280, 312, 319, 323, 45, 291, 415, 308, 95, 333, 6359, 32, 4683, 81, 5975, 1276, 345, 848, 6359, 32, 3459, 81, 5975, 27, 301, 324, 1422, 537, 47721, 984, 440, 9642]}
{"line_number": 714, "line_type": "original", "code": "        return lcm;", "entropy": 3.029296875, "is_bug_line": true, "sus_score": 0.7071067811865475, "per_token_entropy": [5.01953125, 1.908203125, 4.7109375, 0.806640625, 2.701171875], "tokens": [351, 442, 456, 4072, 45]}
{"line_number": 714, "line_type": "generated", "code": "\n    }\n\n    /**\n     * <p>\n     * Returns the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations.  See Knuth 4.5.2", "entropy": 0.184326171875, "is_bug_line": true, "sus_score": 0.7071067811865475, "per_token_entropy": [0.6435546875, 0.259033203125, 0.362548828125, 0.050140380859375, 0.11163330078125, 0.0005345344543457031, 1.2265625, 0.0056304931640625, 0.0048370361328125, 0.2164306640625, 0.00013947486877441406, 0.336669921875, 0.12384033203125, 1.306640625, 0.01641845703125, 0.0038700103759765625, 0.2880859375, 0.1029052734375, 0.08953857421875, 0.0199432373046875, 0.00014531612396240234, 0.07916259765625, 0.19580078125, 0.099365234375, 0.0005106925964355469, 4.267692565917969e-05, 0.0103912353515625, 0.0159454345703125, 0.51171875, 0.2548828125, 0.0391845703125, 0.0034122467041015625, 0.005542755126953125, 0.0010919570922851562, 1.0556640625, 0.0101165771484375, 0.0159759521484375, 0.046661376953125, 0.1280517578125, 7.152557373046875e-06, 0.15087890625, 0.00016319751739501953, 1.2216796875, 0.07379150390625, 0.490966796875, 1.8835067749023438e-05, 0.0045013427734375, 6.318092346191406e-06, 1.1682510375976562e-05, 8.821487426757812e-06, 6.556510925292969e-05, 0.0011501312255859375], "tokens": [284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 3759, 322, 48299, 4942, 33482, 432, 322, 7976, 786, 432, 3134, 7515, 30, 275, 319, 1471, 322, 313, 7003, 43422, 20, 1411, 1510, 43585, 20654, 461, 41647, 275, 319, 7373, 32, 225, 2802, 44327, 860, 225, 38, 32, 39, 32, 36]}
{"line_number": 560, "line_type": "original", "code": "            u /= 2;", "entropy": 4.015625, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [7.5859375, 8.15625, 7.19140625, 0.321533203125, 0.7041015625, 0.1419677734375], "tokens": [1468, 1044, 14374, 225, 36, 45]}
{"line_number": 560, "line_type": "generated", "code": "\n    */\n    public static int hash(double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++)", "entropy": 0.11065673828125, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [1.8037109375, 0.59814453125, 0.06317138671875, 0.0124664306640625, 0.0008649826049804688, 0.0022449493408203125, 0.139892578125, 0.00238037109375, 0.71484375, 0.2376708984375, 0.055145263671875, 0.005413055419921875, 0.0034732818603515625, 0.040283203125, 0.1998291015625, 0.007427215576171875, 0.00298309326171875, 0.007312774658203125, 0.0010080337524414062, 0.00453948974609375, 0.0099029541015625, 0.0204620361328125, 0.005733489990234375, 0.002613067626953125, 0.0010509490966796875, 0.00042176246643066406, 0.006290435791015625, 0.0002282857894897461, 0.31396484375, 0.253173828125, 0.2607421875, 0.0029239654541015625, 0.00922393798828125, 0.10919189453125, 0.016021728515625, 0.00878143310546875, 0.07049560546875, 0.0028476715087890625, 0.264404296875, 0.0108184814453125, 0.009490966796875, 0.103759765625, 0.0017442703247070312, 0.1937255859375, 0.0002460479736328125, 0.00290679931640625, 0.003803253173828125, 0.0003275871276855469, 0.0012483596801757812, 0.037139892578125, 0.127197265625, 0.0017271041870117188], "tokens": [284, 569, 284, 562, 907, 629, 3677, 26, 2627, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987]}
{"line_number": 561, "line_type": "original", "code": "            v /= 2;", "entropy": 4.15234375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [9.0546875, 8.3203125, 7.21484375, 0.1815185546875, 0.06280517578125, 0.06591796875], "tokens": [1468, 354, 14374, 225, 36, 45]}
{"line_number": 561, "line_type": "generated", "code": "\n    public static int hash(final double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++) {", "entropy": 0.07708740234375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.16162109375, 0.05914306640625, 0.0010938644409179688, 0.0028820037841796875, 0.274658203125, 0.004791259765625, 0.64599609375, 0.014068603515625, 0.320068359375, 0.12054443359375, 0.004993438720703125, 0.006572723388671875, 0.0838623046875, 0.155029296875, 0.00400543212890625, 0.0020198822021484375, 0.004138946533203125, 0.0008492469787597656, 0.004901885986328125, 0.006439208984375, 0.0179595947265625, 0.0030574798583984375, 0.0014410018920898438, 0.0007905960083007812, 0.0003345012664794922, 0.0051116943359375, 0.0002472400665283203, 0.380859375, 0.28076171875, 0.184814453125, 0.003200531005859375, 0.006206512451171875, 0.1602783203125, 0.0382080078125, 0.00714874267578125, 0.084228515625, 0.001995086669921875, 0.447265625, 0.01140594482421875, 0.004543304443359375, 0.05340576171875, 0.0009179115295410156, 0.2025146484375, 0.00015163421630859375, 0.008026123046875, 0.0022335052490234375, 0.00015306472778320312, 0.000732421875, 0.06201171875, 0.1558837890625, 0.001155853271484375, 0.00115203857421875], "tokens": [284, 562, 907, 629, 3677, 26, 3220, 2064, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 562, "line_type": "original", "code": "            k++; // cast out twos.", "entropy": 5.9375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [6.6640625, 9.5390625, 7.703125, 3.98828125, 10.8828125, 0.129150390625, 9.7109375, 2.5033950805664062e-06, 4.8046875], "tokens": [1468, 831, 3334, 434, 9936, 963, 8206, 500, 32]}
{"line_number": 562, "line_type": "generated", "code": "\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++) {\n            long bits = Double.doubleToLongBits(value", "entropy": 0.0931396484375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.55859375, 0.7822265625, 0.007648468017578125, 0.004390716552734375, 0.01171112060546875, 0.00122833251953125, 0.00704193115234375, 0.00905609130859375, 0.0257110595703125, 0.0032558441162109375, 0.0025882720947265625, 0.0010004043579101562, 0.0004482269287109375, 0.005390167236328125, 0.0004019737243652344, 0.236328125, 0.2366943359375, 0.272705078125, 0.002010345458984375, 0.014068603515625, 0.109130859375, 0.033294677734375, 0.00943756103515625, 0.083251953125, 0.002338409423828125, 0.2130126953125, 0.01485443115234375, 0.006412506103515625, 0.145263671875, 0.0013332366943359375, 0.166015625, 0.0001888275146484375, 0.005580902099609375, 0.0174713134765625, 0.0003409385681152344, 0.001201629638671875, 0.06768798828125, 0.2386474609375, 0.002361297607421875, 0.00112152099609375, 0.07403564453125, 0.95703125, 0.246337890625, 0.0013189315795898438, 0.194091796875, 0.0011539459228515625, 8.237361907958984e-05, 5.7220458984375e-05, 0.0555419921875, 6.008148193359375e-05, 0.00323486328125, 0.00972747802734375], "tokens": [291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987, 301, 324, 1946, 7030, 280, 6934, 32, 2627, 705, 3952, 8733, 26, 853]}
{"line_number": 582, "line_type": "original", "code": "                u = -t;", "entropy": 4.84765625, "is_bug_line": false, "sus_score": 0.22645540682891913, "per_token_entropy": [7.49609375, 9.3125, 0.7421875, 4.27734375, 6.2421875, 1.0224609375], "tokens": [2071, 1044, 280, 429, 102, 45]}
{"line_number": 582, "line_type": "generated", "code": "\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double indicator(final double x) {\n        return (x >= ZD)? PD : ND;\n    }\n\n    /**\n     *", "entropy": 0.0784912109375, "is_bug_line": false, "sus_score": 0.22645540682891913, "per_token_entropy": [0.337890625, 0.08660888671875, 0.0198516845703125, 0.0039215087890625, 0.2041015625, 0.004795074462890625, 0.01074981689453125, 0.0008091926574707031, 0.413330078125, 0.0009555816650390625, 0.0003211498260498047, 0.0009918212890625, 0.0002294778823852539, 0.1844482421875, 0.053558349609375, 0.001247406005859375, 0.0103607177734375, 0.0009622573852539062, 0.00139617919921875, 0.033477783203125, 0.280517578125, 0.232177734375, 0.0268402099609375, 0.007843017578125, 0.0004611015319824219, 0.0228424072265625, 0.007610321044921875, 0.0018663406372070312, 0.10943603515625, 0.00858306884765625, 0.0008230209350585938, 0.0025882720947265625, 0.00392913818359375, 0.0849609375, 0.29248046875, 1.041015625, 0.050506591796875, 0.03887939453125, 0.294677734375, 0.0748291015625, 0.01020050048828125, 0.0003745555877685547, 0.02923583984375, 0.0012531280517578125, 0.00876617431640625, 0.0004074573516845703, 0.0232696533203125, 0.00048804283142089844, 0.041290283203125, 0.0028972625732421875, 0.01041412353515625, 0.0005846023559570312], "tokens": [275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064, 18384, 26, 3220, 2064, 816, 27, 301, 291, 442, 308, 106, 2377, 2523, 54, 27, 1018, 30354, 499, 31500, 45, 284, 320, 446, 1022, 275, 319]}
{"line_number": 578, "line_type": "original", "code": "                t /= 2; // cast out twos", "entropy": 4.31640625, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [9.9296875, 13.703125, 14.25, 0.48876953125, 0.11907958984375, 0.95751953125, 3.544921875, 3.572265625, 0.013519287109375, 0.93359375, 2.956390380859375e-05], "tokens": [2071, 273, 14374, 225, 36, 45, 434, 9936, 963, 8206, 500]}
{"line_number": 578, "line_type": "generated", "code": "\n     * -1.0 if x < 0.\n     * \n     * @param x the value, a double\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double indicator(", "entropy": 0.06298828125, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [1.6328125, 0.00717926025390625, 0.0675048828125, 0.0015764236450195312, 0.003871917724609375, 0.00010943412780761719, 0.023162841796875, 0.0017232894897460938, 0.010589599609375, 0.0017452239990234375, 0.0002453327178955078, 0.040069580078125, 0.319580078125, 0.0002071857452392578, 0.031768798828125, 0.00014853477478027344, 0.0181427001953125, 0.001522064208984375, 0.004032135009765625, 0.047821044921875, 0.00843048095703125, 0.2149658203125, 0.005828857421875, 0.095947265625, 0.3330078125, 9.381771087646484e-05, 0.00046181678771972656, 0.0008893013000488281, 0.12030029296875, 0.0031490325927734375, 0.003963470458984375, 0.00262451171875, 0.068603515625, 0.0009918212890625, 0.00036144256591796875, 0.00174713134765625, 0.0001888275146484375, 0.07293701171875, 0.0010204315185546875, 0.0006928443908691406, 0.0032863616943359375, 0.0003733634948730469, 0.0005865097045898438, 0.0034236907958984375, 0.00812530517578125, 0.07672119140625, 0.009918212890625, 0.0030040740966796875, 0.0002117156982421875, 0.0169525146484375, 0.0022068023681640625, 0.001430511474609375], "tokens": [275, 319, 429, 35, 32, 34, 415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 2064, 275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064, 18384, 26]}
{"line_number": 551, "line_type": "original", "code": "            u = -u;", "entropy": 5.91796875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [6.97265625, 9.5078125, 0.284912109375, 7.62890625, 10.9140625, 0.202392578125], "tokens": [1468, 1044, 280, 429, 103, 45]}
{"line_number": 551, "line_type": "generated", "code": "\n        return (int) (value ^ (value >>> 32));\n    }\n\n    /**\n     * Returns an integer hash code representing the given double value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n    ", "entropy": 0.16552734375, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.61376953125, 0.87744140625, 1.02734375, 0.049957275390625, 0.295166015625, 0.2724609375, 1.513671875, 0.2366943359375, 0.07135009765625, 0.01544189453125, 0.30859375, 0.053955078125, 0.0325927734375, 0.0008411407470703125, 0.11773681640625, 0.09002685546875, 0.00167083740234375, 0.25537109375, 0.057220458984375, 0.01284027099609375, 0.000446319580078125, 0.34521484375, 0.247314453125, 0.0236968994140625, 0.0112762451171875, 0.0001468658447265625, 0.022918701171875, 0.0017242431640625, 0.00310516357421875, 1.2333984375, 0.052734375, 0.06805419921875, 0.04901123046875, 0.0003552436828613281, 0.3603515625, 0.00013935565948486328, 0.01454925537109375, 0.0018148422241210938, 0.023773193359375, 0.0177001953125, 0.022491455078125, 0.0003402233123779297, 8.33272933959961e-05, 0.00014317035675048828, 0.01183319091796875, 0.00046324729919433594, 0.0003523826599121094, 0.1868896484375, 0.0007634162902832031, 0.0006976127624511719, 0.00020372867584228516, 0.00653076171875], "tokens": [291, 442, 308, 410, 27, 308, 853, 5304, 308, 853, 8217, 225, 37, 36, 876, 284, 320, 446, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 2064, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275]}
{"line_number": 584, "line_type": "original", "code": "                v = t;", "entropy": 5.15625, "is_bug_line": false, "sus_score": 0.20851441405707477, "per_token_entropy": [9.6171875, 7.71484375, 0.63037109375, 6.69140625, 1.1279296875], "tokens": [2071, 354, 280, 273, 45]}
{"line_number": 584, "line_type": "generated", "code": "\n    public static double indicator(final double x) {\n        if (Double.isNaN(x)) {\n            return Double.NaN;\n        }\n        return (x >= 0.0)? 1.0 : -1.0;\n    }", "entropy": 0.12164306640625, "is_bug_line": false, "sus_score": 0.20851441405707477, "per_token_entropy": [0.304931640625, 0.37744140625, 0.0013284683227539062, 0.024658203125, 0.00933837890625, 0.002685546875, 0.18701171875, 0.01708984375, 0.0010023117065429688, 0.0067291259765625, 0.0093231201171875, 0.130126953125, 1.65625, 0.0297393798828125, 0.30078125, 0.0012903213500976562, 0.011566162109375, 0.0001569986343383789, 0.0011529922485351562, 0.024505615234375, 0.004421234130859375, 0.041534423828125, 0.015899658203125, 0.3408203125, 0.0004801750183105469, 5.984306335449219e-05, 0.0009946823120117188, 0.026580810546875, 0.0006856918334960938, 0.33544921875, 0.2496337890625, 0.458984375, 0.01013946533203125, 0.04486083984375, 0.82763671875, 0.0006799697875976562, 0.52685546875, 0.003570556640625, 0.057830810546875, 0.0005483627319335938, 0.1641845703125, 0.0001819133758544922, 0.0195465087890625, 0.0012292861938476562, 0.004398345947265625, 0.007472991943359375, 0.00018537044525146484, 0.00021922588348388672, 0.00025582313537597656, 0.00366973876953125, 0.078857421875, 0.0010833740234375], "tokens": [284, 562, 907, 2064, 18384, 26, 3220, 2064, 816, 27, 301, 291, 415, 308, 4075, 32, 26821, 26, 106, 490, 301, 324, 442, 6934, 32, 11126, 45, 291, 320, 291, 442, 308, 106, 2377, 225, 34, 32, 34, 27, 1018, 225, 35, 32, 34, 499, 429, 35, 32, 34, 45, 284, 320]}
{"line_number": 550, "line_type": "original", "code": "        if (u > 0) {", "entropy": 2.029296875, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [5.16015625, 2.490234375, 0.1407470703125, 7.30078125, 2.92578125, 0.06396484375, 0.01009368896484375, 0.1148681640625, 0.054351806640625], "tokens": [351, 415, 308, 103, 848, 225, 34, 27, 301]}
{"line_number": 550, "line_type": "generated", "code": "\n    public static int hashCode(final double value) {\n        return hashCode(Double.doubleToLongBits(value));\n    }\n\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be", "entropy": 0.1192626953125, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.642578125, 0.59619140625, 0.01416778564453125, 0.02288818359375, 0.388916015625, 0.016754150390625, 0.37158203125, 0.0626220703125, 0.04559326171875, 0.0199737548828125, 0.0081939697265625, 0.1529541015625, 1.1064453125, 0.8134765625, 0.051422119140625, 0.1243896484375, 0.0013437271118164062, 0.005725860595703125, 0.0012197494506835938, 0.1007080078125, 0.00020003318786621094, 0.00103759765625, 0.0061492919921875, 0.033447265625, 0.04595947265625, 0.0008320808410644531, 0.340576171875, 0.03912353515625, 0.01110076904296875, 0.00021731853485107422, 0.2406005859375, 0.0716552734375, 0.007049560546875, 0.0014190673828125, 0.00010025501251220703, 0.01456451416015625, 0.0019350051879882812, 0.007350921630859375, 0.7802734375, 0.00014543533325195312, 0.00782012939453125, 0.010345458984375, 0.00015544891357421875, 0.0223541259765625, 2.396106719970703e-05, 0.0012159347534179688, 0.0005736351013183594, 0.00372314453125, 0.005474090576171875, 0.00024271011352539062, 5.3763389587402344e-05, 3.695487976074219e-05], "tokens": [284, 562, 907, 629, 17772, 26, 3220, 2064, 786, 27, 301, 291, 442, 17772, 26, 4075, 32, 2627, 705, 3952, 8733, 26, 853, 876, 284, 320, 446, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526]}
{"line_number": 553, "line_type": "original", "code": "        if (v > 0) {", "entropy": 1.2431640625, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [5.29296875, 2.041015625, 0.1861572265625, 2.302734375, 1.2568359375, 0.05712890625, 0.01107025146484375, 0.0240020751953125, 0.0159759521484375], "tokens": [351, 415, 308, 104, 848, 225, 34, 27, 301]}
{"line_number": 553, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [], "tokens": []}
{"line_number": 554, "line_type": "original", "code": "            v = -v;", "entropy": 2.9609375, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [8.3671875, 6.95703125, 0.669921875, 1.3056640625, 0.416015625, 0.048126220703125], "tokens": [1468, 354, 280, 429, 104, 45]}
{"line_number": 554, "line_type": "generated", "code": "\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float(value", "entropy": 0.05596923828125, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.9228515625, 0.307861328125, 0.03399658203125, 0.0004832744598388672, 0.491455078125, 0.488525390625, 0.0426025390625, 0.01371002197265625, 0.00020897388458251953, 0.016845703125, 0.0016222000122070312, 0.0015001296997070312, 0.34765625, 0.0003135204315185547, 0.00656890869140625, 0.01244354248046875, 0.00036025047302246094, 0.038970947265625, 0.00018203258514404297, 0.003955841064453125, 0.0012922286987304688, 0.0038604736328125, 0.007389068603515625, 0.0002760887145996094, 4.184246063232422e-05, 7.30752944946289e-05, 9.489059448242188e-05, 0.0016908645629882812, 0.0001952648162841797, 0.0006537437438964844, 0.0004687309265136719, 0.0008897781372070312, 0.0014219284057617188, 0.00037026405334472656, 0.009124755859375, 0.045806884765625, 0.01027679443359375, 0.002376556396484375, 0.00016260147094726562, 0.00028777122497558594, 0.00601959228515625, 0.00048804283142089844, 0.0272369384765625, 0.002155303955078125, 0.004825592041015625, 0.0008106231689453125, 0.007427215576171875, 0.00640869140625, 0.0305328369140625, 0.003849029541015625, 0.00044226646423339844, 0.00019049644470214844], "tokens": [284, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174, 26, 853]}
{"line_number": 557, "line_type": "original", "code": "        int k = 0;", "entropy": 2.328125, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [4.640625, 3.8203125, 7.140625, 0.1927490234375, 0.378662109375, 0.0443115234375, 0.08209228515625], "tokens": [351, 629, 831, 280, 225, 34, 45]}
{"line_number": 557, "line_type": "generated", "code": "\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(double[] value) {\n        int result = 1;\n        for (int i = 0; i < value.", "entropy": 0.1258544921875, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.27880859375, 0.05517578125, 0.94970703125, 0.001102447509765625, 0.0802001953125, 0.00411224365234375, 1.1044921875, 0.00806427001953125, 0.66015625, 0.00226593017578125, 0.00030684471130371094, 5.7697296142578125e-05, 0.007427215576171875, 0.0001055002212524414, 0.0014238357543945312, 0.007457733154296875, 0.0009860992431640625, 0.0005011558532714844, 0.00013244152069091797, 0.0194091796875, 0.1961669921875, 0.01555633544921875, 0.007598876953125, 0.0007395744323730469, 0.00296783447265625, 0.03582763671875, 0.00201416015625, 0.27783203125, 0.279296875, 0.051788330078125, 0.00543212890625, 0.0014047622680664062, 0.02813720703125, 0.990234375, 0.59326171875, 0.006061553955078125, 0.01309967041015625, 0.10040283203125, 0.01248931884765625, 0.015899658203125, 0.08160400390625, 0.00914764404296875, 0.284423828125, 0.0139617919921875, 0.01523590087890625, 0.1365966796875, 0.0033817291259765625, 0.1630859375, 0.0005383491516113281, 0.005401611328125, 0.0106964111328125, 0.0007567405700683594], "tokens": [275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 2627, 1178, 786, 27, 301, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32]}
{"line_number": 558, "line_type": "original", "code": "        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are", "entropy": 1.1474609375, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [2.498046875, 7.50390625, 2.5703125, 7.48828125, 0.47021484375, 0.0914306640625, 0.05029296875, 0.03167724609375, 0.00493621826171875, 0.005321502685546875, 0.005367279052734375, 3.08984375, 2.39453125, 0.1673583984375, 0.0108184814453125, 0.0020198822021484375, 0.00197601318359375, 0.0097503662109375, 0.00177764892578125, 0.0041656494140625, 0.0012264251708984375, 1.9609375, 2.09765625, 0.75341796875, 1.64453125, 0.5048828125, 0.349853515625, 0.10479736328125, 0.1650390625, 2.91015625, 1.3291015625, 1.6220703125, 0.1265869140625, 0.0163116455078125, 0.181640625], "tokens": [351, 2218, 1833, 103, 549, 225, 35, 27, 610, 225, 34, 962, 308, 104, 549, 225, 35, 27, 610, 225, 34, 962, 831, 333, 225, 37, 35, 27, 301, 434, 2218, 1044, 461, 354, 884]}
{"line_number": 558, "line_type": "generated", "code": "\n     */\n    public static int hash(final double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i", "entropy": 0.1234130859375, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.84423828125, 1.3115234375, 0.05206298828125, 0.021728515625, 0.00135040283203125, 0.00664520263671875, 0.0433349609375, 0.00785064697265625, 0.86279296875, 0.01519012451171875, 0.359375, 0.118896484375, 0.00823211669921875, 0.01029205322265625, 0.11663818359375, 0.1470947265625, 0.00946044921875, 0.003643035888671875, 0.006610870361328125, 0.0009198188781738281, 0.006717681884765625, 0.0091094970703125, 0.031097412109375, 0.00848388671875, 0.004726409912109375, 0.002666473388671875, 0.0007219314575195312, 0.009002685546875, 0.0004611015319824219, 0.3408203125, 0.41650390625, 0.248046875, 0.00435638427734375, 0.017974853515625, 0.167236328125, 0.01367950439453125, 0.0213165283203125, 0.10675048828125, 0.0031147003173828125, 0.52197265625, 0.0125732421875, 0.01070404052734375, 0.17529296875, 0.0030841827392578125, 0.1500244140625, 0.00024247169494628906, 0.0030307769775390625, 0.004459381103515625, 0.0005173683166503906, 0.0016222000122070312, 0.062103271484375, 0.10992431640625], "tokens": [275, 569, 284, 562, 907, 629, 3677, 26, 3220, 2064, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595]}
{"line_number": 564, "line_type": "original", "code": "        if (k == 31) {", "entropy": 1.869140625, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [5.28125, 1.8076171875, 0.145263671875, 6.8203125, 0.9658203125, 0.2474365234375, 2.66015625, 0.446533203125, 0.239013671875, 0.06805419921875], "tokens": [351, 415, 308, 93, 610, 225, 37, 35, 27, 301]}
{"line_number": 564, "line_type": "generated", "code": "\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float(value", "entropy": 0.04248046875, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [1.0419921875, 0.337158203125, 0.01953125, 0.0001386404037475586, 0.1588134765625, 0.11669921875, 0.01081085205078125, 0.0006704330444335938, 0.0001399517059326172, 0.0109405517578125, 0.0031909942626953125, 0.0027446746826171875, 0.269287109375, 0.013763427734375, 0.0015172958374023438, 0.00606536865234375, 0.0008563995361328125, 0.02117919921875, 1.1920928955078125e-05, 0.004131317138671875, 0.0007114410400390625, 0.0014944076538085938, 0.0030307769775390625, 0.0004897117614746094, 0.00011396408081054688, 2.3603439331054688e-05, 5.6624412536621094e-05, 0.006561279296875, 0.00011110305786132812, 0.0003452301025390625, 0.0003314018249511719, 0.00043082237243652344, 0.0007205009460449219, 0.0002193450927734375, 0.002407073974609375, 0.06207275390625, 0.007030487060546875, 0.0014095306396484375, 0.00017714500427246094, 0.00010335445404052734, 0.00366973876953125, 0.00013113021850585938, 0.01422882080078125, 0.0009737014770507812, 0.0018873214721679688, 0.0004050731658935547, 0.0028839111328125, 0.00434112548828125, 0.071533203125, 0.0009655952453613281, 0.0002416372299194336, 0.0001531839370727539], "tokens": [284, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174, 26, 853]}
{"line_number": 571, "line_type": "original", "code": "        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;", "entropy": 2.603515625, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [4.796875, 5.0546875, 5.515625, 0.1749267578125, 3.220703125, 9.65625, 2.71875, 0.912109375, 3.66015625, 0.927734375, 2.955078125, 0.05499267578125, 3.2421875, 0.42333984375, 0.06787109375, 6.515625, 0.1397705078125, 4.2421875, 1.5146484375, 0.69677734375, 0.028839111328125, 0.01100921630859375, 1.94140625, 6.3828125, 2.140625, 2.970703125, 0.316162109375], "tokens": [351, 629, 273, 280, 1833, 103, 549, 225, 35, 27, 610, 225, 35, 27, 1018, 354, 499, 25298, 103, 517, 225, 36, 27, 1109, 551, 37, 12822]}
{"line_number": 571, "line_type": "generated", "code": "\n     */\n    public static byte signum(final byte x) {\n        return (byte) ((x >> 7) | -(x >> 7));\n    }\n\n    /**\n     * For a double value x, this method returns 1d if x", "entropy": 0.1771240234375, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.634765625, 0.2291259765625, 0.032470703125, 0.051239013671875, 0.0023250579833984375, 0.0212860107421875, 0.06695556640625, 0.352294921875, 0.01348876953125, 0.8642578125, 0.0052947998046875, 0.0028400421142578125, 0.0037288665771484375, 0.00849151611328125, 0.087890625, 0.290283203125, 0.1650390625, 0.273193359375, 0.03240966796875, 0.86328125, 0.05291748046875, 0.431884765625, 0.07244873046875, 0.0084686279296875, 0.0338134765625, 0.1392822265625, 1.2353515625, 0.0004570484161376953, 0.01032257080078125, 0.0014057159423828125, 0.00011467933654785156, 0.0108489990234375, 0.24853515625, 0.0014562606811523438, 0.05889892578125, 0.003360748291015625, 0.00798797607421875, 6.413459777832031e-05, 0.056365966796875, 0.0274200439453125, 1.4208984375, 0.011962890625, 0.0017862319946289062, 0.00025177001953125, 0.00019407272338867188, 0.0014133453369140625, 0.0012750625610351562, 0.775390625, 0.0070953369140625, 0.5537109375, 0.019195556640625, 0.01184844970703125], "tokens": [275, 569, 284, 562, 907, 3432, 2596, 378, 26, 3220, 3432, 816, 27, 301, 291, 442, 308, 2263, 27, 1833, 106, 3776, 225, 41, 27, 523, 25298, 106, 3776, 225, 41, 876, 284, 320, 446, 1022, 275, 319, 2616, 312, 2064, 786, 816, 30, 458, 1411, 3217, 225, 35, 86, 415, 816]}
{"line_number": 577, "line_type": "original", "code": "            while ((t & 1) == 0) { // while t is even..", "entropy": 1.84375, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [7.0625, 10.703125, 2.115234375, 5.26171875, 1.19140625, 0.47802734375, 0.59130859375, 0.0960693359375, 0.0168914794921875, 0.01459503173828125, 0.003147125244140625, 0.289306640625, 0.156982421875, 2.529296875, 2.06640625, 0.65771484375, 0.00390625, 0.03216552734375, 1.76953125], "tokens": [1468, 2218, 1833, 102, 549, 225, 35, 27, 610, 225, 34, 27, 301, 434, 2218, 273, 438, 4444, 497]}
{"line_number": 577, "line_type": "generated", "code": "\n     * For a short value x, this method returns (short)(+1) if x >= 0 and\n     * (short)(-1) if x < 0.\n     * \n     * @param x the value, a short\n     * @", "entropy": 0.05718994140625, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.489501953125, 0.051727294921875, 0.305419921875, 0.1484375, 1.5244140625, 0.006198883056640625, 0.0016717910766601562, 0.0004303455352783203, 0.0014553070068359375, 0.0003979206085205078, 0.0004649162292480469, 0.01361846923828125, 0.2607421875, 0.0024433135986328125, 0.0007634162902832031, 0.00010073184967041016, 0.0008649826049804688, 0.0008082389831542969, 0.00516510009765625, 0.00414276123046875, 0.003559112548828125, 0.000347137451171875, 0.00753021240234375, 0.01107025146484375, 4.470348358154297e-05, 0.00273895263671875, 0.0099945068359375, 5.0187110900878906e-05, 0.00027370452880859375, 6.651878356933594e-05, 0.00010073184967041016, 0.00019478797912597656, 0.0004601478576660156, 0.0004856586456298828, 0.00021767616271972656, 0.00014150142669677734, 0.004192352294921875, 0.039520263671875, 0.00186920166015625, 0.026123046875, 2.872943878173828e-05, 0.0039215087890625, 0.0009741783142089844, 0.0008783340454101562, 0.0210113525390625, 0.0006442070007324219, 0.0028934478759765625, 0.0018320083618164062, 0.0117645263671875, 0.00325775146484375, 4.3392181396484375e-05, 0.00014781951904296875], "tokens": [275, 319, 2616, 312, 4504, 786, 816, 30, 458, 1411, 3217, 308, 4021, 2502, 29, 35, 27, 415, 816, 2377, 225, 34, 461, 275, 319, 308, 4021, 2502, 31, 35, 27, 415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 4504, 275, 319, 477]}
{"line_number": 581, "line_type": "original", "code": "            if (t > 0) {", "entropy": 2.76953125, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [7.5078125, 4.6796875, 1.82421875, 6.8828125, 2.59375, 0.476806640625, 0.0196533203125, 0.459716796875, 0.482421875], "tokens": [1468, 415, 308, 102, 848, 225, 34, 27, 301]}
{"line_number": 581, "line_type": "generated", "code": "\n     * @param x the value, a double\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double indicator(final double x) {\n        return (x >= ZD)?", "entropy": 0.0914306640625, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.282958984375, 0.1424560546875, 0.31884765625, 0.00760650634765625, 0.00852203369140625, 0.1954345703125, 0.0166168212890625, 0.27392578125, 0.0220489501953125, 0.164306640625, 0.251953125, 0.00018084049224853516, 0.0014390945434570312, 0.002288818359375, 0.200927734375, 0.00357818603515625, 0.0085906982421875, 0.0008416175842285156, 0.34716796875, 0.0010166168212890625, 0.00029540061950683594, 0.0010557174682617188, 0.000171661376953125, 0.1253662109375, 0.03643798828125, 0.0010347366333007812, 0.00786590576171875, 0.0008640289306640625, 0.0014181137084960938, 0.0289306640625, 0.08306884765625, 0.2322998046875, 0.01494598388671875, 0.0059356689453125, 0.00032019615173339844, 0.0166015625, 0.00833892822265625, 0.0013608932495117188, 0.105712890625, 0.0063934326171875, 0.0008006095886230469, 0.001911163330078125, 0.0025157928466796875, 0.028656005859375, 0.320068359375, 0.9765625, 0.0572509765625, 0.038848876953125, 0.31689453125, 0.07244873046875, 0.00908660888671875, 0.0003223419189453125], "tokens": [275, 319, 477, 753, 816, 322, 786, 30, 312, 2064, 275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064, 18384, 26, 3220, 2064, 816, 27, 301, 291, 442, 308, 106, 2377, 2523, 54, 27, 1018]}
{"line_number": 587, "line_type": "original", "code": "            t = (v - u) / 2;", "entropy": 2.546875, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [6.2265625, 7.9296875, 0.1414794921875, 2.115234375, 5.21484375, 4.13671875, 3.07421875, 0.3251953125, 0.6689453125, 0.253173828125, 0.019622802734375, 0.464111328125], "tokens": [1468, 273, 280, 308, 104, 429, 1044, 27, 517, 225, 36, 45]}
{"line_number": 587, "line_type": "generated", "code": "\n        }\n        return (x >= 0.0)? 1.0 : -1.0;\n    }\n\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.", "entropy": 0.07489013671875, "is_bug_line": false, "sus_score": 0.20628424925175867, "per_token_entropy": [0.1033935546875, 0.046417236328125, 0.36669921875, 0.28271484375, 0.416748046875, 0.00792694091796875, 0.046905517578125, 1.0078125, 0.0009198188781738281, 0.6552734375, 0.0030975341796875, 0.051513671875, 0.0006284713745117188, 0.1484375, 0.0001270771026611328, 0.0190277099609375, 0.0006928443908691406, 0.005443572998046875, 0.0069122314453125, 0.00017023086547851562, 0.0001938343048095703, 0.000164031982421875, 0.0166168212890625, 0.1309814453125, 0.0004558563232421875, 0.05303955078125, 0.00305938720703125, 0.0023174285888671875, 3.2901763916015625e-05, 0.03289794921875, 0.046356201171875, 0.060089111328125, 0.034149169921875, 0.0010709762573242188, 0.00032782554626464844, 0.0014715194702148438, 0.0004208087921142578, 0.00038123130798339844, 0.047760009765625, 0.0012683868408203125, 0.08172607421875, 0.00020062923431396484, 0.08526611328125, 0.00034499168395996094, 0.00284576416015625, 0.011962890625, 0.0010833740234375, 0.0001035928726196289, 0.0175628662109375, 0.08990478515625, 0.00011706352233886719, 0.00020933151245117188], "tokens": [291, 320, 291, 442, 308, 106, 2377, 225, 34, 32, 34, 27, 1018, 225, 35, 32, 34, 499, 429, 35, 32, 34, 45, 284, 320, 446, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32]}
