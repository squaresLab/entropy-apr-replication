{"line_number": 87, "line_type": "original", "code": "        final Line reverted = new Line(zero, zero.subtract(direction));", "entropy": 0.70654296875, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [5.74609375, 3.3046875, 0.111083984375, 0.0298309326171875, 1.9550323486328125e-05, 0.0404052734375, 0.0296630859375, 0.0026874542236328125, 0.1492919921875, 1.0546875, 0.08673095703125, 0.57763671875, 0.0220489501953125, 0.736328125, 0.0396728515625, 0.01505279541015625, 0.059478759765625], "tokens": [351, 1158, 7064, 316, 17445, 280, 537, 7064, 26, 6158, 30, 5934, 32, 25330, 26, 7354, 876]}
{"line_number": 87, "line_type": "generated", "code": "\n    /**\n     * Get the first point belonging to the line.\n     * @return first point belonging to the line\n     */\n    public Vector3D getP1() {\n        return new Vector3D(zero, direction);\n    }\n\n    /**", "entropy": 0.273193359375, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.705078125, 0.27685546875, 1.7421875, 0.0040283203125, 1.7265625, 0.93896484375, 2.37890625, 0.109375, 0.62451171875, 0.000553131103515625, 0.002475738525390625, 0.02618408203125, 0.06329345703125, 0.181396484375, 0.0223236083984375, 0.0014810562133789062, 0.1519775390625, 0.0172271728515625, 0.499755859375, 0.01340484619140625, 0.12744140625, 0.00034737586975097656, 0.0011587142944335938, 0.0008530616760253906, 0.002468109130859375, 0.10845947265625, 0.081787109375, 0.0228118896484375, 0.06768798828125, 0.007366180419921875, 0.0023250579833984375, 4.589557647705078e-05, 0.007659912109375, 0.32373046875, 0.0001380443572998047, 0.0120697021484375, 0.041351318359375, 0.1595458984375, 0.03314208984375, 1.8359375, 0.00682830810546875, 0.00017440319061279297, 0.00013303756713867188, 0.0797119140625, 0.471923828125, 0.92236328125, 0.11553955078125, 0.1171875, 0.025634765625, 0.0017576217651367188, 0.1341552734375, 0.0024814605712890625], "tokens": [284, 1022, 275, 319, 1390, 322, 1932, 2260, 22056, 299, 372, 322, 1628, 32, 275, 319, 477, 601, 1932, 2260, 22056, 299, 372, 322, 1628, 275, 569, 284, 562, 4107, 37, 54, 622, 66, 35, 346, 301, 291, 442, 537, 4107, 37, 54, 26, 6158, 30, 6983, 293, 284, 320, 446, 1022]}
{"line_number": 88, "line_type": "original", "code": "        return reverted;", "entropy": 1.5048828125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [5.51953125, 1.1982421875, 0.72509765625, 0.000553131103515625, 0.08135986328125], "tokens": [351, 442, 316, 17445, 45]}
{"line_number": 88, "line_type": "generated", "code": "\n\n    /** {@inheritDoc} */\n    @Override\n    public boolean equals(final Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null || getClass()!= other.getClass()) {\n            return false;", "entropy": 0.1495361328125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [2.03515625, 0.179443359375, 1.140625, 0.0014295578002929688, 0.0006775856018066406, 0.181884765625, 0.01332855224609375, 0.363525390625, 0.003200531005859375, 0.0037555694580078125, 0.0089263916015625, 0.88525390625, 0.08135986328125, 0.0001838207244873047, 0.1351318359375, 0.0010366439819335938, 0.24609375, 0.0010547637939453125, 0.0007672309875488281, 0.1007080078125, 0.0156097412109375, 0.05804443359375, 0.0804443359375, 0.0016603469848632812, 0.00010371208190917969, 0.007259368896484375, 0.005519866943359375, 0.0038013458251953125, 0.047882080078125, 0.00021731853485107422, 0.0001882314682006836, 0.00092315673828125, 0.0005006790161132812, 0.16796875, 0.01023101806640625, 0.1217041015625, 0.01763916015625, 0.51318359375, 0.0001354217529296875, 0.29736328125, 1.033203125, 0.003787994384765625, 7.18832015991211e-05, 0.0005273818969726562, 9.441375732421875e-05, 8.130073547363281e-05, 0.00048422813415527344, 0.001068115234375, 0.00251007080078125, 0.00033545494079589844, 0.0001697540283203125, 7.069110870361328e-05], "tokens": [446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 1905, 12423, 26, 3220, 2194, 1604, 27, 301, 291, 415, 308, 578, 610, 1604, 27, 301, 324, 442, 861, 45, 291, 320, 291, 415, 308, 2455, 610, 744, 1276, 27084, 346, 863, 1604, 32, 9700, 1157, 301, 324, 442, 901, 45]}
{"line_number": 95, "line_type": "original", "code": "        return direction;", "entropy": 4.8125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.57421875, 0.40234375, 5.51953125, 6.75], "tokens": [351, 442, 6983, 45]}
{"line_number": 95, "line_type": "generated", "code": "\n\n    /** Check if the instance is similar to another line.\n     * <p>Lines are considered similar if they are parallel and\n     * contain the same points.</p>\n     * @param line line to which instance should be compared\n     * @param tolerance", "entropy": 0.2264404296875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.67822265625, 0.0599365234375, 1.3974609375, 0.033935546875, 0.07904052734375, 0.05322265625, 0.13671875, 0.53955078125, 0.00249481201171875, 0.3583984375, 0.10906982421875, 0.281982421875, 0.0118560791015625, 2.4199485778808594e-05, 0.09326171875, 0.00041937828063964844, 0.001049041748046875, 0.09576416015625, 0.003711700439453125, 0.0007276535034179688, 0.0123138427734375, 0.006023406982421875, 0.028106689453125, 1.4677734375, 1.458984375, 0.70068359375, 0.92578125, 1.049041748046875e-05, 0.31201171875, 0.04254150390625, 0.0044403076171875, 0.328125, 0.8720703125, 0.0003750324249267578, 0.00024127960205078125, 0.006870269775390625, 5.602836608886719e-05, 0.03662109375, 0.0007381439208984375, 0.00443267822265625, 0.0030307769775390625, 0.0013322830200195312, 0.0005288124084472656, 0.0027561187744140625, 0.0001195669174194336, 6.186962127685547e-05, 0.00010585784912109375, 0.0009465217590332031, 3.0279159545898438e-05, 0.0009136199951171875, 1.119140625, 0.499267578125], "tokens": [446, 1022, 3456, 415, 322, 1980, 438, 6693, 372, 4674, 1628, 32, 275, 319, 333, 98, 48, 8683, 884, 11870, 6693, 415, 2953, 884, 11935, 461, 275, 319, 4799, 322, 2432, 4981, 1730, 98, 48, 275, 319, 477, 753, 1628, 1628, 372, 1510, 1980, 1395, 526, 19112, 275, 319, 477, 753, 26434]}
{"line_number": 54, "line_type": "original", "code": "    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {", "entropy": 0.54248046875, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [4.25, 1.9072265625, 2.892578125, 0.66455078125, 0.1708984375, 0.272216796875, 0.04241943359375, 1.800060272216797e-05, 0.76025390625, 0.146728515625, 0.0187225341796875, 0.010467529296875, 0.0018682479858398438, 2.4557113647460938e-05, 4.76837158203125e-06, 0.0035877227783203125, 0.00020885467529296875, 0.07275390625, 0.62158203125, 0.001033782958984375, 0.0020580291748046875, 0.09893798828125], "tokens": [264, 562, 7064, 26, 3220, 4107, 37, 54, 298, 35, 30, 1158, 4107, 37, 54, 298, 36, 27, 2571, 4175, 25907, 301]}
{"line_number": 54, "line_type": "generated", "code": "\n\n    /** Get the point at abscissa <code>t</code>.\n     * @param t abscissa\n     * @return point at abscissa <code>t</code>\n     */\n    public Vector3D pointAt(final double", "entropy": 0.1483154296875, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.428466796875, 0.0230865478515625, 0.53759765625, 0.278564453125, 1.44140625, 0.252197265625, 0.60400390625, 5.710124969482422e-05, 1.5616416931152344e-05, 0.5810546875, 0.0272369384765625, 0.0005288124084472656, 0.86181640625, 0.0079193115234375, 0.00023996829986572266, 0.134033203125, 0.05413818359375, 0.00011289119720458984, 0.36962890625, 0.0031681060791015625, 0.002532958984375, 0.0136566162109375, 0.0003376007080078125, 4.482269287109375e-05, 0.52001953125, 0.0002930164337158203, 0.0002903938293457031, 0.0013933181762695312, 0.92138671875, 0.030548095703125, 0.0177764892578125, 0.00024044513702392578, 0.0001838207244873047, 0.1793212890625, 0.00241851806640625, 0.00017940998077392578, 0.0012712478637695312, 0.0010786056518554688, 5.960464477539062e-07, 0.0287628173828125, 0.0280609130859375, 0.1490478515625, 0.006195068359375, 0.0220184326171875, 0.0008754730224609375, 0.00905609130859375, 5.960464477539062e-07, 0.026458740234375, 0.0005922317504882812, 0.0002567768096923828, 0.1409912109375, 0.004627227783203125], "tokens": [446, 1022, 1390, 322, 2260, 821, 1399, 545, 47250, 333, 687, 48, 102, 377, 687, 4503, 275, 319, 477, 753, 273, 1399, 545, 47250, 275, 319, 477, 601, 2260, 821, 1399, 545, 47250, 333, 687, 48, 102, 377, 687, 48, 275, 569, 284, 562, 4107, 37, 54, 2260, 1076, 26, 3220, 2064]}
{"line_number": 55, "line_type": "original", "code": "        reset(p1, p2);", "entropy": 1.7666015625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [6.1640625, 8.5, 0.1568603515625, 0.99609375, 0.0206756591796875, 0.01165771484375, 0.01512908935546875, 0.0018177032470703125, 0.02850341796875], "tokens": [351, 5657, 26, 98, 35, 30, 298, 36, 293]}
{"line_number": 55, "line_type": "generated", "code": "\n\n    /** Get the offset of a point from the line.\n     * @param point point to check\n     * @return the offset of the point from the line\n     */\n    public double getOffset(final Vector3D point) {\n        return direction.dot", "entropy": 0.279052734375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.77490234375, 0.0533447265625, 0.70654296875, 0.339599609375, 3.17578125, 0.314453125, 0.38232421875, 0.03338623046875, 0.164794921875, 0.0743408203125, 0.26025390625, 0.059356689453125, 0.05047607421875, 2.8967857360839844e-05, 0.4931640625, 0.004840850830078125, 0.2000732421875, 0.05853271484375, 0.55810546875, 0.2489013671875, 0.2410888671875, 4.494190216064453e-05, 0.0009832382202148438, 0.01202392578125, 1.375, 0.243896484375, 0.59814453125, 0.0301666259765625, 0.00812530517578125, 0.521484375, 0.0032939910888671875, 0.0214996337890625, 0.70263671875, 0.2318115234375, 0.003459930419921875, 0.0147552490234375, 0.0275421142578125, 0.326171875, 0.0157012939453125, 0.0001405477523803711, 0.0263824462890625, 0.0008625984191894531, 0.0318603515625, -0.0, 0.0010042190551757812, 0.00021922588348388672, 0.00905609130859375, 0.04400634765625, 0.1824951171875, 1.6708984375, 0.0005717277526855469, 0.21484375], "tokens": [446, 1022, 1390, 322, 3401, 432, 312, 2260, 645, 322, 1628, 32, 275, 319, 477, 753, 2260, 2260, 372, 1505, 275, 319, 477, 601, 322, 3401, 432, 322, 2260, 645, 322, 1628, 275, 569, 284, 562, 2064, 622, 3457, 26, 3220, 4107, 37, 54, 2260, 27, 301, 291, 442, 6983, 32, 4260]}
{"line_number": 56, "line_type": "original", "code": "    }", "entropy": 6.8984375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [3.84765625, 9.9453125], "tokens": [264, 320]}
{"line_number": 56, "line_type": "generated", "code": "\n     * @param point point belonging to the line\n     * @return abscissa of the point\n     */\n    public double getAbscissa(final Vector3D point) {\n        return point.subtract(zero).dotProduct(direction);\n   ", "entropy": 0.144775390625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.343017578125, 0.0809326171875, 0.320556640625, 0.01432037353515625, 0.28271484375, 0.078369140625, 0.83642578125, 0.02349853515625, 0.0024433135986328125, 0.0035648345947265625, 0.035064697265625, 0.111083984375, 0.001071929931640625, 0.0027866363525390625, 0.03277587890625, 0.311279296875, 0.0003514289855957031, 3.933906555175781e-05, 0.039337158203125, 0.0125579833984375, 0.052978515625, 0.53662109375, 0.7412109375, 0.009307861328125, 0.00783538818359375, 0.0287628173828125, 0.09661865234375, 0.0003261566162109375, 9.417533874511719e-06, 0.0006852149963378906, 0.0013093948364257812, 0.01216888427734375, 0.00047087669372558594, 0.0102081298828125, -0.0, 0.0006346702575683594, 0.00016176700592041016, 0.01322174072265625, 0.027740478515625, 0.27001953125, 1.3046875, 0.00012958049774169922, 0.8857421875, 4.839897155761719e-05, 0.0130157470703125, 0.003612518310546875, 0.0947265625, 3.647804260253906e-05, 0.00022530555725097656, 0.0184783935546875, 0.74267578125, 0.11981201171875], "tokens": [275, 319, 477, 753, 2260, 2260, 22056, 299, 372, 322, 1628, 275, 319, 477, 601, 1399, 545, 47250, 432, 322, 2260, 275, 569, 284, 562, 2064, 622, 2774, 545, 47250, 26, 3220, 4107, 37, 54, 2260, 27, 301, 291, 442, 2260, 32, 25330, 26, 6158, 547, 4260, 3409, 26, 7354, 293, 284]}
{"line_number": 74, "line_type": "original", "code": "        final Vector3D delta = p2.subtract(p1);", "entropy": 0.6982421875, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [5.4609375, 2.609375, 0.70703125, 0.049041748046875, 6.532669067382812e-05, 0.880859375, 0.20361328125, 0.39501953125, 0.09417724609375, 0.007434844970703125, 0.01457977294921875, 0.00011599063873291016, 0.0031070709228515625, 0.00014209747314453125, 0.048858642578125], "tokens": [351, 1158, 4107, 37, 54, 7715, 280, 298, 36, 32, 25330, 26, 98, 35, 293]}
{"line_number": 74, "line_type": "generated", "code": "\n    /**\n     * Get a point from the line.\n     * <p>\n     * The abscissa is clamped to the range {@code [0, 1]}.\n     * </p>\n     * @param abscissa desired absc", "entropy": 0.43505859375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.348388671875, 0.0648193359375, 2.5859375, 0.001178741455078125, 1.2841796875, 1.546875, 1.693359375, 1.3232421875, 0.07879638671875, 0.09124755859375, 0.58447265625, 0.063720703125, 0.0010061264038085938, 0.96923828125, 0.0107574462890625, 0.004215240478515625, 1.0869140625, 2.8371810913085938e-05, 0.64501953125, 1.076171875, 8.356571197509766e-05, 0.00809478759765625, 0.68505859375, 3.09765625, 0.0219879150390625, 0.1630859375, 0.18017578125, 1.32421875, 0.84033203125, 0.10931396484375, 0.212158203125, 0.2232666015625, 0.59814453125, 0.467041015625, 0.0218963623046875, 0.457763671875, 0.0904541015625, 0.284423828125, 0.0046844482421875, 0.07867431640625, 0.00012135505676269531, 0.002227783203125, 0.00212860107421875, 0.0005578994750976562, 0.17919921875, 0.00229644775390625, 0.057403564453125, 0.0020198822021484375, 3.3855438232421875e-05, 0.0389404296875, 0.006504058837890625, 0.0001474618911743164], "tokens": [284, 1022, 275, 319, 1390, 312, 2260, 645, 322, 1628, 32, 275, 319, 333, 98, 48, 275, 319, 886, 1399, 545, 47250, 438, 28553, 318, 372, 322, 2155, 3088, 687, 428, 34, 30, 225, 35, 79, 4009, 275, 319, 576, 98, 48, 275, 319, 477, 753, 1399, 545, 47250, 10848, 1399, 545]}
{"line_number": 75, "line_type": "original", "code": "        final double norm2 = delta.getNormSq();", "entropy": 1.2236328125, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [4.14453125, 3.76171875, 0.64501953125, 1.77734375, 0.313720703125, 0.1297607421875, 3.16015625, 0.1505126953125, 0.1431884765625, 0.0009016990661621094, 0.450439453125, 0.01242828369140625], "tokens": [351, 1158, 2064, 9807, 36, 280, 7715, 32, 371, 14373, 17509, 473]}
{"line_number": 75, "line_type": "generated", "code": " */\n    public Euclidean1D[] getSubspace() {\n        return new Euclidean1D[] { new Euclidean1D(getAbscissa(Vector3D.ZERO)) };\n    }\n\n    /** {@inheritDoc}", "entropy": 0.304443359375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [2.08984375, 0.033355712890625, 0.5390625, 1.4814453125, 0.0007624626159667969, 0.1602783203125, 0.000141143798828125, 0.80224609375, 0.83056640625, 0.2113037109375, 0.8876953125, 0.34130859375, 0.00641632080078125, 0.047088623046875, 0.2410888671875, 0.0499267578125, 0.0170135498046875, 3.552436828613281e-05, 0.00423431396484375, 5.626678466796875e-05, 0.044281005859375, 0.0024566650390625, 1.0634765625, 0.1759033203125, 0.0017824172973632812, 0.0018329620361328125, 0.0005841255187988281, 0.034881591796875, 1.310546875, 0.6181640625, 1.3828277587890625e-05, 1.9073486328125e-05, 0.044403076171875, 1.5, 0.005107879638671875, 2.5510787963867188e-05, 0.0001049041748046875, 0.9130859375, 0.1387939453125, 0.0266571044921875, 0.019012451171875, 0.0013866424560546875, 0.1142578125, 0.00946807861328125, 0.5361328125, 0.0003764629364013672, 0.0008573532104492188], "tokens": [569, 284, 562, 516, 34986, 35, 54, 1178, 622, 1721, 1166, 346, 301, 291, 442, 537, 516, 34986, 35, 54, 1178, 301, 537, 516, 34986, 35, 54, 26, 371, 2774, 545, 47250, 26, 2863, 37, 54, 32, 13977, 490, 1472, 284, 320, 446, 1022, 3088, 18446, 111]}
{"line_number": 76, "line_type": "original", "code": "        if (norm2 == 0.0) {", "entropy": 1.3740234375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [2.755859375, 3.71875, 0.27392578125, 5.34765625, 2.404296875, 0.416259765625, 0.011016845703125, 0.0034275054931640625, 0.810546875, 0.0010251998901367188, 0.013763427734375, 0.724609375], "tokens": [351, 415, 308, 7927, 36, 610, 225, 34, 32, 34, 27, 301]}
{"line_number": 76, "line_type": "generated", "code": "\n     */\n    @Override\n    public double[] embed(final Vector3D point) {\n        return new double[] { getAbscissa(point) };\n    }\n\n    /** {@inheritDoc}\n     * @see #pointAt(double)", "entropy": 0.1572265625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.80322265625, 0.233642578125, 0.0618896484375, 0.84814453125, 0.005435943603515625, 0.01666259765625, 0.017822265625, 0.2578125, 0.63916015625, 1.572265625, 0.00620269775390625, 0.04010009765625, 0.3525390625, 0.06939697265625, 5.841255187988281e-06, 0.103515625, 0.033447265625, 0.089599609375, 0.1268310546875, 0.3857421875, 0.00452423095703125, 0.000362396240234375, 0.02508544921875, 0.00606536865234375, 0.8134765625, 5.7578086853027344e-05, 2.9802322387695312e-06, 2.86102294921875e-06, 0.0006418228149414062, 0.0004444122314453125, 0.0121002197265625, 0.0045623779296875, 0.1490478515625, 0.0006880760192871094, 0.1185302734375, 0.01255035400390625, 0.256591796875, 0.00026679039001464844, 0.00049591064453125, 0.093994140625, 0.0291900634765625, 0.2137451171875, 0.05621337890625, 0.02911376953125, 0.2127685546875, 7.200241088867188e-05, 0.0005602836608886719, 0.0031719207763671875, 0.0005407333374023438], "tokens": [275, 569, 284, 477, 1788, 284, 562, 2064, 1178, 8195, 26, 3220, 4107, 37, 54, 2260, 27, 301, 291, 442, 537, 2064, 1178, 301, 622, 2774, 545, 47250, 26, 1493, 27, 1472, 284, 320, 446, 1022, 3088, 18446, 111, 275, 319, 477, 2970, 588, 1493, 1076, 26, 2627, 27]}
{"line_number": 79, "line_type": "original", "code": "        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);", "entropy": 1.3251953125, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [3.150390625, 6.0703125, 0.437255859375, 1.0947265625, 0.69140625, 1.3955078125, 0.0266571044921875, 0.00946044921875, 0.0004677772521972656, 0.181396484375, 0.73193359375, 0.049407958984375, 0.0008754730224609375, 7.05859375, 5.05078125, 0.00035119056701660156, 9.918212890625e-05, 0.306396484375, 0.0222015380859375, 2.08984375, 0.260986328125, 0.05755615234375, 3.06640625, 0.06695556640625], "tokens": [351, 458, 32, 7354, 280, 537, 4107, 37, 54, 26, 35, 32, 34, 517, 15938, 5717, 32, 8663, 26, 7927, 36, 471, 7715, 293]}
{"line_number": 79, "line_type": "generated", "code": "\n    }\n\n    /** {@inheritDoc}\n     * @see #pointAt(double)\n     */\n    public Vector<Euclidean3D> toSpace(final Vector1D subPoint) {\n        return pointAt(subPoint.getX());", "entropy": 0.07965087890625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.261962890625, 0.146240234375, 0.11614990234375, 0.00891876220703125, 0.1185302734375, 0.0001201629638671875, 0.0006585121154785156, 0.0821533203125, 0.0113372802734375, 0.0762939453125, 0.031707763671875, 0.03240966796875, 0.3046875, 0.00017535686492919922, 0.0002830028533935547, 0.00342559814453125, 0.00021326541900634766, 0.0015125274658203125, 0.017913818359375, 0.005802154541015625, 0.0081634521484375, 0.07000732421875, 0.424560546875, 0.0010442733764648438, 6.794929504394531e-06, 0.2333984375, 3.5762786865234375e-07, 0.000118255615234375, 0.19384765625, 0.0014886856079101562, 0.0043487548828125, 0.005046844482421875, 0.001773834228515625, 0.07745361328125, 4.887580871582031e-06, 0.72021484375, 0.41650390625, 0.0008454322814941406, 0.006244659423828125, 0.0115203857421875, 0.022369384765625, 0.286865234375, 3.24249267578125e-05, 0.046630859375, 0.0009908676147460938, 7.748603820800781e-06, 0.0001825094223022461, 0.1424560546875, 0.008087158203125], "tokens": [284, 320, 446, 1022, 3088, 18446, 111, 275, 319, 477, 2970, 588, 1493, 1076, 26, 2627, 27, 275, 569, 284, 562, 4107, 46, 55, 34986, 37, 54, 48, 372, 5135, 26, 3220, 4107, 35, 54, 1361, 1943, 27, 301, 291, 442, 2260, 1076, 26, 1113, 1943, 32, 18817, 1035]}
{"line_number": 80, "line_type": "original", "code": "        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);", "entropy": 0.884765625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [6.35546875, 4.5859375, 0.73388671875, 0.96337890625, 0.01265716552734375, 0.0010833740234375, 9.107589721679688e-05, 0.08453369140625, 2.298828125, 0.151123046875, 0.0010128021240234375, 0.058929443359375, 0.97998046875, 0.175048828125, 1.13671875, 1.8271484375, 1.0263671875, 0.063232421875, 0.01003265380859375, 0.07159423828125, 0.00016748905181884766, 0.0017757415771484375, 4.31640625, 0.6640625, 0.015869140625, 0.1378173828125, 0.11114501953125, 0.6123046875, 0.1201171875, 0.028076171875], "tokens": [351, 5934, 280, 537, 4107, 37, 54, 26, 35, 32, 34, 30, 298, 35, 30, 429, 98, 35, 32, 4260, 3409, 26, 6558, 27, 517, 9807, 36, 30, 7715, 293]}
{"line_number": 80, "line_type": "generated", "code": "\n    /** {@inheritDoc}\n     * @see #pointAt(double)\n     */\n    public Vector3D toSpace(final Vector<Euclidean1D> point) {\n        return pointAt(point.getX());\n    }", "entropy": 0.153564453125, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.748046875, 0.0814208984375, 0.1927490234375, 0.00011920928955078125, 0.0005645751953125, 0.119873046875, 0.023956298828125, 0.134765625, 0.0584716796875, 0.047454833984375, 0.418701171875, 0.00020372867584228516, 0.00038170814514160156, 0.004901885986328125, 0.00029921531677246094, 0.00202178955078125, 0.0215911865234375, 0.00848388671875, 0.00952911376953125, 0.0703125, 1.029296875, 0.0004162788391113281, 0.96484375, 0.001678466796875, 0.0005288124084472656, 0.00798797607421875, 0.0042572021484375, 1.2490234375, 0.00027751922607421875, 1.1920928955078125e-05, 0.0008673667907714844, 2.384185791015625e-06, 2.300739288330078e-05, 0.908203125, 0.0031719207763671875, 0.01424407958984375, 0.013580322265625, 0.031036376953125, 0.270751953125, 0.0186614990234375, 0.50341796875, 0.004253387451171875, 0.00046062469482421875, 0.1097412109375, 0.084228515625, 0.053314208984375, 0.0006422996520996094], "tokens": [284, 1022, 3088, 18446, 111, 275, 319, 477, 2970, 588, 1493, 1076, 26, 2627, 27, 275, 569, 284, 562, 4107, 37, 54, 372, 5135, 26, 3220, 4107, 46, 55, 34986, 35, 54, 48, 2260, 27, 301, 291, 442, 2260, 1076, 26, 1493, 32, 18817, 1035, 284, 320]}
{"line_number": 81, "line_type": "original", "code": "    }", "entropy": 3.33984375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [2.197265625, 4.484375], "tokens": [264, 320]}
{"line_number": 81, "line_type": "generated", "code": "\n\n    /** {@inheritDoc}\n     * @see #pointAt(double)\n     */\n    public Vector<Euclidean3D> fromSubSpace(final Vector1D point) {\n        return pointAt(point.getX());\n    }\n\n    /** Get a", "entropy": 0.1639404296875, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.541015625, 0.020782470703125, 0.3740234375, 0.00017309188842773438, 0.0003819465637207031, 0.1136474609375, 0.01323699951171875, 0.1278076171875, 0.05078125, 0.041351318359375, 0.41796875, 0.00014531612396240234, 0.0003638267517089844, 0.003536224365234375, 0.00024271011352539062, 0.001560211181640625, 0.0302734375, 0.0034580230712890625, 0.0126953125, 0.06854248046875, 0.54345703125, 0.0013666152954101562, 8.463859558105469e-06, 0.30126953125, 1.1920928955078125e-06, 0.00011563301086425781, 1.5029296875, 0.0014314651489257812, 0.00011324882507324219, 2.5510787963867188e-05, 0.005214691162109375, 0.00144195556640625, 0.3330078125, 9.894371032714844e-06, 0.51806640625, 0.0048370361328125, 0.0087890625, 0.006023406982421875, 0.0213165283203125, 0.49951171875, 0.007488250732421875, 0.0300750732421875, 0.0007295608520507812, 0.00010180473327636719, 0.232177734375, 0.00579833984375, 0.07537841796875, 0.00035881996154785156, 0.423583984375, 0.023193359375, 1.2919921875, 0.859375], "tokens": [446, 1022, 3088, 18446, 111, 275, 319, 477, 2970, 588, 1493, 1076, 26, 2627, 27, 275, 569, 284, 562, 4107, 46, 55, 34986, 37, 54, 48, 645, 1721, 5135, 26, 3220, 4107, 35, 54, 2260, 27, 301, 291, 442, 2260, 1076, 26, 1493, 32, 18817, 1035, 284, 320, 446, 1022, 1390, 312]}
