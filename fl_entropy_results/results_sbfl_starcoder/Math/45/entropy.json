{"line_number": 49, "line_type": "original", "code": "        super(rowDimension, columnDimension);", "entropy": 4.09765625, "is_bug_line": true, "sus_score": 0.1796053020267749, "per_token_entropy": [3.32421875, 10.0625, 10.1484375, 0.7236328125, 10.90625, 0.212646484375, 0.257080078125, 0.00806427001953125, 1.2216796875], "tokens": [351, 2599, 26, 643, 9883, 30, 2623, 9883, 293]}
{"line_number": 49, "line_type": "generated", "code": "\n            final int column = iterator.key() % columns;\n            out.setEntry(row, column, out.getEntry(row, column) + iterator.value());\n        }\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    @Override", "entropy": 0.1402587890625, "is_bug_line": true, "sus_score": 0.1796053020267749, "per_token_entropy": [0.2127685546875, 0.814453125, 0.063232421875, 0.1639404296875, 0.0018453598022460938, 0.00872039794921875, 3.7670135498046875e-05, 0.0005922317504882812, 0.00033593177795410156, 0.067138671875, 0.0034580230712890625, 0.002521514892578125, 0.242919921875, 0.83935546875, 0.0008578300476074219, 1.1181640625, 0.007476806640625, 0.00464630126953125, 0.006664276123046875, 0.00046133995056152344, 0.00946807861328125, 0.00016164779663085938, 1.0458984375, 0.000141143798828125, 0.08038330078125, 0.0032291412353515625, 0.0003666877746582031, 0.0001537799835205078, 0.0025691986083984375, 0.0019989013671875, 0.020904541015625, 0.0279693603515625, 0.0015735626220703125, 0.00439453125, 0.0198974609375, 0.093017578125, 0.0015211105346679688, 0.4208984375, 0.0055389404296875, 0.0008902549743652344, 0.00054168701171875, 1.1201171875, 0.0002739429473876953, 0.0675048828125, 0.006526947021484375, 0.76123046875, 2.4437904357910156e-05, 0.0005350112915039062, 0.0017843246459960938, 0.005828857421875, 0.0278167724609375, 0.0002994537353515625], "tokens": [324, 1158, 629, 2623, 280, 10032, 32, 678, 346, 904, 6090, 45, 324, 963, 32, 470, 2711, 26, 643, 30, 2623, 30, 963, 32, 48895, 26, 643, 30, 2623, 27, 474, 10032, 32, 853, 1035, 291, 320, 584, 442, 963, 45, 446, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788]}
{"line_number": 50, "line_type": "original", "code": "        this.rows = rowDimension;", "entropy": 2.638671875, "is_bug_line": true, "sus_score": 0.1796053020267749, "per_token_entropy": [3.52734375, 5.30859375, 0.01181793212890625, 7.36328125, 0.2098388671875, 1.71484375, 2.92578125, 0.0443115234375], "tokens": [351, 458, 32, 2138, 280, 2698, 9883, 45]}
{"line_number": 50, "line_type": "generated", "code": "\n            final int column = iterator.key() % columns;\n            out.entries.addToValue(row * columns + column, iterator.value());\n        }\n\n        return out;\n    }\n\n    /**\n     * Compute the difference of this matrix and {@code m", "entropy": 0.141845703125, "is_bug_line": true, "sus_score": 0.1796053020267749, "per_token_entropy": [0.167236328125, 0.74560546875, 0.07684326171875, 0.189697265625, 0.0022754669189453125, 0.0089569091796875, 4.661083221435547e-05, 0.0007872581481933594, 0.000576019287109375, 0.0684814453125, 0.004680633544921875, 0.0028018951416015625, 0.26025390625, 0.84375, 0.0009360313415527344, 0.9482421875, 0.001613616943359375, 0.260986328125, 0.8876953125, 0.00848388671875, 0.10009765625, 0.239013671875, 0.0240020751953125, 0.0008792877197265625, 0.001087188720703125, 0.0010347366333007812, 0.0300445556640625, 0.00021016597747802734, 0.004680633544921875, 0.01064300537109375, 0.05816650390625, 0.001239776611328125, 0.465576171875, 0.01264190673828125, 0.0009832382202148438, 0.0006198883056640625, 0.411865234375, 8.916854858398438e-05, 0.12420654296875, 0.0070953369140625, 0.51416015625, 2.968311309814453e-05, 0.40966796875, 0.132568359375, 0.14697265625, 0.1656494140625, 0.00010251998901367188, 0.0012054443359375, 0.00244903564453125, 0.027252197265625, 8.308887481689453e-05, 9.1552734375e-05], "tokens": [324, 1158, 629, 2623, 280, 10032, 32, 678, 346, 904, 6090, 45, 324, 963, 32, 9150, 32, 23402, 882, 26, 643, 319, 6090, 474, 2623, 30, 10032, 32, 853, 1035, 291, 320, 584, 442, 963, 45, 284, 320, 446, 1022, 275, 319, 12836, 322, 10563, 432, 458, 5045, 461, 3088, 687, 345]}
{"line_number": 51, "line_type": "original", "code": "        this.columns = columnDimension;", "entropy": 3.705078125, "is_bug_line": true, "sus_score": 0.1796053020267749, "per_token_entropy": [4.3671875, 5.42578125, 0.0068511962890625, 11.734375, 1.263671875, 5.54296875, 1.1767578125, 0.127685546875], "tokens": [351, 458, 32, 6057, 280, 2623, 9883, 45]}
{"line_number": 51, "line_type": "generated", "code": "\n            final int column = iterator.key() % columns;\n            final double value = iterator.value();\n            out.addEntry(row, column, value);\n        }\n\n        return out;\n\n    }\n\n    /**\n     * Subtract {@code m} from this", "entropy": 0.1983642578125, "is_bug_line": true, "sus_score": 0.1796053020267749, "per_token_entropy": [0.10205078125, 1.0185546875, 0.11309814453125, 0.2415771484375, 0.0022335052490234375, 0.0079345703125, 3.838539123535156e-05, 0.0006647109985351562, 0.0005197525024414062, 0.0670166015625, 0.00372314453125, 0.00296783447265625, 0.26025390625, 0.79345703125, 0.03363037109375, 0.07598876953125, 0.0085906982421875, 0.058990478515625, 0.00010395050048828125, 0.00426483154296875, 0.05322265625, 0.1865234375, 0.384521484375, 0.0008802413940429688, 2.041015625, 0.26025390625, 0.00415802001953125, 0.0051727294921875, 0.0004930496215820312, 0.002269744873046875, 9.679794311523438e-05, 0.00955963134765625, 0.00753021240234375, 0.07305908203125, 0.0012617111206054688, 0.4677734375, 0.00708770751953125, 0.000934600830078125, 0.0005102157592773438, 1.0390625, 0.0003063678741455078, 0.0867919921875, 0.01438140869140625, 0.49658203125, 3.075599670410156e-05, 2.2734375, 0.08258056640625, 0.00024008750915527344, 0.00307464599609375, 0.0014362335205078125, 0.01425933837890625, 0.0017328262329101562], "tokens": [324, 1158, 629, 2623, 280, 10032, 32, 678, 346, 904, 6090, 45, 324, 1158, 2064, 786, 280, 10032, 32, 853, 473, 324, 963, 32, 669, 2711, 26, 643, 30, 2623, 30, 786, 293, 291, 320, 584, 442, 963, 45, 446, 320, 446, 1022, 275, 319, 48588, 3088, 687, 345, 111, 645, 458]}
{"line_number": 52, "line_type": "original", "code": "        this.entries = new OpenIntToDoubleHashMap(0.0);", "entropy": 2.126953125, "is_bug_line": true, "sus_score": 0.1796053020267749, "per_token_entropy": [2.46875, 7.15625, 0.01221466064453125, 0.650390625, 10.3671875, 3.037109375, 0.0333251953125, 0.01212310791015625, 0.0004572868347167969, 0.00042939186096191406, 0.09375, 6.33984375, 1.4462890625, 0.033721923828125, 0.25927734375], "tokens": [351, 458, 32, 9150, 280, 537, 3927, 1428, 40609, 8254, 26, 34, 32, 34, 293]}
{"line_number": 52, "line_type": "generated", "code": "\n            out.setEntry(row, col, iterator.value());\n        }\n\n        return out;\n    }\n\n    /**\n     * Compute the difference of this matrix and {@code m}.\n     *\n     * @param m Matrix to be subtracted.\n     *", "entropy": 0.1346435546875, "is_bug_line": true, "sus_score": 0.1796053020267749, "per_token_entropy": [0.8134765625, 0.6826171875, 0.00122833251953125, 0.9833984375, 0.004344940185546875, 0.003421783447265625, 0.005313873291015625, 0.0005335807800292969, 0.007228851318359375, 0.00023412704467773438, 1.2158203125, 0.0009045600891113281, 0.008819580078125, 0.39697265625, 0.12042236328125, 0.0016164779663085938, 0.56005859375, 0.009521484375, 0.0011663436889648438, 0.000896453857421875, 0.367919921875, 0.0002199411392211914, 0.208984375, 0.008819580078125, 0.580078125, 2.9921531677246094e-05, 0.469482421875, 0.143310546875, 0.1446533203125, 0.1856689453125, 9.59634780883789e-05, 0.0012969970703125, 0.0025386810302734375, 0.0295562744140625, 7.939338684082031e-05, 8.988380432128906e-05, 0.0020275115966796875, 0.0017375946044921875, 1.2874603271484375e-05, 0.00798797607421875, 2.1457672119140625e-06, 0.0009236335754394531, 0.00019502639770507812, 0.0003349781036376953, 0.0024566650390625, 9.393692016601562e-05, 0.0004107952117919922, 0.0244293212890625, 0.0002071857452392578, 0.003917694091796875, 0.00028705596923828125, 5.245208740234375e-06], "tokens": [324, 963, 32, 470, 2711, 26, 643, 30, 932, 30, 10032, 32, 853, 1035, 291, 320, 584, 442, 963, 45, 284, 320, 446, 1022, 275, 319, 12836, 322, 10563, 432, 458, 5045, 461, 3088, 687, 345, 4009, 275, 319, 275, 319, 477, 753, 345, 9320, 372, 526, 27799, 318, 32, 275, 319]}
{"line_number": 53, "line_type": "original", "code": "    }", "entropy": 2.025390625, "is_bug_line": false, "sus_score": 0.1796053020267749, "per_token_entropy": [3.650390625, 0.401611328125], "tokens": [264, 320]}
{"line_number": 53, "line_type": "generated", "code": "\n        }\n\n        return out;\n\n    }\n\n    /**\n     * Compute the difference of this matrix and {@code m}.\n     *\n     * @param m Matrix to be subtracted.\n     * @return {@code this} - m.\n     * @throws org", "entropy": 0.1224365234375, "is_bug_line": false, "sus_score": 0.1796053020267749, "per_token_entropy": [0.373779296875, 0.27978515625, 0.6708984375, 0.0155487060546875, 0.0011844635009765625, 0.0012378692626953125, 1.576171875, 0.00222015380859375, 0.126953125, 0.00597381591796875, 0.57275390625, 2.6941299438476562e-05, 0.39794921875, 0.114013671875, 0.120849609375, 0.1685791015625, 9.250640869140625e-05, 0.0011606216430664062, 0.002227783203125, 0.032196044921875, 7.426738739013672e-05, 8.869171142578125e-05, 0.0016736984252929688, 0.0018243789672851562, 1.3828277587890625e-05, 0.00878143310546875, 4.291534423828125e-06, 0.0008687973022460938, 0.00016355514526367188, 0.00031185150146484375, 0.0024623870849609375, 8.845329284667969e-05, 0.0004050731658935547, 0.025146484375, 0.0001952648162841797, 0.00405120849609375, 0.0003247261047363281, 5.602836608886719e-06, 0.00072479248046875, 0.0002334117889404297, 0.004917144775390625, 5.817413330078125e-05, 0.0003898143768310547, 0.0002448558807373047, 0.55908203125, 1.2197265625, 0.0127716064453125, 0.0011434555053710938, 0.0017061233520507812, 0.0003101825714111328, 0.0007143020629882812, 0.05487060546875], "tokens": [291, 320, 584, 442, 963, 45, 446, 320, 446, 1022, 275, 319, 12836, 322, 10563, 432, 458, 5045, 461, 3088, 687, 345, 4009, 275, 319, 275, 319, 477, 753, 345, 9320, 372, 526, 27799, 318, 32, 275, 319, 477, 601, 3088, 687, 458, 111, 429, 345, 32, 275, 319, 477, 5117, 1086]}
