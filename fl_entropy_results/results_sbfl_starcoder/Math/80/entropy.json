{"line_number": 871, "line_type": "original", "code": "                    i0 = 1 + i / 4;", "entropy": 2.013671875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [4.37109375, 4.29296875, 0.051666259765625, 0.2364501953125, 3.466796875, 4.43359375, 0.50732421875, 4.8125, 1.9833984375, 0.001102447509765625, 0.0030994415283203125, 0.0158233642578125], "tokens": [4696, 595, 34, 280, 225, 35, 474, 595, 517, 225, 38, 45]}
{"line_number": 871, "line_type": "generated", "code": "\n                    // if the last element of qd array is very small,\n                    // remove the last split\n                    if (split == n0 - 1) {\n                        n0--;\n                    } else {\n                        // if the last element of qd array is not", "entropy": 0.6728515625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.135986328125, 1.7724609375, 3.423828125, 1.271484375, 1.61328125, 1.1884765625, 0.379638671875, 0.16015625, 0.03411865234375, 0.40283203125, 0.1622314453125, 1.2548828125, 0.04412841796875, 0.82763671875, 0.90576171875, 0.007541656494140625, 3.73828125, 1.310546875, 0.67041015625, 1.408203125, 1.34375, 0.146240234375, 0.210205078125, 1.1171875, 0.3037109375, 0.404541015625, 0.055816650390625, 0.1395263671875, 0.007244110107421875, 0.140869140625, 0.042877197265625, 0.00955963134765625, 0.024444580078125, 1.2216796875, 0.002719879150390625, 0.58642578125, 0.583984375, 0.0175933837890625, 0.52392578125, 0.053985595703125, 0.040557861328125, 0.72705078125, 2.8671875, 0.6669921875, 0.9111328125, 0.76220703125, 0.1202392578125, 0.070068359375, 0.01050567626953125, 0.05499267578125, 0.14013671875, 0.97802734375], "tokens": [528, 434, 415, 322, 2401, 1994, 432, 2678, 86, 1417, 438, 5029, 5532, 30, 528, 434, 3345, 322, 2401, 6122, 528, 415, 308, 2998, 610, 310, 34, 429, 225, 35, 27, 301, 715, 310, 34, 10612, 528, 320, 813, 301, 715, 434, 415, 322, 2401, 1994, 432, 2678, 86, 1417, 438, 646]}
{"line_number": 872, "line_type": "original", "code": "                    break;", "entropy": 3.453125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.40234375, 3.94921875, 0.005889892578125], "tokens": [4696, 1626, 45]}
{"line_number": 872, "line_type": "generated", "code": "\n                    // check for new splits after \"pong\" steps\n                    if (split == i0 - 1) {\n                        // no new splits found\n                        break;\n                    }\n\n                    // check for degeneracy\n                    if (split == n0 - 1", "entropy": 0.67919921875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.52783203125, 1.845703125, 1.9130859375, 1.017578125, 1.0048828125, 0.3759765625, 0.830078125, 0.0726318359375, 0.03021240234375, 0.0007963180541992188, 0.0035858154296875, 0.021759033203125, 0.0657958984375, 1.1181640625, 0.64990234375, 1.0927734375, 2.09375, 0.36376953125, 0.0006308555603027344, 0.1505126953125, 0.0015716552734375, 0.00628662109375, 0.062286376953125, 0.00461578369140625, 0.044525146484375, 1.3173828125, 1.1494140625, 0.56396484375, 0.880859375, 1.1953125, 0.8203125, 1.5322265625, 0.00027680397033691406, 0.0085601806640625, 0.0002446174621582031, 1.5126953125, 0.1280517578125, 2.37109375, 1.2451171875, 2.744140625, 0.59375, 0.05303955078125, 0.87060546875, 0.68310546875, 0.2142333984375, 1.39453125, 0.685546875, 1.37109375, 0.10357666015625, 0.46923828125, 0.004741668701171875, 0.093017578125], "tokens": [528, 434, 1505, 436, 537, 32393, 2685, 313, 98, 788, 20, 6655, 528, 415, 308, 2998, 610, 595, 34, 429, 225, 35, 27, 301, 715, 434, 1289, 537, 32393, 2431, 715, 1626, 45, 528, 320, 3688, 434, 1505, 436, 409, 2178, 4008, 528, 415, 308, 2998, 610, 310, 34, 429, 225, 35]}
{"line_number": 944, "line_type": "original", "code": "                    work[i + 2] = -0.0;", "entropy": 1.8505859375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [8.6171875, 3.828125, 0.0374755859375, 6.19140625, 0.9306640625, 0.042572021484375, 0.9599609375, 0.05029296875, 0.67236328125, 1.02734375, 3.49609375, 0.01308441162109375, 0.01192474365234375, 0.033416748046875], "tokens": [4696, 1389, 77, 91, 474, 225, 36, 79, 280, 429, 34, 32, 34, 45]}
{"line_number": 944, "line_type": "generated", "code": "\n        for (int i = end - 1; i >= start; --i) {\n            final int j = i - 1;\n            final double di = work[4 * i + pingPong];\n            final double dj = work[4", "entropy": 0.34033203125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.363037109375, 1.150390625, 0.0031642913818359375, 0.01209259033203125, 0.1669921875, 0.0096893310546875, 1.2919921875, 0.70263671875, 0.0099334716796875, 0.351806640625, 0.061981201171875, 0.0105133056640625, 0.129638671875, 0.0250396728515625, 0.1158447265625, 0.265869140625, 0.0010242462158203125, 0.0020599365234375, 0.00820159912109375, 0.163330078125, 0.99609375, 0.73388671875, 0.75927734375, 0.127197265625, 0.1575927734375, 0.393798828125, 0.6708984375, 0.1865234375, 0.06011962890625, 0.095703125, 0.77880859375, 0.374267578125, 3.73828125, 0.179443359375, 0.12646484375, 0.0031642913818359375, 0.61181640625, 0.003326416015625, 0.0809326171875, 0.67822265625, 0.21630859375, 0.0004317760467529297, 3.5762786865234375e-07, 0.1279296875, 0.042449951171875, 0.4111328125, 0.0049591064453125, 1.2080078125, 0.00652313232421875, 0.0609130859375, 0.0002741813659667969, 0.0156097412109375], "tokens": [291, 436, 308, 410, 595, 280, 943, 429, 225, 35, 45, 595, 2377, 1477, 45, 769, 91, 27, 301, 324, 1158, 629, 594, 280, 595, 429, 225, 35, 45, 324, 1158, 2064, 2068, 280, 1389, 77, 38, 319, 595, 474, 17007, 66, 788, 970, 324, 1158, 2064, 48157, 280, 1389, 77, 38]}
{"line_number": 945, "line_type": "original", "code": "                    d = work[i];", "entropy": 3.041015625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [8.5859375, 5.26953125, 0.65283203125, 0.4970703125, 0.019256591796875, 5.10546875, 1.1494140625], "tokens": [4696, 343, 280, 1389, 77, 91, 970]}
{"line_number": 945, "line_type": "generated", "code": "\n        for (int i = start; i < end; i += 4) {\n\n            final double[] h = work;\n\n            final double f = h[i + 1];\n            final double b = h[i + 2];\n\n            //", "entropy": 0.5888671875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.86083984375, 1.3681640625, 0.004100799560546875, 0.0194244384765625, 0.23193359375, 0.0166015625, 0.56982421875, 0.28955078125, 0.00936126708984375, 0.3037109375, 0.01456451416015625, 0.431884765625, 0.86083984375, 0.253662109375, 0.006412506103515625, 0.095947265625, 0.002811431884765625, 0.0049591064453125, 1.673828125, 1.1103515625, 0.2354736328125, 3.7578125, 4.2265625, 0.5546875, 0.7626953125, 0.392822265625, 1.4599609375, 0.6728515625, 0.07843017578125, 1.6640625, 0.56982421875, 0.12451171875, 0.00304412841796875, 0.057586669921875, 0.81494140625, 0.0062713623046875, 0.95166015625, 0.16748046875, 0.1064453125, 0.08056640625, 0.0009436607360839844, 0.84228515625, 0.006160736083984375, 0.045074462890625, 0.0024700164794921875, 0.0113372802734375, 0.14453125, 0.0018825531005859375, 1.1923828125, 0.0596923828125, 1.5380859375, 1.94921875], "tokens": [291, 436, 308, 410, 595, 280, 1477, 45, 595, 333, 943, 45, 595, 1454, 225, 38, 27, 301, 1064, 1158, 2064, 1178, 420, 280, 1389, 45, 1064, 1158, 2064, 296, 280, 420, 77, 91, 474, 225, 35, 970, 324, 1158, 2064, 323, 280, 420, 77, 91, 474, 225, 36, 970, 1064, 434]}
{"line_number": 957, "line_type": "original", "code": "                    work[i]     = -0.0;", "entropy": 3.4140625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.3203125, 3.48828125, 0.0147247314453125, 7.56640625, 2.314453125, 7.08203125, 9.328125, 2.42578125, 1.712890625, 0.01468658447265625, 0.07904052734375, 0.62158203125], "tokens": [4696, 1389, 77, 91, 79, 262, 280, 429, 34, 32, 34, 45]}
{"line_number": 957, "line_type": "generated", "code": "\n                (MathUtils.SAFE_MIN * work[k + 4] < work[k])) {\n                // step 1a:\n                //\n                // the eigenvalue of index deflatedEnd is real\n                //\n                // deflate the array\n               ", "entropy": 0.77783203125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.5859375, 0.404541015625, 0.57080078125, 0.509765625, 0.00018775463104248047, 0.29248046875, 5.459785461425781e-05, 0.00811004638671875, 0.128173828125, 0.37060546875, 0.006420135498046875, 0.1239013671875, 1.4296875, 0.002349853515625, 0.86669921875, 0.0196075439453125, 0.4892578125, 0.1361083984375, 0.0008254051208496094, 0.04632568359375, 0.87646484375, 0.0221710205078125, 0.6875, 0.2333984375, 2.619140625, 0.01055145263671875, 0.9443359375, 0.8935546875, 0.1414794921875, 3.05078125, 0.285400390625, 3.2421875, 0.0124053955078125, 3.30859375, 0.99560546875, 0.1651611328125, 1.6279296875, 0.5068359375, 0.8046875, 0.00533294677734375, 0.00986480712890625, 1.21875, 1.107421875, 0.935546875, 0.159912109375, 1.203125, 0.2152099609375, 2.830078125, 1.2919921875, 1.0234375, 2.4765625, 1.525390625], "tokens": [400, 308, 5717, 2755, 32, 24154, 81, 4683, 319, 1389, 77, 93, 474, 225, 38, 79, 333, 1389, 77, 93, 5259, 301, 400, 434, 3111, 225, 35, 83, 44, 400, 434, 400, 434, 322, 30880, 853, 432, 1650, 665, 11629, 2102, 438, 4011, 400, 434, 400, 434, 665, 1089, 322, 1417, 400]}
{"line_number": 958, "line_type": "original", "code": "                    work[j]     = d;", "entropy": 5.140625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.07421875, 2.623046875, 0.0119781494140625, 8.8515625, 1.1875, 7.89453125, 10.9140625, 3.916015625, 4.81640625], "tokens": [4696, 1389, 77, 92, 79, 262, 280, 343, 45]}
{"line_number": 958, "line_type": "generated", "code": "\n                    (work[k - 2] < work[k - 4]) &&\n                    (work[k - 2] < work[k - 6]) &&\n                    (work[k - 4] < work[k - 6", "entropy": 0.2568359375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.728515625, 0.402099609375, 0.82958984375, 0.005462646484375, 0.1656494140625, 0.32666015625, 0.005863189697265625, 1.0263671875, 0.0810546875, 1.5458984375, 0.6103515625, 0.0012025833129882812, 0.0277099609375, 0.767578125, 0.0009570121765136719, 0.2054443359375, 0.22802734375, 0.310791015625, 0.191650390625, 0.06939697265625, 0.10894775390625, 0.0003991127014160156, 0.0086669921875, 0.21826171875, 0.0015974044799804688, 0.66943359375, 0.00414276123046875, 0.1966552734375, 0.0246124267578125, 0.00251007080078125, 0.008514404296875, 0.9189453125, 0.005146026611328125, 0.055572509765625, 0.80126953125, 0.0350341796875, 0.085205078125, 0.0218658447265625, 0.06732177734375, 0.0004050731658935547, 0.004238128662109375, 0.1622314453125, 0.000560760498046875, 1.1904296875, 0.0014209747314453125, 0.08465576171875, 0.00952911376953125, 0.0002913475036621094, 0.0006017684936523438, 0.10302734375, 0.0018835067749023438, 0.024505615234375], "tokens": [528, 308, 1007, 77, 93, 429, 225, 36, 79, 333, 1389, 77, 93, 429, 225, 38, 1130, 962, 528, 308, 1007, 77, 93, 429, 225, 36, 79, 333, 1389, 77, 93, 429, 225, 40, 1130, 962, 528, 308, 1007, 77, 93, 429, 225, 38, 79, 333, 1389, 77, 93, 429, 225, 40]}
{"line_number": 959, "line_type": "original", "code": "                    work[j + 2] = 0.0;", "entropy": 2.78125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.13671875, 4.36328125, 0.01398468017578125, 10.140625, 1.3876953125, 0.03558349609375, 0.5849609375, 0.01471710205078125, 11.21875, 1.96875, 0.0313720703125, 0.2083740234375, 0.009185791015625, 1.8154296875], "tokens": [4696, 1389, 77, 92, 474, 225, 36, 79, 280, 225, 34, 32, 34, 45]}
{"line_number": 959, "line_type": "generated", "code": "\n                  (Math.abs(work[k - 5]) <= Math.abs(sigma) * TOLERANCE_2)))) {\n\n                // the eigenvalue is real\n                work[k - 2] = -0.0;\n                def", "entropy": 0.435791015625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.48828125, 0.46240234375, 0.6162109375, 1.3984375, 0.1771240234375, 0.01145172119140625, 0.2132568359375, 0.0009212493896484375, 0.0260009765625, 0.0638427734375, 0.0007886886596679688, 1.0908203125, 0.7744140625, 0.2076416015625, 1.47265625, 0.052154541015625, 0.1490478515625, 0.002643585205078125, 0.1380615234375, 0.385986328125, 0.08416748046875, 0.2275390625, 0.004024505615234375, 0.0012922286987304688, 0.00010216236114501953, 0.192626953125, 0.424560546875, 0.5517578125, 0.031707763671875, 0.712890625, 0.2646484375, 1.9697265625, 1.4404296875, 0.149169921875, 1.091796875, 0.6103515625, 0.46240234375, 1.7265625, 0.0035381317138671875, 0.132080078125, 0.2469482421875, 0.00354766845703125, 1.3203125, 0.0108642578125, 0.1693115234375, 1.166015625, 0.34814453125, 0.029876708984375, 0.00199127197265625, 0.0115509033203125, 0.39453125, 1.146484375], "tokens": [1750, 308, 5717, 32, 3596, 26, 1007, 77, 93, 429, 225, 39, 1130, 2511, 4175, 32, 3596, 26, 11756, 27, 319, 394, 1752, 527, 6307, 81, 36, 7748, 301, 2110, 434, 322, 30880, 853, 438, 4011, 400, 1389, 77, 93, 429, 225, 36, 79, 280, 429, 34, 32, 34, 45, 400, 665]}
{"line_number": 960, "line_type": "original", "code": "                    d = work[i + 2];", "entropy": 2.92578125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [8.2265625, 6.3515625, 0.83837890625, 0.381103515625, 0.00159454345703125, 10.4375, 1.759765625, 0.2274169921875, 0.54345703125, 0.48486328125], "tokens": [4696, 343, 280, 1389, 77, 91, 474, 225, 36, 970]}
{"line_number": 960, "line_type": "generated", "code": "\n                // the eigenvalue at the end of the array is real\n                deflating = false;\n                if (start == deflatedEnd - 1) {\n                    // the array has only one element\n                    return deflatedEnd;\n                }\n                // move the", "entropy": 0.5966796875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.330810546875, 0.73486328125, 2.099609375, 0.958984375, 0.1864013671875, 1.8662109375, 1.18359375, 0.2880859375, 0.63916015625, 0.015655517578125, 0.55419921875, 0.1348876953125, 0.818359375, 0.343505859375, 1.755859375, 0.406005859375, 0.034515380859375, 0.012115478515625, 0.00012934207916259766, 0.98193359375, 2.349609375, 0.06732177734375, 0.966796875, 1.2041015625, 0.07611083984375, 2.086162567138672e-05, 6.23464584350586e-05, 0.0192108154296875, 0.00032973289489746094, 0.1934814453125, 0.0021820068359375, 0.00252532958984375, 0.047943115234375, 0.81689453125, 1.5546875, 0.7626953125, 0.471435546875, 1.2861328125, 0.658203125, 0.5712890625, 0.438232421875, 0.8515625, 0.53271484375, 0.001926422119140625, 0.00027871131896972656, 0.261962890625, 0.0217437744140625, 0.0007987022399902344, 1.25, 0.68994140625, 2.375, 0.201171875], "tokens": [400, 434, 322, 30880, 853, 821, 322, 943, 432, 322, 1417, 438, 4011, 400, 665, 27055, 280, 901, 45, 400, 415, 308, 1366, 610, 665, 11629, 2102, 429, 225, 35, 27, 301, 528, 434, 322, 1417, 1401, 1755, 1591, 1994, 528, 442, 665, 11629, 2102, 45, 400, 320, 400, 434, 5169, 322]}
{"line_number": 1055, "line_type": "original", "code": "                dMin2 = Math.min(dMin2, work[l - 1]);", "entropy": 1.1220703125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.109375, 3.546875, 0.375732421875, 2.34765625, 0.80908203125, 1.8984375, 0.052215576171875, 0.984375, 0.0153350830078125, 0.30419921875, 0.11688232421875, 0.2181396484375, 0.1298828125, 1.5048828125, 0.0059661865234375, 1.1455078125, 0.039703369140625, 0.03717041015625, 1.39453125, 0.396484375], "tokens": [2071, 343, 2928, 36, 280, 4175, 32, 887, 26, 86, 2928, 36, 30, 1389, 77, 94, 429, 225, 35, 1989]}
{"line_number": 1055, "line_type": "generated", "code": "\n                        tau *= 0.25;\n                        tType += 11;\n                    }\n                } else if (dMin > 0.0) {\n                    // tau too small. Select new tau and try again.\n                    if (tType >", "entropy": 0.205078125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.09991455078125, 0.6142578125, 0.422119140625, 0.058837890625, 0.0328369140625, 2.3365020751953125e-05, 0.0648193359375, 0.0008220672607421875, 0.0148773193359375, 0.379150390625, 0.12420654296875, 0.0004527568817138672, 0.892578125, 0.0601806640625, 0.3076171875, 0.31103515625, 0.0036983489990234375, 0.076904296875, 0.0019893646240234375, 1.595703125, 0.002529144287109375, 0.10089111328125, 0.98974609375, 0.1868896484375, 0.378662109375, 0.09661865234375, 1.2626953125, 0.251220703125, 0.0176544189453125, 0.1219482421875, 0.005077362060546875, 0.0443115234375, 0.0034809112548828125, 0.06640625, 0.1524658203125, 0.7197265625, 0.081298828125, 0.003757476806640625, 0.1591796875, 0.3134765625, 0.0108489990234375, 0.00887298583984375, 0.00870513916015625, 0.00034809112548828125, 0.0019588470458984375, 0.0489501953125, 0.03369140625, 0.1712646484375, 0.041961669921875, 0.1322021484375, 0.0013446807861328125, 0.1845703125], "tokens": [715, 30225, 10439, 225, 34, 32, 36, 39, 45, 715, 273, 620, 1454, 225, 35, 35, 45, 528, 320, 400, 320, 813, 415, 308, 86, 2928, 848, 225, 34, 32, 34, 27, 301, 528, 434, 30225, 5133, 5532, 32, 6608, 537, 30225, 461, 1596, 4056, 32, 528, 415, 308, 102, 620, 848]}
{"line_number": 1056, "line_type": "original", "code": "                work[l - 1] =", "entropy": 1.6171875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.40234375, 3.65234375, 0.01438140869140625, 1.578125, 0.1351318359375, 0.056243896484375, 1.16796875, 0.1513671875, 1.3974609375], "tokens": [2071, 1389, 77, 94, 429, 225, 35, 79, 280]}
{"line_number": 1056, "line_type": "generated", "code": "\n                        tType -= 1;\n                    }\n                    updateSigma(tau);\n                } else {\n                    // tau too small. Select new tau and try again.\n                    if (tType > 22) {\n                        // failed twice. Play it safe.", "entropy": 0.22802734375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.447021484375, 0.5361328125, 0.00322723388671875, 0.76025390625, 0.0309600830078125, 0.419921875, 1.2177734375, 0.1051025390625, 0.002079010009765625, 0.58203125, 1.46875, 0.4423828125, 0.00807952880859375, 0.007080078125, 0.001453399658203125, 0.78564453125, 0.0012521743774414062, 0.03875732421875, 0.388671875, 0.07159423828125, 0.0906982421875, 0.80517578125, 0.10516357421875, 0.00470733642578125, 0.14794921875, 0.81982421875, 0.0134124755859375, 0.014404296875, 0.008056640625, 0.00047206878662109375, 0.0012731552124023438, 0.050872802734375, 0.0225677490234375, 0.302001953125, 0.06842041015625, 0.24267578125, 0.0016460418701171875, 0.50634765625, 0.22509765625, 0.64599609375, 0.2314453125, 0.0140838623046875, 0.0033397674560546875, 0.00954437255859375, 0.0295257568359375, 0.05401611328125, 0.01253509521484375, 0.0163116455078125, 0.071533203125, 0.001026153564453125, 0.0018587112426757812, 0.0196380615234375], "tokens": [715, 273, 620, 5912, 225, 35, 45, 528, 320, 528, 1974, 28326, 26, 20635, 293, 400, 320, 813, 301, 528, 434, 30225, 5133, 5532, 32, 6608, 537, 30225, 461, 1596, 4056, 32, 528, 415, 308, 102, 620, 848, 225, 36, 36, 27, 301, 715, 434, 3803, 19465, 32, 11761, 561, 10061, 32]}
{"line_number": 1059, "line_type": "original", "code": "                work[l - 2 * pingPong] =", "entropy": 1.140625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.45703125, 2.779296875, 0.00783538818359375, 2.63671875, 0.1805419921875, 0.027008056640625, 1.2880859375, 0.27587890625, 0.0072784423828125, 3.898143768310547e-05, 1.1920928955078125e-06, 0.076171875, 0.09417724609375], "tokens": [2071, 1389, 77, 94, 429, 225, 36, 319, 17007, 66, 788, 79, 280]}
{"line_number": 1059, "line_type": "generated", "code": "\n                    // dMin is NaN. This should not happen.\n                    // Return the best result we have.\n                    updateSigma(tau);\n                    return deflatedEnd;\n                } else {\n                    // dMin is positive. This should not happen.\n                    // Return", "entropy": 0.58544921875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.1610107421875, 0.63623046875, 2.916015625, 1.36328125, 0.63916015625, 0.13525390625, 0.57470703125, 1.875, 1.267578125, 0.59423828125, 0.0736083984375, 0.6103515625, 0.52197265625, 1.1015625, 3.8203125, 1.6171875, 0.55908203125, 0.880859375, 1.130859375, 0.29150390625, 1.0693359375, 0.1407470703125, 0.859375, 0.0017986297607421875, 0.0062103271484375, 0.06793212890625, 0.0029888153076171875, 0.013916015625, 0.03839111328125, 0.043548583984375, 0.00012552738189697266, 0.0006403923034667969, 0.0226898193359375, 0.1766357421875, 0.002452850341796875, 0.1448974609375, 0.2939453125, 0.08294677734375, 0.061492919921875, 1.2529296875, 0.363525390625, 0.623046875, 0.68701171875, 0.458740234375, 2.03125, 0.42626953125, 0.024932861328125, 0.00249481201171875, 0.11187744140625, 0.054107666015625, 0.04583740234375, 0.56298828125], "tokens": [528, 434, 343, 2928, 438, 21644, 32, 1348, 1395, 646, 7292, 32, 528, 434, 2744, 322, 5273, 1056, 996, 1159, 32, 528, 1974, 28326, 26, 20635, 293, 528, 442, 665, 11629, 2102, 45, 400, 320, 813, 301, 528, 434, 343, 2928, 438, 11557, 32, 1348, 1395, 646, 7292, 32, 528, 434, 2744]}
{"line_number": 1062, "line_type": "original", "code": "                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));", "entropy": 0.8828125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.0078125, 7.35546875, 0.252685546875, 3.130859375, 0.1973876953125, 1.7744140625, 0.2374267578125, 0.359375, 0.01110076904296875, 0.258544921875, 0.007965087890625, 0.04595947265625, 2.56640625, 0.036590576171875, 0.771484375, 0.010894775390625, 0.39306640625, 0.002117156982421875, 2.888671875, 0.1558837890625, 0.01453399658203125, 0.0001157522201538086, 5.960464477539062e-07, 0.01558685302734375, 0.57373046875, 0.0004165172576904297, 0.1285400390625, 0.0029449462890625, 0.0024127960205078125, 2.384185791015625e-05, 7.152557373046875e-07, 0.041168212890625], "tokens": [2071, 2678, 2708, 225, 280, 4175, 32, 1449, 26, 99, 2708, 30, 4175, 32, 1449, 26, 1007, 77, 37, 474, 17007, 66, 788, 614, 1389, 77, 41, 474, 17007, 66, 788, 10674]}
{"line_number": 1062, "line_type": "generated", "code": "\n                    dMin = -0.0;\n                }\n\n                // choose a new shift\n                computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);\n\n                // check convergence\n                if (Math.abs(tau - dMin) < T", "entropy": 0.41943359375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.08648681640625, 1.9921875, 0.0692138671875, 0.51123046875, 0.59375, 0.070068359375, 0.005764007568359375, 0.0040435791015625, 0.0032501220703125, 0.44873046875, 0.0009713172912597656, 0.291748046875, 0.30078125, 2.791015625, 0.849609375, 0.0831298828125, 0.0679931640625, 0.406982421875, 0.2236328125, 0.00724029541015625, 0.0029697418212890625, 0.0034542083740234375, 0.005367279052734375, 0.000942230224609375, 0.00749969482421875, 1.0848045349121094e-05, 0.00025582313537597656, 0.0021648406982421875, 0.07257080078125, 0.0037670135498046875, 0.00408935546875, 2.014636993408203e-05, 0.00022530555725097656, 0.0061187744140625, 1.1435546875, 0.399658203125, 1.1337890625, 2.0, 0.2301025390625, 0.282470703125, 0.392333984375, 1.2392578125, 0.053253173828125, 0.10601806640625, 0.00742340087890625, 0.92724609375, 1.61328125, 1.046875, 0.34326171875, 0.376220703125, 0.60595703125, 1.001953125], "tokens": [528, 343, 2928, 280, 429, 34, 32, 34, 45, 400, 320, 2110, 434, 9173, 312, 537, 5733, 400, 7596, 10210, 13817, 26, 1366, 30, 665, 11629, 2102, 30, 943, 429, 665, 11629, 2102, 293, 2110, 434, 1505, 47454, 400, 415, 308, 5717, 32, 3596, 26, 20635, 429, 343, 2928, 27, 333, 394]}
{"line_number": 1063, "line_type": "original", "code": "                dMin  = -0.0;", "entropy": 2.17578125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.0, 3.181640625, 0.5380859375, 3.607421875, 0.07928466796875, 3.255859375, 3.080078125, 0.038787841796875, 0.859375, 0.11090087890625], "tokens": [2071, 343, 2928, 225, 280, 429, 34, 32, 34, 45]}
{"line_number": 1063, "line_type": "generated", "code": "\n                }\n            }\n        }\n\n        // step 4b: deflate again\n        if (deflateAgain(start, deflatedEnd, end - deflatedEnd)) {\n            // step 4b-i: dqds\n            for (boolean", "entropy": 0.52783203125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.1416015625, 0.0007834434509277344, 0.646484375, 0.0014944076538085938, 0.419189453125, 0.0015764236450195312, 1.1796875, 0.2049560546875, 0.677734375, 0.0022411346435546875, 0.202880859375, 0.116943359375, 0.0511474609375, 3.1953125, 0.1639404296875, 3.28125, 0.51220703125, 1.466796875, 0.25146484375, 1.1474609375, 0.55029296875, 0.375732421875, 0.482421875, 0.568359375, 0.0210113525390625, 0.18896484375, 0.0002727508544921875, 0.00266265869140625, 0.5205078125, 0.491943359375, 0.394287109375, 0.0211334228515625, 5.984306335449219e-05, 9.167194366455078e-05, 0.334228515625, 0.00604248046875, 0.18408203125, 1.4296875, 1.8603515625, 0.0037593841552734375, 0.8427734375, 0.43017578125, 2.185546875, 0.79052734375, 0.038330078125, 1.36328125, 0.01363372802734375, 0.0002675056457519531, 0.2127685546875, 0.315673828125, 0.08038330078125, 0.06109619140625], "tokens": [400, 320, 324, 320, 291, 320, 584, 434, 3111, 225, 38, 84, 44, 665, 1089, 4056, 291, 415, 308, 589, 1089, 28833, 26, 1366, 30, 665, 11629, 2102, 30, 943, 429, 665, 11629, 2102, 490, 301, 324, 434, 3111, 225, 38, 84, 31, 91, 44, 343, 99, 3210, 324, 436, 308, 4398]}
{"line_number": 1135, "line_type": "original", "code": "            int j = 4 * n - 1;", "entropy": 1.7080078125, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [4.97265625, 6.1875, 2.015625, 0.1995849609375, 1.314453125, 2.986328125, 0.08807373046875, 1.8154296875, 0.48095703125, 0.066162109375, 0.2978515625, 0.067626953125], "tokens": [1468, 629, 594, 280, 225, 38, 319, 310, 429, 225, 35, 45]}
{"line_number": 1135, "line_type": "generated", "code": "\n            }\n\n            // compute the midpoint\n            final double midPoint = (left + right) * 0.5;\n\n            // update the eigenvalue range\n            final double[] eigenvalues = new double[2];\n            eigenvalues[0] = mid", "entropy": 0.5419921875, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.06536865234375, 0.048858642578125, 0.212158203125, 0.5234375, 1.5439453125, 1.138671875, 1.677734375, 0.331298828125, 0.82080078125, 0.17041015625, 0.005306243896484375, 0.341552734375, 1.2822265625, 0.017486572265625, 1.8798828125, 0.0625, 0.017486572265625, 0.006694793701171875, 0.0065460205078125, 0.425048828125, 0.006839752197265625, 0.00015425682067871094, 1.919269561767578e-05, 0.00012385845184326172, 0.004337310791015625, 0.2032470703125, 0.0245819091796875, 2.001953125, 0.9677734375, 1.9423828125, 0.1458740234375, 1.7333984375, 0.1312255859375, 1.212890625, 0.32568359375, 1.28125, 2.05078125, 0.86865234375, 0.0802001953125, 1.6787109375, 0.07330322265625, 0.07958984375, 0.94384765625, 0.0287933349609375, 0.041778564453125, 0.88720703125, 0.07598876953125, 0.12646484375, 0.06317138671875, 0.000728607177734375, 0.00492095947265625, 0.62451171875], "tokens": [324, 320, 1064, 434, 7596, 322, 11906, 1493, 324, 1158, 2064, 11906, 1943, 280, 308, 1873, 474, 2091, 27, 319, 225, 34, 32, 39, 45, 1064, 434, 1974, 322, 30880, 853, 2155, 324, 1158, 2064, 1178, 30880, 2810, 280, 537, 2064, 77, 36, 970, 324, 30880, 2810, 77, 34, 79, 280, 11906]}
{"line_number": 1136, "line_type": "original", "code": "            for (int i = 0; i < j; i += 4) {", "entropy": 1.0390625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [4.53125, 1.587890625, 0.0029506683349609375, 0.006755828857421875, 3.1796875, 0.26953125, 0.11956787109375, 0.0156707763671875, 0.006519317626953125, 0.00299835205078125, 0.0016126632690429688, 7.3515625, 0.266357421875, 1.9169921875, 0.167236328125, 0.125732421875, 0.1654052734375, 0.0090179443359375, 0.009857177734375], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 594, 45, 595, 1454, 225, 38, 27, 301]}
{"line_number": 1136, "line_type": "generated", "code": "\n            final double midPoint = left + range * 0.5;\n            work[4 * main.length + index] = midPoint;\n            qd.solve(work, 4 * main.length, 4 * n, 4", "entropy": 0.5986328125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.1741943359375, 1.3974609375, 0.140869140625, 1.158203125, 1.62109375, 0.047271728515625, 1.533203125, 0.03399658203125, 1.0927734375, 0.30029296875, 0.04791259765625, 0.0011110305786132812, 2.9921531677246094e-05, 0.00591278076171875, 0.01059722900390625, 0.106689453125, 1.0703125, 0.00858306884765625, 1.8271484375, 0.0081939697265625, 1.390625, 0.0433349609375, 0.0008454322814941406, 0.6640625, 1.25, 0.32080078125, 0.015594482421875, 0.0404052734375, 0.0002493858337402344, 0.002655029296875, 0.18994140625, 2.453125, 0.0894775390625, 2.580078125, 3.73828125, 0.43798828125, 0.47509765625, 0.1326904296875, 0.5224609375, 0.49462890625, 0.01071929931640625, 0.281005859375, 0.0014104843139648438, 0.0005235671997070312, 0.5595703125, 0.9326171875, 0.491943359375, 0.1494140625, 0.8740234375, 0.85107421875, 1.1669921875, 0.3828125], "tokens": [324, 1158, 2064, 11906, 1943, 280, 2841, 474, 2155, 319, 225, 34, 32, 39, 45, 324, 1389, 77, 38, 319, 2575, 32, 1322, 474, 1650, 79, 280, 11906, 1943, 45, 324, 2678, 86, 32, 19596, 26, 1007, 30, 225, 38, 319, 2575, 32, 1322, 30, 225, 38, 319, 310, 30, 225, 38]}
{"line_number": 1137, "line_type": "original", "code": "                for (int k = 0; k < 4; k += step) {", "entropy": 1.2080078125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.3203125, 4.63671875, 0.004459381103515625, 0.014312744140625, 1.412109375, 0.00885772705078125, 0.25732421875, 0.06005859375, 0.0117645263671875, 0.002910614013671875, 0.0026702880859375, 2.076171875, 0.429931640625, 0.6376953125, 2.7109375, 1.185546875, 2.13671875, 0.03131103515625, 0.0181884765625], "tokens": [2071, 436, 308, 410, 831, 280, 225, 34, 45, 831, 333, 225, 38, 45, 831, 1454, 3111, 27, 301]}
{"line_number": 1137, "line_type": "generated", "code": "\n            final double mid = 0.5 * (left + right);\n            final double eval = eigenvalue(mid);\n            if (eval < 0.0) {\n                left = mid;\n            } else {\n                right = mid;\n            }", "entropy": 0.353759765625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.1463623046875, 1.12890625, 0.0926513671875, 1.43359375, 0.4521484375, 0.389892578125, 0.00255584716796875, 0.00112152099609375, 0.002956390380859375, 0.00386810302734375, 0.0082855224609375, 0.09857177734375, 0.0022678375244140625, 0.00379180908203125, 0.003208160400390625, 0.1265869140625, 1.3134765625, 0.1871337890625, 3.392578125, 0.11981201171875, 2.1640625, 0.309326171875, 0.205322265625, 0.921875, 0.52685546875, 0.271728515625, 0.1363525390625, 0.033782958984375, 0.251220703125, 1.6337890625, 1.671875, 0.0162200927734375, 0.270751953125, 0.0213470458984375, 0.0065155029296875, 0.0010290145874023438, 0.015838623046875, 0.63818359375, 0.1336669921875, 0.04913330078125, 0.00771331787109375, 0.018341064453125, 0.0008454322814941406, 0.003292083740234375, 0.13623046875, 0.005496978759765625, 0.0164642333984375, 0.0013637542724609375, 0.001312255859375, 0.00034427642822265625, 0.009185791015625, 0.0002294778823852539], "tokens": [324, 1158, 2064, 11906, 280, 225, 34, 32, 39, 319, 308, 1873, 474, 2091, 293, 324, 1158, 2064, 9967, 280, 30880, 853, 26, 7830, 293, 324, 415, 308, 6569, 333, 225, 34, 32, 34, 27, 301, 400, 2841, 280, 11906, 45, 324, 320, 813, 301, 400, 2091, 280, 11906, 45, 324, 320]}
{"line_number": 1138, "line_type": "original", "code": "                    final double tmp = work[i + k];", "entropy": 3.0, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.0234375, 3.015625, 0.1856689453125, 5.6796875, 0.381103515625, 0.89306640625, 0.007534027099609375, 3.560546875, 2.34375, 7.40234375, 0.50146484375], "tokens": [4696, 1158, 2064, 3691, 280, 1389, 77, 91, 474, 831, 970]}
{"line_number": 1138, "line_type": "generated", "code": "\n            // compute the eigenvalue\n            final double eval = Math.abs(computeEigenvalue(index, n, middle));\n\n            if (eval < middle) {\n                right = middle;\n            } else {\n                left = middle;\n            }\n\n        }\n\n       ", "entropy": 0.452880859375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.1290283203125, 1.669921875, 1.8779296875, 1.1015625, 1.349609375, 0.3046875, 0.8369140625, 1.40234375, 0.0908203125, 2.423828125, 0.088134765625, 1.7919921875, 0.193115234375, 2.390625, 0.020416259765625, 2.02734375, 0.276123046875, 0.154296875, 0.0791015625, 0.6103515625, 0.10028076171875, 0.1783447265625, 0.007007598876953125, 0.0614013671875, 0.09991455078125, 0.1783447265625, 0.6005859375, 0.014129638671875, 0.089599609375, 1.2548828125, 0.11865234375, 0.0226593017578125, 0.0012111663818359375, 0.0186767578125, 0.9443359375, 0.00455474853515625, 0.06939697265625, 0.0011510848999023438, 0.0255584716796875, 0.0017242431640625, 0.00518035888671875, 0.1015625, 0.005939483642578125, 0.0377197265625, 0.185546875, 0.002269744873046875, 0.0003962516784667969, 0.0211029052734375, 0.0002033710479736328, 0.463623046875, 0.0003032684326171875, 0.11517333984375], "tokens": [324, 434, 7596, 322, 30880, 853, 324, 1158, 2064, 9967, 280, 4175, 32, 3596, 26, 7924, 26595, 853, 26, 1055, 30, 310, 30, 11852, 876, 1064, 415, 308, 6569, 333, 11852, 27, 301, 400, 2091, 280, 11852, 45, 324, 320, 813, 301, 400, 2841, 280, 11852, 45, 324, 320, 584, 320, 584]}
{"line_number": 1139, "line_type": "original", "code": "                    work[i + k] = work[j - k];", "entropy": 2.666015625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.59765625, 4.06640625, 0.01041412353515625, 5.30078125, 1.650390625, 6.98828125, 0.285888671875, 0.050689697265625, 4.41015625, 0.0202178955078125, 1.958984375, 2.283203125, 0.0828857421875, 2.599609375], "tokens": [4696, 1389, 77, 91, 474, 831, 79, 280, 1389, 77, 92, 429, 831, 970]}
{"line_number": 1139, "line_type": "generated", "code": "\n                left = middle;\n            } else {\n                right = middle;\n            }\n\n        }\n\n        // search upper eigenvalue\n        left  = lower - margin;\n        right = upper + margin;\n        for (int i = 0; i < maxIter", "entropy": 0.06182861328125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.09033203125, 0.79736328125, 0.177001953125, 0.0102386474609375, 0.0017786026000976562, 0.042816162109375, 0.00033020973205566406, 0.006381988525390625, 0.0052337646484375, 0.3251953125, 0.00623321533203125, 0.0012722015380859375, 0.00045990943908691406, 0.00019121170043945312, 0.0159759521484375, 0.0002987384796142578, 0.5791015625, 0.00026726722717285156, 0.2227783203125, 0.2440185546875, 0.156494140625, 0.00798797607421875, 0.001590728759765625, 0.005153656005859375, 0.01062774658203125, 0.10748291015625, 0.055084228515625, 7.56978988647461e-05, 0.23779296875, 0.0794677734375, 0.0036983489990234375, 0.00118255615234375, 0.0005273818969726562, 0.00010752677917480469, 0.0001742839813232422, 0.0010156631469726562, 0.0005002021789550781, 0.0001010894775390625, 0.0002105236053466797, 0.00598907470703125, 0.00859832763671875, 0.0003447532653808594, 0.00020062923431396484, 0.0008001327514648438, 0.0003979206085205078, 0.0004074573516845703, 0.0004367828369140625, 0.0005655288696289062, 0.00020360946655273438, 0.0005006790161132812, 0.0006818771362304688, 2.6226043701171875e-06], "tokens": [400, 2841, 280, 11852, 45, 324, 320, 813, 301, 400, 2091, 280, 11852, 45, 324, 320, 584, 320, 584, 434, 3233, 8342, 30880, 853, 291, 2841, 225, 280, 7216, 429, 3295, 45, 291, 2091, 280, 8342, 474, 3295, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1769, 3853]}
{"line_number": 1140, "line_type": "original", "code": "                    work[j - k] = tmp;", "entropy": 3.25, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.37890625, 2.42578125, 0.0176544189453125, 8.2578125, 3.349609375, 4.4609375, 0.27197265625, 0.1953125, 6.10546875, 0.025909423828125], "tokens": [4696, 1389, 77, 92, 429, 831, 79, 280, 3691, 45]}
{"line_number": 1140, "line_type": "generated", "code": "\n            } else {\n                left = middle;", "entropy": 0.0282135009765625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.1060791015625, 0.0005731582641601562, 0.00836944580078125, 0.005023956298828125, 0.026947021484375, 0.0037059783935546875, 0.10076904296875, 0.0007052421569824219, 0.0017719268798828125], "tokens": [324, 320, 813, 301, 400, 2841, 280, 11852, 45]}
{"line_number": 1142, "line_type": "original", "code": "                j -= 4;", "entropy": 3.115234375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.421875, 5.83203125, 4.8203125, 0.1478271484375, 1.359375, 0.10491943359375], "tokens": [2071, 594, 5912, 225, 38, 45]}
{"line_number": 1142, "line_type": "generated", "code": "\n            }\n\n        }\n\n        return new double[] { left, right };\n\n    }\n\n    /**\n     * Count the number of eigenvalues in the interval [a, b].\n     * @param a lower bound of the interval\n     * @param index index of the", "entropy": 0.310791015625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.0640869140625, 0.0002911090850830078, 1.046875, 0.0002906322479248047, 0.1417236328125, 1.0908203125, 0.020355224609375, 0.0017805099487304688, 0.1126708984375, 0.0014591217041015625, 0.76318359375, 0.005401611328125, 0.033599853515625, 0.03558349609375, 0.11474609375, 0.00041031837463378906, 0.1005859375, 0.0218505859375, 0.0244293212890625, 3.6835670471191406e-05, 0.73486328125, 0.615234375, 0.2734375, 0.01091766357421875, 0.95556640625, 0.08648681640625, 1.296875, 0.9423828125, 0.91748046875, 0.9072265625, 2.5390625, 0.0288238525390625, 0.254638671875, 0.51708984375, 0.04864501953125, 0.01126861572265625, 0.12445068359375, 0.0013456344604492188, 0.343994140625, 0.51904296875, 0.2666015625, 0.51220703125, 0.044403076171875, 0.04425048828125, 0.0528564453125, 2.6345252990722656e-05, 0.00010883808135986328, 0.00048041343688964844, 0.365966796875, 0.112548828125, 0.02874755859375, 0.0167999267578125], "tokens": [324, 320, 584, 320, 584, 442, 537, 2064, 1178, 301, 2841, 30, 2091, 1472, 446, 320, 446, 1022, 275, 319, 9618, 322, 1451, 432, 30880, 2810, 328, 322, 7898, 428, 83, 30, 323, 997, 275, 319, 477, 753, 312, 7216, 5085, 432, 322, 7898, 275, 319, 477, 753, 1650, 1650, 432, 322]}
{"line_number": 1144, "line_type": "original", "code": "            return true;", "entropy": 4.625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [5.8984375, 5.0703125, 7.52734375, 0.00467681884765625], "tokens": [1468, 442, 861, 45]}
{"line_number": 1144, "line_type": "generated", "code": "\n\n        }\n\n        // search upper eigenvalue\n        left  = lower - margin;\n        right = upper + margin;\n        for (int i = 0; i < maxIter; ++i) {\n\n            final double range = right - left;\n            if", "entropy": 0.061553955078125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.7099609375, 0.0173187255859375, 0.1661376953125, 0.43896484375, 0.304443359375, 0.009063720703125, 0.0016813278198242188, 0.004993438720703125, 0.0157928466796875, 0.1180419921875, 0.057098388671875, 3.719329833984375e-05, 0.190185546875, 0.090087890625, 0.0031299591064453125, 0.0010175704956054688, 0.00035500526428222656, 0.0001246929168701172, 0.00016009807586669922, 0.0010976791381835938, 0.00047850608825683594, 9.739398956298828e-05, 9.715557098388672e-05, 0.01219940185546875, 0.011199951171875, 0.0005846023559570312, 0.00022709369659423828, 0.0010156631469726562, 0.0003921985626220703, 0.0003085136413574219, 0.00042319297790527344, 0.00047969818115234375, 0.00019800662994384766, 0.0005240440368652344, 0.0008502006530761719, 2.2411346435546875e-05, 0.0005159378051757812, 0.0010547637939453125, 3.2186508178710938e-06, 0.00020766258239746094, 0.0011320114135742188, 0.016448974609375, 0.01114654541015625, 9.560585021972656e-05, 0.0009675025939941406, 0.0015478134155273438, 0.002452850341796875, 7.128715515136719e-05, 0.0006184577941894531, 6.818771362304688e-05, 0.006168365478515625, 0.0006499290466308594], "tokens": [584, 320, 584, 434, 3233, 8342, 30880, 853, 291, 2841, 225, 280, 7216, 429, 3295, 45, 291, 2091, 280, 8342, 474, 3295, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1769, 3853, 45, 3311, 91, 27, 301, 1064, 1158, 2064, 2155, 280, 2091, 429, 2841, 45, 324, 415]}
