{"line_number": 381, "line_type": "original", "code": "                            tmp = 0.1;", "entropy": 3.400390625, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [5.01171875, 8.65625, 5.4140625, 2.302734375, 1.326171875, 0.83984375, 1.498046875, 2.154296875], "tokens": [9316, 3691, 280, 225, 34, 32, 35, 45]}
{"line_number": 381, "line_type": "generated", "code": "\n                    \"no further improvement in the\" +\n                            \" approximate solution is possible\",\n                            parRelativeTolerance);\n                } else if (Math.abs(actRed) <= costRelativeTolerance) {\n                    throw new OptimizationException(\"cost relative tolerance is too small\"", "entropy": 0.297119140625, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [1.267578125, 1.5546875, 1.8603515625, 0.000598907470703125, 0.04718017578125, 0.04644775390625, 0.0780029296875, 1.103515625, 0.024444580078125, 0.5478515625, 0.0007653236389160156, 1.0361328125, 0.012847900390625, 0.232666015625, 0.0047149658203125, 0.52197265625, 0.2666015625, 0.0909423828125, 0.0025730133056640625, 0.00038623809814453125, 0.0711669921875, 0.06072998046875, 0.004367828369140625, 0.65576171875, 0.006488800048828125, 0.2578125, 1.2734375, 0.0005555152893066406, 0.0472412109375, 0.00707244873046875, 0.6904296875, 0.0020694732666015625, 0.0090179443359375, 0.09454345703125, 0.408935546875, 0.74951171875, 0.004390716552734375, 0.619140625, 0.003917694091796875, 0.049102783203125, 0.21484375, 0.000545501708984375, 0.04315185546875, 9.465217590332031e-05, 0.042816162109375, 0.1788330078125, 0.01715087890625, 0.002166748046875, 0.046539306640625, 0.2098388671875, 0.0086822509765625, 0.9736328125], "tokens": [528, 313, 1347, 9686, 26289, 328, 322, 20, 474, 1014, 313, 42496, 5295, 438, 4195, 392, 1014, 880, 11777, 26265, 293, 400, 320, 813, 415, 308, 5717, 32, 3596, 26, 536, 4023, 27, 2511, 7847, 11777, 26265, 27, 301, 528, 1422, 537, 41916, 984, 440, 8030, 6491, 26434, 438, 5133, 5532, 20]}
{"line_number": 607, "line_type": "original", "code": "            } else if (fp < 0) {", "entropy": 2.529296875, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [2.677734375, 12.625, 5.66015625, 1.7763671875, 0.083740234375, 3.888671875, 0.9853515625, 0.014862060546875, 0.0003612041473388672, 0.038543701171875, 0.05999755859375], "tokens": [1468, 320, 813, 415, 308, 4426, 333, 225, 34, 27, 301]}
{"line_number": 607, "line_type": "generated", "code": "\n            double dRot = 0.0;\n            for (int k = j; k < solvedCols; ++k) {\n                if (diag[pj] < dRot) {\n                    dRot = diag[pj];\n                }\n            }\n           ", "entropy": 0.240234375, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [0.30224609375, 0.1138916015625, 0.603515625, 1.5078125, 0.0965576171875, 0.49365234375, 0.1981201171875, 1.5634765625, 0.00039267539978027344, 0.05474853515625, 0.0806884765625, 1.0361328125, 0.01015472412109375, 0.0059051513671875, 0.14501953125, 0.00145721435546875, 0.1790771484375, 0.013092041015625, 0.00441741943359375, 0.002063751220703125, 0.005832672119140625, 0.01806640625, 0.0709228515625, 0.00707244873046875, 6.961822509765625e-05, 0.0015001296997070312, 0.0040740966796875, 0.034423828125, 0.3291015625, 0.034942626953125, 0.6318359375, 0.278076171875, 1.5341796875, 0.0008397102355957031, 0.040283203125, 1.255859375, 0.0061492919921875, 0.0038909912109375, 0.034210205078125, 0.0267181396484375, 0.27001953125, 0.002010345458984375, 0.0127716064453125, 0.0009160041809082031, 0.002376556396484375, 0.0093841552734375, 0.0012054443359375, 0.07025146484375, 0.0009551048278808594, 0.038818359375, 0.0003745555877685547, 1.353515625], "tokens": [324, 2064, 343, 6726, 280, 225, 34, 32, 34, 45, 324, 436, 308, 410, 831, 280, 594, 45, 831, 333, 19479, 19911, 45, 3311, 93, 27, 301, 400, 415, 308, 13006, 77, 25287, 79, 333, 343, 6726, 27, 301, 528, 343, 6726, 280, 15534, 77, 25287, 970, 400, 320, 324, 320, 324]}
{"line_number": 608, "line_type": "original", "code": "                paru = Math.min(paru, lmPar);", "entropy": 2.11328125, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [5.3828125, 10.828125, 4.96484375, 0.137451171875, 2.2109375, 0.00182342529296875, 1.0908203125, 0.01123809814453125, 0.048614501953125, 0.0005960464477539062, 0.0017347335815429688, 2.333984375, 0.2291259765625, 2.3515625], "tokens": [2071, 880, 103, 280, 4175, 32, 887, 26, 568, 103, 30, 30780, 926, 293]}
{"line_number": 608, "line_type": "generated", "code": "\n            double dqj = 0;\n\n            //  the transformations to eliminate the row of d modify only a\n            // single element of (q transpose)*y,  so choose the\n            // element in the best position (i.e., the minimum magnitude", "entropy": 0.4248046875, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [0.8037109375, 0.88232421875, 1.8076171875, 0.71142578125, 0.1439208984375, 0.419189453125, 0.01244354248046875, 0.1781005859375, 0.95458984375, 0.1099853515625, 1.0126953125, 0.123779296875, 0.049072265625, 5.316734313964844e-05, 0.0020313262939453125, 0.00033473968505859375, 0.007099151611328125, 0.0021991729736328125, 0.0002522468566894531, 0.1954345703125, 0.00997161865234375, 0.005908966064453125, 0.0134124755859375, 0.0007824897766113281, 0.41259765625, 0.00017571449279785156, 0.0001323223114013672, 0.042755126953125, 0.10418701171875, 0.0819091796875, 0.0225067138671875, 1.14453125, 0.14111328125, 1.4619140625, 1.501953125, 2.9296875, 0.089111328125, 0.07928466796875, 0.00119781494140625, 0.1427001953125, 0.0017461776733398438, 0.00029921531677246094, 2.48046875, 0.06500244140625, 0.6650390625, 0.78662109375, 1.0791015625, 0.0027942657470703125, 0.19873046875, 0.01030731201171875, 0.4873046875, 0.7099609375], "tokens": [324, 2064, 343, 42066, 280, 225, 34, 45, 1064, 434, 225, 322, 34816, 372, 40533, 322, 2698, 432, 343, 5351, 1755, 312, 324, 434, 3982, 1994, 432, 308, 99, 27224, 4586, 107, 30, 225, 1259, 9173, 322, 324, 434, 1994, 328, 322, 5273, 2747, 308, 91, 32, 87, 4317, 322, 9340, 28033]}
{"line_number": 510, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.36962890625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.78515625, 1.4990234375, 0.00504302978515625, 0.023651123046875, 0.1541748046875, 0.00431060791015625, 0.0237274169921875, 0.002338409423828125, 0.001247406005859375, 0.0005450248718261719, 0.0033435821533203125, 0.1090087890625, 0.018707275390625, 0.002735137939453125, 0.00531768798828125, 0.0001952648162841797, 0.0018596649169921875, 0.0100555419921875], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 510, "line_type": "generated", "code": "\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                work1[pj] = sPar * diagR[pj];\n            }\n            for (int j = 0;", "entropy": 0.126708984375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.361083984375, 1.0556640625, 0.0028400421142578125, 0.0205841064453125, 0.12347412109375, 0.003082275390625, 0.0208282470703125, 0.00255584716796875, 0.0008883476257324219, 0.0004775524139404297, 0.002254486083984375, 0.0721435546875, 0.0115509033203125, 0.0008025169372558594, 0.00522613525390625, 0.0001544952392578125, 0.0009503364562988281, 0.0017480850219726562, 0.00952911376953125, 0.27294921875, 0.00262451171875, 0.00036334991455078125, 0.0010099411010742188, 0.00022995471954345703, 0.00042629241943359375, 0.0006480216979980469, 0.0036220550537109375, 0.266845703125, 0.12396240234375, 2.682209014892578e-05, 0.006740570068359375, 7.87973403930664e-05, 0.0489501953125, 0.377685546875, 0.0005269050598144531, 0.023834228515625, 0.037689208984375, 1.0654296875, 0.0005650520324707031, 0.0015430450439453125, 0.037506103515625, 0.150146484375, 0.0001227855682373047, 0.48974609375, 0.45849609375, 0.000701904296875, 0.0008225440979003906, 0.6494140625, 0.0028591156005859375, 0.86328125, 0.0021343231201171875, 0.0005197525024414062], "tokens": [324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 629, 46704, 280, 38151, 77, 92, 970, 400, 1389, 35, 77, 25287, 79, 280, 309, 926, 319, 15534, 68, 77, 25287, 970, 324, 320, 324, 436, 308, 410, 594, 280, 225, 34, 45]}
{"line_number": 511, "line_type": "original", "code": "                int pj = permutation[j];", "entropy": 1.771484375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [9.0, 5.15234375, 0.01348114013671875, 0.0018100738525390625, 0.002902984619140625, 0.0005564689636230469, 0.0003304481506347656, 0.001491546630859375], "tokens": [2071, 629, 46704, 280, 38151, 77, 92, 970]}
{"line_number": 511, "line_type": "generated", "code": "\n                work1[pj] = sPar * diag[pj];\n            }\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double sum = 0;\n                for (", "entropy": 0.08062744140625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.03704833984375, 0.2420654296875, 0.12890625, 6.67572021484375e-05, 0.248291015625, 0.0005407333374023438, 0.0987548828125, 0.50634765625, 0.0005059242248535156, 0.0247955322265625, 0.033660888671875, 0.2083740234375, 0.0020294189453125, 0.498291015625, 0.2408447265625, 4.8279762268066406e-05, 0.229736328125, 0.458740234375, 0.0004353523254394531, 0.0001380443572998047, 0.1689453125, 0.002384185791015625, 0.26904296875, 0.0008797645568847656, 0.0010499954223632812, 0.0006456375122070312, 0.0035858154296875, 0.154052734375, 0.00592803955078125, 0.00431060791015625, 0.0006394386291503906, 5.1975250244140625e-05, 0.00022709369659423828, 0.00046825408935546875, 0.032470703125, 0.1226806640625, 0.0015230178833007812, 0.00035691261291503906, 0.0003962516784667969, 3.981590270996094e-05, 0.0006923675537109375, 0.00036406517028808594, 0.0047149658203125, 0.2017822265625, 0.21875, 0.00689697265625, 0.0093841552734375, 7.3909759521484375e-06, 0.0023040771484375, 0.006160736083984375, 0.01169586181640625, 0.00018739700317382812], "tokens": [400, 1389, 35, 77, 25287, 79, 280, 309, 926, 319, 15534, 77, 25287, 970, 324, 320, 324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 629, 46704, 280, 38151, 77, 92, 970, 400, 2064, 3632, 280, 225, 34, 45, 400, 436, 308]}
{"line_number": 512, "line_type": "original", "code": "                work1[pj] *= diag[pj] / dxNorm;", "entropy": 1.9853515625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [7.26953125, 0.5234375, 0.39111328125, 0.0002613067626953125, 0.0282135009765625, 0.0007009506225585938, 2.26171875, 9.71875, 0.339111328125, 0.0017595291137695312, 0.12744140625, 1.8720703125, 6.796875, 0.00617218017578125, 0.451416015625], "tokens": [2071, 1389, 35, 77, 25287, 79, 10439, 15534, 77, 25287, 79, 517, 12211, 14373, 45]}
{"line_number": 512, "line_type": "generated", "code": "\n            }\n            double fPlu = dxNorm - delta;\n            if (fPlu <= 0.1 * delta) {\n                lmPar = 0;\n                return;\n            }\n\n            // if the function is not too large, bracket the", "entropy": 0.2254638671875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.06732177734375, 0.0002243518829345703, 0.09869384765625, 0.310302734375, 0.85693359375, 1.7587890625, 0.6640625, 0.0181121826171875, 0.030487060546875, 0.00040531158447265625, 0.09869384765625, 0.009918212890625, 0.07470703125, 0.11920166015625, 0.476318359375, 0.009857177734375, 0.09716796875, 4.291534423828125e-06, 1.1920928955078125e-07, 0.57861328125, 0.0010557174682617188, 7.152557373046875e-07, 0.02197265625, 0.00017178058624267578, 0.0015163421630859375, 0.0003657341003417969, 0.051422119140625, 0.00148773193359375, 0.0149383544921875, 0.67724609375, 0.003192901611328125, 0.0104522705078125, 0.010955810546875, 1.1205673217773438e-05, 0.001552581787109375, 0.0036411285400390625, 0.316162109375, 0.00012540817260742188, 0.001453399658203125, 3.5762786865234375e-05, 0.0299072265625, 0.055450439453125, 0.5302734375, 0.1494140625, 0.07635498046875, 0.018341064453125, 0.78369140625, 1.4921875, 0.47265625, 0.0013856887817382812, 1.6708984375, 0.05682373046875], "tokens": [324, 320, 324, 2064, 296, 1822, 103, 280, 12211, 14373, 429, 7715, 45, 324, 415, 308, 88, 1822, 103, 2511, 225, 34, 32, 35, 319, 7715, 27, 301, 400, 30780, 926, 280, 225, 34, 45, 400, 442, 45, 324, 320, 1064, 434, 415, 322, 667, 438, 646, 5133, 7622, 30, 33828, 322]}
{"line_number": 514, "line_type": "original", "code": "            sum2 = 0;", "entropy": 1.8896484375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [7.046875, 6.09765625, 0.03778076171875, 0.001056671142578125, 0.0107879638671875, 9.143352508544922e-05, 0.035186767578125], "tokens": [1468, 3632, 36, 280, 225, 34, 45]}
{"line_number": 514, "line_type": "generated", "code": "\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double sum = 0;\n                for (int i = 0; i < j; ++i) {\n                    sum", "entropy": 0.015411376953125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.06072998046875, 0.50048828125, 0.0003941059112548828, 9.632110595703125e-05, 0.00830841064453125, 0.0006580352783203125, 0.00107574462890625, 0.0001251697540283203, 0.0005712509155273438, 0.0003273487091064453, 0.00048041343688964844, 0.007579803466796875, 0.0001862049102783203, 0.0001837015151977539, 0.0008249282836914062, 3.2782554626464844e-05, 0.00011169910430908203, 0.00040912628173828125, 0.0012836456298828125, 0.031890869140625, 0.0010623931884765625, 0.00015246868133544922, 6.437301635742188e-05, 0.00029015541076660156, 7.62939453125e-06, 7.390975952148438e-05, 0.0007843971252441406, 0.053314208984375, 0.04779052734375, 0.004169464111328125, 0.007251739501953125, 6.794929504394531e-06, 0.0022487640380859375, 0.0010852813720703125, 0.006244659423828125, 0.0003097057342529297, 3.7789344787597656e-05, 0.0015401840209960938, 0.000186920166015625, 0.0009288787841796875, 7.545948028564453e-05, 0.00013148784637451172, 0.00017523765563964844, 0.033721923828125, 0.01325225830078125, 0.0003142356872558594, 0.0006175041198730469, 6.532669067382812e-05, 0.0001970529556274414, 0.0003273487091064453, 0.0010280609130859375, 0.00829315185546875], "tokens": [324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 629, 46704, 280, 38151, 77, 92, 970, 400, 2064, 3632, 280, 225, 34, 45, 400, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 594, 45, 3311, 91, 27, 301, 528, 3632]}
{"line_number": 515, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.368408203125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.7578125, 1.390625, 0.005603790283203125, 0.008819580078125, 0.12646484375, 0.0030384063720703125, 0.02789306640625, 0.0017976760864257812, 0.0011758804321289062, 0.0007352828979492188, 0.0082244873046875, 0.2734375, 0.01288604736328125, 0.004119873046875, 0.0026111602783203125, 0.000148773193359375, 0.0013103485107421875, 0.005596160888671875], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 515, "line_type": "generated", "code": "\n                int pj = permutation[j];\n                double sum = 0;\n                for (int i = 0; i < j; ++i) {\n                    sum += jacobian[i][pj] * work2[permutation[i]];\n                }", "entropy": 0.06866455078125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.701171875, 0.8466796875, 0.0965576171875, 0.0015153884887695312, 0.002216339111328125, 0.0007600784301757812, 0.01361083984375, 0.0007925033569335938, 0.006160736083984375, 0.11993408203125, 0.8037109375, 0.015380859375, 0.00608062744140625, 7.224082946777344e-05, 0.0038852691650390625, 0.0088348388671875, 0.0120697021484375, 0.0015745162963867188, 0.00013267993927001953, 0.004482269287109375, 0.0006742477416992188, 0.003932952880859375, 8.857250213623047e-05, 0.0007901191711425781, 0.0005316734313964844, 0.0780029296875, 0.0191497802734375, 0.0012607574462890625, 0.0013246536254882812, 4.5418739318847656e-05, 0.0006761550903320312, 0.0012464523315429688, 0.0031261444091796875, 0.023040771484375, 0.00255584716796875, 0.01500701904296875, 0.00014913082122802734, 0.0008101463317871094, 0.0010538101196289062, 0.00010418891906738281, 0.00043463706970214844, 0.001194000244140625, 0.00011181831359863281, 0.2445068359375, 0.491943359375, 0.0001735687255859375, 0.0161285400390625, 4.0650367736816406e-05, 6.127357482910156e-05, 0.01454925537109375, 0.0028667449951171875, 4.112720489501953e-05], "tokens": [400, 629, 46704, 280, 38151, 77, 92, 970, 400, 2064, 3632, 280, 225, 34, 45, 400, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 594, 45, 3311, 91, 27, 301, 528, 3632, 1454, 594, 30495, 77, 91, 1674, 25287, 79, 319, 1389, 36, 77, 40237, 77, 91, 19730, 400, 320]}
{"line_number": 516, "line_type": "original", "code": "                int pj = permutation[j];", "entropy": 2.181640625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [5.1875, 5.2578125, 5.41796875, 0.1590576171875, 0.05615234375, 0.00543212890625, 1.35546875, 0.01018524169921875], "tokens": [2071, 629, 46704, 280, 38151, 77, 92, 970]}
{"line_number": 516, "line_type": "generated", "code": "\n            // compute the derivative of the function at the point\n            // lmDir and estimate the norm of the scaled gradient\n            double temp1 = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj", "entropy": 0.2371826171875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.257568359375, 0.39794921875, 0.1513671875, 0.001323699951171875, 0.66650390625, 0.0019102096557617188, 0.0004012584686279297, 0.298828125, 0.00140380859375, 0.1434326171875, 0.48681640625, 0.393310546875, 0.0279998779296875, 1.234375, 0.349609375, 0.1163330078125, 1.9560546875, 0.004364013671875, 0.06854248046875, 0.007137298583984375, 0.03070068359375, 0.4140625, 0.572265625, 0.013885498046875, 0.3251953125, 1.818359375, 0.43310546875, 0.0228118896484375, 0.487548828125, 0.007305145263671875, 0.030517578125, 0.00431060791015625, 1.2265625, 0.000240325927734375, 0.0002409219741821289, 0.0259246826171875, 0.0008935928344726562, 0.00665283203125, 0.00011432170867919922, 0.0002129077911376953, 0.0005311965942382812, 0.0008015632629394531, 0.056610107421875, 0.004863739013671875, 0.0004634857177734375, 0.002696990966796875, 4.863739013671875e-05, 0.0004906654357910156, 0.00098419189453125, 0.04437255859375, 0.2391357421875, 0.0008044242858886719], "tokens": [324, 434, 7596, 322, 27640, 432, 322, 667, 821, 322, 2260, 324, 434, 30780, 2976, 461, 20772, 322, 9807, 432, 322, 23205, 14999, 324, 2064, 1779, 35, 280, 225, 34, 45, 324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 629, 46704]}
{"line_number": 517, "line_type": "original", "code": "                double sum = 0;", "entropy": 1.5546875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.796875, 2.873046875, 0.89306640625, 0.2386474609375, 0.0479736328125, 0.0012083053588867188, 0.034759521484375], "tokens": [2071, 2064, 3632, 280, 225, 34, 45]}
{"line_number": 517, "line_type": "generated", "code": "\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double s = diag[pj] * lmDir[pj];\n                work1[pj] = s;\n                dxNorm", "entropy": 0.039093017578125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.087890625, 0.1571044921875, 0.00171661376953125, 0.003742218017578125, 0.030426025390625, 0.0015506744384765625, 0.0063934326171875, 0.00014925003051757812, 0.0003120899200439453, 0.000835418701171875, 0.0005879402160644531, 0.038665771484375, 0.0017709732055664062, 0.0003261566162109375, 0.0023860931396484375, 6.73532485961914e-05, 0.0005140304565429688, 0.0021572113037109375, 0.010040283203125, 0.11810302734375, 0.0010213851928710938, 0.00028204917907714844, 0.0005297660827636719, 0.0004525184631347656, 0.00012028217315673828, 0.00024771690368652344, 0.0264129638671875, 0.219482421875, 0.10906982421875, 0.0120086669921875, 0.214111328125, 0.031768798828125, 0.000732421875, 0.00038933753967285156, 0.0002512931823730469, 0.70947265625, 0.002033233642578125, 0.00614166259765625, 0.00124359130859375, 0.030303955078125, 0.01163482666015625, 0.0775146484375, 0.0634765625, 8.106231689453125e-06, 0.00560760498046875, 0.00010991096496582031, 0.01364898681640625, 0.00833892822265625, 0.0014467239379882812, 0.004241943359375, 0.01509857177734375, 0.0005021095275878906], "tokens": [324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 629, 46704, 280, 38151, 77, 92, 970, 400, 2064, 309, 280, 15534, 77, 25287, 79, 319, 30780, 2976, 77, 25287, 970, 400, 1389, 35, 77, 25287, 79, 280, 309, 45, 400, 12211, 14373]}
{"line_number": 518, "line_type": "original", "code": "                for (int i = 0; i < j; ++i) {", "entropy": 0.99560546875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.328125, 7.6953125, 0.0105743408203125, 0.0082855224609375, 0.2548828125, 0.005985260009765625, 0.1800537109375, 0.0015134811401367188, 0.0021953582763671875, 0.0018100738525390625, 0.85498046875, 1.5390625, 0.025543212890625, 0.0043487548828125, 0.0008020401000976562, 0.002552032470703125, 0.012298583984375], "tokens": [2071, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 594, 45, 3311, 91, 27, 301]}
{"line_number": 518, "line_type": "generated", "code": "\n                dxNorm += work2[permutation[j]] * work2[permutation[j]];\n            }\n            dxNorm = Math.sqrt(dxNorm);\n            double fp = dxNorm - delta;\n\n            // check the new value of lmPar\n            if", "entropy": 0.121337890625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.330078125, 0.8125, 0.00969696044921875, 0.01184844970703125, 0.19775390625, 0.576171875, 0.0002880096435546875, 0.41552734375, 0.00026488304138183594, 0.0070953369140625, 0.0010662078857421875, 0.005374908447265625, 0.052459716796875, 0.05413818359375, 0.00012862682342529297, 0.0023250579833984375, 0.0005865097045898438, 0.0006723403930664062, 0.06927490234375, 0.1768798828125, 0.0005450248718261719, 0.037628173828125, 0.049713134765625, 0.00018644332885742188, 0.00015270709991455078, 0.0013189315795898438, 4.863739013671875e-05, 0.000530242919921875, 3.409385681152344e-05, 0.0005173683166503906, 2.9802322387695312e-06, 0.0007395744323730469, 0.03375244140625, 0.012420654296875, 0.916015625, 0.8857421875, 0.0029735565185546875, 8.940696716308594e-06, 2.968311309814453e-05, 0.0001990795135498047, 0.00013554096221923828, 0.08917236328125, 0.037445068359375, 0.466064453125, 0.61865234375, 0.0550537109375, 0.349609375, 6.67572021484375e-06, 0.02154541015625, 0.0001577138900756836, 0.004428863525390625, 0.0015707015991210938], "tokens": [400, 12211, 14373, 1454, 1389, 36, 77, 40237, 77, 92, 3212, 319, 1389, 36, 77, 40237, 77, 92, 19730, 324, 320, 324, 12211, 14373, 280, 4175, 32, 8663, 26, 4582, 14373, 293, 324, 2064, 11828, 280, 12211, 14373, 429, 7715, 45, 1064, 434, 1505, 322, 537, 786, 432, 30780, 926, 324, 415]}
{"line_number": 519, "line_type": "original", "code": "                    sum += jacobian[i][pj] * work1[permutation[i]];", "entropy": 1.0791015625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [7.1015625, 3.279296875, 0.334228515625, 0.415771484375, 0.0034503936767578125, 0.00469970703125, 0.54638671875, 0.00167083740234375, 0.042694091796875, 0.01104736328125, 0.003192901611328125, 0.6435546875, 2.63671875, 0.003734588623046875, 4.32421875, 0.0007953643798828125, 0.0272216796875, 0.040618896484375], "tokens": [4696, 3632, 1454, 594, 30495, 77, 91, 1674, 25287, 79, 319, 1389, 35, 77, 40237, 77, 91, 19730]}
{"line_number": 519, "line_type": "generated", "code": "\n            }\n            dxNorm = Math.sqrt(dxNorm);\n            double fp = dxNorm - delta;\n\n            // check that parl <= par <= paru\n            if (fp > 0.1 * delta) {\n                lmPar = Math.", "entropy": 0.1744384765625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.362060546875, 0.0008921623229980469, 0.09423828125, 0.546875, 0.033721923828125, 0.0034942626953125, 0.001796722412109375, 0.00011599063873291016, 0.002246856689453125, 0.0010690689086914062, 0.0038738250732421875, 4.649162292480469e-06, 0.0051116943359375, 0.051483154296875, 0.00904083251953125, 1.046875, 0.7294921875, 0.006000518798828125, 1.3589859008789062e-05, 3.135204315185547e-05, 0.0003104209899902344, 0.00025653839111328125, 0.10003662109375, 0.04132080078125, 0.252197265625, 1.978515625, 1.1923828125, 0.0224456787109375, 0.218017578125, 0.4794921875, 0.00732421875, 0.0007205009460449219, 1.0132789611816406e-05, 0.00966644287109375, 0.07373046875, 0.021209716796875, 0.005794525146484375, 0.13525390625, 3.921985626220703e-05, 1.1920928955078125e-07, 0.6875, 0.0018749237060546875, 0.0021457672119140625, 0.00015628337860107422, 0.004726409912109375, 0.00144195556640625, 0.0958251953125, 0.78076171875, 2.3365020751953125e-05, 0.0245513916015625, 0.0341796875, 0.0005402565002441406], "tokens": [324, 320, 324, 12211, 14373, 280, 4175, 32, 8663, 26, 4582, 14373, 293, 324, 2064, 11828, 280, 12211, 14373, 429, 7715, 45, 1064, 434, 1505, 688, 880, 94, 2511, 880, 2511, 880, 103, 324, 415, 308, 4426, 848, 225, 34, 32, 35, 319, 7715, 27, 301, 400, 30780, 926, 280, 4175, 32]}
{"line_number": 521, "line_type": "original", "code": "                double s = (work1[pj] - sum) / diagR[pj];", "entropy": 1.69921875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.1015625, 4.72265625, 1.6484375, 2.509765625, 4.62109375, 2.41015625, 0.6259765625, 0.004802703857421875, 0.016937255859375, 0.02081298828125, 1.5771484375, 5.5703125, 0.98388671875, 0.364013671875, 2.068359375, 0.98388671875, 0.002857208251953125, 0.0290374755859375, 0.0234375], "tokens": [2071, 2064, 309, 280, 308, 1007, 35, 77, 25287, 79, 429, 3632, 27, 517, 15534, 68, 77, 25287, 970]}
{"line_number": 521, "line_type": "generated", "code": "\n                dxNorm += s * s;\n            }\n            dxNorm = Math.sqrt(dxNorm);\n            double fp = dxNorm - delta;\n\n            // check the new value of lmPar\n            if (fp <= 0.1 * delta) {", "entropy": 0.06915283203125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.10382080078125, 0.120361328125, 0.00032973289489746094, 0.005138397216796875, 0.0191650390625, 0.0016317367553710938, 0.0017061233520507812, 0.0005016326904296875, 0.0318603515625, 8.249282836914062e-05, 0.055694580078125, 0.1322021484375, 0.0015544891357421875, 7.832050323486328e-05, 0.0008234977722167969, 0.00010633468627929688, 0.0002853870391845703, 5.066394805908203e-05, 0.0010557174682617188, 1.919269561767578e-05, 0.0003972053527832031, 0.035125732421875, 0.016876220703125, 0.98828125, 0.407958984375, 0.0019311904907226562, 5.364418029785156e-06, 4.398822784423828e-05, 0.0002613067626953125, 0.00031256675720214844, 0.0838623046875, 0.043975830078125, 0.2174072265625, 0.48876953125, 0.10772705078125, 0.25732421875, 4.410743713378906e-06, 0.026763916015625, 9.393692016601562e-05, 0.00600433349609375, 0.00266265869140625, 0.02301025390625, 0.0164337158203125, 0.36083984375, 0.00012981891632080078, 1.5497207641601562e-06, 0.00019049644470214844, 3.4928321838378906e-05, 0.0026683807373046875, 7.557868957519531e-05, 0.0286102294921875, 0.00164794921875], "tokens": [400, 12211, 14373, 1454, 309, 319, 309, 45, 324, 320, 324, 12211, 14373, 280, 4175, 32, 8663, 26, 4582, 14373, 293, 324, 2064, 11828, 280, 12211, 14373, 429, 7715, 45, 1064, 434, 1505, 322, 537, 786, 432, 30780, 926, 324, 415, 308, 4426, 2511, 225, 34, 32, 35, 319, 7715, 27, 301]}
{"line_number": 522, "line_type": "original", "code": "                work1[pj] = s;", "entropy": 1.60546875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.14453125, 1.36328125, 0.8828125, 0.004238128662109375, 0.026824951171875, 0.001415252685546875, 0.67041015625, 1.9267578125, 3.421875], "tokens": [2071, 1389, 35, 77, 25287, 79, 280, 309, 45]}
{"line_number": 522, "line_type": "generated", "code": "\n            }\n            dxNorm = Math.sqrt(dxNorm);\n            double fp2 = dxNorm - delta;\n\n            // check for convergence\n            if (Math.abs(fp2) <= 0.1 * delta) {\n                lmPar = ", "entropy": 0.1500244140625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.1429443359375, 0.0005545616149902344, 0.070068359375, 0.1656494140625, 0.0035381317138671875, 0.00011157989501953125, 0.0011301040649414062, 9.167194366455078e-05, 0.0003604888916015625, 4.0531158447265625e-05, 0.0008063316345214844, 2.86102294921875e-06, 0.0007185935974121094, 0.0469970703125, 0.032867431640625, 0.9462890625, 2.53125, 0.0017805099487304688, 0.0039825439453125, 7.748603820800781e-05, 0.00025916099548339844, 0.00044989585876464844, 0.0008869171142578125, 0.397216796875, 0.07452392578125, 0.0721435546875, 0.95654296875, 0.63134765625, 0.10198974609375, 0.062103271484375, 0.0207977294921875, 0.1827392578125, 0.003543853759765625, 0.0030803680419921875, 0.0138397216796875, 0.0127716064453125, 0.00150299072265625, 0.041748046875, 0.037139892578125, 0.0318603515625, 0.004425048828125, 6.759166717529297e-05, 0.0015497207641601562, 0.004489898681640625, 0.005687713623046875, 0.01580810546875, 0.00440216064453125, 0.0377197265625, 1.1162109375, 0.005451202392578125, 0.00238037109375, 0.0053863525390625], "tokens": [324, 320, 324, 12211, 14373, 280, 4175, 32, 8663, 26, 4582, 14373, 293, 324, 2064, 11828, 36, 280, 12211, 14373, 429, 7715, 45, 1064, 434, 1505, 436, 47454, 324, 415, 308, 5717, 32, 3596, 26, 4426, 36, 27, 2511, 225, 34, 32, 35, 319, 7715, 27, 301, 400, 30780, 926, 280, 225]}
{"line_number": 523, "line_type": "original", "code": "                sum2 += s * s;", "entropy": 2.369140625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [7.14453125, 3.7890625, 0.0347900390625, 4.9296875, 2.189453125, 0.321044921875, 0.205810546875, 0.3310546875], "tokens": [2071, 3632, 36, 1454, 309, 319, 309, 45]}
{"line_number": 523, "line_type": "generated", "code": "\n            double fpr = dxNorm - delta;\n            if (fpr <= 0.1 * delta) {\n                break;\n            }\n\n            // if the function is not too large, parl is set to\n            // the lower bound of the interval par", "entropy": 0.34033203125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.6220703125, 1.7783203125, 1.6796875, 0.88671875, 0.0254364013671875, 0.061126708984375, 4.3392181396484375e-05, 0.001461029052734375, 0.000598907470703125, 0.0003979206085205078, 0.0810546875, 0.50048828125, 0.0123138427734375, 0.005706787109375, 0.297607421875, 0.0005822181701660156, 1.9073486328125e-06, 0.2457275390625, 0.00087738037109375, 0.0076141357421875, 0.0021209716796875, 0.2098388671875, 0.006885528564453125, 0.04046630859375, 1.06640625, 0.0007843971252441406, 0.007587432861328125, 0.00030517578125, 0.5048828125, 0.058624267578125, 0.95263671875, 0.1292724609375, 0.055755615234375, 0.06280517578125, 0.270263671875, 2.24609375, 0.396484375, 0.002391815185546875, 1.978515625, 0.27197265625, 0.7509765625, 0.09808349609375, 0.0140838623046875, 0.2239990234375, 0.0005130767822265625, 0.0160675048828125, 0.70263671875, 0.666015625, 0.12548828125, 0.0008029937744140625, 0.08740234375, 0.552734375], "tokens": [324, 2064, 296, 777, 280, 12211, 14373, 429, 7715, 45, 324, 415, 308, 49066, 2511, 225, 34, 32, 35, 319, 7715, 27, 301, 400, 1626, 45, 324, 320, 1064, 434, 415, 322, 667, 438, 646, 5133, 7622, 30, 880, 94, 438, 739, 372, 324, 434, 322, 7216, 5085, 432, 322, 7898, 880]}
{"line_number": 525, "line_type": "original", "code": "            parl = fp / (delta * sum2);", "entropy": 3.224609375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.828125, 5.10546875, 1.150390625, 0.007358551025390625, 5.3671875, 3.73828125, 4.79296875, 3.787109375, 3.228515625, 6.41015625, 0.06414794921875, 0.202392578125], "tokens": [1468, 880, 94, 280, 11828, 517, 308, 6558, 319, 3632, 36, 293]}
{"line_number": 525, "line_type": "generated", "code": "\n        }\n\n        // restore the direction of the derivative and update the step\n        // if the function has not changed sign, update par\n        // calculate an improved estimate for par\n        for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.43017578125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [1.6357421875, 0.0093994140625, 0.8173828125, 0.404541015625, 1.5361328125, 0.20556640625, 1.26171875, 0.61669921875, 0.62109375, 1.166015625, 0.310302734375, 0.6240234375, 0.5791015625, 0.8681640625, 1.1669921875, 1.0615234375, 1.599609375, 0.228759765625, 0.134521484375, 0.38525390625, 0.030029296875, 0.7890625, 0.1588134765625, 0.01424407958984375, 0.29931640625, 0.246337890625, 0.771484375, 1.7802734375, 0.29638671875, 0.167724609375, 0.34423828125, 0.00531768798828125, 0.0031185150146484375, 0.9638671875, 0.07684326171875, 1.1474609375, 0.0002923011779785156, 0.0001919269561767578, 0.01049041748046875, 0.000514984130859375, 0.0015497207641601562, 0.00024700164794921875, 0.00017940998077392578, 0.00017392635345458984, 0.0003528594970703125, 0.03570556640625, 0.0016422271728515625, 0.00013899803161621094, 0.0009694099426269531, 3.826618194580078e-05, 0.0002357959747314453, 0.0003020763397216797], "tokens": [291, 320, 584, 434, 11309, 322, 6983, 432, 322, 27640, 461, 1974, 322, 3111, 291, 434, 415, 322, 667, 1401, 646, 5372, 2596, 30, 1974, 880, 291, 434, 9169, 600, 23780, 20772, 436, 880, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 585, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.50732421875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.8203125, 3.056640625, 0.0458984375, 0.0169219970703125, 0.3359375, 0.01247406005859375, 0.027984619140625, 0.00838470458984375, 0.0077667236328125, 0.002582550048828125, 0.027099609375, 0.55615234375, 0.06451416015625, 0.0035457611083984375, 0.014434814453125, 0.0003192424774169922, 0.004497528076171875, 0.1256103515625], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 585, "line_type": "generated", "code": "\n     */\n    private void determineLMDirection(final double[] qy, final double[] diag,\n                                     final double[] lmDiag, final double[] lmDir) {\n\n        // copy r and (q transpose)*b to preserve input and initialize s.", "entropy": 0.149169921875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.53076171875, 0.36376953125, 0.0175628662109375, 0.215087890625, 0.02679443359375, 0.0198822021484375, 0.003757476806640625, 0.00015544891357421875, 6.890296936035156e-05, 0.00727081298828125, 0.548828125, 0.09210205078125, 0.03582763671875, 0.00128936767578125, 0.00040793418884277344, 0.0006380081176757812, 0.61767578125, 0.0008897781372070312, 0.0034236907958984375, 0.048248291015625, 0.0017337799072265625, 0.93896484375, 0.04693603515625, 0.0016307830810546875, 0.0023403167724609375, 0.0164337158203125, 0.025146484375, 0.051361083984375, 0.11383056640625, 0.0022029876708984375, 0.00125885009765625, 0.06866455078125, 0.001300811767578125, 0.005329132080078125, 0.0308074951171875, 0.54052734375, 0.56591796875, 1.36328125, 0.6953125, 0.1851806640625, 0.043304443359375, 0.0004963874816894531, 0.0231170654296875, 0.0059967041015625, 0.0004603862762451172, 0.047119140625, 0.0079345703125, 0.088623046875, 0.00490570068359375, 0.0017652511596679688, 0.004791259765625, 0.331298828125], "tokens": [275, 569, 284, 945, 763, 9921, 62, 5108, 2721, 26, 3220, 2064, 1178, 2678, 107, 30, 1158, 2064, 1178, 15534, 30, 9474, 1158, 2064, 1178, 30780, 26244, 30, 1158, 2064, 1178, 30780, 2976, 27, 301, 584, 434, 1933, 540, 461, 308, 99, 27224, 4586, 84, 372, 24070, 1509, 461, 7379, 309, 32]}
{"line_number": 586, "line_type": "original", "code": "                int pj = permutation[j];", "entropy": 2.38671875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [8.9765625, 2.25, 7.58984375, 0.1435546875, 0.055755615234375, 0.006961822509765625, 0.05133056640625, 0.01451873779296875], "tokens": [2071, 629, 46704, 280, 38151, 77, 92, 970]}
{"line_number": 586, "line_type": "generated", "code": "\n     */\n    private void determineLMDirection(final double[] qy, final double[] diag,\n                                     final double[] lmDiag, final double[] work) {\n\n        // copy r and (q transpose)*b to preserve input and initialize s.\n       ", "entropy": 0.1456298828125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.45458984375, 0.1024169921875, 0.01264190673828125, 0.208251953125, 0.035247802734375, 0.034698486328125, 0.0054931640625, 0.00025844573974609375, 9.250640869140625e-05, 0.00732421875, 0.56201171875, 0.089599609375, 0.0321044921875, 0.0016260147094726562, 0.00038909912109375, 0.0006542205810546875, 0.61328125, 0.0009012222290039062, 0.003448486328125, 0.032440185546875, 0.000835418701171875, 0.95654296875, 0.0445556640625, 0.001277923583984375, 0.0022430419921875, 0.0098114013671875, 0.0220489501953125, 0.00030159950256347656, 0.1534423828125, 0.0005502700805664062, 0.0009679794311523438, 0.007022857666015625, 0.0172576904296875, 0.0180816650390625, 0.54638671875, 0.60009765625, 1.427734375, 0.53466796875, 0.247802734375, 0.028900146484375, 0.0005364418029785156, 0.024139404296875, 0.006397247314453125, 0.00034928321838378906, 0.034027099609375, 0.00811004638671875, 0.08709716796875, 0.004817962646484375, 0.0017290115356445312, 0.00850677490234375, 0.52685546875, 0.048614501953125], "tokens": [275, 569, 284, 945, 763, 9921, 62, 5108, 2721, 26, 3220, 2064, 1178, 2678, 107, 30, 1158, 2064, 1178, 15534, 30, 9474, 1158, 2064, 1178, 30780, 26244, 30, 1158, 2064, 1178, 1389, 27, 301, 584, 434, 1933, 540, 461, 308, 99, 27224, 4586, 84, 372, 24070, 1509, 461, 7379, 309, 32, 291]}
{"line_number": 587, "line_type": "original", "code": "                work1[pj] = work3[pj] * diag[pj] / dxNorm;", "entropy": 1.63671875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [8.546875, 5.203125, 1.216796875, 0.181884765625, 3.4453125, 0.0181121826171875, 0.88037109375, 1.91796875, 2.029296875, 0.0031375885009765625, 0.07855224609375, 0.4111328125, 2.3046875, 2.58203125, 0.009124755859375, 0.01375579833984375, 2.990234375, 0.9345703125, 1.5263671875, 0.0027618408203125, 0.07080078125], "tokens": [2071, 1389, 35, 77, 25287, 79, 280, 1389, 37, 77, 25287, 79, 319, 15534, 77, 25287, 79, 517, 12211, 14373, 45]}
{"line_number": 587, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [], "tokens": []}
{"line_number": 589, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.634765625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [8.625, 2.021484375, 0.00496673583984375, 0.0050811767578125, 0.399658203125, 0.00986480712890625, 0.0178680419921875, 0.01043701171875, 0.0077667236328125, 0.0004949569702148438, 0.0039825439453125, 0.189453125, 0.043487548828125, 0.003231048583984375, 0.01397705078125, 0.00011706352233886719, 0.0016450881958007812, 0.0643310546875], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 589, "line_type": "generated", "code": "\n        // copy r and (q transpose)*b to preserve input and initialize s.\n        // in particular, save the diagonal elements of r in x.\n        for (int j = 0; j < solvedCols; ++j) {\n            lmDiag", "entropy": 0.13427734375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.1597900390625, 0.9501953125, 1.59375, 0.416015625, 0.1405029296875, 0.0247344970703125, 0.0004420280456542969, 0.024810791015625, 0.005840301513671875, 0.00044465065002441406, 0.039459228515625, 0.006420135498046875, 0.0770263671875, 0.003681182861328125, 0.0021305084228515625, 0.01262664794921875, 0.50732421875, 0.038238525390625, 0.1441650390625, 0.0067138671875, 0.0302581787109375, 5.805492401123047e-05, 0.0028133392333984375, 0.0016202926635742188, 0.00975799560546875, 0.0054473876953125, 1.3589859008789062e-05, 0.0007219314575195312, 0.097412109375, 0.005706787109375, 0.06005859375, 0.66259765625, 0.6171875, 0.0018939971923828125, 0.0011415481567382812, 0.07061767578125, 0.0023136138916015625, 0.00811004638671875, 0.005706787109375, 0.00577545166015625, 0.00022614002227783203, 0.001598358154296875, 0.242919921875, 0.0765380859375, 0.0012302398681640625, 0.012969970703125, 6.210803985595703e-05, 0.00081634521484375, 0.00545501708984375, 0.023040771484375, 0.802734375, 0.072509765625], "tokens": [291, 434, 1933, 540, 461, 308, 99, 27224, 4586, 84, 372, 24070, 1509, 461, 7379, 309, 32, 291, 434, 328, 8409, 30, 4131, 322, 27601, 4702, 432, 540, 328, 816, 32, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 324, 30780, 26244]}
{"line_number": 590, "line_type": "original", "code": "                int pj = permutation[j];", "entropy": 2.68359375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [9.078125, 3.283203125, 7.359375, 0.1396484375, 0.51171875, 0.0026226043701171875, 1.0859375, 0.005886077880859375], "tokens": [2071, 629, 46704, 280, 38151, 77, 92, 970]}
{"line_number": 590, "line_type": "generated", "code": "\n        // copy r and (q transpose)*b to preserve input and initialize s\n        for (int j = 0; j < solvedCols; ++j) {\n            lmDiag[j] = diag[j];\n            work[j] = q", "entropy": 0.142578125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.2529296875, 0.72412109375, 1.169921875, 0.413818359375, 0.1697998046875, 0.0330810546875, 0.00045990943908691406, 0.022735595703125, 0.00644683837890625, 0.00045037269592285156, 0.045806884765625, 0.007259368896484375, 0.08709716796875, 0.0033550262451171875, 0.0022373199462890625, 0.01409149169921875, 1.0703125, 0.81787109375, 0.0019969940185546875, 0.0008263587951660156, 0.09619140625, 0.0023555755615234375, 0.00843048095703125, 0.005527496337890625, 0.00615692138671875, 0.00020945072174072266, 0.0025463104248046875, 0.1988525390625, 0.11724853515625, 0.0011606216430664062, 0.006244659423828125, 5.0187110900878906e-05, 0.0006771087646484375, 0.005390167236328125, 0.04168701171875, 1.04296875, 0.133056640625, 0.0002658367156982422, 0.0182647705078125, 0.00014960765838623047, 0.0008959770202636719, 0.0114288330078125, 0.001316070556640625, 0.27783203125, 0.01200103759765625, 0.1539306640625, 0.28564453125, 0.0005154609680175781, 0.002285003662109375, 0.0009126663208007812, 0.029876708984375, 0.10382080078125], "tokens": [291, 434, 1933, 540, 461, 308, 99, 27224, 4586, 84, 372, 24070, 1509, 461, 7379, 309, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 324, 30780, 26244, 77, 92, 79, 280, 15534, 77, 92, 970, 324, 1389, 77, 92, 79, 280, 2678]}
