{"line_number": 423, "line_type": "original", "code": "        return optimizeInternal(maxEval,", "entropy": 0.849609375, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [3.693359375, 2.708984375, 0.2012939453125, 0.107421875, 0.00460052490234375, 0.07879638671875, 0.0006175041198730469, 0.0013856887817382812], "tokens": [351, 442, 22269, 4292, 26, 1449, 14066, 30]}
{"line_number": 423, "line_type": "generated", "code": "\n     * @param optData Optimization data.\n     * @return the point/value pair giving the optimal value for objective\n     * function.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if the start point", "entropy": 0.11077880859375, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [1.2783203125, 0.019195556640625, 0.0301971435546875, 0.131591796875, 1.04296875, 0.0297088623046875, 1.474609375, 0.01551055908203125, 0.0709228515625, 0.396240234375, 0.0009222030639648438, 0.034027099609375, 0.033843994140625, 0.0180816650390625, 0.0025997161865234375, 0.0007266998291015625, 0.014923095703125, 8.249282836914062e-05, 0.00012350082397460938, 0.00016295909881591797, 0.0014925003051757812, 0.0006151199340820312, 0.0023632049560546875, 0.09075927734375, 0.01324462890625, 0.00015807151794433594, 0.0030975341796875, 0.006439208984375, 0.017852783203125, 0.0033817291259765625, 0.0037059783935546875, 0.2379150390625, 0.11822509765625, 4.76837158203125e-06, 5.3882598876953125e-05, 1.3113021850585938e-06, 1.0848045349121094e-05, 2.384185791015625e-07, 8.952617645263672e-05, 0.0004172325134277344, 1.0728836059570312e-06, 0.00027823448181152344, 1.3470649719238281e-05, 0.37744140625, 9.775161743164062e-05, 4.5299530029296875e-06, 0.022064208984375, 0.0001538991928100586, 0.0037593841552734375, 0.03546142578125, 0.22705078125, 0.00030541419982910156], "tokens": [275, 319, 477, 753, 2919, 750, 41916, 706, 32, 275, 319, 477, 601, 322, 2260, 33, 853, 6092, 21239, 322, 24824, 786, 436, 25110, 275, 319, 667, 32, 275, 319, 477, 5117, 1086, 32, 2104, 32, 8369, 32, 3812, 37, 32, 3893, 32, 9883, 31102, 984, 275, 319, 415, 322, 1477, 2260]}
{"line_number": 496, "line_type": "original", "code": "        return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);", "entropy": 1.5146484375, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [4.0234375, 0.2978515625, 8.1875, 0.00861358642578125, 10.046875, 0.37890625, 0.06927490234375, 0.59521484375, 0.31005859375, 0.0163116455078125, 8.515625, 0.017547607421875, 0.0208282470703125, 0.448486328125, 2.72265625, 2.956390380859375e-05, 0.8271484375, 0.00038051605224609375, 0.03204345703125, 0.00298309326171875, 0.203369140625, 0.85888671875, 0.27197265625, 1.126953125, 0.006954193115234375, 0.393798828125], "tokens": [351, 442, 2599, 32, 22926, 4292, 26, 1449, 14066, 30, 4540, 2755, 32, 452, 31187, 1529, 11235, 27623, 2863, 2447, 26, 88, 471, 2919, 750, 293]}
{"line_number": 496, "line_type": "generated", "code": "\n        return residual;\n    }\n\n    /**\n     * Computes the Jacobian matrix.\n     *\n     * @param point Current parameter values.\n     * @return the Jacobian matrix.\n     * @throws TooManyEvaluationsException if the number of allowed\n     *", "entropy": 0.34375, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [1.123046875, 0.39892578125, 1.6162109375, 1.392578125, 0.033935546875, 0.0005598068237304688, 0.0977783203125, 0.00921630859375, 0.0204010009765625, 3.266334533691406e-05, 0.82861328125, 0.1036376953125, 1.146484375, 0.0005202293395996094, 0.16796875, 0.368896484375, 0.05462646484375, 0.0001024007797241211, 1.0185546875, 0.00013196468353271484, 0.013458251953125, 0.25830078125, 0.7529296875, 1.46484375, 0.93505859375, 0.96728515625, 0.0201873779296875, 0.05816650390625, 0.0020656585693359375, 0.019378662109375, 0.1949462890625, 0.07757568359375, 0.1409912109375, 0.000457763671875, 0.0496826171875, 0.35205078125, 0.038848876953125, 0.2132568359375, 0.005077362060546875, 0.650390625, 1.0205078125, 0.0011310577392578125, 0.0015497207641601562, 1.430511474609375e-06, 6.341934204101562e-05, 0.0204010009765625, 0.01352691650390625, 0.53759765625, 0.0001804828643798828, 0.697265625, 0.9873046875, 2.6941299438476562e-05], "tokens": [291, 442, 27410, 45, 284, 320, 446, 1022, 275, 319, 41932, 322, 971, 30495, 5045, 32, 275, 319, 275, 319, 477, 753, 2260, 7500, 3395, 2078, 32, 275, 319, 477, 601, 322, 971, 30495, 5045, 32, 275, 319, 477, 5117, 37327, 7434, 10491, 993, 984, 415, 322, 1451, 432, 6660, 275, 319]}
{"line_number": 502, "line_type": "original", "code": "        super.setUp();", "entropy": 4.7734375, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [3.099609375, 9.578125, 0.005523681640625, 11.0859375, 0.085205078125], "tokens": [351, 2599, 32, 23741, 473]}
{"line_number": 502, "line_type": "generated", "code": "\n        return residuals;\n    }\n\n    /**\n     * Computes the Jacobian matrix.\n     * The Jacobian is the matrix of first partial derivatives of the\n     * vector-valued function.\n     *\n     * @param params Model parameters. This is the", "entropy": 0.33203125, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [0.50634765625, 0.697265625, 0.0809326171875, 4.982948303222656e-05, 0.004444122314453125, 0.0261077880859375, 0.0001474618911743164, 0.130126953125, 0.00836944580078125, 0.038177490234375, 1.811981201171875e-05, 0.88720703125, 0.1280517578125, 1.0556640625, 0.0005664825439453125, 0.1373291015625, 0.39013671875, 0.05487060546875, 0.00010693073272705078, 1.0146484375, 0.53515625, 0.0007524490356445312, 0.92626953125, 0.308837890625, 0.08367919921875, 0.14453125, 0.859375, 0.40673828125, 0.0013265609741210938, 0.05206298828125, 0.05889892578125, 0.267822265625, 8.344650268554688e-07, 0.98828125, 0.0836181640625, 0.0041351318359375, 1.430511474609375e-06, 0.166259765625, 0.1715087890625, 0.71728515625, 3.7670135498046875e-05, 1.5185546875, 6.604194641113281e-05, 0.01334381103515625, 0.29833984375, 1.328125, 1.46484375, 0.0460205078125, 0.439208984375, 0.96533203125, 0.1375732421875, 0.10992431640625], "tokens": [291, 442, 27410, 101, 45, 284, 320, 446, 1022, 275, 319, 41932, 322, 971, 30495, 5045, 32, 275, 319, 886, 971, 30495, 438, 322, 5045, 432, 1932, 7360, 40391, 432, 322, 275, 319, 4026, 31, 3431, 318, 667, 32, 275, 319, 275, 319, 477, 753, 2803, 3678, 3377, 32, 1348, 438, 322]}
{"line_number": 505, "line_type": "original", "code": "        jacobianEvaluations = 0;", "entropy": 2.185546875, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [4.70703125, 6.109375, 0.9677734375, 6.8515625, 0.00464630126953125, 0.802734375, 0.11480712890625, 0.01108551025390625, 0.09661865234375], "tokens": [351, 594, 30495, 10491, 993, 280, 225, 34, 45]}
{"line_number": 505, "line_type": "generated", "code": "\n\n    /**\n     * Computes the objective function value.\n     *\n     * @param point Point at which the objective function must be evaluated.\n     * @return the objective function value.\n     * @throws TooManyEvaluationsException if the maximal number of\n    ", "entropy": 0.278564453125, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [0.912109375, 0.056884765625, 0.0869140625, 2.6226043701171875e-05, 1.435546875, 0.20947265625, 2.111328125, 0.063232421875, 0.132568359375, 0.192626953125, 0.10302734375, 0.00019621849060058594, 0.951171875, 0.00010037422180175781, 0.01541900634765625, 0.021575927734375, 0.396728515625, 0.392822265625, 0.162841796875, 9.620189666748047e-05, 0.2734375, 0.08837890625, 0.01409912109375, 0.27685546875, 0.001735687255859375, 0.08929443359375, 0.002635955810546875, 0.0030612945556640625, 0.00043773651123046875, 0.13330078125, 0.041717529296875, 0.047637939453125, 0.6962890625, 0.0228729248046875, 0.0185394287109375, 0.60791015625, 0.0225067138671875, 0.40771484375, 0.01015472412109375, 0.79931640625, 1.55078125, 0.0009198188781738281, 0.0031890869140625, 5.0067901611328125e-06, 7.581710815429688e-05, 0.01030731201171875, 0.004215240478515625, 1.0859375, 0.0001844167709350586, 0.0003371238708496094, 0.004207611083984375, 1.0185546875], "tokens": [446, 1022, 275, 319, 41932, 322, 25110, 667, 786, 32, 275, 319, 275, 319, 477, 753, 2260, 6431, 821, 1510, 322, 25110, 667, 2298, 526, 22423, 32, 275, 319, 477, 601, 322, 25110, 667, 786, 32, 275, 319, 477, 5117, 37327, 7434, 10491, 993, 984, 415, 322, 1769, 2977, 1451, 432, 275]}
{"line_number": 508, "line_type": "original", "code": "        weightMatrixSqrt = squareRoot(getWeight());", "entropy": 2.009765625, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [2.556640625, 4.53515625, 0.89453125, 2.08203125, 0.64208984375, 7.16796875, 0.0333251953125, 0.50927734375, 2.158203125, 0.03204345703125, 1.4951171875], "tokens": [351, 7533, 4161, 30657, 280, 14627, 4058, 26, 371, 7583, 1035]}
{"line_number": 508, "line_type": "generated", "code": "\n     * @return the square-root of the weight matrix.\n     * @since 3.1\n     */\n    protected RealMatrix computeSqrtW() {\n        return sqrtW;\n    }\n\n    /**\n     * Computes the value of the objective function.\n    ", "entropy": 0.2266845703125, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [0.4609375, 0.1134033203125, 0.59716796875, 0.7021484375, 0.310302734375, 0.0283660888671875, 0.12078857421875, 0.0009975433349609375, 0.0107879638671875, 0.00545501708984375, 0.01099395751953125, 0.00772857666015625, 0.1357421875, 0.023193359375, 0.318115234375, 0.021087646484375, 0.65966796875, 0.001377105712890625, 0.0139923095703125, 2.86102294921875e-05, 0.048065185546875, 0.001979827880859375, 0.0212860107421875, 0.00677490234375, 0.2122802734375, 0.485107421875, 0.00036454200744628906, 0.472412109375, 0.70068359375, 0.322021484375, 0.03729248046875, 0.016387939453125, 0.1595458984375, 1.236328125, 0.354736328125, 0.03802490234375, 0.12548828125, 0.0263671875, 0.00013124942779541016, 0.1705322265625, 0.01166534423828125, 0.025360107421875, 4.553794860839844e-05, 0.619140625, 0.125732421875, 2.21484375, 0.01239776611328125, 0.04010009765625, 0.466796875, 0.0021686553955078125, 0.201904296875, 0.0916748046875], "tokens": [275, 319, 477, 601, 322, 14627, 31, 2388, 432, 322, 7533, 5045, 32, 275, 319, 477, 8119, 225, 37, 32, 35, 275, 569, 284, 2522, 11443, 4161, 7596, 30657, 73, 346, 301, 291, 442, 17058, 73, 45, 284, 320, 446, 1022, 275, 319, 41932, 322, 786, 432, 322, 25110, 667, 32, 275]}
{"line_number": 562, "line_type": "original", "code": "            final EigenDecomposition dec = new EigenDecomposition(m);", "entropy": 0.81689453125, "is_bug_line": true, "sus_score": 0.1091089451179962, "per_token_entropy": [5.828125, 3.5234375, 1.4951171875, 0.0084991455078125, 0.04010009765625, 0.2822265625, 0.053009033203125, 0.07745361328125, 0.00524139404296875, 8.952617645263672e-05, 5.245208740234375e-06, 0.015625, 0.051483154296875, 0.05438232421875], "tokens": [1468, 1158, 17665, 685, 20103, 5973, 280, 537, 17665, 685, 20103, 26, 95, 293]}
{"line_number": 562, "line_type": "generated", "code": "\n\n    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix", "entropy": 0.1278076171875, "is_bug_line": true, "sus_score": 0.1091089451179962, "per_token_entropy": [0.9853515625, 0.050262451171875, 0.0474853515625, 5.233287811279297e-05, 1.080078125, 0.156494140625, 2.51953125, 0.13671875, 0.00415802001953125, 0.021881103515625, 0.08306884765625, 0.25830078125, 0.0149993896484375, 0.1868896484375, 0.030548095703125, 0.00011980533599853516, 0.1405029296875, 7.390975952148438e-05, 0.00429534912109375, 0.05157470703125, 0.1162109375, 0.087646484375, 4.3511390686035156e-05, 0.00908660888671875, 0.01450347900390625, 0.002262115478515625, 8.71419906616211e-05, 8.344650268554688e-07, 0.01302337646484375, 0.00025582313537597656, 0.0006690025329589844, 0.0010499954223632812, 0.005859375, 0.0017786026000976562, 0.0002789497375488281, 0.0009813308715820312, 0.053436279296875, 0.007648468017578125, 0.00803375244140625, 0.0005779266357421875, 0.005519866943359375, 0.001251220703125, 0.0002903938293457031, 0.0018596649169921875, 0.0003199577331542969, 0.009246826171875, 0.0028858184814453125, 0.11651611328125, 0.0240325927734375, 0.040130615234375, 0.35107421875, 0.0013628005981445312], "tokens": [446, 1022, 275, 319, 41932, 322, 14627, 31, 2388, 432, 322, 7533, 5045, 32, 275, 319, 275, 319, 477, 753, 345, 11131, 7263, 30, 11557, 31, 30343, 659, 308, 3292, 27, 5045, 32, 275, 319, 477, 601, 322, 14627, 31, 2388, 432, 322, 7533, 5045, 32, 275, 569, 284, 945, 11443, 4161]}
{"line_number": 134, "line_type": "original", "code": "        super(checker);", "entropy": 6.078125, "is_bug_line": false, "sus_score": 0.10721125348377948, "per_token_entropy": [4.03515625, 11.65625, 3.865234375, 9.71875, 1.1142578125], "tokens": [351, 2599, 26, 17099, 293]}
{"line_number": 134, "line_type": "generated", "code": "\n                orders[j] = dsValue[i].getPartialDerivative(j);\n            }\n            for (int j = 0; j < nC; ++j) {\n                jacobianData[i][j] = dsValue[i", "entropy": 0.11004638671875, "is_bug_line": false, "sus_score": 0.10721125348377948, "per_token_entropy": [0.583984375, 1.0341796875, 0.0015306472778320312, 0.0084381103515625, 0.0006322860717773438, 0.004047393798828125, 0.449951171875, 0.024627685546875, 0.0002028942108154297, 0.0052947998046875, 0.0006051063537597656, 0.51953125, 0.011566162109375, 0.005153656005859375, 0.002521514892578125, 0.00244140625, 0.1842041015625, 0.5048828125, 0.12274169921875, 0.0006737709045410156, 0.10467529296875, 1.0390625, 0.002323150634765625, 0.00225830078125, 0.3251953125, 0.0032329559326171875, 0.004436492919921875, 0.00201416015625, 0.001934051513671875, 0.0002665519714355469, 0.00109100341796875, 0.007904052734375, 0.00429534912109375, 0.0001811981201171875, 0.0010852813720703125, 4.279613494873047e-05, 0.001033782958984375, 0.0004494190216064453, 0.30810546875, 0.1663818359375, 1.33514404296875e-05, 3.4332275390625e-05, 0.00022470951080322266, 0.00040149688720703125, 0.0002620220184326172, 0.0058746337890625, 4.4465065002441406e-05, 0.00689697265625, 0.2376708984375, 0.028106689453125, 2.86102294921875e-05, 0.0001888275146484375], "tokens": [400, 17588, 77, 92, 79, 280, 10180, 882, 77, 91, 997, 371, 12221, 30970, 1353, 26, 92, 293, 324, 320, 324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 310, 53, 45, 3311, 92, 27, 301, 400, 594, 30495, 750, 77, 91, 1674, 92, 79, 280, 10180, 882, 77, 91]}
{"line_number": 135, "line_type": "original", "code": "    }", "entropy": 1.484375, "is_bug_line": false, "sus_score": 0.10721125348377948, "per_token_entropy": [2.87109375, 0.09783935546875], "tokens": [264, 320]}
{"line_number": 135, "line_type": "generated", "code": "\n            }\n            final DerivativeStructure dsRes = dsValue[i];\n            for (int j = 0; j < nC; ++j) {\n                jacobianData[i][j] = dsRes.getPartialDerivative(", "entropy": 0.1654052734375, "is_bug_line": false, "sus_score": 0.10721125348377948, "per_token_entropy": [0.71533203125, 0.053924560546875, 0.26416015625, 1.330078125, 0.454345703125, 1.3113021850585938e-06, 2.944469451904297e-05, 8.702278137207031e-06, 0.63037109375, 0.89111328125, 0.5576171875, 0.12744140625, 0.00308990478515625, 0.00010335445404052734, 0.0003223419189453125, 1.4423828125, 0.060028076171875, 0.73681640625, 0.0024509429931640625, 0.0097808837890625, 0.364990234375, 0.003170013427734375, 0.0168914794921875, 0.0013895034790039062, 0.0039825439453125, 0.0004336833953857422, 0.007396697998046875, 0.082275390625, 0.0221099853515625, 0.0003192424774169922, 0.0016384124755859375, 9.894371032714844e-05, 0.0014638900756835938, 0.0005550384521484375, 0.09332275390625, 0.4296875, 5.91278076171875e-05, 0.00031757354736328125, 0.000308990478515625, 0.0012998580932617188, 0.0008769035339355469, 0.0002644062042236328, 5.5789947509765625e-05, 0.01134490966796875, 0.071044921875, 0.0003368854522705078, 0.00022900104522705078, 0.180908203125, 0.02728271484375, 0.0005125999450683594, 0.000446319580078125, 0.0005526542663574219], "tokens": [324, 320, 324, 1158, 15944, 387, 1353, 8634, 10180, 721, 280, 10180, 882, 77, 91, 970, 324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 310, 53, 45, 3311, 92, 27, 301, 400, 594, 30495, 750, 77, 91, 1674, 92, 79, 280, 10180, 721, 32, 371, 12221, 30970, 1353, 26]}
