{"line_number": 144, "line_type": "original", "code": "       this(value, 0, maxDenominator, 100);", "entropy": 1.3779296875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.22265625, 4.2109375, 2.21875, 1.1201171875, 0.043701171875, 3.169921875, 0.236083984375, 0.59130859375, 0.58740234375, 0.009033203125, 3.933906555175781e-06, 0.1319580078125, 3.025390625, 0.483642578125, 0.251708984375, 0.03839111328125, 0.07769775390625], "tokens": [958, 458, 26, 853, 30, 225, 34, 30, 1769, 43484, 9693, 30, 225, 35, 34, 34, 293]}
{"line_number": 144, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Create a fraction given the numerator and denominator values.\n     * <p>\n     * The fraction will be reduced to lowest terms.\n     * </p>\n     * @param numerator the numerator\n     * @param denominator", "entropy": 0.1885986328125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.79248046875, 0.0036945343017578125, 1.0458984375, 0.08843994140625, 0.04156494140625, 2.872943878173828e-05, 1.0810546875, 0.0179443359375, 0.10443115234375, 0.359375, 0.0273895263671875, 0.1851806640625, 9.429454803466797e-05, 0.1163330078125, 0.01039886474609375, 0.54150390625, 0.006175994873046875, 0.05609130859375, 0.0021152496337890625, 1.6220703125, 0.0028076171875, 0.004154205322265625, 0.0106964111328125, 1.704692840576172e-05, 0.80517578125, 0.2095947265625, 0.1854248046875, 0.03729248046875, 0.0474853515625, 0.020294189453125, 0.004657745361328125, 0.0010385513305664062, 0.0117340087890625, 0.026824951171875, 0.012908935546875, 0.2327880859375, 6.306171417236328e-05, 0.01049041748046875, 0.00075531005859375, 0.00013649463653564453, 0.250732421875, 0.0001583099365234375, 0.0089111328125, 0.17138671875, 0.353759765625, 0.00841522216796875, 9.09566879272461e-05, 1.2822265625, 2.300739288330078e-05, 2.0742416381835938e-05, 5.6624412536621094e-05, 0.0005245208740234375], "tokens": [284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 2702, 322, 1929, 11290, 461, 39920, 2078, 32, 275, 319, 333, 98, 48, 275, 319, 886, 18795, 1098, 526, 22974, 372, 25624, 5955, 32, 275, 319, 576, 98, 48, 275, 319, 477, 753, 1929, 11290, 322, 1929, 11290, 275, 319, 477, 753, 39920]}
{"line_number": 145, "line_type": "original", "code": "    }", "entropy": 2.12109375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [2.73046875, 1.51171875], "tokens": [264, 320]}
{"line_number": 145, "line_type": "generated", "code": "        double r1 = 1.0 / (r0 - a0);\n        long a1 = 1;\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q", "entropy": 0.1619873046875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [1.9638671875, 2.455078125, 0.64697265625, 0.04913330078125, 0.0112152099609375, 0.0025634765625, 1.823902130126953e-05, 0.7783203125, 0.0013275146484375, 0.02001953125, 0.0018796920776367188, 0.036285400390625, 1.1920928955078125e-07, 0.0017547607421875, 0.00034236907958984375, 1.1920928955078125e-07, 0.000965118408203125, 0.2369384765625, 0.0411376953125, 0.0032939910888671875, 0.007030487060546875, 0.0089263916015625, 0.322998046875, 0.10052490234375, 0.1767578125, 0.24462890625, 0.282958984375, 0.15185546875, 0.220703125, 0.0061187744140625, 0.0977783203125, 0.2047119140625, 0.0899658203125, 0.01348114013671875, 0.003993988037109375, 0.055419921875, 2.2649765014648438e-05, 0.00020194053649902344, 3.8504600524902344e-05, 3.933906555175781e-06, 7.081031799316406e-05, 0.0999755859375, 0.0135955810546875, 0.0003237724304199219, 0.0002243518829345703, 0.0008845329284667969, 0.0022430419921875, 0.05743408203125, 0.00021183490753173828, 0.00519561767578125, 0.00047850608825683594, 1.5497207641601562e-05], "tokens": [351, 2064, 540, 35, 280, 225, 35, 32, 34, 517, 308, 100, 34, 429, 312, 34, 293, 291, 1946, 312, 35, 280, 225, 35, 45, 291, 1946, 298, 34, 280, 225, 35, 45, 291, 1946, 2678, 34, 280, 225, 34, 45, 291, 1946, 298, 35, 280, 312, 34, 45, 291, 1946, 2678]}
{"line_number": 215, "line_type": "original", "code": "                throw new FractionConversionException(value, p2, q2);", "entropy": 1.2744140625, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [7.78125, 3.5546875, 0.025634765625, 1.943359375, 0.038482666015625, 0.000186920166015625, 0.04534912109375, 0.3154296875, 0.038055419921875, 4.59375, 0.611328125, 0.02117919921875, 0.06732177734375, 0.003131866455078125, 0.07464599609375], "tokens": [2071, 1422, 537, 40823, 14350, 984, 26, 853, 30, 298, 36, 30, 2678, 36, 293]}
{"line_number": 215, "line_type": "generated", "code": "\n        }\n\n        if (num == 0) {\n            this.numerator = 0;\n            this.denominator = 1;\n            return;\n        }\n\n        // reduce numerator and denominator by greatest common denominator\n        if (num < 0", "entropy": 0.1544189453125, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [0.1566162109375, 0.1644287109375, 0.74560546875, 0.712890625, 0.0228729248046875, 0.6318359375, 0.0164337158203125, 0.01165771484375, 2.6345252990722656e-05, 0.008819580078125, 0.0035381317138671875, 0.0305633544921875, 0.408935546875, 0.00023865699768066406, 0.0036983489990234375, 0.0005855560302734375, 0.0367431640625, 0.001491546630859375, 1.7762184143066406e-05, 0.0014171600341796875, 0.01457977294921875, 0.0013179779052734375, 7.081031799316406e-05, 0.00017249584197998047, 2.86102294921875e-06, 0.00024890899658203125, 0.00017380714416503906, 0.0022907257080078125, 0.00023043155670166016, 0.264892578125, 0.0018854141235351562, 0.0025920867919921875, 0.0188751220703125, 0.0030193328857421875, 0.1241455078125, 1.2724609375, 0.416015625, 0.279296875, 0.0229949951171875, 0.00978851318359375, 0.0183258056640625, 0.07012939453125, 0.388671875, 0.0002760887145996094, 0.3955078125, 0.423828125, 1.1767578125, 0.00601959228515625, 0.0657958984375, 0.08306884765625, 0.005817413330078125, 7.271766662597656e-06], "tokens": [291, 320, 584, 415, 308, 1516, 610, 225, 34, 27, 301, 324, 458, 32, 1516, 11290, 280, 225, 34, 45, 324, 458, 32, 29805, 9693, 280, 225, 35, 45, 324, 442, 45, 291, 320, 584, 434, 11665, 1929, 11290, 461, 39920, 810, 48299, 4942, 39920, 291, 415, 308, 1516, 333, 225, 34]}
{"line_number": 239, "line_type": "original", "code": "            this.numerator = (int) p1;", "entropy": 1.48046875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.40625, 1.1875, 0.0163421630859375, 1.23828125, 0.01617431640625, 0.51220703125, 1.873046875, 0.2427978515625, 0.154296875, 2.10546875, 1.9833984375, 0.0374755859375], "tokens": [1468, 458, 32, 1516, 11290, 280, 308, 410, 27, 298, 35, 45]}
{"line_number": 239, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Create a fraction from a double value.  The double value is converted to\n     * a fraction by finding the two integers that most closely represent the\n     * decimal value of the double.  The result is then reduced to lowest terms", "entropy": 0.45654296875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.2342529296875, 0.01531219482421875, 0.30615234375, 0.09173583984375, 0.060577392578125, 5.435943603515625e-05, 0.70947265625, 0.0118560791015625, 0.1307373046875, 0.736328125, 0.11376953125, 0.45166015625, 0.409912109375, 0.037017822265625, 1.2275390625, 0.11114501953125, 0.9970703125, 0.122314453125, 0.822265625, 0.03704833984375, 0.1722412109375, 0.260009765625, 1.895427703857422e-05, 0.12396240234375, 0.26416015625, 1.91796875, 1.794921875, 0.027618408203125, 1.8037109375, 0.318359375, 0.84033203125, 0.6796875, 0.1787109375, 0.184326171875, 0.1666259765625, 0.0178070068359375, 1.9669532775878906e-05, 2.326171875, 0.8740234375, 1.029296875, 0.00042510032653808594, 0.0440673828125, 0.09710693359375, 0.06634521484375, 0.2177734375, 1.4345703125, 0.0777587890625, 0.66064453125, 1.4873046875, 0.0029811859130859375, 0.01404571533203125, 0.02117919921875], "tokens": [284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 645, 312, 2064, 786, 32, 225, 886, 2064, 786, 438, 12785, 372, 275, 319, 312, 18795, 810, 17340, 322, 3134, 18670, 688, 4630, 43127, 4042, 322, 275, 319, 10245, 786, 432, 322, 2064, 32, 225, 886, 1056, 438, 1615, 22974, 372, 25624, 5955]}
{"line_number": 240, "line_type": "original", "code": "            this.denominator = (int) q1;", "entropy": 1.5693359375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.578125, 2.466796875, 0.04718017578125, 2.5390625, 0.00275421142578125, 0.050811767578125, 1.677734375, 0.08184814453125, 0.0548095703125, 0.8095703125, 2.48828125, 0.030914306640625], "tokens": [1468, 458, 32, 29805, 9693, 280, 308, 410, 27, 2678, 35, 45]}
{"line_number": 240, "line_type": "generated", "code": "\n    /**\n     * Create a fraction given the double value and maximum error allowed.\n     * <p>\n     * The value passed in will be converted to a fraction using the\n     * {@link #Fraction(double)} constructor.  The resulting fraction will be", "entropy": 0.292724609375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [1.1767578125, 0.2152099609375, 0.0810546875, 0.00019085407257080078, 0.78564453125, 0.015655517578125, 0.176513671875, 0.7998046875, 0.55908203125, 0.24072265625, 0.0144500732421875, 0.73876953125, 0.028472900390625, 0.058319091796875, 0.1563720703125, 0.012420654296875, 0.27197265625, 0.0012292861938476562, 0.5927734375, 0.063720703125, 0.0128631591796875, 0.0269317626953125, 5.1140785217285156e-05, 0.447998046875, 0.4384765625, 0.70849609375, 0.006072998046875, 0.99072265625, 0.02166748046875, 0.13671875, 0.0384521484375, 0.08746337890625, 0.1912841796875, 1.4833984375, 0.044891357421875, 0.092529296875, 7.367134094238281e-05, 0.057037353515625, 0.01293182373046875, 0.54296875, 0.1627197265625, 0.0017957687377929688, 0.01125335693359375, 0.56494140625, 0.00991058349609375, 0.252685546875, 0.7294921875, 0.888671875, 0.1549072265625, 0.128662109375, 0.74755859375, 0.24560546875], "tokens": [284, 1022, 275, 319, 2648, 312, 18795, 2702, 322, 2064, 786, 461, 7091, 1048, 6660, 32, 275, 319, 333, 98, 48, 275, 319, 886, 786, 5403, 328, 1098, 526, 12785, 372, 312, 18795, 1471, 322, 275, 319, 3088, 1204, 588, 20709, 26, 2627, 4370, 4374, 32, 225, 886, 14302, 18795, 1098, 526]}
{"line_number": 220, "line_type": "original", "code": "                p0 = p1;", "entropy": 4.13671875, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [4.83984375, 11.6640625, 3.892578125, 3.6328125, 2.900390625, 0.84033203125, 1.185546875], "tokens": [2071, 298, 34, 280, 298, 35, 45]}
{"line_number": 220, "line_type": "generated", "code": "num, den);\n            }\n            num = -num;\n            den = -den;\n        }\n        if (num == 0) {\n            this.numerator = 0;\n            this.denominator = 1;\n            return;\n        }", "entropy": 0.11785888671875, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [2.33984375, 0.0280609130859375, 0.038360595703125, 0.06683349609375, 0.08563232421875, 0.0005331039428710938, 0.0731201171875, 0.041717529296875, 0.0017242431640625, 0.0235748291015625, 0.00920867919921875, 0.0007290840148925781, 0.0021209716796875, 0.0001850128173828125, 0.00010800361633300781, 0.0009541511535644531, 0.00225830078125, 5.352497100830078e-05, 0.00904083251953125, 0.0004391670227050781, 0.85107421875, 0.86376953125, 0.00566864013671875, 0.0379638671875, 0.01213836669921875, 0.0285186767578125, 4.470348358154297e-05, 0.009033203125, 0.00209808349609375, 0.01214599609375, 1.01171875, 0.00015985965728759766, 0.0110626220703125, 0.0006670951843261719, 0.025390625, 0.0014543533325195312, 1.5854835510253906e-05, 0.0004258155822753906, 0.01381683349609375, 0.0008053779602050781, 8.821487426757812e-06, 0.0001264810562133789, 2.9802322387695312e-06, 0.00023686885833740234, 0.0001983642578125, 0.0044097900390625, 5.4717063903808594e-05, 0.4931640625, 0.00177001953125, 0.00046753883361816406, 0.004718780517578125, 0.01200103759765625], "tokens": [1516, 30, 5537, 293, 324, 320, 324, 1929, 280, 429, 1516, 45, 324, 5537, 280, 429, 5114, 45, 291, 320, 291, 415, 308, 1516, 610, 225, 34, 27, 301, 324, 458, 32, 1516, 11290, 280, 225, 34, 45, 324, 458, 32, 29805, 9693, 280, 225, 35, 45, 324, 442, 45, 291, 320]}
{"line_number": 221, "line_type": "original", "code": "                p1 = p2;", "entropy": 3.244140625, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [5.1328125, 8.0546875, 3.65234375, 0.11614990234375, 3.521484375, 1.1240234375, 1.1015625], "tokens": [2071, 298, 35, 280, 298, 36, 45]}
{"line_number": 221, "line_type": "generated", "code": "\n            }\n            num = -num;\n            den = -den;\n        }\n\n        // use Euclid's algorithm to reduce to lowest terms\n        int gcd = getGcd(num, den);\n        if (gcd > 1) {\n           ", "entropy": 0.2020263671875, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [0.150146484375, 0.0211639404296875, 0.1417236328125, 0.055938720703125, 0.0016727447509765625, 0.0238494873046875, 0.00984954833984375, 0.000553131103515625, 0.00634002685546875, 0.00024139881134033203, 0.00013196468353271484, 0.0008697509765625, 0.0019931793212890625, 0.0001920461654663086, 0.08013916015625, 0.0015439987182617188, 0.73388671875, 0.748046875, 0.72216796875, 0.2125244140625, 0.029266357421875, 5.125999450683594e-06, 0.0001627206802368164, 0.047515869140625, 0.44873046875, 0.6044921875, 0.0171051025390625, 1.5224609375, 0.03662109375, 0.0006499290466308594, 0.07403564453125, 0.724609375, 0.8369140625, 0.007640838623046875, 1.5419921875, 0.135009765625, 0.67578125, 0.0298004150390625, 0.0809326171875, 0.001232147216796875, 0.0030841827392578125, 0.0014524459838867188, 0.08746337890625, 0.2332763671875, 0.0051422119140625, 0.01000213623046875, 0.392578125, 0.0004589557647705078, 0.0133209228515625, 0.0012884140014648438, 0.00243377685546875, 0.032958984375], "tokens": [324, 320, 324, 1929, 280, 429, 1516, 45, 324, 5537, 280, 429, 5114, 45, 291, 320, 584, 434, 793, 516, 103, 573, 314, 1182, 8218, 372, 11665, 372, 25624, 5955, 291, 629, 43422, 280, 622, 57, 2087, 26, 1516, 30, 5537, 293, 291, 415, 308, 46060, 848, 225, 35, 27, 301, 324]}
{"line_number": 222, "line_type": "original", "code": "                q0 = q1;", "entropy": 6.30078125, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [6.65234375, 13.4765625, 8.1328125, 0.010589599609375, 12.3359375, 0.472900390625, 3.005859375], "tokens": [2071, 2678, 34, 280, 2678, 35, 45]}
{"line_number": 222, "line_type": "generated", "code": "\n            num = -num;\n            den = -den;\n        }\n\n        // use Euclid's algorithm to reduce to lowest terms\n        int gcd = ArithmeticUtils.gcd(num, den);\n        if (gcd > 1) {\n            num", "entropy": 0.2137451171875, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [0.05902099609375, 0.2105712890625, 0.004108428955078125, 0.031890869140625, 0.019866943359375, 0.0008873939514160156, 0.00860595703125, 0.0006194114685058594, 0.0002727508544921875, 0.0017995834350585938, 0.0022525787353515625, 0.00024700164794921875, 0.03021240234375, 0.0009512901306152344, 0.89599609375, 0.83984375, 1.1044921875, 0.212890625, 0.0292816162109375, 6.079673767089844e-06, 0.00017011165618896484, 0.052093505859375, 0.496826171875, 0.578125, 0.01715087890625, 1.5478515625, 0.04803466796875, 0.0007266998291015625, 0.07568359375, 0.67138671875, 0.92333984375, 0.00890350341796875, 2.06640625, 0.0005326271057128906, 0.0002562999725341797, 0.005229949951171875, 0.00913238525390625, 0.07586669921875, 0.0003921985626220703, 0.003002166748046875, 0.000484466552734375, 0.070556640625, 0.32275390625, 0.004375457763671875, 0.0103607177734375, 0.5205078125, 0.0005822181701660156, 0.003086090087890625, 0.00142669677734375, 0.003284454345703125, 0.048980712890625, 0.0926513671875], "tokens": [324, 1929, 280, 429, 1516, 45, 324, 5537, 280, 429, 5114, 45, 291, 320, 584, 434, 793, 516, 103, 573, 314, 1182, 8218, 372, 11665, 372, 25624, 5955, 291, 629, 43422, 280, 47721, 2755, 32, 46060, 26, 1516, 30, 5537, 293, 291, 415, 308, 46060, 848, 225, 35, 27, 301, 324, 1929]}
{"line_number": 223, "line_type": "original", "code": "                q1 = q2;", "entropy": 5.2890625, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [7.41796875, 13.265625, 4.59375, 0.01119232177734375, 9.4921875, 0.88525390625, 1.35546875], "tokens": [2071, 2678, 35, 280, 2678, 36, 45]}
{"line_number": 223, "line_type": "generated", "code": "\n            den = -den;\n        }\n        // reduce numerator and denominator by greatest common denominator\n        int gcd = FastMath.gcd(num, den);\n        if (gcd > 1) {\n            num /= gcd;\n            den /= gcd;\n       ", "entropy": 0.17724609375, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [0.05767822265625, 0.0009813308715820312, 0.00039458274841308594, 0.0018720626831054688, 0.00655364990234375, 0.0007996559143066406, 0.019744873046875, 0.0008320808410644531, 0.8994140625, 1.359375, 0.405517578125, 0.5, 0.0101776123046875, 0.0067901611328125, 0.021728515625, 0.10760498046875, 0.15234375, 0.0002899169921875, 0.371337890625, 0.5791015625, 0.736328125, 0.8994140625, 0.00664520263671875, 1.3447265625, 0.0019044876098632812, 6.699562072753906e-05, 0.0011510848999023438, 0.002685546875, 0.0740966796875, 0.0009374618530273438, 0.007476806640625, 0.0005002021789550781, 0.094970703125, 0.348876953125, 0.004222869873046875, 0.00325775146484375, 0.66748046875, 0.0004687309265136719, 0.0030345916748046875, 0.001811981201171875, 0.0028629302978515625, 0.2105712890625, 0.051239013671875, 0.115478515625, 0.0003795623779296875, 6.091594696044922e-05, 0.08831787109375, 0.0005507469177246094, 7.390975952148438e-05, 0.0002753734588623047, 2.9921531677246094e-05, 0.04339599609375], "tokens": [324, 5537, 280, 429, 5114, 45, 291, 320, 291, 434, 11665, 1929, 11290, 461, 39920, 810, 48299, 4942, 39920, 291, 629, 43422, 280, 15938, 5717, 32, 46060, 26, 1516, 30, 5537, 293, 291, 415, 308, 46060, 848, 225, 35, 27, 301, 324, 1929, 14374, 43422, 45, 324, 5537, 14374, 43422, 45, 291]}
{"line_number": 224, "line_type": "original", "code": "                a0 = a1;", "entropy": 2.91015625, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [9.125, 4.5625, 3.0703125, 0.0411376953125, 2.572265625, 0.476318359375, 0.5263671875], "tokens": [2071, 312, 34, 280, 312, 35, 45]}
{"line_number": 224, "line_type": "generated", "code": "\n        }\n        int gcd = getGcd(num, den);\n        if (gcd!= 1) {\n            num /= gcd;\n            den /= gcd;", "entropy": 0.1964111328125, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [0.045166015625, 0.00783538818359375, 0.6923828125, 1.75, 0.10601806640625, 0.01015472412109375, 1.244140625, 0.10772705078125, 0.66357421875, 0.0237884521484375, 0.11932373046875, 0.0023059844970703125, 0.00473785400390625, 0.0021495819091796875, 0.0479736328125, 0.278564453125, 0.005748748779296875, 0.00885009765625, 0.74072265625, 0.0015554428100585938, 0.1002197265625, 0.00872039794921875, 0.0033016204833984375, 0.06201171875, 0.1671142578125, 0.270751953125, 0.0007128715515136719, 6.461143493652344e-05, 0.005092620849609375, 0.0005793571472167969, 0.00016963481903076172, 0.00020122528076171875, 0.0001785755157470703], "tokens": [291, 320, 291, 629, 43422, 280, 622, 57, 2087, 26, 1516, 30, 5537, 293, 291, 415, 308, 46060, 863, 225, 35, 27, 301, 324, 1929, 14374, 43422, 45, 324, 5537, 14374, 43422, 45]}
{"line_number": 225, "line_type": "original", "code": "                r0 = r1;", "entropy": 3.822265625, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [8.265625, 7.0, 4.18359375, 0.0254974365234375, 6.625, 0.1456298828125, 0.51025390625], "tokens": [2071, 540, 34, 280, 540, 35, 45]}
{"line_number": 225, "line_type": "generated", "code": "\n        int gcd = FastMath.gcd(num, den);\n        if (gcd > 1) {\n            num /= gcd;\n            den /= gcd;\n        }\n        this.numerator = num;\n        this.denominator = den;\n    }", "entropy": 0.13525390625, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [0.7353515625, 1.478515625, 0.06854248046875, 0.022003173828125, 1.6484375, 0.0033626556396484375, 0.00015103816986083984, 0.0014581680297851562, 0.006023406982421875, 0.055084228515625, 0.0135498046875, 0.005672454833984375, 0.001087188720703125, 0.035614013671875, 0.64404296875, 0.0084075927734375, 0.044769287109375, 0.56787109375, 0.002368927001953125, 0.011260986328125, 0.0098876953125, 0.00676727294921875, 0.01788330078125, 0.18408203125, 0.1317138671875, 0.0007143020629882812, 7.37905502319336e-05, 0.0012102127075195312, 0.00031638145446777344, 0.00019669532775878906, 0.00024580955505371094, 0.00010645389556884766, 0.02215576171875, 0.0010786056518554688, 0.603515625, 0.324462890625, 8.726119995117188e-05, 0.0026340484619140625, 0.00030303001403808594, 0.1895751953125, 0.0147247314453125, 0.00273895263671875, 0.00872039794921875, 0.0030612945556640625, 1.2159347534179688e-05, 0.0001291036605834961, 4.0531158447265625e-06, 0.0001838207244873047, 0.00029087066650390625, 0.0022182464599609375, 0.14697265625, 0.002529144287109375], "tokens": [291, 629, 43422, 280, 15938, 5717, 32, 46060, 26, 1516, 30, 5537, 293, 291, 415, 308, 46060, 848, 225, 35, 27, 301, 324, 1929, 14374, 43422, 45, 324, 5537, 14374, 43422, 45, 291, 320, 291, 458, 32, 1516, 11290, 280, 1929, 45, 291, 458, 32, 29805, 9693, 280, 5537, 45, 284, 320]}
{"line_number": 366, "line_type": "original", "code": "        return denominator;", "entropy": 4.62890625, "is_bug_line": false, "sus_score": 0.1336306209562122, "per_token_entropy": [5.86328125, 2.005859375, 9.0078125, 1.642578125], "tokens": [351, 442, 39920, 45]}
{"line_number": 366, "line_type": "generated", "code": "\n\n    /**\n     * Returns a <code>Fraction</code> whose value is\n     * <tt>(this &times; multiplicand)</tt>.  An exception occurs if the\n     * result overflows.\n     * @param multiplicand value to", "entropy": 0.198974609375, "is_bug_line": false, "sus_score": 0.1336306209562122, "per_token_entropy": [0.81494140625, 0.03228759765625, 0.023101806640625, 0.00015473365783691406, 1.775390625, 0.3251953125, 0.6591796875, 0.77783203125, 0.0001227855682373047, 0.03143310546875, 0.014678955078125, 0.0004949569702148438, 0.00029730796813964844, 0.09564208984375, 0.01137542724609375, 2.5987625122070312e-05, 0.1644287109375, 0.002025604248046875, 0.1036376953125, 0.701171875, 0.00069427490234375, 0.004589080810546875, 1.265625, 0.197998046875, 0.005615234375, 0.34375, 8.726119995117188e-05, 0.0005903244018554688, 0.002658843994140625, 1.3232231140136719e-05, 0.27392578125, 0.04254150390625, 0.61376953125, 0.08837890625, 0.765625, 0.00591278076171875, 0.0205078125, 0.2176513671875, 1.4901161193847656e-05, 0.012969970703125, 0.29296875, 2.1457672119140625e-06, 0.1856689453125, 0.025177001953125, 0.00024259090423583984, 0.398681640625, 0.004802703857421875, 0.005420684814453125, 5.960464477539062e-07, 2.9802322387695312e-05, 0.031280517578125, 6.151199340820312e-05], "tokens": [446, 1022, 275, 319, 3759, 312, 333, 687, 48, 20709, 377, 687, 48, 13696, 786, 438, 275, 319, 333, 2251, 1563, 578, 549, 5571, 45, 12044, 406, 363, 2874, 2251, 4503, 225, 2244, 3756, 12984, 415, 322, 275, 319, 1056, 9973, 101, 32, 275, 319, 477, 753, 12044, 406, 363, 786, 372]}
{"line_number": 374, "line_type": "original", "code": "        return numerator;", "entropy": 2.740234375, "is_bug_line": false, "sus_score": 0.13130643285972254, "per_token_entropy": [5.16796875, 1.6875, 4.51953125, 0.015472412109375, 2.3125], "tokens": [351, 442, 1929, 11290, 45]}
{"line_number": 374, "line_type": "generated", "code": "\n    /**\n     * Get a string representation of the fraction.\n     * @return a string representation of the fraction\n     */\n    @Override\n    public String toString() {\n        return numerator + \"/\" + denominator;\n    }\n\n    /**\n     * Get a string representation", "entropy": 0.2039794921875, "is_bug_line": false, "sus_score": 0.13130643285972254, "per_token_entropy": [0.7607421875, 0.09759521484375, 0.030548095703125, 3.3020973205566406e-05, 1.7099609375, 1.2490234375, 1.0703125, 0.1531982421875, 0.06549072265625, 0.0008683204650878906, 0.05084228515625, 0.11907958984375, 0.09783935546875, 0.0022258758544921875, 0.032928466796875, 0.007232666015625, 0.73193359375, 0.003055572509765625, 0.03387451171875, 0.00460052490234375, 0.005443572998046875, 0.002254486083984375, 0.59033203125, 0.002941131591796875, 0.01126861572265625, 0.01145172119140625, 0.00014829635620117188, 0.0064849853515625, 0.004241943359375, 0.0018262863159179688, 0.0004177093505859375, 0.01495361328125, 0.01245880126953125, 0.11175537109375, 0.78759765625, 0.4619140625, 0.000392913818359375, 0.004299163818359375, 0.1187744140625, 0.00020575523376464844, 0.0061492919921875, 0.00614166259765625, 0.033782958984375, 0.001628875732421875, 1.1904296875, 0.058837890625, 0.0191497802734375, 5.841255187988281e-05, 0.72998046875, 0.11822509765625, 0.057373046875, 0.01641845703125], "tokens": [284, 1022, 275, 319, 1390, 312, 802, 10293, 432, 322, 18795, 32, 275, 319, 477, 601, 312, 802, 10293, 432, 322, 18795, 275, 569, 284, 477, 1788, 284, 562, 892, 11345, 346, 301, 291, 442, 1929, 11290, 474, 13189, 474, 39920, 45, 284, 320, 446, 1022, 275, 319, 1390, 312, 802, 10293]}
{"line_number": 236, "line_type": "original", "code": "            this.numerator = (int) p2;", "entropy": 1.49609375, "is_bug_line": false, "sus_score": 0.10101525445522107, "per_token_entropy": [6.0234375, 1.443359375, 0.00469207763671875, 0.250244140625, 0.0023975372314453125, 0.022705078125, 2.560546875, 0.416259765625, 0.07293701171875, 4.578125, 2.5546875, 0.02069091796875], "tokens": [1468, 458, 32, 1516, 11290, 280, 308, 410, 27, 298, 36, 45]}
{"line_number": 236, "line_type": "generated", "code": "\n        } else {", "entropy": 0.435302734375, "is_bug_line": false, "sus_score": 0.10101525445522107, "per_token_entropy": [0.08453369140625, 0.00875091552734375, 1.513671875, 0.1337890625], "tokens": [291, 320, 813, 301]}
{"line_number": 237, "line_type": "original", "code": "            this.denominator = (int) q2;", "entropy": 1.7705078125, "is_bug_line": false, "sus_score": 0.10101525445522107, "per_token_entropy": [7.9296875, 0.9013671875, 0.0027408599853515625, 3.576171875, 0.000530242919921875, 0.005878448486328125, 3.99609375, 0.1082763671875, 0.0426025390625, 3.119140625, 1.55078125, 0.02276611328125], "tokens": [1468, 458, 32, 29805, 9693, 280, 308, 410, 27, 2678, 36, 45]}
{"line_number": 237, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Create a fraction given the double value.  The fraction is\n     * reduced to lowest terms.\n     * @param value the double value to convert to a fraction.\n     * @throws FractionConversionException if the continued fraction failed to", "entropy": 0.2176513671875, "is_bug_line": false, "sus_score": 0.10101525445522107, "per_token_entropy": [0.58935546875, 0.006389617919921875, 0.340087890625, 0.12213134765625, 0.058380126953125, 5.805492401123047e-05, 0.7861328125, 0.0125732421875, 0.1207275390625, 0.74462890625, 0.767578125, 0.123046875, 0.015716552734375, 0.935546875, 0.63330078125, 0.09979248046875, 0.69189453125, 0.310302734375, 0.47509765625, 4.076957702636719e-05, 0.634765625, 0.0003788471221923828, 0.0012912750244140625, 2.9206275939941406e-05, 0.07647705078125, 0.1356201171875, 0.0003180503845214844, 0.1463623046875, 0.0009126663208007812, 0.0225830078125, 0.040069580078125, 0.138427734375, 0.00634002685546875, 0.478271484375, 0.020843505859375, 0.53271484375, 0.0028095245361328125, 0.036346435546875, 0.0216827392578125, 0.050628662109375, 0.1492919921875, 0.01342010498046875, 0.1873779296875, 0.96533203125, 0.00608062744140625, 4.1604042053222656e-05, 0.028656005859375, 0.06268310546875, 0.370361328125, 0.0226898193359375, 0.286865234375, 0.051666259765625], "tokens": [284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 2702, 322, 2064, 786, 32, 225, 886, 18795, 438, 275, 319, 22974, 372, 25624, 5955, 32, 275, 319, 477, 753, 786, 322, 2064, 786, 372, 4483, 372, 312, 18795, 32, 275, 319, 477, 5117, 40823, 14350, 984, 415, 322, 45253, 18795, 3803, 372]}
{"line_number": 235, "line_type": "original", "code": "        if (q2 < maxDenominator) {", "entropy": 1.8681640625, "is_bug_line": false, "sus_score": 0.1, "per_token_entropy": [5.83984375, 4.84765625, 0.07525634765625, 6.18359375, 0.9609375, 0.232421875, 2.271484375, 0.002227783203125, 0.00011551380157470703, 0.049224853515625, 0.07879638671875], "tokens": [351, 415, 308, 99, 36, 333, 1769, 43484, 9693, 27, 301]}
{"line_number": 235, "line_type": "generated", "code": "\n            this.numerator = num;\n            this.denominator = den;\n        } else {\n            this.numerator = num;\n            this.denominator = den;\n        }\n    }\n\n    /**\n     * Create a fraction from a double.\n    ", "entropy": 0.154052734375, "is_bug_line": false, "sus_score": 0.1, "per_token_entropy": [0.0758056640625, 0.1279296875, 0.0017242431640625, 0.0281219482421875, 0.0002357959747314453, 0.01959228515625, 1.2734375, 0.1539306640625, 0.026824951171875, 0.0026493072509765625, 4.684925079345703e-05, 0.002193450927734375, 2.3245811462402344e-05, 0.0004050731658935547, 0.378173828125, 0.016265869140625, 0.09893798828125, 0.0008707046508789062, 0.050384521484375, 0.06915283203125, 0.397705078125, 0.30908203125, 3.516674041748047e-05, 0.003429412841796875, 3.135204315185547e-05, 0.0010385513305664062, 0.212890625, 0.0182342529296875, 0.11151123046875, 0.003570556640625, 0.00024306774139404297, 0.000522613525390625, 4.172325134277344e-06, 0.00021255016326904297, 0.01209259033203125, 0.0014753341674804688, 0.08941650390625, 0.00290679931640625, 0.4140625, 0.0013341903686523438, 0.29443359375, 0.092529296875, 0.04302978515625, 2.586841583251953e-05, 0.5078125, 0.008453369140625, 0.131591796875, 0.68505859375, 0.08740234375, 0.544921875, 1.271484375, 0.43798828125], "tokens": [324, 458, 32, 1516, 11290, 280, 1929, 45, 324, 458, 32, 29805, 9693, 280, 5537, 45, 291, 320, 813, 301, 324, 458, 32, 1516, 11290, 280, 1929, 45, 324, 458, 32, 29805, 9693, 280, 5537, 45, 291, 320, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 645, 312, 2064, 32, 275]}
{"line_number": 243, "line_type": "original", "code": "    }", "entropy": 3.39453125, "is_bug_line": false, "sus_score": 0.1, "per_token_entropy": [3.60546875, 3.181640625], "tokens": [264, 320]}
{"line_number": 243, "line_type": "generated", "code": "\n     * @return the absolute value of this fraction.\n     */\n    public Fraction abs() {\n        return (numerator < 0)? negate() : this;\n    }\n\n    /**\n     * Get the fraction as a <a\n     * href=\"", "entropy": 0.2393798828125, "is_bug_line": false, "sus_score": 0.1, "per_token_entropy": [0.51318359375, 0.4189453125, 0.181884765625, 0.007755279541015625, 0.453369140625, 0.02911376953125, 0.00829315185546875, 1.1162109375, 0.04302978515625, 0.017913818359375, 0.1817626953125, 0.2313232421875, 0.0921630859375, 0.0184326171875, 0.03729248046875, 0.0301361083984375, 0.00777435302734375, 0.006053924560546875, 0.024169921875, 0.043670654296875, 0.62890625, 0.58056640625, 0.1591796875, 0.00012874603271484375, 0.92041015625, 0.0007948875427246094, 6.67572021484375e-06, 0.55029296875, 0.03277587890625, 0.1494140625, 0.00015652179718017578, 0.0012111663818359375, 0.00047850608825683594, 0.00688934326171875, 0.0007610321044921875, 0.0208892822265625, 0.00011682510375976562, 0.27783203125, 0.02508544921875, 0.04522705078125, 3.9577484130859375e-05, 2.478515625, 0.0234832763671875, 0.29443359375, 0.2529296875, 0.1220703125, 0.7041015625, 1.16015625, 0.5087890625, 0.007129669189453125, 0.0010890960693359375, 0.03155517578125], "tokens": [275, 319, 477, 601, 322, 7976, 786, 432, 458, 18795, 32, 275, 569, 284, 562, 40823, 11366, 346, 301, 291, 442, 308, 1516, 11290, 333, 225, 34, 27, 1018, 7528, 332, 346, 499, 458, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 18795, 619, 312, 333, 83, 275, 319, 976, 347]}
{"line_number": 227, "line_type": "original", "code": "                stop = true;", "entropy": 4.3671875, "is_bug_line": false, "sus_score": 0.09901475429766744, "per_token_entropy": [7.72265625, 11.25, 0.0810546875, 2.701171875, 0.0703125], "tokens": [2071, 4719, 280, 861, 45]}
{"line_number": 227, "line_type": "generated", "code": "\n        if (d > 1) {\n            num /= d;\n            den /= d;\n        }\n\n        this.numerator = num;\n        this.denominator = den;\n    }\n\n    /**\n     * Create a fraction from a double value.\n    ", "entropy": 0.1790771484375, "is_bug_line": false, "sus_score": 0.09901475429766744, "per_token_entropy": [0.802734375, 1.30078125, 0.02642822265625, 0.29736328125, 0.0789794921875, 0.006206512451171875, 0.00751495361328125, 0.0125732421875, 0.01473236083984375, 0.0511474609375, 0.382568359375, 0.184326171875, 0.00266265869140625, 0.00013828277587890625, 0.002628326416015625, 0.0006155967712402344, 0.0001659393310546875, 0.001873016357421875, 0.00012385845184326172, 0.033599853515625, 0.0005583763122558594, 1.84765625, 0.54541015625, 8.606910705566406e-05, 0.0027008056640625, 0.00018715858459472656, 0.27197265625, 0.011383056640625, 0.0016536712646484375, 0.00904083251953125, 0.0027618408203125, 1.2159347534179688e-05, 0.00010097026824951172, 2.2649765014648438e-06, 0.00014483928680419922, 0.000476837158203125, 0.000698089599609375, 0.1573486328125, 0.00142669677734375, 0.343505859375, 0.075927734375, 0.042633056640625, 3.814697265625e-05, 0.49462890625, 0.00653839111328125, 0.11767578125, 0.59521484375, 0.0736083984375, 0.61572265625, 0.31298828125, 0.039764404296875, 0.5361328125], "tokens": [291, 415, 308, 86, 848, 225, 35, 27, 301, 324, 1929, 14374, 343, 45, 324, 5537, 14374, 343, 45, 291, 320, 584, 458, 32, 1516, 11290, 280, 1929, 45, 291, 458, 32, 29805, 9693, 280, 5537, 45, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 645, 312, 2064, 786, 32, 275]}
{"line_number": 231, "line_type": "original", "code": "        if (n >= maxIterations) {", "entropy": 2.3203125, "is_bug_line": false, "sus_score": 0.09901475429766744, "per_token_entropy": [3.52734375, 1.443359375, 0.0479736328125, 8.921875, 3.1328125, 2.294921875, 1.2548828125, 0.2215576171875, 0.042816162109375], "tokens": [351, 415, 308, 96, 2377, 1769, 31219, 27, 301]}
{"line_number": 231, "line_type": "generated", "code": "\n        this.numerator = num;\n        this.denominator = den;\n    }\n\n    /**\n     * Create a fraction given a double value.  The double value is converted to\n     * a fraction by taking the double value to the power of the fraction", "entropy": 0.32763671875, "is_bug_line": false, "sus_score": 0.09901475429766744, "per_token_entropy": [0.15380859375, 0.2822265625, 0.0007262229919433594, 0.0035533905029296875, 0.00026607513427734375, 0.1253662109375, 0.0323486328125, 0.0037555694580078125, 0.0036773681640625, 0.0016689300537109375, 1.7881393432617188e-05, 0.0001894235610961914, 1.9073486328125e-06, 0.00015974044799804688, 0.0009174346923828125, 0.0008497238159179688, 0.153564453125, 0.0013294219970703125, 0.31494140625, 0.08282470703125, 0.043853759765625, 2.7179718017578125e-05, 0.52734375, 0.006732940673828125, 0.136962890625, 0.7333984375, 1.0791015625, 1.056640625, 0.279541015625, 0.043212890625, 0.7421875, 0.038330078125, 0.97021484375, 0.169677734375, 0.7685546875, 0.069091796875, 0.10247802734375, 0.28759765625, 7.867813110351562e-06, 0.0732421875, 0.203369140625, 1.90625, 2.46484375, 0.0008988380432128906, 0.31396484375, 1.4853515625, 0.034454345703125, 0.31494140625, 0.070068359375, 0.01248931884765625, 0.2333984375, 1.69921875], "tokens": [291, 458, 32, 1516, 11290, 280, 1929, 45, 291, 458, 32, 29805, 9693, 280, 5537, 45, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 2702, 312, 2064, 786, 32, 225, 886, 2064, 786, 438, 12785, 372, 275, 319, 312, 18795, 810, 15137, 322, 2064, 786, 372, 322, 7169, 432, 322, 18795]}
{"line_number": 195, "line_type": "original", "code": "        long p0 = 1;", "entropy": 1.4951171875, "is_bug_line": false, "sus_score": 0.09805806756909202, "per_token_entropy": [5.04296875, 2.966796875, 0.364990234375, 0.021484375, 0.042816162109375, 1.2802734375, 2.0234375, 0.220703125], "tokens": [351, 1946, 298, 34, 280, 225, 35, 45]}
{"line_number": 195, "line_type": "generated", "code": "\n\n    /**\n     * Create a fraction given the double value and the maximum error allowed.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer", "entropy": 0.17041015625, "is_bug_line": false, "sus_score": 0.09805806756909202, "per_token_entropy": [1.7158203125, 0.1195068359375, 0.046051025390625, 4.8160552978515625e-05, 0.88037109375, 0.0295562744140625, 0.1910400390625, 0.2423095703125, 0.0950927734375, 0.9140625, 0.006084442138671875, 0.24951171875, 1.068359375, 0.0811767578125, 0.52734375, 0.0924072265625, 0.05767822265625, 0.01371002197265625, 0.0003674030303955078, 0.58154296875, 0.008209228515625, 0.006290435791015625, 0.00597381591796875, 1.0609626770019531e-05, 1.0634765625, 6.628036499023438e-05, 0.2235107421875, 0.00042557716369628906, 0.09765625, 0.0132293701171875, 0.025299072265625, 0.0238494873046875, 0.042877197265625, 0.32666015625, 3.063678741455078e-05, 4.6133995056152344e-05, 0.006847381591796875, 2.09808349609375e-05, 0.00493621826171875, 0.0005869865417480469, 0.0027408599853515625, 0.0015096664428710938, 0.01708984375, 0.0027217864990234375, 0.030975341796875, 0.0156402587890625, 0.01177215576171875, 0.00016367435455322266, 7.534027099609375e-05, 0.002498626708984375, 0.0001804828643798828, 0.01401519775390625], "tokens": [446, 1022, 275, 319, 2648, 312, 18795, 2702, 322, 2064, 786, 461, 322, 7091, 1048, 6660, 32, 275, 319, 333, 98, 48, 275, 319, 275, 319, 12114, 44, 1348, 4374, 438, 3823, 623, 516, 780, 3184, 275, 319, 261, 429, 312, 2080, 23477, 786, 461, 322, 1769, 43484, 9693, 739, 372, 4401]}
{"line_number": 196, "line_type": "original", "code": "        long q0 = 0;", "entropy": 1.6875, "is_bug_line": false, "sus_score": 0.09805806756909202, "per_token_entropy": [4.390625, 3.826171875, 3.486328125, 0.84912109375, 0.1292724609375, 0.166748046875, 0.591796875, 0.062255859375], "tokens": [351, 1946, 2678, 34, 280, 225, 34, 45]}
{"line_number": 196, "line_type": "generated", "code": "\n     * Create a fraction given the double value and the maximum error allowed.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX", "entropy": 0.154052734375, "is_bug_line": false, "sus_score": 0.09805806756909202, "per_token_entropy": [0.420654296875, 0.220458984375, 0.75244140625, 0.0406494140625, 0.197509765625, 0.2005615234375, 0.10498046875, 1.2275390625, 0.008056640625, 0.306396484375, 1.041015625, 0.09759521484375, 0.37158203125, 0.10107421875, 0.054962158203125, 0.026123046875, 0.005138397216796875, 0.6484375, 0.00794219970703125, 0.00946807861328125, 0.0092620849609375, 1.537799835205078e-05, 1.193359375, 0.0001785755157470703, 0.27685546875, 0.0005407333374023438, 0.10479736328125, 0.016082763671875, 0.0252685546875, 0.0205841064453125, 0.03973388671875, 0.366455078125, 3.409385681152344e-05, 4.363059997558594e-05, 0.00605010986328125, 6.628036499023438e-05, 0.006275177001953125, 0.0007104873657226562, 0.002826690673828125, 0.0016021728515625, 0.0183258056640625, 0.0026397705078125, 0.033172607421875, 0.01678466796875, 0.01099395751953125, 0.00016438961029052734, 7.581710815429688e-05, 0.0025577545166015625, 0.00017189979553222656, 0.01299285888671875, 3.802776336669922e-05, 8.547306060791016e-05], "tokens": [275, 319, 2648, 312, 18795, 2702, 322, 2064, 786, 461, 322, 7091, 1048, 6660, 32, 275, 319, 333, 98, 48, 275, 319, 275, 319, 12114, 44, 1348, 4374, 438, 3823, 623, 516, 780, 3184, 275, 319, 261, 429, 312, 2080, 23477, 786, 461, 322, 1769, 43484, 9693, 739, 372, 4401, 32, 3459]}
