{"line_number": 1524, "line_type": "original", "code": "            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {", "entropy": 0.56640625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [5.296875, 2.759765625, 0.1041259765625, 3.470703125, 0.0841064453125, 1.3818359375, 0.366943359375, 0.1689453125, 0.442138671875, 3.409385681152344e-05, 0.00551605224609375, 0.70556640625, 0.349609375, 0.0015506744384765625, 0.06622314453125, 0.290283203125, 1.3113021850585938e-06, 0.5986328125, 0.298583984375, 0.00125885009765625, 0.0030117034912109375, 0.0213470458984375, 7.092952728271484e-05, 0.00018024444580078125, 6.67572021484375e-06, 0.04144287109375, 0.0007066726684570312, 0.009307861328125, 2.126953125, 0.00792694091796875, 7.510185241699219e-05, 0.0491943359375, 0.0338134765625], "tokens": [1468, 415, 308, 106, 32, 96, 693, 610, 1236, 12611, 2345, 962, 310, 693, 610, 30460, 2345, 962, 345, 692, 77, 95, 692, 32, 1322, 31, 35, 79, 863, 225, 34, 27, 301]}
{"line_number": 1524, "line_type": "generated", "code": "\n        // Round\n        result.round(field.getRoundingMode(), field.getPrecision());\n        result.nans = FINITE;\n        result.sign = (byte) (sign * x.sign);\n        return result;\n    }\n\n    /** Div", "entropy": 0.41552734375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.5107421875, 1.16015625, 2.69140625, 1.537109375, 0.51025390625, 0.219970703125, 0.75048828125, 0.068115234375, 1.884765625, 0.00934600830078125, 0.1024169921875, 0.11627197265625, 0.0771484375, 0.173828125, 0.65625, 0.0027866363525390625, 0.08807373046875, 0.0732421875, 0.382080078125, 1.4736328125, 0.73486328125, 0.25048828125, 2.681640625, 0.1524658203125, 0.0184783935546875, 0.222900390625, 1.1920928955078125e-07, 0.0020694732666015625, 0.55078125, 0.7490234375, 0.0443115234375, 0.9130859375, 0.0179290771484375, 0.11981201171875, 0.004573822021484375, 0.04388427734375, 0.060394287109375, 0.01522064208984375, 0.0264129638671875, 0.0017309188842773438, 6.175041198730469e-05, 0.0005998611450195312, 0.0007624626159667969, 0.63671875, 0.328125, 0.044921875, 0.01535797119140625, 0.489501953125, 0.01314544677734375, 0.212890625, 0.03485107421875, 0.73828125], "tokens": [291, 434, 23015, 291, 1056, 32, 1497, 26, 1495, 32, 371, 10238, 45088, 1026, 1600, 32, 371, 20398, 1035, 291, 1056, 32, 96, 693, 280, 30460, 2345, 45, 291, 1056, 32, 1333, 280, 308, 2263, 27, 308, 1333, 319, 816, 32, 1333, 293, 291, 442, 1056, 45, 284, 320, 446, 1022, 17536]}
{"line_number": 1525, "line_type": "original", "code": "                result = newInstance(x);", "entropy": 2.841796875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [7.75, 0.8037109375, 3.943359375, 3.12109375, 0.8583984375, 0.007129669189453125, 6.078125, 0.1778564453125], "tokens": [2071, 1056, 280, 537, 1810, 26, 106, 293]}
{"line_number": 1525, "line_type": "generated", "code": "\n        result.exp = exp + x.exp + md - mant.length + 1;\n\n        // Fixup the sign\n        result.sign = (byte) (sign * x.sign);\n\n        // Clear out any excess digits\n        result.", "entropy": 0.394287109375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.34326171875, 0.463623046875, 0.032379150390625, 0.1240234375, 0.11065673828125, 0.468994140625, 0.05804443359375, 0.00939178466796875, 6.330013275146484e-05, 0.0002753734588623047, 0.73876953125, 0.294189453125, 0.271484375, 0.40966796875, 0.00024700164794921875, 0.0004639625549316406, 5.245208740234375e-05, 1.443359375, 0.0236358642578125, 0.04107666015625, 0.036468505859375, 0.436767578125, 0.53662109375, 1.9931640625, 0.1658935546875, 0.1295166015625, 0.1356201171875, 0.3955078125, 0.1973876953125, 0.0027217864990234375, 0.004688262939453125, 0.014801025390625, 0.019927978515625, 0.00739288330078125, 0.03424072265625, 0.09356689453125, 0.0211944580078125, 0.2022705078125, 0.0013370513916015625, 2.7418136596679688e-05, 0.0005426406860351562, 0.00052642822265625, 0.075439453125, 0.434326171875, 3.96875, 1.6337890625, 1.9365234375, 1.7900390625, 0.1544189453125, 0.623046875, 0.5634765625, 0.0582275390625], "tokens": [291, 1056, 32, 2832, 280, 2910, 474, 816, 32, 2832, 474, 8735, 429, 345, 692, 32, 1322, 474, 225, 35, 45, 584, 434, 7087, 417, 322, 2596, 291, 1056, 32, 1333, 280, 308, 2263, 27, 308, 1333, 319, 816, 32, 1333, 293, 584, 434, 11035, 963, 1346, 35800, 16105, 291, 1056, 32]}
{"line_number": 1526, "line_type": "original", "code": "                result.sign = (byte) (sign * x.sign);", "entropy": 0.86181640625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [9.109375, 1.607421875, 0.267578125, 1.5302734375, 0.03472900390625, 0.1834716796875, 0.00710296630859375, 0.067138671875, 0.035919189453125, 0.020416259765625, 0.06390380859375, 0.001651763916015625, 9.274482727050781e-05, 0.0003170967102050781, 0.0017213821411132812], "tokens": [2071, 1056, 32, 1333, 280, 308, 2263, 27, 308, 1333, 319, 816, 32, 1333, 293]}
{"line_number": 1526, "line_type": "generated", "code": "\n        return result;\n    }\n\n    /**\n     * Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide(final Dfp x) {\n\n        // make sure we don", "entropy": 0.1903076171875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.57958984375, 0.79931640625, 0.17333984375, 0.09033203125, 0.53173828125, 0.01474761962890625, 0.198974609375, 0.049346923828125, 1.7265625, 0.0008234977722167969, 1.0380859375, 0.056121826171875, 0.2410888671875, 0.043182373046875, 0.187255859375, 0.40771484375, 0.348876953125, 0.0019521713256835938, 0.268798828125, 0.003742218017578125, 0.04241943359375, 0.591796875, 0.017547607421875, 0.002197265625, 0.003040313720703125, 0.0162353515625, 0.876953125, 0.0016431808471679688, 0.02264404296875, 0.020233154296875, 0.296875, 0.0135040283203125, 0.033172607421875, 0.061370849609375, 0.01910400390625, 0.012786865234375, 0.004634857177734375, 1.1920928955078125e-06, 0.00292205810546875, 0.002132415771484375, 0.0638427734375, 0.0012035369873046875, 2.1457672119140625e-06, 0.0003769397735595703, 0.00315093994140625, 0.016754150390625, 0.388671875, 0.371826171875, 0.2421875, 0.0006022453308105469, 0.0027904510498046875, 0.0025310516357421875], "tokens": [291, 442, 1056, 45, 284, 320, 446, 1022, 275, 319, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 816, 27, 301, 584, 434, 1930, 3654, 996, 2800]}
{"line_number": 1527, "line_type": "original", "code": "                return result;", "entropy": 2.8125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [9.7421875, 1.279296875, 0.160400390625, 0.0645751953125], "tokens": [2071, 442, 1056, 45]}
{"line_number": 1527, "line_type": "generated", "code": "\n\n        return result;\n    }\n\n    /** Divide this by x.\n     * @param x divisor\n     * @return this / x\n     */\n    public Dfp divide(final Dfp x) {\n\n        // make sure we don't mix number with different", "entropy": 0.1485595703125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.6943359375, 1.1318359375, 0.248779296875, 0.171875, 0.41259765625, 0.00850677490234375, 0.2081298828125, 0.041748046875, 0.66064453125, 0.00832366943359375, 0.06982421875, 0.0106048583984375, 0.0689697265625, 0.170166015625, 0.1260986328125, 0.0005788803100585938, 0.08441162109375, 0.0014810562133789062, 0.0187225341796875, 0.362060546875, 0.0102996826171875, 0.000797271728515625, 0.0007257461547851562, 0.00832366943359375, 1.16796875, 0.83203125, 0.00601959228515625, 0.06365966796875, 0.07916259765625, 0.0218048095703125, 0.00977325439453125, 0.006378173828125, 9.5367431640625e-07, 0.003204345703125, 0.0019893646240234375, 0.037933349609375, 0.0013933181762695312, 1.6689300537109375e-06, 0.0003657341003417969, 0.0034942626953125, 0.01654052734375, 0.307373046875, 0.36669921875, 0.2509765625, 0.0006651878356933594, 0.00319671630859375, 0.0025959014892578125, 0.00946807861328125, 0.0005064010620117188, 0.00445556640625, 0.003795623779296875, 0.0004057884216308594], "tokens": [584, 442, 1056, 45, 284, 320, 446, 1022, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 458, 517, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 816, 27, 301, 584, 434, 1930, 3654, 996, 2800, 1330, 11631, 1451, 623, 3449]}
{"line_number": 1530, "line_type": "original", "code": "            if (x.nans == INFINITE && nans == INFINITE) {", "entropy": 1.0224609375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [5.1015625, 4.13671875, 0.115478515625, 4.44921875, 0.063720703125, 1.1513671875, 0.140625, 0.33251953125, 0.76708984375, 4.494190216064453e-05, 0.0189056396484375, 1.185546875, 0.1748046875, 0.0003559589385986328, 0.057647705078125, 2.55078125, 4.410743713378906e-06, 0.0001538991928100586, 0.164794921875, 0.043121337890625], "tokens": [1468, 415, 308, 106, 32, 96, 693, 610, 1236, 12611, 2345, 962, 310, 693, 610, 1236, 12611, 2345, 27, 301]}
{"line_number": 1530, "line_type": "generated", "code": "\n            result.exp = 0;\n        }\n\n        result.normalize();\n\n        // Check for overflow\n        if (result.mant[mant.length-1] == RADIX) {\n            result.mant[mant.length-1", "entropy": 0.376708984375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.849609375, 0.48828125, 0.062286376953125, 0.186767578125, 0.0166473388671875, 0.06500244140625, 0.0020008087158203125, 0.00809478759765625, 0.49462890625, 0.0028171539306640625, 0.3994140625, 1.0341796875, 0.320556640625, 0.9541015625, 0.06109619140625, 0.65234375, 1.5947265625, 2.943359375, 0.0836181640625, 0.677734375, 1.0595703125, 0.52685546875, 0.08782958984375, 0.13916015625, 0.004016876220703125, 1.5634765625, 0.00238800048828125, 0.02777099609375, 0.045654296875, 0.00015473365783691406, 0.00023162364959716797, 7.987022399902344e-06, 0.1412353515625, 0.0018291473388671875, 0.0038661956787109375, 1.275390625, 0.2386474609375, 7.62939453125e-06, 0.89111328125, 0.01593017578125, 0.110107421875, 1.0419921875, 0.56298828125, 0.89013671875, 0.001220703125, 0.019989013671875, 0.007045745849609375, 4.971027374267578e-05, 0.00023293495178222656, 5.245208740234375e-06, 0.017547607421875, 0.0213165283203125], "tokens": [324, 1056, 32, 2832, 280, 225, 34, 45, 291, 320, 584, 1056, 32, 12944, 473, 584, 434, 3456, 436, 9973, 291, 415, 308, 1267, 32, 95, 692, 77, 95, 692, 32, 1322, 31, 35, 79, 610, 33117, 6578, 27, 301, 324, 1056, 32, 95, 692, 77, 95, 692, 32, 1322, 31, 35]}
{"line_number": 1531, "line_type": "original", "code": "                result = newInstance(this);", "entropy": 2.509765625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [8.2890625, 1.3642578125, 2.740234375, 2.044921875, 0.1357421875, 0.0030536651611328125, 5.4765625, 0.0209503173828125], "tokens": [2071, 1056, 280, 537, 1810, 26, 578, 293]}
{"line_number": 1531, "line_type": "generated", "code": "\n            result.nans = QNAN;\n        }\n\n        return result;\n\n    }\n\n    /** Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide(final Dfp", "entropy": 0.2218017578125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [1.5419921875, 1.1357421875, 0.11553955078125, 0.63623046875, 0.0016689300537109375, 0.00931549072265625, 0.771484375, 0.00028204917907714844, 0.0023784637451171875, 0.59716796875, 0.0009646415710449219, 1.0400390625, 1.1806640625, 0.1820068359375, 0.1353759765625, 1.3544921875, 0.0019626617431640625, 0.1649169921875, 0.037109375, 0.59375, 0.0070953369140625, 0.07696533203125, 0.011322021484375, 0.07440185546875, 0.1888427734375, 0.1234130859375, 0.00043201446533203125, 0.07867431640625, 0.001251220703125, 0.0182342529296875, 0.3662109375, 0.0102081298828125, 0.001163482666015625, 0.0007810592651367188, 0.0091552734375, 0.6552734375, 0.0016622543334960938, 0.0077667236328125, 0.0107574462890625, 0.228759765625, 0.0103302001953125, 0.0224151611328125, 0.040008544921875, 0.02301025390625, 0.00891876220703125, 0.004726409912109375, 8.344650268554688e-07, 0.002559661865234375, 0.00200653076171875, 0.039794921875, 0.0014123916625976562, 1.9073486328125e-06], "tokens": [324, 1056, 32, 96, 693, 280, 1910, 30548, 45, 291, 320, 584, 442, 1056, 45, 446, 320, 446, 1022, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426]}
{"line_number": 1532, "line_type": "original", "code": "                result.sign = (byte) (sign * x.sign);", "entropy": 1.2919921875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [9.578125, 2.4453125, 0.41748046875, 5.52734375, 0.096435546875, 0.603515625, 0.038482666015625, 0.39599609375, 0.1466064453125, 0.05975341796875, 0.049774169921875, 0.0075531005859375, 0.00058746337890625, 0.00039696693420410156, 0.0030918121337890625], "tokens": [2071, 1056, 32, 1333, 280, 308, 2263, 27, 308, 1333, 319, 816, 32, 1333, 293]}
{"line_number": 1532, "line_type": "generated", "code": "\n        return result;\n    }\n\n    /** Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide(final Dfp x) {\n\n        // make sure we don't mix", "entropy": 0.10223388671875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.462158203125, 0.254638671875, 0.09893798828125, 0.02630615234375, 0.56787109375, 0.01448822021484375, 0.2325439453125, 0.047088623046875, 0.6201171875, 0.006633758544921875, 0.08551025390625, 0.01236724853515625, 0.072998046875, 0.1810302734375, 0.1358642578125, 0.00047659873962402344, 0.0797119140625, 0.0013904571533203125, 0.02099609375, 0.354248046875, 0.00984954833984375, 0.0012979507446289062, 0.0006399154663085938, 0.01009368896484375, 0.646484375, 0.001476287841796875, 0.00803375244140625, 0.01189422607421875, 0.22607421875, 0.01043701171875, 0.0235748291015625, 0.043853759765625, 0.0170745849609375, 0.00971221923828125, 0.004863739013671875, 8.344650268554688e-07, 0.002262115478515625, 0.0022296905517578125, 0.04144287109375, 0.0013866424560546875, 1.7881393432617188e-06, 0.0003437995910644531, 0.0034275054931640625, 0.02020263671875, 0.3359375, 0.35009765625, 0.2384033203125, 0.0006608963012695312, 0.003360748291015625, 0.0025653839111328125, 0.01256561279296875, 0.000560760498046875], "tokens": [291, 442, 1056, 45, 284, 320, 446, 1022, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 816, 27, 301, 584, 434, 1930, 3654, 996, 2800, 1330, 11631]}
{"line_number": 1533, "line_type": "original", "code": "                return result;", "entropy": 2.8671875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [8.953125, 2.181640625, 0.283447265625, 0.050201416015625], "tokens": [2071, 442, 1056, 45]}
{"line_number": 1533, "line_type": "generated", "code": "\n        return result;\n    }\n\n    /** Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide(final Dfp x) {\n        return divide(x, Dfp", "entropy": 0.1990966796875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.79345703125, 0.84130859375, 0.2479248046875, 0.048583984375, 0.6357421875, 0.004711151123046875, 0.25244140625, 0.038055419921875, 0.54736328125, 0.00600433349609375, 0.092041015625, 0.011383056640625, 0.069580078125, 0.181396484375, 0.143310546875, 0.0004360675811767578, 0.083740234375, 0.0011796951293945312, 0.017822265625, 0.328125, 0.01015472412109375, 0.0006814002990722656, 0.0007367134094238281, 0.00971221923828125, 0.53759765625, 0.0017251968383789062, 0.0077972412109375, 0.012359619140625, 0.24462890625, 0.0107879638671875, 0.0227508544921875, 0.04730224609375, 0.0189056396484375, 0.008056640625, 0.004802703857421875, 8.344650268554688e-07, 0.0024509429931640625, 0.002254486083984375, 0.03582763671875, 0.0013675689697265625, 1.430511474609375e-06, 0.0003993511199951172, 0.0035915374755859375, 0.018157958984375, 1.51171875, 1.09375, 0.078857421875, 0.2939453125, 0.3115234375, 0.004913330078125, 1.708984375, 0.0009202957153320312], "tokens": [291, 442, 1056, 45, 284, 320, 446, 1022, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 816, 27, 301, 291, 442, 24910, 26, 106, 30, 475, 4426]}
{"line_number": 1536, "line_type": "original", "code": "            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||", "entropy": 0.54296875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.98046875, 1.1396484375, 0.12274169921875, 3.86328125, 3.6015625, 0.01512908935546875, 0.89404296875, 0.004489898681640625, 0.15087890625, 0.83447265625, 1.1801719665527344e-05, 0.0029506683349609375, 0.318359375, 0.248046875, 0.0002378225326538086, 0.06256103515625, 0.03436279296875, 8.344650268554688e-07, 0.58935546875, 0.22314453125, 0.0009899139404296875, 0.0013713836669921875, 0.0103759765625, 0.0001329183578491211, 0.00022912025451660156, 1.537799835205078e-05, 0.0175933837890625, 0.00052642822265625, 0.00870513916015625, 0.63720703125, 0.004150390625, 0.0005364418029785156, 0.09619140625, 0.58740234375], "tokens": [1468, 415, 308, 308, 106, 32, 96, 693, 610, 1236, 12611, 2345, 962, 310, 693, 610, 30460, 2345, 962, 345, 692, 77, 95, 692, 32, 1322, 31, 35, 79, 610, 225, 34, 27, 1276]}
{"line_number": 1536, "line_type": "generated", "code": "\n            if (excp!= 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            }\n        } else {\n            excp = 0;\n        }\n\n        result = dotrap(excp,", "entropy": 0.2100830078125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [1.2890625, 1.0205078125, 0.146240234375, 0.50048828125, 1.1920928955078125e-05, 0.654296875, 0.252197265625, 0.0036716461181640625, 0.18115234375, 0.041748046875, 0.1129150390625, 0.71337890625, 0.0002703666687011719, 0.005405426025390625, 0.00937652587890625, 1.9311904907226562e-05, 0.00033593177795410156, 0.0096282958984375, 0.489501953125, 2.5033950805664062e-06, 9.59634780883789e-05, 2.2649765014648438e-05, 0.00033354759216308594, 6.222724914550781e-05, 0.143310546875, 0.0002586841583251953, 5.8770179748535156e-05, 0.0882568359375, 0.943359375, 0.00799560546875, 0.541015625, 0.00563812255859375, 0.5556640625, 0.060272216796875, 0.1697998046875, 0.09442138671875, 3.0994415283203125e-06, 0.0035858154296875, 0.474609375, 0.0041046142578125, 0.0014362335205078125, 0.169921875, 0.004215240478515625, 0.2607421875, 1.0751953125, 0.499267578125, 0.12005615234375, 0.0010633468627929688, 0.053619384765625, 0.1260986328125, 4.410743713378906e-06, 0.08447265625], "tokens": [324, 415, 308, 327, 2219, 863, 225, 34, 27, 301, 400, 1600, 32, 470, 29178, 4629, 8733, 26, 54, 4426, 1176, 32, 4694, 81, 521, 1460, 3821, 293, 324, 320, 291, 320, 813, 301, 324, 538, 2219, 280, 225, 34, 45, 291, 320, 584, 1056, 280, 745, 17770, 26, 327, 2219, 30]}
{"line_number": 1538, "line_type": "original", "code": "                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);", "entropy": 1.1357421875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [8.296875, 5.42578125, 0.0034084320068359375, 0.05108642578125, 0.0235443115234375, 0.00021541118621826172, 0.005397796630859375, 0.025360107421875, 0.324951171875, 3.5762786865234375e-06, 0.0011730194091796875, 9.524822235107422e-05, 0.0029582977294921875, 4.291534423828125e-05, 3.990234375, 0.0204925537109375], "tokens": [2071, 1600, 32, 470, 29178, 4629, 8733, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 293]}
{"line_number": 1538, "line_type": "generated", "code": "\n        }\n\n        return dotrap(excp, MULTIPLY_TRAP, x, result);\n    }\n\n    /** Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide", "entropy": 0.11822509765625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.10546875, 0.006305694580078125, 0.322509765625, 1.560546875, 0.20849609375, 0.00022542476654052734, 0.0204925537109375, 0.02496337890625, 5.960464477539062e-07, 0.034881591796875, 0.028472900390625, 5.650520324707031e-05, 1.33514404296875e-05, 0.00031375885009765625, 0.0009484291076660156, 0.0185394287109375, 0.0010318756103515625, 0.003734588623046875, 0.00627899169921875, 0.66650390625, 0.0060882568359375, 0.283447265625, 0.058837890625, 0.8388671875, 0.01030731201171875, 0.10113525390625, 0.0114898681640625, 0.06500244140625, 0.1842041015625, 0.158203125, 0.0005588531494140625, 0.093017578125, 0.0017986297607421875, 0.0167236328125, 0.419189453125, 0.01517486572265625, 0.0015611648559570312, 0.0011386871337890625, 0.01100921630859375, 0.482666015625, 0.0010547637939453125, 0.01102447509765625, 0.01007080078125, 0.2440185546875, 0.00775909423828125, 0.033599853515625, 0.025299072265625, 0.0275726318359375, 0.00959014892578125, 0.0061492919921875, 2.384185791015625e-06, 0.00145721435546875], "tokens": [291, 320, 584, 442, 745, 17770, 26, 327, 2219, 30, 30292, 19413, 81, 47085, 30, 816, 30, 1056, 293, 284, 320, 446, 1022, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910]}
{"line_number": 1539, "line_type": "original", "code": "                result = newInstance(getZero());", "entropy": 2.716796875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [9.2578125, 1.9482421875, 0.290771484375, 7.88671875, 0.5068359375, 0.006565093994140625, 4.52734375, 0.0023345947265625, 0.0210113525390625], "tokens": [2071, 1056, 280, 537, 1810, 26, 371, 8039, 1035]}
{"line_number": 1539, "line_type": "generated", "code": "\n        return dotrap(excp, MULTIPLY_TRAP, x, result);\n    }\n\n    /** Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide(final", "entropy": 0.09722900390625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.16650390625, 1.177734375, 0.309814453125, 0.00016450881958007812, 0.0235137939453125, 0.0246734619140625, 8.344650268554688e-07, 0.03936767578125, 0.025543212890625, 6.0677528381347656e-05, 1.1086463928222656e-05, 0.0003447532653808594, 0.00109100341796875, 0.01078033447265625, 0.0010051727294921875, 0.00356292724609375, 0.006439208984375, 0.138427734375, 0.004734039306640625, 0.349853515625, 0.049835205078125, 0.83837890625, 0.0101470947265625, 0.09002685546875, 0.01302337646484375, 0.05145263671875, 0.1646728515625, 0.151611328125, 0.00046062469482421875, 0.08203125, 0.001697540283203125, 0.01319122314453125, 0.404296875, 0.01329803466796875, 0.0013151168823242188, 0.000858306884765625, 0.00942230224609375, 0.471435546875, 0.0009331703186035156, 0.0106964111328125, 0.01024627685546875, 0.25732421875, 0.00713348388671875, 0.03070068359375, 0.022705078125, 0.019439697265625, 0.007442474365234375, 0.006072998046875, 2.2649765014648438e-06, 0.0016689300537109375, 0.0022144317626953125, 0.0283966064453125], "tokens": [291, 442, 745, 17770, 26, 327, 2219, 30, 30292, 19413, 81, 47085, 30, 816, 30, 1056, 293, 284, 320, 446, 1022, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220]}
{"line_number": 1540, "line_type": "original", "code": "                result.nans = QNAN;", "entropy": 1.8837890625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [9.0390625, 2.341796875, 1.8466796875, 3.083984375, 0.00626373291015625, 0.040740966796875, 0.580078125, 0.002323150634765625, 0.00658416748046875], "tokens": [2071, 1056, 32, 96, 693, 280, 1910, 30548, 45]}
{"line_number": 1540, "line_type": "generated", "code": "\n        return dotrap(excp, MULTIPLY_TRAP, x, result);\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final", "entropy": 0.135986328125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.173095703125, 1.0498046875, 0.249755859375, 0.00014793872833251953, 0.015655517578125, 0.0212249755859375, 7.152557373046875e-07, 0.0254669189453125, 0.0247039794921875, 7.557868957519531e-05, 1.1324882507324219e-05, 0.0003952980041503906, 0.00104522705078125, 0.01195526123046875, 0.0010766983032226562, 0.003414154052734375, 0.006374359130859375, 0.18017578125, 0.004669189453125, 0.40380859375, 0.05010986328125, 2.080078125, 0.180419921875, 0.056671142578125, 0.56396484375, 0.55615234375, 0.09027099609375, 0.0005249977111816406, 0.03338623046875, 0.00409698486328125, 0.056884765625, 0.032440185546875, 3.337860107421875e-05, 0.00116729736328125, 0.0110931396484375, 0.002170562744140625, 0.00039839744567871094, 0.1448974609375, 0.0440673828125, 0.0011453628540039062, 0.0031604766845703125, 0.0037746429443359375, 0.006130218505859375, 0.02447509765625, 0.027496337890625, 0.01275634765625, 0.0208892822265625, 0.0219268798828125, 2.3245811462402344e-05, 0.357177734375, 0.447998046875, 0.0633544921875], "tokens": [291, 442, 745, 17770, 26, 327, 2219, 30, 30292, 19413, 81, 47085, 30, 816, 30, 1056, 293, 284, 320, 446, 1022, 44155, 458, 810, 816, 32, 275, 319, 477, 753, 816, 12044, 406, 363, 275, 319, 477, 601, 4054, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 22213, 26, 3220]}
{"line_number": 1541, "line_type": "original", "code": "                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);", "entropy": 0.7451171875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [8.5625, 2.431640625, 0.56396484375, 0.1956787109375, 0.00037479400634765625, 0.01560211181640625, 1.59375, 2.1457672119140625e-06, 0.0007758140563964844, 0.00012028217315673828, 0.003406524658203125, 6.377696990966797e-05, 3.6171875, 0.01078033447265625, 0.08441162109375, 0.0002205371856689453, 1.9073486328125e-05, 0.0003802776336669922, 0.00189971923828125, 0.037872314453125, 0.004932403564453125, 0.01519012451171875, 0.006359100341796875], "tokens": [2071, 1056, 280, 745, 17770, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 30, 30292, 19413, 81, 47085, 30, 816, 30, 1056, 293]}
{"line_number": 1541, "line_type": "generated", "code": "\n            return result;\n        }\n\n        return result;\n    }\n\n    /**\n     * Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide(final Dfp x) {", "entropy": 0.194580078125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.818359375, 0.62255859375, 0.5205078125, 0.05157470703125, 0.029052734375, 0.00023663043975830078, 0.2310791015625, 0.70849609375, 0.205078125, 0.10430908203125, 0.12371826171875, 0.007137298583984375, 0.697265625, 0.07611083984375, 1.3193359375, 0.0007405281066894531, 1.3310546875, 0.03692626953125, 0.1429443359375, 0.048431396484375, 0.1302490234375, 0.348876953125, 0.400146484375, 0.0033931732177734375, 0.2384033203125, 0.004543304443359375, 0.0257415771484375, 0.72705078125, 0.023895263671875, 0.0038967132568359375, 0.0023593902587890625, 0.0137176513671875, 0.56005859375, 0.0011014938354492188, 0.0222320556640625, 0.0183868408203125, 0.315185546875, 0.00911712646484375, 0.048309326171875, 0.033660888671875, 0.0230712890625, 0.0094146728515625, 0.005649566650390625, 3.5762786865234375e-06, 0.002101898193359375, 0.0028972625732421875, 0.046295166015625, 0.0014286041259765625, 5.4836273193359375e-06, 0.0004527568817138672, 0.0031909942626953125, 0.0181732177734375], "tokens": [324, 442, 1056, 45, 291, 320, 584, 442, 1056, 45, 284, 320, 446, 1022, 275, 319, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 816, 27, 301]}
{"line_number": 1542, "line_type": "original", "code": "                return result;", "entropy": 2.802734375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [9.1484375, 1.990234375, 0.062042236328125, 0.01113128662109375], "tokens": [2071, 442, 1056, 45]}
{"line_number": 1542, "line_type": "generated", "code": "\n        }\n\n        return result;\n    }", "entropy": 0.11614990234375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.05206298828125, 0.0012607574462890625, 0.253173828125, 0.362548828125, 0.0140838623046875, 0.01201629638671875, 0.2193603515625, 0.01490020751953125], "tokens": [291, 320, 584, 442, 1056, 45, 284, 320]}
{"line_number": 1616, "line_type": "original", "code": "            if (isNaN()) {", "entropy": 2.771484375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [6.05078125, 3.818359375, 0.10955810546875, 6.28125, 0.2484130859375, 0.119140625], "tokens": [1468, 415, 308, 26821, 1157, 301]}
{"line_number": 1616, "line_type": "generated", "code": "\n        return result;\n    }\n\n    /**\n     * Divide this by another Dfp, returning the result.\n     * @param divisor Divisor\n     * @return This divided by divisor\n     */\n    public Dfp divide(final Dfp divisor) {\n       ", "entropy": 0.342041015625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.385498046875, 0.103759765625, 0.0259552001953125, 0.004749298095703125, 0.5341796875, 0.005031585693359375, 0.258544921875, 0.053985595703125, 1.443359375, 0.0005998611450195312, 1.1962890625, 0.0408935546875, 0.290283203125, 0.056976318359375, 0.67578125, 0.132080078125, 0.017974853515625, 2.169921875, 0.55908203125, 0.396728515625, 0.85986328125, 0.6044921875, 0.223876953125, 0.002227783203125, 0.80859375, 0.006183624267578125, 1.146484375, 1.1796875, 0.04144287109375, 0.391357421875, 0.0023345947265625, 0.003925323486328125, 0.050140380859375, 1.990234375, 0.572265625, 0.0007905960083007812, 0.279052734375, 0.301513671875, 0.2108154296875, 0.0308837890625, 0.043731689453125, 0.00981903076171875, 2.86102294921875e-06, 0.006557464599609375, 0.0034351348876953125, 0.056610107421875, 0.00244903564453125, 8.821487426757812e-06, 0.0010747909545898438, 0.00804901123046875, 0.00720977783203125, 0.5791015625], "tokens": [291, 442, 1056, 45, 284, 320, 446, 1022, 275, 319, 17536, 805, 458, 810, 4674, 475, 4426, 30, 14116, 322, 1056, 32, 275, 319, 477, 753, 33482, 17536, 22306, 275, 319, 477, 601, 1348, 32235, 810, 33482, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 33482, 27, 301, 291]}
{"line_number": 1617, "line_type": "original", "code": "                return this;", "entropy": 4.0390625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [8.9609375, 1.6142578125, 5.23046875, 0.3583984375], "tokens": [2071, 442, 458, 45]}
{"line_number": 1617, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Multiply this by -1.\n     * @return -this\n     */\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans!= FINITE", "entropy": 0.2266845703125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.269287109375, 0.0157928466796875, 0.291015625, 0.0474853515625, 1.3515625, 0.00060272216796875, 1.630859375, 0.5888671875, 0.24169921875, 1.6025390625, 0.2166748046875, 0.47705078125, 0.439208984375, 0.0242919921875, 0.38525390625, 0.011627197265625, 0.2034912109375, 0.09661865234375, 0.0732421875, 0.03985595703125, 0.0153656005859375, 0.055572509765625, 0.0140228271484375, 2.5033950805664062e-06, 0.0257415771484375, 0.01535797119140625, 0.004047393798828125, 0.007663726806640625, 0.17529296875, 0.53125, 3.063678741455078e-05, 0.033599853515625, 0.020965576171875, 0.03277587890625, 0.06268310546875, 0.00817108154296875, 0.01953125, 0.0014524459838867188, 1.2978515625, 1.1328125, 0.11181640625, 0.0101165771484375, 0.07879638671875, 0.00745391845703125, 0.016387939453125, 0.02447509765625, 0.01044464111328125, 0.051910400390625, 8.225440979003906e-06, 0.01207733154296875, 0.0023365020751953125, -0.0], "tokens": [284, 320, 446, 1022, 275, 319, 44155, 458, 810, 429, 35, 32, 275, 319, 477, 601, 429, 578, 275, 569, 284, 562, 475, 4426, 7528, 332, 346, 301, 291, 475, 4426, 1056, 280, 537, 1810, 26, 578, 293, 584, 1257, 2887, 7456, 6792, 569, 291, 415, 308, 96, 693, 863, 30460, 2345]}
{"line_number": 1620, "line_type": "original", "code": "            if (nans == INFINITE && x != 0) {", "entropy": 1.4638671875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [6.1875, 3.56640625, 0.62353515625, 2.265625, 0.0252227783203125, 1.046875, 0.986328125, 9.322166442871094e-05, 0.09625244140625, 0.76806640625, 2.2578125, 5.15234375, 0.2215576171875, 0.0017566680908203125, 0.052154541015625, 0.16748046875], "tokens": [1468, 415, 308, 96, 693, 610, 1236, 12611, 2345, 962, 816, 863, 225, 34, 27, 301]}
{"line_number": 1620, "line_type": "generated", "code": "\n     * @param divisor divisor\n     * @return quotient of this and divisor\n     */\n    public Dfp divide(final Dfp divisor) {\n        return divide(divisor, null);\n    }\n\n    /** Divide this by divisor.", "entropy": 0.1781005859375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.64892578125, 0.042510986328125, 0.2486572265625, 0.01204681396484375, 0.0283660888671875, 1.0595703125, 0.232177734375, 0.002513885498046875, 0.00214385986328125, 0.036773681640625, 0.5029296875, 0.000988006591796875, 0.059234619140625, 0.02410888671875, 0.28662109375, 0.10406494140625, 0.11004638671875, 0.2022705078125, 0.032470703125, 0.04254150390625, 0.0086212158203125, 2.6226043701171875e-06, 0.00600433349609375, 0.0029296875, 0.052093505859375, 0.00591278076171875, 1.9073486328125e-05, 0.0012235641479492188, 0.005046844482421875, 0.00850677490234375, 0.53662109375, 1.3349609375, 0.033660888671875, 0.07232666015625, 0.357421875, 2.5033950805664062e-06, 0.01395416259765625, 1.3427734375, 0.07305908203125, 0.02044677734375, 0.0003490447998046875, 0.104248046875, 0.03778076171875, 0.070556640625, 0.0020294189453125, 0.01263427734375, 0.00359344482421875, 0.10089111328125, 0.8408203125], "tokens": [275, 319, 477, 753, 33482, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 33482, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 33482, 27, 301, 291, 442, 24910, 26, 507, 22306, 30, 744, 293, 284, 320, 446, 1022, 17536, 805, 458, 810, 33482, 32]}
{"line_number": 1621, "line_type": "original", "code": "                result = newInstance(this);", "entropy": 2.267578125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [8.75, 3.34765625, 0.84814453125, 3.75390625, 0.810546875, 0.06060791015625, 0.52587890625, 0.042510986328125], "tokens": [2071, 1056, 280, 537, 1810, 26, 578, 293]}
{"line_number": 1621, "line_type": "generated", "code": "\n     * @return this/divisor", "entropy": 0.32373046875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.3623046875, 0.240234375, 0.01360321044921875, 0.0372314453125, 1.3828125, 0.5498046875, 0.0029926300048828125, 0.0004420280456542969], "tokens": [275, 319, 477, 601, 458, 33, 507, 22306]}
{"line_number": 1622, "line_type": "original", "code": "                return result;", "entropy": 3.634765625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [8.0703125, 3.462890625, 2.822265625, 0.1817626953125], "tokens": [2071, 442, 1056, 45]}
{"line_number": 1622, "line_type": "generated", "code": "\n     */\n    public Dfp divide(final Dfp divisor) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans!= FINITE) {\n            if (isNaN()) {\n                return this;\n            }", "entropy": 0.09112548828125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.578125, 0.046600341796875, 0.031646728515625, 0.0450439453125, 0.01024627685546875, 3.933906555175781e-06, 0.00708770751953125, 0.002696990966796875, 0.04827880859375, 0.006153106689453125, 1.811981201171875e-05, 0.00104522705078125, 0.005199432373046875, 0.008514404296875, 0.4306640625, 0.7275390625, 8.380413055419922e-05, 0.1475830078125, 0.0582275390625, 0.048736572265625, 0.0750732421875, 0.0149688720703125, 0.0753173828125, 0.0036182403564453125, 0.2060546875, 0.30517578125, 0.156494140625, 0.01235198974609375, 0.094482421875, 0.0212554931640625, 0.046295166015625, 0.0601806640625, 0.0609130859375, 0.319091796875, 1.7881393432617188e-05, 0.0243988037109375, 0.004650115966796875, -0.0, 0.38232421875, 0.001377105712890625, 0.02960205078125, 0.053466796875, 0.0249481201171875, 0.27490234375, 0.1580810546875, 0.00677490234375, 0.01486968994140625, 0.0369873046875, 0.06768798828125, 0.0002751350402832031, 0.004825592041015625, 0.00023162364959716797], "tokens": [275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 33482, 27, 301, 291, 475, 4426, 1056, 280, 537, 1810, 26, 578, 293, 584, 1257, 2887, 7456, 6792, 569, 291, 415, 308, 96, 693, 863, 30460, 2345, 27, 301, 324, 415, 308, 26821, 1157, 301, 400, 442, 458, 45, 324, 320]}
{"line_number": 1625, "line_type": "original", "code": "            if (nans == INFINITE && x == 0) {", "entropy": 1.62109375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [5.16015625, 2.998046875, 0.131591796875, 1.669921875, 0.0011081695556640625, 2.111328125, 0.65869140625, 4.184246063232422e-05, 0.101806640625, 1.232421875, 6.43359375, 3.798828125, 1.5, 0.0074615478515625, 0.05035400390625, 0.07501220703125], "tokens": [1468, 415, 308, 96, 693, 610, 1236, 12611, 2345, 962, 816, 610, 225, 34, 27, 301]}
{"line_number": 1625, "line_type": "generated", "code": "\n        int divisorMant[] = divisor.mant; // cache for speed\n        int divisorExp = divisor.exp;\n        int divisorSign = divisor.sign;\n        int dividendSign = sign;\n        int cmp;\n        int qm[];", "entropy": 0.59814453125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.395751953125, 1.1142578125, 0.6357421875, 2.220703125, 0.2076416015625, 0.195556640625, 0.02239990234375, 0.93115234375, 0.006259918212890625, 0.015899658203125, 1.609325408935547e-05, 0.00872039794921875, 1.6103515625, 1.70703125, 1.37890625, 0.77099609375, 0.240478515625, 0.26708984375, 0.7041015625, 0.72509765625, 0.09588623046875, 0.006206512451171875, 0.00014090538024902344, 0.0027675628662109375, 0.03350830078125, 0.44873046875, 0.286865234375, 1.8955078125, 0.47412109375, 0.01325225830078125, 0.0292205810546875, 0.0003349781036376953, 0.00167083740234375, 0.00925445556640625, 0.50341796875, 0.333984375, 1.9521484375, 0.038177490234375, 0.0018072128295898438, 1.537109375, 0.032470703125, 0.11834716796875, 0.0168304443359375, 0.43505859375, 0.287109375, 2.22265625, 1.7158203125, 0.93896484375, 0.331787109375, 2.4765625, 1.037109375, 0.654296875], "tokens": [291, 629, 33482, 63, 692, 1178, 280, 33482, 32, 95, 692, 45, 434, 3320, 436, 8227, 291, 629, 33482, 3866, 280, 33482, 32, 2832, 45, 291, 629, 33482, 3388, 280, 33482, 32, 1333, 45, 291, 629, 4451, 314, 416, 3388, 280, 2596, 45, 291, 629, 13593, 45, 291, 629, 2678, 95, 10863]}
{"line_number": 1626, "line_type": "original", "code": "                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);", "entropy": 1.4482421875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [8.6953125, 7.55859375, 0.09429931640625, 0.31982421875, 0.07598876953125, 0.00040841102600097656, 0.03485107421875, 0.021026611328125, 1.6171875, 0.00022411346435546875, 0.001140594482421875, 0.00023508071899414062, 0.009063720703125, 0.00037479400634765625, 4.65234375, 0.08966064453125], "tokens": [2071, 1600, 32, 470, 29178, 4629, 8733, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 293]}
{"line_number": 1626, "line_type": "generated", "code": "\n        int divisorMant[] = new int[mant.length];\n        int divisorExp = divisor.exp;\n        int diff = exp - divisorExp;\n        int shift = 0;\n\n        if (divisor.nans!= FINITE)", "entropy": 0.462646484375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.31640625, 0.43896484375, 1.4873046875, 2.314453125, 0.255126953125, 0.2039794921875, 0.01678466796875, 0.8701171875, 0.0246429443359375, 0.023468017578125, 0.50390625, 0.0002951622009277344, 0.0007610321044921875, 0.00016295909881591797, 0.427001953125, 1.0791015625, 0.209716796875, 0.61572265625, 0.51904296875, 0.1600341796875, 0.07513427734375, 0.0005927085876464844, 0.053466796875, 0.292236328125, 0.4326171875, 0.225830078125, 1.9072265625, 0.76904296875, 0.68359375, 0.02984619140625, 0.000385284423828125, 0.0322265625, 0.1337890625, 0.74853515625, 0.3515625, 2.705078125, 0.47900390625, 0.2412109375, 0.018280029296875, 0.01143646240234375, 1.0693359375, 1.1435546875, 0.08721923828125, 0.97412109375, 0.0001417398452758789, 0.235107421875, 0.51708984375, 0.00022101402282714844, 0.84033203125, 0.1732177734375, -0.0, 0.3701171875], "tokens": [291, 629, 33482, 63, 692, 1178, 280, 537, 629, 77, 95, 692, 32, 1322, 970, 291, 629, 33482, 3866, 280, 33482, 32, 2832, 45, 291, 629, 5839, 280, 2910, 429, 33482, 3866, 45, 291, 629, 5733, 280, 225, 34, 45, 584, 415, 308, 507, 22306, 32, 96, 693, 863, 30460, 2345, 27]}
