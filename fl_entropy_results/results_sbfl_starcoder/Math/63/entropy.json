{"line_number": 417, "line_type": "original", "code": "        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;", "entropy": 1.3154296875, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [5.23828125, 5.0546875, 2.1640625, 6.18359375, 0.0010080337524414062, 1.1279296875, 0.00010693073272705078, 0.0211334228515625, 0.0006823539733886719, 0.00299835205078125, 0.01256561279296875, 5.0187110900878906e-05, 0.009033203125, 3.1948089599609375e-05, 0.0004734992980957031, 0.00507354736328125, 0.281005859375, 5.56640625, 0.017059326171875, 9.78708267211914e-05, 1.9384765625], "tokens": [351, 442, 308, 4075, 32, 26821, 26, 106, 27, 962, 6934, 32, 26821, 26, 107, 490, 1276, 816, 610, 533, 45]}
{"line_number": 417, "line_type": "generated", "code": "\n     *\n     * @param x first value\n     * @param y second value\n     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point\n     * numbers between {@code x} and {@code y}.", "entropy": 0.05126953125, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.50634765625, 0.0577392578125, 0.7919921875, 0.00039887428283691406, 0.0311737060546875, 0.0020389556884765625, 0.0050201416015625, 0.01180267333984375, 0.0006103515625, 0.0012302398681640625, 7.033348083496094e-06, 5.6624412536621094e-05, 1.5139579772949219e-05, 4.112720489501953e-05, 9.036064147949219e-05, 8.749961853027344e-05, 0.0006575584411621094, 7.271766662597656e-06, 0.0022373199462890625, 0.0008025169372558594, 0.0322265625, 0.0251007080078125, 2.384185791015625e-07, 0.007236480712890625, 0.0007462501525878906, 0.01236724853515625, 0.004802703857421875, 0.0006966590881347656, 1.1920928955078125e-06, 0.00043320655822753906, 0.0003235340118408203, 5.245208740234375e-06, 0.00021386146545410156, 0.0008397102355957031, 6.61611557006836e-05, 0.165283203125, 0.0028896331787109375, 0.037750244140625, 0.0021457672119140625, 0.280517578125, 9.965896606445312e-05, 0.6162109375, 0.030303955078125, 0.0263824462890625, 1.5497207641601562e-06, 0.0008721351623535156, 3.0517578125e-05, 2.276897430419922e-05, 4.8041343688964844e-05, 4.410743713378906e-06, 6.198883056640625e-06, 0.006229400634765625], "tokens": [275, 319, 275, 319, 477, 753, 816, 1932, 786, 275, 319, 477, 753, 533, 3100, 786, 275, 319, 477, 753, 1769, 28522, 1069, 3088, 687, 308, 1449, 28522, 1069, 429, 225, 35, 4370, 438, 322, 1451, 432, 15394, 2260, 275, 319, 7515, 3733, 3088, 687, 816, 111, 461, 3088, 687, 533, 4009]}
{"line_number": 523, "line_type": "original", "code": "        if ((x == null) || (y == null)) {", "entropy": 1.3583984375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [4.515625, 5.87890625, 2.673828125, 4.54296875, 0.755859375, 0.12939453125, 0.008331298828125, 0.25634765625, 0.0740966796875, 0.056884765625, 0.032623291015625, 0.0009508132934570312, 0.0626220703125, 0.0277252197265625], "tokens": [351, 415, 1833, 106, 610, 744, 27, 1276, 308, 107, 610, 744, 490, 301]}
{"line_number": 523, "line_type": "generated", "code": "\n     * 2<sup>63</sup> is\n     * <code>2,092,278,988,800,000</code>. If the result exceeds\n     * <code>2", "entropy": 0.405029296875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.48828125, 0.058929443359375, 1.505859375, 2.419921875, 1.4951171875, 0.321533203125, 0.0809326171875, 0.178466796875, 0.438232421875, 0.0252227783203125, 0.0019550323486328125, 0.6982421875, 0.58544921875, 1.0087890625, 0.0005698204040527344, 0.416015625, 0.22509765625, 0.0232086181640625, 1.337890625, 1.134765625, 1.7373046875, 0.036407470703125, 0.1395263671875, 0.0003464221954345703, 0.001865386962890625, 0.0008320808410644531, 0.0017557144165039062, 0.00012969970703125, 0.0006461143493652344, 0.00025582313537597656, 0.0032367706298828125, 0.0007581710815429688, 0.0005145072937011719, 0.00696563720703125, 0.0002090930938720703, 0.032257080078125, 3.9696693420410156e-05, 0.00019276142120361328, 0.0001552104949951172, 0.427734375, 0.0042877197265625, 1.4609375, 1.15625, 0.057464599609375, 0.3662109375, 1.8046875, 0.2083740234375, 0.0004892349243164062, 0.0379638671875, 0.0018434524536132812, 0.0012950897216796875, 0.134765625], "tokens": [275, 319, 225, 36, 46, 5540, 48, 40, 37, 377, 5540, 48, 438, 275, 319, 333, 687, 48, 36, 30, 34, 43, 36, 30, 36, 41, 42, 30, 43, 42, 42, 30, 42, 34, 34, 30, 34, 34, 34, 377, 687, 4503, 1670, 322, 1056, 35308, 275, 319, 333, 687, 48, 36]}
{"line_number": 524, "line_type": "original", "code": "            return !((x == null) ^ (y == null));", "entropy": 2.091796875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.49609375, 4.671875, 10.1640625, 5.56640625, 2.275390625, 0.06402587890625, 0.015869140625, 0.0013666152954101562, 0.01995849609375, 0.0015716552734375, 0.001720428466796875, 0.0007252693176269531, 0.0019397735595703125, 0.0146942138671875], "tokens": [1468, 442, 653, 1162, 106, 610, 744, 27, 5304, 308, 107, 610, 744, 876]}
{"line_number": 524, "line_type": "generated", "code": "\n     * </li>\n     * </ul>\n     *\n     * @param n the number to take the factorial of.\n     * @return n!\n     * @throws IllegalArgumentException if n is negative\n     * @throws ArithmeticException if the result can not", "entropy": 0.273681640625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.57177734375, 0.1336669921875, 1.814453125, 1.0849609375, 0.035125732421875, 0.0179443359375, 0.0272216796875, 0.0190582275390625, 0.00223541259765625, 0.332763671875, 0.016937255859375, 0.00521087646484375, 0.87255859375, 0.0017919540405273438, 0.05224609375, 0.020263671875, 0.00445556640625, 0.99951171875, 1.11328125, 0.35205078125, 0.27978515625, 0.0061187744140625, 0.0057830810546875, 0.0002512931823730469, 0.00281524658203125, 1.55078125, 0.03924560546875, 0.0004756450653076172, 0.00449371337890625, 0.042022705078125, 0.327392578125, 0.14697265625, 0.02325439453125, 0.034637451171875, 0.005161285400390625, 0.044586181640625, 0.1884765625, 0.0509033203125, 0.69189453125, 0.42919921875, 0.00728607177734375, 0.93408203125, 0.6044921875, 0.0294342041015625, 0.484375, 0.22314453125, 0.0004208087921142578, 0.06927490234375, 0.055450439453125, 0.027099609375, 0.411865234375, 0.0287933349609375], "tokens": [275, 319, 576, 374, 48, 275, 319, 576, 338, 48, 275, 319, 275, 319, 477, 753, 310, 322, 1451, 372, 4818, 322, 10365, 564, 432, 32, 275, 319, 477, 601, 310, 19, 275, 319, 477, 5117, 12137, 415, 310, 438, 11003, 275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646]}
{"line_number": 526, "line_type": "original", "code": "        if (x.length != y.length) {", "entropy": 1.4130859375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [3.328125, 1.6015625, 0.162353515625, 5.83203125, 4.54296875, 0.09149169921875, 1.185546875, 0.15869140625, 0.003017425537109375, 0.0011138916015625, 0.01079559326171875, 0.0426025390625], "tokens": [351, 415, 308, 106, 32, 1322, 863, 533, 32, 1322, 27, 301]}
{"line_number": 526, "line_type": "generated", "code": "\n     * @param n the integer number to take the factorial of.\n     * @return n!\n     * @throws ArithmeticException if the result can not be represented as a\n     * <code>long</code>.\n     * @throws IllegalArgumentException if n", "entropy": 0.316162109375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.205078125, 0.43017578125, 0.66162109375, 0.054962158203125, 0.01383209228515625, 1.16015625, 2.1171875, 0.7109375, 0.30517578125, 1.0830078125, 0.016845703125, 0.014312744140625, 0.0009593963623046875, 0.02252197265625, 1.236328125, 0.039154052734375, 0.0013332366943359375, 0.009918212890625, 0.041290283203125, 0.474609375, 0.29052734375, 0.04888916015625, 0.07684326171875, 0.006984710693359375, 0.07623291015625, 1.59375, 0.0005507469177246094, 0.099365234375, 0.48876953125, 0.01715087890625, 0.422607421875, 0.0369873046875, 0.1341552734375, 0.1375732421875, 0.04742431640625, 0.74609375, 0.32666015625, 0.0003230571746826172, 0.5498046875, 0.038421630859375, 0.0005612373352050781, 0.020050048828125, 0.007297515869140625, 0.0008158683776855469, 0.142333984375, 0.1536865234375, 0.36376953125, 0.029388427734375, 0.310791015625, 0.0660400390625, 0.06195068359375, 0.5439453125], "tokens": [275, 319, 477, 753, 310, 322, 4991, 1451, 372, 4818, 322, 10365, 564, 432, 32, 275, 319, 477, 601, 310, 19, 275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646, 526, 17718, 619, 312, 275, 319, 333, 687, 48, 3222, 377, 687, 4503, 275, 319, 477, 5117, 12137, 415, 310]}
{"line_number": 527, "line_type": "original", "code": "            return false;", "entropy": 4.4921875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.296875, 1.5078125, 9.1328125, 0.031524658203125], "tokens": [1468, 442, 901, 45]}
{"line_number": 527, "line_type": "generated", "code": "\n     * @param n the argument.\n     * @return n!\n     * @throws IllegalArgumentException if n is negative.\n     * @throws ArithmeticException if the result can not be represented as a\n     * <code>long</code>.\n     */\n    public", "entropy": 0.229736328125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.826171875, 0.312255859375, 0.6044921875, 0.043609619140625, 0.01031494140625, 1.2001953125, 1.0576171875, 0.335693359375, 0.0167083740234375, 0.0005826950073242188, 0.006015777587890625, 0.03302001953125, 0.56005859375, 0.429931640625, 0.041107177734375, 0.050140380859375, 0.005809783935546875, 0.06256103515625, 0.4541015625, 0.04583740234375, 0.51025390625, 0.58740234375, 0.0183868408203125, 0.68017578125, 0.03570556640625, 0.160888671875, 0.00699615478515625, 0.050537109375, 0.030029296875, 0.0003533363342285156, 0.086669921875, 0.1302490234375, 0.0204925537109375, 0.61083984375, 0.044891357421875, 0.07635498046875, 0.1846923828125, 0.034393310546875, 1.13671875, 0.29443359375, 0.0003387928009033203, 0.474365234375, 0.023345947265625, 0.00046253204345703125, 0.0107269287109375, 0.0055389404296875, 0.0005164146423339844, 0.038787841796875, 0.06640625, 0.44189453125, 0.046234130859375, 0.03778076171875], "tokens": [275, 319, 477, 753, 310, 322, 2793, 32, 275, 319, 477, 601, 310, 19, 275, 319, 477, 5117, 12137, 415, 310, 438, 11003, 32, 275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646, 526, 17718, 619, 312, 275, 319, 333, 687, 48, 3222, 377, 687, 4503, 275, 569, 284, 562]}
{"line_number": 529, "line_type": "original", "code": "        for (int i = 0; i < x.length; ++i) {", "entropy": 0.91796875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [2.77734375, 5.29296875, 0.073974609375, 0.475830078125, 0.0474853515625, 0.020111083984375, 0.1055908203125, 3.69921875, 0.056304931640625, 0.007801055908203125, 0.0294952392578125, 4.18359375, 0.031036376953125, 0.01145172119140625, 0.06646728515625, 0.3486328125, 0.0017518997192382812, 0.009613037109375, 0.1988525390625], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 3311, 91, 27, 301]}
{"line_number": 529, "line_type": "generated", "code": "\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if <code>n &lt; 0</code>\n     * @throws ArithmeticException if the result cannot be represented as a\n     * <code>long</code>.", "entropy": 0.190185546875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.58935546875, 0.05670166015625, 0.0309906005859375, 0.0411376953125, 1.0693359375, 0.0188751220703125, 0.0010595321655273438, 0.00858306884765625, 0.0411376953125, 0.0002892017364501953, 0.133544921875, 0.1783447265625, 0.0416259765625, 0.006610870361328125, 0.041259765625, 0.380859375, 0.0521240234375, 0.69091796875, 0.00482177734375, 0.001773834228515625, 0.0236053466796875, 1.6650390625, 0.00036716461181640625, 0.02105712890625, 0.0038738250732421875, 5.793571472167969e-05, 0.024017333984375, 0.0002601146697998047, 0.51416015625, 0.2078857421875, 0.210693359375, 0.029693603515625, 0.045166015625, 0.03350830078125, 0.00027251243591308594, 0.09661865234375, 0.146728515625, 0.0201873779296875, 1.7900390625, 0.010528564453125, 0.10888671875, 0.030975341796875, 0.8701171875, 0.240966796875, 0.0003032684326171875, 0.2379150390625, 0.020751953125, 0.0003268718719482422, 0.0101776123046875, 0.007213592529296875, 0.0001533031463623047, 0.13134765625], "tokens": [275, 319, 477, 601, 333, 687, 48, 96, 12975, 687, 48, 275, 319, 477, 5117, 12137, 415, 333, 687, 48, 96, 549, 2159, 45, 225, 34, 377, 687, 48, 275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 4881, 526, 17718, 619, 312, 275, 319, 333, 687, 48, 3222, 377, 687, 4503]}
{"line_number": 530, "line_type": "original", "code": "            if (!equals(x[i], y[i])) {", "entropy": 2.375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.0078125, 2.54296875, 4.85546875, 10.703125, 0.243896484375, 3.92578125, 3.482421875, 0.06536865234375, 0.025360107421875, 0.053924560546875, 0.00424957275390625, 0.0020751953125, 0.025390625, 0.30810546875], "tokens": [1468, 415, 1429, 3574, 26, 106, 77, 91, 614, 533, 77, 91, 5259, 301]}
{"line_number": 530, "line_type": "generated", "code": "\n    }", "entropy": 0.8134765625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.4052734375, 0.2220458984375], "tokens": [284, 320]}
{"line_number": 534, "line_type": "original", "code": "        return true;", "entropy": 4.09375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [5.5390625, 0.8603515625, 9.953125, 0.020660400390625], "tokens": [351, 442, 861, 45]}
{"line_number": 534, "line_type": "generated", "code": "\n    /**\n     * Returns the double value closest to the real mathematical constant e.\n     *\n     * @return the double closest to e\n     */\n    public static double E = Math.E;\n\n    /**\n     * Returns the double value closest to the real mathematical", "entropy": 0.3369140625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.40380859375, 0.99267578125, 0.0391845703125, 0.00051116943359375, 0.1751708984375, 0.61328125, 1.841796875, 0.74658203125, 0.1556396484375, 0.33935546875, 0.64697265625, 0.16162109375, 1.6572265625, 0.098388671875, 0.447265625, 0.39404296875, 0.105224609375, 0.0406494140625, 0.63671875, 0.0003523826599121094, 0.0943603515625, 0.136474609375, 0.091796875, 1.4375, 0.80908203125, 0.0002701282501220703, 0.07281494140625, 0.720703125, 0.09222412109375, 0.1507568359375, 0.019989013671875, 0.005802154541015625, 0.0709228515625, 0.76513671875, 0.3642578125, 0.82373046875, 0.0043182373046875, 0.0085906982421875, 0.041534423828125, 0.36865234375, 0.01568603515625, 0.0175018310546875, 8.237361907958984e-05, 0.155517578125, 0.1649169921875, 0.56689453125, 0.0006623268127441406, 0.04156494140625, 3.8504600524902344e-05, 0.194091796875, 0.72314453125, 0.06494140625], "tokens": [284, 1022, 275, 319, 3759, 322, 2064, 786, 18122, 372, 322, 4011, 47135, 8082, 484, 32, 275, 319, 275, 319, 477, 601, 322, 2064, 18122, 372, 484, 275, 569, 284, 562, 907, 2064, 516, 280, 4175, 32, 55, 45, 446, 1022, 275, 319, 3759, 322, 2064, 786, 18122, 372, 322, 4011, 47135]}
