{"line_number": 986, "line_type": "original", "code": "        if (v.length != this.getColumnDimension()) {", "entropy": 1.2978515625, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [4.8984375, 4.09375, 0.231201171875, 3.73046875, 0.77490234375, 0.023834228515625, 0.0188446044921875, 2.076171875, 0.005260467529296875, 0.92822265625, 0.0003235340118408203, 0.042694091796875, 0.053497314453125], "tokens": [351, 415, 308, 104, 32, 1322, 863, 458, 32, 19239, 9883, 1157, 301]}
{"line_number": 986, "line_type": "generated", "code": "\n            out[col] = sum;\n        }\n        return out;\n    }\n    \n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector", "entropy": 0.021514892578125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.2105712890625, 0.203857421875, 0.001739501953125, 0.06683349609375, 0.00283050537109375, 0.0012292861938476562, 0.004673004150390625, 0.016571044921875, 0.0435791015625, 0.0012445449829101562, 0.053802490234375, 0.0016031265258789062, 0.0006771087646484375, 0.0013980865478515625, 0.036102294921875, 0.0003228187561035156, 0.15380859375, 0.01678466796875, 0.011932373046875, 0.0001310110092163086, 0.035614013671875, 0.00914764404296875, 0.047271728515625, 0.0843505859375, 0.0007786750793457031, 0.0010318756103515625, 0.001678466796875, 0.00044345855712890625, 0.033935546875, 0.0001220703125, 2.396106719970703e-05, 0.01418304443359375, 0.002407073974609375, 0.0009045600891113281, 0.009368896484375, 0.0027103424072265625, 0.0002256631851196289, 0.00011074542999267578, 0.0005731582641601562, 9.85860824584961e-05, 2.5391578674316406e-05, 0.0022144317626953125, 0.0011034011840820312, 4.279613494873047e-05, 0.0067138671875, 0.0003037452697753906, 0.0003330707550048828, 0.00010478496551513672, 0.0015459060668945312, 0.0015277862548828125, 0.0299224853515625, 0.0003788471221923828], "tokens": [324, 963, 77, 748, 79, 280, 3632, 45, 291, 320, 291, 442, 963, 45, 284, 320, 2170, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026]}
{"line_number": 989, "line_type": "original", "code": "        final int nRows = this.getRowDimension();", "entropy": 0.75830078125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [5.203125, 1.962890625, 0.09979248046875, 0.0479736328125, 0.97021484375, 0.0033359527587890625, 0.04022216796875, 0.0005521774291992188, 0.00933074951171875, 3.9577484130859375e-05, 0.00360107421875], "tokens": [351, 1158, 629, 310, 7252, 280, 458, 32, 30093, 9883, 473]}
{"line_number": 989, "line_type": "generated", "code": "\n    }\n    \n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector to premultiply by\n     * @return v*this\n     * @", "entropy": 0.05023193359375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.80810546875, 1.0556640625, 0.3017578125, 0.0209808349609375, 0.0199737548828125, 0.0001239776611328125, 0.052825927734375, 0.0185394287109375, 0.09710693359375, 0.09033203125, 0.0006895065307617188, 0.0011272430419921875, 0.001850128173828125, 0.0002758502960205078, 0.037353515625, 0.00016689300537109375, 2.491474151611328e-05, 0.0281219482421875, 0.00305938720703125, 0.0007967948913574219, 0.018035888671875, 0.003376007080078125, 0.00021755695343017578, 0.0002665519714355469, 0.0008563995361328125, 0.00012803077697753906, 2.110004425048828e-05, 0.0024547576904296875, 0.001186370849609375, 4.601478576660156e-05, 0.00559234619140625, 0.00019097328186035156, 0.00038814544677734375, 8.654594421386719e-05, 0.002933502197265625, 0.0013628005981445312, 0.023101806640625, 0.00034880638122558594, 8.380413055419922e-05, 0.0014276504516601562, 0.00023818016052246094, 0.0005984306335449219, 0.0009617805480957031, 5.245208740234375e-06, 0.0002014636993408203, 0.0012617111206054688, 0.00322723388671875, 0.0007910728454589844, 0.0005474090576171875, 0.0006618499755859375, 0.0008196830749511719, 8.368492126464844e-05], "tokens": [284, 320, 2170, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026, 372, 1406, 20123, 810, 275, 319, 477, 601, 354, 28, 578, 275, 319, 477]}
{"line_number": 990, "line_type": "original", "code": "        final int nCols = this.getColumnDimension();", "entropy": 1.23828125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [5.08984375, 5.859375, 1.0400390625, 0.252685546875, 1.2939453125, 0.003826141357421875, 0.06982421875, 0.0019817352294921875, 0.0010776519775390625, 5.4955482482910156e-05, 0.0027790069580078125], "tokens": [351, 1158, 629, 310, 19911, 280, 458, 32, 19239, 9883, 473]}
{"line_number": 990, "line_type": "generated", "code": "\n    \n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector to premultiply by\n     * @return v*this\n     * @throws IllegalArgumentException", "entropy": 0.0526123046875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [1.5771484375, 0.07513427734375, 0.052978515625, 0.00020194053649902344, 0.200439453125, 0.1036376953125, 0.3193359375, 0.15380859375, 0.0006184577941894531, 0.0019626617431640625, 0.0036983489990234375, 0.0003955364227294922, 0.0943603515625, 0.0003695487976074219, 1.9669532775878906e-05, 0.044464111328125, 0.0038013458251953125, 0.0014019012451171875, 0.0384521484375, 0.005870819091796875, 0.0002605915069580078, 5.555152893066406e-05, 0.0018148422241210938, 0.00019109249114990234, 3.0875205993652344e-05, 0.00408935546875, 0.0014619827270507812, 0.0001201629638671875, 0.005825042724609375, 0.0002551078796386719, 0.0003829002380371094, 0.0001399517059326172, 0.004852294921875, 0.0013647079467773438, 0.0201416015625, 0.00039386749267578125, 0.00011992454528808594, 0.0016489028930664062, 0.00024580955505371094, 0.0005660057067871094, 0.0008692741394042969, 1.3709068298339844e-05, 0.00018978118896484375, 0.0029125213623046875, 0.00373077392578125, 0.0011053085327148438, 0.0007796287536621094, 0.0007028579711914062, 0.001438140869140625, 0.00010979175567626953, 0.0002486705780029297, 0.0014505386352539062], "tokens": [2170, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026, 372, 1406, 20123, 810, 275, 319, 477, 601, 354, 28, 578, 275, 319, 477, 5117, 12137]}
{"line_number": 991, "line_type": "original", "code": "        final BigDecimal[] out = new BigDecimal[v.length];", "entropy": 1.3525390625, "is_bug_line": true, "sus_score": 0.4082482904638631, "per_token_entropy": [4.65625, 7.69921875, 0.52099609375, 0.7021484375, 0.3056640625, 0.04888916015625, 0.0186767578125, 0.000579833984375, 0.0100555419921875, 3.486328125, 0.0479736328125, 0.0643310546875, 0.01070404052734375], "tokens": [351, 1158, 17280, 1178, 963, 280, 537, 17280, 77, 104, 32, 1322, 970]}
{"line_number": 991, "line_type": "generated", "code": "\n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector to premultiply by\n     * @return v*this\n     * @throws IllegalArgumentException", "entropy": 0.0479736328125, "is_bug_line": true, "sus_score": 0.4082482904638631, "per_token_entropy": [0.9853515625, 0.210205078125, 0.05108642578125, 0.00018393993377685547, 0.2342529296875, 0.11669921875, 0.421142578125, 0.1551513671875, 0.0006084442138671875, 0.003017425537109375, 0.0038604736328125, 0.0004944801330566406, 0.10009765625, 0.00041031837463378906, 2.0265579223632812e-05, 0.06744384765625, 0.00592803955078125, 0.0017261505126953125, 0.04779052734375, 0.0079345703125, 0.0003724098205566406, 8.213520050048828e-05, 0.0018815994262695312, 0.0003809928894042969, 2.3245811462402344e-05, 0.005504608154296875, 0.0016231536865234375, 0.0002262592315673828, 0.0071563720703125, 6.592273712158203e-05, 0.0004639625549316406, 0.0002143383026123047, 0.00698089599609375, 0.0016069412231445312, 0.02716064453125, 0.0004162788391113281, 0.00015044212341308594, 0.0016717910766601562, 0.00021517276763916016, 0.00060272216796875, 0.0008363723754882812, 1.7642974853515625e-05, 0.00020325183868408203, 0.00972747802734375, 0.004764556884765625, 0.00127410888671875, 0.0008416175842285156, 0.0007991790771484375, 0.0017900466918945312, 0.00015103816986083984, 0.0004303455352783203, 0.00231170654296875], "tokens": [284, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026, 372, 1406, 20123, 810, 275, 319, 477, 601, 354, 28, 578, 275, 319, 477, 5117, 12137]}
{"line_number": 992, "line_type": "original", "code": "        for (int row = 0; row < nRows; row++) {", "entropy": 0.50341796875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [3.34765625, 3.521484375, 0.021087646484375, 0.00907135009765625, 1.3154296875, 0.0176239013671875, 0.034576416015625, 0.0005612373352050781, 0.004039764404296875, 0.0024356842041015625, 0.007053375244140625, 0.208740234375, 0.006740570068359375, 0.0026531219482421875, 0.0183563232421875, 0.01158905029296875, 0.0249176025390625], "tokens": [351, 436, 308, 410, 2698, 280, 225, 34, 45, 2698, 333, 310, 7252, 45, 2698, 1987, 301]}
{"line_number": 992, "line_type": "generated", "code": "\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector to premultiply by\n     * @return v*this\n     * @throws IllegalArgumentException if row", "entropy": 0.04962158203125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [1.1591796875, 0.200927734375, 0.412841796875, 0.11669921875, 0.27490234375, 0.1328125, 0.00046706199645996094, 0.0015459060668945312, 0.0038852691650390625, 0.0005617141723632812, 0.031707763671875, 0.00029850006103515625, 5.3048133850097656e-05, 0.0341796875, 0.00795745849609375, 0.002872467041015625, 0.042510986328125, 0.0199127197265625, 0.000492095947265625, 1.8596649169921875e-05, 0.0021915435791015625, 0.0004496574401855469, 2.2530555725097656e-05, 0.00530242919921875, 0.0249176025390625, 0.004085540771484375, 0.03228759765625, 0.00024044513702392578, 0.000446319580078125, 0.0005154609680175781, 0.0063323974609375, 0.0017910003662109375, 0.027801513671875, 0.0005240440368652344, 0.00013554096221923828, 0.00159454345703125, 0.00019478797912597656, 0.0006799697875976562, 0.0020084381103515625, 1.5020370483398438e-05, 7.891654968261719e-05, 0.0027675628662109375, 0.0048828125, 0.0010747909545898438, 0.0007281303405761719, 0.005260467529296875, 0.0009045600891113281, 0.00026345252990722656, 0.0003457069396972656, 0.0024585723876953125, 0.0005283355712890625, 0.0054931640625], "tokens": [275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026, 372, 1406, 20123, 810, 275, 319, 477, 601, 354, 28, 578, 275, 319, 477, 5117, 12137, 415, 2698]}
{"line_number": 993, "line_type": "original", "code": "            BigDecimal sum = ZERO;", "entropy": 5.796875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [7.046875, 13.203125, 14.1328125, 0.2362060546875, 0.1365966796875, 0.032470703125], "tokens": [1468, 17280, 3632, 280, 20024, 45]}
{"line_number": 993, "line_type": "generated", "code": "\n     * this = (A | B).\n     *\n     * @param b the right-hand side vector\n     * @return (A | B)<sup>-1</sup> * b\n     * @throws IllegalArgumentException if this matrix is singular or\n     *", "entropy": 0.4169921875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.59912109375, 0.0029010772705078125, 0.94970703125, 1.923828125, 0.3642578125, 0.270263671875, 0.5966796875, 0.7177734375, 0.51708984375, 0.1387939453125, 0.00144195556640625, 0.40478515625, 0.00051116943359375, 0.054351806640625, 0.0130462646484375, 0.8671875, 1.12890625, 0.2099609375, 1.314453125, 0.00019049644470214844, 0.697265625, 1.2509765625, 0.475341796875, 0.0005307197570800781, 0.006671905517578125, 0.022003173828125, 1.908203125, 0.35791015625, 0.0711669921875, 0.00325775146484375, 0.6337890625, 0.00247955322265625, 0.05230712890625, 8.33272933959961e-05, 0.0002219676971435547, 8.177757263183594e-05, 0.1927490234375, 0.1593017578125, 0.053985595703125, 0.06390380859375, 0.0147247314453125, 0.037200927734375, 0.0166168212890625, 0.239990234375, 0.04705810546875, 1.591796875, 1.5927734375, 0.1837158203125, 0.666015625, 0.283447265625, 0.98779296875, 0.0036602020263671875], "tokens": [275, 319, 458, 280, 308, 51, 523, 551, 547, 275, 319, 275, 319, 477, 753, 323, 322, 2091, 31, 4668, 5209, 4026, 275, 319, 477, 601, 308, 51, 523, 551, 12129, 5540, 13119, 35, 377, 5540, 48, 319, 323, 275, 319, 477, 5117, 12137, 415, 458, 5045, 438, 36134, 556, 275, 319]}
{"line_number": 994, "line_type": "original", "code": "            for (int i = 0; i < nCols; i++) {", "entropy": 1.3984375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [5.21484375, 9.8828125, 0.427734375, 0.262939453125, 1.3779296875, 0.06292724609375, 0.0109100341796875, 0.0032978057861328125, 0.04754638671875, 0.00659942626953125, 0.296875, 4.4453125, 1.4287109375, 0.018218994140625, 0.05181884765625, 0.04608154296875, 0.1744384765625], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 310, 19911, 45, 595, 1987, 301]}
{"line_number": 994, "line_type": "generated", "code": "\n     *\n     * @param b the right-hand sides\n     * @return a\n     * @throws IllegalArgumentException if the matrices are not conformable\n     */\n    public BigDecimal[][] solve(BigDecimal[]... b) throws IllegalArgumentException {\n        // sanity check\n        if (!", "entropy": 0.446533203125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.82470703125, 0.0079345703125, 0.923828125, 0.0012569427490234375, 0.0294342041015625, 0.013275146484375, 0.30126953125, 0.896484375, 0.5283203125, 0.59912109375, 0.0004100799560546875, 0.62158203125, 0.6201171875, 0.0003371238708496094, 0.0078125, 0.01763916015625, 1.0263671875, 1.8359375, 0.0537109375, 0.058685302734375, 0.031982421875, 0.090576171875, 0.1375732421875, 1.2353515625, 1.2919921875, 0.8134765625, 0.45947265625, 0.58056640625, 0.479248046875, 0.7265625, 0.277587890625, 0.020416259765625, 0.0110015869140625, 0.05511474609375, 0.60302734375, 0.1435546875, 0.0188751220703125, 0.10546875, 1.1201171875, 0.3583984375, 0.022369384765625, 0.0009112358093261719, 0.265869140625, 0.04815673828125, 0.03460693359375, 0.11553955078125, 1.3291015625, 1.638671875, 0.4765625, 0.0811767578125, 1.2607421875, 1.01953125], "tokens": [275, 319, 275, 319, 477, 753, 323, 322, 2091, 31, 4668, 29798, 275, 319, 477, 601, 312, 275, 319, 477, 5117, 12137, 415, 322, 23784, 884, 646, 30526, 444, 275, 569, 284, 562, 17280, 11336, 10932, 26, 20827, 1178, 1179, 323, 27, 2571, 12137, 301, 291, 434, 37090, 1505, 291, 415, 1429]}
{"line_number": 995, "line_type": "original", "code": "                sum = sum.add(data[row][i].multiply(v[i]));", "entropy": 1.8310546875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [9.015625, 12.0078125, 1.9033203125, 3.23828125, 0.1710205078125, 0.132568359375, 0.033416748046875, 0.66259765625, 0.0099945068359375, 2.220703125, 0.0208587646484375, 2.76171875, 0.146484375, 0.0118255615234375, 0.01424407958984375, 2.107421875, 0.046051025390625, 0.24951171875, 0.039459228515625], "tokens": [2071, 3632, 280, 3632, 32, 669, 26, 605, 77, 643, 1674, 91, 997, 20123, 26, 104, 77, 91, 10674]}
{"line_number": 995, "line_type": "generated", "code": "\n     *\n     * @param b an array of vectors with a number of rows equal to the\n     * column dimension of this matrix\n     * @return a matrix of solutions\n     * @throws IllegalArgumentException if the dimensions are wrong\n     */\n    public BigDecimalMatrix solve(", "entropy": 0.43212890625, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.323486328125, 0.100830078125, 0.869140625, 0.0066986083984375, 0.03936767578125, 0.00982666015625, 0.0222625732421875, 1.189453125, 0.791015625, 0.08831787109375, 0.9384765625, 0.043121337890625, 0.876953125, 1.236328125, 0.00041222572326660156, 0.370849609375, 0.21484375, 0.004299163818359375, 0.2646484375, 1.1591796875, 0.0002636909484863281, 1.8046875, 0.07342529296875, 0.020538330078125, 0.1304931640625, 0.73681640625, 0.66650390625, 0.0015363693237304688, 0.0288848876953125, 0.029296875, 1.1611328125, 0.1446533203125, 0.2242431640625, 1.5185546875, 0.2342529296875, 0.007450103759765625, 0.0246429443359375, 0.058319091796875, 0.06683349609375, 0.093017578125, 0.685546875, 1.4736328125, 1.1513671875, 1.5751953125, 0.10791015625, 0.190673828125, 0.0215301513671875, 0.00704193115234375, 0.0675048828125, 0.83837890625, 0.75341796875, 0.0165252685546875], "tokens": [275, 319, 275, 319, 477, 753, 323, 600, 1417, 432, 16540, 623, 312, 1451, 432, 5760, 5040, 372, 322, 275, 319, 2623, 8742, 432, 458, 5045, 275, 319, 477, 601, 312, 5045, 432, 16295, 275, 319, 477, 5117, 12137, 415, 322, 13135, 884, 6643, 275, 569, 284, 562, 17280, 4161, 10932, 26]}
{"line_number": 997, "line_type": "original", "code": "            out[row] = sum;", "entropy": 6.1875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [4.1640625, 18.140625, 4.04296875, 4.26171875, 0.358642578125, 0.058624267578125, 6.4921875, 11.96875], "tokens": [1468, 963, 77, 643, 79, 280, 3632, 45]}
{"line_number": 997, "line_type": "generated", "code": "        be solved\n     * @return array of vectors that are solutions\n     * @throws IllegalArgumentException if matrix is not square\n     * @throws IllegalArgumentException if number of columns of b doesn't\n     * match the matrix column dimension\n     * @throws NoConvergenceException", "entropy": 0.513671875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [2.11328125, 0.1259765625, 0.00914764404296875, 0.253662109375, 0.0022945404052734375, 0.02911376953125, 0.0364990234375, 1.2392578125, 0.016021728515625, 0.98583984375, 1.263671875, 0.4873046875, 0.708984375, 0.10284423828125, 0.0231170654296875, 0.1461181640625, 0.0305633544921875, 0.06793212890625, 0.138916015625, 1.8291015625, 0.98779296875, 0.5859375, 0.02520751953125, 1.6826171875, 0.03326416015625, 0.19140625, 0.005146026611328125, 0.84326171875, 0.0281829833984375, 1.8212890625, 0.00028014183044433594, 1.8193359375, 0.1055908203125, 0.302490234375, 0.68359375, 0.00650787353515625, 1.5986328125, 0.0009264945983886719, 0.51171875, 0.2384033203125, 1.1142578125, 1.205078125, 0.057403564453125, 0.21533203125, 0.3779296875, 0.0108489990234375, 0.032379150390625, 1.38671875, 1.2197265625, 0.0015821456909179688, 0.0005011558532714844, 0.0002734661102294922], "tokens": [351, 526, 19479, 275, 319, 477, 601, 1417, 432, 16540, 688, 884, 16295, 275, 319, 477, 5117, 12137, 415, 5045, 438, 646, 14627, 275, 319, 477, 5117, 12137, 415, 1451, 432, 6090, 432, 323, 4163, 1330, 275, 319, 2530, 322, 5045, 2623, 8742, 275, 319, 477, 5117, 3139, 609, 424, 27976, 984]}
{"line_number": 154, "line_type": "original", "code": "                if (d[r].length != nCols) {", "entropy": 1.2099609375, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [7.62890625, 3.07421875, 0.1689453125, 0.78466796875, 0.4091796875, 3.09375, 0.2301025390625, 0.060821533203125, 0.0283355712890625, 0.07476806640625, 0.01082611083984375, 0.021270751953125, 0.141845703125], "tokens": [2071, 415, 308, 86, 77, 100, 997, 1322, 863, 310, 19911, 27, 301]}
{"line_number": 154, "line_type": "generated", "code": "\n    public BigMatrixImpl(String[][] d) {\n        final int nRows = d.length;\n        if (nRows == 0) {\n            throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\"); \n        }\n        final int n", "entropy": 0.04754638671875, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.81201171875, 0.349365234375, 0.01044464111328125, 0.00039505958557128906, 0.0016679763793945312, 0.0115814208984375, 0.048583984375, 0.08673095703125, 0.00897216796875, 0.0218505859375, 0.045440673828125, 0.2310791015625, 0.3564453125, 0.0090484619140625, 0.006877899169921875, 0.001354217529296875, 0.002349853515625, 0.005664825439453125, 0.0008001327514648438, 0.00034332275390625, 0.00179290771484375, 0.0258636474609375, 0.01197052001953125, 0.0005035400390625, 0.0014820098876953125, 0.00011718273162841797, 0.0020542144775390625, 7.18832015991211e-05, 3.981590270996094e-05, 0.0008955001831054688, 0.002506256103515625, 0.0244293212890625, 0.0035495758056640625, 0.00018024444580078125, 0.007205963134765625, 0.2034912109375, 0.083984375, 0.00148773193359375, 0.00562286376953125, 0.0004878044128417969, 0.00013816356658935547, 0.0003409385681152344, 6.914138793945312e-05, 0.00015115737915039062, 0.0006661415100097656, 0.003673553466796875, 0.052154541015625, 0.00024700164794921875, 0.01342010498046875, 0.01100921630859375, 0.0007071495056152344, 0.0004589557647705078], "tokens": [284, 562, 7758, 4161, 3482, 26, 652, 11336, 343, 27, 301, 291, 1158, 629, 310, 7252, 280, 343, 32, 1322, 45, 291, 415, 308, 96, 7252, 610, 225, 34, 27, 301, 324, 1422, 537, 12137, 26, 324, 313, 4161, 2298, 1159, 821, 6225, 1591, 2698, 5368, 4456, 320, 291, 1158, 629, 310]}
{"line_number": 138, "line_type": "original", "code": "    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {", "entropy": 1.3115234375, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [4.00390625, 9.296875, 0.193603515625, 0.00495147705078125, 0.0210723876953125, 0.0175323486328125, 1.9423828125, 0.408447265625, 0.1331787109375, 3.025390625, 0.251220703125, 0.0751953125, 0.01416015625, 0.0205535888671875, 0.270751953125], "tokens": [264, 562, 7758, 4161, 3482, 26, 20827, 11336, 343, 30, 1905, 1933, 1261, 27, 301]}
{"line_number": 138, "line_type": "generated", "code": "\n                \"All input rows must have the same length.\");\n            }\n        }\n        data = new BigDecimal[nRows][nCols];\n        for (int row = 0; row < nRows; row++) {\n            final double[] dr = d[", "entropy": 0.10003662109375, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [1.0732421875, 0.09783935546875, 0.0234832763671875, 0.114990234375, 0.021148681640625, 0.0008845329284667969, 0.0008540153503417969, 0.0047760009765625, 0.0005631446838378906, 0.00396728515625, 0.123291015625, 0.246826171875, 0.005260467529296875, 0.037872314453125, 0.0007033348083496094, 0.6494140625, 0.09014892578125, 0.0028362274169921875, 0.0504150390625, 0.007114410400390625, 0.0005970001220703125, 0.0704345703125, 6.461143493652344e-05, 0.00054931640625, 0.0136871337890625, 0.00017333030700683594, 0.0003559589385986328, 0.06243896484375, 0.06304931640625, 0.035858154296875, 0.0002491474151611328, 0.046722412109375, 0.0089263916015625, 0.002742767333984375, 0.0010528564453125, 0.0030345916748046875, 0.0009012222290039062, 0.004058837890625, 0.038330078125, 6.866455078125e-05, 0.0024566650390625, 0.0223846435546875, 0.03143310546875, 0.002704620361328125, 0.0295257568359375, 0.7646484375, 0.1710205078125, 0.004131317138671875, 1.2509765625, 0.0016431808471679688, 0.013458251953125, 5.14984130859375e-05], "tokens": [400, 313, 1934, 1509, 5760, 2298, 1159, 322, 2432, 3104, 5368, 324, 320, 291, 320, 291, 706, 280, 537, 17280, 77, 96, 7252, 1674, 96, 19911, 970, 291, 436, 308, 410, 2698, 280, 225, 34, 45, 2698, 333, 310, 7252, 45, 2698, 1987, 301, 324, 1158, 2064, 1178, 9201, 280, 343, 77]}
{"line_number": 139, "line_type": "original", "code": "        if (copyArray) {", "entropy": 1.462890625, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [4.58984375, 4.33203125, 0.1500244140625, 0.9970703125, 0.054473876953125, 0.07647705078125, 0.04248046875], "tokens": [351, 415, 308, 2991, 1261, 27, 301]}
{"line_number": 139, "line_type": "generated", "code": "\n            }\n            data = new BigDecimal[nRows][nCols];\n            for (int row = 0; row < nRows; row++) {\n                final double[] dataRow = d[row];\n                final BigDecimal[] bigDataRow = data[row", "entropy": 0.205078125, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [0.474365234375, 0.763671875, 1.27734375, 0.321533203125, 0.2646484375, 0.035491943359375, 0.0302581787109375, 0.000858306884765625, 0.1072998046875, 0.0004093647003173828, 0.0015611648559570312, 0.01415252685546875, 0.0005726814270019531, 0.0011930465698242188, 0.09527587890625, 0.1187744140625, 0.03131103515625, 0.001186370849609375, 0.497802734375, 0.331787109375, 0.004611968994140625, 0.0029239654541015625, 0.00775146484375, 0.001953125, 0.0283203125, 0.2032470703125, 0.0006422996520996094, 0.0017299652099609375, 0.02435302734375, 0.020843505859375, 0.0030651092529296875, 0.037109375, 1.09375, 0.60400390625, 0.004154205322265625, 1.51171875, 0.006961822509765625, 0.010833740234375, 0.1002197265625, 0.0004813671112060547, 0.0010824203491210938, 0.0018644332885742188, 0.031707763671875, 0.96142578125, 0.069091796875, 0.0009441375732421875, 0.93994140625, 0.59130859375, 0.0022182464599609375, 0.0287933349609375, 0.000377655029296875, 0.0007205009460449219], "tokens": [324, 320, 324, 706, 280, 537, 17280, 77, 96, 7252, 1674, 96, 19911, 970, 324, 436, 308, 410, 2698, 280, 225, 34, 45, 2698, 333, 310, 7252, 45, 2698, 1987, 301, 400, 1158, 2064, 1178, 706, 2352, 280, 343, 77, 643, 970, 400, 1158, 17280, 1178, 6524, 34700, 280, 706, 77, 643]}
{"line_number": 142, "line_type": "original", "code": "            if (d == null) {", "entropy": 1.47265625, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [4.75, 4.40234375, 0.118896484375, 1.8828125, 0.5126953125, 0.006687164306640625, 0.0418701171875, 0.0640869140625], "tokens": [1468, 415, 308, 86, 610, 744, 27, 301]}
{"line_number": 142, "line_type": "generated", "code": "\n        data = new BigDecimal[nRows][nCols];\n        for (int row = 0; row < nRows; row++) {\n            for (int col = 0; col < nCols; col++) {\n                data[row][col", "entropy": 0.07220458984375, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [0.5263671875, 1.0361328125, 0.0277252197265625, 0.1676025390625, 0.0157318115234375, 0.001392364501953125, 0.212646484375, 0.0006232261657714844, 0.0012159347534179688, 0.0188751220703125, 0.0009870529174804688, 0.0010213851928710938, 0.135009765625, 0.06829833984375, 0.049530029296875, 0.001438140869140625, 0.26708984375, 0.0166778564453125, 0.005023956298828125, 0.0017786026000976562, 0.00409698486328125, 0.001613616943359375, 0.027587890625, 0.043060302734375, 0.0001882314682006836, 0.00244140625, 0.03143310546875, 0.0291595458984375, 0.007373809814453125, 0.037841796875, 0.81591796875, 0.0041046142578125, 0.0003807544708251953, 0.01178741455078125, 0.0019626617431640625, 0.0007171630859375, 5.173683166503906e-05, 0.0010766983032226562, 0.00104522705078125, 0.0008482933044433594, 0.00415802001953125, 0.0006303787231445312, 0.00102996826171875, 0.003902435302734375, 0.01480865478515625, 0.006702423095703125, 0.08868408203125, 0.055389404296875, 0.0007004737854003906, 0.00104522705078125, 0.0004968643188476562, 0.00012421607971191406], "tokens": [291, 706, 280, 537, 17280, 77, 96, 7252, 1674, 96, 19911, 970, 291, 436, 308, 410, 2698, 280, 225, 34, 45, 2698, 333, 310, 7252, 45, 2698, 1987, 301, 324, 436, 308, 410, 932, 280, 225, 34, 45, 932, 333, 310, 19911, 45, 932, 1987, 301, 400, 706, 77, 643, 1674, 748]}
{"line_number": 145, "line_type": "original", "code": "            final int nRows = d.length;", "entropy": 1.51953125, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [7.0078125, 6.265625, 0.57080078125, 0.348876953125, 0.128662109375, 0.06585693359375, 0.775390625, 0.0110015869140625, 0.0007276535034179688, 0.018280029296875], "tokens": [1468, 1158, 629, 310, 7252, 280, 343, 32, 1322, 45]}
{"line_number": 145, "line_type": "generated", "code": "\n    /**\n     * Create a new BigMatrix using the input array as the underlying\n     * data array.\n     * <p>If an array is built specially in order to be embedded in a\n     * BigMatrix and not used directly, the <code", "entropy": 0.09539794921875, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [0.52880859375, 0.1700439453125, 0.0875244140625, 0.0003769397735595703, 0.83984375, 0.01496124267578125, 0.03900146484375, 0.03228759765625, 0.005123138427734375, 0.1138916015625, 1.3583984375, 0.66455078125, 0.275146484375, 0.0066375732421875, 0.005401611328125, 0.0026416778564453125, 0.01953125, 6.35385513305664e-05, 0.004261016845703125, 0.0012845993041992188, 0.00914764404296875, 0.0122833251953125, 0.0004360675811767578, 0.051116943359375, 0.0006251335144042969, 0.0009407997131347656, 0.634765625, 0.024444580078125, 0.001461029052734375, 0.0009469985961914062, 0.0019626617431640625, 0.0007529258728027344, 4.76837158203125e-07, 0.00042557716369628906, 0.0001195669174194336, 0.00015437602996826172, 0.0002396106719970703, 0.003936767578125, 0.0096282958984375, 0.0029125213623046875, 0.0088958740234375, 5.1140785217285156e-05, 0.0029850006103515625, 0.0011510848999023438, 0.00357818603515625, 0.00019311904907226562, 8.213520050048828e-05, 2.1338462829589844e-05, 0.0004787445068359375, 0.0017480850219726562, 0.01629638671875, 0.00011754035949707031], "tokens": [284, 1022, 275, 319, 2648, 312, 537, 7758, 4161, 1471, 322, 1509, 1417, 619, 322, 13266, 275, 319, 706, 1417, 32, 275, 319, 333, 98, 48, 2797, 600, 1417, 438, 6895, 1374, 6321, 328, 2532, 372, 526, 17703, 328, 312, 275, 319, 7758, 4161, 461, 646, 1654, 7029, 30, 322, 333, 687]}
{"line_number": 146, "line_type": "original", "code": "            if (nRows == 0) {", "entropy": 1.4755859375, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [6.27734375, 3.080078125, 0.185546875, 2.693359375, 0.89208984375, 1.162109375, 0.0197601318359375, 0.014007568359375, 0.401123046875, 0.0304412841796875], "tokens": [1468, 415, 308, 96, 7252, 610, 225, 34, 27, 301]}
{"line_number": 146, "line_type": "generated", "code": "\n    /**\n     * Get the entries in row number <code>row</code> as a row matrix.\n     *\n     * @param row Row to be fetched.\n     * @return a row matrix.\n     * @throws OutOfRangeException if the", "entropy": 0.236328125, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [1.6923828125, 0.55810546875, 0.1707763671875, 0.0005865097045898438, 2.291015625, 0.54248046875, 0.6923828125, 0.92431640625, 0.072021484375, 0.03338623046875, 0.0201416015625, 0.0002429485321044922, 0.00038361549377441406, 0.016998291015625, 0.005283355712890625, 0.00021791458129882812, 0.0017938613891601562, 0.30517578125, 0.154052734375, 0.351318359375, 0.69189453125, 0.0243377685546875, 0.00696563720703125, 0.0007104873657226562, 0.60791015625, 5.996227264404297e-05, 0.006221771240234375, 0.003307342529296875, 0.038909912109375, 0.291259765625, 0.0051727294921875, 0.09722900390625, 0.06561279296875, 0.02740478515625, 0.006622314453125, 0.000331878662109375, 0.002216339111328125, 0.0027942657470703125, 0.76708984375, 0.20556640625, 0.0152435302734375, 0.18212890625, 0.007656097412109375, 0.10028076171875, 0.00959014892578125, 0.066650390625, 1.0341796875, 0.0004048347473144531, 0.058197021484375, 0.0004150867462158203, 0.01751708984375, 0.1151123046875], "tokens": [284, 1022, 275, 319, 1390, 322, 8036, 328, 2698, 1451, 333, 687, 48, 643, 377, 687, 48, 619, 312, 2698, 5045, 32, 275, 319, 275, 319, 477, 753, 2698, 5570, 372, 526, 27535, 32, 275, 319, 477, 601, 312, 2698, 5045, 32, 275, 319, 477, 5117, 4306, 1419, 3198, 984, 415, 322]}
{"line_number": 149, "line_type": "original", "code": "            final int nCols = d[0].length;", "entropy": 1.142578125, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [6.74609375, 3.13671875, 0.59033203125, 0.13427734375, 2.005859375, 0.024810791015625, 0.62890625, 0.0711669921875, 0.020782470703125, 0.004608154296875, 0.12176513671875, 0.22265625], "tokens": [1468, 1158, 629, 310, 19911, 280, 343, 77, 34, 997, 1322, 45]}
{"line_number": 149, "line_type": "generated", "code": "\n     * @param d data for new matrix\n     * @throws NumberFormatException if any of the strings does not represent\n     * a valid number\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows", "entropy": 0.19580078125, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [0.325439453125, 0.05511474609375, 0.57958984375, 0.08697509765625, 0.058074951171875, 0.153076171875, 0.01220703125, 0.005542755126953125, 0.0016679763793945312, 0.119384765625, 0.0018587112426757812, 0.00469207763671875, 0.2451171875, 1.3408203125, 0.08026123046875, 0.0204925537109375, 1.2314453125, 0.01324462890625, 0.004268646240234375, 1.08203125, 0.79541015625, 0.016998291015625, 0.59423828125, 0.466552734375, 0.0003554821014404297, 1.05859375, 0.1622314453125, 1.0224609375, 0.10040283203125, 0.0131683349609375, 0.0036983489990234375, 0.00634002685546875, 0.196044921875, 0.00354766845703125, 0.162353515625, 0.0003685951232910156, 6.222724914550781e-05, 0.004642486572265625, 0.0009102821350097656, 0.00027298927307128906, 0.000759124755859375, 0.04266357421875, 0.0253143310546875, 0.00719451904296875, 5.447864532470703e-05, 0.023712158203125, 0.00321197509765625, 0.037017822265625, 0.00525665283203125, 0.001316070556640625, 3.886222839355469e-05, 0.0006337165832519531], "tokens": [275, 319, 477, 753, 343, 706, 436, 537, 5045, 275, 319, 477, 5117, 5104, 25944, 415, 1346, 432, 322, 5852, 1957, 646, 4042, 275, 319, 312, 2080, 1451, 275, 319, 477, 5117, 12137, 415, 333, 687, 48, 86, 377, 687, 48, 438, 646, 7582, 5089, 275, 319, 225, 308, 1206, 1169, 5760]}
{"line_number": 150, "line_type": "original", "code": "            if (nCols == 0) {", "entropy": 0.97802734375, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [3.853515625, 1.9931640625, 0.55859375, 2.4609375, 0.73876953125, 0.09539794921875, 0.0023784637451171875, 0.0013561248779296875, 0.028717041015625, 0.045623779296875], "tokens": [1468, 415, 308, 96, 19911, 610, 225, 34, 27, 301]}
{"line_number": 150, "line_type": "generated", "code": "\n     * @throws NumberFormatException if one of the elements in <code>d</code>\n     * cannot be converted to a number\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have", "entropy": 0.2005615234375, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [1.330078125, 0.1383056640625, 0.03271484375, 0.1309814453125, 1.044921875, 0.0821533203125, 0.01885986328125, 1.3525390625, 0.027069091796875, 0.0025482177734375, 1.7900390625, 0.436767578125, 0.59814453125, 0.002716064453125, 0.00014662742614746094, 0.0273895263671875, 0.01357269287109375, 0.0008249282836914062, 0.00177764892578125, 0.09033203125, 0.0014562606811523438, 0.66748046875, 0.00032639503479003906, 0.169677734375, 0.08837890625, 0.0121002197265625, 1.5400390625, 0.08599853515625, 0.11505126953125, 0.003818511962890625, 0.01210784912109375, 0.288818359375, 0.005859375, 0.1260986328125, 0.0002601146697998047, 9.167194366455078e-05, 0.0034618377685546875, 0.0009126663208007812, 4.410743713378906e-06, 0.0007276535034179688, 0.046661376953125, 0.048858642578125, 0.0112457275390625, 4.076957702636719e-05, 0.0277252197265625, 0.00543975830078125, 0.035369873046875, 0.00897979736328125, 0.0013551712036132812, 4.2557716369628906e-05, 0.0005941390991210938, 0.00189971923828125], "tokens": [275, 319, 477, 5117, 5104, 25944, 415, 1591, 432, 322, 4702, 328, 333, 687, 48, 86, 377, 687, 48, 275, 319, 4881, 526, 12785, 372, 312, 1451, 275, 319, 477, 5117, 12137, 415, 333, 687, 48, 86, 377, 687, 48, 438, 646, 7582, 5089, 275, 319, 225, 308, 1206, 1169, 5760, 1159]}
{"line_number": 153, "line_type": "original", "code": "            for (int r = 1; r < nRows; r++) {", "entropy": 0.62939453125, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [2.98046875, 2.861328125, 0.0184173583984375, 0.07794189453125, 1.5205078125, 0.0312347412109375, 0.01129150390625, 2.59375, 0.00801849365234375, 0.052978515625, 0.1302490234375, 0.1668701171875, 0.004215240478515625, 0.0037174224853515625, 0.11065673828125, 0.021240234375, 0.1123046875], "tokens": [1468, 436, 308, 410, 540, 280, 225, 35, 45, 540, 333, 310, 7252, 45, 540, 1987, 301]}
{"line_number": 153, "line_type": "generated", "code": "\n     */\n    public BigMatrixImpl(String[][] d) {\n        final int nRows = d.length;\n        if (nRows == 0) {\n            throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\"); \n        }\n        final", "entropy": 0.040496826171875, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [0.546875, 0.38330078125, 0.07586669921875, 0.03131103515625, 0.0014362335205078125, 4.8995018005371094e-05, 0.0004703998565673828, 0.074462890625, 0.017425537109375, 0.09222412109375, 0.0034999847412109375, 0.020843505859375, 0.048858642578125, 0.09393310546875, 0.291748046875, 0.007598876953125, 0.00647735595703125, 0.0010776519775390625, 0.004611968994140625, 0.0009198188781738281, 0.0003771781921386719, 0.0001443624496459961, 0.002414703369140625, 0.0186309814453125, 0.005615234375, 0.00039386749267578125, 0.0009374618530273438, 4.8995018005371094e-05, 0.0013380050659179688, 6.92605972290039e-05, 3.24249267578125e-05, 0.0006995201110839844, 0.00150299072265625, 0.01049041748046875, 0.0014276504516601562, 0.00011229515075683594, 0.0024394989013671875, 0.2294921875, 0.0555419921875, 0.00048732757568359375, 0.005252838134765625, 0.0004277229309082031, 0.00010824203491210938, 0.00038695335388183594, 4.8995018005371094e-05, 0.00011551380157470703, 0.0005202293395996094, 0.0025882720947265625, 0.03424072265625, 0.00011467933654785156, 0.0165252685546875, 0.00933074951171875], "tokens": [275, 569, 284, 562, 7758, 4161, 3482, 26, 652, 11336, 343, 27, 301, 291, 1158, 629, 310, 7252, 280, 343, 32, 1322, 45, 291, 415, 308, 96, 7252, 610, 225, 34, 27, 301, 324, 1422, 537, 12137, 26, 324, 313, 4161, 2298, 1159, 821, 6225, 1591, 2698, 5368, 4456, 320, 291, 1158]}
{"line_number": 158, "line_type": "original", "code": "            data = d;", "entropy": 4.64453125, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [3.5859375, 10.4296875, 4.3828125, 4.4921875, 0.328125], "tokens": [1468, 706, 280, 343, 45]}
{"line_number": 158, "line_type": "generated", "code": "\n            \"Matrix must have at least one row.\"); \n        }\n        final int nCols = d[0].length;\n        if (nCols == 0) {\n            throw new IllegalArgumentException(", "entropy": 0.068359375, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [2.013671875, 0.323486328125, 0.062286376953125, 0.0034580230712890625, 0.0013103485107421875, 0.0012311935424804688, 0.00031447410583496094, 0.0004799365997314453, 0.0248565673828125, 0.0447998046875, 0.081787109375, 0.0018548965454101562, 0.0174407958984375, 0.0123138427734375, 0.0013933181762695312, 0.0004982948303222656, 9.78708267211914e-05, 0.0002880096435546875, 0.0006175041198730469, 0.00017273426055908203, 0.00017070770263671875, 6.949901580810547e-05, 7.832050323486328e-05, 0.0007348060607910156, 0.006458282470703125, 0.004543304443359375, 0.0003066062927246094, 0.00037789344787597656, 3.230571746826172e-05, 0.00029468536376953125, 5.841255187988281e-05, 6.628036499023438e-05, 0.0003349781036376953, 0.0019254684448242188, 0.032012939453125, 0.0015430450439453125, 0.00024306774139404297, 0.0032939910888671875, 0.02191162109375], "tokens": [324, 313, 4161, 2298, 1159, 821, 6225, 1591, 2698, 5368, 4456, 320, 291, 1158, 629, 310, 19911, 280, 343, 77, 34, 997, 1322, 45, 291, 415, 308, 96, 19911, 610, 225, 34, 27, 301, 324, 1422, 537, 12137, 26]}
{"line_number": 160, "line_type": "original", "code": "        lu = null;", "entropy": 1.8154296875, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [2.056640625, 6.94921875, 0.004291534423828125, 0.05914306640625, 0.0084686279296875], "tokens": [351, 21381, 280, 744, 45]}
{"line_number": 160, "line_type": "generated", "code": "\n        for (int row = 1; row < nRows; row++) {\n            if (d[row].length!= nCols) {\n                throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");\n            }\n        }\n        this", "entropy": 0.0638427734375, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [0.755859375, 0.94970703125, 0.007659912109375, 0.00933837890625, 0.31689453125, 0.006244659423828125, 0.0011987686157226562, 0.301025390625, 0.000324249267578125, 0.0005755424499511719, 0.0018301010131835938, 0.0016326904296875, 0.0003104209899902344, 0.00041174888610839844, 0.007720947265625, 0.0020122528076171875, 0.004917144775390625, 0.0262603759765625, 0.07958984375, 0.0105438232421875, 0.0021152496337890625, 0.0006504058837890625, 0.0006008148193359375, 0.0022068023681640625, 0.00010955333709716797, 0.0017518997192382812, 0.019012451171875, 0.0015954971313476562, 0.0035686492919921875, 0.00921630859375, 0.00775909423828125, 0.002407073974609375, 0.00010347366333007812, 0.0034694671630859375, 0.007843017578125, 0.01000213623046875, 0.0004093647003173828, 0.001781463623046875, 0.0015163421630859375, 0.0008292198181152344, 0.00031566619873046875, 0.0001493692398071289, 0.0009179115295410156, 6.258487701416016e-05, 0.001483917236328125, 0.00390625, 0.010101318359375, 0.0008368492126464844, 0.08941650390625, 0.0008511543273925781, 0.355712890625, 0.29345703125], "tokens": [291, 436, 308, 410, 2698, 280, 225, 35, 45, 2698, 333, 310, 7252, 45, 2698, 1987, 301, 324, 415, 308, 86, 77, 643, 997, 1322, 863, 310, 19911, 27, 301, 400, 1422, 537, 12137, 26, 400, 313, 1934, 1509, 5760, 2298, 1159, 322, 2432, 3104, 5368, 324, 320, 291, 320, 291, 458]}
{"line_number": 161, "line_type": "original", "code": "    }", "entropy": 2.33984375, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [3.609375, 1.072265625], "tokens": [264, 320]}
{"line_number": 161, "line_type": "generated", "code": "\n        this.copyIn(d);\n        lu = null;\n    }\n\n    /**\n     * Create a new BigMatrix using the values represented by the strings in \n     * <code>d</code> as the underlying data array.\n     *\n     * @", "entropy": 0.1485595703125, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [0.61669921875, 1.9794921875, 0.0008635520935058594, 0.1097412109375, 0.0026397705078125, 0.00988006591796875, 0.0241851806640625, 0.046417236328125, 0.131591796875, 0.0382080078125, 0.0009579658508300781, 0.0007877349853515625, 0.0012578964233398438, 0.1817626953125, 0.003803253173828125, 0.994140625, 0.09027099609375, 0.055938720703125, 0.00024962425231933594, 0.63037109375, 0.01422119140625, 0.025909423828125, 0.039764404296875, 0.0023860931396484375, 0.2274169921875, 0.57470703125, 0.2098388671875, 0.059234619140625, 0.018096923828125, 0.0192413330078125, 0.499755859375, 0.0487060546875, 0.349609375, 0.00011777877807617188, 0.035186767578125, 0.0003643035888671875, 0.0011615753173828125, 0.09814453125, 0.006198883056640625, 3.707408905029297e-05, 0.056854248046875, 0.0156402587890625, 0.0009937286376953125, 0.0006461143493652344, 0.0011529922485351562, 0.0021114349365234375, 0.055328369140625, 0.05706787109375, 0.0001456737518310547, 0.37255859375, 0.00020623207092285156, 0.01242828369140625], "tokens": [291, 458, 32, 2991, 383, 26, 86, 293, 291, 21381, 280, 744, 45, 284, 320, 446, 1022, 275, 319, 2648, 312, 537, 7758, 4161, 1471, 322, 2078, 17718, 810, 322, 5852, 328, 5384, 319, 333, 687, 48, 86, 377, 687, 48, 619, 322, 13266, 706, 1417, 32, 275, 319, 275, 319, 477]}
