{"line_number": 138, "line_type": "original", "code": "        return solve(f, min, yMin, max, yMax, initial, yInitial);", "entropy": 0.9384765625, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [3.8125, 7.5625, 2.73046875, 0.0263214111328125, 0.0067596435546875, 0.0021495819091796875, 0.065673828125, 0.002532958984375, 0.66943359375, 0.0018901824951171875, 0.004177093505859375, 0.0214996337890625, 0.00232696533203125, 0.0020313262939453125, 0.0007605552673339844, 1.310546875, 3.263671875, 0.07806396484375, 0.09527587890625, 0.0303192138671875, 0.01094818115234375], "tokens": [351, 442, 10932, 26, 88, 30, 1847, 30, 533, 2928, 30, 1769, 30, 533, 2708, 30, 2815, 30, 533, 4678, 293]}
{"line_number": 138, "line_type": "generated", "code": "\n        } else {\n            // the interval spans a zero\n            setResult(0, 0);\n            ret = 0;\n        }\n\n        return ret;\n    }\n\n    /**\n     * Find a zero in the given interval, start with the midpoint.", "entropy": 0.395751953125, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.2034912109375, 0.005413055419921875, 0.41162109375, 0.1636962890625, 0.12841796875, 0.1962890625, 2.83203125, 1.94921875, 1.3408203125, 0.87353515625, 0.427490234375, 0.8466796875, 0.329345703125, 0.0013551712036132812, 0.1778564453125, 0.473876953125, 0.4912109375, 0.041839599609375, 0.0002677440643310547, 0.0025157928466796875, 0.0128173828125, 0.0194854736328125, 0.0009918212890625, 0.01175689697265625, 4.374980926513672e-05, 0.1806640625, 0.00962066650390625, 0.00040912628173828125, 0.175048828125, 0.1409912109375, 0.11248779296875, 0.0017375946044921875, 0.389404296875, 0.0016012191772460938, 0.666015625, 0.06591796875, 0.05657958984375, 5.066394805908203e-05, 1.072265625, 0.07806396484375, 0.02447509765625, 0.87744140625, 0.043853759765625, 0.07342529296875, 0.033905029296875, 0.1279296875, 0.1177978515625, 1.2822265625, 0.96728515625, 2.380859375, 0.25341796875, 0.5078125], "tokens": [291, 320, 813, 301, 324, 434, 322, 7898, 34157, 312, 5934, 324, 739, 1394, 26, 34, 30, 225, 34, 293, 324, 2152, 280, 225, 34, 45, 291, 320, 584, 442, 2152, 45, 284, 320, 446, 1022, 275, 319, 7477, 312, 5934, 328, 322, 2702, 7898, 30, 1477, 623, 322, 11906, 1493, 32]}
{"line_number": 102, "line_type": "original", "code": "        clearResult();", "entropy": 3.982421875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [2.6796875, 12.9296875, 0.3076171875, 0.00942230224609375], "tokens": [351, 4233, 1394, 473]}
{"line_number": 102, "line_type": "generated", "code": "\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if min", "entropy": 0.117919921875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.26171875, 0.03704833984375, 0.014434814453125, 0.124755859375, 0.1302490234375, 0.06256103515625, 0.005523681640625, 0.0106201171875, 0.004547119140625, 0.0007529258728027344, 0.0012302398681640625, 0.22509765625, 0.01085662841796875, 0.003326416015625, 0.021270751953125, 0.051239013671875, 4.5299530029296875e-05, 8.177757263183594e-05, 4.2438507080078125e-05, 1.1171875, 0.03955078125, 0.0306396484375, 0.200927734375, 0.0872802734375, 0.47314453125, 4.887580871582031e-05, 0.041015625, 0.0005474090576171875, 0.1793212890625, 0.00814056396484375, 0.00038886070251464844, 0.0019168853759765625, 0.006076812744140625, 0.00012040138244628906, 0.0002834796905517578, 0.011199951171875, 0.07879638671875, 0.0014047622680664062, 0.003185272216796875, 0.056732177734375, 0.1221923828125, 0.0006303787231445312, 0.6728515625, 0.0005393028259277344, 0.0012969970703125, 0.037811279296875, 0.30126953125, 0.0015974044799804688, 0.02288818359375, 0.028717041015625, 0.01511383056640625, 1.6240234375], "tokens": [275, 319, 477, 601, 322, 786, 2154, 322, 667, 438, 5934, 275, 319, 477, 5117, 7462, 31219, 28741, 984, 415, 322, 7091, 13330, 2385, 275, 319, 438, 31793, 275, 319, 477, 5117, 4540, 19637, 984, 415, 600, 1048, 12984, 38680, 275, 319, 225, 322, 667, 275, 319, 477, 5117, 12137, 415, 1847]}
{"line_number": 103, "line_type": "original", "code": "        verifySequence(min, initial, max);", "entropy": 2.375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [3.041015625, 9.7734375, 4.4296875, 0.08056640625, 1.5546875, 0.0078582763671875, 4.4296875, 0.016448974609375, 0.0946044921875, 0.321533203125], "tokens": [351, 6144, 5897, 26, 887, 30, 2815, 30, 1769, 293]}
{"line_number": 103, "line_type": "generated", "code": "\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if the function values at the\n     * endpoints have the same sign\n    ", "entropy": 0.140625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.5322265625, 0.1475830078125, 0.007198333740234375, 0.03363037109375, 0.062103271484375, 4.494190216064453e-05, 8.52346420288086e-05, 6.16312026977539e-05, 0.662109375, 0.0015735626220703125, 0.01055145263671875, 0.01305389404296875, 0.262939453125, 0.0003833770751953125, 0.03472900390625, 0.00023436546325683594, 0.044769287109375, 0.00853729248046875, 0.0003287792205810547, 0.0012664794921875, 0.0035839080810546875, 6.830692291259766e-05, 0.00015223026275634766, 0.0102691650390625, 0.0299530029296875, 0.00028967857360839844, 0.0019702911376953125, 0.01910400390625, 0.036376953125, 5.984306335449219e-05, 0.28662109375, 0.0003142356872558594, 0.0006704330444335938, 0.049163818359375, 0.31787109375, 0.0017938613891601562, 0.0216522216796875, 0.031524658203125, 0.00992584228515625, 0.5693359375, 1.0537109375, 1.0087890625, 0.08001708984375, 0.0892333984375, 0.39404296875, 2.6941299438476562e-05, 0.18359375, 0.79248046875, 0.0889892578125, 0.0008063316345214844, 0.09619140625, 0.310546875], "tokens": [275, 319, 477, 5117, 7462, 31219, 28741, 984, 322, 7091, 13330, 2385, 275, 319, 438, 31793, 275, 319, 477, 5117, 4540, 19637, 984, 415, 600, 1048, 12984, 38680, 275, 319, 225, 322, 667, 275, 319, 477, 5117, 12137, 415, 322, 667, 2078, 821, 322, 275, 319, 17532, 1159, 322, 2432, 2596, 275]}
{"line_number": 106, "line_type": "original", "code": "        double yInitial = f.value(initial);", "entropy": 1.2119140625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [3.494140625, 4.32421875, 1.38671875, 3.845703125, 0.036224365234375, 0.1483154296875, 0.00835418701171875, 0.00665283203125, 0.003421783447265625, 0.0665283203125, 0.0128326416015625], "tokens": [351, 2064, 533, 4678, 280, 296, 32, 853, 26, 4332, 293]}
{"line_number": 106, "line_type": "generated", "code": "\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifyBracket(min, max);\n\n        // return the first endpoint", "entropy": 0.140380859375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.416748046875, 0.3779296875, 0.036376953125, 0.12066650390625, 0.006488800048828125, 0.0008907318115234375, 0.0008382797241210938, 0.1990966796875, 0.0036449432373046875, 7.152557373046875e-07, 4.553794860839844e-05, 4.100799560546875e-05, 0.0005826950073242188, 0.00025177001953125, 0.5302734375, 0.03485107421875, 0.0002651214599609375, 0.0007948875427246094, 4.780292510986328e-05, 0.0110321044921875, 9.09566879272461e-05, 0.00022423267364501953, 0.0009102821350097656, 0.035247802734375, 0.0001227855682373047, 0.0081787109375, 3.933906555175781e-06, 5.9604644775390625e-06, 5.4836273193359375e-06, 0.0013132095336914062, 0.0187835693359375, 7.355213165283203e-05, 4.649162292480469e-06, 0.0182342529296875, 0.24755859375, 0.61083984375, 0.00027108192443847656, 0.00018203258514404297, 0.1937255859375, 0.099609375, 1.2080078125, 0.451904296875, 0.3515625, 0.0009984970092773438, 0.033905029296875, 0.2017822265625, 0.300048828125, 0.431396484375, 0.888671875, 0.07574462890625, 0.361572265625, 0.01444244384765625], "tokens": [275, 569, 284, 562, 2064, 10932, 26, 3220, 1683, 27623, 6877, 2447, 296, 30, 715, 1158, 2064, 1847, 30, 1158, 2064, 1769, 27, 291, 2571, 7462, 31219, 28741, 984, 30, 4540, 19637, 984, 301, 584, 4233, 1394, 473, 291, 6144, 24086, 26, 887, 30, 1769, 293, 584, 434, 442, 322, 1932, 6998]}
{"line_number": 107, "line_type": "original", "code": "        if (Math.abs(yInitial) <= functionValueAccuracy) {", "entropy": 1.126953125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [2.689453125, 6.453125, 2.830078125, 1.7236328125, 0.0022106170654296875, 0.86962890625, 0.004581451416015625, 0.5771484375, 2.3671875, 0.01837158203125, 0.1392822265625, 0.0892333984375, 0.0174407958984375, 0.0010595321655273438, 0.08416748046875, 0.16162109375], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 107, 4678, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 107, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [], "tokens": []}
{"line_number": 113, "line_type": "original", "code": "        double yMin = f.value(min);", "entropy": 0.86376953125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.796875, 3.193359375, 1.0009765625, 0.348388671875, 0.04974365234375, 0.0950927734375, 0.00446319580078125, 0.0016527175903320312, 0.00025653839111328125, 0.00485992431640625, 0.0037403106689453125], "tokens": [351, 2064, 533, 2928, 280, 296, 32, 853, 26, 887, 293]}
{"line_number": 113, "line_type": "generated", "code": "\n        if (min >= max) {\n            throw new IllegalArgumentException(LocalizedFormats.MIN_NOT_LESS_THAN_MAX, min, max);\n        }\n\n        double yMin = f.value(min);\n        if (yMin == 0)", "entropy": 0.26025390625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.2034912109375, 2.029296875, 0.06585693359375, 0.96875, 0.435791015625, 0.0033321380615234375, 0.03369140625, 0.01076507568359375, 0.025390625, 0.0309600830078125, 0.318359375, 0.36767578125, 0.71533203125, 0.28125, 0.0059661865234375, 0.006031036376953125, 0.935546875, 0.525390625, 0.382568359375, 1.4781951904296875e-05, 0.263671875, 9.882450103759766e-05, 0.0003230571746826172, 3.4570693969726562e-06, 0.0007028579711914062, 0.122802734375, 1.3994140625, 0.001499176025390625, 0.00988006591796875, 0.007129669189453125, 0.0234527587890625, 0.0006971359252929688, 0.392333984375, 1.0791015625, 0.499755859375, 0.0860595703125, 0.032012939453125, 0.03460693359375, 0.0006136894226074219, 0.0004611015319824219, 4.0650367736816406e-05, 0.0009293556213378906, 0.001796722412109375, 0.0355224609375, 0.82080078125, 0.0085906982421875, 0.91455078125, 0.00540924072265625, 0.1446533203125, 0.0023975372314453125, 2.9325485229492188e-05, 0.30029296875], "tokens": [291, 415, 308, 887, 2377, 1769, 27, 301, 324, 1422, 537, 12137, 26, 24225, 19298, 32, 4683, 81, 3908, 81, 20374, 81, 41138, 81, 3459, 30, 1847, 30, 1769, 293, 291, 320, 584, 2064, 533, 2928, 280, 296, 32, 853, 26, 887, 293, 291, 415, 308, 107, 2928, 610, 225, 34, 27]}
{"line_number": 114, "line_type": "original", "code": "        if (Math.abs(yMin) <= functionValueAccuracy) {", "entropy": 0.8251953125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.11328125, 2.41796875, 0.0955810546875, 2.56640625, 0.00875091552734375, 1.4375, 0.0029697418212890625, 1.6005859375, 0.517578125, 0.042510986328125, 0.168212890625, 0.06903076171875, 0.007720947265625, 0.0005178451538085938, 0.10186767578125, 0.05340576171875], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 114, "line_type": "generated", "code": "\n\n        // check that the initial interval brackets a sign change\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        if (yMin * yMax > 0) {\n            throw new IllegalArgumentException(\"endpoints", "entropy": 0.37353515625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [2.21875, 0.66552734375, 2.291015625, 1.2216796875, 0.845703125, 2.9296875, 0.8984375, 0.740234375, 0.16845703125, 0.64111328125, 0.016510009765625, 0.1700439453125, 0.78369140625, 0.49072265625, 0.1712646484375, 0.020111083984375, 0.0157623291015625, 0.0011415481567382812, 0.000690460205078125, 8.785724639892578e-05, 0.01012420654296875, 0.0011157989501953125, 0.06671142578125, 0.403564453125, 0.0023345947265625, 0.0011320114135742188, 0.0004360675811767578, 0.00079345703125, 1.3113021850585938e-05, 8.940696716308594e-06, 3.123283386230469e-05, 0.0008220672607421875, 5.638599395751953e-05, 0.21337890625, 0.0911865234375, 0.08203125, 0.2222900390625, 0.10693359375, 0.1409912109375, 0.000484466552734375, 0.00024199485778808594, 0.446533203125, 0.001651763916015625, 0.0003685951232910156, 0.05133056640625, 0.0034942626953125, 0.040191650390625, 0.06982421875, 0.126953125, 0.66650390625, 0.7587890625, 1.6162109375], "tokens": [584, 434, 1505, 688, 322, 2815, 7898, 30544, 312, 2596, 1539, 291, 2064, 533, 2928, 280, 296, 32, 853, 26, 887, 293, 291, 2064, 533, 2708, 280, 296, 32, 853, 26, 1449, 293, 291, 415, 308, 107, 2928, 319, 533, 2708, 848, 225, 34, 27, 301, 324, 1422, 537, 12137, 440, 20459]}
{"line_number": 120, "line_type": "original", "code": "        if (yInitial * yMin < 0) {", "entropy": 1.1220703125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.36328125, 1.05859375, 0.043121337890625, 1.1455078125, 6.0546875, 0.32275390625, 0.01084136962890625, 0.86279296875, 0.5498046875, 0.001800537109375, 0.00046324729919433594, 0.07489013671875, 0.0977783203125], "tokens": [351, 415, 308, 107, 4678, 319, 533, 2928, 333, 225, 34, 27, 301]}
{"line_number": 120, "line_type": "generated", "code": "\n            // return the first endpoint if it is good enough\n            if (Math.abs(yMin) <= functionValueAccuracy) {\n                setResult(yMin, 0);\n                return result;\n            }\n\n            // reduce interval if min and initial bracket", "entropy": 0.18603515625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.89404296875, 2.27734375, 2.548828125, 0.225341796875, 0.62109375, 0.0211944580078125, 0.0374755859375, 0.005733489990234375, 0.004055023193359375, 0.0165863037109375, 0.0009388923645019531, 0.129150390625, 0.046142578125, 0.0025463104248046875, 0.0267791748046875, 0.0002987384796142578, 0.0001500844955444336, 9.238719940185547e-05, 0.0021839141845703125, 0.0019588470458984375, 0.0007815361022949219, 0.02117919921875, 0.01396942138671875, 0.0014324188232421875, 8.857250213623047e-05, 0.006320953369140625, 0.006683349609375, 0.022552490234375, 0.1434326171875, 0.0002932548522949219, 0.0008625984191894531, 0.052642822265625, 0.0009512901306152344, 0.0045318603515625, 0.00958251953125, 0.0008368492126464844, 0.0037746429443359375, 0.03155517578125, 0.04010009765625, 0.03997802734375, 0.00274658203125, 0.0307464599609375, 0.0009489059448242188, 0.268798828125, 0.2215576171875, 1.24609375, 0.0240020751953125, 0.043914794921875, 0.106689453125, 0.324951171875, 0.1334228515625, 0.003971099853515625], "tokens": [324, 434, 442, 322, 1932, 6998, 415, 561, 438, 4644, 8448, 324, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301, 400, 739, 1394, 26, 107, 2928, 30, 225, 34, 293, 400, 442, 1056, 45, 324, 320, 1064, 434, 11665, 7898, 415, 1847, 461, 2815, 33828]}
{"line_number": 125, "line_type": "original", "code": "        double yMax = f.value(max);", "entropy": 1.8291015625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.71875, 6.98046875, 2.541015625, 3.365234375, 1.3798828125, 0.8330078125, 0.01009368896484375, 0.006153106689453125, 0.004581451416015625, 0.263427734375, 0.0284271240234375], "tokens": [351, 2064, 533, 2708, 280, 296, 32, 853, 26, 1449, 293]}
{"line_number": 125, "line_type": "generated", "code": "\n            throw new NoBracketingException(min, max, yMin, yMax);\n        }\n\n        // check for zero before attempting to solve\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(yMin,", "entropy": 0.2626953125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.23486328125, 0.1651611328125, 0.087890625, 0.8232421875, 0.00171661376953125, 0.01229095458984375, 8.690357208251953e-05, 0.1142578125, 0.41015625, 0.0034656524658203125, 1.1435546875, 0.025299072265625, 0.18017578125, 0.015960693359375, 0.01160430908203125, 0.015716552734375, 0.001007080078125, 0.3779296875, 0.10101318359375, 0.00066375732421875, 0.2362060546875, 0.477294921875, 2.423828125, 0.6337890625, 1.2197265625, 0.95361328125, 0.927734375, 0.435546875, 0.8603515625, 0.363037109375, 0.1727294921875, 0.0276336669921875, 0.153564453125, 0.0009512901306152344, 0.0111846923828125, 0.0004944801330566406, 0.10333251953125, 0.097412109375, 0.006389617919921875, 0.059478759765625, 0.018890380859375, 0.0007376670837402344, 0.0003008842468261719, 0.0987548828125, 0.0020923614501953125, 0.033966064453125, 0.48291015625, 0.0006375312805175781, 0.0013456344604492188, 0.11627197265625, 0.0061492919921875, 0.00485992431640625], "tokens": [324, 1422, 537, 3139, 24086, 299, 984, 26, 887, 30, 1769, 30, 533, 2928, 30, 533, 2708, 293, 291, 320, 584, 434, 1505, 436, 5934, 2670, 25754, 372, 10932, 291, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301, 324, 739, 1394, 26, 107, 2928, 30]}
{"line_number": 126, "line_type": "original", "code": "        if (Math.abs(yMax) <= functionValueAccuracy) {", "entropy": 0.7626953125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [5.31640625, 2.630859375, 0.136962890625, 0.1964111328125, 0.002902984619140625, 0.02264404296875, 0.0028705596923828125, 0.09979248046875, 2.875, 0.01348114013671875, 0.09979248046875, 0.07720947265625, 0.004848480224609375, 0.0010080337524414062, 0.62841796875, 0.09295654296875], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 107, 2708, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 126, "line_type": "generated", "code": "\n                setResult(yMin, min);\n                ret = min;\n            } else {\n                setResult(yMax, max);\n                ret = max;\n            }\n        } else {\n            // reduce interval if min and initial bracket the root\n            if (", "entropy": 0.3271484375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.96728515625, 1.3642578125, 0.0280609130859375, 0.0182647705078125, 0.95556640625, 0.67041015625, 0.12054443359375, 1.748046875, 0.0927734375, 0.2342529296875, 1.603515625, 0.007053375244140625, 0.72412109375, 0.0010461807250976562, 0.31982421875, 0.03753662109375, 0.386962890625, 0.53271484375, 0.1678466796875, 0.603515625, 0.0017137527465820312, 0.0008907318115234375, 0.005710601806640625, 0.007480621337890625, 0.00032210350036621094, 0.00485992431640625, 0.00021755695343017578, 0.01195526123046875, 0.0034427642822265625, 0.0006804466247558594, 0.0018472671508789062, 0.0009889602661132812, 0.0833740234375, 0.0018129348754882812, 0.348876953125, 0.0062713623046875, 0.11431884765625, 0.2388916015625, 0.1717529296875, 0.58935546875, 3.5859375, 0.13427734375, 0.312255859375, 0.275146484375, 0.0343017578125, 0.2529296875, 0.023834228515625, 0.0111846923828125, 0.0014495849609375, 0.1494140625, 0.05328369140625, 0.011016845703125], "tokens": [400, 739, 1394, 26, 107, 2928, 30, 1847, 293, 400, 2152, 280, 1847, 45, 324, 320, 813, 301, 400, 739, 1394, 26, 107, 2708, 30, 1769, 293, 400, 2152, 280, 1769, 45, 324, 320, 291, 320, 813, 301, 324, 434, 11665, 7898, 415, 1847, 461, 2815, 33828, 322, 3051, 324, 415, 308]}
{"line_number": 132, "line_type": "original", "code": "        if (yInitial * yMax < 0) {", "entropy": 1.328125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.171875, 4.26953125, 0.064697265625, 3.533203125, 1.9462890625, 0.1650390625, 0.02117919921875, 2.87890625, 0.095458984375, 0.0021839141845703125, 0.0005517005920410156, 0.08984375, 0.02606201171875], "tokens": [351, 415, 308, 107, 4678, 319, 533, 2708, 333, 225, 34, 27, 301]}
{"line_number": 132, "line_type": "generated", "code": "\n            } else {\n                // otherwise use Brent's method\n                ret = solve(f, min, max, min);\n            }\n        }\n\n        return ret;\n    }\n\n    /**\n     * Find a zero starting from the two initial points.\n     * <", "entropy": 0.39697265625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.387939453125, 0.186767578125, 0.21142578125, 0.246337890625, 0.1351318359375, 0.806640625, 2.751953125, 2.3203125, 0.263427734375, 0.0004372596740722656, 0.470947265625, 0.50830078125, 0.4248046875, 0.10919189453125, 0.000980377197265625, 0.03131103515625, 0.00745391845703125, 0.0015125274658203125, 0.00051116943359375, 0.004749298095703125, 0.0001480579376220703, 0.93408203125, 0.2076416015625, 0.365478515625, 0.2734375, 0.1767578125, 0.001316070556640625, 0.176513671875, 0.002803802490234375, 1.3876953125, 0.5546875, 0.03094482421875, 0.001392364501953125, 0.8203125, 0.001850128173828125, 0.53271484375, 0.0770263671875, 0.04180908203125, 3.170967102050781e-05, 1.15234375, 0.0887451171875, 0.0217437744140625, 1.7197265625, 0.1715087890625, 0.473876953125, 1.2861328125, 0.440185546875, 0.2191162109375, 0.252197265625, 0.1434326171875, 0.00139617919921875, 0.218505859375], "tokens": [324, 320, 813, 301, 400, 434, 5878, 793, 551, 16502, 1182, 1411, 400, 2152, 280, 10932, 26, 88, 30, 1847, 30, 1769, 30, 1847, 293, 324, 320, 291, 320, 584, 442, 2152, 45, 284, 320, 446, 1022, 275, 319, 7477, 312, 5934, 8049, 645, 322, 3134, 2815, 4981, 32, 275, 319, 333]}
{"line_number": 184, "line_type": "original", "code": "                throw MathRuntimeException.createIllegalArgumentException(", "entropy": 1.9521484375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [4.4296875, 8.0, 1.7509765625, 0.546875, 0.01300811767578125, 0.01187896728515625, 0.806640625, 0.058502197265625], "tokens": [2071, 1422, 4175, 19304, 32, 1297, 25907, 26]}
{"line_number": 184, "line_type": "generated", "code": "\n                x2 = x0 + (x1 - x0) * 0.6666666666666666;", "entropy": 0.2415771484375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.10186767578125, 0.8466796875, 0.0084075927734375, 0.0227508544921875, 0.1859130859375, 0.1304931640625, 0.55126953125, 1.123046875, 0.3662109375, 0.38671875, 0.022430419921875, 0.0017175674438476562, 0.006130218505859375, 0.03411865234375, 0.1439208984375, 1.240234375, 0.0927734375, 0.0011653900146484375, 1.0771484375, 0.156005859375, 0.486083984375, 0.0305328369140625, 0.042510986328125, 0.0250244140625, 0.040069580078125, 0.04193115234375, 0.155517578125, 0.08599853515625, 0.134033203125, 0.05694580078125, 0.004802703857421875, 0.0107879638671875, 0.07452392578125, 0.033966064453125, 0.728515625], "tokens": [400, 816, 36, 280, 816, 34, 474, 308, 106, 35, 429, 816, 34, 27, 319, 225, 34, 32, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 45]}
{"line_number": 176, "line_type": "original", "code": "            if (Math.abs(yMin) <= functionValueAccuracy) {", "entropy": 1.3896484375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [5.91796875, 1.4384765625, 0.0777587890625, 0.282958984375, 0.002307891845703125, 0.0107879638671875, 0.0009379386901855469, 1.833984375, 12.0078125, 0.12274169921875, 0.07354736328125, 0.045135498046875, 0.00086212158203125, 0.0001709461212158203, 0.357666015625, 0.0587158203125], "tokens": [1468, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 176, "line_type": "generated", "code": "\n        if (Math.abs(delta) <= minDelta) {\n            setResult(x1, 0);\n            return x1;\n        }\n\n        double xm = 0.5 * (x0 + x1);\n        double fm =", "entropy": 0.32763671875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.310546875, 1.5625, 0.095947265625, 0.326904296875, 0.0022220611572265625, 0.01132965087890625, 0.0009288787841796875, 0.2169189453125, 0.02117919921875, 0.40380859375, 2.21875, 0.8427734375, 0.37841796875, 0.0941162109375, 0.1395263671875, 0.6015625, 0.003875732421875, 0.017547607421875, 0.0740966796875, 0.35400390625, 0.00551605224609375, 0.453369140625, 0.00232696533203125, 0.03656005859375, 0.0263214111328125, 0.0188751220703125, 0.01340484619140625, 0.0012235641479492188, 0.0005803108215332031, 0.0158233642578125, 0.0010080337524414062, 0.73779296875, 1.0869140625, 2.037109375, 0.62109375, 0.16552734375, 0.75244140625, 0.0051422119140625, 1.19921875, 0.290771484375, 0.01232147216796875, 0.0157623291015625, 0.003147125244140625, 0.5634765625, 0.0052947998046875, 0.0024280548095703125, 0.04791259765625, 0.0211334228515625, 0.10009765625, 0.0572509765625, 1.044921875, 0.0125732421875], "tokens": [291, 415, 308, 5717, 32, 3596, 26, 6558, 27, 2511, 1847, 9189, 27, 301, 324, 739, 1394, 26, 106, 35, 30, 225, 34, 293, 324, 442, 816, 35, 45, 291, 320, 584, 2064, 816, 95, 280, 225, 34, 32, 39, 319, 308, 106, 34, 474, 816, 35, 293, 291, 2064, 28923, 280]}
{"line_number": 179, "line_type": "original", "code": "            } else if (Math.abs(yMax) <= functionValueAccuracy) {", "entropy": 1.16796875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [6.62109375, 5.84375, 1.3486328125, 1.154296875, 0.10693359375, 1.4384765625, 0.01495361328125, 0.02105712890625, 0.004268646240234375, 0.69189453125, 2.921875, 0.09954833984375, 0.369873046875, 0.10675048828125, 0.0028438568115234375, 0.00042939186096191406, 0.2039794921875, 0.07916259765625], "tokens": [1468, 320, 813, 415, 308, 5717, 32, 3596, 26, 107, 2708, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 179, "line_type": "generated", "code": "\n        while (i < getIterationCount()) {\n            // Brent's method requires that the signs of the values at the\n            // endpoints do not match\n            if (Math.abs(y0) < functionValueAccuracy) {\n                setResult(x", "entropy": 0.50537109375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.33544921875, 0.50732421875, 0.40625, 1.04296875, 0.2169189453125, 0.75146484375, 0.494140625, 0.338134765625, 0.345947265625, 0.09161376953125, 0.53564453125, 1.1123046875, 4.25, 0.78173828125, 0.473876953125, 0.58203125, 1.2763671875, 0.74755859375, 0.6982421875, 1.080078125, 0.0084228515625, 0.64404296875, 1.1513671875, 0.7587890625, 0.317626953125, 0.359375, 0.00026035308837890625, 0.63427734375, 0.73779296875, 0.0292510986328125, 0.469482421875, 1.8212890625, 0.3544921875, 0.1697998046875, 0.72509765625, 0.003437042236328125, 0.0911865234375, 0.0014362335205078125, 0.400146484375, 0.038116455078125, 0.008331298828125, 0.331298828125, 0.442626953125, 0.0007805824279785156, 0.00032711029052734375, 0.49755859375, 0.005191802978515625, 0.054656982421875, 0.150390625, 0.0013895034790039062, 0.001163482666015625, 0.00759124755859375], "tokens": [291, 2218, 308, 91, 333, 622, 21863, 1534, 1157, 301, 324, 434, 551, 16502, 1182, 1411, 7171, 688, 322, 39842, 432, 322, 2078, 821, 322, 324, 434, 17532, 745, 646, 2530, 324, 415, 308, 5717, 32, 3596, 26, 107, 34, 27, 333, 667, 882, 26201, 27, 301, 400, 739, 1394, 26, 106]}
{"line_number": 286, "line_type": "original", "code": "                    delta = 0.5 * dx;", "entropy": 1.6201171875, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [9.3359375, 5.37109375, 0.0423583984375, 1.2119140625, 0.01256561279296875, 0.0183868408203125, 0.063720703125, 0.005092620849609375, 0.07342529296875, 0.06829833984375], "tokens": [4696, 7715, 280, 225, 34, 32, 39, 319, 12211, 45]}
{"line_number": 286, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [], "tokens": []}
{"line_number": 287, "line_type": "original", "code": "                    oldDelta = delta;", "entropy": 3.0625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [9.265625, 8.8671875, 0.1241455078125, 0.01537322998046875, 0.0721435546875, 0.0299530029296875], "tokens": [4696, 3610, 9189, 280, 7715, 45]}
{"line_number": 287, "line_type": "generated", "code": "\n    /**\n     * Set the result.\n     * @param x the result\n     * @param iterations the number of iterations\n     */\n    private void setResult(final double x, final int iterations) {\n        result = x;\n        iterationsCount = iterations;", "entropy": 0.28857421875, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [1.15625, 0.365478515625, 0.1708984375, 0.00019097328186035156, 1.3720703125, 0.130859375, 0.5849609375, 1.017578125, 0.12017822265625, 0.042510986328125, 0.92724609375, 0.0018014907836914062, 0.58935546875, 0.62744140625, 1.794921875, 0.31396484375, 0.0458984375, 0.0011920928955078125, 0.0038204193115234375, 0.5966796875, 0.303466796875, 0.117431640625, 0.0022869110107421875, 0.0435791015625, 0.96142578125, 0.04876708984375, 0.010589599609375, 0.04681396484375, 0.006519317626953125, 0.0009627342224121094, 2.968311309814453e-05, 0.0005259513854980469, 1.16015625, 0.0028209686279296875, 0.00153350830078125, 0.0034427642822265625, 0.1591796875, 0.00444793701171875, 0.00128173828125, 0.00948333740234375, 0.01097869873046875, 0.08624267578125, 0.50830078125, 0.0301513671875, 0.01192474365234375, 0.001255035400390625, 0.04296875, 0.99072265625, 0.55859375, 0.004425048828125, 0.0012378692626953125, 0.004604339599609375], "tokens": [284, 1022, 275, 319, 1756, 322, 1056, 32, 275, 319, 477, 753, 816, 322, 1056, 275, 319, 477, 753, 17576, 322, 1451, 432, 17576, 275, 569, 284, 945, 763, 739, 1394, 26, 3220, 2064, 816, 30, 1158, 629, 17576, 27, 301, 291, 1056, 280, 816, 45, 291, 17576, 1534, 280, 17576, 45]}
{"line_number": 300, "line_type": "original", "code": "                x1 = x1 + 0.5 * tolerance;", "entropy": 1.125, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [7.359375, 1.974609375, 0.88623046875, 0.0509033203125, 0.10211181640625, 0.61083984375, 1.046875, 2.314453125, 0.1368408203125, 0.0006685256958007812, 0.06475830078125, 0.007274627685546875, 1.1533203125, 0.04296875], "tokens": [2071, 816, 35, 280, 816, 35, 474, 225, 34, 32, 39, 319, 26434, 45]}
{"line_number": 300, "line_type": "generated", "code": "\n    /**\n     * Set the result.\n     *\n     * @param x the result\n     * @param iterations the number of iterations needed to get to the\n     * result\n     */\n    private void setResult(double x, int iterations) {\n        this.", "entropy": 0.34228515625, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [1.2470703125, 0.449462890625, 0.1865234375, 0.00017952919006347656, 1.443359375, 0.129150390625, 0.6103515625, 1.009765625, 0.11651611328125, 0.0382080078125, 0.67578125, 0.0006766319274902344, 0.0267486572265625, 0.0015354156494140625, 0.57421875, 0.54736328125, 1.7861328125, 0.35986328125, 0.040557861328125, 0.0008349418640136719, 0.004077911376953125, 0.56982421875, 0.253173828125, 0.12890625, 0.0020084381103515625, 0.0518798828125, 2.072265625, 0.1669921875, 0.7919921875, 1.3046875, 0.43017578125, 0.59326171875, 0.00010251998901367188, 0.515625, 0.0452880859375, 0.04730224609375, 0.01031494140625, 0.046905517578125, 0.005626678466796875, 0.0013370513916015625, 2.6106834411621094e-05, 0.0006136894226074219, 0.33740234375, 0.0009136199951171875, 0.00206756591796875, 0.05792236328125, 0.0014848709106445312, 0.01136016845703125, 0.0097198486328125, 0.07147216796875, 1.0146484375, 0.0009336471557617188], "tokens": [284, 1022, 275, 319, 1756, 322, 1056, 32, 275, 319, 275, 319, 477, 753, 816, 322, 1056, 275, 319, 477, 753, 17576, 322, 1451, 432, 17576, 5349, 372, 622, 372, 322, 275, 319, 1056, 275, 569, 284, 945, 763, 739, 1394, 26, 2627, 816, 30, 629, 17576, 27, 301, 291, 458, 32]}
{"line_number": 250, "line_type": "original", "code": "                setResult(x1, i);", "entropy": 1.91796875, "is_bug_line": false, "sus_score": 0.10482848367219183, "per_token_entropy": [4.39453125, 7.203125, 0.03466796875, 0.01465606689453125, 0.060455322265625, 0.128662109375, 5.33203125, 0.031524658203125, 0.07098388671875], "tokens": [2071, 739, 1394, 26, 106, 35, 30, 595, 293]}
{"line_number": 250, "line_type": "generated", "code": "\n                x1 = x1 + tolerance;\n            } else {", "entropy": 0.0797119140625, "is_bug_line": false, "sus_score": 0.10482848367219183, "per_token_entropy": [0.30517578125, 0.127685546875, 0.0017366409301757812, 0.1949462890625, 0.0587158203125, 0.03582763671875, 0.032135009765625, 0.1927490234375, 0.0016622543334960938, 0.036376953125, 0.0007023811340332031, 0.003307342529296875, 0.045166015625], "tokens": [400, 816, 35, 280, 816, 35, 474, 26434, 45, 324, 320, 813, 301]}
{"line_number": 251, "line_type": "original", "code": "                return result;", "entropy": 2.7890625, "is_bug_line": false, "sus_score": 0.10482848367219183, "per_token_entropy": [3.736328125, 6.125, 1.2900390625, 0.00789642333984375], "tokens": [2071, 442, 1056, 45]}
{"line_number": 251, "line_type": "generated", "code": "\n            } else {\n                x1 = x1 - 0.5 * tolerance;", "entropy": 0.0260009765625, "is_bug_line": false, "sus_score": 0.10482848367219183, "per_token_entropy": [0.35986328125, 0.001346588134765625, 0.00550079345703125, 0.035552978515625, 0.0247039794921875, 0.0168914794921875, 0.0004343986511230469, 0.0006175041198730469, 0.0008172988891601562, 0.0008149147033691406, 0.0059051513671875, 0.00287628173828125, 0.0004017353057861328, 0.0006995201110839844, 0.00024390220642089844, 0.0006132125854492188, 0.0003101825714111328, 0.0105438232421875], "tokens": [324, 320, 813, 301, 400, 816, 35, 280, 816, 35, 429, 225, 34, 32, 39, 319, 26434, 45]}
{"line_number": 299, "line_type": "original", "code": "            } else if (dx > 0.0) {", "entropy": 1.416015625, "is_bug_line": false, "sus_score": 0.10482848367219183, "per_token_entropy": [6.62109375, 2.353515625, 3.482421875, 1.892578125, 0.08343505859375, 0.51416015625, 2.9375, 0.0258636474609375, 0.00586700439453125, 0.41357421875, 0.002655029296875, 0.0258026123046875, 0.051788330078125], "tokens": [1468, 320, 813, 415, 308, 4582, 848, 225, 34, 32, 34, 27, 301]}
{"line_number": 299, "line_type": "generated", "code": "\n    /**\n     * Set the result.\n     * @param x the result\n     * @param iterations the number of iterations\n     */\n    private void setResult(double x, int iterations) {\n        this.result = x;\n        this.iterations = iterations", "entropy": 0.266357421875, "is_bug_line": false, "sus_score": 0.10482848367219183, "per_token_entropy": [0.96435546875, 0.78515625, 0.2042236328125, 0.00019788742065429688, 1.55078125, 0.13818359375, 0.6201171875, 1.037109375, 0.136474609375, 0.044464111328125, 0.94384765625, 0.0016832351684570312, 0.55322265625, 0.66748046875, 1.7412109375, 0.301513671875, 0.039398193359375, 0.0011310577392578125, 0.003292083740234375, 0.6337890625, 0.30029296875, 0.1102294921875, 0.0021114349365234375, 0.043243408203125, 0.9482421875, 0.04248046875, 0.00919342041015625, 0.039306640625, 0.007274627685546875, 0.0008783340454101562, 2.574920654296875e-05, 0.00069427490234375, 0.369140625, 0.0014553070068359375, 0.0034694671630859375, 0.0474853515625, 0.001373291015625, 0.0079498291015625, 0.0090484619140625, 0.0760498046875, 1.173828125, 0.000881195068359375, 0.0279693603515625, 0.038330078125, 0.01194000244140625, 0.001834869384765625, 0.0237274169921875, 0.0670166015625, 0.0005049705505371094, 0.09234619140625, 0.0272064208984375, 0.0007352828979492188], "tokens": [284, 1022, 275, 319, 1756, 322, 1056, 32, 275, 319, 477, 753, 816, 322, 1056, 275, 319, 477, 753, 17576, 322, 1451, 432, 17576, 275, 569, 284, 945, 763, 739, 1394, 26, 2627, 816, 30, 629, 17576, 27, 301, 291, 458, 32, 1267, 280, 816, 45, 291, 458, 32, 22400, 280, 17576]}
{"line_number": 277, "line_type": "original", "code": "                    p1 = -p1;", "entropy": 2.59375, "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [8.6953125, 6.20703125, 2.1640625, 0.0706787109375, 2.947265625, 0.311767578125, 0.20361328125, 0.1461181640625], "tokens": [4696, 298, 35, 280, 429, 98, 35, 45]}
{"line_number": 277, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [], "tokens": []}
