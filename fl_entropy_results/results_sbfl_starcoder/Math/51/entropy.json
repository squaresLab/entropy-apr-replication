{"line_number": 124, "line_type": "original", "code": "        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);", "entropy": 1.1806640625, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [4.4453125, 7.72265625, 4.5, 1.34375, 0.9033203125, 0.0047454833984375, 0.013641357421875, 0.027618408203125, 0.008636474609375, 0.94482421875, 0.00604248046875, 0.03253173828125, 0.033935546875, 0.9208984375, 0.061981201171875, 2.06640625, 3.568359375, 0.0014743804931640625, 0.002048492431640625, 0.53076171875, 0.0016355514526367188, 0.00021219253540039062, 0.0181732177734375], "tokens": [351, 442, 10932, 26, 1449, 14066, 30, 296, 30, 1847, 30, 1769, 30, 1477, 882, 30, 38886, 13628, 32, 15205, 81, 25590, 293]}
{"line_number": 124, "line_type": "generated", "code": "\n                // Update the bounds.\n                x0 = x1;\n                f0 = f1;\n                x1 = x;\n                f1 = fx;\n            } else {\n                // The value of x1 has not switched to the other bound, thus", "entropy": 0.27490234375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [1.0380859375, 0.7373046875, 1.98828125, 0.5498046875, 2.134765625, 0.94091796875, 0.256591796875, 0.4033203125, 0.1829833984375, 0.0187225341796875, 0.1629638671875, 0.325439453125, 0.0010242462158203125, 0.0175628662109375, 0.07379150390625, 0.0017080307006835938, 0.0014467239379882812, 0.001895904541015625, 1.5139579772949219e-05, 4.315376281738281e-05, 0.82373046875, 0.0888671875, 0.0002865791320800781, 0.0025119781494140625, 0.03314208984375, 0.00252532958984375, 0.00799560546875, 0.001049041748046875, 2.47955322265625e-05, 7.37905502319336e-05, 0.000812530517578125, 6.35385513305664e-05, 0.98828125, 0.005062103271484375, 0.0390625, 0.050048828125, 0.1309814453125, 0.05224609375, 0.2467041015625, 0.85009765625, 0.01129913330078125, 0.0165557861328125, 0.17529296875, 0.2376708984375, 0.0596923828125, 0.046142578125, 0.158935546875, 0.00794219970703125, 0.0019006729125976562, 0.0025787353515625, 0.44775390625, 0.966796875], "tokens": [400, 434, 4000, 322, 11615, 32, 400, 816, 34, 280, 816, 35, 45, 400, 296, 34, 280, 296, 35, 45, 400, 816, 35, 280, 816, 45, 400, 296, 35, 280, 20670, 45, 324, 320, 813, 301, 400, 434, 886, 786, 432, 816, 35, 1401, 646, 35464, 372, 322, 1604, 5085, 30, 14966]}
{"line_number": 171, "line_type": "original", "code": "            if (f1 * fx < 0) {", "entropy": 1.5029296875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [4.078125, 5.82421875, 0.13427734375, 1.716796875, 0.2125244140625, 2.33984375, 2.0859375, 1.443359375, 0.018310546875, 0.0006246566772460938, 0.16064453125, 0.0199127197265625], "tokens": [1468, 415, 308, 88, 35, 319, 20670, 333, 225, 34, 27, 301]}
{"line_number": 171, "line_type": "generated", "code": "\n                }\n            }\n\n            // If we made it this far, then the function value is not small\n            // enough and we can't get any closer to the root.\n            if (FastMath.abs(x1 - x0) <= atol + rt", "entropy": 0.435791015625, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.67041015625, 0.358154296875, 0.1732177734375, 0.0013895034790039062, 0.353759765625, 0.041595458984375, 0.23388671875, 1.48828125, 2.095703125, 0.073974609375, 0.587890625, 0.00021338462829589844, 0.2393798828125, 0.705078125, 0.58447265625, 2.494140625, 0.084228515625, 1.4091796875, 1.173828125, 0.3134765625, 0.463623046875, 0.00012421607971191406, 0.0014705657958984375, 1.416015625, 0.1751708984375, 0.62939453125, 0.1199951171875, 0.87255859375, 0.705078125, 0.0023670196533203125, 0.06744384765625, 0.1531982421875, 0.057342529296875, 0.83251953125, 0.876953125, 0.1356201171875, 0.270751953125, 0.974609375, 7.641315460205078e-05, 7.998943328857422e-05, 0.08428955078125, 0.0203704833984375, 0.037872314453125, 0.314697265625, 0.0015888214111328125, 0.0204925537109375, 0.007343292236328125, 0.0001232624053955078, 0.07403564453125, 0.521484375, 0.367431640625, 0.368896484375], "tokens": [400, 320, 324, 320, 1064, 434, 1670, 996, 5590, 561, 458, 9019, 30, 1615, 322, 667, 786, 438, 646, 5532, 324, 434, 8448, 461, 996, 883, 1330, 622, 1346, 30682, 372, 322, 3051, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 106, 35, 429, 816, 34, 27, 2511, 35012, 474, 12190]}
{"line_number": 174, "line_type": "original", "code": "                x0 = x1;", "entropy": 2.12890625, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [4.95703125, 7.75390625, 1.412109375, 0.032501220703125, 0.307373046875, 0.314453125, 0.12127685546875], "tokens": [2071, 816, 34, 280, 816, 35, 45]}
{"line_number": 174, "line_type": "generated", "code": "\n                }\n            }\n\n            // If the root lies in the interval [x0, x1], then the bracketing\n            // condition is satisfied.\n            if (x0 <= x && x <= x1) {\n                switch (allowed) {\n                case", "entropy": 0.450439453125, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.08111572265625, 0.00901031494140625, 0.11065673828125, 0.0004134178161621094, 0.13525390625, 0.03753662109375, 0.3154296875, 0.28662109375, 2.390625, 0.7939453125, 1.7724609375, 0.54052734375, 1.1484375, 0.449462890625, 0.052154541015625, 0.2039794921875, 0.09991455078125, 0.0207977294921875, 0.330322265625, 0.2900390625, 0.68994140625, 2.123046875, 2.783203125, 0.07470703125, 0.10919189453125, 0.0038242340087890625, 1.7353515625, 0.91259765625, 0.28466796875, 0.33837890625, 0.475830078125, 0.07159423828125, 0.351318359375, 1.16796875, 0.83056640625, 1.017578125, 0.00261688232421875, 0.37353515625, 0.00646209716796875, 0.11932373046875, 6.0439109802246094e-05, 4.220008850097656e-05, 0.139892578125, 0.0021572113037109375, 0.064453125, 0.5703125, 0.001827239990234375, 0.030364990234375, 0.0006279945373535156, 0.0004944801330566406, 0.06927490234375, 0.007793426513671875], "tokens": [400, 320, 324, 320, 1064, 434, 1670, 322, 3051, 46138, 328, 322, 7898, 428, 106, 34, 30, 816, 35, 614, 1615, 322, 33828, 299, 324, 434, 3700, 438, 28892, 32, 324, 415, 308, 106, 34, 2511, 816, 962, 816, 2511, 816, 35, 27, 301, 400, 3578, 308, 11327, 27, 301, 400, 1135]}
{"line_number": 175, "line_type": "original", "code": "                f0 = f1;", "entropy": 2.072265625, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [6.2265625, 6.23046875, 0.60302734375, 0.1846923828125, 0.9736328125, 0.0212249755859375, 0.25732421875], "tokens": [2071, 296, 34, 280, 296, 35, 45]}
{"line_number": 175, "line_type": "generated", "code": "\n            }\n\n            // If the function value of the last approximation is too small,\n            // given the absolute accuracy, then we can't get closer to the\n            // root than we already are.\n            if (FastMath.abs(x1 - x0", "entropy": 0.151123046875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.2587890625, 0.07025146484375, 0.24755859375, 0.043792724609375, 0.269775390625, 0.2310791015625, 1.71875, 0.06549072265625, 0.509765625, 0.0279998779296875, 0.203857421875, 0.004222869873046875, 0.04095458984375, 0.6142578125, 0.24609375, 0.1668701171875, 0.013519287109375, 8.14199447631836e-05, 0.03326416015625, 0.044525146484375, 1.2353515625, 0.1136474609375, 0.036895751953125, 0.02862548828125, 0.156005859375, 0.045196533203125, 0.0233306884765625, 0.01012420654296875, 0.09942626953125, 0.0038299560546875, 0.1444091796875, 0.0723876953125, 0.00293731689453125, 0.0026760101318359375, 0.0166473388671875, 0.006389617919921875, 0.002620697021484375, 0.0001354217529296875, 0.0206298828125, 0.123046875, 0.1636962890625, 0.040283203125, 0.061737060546875, 1.4185905456542969e-05, 2.086162567138672e-05, 0.0017290115356445312, 0.0009303092956542969, 0.14306640625, 0.2266845703125, 0.17529296875, 0.034423828125, 0.05316162109375], "tokens": [324, 320, 1064, 434, 1670, 322, 667, 786, 432, 322, 2401, 39431, 438, 5133, 5532, 30, 324, 434, 2702, 322, 7976, 14222, 30, 1615, 996, 883, 1330, 622, 30682, 372, 322, 324, 434, 3051, 2784, 996, 3425, 884, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 106, 35, 429, 816, 34]}
{"line_number": 176, "line_type": "original", "code": "                inverted = !inverted;", "entropy": 2.650390625, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [6.77734375, 7.06640625, 0.035980224609375, 2.001953125, 0.0026760101318359375, 0.018035888671875], "tokens": [2071, 37592, 280, 653, 47910, 45]}
{"line_number": 176, "line_type": "generated", "code": "\n\n            // If the distance between the new approximation and the previous\n            // approximation is small enough, then we can't get any closer to\n            // the root than we already are.\n            if (FastMath.abs(x - x0) <= atol +", "entropy": 0.363037109375, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [1.3427734375, 0.07275390625, 0.37158203125, 0.250244140625, 3.447265625, 0.28515625, 0.46240234375, 2.92578125, 0.1456298828125, 0.057647705078125, 0.1510009765625, 1.2861328125, 0.04278564453125, 0.001140594482421875, 0.07891845703125, 0.038055419921875, 1.447265625, 0.0789794921875, 0.07818603515625, 0.5986328125, 0.317626953125, 0.224365234375, 0.35107421875, 0.06573486328125, 0.16552734375, 0.038482666015625, 0.0811767578125, 0.256103515625, 0.0019626617431640625, 0.01558685302734375, 0.052764892578125, 0.58056640625, 0.00714111328125, 0.1307373046875, 0.0034580230712890625, 0.042449951171875, 0.24072265625, 0.4951171875, 0.11846923828125, 0.0927734375, 3.933906555175781e-05, 2.300739288330078e-05, 0.0182342529296875, 0.02734375, 0.0195770263671875, 0.59033203125, 0.034912109375, 0.92138671875, 0.00017762184143066406, 0.044189453125, 0.60009765625, 0.1749267578125], "tokens": [1064, 434, 1670, 322, 7291, 3733, 322, 537, 39431, 461, 322, 4552, 324, 434, 39431, 438, 5532, 8448, 30, 1615, 996, 883, 1330, 622, 1346, 30682, 372, 324, 434, 322, 3051, 2784, 996, 3425, 884, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 106, 429, 816, 34, 27, 2511, 35012, 474]}
{"line_number": 178, "line_type": "original", "code": "                switch (method) {", "entropy": 2.859375, "is_bug_line": true, "sus_score": 0.21320071635561041, "per_token_entropy": [3.94921875, 4.38671875, 0.0112762451171875, 8.7734375, 0.0160675048828125, 0.0247650146484375], "tokens": [2071, 3578, 308, 1959, 27, 301]}
{"line_number": 178, "line_type": "generated", "code": "\n            // can return the current approximation.\n            if (FastMath.abs(x1 - x0) <= atol + (rtol * FastMath.abs(x1))) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return", "entropy": 0.229248046875, "is_bug_line": true, "sus_score": 0.21320071635561041, "per_token_entropy": [0.72705078125, 1.0234375, 0.580078125, 0.50927734375, 0.6669921875, 0.84619140625, 0.59521484375, 0.87646484375, 0.2227783203125, 0.2293701171875, 0.228759765625, 0.71337890625, 0.00012922286987304688, 0.00011563301086425781, 0.148681640625, 0.055938720703125, 0.05145263671875, 0.1971435546875, 0.005985260009765625, 0.00205230712890625, 0.00855255126953125, 0.00037789344787597656, 0.0367431640625, 1.3193359375, 0.070068359375, 1.328125, 0.1776123046875, 1.5974044799804688e-05, 0.0016126632690429688, 0.0225830078125, 1.0967254638671875e-05, 0.000881195068359375, 0.08001708984375, 0.0010461807250976562, 0.0016422271728515625, 0.1427001953125, 0.06536865234375, 0.040740966796875, 0.11279296875, 0.41943359375, 0.0033931732177734375, 0.0037078857421875, 0.0006289482116699219, 0.001087188720703125, 0.07244873046875, 0.006717681884765625, 0.1007080078125, 7.236003875732422e-05, 5.137920379638672e-05, 0.0033435821533203125, 0.1552734375, 0.06671142578125], "tokens": [324, 434, 883, 442, 322, 1550, 39431, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 106, 35, 429, 816, 34, 27, 2511, 35012, 474, 308, 2051, 362, 319, 15938, 5717, 32, 3596, 26, 106, 35, 2610, 301, 400, 3578, 308, 11327, 27, 301, 400, 1135, 2964, 81, 25590, 44, 528, 442]}
{"line_number": 192, "line_type": "original", "code": "            x1 = x;", "entropy": 2.638671875, "is_bug_line": true, "sus_score": 0.21320071635561041, "per_token_entropy": [5.16015625, 8.7421875, 1.3115234375, 0.06878662109375, 0.204345703125, 0.340576171875], "tokens": [1468, 816, 35, 280, 816, 45]}
{"line_number": 192, "line_type": "generated", "code": "\n                default:\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the new approximation is outside the initial interval, then\n            // the bracketing of the root must have been wrong.\n            if (x > x1) {\n                // If", "entropy": 0.54443359375, "is_bug_line": true, "sus_score": 0.21320071635561041, "per_token_entropy": [0.251220703125, 0.1961669921875, 0.0005092620849609375, 0.01218414306640625, 0.262451171875, 0.0052642822265625, 0.0014829635620117188, 0.00014138221740722656, 0.00032210350036621094, 0.0012693405151367188, 0.01971435546875, 0.0002510547637939453, 0.02392578125, 0.0018777847290039062, 0.474365234375, 0.06329345703125, 1.49609375, 0.32470703125, 2.26953125, 0.11236572265625, 0.2359619140625, 2.84765625, 1.099609375, 2.0234375, 0.4921875, 0.174560546875, 1.078125, 0.10430908203125, 8.165836334228516e-05, 1.0986328125, 1.2333984375, 0.06719970703125, 1.0380859375, 0.14111328125, 0.310791015625, 1.107421875, 0.1300048828125, 0.34765625, 0.54150390625, 0.2186279296875, 0.673828125, 0.3701171875, 0.420166015625, 1.2138671875, 1.5654296875, 0.0546875, 0.1209716796875, 0.3701171875, 0.0015773773193359375, 0.0350341796875, 1.3486328125, 2.32421875], "tokens": [400, 1244, 44, 528, 1422, 537, 4175, 4292, 924, 473, 400, 320, 324, 320, 1064, 434, 1670, 322, 537, 39431, 438, 11127, 322, 2815, 7898, 30, 1615, 324, 434, 322, 33828, 299, 432, 322, 3051, 2298, 1159, 2583, 6643, 32, 324, 415, 308, 106, 848, 816, 35, 27, 301, 400, 434, 1670]}
{"line_number": 193, "line_type": "original", "code": "            f1 = fx;", "entropy": 2.513671875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [5.12109375, 8.8046875, 0.591796875, 0.2384033203125, 0.299072265625, 0.0311279296875], "tokens": [1468, 296, 35, 280, 20670, 45]}
{"line_number": 193, "line_type": "generated", "code": "\n                    throw new MathInternalError();\n                }\n            }\n\n            // Update the function values.\n            f1 = fx;\n        }\n    }", "entropy": 0.256591796875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [0.873046875, 0.34521484375, 0.0079803466796875, 0.0020275115966796875, 0.0003108978271484375, 0.00017964839935302734, 0.002384185791015625, 0.0201263427734375, 0.00048232078552246094, 0.021331787109375, 0.0030536651611328125, 0.50927734375, 0.05767822265625, 1.05859375, 0.80859375, 1.1943359375, 0.6962890625, 0.607421875, 0.11151123046875, 0.11297607421875, 0.09759521484375, 0.003536224365234375, 0.0032558441162109375, 0.00341796875, 0.34130859375, 0.0038318634033203125, 0.2900390625, 0.0113983154296875], "tokens": [528, 1422, 537, 4175, 4292, 924, 473, 400, 320, 324, 320, 1064, 434, 4000, 322, 667, 2078, 32, 324, 296, 35, 280, 20670, 45, 291, 320, 284, 320]}
{"line_number": 198, "line_type": "original", "code": "            if (FastMath.abs(f1) <= ftol) {", "entropy": 0.91357421875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [6.703125, 2.90625, 0.1207275390625, 1.5205078125, 0.00015807151794433594, 0.0002460479736328125, 0.0233001708984375, 0.0029239654541015625, 1.8623046875, 0.11151123046875, 0.055938720703125, 0.95068359375, 0.27783203125, 0.0010433197021484375, 0.058197021484375, 0.0218353271484375], "tokens": [1468, 415, 308, 12200, 5717, 32, 3596, 26, 88, 35, 27, 2511, 296, 14598, 27, 301]}
{"line_number": 198, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [], "tokens": []}
{"line_number": 229, "line_type": "original", "code": "            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),", "entropy": 0.85302734375, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [7.06640625, 3.02734375, 0.135986328125, 2.77734375, 5.9604644775390625e-05, 0.0003294944763183594, 0.027374267578125, 0.003925323486328125, 0.85302734375, 0.65869140625, 0.337890625, 0.042877197265625, 0.117919921875, 0.003017425537109375, 2.603515625, 3.2109375, 2.1219253540039062e-05, 0.006183624267578125, 0.9248046875, 0.042694091796875, 3.21875, 0.0003216266632080078, 0.321044921875, 0.30029296875, 9.298324584960938e-06, 0.00539398193359375, 0.234619140625, 0.000865936279296875, 0.0064239501953125, 0.455078125, 0.053070068359375], "tokens": [1468, 415, 308, 12200, 5717, 32, 3596, 26, 106, 35, 429, 816, 34, 27, 333, 15938, 5717, 32, 1449, 26, 2051, 362, 319, 15938, 5717, 32, 3596, 26, 106, 35, 471]}
{"line_number": 229, "line_type": "generated", "code": "\n    /**\n     * Returns the bracketing interval that contains a sign change.\n     *\n     * @param f0 Value of the function at the lower bound.\n     * @param f1 Value of the function at the upper bound.\n     * @param x", "entropy": 0.443603515625, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [1.62890625, 0.2366943359375, 0.53466796875, 0.00015342235565185547, 3.5234375, 0.53076171875, 2.265625, 0.06597900390625, 0.693359375, 1.732421875, 1.0927734375, 0.337646484375, 0.5419921875, 0.019775390625, 0.396240234375, 0.2060546875, 0.007427215576171875, 0.32763671875, 0.0010080337524414062, 0.1766357421875, 0.034515380859375, 1.193359375, 0.6875, 0.79931640625, 0.209228515625, 0.364013671875, 0.081787109375, 0.07177734375, 0.56201171875, 1.0693359375, 1.0927734375, 0.68408203125, 0.0024738311767578125, 1.2040138244628906e-05, 0.000576019287109375, 0.0006880760192871094, 0.1038818359375, 0.00608062744140625, 0.003711700439453125, 0.0006976127624511719, 0.0009455680847167969, 0.00151824951171875, 0.00128936767578125, 0.0019092559814453125, 0.038482666015625, 0.000919342041015625, 0.003543853759765625, 0.00283050537109375, 0.0014781951904296875, 0.011932373046875, 0.418212890625, 1.2890625], "tokens": [284, 1022, 275, 319, 3759, 322, 33828, 299, 7898, 688, 4304, 312, 2596, 1539, 32, 275, 319, 275, 319, 477, 753, 296, 34, 3846, 432, 322, 667, 821, 322, 7216, 5085, 32, 275, 319, 477, 753, 296, 35, 3846, 432, 322, 667, 821, 322, 8342, 5085, 32, 275, 319, 477, 753, 816]}
{"line_number": 246, "line_type": "original", "code": "        }", "entropy": 4.3671875, "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [6.32421875, 2.408203125], "tokens": [351, 320]}
{"line_number": 246, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.21320071635561041, "per_token_entropy": [], "tokens": []}
{"line_number": 68, "line_type": "original", "code": "        super(absoluteAccuracy);", "entropy": 3.345703125, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [3.373046875, 5.7265625, 5.13671875, 4.44140625, 0.0015268325805664062, 1.40234375], "tokens": [351, 2599, 26, 11148, 26201, 293]}
{"line_number": 68, "line_type": "generated", "code": "\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected double doSolve() {\n        final UnivariateRealFunction f = getFunction();\n        final double min = getMin();\n        final double max = getMax();\n        final double initial = getStartValue", "entropy": 0.190673828125, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [0.23388671875, 0.11761474609375, 0.3740234375, 0.052459716796875, 1.0849609375, 0.0001919269561767578, 0.0003666877746582031, 0.004245758056640625, 0.0168914794921875, 0.578125, 0.049774169921875, 0.0290069580078125, 0.01105499267578125, 0.260009765625, 0.0006089210510253906, 0.0007266998291015625, 0.00014138221740722656, 0.08837890625, 0.3720703125, 1.25, 0.68798828125, 7.152557373046875e-07, 0.00012195110321044922, 0.0002231597900390625, 0.136474609375, 0.112548828125, 0.251953125, 0.35205078125, 0.136962890625, 0.2880859375, 0.2330322265625, 0.031158447265625, 0.42578125, 0.0169525146484375, 0.00916290283203125, 0.01548004150390625, 0.0130462646484375, 0.00360870361328125, 0.0079193115234375, 0.00037360191345214844, 0.0283355712890625, 0.0003311634063720703, 4.971027374267578e-05, 4.410743713378906e-05, 0.297607421875, 0.295654296875, 0.044342041015625, 1.837890625, 0.1431884765625, 0.01215362548828125, 0.00823211669921875, 0.0001595020294189453], "tokens": [284, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 2522, 2064, 745, 37530, 346, 301, 291, 1158, 1683, 27623, 6877, 2447, 296, 280, 622, 2447, 473, 291, 1158, 2064, 1847, 280, 622, 2928, 473, 291, 1158, 2064, 1769, 280, 39486, 473, 291, 1158, 2064, 2815, 280, 622, 2130, 882]}
{"line_number": 69, "line_type": "original", "code": "        this.allowed = AllowedSolution.ANY_SIDE;", "entropy": 1.1767578125, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [4.62109375, 3.255859375, 0.0142059326171875, 3.935546875, 0.0106201171875, 1.9921875, 0.0006489753723144531, 0.0007929801940917969, 0.2220458984375, 0.0007195472717285156, 1.1205673217773438e-05, 0.0606689453125], "tokens": [351, 458, 32, 11327, 280, 38886, 13628, 32, 15205, 81, 25590, 45]}
{"line_number": 69, "line_type": "generated", "code": "\n\n    /**\n     * Solve for a zero in the given interval, start at {@code startValue}.\n     *\n     * @param maxEval Maximum number of evaluations.\n     * @param f Function to solve.\n     * @param min Lower bound for the", "entropy": 0.174072265625, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [1.822265625, 0.086181640625, 0.299072265625, 2.968311309814453e-05, 1.7060546875, 0.00994873046875, 0.04034423828125, 0.0245819091796875, 0.7763671875, 0.003536224365234375, 0.007793426513671875, 0.01459503173828125, 0.54443359375, 0.1319580078125, 0.6279296875, 0.192138671875, 0.00042438507080078125, 0.07208251953125, 0.072509765625, 0.026214599609375, 0.01222991943359375, 0.00177764892578125, 0.3681640625, 0.00010633468627929688, 0.01071929931640625, 0.0038700103759765625, 0.46923828125, 0.01204681396484375, 0.1539306640625, 0.0155181884765625, 0.00011777877807617188, 0.04901123046875, 7.271766662597656e-06, 0.0137176513671875, 0.0013380050659179688, 3.6954879760742188e-06, 0.00016605854034423828, 0.00023365020751953125, 0.013916015625, 0.2313232421875, 0.79052734375, 0.2071533203125, 0.01885986328125, 0.0009703636169433594, 1.4901161193847656e-05, 0.00010669231414794922, 0.0002658367156982422, 0.0660400390625, 0.028472900390625, 0.0241546630859375, 0.09375, 0.00640869140625], "tokens": [446, 1022, 275, 319, 47005, 436, 312, 5934, 328, 322, 2702, 7898, 30, 1477, 821, 3088, 687, 1477, 882, 4009, 275, 319, 275, 319, 477, 753, 1769, 14066, 18690, 1451, 432, 6130, 993, 32, 275, 319, 477, 753, 296, 4540, 372, 10932, 32, 275, 319, 477, 753, 1847, 35245, 5085, 436, 322]}
{"line_number": 70, "line_type": "original", "code": "        this.method = method;", "entropy": 1.7353515625, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [4.50390625, 5.1171875, 0.06591796875, 1.7919921875, 0.1903076171875, 0.398681640625, 0.08087158203125], "tokens": [351, 458, 32, 1959, 280, 1411, 45]}
{"line_number": 70, "line_type": "generated", "code": "\n    /**\n     * Solve for a zero inside the given interval with the given accuracy.\n     *\n     * @param f Function.\n     * @param min Lower bound for the interval.\n     * @param max Upper bound for the interval.\n     * @param", "entropy": 0.189208984375, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [1.052734375, 0.32470703125, 0.334228515625, 5.14984130859375e-05, 1.5830078125, 0.0100860595703125, 0.05029296875, 0.021697998046875, 0.88623046875, 0.0438232421875, 0.9111328125, 0.01605224609375, 0.75244140625, 0.484130859375, 0.092529296875, 0.50048828125, 0.02655029296875, 0.0047454833984375, 0.0019550323486328125, 0.142822265625, 0.00013518333435058594, 0.01360321044921875, 0.003414154052734375, 0.91796875, 0.9287109375, 0.10699462890625, 0.0010662078857421875, 2.944469451904297e-05, 0.00018644332885742188, 0.0005908012390136719, 0.275634765625, 0.02703857421875, 0.01739501953125, 0.04510498046875, 0.02423095703125, 0.0118408203125, 0.002429962158203125, 0.0008115768432617188, 1.5497207641601562e-06, 0.00011801719665527344, 8.20159912109375e-05, 0.1343994140625, 0.012908935546875, 0.0003409385681152344, 0.00017499923706054688, 0.00015866756439208984, 0.00044727325439453125, 0.002559661865234375, 0.0024566650390625, 0.001163482666015625, 0.004970550537109375, 0.061126708984375], "tokens": [284, 1022, 275, 319, 47005, 436, 312, 5934, 6517, 322, 2702, 7898, 623, 322, 2702, 14222, 32, 275, 319, 275, 319, 477, 753, 296, 4540, 32, 275, 319, 477, 753, 1847, 35245, 5085, 436, 322, 7898, 32, 275, 319, 477, 753, 1769, 42079, 5085, 436, 322, 7898, 32, 275, 319, 477, 753]}
{"line_number": 71, "line_type": "original", "code": "    }", "entropy": 3.044921875, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [0.77587890625, 5.3125], "tokens": [264, 320]}
{"line_number": 71, "line_type": "generated", "code": "    public double doSolve() {\n        // check parameters\n        verifySequence(getFunctionValueAccuracy(), getRelativeAccuracy(),\n                       getAbsoluteAccuracy());\n        final UnivariateRealFunction f = getFunction();\n        final double min = getMin();\n        final double max", "entropy": 0.343994140625, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [0.77978515625, 0.7841796875, 0.212890625, 0.7177734375, 0.0006022453308105469, 0.00336456298828125, 0.97119140625, 0.3564453125, 0.49462890625, 2.224609375, 0.9990234375, 0.0579833984375, 0.65673828125, 1.208984375, 0.015777587890625, 1.0498046875, 1.51171875, 0.0007596015930175781, 0.0006690025329589844, 0.27099609375, 0.7080078125, 1.0966796875, 0.0001499652862548828, 0.03497314453125, 0.08465576171875, 0.00740814208984375, 0.0016832351684570312, 5.4836273193359375e-06, 0.046630859375, 0.7587890625, 1.0712890625, 0.47998046875, 2.1457672119140625e-06, 0.0006299018859863281, 0.0004744529724121094, 0.07147216796875, 0.037445068359375, 0.039398193359375, 0.10174560546875, 0.005908966064453125, 0.552734375, 0.1451416015625, 0.03369140625, 0.143798828125, 0.0148468017578125, 0.01739501953125, 0.0199127197265625, 0.0220794677734375, 0.005954742431640625, 0.0120849609375, 0.0002384185791015625, 0.05047607421875], "tokens": [264, 562, 2064, 745, 37530, 346, 301, 291, 434, 1505, 3377, 291, 6144, 5897, 26, 371, 2447, 882, 26201, 1026, 622, 11777, 26201, 1026, 5556, 622, 12043, 26201, 1035, 291, 1158, 1683, 27623, 6877, 2447, 296, 280, 622, 2447, 473, 291, 1158, 2064, 1847, 280, 622, 2928, 473, 291, 1158, 2064, 1769]}
{"line_number": 149, "line_type": "original", "code": "        final double ftol = getFunctionValueAccuracy();", "entropy": 1.5439453125, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [5.21875, 3.681640625, 0.113037109375, 3.12890625, 4.40234375, 0.10809326171875, 0.310546875, 0.0021381378173828125, 8.416175842285156e-05, 0.0009522438049316406, 0.018951416015625], "tokens": [351, 1158, 2064, 296, 14598, 280, 622, 2447, 882, 26201, 473]}
{"line_number": 149, "line_type": "generated", "code": "\n                return x;\n            }\n\n            // If the root lies outside the current interval, we need to\n            // expand the interval to include it.\n            if ((f1 > 0)!= inverted) {\n                if (x1 > getMax()) {\n                   ", "entropy": 0.552734375, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.10687255859375, 0.74462890625, 0.322265625, 0.84521484375, 0.1038818359375, 0.0016946792602539062, 0.1568603515625, 0.061279296875, 0.373291015625, 0.49072265625, 1.99609375, 0.4912109375, 1.71875, 0.80029296875, 0.58349609375, 0.88720703125, 0.2393798828125, 1.80078125, 0.96728515625, 0.0103302001953125, 0.99072265625, 0.0079498291015625, 2.060546875, 0.23974609375, 0.2020263671875, 0.5244140625, 0.9052734375, 0.071044921875, 0.1441650390625, 0.3759765625, 0.2330322265625, 1.3525390625, 0.63671875, 0.33154296875, 0.77001953125, 0.0034351348876953125, 0.0001442432403564453, 0.55419921875, 1.517578125, 0.1728515625, 0.044708251953125, 0.0035114288330078125, 0.06549072265625, 1.3583984375, 0.06634521484375, 1.134765625, 0.59130859375, 0.63232421875, 0.81689453125, 0.01042938232421875, 0.0010728836059570312, 0.2181396484375], "tokens": [400, 442, 816, 45, 324, 320, 1064, 434, 1670, 322, 3051, 46138, 11127, 322, 1550, 7898, 30, 996, 1849, 372, 324, 434, 11764, 322, 7898, 372, 2305, 561, 32, 324, 415, 1833, 88, 35, 848, 225, 34, 27, 863, 37592, 27, 301, 400, 415, 308, 106, 35, 848, 39486, 1157, 301, 528]}
{"line_number": 150, "line_type": "original", "code": "        final double atol = getAbsoluteAccuracy();", "entropy": 1.830078125, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [4.6953125, 7.1015625, 0.0845947265625, 4.42578125, 0.03582763671875, 0.0826416015625, 0.01300811767578125, 0.0004892349243164062, 0.025970458984375], "tokens": [351, 1158, 2064, 35012, 280, 622, 12043, 26201, 473]}
{"line_number": 150, "line_type": "generated", "code": "\n                    case ANY_SIDE:\n                        // The value of x1 is the best approximation to the\n                        // root that we can get.\n                        return x1;\n                    case LEFT_SIDE:\n                        // The value of x0 is the best approximation to the\n                       ", "entropy": 0.406494140625, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.430908203125, 0.130126953125, 1.2998046875, 0.0004477500915527344, 0.0011453628540039062, 0.021484375, 0.262939453125, 1.2080078125, 2.109375, 2.01953125, 0.202880859375, 0.351318359375, 0.372314453125, 0.146240234375, 0.86376953125, 0.55224609375, 1.34765625, 1.03515625, 0.058380126953125, 0.7861328125, 0.00042128562927246094, 0.69873046875, 0.6533203125, 0.359619140625, 0.94775390625, 0.291748046875, 0.318115234375, 0.428955078125, 0.271484375, 0.113037109375, 0.0469970703125, 0.0012731552124023438, 0.60009765625, 0.041717529296875, 0.467041015625, 8.618831634521484e-05, 0.0009088516235351562, 0.0016078948974609375, 0.054168701171875, 0.33740234375, 1.0703125, 0.6513671875, 0.00969696044921875, 0.00925445556640625, 0.144287109375, 0.0181732177734375, 0.317626953125, 0.0157928466796875, 0.00731658935546875, 0.0277099609375, 0.003330230712890625, 0.0265655517578125], "tokens": [528, 1135, 2964, 81, 25590, 44, 715, 434, 886, 786, 432, 816, 35, 438, 322, 5273, 39431, 372, 322, 715, 434, 3051, 688, 996, 883, 622, 32, 715, 442, 816, 35, 45, 528, 1135, 17789, 81, 25590, 44, 715, 434, 886, 786, 432, 816, 34, 438, 322, 5273, 39431, 372, 322, 715]}
{"line_number": 151, "line_type": "original", "code": "        final double rtol = getRelativeAccuracy();", "entropy": 1.90625, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [4.62109375, 6.625, 0.10577392578125, 7.4296875, 0.0169219970703125, 0.0655517578125, 0.15478515625, 0.01031494140625, 1.990795135498047e-05, 0.03887939453125], "tokens": [351, 1158, 2064, 12190, 362, 280, 622, 11777, 26201, 473]}
{"line_number": 151, "line_type": "generated", "code": "\n                    // If the root is not bracketed, we can return the current\n                    // approximation, regardless of the allowed solutions.\n                    return x;\n                case LEFT_SIDE:", "entropy": 0.63623046875, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.49560546875, 1.318359375, 2.04296875, 0.85986328125, 1.740234375, 0.173828125, 0.9873046875, 1.275390625, 0.0020599365234375, 0.29443359375, 1.4970703125, 0.89111328125, 1.8671875, 0.98486328125, 1.0322265625, 0.157958984375, 0.0008726119995117188, 0.2578125, 1.6845703125, 1.171875, 0.0292816162109375, 0.67431640625, 0.294189453125, 0.401611328125, 0.06707763671875, 0.16943359375, 0.84619140625, 0.1246337890625, 0.228759765625, 0.1746826171875, 0.036041259765625, 0.4833984375, 9.500980377197266e-05, 0.0012798309326171875, 0.0014371871948242188], "tokens": [528, 434, 1670, 322, 3051, 438, 646, 33828, 318, 30, 996, 883, 442, 322, 1550, 528, 434, 39431, 30, 23274, 432, 322, 6660, 16295, 32, 528, 442, 816, 45, 400, 1135, 17789, 81, 25590, 44]}
{"line_number": 155, "line_type": "original", "code": "        boolean inverted = false;", "entropy": 3.25, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [3.775390625, 11.2890625, 3.619140625, 0.6142578125, 0.1719970703125, 0.023162841796875], "tokens": [351, 1905, 37592, 280, 901, 45]}
{"line_number": 155, "line_type": "generated", "code": "\n                    }\n                    return x0;\n                case RIGHT_SIDE:\n                    if (inverted) {\n                        return x0;", "entropy": 0.1005859375, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.273681640625, 0.0256500244140625, 0.9228515625, 0.26220703125, 0.21728515625, 0.08123779296875, 0.0012922286987304688, 0.163330078125, 0.04449462890625, 0.0192413330078125, 6.556510925292969e-06, 1.3113021850585938e-06, 0.0004868507385253906, 0.0283966064453125, 0.01314544677734375, 0.032928466796875, 0.0003578662872314453, 0.0003650188446044922, 0.00380706787109375, 0.28515625, 0.0115814208984375, 0.0029392242431640625, 0.0137939453125, 0.0095367431640625], "tokens": [528, 320, 528, 442, 816, 34, 45, 400, 1135, 20169, 81, 25590, 44, 528, 415, 308, 47910, 27, 301, 715, 442, 816, 34, 45]}
{"line_number": 160, "line_type": "original", "code": "            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));", "entropy": 1.0244140625, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [4.12109375, 10.4765625, 0.12408447265625, 1.734375, 1.2822265625, 0.95947265625, 1.54296875, 0.487060546875, 3.322265625, 1.578125, 0.134765625, 1.2275390625, 0.259033203125, 0.0692138671875, 0.1387939453125, 0.006389617919921875, 0.003940582275390625, 0.0030307769775390625, 0.0670166015625, 0.0049285888671875, 0.0494384765625, 0.0179290771484375, 0.0244293212890625, 0.011962890625, 0.0012731552124023438, 0.0001285076141357422, 0.00859832763671875], "tokens": [1468, 1158, 2064, 816, 280, 816, 35, 429, 1833, 88, 35, 319, 308, 106, 35, 429, 816, 34, 490, 517, 308, 88, 35, 429, 296, 34, 876]}
{"line_number": 160, "line_type": "generated", "code": "\n                }\n            }\n\n            // If the function value accuracy is reached, then we can't get\n            // any closer to the root.\n            if (FastMath.abs(x1 - x0) <= atol + rtol * FastMath.abs(", "entropy": 0.27978515625, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.97216796875, 0.11248779296875, 0.2408447265625, 0.00234222412109375, 0.186767578125, 0.04638671875, 0.403564453125, 0.34716796875, 2.052734375, 0.17333984375, 1.2880859375, 0.07281494140625, 1.42578125, 0.362060546875, 1.451171875, 0.83203125, 0.331298828125, 0.20947265625, 0.2445068359375, 0.336669921875, 0.007717132568359375, 0.15380859375, 0.05853271484375, 0.0465087890625, 0.0251617431640625, 0.0277252197265625, 0.77783203125, 0.308349609375, 0.12200927734375, 0.061859130859375, 0.2230224609375, 4.220008850097656e-05, 4.374980926513672e-05, 0.0631103515625, 0.014739990234375, 0.363525390625, 0.1361083984375, 0.004039764404296875, 0.00785064697265625, 0.036041259765625, 0.0002624988555908203, 0.0496826171875, 0.4482421875, 0.27392578125, 0.088134765625, 6.318092346191406e-06, 0.0020008087158203125, 0.02410888671875, 3.814697265625e-06, 0.00026607513427734375, 0.136962890625, 0.00016450881958007812], "tokens": [400, 320, 324, 320, 1064, 434, 1670, 322, 667, 786, 14222, 438, 16673, 30, 1615, 996, 883, 1330, 622, 324, 434, 1346, 30682, 372, 322, 3051, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 106, 35, 429, 816, 34, 27, 2511, 35012, 474, 12190, 362, 319, 15938, 5717, 32, 3596, 26]}
{"line_number": 161, "line_type": "original", "code": "            final double fx = computeObjectiveValue(x);", "entropy": 1.6728515625, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [4.15234375, 9.4765625, 0.2685546875, 3.8125, 0.180908203125, 0.393310546875, 5.8650970458984375e-05, 0.00012099742889404297, 0.00707244873046875, 0.0297698974609375, 0.07763671875], "tokens": [1468, 1158, 2064, 20670, 280, 7596, 33312, 882, 26, 106, 293]}
{"line_number": 161, "line_type": "generated", "code": "\n                }\n            }\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1", "entropy": 0.168701171875, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.46435546875, 0.257080078125, 0.161865234375, 0.0025653839111328125, 0.26953125, 0.057403564453125, 0.2222900390625, 0.34521484375, 1.9970703125, 0.1297607421875, 0.6611328125, 0.05810546875, 0.318115234375, 0.00643157958984375, 0.044189453125, 0.499267578125, 0.357666015625, 0.150146484375, 0.0186004638671875, 5.9485435485839844e-05, 0.03436279296875, 0.0248870849609375, 0.9599609375, 0.03839111328125, 0.04815673828125, 0.11529541015625, 0.17138671875, 0.0806884765625, 0.0186004638671875, 0.0088653564453125, 0.006145477294921875, 0.01953125, 0.00701141357421875, 0.00235748291015625, 0.002521514892578125, 0.0006632804870605469, 0.0006766319274902344, 0.0037689208984375, 0.002063751220703125, 0.0026721954345703125, 0.00012612342834472656, 0.0139617919921875, 0.17529296875, 0.12152099609375, 0.03314208984375, 0.083740234375, 2.6106834411621094e-05, 4.398822784423828e-05, 0.0044708251953125, 0.005279541015625, 0.74609375, 0.0174560546875], "tokens": [400, 320, 324, 320, 1064, 434, 1670, 322, 667, 786, 432, 322, 2401, 39431, 438, 5133, 5532, 30, 324, 434, 2702, 322, 667, 786, 14222, 30, 1615, 996, 883, 1330, 622, 30682, 372, 324, 434, 322, 3051, 2784, 996, 3425, 884, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 88, 35]}
