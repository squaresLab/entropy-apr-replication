{"line_number": 1387, "line_type": "original", "code": "        double[] tmp1 = new double[getSize()];", "entropy": 1.3603515625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [5.7890625, 3.271484375, 1.2900390625, 2.236328125, 1.4580078125, 0.0748291015625, 0.03369140625, 0.0006241798400878906, 0.0031452178955078125, 0.81005859375, 0.003154754638671875], "tokens": [351, 2064, 1178, 3691, 35, 280, 537, 2064, 77, 24619, 22086]}
{"line_number": 1387, "line_type": "generated", "code": "\n            // as per polynomial parity, we can store coefficients of both Q_(n-1) and Q_n in the same array\n            final double[] q = new double[order];\n            q[0] = 1;\n            final double x2", "entropy": 0.0859375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.06927490234375, 1.884765625, 1.2744140625, 0.01433563232421875, 0.00679779052734375, 0.002254486083984375, 0.0015344619750976562, 0.00396728515625, 0.001567840576171875, 0.0021953582763671875, 0.0168304443359375, 0.003231048583984375, 0.005138397216796875, 0.37109375, 0.038360595703125, 0.0016565322875976562, 0.003509521484375, 0.0007944107055664062, 0.001312255859375, 0.0012617111206054688, 0.0008301734924316406, 0.00021183490753173828, 8.499622344970703e-05, 0.003765106201171875, 0.00024962425231933594, 0.0002148151397705078, 0.0001621246337890625, 0.00323486328125, 0.04022216796875, 0.0012845993041992188, 0.005367279052734375, 0.01038360595703125, 0.01296234130859375, 0.000606536865234375, 2.8848648071289062e-05, 0.0005292892456054688, 0.0026760101318359375, 0.00858306884765625, 0.004177093505859375, 0.028594970703125, 7.104873657226562e-05, 0.002864837646484375, 4.6372413635253906e-05, 0.003612518310546875, 0.1295166015625, 0.0267486572265625, 0.0232391357421875, 0.0045318603515625, 0.12060546875, 0.0016794204711914062, 0.121826171875, 0.2052001953125], "tokens": [324, 434, 619, 1292, 25137, 43264, 30, 996, 883, 2968, 26370, 432, 4335, 1910, 5908, 96, 31, 35, 27, 461, 1910, 81, 96, 328, 322, 2432, 1417, 324, 1158, 2064, 1178, 2678, 280, 537, 2064, 77, 1174, 970, 324, 2678, 77, 34, 79, 280, 225, 35, 45, 324, 1158, 2064, 816, 36]}
{"line_number": 1388, "line_type": "original", "code": "        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2", "entropy": 1.205078125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [4.50390625, 8.1484375, 0.00988006591796875, 6.9921875, 0.03662109375, 0.220458984375, 0.00189208984375, 0.0045318603515625, 3.26953125, 0.010498046875, 0.010955810546875, 0.00028014183044433594, 0.00244903564453125, 1.5322265625, 0.78955078125, 0.00868988037109375, 0.04345703125, 0.0026092529296875, 0.003582000732421875, 2.390625, 0.0010881423950195312, 0.2255859375, 0.666015625, 0.044677734375], "tokens": [351, 22213, 26, 106, 30, 816, 3457, 30, 816, 30, 816, 3457, 30, 3691, 35, 30, 225, 34, 293, 647, 434, 816, 80, 36]}
{"line_number": 1388, "line_type": "generated", "code": "\n            for (int n = 2; n <= order; ++n) {\n                function[n] = function[n - 1] * n * function[1] / (n - 1);\n            }\n        }\n\n        // apply function", "entropy": 0.189208984375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.74609375, 0.7265625, 0.0009984970092773438, 0.0007662773132324219, 0.494873046875, 0.0006566047668457031, 0.0026645660400390625, 0.03875732421875, 0.003154754638671875, 0.001953125, 0.07684326171875, 0.0027313232421875, 0.0088958740234375, 0.1295166015625, 0.001117706298828125, 0.0011739730834960938, 0.0012273788452148438, 0.04296875, 0.403076171875, 0.0003895759582519531, 0.004547119140625, 0.001522064208984375, 0.0030078887939453125, 0.994140625, 0.00481414794921875, 0.08056640625, 0.0284423828125, 0.00045108795166015625, 0.262451171875, 0.0164794921875, 0.00417327880859375, 2.4453125, 1.1279296875, 0.417724609375, 0.0008745193481445312, 0.025634765625, 1.1376953125, 0.1729736328125, 0.0233001708984375, 0.0228729248046875, 0.01332855224609375, 0.0003273487091064453, 0.0001653432846069336, 0.040771484375, 0.15625, 0.00017821788787841797, 0.0909423828125, 7.855892181396484e-05, 0.0260467529296875, 0.00323486328125, 0.034210205078125, 0.01386260986328125], "tokens": [324, 436, 308, 410, 310, 280, 225, 36, 45, 310, 2511, 2532, 45, 3311, 96, 27, 301, 400, 667, 77, 96, 79, 280, 667, 77, 96, 429, 225, 35, 79, 319, 310, 319, 667, 77, 35, 79, 517, 308, 96, 429, 225, 35, 293, 324, 320, 291, 320, 584, 434, 4871, 667]}
{"line_number": 1389, "line_type": "original", "code": "        double[] tmp2 = new double[getSize()];", "entropy": 1.9814453125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [6.5703125, 5.4453125, 2.8984375, 1.03515625, 4.2109375, 0.0950927734375, 0.16796875, 0.0014657974243164062, 0.0080413818359375, 1.3544921875, 0.0026397705078125], "tokens": [351, 2064, 1178, 3691, 36, 280, 537, 2064, 77, 24619, 22086]}
{"line_number": 1389, "line_type": "generated", "code": "\n                function[i] = function[i - 1] * operand[operandOffset + i - 1] + function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result", "entropy": 0.12359619140625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.0640869140625, 0.31787109375, 0.0005307197570800781, 0.00702667236328125, 0.003910064697265625, 0.006519317626953125, 0.93359375, 0.003002166748046875, 0.028656005859375, 0.04766845703125, 0.00038170814514160156, 0.3349609375, 0.043304443359375, 0.00972747802734375, 1.4482421875, 0.0032253265380859375, 0.002197265625, 5.733966827392578e-05, 1.748046875, 0.106689453125, 0.00527191162109375, 0.0008511543273925781, 0.08770751953125, 0.299560546875, 0.2196044921875, 0.310302734375, 0.000255584716796875, 0.0008111000061035156, 0.00021600723266601562, 0.0009860992431640625, 0.00018072128295898438, 0.100341796875, 0.1351318359375, 0.00022399425506591797, 0.030975341796875, 9.560585021972656e-05, 0.0291290283203125, 0.004680633544921875, 0.050628662109375, 0.01525115966796875, 0.00024700164794921875, 0.00713348388671875, 0.0020904541015625, 0.0014467239379882812, 0.00732421875, 0.00011610984802246094, 0.00019097328186035156, 1.5854835510253906e-05, 0.0014162063598632812, 0.0012073516845703125, 3.7789344787597656e-05, 0.0013580322265625], "tokens": [400, 667, 77, 91, 79, 280, 667, 77, 91, 429, 225, 35, 79, 319, 19236, 77, 14065, 3457, 474, 595, 429, 225, 35, 79, 474, 667, 77, 91, 429, 225, 36, 970, 324, 320, 291, 320, 584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056]}
{"line_number": 1390, "line_type": "original", "code": "        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2", "entropy": 1.2431640625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [4.29296875, 9.5703125, 0.041473388671875, 5.44140625, 0.0872802734375, 0.1270751953125, 0.0016050338745117188, 0.0100250244140625, 2.17578125, 0.0155181884765625, 0.01206207275390625, 0.0004286766052246094, 0.004917144775390625, 0.6396484375, 2.390625, 0.007381439208984375, 0.043182373046875, 0.0033283233642578125, 0.00734710693359375, 2.38671875, 0.003154754638671875, 0.60107421875, 1.5693359375, 0.396728515625], "tokens": [351, 22213, 26, 107, 30, 533, 3457, 30, 533, 30, 533, 3457, 30, 3691, 36, 30, 225, 34, 293, 647, 434, 533, 80, 36]}
{"line_number": 1390, "line_type": "generated", "code": "\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param", "entropy": 0.0129241943359375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.11956787109375, 0.00032258033752441406, 0.0712890625, 0.00011014938354492188, 0.0289154052734375, 0.00399017333984375, 0.052978515625, 0.016632080078125, 0.0002846717834472656, 0.00689697265625, 0.0018558502197265625, 0.0011768341064453125, 0.0029125213623046875, 7.545948028564453e-05, 0.0001647472381591797, 1.0967254638671875e-05, 0.00023555755615234375, 0.0014781951904296875, 3.802776336669922e-05, 0.0017366409301757812, 2.6702880859375e-05, 0.00021386146545410156, 6.103515625e-05, 0.0007648468017578125, 0.01351165771484375, 7.736682891845703e-05, 0.021942138671875, 0.00223541259765625, 0.10107421875, 0.1385498046875, 0.00030517578125, 1.3113021850585938e-06, 0.0660400390625, 4.076957702636719e-05, 0.001781463623046875, 0.0016736984252929688, 0.0006885528564453125, 0.0004467964172363281, 0.0016431808471679688, 0.00116729736328125, 2.2649765014648438e-05, 0.004787445068359375, 9.417533874511719e-06, 0.0008606910705566406, 0.0002613067626953125, 0.000637054443359375, 0.0002772808074951172, 0.0015134811401367188, 0.00020694732666015625, 9.262561798095703e-05, 5.1021575927734375e-05, 2.8967857360839844e-05], "tokens": [324, 320, 291, 320, 584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293, 446, 320, 446, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753]}
{"line_number": 1391, "line_type": "original", "code": "        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2", "entropy": 1.17578125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [6.11328125, 7.484375, 0.0496826171875, 5.76171875, 0.69091796875, 0.0043182373046875, 0.049652099609375, 0.0256500244140625, 0.0010395050048828125, 0.58544921875, 0.46728515625, 0.0008635520935058594, 0.007724761962890625, 0.006153106689453125, 0.003326416015625, 0.54052734375, 1.4970703125, 0.007717132568359375, 0.1363525390625, 0.02252197265625, 0.006557464599609375, 5.69921875, 0.0008635520935058594, 1.8564453125, 2.755859375, 0.09326171875, 1.2080078125, 0.187744140625, 0.0038585662841796875, 0.00066375732421875], "tokens": [351, 1015, 26, 2868, 35, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 293, 423, 434, 816, 80, 36, 474, 533, 80, 36]}
{"line_number": 1391, "line_type": "generated", "code": "\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset", "entropy": 0.01392364501953125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.160400390625, 0.0111846923828125, 0.080078125, 0.0082244873046875, 0.0684814453125, 0.0168609619140625, 0.0003132820129394531, 0.00792694091796875, 0.001949310302734375, 0.0012664794921875, 0.003078460693359375, 6.508827209472656e-05, 0.0001558065414428711, 1.1563301086425781e-05, 0.00024008750915527344, 0.0013027191162109375, 3.814697265625e-05, 0.0017671585083007812, 2.3603439331054688e-05, 0.00023925304412841797, 6.020069122314453e-05, 0.001010894775390625, 0.02099609375, 0.0001024007797241211, 0.02362060546875, 0.002071380615234375, 0.0992431640625, 0.1322021484375, 0.0003046989440917969, 1.1920928955078125e-06, 0.0635986328125, 4.303455352783203e-05, 0.0016393661499023438, 0.0015230178833007812, 0.0006155967712402344, 0.0004208087921142578, 0.0015859603881835938, 0.001171112060546875, 2.7298927307128906e-05, 0.00525665283203125, 1.0013580322265625e-05, 0.0007405281066894531, 0.0002663135528564453, 0.000637054443359375, 0.0002269744873046875, 0.0014390945434570312, 0.00021135807037353516, 7.867813110351562e-05, 5.424022674560547e-05, 8.702278137207031e-06, 0.0013895034790039062, 0.00010764598846435547], "tokens": [291, 320, 584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293, 446, 320, 446, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457]}
{"line_number": 1392, "line_type": "original", "code": "        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)", "entropy": 1.8046875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [7.30078125, 12.7578125, 1.0986328125, 1.0224609375, 6.609375, 2.306640625, 0.0592041015625, 0.85302734375, 0.055999755859375, 0.0272979736328125, 3.275390625, 1.6123046875, 1.2119140625, 3.15234375, 0.489501953125, 0.138671875, 0.03472900390625, 0.0246124267578125, 0.55078125, 5.9609375, 0.0006136894226074219, 5.82421875, 0.51806640625, 0.419189453125, 0.03765869140625, 0.8017578125, 0.6552734375, 0.0008263587951660156, 0.46142578125, 2.26171875, 0.0016527175903320312, 0.0003771781921386719, 0.052215576171875], "tokens": [351, 3051, 64, 26, 2868, 36, 30, 225, 34, 30, 225, 36, 30, 3691, 35, 30, 225, 34, 293, 6022, 434, 540, 280, 17058, 26, 106, 80, 36, 474, 533, 80, 36, 27]}
{"line_number": 1392, "line_type": "generated", "code": "\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of", "entropy": 0.0117645263671875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.08172607421875, 0.046661376953125, 0.09326171875, 0.021392822265625, 0.0003731250762939453, 0.0105743408203125, 0.003192901611328125, 0.0022792816162109375, 0.0033054351806640625, 7.95125961303711e-05, 0.00017309188842773438, 1.537799835205078e-05, 0.0002357959747314453, 0.0016832351684570312, 4.208087921142578e-05, 0.00182342529296875, 2.5391578674316406e-05, 0.00025963783264160156, 7.43865966796875e-05, 0.0011320114135742188, 0.0196075439453125, 0.00010514259338378906, 0.024322509765625, 0.0021305084228515625, 0.09564208984375, 0.1195068359375, 0.000278472900390625, 1.3113021850585938e-06, 0.06463623046875, 4.076957702636719e-05, 0.0016584396362304688, 0.0014781951904296875, 0.000659942626953125, 0.0003886222839355469, 0.00156402587890625, 0.0011615753173828125, 1.9073486328125e-05, 0.0048065185546875, 1.0728836059570312e-05, 0.0007748603820800781, 0.0002524852752685547, 0.0006175041198730469, 0.00023365020751953125, 0.00151824951171875, 0.0002027750015258789, 8.07046890258789e-05, 6.651878356933594e-05, 5.245208740234375e-06, 0.001377105712890625, 0.00010371208190917969, 0.00010061264038085938, 1.3828277587890625e-05], "tokens": [584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293, 446, 320, 446, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432]}
{"line_number": 1394, "line_type": "original", "code": "        if (x[xOffset] >= 0) {", "entropy": 1.443359375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [5.02734375, 2.611328125, 0.1085205078125, 4.87890625, 1.7490234375, 0.6533203125, 0.0169525146484375, 0.1309814453125, 3.330078125, 0.049346923828125, 0.0207977294921875, 0.1552734375, 0.037872314453125], "tokens": [351, 415, 308, 106, 77, 106, 3457, 79, 2377, 225, 34, 27, 301]}
{"line_number": 1394, "line_type": "generated", "code": "\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array", "entropy": 0.0374755859375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.74609375, 0.57666015625, 0.0311279296875, 0.0186004638671875, 0.0005311965942382812, 0.0012416839599609375, 0.00011277198791503906, 0.002471923828125, 0.0110321044921875, 0.0003407001495361328, 0.0123443603515625, 0.0002753734588623047, 0.0015239715576171875, 8.440017700195312e-05, 0.002834320068359375, 0.1749267578125, 0.0034027099609375, 0.0308074951171875, 0.0040435791015625, 0.11376953125, 0.1248779296875, 0.0003044605255126953, 1.5497207641601562e-06, 0.0703125, 4.398822784423828e-05, 0.0017919540405273438, 0.0017414093017578125, 0.0008649826049804688, 0.0005512237548828125, 0.001720428466796875, 0.0016374588012695312, 2.9802322387695312e-05, 0.0055389404296875, 1.2516975402832031e-05, 0.0008931159973144531, 0.0002894401550292969, 0.0007653236389160156, 0.0003037452697753906, 0.00157928466796875, 0.0002238750457763672, 8.809566497802734e-05, 4.184246063232422e-05, 1.9311904907226562e-05, 0.0014162063598632812, 0.00013637542724609375, 0.00011491775512695312, 2.181529998779297e-05, 1.811981201171875e-05, 0.00024175643920898438, 7.82012939453125e-05, 0.0003075599670410156, 6.663799285888672e-05], "tokens": [291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293, 446, 320, 446, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417]}
{"line_number": 1397, "line_type": "original", "code": "            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x", "entropy": 1.0126953125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [8.0859375, 5.78515625, 0.11566162109375, 1.4111328125, 0.437255859375, 0.0036468505859375, 0.01971435546875, 0.01313018798828125, 0.0012416839599609375, 2.154296875, 0.03009033203125, 0.024993896484375, 0.0006957054138183594, 0.001857757568359375, 0.0950927734375, 0.65673828125, 0.0009336471557617188, 0.01227569580078125, 0.0023937225341796875, 0.004268646240234375, 5.0234375, 0.01708984375, 1.17578125, 0.25048828125, 0.01149749755859375], "tokens": [1468, 1015, 26, 2868, 35, 30, 225, 34, 30, 816, 30, 816, 3457, 30, 3691, 36, 30, 225, 34, 293, 2033, 434, 540, 474, 816]}
{"line_number": 1397, "line_type": "generated", "code": "\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperb", "entropy": 0.024200439453125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.64453125, 0.036224365234375, 0.148681640625, 0.240966796875, 0.0003292560577392578, 3.2186508178710938e-06, 0.1446533203125, 7.295608520507812e-05, 0.002719879150390625, 0.0031375885009765625, 0.0022716522216796875, 0.0006451606750488281, 0.003040313720703125, 0.004764556884765625, 6.520748138427734e-05, 0.00875091552734375, 3.886222839355469e-05, 0.0012445449829101562, 0.00031948089599609375, 0.0007452964782714844, 0.0002982616424560547, 0.0014429092407226562, 0.0002722740173339844, 5.8770179748535156e-05, 0.00023126602172851562, 3.0994415283203125e-06, 0.001811981201171875, 9.930133819580078e-05, 8.881092071533203e-05, 4.9233436584472656e-05, 6.794929504394531e-06, 0.00018537044525146484, 5.5789947509765625e-05, 0.00022411346435546875, 5.4836273193359375e-05, 0.00017547607421875, 7.128715515136719e-05, 0.00020825862884521484, 0.0002503395080566406, 0.00011396408081054688, 0.00010728836059570312, 2.288818359375e-05, 0.0003139972686767578, 6.413459777832031e-05, 0.00013828277587890625, 9.369850158691406e-05, 0.0026454925537109375, 0.00026607513427734375, 0.0035381317138671875, 0.00012695789337158203, 0.0019245147705078125, 0.00028777122497558594], "tokens": [284, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84]}
{"line_number": 1398, "line_type": "original", "code": "            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)", "entropy": 0.8564453125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [8.453125, 9.9375, 0.1082763671875, 2.298828125, 0.0222930908203125, 0.0433349609375, 0.001087188720703125, 0.003154754638671875, 0.2353515625, 0.2276611328125, 0.0012226104736328125, 0.005008697509765625, 0.002391815185546875, 0.001934051513671875, 0.0438232421875, 0.02276611328125, 0.0014753341674804688, 0.0013103485107421875, 0.00029277801513671875, 0.00589752197265625, 0.22998046875, 0.0021648406982421875, 0.016998291015625, 0.006908416748046875, 0.06610107421875, 0.0088348388671875, 3.080078125, 0.005016326904296875, 0.0118560791015625], "tokens": [1468, 24910, 26, 107, 30, 533, 3457, 30, 3691, 36, 30, 225, 34, 30, 3691, 35, 30, 225, 34, 293, 958, 434, 533, 517, 26, 100, 474, 816, 27]}
{"line_number": 1398, "line_type": "generated", "code": "\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperb", "entropy": 0.0225372314453125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.390625, 0.03924560546875, 0.17041015625, 0.326416015625, 0.00031304359436035156, 3.6954879760742188e-06, 0.1907958984375, 8.797645568847656e-05, 0.0034351348876953125, 0.004810333251953125, 0.003692626953125, 0.0006814002990722656, 0.003673553466796875, 0.00536346435546875, 9.107589721679688e-05, 0.01190948486328125, 5.793571472167969e-05, 0.0016756057739257812, 0.0003814697265625, 0.00083160400390625, 0.00043845176696777344, 0.001682281494140625, 0.000308990478515625, 7.271766662597656e-05, 6.115436553955078e-05, 4.291534423828125e-06, 0.0021991729736328125, 0.00010251998901367188, 8.630752563476562e-05, 5.054473876953125e-05, 6.198883056640625e-06, 0.00019085407257080078, 5.3882598876953125e-05, 0.0002390146255493164, 6.842613220214844e-05, 0.00017178058624267578, 0.00010514259338378906, 0.00034737586975097656, 0.00040411949157714844, 0.00014662742614746094, 0.00012493133544921875, 2.8252601623535156e-05, 0.0003600120544433594, 7.545948028564453e-05, 6.222724914550781e-05, 8.630752563476562e-05, 0.003093719482421875, 0.0002970695495605469, 0.004436492919921875, 0.0001423358917236328, 0.00199127197265625, 0.00027108192443847656], "tokens": [284, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84]}
{"line_number": 1399, "line_type": "original", "code": "            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))", "entropy": 1.259765625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [8.3828125, 10.0, 1.083984375, 9.0, 0.252685546875, 0.134033203125, 0.07806396484375, 0.0024814605712890625, 0.00202178955078125, 0.0418701171875, 0.0614013671875, 0.0022907257080078125, 0.0018978118896484375, 0.00264739990234375, 0.01033782958984375, 1.1171875, 0.0058135986328125, 0.02899169921875, 0.024993896484375, 0.187255859375, 0.00972747802734375, 0.0088958740234375, 0.007411956787109375, 2.28125, 0.0010528564453125, 0.007110595703125], "tokens": [1468, 43191, 26, 2868, 35, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 293, 6022, 434, 43191, 26, 107, 517, 308, 100, 474, 816, 490]}
{"line_number": 1399, "line_type": "generated", "code": "\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic sine the result array <em>cannot</em>", "entropy": 0.01049041748046875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.2445068359375, 0.0054473876953125, 0.0175628662109375, 0.001102447509765625, 0.006805419921875, 0.001972198486328125, 0.0015096664428710938, 0.00074005126953125, 0.003997802734375, 0.0660400390625, 0.00018203258514404297, 0.00034928321838378906, 6.794929504394531e-05, 0.004619598388671875, 0.00017964839935302734, 0.00018143653869628906, 7.355213165283203e-05, 7.76052474975586e-05, 0.0003802776336669922, 7.331371307373047e-05, 0.0004203319549560547, 0.0002741813659667969, 0.051361083984375, 0.00028634071350097656, 0.0008873939514160156, 0.0012617111206054688, 0.0003986358642578125, 0.0003178119659423828, 7.49826431274414e-05, 0.0008797645568847656, 0.0001367330551147461, 0.00014662742614746094, 0.00014078617095947266, 0.004730224609375, 0.00046563148498535156, 0.01953125, 8.594989776611328e-05, 0.00409698486328125, 0.0003190040588378906, 1.5497207641601562e-06, 0.09893798828125, 4.315376281738281e-05, 0.0014219284057617188, 0.00021696090698242188, 0.0003070831298828125, 0.0022678375244140625, 3.933906555175781e-06, 7.259845733642578e-05, 0.00030922889709472656, 0.0002313852310180664, 3.6597251892089844e-05, 2.3126602172851562e-05], "tokens": [275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84, 2073, 309, 482, 322, 1056, 1417, 333, 405, 48, 18506, 377, 405, 48]}
{"line_number": 1400, "line_type": "original", "code": "            for (int i = 0; i < tmp2.length; ++i) {", "entropy": 0.9326171875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [6.13671875, 6.5078125, 0.381103515625, 0.0161590576171875, 0.32763671875, 0.005817413330078125, 0.1873779296875, 0.036102294921875, 0.032958984375, 0.003406524658203125, 0.040618896484375, 3.431640625, 1.34765625, 0.0175018310546875, 0.006877899169921875, 0.016204833984375, 0.035308837890625, 0.0016193389892578125, 0.0036334991455078125, 0.1204833984375], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 3691, 36, 32, 1322, 45, 3311, 91, 27, 301]}
{"line_number": 1400, "line_type": "generated", "code": "\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic sine the result array <em>cannot</em> be the input\n     * array)\n     *", "entropy": 0.020721435546875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.426513671875, 0.0264434814453125, 0.002685546875, 0.0007953643798828125, 0.0701904296875, 0.001377105712890625, 0.0008568763732910156, 0.0001785755157470703, 0.00015914440155029297, 0.0015201568603515625, 0.0010652542114257812, 0.0006918907165527344, 0.0004940032958984375, 0.254150390625, 0.0005450248718261719, 0.0007119178771972656, 0.0011720657348632812, 0.0008082389831542969, 0.00045943260192871094, 9.703636169433594e-05, 0.0012216567993164062, 0.00018906593322753906, 9.059906005859375e-06, 0.0001577138900756836, 0.00807952880859375, 0.0005688667297363281, 0.0159912109375, 5.91278076171875e-05, 0.0038814544677734375, 0.0003666877746582031, 6.198883056640625e-06, 0.09222412109375, 3.5881996154785156e-05, 0.001316070556640625, 0.00022304058074951172, 0.0003199577331542969, 0.0029201507568359375, 3.5762786865234375e-06, 7.140636444091797e-05, 0.0003743171691894531, 0.00028896331787109375, 6.318092346191406e-05, 8.0108642578125e-05, 0.00809478759765625, 0.0030612945556640625, 0.00921630859375, 0.07061767578125, 1.7523765563964844e-05, 0.0009307861328125, 0.0024280548095703125, 0.0626220703125, 0.0010251998901367188], "tokens": [275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84, 2073, 309, 482, 322, 1056, 1417, 333, 405, 48, 18506, 377, 405, 48, 526, 322, 1509, 275, 319, 1417, 27, 275, 319]}
{"line_number": 1401, "line_type": "original", "code": "                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))", "entropy": 1.017578125, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [6.67578125, 1.830078125, 3.001953125, 0.054168701171875, 0.0016927719116210938, 1.515625, 0.8271484375, 0.03900146484375, 0.06536865234375, 2.701171875, 2.27734375, 0.11566162109375, 2.642578125, 0.3984375, 0.0133209228515625, 0.023895263671875, 0.0679931640625, 0.22607421875, 2.4921875, 0.0306396484375, 0.75537109375, 2.447265625, 0.0218963623046875, 0.0638427734375, 0.00948333740234375, 0.00984954833984375, 0.0177154541015625, 2.158203125, 0.0111236572265625, 0.01314544677734375], "tokens": [2071, 1056, 77, 1267, 3457, 474, 595, 79, 280, 225, 36, 319, 3691, 36, 77, 91, 970, 434, 225, 36, 319, 43191, 26, 107, 517, 308, 100, 474, 816, 490]}
{"line_number": 1401, "line_type": "generated", "code": "\n     * @param result array where result must be stored (for\n     * hyperbolic sine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */", "entropy": 0.0230865478515625, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [0.4208984375, 0.2176513671875, 0.0052642822265625, 0.0032482147216796875, 0.004436492919921875, 0.0009427070617675781, 0.0001647472381591797, 0.002086639404296875, 0.00028252601623535156, 1.4901161193847656e-05, 0.0002853870391845703, 0.010040283203125, 0.0006575584411621094, 0.0201416015625, 0.00012218952178955078, 0.0036830902099609375, 0.0003314018249511719, 3.337860107421875e-06, 0.10382080078125, 3.5643577575683594e-05, 0.0014829635620117188, 0.00022983551025390625, 0.0002942085266113281, 0.0030059814453125, 1.704692840576172e-05, 7.30752944946289e-05, 0.0005488395690917969, 0.00035858154296875, 2.6226043701171875e-05, 0.00011551380157470703, 0.00876617431640625, 0.003055572509765625, 0.0080108642578125, 0.0606689453125, 3.8743019104003906e-05, 0.0008006095886230469, 0.0028095245361328125, 0.08819580078125, 0.0036792755126953125, 0.00042819976806640625, 8.606910705566406e-05, 0.00022852420806884766, 8.666515350341797e-05, 0.0002989768981933594, 4.1961669921875e-05, 6.580352783203125e-05, 0.0005064010620117188, 7.700920104980469e-05, 0.00011289119720458984, 8.869171142578125e-05, 0.214111328125, 0.007450103759765625], "tokens": [275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84, 2073, 309, 482, 322, 1056, 1417, 333, 405, 48, 18506, 377, 405, 48, 526, 322, 1509, 275, 319, 1417, 27, 275, 319, 477, 753, 1056, 3457, 3401, 432, 322, 1056, 328, 2819, 1417, 275, 569]}
{"line_number": 1420, "line_type": "original", "code": "    }", "entropy": 2.419921875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [4.08984375, 0.7509765625], "tokens": [264, 320]}
{"line_number": 1420, "line_type": "generated", "code": "\n\n    /** Compute hyperbolic tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic", "entropy": 0.00847625732421875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.34228515625, 0.01320648193359375, 0.033477783203125, 0.01166534423828125, 6.091594696044922e-05, 1.6689300537109375e-06, 0.0151214599609375, 0.0006580352783203125, 0.0012340545654296875, 0.0009150505065917969, 0.0003314018249511719, 0.0013475418090820312, 0.0017786026000976562, 2.574920654296875e-05, 0.005756378173828125, 2.5510787963867188e-05, 0.00225830078125, 0.00029277801513671875, 0.0001825094223022461, 0.00012934207916259766, 0.0011348724365234375, 0.00026488304138183594, 5.364418029785156e-06, 3.993511199951172e-05, 2.86102294921875e-06, 0.00124359130859375, 9.02414321899414e-05, 0.00010657310485839844, 1.6450881958007812e-05, 2.3245811462402344e-05, 0.00013434886932373047, 3.3974647521972656e-05, 0.00011420249938964844, 0.00014913082122802734, 0.00011086463928222656, 3.0040740966796875e-05, 0.0001239776611328125, 4.887580871582031e-05, 7.82012939453125e-05, 9.799003601074219e-05, 1.8596649169921875e-05, 0.00023639202117919922, 2.6464462280273438e-05, 2.09808349609375e-05, 3.6597251892089844e-05, 0.001552581787109375, 0.00024116039276123047, 0.0021343231201171875, 0.00011301040649414062, 0.001537322998046875, 0.00010943412780761719, 1.1920928955078125e-07], "tokens": [446, 1022, 12836, 15223, 84, 2073, 48285, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84, 2073]}
{"line_number": 1347, "line_type": "original", "code": "                double v = 0;", "entropy": 2.529296875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.140625, 2.005859375, 4.23046875, 0.2880859375, 1.83203125, 1.90234375, 0.309326171875], "tokens": [2071, 2064, 354, 280, 225, 34, 45]}
{"line_number": 1347, "line_type": "generated", "code": "\n            double[] function = new double[1 + order];\n            final double r = tmp1[0];\n            final double f = 1.0 / (r + x[xOffset]);\n            final double coeff = f;\n            function[0]", "entropy": 0.2958984375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.130615234375, 1.19140625, 0.14892578125, 1.474609375, 0.05413818359375, 0.00739288330078125, 0.00016820430755615234, 0.007549285888671875, 0.65283203125, 0.004940032958984375, 0.01390838623046875, 0.02362060546875, 0.0290374755859375, 1.6044921875, 0.00685882568359375, 0.7626953125, 0.89013671875, 0.0919189453125, 0.0019435882568359375, 0.000789642333984375, 0.07122802734375, 0.037384033203125, 0.04400634765625, 0.720703125, 0.001827239990234375, 1.2421875, 0.1226806640625, 0.26708984375, 0.63916015625, 0.0830078125, 0.01039886474609375, 0.0064544677734375, 0.0181121826171875, 0.1158447265625, 0.005504608154296875, 0.0186004638671875, 0.002239227294921875, 0.0021076202392578125, 2.3603439331054688e-05, 0.005649566650390625, 0.0185546875, 1.830078125, 0.006500244140625, 1.927734375, 0.0693359375, 0.4794921875, 0.288818359375, 0.02239990234375, 0.17333984375, 0.0002410411834716797, 0.06488037109375, 0.00021898746490478516], "tokens": [324, 2064, 1178, 667, 280, 537, 2064, 77, 35, 474, 2532, 970, 324, 1158, 2064, 540, 280, 3691, 35, 77, 34, 970, 324, 1158, 2064, 296, 280, 225, 35, 32, 34, 517, 308, 100, 474, 816, 77, 106, 3457, 1989, 324, 1158, 2064, 35139, 280, 296, 45, 324, 667, 77, 34, 79]}
{"line_number": 1348, "line_type": "original", "code": "                q[n - 1] = -n * q[n - 2];", "entropy": 1.67578125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [5.9296875, 10.640625, 2.69921875, 2.076171875, 0.970703125, 0.0221710205078125, 0.3310546875, 0.015167236328125, 0.13037109375, 4.01953125, 2.94140625, 0.2578125, 0.0692138671875, 0.0024929046630859375, 0.0156707763671875, 0.384765625, 0.0010128021240234375, 0.47900390625, 0.86279296875], "tokens": [2071, 2678, 77, 96, 429, 225, 35, 79, 280, 429, 96, 319, 2678, 77, 96, 429, 225, 36, 970]}
{"line_number": 1348, "line_type": "generated", "code": "\n            multiply(y, yOffset, tmp2, 0, tmp2, 0);     // y / (r + x)\n            atan(tmp2, 0, tmp2, 0);                    // 2 atan(y /", "entropy": 0.1356201171875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.1490478515625, 0.68603515625, 0.007747650146484375, 0.1285400390625, 0.00043463706970214844, 0.0051727294921875, 1.6689300537109375e-05, 0.00015151500701904297, 0.01605224609375, 0.050994873046875, 0.00020587444305419922, 0.0023593902587890625, 3.421306610107422e-05, 0.0002810955047607422, 0.175048828125, 0.387939453125, 0.00013685226440429688, 0.003021240234375, 0.00074005126953125, 0.0010204315185546875, 0.98046875, 4.9114227294921875e-05, 0.042938232421875, 0.59814453125, 0.030120849609375, 0.002376556396484375, 0.01175689697265625, 0.0005884170532226562, 0.0023250579833984375, 0.173095703125, 0.153564453125, 0.006443023681640625, 0.0004208087921142578, 0.0004203319549560547, 8.559226989746094e-05, 0.0010318756103515625, 1.1205673217773438e-05, 0.00015115737915039062, 0.214111328125, 0.7021484375, 7.963180541992188e-05, 0.0012359619140625, 0.0004203319549560547, 0.00024044513702392578, 1.197265625, 3.4928321838378906e-05, 1.04296875, 0.004795074462890625, 0.23779296875, 0.01528167724609375, 0.0074462890625, 0.01064300537109375], "tokens": [324, 22213, 26, 107, 30, 533, 3457, 30, 3691, 36, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 293, 262, 434, 533, 517, 308, 100, 474, 816, 27, 324, 43191, 26, 2868, 36, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 293, 4696, 434, 225, 36, 43191, 26, 107, 517]}
{"line_number": 1349, "line_type": "original", "code": "                for (int k = n - 1; k >= 0; k -= 2) {", "entropy": 1.0859375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [5.1640625, 5.92578125, 0.0220947265625, 0.032073974609375, 2.3046875, 0.00782012939453125, 4.20703125, 0.544921875, 0.038726806640625, 0.05230712890625, 0.0205841064453125, 0.01351165771484375, 0.0999755859375, 0.04180908203125, 0.1041259765625, 0.0132904052734375, 2.318359375, 2.779296875, 0.00485992431640625, 0.08416748046875, 0.003604888916015625, 0.10223388671875], "tokens": [2071, 436, 308, 410, 831, 280, 310, 429, 225, 35, 45, 831, 2377, 225, 34, 45, 831, 5912, 225, 36, 27, 301]}
{"line_number": 1349, "line_type": "generated", "code": "\n            atan(tmp1, 0, tmp2, 0);                    // atan(y / (r + x))", "entropy": 0.1551513671875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.429443359375, 0.255859375, 0.0081787109375, 0.00910186767578125, 0.00279998779296875, 0.0037479400634765625, 0.0096435546875, 8.71419906616211e-05, 0.0007605552673339844, 0.457275390625, 0.51123046875, 0.0007929801940917969, 0.007541656494140625, 0.002349853515625, 0.0027942657470703125, 1.21875, 0.0003428459167480469, 0.88818359375, 0.0460205078125, 0.0479736328125, 0.061431884765625, 0.0389404296875, 0.0023555755615234375, 0.0038909912109375, 0.0007090568542480469, 0.0235137939453125], "tokens": [324, 43191, 26, 2868, 35, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 293, 4696, 434, 43191, 26, 107, 517, 308, 100, 474, 816, 490]}
{"line_number": 1350, "line_type": "original", "code": "                    v = v * x2 + q[k];", "entropy": 3.734375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.30078125, 7.86328125, 0.50732421875, 3.609375, 0.259033203125, 6.8359375, 1.51171875, 3.923828125, 4.796875, 1.63671875, 4.7421875, 1.83203125], "tokens": [4696, 354, 280, 354, 319, 816, 36, 474, 2678, 77, 93, 970]}
{"line_number": 1350, "line_type": "generated", "code": "\n            multiply(tmp2, 0, 2, tmp2, 0);              // 2 * atan(y / (r + x))\n\n        } else {\n\n            // compute atan2(y, x) = 2 atan(y", "entropy": 0.079345703125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.2060546875, 0.129150390625, 0.0058135986328125, 0.1573486328125, 0.032989501953125, 0.0005888938903808594, 0.00926971435546875, 0.000652313232421875, 0.001194000244140625, 0.346923828125, 0.0158538818359375, 0.46142578125, 0.125244140625, 0.1513671875, 0.004192352294921875, 0.02227783203125, 0.0025043487548828125, 0.0250396728515625, 0.6240234375, 0.0003147125244140625, 0.0341796875, 0.0002110004425048828, 0.58154296875, 0.01279449462890625, 0.0171661376953125, 0.0024929046630859375, 0.01094818115234375, 0.008544921875, 0.0007715225219726562, 0.001277923583984375, 0.0005640983581542969, 0.00919342041015625, 0.63330078125, 0.000591278076171875, 0.00312042236328125, 0.06903076171875, 0.0267333984375, 0.00818634033203125, 0.033660888671875, 0.01222991943359375, 0.00771331787109375, 0.003078460693359375, 0.0023956298828125, 0.0008988380432128906, 0.0077667236328125, 0.00038504600524902344, 0.0172271728515625, 0.248779296875, 0.0030155181884765625, 0.0311279296875, 0.004970550537109375, 0.0078277587890625], "tokens": [324, 22213, 26, 2868, 36, 30, 225, 34, 30, 225, 36, 30, 3691, 36, 30, 225, 34, 293, 2850, 434, 225, 36, 319, 43191, 26, 107, 517, 308, 100, 474, 816, 490, 584, 320, 813, 301, 1064, 434, 7596, 43191, 36, 26, 107, 30, 816, 27, 280, 225, 36, 43191, 26, 107]}
{"line_number": 1351, "line_type": "original", "code": "                    if (k > 2) {", "entropy": 3.21875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.7265625, 5.75, 0.11444091796875, 7.65234375, 2.865234375, 0.151611328125, 3.28125, 0.284912109375, 0.136474609375], "tokens": [4696, 415, 308, 93, 848, 225, 36, 27, 301]}
{"line_number": 1351, "line_type": "generated", "code": "\n                result[resultOffset + i] = 2 * tmp2[i];\n            }\n\n        } else {\n\n            // compute atan2(y, x) = 2 atan(y / (r - x))\n            subtract(tmp1, ", "entropy": 0.07342529296875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.061920166015625, 0.2464599609375, 0.0024585723876953125, 0.2122802734375, 0.00020825862884521484, 0.115234375, 0.00585174560546875, 0.0025157928466796875, 0.02618408203125, 1.0615234375, 0.01427459716796875, 0.033538818359375, 0.00579071044921875, 0.0004208087921142578, 0.0004029273986816406, 0.00835418701171875, 0.00432586669921875, 0.15185546875, 0.00830841064453125, 0.1434326171875, 0.0003402233123779297, 0.00333404541015625, 0.12091064453125, 0.023773193359375, 0.0145111083984375, 0.035186767578125, 0.01165008544921875, 0.009735107421875, 0.004352569580078125, 0.00289154052734375, 0.00086212158203125, 0.0091094970703125, 0.0004258155822753906, 0.0131072998046875, 0.34814453125, 0.0056610107421875, 0.03466796875, 0.0043487548828125, 0.00864410400390625, 0.0014858245849609375, 0.0088043212890625, 0.038665771484375, 0.0013933181762695312, 0.0013227462768554688, 0.01116943359375, 0.876953125, 0.1114501953125, 0.0007033348083496094, 0.004970550537109375, 0.004711151123046875, 3.147125244140625e-05, 0.0005326271057128906], "tokens": [400, 1056, 77, 1267, 3457, 474, 595, 79, 280, 225, 36, 319, 3691, 36, 77, 91, 970, 324, 320, 584, 320, 813, 301, 1064, 434, 7596, 43191, 36, 26, 107, 30, 816, 27, 280, 225, 36, 43191, 26, 107, 517, 308, 100, 429, 816, 490, 324, 27799, 26, 2868, 35, 30, 225]}
{"line_number": 1353, "line_type": "original", "code": "                    } else if (k == 2) {", "entropy": 2.974609375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.5078125, 3.662109375, 0.63037109375, 3.9375, 0.0255279541015625, 11.9921875, 0.447021484375, 0.18994140625, 2.08984375, 0.188720703125, 0.03497314453125], "tokens": [4696, 320, 813, 415, 308, 93, 610, 225, 36, 27, 301]}
{"line_number": 1353, "line_type": "generated", "code": "\n\n        } else {\n\n            // compute atan2(y, x) = 2 atan(y / (r - x)) - pi\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r -", "entropy": 0.06866455078125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.26171875, 0.00031948089599609375, 0.00634002685546875, 0.0919189453125, 0.0231475830078125, 0.011322021484375, 0.036468505859375, 0.011077880859375, 0.009429931640625, 0.004909515380859375, 0.0034999847412109375, 0.0008983612060546875, 0.00804901123046875, 0.0004069805145263672, 0.01338958740234375, 0.37255859375, 0.006214141845703125, 0.035919189453125, 0.006072998046875, 0.01366424560546875, 0.0017976760864257812, 0.01009368896484375, 0.046112060546875, 0.001560211181640625, 0.0012445449829101562, 0.010528564453125, 1.35546875, 0.2147216796875, 0.0872802734375, 0.39599609375, 0.0008420944213867188, 0.006038665771484375, 0.004108428955078125, 3.0279159545898438e-05, 0.0006685256958007812, 2.8967857360839844e-05, 0.0002129077911376953, 0.0007524490356445312, 9.131431579589844e-05, 0.00038313865661621094, 3.075599670410156e-05, 0.0001837015151977539, 0.0025920867919921875, 0.013885498046875, 0.00011658668518066406, 0.00028634071350097656, 3.552436828613281e-05, 0.00013744831085205078, 0.48681640625, 7.3909759521484375e-06, 0.004791259765625, 0.0052490234375], "tokens": [584, 320, 813, 301, 1064, 434, 7596, 43191, 36, 26, 107, 30, 816, 27, 280, 225, 36, 43191, 26, 107, 517, 308, 100, 429, 816, 490, 429, 8316, 324, 27799, 26, 2868, 35, 30, 225, 34, 30, 816, 30, 816, 3457, 30, 3691, 36, 30, 225, 34, 293, 262, 434, 540, 429]}
{"line_number": 1357, "line_type": "original", "code": "                if ((n & 0x1) == 0) {", "entropy": 1.3369140625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [3.498046875, 2.546875, 3.90234375, 6.28125, 0.394287109375, 0.149658203125, 1.958984375, 0.04510498046875, 0.35107421875, 0.04766845703125, 0.2783203125, 0.0137786865234375, 0.3486328125, 0.130126953125, 0.09619140625], "tokens": [2071, 415, 1833, 96, 549, 225, 34, 106, 35, 27, 610, 225, 34, 27, 301]}
{"line_number": 1357, "line_type": "generated", "code": "\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r -", "entropy": 0.05780029296875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.7490234375, 1.4345703125, 0.0050506591796875, 0.026123046875, 0.010650634765625, 0.00015282630920410156, 0.002590179443359375, 3.4570693969726562e-06, 0.0001647472381591797, 0.04754638671875, 0.00027680397033691406, 0.001865386962890625, 3.0517578125e-05, 0.0008625984191894531, 0.003421783447265625, 0.013519287109375, 0.0008859634399414062, 0.0015344619750976562, 0.0007185935974121094, 0.00110626220703125, 0.1390380859375, 8.189678192138672e-05, 0.015228271484375, 0.1409912109375, 0.0010747909545898438, 0.101318359375, 0.156005859375, 0.00026917457580566406, 0.0011997222900390625, 3.7550926208496094e-05, 0.0005712509155273438, 3.0994415283203125e-06, 9.179115295410156e-06, 0.0003719329833984375, 0.0009121894836425781, 4.4345855712890625e-05, 0.00013709068298339844, 0.0003407001495361328, 8.273124694824219e-05, 0.00049591064453125, 0.00395965576171875, 5.805492401123047e-05, 0.00018477439880371094, 0.0003032684326171875, 6.771087646484375e-05, 0.003566741943359375, 2.9802322387695312e-05, 0.0035266876220703125, 0.003658294677734375, 0.10980224609375, 0.0005021095275878906, 0.0227813720703125], "tokens": [324, 1015, 26, 2868, 35, 30, 225, 34, 30, 816, 30, 816, 3457, 30, 3691, 36, 30, 225, 34, 293, 2033, 434, 540, 429, 816, 324, 24910, 26, 107, 30, 533, 3457, 30, 3691, 36, 30, 225, 34, 30, 3691, 35, 30, 225, 34, 293, 958, 434, 533, 517, 26, 100, 429]}
{"line_number": 1358, "line_type": "original", "code": "                    v *= x;", "entropy": 5.6953125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [6.546875, 9.1796875, 6.08984375, 5.12890625, 1.521484375], "tokens": [4696, 354, 10439, 816, 45]}
{"line_number": 1358, "line_type": "generated", "code": "\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r", "entropy": 0.0245513916015625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.46728515625, 0.396240234375, 0.0006189346313476562, 0.0015039443969726562, 5.173683166503906e-05, 0.0007395744323730469, 2.5033950805664062e-06, 5.805492401123047e-05, 0.0004074573516845703, 0.0025615692138671875, 7.510185241699219e-05, 0.0003769397735595703, 0.00011980533599853516, 0.00010418891906738281, 0.0006556510925292969, 0.01210784912109375, 8.308887481689453e-05, 0.00016176700592041016, 0.0003445148468017578, 0.0001004934310913086, 0.0128936767578125, 1.6808509826660156e-05, 0.003040313720703125, 0.006153106689453125, 0.1964111328125, 0.0005888938903808594, 0.0338134765625, 0.00064849853515625, 0.0009379386901855469, 0.1021728515625, 0.004329681396484375, 0.0004012584686279297, 9.822845458984375e-05, 0.0016679763793945312, 2.9087066650390625e-05, 0.00016498565673828125, 0.0003764629364013672, 1.609325408935547e-05, 0.0008487701416015625, 0.01396942138671875, 4.57763671875e-05, 0.00016939640045166016, 0.00034499168395996094, 6.330013275146484e-05, 0.0028285980224609375, 7.236003875732422e-05, 0.003780364990234375, 0.001522064208984375, 0.0010919570922851562, 0.0012483596801757812, 0.0032176971435546875, 0.0001062154769897461], "tokens": [324, 24910, 26, 107, 30, 533, 3457, 30, 3691, 36, 30, 225, 34, 30, 3691, 35, 30, 225, 34, 293, 958, 434, 533, 517, 26, 100, 429, 816, 27, 324, 43191, 26, 2868, 35, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 293, 6022, 434, 43191, 26, 107, 517, 308, 100]}
