{"line_number": 291, "line_type": "original", "code": "            return;", "entropy": 6.30859375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [2.3046875, 10.15625, 6.45703125], "tokens": [1468, 442, 45]}
{"line_number": 291, "line_type": "generated", "code": "\n            }\n        }\n        return new RealPointValuePair(new ArrayRealVector(coefficients, false), mostNegative);\n    }\n\n    /**\n     * Gets the number of artificial variables.\n     * @return the number of artificial variables\n     */\n    public", "entropy": 0.30810546875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.55029296875, 0.00571441650390625, 0.036529541015625, 0.0012874603271484375, 0.24072265625, 0.373291015625, 0.02783203125, 0.104248046875, 0.00033974647521972656, 4.601478576660156e-05, 0.0116424560546875, 1.3642578125, 0.030120849609375, 0.0056304931640625, 0.0009126663208007812, 0.005245208740234375, 0.01421356201171875, 3.898143768310547e-05, 1.076171875, 0.053436279296875, 0.002716064453125, 1.5234375, 0.00018930435180664062, 0.0117340087890625, 0.0667724609375, 0.003688812255859375, 0.413818359375, 0.090576171875, 0.057037353515625, 1.2040138244628906e-05, 2.875, 0.12646484375, 2.232421875, 0.00628662109375, 1.982421875, 0.00823211669921875, 0.01065826416015625, 1.1962890625, 0.034027099609375, 0.0021839141845703125, 0.174560546875, 0.0008778572082519531, 0.2022705078125, 0.01381683349609375, 0.0031566619873046875, 0.00566864013671875, 0.0045928955078125, 0.0033817291259765625, 0.2196044921875, 0.0149078369140625, 0.004993438720703125, 0.82373046875], "tokens": [324, 320, 291, 320, 291, 442, 537, 11443, 1943, 14782, 26, 890, 2629, 6877, 2863, 26, 34036, 101, 30, 901, 471, 4630, 17152, 293, 284, 320, 446, 1022, 275, 319, 7124, 322, 1451, 432, 5549, 31251, 4886, 32, 275, 319, 477, 601, 322, 1451, 432, 5549, 31251, 4886, 275, 569, 284, 562]}
{"line_number": 325, "line_type": "original", "code": "        double[] coefficients = new double[getOriginalNumDecisionVariables()];", "entropy": 2.013671875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [4.56640625, 9.78125, 5.79296875, 3.26171875, 0.29833984375, 0.82958984375, 0.00832366943359375, 0.01296234130859375, 3.12109375, 0.142333984375, 0.0161590576171875, 0.0250091552734375, 0.0005950927734375, 0.3505859375], "tokens": [351, 2064, 1178, 26370, 280, 537, 2064, 77, 371, 11296, 2567, 24453, 10165, 22086]}
{"line_number": 325, "line_type": "generated", "code": "\n                    multiple * tableau.getEntry(subtrahendRow, j));\n        }\n    }\n\n    /**\n     * Adds a multiple of one row to another.\n     * <p>\n     * After application of this operation, the following will hold:\n    ", "entropy": 0.0809326171875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [1.5205078125, 0.106201171875, 0.0059051513671875, 0.06793212890625, 6.318092346191406e-06, 0.0005025863647460938, 8.404254913330078e-05, 0.0005021095275878906, 0.0018215179443359375, 2.2649765014648438e-06, 2.384185791015625e-07, 3.933906555175781e-06, 9.059906005859375e-06, 0.0003516674041748047, 0.0007882118225097656, 0.0178985595703125, 0.04010009765625, 8.082389831542969e-05, 0.03851318359375, 0.0009617805480957031, 0.19091796875, 0.027679443359375, 0.02752685546875, 0.00017261505126953125, 1.8466796875, 0.1881103515625, 0.0008134841918945312, 0.006488800048828125, 0.00814056396484375, 0.0021514892578125, 0.020965576171875, 0.001514434814453125, 0.027679443359375, 0.0037288665771484375, 6.783008575439453e-05, 0.024078369140625, 0.00186920166015625, 0.00021266937255859375, 0.0010442733764648438, 2.0503997802734375e-05, 0.00801849365234375, 0.00635528564453125, 0.00017833709716796875, 0.0004711151123046875, 0.0012845993041992188, 0.0027942657470703125, 0.000263214111328125, 0.0005202293395996094, 0.0009174346923828125, 0.00035572052001953125, 0.0014619827270507812, 0.0007138252258300781], "tokens": [528, 4609, 319, 1858, 4452, 32, 48895, 26, 1113, 359, 2371, 416, 2352, 30, 594, 876, 291, 320, 284, 320, 446, 1022, 275, 319, 15450, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275]}
{"line_number": 326, "line_type": "original", "code": "        Integer basicRow =", "entropy": 3.32421875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [3.537109375, 11.5234375, 1.072265625, 0.38720703125, 0.11279296875], "tokens": [351, 4401, 6550, 2352, 280]}
{"line_number": 326, "line_type": "generated", "code": "\n        }\n    }\n\n    /**\n     * Returns the pivot element of the specified row.\n     * @param row row index\n     * @return pivot element\n     */\n    protected double getPivotElement(final int row) {\n        double pivot = tableau.getEntry", "entropy": 0.32958984375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.1630859375, 0.2430419921875, 0.17724609375, 0.0018148422241210938, 0.2421875, 0.042816162109375, 0.031890869140625, 7.700920104980469e-05, 3.140625, 0.3271484375, 2.236328125, 1.044921875, 1.7216796875, 0.52587890625, 0.68603515625, 0.34619140625, 0.380859375, 0.10345458984375, 0.0004067420959472656, 0.4716796875, 0.003635406494140625, 0.52001953125, 0.59912109375, 0.2325439453125, 0.132080078125, 0.00295257568359375, 0.00101470947265625, 0.09100341796875, 0.65478515625, 0.021209716796875, 0.39013671875, 0.08258056640625, 0.01031494140625, 0.1217041015625, 0.07818603515625, 0.09991455078125, 0.0257568359375, 0.01558685302734375, 0.0018758773803710938, 0.0286102294921875, 0.00048065185546875, 0.0006890296936035156, 0.0010118484497070312, 0.0045013427734375, 0.118896484375, 0.392822265625, 0.21435546875, 0.86572265625, 0.5390625, 1.1920928955078125e-07, 0.00034046173095703125, 0.0026683807373046875], "tokens": [291, 320, 284, 320, 446, 1022, 275, 319, 3759, 322, 20991, 1994, 432, 322, 3191, 2698, 32, 275, 319, 477, 753, 2698, 2698, 1650, 275, 319, 477, 601, 20991, 1994, 275, 569, 284, 2522, 2064, 622, 28267, 1308, 26, 3220, 629, 2698, 27, 301, 291, 2064, 20991, 280, 1858, 4452, 32, 48895]}
{"line_number": 328, "line_type": "original", "code": "        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());", "entropy": 1.05078125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [5.62109375, 3.8671875, 1.623046875, 0.01666259765625, 0.10662841796875, 9.9921875, 1.390625, 0.55078125, 0.01111602783203125, 0.051666259765625, 0.9443359375, 0.0036144256591796875, 0.08447265625, 0.58251953125, 0.1077880859375, 0.0014638900756835938, 0.029754638671875, 0.00015211105346679688, 0.0014028549194335938, 0.11297607421875, 0.005565643310546875, 1.0848045349121094e-05, 0.0003809928894042969, 0.11419677734375], "tokens": [351, 2064, 4630, 17152, 280, 6550, 2352, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 328, "line_type": "generated", "code": "\n    /**\n     * Creates a new tableau by adding a row to an existing tableau.\n     * <p>\n     * The new row will be the last row of the new tableau.\n     * </p>\n     * @param pivotColumn column", "entropy": 0.61962890625, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.60205078125, 0.1949462890625, 0.034332275390625, 3.4689903259277344e-05, 4.0625, 0.6064453125, 1.0, 1.4912109375, 0.0264129638671875, 1.5859375, 1.2978515625, 0.74560546875, 2.158203125, 0.72021484375, 1.3310546875, 0.0426025390625, 0.354248046875, 0.0003829002380371094, 0.11834716796875, 0.0716552734375, 0.0024127960205078125, 0.6611328125, 0.01140594482421875, 0.00382232666015625, 0.0302276611328125, 6.878376007080078e-05, 0.76025390625, 0.98388671875, 0.383056640625, 1.6572265625, 0.419921875, 1.6669921875, 0.732421875, 0.0872802734375, 0.8701171875, 0.039703369140625, 0.51953125, 0.01702880859375, 0.0011835098266601562, 0.75537109375, 0.365966796875, 0.0008978843688964844, 0.31201171875, 0.0002206563949584961, 0.0066680908203125, 0.00543975830078125, 0.0011014938354492188, 0.1845703125, 0.0111236572265625, 2.91796875, 1.3486328125, 1.0205078125], "tokens": [284, 1022, 275, 319, 9301, 312, 537, 1858, 4452, 810, 7165, 312, 2698, 372, 600, 4905, 1858, 4452, 32, 275, 319, 333, 98, 48, 275, 319, 886, 537, 2698, 1098, 526, 322, 2401, 2698, 432, 322, 537, 1858, 4452, 32, 275, 319, 576, 98, 48, 275, 319, 477, 753, 20991, 2137, 2623]}
{"line_number": 329, "line_type": "original", "code": "        Set<Integer> basicRows = new HashSet<Integer>();", "entropy": 1.068359375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [4.91015625, 7.98828125, 0.0870361328125, 0.0303497314453125, 0.0008969306945800781, 0.2568359375, 0.01178741455078125, 0.0245361328125, 0.08856201171875, 0.166259765625, 0.201904296875, 0.0025730133056640625, 0.11602783203125], "tokens": [351, 1756, 46, 3061, 48, 6550, 7252, 280, 537, 14260, 46, 3061, 2923]}
{"line_number": 329, "line_type": "generated", "code": "\n    /**\n     * Adds a multiple of one row to another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   sumRow = summandRow + multiple * sumRow\n     * </p>\n     *", "entropy": 0.1326904296875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.499267578125, 0.201904296875, 0.025726318359375, 1.2516975402832031e-05, 2.71484375, 0.324951171875, 0.00185394287109375, 0.00746917724609375, 0.00927734375, 0.003520965576171875, 0.019989013671875, 0.0021381378173828125, 0.049163818359375, 0.00872802734375, 0.00016200542449951172, 0.035797119140625, 0.002902984619140625, 0.0004825592041015625, 0.002483367919921875, 2.8967857360839844e-05, 0.01323699951171875, 0.00858306884765625, 0.00018799304962158203, 0.00047850608825683594, 0.0012645721435546875, 0.0027446746826171875, 0.0003960132598876953, 0.0006985664367675781, 0.001148223876953125, 0.0004305839538574219, 0.001720428466796875, 0.0011053085327148438, 1.2516975402832031e-05, 0.0494384765625, 0.458251953125, 1.005859375, 0.020477294921875, 0.423095703125, 0.37841796875, 0.019622802734375, 0.009429931640625, 0.004581451416015625, 0.003971099853515625, 0.496337890625, 0.05328369140625, 0.020294189453125, 0.0001550912857055664, 0.01058197021484375, 1.0848045349121094e-05, 0.0008835792541503906, 0.0012712478637695312, 0.00023114681243896484], "tokens": [284, 1022, 275, 319, 15450, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 3632, 2352, 280, 3632, 995, 2352, 474, 4609, 319, 3632, 2352, 275, 319, 576, 98, 48, 275, 319]}
{"line_number": 330, "line_type": "original", "code": "        for (int i = 0; i < coefficients.length; i++) {", "entropy": 0.8662109375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [2.806640625, 4.02734375, 0.03009033203125, 0.06146240234375, 0.55615234375, 0.01361846923828125, 0.541015625, 0.05841064453125, 0.018890380859375, 0.002597808837890625, 0.026885986328125, 7.09765625, 0.06109619140625, 0.010650634765625, 0.07623291015625, 0.09674072265625, 0.00754547119140625, 0.1031494140625], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 26370, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 330, "line_type": "generated", "code": "\n     * Get the index of the basic variable for the specified objective function.\n     * @param objectiveFunction index of the objective function\n     * @return index of the basic variable or null if there is no basic variable\n     */\n    protected Integer getBasicRow(", "entropy": 0.450927734375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.701171875, 0.146240234375, 3.56640625, 0.156982421875, 1.50390625, 0.0310211181640625, 0.074951171875, 0.2144775390625, 0.0755615234375, 0.94189453125, 0.59912109375, 0.67919921875, 2.169921875, 0.2275390625, 0.51123046875, 0.10064697265625, 0.0011386871337890625, 0.5888671875, 0.03204345703125, 1.1083984375, 0.29296875, 1.4423828125, 0.043487548828125, 0.05682373046875, 0.0596923828125, 0.00920867919921875, 0.182373046875, 0.0030841827392578125, 0.004222869873046875, 0.01280975341796875, 0.63916015625, 0.0380859375, 0.08392333984375, 0.07806396484375, 0.0201416015625, 1.1103515625, 1.5009765625, 0.1531982421875, 2.025390625, 0.1259765625, 0.405517578125, 0.089599609375, 0.046844482421875, 0.302734375, 0.33984375, 0.042633056640625, 0.376953125, 0.059173583984375, 0.0016574859619140625, 0.004764556884765625, 0.4619140625, 0.001773834228515625], "tokens": [275, 319, 1390, 322, 1650, 432, 322, 6550, 2677, 436, 322, 3191, 25110, 667, 32, 275, 319, 477, 753, 25110, 2447, 1650, 432, 322, 25110, 667, 275, 319, 477, 601, 1650, 432, 322, 6550, 2677, 556, 744, 415, 2017, 438, 1289, 6550, 2677, 275, 569, 284, 2522, 4401, 622, 7099, 2352, 26]}
{"line_number": 331, "line_type": "original", "code": "            basicRow = getBasicRow(getNumObjectiveFunctions() + i);", "entropy": 1.8701171875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.93359375, 12.8203125, 2.546875, 0.60009765625, 0.58935546875, 0.0214691162109375, 0.0065765380859375, 0.02069091796875, 2.25, 0.0308685302734375, 0.0012598037719726562, 0.310791015625, 0.07464599609375, 1.7763671875, 0.058685302734375], "tokens": [1468, 6550, 2352, 280, 622, 7099, 2352, 26, 15207, 33312, 10905, 346, 474, 595, 293]}
{"line_number": 331, "line_type": "generated", "code": "\n     * @return width of the tableau\n     */\n    protected int getWidth() {\n        return tableau.getColumnDimension() - 1;\n    }\n\n    /**\n     * Get the height of the tableau.", "entropy": 0.1300048828125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.189697265625, 0.04986572265625, 0.302734375, 0.0021266937255859375, 0.67578125, 0.26806640625, 0.0291595458984375, 0.0186614990234375, 0.0005106925964355469, 0.164794921875, 0.0220489501953125, 0.01727294921875, 0.410400390625, 0.025970458984375, 0.0018520355224609375, 0.01369476318359375, 0.0021495819091796875, 0.0025310516357421875, 0.1279296875, 0.05157470703125, 0.483154296875, 3.0994415283203125e-06, 0.00603485107421875, 0.0185546875, 0.0008230209350585938, 0.67041015625, 0.96826171875, 0.51953125, 0.0262451171875, 0.0859375, 0.14892578125, 0.0004489421844482422, 0.09893798828125, 0.0096893310546875, 0.013214111328125, 1.800060272216797e-05, 0.05731201171875, 0.0070953369140625, 0.177490234375, 0.005096435546875, 0.0026798248291015625, 0.003932952880859375, 0.0001443624496459961, 0.04376220703125], "tokens": [275, 319, 477, 601, 1861, 432, 322, 1858, 4452, 275, 569, 284, 2522, 629, 622, 2611, 346, 301, 291, 442, 1858, 4452, 32, 19239, 9883, 346, 429, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32]}
{"line_number": 332, "line_type": "original", "code": "            if (basicRows.contains(basicRow)) {", "entropy": 1.7841796875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [5.1171875, 2.537109375, 0.38671875, 4.66015625, 1.4111328125, 1.1591796875, 2.2109375, 0.0213165283203125, 3.453125, 0.0207366943359375, 0.1666259765625, 0.2587890625], "tokens": [1468, 415, 308, 6390, 7252, 32, 4752, 26, 6390, 2352, 490, 301]}
{"line_number": 332, "line_type": "generated", "code": "\n     */\n    protected int getWidth() {\n        return tableau.getColumnDimension();\n    }\n\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau", "entropy": 0.085693359375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [1.017578125, 0.09014892578125, 0.0202789306640625, 0.37060546875, 0.0267181396484375, 0.00156402587890625, 0.01186370849609375, 0.00257110595703125, 0.002716064453125, 0.1444091796875, 0.0462646484375, 0.29345703125, 3.337860107421875e-06, 0.00551605224609375, 0.0177001953125, 0.00079345703125, 0.7333984375, 0.168701171875, 0.00083160400390625, 0.1046142578125, 0.008575439453125, 0.01198577880859375, 1.811981201171875e-05, 0.05657958984375, 0.007297515869140625, 0.1455078125, 0.004184722900390625, 0.0028858184814453125, 0.003017425537109375, 0.00015270709991455078, 0.029327392578125, 0.01198577880859375, 1.5735626220703125e-05, 0.00797271728515625, 0.0002987384796142578, 0.06915283203125, 0.0032367706298828125, 0.002590179443359375, 0.002452850341796875, 8.082389831542969e-05], "tokens": [275, 569, 284, 2522, 629, 622, 2611, 346, 301, 291, 442, 1858, 4452, 32, 19239, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452]}
{"line_number": 337, "line_type": "original", "code": "                basicRows.add(basicRow);", "entropy": 2.166015625, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [9.9609375, 9.3359375, 0.10284423828125, 0.0145721435546875, 0.043426513671875, 0.003185272216796875, 0.036651611328125, 0.00021898746490478516, 0.005535125732421875], "tokens": [2071, 6550, 7252, 32, 669, 26, 6390, 2352, 293]}
{"line_number": 337, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }", "entropy": 0.03924560546875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.4423828125, 0.1346435546875, 0.029754638671875, 2.5153160095214844e-05, 0.239990234375, 0.023193359375, 0.426513671875, 0.004657745361328125, 0.002716064453125, 0.00536346435546875, 0.0002560615539550781, 0.035369873046875, 0.0038356781005859375, 0.0004258155822753906, 0.01373291015625, 0.0007429122924804688, 0.07342529296875, 0.0024356842041015625, 0.0027618408203125, 0.0025177001953125, 8.738040924072266e-05, 0.005950927734375, 0.0016279220581054688, 0.0178070068359375, 0.035858154296875, 0.048553466796875, 0.0002598762512207031, 0.0002987384796142578, 0.00027441978454589844, 0.0003848075866699219, 0.0009851455688476562, 0.01015472412109375, 0.00209808349609375, 0.006290435791015625, 5.960464477539062e-07, 4.935264587402344e-05, 9.334087371826172e-05, 2.86102294921875e-06, 0.0088958740234375, 0.0251007080078125, 0.00016200542449951172], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320]}
{"line_number": 338, "line_type": "original", "code": "                coefficients[i] =", "entropy": 3.890625, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [9.4765625, 11.5703125, 1.169921875, 0.74853515625, 0.06494140625, 0.30615234375], "tokens": [2071, 26370, 77, 91, 79, 280]}
{"line_number": 338, "line_type": "generated", "code": "\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the entry in the tableau.\n    ", "entropy": 0.1456298828125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.341796875, 0.02508544921875, 0.11065673828125, 0.01861572265625, 0.292724609375, 0.00543212890625, 0.002544403076171875, 0.0081939697265625, 0.00038623809814453125, 0.059295654296875, 0.0654296875, 0.0021228790283203125, 0.03509521484375, 0.0030612945556640625, 0.07745361328125, 0.0028438568115234375, 0.0020313262939453125, 0.0027637481689453125, 0.00012493133544921875, 0.040771484375, 0.00679779052734375, 0.039794921875, 0.03369140625, 0.0535888671875, 0.00029730796813964844, 0.0006041526794433594, 0.0005865097045898438, 0.0003147125244140625, 0.0004570484161376953, 0.0243988037109375, 0.003398895263671875, 0.007595062255859375, 1.430511474609375e-06, 5.042552947998047e-05, 0.00016200542449951172, 1.9073486328125e-06, 0.0103759765625, 0.025360107421875, 0.00010693073272705078, 0.155029296875, 0.0175628662109375, 0.1400146484375, 5.1140785217285156e-05, 0.41162109375, 0.60107421875, 2.029296875, 0.90576171875, 0.2462158203125, 0.484619140625, 0.01331329345703125, 1.255859375, 0.011627197265625], "tokens": [275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 3414, 328, 322, 1858, 4452, 32, 275]}
{"line_number": 343, "line_type": "original", "code": "        return new RealPointValuePair(coefficients, f.getValue(coefficients));", "entropy": 1.939453125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [5.6875, 1.916015625, 6.83203125, 2.923828125, 1.1123046875, 0.10235595703125, 0.116455078125, 2.390625, 0.003421783447265625, 0.0643310546875, 4.62109375, 3.65625, 1.818359375, 1.5478515625, 0.08184814453125, 0.00030231475830078125, 0.081298828125], "tokens": [351, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 296, 32, 6682, 26, 34036, 101, 876]}
{"line_number": 343, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the number of original decision variables.\n     * @return number of original decision variables\n     */\n    protected final int getOriginalNumDecisionVariables() {\n        return getWidth() - getNumObjectiveFunctions() - 1;\n    }", "entropy": 0.2188720703125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.249267578125, 0.0853271484375, 0.145751953125, 0.01435089111328125, 0.0093994140625, 1.3709068298339844e-05, 0.468505859375, 0.57421875, 2.20703125, 0.004375457763671875, 2.349609375, 0.228271484375, 0.007049560546875, 0.3271484375, 0.0250701904296875, 0.00018906593322753906, 0.166259765625, 0.0004398822784423828, 0.21533203125, 0.0012979507446289062, 0.03485107421875, 0.00879669189453125, 0.0012798309326171875, 0.023101806640625, 0.01934814453125, 0.01035308837890625, 0.1259765625, 0.290283203125, 0.0007719993591308594, 0.04071044921875, 0.004528045654296875, 0.00030493736267089844, 0.0018177032470703125, 0.00014388561248779297, 0.0008783340454101562, 0.00115203857421875, 0.050048828125, 0.01507568359375, 1.271484375, 0.384765625, 0.0211334228515625, 0.02276611328125, 0.9521484375, 0.2939453125, 1.1563301086425781e-05, 0.06103515625, 0.01398468017578125, 0.27490234375, 0.0101776123046875, 0.0865478515625, 0.279296875, 0.0006313323974609375], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 4707, 17200, 4886, 32, 275, 319, 477, 601, 1451, 432, 4707, 17200, 4886, 275, 569, 284, 2522, 1158, 629, 622, 11296, 2567, 24453, 10165, 346, 301, 291, 442, 622, 2611, 346, 429, 44929, 33312, 10905, 346, 429, 225, 35, 45, 284, 320]}
{"line_number": 458, "line_type": "original", "code": "        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;", "entropy": 2.3984375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.10546875, 3.66015625, 9.1484375, 0.01407623291015625, 0.017791748046875, 0.0020809173583984375, 6.8203125, 5.6875, 0.6044921875, 0.006855010986328125, 4.8671875, 3.017578125, 0.24609375, 0.0006046295166015625, 1.720703125, 0.0572509765625, 0.00160980224609375, 1.203125], "tokens": [351, 442, 21432, 705, 3910, 17152, 1018, 1929, 24453, 10165, 499, 1929, 24453, 10165, 429, 225, 35, 45]}
{"line_number": 458, "line_type": "generated", "code": "\n\n      } catch (ClassCastException e) {\n          return false;\n      }\n\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int hashCode() {\n        return (restrictToNonNegative? 0x01 : 0x00)", "entropy": 0.264404296875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.763671875, 0.00689697265625, 0.09161376953125, 0.04150390625, 0.08160400390625, 0.000331878662109375, 1.015625, 0.002582550048828125, 0.0011548995971679688, 0.44580078125, 0.067626953125, 0.00212860107421875, 0.00016939640045166016, 0.0170440673828125, 0.00021445751190185547, 0.64990234375, 0.0007028579711914062, 0.118896484375, 0.035400390625, 0.1741943359375, 0.0002875328063964844, 0.004352569580078125, 0.00037169456481933594, 0.0093994140625, 0.01233673095703125, 0.0003046989440917969, 0.002048492431640625, 0.003688812255859375, 0.078857421875, 0.0007796287536621094, 0.00432586669921875, 0.0013990402221679688, 0.60693359375, 0.494140625, 2.0703125, 1.435546875, 0.0007052421569824219, 0.0016355514526367188, 0.00016355514526367188, 0.3662109375, 0.09576416015625, 1.46484375, 0.6767578125, 1.6328125, 0.7314453125, 0.4013671875, 0.00183868408203125, 0.00020837783813476562, 0.0804443359375, 0.006496429443359375, 0.0189666748046875, 0.026031494140625], "tokens": [1687, 320, 2368, 308, 1339, 36932, 484, 27, 301, 616, 442, 901, 45, 397, 320, 446, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 629, 17772, 346, 301, 291, 442, 308, 20757, 705, 3910, 17152, 1018, 225, 34, 106, 34, 35, 499, 225, 34, 106, 34, 34, 27]}
{"line_number": 145, "line_type": "original", "code": "                    matrix[zIndex][getSlackVariableOffset() - 1] =", "entropy": 1.8837890625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [9.5546875, 9.703125, 0.62060546875, 3.498046875, 0.034454345703125, 0.06329345703125, 4.3515625, 1.091796875, 0.01290130615234375, 0.00432586669921875, 0.28857421875, 0.76611328125, 0.0325927734375, 0.006290435791015625, 0.0208587646484375, 0.0916748046875], "tokens": [4696, 5045, 77, 108, 1284, 1674, 371, 31185, 3818, 3457, 346, 429, 225, 35, 79, 280]}
{"line_number": 145, "line_type": "generated", "code": "\n     * @return new constraints\n     */\n    private List<LinearConstraint> getNormalizedConstraints() {\n        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\n        for (LinearConstraint constraint : constraints) {\n            if (constraint.getValue() >", "entropy": 0.231201171875, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [0.2174072265625, 0.06304931640625, 0.2347412109375, 0.047882080078125, 0.99267578125, 1.02734375, 0.232177734375, 0.07220458984375, 0.0187530517578125, 1.2529296875, 0.01690673828125, 0.0013484954833984375, 0.0016326904296875, 0.0008025169372558594, 0.0002123117446899414, 0.004520416259765625, 0.006000518798828125, 0.0004258155822753906, 0.002132415771484375, 0.0021381378173828125, 0.2445068359375, 0.29541015625, 0.0011072158813476562, 0.0010938644409179688, 0.00039887428283691406, 5.447864532470703e-05, 1.1083984375, 1.5078125, 0.0941162109375, 0.01525115966796875, 0.0941162109375, 0.00229644775390625, 0.00021827220916748047, 0.5146484375, 0.09722900390625, 0.06451416015625, 0.00420379638671875, 0.2091064453125, 0.00027251243591308594, 0.29931640625, 0.01708984375, 0.04638671875, 0.001194000244140625, 0.002735137939453125, 0.0770263671875, 0.845703125, 0.10736083984375, 0.7216796875, 0.0033245086669921875, 0.394287109375, 0.0020351409912109375, 1.052734375], "tokens": [275, 319, 477, 601, 537, 13383, 275, 569, 284, 945, 1682, 46, 9420, 9012, 48, 622, 29814, 9183, 346, 301, 291, 1682, 46, 9420, 9012, 48, 17666, 280, 537, 5059, 46, 9420, 9012, 2923, 291, 436, 308, 9420, 9012, 13118, 499, 13383, 27, 301, 324, 415, 308, 12704, 32, 6682, 346, 848]}
{"line_number": 161, "line_type": "original", "code": "                        matrix[row][getSlackVariableOffset() - 1] =", "entropy": 1.8603515625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [9.0234375, 9.7421875, 0.1719970703125, 0.25341796875, 0.026275634765625, 1.96875, 0.72216796875, 0.00070953369140625, 0.0011005401611328125, 0.048553466796875, 5.74609375, 0.0290069580078125, 0.00330352783203125, 0.039276123046875, 0.12359619140625], "tokens": [6797, 5045, 77, 643, 1674, 371, 31185, 3818, 3457, 346, 429, 225, 35, 79, 280]}
{"line_number": 161, "line_type": "generated", "code": "\n        if (constraint.getRelationship() == Relationship.LEQ) {\n            return constraint;\n        } else if (constraint.getRelationship() == Relationship.GEQ) {\n            return new LinearConstraint(constraint.getCoefficients(), Relationship.LEQ", "entropy": 0.1627197265625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [0.78955078125, 1.3974609375, 0.0889892578125, 0.133544921875, 0.007152557373046875, 0.321533203125, 0.007747650146484375, 0.021270751953125, 0.09698486328125, 0.007083892822265625, 0.0005474090576171875, 0.587890625, 9.393692016601562e-05, 0.07843017578125, 0.0141754150390625, 0.1640625, 0.209716796875, 0.32177734375, 0.06475830078125, 0.0865478515625, 0.0008387565612792969, 0.6005859375, 0.296142578125, 0.0145416259765625, 0.0197601318359375, 0.0006251335144042969, 0.00246429443359375, 0.0007448196411132812, 0.0012712478637695312, 0.0024051666259765625, 0.0009174346923828125, 7.367134094238281e-05, 0.17578125, 2.396106719970703e-05, 0.006927490234375, 0.0015583038330078125, 0.242919921875, 0.392578125, 0.337158203125, 0.026214599609375, 0.003414154052734375, 0.069580078125, 0.284912109375, 0.09259033203125, 0.089111328125, 0.060272216796875, 0.00029659271240234375, 0.10595703125, 1.2255859375, 0.0003814697265625, 0.0083465576171875, 9.059906005859375e-06], "tokens": [291, 415, 308, 12704, 32, 371, 13175, 346, 610, 38246, 32, 815, 67, 27, 301, 324, 442, 13118, 45, 291, 320, 813, 415, 308, 12704, 32, 371, 13175, 346, 610, 38246, 32, 57, 2697, 27, 301, 324, 442, 537, 13935, 9012, 26, 12704, 32, 371, 8973, 101, 1026, 38246, 32, 815, 67]}
{"line_number": 170, "line_type": "original", "code": "                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack", "entropy": 1.431640625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [9.5078125, 7.515625, 0.0182952880859375, 1.951171875, 0.0242462158203125, 0.3134765625, 1.177734375, 0.0009899139404296875, 0.0007243156433105469, 0.03131103515625, 0.05694580078125, 0.066650390625, 0.002521514892578125, 0.483642578125, 0.00695037841796875, 1.73046875, 0.0206451416015625, 0.0222015380859375, 3.69140625, 0.9599609375, 2.4765625], "tokens": [6797, 5045, 77, 643, 1674, 371, 31185, 3818, 3457, 346, 474, 28039, 1881, 13419, 280, 225, 35, 45, 225, 434, 28039]}
{"line_number": 170, "line_type": "generated", "code": "\n    /**\n     * Get the offset of the slack variables in the tableau.\n     * @return slack variable offset\n     */\n    protected int getSlackVariableOffset() {\n        return numDecisionVariables + numArtificialVariables;\n    }\n\n    /**\n     * Get", "entropy": 0.2330322265625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [1.2099609375, 0.106689453125, 0.2607421875, 0.00048351287841796875, 0.446533203125, 0.1746826171875, 2.2421875, 0.81591796875, 0.07745361328125, 0.529296875, 0.11614990234375, 0.95947265625, 0.06658935546875, 0.71826171875, 0.00839996337890625, 0.2978515625, 0.035858154296875, 0.0006575584411621094, 0.06402587890625, 0.00140380859375, 0.99951171875, 0.199462890625, 0.00948333740234375, 0.039520263671875, 0.005275726318359375, 0.005847930908203125, 1.1689453125, 0.0297698974609375, 0.0010089874267578125, 0.0002872943878173828, 7.200241088867188e-05, 5.3048133850097656e-05, 0.0016193389892578125, 0.001422882080078125, 0.0286407470703125, 0.04754638671875, 0.525390625, 0.036590576171875, 5.888938903808594e-05, 0.318115234375, 0.25146484375, 0.033477783203125, 3.7550926208496094e-05, 0.0002598762512207031, 0.136962890625, 0.020751953125, 0.00020110607147216797, 0.091064453125, 0.00295257568359375, 0.0236663818359375, 0.0001913309097290039, 0.007694244384765625], "tokens": [284, 1022, 275, 319, 1390, 322, 3401, 432, 322, 28039, 4886, 328, 322, 1858, 4452, 32, 275, 319, 477, 601, 28039, 2677, 3401, 275, 569, 284, 2522, 629, 622, 31185, 3818, 3457, 346, 301, 291, 442, 1929, 24453, 10165, 474, 1929, 5271, 31251, 10165, 45, 284, 320, 446, 1022, 275, 319, 1390]}
{"line_number": 260, "line_type": "original", "code": "        double sum = 0;", "entropy": 1.1005859375, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [1.150390625, 3.865234375, 1.890625, 0.11810302734375, 0.15234375, 0.00498199462890625, 0.52099609375], "tokens": [351, 2064, 3632, 280, 225, 34, 45]}
{"line_number": 260, "line_type": "generated", "code": "        for (int i = 0; i < src.length; i++) {\n            dest[i] = src[i];\n        }\n     */\n    private void copy(final double[] src, final double[] dest) {", "entropy": 0.1571044921875, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [1.150390625, 0.51953125, 0.016326904296875, 0.00965118408203125, 0.073486328125, 0.0163726806640625, 0.08203125, 0.006328582763671875, 0.0256500244140625, 0.0020771026611328125, 0.03204345703125, 0.31591796875, 0.006984710693359375, 0.0168304443359375, 0.0185089111328125, 0.1781005859375, 0.010498046875, 0.037109375, 0.240478515625, 0.11480712890625, 0.006221771240234375, 0.0293426513671875, 0.035919189453125, 0.023040771484375, 0.1412353515625, 0.0035228729248046875, 0.030181884765625, 0.1510009765625, 0.06634521484375, 0.0025997161865234375, 1.140625, 0.2166748046875, 0.423828125, 0.64013671875, 0.368896484375, 0.2421875, 0.81396484375, 0.057830810546875, 0.136474609375, 0.0640869140625, 0.00537109375, 0.00020873546600341797, 0.018798828125, 0.0193328857421875, 0.005176544189453125, 0.0016813278198242188, 0.0027637481689453125, 0.019622802734375], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1561, 32, 1322, 45, 595, 1987, 301, 324, 3466, 77, 91, 79, 280, 1561, 77, 91, 970, 291, 320, 275, 569, 284, 945, 763, 1933, 26, 3220, 2064, 1178, 1561, 30, 1158, 2064, 1178, 3466, 27, 301]}
{"line_number": 261, "line_type": "original", "code": "        for (double coefficient : coefficients.getData()) {", "entropy": 2.1796875, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [2.30859375, 2.953125, 0.0562744140625, 5.7734375, 4.47265625, 0.04241943359375, 2.42578125, 2.427734375, 3.412109375, 0.02484130859375, 0.08441162109375], "tokens": [351, 436, 308, 2627, 17134, 499, 26370, 32, 11576, 1157, 301]}
{"line_number": 261, "line_type": "generated", "code": "\n     * @param srcPos the source position\n     * @param length the number of elements to copy\n     */\n    private void copy(final double[] src, final double[] dest, final int destPos, final int srcPos, final int length) {", "entropy": 0.1661376953125, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [1.0498046875, 0.896484375, 0.140625, 0.11700439453125, 0.61376953125, 0.01904296875, 0.033721923828125, 0.060272216796875, 0.0177001953125, 0.3330078125, 0.035003662109375, 0.0027217864990234375, 0.006458282470703125, 0.11279296875, 0.0543212890625, 0.326904296875, 0.013214111328125, 0.248291015625, 0.0421142578125, 0.302978515625, 0.443603515625, 0.035614013671875, 0.040283203125, 0.333740234375, 0.583984375, 0.3798828125, 0.61474609375, 0.11041259765625, 0.045623779296875, 0.08709716796875, 0.004764556884765625, 0.0002409219741821289, 0.0540771484375, 0.0208587646484375, 0.003124237060546875, 0.0010929107666015625, 0.0001418590545654297, 0.388427734375, 0.0005831718444824219, 0.042724609375, 0.00014972686767578125, 0.0006375312805175781, 0.68994140625, 0.0033397674560546875, 0.0035457611083984375, 0.00020706653594970703, 0.0005602836608886719, 0.3056640625, 0.00157928466796875, 0.0013513565063476562, 0.0105438232421875, 0.00879669189453125], "tokens": [275, 319, 477, 753, 1561, 2996, 322, 1914, 2747, 275, 319, 477, 753, 3104, 322, 1451, 432, 4702, 372, 1933, 275, 569, 284, 945, 763, 1933, 26, 3220, 2064, 1178, 1561, 30, 1158, 2064, 1178, 3466, 30, 1158, 629, 3466, 2996, 30, 1158, 629, 1561, 2996, 30, 1158, 629, 3104, 27, 301]}
{"line_number": 262, "line_type": "original", "code": "            sum -= coefficient;", "entropy": 5.0625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [6.16796875, 8.25, 3.580078125, 4.515625, 2.802734375], "tokens": [1468, 3632, 5912, 17134, 45]}
{"line_number": 262, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [], "tokens": []}
{"line_number": 264, "line_type": "original", "code": "        return sum;", "entropy": 3.986328125, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [3.119140625, 5.0, 7.58203125, 0.2452392578125], "tokens": [351, 442, 3632, 45]}
{"line_number": 264, "line_type": "generated", "code": "\n    }\n\n    /**\n     * @param src the source array\n     * @param srcPos the source position\n     * @param dest the destination array\n     * @param destPos the destination position\n     * @param length the number of elements to copy\n     */\n   ", "entropy": 0.0992431640625, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [0.9306640625, 0.00547027587890625, 0.2261962890625, 0.059539794921875, 0.04095458984375, 3.600120544433594e-05, 1.3251953125, 0.1693115234375, 0.384033203125, 0.124755859375, 0.01148223876953125, 0.1290283203125, 0.01152801513671875, 0.0023784637451171875, 0.0011034011840820312, 0.00714874267578125, 0.2486572265625, 0.00649261474609375, 0.01318359375, 0.05072021484375, 0.0170440673828125, 0.0174102783203125, 0.0016422271728515625, 0.003276824951171875, 0.00893402099609375, 0.01959228515625, 0.004215240478515625, 0.00415802001953125, 0.0044708251953125, 0.0017728805541992188, 0.06494140625, 0.000972747802734375, 0.0005021095275878906, 0.014556884765625, 0.0031909942626953125, 0.009613037109375, 0.008758544921875, 0.00547027587890625, 0.004486083984375, 0.266357421875, 0.0011615753173828125, 0.0010395050048828125, 0.090576171875, 0.05029296875, 0.339111328125, 0.01169586181640625, 0.265380859375, 0.01186370849609375, 0.134521484375, 0.032501220703125, 0.00390625, 0.0077362060546875], "tokens": [284, 320, 446, 1022, 275, 319, 477, 753, 1561, 322, 1914, 1417, 275, 319, 477, 753, 1561, 2996, 322, 1914, 2747, 275, 319, 477, 753, 3466, 322, 8050, 1417, 275, 319, 477, 753, 3466, 2996, 322, 8050, 2747, 275, 319, 477, 753, 3104, 322, 1451, 432, 4702, 372, 1933, 275, 569, 284]}
{"line_number": 290, "line_type": "original", "code": "        if (numArtificialVariables == 0) {", "entropy": 1.1162109375, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [3.74609375, 3.724609375, 0.0947265625, 4.2265625, 0.1920166015625, 0.0011224746704101562, 0.01065826416015625, 1.248046875, 0.014923095703125, 0.0144195556640625, 0.067626953125, 0.0567626953125], "tokens": [351, 415, 308, 1516, 5271, 31251, 10165, 610, 225, 34, 27, 301]}
{"line_number": 290, "line_type": "generated", "code": "\n            }\n        }\n        return new RealPointValuePair(coefficients, mostNegative);\n    }\n\n    /**\n     * Get the solution to the problem.\n     * <p>\n     * The solution is the vector of decision variables that minimizes the\n     * objective", "entropy": 0.497802734375, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [1.5556640625, 0.073486328125, 0.08917236328125, 0.00878143310546875, 0.27197265625, 0.47509765625, 0.0302886962890625, 0.109375, 0.0003948211669921875, 4.971027374267578e-05, 0.0115509033203125, 0.5126953125, 0.004520416259765625, 0.012939453125, 0.3359375, 4.2557716369628906e-05, 0.0501708984375, 0.039276123046875, 0.0019130706787109375, 0.439208984375, 0.09234619140625, 0.06268310546875, 1.3828277587890625e-05, 1.2841796875, 0.1549072265625, 2.986328125, 0.96484375, 0.16943359375, 1.8681640625, 1.056640625, 0.10369873046875, 0.023468017578125, 1.287109375, 0.00943756103515625, 0.004375457763671875, 0.0177001953125, 0.00015807151794433594, 1.4970703125, 0.84130859375, 0.876953125, 1.869140625, 2.15625, 0.67236328125, 0.73828125, 0.1810302734375, 0.48583984375, 1.013671875, 0.0193939208984375, 0.48828125, 0.4267578125, 4.875659942626953e-05, 0.51708984375], "tokens": [324, 320, 291, 320, 291, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 4630, 17152, 293, 284, 320, 446, 1022, 275, 319, 1390, 322, 5295, 372, 322, 3708, 32, 275, 319, 333, 98, 48, 275, 319, 886, 5295, 438, 322, 4026, 432, 17200, 4886, 688, 18206, 5052, 322, 275, 319, 25110]}
{"line_number": 356, "line_type": "original", "code": "        for (int j = 0; j < getWidth(); j++) {", "entropy": 0.382080078125, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [2.08203125, 2.521484375, 0.055389404296875, 0.03173828125, 0.541015625, 0.01078033447265625, 0.254150390625, 0.002307891845703125, 0.00390625, 0.0027446746826171875, 0.0105743408203125, 0.68310546875, 0.110595703125, 0.005138397216796875, 0.01123046875, 0.006740570068359375, 0.1619873046875], "tokens": [351, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 622, 2611, 473, 594, 1987, 301]}
{"line_number": 356, "line_type": "generated", "code": "\n     */\n    protected final void setEntry(final int row, final int column, final double value) {\n        tableau.setEntry(row, column, value);\n    }\n\n    /**\n     * Get the number of decision variables.\n     * @return", "entropy": 0.1602783203125, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [0.57080078125, 0.84912109375, 0.02545166015625, 0.0303955078125, 0.1217041015625, 0.007610321044921875, 0.002330780029296875, 0.0022640228271484375, 0.0026760101318359375, 0.0203857421875, 0.00243377685546875, 0.0041961669921875, 0.0019140243530273438, 0.007091522216796875, 0.013671875, 0.005462646484375, 0.0015172958374023438, 0.338623046875, 0.00173187255859375, 0.038055419921875, 0.003787994384765625, 0.004505157470703125, 0.0787353515625, 0.030120849609375, 1.0728836059570312e-06, 0.0004191398620605469, 0.00025153160095214844, 8.344650268554688e-05, 0.00013566017150878906, 0.0009179115295410156, 0.00013005733489990234, 0.0033168792724609375, 0.00037384033203125, 0.0036029815673828125, 0.0015201568603515625, 0.04083251953125, 0.002872467041015625, 0.2017822265625, 0.019561767578125, 0.4375, 0.00019037723541259766, 0.837890625, 0.1923828125, 1.837890625, 0.0033817291259765625, 1.681640625, 0.0198822021484375, 0.6494140625, 0.041412353515625, 0.0004534721374511719, 0.192138671875, 0.0007295608520507812], "tokens": [275, 569, 284, 2522, 1158, 763, 739, 2711, 26, 3220, 629, 2698, 30, 1158, 629, 2623, 30, 1158, 2064, 786, 27, 301, 291, 1858, 4452, 32, 470, 2711, 26, 643, 30, 2623, 30, 786, 293, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 17200, 4886, 32, 275, 319, 477, 601]}
