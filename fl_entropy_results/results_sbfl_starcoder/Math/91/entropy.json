{"line_number": 259, "line_type": "original", "code": "        double nOd = doubleValue();", "entropy": 1.5322265625, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [3.505859375, 4.03125, 2.91796875, 0.026611328125, 0.0142364501953125, 1.7294921875, 0.0127105712890625, 0.0183868408203125], "tokens": [351, 2064, 310, 24806, 280, 2064, 882, 473]}
{"line_number": 259, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [], "tokens": []}
{"line_number": 260, "line_type": "original", "code": "        double dOn = object.doubleValue();", "entropy": 2.51171875, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [5.6875, 5.9140625, 1.546875, 2.705078125, 0.0233154296875, 6.68359375, 0.0196685791015625, 0.0256195068359375, 0.00708770751953125], "tokens": [351, 2064, 343, 1484, 280, 1300, 32, 46952, 473]}
{"line_number": 260, "line_type": "generated", "code": "\n    public float floatValue() {\n        return (float)numerator / (float)denominator;\n    }\n    \n    /**\n     * Gets the fraction as a <tt>int</tt>. This returns the whole number part\n     * of the fraction.\n    ", "entropy": 0.0882568359375, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.402587890625, 0.08349609375, 0.004730224609375, 0.0004744529724121094, 5.817413330078125e-05, 0.009307861328125, 0.014404296875, 0.1370849609375, 0.04052734375, 0.0224761962890625, 0.002025604248046875, 0.006256103515625, 0.43115234375, 0.0011310577392578125, 0.0026264190673828125, 0.0009560585021972656, 0.00010788440704345703, 0.0003292560577392578, 0.00159454345703125, 5.7220458984375e-06, 0.0013675689697265625, 0.0458984375, 0.00021350383758544922, 0.1339111328125, 0.0135345458984375, 0.010009765625, 0.00021839141845703125, 0.154541015625, 0.046051025390625, 0.10699462890625, 0.00815582275390625, 0.1473388671875, 0.01139068603515625, 0.0180206298828125, 0.00010716915130615234, 0.71728515625, 0.0005478858947753906, 0.013397216796875, 0.0047149658203125, 0.04345703125, 0.26220703125, 0.00262451171875, 1.126953125, 0.0144500732421875, 0.404296875, 0.0655517578125, 5.4955482482910156e-05, 0.00028586387634277344, 0.00243377685546875, 0.00821685791015625, 0.01499176025390625, 0.049896240234375], "tokens": [284, 562, 1897, 1897, 882, 346, 301, 291, 442, 308, 1808, 27, 1516, 11290, 517, 308, 1808, 27, 29805, 9693, 45, 284, 320, 2170, 1022, 275, 319, 7124, 322, 18795, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 1348, 3217, 322, 9844, 1451, 1742, 275, 319, 432, 322, 18795, 32, 275]}
{"line_number": 261, "line_type": "original", "code": "        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);", "entropy": 1.193359375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [4.75, 0.68408203125, 0.277099609375, 11.1640625, 0.89208984375, 2.21484375, 2.53125, 0.01483917236328125, 0.50146484375, 0.0259246826171875, 3.14453125, 0.7470703125, 1.6982421875, 0.71630859375, 0.0306396484375, 0.0005807876586914062, 0.105224609375, 0.003932952880859375, 0.000446319580078125, 0.004306793212890625, 0.000736236572265625, 2.626953125, 0.005725860595703125, 0.003833770751953125, 0.0237274169921875, 0.0002543926239013672, 0.041839599609375], "tokens": [351, 442, 308, 96, 24806, 333, 343, 1484, 27, 1018, 429, 35, 499, 1833, 96, 24806, 848, 343, 1484, 27, 1018, 474, 35, 499, 225, 34, 293]}
{"line_number": 261, "line_type": "generated", "code": "\n    }\n    \n    /**\n     * Gets the fraction as a <tt>int</tt>. This returns the integer value of\n     * the fraction.\n     * @return the fraction as a <tt>int</tt>\n     */\n    public int intValue()", "entropy": 0.18603515625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.266845703125, 0.0010166168212890625, 0.084716796875, 0.0118408203125, 0.007328033447265625, 0.00015473365783691406, 0.1204833984375, 0.048675537109375, 0.11419677734375, 0.007053375244140625, 0.222900390625, 0.010650634765625, 0.01031494140625, 7.975101470947266e-05, 0.395263671875, 0.0004761219024658203, 0.003719329833984375, 0.00312042236328125, 0.056915283203125, 0.21923828125, 0.0031414031982421875, 2.271484375, 1.6923828125, 0.79248046875, 0.28564453125, 2.5510787963867188e-05, 0.0313720703125, 0.6640625, 0.426025390625, 0.822265625, 0.00036454200744628906, 0.06005859375, 0.0019207000732421875, 0.00841522216796875, 0.115478515625, 0.0008673667907714844, 0.210693359375, 0.01212310791015625, 0.0001227855682373047, 0.0002720355987548828, 0.05126953125, 0.00086212158203125, 0.0002052783966064453, 0.09735107421875, 0.06793212890625, 0.41796875, 0.0222930908203125, 0.002895355224609375, 0.003482818603515625, 0.021636962890625, 3.790855407714844e-05, 0.0019626617431640625], "tokens": [284, 320, 2170, 1022, 275, 319, 7124, 322, 18795, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 1348, 3217, 322, 4991, 786, 432, 275, 319, 322, 18795, 32, 275, 319, 477, 601, 322, 18795, 619, 312, 333, 2251, 48, 410, 377, 2251, 48, 275, 569, 284, 562, 629, 629, 882, 346]}
{"line_number": 270, "line_type": "original", "code": "        return (double)numerator / (double)denominator;", "entropy": 1.2685546875, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [5.40625, 1.74609375, 3.552734375, 4.3828125, 0.0653076171875, 0.86767578125, 0.00893402099609375, 0.77001953125, 0.86669921875, 0.0125274658203125, 0.00295257568359375, 0.0232696533203125, 0.0002130270004272461, 0.066650390625], "tokens": [351, 442, 308, 2627, 27, 1516, 11290, 517, 308, 2627, 27, 29805, 9693, 45]}
{"line_number": 270, "line_type": "generated", "code": "\n    }\n    \n    /**\n     * Access the numerator.\n     * @return the numerator.\n     */\n    public int getNumerator() {\n        return numerator;", "entropy": 0.01227569580078125, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.08001708984375, 0.005126953125, 0.07073974609375, 0.00394439697265625, 0.00444793701171875, 4.172325134277344e-06, 0.0238800048828125, 0.0004963874816894531, 0.0183258056640625, 0.0019130706787109375, 0.00249481201171875, 0.039764404296875, 8.690357208251953e-05, 0.0028514862060546875, 0.0002219676971435547, 0.00615692138671875, 0.00347900390625, 0.0009355545043945312, 0.0267486572265625, 0.00505828857421875, 0.0006146430969238281, 0.00748443603515625, 0.00023353099822998047, 0.002635955810546875, 0.003543853759765625, 1.2278556823730469e-05, 0.0009455680847167969, 0.0009264945983886719, 0.0743408203125, 0.0027637481689453125, 0.0023784637451171875, 2.6702880859375e-05, 0.0124969482421875], "tokens": [284, 320, 2170, 1022, 275, 319, 8258, 322, 1929, 11290, 32, 275, 319, 477, 601, 322, 1929, 11290, 32, 275, 569, 284, 562, 629, 44929, 11290, 346, 301, 291, 442, 1929, 11290, 45]}
{"line_number": 209, "line_type": "original", "code": "        super();", "entropy": 7.5, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [4.30859375, 9.765625, 8.421875], "tokens": [351, 2599, 473]}
{"line_number": 209, "line_type": "generated", "code": "\n        // use double to avoid overflow issues.\n        double val = this.doubleValue() - object.doubleValue();\n        if (val > 0) {\n            return 1;\n        } else if (val < 0) {\n            return -1;", "entropy": 0.380126953125, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [0.12127685546875, 1.8310546875, 3.384765625, 0.67333984375, 1.5849609375, 1.1005859375, 0.89697265625, 1.123046875, 0.97607421875, 0.06719970703125, 0.60009765625, 3.087890625, 0.7119140625, 1.3056640625, 0.002941131591796875, 0.0170440673828125, 0.8642578125, 0.0008654594421386719, 0.0038356781005859375, 0.00012874603271484375, 8.237361907958984e-05, 0.0006475448608398438, 0.0498046875, 0.160400390625, 0.00412750244140625, 0.0176849365234375, 0.501953125, 0.01445770263671875, 0.0005006790161132812, 0.09857177734375, 0.01067352294921875, 0.00536346435546875, 0.003894805908203125, 0.024688720703125, 4.458427429199219e-05, 0.00010442733764648438, 0.0029735565185546875, 0.00013887882232666016, 0.28076171875, 0.00582122802734375, 0.0011138916015625, 0.0008311271667480469, 0.20556640625, 0.0003485679626464844, 1.0728836059570312e-06, 0.0121917724609375, 0.0011425018310546875, 0.0021076202392578125, 0.0001537799835205078, 7.867813110351562e-05, 0.00015234947204589844, 0.000152587890625], "tokens": [291, 434, 793, 2064, 372, 7358, 9973, 5654, 32, 291, 2064, 909, 280, 458, 32, 46952, 346, 429, 1300, 32, 46952, 473, 291, 415, 308, 695, 848, 225, 34, 27, 301, 324, 442, 225, 35, 45, 291, 320, 813, 415, 308, 695, 333, 225, 34, 27, 301, 324, 442, 429, 35, 45]}
{"line_number": 210, "line_type": "original", "code": "        if (den == 0) {", "entropy": 2.275390625, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [3.583984375, 1.7568359375, 0.065673828125, 12.921875, 0.81494140625, 0.72900390625, 0.06463623046875, 0.47265625, 0.0823974609375], "tokens": [351, 415, 308, 5114, 610, 225, 34, 27, 301]}
{"line_number": 210, "line_type": "generated", "code": "\n        return 0;\n    }\n    \n    /**\n     * Returns the double value of this fraction.\n     * @return the double value.\n     */\n    public double doubleValue() {\n        return ((double)numerator) / ((double)denominator);\n   ", "entropy": 0.2257080078125, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [0.60009765625, 0.8154296875, 1.3759765625, 0.054901123046875, 0.005451202392578125, 0.1220703125, 0.0008521080017089844, 0.287109375, 0.0240631103515625, 0.01053619384765625, 2.8014183044433594e-05, 1.8095703125, 0.368408203125, 1.037109375, 0.08148193359375, 0.307373046875, 0.268310546875, 0.03326416015625, 0.11419677734375, 0.5078125, 0.0006489753723144531, 0.06854248046875, 0.004520416259765625, 0.178466796875, 0.407470703125, 0.047576904296875, 0.79052734375, 0.0055389404296875, 0.1309814453125, 0.01204681396484375, 0.009033203125, 0.006092071533203125, 0.00021016597747802734, 7.62939453125e-06, 0.004192352294921875, 0.002330780029296875, 0.068115234375, 0.055023193359375, 1.185546875, 0.0013837814331054688, 0.00469970703125, 0.56201171875, 0.0002570152282714844, 0.2198486328125, 0.0010519027709960938, 0.073974609375, 0.00013363361358642578, 0.0004601478576660156, 0.025299072265625, 4.76837158203125e-07, 0.0018987655639648438, 0.041412353515625], "tokens": [291, 442, 225, 34, 45, 284, 320, 2170, 1022, 275, 319, 3759, 322, 2064, 786, 432, 458, 18795, 32, 275, 319, 477, 601, 322, 2064, 786, 32, 275, 569, 284, 562, 2064, 2064, 882, 346, 301, 291, 442, 1833, 2627, 27, 1516, 11290, 27, 517, 1833, 2627, 27, 29805, 9693, 293, 284]}
{"line_number": 214, "line_type": "original", "code": "        if (den < 0) {", "entropy": 1.5751953125, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [4.05078125, 2.45703125, 0.12139892578125, 5.3984375, 1.951171875, 0.1651611328125, 0.0084381103515625, 0.02117919921875, 0.0088958740234375], "tokens": [351, 415, 308, 5114, 333, 225, 34, 27, 301]}
{"line_number": 214, "line_type": "generated", "code": "\n    /**\n     * Returns the double value of this fraction.\n     * @return the double value.\n     */\n    public double doubleValue() {\n        return (double)numerator / (double)denominator;\n    }\n    \n    /**\n     * Returns the fraction", "entropy": 0.207275390625, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [0.6533203125, 0.103271484375, 0.047149658203125, 4.398822784423828e-05, 1.6494140625, 0.35546875, 0.990234375, 0.1009521484375, 0.392333984375, 0.2578125, 0.04241943359375, 0.1021728515625, 0.45068359375, 0.0011606216430664062, 0.082763671875, 0.005229949951171875, 0.1644287109375, 0.444580078125, 0.052215576171875, 0.818359375, 0.0060272216796875, 0.10198974609375, 0.0125274658203125, 0.01534271240234375, 0.0095367431640625, 0.0003943443298339844, 5.9604644775390625e-06, 0.00567626953125, 0.00421142578125, 0.0290679931640625, 0.087646484375, 0.51025390625, 0.0099945068359375, 0.004917144775390625, 0.6416015625, 0.0005173683166503906, 0.0032711029052734375, 0.01215362548828125, 0.00020575523376464844, 0.00043654441833496094, 0.00833892822265625, 7.152557373046875e-07, 0.0006327629089355469, 0.0251007080078125, 7.43865966796875e-05, 0.50537109375, 0.0259552001953125, 0.01152801513671875, 1.609325408935547e-05, 0.806640625, 0.094970703125, 1.1357421875], "tokens": [284, 1022, 275, 319, 3759, 322, 2064, 786, 432, 458, 18795, 32, 275, 319, 477, 601, 322, 2064, 786, 32, 275, 569, 284, 562, 2064, 2064, 882, 346, 301, 291, 442, 308, 2627, 27, 1516, 11290, 517, 308, 2627, 27, 29805, 9693, 45, 284, 320, 2170, 1022, 275, 319, 3759, 322, 18795]}
{"line_number": 223, "line_type": "original", "code": "        int d = MathUtils.gcd(num, den);", "entropy": 1.525390625, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [5.32421875, 5.7109375, 2.376953125, 0.09912109375, 1.859375, 0.1116943359375, 0.0009636878967285156, 0.056182861328125, 0.0212249755859375, 0.25732421875, 3.9609375, 0.047149658203125, 0.006839752197265625], "tokens": [351, 629, 343, 280, 4175, 2755, 32, 46060, 26, 1516, 30, 5537, 293]}
{"line_number": 223, "line_type": "generated", "code": "\n    /**\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * @return the fraction as a <tt>float</tt>\n     */\n    public float floatValue", "entropy": 0.05023193359375, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [0.69970703125, 0.1666259765625, 0.0345458984375, 8.189678192138672e-05, 1.158203125, 0.0120086669921875, 0.08294677734375, 0.004825592041015625, 0.04376220703125, 0.03173828125, 0.01554107666015625, 0.00022804737091064453, 0.08062744140625, 0.00308990478515625, 2.7418136596679688e-05, 0.0036468505859375, 0.0208892822265625, 0.005939483642578125, 0.0005826950073242188, 0.0030364990234375, 0.001483917236328125, 0.0614013671875, 1.1682510375976562e-05, 0.00047898292541503906, 0.0005373954772949219, 0.0003962516784667969, 8.64267349243164e-05, 0.00012576580047607422, 0.005008697509765625, 0.0132598876953125, 0.053375244140625, 9.560585021972656e-05, 0.016876220703125, 0.0010023117065429688, 0.002590179443359375, 0.00447845458984375, 0.00015044212341308594, 0.0007343292236328125, 0.00238037109375, 9.107589721679688e-05, 6.783008575439453e-05, 0.01334381103515625, 0.001651763916015625, 1.2278556823730469e-05, 0.0258941650390625, 0.0018100738525390625, 0.0155792236328125, 0.01412200927734375, 0.00403594970703125, 0.0013484954833984375, 0.0001672506332397461, 2.491474151611328e-05], "tokens": [284, 1022, 275, 319, 7124, 322, 18795, 619, 312, 333, 2251, 48, 1808, 377, 2251, 4503, 1348, 38057, 322, 18795, 619, 275, 319, 322, 1929, 11290, 32235, 810, 39920, 32, 275, 319, 477, 601, 322, 18795, 619, 312, 333, 2251, 48, 1808, 377, 2251, 48, 275, 569, 284, 562, 1897, 1897, 882]}
{"line_number": 224, "line_type": "original", "code": "        if (d > 1) {", "entropy": 2.015625, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [3.51171875, 3.740234375, 0.1817626953125, 5.3203125, 2.892578125, 0.82421875, 1.0263671875, 0.615234375, 0.0253143310546875], "tokens": [351, 415, 308, 86, 848, 225, 35, 27, 301]}
{"line_number": 224, "line_type": "generated", "code": "\n     * Create a fraction given a double value.  The fraction is\n     * reduced to lowest terms.\n     * @param value the double value to convert to a fraction.\n     * @throws FractionConversionException if the continued fraction failed to converge.\n    ", "entropy": 0.3095703125, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [0.68994140625, 0.154296875, 3.080078125, 0.0726318359375, 0.54931640625, 0.73779296875, 0.303955078125, 1.638671875, 0.283447265625, 0.1253662109375, 0.69091796875, 0.1922607421875, 0.68017578125, 0.381103515625, 0.875, 0.00310516357421875, 0.426513671875, 0.0007357597351074219, 0.0015935897827148438, 2.0623207092285156e-05, 0.01763916015625, 0.134521484375, 0.0062408447265625, 0.0721435546875, 0.003204345703125, 0.08062744140625, 0.0980224609375, 0.34814453125, 0.046051025390625, 0.56689453125, 0.1387939453125, 0.67724609375, 0.004730224609375, 0.03765869140625, 0.06964111328125, 0.037017822265625, 0.1829833984375, 0.006832122802734375, 0.49853515625, 0.19580078125, 0.0111541748046875, 4.696846008300781e-05, 0.038299560546875, 0.038665771484375, 0.48193359375, 0.03887939453125, 0.38134765625, 0.107666015625, 0.57373046875, 0.0013761520385742188, 0.24072265625, 0.075439453125], "tokens": [275, 319, 2648, 312, 18795, 2702, 312, 2064, 786, 32, 225, 886, 18795, 438, 275, 319, 22974, 372, 25624, 5955, 32, 275, 319, 477, 753, 786, 322, 2064, 786, 372, 4483, 372, 312, 18795, 32, 275, 319, 477, 5117, 40823, 14350, 984, 415, 322, 45253, 18795, 3803, 372, 15941, 300, 32, 275]}
{"line_number": 230, "line_type": "original", "code": "        if (den < 0) {", "entropy": 1.8330078125, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [2.564453125, 2.0546875, 0.26025390625, 8.3515625, 3.16015625, 0.032196044921875, 0.0013761520385742188, 0.0312042236328125, 0.04083251953125], "tokens": [351, 415, 308, 5114, 333, 225, 34, 27, 301]}
{"line_number": 230, "line_type": "generated", "code": "\n    }\n    \n    /**\n     * Test for the equality of two fractions.  If the lowest term\n     * numerator and denominators are the same for both fractions, the two\n     * fractions are considered to be equal.\n     * @param", "entropy": 0.0958251953125, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [2.20703125, 0.128662109375, 0.376953125, 0.050811767578125, 0.03753662109375, 7.522106170654297e-05, 1.744140625, 0.01971435546875, 0.0831298828125, 0.0098876953125, 0.0017023086547851562, 0.00580596923828125, 0.01206207275390625, 2.586841583251953e-05, 0.03460693359375, 0.042022705078125, 0.02618408203125, 0.0012941360473632812, 0.00124359130859375, 0.020965576171875, 0.0100860595703125, 4.8160552978515625e-05, 0.0244293212890625, 0.003307342529296875, 0.0004324913024902344, 0.0002465248107910156, 9.85860824584961e-05, 5.316734313964844e-05, 0.0032558441162109375, 0.0024394989013671875, 5.900859832763672e-05, 0.0004987716674804688, 2.9206275939941406e-05, 0.00039076805114746094, 4.172325134277344e-06, 0.01427459716796875, 0.00034880638122558594, 0.0007524490356445312, 0.0011796951293945312, 0.0002834796905517578, 0.0001500844955444336, 7.62939453125e-06, 9.5367431640625e-05, 5.078315734863281e-05, 0.00027942657470703125, 3.910064697265625e-05, 0.00019681453704833984, 0.0110015869140625, 0.0545654296875, 0.00040793418884277344, 0.04791259765625, 0.00323486328125], "tokens": [284, 320, 2170, 1022, 275, 319, 2108, 436, 322, 28599, 432, 3134, 4937, 3543, 32, 225, 1670, 322, 25624, 5615, 275, 319, 1929, 11290, 461, 24257, 266, 4044, 884, 322, 2432, 436, 4335, 4937, 3543, 30, 322, 3134, 275, 319, 4937, 3543, 884, 11870, 372, 526, 5040, 32, 275, 319, 477, 753]}
{"line_number": 234, "line_type": "original", "code": "        this.numerator = num;", "entropy": 2.017578125, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [3.287109375, 4.47265625, 0.152587890625, 2.26171875, 0.00704193115234375, 0.947265625, 2.7421875, 2.27734375], "tokens": [351, 458, 32, 1516, 11290, 280, 1929, 45]}
{"line_number": 234, "line_type": "generated", "code": "\n        if (other == this) {\n            ret = true;\n        } else if (other instanceof Fraction) {\n            Fraction rhs = (Fraction) other;\n            ret = (numerator == rhs.numerator) && (denominator == rhs.denom", "entropy": 0.143310546875, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [0.19140625, 0.951171875, 0.1063232421875, 1.525390625, 0.55517578125, 0.204833984375, 0.0152130126953125, 0.004772186279296875, 0.013092041015625, 0.054718017578125, 0.001033782958984375, 0.004016876220703125, 0.0006852149963378906, 0.0109405517578125, 0.0002701282501220703, 0.009613037109375, 0.0130615234375, 0.0258636474609375, 0.013916015625, 0.31689453125, 0.006191253662109375, 0.055450439453125, 0.0015268325805664062, 0.037109375, 0.166015625, 0.6982421875, 0.0015153884887695312, 0.00409698486328125, 0.00019657611846923828, 0.00856781005859375, 0.377197265625, 0.00027823448181152344, 0.0657958984375, 0.236572265625, 0.0018949508666992188, 0.861328125, 0.40185546875, 0.000957489013671875, 0.01558685302734375, 0.001064300537109375, 0.0001138448715209961, 0.056304931640625, 0.0004036426544189453, 0.315673828125, 0.0261993408203125, 0.083251953125, 0.005035400390625, 1.2755393981933594e-05, 0.0013971328735351562, 0.002315521240234375, 0.00042724609375, 0.00020813941955566406], "tokens": [291, 415, 308, 2455, 610, 458, 27, 301, 324, 2152, 280, 861, 45, 291, 320, 813, 415, 308, 2455, 5113, 40823, 27, 301, 324, 40823, 9322, 280, 308, 20709, 27, 1604, 45, 324, 2152, 280, 308, 1516, 11290, 610, 9322, 32, 1516, 11290, 27, 962, 308, 29805, 9693, 610, 9322, 32, 29805]}
{"line_number": 235, "line_type": "original", "code": "        this.denominator = den;", "entropy": 2.72265625, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [2.62109375, 6.91796875, 0.385498046875, 5.375, 0.0027599334716796875, 1.716796875, 4.33203125, 0.426513671875], "tokens": [351, 458, 32, 29805, 9693, 280, 5537, 45]}
{"line_number": 235, "line_type": "generated", "code": "\n        ret = false;\n        if (other instanceof Fraction) {\n            Fraction f = (Fraction)other;\n            ret = (numerator == f.numerator) && (denominator == f.denominator);\n        }\n        return ret;\n    }", "entropy": 0.21630859375, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [0.9580078125, 1.7998046875, 0.0025882720947265625, 0.2322998046875, 0.0013294219970703125, 0.8251953125, 0.537109375, 0.03155517578125, 0.4873046875, 0.4814453125, 0.0037784576416015625, 0.02398681640625, 0.0027313232421875, 0.04888916015625, 0.208984375, 0.5244140625, 0.0211181640625, 0.00246429443359375, 0.0002605915069580078, 0.0034542083740234375, 1.40625, 0.0003364086151123047, 0.11993408203125, 1.029296875, 0.0038700103759765625, 0.740234375, 0.3876953125, 0.0032520294189453125, 0.0160064697265625, 0.0017108917236328125, 7.748603820800781e-05, 0.19921875, 0.0015087127685546875, 0.361083984375, 0.01617431640625, 0.0631103515625, 0.0057220458984375, 2.1457672119140625e-05, 0.0014638900756835938, 0.0009822845458984375, 9.500980377197266e-05, 0.0004162788391113281, 1.430511474609375e-06, 0.00424957275390625, 0.042755126953125, 0.00025081634521484375, 0.50634765625, 0.0115203857421875, 0.0010194778442382812, 0.0007109642028808594, 0.1270751953125, 0.0005707740783691406], "tokens": [291, 2152, 280, 901, 45, 291, 415, 308, 2455, 5113, 40823, 27, 301, 324, 40823, 296, 280, 308, 20709, 27, 2455, 45, 324, 2152, 280, 308, 1516, 11290, 610, 296, 32, 1516, 11290, 27, 962, 308, 29805, 9693, 610, 296, 32, 29805, 9693, 293, 291, 320, 291, 442, 2152, 45, 284, 320]}
{"line_number": 236, "line_type": "original", "code": "    }", "entropy": 2.568359375, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [4.75, 0.385498046875], "tokens": [264, 320]}
{"line_number": 236, "line_type": "generated", "code": "\n            ret = true;\n        } else if (other instanceof Fraction) {\n            Fraction f = (Fraction) other;\n            ret = (numerator == f.numerator) && (denominator == f.denominator);\n        } else {\n            ret", "entropy": 0.1097412109375, "is_bug_line": false, "sus_score": 0.15249857033260467, "per_token_entropy": [0.85595703125, 0.60107421875, 0.002349853515625, 0.038848876953125, 0.00395965576171875, 0.08746337890625, 0.0016145706176757812, 0.031585693359375, 0.01319122314453125, 0.040069580078125, 0.017120361328125, 0.1461181640625, 0.00453948974609375, 0.03900146484375, 0.004085540771484375, 0.1187744140625, 0.1728515625, 0.62744140625, 0.03729248046875, 0.0023670196533203125, 0.0006060600280761719, 0.00426483154296875, 0.377197265625, 0.0005297660827636719, 0.339599609375, 0.37744140625, 0.0034732818603515625, 0.744140625, 0.2083740234375, 0.0005292892456054688, 0.015594482421875, 0.0011186599731445312, 7.367134094238281e-05, 0.09112548828125, 0.0008153915405273438, 0.282470703125, 0.0259246826171875, 0.138916015625, 0.0026264190673828125, 6.9141387939453125e-06, 0.0015316009521484375, 0.00133514404296875, 7.390975952148438e-05, 0.0002053976058959961, 5.960464477539062e-07, 0.003177642822265625, 0.1474609375, 0.0007443428039550781, 0.00536346435546875, 0.010223388671875, 0.0726318359375, 0.0019817352294921875], "tokens": [324, 2152, 280, 861, 45, 291, 320, 813, 415, 308, 2455, 5113, 40823, 27, 301, 324, 40823, 296, 280, 308, 20709, 27, 1604, 45, 324, 2152, 280, 308, 1516, 11290, 610, 296, 32, 1516, 11290, 27, 962, 308, 29805, 9693, 610, 296, 32, 29805, 9693, 293, 291, 320, 813, 301, 324, 2152]}
