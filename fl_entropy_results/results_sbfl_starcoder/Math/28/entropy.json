{"line_number": 138, "line_type": "original", "code": "                Integer minRow = null;", "entropy": 3.33203125, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [8.109375, 7.65234375, 4.5234375, 1.716796875, 0.10772705078125, 1.1884765625, 0.0301361083984375], "tokens": [2071, 4401, 1847, 2352, 280, 744, 45]}
{"line_number": 138, "line_type": "generated", "code": "\n     * @param tableau simple tableau for the problem\n     * @return the solution of the problem\n     * @throws MaxCountExceededException if the maximal iteration count has been exceeded\n     * @throws NoFeasibleSolutionException if no feasible solution", "entropy": 0.2376708984375, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [0.33740234375, 0.042144775390625, 0.490478515625, 0.1376953125, 0.57568359375, 0.0011854171752929688, 0.3916015625, 0.006072998046875, 0.0017719268798828125, 0.2027587890625, 0.00441741943359375, 0.036529541015625, 0.1693115234375, 0.0670166015625, 0.01117706298828125, 0.73583984375, 1.423828125, 1.814453125, 1.931640625, 0.587890625, 0.73046875, 0.349609375, 0.06707763671875, 0.005764007568359375, 0.0171051025390625, 0.39404296875, 0.0002827644348144531, 2.3365020751953125e-05, 5.924701690673828e-05, 0.0122528076171875, 0.008331298828125, 0.03778076171875, 0.0010366439819335938, 0.0214691162109375, 0.0006656646728515625, 0.0435791015625, 0.001617431640625, 0.0014400482177734375, 0.01290130615234375, 0.125244140625, 0.0006480216979980469, 0.00545501708984375, 0.16064453125, 0.0054779052734375, 0.00040459632873535156, 0.002002716064453125, 0.0001900196075439453, 0.0130462646484375, 1.2275390625, 0.1256103515625, 0.00037598609924316406, 0.01690673828125], "tokens": [275, 319, 477, 753, 1858, 4452, 4281, 1858, 4452, 436, 322, 3708, 275, 319, 477, 601, 322, 5295, 432, 322, 3708, 275, 319, 477, 5117, 7462, 1534, 28741, 984, 415, 322, 1769, 2977, 13330, 2385, 1401, 2583, 31793, 275, 319, 477, 5117, 3139, 9008, 38294, 13628, 984, 415, 1289, 5246, 38294, 5295]}
{"line_number": 139, "line_type": "original", "code": "                int minIndex = tableau.getWidth();", "entropy": 2.05078125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.16796875, 3.396484375, 4.51953125, 0.1806640625, 0.042388916015625, 0.546875, 2.6345252990722656e-05, 0.0017547607421875, 2.580078125, 2.060546875], "tokens": [2071, 629, 1847, 1284, 280, 1858, 4452, 32, 21422, 473]}
{"line_number": 139, "line_type": "generated", "code": "\n     * @throws MaxCountExceededException if the maximal iteration count has been exceeded\n     * @throws NoFeasibleSolutionException if no feasible solution was found\n     * @throws NoSolutionException if no solution was found\n     */\n    protected void solvePhase", "entropy": 0.250732421875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.47265625, 0.2498779296875, 0.038848876953125, 1.0625, 0.23974609375, 0.00044798851013183594, 2.2530555725097656e-05, 6.973743438720703e-05, 0.01480865478515625, 0.00943756103515625, 0.031829833984375, 0.00098419189453125, 0.01416015625, 0.0008211135864257812, 0.025177001953125, 0.00330352783203125, 0.0014495849609375, 0.08673095703125, 0.20458984375, 0.0013275146484375, 0.0235595703125, 0.1865234375, 0.006687164306640625, 0.0005702972412109375, 0.0019588470458984375, 0.00038886070251464844, 0.01444244384765625, 1.3427734375, 0.0960693359375, 0.0004265308380126953, 0.0232391357421875, 1.7197265625, 0.01088714599609375, 0.348388671875, 0.9267578125, 0.00879669189453125, 0.059844970703125, 1.4560546875, 0.74365234375, 0.10992431640625, 0.010406494140625, 0.28955078125, 0.9609375, 0.2919921875, 0.007419586181640625, 0.410400390625, 0.51708984375, 0.022796630859375, 0.438232421875, 0.04022216796875, 0.50732421875, 0.006511688232421875], "tokens": [275, 319, 477, 5117, 7462, 1534, 28741, 984, 415, 322, 1769, 2977, 13330, 2385, 1401, 2583, 31793, 275, 319, 477, 5117, 3139, 9008, 38294, 13628, 984, 415, 1289, 5246, 38294, 5295, 1597, 2431, 275, 319, 477, 5117, 3139, 13628, 984, 415, 1289, 5295, 1597, 2431, 275, 569, 284, 2522, 763, 10932, 12230]}
{"line_number": 140, "line_type": "original", "code": "                for (Integer row : minRatioPositions) {", "entropy": 1.66796875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [6.76171875, 2.193359375, 0.07635498046875, 3.78515625, 1.44140625, 0.172119140625, 3.80859375, 0.005466461181640625, 0.01226806640625, 0.00986480712890625, 0.075927734375], "tokens": [2071, 436, 308, 3061, 2698, 499, 1847, 10681, 17962, 27, 301]}
{"line_number": 140, "line_type": "generated", "code": "\n     */\n    protected void solvePhase1(final SimplexTableau tableau)\n        throws MaxCountExceededException {\n\n        // solve for the slack variables\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i", "entropy": 0.298095703125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [1.17578125, 0.487548828125, 0.05224609375, 0.19970703125, 0.03717041015625, 0.83056640625, 0.005863189697265625, 0.0802001953125, 0.005870819091796875, 0.10693359375, 0.0007886886596679688, -0.0, 2.3245811462402344e-05, 1.537799835205078e-05, 0.0008254051208496094, 1.5497207641601562e-06, 0.0212249755859375, 0.365234375, 0.0003552436828613281, 0.0149078369140625, 3.516674041748047e-05, 4.0531158447265625e-05, 2.968311309814453e-05, 0.268310546875, 0.5068359375, 1.06640625, 2.2265625, 1.3544921875, 0.94140625, 2.990234375, 0.1175537109375, 0.6728515625, 0.673828125, 0.0018415451049804688, 0.02459716796875, 0.413818359375, 0.0007376670837402344, 0.4296875, -0.0, 3.24249267578125e-05, 0.040863037109375, 0.099609375, 0.00012063980102539062, 0.0423583984375, 0.017120361328125, 0.0035266876220703125, 0.00209808349609375, 9.179115295410156e-06, 0.0002722740173339844, 0.131591796875, 0.08544921875, 0.0035915374755859375], "tokens": [275, 569, 284, 2522, 763, 10932, 12230, 35, 26, 3220, 28421, 1909, 1599, 4452, 1858, 4452, 27, 291, 2571, 7462, 1534, 28741, 984, 301, 584, 434, 10932, 436, 322, 28039, 4886, 291, 436, 308, 410, 595, 280, 1858, 4452, 32, 15207, 33312, 10905, 473, 595, 333, 1858, 4452, 32, 22382, 473, 595]}
{"line_number": 141, "line_type": "original", "code": "                    int i = tableau.getNumObjectiveFunctions();", "entropy": 1.7998046875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.7421875, 4.44921875, 3.044921875, 0.1595458984375, 2.6484375, 0.00106048583984375, 0.0023326873779296875, 0.155517578125, 0.474609375, 0.0005588531494140625, 0.1123046875], "tokens": [4696, 629, 595, 280, 1858, 4452, 32, 15207, 33312, 10905, 473]}
{"line_number": 141, "line_type": "generated", "code": "\n     */\n    protected void phase1(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException {\n\n        // Phase 1: pivot until we get a basic feasible solution\n        while (!tableau.isBasicFe", "entropy": 0.376708984375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.658203125, 0.10919189453125, 0.0295562744140625, 0.1492919921875, 0.034332275390625, 0.802734375, 0.384521484375, 0.0164642333984375, 0.049652099609375, 0.0009546279907226562, -0.0, 2.6702880859375e-05, 2.300739288330078e-05, 0.0004398822784423828, 1.5497207641601562e-06, 0.01031494140625, 0.11810302734375, 0.0001690387725830078, 0.00977325439453125, 1.633167266845703e-05, 2.288818359375e-05, 1.2755393981933594e-05, 0.00414276123046875, 0.0230712890625, 1.4066696166992188e-05, 7.3909759521484375e-06, 9.5367431640625e-07, 0.0197601318359375, 0.300048828125, 1.0380859375, 2.845703125, 0.06842041015625, 0.004047393798828125, 0.6337890625, 3.302734375, 1.0849609375, 1.2216796875, 1.591796875, 0.3330078125, 1.5673828125, 0.034515380859375, 9.202957153320312e-05, 0.045654296875, 0.4052734375, 0.7392578125, 0.9072265625, 0.41845703125, 3.0040740966796875e-05, 0.00052642822265625, 0.1402587890625, 0.469482421875, 0.0134429931640625], "tokens": [275, 569, 284, 2522, 763, 11225, 35, 26, 3220, 28421, 1909, 1599, 4452, 1858, 4452, 27, 291, 2571, 7462, 1534, 28741, 984, 30, 1683, 28959, 13628, 984, 301, 584, 434, 26159, 225, 35, 44, 20991, 6222, 996, 622, 312, 6550, 5246, 38294, 5295, 291, 2218, 1429, 1274, 4452, 32, 297, 7099, 9008]}
{"line_number": 142, "line_type": "original", "code": "                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {", "entropy": 2.216796875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.2421875, 3.24609375, 4.75, 2.701171875, 0.340087890625, 1.1591796875, 0.00453948974609375, 0.00968170166015625, 2.08984375, 0.90625, 0.197998046875, 1.0546875, 0.025177001953125, 2.697265625, 6.9296875, 4.4765625, 0.611328125, 8.6953125, 0.376220703125, 0.0872802734375, 0.0338134765625, 0.154541015625], "tokens": [4696, 436, 23031, 595, 333, 1858, 4452, 32, 21422, 346, 429, 225, 35, 962, 1847, 2352, 863, 2698, 45, 595, 1987, 301]}
{"line_number": 142, "line_type": "generated", "code": "\n     */\n    protected void solvePhase1(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {\n\n        // solve the problem by applying Bland's rule until we find a solution\n       ", "entropy": 0.42041015625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.6572265625, 0.08734130859375, 0.0269622802734375, 0.13671875, 0.04736328125, 0.7490234375, 0.00543212890625, 0.048583984375, 0.0055389404296875, 0.037445068359375, 0.0008358955383300781, -0.0, 1.990795135498047e-05, 2.2411346435546875e-05, 0.0005164146423339844, 1.3113021850585938e-06, 0.0168609619140625, 0.08935546875, 0.0001558065414428711, 0.038116455078125, 3.2186508178710938e-06, 1.71661376953125e-05, 2.4437904357910156e-05, 0.00165557861328125, 0.287109375, 9.298324584960938e-06, 3.6954879760742188e-06, 1.2516975402832031e-05, 0.0452880859375, 0.055999755859375, 1.0728836059570312e-05, 2.384185791015625e-06, 7.3909759521484375e-06, 4.1604042053222656e-05, 0.0196685791015625, 0.28369140625, 1.015625, 2.9921875, 1.154296875, 1.9306640625, 2.037109375, 2.541015625, 1.0087890625, 0.0153656005859375, 0.00104522705078125, 0.0223541259765625, 1.20703125, 1.169921875, 0.900390625, 0.232666015625, 2.27734375, 0.71826171875], "tokens": [275, 569, 284, 2522, 763, 10932, 12230, 35, 26, 3220, 28421, 1909, 1599, 4452, 1858, 4452, 27, 291, 2571, 7462, 1534, 28741, 984, 30, 1683, 28959, 13628, 984, 30, 3139, 9008, 38294, 13628, 984, 301, 584, 434, 10932, 322, 3708, 810, 23242, 551, 6803, 1182, 5750, 6222, 996, 2290, 312, 5295, 291]}
{"line_number": 143, "line_type": "original", "code": "                        if (row == tableau.getBasicRow(i)) {", "entropy": 2.056640625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [10.96875, 2.64453125, 0.1739501953125, 7.51171875, 1.580078125, 3.50390625, 0.0005521774291992188, 0.0042724609375, 1.40234375, 0.64111328125, 0.0350341796875, 0.01177978515625, 2.158203125, 0.12005615234375, 0.08807373046875], "tokens": [6797, 415, 308, 643, 610, 1858, 4452, 32, 371, 7099, 2352, 26, 91, 490, 301]}
{"line_number": 143, "line_type": "generated", "code": "\n    protected void phase1(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {\n\n        // check if the current solution is optimal\n        if (isOptimal(tableau)) {", "entropy": 0.334716796875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.40869140625, 0.28369140625, 0.028717041015625, 0.92431640625, 0.32080078125, 0.0164031982421875, 0.040496826171875, 0.0017595291137695312, -0.0, 3.814697265625e-05, 4.506111145019531e-05, 0.001285552978515625, 3.2186508178710938e-06, 0.0187835693359375, 0.11663818359375, 0.0003795623779296875, 0.043182373046875, 8.225440979003906e-06, 2.205371856689453e-05, 2.3484230041503906e-05, 0.002288818359375, 0.30810546875, 1.2516975402832031e-05, 1.4543533325195312e-05, 1.633167266845703e-05, 0.041534423828125, 0.045379638671875, 1.823902130126953e-05, 2.9802322387695312e-06, 6.4373016357421875e-06, 8.07046890258789e-05, 0.01458740234375, 0.42822265625, 0.9970703125, 2.986328125, 0.49951171875, 0.70703125, 3.0, 2.193359375, 0.06561279296875, 0.9951171875, 0.39404296875, 1.080078125, 0.043182373046875, 0.859375, 0.2322998046875, 7.677078247070312e-05, 0.1932373046875, 0.00335693359375, 1.2278556823730469e-05, 0.11236572265625, 0.00455474853515625], "tokens": [284, 2522, 763, 11225, 35, 26, 3220, 28421, 1909, 1599, 4452, 1858, 4452, 27, 291, 2571, 7462, 1534, 28741, 984, 30, 1683, 28959, 13628, 984, 30, 3139, 9008, 38294, 13628, 984, 301, 584, 434, 1505, 415, 322, 1550, 5295, 438, 24824, 291, 415, 308, 297, 5482, 2977, 26, 1274, 4452, 490, 301]}
{"line_number": 144, "line_type": "original", "code": "                            if (i < minIndex) {", "entropy": 4.3125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [10.609375, 7.04296875, 0.18701171875, 8.015625, 2.259765625, 5.7734375, 4.5703125, 0.268798828125, 0.084228515625], "tokens": [9316, 415, 308, 91, 333, 1847, 1284, 27, 301]}
{"line_number": 144, "line_type": "generated", "code": "\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {\n\n        // solve the problem using the dual simplex algorithm\n        final DualSimplexSolver dual = new DualSimplexSolver();\n        dual.setMaxIterations(getMaxIterations());", "entropy": 0.48193359375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.312744140625, 0.27490234375, 0.093505859375, 2.014636993408203e-05, 4.3272972106933594e-05, 3.898143768310547e-05, 0.01049041748046875, 0.4111328125, 1.919269561767578e-05, 3.24249267578125e-05, 1.7881393432617188e-06, 0.051116943359375, 0.033782958984375, 2.562999725341797e-05, 7.152557373046875e-06, 1.3470649719238281e-05, 0.00010085105895996094, 0.032745361328125, 0.3994140625, 0.9326171875, 2.912109375, 1.1044921875, 1.994140625, 1.7431640625, 1.0419921875, 2.181640625, 1.3935546875, 8.702278137207031e-06, 1.15625, 0.487060546875, 1.275390625, 0.8291015625, 0.422119140625, 0.00013267993927001953, 0.64794921875, 0.68017578125, 1.03515625, 0.07574462890625, 0.00852203369140625, 0.004467010498046875, 8.344650268554688e-07, 0.0008325576782226562, 0.9873046875, 0.1678466796875, 0.454833984375, 0.0018434524536132812, 1.0087890625, 0.315673828125, 0.0051727294921875, 0.4521484375, 0.00689697265625, 0.11505126953125], "tokens": [291, 2571, 7462, 1534, 28741, 984, 30, 1683, 28959, 13628, 984, 30, 3139, 9008, 38294, 13628, 984, 301, 584, 434, 10932, 322, 3708, 1471, 322, 27068, 7396, 1909, 8218, 291, 1158, 42671, 31390, 1909, 17766, 27068, 280, 537, 42671, 31390, 1909, 17766, 473, 291, 27068, 32, 27267, 31219, 26, 23769, 31219, 1035]}
{"line_number": 145, "line_type": "original", "code": "                                minIndex = i;", "entropy": 5.140625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [11.734375, 9.296875, 3.8515625, 0.058502197265625, 5.6484375, 0.250244140625], "tokens": [11457, 1847, 1284, 280, 595, 45]}
{"line_number": 145, "line_type": "generated", "code": "\n        while (true) {\n            doIteration(tableau);", "entropy": 0.3671875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.50830078125, 1.3251953125, 0.331787109375, 0.4287109375, 0.00223541259765625, 0.06414794921875, 0.3388671875, 1.765625, 0.006038665771484375, 0.0020046234130859375, 0.0010528564453125, 5.602836608886719e-06, 0.0013666152954101562], "tokens": [291, 2218, 308, 1508, 27, 301, 324, 745, 21863, 26, 1274, 4452, 293]}
{"line_number": 146, "line_type": "original", "code": "                                minRow = row;", "entropy": 5.32421875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [11.2421875, 8.6640625, 4.41015625, 0.09149169921875, 6.6015625, 0.92578125], "tokens": [11457, 1847, 2352, 280, 2698, 45]}
{"line_number": 146, "line_type": "generated", "code": "\n        // initialize the objective function coefficients to zero\n        for (int i = 0; i < tableau.getNumObjectiveFunctions(); i++) {\n            tableau.setObjective(i, 0d);\n        }\n\n        // solve the problem using the", "entropy": 0.537109375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.84033203125, 1.4423828125, 3.6015625, 0.62255859375, 2.138671875, 0.1893310546875, 1.3525390625, 0.8525390625, 1.8564453125, 0.2685546875, 0.492431640625, 0.0009326934814453125, 0.024322509765625, 0.359619140625, 0.0008902549743652344, 0.162353515625, 0.0015058517456054688, 0.0027484893798828125, 0.0004558563232421875, 0.00867462158203125, 0.02801513671875, 2.5033950805664062e-06, 6.473064422607422e-05, 0.2406005859375, 0.1077880859375, 0.0003039836883544922, 0.00814056396484375, 0.05047607421875, 0.0012426376342773438, 0.0009746551513671875, 0.04193115234375, 0.285400390625, 1.1444091796875e-05, 9.655952453613281e-05, 0.047760009765625, 0.6376953125, 1.6611328125, 0.01023101806640625, 0.001239776611328125, 0.042266845703125, 0.0014944076538085938, 0.9462890625, 0.04815673828125, 0.04193115234375, 0.00020754337310791016, 0.599609375, 0.200439453125, 2.369140625, 0.96435546875, 2.298828125, 2.091796875, 0.98583984375], "tokens": [291, 434, 7379, 322, 25110, 667, 26370, 372, 5934, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1858, 4452, 32, 15207, 33312, 10905, 473, 595, 1987, 301, 324, 1858, 4452, 32, 470, 33312, 26, 91, 30, 225, 34, 86, 293, 291, 320, 584, 434, 10932, 322, 3708, 1471, 322]}
{"line_number": 150, "line_type": "original", "code": "                }", "entropy": 6.28125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.40625, 4.16015625], "tokens": [2071, 320]}
{"line_number": 150, "line_type": "generated", "code": "\n        // loop until we find a pivot column with a positive coefficient\n        Integer pivotCol = null;\n        while (pivotCol == null) {\n            incrementIterationsCounter();\n            pivotCol = getPivotColumn(tableau);\n            if (pivotCol == null", "entropy": 0.45947265625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.6455078125, 0.99267578125, 2.298828125, 0.67236328125, 0.78125, 0.95556640625, 0.35107421875, 1.4189453125, 0.78125, 2.048828125, 0.71484375, 1.248046875, 1.7353515625, 0.79345703125, 1.1943359375, 0.167724609375, 0.19189453125, 0.416015625, 0.445556640625, 0.0012369155883789062, 0.0151519775390625, 0.8642578125, 0.07958984375, 0.043609619140625, 0.00035572052001953125, 0.006580352783203125, 0.0002200603485107422, 0.47265625, 0.005680084228515625, 0.34228515625, 1.9931640625, 0.0245819091796875, 0.00021386146545410156, 0.0025348663330078125, 0.98828125, 0.324462890625, 0.004016876220703125, 0.000400543212890625, 0.117431640625, 0.05291748046875, 0.0007257461547851562, 0.0804443359375, 0.0006694793701171875, 1.9073486328125e-06, 0.0251922607421875, 0.425537109375, 0.110107421875, 0.0034999847412109375, 0.0106201171875, 5.8770179748535156e-05, 0.03973388671875, 0.002410888671875], "tokens": [291, 434, 5258, 6222, 996, 2290, 312, 20991, 2623, 623, 312, 11557, 17134, 291, 4401, 20991, 871, 280, 744, 45, 291, 2218, 308, 23444, 871, 610, 744, 27, 301, 324, 11885, 31219, 6477, 473, 324, 20991, 871, 280, 622, 28267, 2137, 26, 1274, 4452, 293, 324, 415, 308, 23444, 871, 610, 744]}
{"line_number": 151, "line_type": "original", "code": "                return minRow;", "entropy": 5.5546875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.3515625, 6.69140625, 6.1953125, 6.4375, 0.08447265625], "tokens": [2071, 442, 1847, 2352, 45]}
{"line_number": 151, "line_type": "generated", "code": "\n        // repeat until the artificial variables are all at the top of the tableau\n        while (tableau.getNumArtificialVariables() > 0) {\n            // solve a restricted problem\n            final SimplexTableau restrictedTableau = tableau.", "entropy": 0.5712890625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.6240234375, 0.86083984375, 3.36328125, 0.6826171875, 1.6611328125, 0.7470703125, 0.0008974075317382812, 0.354248046875, 0.400146484375, 0.2354736328125, 1.0751953125, 0.2386474609375, 0.8349609375, 1.359375, 0.046173095703125, 0.281982421875, 0.016387939453125, 0.151123046875, 0.6015625, 0.1044921875, 0.67529296875, 0.00018894672393798828, 0.000888824462890625, 0.412353515625, 0.11614990234375, 0.00011515617370605469, 0.00487518310546875, 0.00029730796813964844, 0.1802978515625, 0.043243408203125, 0.0024547576904296875, 0.068359375, 0.0269622802734375, 0.64306640625, 1.5478515625, 2.4375, 1.9375, 1.6181640625, 0.333984375, 0.99755859375, 1.7470703125, 1.13671875, 2.384185791015625e-07, 0.01513671875, 0.0005717277526855469, 0.1845703125, 0.62841796875, 0.0005435943603515625, 0.0916748046875, 1.201171875, 6.532669067382812e-05, 0.0041046142578125], "tokens": [291, 434, 13760, 6222, 322, 5549, 31251, 4886, 884, 1169, 821, 322, 2663, 432, 322, 1858, 4452, 291, 2218, 308, 1274, 4452, 32, 15207, 5271, 31251, 10165, 346, 848, 225, 34, 27, 301, 324, 434, 10932, 312, 27665, 3708, 324, 1158, 28421, 1909, 1599, 4452, 27665, 1599, 4452, 280, 1858, 4452, 32]}
{"line_number": 127, "line_type": "original", "code": "                }", "entropy": 6.05078125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [7.03125, 5.0703125], "tokens": [2071, 320]}
{"line_number": 127, "line_type": "generated", "code": "\n\n        // update the tableau\n        tableau.addMultipleOfRowToRow(pivotRow, pivotCol, -1);\n        for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n            int column =", "entropy": 0.313720703125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [1.359375, 0.1884765625, 1.7744140625, 0.368896484375, 1.3046875, 0.007183074951171875, 0.69921875, 1.2177734375, 9.417533874511719e-06, 0.0035228729248046875, 1.8232421875, 0.0202178955078125, 0.493896484375, 0.0467529296875, 0.1307373046875, 0.68896484375, 0.00940704345703125, 0.35205078125, 0.0650634765625, 0.0037746429443359375, 0.38037109375, 0.59814453125, 0.0193939208984375, 0.1519775390625, 0.03271484375, 0.37939453125, 0.62109375, 1.0244140625, 0.00452423095703125, 0.10736083984375, 0.2491455078125, 0.005523681640625, 0.1739501953125, 0.0008568763732910156, 0.004253387451171875, 0.000728607177734375, 0.006969451904296875, 0.0260009765625, 1.430511474609375e-06, 0.00017583370208740234, 0.26708984375, 0.468017578125, 0.00015115737915039062, 0.006893157958984375, 0.0093536376953125, 0.0249176025390625, 0.0024967193603515625, 0.003337860107421875, 0.051483154296875, 0.491455078125, 0.63916015625, 0.00559234619140625], "tokens": [584, 434, 1974, 322, 1858, 4452, 291, 1858, 4452, 32, 669, 11726, 1419, 2352, 705, 2352, 26, 23444, 2352, 30, 20991, 871, 30, 429, 35, 293, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1858, 4452, 32, 15207, 5271, 31251, 10165, 473, 595, 1987, 301, 324, 629, 2623, 280]}
{"line_number": 121, "line_type": "original", "code": "                        int column = i + tableau.getArtificialVariableOffset();", "entropy": 2.69921875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [9.25, 4.65234375, 3.4765625, 0.146728515625, 8.328125, 3.0546875, 0.394287109375, 0.0006399154663085938, 0.002086639404296875, 5.87109375, 2.83984375, 0.0009760856628417969, 1.6298828125, 0.81884765625, 0.044708251953125], "tokens": [6797, 629, 2623, 280, 595, 474, 1858, 4452, 32, 371, 5271, 31251, 3818, 3457, 473]}
{"line_number": 121, "line_type": "generated", "code": "\n        }\n\n        // pivot the tableau\n        pivot(tableau, pivotCol, pivotRow);\n    }\n\n    /**\n     * Performs a pivot operation on the tableau.\n     * @param tableau simple tableau for the problem\n     * @param pivot", "entropy": 0.28564453125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.346923828125, 0.017791748046875, 0.63232421875, 1.1103515625, 0.77783203125, 1.4248046875, 0.1549072265625, 0.004673004150390625, 0.264404296875, 1.0126953125, 0.286376953125, 0.05950927734375, 3.5762786865234375e-07, 0.00209808349609375, 0.0023441314697265625, 0.74951171875, 0.002330780029296875, 0.0007257461547851562, 0.00018608570098876953, 0.01056671142578125, 0.5693359375, 0.005889892578125, 0.21728515625, 0.036407470703125, 0.04144287109375, 4.756450653076172e-05, 2.146484375, 1.03515625, 0.2418212890625, 0.650390625, 0.498046875, 0.062408447265625, 1.0654296875, 0.0008077621459960938, 0.445556640625, 0.124267578125, 0.0003795623779296875, 0.233642578125, 0.0003914833068847656, 0.0185699462890625, 0.00012385845184326172, 0.373046875, 0.0027751922607421875, 0.0008988380432128906, 0.12548828125, 0.0015344619750976562, 0.0027370452880859375, 0.01146697998046875, 0.004489898681640625, 0.0013551712036132812, 0.0005064010620117188, 0.0745849609375], "tokens": [291, 320, 584, 434, 20991, 322, 1858, 4452, 291, 20991, 26, 1274, 4452, 30, 20991, 871, 30, 20991, 2352, 293, 284, 320, 446, 1022, 275, 319, 44750, 312, 20991, 4212, 544, 322, 1858, 4452, 32, 275, 319, 477, 753, 1858, 4452, 4281, 1858, 4452, 436, 322, 3708, 275, 319, 477, 753, 20991]}
{"line_number": 122, "line_type": "original", "code": "                        final double entry = tableau.getEntry(row, column);", "entropy": 1.9033203125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [10.0625, 3.5703125, 0.2763671875, 2.9140625, 0.0831298828125, 0.032806396484375, 2.6702880859375e-05, 0.0017080307006835938, 0.0156097412109375, 0.00047850608825683594, 7.91015625, 0.0196533203125, 1.7490234375, 0.008148193359375], "tokens": [6797, 1158, 2064, 3414, 280, 1858, 4452, 32, 48895, 26, 643, 30, 2623, 293]}
{"line_number": 122, "line_type": "generated", "code": "\n        tableau.pivot(pivotRow, pivotCol);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void doPhase(final int phase)\n        throws NumberIsTooSmallException, NoFeasibleSolutionException,\n        Max", "entropy": 0.3515625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.61083984375, 1.43359375, 5.459785461425781e-05, 0.01255035400390625, 0.225341796875, 0.0066680908203125, 0.003414154052734375, 0.29296875, 0.006862640380859375, 0.0034389495849609375, 0.0014142990112304688, 0.03167724609375, 0.4287109375, 0.003993988037109375, 0.497314453125, 0.0718994140625, 0.09539794921875, 4.696846008300781e-05, 3.123046875, 0.048492431640625, 0.0037689208984375, 0.01177978515625, 0.2890625, 0.00885009765625, 0.2315673828125, 0.002685546875, 0.0254974365234375, 0.533203125, 0.84521484375, 1.5185546875, 0.54443359375, 0.352783203125, 0.478515625, 1.470703125, 0.085205078125, 0.318603515625, 0.401123046875, 0.0003998279571533203, 1.0888671875, 0.0005440711975097656, 0.0005083084106445312, 0.066162109375, 7.05718994140625e-05, 0.042266845703125, 1.09765625, 0.0282440185546875, 0.0005702972412109375, 0.0035400390625, 0.0008449554443359375, 0.2030029296875, 1.5244140625, 0.2083740234375], "tokens": [291, 1858, 4452, 32, 23444, 26, 23444, 2352, 30, 20991, 871, 293, 284, 320, 446, 1022, 275, 319, 3088, 18446, 111, 275, 569, 284, 477, 1788, 284, 2522, 763, 745, 12230, 26, 3220, 629, 11225, 27, 291, 2571, 5104, 1622, 20563, 12470, 984, 30, 3139, 9008, 38294, 13628, 984, 30, 291, 7462]}
{"line_number": 123, "line_type": "original", "code": "                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {", "entropy": 1.3759765625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [8.71875, 2.3671875, 0.0927734375, 5.41015625, 0.0015621185302734375, 0.126220703125, 0.005626678466796875, 3.416015625, 0.01180267333984375, 0.1639404296875, 4.25, 0.515625, 0.093994140625, 0.32275390625, 0.0017271041870117188, 3.5762786865234375e-06, 2.599609375, 0.740234375, 3.39453125, 4.70703125, 2.29296875, 0.0046539306640625, 1.9296875, 0.0006647109985351562, 0.004718780517578125, 0.286376953125, 0.10150146484375, 0.004062652587890625, 0.00887298583984375, 2.171875, 0.2021484375, 0.077392578125], "tokens": [6797, 415, 308, 20398, 32, 3574, 26, 3038, 30, 225, 35, 86, 30, 1769, 28522, 1069, 27, 962, 2698, 32, 3574, 26, 1274, 4452, 32, 371, 7099, 2352, 26, 2592, 2610, 301]}
{"line_number": 123, "line_type": "generated", "code": "        // pivot the tableau\n        // the pivot value\n        final double pivotValue = tableau.getEntry(pivotRow, pivotCol);\n\n        // divide all entries in the pivot row by the pivot value\n        for (int i = 0; i <", "entropy": 0.5634765625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [1.69921875, 1.41015625, 1.48046875, 1.376953125, 0.162109375, 0.00665283203125, 0.6923828125, 1.87109375, 3.65234375, 0.64306640625, 3.228515625, 2.5390625, 0.54931640625, 0.01169586181640625, 0.08074951171875, 0.43212890625, 0.007251739501953125, 0.06280517578125, 1.2159347534179688e-05, 0.0007114410400390625, 0.051788330078125, 0.00023102760314941406, 0.0007863044738769531, 0.001773834228515625, 0.0009660720825195312, 0.0016498565673828125, 1.0132789611816406e-05, 0.00408935546875, 0.7607421875, 0.197509765625, 3.158203125, 1.2763671875, 0.869140625, 0.2626953125, 0.1243896484375, 0.40869140625, 0.255615234375, 0.2071533203125, 0.0377197265625, 0.0322265625, 0.07952880859375, 0.1920166015625, 0.6357421875, 0.0012807846069335938, 0.00415802001953125, 0.444580078125, 0.004528045654296875, 0.3212890625, 0.000804901123046875, 0.0020294189453125, 0.0005292892456054688, 0.05657958984375], "tokens": [351, 434, 20991, 322, 1858, 4452, 291, 434, 322, 20991, 786, 291, 1158, 2064, 20991, 882, 280, 1858, 4452, 32, 48895, 26, 23444, 2352, 30, 20991, 871, 293, 584, 434, 24910, 1169, 8036, 328, 322, 20991, 2698, 810, 322, 20991, 786, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333]}
{"line_number": 124, "line_type": "original", "code": "                            return row;", "entropy": 5.921875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [9.2109375, 7.98828125, 5.96875, 0.52685546875], "tokens": [9316, 442, 2698, 45]}
{"line_number": 124, "line_type": "generated", "code": "\n        // solve for the pivot variable\n        final double pivot = tableau.getEntry(pivotRow, pivotCol);\n        for (int i = 0; i < tableau.getWidth(); i++) {\n            tableau.setEntry(pivotRow,", "entropy": 0.32666015625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.65625, 0.5693359375, 3.9140625, 0.7451171875, 0.3603515625, 0.6611328125, 1.537109375, 0.74853515625, 2.275390625, 0.13916015625, 0.2244873046875, 1.1259765625, 0.1715087890625, 3.337860107421875e-06, 0.0005474090576171875, 0.3984375, 0.000324249267578125, 0.001125335693359375, 0.00286102294921875, 0.0016527175903320312, 0.0029125213623046875, 7.271766662597656e-06, 0.037139892578125, 0.1595458984375, 0.82373046875, 0.002513885498046875, 0.008453369140625, 0.275390625, 0.003101348876953125, 0.380859375, 0.0008282661437988281, 0.00222015380859375, 0.0007266998291015625, 0.0178070068359375, 0.0203094482421875, -0.0, 3.421306610107422e-05, 0.57421875, 0.0869140625, 0.03082275390625, 0.0013980865478515625, 0.0015506744384765625, 0.0794677734375, 0.5244140625, 2.7418136596679688e-06, 0.00010001659393310547, 0.358642578125, 0.05023193359375, 0.0022735595703125, 0.0017728805541992188, 0.0007100105285644531, 0.0002536773681640625], "tokens": [291, 434, 10932, 436, 322, 20991, 2677, 291, 1158, 2064, 20991, 280, 1858, 4452, 32, 48895, 26, 23444, 2352, 30, 20991, 871, 293, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1858, 4452, 32, 21422, 473, 595, 1987, 301, 324, 1858, 4452, 32, 470, 2711, 26, 23444, 2352, 30]}
{"line_number": 104, "line_type": "original", "code": "                    minRatioPositions.add(i);", "entropy": 2.04296875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [8.8515625, 5.6640625, 0.399658203125, 0.450927734375, 0.464111328125, 2.18359375, 0.00710296630859375, 0.3505859375, 0.01261138916015625], "tokens": [4696, 1847, 10681, 17962, 32, 669, 26, 91, 293]}
{"line_number": 104, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns the pivot element for the given column.  The pivot element is the element\n     * in the specified column that has the largest absolute value.\n     * @param tableau simple tableau for the problem\n     * @param col", "entropy": 0.46435546875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.294677734375, 0.028472900390625, 0.1661376953125, 0.05908203125, 0.04248046875, 7.903575897216797e-05, 1.314453125, 0.3974609375, 1.3984375, 0.5, 1.78515625, 0.446533203125, 1.0478515625, 0.9169921875, 1.5361328125, 1.2578125, 1.1455078125, 0.258056640625, 0.09564208984375, 0.2333984375, 0.463623046875, 1.572265625, 0.7275390625, 3.0994415283203125e-05, 0.58984375, 0.0557861328125, 1.0419921875, 0.45849609375, 0.88037109375, 1.5888671875, 0.1226806640625, 1.6357421875, 0.218994140625, 0.022491455078125, 0.7373046875, 0.381591796875, 0.0006623268127441406, 0.187255859375, 0.0023441314697265625, 0.021820068359375, 0.00010693073272705078, 0.1904296875, 0.0029354095458984375, 0.00024771690368652344, 0.04931640625, 0.0023899078369140625, 0.003688812255859375, 0.00995635986328125, 0.00042891502380371094, 0.00010395050048828125, 0.0114288330078125, 0.238525390625], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 322, 20991, 1994, 436, 322, 2702, 2623, 32, 225, 886, 20991, 1994, 438, 322, 1994, 275, 319, 328, 322, 3191, 2623, 688, 1401, 322, 22909, 7976, 786, 32, 275, 319, 477, 753, 1858, 4452, 4281, 1858, 4452, 436, 322, 3708, 275, 319, 477, 753, 932]}
{"line_number": 119, "line_type": "original", "code": "                for (Integer row : minRatioPositions) {", "entropy": 1.4560546875, "is_bug_line": true, "sus_score": 0.31622776601683794, "per_token_entropy": [6.28125, 4.375, 0.03375244140625, 2.708984375, 0.435546875, 0.03948974609375, 2.015625, 0.005401611328125, 0.0122528076171875, 0.00435638427734375, 0.107177734375], "tokens": [2071, 436, 308, 3061, 2698, 499, 1847, 10681, 17962, 27, 301]}
{"line_number": 119, "line_type": "generated", "code": "\n        if (pivotCol == null || pivotRow == null) {\n            // no pivot column found, i.e. unbounded solution\n            throw new UnboundedSolutionException();\n        }", "entropy": 0.401123046875, "is_bug_line": true, "sus_score": 0.31622776601683794, "per_token_entropy": [0.46142578125, 0.38525390625, 0.03289794921875, 0.04559326171875, 1.24609375, 0.13720703125, 0.01018524169921875, 0.5625, 0.00809478759765625, 0.006557464599609375, 0.0005769729614257812, 0.0002923011779785156, 0.02490234375, 0.0189971923828125, 0.17529296875, 0.59228515625, 1.37890625, 0.97119140625, 0.849609375, 1.5791015625, 1.1748046875, 2.77734375, 0.0003516674041748047, 0.002414703369140625, 0.083740234375, 0.833984375, 0.0008072853088378906, 0.76611328125, 0.27392578125, 0.27490234375, 0.01229095458984375, 0.01476287841796875, 4.875659942626953e-05, 5.507469177246094e-05, 4.410743713378906e-06, 0.50390625, 0.03826904296875, 0.00018787384033203125], "tokens": [291, 415, 308, 23444, 871, 610, 744, 1276, 20991, 2352, 610, 744, 27, 301, 324, 434, 1289, 20991, 2623, 2431, 30, 595, 32, 87, 32, 707, 28959, 5295, 324, 1422, 537, 1683, 28959, 13628, 984, 473, 291, 320]}
{"line_number": 120, "line_type": "original", "code": "                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {", "entropy": 0.818359375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [8.2734375, 5.83203125, 0.02667236328125, 0.2332763671875, 0.206298828125, 0.0122528076171875, 0.7001953125, 0.0243988037109375, 0.021240234375, 0.006969451904296875, 0.01226806640625, 0.1729736328125, 4.0531158447265625e-05, 0.002414703369140625, 0.408935546875, 1.6123046875, 0.001895904541015625, 0.336669921875, 0.029083251953125, 0.060272216796875, 0.0054473876953125, 0.01806640625], "tokens": [4696, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1858, 4452, 32, 15207, 5271, 31251, 10165, 473, 595, 1987, 301]}
{"line_number": 120, "line_type": "generated", "code": "\n            // the problem is unbounded\n            throw new UnboundedSolutionException();\n        }\n\n        tableau.pivot(pivotRow, pivotCol);\n    }\n\n    /**\n     * Returns the solution to the linear programming problem.\n     * @param tableau simple table", "entropy": 0.41796875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.250732421875, 0.82470703125, 2.283203125, 1.7158203125, 0.245849609375, 0.8388671875, 0.00391387939453125, 0.70166015625, 0.4970703125, 0.00872039794921875, 0.02435302734375, 8.440017700195312e-05, 0.00015294551849365234, 1.5616416931152344e-05, 0.4130859375, 0.175048828125, 0.0054168701171875, 0.45947265625, 1.83203125, 1.1444091796875e-05, 0.0245513916015625, 0.1578369140625, 0.004001617431640625, 0.0024318695068359375, 0.2890625, 0.0030002593994140625, 0.0019044876098632812, 0.0005702972412109375, 0.02301025390625, 0.50439453125, 0.0043792724609375, 0.376953125, 0.06549072265625, 0.11083984375, 5.6862831115722656e-05, 1.982421875, 0.38671875, 2.912109375, 0.72119140625, 0.054779052734375, 0.78125, 0.409912109375, 0.04205322265625, 0.662109375, 0.051177978515625, 0.0030803680419921875, 0.298583984375, 0.7548828125, 0.552734375, 0.0003082752227783203, 0.270751953125, 0.00379180908203125], "tokens": [324, 434, 322, 3708, 438, 707, 28959, 324, 1422, 537, 1683, 28959, 13628, 984, 473, 291, 320, 584, 1858, 4452, 32, 23444, 26, 23444, 2352, 30, 20991, 871, 293, 284, 320, 446, 1022, 275, 319, 3759, 322, 5295, 372, 322, 10081, 16031, 3708, 32, 275, 319, 477, 753, 1858, 4452, 4281, 1858]}
{"line_number": 227, "line_type": "original", "code": "            doIteration(tableau);", "entropy": 1.671875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.75390625, 4.875, 0.05255126953125, 0.00830078125, 0.006923675537109375, 8.630752563476562e-05, 0.005641937255859375], "tokens": [1468, 745, 21863, 26, 1274, 4452, 293]}
{"line_number": 227, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [], "tokens": []}
{"line_number": 209, "line_type": "original", "code": "    }", "entropy": 3.2734375, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [2.892578125, 3.65625], "tokens": [264, 320]}
{"line_number": 209, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [], "tokens": []}
