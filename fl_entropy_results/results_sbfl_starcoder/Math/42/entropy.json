{"line_number": 347, "line_type": "original", "code": "            columnsToDrop.add(col);", "entropy": 2.9765625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.84765625, 10.6328125, 1.19921875, 1.37109375, 0.39404296875, 0.1551513671875, 0.0093536376953125, 6.0078125, 0.1650390625], "tokens": [1468, 6090, 705, 6243, 32, 669, 26, 748, 293]}
{"line_number": 347, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the current value of the objective function.\n     *\n     * @return current value of the objective function\n     */\n    protected double getObjectiveValue() {\n        return getSolution().getValue();\n    }\n\n    /**\n     * Get the", "entropy": 0.2357177734375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [1.8828125, 0.036590576171875, 0.2861328125, 0.09136962890625, 0.0526123046875, 0.0004410743713378906, 1.1015625, 0.08184814453125, 1.263671875, 1.3330078125, 0.2308349609375, 0.0367431640625, 0.1463623046875, 0.08734130859375, 0.2100830078125, 0.029083251953125, 0.0013179779052734375, 0.21435546875, 5.054473876953125e-05, 0.0037364959716796875, 0.00852203369140625, 0.83740234375, 0.21044921875, 0.0244903564453125, 0.1072998046875, 0.002437591552734375, 0.004550933837890625, 0.0933837890625, 0.062042236328125, 0.01535797119140625, 0.306396484375, 0.050628662109375, 0.1907958984375, 0.1605224609375, 0.1846923828125, 0.003932952880859375, 0.0075531005859375, 0.54443359375, 0.487060546875, 0.50927734375, 0.09869384765625, 0.005985260009765625, 0.08343505859375, 0.3515625, 0.0213165283203125, 0.00023806095123291016, 0.176025390625, 0.051910400390625, 0.0248870849609375, 0.00027561187744140625, 0.475830078125, 0.06512451171875], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 1550, 786, 432, 322, 25110, 667, 32, 275, 319, 275, 319, 477, 601, 1550, 786, 432, 322, 25110, 667, 275, 569, 284, 2522, 2064, 622, 33312, 882, 346, 301, 291, 442, 622, 13628, 922, 6682, 473, 284, 320, 446, 1022, 275, 319, 1390, 322]}
{"line_number": 332, "line_type": "original", "code": "        List<Integer> columnsToDrop = new ArrayList<Integer>();", "entropy": 1.2822265625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [3.515625, 8.4140625, 0.033172607421875, 0.509765625, 0.0010919570922851562, 3.333984375, 1.2861328125, 0.1827392578125, 0.00616455078125, 0.05450439453125, 0.0222930908203125, 0.5068359375, 0.0023784637451171875, 0.0836181640625], "tokens": [351, 1682, 46, 3061, 48, 6090, 705, 6243, 280, 537, 5059, 46, 3061, 2923]}
{"line_number": 332, "line_type": "generated", "code": "\n        return false;\n    }\n\n    /**\n     * Get the solution to the problem.\n     * @return the solution to the problem\n     */\n    Solution getSolution() {\n        if (!isOptimal()) {\n            return null;\n        }\n\n        double[] pri", "entropy": 0.41748046875, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.1572265625, 0.6015625, 3.052734375, 0.006053924560546875, 0.054595947265625, 0.0006442070007324219, 0.19677734375, 0.062225341796875, 0.0321044921875, 0.00018537044525146484, 1.8583984375, 0.1444091796875, 2.71875, 0.884765625, 0.1844482421875, 0.72998046875, 0.290283203125, 0.18115234375, 0.004596710205078125, 0.13037109375, 0.0377197265625, 0.2010498046875, 0.08514404296875, 0.5283203125, 0.0145721435546875, 0.0181121826171875, 0.324951171875, 0.72509765625, 0.01172637939453125, 1.3017578125, 0.0675048828125, 0.00542449951171875, 0.00555419921875, 0.0067291259765625, 0.420654296875, 1.39453125, 0.446533203125, 0.0287628173828125, 0.006275177001953125, 9.417533874511719e-06, 0.00914764404296875, 0.010986328125, 0.08978271484375, 0.75537109375, 0.10028076171875, 0.0008673667907714844, 0.0048828125, 0.0002682209014892578, 0.66357421875, 1.9140625, 0.1558837890625, 1.0751953125], "tokens": [291, 442, 901, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 5295, 372, 322, 3708, 32, 275, 319, 477, 601, 322, 5295, 372, 322, 3708, 275, 569, 284, 12186, 622, 13628, 346, 301, 291, 415, 1429, 297, 5482, 2977, 1157, 301, 324, 442, 744, 45, 291, 320, 584, 2064, 1178, 3031]}
{"line_number": 333, "line_type": "original", "code": "        columnsToDrop.add(0);", "entropy": 2.771484375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [3.18359375, 13.421875, 0.1798095703125, 0.050933837890625, 0.04803466796875, 0.038543701171875, 0.006343841552734375, 7.5, 0.501953125], "tokens": [351, 6090, 705, 6243, 32, 669, 26, 34, 293]}
{"line_number": 333, "line_type": "generated", "code": "\n            if (!Precision.equals(tableau.getEntry(0, i), 0d, maxUlps)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is infeasible.", "entropy": 0.16552734375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [1.2626953125, 0.155029296875, 1.2568359375, 0.650390625, 0.00019240379333496094, 0.007160186767578125, 0.005001068115234375, 0.3203125, 1.5735626220703125e-05, 0.0011453628540039062, 0.0016546249389648438, 0.0002529621124267578, 0.09039306640625, 0.0001659393310546875, 0.005157470703125, 0.0044708251953125, 0.024444580078125, 0.00958251953125, 0.2724609375, 0.03228759765625, 0.061248779296875, 0.00039887428283691406, 1.3113021850585938e-06, 0.0418701171875, 0.0142974853515625, 0.12091064453125, 0.0252685546875, 0.004291534423828125, 9.5367431640625e-05, 0.005603790283203125, 0.00045299530029296875, 0.0550537109375, 0.0002739429473876953, 0.27490234375, 0.05322265625, 0.048797607421875, 0.0005097389221191406, 0.02093505859375, 0.0008935928344726562, 0.2093505859375, 0.07403564453125, 0.0367431640625, 0.0004429817199707031, 0.91552734375, 0.99365234375, 0.18212890625, 0.156005859375, 0.08282470703125, 0.94677734375, 0.0625, 0.0009069442749023438, 0.12225341796875], "tokens": [324, 415, 1429, 20398, 32, 3574, 26, 1274, 4452, 32, 48895, 26, 34, 30, 595, 471, 225, 34, 86, 30, 1769, 28522, 1069, 490, 301, 400, 442, 901, 45, 324, 320, 291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 4946, 322, 3708, 438, 328, 1225, 38294, 32]}
{"line_number": 336, "line_type": "original", "code": "        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {", "entropy": 0.8525390625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [3.869140625, 4.83984375, 0.01435089111328125, 0.08038330078125, 0.2431640625, 0.006336212158203125, 1.1171875, 0.027587890625, 0.00012695789337158203, 0.087890625, 0.008819580078125, 0.0035533905029296875, 0.25390625, 7.08984375, 0.000732421875, 0.0706787109375, 0.007328033447265625, 0.133544921875, 0.01438140869140625, 0.01015472412109375, 0.0198822021484375], "tokens": [351, 436, 308, 410, 595, 280, 44929, 33312, 10905, 473, 595, 333, 622, 5271, 31251, 3818, 3457, 473, 595, 1987, 301]}
{"line_number": 336, "line_type": "generated", "code": "\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is at an infeasible state.\n     * @return whether the model is infeasible\n     */\n    boolean isInfeasible() {\n        for (int i =", "entropy": 0.163818359375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.4287109375, 0.324462890625, 0.1717529296875, 0.00054168701171875, 0.2261962890625, 0.0364990234375, 0.0217437744140625, 0.003261566162109375, 0.294921875, 0.00156402587890625, 0.2108154296875, 0.0697021484375, 0.0362548828125, 0.00019872188568115234, 0.8525390625, 1.02734375, 0.1939697265625, 0.172607421875, 0.087158203125, 0.98046875, 0.759765625, 0.289794921875, 0.00025391578674316406, 0.0135498046875, 0.037811279296875, 0.0260467529296875, 0.018096923828125, 0.0010194778442382812, 0.031402587890625, 0.004177093505859375, 0.03167724609375, 0.03363037109375, 0.247802734375, 0.4453125, 0.09564208984375, 0.0306396484375, 0.0026092529296875, 0.048828125, 0.010284423828125, 0.0157012939453125, 0.10650634765625, 0.1676025390625, 0.00011563301086425781, 0.00018322467803955078, 0.002887725830078125, 0.0010728836059570312, 0.07183837890625, 0.76904296875, 0.000598907470703125, 0.016387939453125, 0.09478759765625, 0.0006356239318847656], "tokens": [324, 320, 291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 4946, 322, 3708, 438, 821, 600, 328, 1225, 38294, 1603, 32, 275, 319, 477, 601, 4946, 322, 1542, 438, 328, 1225, 38294, 275, 569, 284, 1905, 43349, 1225, 38294, 346, 301, 291, 436, 308, 410, 595, 280]}
{"line_number": 337, "line_type": "original", "code": "            final double entry = tableau.getEntry(0, i);", "entropy": 0.81787109375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [3.923828125, 5.015625, 0.1383056640625, 1.4326171875, 0.23291015625, 0.2490234375, 0.0005917549133300781, 0.0148162841796875, 0.001308441162109375, 0.0035686492919921875, 0.373779296875, 0.00030803680419921875, 0.0269927978515625, 0.036285400390625], "tokens": [1468, 1158, 2064, 3414, 280, 1858, 4452, 32, 48895, 26, 34, 30, 595, 293]}
{"line_number": 337, "line_type": "generated", "code": "\n        }\n        return true;\n    }\n\n    /**\n     * Returns the optimal value of the objective function.\n     * @return the optimal value of the objective function\n     */\n    double getOptimalObjectiveValue() {\n        double value = 0d;\n       ", "entropy": 0.279541015625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.25146484375, 0.047149658203125, 0.220703125, 0.050384521484375, 0.034454345703125, 0.001922607421875, 0.07366943359375, 0.00104522705078125, 0.2060546875, 0.081298828125, 0.030792236328125, 0.00017440319061279297, 0.79150390625, 0.75732421875, 2.45703125, 0.81201171875, 0.564453125, 0.05206298828125, 1.0625, 0.1396484375, 0.26416015625, 0.07037353515625, 0.0015344619750976562, 0.06597900390625, 0.0094451904296875, 0.057464599609375, 0.1356201171875, 0.05230712890625, 0.132568359375, 0.002178192138671875, 0.004047393798828125, 0.005550384521484375, 0.37744140625, 0.54931640625, 0.0142364501953125, 0.271728515625, 0.033599853515625, 0.7548828125, 0.02020263671875, 0.349365234375, 1.068359375, 0.0024852752685546875, 0.01020050048828125, 0.046051025390625, 0.666015625, 0.79345703125, 0.0037593841552734375, 0.174072265625, 0.001094818115234375, 0.89794921875, 0.0015573501586914062, 0.054840087890625], "tokens": [291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 24824, 786, 432, 322, 25110, 667, 32, 275, 319, 477, 601, 322, 24824, 786, 432, 322, 25110, 667, 275, 569, 284, 2064, 622, 5482, 2977, 33312, 882, 346, 301, 291, 2064, 786, 280, 225, 34, 86, 45, 291]}
{"line_number": 338, "line_type": "original", "code": "            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {", "entropy": 0.92822265625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [6.1171875, 1.732421875, 0.1607666015625, 2.685546875, 0.0015516281127929688, 1.107421875, 0.01497650146484375, 2.40234375, 0.00846099853515625, 0.09161376953125, 0.2186279296875, 0.041839599609375, 0.018524169921875, 4.203125, 0.0298004150390625, 2.6941299438476562e-05, 0.03533935546875, 1.451171875, 0.0023403167724609375, 0.004215240478515625, 0.01678466796875, 0.08038330078125], "tokens": [1468, 415, 308, 20398, 32, 23908, 26, 3038, 30, 225, 34, 86, 30, 1769, 28522, 1069, 27, 848, 225, 34, 27, 301]}
{"line_number": 338, "line_type": "generated", "code": "\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is infeasible.\n     * @return whether the model is infeasible\n     */\n    boolean isInfeasible() {\n        for (int i = getNumObjectiveFunctions(); i < get", "entropy": 0.1524658203125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.2220458984375, 0.341064453125, 0.08489990234375, 0.00356292724609375, 0.1292724609375, 0.0017385482788085938, 0.2464599609375, 0.077880859375, 0.0301361083984375, 0.00014889240264892578, 0.80615234375, 0.96337890625, 0.18505859375, 0.1673583984375, 0.08050537109375, 1.126953125, 0.044708251953125, 0.0008006095886230469, 0.129150390625, 0.029541015625, 0.0012502670288085938, 0.039093017578125, 0.00460052490234375, 0.048309326171875, 0.042999267578125, 0.36279296875, 0.37255859375, 0.04522705078125, 0.00237274169921875, 0.0014905929565429688, 0.0694580078125, 0.01337432861328125, 0.0110626220703125, 0.11163330078125, 0.31005859375, 0.00011706352233886719, 0.00022423267364501953, 0.0030574798583984375, 0.0018444061279296875, 0.111572265625, 0.69580078125, 0.0006642341613769531, 0.0150604248046875, 0.0924072265625, 0.0008234977722167969, 0.7900390625, 0.005054473876953125, 1.0371208190917969e-05, 0.03533935546875, 0.003063201904296875, 0.0011196136474609375, 0.0675048828125], "tokens": [291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 4946, 322, 3708, 438, 328, 1225, 38294, 32, 275, 319, 477, 601, 4946, 322, 1542, 438, 328, 1225, 38294, 275, 569, 284, 1905, 43349, 1225, 38294, 346, 301, 291, 436, 308, 410, 595, 280, 44929, 33312, 10905, 473, 595, 333, 622]}
{"line_number": 344, "line_type": "original", "code": "        for (int i = 0; i < getNumArtificialVariables(); i++) {", "entropy": 0.5986328125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [3.142578125, 3.7734375, 0.06378173828125, 0.0816650390625, 0.131103515625, 0.00608062744140625, 0.56787109375, 0.04547119140625, 0.026092529296875, 0.001972198486328125, 0.032806396484375, 0.383544921875, 2.9140625, 0.00040149688720703125, 0.0367431640625, 0.0396728515625, 0.0472412109375, 0.007110595703125, 0.07635498046875], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 5271, 31251, 10165, 473, 595, 1987, 301]}
{"line_number": 344, "line_type": "generated", "code": "\n     * @return the current solution\n     */\n    RealVector getSolution() {\n        return tableau.getRowVector(0);\n    }\n\n    /**\n     * Get the current value of the objective function.\n     * @return the current value of the objective function", "entropy": 0.30126953125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.63720703125, 0.0267181396484375, 0.1556396484375, 0.08013916015625, 0.31591796875, 0.69677734375, 0.09124755859375, 0.3583984375, 0.59228515625, 0.03936767578125, 1.07421875, 0.00684356689453125, 0.221923828125, 0.09613037109375, 0.0487060546875, 0.026824951171875, 0.192138671875, 1.640625, 2.609375, 6.651878356933594e-05, 0.004119873046875, 0.2734375, 0.05474853515625, 0.0006427764892578125, 0.040069580078125, 0.344970703125, 0.052093505859375, 0.0012712478637695312, 0.284423828125, 0.061279296875, 0.0309906005859375, 5.1975250244140625e-05, 0.71728515625, 0.0667724609375, 1.0947265625, 1.4345703125, 0.29248046875, 0.02044677734375, 0.125732421875, 0.0966796875, 0.1705322265625, 0.07415771484375, 0.00278472900390625, 0.87744140625, 0.0071868896484375, 0.040252685546875, 0.39697265625, 0.1566162109375, 0.0228729248046875, 0.0030536651611328125, 0.004405975341796875, 0.00646209716796875], "tokens": [275, 319, 477, 601, 322, 1550, 5295, 275, 569, 284, 11443, 2863, 622, 13628, 346, 301, 291, 442, 1858, 4452, 32, 30093, 2863, 26, 34, 293, 284, 320, 446, 1022, 275, 319, 1390, 322, 1550, 786, 432, 322, 25110, 667, 32, 275, 319, 477, 601, 322, 1550, 786, 432, 322, 25110, 667]}
{"line_number": 345, "line_type": "original", "code": "          int col = i + getArtificialVariableOffset();", "entropy": 2.044921875, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [6.96875, 4.6875, 4.32421875, 0.125244140625, 4.359375, 1.291015625, 2.052734375, 0.56591796875, 0.0011949539184570312, 0.0298309326171875, 0.001953125, 0.119873046875], "tokens": [2033, 629, 932, 280, 595, 474, 622, 5271, 31251, 3818, 3457, 473]}
{"line_number": 345, "line_type": "generated", "code": "\n     */\n    public RealVector getSolution() {\n        return solution;\n    }\n\n    /**\n     * Get the current value of the objective function.\n     * @return the current value of the objective function", "entropy": 0.367431640625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.6630859375, 0.1981201171875, 0.0255584716796875, 1.935546875, 0.78173828125, 0.01068115234375, 0.12548828125, 0.181640625, 0.053680419921875, 0.037567138671875, 0.1939697265625, 1.435546875, 1.421875, 0.0960693359375, 0.11553955078125, 0.00017118453979492188, 0.303955078125, 0.059906005859375, 0.06256103515625, 0.00052642822265625, 0.6591796875, 0.05133056640625, 0.99755859375, 1.3388671875, 0.30029296875, 0.0249481201171875, 0.1307373046875, 0.09283447265625, 0.181396484375, 0.07342529296875, 0.0018644332885742188, 1.638671875, 0.012298583984375, 0.677734375, 0.58251953125, 0.1717529296875, 0.035675048828125, 0.005245208740234375, 0.007221221923828125, 0.00885009765625], "tokens": [275, 569, 284, 562, 11443, 2863, 622, 13628, 346, 301, 291, 442, 5295, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 1550, 786, 432, 322, 25110, 667, 32, 275, 319, 477, 601, 322, 1550, 786, 432, 322, 25110, 667]}
{"line_number": 346, "line_type": "original", "code": "          if (getBasicRow(col) == null) {", "entropy": 1.6611328125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [9.140625, 2.69140625, 0.2427978515625, 3.0859375, 1.78515625, 1.30078125, 0.022613525390625, 1.5537109375, 0.051177978515625, 0.6806640625, 0.5283203125, 0.1522216796875, 0.354248046875], "tokens": [2033, 415, 308, 371, 7099, 2352, 26, 748, 27, 610, 744, 27, 301]}
{"line_number": 346, "line_type": "generated", "code": "\n    public double[] getCurrentSolution() {\n        final double[] solution = new double[getWidth() - getNumArtificialVariables()];\n        for (int i = 0; i < solution.length; i++) {\n            solution[i] = tableau.", "entropy": 0.263427734375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.1697998046875, 1.2783203125, 1.37890625, 0.064697265625, 1.578125, 0.0101318359375, 0.042388916015625, 0.10943603515625, 0.48486328125, 1.8251953125, 0.10601806640625, 0.006343841552734375, 0.95458984375, 0.007297515869140625, 0.029815673828125, 0.0025482177734375, 0.0021152496337890625, 1.5966796875, 0.422119140625, 0.0269927978515625, 0.399169921875, 0.47216796875, 3.886222839355469e-05, 0.0004544258117675781, 0.1068115234375, 0.1259765625, 0.323974609375, 0.0018110275268554688, 0.005641937255859375, 0.07781982421875, 0.0013360977172851562, 0.53369140625, 0.039398193359375, 0.03076171875, 0.00228118896484375, 0.00211334228515625, 0.60205078125, 0.00026679039001464844, 3.409385681152344e-05, 0.0032901763916015625, 0.0640869140625, 0.0012826919555664062, 0.002506256103515625, 0.30810546875, 0.1954345703125, 0.0002598762512207031, 0.0004756450653076172, 0.00026226043701171875, 0.0006728172302246094, 0.305908203125, 9.298324584960938e-06, 0.0007143020629882812], "tokens": [284, 562, 2064, 1178, 23418, 13628, 346, 301, 291, 1158, 2064, 1178, 5295, 280, 537, 2064, 77, 21422, 346, 429, 44929, 5271, 31251, 10165, 22086, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 5295, 32, 1322, 45, 595, 1987, 301, 324, 5295, 77, 91, 79, 280, 1858, 4452, 32]}
{"line_number": 351, "line_type": "original", "code": "        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];", "entropy": 1.3623046875, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [4.63671875, 1.443359375, 6.44140625, 3.560546875, 0.1190185546875, 0.480712890625, 0.00179290771484375, 0.00658416748046875, 1.1708984375, 0.00974273681640625, 0.347412109375, 0.51318359375, 0.0170135498046875, 0.0295257568359375, 0.3994140625, 0.263427734375, 0.033966064453125, 11.6171875, 0.059967041015625, 0.03656005859375, 0.0288848876953125, 0.004150390625, 0.1260986328125], "tokens": [351, 2064, 11336, 5045, 280, 537, 2064, 77, 22382, 346, 429, 225, 35, 1674, 21422, 346, 429, 6090, 705, 6243, 32, 891, 22086]}
{"line_number": 351, "line_type": "generated", "code": "\n      RealPointValuePair solution = new RealPointValuePair(getPrimalSolution(), mostNegative);\n      return solution;\n    }\n\n    /**\n     * Get the primal solution.\n     *\n     * @return primal solution\n     */\n    protected double[] getPri", "entropy": 0.2388916015625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.167236328125, 2.33984375, 0.2344970703125, 0.004711151123046875, 0.477783203125, 0.04449462890625, 0.258544921875, 0.1444091796875, 7.200241088867188e-05, 5.9604644775390625e-06, 0.048614501953125, 2.6015625, 1.0146484375, 9.894371032714844e-06, 0.2138671875, 0.4580078125, 0.175537109375, 0.0007786750793457031, 0.0247344970703125, 0.2081298828125, 0.185546875, 0.02764892578125, 0.003589630126953125, 0.037994384765625, 0.0006046295166015625, 0.181640625, 0.051849365234375, 0.032379150390625, 0.00017082691192626953, 0.6552734375, 0.06329345703125, 0.86279296875, 2.5510787963867188e-05, 0.052459716796875, 0.662109375, 0.06842041015625, 0.0022125244140625, 0.194580078125, 0.00025343894958496094, 0.00820159912109375, 0.0014982223510742188, 0.298095703125, 0.00010287761688232422, 0.00923919677734375, 0.04736328125, 0.0148773193359375, 0.0073394775390625, 0.3134765625, 0.218017578125, 0.00472259521484375, 0.00032448768615722656, 0.0002288818359375], "tokens": [397, 11443, 1943, 14782, 5295, 280, 537, 11443, 1943, 14782, 26, 371, 3979, 7904, 13628, 1026, 4630, 17152, 293, 397, 442, 5295, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 3031, 7904, 5295, 32, 275, 319, 275, 319, 477, 601, 3031, 7904, 5295, 275, 569, 284, 2522, 2064, 1178, 622, 3979]}
{"line_number": 352, "line_type": "original", "code": "        for (int i = 1; i < getHeight(); i++) {", "entropy": 0.490234375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [4.23046875, 0.54150390625, 0.0051422119140625, 0.026611328125, 0.279541015625, 0.004230499267578125, 0.2318115234375, 2.537109375, 0.0192108154296875, 0.003787994384765625, 0.016265869140625, 0.259765625, 0.07769775390625, 0.054046630859375, 0.007232666015625, 0.0027942657470703125, 0.034912109375], "tokens": [351, 436, 308, 410, 595, 280, 225, 35, 45, 595, 333, 622, 3024, 473, 595, 1987, 301]}
{"line_number": 352, "line_type": "generated", "code": "\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n          int col = i + getArtificialVariableOffset();\n          Integer basicRow = getBasicRow(col);\n          if (basicRow!= null) {\n           ", "entropy": 0.13330078125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.84765625, 0.6943359375, 0.004119873046875, 0.0268096923828125, 0.31396484375, 0.0037899017333984375, 0.2364501953125, 0.06976318359375, 0.0159912109375, 0.003261566162109375, 0.01442718505859375, 1.162109375, 0.63037109375, 0.0003018379211425781, 0.0013408660888671875, 0.0279693603515625, 0.01348876953125, 0.0023403167724609375, 0.0052337646484375, 0.23046875, 0.425537109375, 0.2763671875, 0.01016998291015625, 0.1737060546875, 0.0018949508666992188, 0.0174713134765625, 0.0285491943359375, 7.522106170654297e-05, 0.0005817413330078125, 0.00014293193817138672, 0.00350189208984375, 0.0180816650390625, 0.56689453125, 0.697265625, 0.01079559326171875, 0.0019054412841796875, 0.0167236328125, 0.00023424625396728516, 2.5987625122070312e-05, 0.0001628398895263672, 0.00199127197265625, 0.00045371055603027344, 0.0369873046875, 0.1053466796875, 0.039154052734375, 0.0135040283203125, 0.0004782676696777344, 0.08837890625, 0.0005555152893066406, 0.05047607421875, 0.004405975341796875, 0.0382080078125], "tokens": [291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 5271, 31251, 10165, 473, 595, 1987, 301, 616, 629, 932, 280, 595, 474, 622, 5271, 31251, 3818, 3457, 473, 616, 4401, 6550, 2352, 280, 622, 7099, 2352, 26, 748, 293, 616, 415, 308, 6390, 2352, 863, 744, 27, 301, 324]}
{"line_number": 353, "line_type": "original", "code": "          int col = 0;", "entropy": 1.8798828125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [8.046875, 3.10546875, 1.0869140625, 0.252685546875, 0.61474609375, 0.022216796875, 0.030059814453125], "tokens": [2033, 629, 932, 280, 225, 34, 45]}
{"line_number": 353, "line_type": "generated", "code": "\n      for (int i = 0; i < getHeight(); i++) {\n        if (i!= negativeVarBasicRow) {\n          final double rowSum = MathArrays.linearCombination(tableau.getRow(i), getObjectiveFunction());\n         ", "entropy": 0.39501953125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.1287841796875, 0.1898193359375, 0.0030498504638671875, 0.022979736328125, 0.31640625, 0.004611968994140625, 0.22900390625, 0.0830078125, 0.0214080810546875, 0.0018444061279296875, 0.006778717041015625, 0.478515625, 0.5322265625, 0.0379638671875, 0.0032939910888671875, 0.0020618438720703125, 0.00392913818359375, 0.1453857421875, 0.58056640625, 0.07183837890625, 1.125, 0.556640625, 0.0273284912109375, 1.33514404296875e-05, 0.0018672943115234375, 1.6689300537109375e-06, 0.257568359375, 0.004688262939453125, 0.07659912109375, 1.6015625, 0.71630859375, 1.9677734375, 1.66015625, 0.008880615234375, 1.2421875, 0.0263214111328125, 0.00011265277862548828, 0.09234619140625, 0.0024471282958984375, 0.08013916015625, 1.1337890625, 7.033348083496094e-05, 0.01091766357421875, 0.281982421875, 0.0227203369140625, 0.0019626617431640625, 0.216796875, 2.11328125, 1.9228515625, 0.49365234375, 1.9501953125, 0.082763671875], "tokens": [397, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 622, 3024, 473, 595, 1987, 301, 291, 415, 308, 91, 863, 11003, 1881, 7099, 2352, 27, 301, 616, 1158, 2064, 2698, 4934, 280, 4175, 9978, 32, 8362, 46812, 26, 1274, 4452, 32, 30093, 26, 91, 471, 622, 33312, 2447, 1035, 616]}
{"line_number": 354, "line_type": "original", "code": "          for (int j = 0; j < getWidth(); j++) {", "entropy": 1.0322265625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [7.3359375, 6.421875, 0.0172119140625, 0.072265625, 0.129150390625, 0.044036865234375, 0.5693359375, 0.045501708984375, 0.01384735107421875, 0.007602691650390625, 0.01629638671875, 1.1025390625, 1.3876953125, 0.315673828125, 0.006961822509765625, 0.005645751953125, 0.055389404296875], "tokens": [2033, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 622, 2611, 473, 594, 1987, 301]}
{"line_number": 354, "line_type": "generated", "code": "\n        coefficients[i] = getEntry(i, getRhsOffset());\n      }\n      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n        if (i!= negativeVarColumn) {\n          Integer basicRow", "entropy": 0.320556640625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.29541015625, 1.7939453125, 0.0016393661499023438, 0.02655029296875, 0.002887725830078125, 0.0078125, 0.56787109375, 0.18017578125, 0.0312042236328125, 0.60400390625, 0.157958984375, 0.37060546875, 0.139892578125, 4.887580871582031e-06, 0.00019276142120361328, 0.1328125, 0.45263671875, 0.0025844573974609375, 0.779296875, 1.4130859375, 0.0020122528076171875, 0.0273895263671875, 0.2396240234375, 0.0072021484375, 0.5087890625, 0.04833984375, 0.01171875, 0.02886962890625, 0.00547027587890625, 0.84228515625, 1.59765625, 0.0216217041015625, 0.11053466796875, 0.00035953521728515625, 0.0307769775390625, 0.0033512115478515625, 0.0019350051879882812, 0.0030670166015625, 0.363037109375, 1.59765625, 0.0740966796875, 0.99365234375, 0.876953125, 0.302734375, 0.0026645660400390625, 0.1446533203125, 0.285400390625, 0.00884246826171875, 0.140869140625, 0.923828125, 0.493896484375, 0.0107421875], "tokens": [291, 26370, 77, 91, 79, 280, 622, 2711, 26, 91, 30, 622, 68, 3914, 3457, 1035, 397, 320, 397, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 622, 11296, 2567, 24453, 10165, 473, 595, 1987, 301, 291, 415, 308, 91, 863, 11003, 1881, 2137, 27, 301, 616, 4401, 6550, 2352]}
{"line_number": 355, "line_type": "original", "code": "            if (!columnsToDrop.contains(j)) {", "entropy": 2.533203125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [6.61328125, 1.5341796875, 5.0078125, 5.6953125, 0.1510009765625, 3.05859375, 0.1572265625, 0.0245208740234375, 0.01093292236328125, 7.80078125, 0.260986328125, 0.085693359375], "tokens": [1468, 415, 1429, 6057, 705, 6243, 32, 4752, 26, 92, 490, 301]}
{"line_number": 355, "line_type": "generated", "code": "\n          if (colIndex >= 0 && colIndex < getWidth()) {\n            Integer basicRow = getBasicRow(colIndex);\n            if (basicRow!= null) {\n              if (basicRows.contains(basicRow)) {\n                // duplicate", "entropy": 0.343505859375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.136962890625, 1.443359375, 0.0706787109375, 0.072021484375, 4.851818084716797e-05, 0.994140625, 0.1480712890625, 0.0042724609375, 1.546875, 1.640625, 0.0003139972686767578, 0.359130859375, 0.267578125, 0.2958984375, 0.47705078125, 0.0181427001953125, 0.49462890625, 0.716796875, 0.408935546875, 0.0250244140625, 0.005794525146484375, 0.1424560546875, 0.0008544921875, 4.6253204345703125e-05, 0.00034928321838378906, 0.002956390380859375, 6.794929504394531e-05, 0.002208709716796875, 0.03131103515625, 0.37353515625, 0.0193023681640625, 0.0124664306640625, 0.0028743743896484375, 0.1790771484375, 0.0007257461547851562, 0.1724853515625, 0.0017805099487304688, 0.10992431640625, 1.6396484375, 0.36083984375, 0.1982421875, 0.54248046875, 0.0010824203491210938, 0.71044921875, 0.0003962516784667969, 0.0066986083984375, 8.571147918701172e-05, 0.0179290771484375, 0.00494384765625, 0.06915283203125, 1.2314453125, 2.904296875], "tokens": [616, 415, 308, 748, 1284, 2377, 225, 34, 962, 932, 1284, 333, 622, 2611, 1157, 301, 324, 4401, 6550, 2352, 280, 622, 7099, 2352, 26, 748, 1284, 293, 324, 415, 308, 6390, 2352, 863, 744, 27, 301, 1090, 415, 308, 6390, 7252, 32, 4752, 26, 6390, 2352, 490, 301, 400, 434, 12843]}
{"line_number": 356, "line_type": "original", "code": "              matrix[i - 1][col++] = tableau.getEntry(i, j);", "entropy": 2.537109375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [4.92578125, 9.7578125, 2.71484375, 0.98486328125, 4.6171875, 2.044921875, 0.0174102783203125, 0.358642578125, 1.23828125, 10.046875, 0.01520538330078125, 4.32421875, 0.0006175041198730469, 0.009552001953125, 0.006221771240234375, 0.0048828125, 4.0859375, 0.1832275390625, 5.20703125, 0.196044921875], "tokens": [2850, 5045, 77, 91, 429, 225, 35, 1674, 748, 13419, 280, 1858, 4452, 32, 48895, 26, 91, 30, 594, 293]}
{"line_number": 356, "line_type": "generated", "code": "\n          } else {\n              Integer basicRow = getBasicRow(colIndex);\n              if (basicRow == null) {", "entropy": 0.162841796875, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.47216796875, 0.0048370361328125, 0.4072265625, 0.054901123046875, 0.82373046875, 0.474609375, 0.354248046875, 0.0295257568359375, 0.006359100341796875, 0.2115478515625, 0.000560760498046875, 1.7404556274414062e-05, 0.00024199485778808594, 0.0026092529296875, 3.9458274841308594e-05, 0.0017518997192382812, 0.02642822265625, 0.461669921875, 0.03778076171875, 0.01678466796875, 0.0020771026611328125, 0.62744140625, 0.0033664703369140625, 0.043426513671875, 0.00768280029296875], "tokens": [616, 320, 813, 301, 1090, 4401, 6550, 2352, 280, 622, 7099, 2352, 26, 748, 1284, 293, 1090, 415, 308, 6390, 2352, 610, 744, 27, 301]}
{"line_number": 361, "line_type": "original", "code": "        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {", "entropy": 1.12890625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [5.453125, 5.9375, 0.03265380859375, 0.06927490234375, 2.625, 0.06488037109375, 9.6328125, 1.1611328125, 0.17041015625, 0.018280029296875, 0.059967041015625, 1.451171875, 0.08306884765625, 0.0126190185546875, 0.00400543212890625, 0.017791748046875, 0.0165863037109375, 0.118408203125, 0.020538330078125, 0.004505157470703125, 0.01271820068359375, 0.0194549560546875, 0.016204833984375, 0.08880615234375], "tokens": [351, 436, 308, 410, 595, 280, 6090, 705, 6243, 32, 891, 346, 429, 225, 35, 45, 595, 2377, 225, 34, 45, 595, 15353, 301]}
{"line_number": 361, "line_type": "generated", "code": "\n          if (basicRow == null) {\n              // set the coefficient to 0\n              coefficients[i] = 0;\n          } else {\n              // set the coefficient to the basic row value\n              coefficients[i] = getEntry(basicRow,", "entropy": 0.41015625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.6123046875, 0.452880859375, 0.0584716796875, 0.1817626953125, 0.00390625, 0.278076171875, 0.71630859375, 0.2398681640625, 0.035736083984375, 1.2626953125, 0.7333984375, 2.96875, 0.406005859375, 0.751953125, 0.27587890625, 1.4892578125, 0.267578125, 0.82421875, 0.08441162109375, 0.0006318092346191406, 0.002933502197265625, 0.00040793418884277344, 0.0004379749298095703, 0.014495849609375, 0.0005550384521484375, 0.10003662109375, 0.67578125, 0.0206298828125, 0.0635986328125, 0.74365234375, 0.132568359375, 0.21142578125, 1.4755859375, 0.031524658203125, 0.185546875, 0.229248046875, 0.22900390625, 2.568359375, 0.55517578125, 1.7802734375, 0.30224609375, 0.190673828125, 0.0002168416976928711, 0.00029015541076660156, 0.0001068115234375, 0.001033782958984375, 0.1390380859375, 0.0208740234375, 0.0010633468627929688, 0.0126953125, 7.37905502319336e-05, 0.0014019012451171875], "tokens": [616, 415, 308, 6390, 2352, 610, 744, 27, 301, 1090, 434, 739, 322, 17134, 372, 225, 34, 1090, 26370, 77, 91, 79, 280, 225, 34, 45, 616, 320, 813, 301, 1090, 434, 739, 322, 17134, 372, 322, 6550, 2698, 786, 1090, 26370, 77, 91, 79, 280, 622, 2711, 26, 6390, 2352, 30]}
{"line_number": 362, "line_type": "original", "code": "          columnLabels.remove((int) columnsToDrop.get(i));", "entropy": 2.349609375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [3.6015625, 10.03125, 0.1795654296875, 0.09942626953125, 2.857421875, 6.9765625, 3.62890625, 0.11114501953125, 6.77734375, 2.109375, 0.1878662109375, 0.236083984375, 0.4306640625, 0.01983642578125, 0.2396240234375, 0.10009765625], "tokens": [2033, 2623, 8718, 32, 2546, 1162, 410, 27, 6090, 705, 6243, 32, 371, 26, 91, 876]}
{"line_number": 362, "line_type": "generated", "code": "\n          if (basicRow!= null &&!basicRows.contains(basicRow)) {\n              basicRows.add(basicRow);\n              coefficients[i] = getEntry(basicRow, getRhsOffset());\n          }\n      }\n\n      return new Real", "entropy": 0.212890625, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.9912109375, 0.95654296875, 0.04425048828125, 0.14453125, 0.0312347412109375, 0.98388671875, 0.00763702392578125, 0.90771484375, 0.89794921875, 0.048492431640625, 0.025970458984375, 0.00026702880859375, 0.1729736328125, 0.0006170272827148438, 0.00762939453125, 0.0001710653305053711, 0.041534423828125, 0.01141357421875, 0.401611328125, 0.85595703125, 0.00037384033203125, 0.00010013580322265625, 0.0004017353057861328, 0.0002288818359375, 0.00556182861328125, 2.5510787963867188e-05, 0.00013911724090576172, 0.093994140625, 0.2421875, 0.0002651214599609375, 0.0027370452880859375, 0.0001500844955444336, 0.00402069091796875, 0.1424560546875, 0.03497314453125, 0.001132965087890625, 0.005084991455078125, 0.00044989585876464844, 0.0004546642303466797, 0.386962890625, 0.031890869140625, 9.5367431640625e-07, 0.00019669532775878906, 0.4208984375, 0.39306640625, 0.00186920166015625, 1.041015625, 0.0009140968322753906, 0.541015625, 0.93701171875, 0.03021240234375, 0.2218017578125], "tokens": [616, 415, 308, 6390, 2352, 863, 744, 962, 653, 6390, 7252, 32, 4752, 26, 6390, 2352, 490, 301, 1090, 6550, 7252, 32, 669, 26, 6390, 2352, 293, 1090, 26370, 77, 91, 79, 280, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035, 616, 320, 397, 320, 1687, 442, 537, 11443]}
{"line_number": 365, "line_type": "original", "code": "        this.tableau = new Array2DRowRealMatrix(matrix);", "entropy": 1.2099609375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [5.13671875, 5.30859375, 0.042144775390625, 2.05859375, 0.0025196075439453125, 2.880859375, 1.369140625, 1.052734375, 0.00455474853515625, 0.00034046173095703125, 0.0001386404037475586, 0.0014781951904296875, 0.00019621849060058594, 0.029632568359375, 0.923828125, 0.55078125], "tokens": [351, 458, 32, 1274, 4452, 280, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 4873, 293]}
{"line_number": 365, "line_type": "generated", "code": "\n              coefficients[i] = 0;\n          } else {\n              // if the variable has no value set it to 0\n              // otherwise set the coefficient to the value of the variable\n              // in the solution\n              coefficients[i] = basicRow ==", "entropy": 0.630859375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.6904296875, 0.268798828125, 0.0008478164672851562, 0.0027751922607421875, 0.0005784034729003906, 0.0012388229370117188, 0.04620361328125, 0.0022182464599609375, 0.07861328125, 1.0361328125, 0.01910400390625, 0.20947265625, 0.5556640625, 0.140869140625, 1.333984375, 1.236328125, 1.220703125, 0.849609375, 2.052734375, 1.6015625, 2.197265625, 2.42578125, 0.74462890625, 0.1280517578125, 0.58740234375, 0.023834228515625, 0.335693359375, 1.4453125, 2.193359375, 0.6748046875, 1.365234375, 0.61767578125, 0.54541015625, 0.302001953125, 1.025390625, 0.74609375, 0.1290283203125, 0.603515625, 0.4033203125, 0.467529296875, 0.476318359375, 0.203857421875, 1.642578125, 0.93896484375, 0.68994140625, 0.002025604248046875, 0.0005364418029785156, 0.0004203319549560547, 0.0028057098388671875, 0.273681640625, 0.012542724609375, 0.257568359375], "tokens": [1090, 26370, 77, 91, 79, 280, 225, 34, 45, 616, 320, 813, 301, 1090, 434, 415, 322, 2677, 1401, 1289, 786, 739, 561, 372, 225, 34, 1090, 434, 5878, 739, 322, 17134, 372, 322, 786, 432, 322, 2677, 1090, 434, 328, 322, 5295, 1090, 26370, 77, 91, 79, 280, 6550, 2352, 610]}
{"line_number": 366, "line_type": "original", "code": "        this.numArtificialVariables = 0;", "entropy": 2.404296875, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [4.703125, 9.0078125, 0.165771484375, 5.796875, 4.1875, 0.002712249755859375, 0.34130859375, 1.546875, 0.5498046875, 0.1121826171875, 0.03521728515625], "tokens": [351, 458, 32, 1516, 5271, 31251, 10165, 280, 225, 34, 45]}
{"line_number": 366, "line_type": "generated", "code": "\n              coefficients[i] = 0;\n              continue;\n          }\n          double entry = getEntry(basicRow, colIndex);\n          coefficients[i] = entry;\n          if (basicRow!= null) {\n              basicRows.add(basicRow", "entropy": 0.212158203125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.87890625, 0.40869140625, 0.00177764892578125, 0.0052490234375, 0.005657196044921875, 0.002593994140625, 0.0762939453125, 0.00891876220703125, 0.06060791015625, 0.456298828125, 0.059814453125, 0.002613067626953125, 0.047027587890625, 0.001491546630859375, 0.23974609375, 1.779296875, 0.99755859375, 0.049072265625, 0.42138671875, 0.0143890380859375, 0.0029850006103515625, 0.01207733154296875, 0.0007963180541992188, 0.005832672119140625, 1.1962890625, 8.940696716308594e-06, 0.06915283203125, 0.10906982421875, 1.029296875, 0.0001678466796875, 0.0006933212280273438, 0.00021183490753173828, 0.003185272216796875, 0.41748046875, 0.218505859375, 0.1348876953125, 0.82568359375, 0.033660888671875, 0.69775390625, 0.00116729736328125, 0.2156982421875, 0.00943756103515625, 0.08746337890625, 0.009124755859375, 0.2401123046875, 0.181396484375, 0.0001399517059326172, 9.489059448242188e-05, 0.0005626678466796875, 0.0004343986511230469, 0.0088958740234375, 1.6689300537109375e-05], "tokens": [1090, 26370, 77, 91, 79, 280, 225, 34, 45, 1090, 4036, 45, 616, 320, 616, 2064, 3414, 280, 622, 2711, 26, 6390, 2352, 30, 932, 1284, 293, 616, 26370, 77, 91, 79, 280, 3414, 45, 616, 415, 308, 6390, 2352, 863, 744, 27, 301, 1090, 6550, 7252, 32, 669, 26, 6390, 2352]}
{"line_number": 367, "line_type": "original", "code": "    }", "entropy": 2.3671875, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [3.958984375, 0.77734375], "tokens": [264, 320]}
{"line_number": 367, "line_type": "generated", "code": "\n          } else {\n              coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative? 0 : mostNegative);\n              basicRows.add(basicRow);\n          }\n      }\n      return new RealPoint", "entropy": 0.1727294921875, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [1.474609375, 0.1419677734375, 0.300537109375, 0.432373046875, 0.203125, 1.0126953125, 0.0003542900085449219, 0.00032401084899902344, 0.00018322467803955078, 0.0015420913696289062, 0.29296875, 0.06683349609375, 0.0042877197265625, 0.0124053955078125, 0.003047943115234375, 0.005207061767578125, 0.24951171875, 0.048126220703125, 1.1920928955078125e-06, 0.00024390220642089844, 0.94873046875, 0.2191162109375, 0.5185546875, 0.0234375, 2.3126602172851562e-05, 0.0003535747528076172, 3.266334533691406e-05, 0.00637054443359375, 0.07757568359375, 0.0017757415771484375, 0.00925445556640625, 0.0109710693359375, 8.20159912109375e-05, 0.004276275634765625, 0.92578125, 0.19970703125, 0.00018167495727539062, 0.00012183189392089844, 0.0010700225830078125, 0.0003921985626220703, 0.01190948486328125, 2.110004425048828e-05, 0.00276947021484375, 0.10870361328125, 0.0005598068237304688, 0.1363525390625, 0.0009059906005859375, 0.93212890625, 0.404541015625, 0.017486572265625, 0.173828125, 4.696846008300781e-05], "tokens": [616, 320, 813, 301, 1090, 26370, 77, 91, 79, 280, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1157, 429, 308, 20757, 705, 3910, 17152, 1018, 225, 34, 499, 4630, 17152, 293, 1090, 6550, 7252, 32, 669, 26, 6390, 2352, 293, 616, 320, 397, 320, 397, 442, 537, 11443, 1943]}
{"line_number": 317, "line_type": "original", "code": "                return null;", "entropy": 4.08984375, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [8.9375, 4.22265625, 3.173828125, 0.018310546875], "tokens": [2071, 442, 744, 45]}
{"line_number": 317, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the number of artificial variables in this tableau.\n     * @return the number of artificial variables in this tableau\n     */\n    protected int getNumArtificialVariables() {\n        return this.numArtificialVariables;", "entropy": 0.2078857421875, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.409423828125, 0.004199981689453125, 0.154052734375, 0.03765869140625, 0.03204345703125, 5.841255187988281e-05, 1.9921875, 0.265869140625, 2.287109375, 0.00385284423828125, 1.576171875, 0.01001739501953125, 0.01018524169921875, 0.61572265625, 0.16162109375, 0.1005859375, 0.0012340545654296875, 0.081298828125, 0.02801513671875, 0.00586700439453125, 0.0323486328125, 0.0009164810180664062, 0.4951171875, 0.022979736328125, 0.0039825439453125, 0.0256805419921875, 0.003704071044921875, 0.004383087158203125, 0.371337890625, 0.0143280029296875, 0.0019121170043945312, 0.0006146430969238281, 0.6728515625, 0.0055999755859375, 0.006275177001953125, 0.55029296875, 0.453369140625, 0.00112152099609375, 0.001285552978515625, 2.2292137145996094e-05, 0.0002338886260986328, 0.0009889602661132812, 0.001556396484375, 0.05206298828125, 0.00862884521484375, 0.2998046875, 2.968311309814453e-05, 0.002349853515625, 0.00015032291412353516, 2.9802322387695312e-06, 3.814697265625e-06, 0.0019702911376953125], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 5549, 31251, 4886, 328, 458, 1858, 4452, 32, 275, 319, 477, 601, 322, 1451, 432, 5549, 31251, 4886, 328, 458, 1858, 4452, 275, 569, 284, 2522, 629, 44929, 5271, 31251, 10165, 346, 301, 291, 442, 458, 32, 1516, 5271, 31251, 10165, 45]}
