{"line_number": 751, "line_type": "original", "code": "        String name = cNameProvider.getShortName(locale, iID, nameKey);", "entropy": 0.9365234375, "is_bug_line": false, "sus_score": 0.7888106377466154, "per_token_entropy": [5.0546875, 6.19921875, 1.3828125, 0.46826171875, 0.50927734375, 0.032073974609375, 0.01485443115234375, 0.003673553466796875, 2.9921875, 0.54052734375, 0.023712158203125, 0.15087890625, 0.003559112548828125, 0.1396484375, 0.0210418701171875, 0.04693603515625, 0.206787109375, 0.0016002655029296875, 0.01049041748046875], "tokens": [351, 892, 636, 280, 281, 558, 2570, 32, 371, 46691, 26, 6921, 30, 595, 779, 30, 636, 953, 293]}
{"line_number": 751, "line_type": "generated", "code": "\n     * \n     * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for\n     * @return offset from UTC in milliseconds\n     */\n    public abstract int get", "entropy": 0.0975341796875, "is_bug_line": false, "sus_score": 0.7888106377466154, "per_token_entropy": [0.287841796875, 0.1368408203125, 0.8232421875, 0.0005140304565429688, 0.0472412109375, 0.12744140625, 0.06256103515625, 0.0192108154296875, 0.2257080078125, 0.006496429443359375, 0.0021877288818359375, 0.00013780593872070312, 0.00036597251892089844, 0.00019121170043945312, 0.003276824951171875, 0.00021696090698242188, 5.4836273193359375e-05, 6.4373016357421875e-06, 1.9669532775878906e-05, 2.110004425048828e-05, 2.7894973754882812e-05, 0.0006208419799804688, 8.20159912109375e-05, 3.7550926208496094e-05, 6.568431854248047e-05, 1.5497207641601562e-06, 2.396106719970703e-05, 0.00037479400634765625, 1.2636184692382812e-05, 0.00020039081573486328, 0.00847625732421875, 0.1943359375, 0.171875, 0.1890869140625, 0.04510498046875, 0.024169921875, 0.018829345703125, 0.00836181640625, 0.0007939338684082031, 0.035064697265625, 0.78759765625, 0.279296875, 0.007602691650390625, 0.6884765625, 0.049041748046875, 0.231689453125, 0.07672119140625, 0.017364501953125, 0.08551025390625, 0.353759765625, 0.052459716796875, 0.00019633769989013672], "tokens": [275, 319, 5384, 319, 477, 753, 23564, 225, 18574, 645, 225, 35, 43, 41, 34, 31, 34, 35, 31, 34, 35, 70, 34, 34, 44, 34, 34, 44, 34, 34, 76, 372, 622, 322, 3401, 436, 275, 319, 477, 601, 3401, 645, 17197, 328, 18574, 275, 569, 284, 562, 5547, 629, 622]}
{"line_number": 752, "line_type": "original", "code": "        if (name != null) {", "entropy": 1.2646484375, "is_bug_line": false, "sus_score": 0.7888106377466154, "per_token_entropy": [2.611328125, 2.5078125, 0.08648681640625, 3.5546875, 1.2822265625, 0.0032215118408203125, 0.038818359375, 0.035919189453125], "tokens": [351, 415, 308, 426, 863, 744, 27, 301]}
{"line_number": 752, "line_type": "generated", "code": "\n        return offset;\n    }\n\n    /**\n     * Gets the offset of this datetime zone from UTC at the specified instant.\n     * \n     * @param instant  milliseconds from 1970-01-01T00:00:", "entropy": 0.188720703125, "is_bug_line": false, "sus_score": 0.7888106377466154, "per_token_entropy": [1.8427734375, 0.416748046875, 1.1640625, 0.129638671875, 0.06475830078125, 0.0006442070007324219, 0.1395263671875, 0.08892822265625, 0.0067138671875, 0.00015115737915039062, 0.75244140625, 0.07720947265625, 1.75, 1.1796875, 0.128173828125, 0.75341796875, 0.006439208984375, 0.03350830078125, 0.06549072265625, 0.07073974609375, 0.022705078125, 0.061737060546875, 0.446533203125, 0.1102294921875, 0.0247039794921875, 0.0009737014770507812, 0.336669921875, 5.221366882324219e-05, 0.002635955810546875, 0.00574493408203125, 0.035980224609375, 0.00714111328125, 0.08099365234375, 0.0027313232421875, 0.0002397298812866211, 1.6808509826660156e-05, 0.0008563995361328125, 7.331371307373047e-05, 1.3947486877441406e-05, 0.000278472900390625, 1.9550323486328125e-05, 1.3113021850585938e-05, 8.225440979003906e-06, 2.467632293701172e-05, 4.792213439941406e-05, 0.0003285408020019531, 6.628036499023438e-05, 2.7060508728027344e-05, 7.95125961303711e-05, 5.125999450683594e-06, 2.6226043701171875e-05, 4.2438507080078125e-05], "tokens": [291, 442, 3401, 45, 284, 320, 446, 1022, 275, 319, 7124, 322, 3401, 432, 458, 7138, 10790, 645, 17197, 821, 322, 3191, 23564, 32, 275, 319, 5384, 319, 477, 753, 23564, 225, 18574, 645, 225, 35, 43, 41, 34, 31, 34, 35, 31, 34, 35, 70, 34, 34, 44, 34, 34, 44]}
{"line_number": 755, "line_type": "original", "code": "        return printOffset(getOffset(instant));", "entropy": 1.162109375, "is_bug_line": false, "sus_score": 0.7888106377466154, "per_token_entropy": [6.71875, 0.787109375, 3.58203125, 0.006458282470703125, 0.056732177734375, 0.2139892578125, 0.05145263671875, 0.03997802734375, 0.01317596435546875, 0.156982421875], "tokens": [351, 442, 1459, 3457, 26, 371, 3457, 26, 30241, 876]}
{"line_number": 755, "line_type": "generated", "code": "\n\n    /**\n     * Returns true if the specified offset is unique to this time zone.\n     * \n     * @param offsetMillis  the offset to check\n     * @return true if the specified offset is unique to this time zone\n     */\n    public abstract boolean is", "entropy": 0.316650390625, "is_bug_line": false, "sus_score": 0.7888106377466154, "per_token_entropy": [0.72216796875, 0.128173828125, 0.006317138671875, 9.334087371826172e-05, 1.587890625, 1.5322265625, 0.0100250244140625, 1.37109375, 1.6142578125, 1.73046875, 0.57177734375, 0.982421875, 0.7578125, 0.00649261474609375, 0.188720703125, 0.0132598876953125, 0.1553955078125, 0.1014404296875, 0.039886474609375, 0.1563720703125, 8.153915405273438e-05, 0.0021953582763671875, 0.0767822265625, 0.046356201171875, 0.7568359375, 0.0262451171875, 0.146728515625, 0.168212890625, 0.266357421875, 0.10638427734375, 0.69482421875, 0.01105499267578125, 0.00010585784912109375, 0.0303192138671875, 0.006175994873046875, 0.005817413330078125, 0.08782958984375, 0.60009765625, 0.006031036376953125, 0.004180908203125, 0.00589752197265625, 0.0125885009765625, 0.0102691650390625, 0.016998291015625, 0.0008721351623535156, 0.1392822265625, 0.06390380859375, 0.00917816162109375, 0.062255859375, 1.2607421875, 0.0008611679077148438, 0.1728515625], "tokens": [446, 1022, 275, 319, 3759, 861, 415, 322, 3191, 3401, 438, 5799, 372, 458, 1133, 10790, 32, 275, 319, 5384, 319, 477, 753, 3401, 10906, 225, 322, 3401, 372, 1505, 275, 319, 477, 601, 861, 415, 322, 3191, 3401, 438, 5799, 372, 458, 1133, 10790, 275, 569, 284, 562, 5547, 1905, 438]}
{"line_number": 744, "line_type": "original", "code": "        if (locale == null) {", "entropy": 1.5576171875, "is_bug_line": false, "sus_score": 0.7637626158259734, "per_token_entropy": [5.7890625, 3.490234375, 0.034576416015625, 2.876953125, 0.2403564453125, 0.011260986328125, 0.006664276123046875, 0.01129913330078125], "tokens": [351, 415, 308, 6921, 610, 744, 27, 301]}
{"line_number": 744, "line_type": "generated", "code": "\n        }\n        return printOffset(getOffset(instant));\n    }\n\n    /**\n     * Gets the offset from UTC at the specified instant in milliseconds.\n     * \n     * @param instant  milliseconds from 1970-01-01T", "entropy": 0.1480712890625, "is_bug_line": false, "sus_score": 0.7637626158259734, "per_token_entropy": [0.306396484375, 0.269775390625, 0.12335205078125, 0.361572265625, 0.54736328125, 0.0020313262939453125, 0.00252532958984375, 0.006252288818359375, 0.0013370513916015625, 0.000823974609375, 0.00231170654296875, 0.045013427734375, 0.06982421875, 0.00084686279296875, 0.1395263671875, 0.1580810546875, 0.006786346435546875, 0.0001443624496459961, 0.358154296875, 0.09271240234375, 0.9306640625, 0.8623046875, 0.25146484375, 0.91845703125, 0.013824462890625, 0.07916259765625, 0.35595703125, 0.7548828125, 0.151123046875, 0.189697265625, 0.056121826171875, 0.0013284683227539062, 0.29931640625, 5.8650970458984375e-05, 0.005687713623046875, 0.007061004638671875, 0.033416748046875, 0.019805908203125, 0.26025390625, 0.007320404052734375, 0.0016918182373046875, 6.29425048828125e-05, 0.0004470348358154297, 0.00015807151794433594, 0.004673004150390625, 0.0002384185791015625, 5.269050598144531e-05, 5.602836608886719e-06, 1.9669532775878906e-05, 2.3126602172851562e-05, 4.744529724121094e-05, 0.0005931854248046875], "tokens": [291, 320, 291, 442, 1459, 3457, 26, 371, 3457, 26, 30241, 876, 284, 320, 446, 1022, 275, 319, 7124, 322, 3401, 645, 17197, 821, 322, 3191, 23564, 328, 18574, 32, 275, 319, 5384, 319, 477, 753, 23564, 225, 18574, 645, 225, 35, 43, 41, 34, 31, 34, 35, 31, 34, 35, 70]}
{"line_number": 747, "line_type": "original", "code": "        String nameKey = getNameKey(instant);", "entropy": 1.0654296875, "is_bug_line": false, "sus_score": 0.7637626158259734, "per_token_entropy": [5.78515625, 3.396484375, 0.97412109375, 0.2440185546875, 0.09454345703125, 0.1527099609375, 0.0005731582641601562, 0.00345611572265625, 0.005706787109375, 0.003025054931640625], "tokens": [351, 892, 636, 953, 280, 16407, 953, 26, 30241, 293]}
{"line_number": 747, "line_type": "generated", "code": "\n\n    /**\n     * Returns a suitable short name for the given time zone. If the given time\n     * zone is a {@link ZoneInfo} and has a short name, then that name is\n     * returned. Otherwise, the result of {@link #get", "entropy": 0.63525390625, "is_bug_line": false, "sus_score": 0.7637626158259734, "per_token_entropy": [1.005859375, 0.2120361328125, 0.0100250244140625, 8.809566497802734e-05, 1.5576171875, 0.81103515625, 2.015625, 0.8046875, 0.4404296875, 0.69384765625, 0.382080078125, 0.396728515625, 1.490234375, 0.2073974609375, 0.94677734375, 1.2294921875, 0.79541015625, 1.6484375, 0.5576171875, 0.2330322265625, 8.225440979003906e-05, 0.005626678466796875, 0.76611328125, 1.373046875, 0.544921875, 0.2080078125, 1.2734375, 0.154541015625, 0.53173828125, 2.1640625, 1.099609375, 0.348388671875, 1.373046875, 0.272216796875, 0.76611328125, 0.44677734375, 0.40087890625, 0.87158203125, 0.346923828125, 0.1800537109375, 7.677078247070312e-05, 0.02301025390625, 0.1719970703125, 0.42529296875, 0.471435546875, 0.281005859375, 2.36328125, 0.255126953125, 0.197998046875, 0.0220489501953125, 0.1287841796875, 0.1151123046875], "tokens": [446, 1022, 275, 319, 3759, 312, 19655, 4504, 636, 436, 322, 2702, 1133, 10790, 32, 1670, 322, 2702, 1133, 275, 319, 10790, 438, 312, 3088, 1204, 24123, 1120, 111, 461, 1401, 312, 4504, 636, 30, 1615, 688, 636, 438, 275, 319, 4717, 32, 12779, 30, 322, 1056, 432, 3088, 1204, 588, 371]}
{"line_number": 748, "line_type": "original", "code": "        if (nameKey == null) {", "entropy": 1.162109375, "is_bug_line": false, "sus_score": 0.7637626158259734, "per_token_entropy": [4.35546875, 2.662109375, 0.056884765625, 1.6435546875, 1.4189453125, 0.260498046875, 0.01554107666015625, 0.030487060546875, 0.017181396484375], "tokens": [351, 415, 308, 426, 953, 610, 744, 27, 301]}
{"line_number": 748, "line_type": "generated", "code": "\n\n    /**\n     * Returns the amount of time to add to UTC to get local time.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the", "entropy": 0.23681640625, "is_bug_line": false, "sus_score": 0.7637626158259734, "per_token_entropy": [1.369140625, 0.2239990234375, 0.0213470458984375, 0.0001494884490966797, 1.5283203125, 1.1455078125, 2.25, 0.01363372802734375, 0.2222900390625, 0.931640625, 0.0750732421875, 0.03485107421875, 0.433349609375, 0.05126953125, 0.035369873046875, 0.19970703125, 0.0587158203125, 0.0638427734375, 0.2384033203125, 0.0255889892578125, 1.77734375, 0.0007381439208984375, 0.016754150390625, 0.150390625, 0.06622314453125, 0.060211181640625, 0.59375, 0.0104217529296875, 0.00579071044921875, 0.00023472309112548828, 0.0002574920654296875, 0.0002770423889160156, 0.003849029541015625, 0.0004992485046386719, 6.628036499023438e-05, 1.1563301086425781e-05, 1.7642974853515625e-05, 2.968311309814453e-05, 4.029273986816406e-05, 0.0009207725524902344, 0.00010037422180175781, 5.936622619628906e-05, 7.295608520507812e-05, 2.9802322387695312e-06, 8.702278137207031e-06, 0.0012664794921875, 3.24249267578125e-05, 0.0002796649932861328, 0.0167083740234375, 0.2059326171875, 0.238525390625, 0.236083984375], "tokens": [446, 1022, 275, 319, 3759, 322, 5168, 432, 1133, 372, 1015, 372, 17197, 372, 622, 2196, 1133, 32, 275, 319, 275, 319, 477, 753, 23564, 225, 18574, 645, 225, 35, 43, 41, 34, 31, 34, 35, 31, 34, 35, 70, 34, 34, 44, 34, 34, 44, 34, 34, 76, 372, 622, 322]}
{"line_number": 631, "line_type": "original", "code": "        StringBuffer buf = new StringBuffer();", "entropy": 1.787109375, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [4.35546875, 7.05078125, 0.00624847412109375, 0.236572265625, 0.0036945343017578125, 0.0004496574401855469, 0.85791015625], "tokens": [351, 21933, 4845, 280, 537, 21933, 473]}
{"line_number": 631, "line_type": "generated", "code": "\n    private final String iId;\n    private final int iOffset;\n\n    /**\n     * Constructs a TimeZone.\n     * \n     * @param id  the time zone id, not null\n     * @param offset  the offset from UTC\n     */\n    protected", "entropy": 0.37548828125, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [0.708984375, 0.4599609375, 1.4169921875, 0.51806640625, 0.50634765625, 0.230224609375, 0.00669097900390625, 0.2257080078125, 0.01418304443359375, 0.301025390625, 1.0537109375, 0.0036182403564453125, 0.368408203125, 0.044921875, 1.091796875, 0.283447265625, 0.006122589111328125, 3.24249267578125e-05, 1.12109375, 0.372802734375, 2.578125, 0.02325439453125, 1.0673828125, 0.031829833984375, 0.0792236328125, 0.218017578125, 0.00025177001953125, 0.0007901191711425781, 0.005458831787109375, 0.136474609375, 0.051971435546875, 0.06695556640625, 0.58154296875, 0.0309600830078125, 0.0860595703125, 0.310302734375, 0.13671875, 0.032379150390625, 0.0201873779296875, 0.2073974609375, 0.00028705596923828125, 0.02398681640625, 0.072998046875, 0.2032470703125, 0.0294647216796875, 0.88671875, 0.354248046875, 0.52392578125, 1.6767578125, 0.10333251953125, 0.0162506103515625, 1.2421875], "tokens": [284, 945, 1158, 892, 595, 606, 45, 284, 945, 1158, 629, 595, 3457, 45, 446, 1022, 275, 319, 29799, 312, 3717, 6767, 32, 275, 319, 5384, 319, 477, 753, 804, 225, 322, 1133, 10790, 804, 30, 646, 744, 275, 319, 477, 753, 3401, 225, 322, 3401, 645, 17197, 275, 569, 284, 2522]}
{"line_number": 632, "line_type": "original", "code": "        if (offset >= 0) {", "entropy": 1.3359375, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [3.78515625, 2.1796875, 0.150634765625, 1.5068359375, 3.8125, 0.463134765625, 0.056427001953125, 0.054168701171875, 0.0181427001953125], "tokens": [351, 415, 308, 2881, 2377, 225, 34, 27, 301]}
{"line_number": 632, "line_type": "generated", "code": "\n    private final int iOffset;", "entropy": 0.304443359375, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [0.5498046875, 0.1339111328125, 0.439208984375, 0.60107421875, 0.00616455078125, 0.33935546875, 0.060943603515625], "tokens": [284, 945, 1158, 629, 595, 3457, 45]}
{"line_number": 639, "line_type": "original", "code": "        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;", "entropy": 0.734375, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [2.3828125, 6.86328125, 0.830078125, 0.1627197265625, 1.4677734375, 0.1070556640625, 0.62451171875, 0.0019016265869140625, 0.0002739429473876953, 0.002422332763671875, 2.2530555725097656e-05, 2.384185791015625e-07, 4.291534423828125e-06, 1.430511474609375e-06, 0.00016224384307861328, 0.0003757476806640625, 0.04327392578125], "tokens": [351, 629, 11632, 280, 3401, 517, 6666, 5229, 32, 63, 13142, 1296, 81, 3687, 81, 30540, 45]}
{"line_number": 639, "line_type": "generated", "code": "\n    public SimpleTimeZone(int id, String id) {\n        super(id, 0, id);\n        iID = id;\n    }\n\n    /**\n     * Constructor.\n     * \n     * @param id  the id to use\n     * @param", "entropy": 0.22119140625, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [0.65234375, 0.2744140625, 1.2724609375, 0.0157928466796875, 0.006328582763671875, 0.6123046875, 0.2015380859375, 0.14208984375, 0.035736083984375, 0.24267578125, 0.1845703125, 0.023956298828125, 0.08294677734375, 0.77783203125, 0.383056640625, 0.1046142578125, 0.389892578125, 0.88134765625, 0.0087890625, 0.2440185546875, 1.5029296875, 0.453125, 0.317626953125, 0.67236328125, 0.0028476715087890625, 0.00037550926208496094, 0.1689453125, 0.04150390625, 0.1517333984375, 0.0006270408630371094, 0.322265625, 0.15771484375, 0.005191802978515625, 4.112720489501953e-05, 0.6005859375, 0.028778076171875, 0.016937255859375, 9.799003601074219e-05, 0.07672119140625, 5.829334259033203e-05, 0.0006923675537109375, 0.0008034706115722656, 0.1123046875, 0.0247955322265625, 0.0018978118896484375, 0.132568359375, 0.01242828369140625, 0.0017032623291015625, 0.138916015625, 0.003780364990234375, 0.0005064010620117188, 0.0089874267578125], "tokens": [284, 562, 7155, 26223, 26, 410, 804, 30, 892, 804, 27, 301, 291, 2599, 26, 314, 30, 225, 34, 30, 804, 293, 291, 595, 779, 280, 804, 45, 284, 320, 446, 1022, 275, 319, 12835, 32, 275, 319, 5384, 319, 477, 753, 804, 225, 322, 804, 372, 793, 275, 319, 477, 753]}
{"line_number": 640, "line_type": "original", "code": "        FormatUtils.appendPaddedInteger(buf, hours, 2);", "entropy": 1.650390625, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [1.146484375, 8.6640625, 0.00024211406707763672, 0.0003540515899658203, 14.3828125, 0.1121826171875, 0.0007309913635253906, 0.15966796875, 0.0655517578125, 0.281982421875, 0.01103973388671875, 1.48828125, 0.0401611328125, 0.00826263427734375, 0.015045166015625, 0.0291900634765625], "tokens": [351, 10276, 2755, 32, 1689, 66, 11043, 3061, 26, 1954, 30, 11632, 30, 225, 36, 293]}
{"line_number": 640, "line_type": "generated", "code": "        if (id == null) {\n            throw new IllegalArgumentException(\"The id must not be null\");\n        }\n        iID = id;\n    }\n\n    /**\n     * Get the unique ID of the time-zone.\n     * \n     * @return the unique", "entropy": 0.248779296875, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [1.13671875, 1.244140625, 0.0216064453125, 0.01078033447265625, 0.01143646240234375, 0.0004897117614746094, 0.0282135009765625, 0.0089874267578125, 0.107421875, 0.0094146728515625, 0.0011043548583984375, 0.004398345947265625, 0.156494140625, 0.39453125, 0.2861328125, 0.0860595703125, 0.0010166168212890625, 2.753734588623047e-05, 0.006175994873046875, 0.011016845703125, 0.024017333984375, 0.00020051002502441406, 0.391845703125, 0.12054443359375, 0.0021152496337890625, 0.0003325939178466797, 0.0054931640625, 0.0804443359375, 0.1790771484375, 0.0011491775512695312, 0.217041015625, 0.32373046875, 0.0025272369384765625, 6.783008575439453e-05, 2.177734375, 0.0892333984375, 1.28125, 0.7783203125, 0.368408203125, 0.444580078125, 0.031341552734375, 1.0439453125, 9.047985076904297e-05, 0.25244140625, 0.04583740234375, 0.00402069091796875, 0.391845703125, 3.528594970703125e-05, 0.00443267822265625, 0.002490997314453125, 0.1494140625, 0.99462890625], "tokens": [351, 415, 308, 314, 610, 744, 27, 301, 324, 1422, 537, 12137, 440, 1318, 804, 2298, 646, 526, 744, 724, 291, 320, 291, 595, 779, 280, 804, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 5799, 2484, 432, 322, 1133, 31, 5634, 32, 275, 319, 5384, 319, 477, 601, 322, 5799]}
{"line_number": 641, "line_type": "original", "code": "        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;", "entropy": 1.7138671875, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [2.607421875, 12.171875, 6.1640625, 3.740234375, 0.044525146484375, 4.49609375, 2.76171875, 0.014434814453125, 0.356689453125, 0.006404876708984375, 0.0018053054809570312, 0.0290985107421875, 5.984306335449219e-05, 1.1920928955078125e-07, 3.0040740966796875e-05, 2.1338462829589844e-05, 9.620189666748047e-05, 0.0007777214050292969, 0.1734619140625], "tokens": [351, 3401, 5912, 11632, 319, 308, 410, 27, 6666, 5229, 32, 63, 13142, 1296, 81, 3687, 81, 30540, 45]}
{"line_number": 641, "line_type": "generated", "code": "\n            throw new IllegalArgumentException(\"The id must not be null\");\n        }\n        iID = id;\n    }\n\n    /**\n     * Gets the ID of the time-zone.\n     * \n     * @return the time-zone id, never null\n     */\n   ", "entropy": 0.1951904296875, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [0.8974609375, 0.26025390625, 0.0092926025390625, 0.036346435546875, 0.2049560546875, 0.64013671875, 0.417236328125, 0.10693359375, 0.0016613006591796875, 5.14984130859375e-05, 0.0088958740234375, 0.0240631103515625, 0.11724853515625, 0.0002689361572265625, 0.194091796875, 0.08984375, 0.0012197494506835938, 0.00019598007202148438, 0.005504608154296875, 0.06988525390625, 0.09320068359375, 0.0003924369812011719, 0.1531982421875, 0.327392578125, 0.0023174285888671875, 6.175041198730469e-05, 0.430419921875, 0.10308837890625, 1.923828125, 0.183837890625, 0.26318359375, 0.04522705078125, 1.013671875, 8.738040924072266e-05, 0.2666015625, 0.03717041015625, 0.004016876220703125, 0.307373046875, 3.6716461181640625e-05, 0.002452850341796875, 0.0013828277587890625, 0.0557861328125, 0.56494140625, 0.154296875, 0.0002275705337524414, 0.59765625, 0.310302734375, 0.1514892578125, 0.029449462890625, 0.00926971435546875, 0.0215301513671875, 0.01059722900390625], "tokens": [324, 1422, 537, 12137, 440, 1318, 804, 2298, 646, 526, 744, 724, 291, 320, 291, 595, 779, 280, 804, 45, 284, 320, 446, 1022, 275, 319, 7124, 322, 2484, 432, 322, 1133, 31, 5634, 32, 275, 319, 5384, 319, 477, 601, 322, 1133, 31, 5634, 804, 30, 7152, 744, 275, 569, 284]}
{"line_number": 643, "line_type": "original", "code": "        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;", "entropy": 0.69189453125, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [1.71875, 3.3671875, 4.4140625, 0.09521484375, 1.45703125, 0.1949462890625, 0.403076171875, 0.005207061767578125, 0.00027441978454589844, 0.01354217529296875, 1.633167266845703e-05, 1.1920928955078125e-07, 7.3909759521484375e-06, 2.86102294921875e-06, 0.0001964569091796875, 0.01042938232421875, 0.08721923828125], "tokens": [351, 629, 10135, 280, 3401, 517, 6666, 5229, 32, 63, 13142, 1296, 81, 3687, 81, 47229, 45]}
{"line_number": 643, "line_type": "generated", "code": "\n        iID = id;\n    }\n\n    /**\n     * Gets the id of the time zone.\n     * \n     * @return the time zone id, never null\n     */\n    public String getID() {\n        return iID;\n    }", "entropy": 0.148681640625, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [0.343505859375, 0.69921875, 0.01351165771484375, 0.0009112358093261719, 0.029998779296875, 0.0404052734375, 0.154296875, 0.0006990432739257812, 0.2225341796875, 0.299072265625, 0.0031909942626953125, 6.663799285888672e-05, 0.392822265625, 0.11822509765625, 1.318359375, 0.1441650390625, 0.465576171875, 0.039825439453125, 0.43994140625, 0.178466796875, 0.0282135009765625, 0.0046234130859375, 0.252685546875, 3.707408905029297e-05, 0.0016546249389648438, 0.0011005401611328125, 0.0426025390625, 0.64404296875, 0.00632476806640625, 0.0157012939453125, 0.493896484375, 0.132080078125, 0.0285186767578125, 0.011444091796875, 0.017608642578125, 0.005443572998046875, 0.04144287109375, 0.11773681640625, 0.498779296875, 5.447864532470703e-05, 0.0008406639099121094, 0.00036644935607910156, 0.0188446044921875, 0.0012044906616210938, 0.000988006591796875, 0.00010585784912109375, 0.0019989013671875, 0.01136016845703125, 6.020069122314453e-05], "tokens": [291, 595, 779, 280, 804, 45, 284, 320, 446, 1022, 275, 319, 7124, 322, 804, 432, 322, 1133, 10790, 32, 275, 319, 5384, 319, 477, 601, 322, 1133, 10790, 804, 30, 7152, 744, 275, 569, 284, 562, 892, 622, 779, 346, 301, 291, 442, 595, 779, 45, 284, 320]}
{"line_number": 644, "line_type": "original", "code": "        buf.append(':');", "entropy": 3.103515625, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [2.162109375, 11.09375, 0.349365234375, 0.098876953125, 4.78515625, 0.13330078125], "tokens": [351, 4845, 32, 1689, 16487, 895]}
{"line_number": 644, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Gets the unique id of the time zone.\n     * \n     * @return the time zone id, never null\n     */\n    public String getID() {\n        return iID;\n    }\n\n    /**\n     * Gets the time zone", "entropy": 0.2186279296875, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [0.67333984375, 0.0164947509765625, 0.2178955078125, 0.34375, 0.004322052001953125, 8.082389831542969e-05, 0.43994140625, 0.1107177734375, 1.2529296875, 1.8740234375, 0.1829833984375, 0.420166015625, 0.0239410400390625, 0.33056640625, 0.180419921875, 0.036041259765625, 0.00377655029296875, 0.330078125, 4.5418739318847656e-05, 0.0019893646240234375, 0.0015802383422851562, 0.09466552734375, 1.1083984375, 0.00800323486328125, 0.2242431640625, 0.411376953125, 0.156005859375, 0.031707763671875, 0.012298583984375, 0.0247344970703125, 0.00554656982421875, 0.0352783203125, 0.09259033203125, 0.61328125, 4.172325134277344e-05, 0.0009217262268066406, 0.00024437904357910156, 0.01264190673828125, 0.0010538101196289062, 0.0007624626159667969, 0.00010418891906738281, 0.00124359130859375, 0.047943115234375, 0.00013780593872070312, 0.285400390625, 0.123779296875, 0.004909515380859375, 9.870529174804688e-05, 0.493896484375, 0.1448974609375, 0.6396484375, 0.346923828125], "tokens": [284, 320, 446, 1022, 275, 319, 7124, 322, 5799, 804, 432, 322, 1133, 10790, 32, 275, 319, 5384, 319, 477, 601, 322, 1133, 10790, 804, 30, 7152, 744, 275, 569, 284, 562, 892, 622, 779, 346, 301, 291, 442, 595, 779, 45, 284, 320, 446, 1022, 275, 319, 7124, 322, 1133, 10790]}
{"line_number": 645, "line_type": "original", "code": "        FormatUtils.appendPaddedInteger(buf, minutes, 2);", "entropy": 0.93115234375, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [4.15234375, 8.0234375, 0.0180511474609375, 0.01204681396484375, 0.3955078125, 0.10198974609375, 0.0008349418640136719, 0.01522064208984375, 0.042083740234375, 0.0938720703125, 0.0029163360595703125, 2.005859375, 0.018768310546875, 0.0027313232421875, 0.0032444000244140625, 0.00821685791015625], "tokens": [351, 10276, 2755, 32, 1689, 66, 11043, 3061, 26, 1954, 30, 10135, 30, 225, 36, 293]}
{"line_number": 645, "line_type": "generated", "code": "\n    /**\n     * Constructor.\n     * \n     * @param id  the id to use\n     * @param offset  the offset from GMT in milliseconds\n     */\n    protected DateTimeZone(String id, int offset) {\n        this(id);\n        iOffset", "entropy": 0.256103515625, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [0.86962890625, 0.498779296875, 0.059051513671875, 0.00012373924255371094, 1.4794921875, 0.043121337890625, 0.01425933837890625, 0.054229736328125, 0.1663818359375, 0.00023221969604492188, 0.0036029815673828125, 0.00982666015625, 0.259521484375, 0.01824951171875, 0.0026378631591796875, 0.11370849609375, 0.0178375244140625, 0.0057373046875, 0.1571044921875, 0.034210205078125, 0.0011997222900390625, 0.05120849609375, 1.5546875, 0.262939453125, 0.04327392578125, 0.70458984375, 0.75, 1.521484375, 0.492431640625, 0.287109375, 0.11114501953125, 1.6640625, 0.0224151611328125, 0.160888671875, 0.0017337799072265625, 4.0531158447265625e-06, 0.00043964385986328125, 0.0041656494140625, 0.00015044212341308594, 8.20159912109375e-05, 0.010467529296875, 0.0037403106689453125, 0.01812744140625, 0.00434112548828125, 0.0216522216796875, 0.484130859375, 0.005428314208984375, 0.0023345947265625, 0.41015625, 0.2322998046875, 0.259033203125, 0.42578125], "tokens": [284, 1022, 275, 319, 12835, 32, 275, 319, 5384, 319, 477, 753, 804, 225, 322, 804, 372, 793, 275, 319, 477, 753, 3401, 225, 322, 3401, 645, 6846, 328, 18574, 275, 569, 284, 2522, 6666, 6767, 26, 652, 804, 30, 629, 3401, 27, 301, 291, 458, 26, 314, 293, 291, 595, 3457]}
{"line_number": 646, "line_type": "original", "code": "        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;", "entropy": 1.4189453125, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [4.19921875, 7.55859375, 6.3671875, 4.0625, 0.006900787353515625, 0.44580078125, 0.01113128662109375, 0.0002340078353881836, 0.01318359375, 4.887580871582031e-06, -0.0, 1.8358230590820312e-05, 5.9604644775390625e-06, 0.0001569986343383789, 0.0015153884887695312, 0.035125732421875], "tokens": [351, 3401, 5912, 10135, 319, 6666, 5229, 32, 63, 13142, 1296, 81, 3687, 81, 47229, 45]}
{"line_number": 646, "line_type": "generated", "code": "    /**\n     * Gets the ID of this time zone.\n     * <p>\n     * The ID uniquely identifies this time zone within the system.\n     * \n     * @return the time zone id, never null\n     */\n    public String getID() {", "entropy": 0.279541015625, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [1.119140625, 0.5830078125, 0.2169189453125, 0.0002644062042236328, 0.740234375, 0.1619873046875, 1.8291015625, 0.1466064453125, 1.1962890625, 0.09564208984375, 0.1470947265625, 0.13623046875, 0.038726806640625, 0.0088958740234375, 1.2626953125, 0.00240325927734375, 0.0004353523254394531, 0.000568389892578125, 0.00012218952178955078, 0.798828125, 0.0821533203125, 0.25146484375, 0.0853271484375, 0.1572265625, 0.0457763671875, 0.008087158203125, 0.428466796875, 0.8330078125, 0.495849609375, 0.09234619140625, 0.2261962890625, 0.005092620849609375, 0.328857421875, 2.86102294921875e-05, 0.0006613731384277344, 0.00342559814453125, 0.048309326171875, 0.60693359375, 0.0130615234375, 0.80126953125, 0.411376953125, 0.267578125, 0.041259765625, 0.0092926025390625, 0.0284271240234375, 0.010833740234375, 0.033477783203125, 0.123291015625, 0.611328125, 3.1113624572753906e-05, 0.001434326171875, 0.0007052421569824219], "tokens": [264, 1022, 275, 319, 7124, 322, 2484, 432, 458, 1133, 10790, 32, 275, 319, 333, 98, 48, 275, 319, 886, 2484, 43699, 32592, 458, 1133, 10790, 4797, 322, 2664, 32, 275, 319, 5384, 319, 477, 601, 322, 1133, 10790, 804, 30, 7152, 744, 275, 569, 284, 562, 892, 622, 779, 346, 301]}
{"line_number": 647, "line_type": "original", "code": "        if (offset == 0) {", "entropy": 1.1435546875, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [3.10546875, 2.75390625, 0.10845947265625, 2.56640625, 0.8115234375, 0.7109375, 0.010406494140625, 0.1805419921875, 0.039703369140625], "tokens": [351, 415, 308, 2881, 610, 225, 34, 27, 301]}
{"line_number": 647, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the unique ID of the time zone.\n     * <p>\n     * The ID uniquely identifies the time zone within the system.\n     * \n     * @return the time zone ID, never null\n     */\n    public String", "entropy": 0.331787109375, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [0.74609375, 1.9921875, 0.276123046875, 0.1644287109375, 0.2239990234375, 0.019439697265625, 6.210803985595703e-05, 0.328857421875, 0.126220703125, 1.2822265625, 0.83056640625, 0.2215576171875, 0.38330078125, 0.02239990234375, 0.65478515625, 0.29248046875, 0.048004150390625, 0.002025604248046875, 0.78564453125, 0.0020122528076171875, 0.00046563148498535156, 0.0005879402160644531, 8.082389831542969e-05, 0.91552734375, 0.1378173828125, 0.65869140625, 0.177001953125, 0.58935546875, 0.18310546875, 0.0080718994140625, 0.60302734375, 0.7021484375, 0.5107421875, 0.109375, 0.377685546875, 0.002201080322265625, 0.55712890625, 2.86102294921875e-05, 0.0012607574462890625, 0.0031185150146484375, 0.036285400390625, 0.7265625, 0.019775390625, 1.6494140625, 0.1788330078125, 0.463623046875, 0.042816162109375, 0.009002685546875, 0.037506103515625, 0.005092620849609375, 0.0305023193359375, 0.10986328125], "tokens": [284, 434, 42510, 284, 1022, 275, 319, 7124, 322, 5799, 2484, 432, 322, 1133, 10790, 32, 275, 319, 333, 98, 48, 275, 319, 886, 2484, 43699, 32592, 322, 1133, 10790, 4797, 322, 2664, 32, 275, 319, 5384, 319, 477, 601, 322, 1133, 10790, 2484, 30, 7152, 744, 275, 569, 284, 562, 892]}
{"line_number": 648, "line_type": "original", "code": "            return buf.toString();", "entropy": 3.345703125, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [7.484375, 2.62109375, 9.8984375, 0.0305328369140625, 0.0258026123046875, 0.0186614990234375], "tokens": [1468, 442, 4845, 32, 3108, 473]}
{"line_number": 648, "line_type": "generated", "code": "\n\n    /**\n     * Gets the ID of this time zone.\n     * \n     * @return the time zone id, never null\n     */\n    public StringgetID() {\n        return iID;\n    }\n\n    /**\n     * Gets the time offset (in milliseconds)", "entropy": 0.295166015625, "is_bug_line": false, "sus_score": 0.5413319619607667, "per_token_entropy": [1.29296875, 0.77880859375, 0.022247314453125, 8.821487426757812e-05, 0.42822265625, 0.1614990234375, 1.671875, 0.150146484375, 1.0283203125, 0.08538818359375, 0.281494140625, 0.1666259765625, 0.053985595703125, 0.006618499755859375, 0.494140625, 3.6597251892089844e-05, 0.00408172607421875, 0.0016622543334960938, 0.047119140625, 0.693359375, 0.00930023193359375, 0.403076171875, 0.5126953125, 0.129150390625, 0.035247802734375, 0.01092529296875, 0.0170745849609375, 0.0057525634765625, 0.0391845703125, 0.1322021484375, 1.1767578125, 0.016876220703125, 0.0006990432739257812, 0.0253143310546875, 0.0016736984252929688, 0.0014867782592773438, 0.00036144256591796875, 0.001049041748046875, 0.0100250244140625, 0.00027441978454589844, 0.2108154296875, 0.25390625, 0.00466156005859375, 0.00014650821685791016, 0.443359375, 0.1295166015625, 0.96875, 0.75, 1.6767578125, 0.77734375, 0.2213134765625, 0.00899505615234375], "tokens": [446, 1022, 275, 319, 7124, 322, 2484, 432, 458, 1133, 10790, 32, 275, 319, 5384, 319, 477, 601, 322, 1133, 10790, 804, 30, 7152, 744, 275, 569, 284, 562, 892, 37575, 346, 301, 291, 442, 595, 779, 45, 284, 320, 446, 1022, 275, 319, 7124, 322, 1133, 3401, 308, 266, 18574, 27]}
{"line_number": 633, "line_type": "original", "code": "            buf.append('+');", "entropy": 2.96875, "is_bug_line": false, "sus_score": 0.5029188806044014, "per_token_entropy": [7.375, 6.9609375, 0.07562255859375, 0.0595703125, 3.2421875, 0.0994873046875], "tokens": [1468, 4845, 32, 1689, 37984, 895]}
{"line_number": 633, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5029188806044014, "per_token_entropy": [], "tokens": []}
{"line_number": 791, "line_type": "original", "code": "        String name = cNameProvider.getName(locale, iID, nameKey);", "entropy": 0.791015625, "is_bug_line": false, "sus_score": 0.39477101697586137, "per_token_entropy": [3.390625, 6.28125, 1.6591796875, 0.54296875, 0.529296875, 0.0286407470703125, 0.00533294677734375, 0.00403594970703125, 1.0830078125, 0.086669921875, 0.2080078125, 0.0058441162109375, 0.08404541015625, 0.039703369140625, 0.047393798828125, 0.216552734375, 0.0013294219970703125, 0.024810791015625], "tokens": [351, 892, 636, 280, 281, 558, 2570, 32, 5165, 26, 6921, 30, 595, 779, 30, 636, 953, 293]}
{"line_number": 791, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Gets the daylight savings millisecond offset to add to UTC to get local\n     * time, when daylight savings is in effect.\n     * \n     * @param instant  milliseconds from 1970-0", "entropy": 0.1265869140625, "is_bug_line": false, "sus_score": 0.39477101697586137, "per_token_entropy": [0.99169921875, 0.336181640625, 0.13037109375, 0.0792236328125, 0.0102691650390625, 9.40561294555664e-05, 0.5673828125, 0.0330810546875, 0.80712890625, 0.000965118408203125, 0.3701171875, 2.5153160095214844e-05, 1.1220703125, 1.049041748046875e-05, 0.0006756782531738281, 0.0020656585693359375, 0.000762939453125, 0.00016570091247558594, 0.00637054443359375, 0.00339508056640625, 0.0028057098388671875, 0.054229736328125, 0.36279296875, 1.3470649719238281e-05, 0.00807952880859375, 0.054931640625, 0.00344085693359375, 0.02801513671875, 6.651878356933594e-05, 0.018463134765625, 7.510185241699219e-06, 1.3837890625, 0.0030841827392578125, 0.0005893707275390625, 0.0023708343505859375, 0.0784912109375, 0.00014221668243408203, 0.10540771484375, 1.811981201171875e-05, 0.0009455680847167969, 0.0022106170654296875, 0.000759124755859375, 0.0012569427490234375, 0.0079498291015625, 0.0004162788391113281, 3.802776336669922e-05, 6.67572021484375e-06, 0.00013637542724609375, 6.29425048828125e-05, 7.152557373046875e-06, 7.319450378417969e-05, 6.556510925292969e-05], "tokens": [284, 320, 446, 1022, 275, 319, 7124, 322, 5808, 2429, 309, 31156, 37003, 3090, 3401, 372, 1015, 372, 17197, 372, 622, 2196, 275, 319, 1133, 30, 1412, 5808, 2429, 309, 31156, 438, 328, 5744, 32, 275, 319, 5384, 319, 477, 753, 23564, 225, 18574, 645, 225, 35, 43, 41, 34, 31, 34]}
{"line_number": 792, "line_type": "original", "code": "        if (name != null) {", "entropy": 1.8125, "is_bug_line": false, "sus_score": 0.39477101697586137, "per_token_entropy": [3.638671875, 2.4140625, 0.07489013671875, 6.63671875, 1.47265625, 0.011474609375, 0.060333251953125, 0.1934814453125], "tokens": [351, 415, 308, 426, 863, 744, 27, 301]}
{"line_number": 792, "line_type": "generated", "code": "\n     */\n    public boolean isStandardOffset(long instant) {\n        return getOffset(instant) == getStandardOffset(instant);\n    }\n\n    /**\n     * Gets the daylight savings offset to add to UTC to get local time,\n     * when", "entropy": 0.1026611328125, "is_bug_line": false, "sus_score": 0.39477101697586137, "per_token_entropy": [1.1455078125, 0.081787109375, 0.0228424072265625, 0.01296234130859375, 0.307373046875, 0.00016558170318603516, 0.019989013671875, 0.000240325927734375, 0.00018513202667236328, 0.002796173095703125, 0.00016224384307861328, 0.00045680999755859375, 0.00193023681640625, 0.1026611328125, 0.08416748046875, 0.462158203125, 0.041473388671875, 0.00039649009704589844, 0.00011968612670898438, 0.00020444393157958984, 0.0006518363952636719, 0.0007538795471191406, 0.00012683868408203125, 4.410743713378906e-06, 0.00010287761688232422, 0.00021588802337646484, 0.0012798309326171875, 0.07965087890625, 0.00020456314086914062, 0.09716796875, 0.035888671875, 0.0034732818603515625, 6.73532485961914e-05, 0.56005859375, 0.03729248046875, 0.52880859375, 0.0009088516235351562, 0.289794921875, 1.811981201171875e-05, 0.73291015625, 0.122314453125, 0.0025920867919921875, 0.0002713203430175781, 0.01209259033203125, 0.0063323974609375, 0.00098419189453125, 0.00206756591796875, 0.005107879638671875, 0.11993408203125, 0.4052734375, 8.106231689453125e-06, 0.005908966064453125], "tokens": [275, 569, 284, 562, 1905, 438, 8090, 3457, 26, 3222, 23564, 27, 301, 291, 442, 622, 3457, 26, 30241, 27, 610, 622, 8090, 3457, 26, 30241, 293, 284, 320, 446, 1022, 275, 319, 7124, 322, 5808, 2429, 309, 31156, 3401, 372, 1015, 372, 17197, 372, 622, 2196, 1133, 30, 275, 319, 1412]}
{"line_number": 795, "line_type": "original", "code": "        return printOffset(getOffset(instant));", "entropy": 1.361328125, "is_bug_line": false, "sus_score": 0.39477101697586137, "per_token_entropy": [6.31640625, 0.80712890625, 5.91796875, 0.01824951171875, 0.024322509765625, 0.1591796875, 0.1600341796875, 0.01033782958984375, 0.02593994140625, 0.1669921875], "tokens": [351, 442, 1459, 3457, 26, 371, 3457, 26, 30241, 876]}
{"line_number": 795, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Gets the amount of savings from UTC at this time instant.\n     * <p>\n     * The amount of savings is the difference between the standard offset and\n     * the actual offset.\n     * \n     * @param instant", "entropy": 0.44580078125, "is_bug_line": false, "sus_score": 0.39477101697586137, "per_token_entropy": [0.1142578125, 0.033843994140625, 0.11883544921875, 0.040863037109375, 0.00453948974609375, 4.2557716369628906e-05, 0.728515625, 0.055572509765625, 2.49609375, 0.043609619140625, 0.292236328125, 0.0011806488037109375, 1.31640625, 2.08984375, 1.2197265625, 0.7373046875, 0.63525390625, 2.126953125, 0.7939453125, 0.116455078125, 0.00173187255859375, 0.492919921875, 0.00074005126953125, 0.0002865791320800781, 0.0016450881958007812, 6.99758529663086e-05, 1.2158203125, 0.51416015625, 0.30029296875, 0.2080078125, 3.6954879760742188e-06, 0.875, 0.931640625, 0.1904296875, 0.060516357421875, 0.440673828125, 1.0400390625, 0.62255859375, 0.260498046875, 0.36474609375, 1.2516975402832031e-05, 0.03106689453125, 0.318603515625, 0.0037136077880859375, 0.76318359375, 1.404296875, 0.00038886070251464844, 0.1673583984375, 1.919269561767578e-05, 0.0018053054809570312, 0.007602691650390625, 0.002979278564453125], "tokens": [284, 320, 446, 1022, 275, 319, 7124, 322, 5168, 432, 309, 31156, 645, 17197, 821, 458, 1133, 23564, 32, 275, 319, 333, 98, 48, 275, 319, 886, 5168, 432, 309, 31156, 438, 322, 10563, 3733, 322, 6216, 3401, 461, 275, 319, 322, 4648, 3401, 32, 275, 319, 5384, 319, 477, 753, 23564]}
