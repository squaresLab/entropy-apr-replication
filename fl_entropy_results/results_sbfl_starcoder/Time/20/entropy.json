{"line_number": 1005, "line_type": "original", "code": "        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);", "entropy": 0.72216796875, "is_bug_line": false, "sus_score": 0.7237468644557459, "per_token_entropy": [5.3046875, 0.994140625, 0.70654296875, 0.1431884765625, 0.0164794921875, 0.3642578125, 0.114013671875, 0.0003368854522705078, 4.4375, 0.2227783203125, 0.62255859375, 0.060516357421875, 0.01514434814453125, 0.671875, 0.0021209716796875, 0.053192138671875, 0.13818359375, 0.400146484375, 0.69189453125, 0.1964111328125, 0.0084228515625], "tokens": [351, 442, 5489, 34, 26, 890, 3717, 6767, 558, 26, 26223, 558, 32, 15456, 81, 2474, 30, 744, 471, 744, 293]}
{"line_number": 1005, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Instructs the printer to emit text and numbers to display time zone\n     * offset from UTC. A parser will use the parsed time zone offset to adjust\n     * the datetime.\n     * <p>\n     * If zero offset text", "entropy": 0.037200927734375, "is_bug_line": false, "sus_score": 0.7237468644557459, "per_token_entropy": [0.10076904296875, 0.00148773193359375, 0.093994140625, 0.077392578125, 0.0080413818359375, 9.751319885253906e-05, 0.042083740234375, 0.0013990402221679688, 0.0002593994140625, 0.005123138427734375, 0.0386962890625, 0.01276397705078125, 0.68310546875, 0.05609130859375, 0.00693511962890625, 0.003025054931640625, 0.004627227783203125, 0.09271240234375, 0.005435943603515625, 0.03253173828125, 3.0875205993652344e-05, 0.003513336181640625, 0.005523681640625, 0.0015544891357421875, 0.0811767578125, 0.048675537109375, 0.0016956329345703125, 0.001697540283203125, 0.00420379638671875, 0.00048041343688964844, 0.000988006591796875, 0.01016998291015625, 0.00013911724090576172, 0.0004608631134033203, 0.0031375885009765625, 0.0247344970703125, 0.002475738525390625, 2.86102294921875e-06, 0.0002340078353881836, 0.0021572113037109375, 0.003917694091796875, 0.0631103515625, 3.0279159545898438e-05, 0.12091064453125, 0.00046133995056152344, 0.00018024444580078125, 0.00037789344787597656, 2.467632293701172e-05, 0.2059326171875, 0.05712890625, 0.00487518310546875, 0.0182647705078125], "tokens": [284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 1344, 461, 7515, 372, 2503, 1133, 10790, 275, 319, 3401, 645, 17197, 32, 399, 4118, 1098, 793, 322, 8436, 1133, 10790, 3401, 372, 10891, 275, 319, 322, 7138, 32, 275, 319, 333, 98, 48, 275, 319, 1670, 5934, 3401, 1344]}
{"line_number": 980, "line_type": "original", "code": "        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);", "entropy": 0.58349609375, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [4.92578125, 0.89111328125, 0.81396484375, 0.301025390625, 0.00809478759765625, 0.401611328125, 0.09918212890625, 0.00024890899658203125, 1.8310546875, 0.01433563232421875, 0.1727294921875, 0.00429534912109375, 0.0009303092956542969, 1.5791015625, 0.001827239990234375, 0.642578125, 0.07867431640625, 0.1402587890625, 0.06298828125, 0.276611328125, 0.00946044921875], "tokens": [351, 442, 5489, 34, 26, 890, 3717, 6767, 558, 26, 26223, 558, 32, 10129, 81, 2474, 30, 744, 471, 744, 293]}
{"line_number": 980, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Instructs the printer to emit the ISO8601 week-based year.\n     * From version 2.0, this field can be parsed.\n     *\n     * @return this DateTimeFormatterBuilder, for chaining\n    ", "entropy": 0.16015625, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [0.143798828125, 0.0005440711975097656, 0.1109619140625, 0.226806640625, 0.0083160400390625, 6.139278411865234e-05, 0.069580078125, 0.0007805824279785156, 0.0003323554992675781, 0.0236053466796875, 0.0985107421875, 0.017822265625, 0.361572265625, 2.1875, 1.3642578125, 0.005870819091796875, 0.0012159347534179688, 0.0004153251647949219, 0.73388671875, 0.1241455078125, 0.08380126953125, 0.1822509765625, 0.5693359375, 0.41064453125, 0.001102447509765625, 1.0751953125, 0.007534027099609375, 0.00048279762268066406, 0.0175323486328125, 0.0008172988891601562, 0.1630859375, 0.0118408203125, 0.0192413330078125, 0.0240020751953125, 0.014739990234375, 0.004901885986328125, 0.0017414093017578125, 0.02801513671875, 0.02166748046875, 0.0009851455688476562, 0.136962890625, 0.0001404285430908203, 0.015899658203125, 0.049713134765625, 0.0010528564453125, 0.0008249282836914062, 0.0001043081283569336, 3.457069396972656e-05, 6.198883056640625e-05, 9.1552734375e-05, 0.000926971435546875, 0.002727508544921875], "tokens": [284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 322, 19687, 42, 40, 34, 35, 8209, 31, 7873, 4947, 32, 275, 319, 8649, 1503, 225, 36, 32, 34, 30, 458, 1600, 883, 526, 8436, 32, 275, 319, 275, 319, 477, 601, 458, 6666, 8736, 1796, 30, 436, 38009, 275]}
{"line_number": 667, "line_type": "original", "code": "        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);", "entropy": 0.79541015625, "is_bug_line": false, "sus_score": 0.29721504670685484, "per_token_entropy": [5.7421875, 0.68896484375, 0.431884765625, 0.1424560546875, 0.0052947998046875, 0.02960205078125, 0.0009851455688476562, 0.0027294158935546875, 6.55859375, 0.1962890625, 0.273193359375, 0.056488037109375, 0.1021728515625, 0.00292205810546875, 0.030609130859375, 0.0086822509765625, 0.036468505859375, 0.0131378173828125], "tokens": [351, 442, 5489, 7697, 26, 4852, 19204, 32, 19880, 1419, 14415, 1026, 1847, 22326, 30, 225, 36, 293]}
{"line_number": 667, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Instructs the printer to emit a numeric halfdayOfDay field.\n     *\n     * @param minDigits  minimum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     */\n    public DateTimeFormatter", "entropy": 0.013336181640625, "is_bug_line": false, "sus_score": 0.29721504670685484, "per_token_entropy": [0.086669921875, 0.0015649795532226562, 0.019287109375, 0.01512908935546875, 0.0028285980224609375, 9.679794311523438e-05, 0.008544921875, 0.0003528594970703125, 5.710124969482422e-05, 0.0008001327514648438, 0.00026702880859375, 0.0025539398193359375, 0.0054168701171875, 0.0124053955078125, 0.27099609375, 4.494190216064453e-05, 0.0023937225341796875, 0.0066375732421875, 0.003200531005859375, 0.0101776123046875, 0.0221710205078125, 0.00012290477752685547, 0.05877685546875, 1.2636184692382812e-05, 0.0060882568359375, 0.0079498291015625, 0.0209808349609375, 0.0002148151397705078, 0.08990478515625, 0.000507354736328125, 3.4332275390625e-05, 3.3855438232421875e-05, 6.246566772460938e-05, 0.00012934207916259766, 8.380413055419922e-05, 0.0023479461669921875, 4.291534423828125e-05, 4.8041343688964844e-05, 0.0030536651611328125, 0.0001729726791381836, 0.00010836124420166016, 8.594989776611328e-05, 0.00014603137969970703, 6.115436553955078e-05, 9.775161743164062e-06, 3.2782554626464844e-05, 0.0008440017700195312, 0.0125274658203125, 0.01666259765625, 0.0005326271057128906, 0.00010144710540771484, 1.0967254638671875e-05], "tokens": [284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 312, 12738, 20158, 2995, 395, 38119, 1600, 32, 275, 319, 275, 319, 477, 753, 1847, 22326, 225, 9340, 1451, 432, 16105, 372, 1459, 275, 319, 477, 601, 458, 6666, 8736, 1796, 30, 436, 38009, 275, 569, 284, 562, 6666, 8736]}
{"line_number": 687, "line_type": "original", "code": "        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);", "entropy": 1.0947265625, "is_bug_line": false, "sus_score": 0.2879729318165541, "per_token_entropy": [6.28515625, 0.50634765625, 1.3681640625, 0.5361328125, 0.01043701171875, 0.01239013671875, 0.00021505355834960938, 0.0008492469787597656, 9.2421875, 0.216552734375, 0.06695556640625, 0.1302490234375, 0.00311279296875, 0.03204345703125, 0.00958251953125, 0.180419921875, 0.01061248779296875], "tokens": [351, 442, 5489, 7697, 26, 4852, 19204, 32, 11302, 38119, 1026, 1847, 22326, 30, 225, 36, 293]}
{"line_number": 687, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Instructs the printer to emit a numeric dayOfYear field.\n     *\n     * @param minDigits  minimum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     */\n    public DateTimeFormatterBuilder append", "entropy": 0.0039825439453125, "is_bug_line": false, "sus_score": 0.2879729318165541, "per_token_entropy": [0.0517578125, 0.0006413459777832031, 0.0261993408203125, 0.004756927490234375, 0.0014133453369140625, 0.0008578300476074219, 0.0017833709716796875, 6.67572021484375e-05, 2.0384788513183594e-05, 0.00011169910430908203, 8.356571197509766e-05, 0.0004935264587402344, 0.0016956329345703125, 0.005870819091796875, 0.007049560546875, 0.043701171875, 0.0020427703857421875, 0.0012722015380859375, 0.0011472702026367188, 1.0132789611816406e-05, 0.0115814208984375, 9.59634780883789e-05, 0.0008478164672851562, 0.0005087852478027344, 0.0003635883331298828, 0.00012254714965820312, 0.032012939453125, 0.00023889541625976562, 1.3113021850585938e-05, 2.7418136596679688e-06, 9.799003601074219e-05, 0.00011014938354492188, 5.054473876953125e-05, 0.0014476776123046875, 0.00012731552124023438, 2.7179718017578125e-05, 0.0008840560913085938, 6.687641143798828e-05, 7.510185241699219e-06, 0.0014400482177734375, 8.392333984375e-05, 2.682209014892578e-05, 4.1365623474121094e-05, 0.00015151500701904297, 0.00043964385986328125, 0.0018463134765625, 0.0031890869140625, 0.00031256675720214844, 5.066394805908203e-05, 6.198883056640625e-06, 5.9604644775390625e-06, 7.152557373046875e-06], "tokens": [284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 312, 12738, 5808, 45945, 1600, 32, 275, 319, 275, 319, 477, 753, 1847, 22326, 225, 9340, 1451, 432, 16105, 372, 1459, 275, 319, 477, 601, 458, 6666, 8736, 1796, 30, 436, 38009, 275, 569, 284, 562, 6666, 8736, 1796, 5489]}
{"line_number": 1094, "line_type": "original", "code": "        DateTimeFormat.appendPatternTo(this, pattern);", "entropy": 2.046875, "is_bug_line": false, "sus_score": 0.2817180849095055, "per_token_entropy": [5.7890625, 5.87109375, 2.3203125, 0.44140625, 3.92578125, 1.8330078125, 0.61474609375, 0.04937744140625, 2.958984375, 0.0292205810546875, 0.60546875, 0.1268310546875], "tokens": [351, 6666, 2207, 32, 1689, 5516, 705, 26, 578, 30, 5257, 293]}
{"line_number": 1094, "line_type": "generated", "code": "\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a new {@link DateTimeFormatter} instance built by this builder.\n     *\n     * @return a new DateTimeFormatter\n     */\n    public DateTimeFormatter toFormatter() {\n        return new DateTimeFormatter(getFormatter());", "entropy": 0.295166015625, "is_bug_line": false, "sus_score": 0.2817180849095055, "per_token_entropy": [0.541015625, 0.2427978515625, 0.24072265625, 0.669921875, 0.01279449462890625, 0.0274505615234375, 0.410400390625, 0.0034275054931640625, 4.124641418457031e-05, 0.8994140625, 0.201416015625, 0.869140625, 1.318359375, 0.3134765625, 0.01158905029296875, 0.01177978515625, 0.00821685791015625, 0.9638671875, 2.0625, 1.943359375, 0.031402587890625, 0.06951904296875, 0.0266876220703125, 0.007556915283203125, 0.0540771484375, 0.85595703125, 4.5299530029296875e-05, 0.0101165771484375, 0.12078857421875, 0.505859375, 0.055084228515625, 1.00390625, 0.0022525787353515625, 0.459228515625, 0.140625, 0.005401611328125, 0.01171112060546875, 0.00821685791015625, 1.2874603271484375e-05, 0.0008525848388671875, 0.00014543533325195312, 0.012969970703125, 0.00015282630920410156, 0.08343505859375, 0.34814453125, 0.159912109375, 0.006927490234375, 3.1828880310058594e-05, 0.0194854736328125, 0.08209228515625, 0.0011339187622070312, 0.513671875], "tokens": [284, 320, 446, 434, 42510, 284, 1022, 275, 319, 3759, 312, 537, 3088, 1204, 6666, 8736, 111, 1980, 6895, 810, 458, 4906, 32, 275, 319, 275, 319, 477, 601, 312, 537, 6666, 8736, 275, 569, 284, 562, 6666, 8736, 372, 8736, 346, 301, 291, 442, 537, 6666, 8736, 26, 371, 8736, 1035]}
{"line_number": 1095, "line_type": "original", "code": "        return this;", "entropy": 2.271484375, "is_bug_line": false, "sus_score": 0.2817180849095055, "per_token_entropy": [6.16015625, 1.7509765625, 1.1435546875, 0.0283355712890625], "tokens": [351, 442, 458, 45]}
{"line_number": 1095, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a new {@link DateTimeFormatter} instance using the settings in\n     * this builder.\n     *\n     * @return the new formatter instance, never null\n     */\n    public DateTimeFormatter toFormatter() {\n        return new DateTime", "entropy": 0.2939453125, "is_bug_line": false, "sus_score": 0.2817180849095055, "per_token_entropy": [0.740234375, 0.79833984375, 0.01016998291015625, 0.0178070068359375, 0.270751953125, 0.004222869873046875, 5.245208740234375e-05, 1.0205078125, 0.18212890625, 0.91796875, 1.3681640625, 0.362548828125, 0.01027679443359375, 0.009674072265625, 0.00617218017578125, 0.91259765625, 0.84130859375, 0.0276031494140625, 1.529296875, 0.65576171875, 0.2880859375, 2.1576881408691406e-05, 0.03314208984375, 0.002185821533203125, 0.01226806640625, 0.08770751953125, 0.050872802734375, 0.5625, 4.863739013671875e-05, 0.006603240966796875, 0.06939697265625, 0.89404296875, 0.6279296875, 0.197998046875, 1.1298828125, 0.75927734375, 0.0784912109375, 0.002956390380859375, 0.00142669677734375, 0.1214599609375, 0.003376007080078125, 0.01119232177734375, 0.005428314208984375, 7.3909759521484375e-06, 0.0005745887756347656, 0.00015175342559814453, 0.0144500732421875, 0.00011336803436279297, 0.040924072265625, 0.383544921875, 0.2020263671875, 0.0060577392578125], "tokens": [284, 434, 42510, 284, 1022, 275, 319, 3759, 312, 537, 3088, 1204, 6666, 8736, 111, 1980, 1471, 322, 4070, 328, 275, 319, 458, 4906, 32, 275, 319, 275, 319, 477, 601, 322, 537, 14971, 1980, 30, 7152, 744, 275, 569, 284, 562, 6666, 8736, 372, 8736, 346, 301, 291, 442, 537, 6666]}
{"line_number": 647, "line_type": "original", "code": "        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);", "entropy": 1.0400390625, "is_bug_line": false, "sus_score": 0.2753443958769674, "per_token_entropy": [5.91015625, 0.7861328125, 0.5302734375, 0.2027587890625, 0.005908966064453125, 0.018310546875, 0.0004277229309082031, 0.001956939697265625, 9.140625, 1.693359375, 0.0088348388671875, 0.029296875, 0.298095703125, 0.00522613525390625, 0.026702880859375, 0.01702880859375, 0.0259857177734375, 0.021881103515625], "tokens": [351, 442, 5489, 7697, 26, 4852, 19204, 32, 3090, 1419, 20186, 1026, 1847, 22326, 30, 225, 36, 293]}
{"line_number": 647, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Instructs the printer to emit a numeric hourOfHalfday field.\n     *\n     * @param minDigits  minimum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     */\n    public DateTime", "entropy": 0.0293121337890625, "is_bug_line": false, "sus_score": 0.2753443958769674, "per_token_entropy": [0.08856201171875, 0.0009222030639648438, 0.0290679931640625, 0.0247039794921875, 0.00211334228515625, 0.00013840198516845703, 0.01503753662109375, 0.0003006458282470703, 8.64267349243164e-05, 0.0022830963134765625, 0.00246429443359375, 0.00438690185546875, 0.005786895751953125, 0.03179931640625, 0.5029296875, 0.022125244140625, 0.0097808837890625, 0.0009484291076660156, 2.4199485778808594e-05, 0.00682830810546875, 0.006328582763671875, 0.00252532958984375, 0.0001481771469116211, 0.1376953125, 6.866455078125e-05, 0.0009307861328125, 0.0032024383544921875, 0.0161590576171875, 0.00028777122497558594, 0.578125, 0.0003864765167236328, 8.654594421386719e-05, 5.364418029785156e-06, 9.09566879272461e-05, 0.0001380443572998047, 0.00024211406707763672, 0.001422882080078125, 9.965896606445312e-05, 8.83340835571289e-05, 0.003936767578125, 0.00011515617370605469, 2.4318695068359375e-05, 0.00018799304962158203, 6.961822509765625e-05, 5.257129669189453e-05, 1.1205673217773438e-05, 7.641315460205078e-05, 0.0005154609680175781, 0.01105499267578125, 0.0094146728515625, 0.00038123130798339844, 8.022785186767578e-05], "tokens": [284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 312, 12738, 12021, 1419, 36001, 2995, 395, 1600, 32, 275, 319, 275, 319, 477, 753, 1847, 22326, 225, 9340, 1451, 432, 16105, 372, 1459, 275, 319, 477, 601, 458, 6666, 8736, 1796, 30, 436, 38009, 275, 569, 284, 562, 6666]}
{"line_number": 737, "line_type": "original", "code": "        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);", "entropy": 0.80078125, "is_bug_line": false, "sus_score": 0.26101057580348197, "per_token_entropy": [2.83203125, 3.3671875, 0.438232421875, 1.13671875, 0.0029506683349609375, 0.01434326171875, 0.0009245872497558594, 0.001087188720703125, 5.078125, 0.49462890625, 0.00876617431640625, 0.05523681640625, 0.00173187255859375, 0.00963592529296875, 0.076416015625, 0.087158203125, 0.0085296630859375], "tokens": [351, 442, 5489, 7697, 26, 4852, 19204, 32, 3368, 38369, 1026, 1847, 22326, 30, 225, 36, 293]}
{"line_number": 737, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Instructs the printer to emit a numeric yearOfCentury field.\n     *\n     * @param minDigits  minimum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     */\n    public DateTimeFormatter", "entropy": 0.085205078125, "is_bug_line": false, "sus_score": 0.26101057580348197, "per_token_entropy": [1.21875, 0.21728515625, 0.05413818359375, 0.04901123046875, 0.032012939453125, 0.0014581680297851562, 0.042205810546875, 0.0014486312866210938, 0.00023984909057617188, 0.002994537353515625, 0.0012884140014648438, 0.0104827880859375, 0.062347412109375, 0.2105712890625, 1.130859375, 0.18310546875, 0.177490234375, 5.7816505432128906e-05, 0.005947113037109375, 0.0097198486328125, 0.024993896484375, 9.274482727050781e-05, 0.0927734375, 0.00014650821685791016, 0.00432586669921875, 0.00606536865234375, 0.00543975830078125, 0.0012845993041992188, 0.0452880859375, 0.0010843276977539062, 0.00019443035125732422, 0.00012993812561035156, 0.0012607574462890625, 0.001247406005859375, 0.55078125, 0.004772186279296875, 0.00018656253814697266, 0.00031828880310058594, 0.248779296875, 0.0008654594421386719, 0.00072479248046875, 0.0002090930938720703, 0.00011396408081054688, 0.00016415119171142578, 2.3245811462402344e-05, 0.0008864402770996094, 0.00368499755859375, 0.0163116455078125, 0.004627227783203125, 0.0015306472778320312, 0.00014400482177734375, 4.875659942626953e-05], "tokens": [284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 312, 12738, 4947, 1419, 12280, 14338, 1600, 32, 275, 319, 275, 319, 477, 753, 1847, 22326, 225, 9340, 1451, 432, 16105, 372, 1459, 275, 319, 477, 601, 458, 6666, 8736, 1796, 30, 436, 38009, 275, 569, 284, 562, 6666, 8736]}
{"line_number": 345, "line_type": "original", "code": "        iFormatter = null;", "entropy": 3.859375, "is_bug_line": false, "sus_score": 0.25722170138424105, "per_token_entropy": [4.77734375, 9.4296875, 5.55859375, 2.62109375, 0.72705078125, 0.047698974609375], "tokens": [351, 595, 8736, 280, 744, 45]}
{"line_number": 345, "line_type": "generated", "code": " fieldType, int minDigits, int maxDigits) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"Field type must not be null\");\n        }\n        return append0(new DecimalPrinter(fieldType, minDigits), new DecimalParser(fieldType", "entropy": 0.1751708984375, "is_bug_line": false, "sus_score": 0.25722170138424105, "per_token_entropy": [2.015625, 0.05755615234375, 0.1092529296875, 0.0014410018920898438, 0.0021381378173828125, 0.0010814666748046875, 0.0065460205078125, 0.0003764629364013672, 8.821487426757812e-05, 0.006633758544921875, 0.0041961669921875, 0.1834716796875, 0.82470703125, 0.005664825439453125, 0.02288818359375, 0.0036716461181640625, 0.0010385513305664062, 0.00524139404296875, 0.00116729736328125, 0.007236480712890625, 0.0033550262451171875, 0.00015473365783691406, 0.0010137557983398438, 0.01149749755859375, 0.0826416015625, 0.03240966796875, 0.0011272430419921875, 0.0038013458251953125, 0.00018155574798583984, 0.0005145072937011719, 0.003932952880859375, 0.01195526123046875, 0.00027942657470703125, 0.08917236328125, 1.4326171875, 0.01806640625, 0.05181884765625, 0.01000213623046875, 0.390625, 0.490478515625, 0.075927734375, 0.208740234375, 0.181396484375, 0.051177978515625, 0.042510986328125, 0.0002486705780029297, 1.505859375, 0.734375, 0.339599609375, 0.0009493827819824219, 0.01171875, 0.0595703125], "tokens": [43661, 30, 629, 1847, 22326, 30, 629, 1769, 22326, 27, 301, 291, 415, 308, 34531, 610, 744, 27, 301, 324, 1422, 537, 12137, 440, 1176, 827, 2298, 646, 526, 744, 724, 291, 320, 291, 442, 5489, 34, 26, 890, 23501, 14384, 26, 34531, 30, 1847, 22326, 471, 537, 23501, 2825, 26, 34531]}
{"line_number": 346, "line_type": "original", "code": "        iElementPairs.add(printer);", "entropy": 1.32421875, "is_bug_line": false, "sus_score": 0.25722170138424105, "per_token_entropy": [5.4609375, 2.556640625, 0.479248046875, 0.0013437271118164062, 0.005313873291015625, 0.01971435546875, 0.01097869873046875, 3.1875, 0.194091796875], "tokens": [351, 595, 1308, 23020, 32, 669, 26, 21201, 293]}
{"line_number": 346, "line_type": "generated", "code": "\n        return this;\n    }\n\n    /**\n     * Instructs the printer to emit a field value as a decimal number, and the\n     * parser to expect an unsigned decimal number.\n     *\n     * @param fieldType  type of field to append\n     * @", "entropy": 0.07952880859375, "is_bug_line": false, "sus_score": 0.25722170138424105, "per_token_entropy": [0.1641845703125, 0.440185546875, 1.51953125, 0.007232666015625, 0.00827789306640625, 0.00037932395935058594, 0.047698974609375, 0.1060791015625, 0.0004787445068359375, 0.0001289844512939453, 0.02069091796875, 0.000576019287109375, 0.0002117156982421875, 0.002735137939453125, 0.0242919921875, 0.005126953125, 0.0212860107421875, 0.03424072265625, 0.00490570068359375, 0.0711669921875, 0.0706787109375, 0.138427734375, 0.0043182373046875, 0.079833984375, 0.036590576171875, 0.00553131103515625, 0.0016231536865234375, 3.910064697265625e-05, 0.0007648468017578125, 0.0011653900146484375, 0.00601959228515625, 0.2242431640625, 0.0160369873046875, 0.006114959716796875, 0.0014543533325195312, 0.059539794921875, 0.140380859375, 0.00010538101196289062, 0.2177734375, 0.0001068115234375, 0.005237579345703125, 0.00852203369140625, 0.59033203125, 0.0104522705078125, 0.006320953369140625, 0.00042510032653808594, 0.0005307197570800781, 0.0003764629364013672, 0.001667022705078125, 0.02203369140625, 9.906291961669922e-05, 0.00010454654693603516], "tokens": [291, 442, 458, 45, 284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 312, 1600, 786, 619, 312, 10245, 1451, 30, 461, 322, 275, 319, 4118, 372, 1424, 600, 3622, 10245, 1451, 32, 275, 319, 275, 319, 477, 753, 43661, 225, 827, 432, 1600, 372, 5489, 275, 319, 477]}
{"line_number": 347, "line_type": "original", "code": "        iElementPairs.add(parser);", "entropy": 1.953125, "is_bug_line": false, "sus_score": 0.25722170138424105, "per_token_entropy": [4.02734375, 7.31640625, 0.76025390625, 0.004058837890625, 0.01538848876953125, 0.06829833984375, 0.0305938720703125, 5.08203125, 0.275634765625], "tokens": [351, 595, 1308, 23020, 32, 669, 26, 3922, 293]}
{"line_number": 347, "line_type": "generated", "code": "\n        }\n        return append0(new DecimalPrinterParser(fieldType, minDigits, maxDigits, false));\n    }\n\n    /**\n     * Instructs the printer to emit a field value as a decimal number, and the\n     * parser to expect a signed decimal", "entropy": 0.151611328125, "is_bug_line": false, "sus_score": 0.25722170138424105, "per_token_entropy": [0.9501953125, 0.167236328125, 0.1402587890625, 0.5947265625, 0.011474609375, 0.047210693359375, 0.004302978515625, 0.3408203125, 0.576171875, 0.1024169921875, 1.322265625, 0.00395965576171875, 0.10052490234375, 0.00958251953125, 0.07244873046875, 0.0001971721649169922, 0.002384185791015625, 0.046051025390625, 0.006175994873046875, 0.77880859375, 0.69482421875, 0.261962890625, 0.0230560302734375, 0.0002605915069580078, 0.0474853515625, 0.07745361328125, 0.0005125999450683594, 5.8770179748535156e-05, 0.01507568359375, 0.0004451274871826172, 0.00020313262939453125, 0.004383087158203125, 0.0086212158203125, 0.0027713775634765625, 0.01202392578125, 0.023651123046875, 0.00395965576171875, 0.029266357421875, 0.10406494140625, 0.283203125, 0.003665924072265625, 0.111328125, 0.02679443359375, 0.005218505859375, 0.0022640228271484375, 2.4080276489257812e-05, 0.0007772445678710938, 0.0007987022399902344, 0.005619049072265625, 0.69677734375, 0.1356201171875, 0.0240478515625], "tokens": [291, 320, 291, 442, 5489, 34, 26, 890, 23501, 14384, 2825, 26, 34531, 30, 1847, 22326, 30, 1769, 22326, 30, 901, 876, 284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 312, 1600, 786, 619, 312, 10245, 1451, 30, 461, 322, 275, 319, 4118, 372, 1424, 312, 11280, 10245]}
{"line_number": 348, "line_type": "original", "code": "        return this;", "entropy": 2.185546875, "is_bug_line": false, "sus_score": 0.25722170138424105, "per_token_entropy": [5.31640625, 1.7578125, 1.6484375, 0.0219879150390625], "tokens": [351, 442, 458, 45]}
{"line_number": 348, "line_type": "generated", "code": "\n        }\n        return append0(new DecimalPrinterParser(fieldType, minDigits, maxDigits));\n    }\n\n    /**\n     * Instructs the printer to emit a field value as a decimal number, and the\n     * parser to expect an unsigned decimal number.", "entropy": 0.1343994140625, "is_bug_line": false, "sus_score": 0.25722170138424105, "per_token_entropy": [0.8623046875, 0.354248046875, 0.1695556640625, 0.76416015625, 0.014678955078125, 0.0711669921875, 0.0049591064453125, 0.380615234375, 0.63818359375, 0.078857421875, 1.515625, 0.00478363037109375, 0.11981201171875, 0.0126190185546875, 0.07861328125, 0.0002409219741821289, 0.0025787353515625, 0.038299560546875, 0.00689697265625, 0.63427734375, 0.0845947265625, 0.0002624988555908203, 0.12408447265625, 0.1448974609375, 0.0006670951843261719, 4.506111145019531e-05, 0.0243988037109375, 0.0007734298706054688, 0.0002903938293457031, 0.004730224609375, 0.0121307373046875, 0.00634002685546875, 0.0269927978515625, 0.05792236328125, 0.00547027587890625, 0.07305908203125, 0.08477783203125, 0.1737060546875, 0.0037479400634765625, 0.0894775390625, 0.041015625, 0.00693511962890625, 0.0023288726806640625, 3.7670135498046875e-05, 0.0008955001831054688, 0.0009589195251464844, 0.006816864013671875, 0.1693115234375, 0.0162506103515625, 0.007167816162109375, 0.0013284683227539062, 0.0626220703125], "tokens": [291, 320, 291, 442, 5489, 34, 26, 890, 23501, 14384, 2825, 26, 34531, 30, 1847, 22326, 30, 1769, 22326, 876, 284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 312, 1600, 786, 619, 312, 10245, 1451, 30, 461, 322, 275, 319, 4118, 372, 1424, 600, 3622, 10245, 1451, 32]}
{"line_number": 791, "line_type": "original", "code": "        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);", "entropy": 1.2392578125, "is_bug_line": false, "sus_score": 0.2463385478395671, "per_token_entropy": [3.458984375, 9.375, 0.6201171875, 3.580078125, 0.339599609375, 0.0295257568359375, 0.1025390625, 0.000885009765625, 0.00382232666015625, 2.662109375, 0.26220703125, 0.436279296875, 0.006359100341796875, 0.01197052001953125, 0.137451171875, 0.0011644363403320312, 0.041595458984375], "tokens": [351, 442, 5489, 15722, 7697, 26, 4852, 19204, 32, 4548, 1026, 1847, 22326, 30, 1769, 22326, 293]}
{"line_number": 791, "line_type": "generated", "code": "\n     * ---------------------------------------------------------------\n     * 1950      1900..1999      1900    1920    1940    1960    1980\n     * 197", "entropy": 0.04541015625, "is_bug_line": false, "sus_score": 0.2463385478395671, "per_token_entropy": [0.990234375, 0.06646728515625, 0.677734375, 0.00717926025390625, 0.147705078125, 0.00604248046875, 0.0160675048828125, 0.0216217041015625, 0.003818511962890625, 0.0245819091796875, 0.00917816162109375, 0.024993896484375, 0.00833892822265625, 0.050872802734375, 0.056427001953125, 0.046356201171875, 0.0014390945434570312, 0.0023097991943359375, 8.535385131835938e-05, 0.0267791748046875, 0.004924774169921875, 0.006916046142578125, 0.01258087158203125, 0.0051727294921875, 0.036163330078125, 0.0106658935546875, 0.0029315948486328125, 0.0004744529724121094, 0.0004100799560546875, 0.005107879638671875, 0.00015914440155029297, 0.0026683807373046875, 8.428096771240234e-05, 0.0009975433349609375, 0.0009331703186035156, 9.202957153320312e-05, 0.0020465850830078125, 6.711483001708984e-05, 8.809566497802734e-05, 0.0004892349243164062, 9.34600830078125e-05, 0.00554656982421875, 0.00029659271240234375, 9.1552734375e-05, 0.00029754638671875, 6.031990051269531e-05, 0.06378173828125, 0.0005831718444824219, 0.0018587112426757812, 0.004161834716796875, 8.26120376586914e-05, 0.00417327880859375], "tokens": [275, 319, 9529, 12110, 275, 319, 225, 35, 43, 39, 34, 958, 35, 43, 34, 34, 497, 35, 43, 43, 43, 958, 35, 43, 34, 34, 262, 35, 43, 36, 34, 262, 35, 43, 38, 34, 262, 35, 43, 40, 34, 262, 35, 43, 42, 34, 275, 319, 225, 35, 43, 41]}
{"line_number": 408, "line_type": "original", "code": "            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));", "entropy": 0.97900390625, "is_bug_line": false, "sus_score": 0.23923269547533685, "per_token_entropy": [7.60546875, 0.487060546875, 0.46240234375, 0.0567626953125, 0.00334930419921875, 0.0301055908203125, 3.2421875, 1.9788742065429688e-05, 0.0011301040649414062, 0.0026607513427734375, 0.20166015625, 0.00661468505859375, 0.5810546875, 4.482269287109375e-05, 0.09649658203125, 1.4970703125, 0.9775390625, 3.923828125, 0.0166015625, 0.380859375], "tokens": [1468, 442, 5489, 34, 26, 890, 447, 11043, 1918, 26, 34531, 30, 1769, 22326, 30, 901, 30, 1847, 22326, 876]}
{"line_number": 408, "line_type": "generated", "code": "\n        } else {", "entropy": 0.0179901123046875, "is_bug_line": false, "sus_score": 0.23923269547533685, "per_token_entropy": [0.042877197265625, 0.00025010108947753906, 0.013580322265625, 0.0152587890625], "tokens": [291, 320, 813, 301]}
{"line_number": 460, "line_type": "original", "code": "            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));", "entropy": 1.537109375, "is_bug_line": false, "sus_score": 0.2361125344403821, "per_token_entropy": [8.6171875, 0.826171875, 0.02447509765625, 0.1092529296875, 0.005397796630859375, 0.018585205078125, 6.4453125, 0.002071380615234375, 2.255859375, 0.58935546875, 0.4443359375, 0.05657958984375, 3.146484375, 0.2880859375, 0.277099609375, 0.56884765625, 1.7587890625, 4.4453125, 0.46044921875, 0.41748046875], "tokens": [1468, 442, 5489, 34, 26, 890, 447, 11043, 1918, 26, 34531, 30, 1769, 22326, 30, 861, 30, 1847, 22326, 876]}
{"line_number": 460, "line_type": "generated", "code": "\n    public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {", "entropy": 0.0972900390625, "is_bug_line": false, "sus_score": 0.2361125344403821, "per_token_entropy": [0.91064453125, 0.419921875, 0.001506805419921875, 1.5974044799804688e-05, 3.0159950256347656e-05, 0.0004813671112060547, 0.007175445556640625, 7.021427154541016e-05, 0.00030612945556640625, 0.0166778564453125, 2.5987625122070312e-05, 0.000965118408203125, 0.0021820068359375, 0.0025691986083984375], "tokens": [284, 562, 6666, 8736, 1796, 5489, 6872, 1031, 26, 4852, 19204, 43661, 27, 301]}
{"line_number": 448, "line_type": "original", "code": "        if (fieldType == null) {", "entropy": 1.2763671875, "is_bug_line": false, "sus_score": 0.23328473740792172, "per_token_entropy": [4.2734375, 3.81640625, 0.063232421875, 1.689453125, 0.212158203125, 0.056060791015625, 0.0819091796875, 0.01526641845703125], "tokens": [351, 415, 308, 34531, 610, 744, 27, 301]}
{"line_number": 448, "line_type": "generated", "code": "\n        }\n        return append0(new TextPrinter(fieldType));\n    }\n\n    /**\n     * Instructs the printer to emit a field value as text, and the\n     * parser to expect text.\n     *\n     * @param fieldType  type of field to", "entropy": 0.1185302734375, "is_bug_line": false, "sus_score": 0.23328473740792172, "per_token_entropy": [0.399169921875, 0.180908203125, 0.206298828125, 0.2078857421875, 0.00405120849609375, 0.0261993408203125, 0.004486083984375, 0.0772705078125, 0.2303466796875, 0.75146484375, 0.587890625, 0.04644775390625, 0.20361328125, 0.09759521484375, 0.0008492469787597656, 0.1182861328125, 0.049774169921875, 0.0033016204833984375, 8.749961853027344e-05, 0.041259765625, 0.0009946823120117188, 0.00023543834686279297, 0.0158233642578125, 0.034912109375, 0.0278167724609375, 0.02789306640625, 0.0289154052734375, 0.0107574462890625, 0.10003662109375, 0.74169921875, 0.10577392578125, 0.1453857421875, 0.01428985595703125, 0.07159423828125, 4.029273986816406e-05, 0.002166748046875, 0.0011663436889648438, 0.03546142578125, 0.2305908203125, 0.20068359375, 0.1912841796875, 7.617473602294922e-05, 0.286865234375, 0.0001876354217529297, 0.01509857177734375, 0.009796142578125, 0.61328125, 0.004901885986328125, 0.00574493408203125, 0.0004992485046386719, 0.0006060600280761719, 0.0005784034729003906], "tokens": [291, 320, 291, 442, 5489, 34, 26, 890, 3319, 14384, 26, 34531, 876, 284, 320, 446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 312, 1600, 786, 619, 1344, 30, 461, 322, 275, 319, 4118, 372, 1424, 1344, 32, 275, 319, 275, 319, 477, 753, 43661, 225, 827, 432, 1600, 372]}
{"line_number": 451, "line_type": "original", "code": "        if (maxDigits < minDigits) {", "entropy": 1.3984375, "is_bug_line": false, "sus_score": 0.23328473740792172, "per_token_entropy": [5.47265625, 2.1953125, 0.05364990234375, 3.302734375, 0.281494140625, 1.158203125, 1.4462890625, 0.0110015869140625, 0.0540771484375, 0.00777435302734375], "tokens": [351, 415, 308, 1449, 22326, 333, 1847, 22326, 27, 301]}
{"line_number": 451, "line_type": "generated", "code": "\n\n    /**\n     * Instructs the printer to emit a field value as text, and the\n     * parser to expect text.\n     *\n     * @param fieldType  type of field to append\n     * @param parser  parser to use, not null\n     *", "entropy": 0.149169921875, "is_bug_line": false, "sus_score": 0.23328473740792172, "per_token_entropy": [0.59130859375, 0.1309814453125, 0.0049285888671875, 7.927417755126953e-05, 0.0209808349609375, 0.0004546642303466797, 0.00010120868682861328, 0.00887298583984375, 0.03375244140625, 0.017303466796875, 0.0106964111328125, 0.008544921875, 0.00811004638671875, 0.042327880859375, 0.5244140625, 0.09320068359375, 0.1219482421875, 0.006900787353515625, 0.0758056640625, 1.990795135498047e-05, 0.0013561248779296875, 0.0007066726684570312, 0.032012939453125, 0.211669921875, 0.1412353515625, 0.197021484375, 9.369850158691406e-05, 0.388916015625, 4.8995018005371094e-05, 0.010955810546875, 0.00678253173828125, 0.1630859375, 0.00359344482421875, 0.002201080322265625, 1.3470649719238281e-05, 0.000244140625, 0.0002046823501586914, 0.00038743019104003906, 0.011383056640625, 7.712841033935547e-05, 0.0003440380096435547, 0.35888671875, 2.314453125, 0.123291015625, 0.92919921875, 0.07940673828125, 0.113037109375, 0.5966796875, 0.3212890625, 0.0206298828125, 0.0253143310546875, 0.0004749298095703125], "tokens": [446, 1022, 275, 319, 701, 34039, 322, 23307, 372, 9533, 312, 1600, 786, 619, 1344, 30, 461, 322, 275, 319, 4118, 372, 1424, 1344, 32, 275, 319, 275, 319, 477, 753, 43661, 225, 827, 432, 1600, 372, 5489, 275, 319, 477, 753, 4118, 225, 4118, 372, 793, 30, 646, 744, 275, 319]}
{"line_number": 454, "line_type": "original", "code": "        if (minDigits < 0 || maxDigits <= 0) {", "entropy": 1.525390625, "is_bug_line": false, "sus_score": 0.23328473740792172, "per_token_entropy": [3.529296875, 6.89453125, 0.56640625, 1.080078125, 1.7919921875, 2.28515625, 0.10260009765625, 1.416015625, 1.220703125, 0.8349609375, 0.002887725830078125, 3.37109375, 0.201416015625, 0.0161285400390625, 1.08203125, 0.01030731201171875], "tokens": [351, 415, 308, 887, 22326, 333, 225, 34, 1276, 1769, 22326, 2511, 225, 34, 27, 301]}
{"line_number": 454, "line_type": "generated", "code": "\n     * parser to expect short text.\n     *\n     * @param fieldType  type of field to append\n     * @return this DateTimeFormatterBuilder, for chaining\n     * @throws IllegalArgumentException if field type is null\n     */\n    public DateTimeFormatterBuilder appendShortText", "entropy": 0.04730224609375, "is_bug_line": false, "sus_score": 0.23328473740792172, "per_token_entropy": [0.654296875, 0.002956390380859375, 0.029815673828125, 0.001262664794921875, 0.0032253265380859375, 0.39697265625, 0.00605010986328125, 0.046539306640625, 0.2529296875, 0.00164794921875, 0.455078125, 0.00020229816436767578, 0.0234375, 0.006252288818359375, 0.004795074462890625, 0.00299072265625, 0.0022068023681640625, 0.00021314620971679688, 0.00024437904357910156, 0.0002028942108154297, 0.0003535747528076172, 0.005645751953125, 0.00011336803436279297, 0.0004482269287109375, 0.21142578125, 0.0011014938354492188, 0.0005731582641601562, 5.9485435485839844e-05, 0.00010669231414794922, 4.9233436584472656e-05, 1.621246337890625e-05, 0.0004000663757324219, 0.00298309326171875, 0.005252838134765625, 0.00048804283142089844, 0.006740570068359375, 0.00020432472229003906, 0.00024008750915527344, 0.003185272216796875, 0.0002046823501586914, 0.0003521442413330078, 0.00022017955780029297, 0.0244293212890625, 0.27001953125, 0.024932861328125, 0.0029201507568359375, 0.0001881122589111328, 6.127357482910156e-05, 4.172325134277344e-06, 0.000339508056640625, 0.003875732421875, 4.4465065002441406e-05], "tokens": [275, 319, 4118, 372, 1424, 4504, 1344, 32, 275, 319, 275, 319, 477, 753, 43661, 225, 827, 432, 1600, 372, 5489, 275, 319, 477, 601, 458, 6666, 8736, 1796, 30, 436, 38009, 275, 319, 477, 5117, 12137, 415, 1600, 827, 438, 744, 275, 569, 284, 562, 6666, 8736, 1796, 5489, 6872, 1031]}
{"line_number": 457, "line_type": "original", "code": "        if (minDigits <= 1) {", "entropy": 1.900390625, "is_bug_line": false, "sus_score": 0.23328473740792172, "per_token_entropy": [2.11328125, 2.029296875, 0.09246826171875, 3.669921875, 2.2890625, 3.009765625, 0.035369873046875, 5.1953125, 0.54833984375, 0.023773193359375], "tokens": [351, 415, 308, 887, 22326, 2511, 225, 35, 27, 301]}
{"line_number": 457, "line_type": "generated", "code": "\n     * @return this DateTimeFormatterBuilder, for chaining\n     * @throws IllegalArgumentException if field type is null\n     */\n    public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"Field type", "entropy": 0.03717041015625, "is_bug_line": false, "sus_score": 0.23328473740792172, "per_token_entropy": [0.89208984375, 0.12152099609375, 0.01395416259765625, 0.192138671875, 0.00165557861328125, 0.0011358261108398438, 6.103515625e-05, 9.417533874511719e-05, 0.0001163482666015625, 2.6106834411621094e-05, 6.35385513305664e-05, 0.051177978515625, 0.02191162109375, 0.0011663436889648438, 0.016448974609375, 0.00041174888610839844, 0.0003135204315185547, 0.004669189453125, 0.0004153251647949219, 0.0008382797241210938, 0.0002651214599609375, 0.07464599609375, 0.392333984375, 0.040252685546875, 0.00384521484375, 0.0002579689025878906, 6.0677528381347656e-05, 5.7220458984375e-06, 0.00017940998077392578, 0.004047393798828125, 6.186962127685547e-05, 2.86102294921875e-05, 0.00794219970703125, 8.225440979003906e-06, 9.775161743164062e-05, 0.0012426376342773438, 0.0011272430419921875, 0.06591796875, 0.01151275634765625, 0.0001074075698852539, 0.0002244710922241211, 4.6372413635253906e-05, 0.0017948150634765625, 9.500980377197266e-05, 0.00011599063873291016, 0.00566864013671875, 0.0003693103790283203, 7.152557373046875e-07, 7.176399230957031e-05, 0.0011644363403320312, 0.0003390312194824219, 3.2901763916015625e-05], "tokens": [275, 319, 477, 601, 458, 6666, 8736, 1796, 30, 436, 38009, 275, 319, 477, 5117, 12137, 415, 1600, 827, 438, 744, 275, 569, 284, 562, 6666, 8736, 1796, 5489, 6872, 1031, 26, 4852, 19204, 43661, 27, 301, 291, 415, 308, 34531, 610, 744, 27, 301, 324, 1422, 537, 12137, 440, 1176, 827]}
{"line_number": 396, "line_type": "original", "code": "        if (fieldType == null) {", "entropy": 1.4189453125, "is_bug_line": false, "sus_score": 0.2253744679276044, "per_token_entropy": [6.875, 2.064453125, 0.02044677734375, 2.328125, 0.02252197265625, 0.0029315948486328125, 0.00896453857421875, 0.0292205810546875], "tokens": [351, 415, 308, 34531, 610, 744, 27, 301]}
{"line_number": 396, "line_type": "generated", "code": "\n        throw new IllegalArgumentException(\"Field type must not be null\");\n    }\n    if (maxDigits < minDigits) {\n        maxDigits = minDigits;\n    }\n    if (minDigits < 0 || maxDigits <= 0) {\n        throw new", "entropy": 0.06597900390625, "is_bug_line": false, "sus_score": 0.2253744679276044, "per_token_entropy": [1.568359375, 0.343994140625, 7.462501525878906e-05, 0.0006499290466308594, 0.02008056640625, 0.002971649169921875, 0.0004925727844238281, 0.00022101402282714844, 0.0002913475036621094, 3.4570693969726562e-06, 5.984306335449219e-05, 0.0005145072937011719, 0.09332275390625, 0.00223541259765625, 0.97802734375, 0.1092529296875, 0.0033111572265625, 0.0831298828125, 0.00024628639221191406, 0.005138397216796875, 0.0018825531005859375, 0.00020706653594970703, 0.0011444091796875, 0.0019102096557617188, 0.028656005859375, 0.0024662017822265625, 2.9206275939941406e-05, 0.00011968612670898438, 0.00027871131896972656, 3.814697265625e-06, 0.0010280609130859375, 0.00980377197265625, 0.00020945072174072266, 0.016326904296875, 0.005222320556640625, 0.0005626678466796875, 0.005748748779296875, 9.822845458984375e-05, 0.033294677734375, 0.0004687309265136719, 0.057464599609375, 0.0087738037109375, 0.0015306472778320312, 1.9073486328125e-06, 0.028076171875, 0.0001577138900756836, 0.00028133392333984375, 0.0030918121337890625, 0.003688812255859375, 0.004970550537109375, 0.001079559326171875, 0.00011157989501953125], "tokens": [291, 1422, 537, 12137, 440, 1176, 827, 2298, 646, 526, 744, 724, 284, 320, 284, 415, 308, 1449, 22326, 333, 1847, 22326, 27, 301, 291, 1769, 22326, 280, 1847, 22326, 45, 284, 320, 284, 415, 308, 887, 22326, 333, 225, 34, 1276, 1769, 22326, 2511, 225, 34, 27, 301, 291, 1422, 537]}
{"line_number": 399, "line_type": "original", "code": "        if (maxDigits < minDigits) {", "entropy": 1.3876953125, "is_bug_line": false, "sus_score": 0.2253744679276044, "per_token_entropy": [6.9375, 2.8203125, 0.01338958740234375, 2.0859375, 0.001216888427734375, 1.580078125, 0.40380859375, 0.0001685619354248047, 0.030487060546875, 0.005207061767578125], "tokens": [351, 415, 308, 1449, 22326, 333, 1847, 22326, 27, 301]}
{"line_number": 399, "line_type": "generated", "code": "\n            maxDigits = minDigits;\n        }\n        if (minDigits < 0 || maxDigits <= 0) {\n            throw new IllegalArgumentException();\n        }\n        if (minDigits <= 1) {\n            return append0(new UnpaddedNumber(", "entropy": 0.0159454345703125, "is_bug_line": false, "sus_score": 0.2253744679276044, "per_token_entropy": [0.266357421875, 0.06988525390625, 8.153915405273438e-05, 0.0005636215209960938, 0.0146942138671875, 0.00041413307189941406, 0.0067291259765625, 0.01267242431640625, 0.0002903938293457031, 0.0174560546875, 0.018951416015625, 0.00030875205993652344, 0.0027256011962890625, 1.1801719665527344e-05, 0.031524658203125, 0.0010890960693359375, 0.0540771484375, 0.00360870361328125, 0.0030269622802734375, 8.344650268554688e-07, 0.07464599609375, 0.00041365623474121094, 0.0005908012390136719, 0.0038661956787109375, 0.006687164306640625, 0.07464599609375, 0.0014448165893554688, 6.4849853515625e-05, 0.0003116130828857422, 0.0241851806640625, 0.018218994140625, 4.9591064453125e-05, 0.01296234130859375, 0.02215576171875, 0.0002696514129638672, 0.0069427490234375, 4.57763671875e-05, 0.01302337646484375, 0.00033974647521972656, 0.007568359375, 0.0028553009033203125, 0.00011074542999267578, 0.028839111328125, 0.00391387939453125, 9.799003601074219e-05, 0.0004591941833496094, 0.0002199411392211914, 0.0006051063537597656, 0.0179443359375, 9.882450103759766e-05, 0.0008611679077148438, 0.00015020370483398438], "tokens": [324, 1769, 22326, 280, 1847, 22326, 45, 291, 320, 291, 415, 308, 887, 22326, 333, 225, 34, 1276, 1769, 22326, 2511, 225, 34, 27, 301, 324, 1422, 537, 12137, 473, 291, 320, 291, 415, 308, 887, 22326, 2511, 225, 35, 27, 301, 324, 442, 5489, 34, 26, 890, 1683, 34294, 1918, 26]}
