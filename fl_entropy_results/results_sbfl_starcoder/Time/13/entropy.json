{"line_number": 500, "line_type": "original", "code": "        appendField(SECONDS_OPTIONAL_MILLIS);", "entropy": 1.91796875, "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [3.64453125, 2.7578125, 2.185546875, 2.6875, 4.5546875, 1.6708984375, 4.3125, 0.228515625, 0.167236328125, 4.494190216064453e-05, 2.5033950805664062e-06, 0.8056640625], "tokens": [351, 5489, 1176, 26, 18382, 81, 41143, 81, 63, 13142, 1296, 293]}
{"line_number": 500, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [], "tokens": []}
{"line_number": 501, "line_type": "original", "code": "        return this;", "entropy": 1.865234375, "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [5.14453125, 2.12109375, 0.173095703125, 0.0207061767578125], "tokens": [351, 442, 458, 45]}
{"line_number": 501, "line_type": "generated", "code": "\n    public PeriodFormatterBuilder appendSuffix(String text) {\n        if (iFieldFormatters[iFieldFormatters.length - 1] == null) {\n            throw new IllegalStateException(\"No field to append suffix to\");\n        }\n        append0(", "entropy": 0.1383056640625, "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [0.33349609375, 0.1998291015625, 0.032073974609375, 0.0036220550537109375, 0.00047707557678222656, 0.0003962516784667969, 0.0009374618530273438, 0.0028076171875, 0.00713348388671875, 0.0271759033203125, 0.002918243408203125, 0.00954437255859375, 0.09967041015625, 0.79345703125, 0.017669677734375, 0.0908203125, 0.22705078125, 0.029388427734375, 1.7881393432617188e-05, 0.2186279296875, 0.2156982421875, 0.4111328125, 0.70556640625, 0.0005216598510742188, 0.02850341796875, 0.0003173351287841797, 0.051544189453125, 0.00653076171875, 0.00406646728515625, 0.0135040283203125, 0.053009033203125, 0.002040863037109375, 0.0111846923828125, 0.0008955001831054688, 0.0316162109375, 0.041961669921875, 0.002651214599609375, 0.00896453857421875, 0.2060546875, 0.267578125, 0.08172607421875, 0.74560546875, 0.2069091796875, 0.483642578125, 0.022735595703125, 0.050445556640625, 0.039825439453125, 0.0002627372741699219, 0.10028076171875, 1.080078125, 0.20751953125, 0.01267242431640625], "tokens": [284, 562, 24156, 8736, 1796, 5489, 14059, 26, 652, 1344, 27, 301, 291, 415, 308, 91, 1176, 2207, 5725, 77, 91, 1176, 2207, 5725, 32, 1322, 429, 225, 35, 79, 610, 744, 27, 301, 324, 1422, 537, 21665, 440, 2023, 1600, 372, 5489, 12809, 372, 724, 291, 320, 291, 5489, 34, 26]}
{"line_number": 555, "line_type": "original", "code": "        return appendSuffix(new SimpleAffix(text));", "entropy": 1.9892578125, "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [3.853515625, 1.423828125, 4.35546875, 2.583984375, 0.564453125, 2.939453125, 3.712890625, 0.049560546875, 4.291534423828125e-06, 0.040771484375, 3.556640625, 0.79931640625], "tokens": [351, 442, 5489, 14059, 26, 890, 7155, 14321, 782, 26, 878, 876]}
{"line_number": 555, "line_type": "generated", "code": "\n        return this;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Append a prefix to the printed and parsed period.\n     * <p>\n     * The prefix is printed before the first field, and parsed before any\n     * fields.\n     *\n     * @", "entropy": 0.51611328125, "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [0.7255859375, 0.48828125, 0.019012451171875, 0.0010128021240234375, 0.020721435546875, 0.0004830360412597656, 0.1676025390625, 0.62353515625, 0.005382537841796875, 0.018280029296875, 0.02685546875, 0.0015382766723632812, 2.3603439331054688e-05, 0.673828125, 0.34521484375, 1.1650390625, 0.8037109375, 0.356201171875, 2.353515625, 1.3447265625, 0.0176239013671875, 2.419921875, 0.53515625, 0.466552734375, 0.0006518363952636719, 0.161865234375, 0.0012960433959960938, 0.0006670951843261719, 0.00010669231414794922, 3.218650817871094e-05, 1.1455078125, 0.55810546875, 0.75, 0.74365234375, 0.80810546875, 1.19140625, 0.48193359375, 0.165283203125, 1.13671875, 0.52978515625, 1.3017578125, 0.951171875, 1.2333984375, 0.6669921875, 4.374980926513672e-05, 0.93798828125, 0.15966796875, 0.92529296875, 0.0004410743713378906, 0.417236328125, 1.1563301086425781e-05, 0.0025615692138671875], "tokens": [291, 442, 458, 45, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 20593, 312, 5202, 372, 322, 21440, 461, 8436, 7918, 32, 275, 319, 333, 98, 48, 275, 319, 886, 5202, 438, 21440, 2670, 322, 1932, 1600, 30, 461, 8436, 2670, 1346, 275, 319, 3829, 32, 275, 319, 275, 319, 477]}
{"line_number": 652, "line_type": "original", "code": "        return appendSeparator(text, text, null, false, true);", "entropy": 1.1337890625, "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [4.40625, 7.94921875, 0.5791015625, 0.00432586669921875, 0.00988006591796875, 0.021942138671875, 0.006500244140625, 0.4765625, 0.01367950439453125, 0.096435546875, 0.01288604736328125, 3.12109375, 0.08892822265625, 0.2044677734375, 0.006862640380859375], "tokens": [351, 442, 5489, 11145, 26, 878, 30, 1344, 30, 744, 30, 901, 30, 861, 293]}
{"line_number": 652, "line_type": "generated", "code": "\n     * and after the separator.\n     * <p>\n     * This method changes the separator depending on whether it is the last separator\n     * to be output.\n     * <p>\n     * For example,\n     * <code>builder.appendDays", "entropy": 0.0855712890625, "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [1.1474609375, 0.00469970703125, 0.685546875, 0.0109100341796875, 0.004791259765625, 0.001220703125, 0.03887939453125, 0.06500244140625, 0.00018858909606933594, 0.0202178955078125, 0.0004436969757080078, 0.00025343894958496094, 0.006801605224609375, 9.5367431640625e-05, 0.1680908203125, 0.00677490234375, 0.042816162109375, 0.0006132125854492188, 0.00946044921875, 0.00643157958984375, 0.0008320808410644531, 0.0054473876953125, 0.036773681640625, 0.0014047622680664062, 0.00844573974609375, 0.036285400390625, 0.00858306884765625, 0.0180206298828125, 2.4199485778808594e-05, 0.0028285980224609375, 0.00014388561248779297, 0.0017795562744140625, 0.037689208984375, 0.033477783203125, 7.474422454833984e-05, 0.01444244384765625, 0.00010466575622558594, 0.0007457733154296875, 0.0025463104248046875, 4.947185516357422e-05, 0.1239013671875, 0.00016379356384277344, 0.002010345458984375, 1.689453125, 0.002628326416015625, 0.0208587646484375, 0.020660400390625, 0.00226593017578125, 0.07672119140625, 0.003292083740234375, 0.00246429443359375, 0.0753173828125], "tokens": [275, 319, 461, 2685, 322, 17584, 32, 275, 319, 333, 98, 48, 275, 319, 1348, 1411, 3404, 322, 17584, 14714, 544, 4946, 561, 438, 322, 2401, 17584, 275, 319, 372, 526, 1688, 32, 275, 319, 333, 98, 48, 275, 319, 2616, 2280, 30, 275, 319, 333, 687, 48, 4164, 32, 1689, 11946]}
{"line_number": 552, "line_type": "original", "code": "        if (text == null) {", "entropy": 2.49609375, "is_bug_line": false, "sus_score": 0.18569533817705186, "per_token_entropy": [8.4140625, 4.1484375, 0.0931396484375, 6.88671875, 0.1668701171875, 0.0036678314208984375, 0.1759033203125, 0.08038330078125], "tokens": [351, 415, 308, 878, 610, 744, 27, 301]}
{"line_number": 552, "line_type": "generated", "code": "\n            throw new IllegalArgumentException();\n        }\n        FieldFormatter field = (FieldFormatter) originalPrinter;\n        field.setSuffix(suffix);\n        return this;\n    }\n\n    /**\n     * Append a prefix to the entire period, which will be printed before any\n    ", "entropy": 0.41015625, "is_bug_line": false, "sus_score": 0.18569533817705186, "per_token_entropy": [0.31591796875, 0.221923828125, 0.0015077590942382812, 0.458740234375, 0.099609375, 0.02520751953125, 0.0001856088638305664, 0.5654296875, 0.33251953125, 0.00344085693359375, 0.93994140625, 0.08807373046875, 0.0192718505859375, 0.0002837181091308594, 0.0002244710922241211, 0.0004210472106933594, 0.0675048828125, 0.0406494140625, 0.0002148151397705078, 0.1832275390625, 0.6123046875, 0.0819091796875, 0.34765625, 0.1787109375, 0.1025390625, 0.0231781005859375, 0.033966064453125, 0.10546875, 0.256103515625, 0.0028705596923828125, 0.00034546852111816406, 0.041778564453125, 0.00273895263671875, 0.09136962890625, 1.123046875, 0.004123687744140625, 3.457069396972656e-05, 0.55859375, 0.28466796875, 1.0654296875, 0.9306640625, 0.381103515625, 2.9140625, 1.634765625, 1.82421875, 1.7685546875, 1.6240234375, 0.53515625, 0.291748046875, 0.6171875, 0.451416015625, 0.07012939453125], "tokens": [324, 1422, 537, 12137, 473, 291, 320, 291, 5692, 8736, 1600, 280, 308, 1176, 8736, 27, 4707, 14384, 45, 291, 1600, 32, 470, 14059, 26, 12420, 293, 291, 442, 458, 45, 284, 320, 446, 1022, 275, 319, 20593, 312, 5202, 372, 322, 9449, 7918, 30, 1510, 1098, 526, 21440, 2670, 1346, 275]}
{"line_number": 592, "line_type": "original", "code": "            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);", "entropy": 0.98193359375, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [8.3359375, 7.1015625, 0.70166015625, 0.1778564453125, 0.108642578125, 0.01149749755859375, 0.0008063316345214844, 0.0036640167236328125, 0.040496826171875, 0.00170135498046875, 0.0218353271484375, 0.0018024444580078125, 6.35385513305664e-05, 0.0005278587341308594, 0.0018873214721679688, 0.005474090576171875, 0.0025787353515625, 0.006683349609375, 3.095703125, 0.01421356201171875], "tokens": [1468, 4707, 14384, 280, 595, 1308, 23020, 32, 371, 26, 91, 1308, 23020, 32, 891, 346, 429, 225, 36, 293]}
{"line_number": 592, "line_type": "generated", "code": "\n     * The text will be parsed case-insensitively.\n     * <p>\n     * Note: appending a separator discontinues any further work on the latest\n     * appended field.\n     *\n     * @param text  the text to", "entropy": 0.0236663818359375, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [0.2890625, 0.0025234222412109375, 0.20263671875, 0.0927734375, 0.0162506103515625, 0.002063751220703125, 0.0097198486328125, 0.00815582275390625, 0.001995086669921875, 0.013824462890625, 0.0012655258178710938, 6.794929504394531e-06, 0.09033203125, 0.0296630859375, 6.961822509765625e-05, 0.0711669921875, 0.0003707408905029297, 0.00029397010803222656, 0.0298614501953125, 1.5616416931152344e-05, 0.03143310546875, 0.003086090087890625, 0.00882720947265625, 9.059906005859375e-06, 0.0016756057739257812, 0.0011386871337890625, 0.006343841552734375, 0.00015032291412353516, 3.528594970703125e-05, 1.9073486328125e-06, 0.0003802776336669922, 0.0009722709655761719, 0.00016021728515625, 9.059906005859375e-05, 0.0006771087646484375, 0.0015115737915039062, 0.00377655029296875, 9.5367431640625e-06, 0.00112152099609375, 0.00033974647521972656, 0.0019893646240234375, 0.0088958740234375, 0.0003364086151123047, 0.0328369140625, 8.082389831542969e-05, 0.001895904541015625, 0.057159423828125, 0.07305908203125, 0.115234375, 0.00910186767578125, 0.003818511962890625, 0.0024929046630859375], "tokens": [275, 319, 886, 1344, 1098, 526, 8436, 1135, 31, 2372, 18701, 8608, 32, 275, 319, 333, 98, 48, 275, 319, 5830, 44, 1123, 4013, 312, 17584, 1214, 666, 266, 1032, 1346, 9686, 1389, 544, 322, 6615, 275, 319, 22363, 1600, 32, 275, 319, 275, 319, 477, 753, 1344, 225, 322, 1344, 372]}
{"line_number": 593, "line_type": "original", "code": "            originalParser = iElementPairs.get(iElementPairs.size() - 1);", "entropy": 1.072265625, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [8.2890625, 8.234375, 3.171875, 0.468994140625, 0.599609375, 0.0266571044921875, 0.0020084381103515625, 0.004650115966796875, 0.070068359375, 0.0028400421142578125, 0.037353515625, 0.0035400390625, 0.00015485286712646484, 0.0014133453369140625, 0.0014467239379882812, 0.0097808837890625, 0.00543212890625, 0.00939178466796875, 0.462890625, 0.04754638671875], "tokens": [1468, 4707, 2825, 280, 595, 1308, 23020, 32, 371, 26, 91, 1308, 23020, 32, 891, 346, 429, 225, 35, 293]}
{"line_number": 593, "line_type": "generated", "code": "\n     * Note: appending a separator discontinues any further work on the latest\n     * appended field.\n     *\n     * @param text  the text to use as a separator\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if", "entropy": 0.05517578125, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [0.118896484375, 0.00543212890625, 2.029296875, 0.00965118408203125, 0.01293182373046875, 8.940696716308594e-06, 0.001903533935546875, 0.0017805099487304688, 0.006656646728515625, 0.0002129077911376953, 3.4332275390625e-05, 1.0728836059570312e-06, 0.0004763603210449219, 0.001117706298828125, 0.0002130270004272461, 0.00014984607696533203, 0.0007367134094238281, 0.0022296905517578125, 0.01018524169921875, 0.00011849403381347656, 0.0013856887817382812, 0.00038433074951171875, 0.003265380859375, 0.029815673828125, 0.00199127197265625, 0.050872802734375, 0.0002903938293457031, 0.003643035888671875, 0.04327392578125, 0.07122802734375, 0.1295166015625, 0.00994873046875, 0.0038127899169921875, 0.002750396728515625, 0.00623321533203125, 0.0074920654296875, 0.00659942626953125, 0.004688262939453125, 0.1431884765625, 7.581710815429688e-05, 0.0003802776336669922, 0.1143798828125, 0.0013093948364257812, 0.00041031837463378906, 0.00012826919555664062, 0.00010311603546142578, 0.00725555419921875, 0.008636474609375, 0.00020682811737060547, 0.006366729736328125, 0.00756072998046875, 0.00084686279296875], "tokens": [275, 319, 5830, 44, 1123, 4013, 312, 17584, 1214, 666, 266, 1032, 1346, 9686, 1389, 544, 322, 6615, 275, 319, 22363, 1600, 32, 275, 319, 275, 319, 477, 753, 1344, 225, 322, 1344, 372, 793, 619, 312, 17584, 275, 319, 477, 601, 458, 24156, 8736, 1796, 275, 319, 477, 5117, 21665, 415]}
{"line_number": 605, "line_type": "original", "code": "        clearPrefix();", "entropy": 5.84375, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [6.5, 11.5546875, 4.609375, 0.708984375], "tokens": [351, 4233, 5419, 473]}
{"line_number": 605, "line_type": "generated", "code": "\n    /**\n     * Append a separator, which is output if fields are printed both before\n     * and after the separator.\n     * <p>\n     * For example,\n     * <code>builder.appendDays().appendSeparator(\" to \", \" and \",", "entropy": 0.19091796875, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [0.412841796875, 0.249267578125, 0.018218994140625, 6.377696990966797e-05, 0.10699462890625, 0.0212249755859375, 0.050537109375, 0.1805419921875, 0.0302581787109375, 0.0318603515625, 0.0208740234375, 1.1162109375, 0.0308380126953125, 0.004787445068359375, 0.0212860107421875, 0.263427734375, 0.004711151123046875, 0.114501953125, 1.633167266845703e-05, 0.0140380859375, 0.0014801025390625, 0.00518035888671875, 0.001537322998046875, 0.08843994140625, 0.08502197265625, 3.802776336669922e-05, 0.022369384765625, 0.00021326541900634766, 0.0005793571472167969, 0.00044035911560058594, 1.609325408935547e-05, 0.1668701171875, 0.00040602684020996094, 0.0008602142333984375, 1.296875, 0.0007305145263671875, 0.007595062255859375, 0.00830841064453125, 0.00139617919921875, 0.0263214111328125, 0.001964569091796875, 0.004608154296875, 0.047454833984375, 0.00856781005859375, 0.003139495849609375, 0.01141357421875, 1.421875, 2.19921875, 0.53564453125, 0.5185546875, 0.5419921875, 0.22802734375], "tokens": [284, 1022, 275, 319, 20593, 312, 17584, 30, 1510, 438, 1688, 415, 3829, 884, 21440, 4335, 2670, 275, 319, 461, 2685, 322, 17584, 32, 275, 319, 333, 98, 48, 275, 319, 2616, 2280, 30, 275, 319, 333, 687, 48, 4164, 32, 1689, 11946, 922, 1689, 11145, 440, 372, 3003, 313, 461, 3003]}
{"line_number": 606, "line_type": "original", "code": "        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);", "entropy": 1.51171875, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [5.39453125, 6.16015625, 0.489013671875, 1.7822265625, 0.1231689453125, 0.07977294921875, 0.5595703125, 0.57373046875, 0.0268707275390625, 5.93359375, 0.180419921875, 0.1514892578125, 0.0195465087890625, 0.765625, 0.35205078125, 0.1361083984375, 3.822265625, 0.65283203125], "tokens": [351, 5692, 8736, 537, 1176, 280, 537, 5692, 8736, 1162, 1176, 8736, 27, 4707, 14384, 30, 12809, 293]}
{"line_number": 606, "line_type": "generated", "code": "\n     * Append a separator, which is output only if fields are printed before the separator.\n     * <p>\n     * For example,\n     * <code>builder.appendDays().appendSeparatorIfFieldsBefore(\",\").appendHours()</code>\n     *", "entropy": 0.040252685546875, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [0.47509765625, 0.11993408203125, 0.2374267578125, 0.01412200927734375, 0.0258941650390625, 0.1337890625, 0.0186614990234375, 0.0222320556640625, 0.0190277099609375, 0.2822265625, 0.0027103424072265625, 0.00914764404296875, 0.0017595291137695312, 0.006206512451171875, 0.05450439453125, 0.06390380859375, 0.03155517578125, 0.013275146484375, 0.0164337158203125, 0.001209259033203125, 0.0179595947265625, 0.00034046173095703125, 0.00046253204345703125, 0.0142364501953125, 3.826618194580078e-05, 0.03985595703125, 0.00011706352233886719, 0.0012884140014648438, 0.0491943359375, 0.0002789497375488281, 0.0034332275390625, 0.0029296875, 0.0004181861877441406, 0.0034503936767578125, 0.0004818439483642578, 0.0003230571746826172, 0.0621337890625, 0.0109405517578125, 0.0012311935424804688, 0.00215911865234375, 0.04693603515625, 0.0010395050048828125, 0.263671875, 0.00537109375, 0.0003757476806640625, 0.00027441978454589844, 0.0095062255859375, 0.00438690185546875, 4.839897155761719e-05, 0.0003685951232910156, 0.0017719268798828125, 3.695487976074219e-05], "tokens": [275, 319, 20593, 312, 17584, 30, 1510, 438, 1688, 1755, 415, 3829, 884, 21440, 2670, 322, 17584, 32, 275, 319, 333, 98, 48, 275, 319, 2616, 2280, 30, 275, 319, 333, 687, 48, 4164, 32, 1689, 11946, 922, 1689, 11145, 2797, 4140, 5658, 46508, 547, 1689, 14896, 11048, 687, 48, 275, 319]}
{"line_number": 607, "line_type": "original", "code": "        iElementPairs.set(iElementPairs.size() - 2, newField);", "entropy": 0.94677734375, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [4.41015625, 4.984375, 1.171875, 0.0196380615234375, 0.0399169921875, 0.7607421875, 0.0085296630859375, 0.0408935546875, 0.00942230224609375, 0.00014472007751464844, 0.0011043548583984375, 0.0016355514526367188, 0.01427459716796875, 0.0031414031982421875, 0.0127716064453125, 2.166015625, 0.00750732421875, 0.89892578125, 4.375, 0.01026153564453125], "tokens": [351, 595, 1308, 23020, 32, 470, 26, 91, 1308, 23020, 32, 891, 346, 429, 225, 36, 30, 537, 1176, 293]}
{"line_number": 607, "line_type": "generated", "code": "\n     * <p>\n     * For example,\n     * <code>builder.appendDays().appendSeparatorIfFieldsBefore(\",\").appendHours()</code>\n     * will only output the comma if the days fields is output.\n     * <p>\n    ", "entropy": 0.04290771484375, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [0.1964111328125, 0.0012807846069335938, 0.358642578125, 0.003787994384765625, 0.0003712177276611328, 0.07305908203125, 3.802776336669922e-05, 0.1873779296875, 0.0001596212387084961, 0.0020389556884765625, 0.1295166015625, 0.000362396240234375, 0.0049896240234375, 0.00506591796875, 0.0005855560302734375, 0.0042572021484375, 0.0005536079406738281, 0.0003800392150878906, 0.04705810546875, 0.0129852294921875, 0.001422882080078125, 0.0021648406982421875, 0.10675048828125, 0.00095367431640625, 0.38818359375, 0.0077362060546875, 0.0005640983581542969, 0.0003120899200439453, 0.00893402099609375, 0.00664520263671875, 3.516674041748047e-05, 0.0007977485656738281, 0.0033016204833984375, 3.0875205993652344e-05, 0.0019445419311523438, 0.0032501220703125, 0.0004837512969970703, 0.0006875991821289062, 0.0007915496826171875, 0.002323150634765625, 0.00974273681640625, 0.080322265625, 0.5234375, 0.00749969482421875, 0.01528167724609375, 0.006816864013671875, 0.0112762451171875, 0.00020313262939453125, 0.00494384765625, 0.00014543533325195312, 3.457069396972656e-05, 0.00420379638671875], "tokens": [275, 319, 333, 98, 48, 275, 319, 2616, 2280, 30, 275, 319, 333, 687, 48, 4164, 32, 1689, 11946, 922, 1689, 11145, 2797, 4140, 5658, 46508, 547, 1689, 14896, 11048, 687, 48, 275, 319, 1098, 1755, 1688, 322, 18231, 415, 322, 6935, 3829, 438, 1688, 32, 275, 319, 333, 98, 48, 275]}
{"line_number": 608, "line_type": "original", "code": "        iElementPairs.set(iElementPairs.size() - 1, newField);", "entropy": 1.03515625, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [5.703125, 4.50390625, 1.701171875, 0.018157958984375, 0.06396484375, 1.2138671875, 0.01367950439453125, 0.05328369140625, 0.01495361328125, 0.0005674362182617188, 0.001743316650390625, 0.0013294219970703125, 0.016510009765625, 0.0032939910888671875, 0.015899658203125, 0.712890625, 0.00887298583984375, 1.150390625, 5.4765625, 0.02178955078125], "tokens": [351, 595, 1308, 23020, 32, 470, 26, 91, 1308, 23020, 32, 891, 346, 429, 225, 35, 30, 537, 1176, 293]}
{"line_number": 608, "line_type": "generated", "code": "\n     * For example,\n     * <code>builder.appendDays().appendSeparatorIfFieldsBefore(\",\").appendHours()</code>\n     * will only output the comma if the days fields is output.\n     * <p>\n     * The text will be", "entropy": 0.037628173828125, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [0.2900390625, 0.0014476776123046875, 0.2091064453125, 0.00023794174194335938, 0.0025882720947265625, 0.198486328125, 0.0003199577331542969, 0.0101776123046875, 0.0069122314453125, 0.001453399658203125, 0.00550079345703125, 0.0010843276977539062, 0.0005369186401367188, 0.0501708984375, 0.0148162841796875, 0.002208709716796875, 0.002437591552734375, 0.05328369140625, 0.0015439987182617188, 0.354248046875, 0.00835418701171875, 0.0006580352783203125, 0.0003437995910644531, 0.0090789794921875, 0.0069732666015625, 6.973743438720703e-05, 0.001399993896484375, 0.01015472412109375, 6.568431854248047e-05, 0.0028896331787109375, 0.003658294677734375, 0.000537872314453125, 0.0007557868957519531, 0.000888824462890625, 0.002475738525390625, 0.0103912353515625, 0.08917236328125, 0.499755859375, 0.00751495361328125, 0.01971435546875, 0.0079345703125, 0.01345062255859375, 0.00030732154846191406, 0.00806427001953125, 0.00031495094299316406, 0.00046372413635253906, 0.0288543701171875, 1.1682510375976562e-05, 0.0129241943359375, 0.0019664764404296875, 0.0013446807861328125, 0.00021529197692871094], "tokens": [275, 319, 2616, 2280, 30, 275, 319, 333, 687, 48, 4164, 32, 1689, 11946, 922, 1689, 11145, 2797, 4140, 5658, 46508, 547, 1689, 14896, 11048, 687, 48, 275, 319, 1098, 1755, 1688, 322, 18231, 415, 322, 6935, 3829, 438, 1688, 32, 275, 319, 333, 98, 48, 275, 319, 886, 1344, 1098, 526]}
{"line_number": 609, "line_type": "original", "code": "        iFieldFormatters[newField.getFieldType()] = newField;", "entropy": 2.6953125, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [5.41796875, 6.71484375, 7.8359375, 5.7109375, 0.06390380859375, 2.90625, 7.359375, 1.625, 3.111328125, 1.14453125, 0.035430908203125, 1.0107421875, 0.0304412841796875, 0.0687255859375, 0.0080108642578125, 0.08770751953125], "tokens": [351, 595, 1176, 2207, 5725, 77, 890, 1176, 32, 18269, 620, 7662, 280, 537, 1176, 45]}
{"line_number": 609, "line_type": "generated", "code": "\n     * <code>builder.appendDays().appendSeparatorIfFieldsBefore(\",\").appendHours()</code>\n     * will only output the comma if the days fields is output.\n     * <p>\n     * The text will be parsed case-insensit", "entropy": 0.05303955078125, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [0.341064453125, 0.0056915283203125, 0.5634765625, 0.5146484375, 0.0080108642578125, 0.030181884765625, 0.0054779052734375, 0.000942230224609375, 0.055084228515625, 0.01235198974609375, 0.0021419525146484375, 0.0034198760986328125, 0.0716552734375, 0.001697540283203125, 0.35400390625, 0.01263427734375, 0.0007481575012207031, 0.0005517005920410156, 0.01068115234375, 0.0133209228515625, 6.508827209472656e-05, 0.004116058349609375, 0.044158935546875, 0.0003902912139892578, 0.00689697265625, 0.0044403076171875, 0.0008215904235839844, 0.0011396408081054688, 0.000949859619140625, 0.0027980804443359375, 0.0090789794921875, 0.07891845703125, 0.5126953125, 0.007709503173828125, 0.016632080078125, 0.007312774658203125, 0.0252227783203125, 0.0002338886260986328, 0.007221221923828125, 0.00037670135498046875, 6.67572021484375e-05, 0.005313873291015625, 1.0251998901367188e-05, 0.00830841064453125, 0.0014791488647460938, 0.0009937286376953125, 0.0001806020736694336, 0.0020236968994140625, 0.00042700767517089844, 0.00012624263763427734, 0.00030922889709472656, 0.0002989768981933594], "tokens": [275, 319, 333, 687, 48, 4164, 32, 1689, 11946, 922, 1689, 11145, 2797, 4140, 5658, 46508, 547, 1689, 14896, 11048, 687, 48, 275, 319, 1098, 1755, 1688, 322, 18231, 415, 322, 6935, 3829, 438, 1688, 32, 275, 319, 333, 98, 48, 275, 319, 886, 1344, 1098, 526, 8436, 1135, 31, 2372, 18701]}
{"line_number": 611, "line_type": "original", "code": "        return this;", "entropy": 3.703125, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [4.9453125, 4.01953125, 2.4609375, 3.384765625], "tokens": [351, 442, 458, 45]}
{"line_number": 611, "line_type": "generated", "code": "\n     * The text will be parsed case-insensitively.\n     * <p>\n     * Note: appending a separator discontinues any further work on the latest\n     * appended field.\n     *\n     * @param text  the text to", "entropy": 0.015472412109375, "is_bug_line": false, "sus_score": 0.16666666666666666, "per_token_entropy": [0.2259521484375, 0.002689361572265625, 0.435302734375, 0.0048980712890625, 0.001613616943359375, 0.0005054473876953125, 0.004001617431640625, 0.0011310577392578125, 0.0003688335418701172, 0.0004982948303222656, 0.0005507469177246094, 2.384185791015625e-06, 0.00579833984375, 0.04046630859375, 0.00010192394256591797, 0.01885986328125, 0.00012874603271484375, 7.593631744384766e-05, 0.002040863037109375, 5.7220458984375e-05, 0.00420379638671875, 0.0002834796905517578, 0.0005469322204589844, 8.344650268554688e-07, 0.0001157522201538086, 0.00025272369384765625, 0.0005769729614257812, 4.4345855712890625e-05, 1.1920928955078125e-05, 1.7881393432617188e-06, 4.482269287109375e-05, 0.00010395050048828125, 5.054473876953125e-05, 2.014636993408203e-05, 0.0001442432403564453, 0.0004630088806152344, 0.0013570785522460938, 1.3709068298339844e-05, 0.0005207061767578125, 0.0001016855239868164, 0.0005035400390625, 0.0147705078125, 0.0002453327178955078, 0.014495849609375, 2.765655517578125e-05, 0.0008029937744140625, 0.0012378692626953125, 0.0121002197265625, 0.0050811767578125, 0.0008077621459960938, 0.0004029273986816406, 0.0005087852478027344], "tokens": [275, 319, 886, 1344, 1098, 526, 8436, 1135, 31, 2372, 18701, 8608, 32, 275, 319, 333, 98, 48, 275, 319, 5830, 44, 1123, 4013, 312, 17584, 1214, 666, 266, 1032, 1346, 9686, 1389, 544, 322, 6615, 275, 319, 22363, 1600, 32, 275, 319, 275, 319, 477, 753, 1344, 225, 322, 1344, 372]}
{"line_number": 463, "line_type": "original", "code": "        appendField(MINUTES);", "entropy": 2.1171875, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [5.28125, 3.841796875, 0.263916015625, 0.013275146484375, 4.484375, 0.1417236328125, 0.7919921875], "tokens": [351, 5489, 1176, 26, 4683, 46520, 293]}
{"line_number": 463, "line_type": "generated", "code": "\n        return this;\n    }\n\n    /**\n     * Instruct the printer to emit a combined millis and nanos field, if supported.\n     * The nanos will overflow into the millis if necessary.\n     * The nanos are always output.\n     *\n    ", "entropy": 0.0946044921875, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.031494140625, 0.0113067626953125, 0.0008401870727539062, 0.00011396408081054688, 0.007587432861328125, 0.0006761550903320312, 0.1629638671875, 0.11590576171875, 0.00524139404296875, 3.9577484130859375e-05, 0.06695556640625, 0.0018768310546875, 0.0004513263702392578, 0.01265716552734375, 0.0055084228515625, 0.0211029052734375, 0.85400390625, 0.94482421875, 0.09661865234375, 0.1739501953125, 1.8212890625, 0.0005331039428710938, 0.038299560546875, 0.0135650634765625, 0.0036220550537109375, 0.0027675628662109375, 0.0017175674438476562, 0.00641632080078125, 0.00013959407806396484, 0.0390625, 0.08880615234375, 0.00020062923431396484, 0.011627197265625, 0.00896453857421875, 0.004024505615234375, 0.00885009765625, 0.01189422607421875, 0.0066375732421875, 0.0024814605712890625, 0.006725311279296875, 0.01021575927734375, 3.2901763916015625e-05, 0.04022216796875, 0.164306640625, 0.00025725364685058594, 0.011871337890625, 0.03167724609375, 0.0017547607421875, 0.01299285888671875, 0.003574371337890625, 0.00015234947204589844, 0.051116943359375], "tokens": [291, 442, 458, 45, 284, 320, 446, 1022, 275, 319, 701, 1167, 322, 23307, 372, 9533, 312, 16962, 42302, 461, 19291, 500, 1600, 30, 415, 5420, 32, 275, 319, 886, 19291, 500, 1098, 9973, 1991, 322, 42302, 415, 7506, 32, 275, 319, 886, 19291, 500, 884, 5182, 1688, 32, 275, 319, 275]}
{"line_number": 464, "line_type": "original", "code": "        return this;", "entropy": 1.677734375, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [6.421875, 0.2744140625, 0.007373809814453125, 0.006305694580078125], "tokens": [351, 442, 458, 45]}
{"line_number": 464, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Instruct the printer to emit an integer millis field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@", "entropy": 0.0428466796875, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.141845703125, 0.01078033447265625, 0.341064453125, 0.1011962890625, 0.0101776123046875, 7.355213165283203e-05, 0.07342529296875, 0.0023956298828125, 0.00043845176696777344, 0.01255035400390625, 0.00507354736328125, 0.0208587646484375, 0.640625, 0.22314453125, 0.060150146484375, 0.137451171875, 0.069091796875, 0.037567138671875, 0.004894256591796875, 0.020172119140625, 0.002964019775390625, 8.273124694824219e-05, 0.1407470703125, 0.00027751922607421875, 0.00015723705291748047, 0.00023365020751953125, 1.430511474609375e-05, 0.06365966796875, 0.034698486328125, 0.0002551078796386719, 0.03424072265625, 0.024322509765625, 8.535385131835938e-05, 0.0005235671997070312, 0.0062103271484375, 6.222724914550781e-05, 0.0007300376892089844, 0.0002586841583251953, 0.000591278076171875, 4.649162292480469e-06, 0.00022614002227783203, 4.661083221435547e-05, 0.00022304058074951172, 0.0019311904907226562, 0.0002117156982421875, 4.0531158447265625e-06, 0.00024402141571044922, 4.100799560546875e-05, 4.184246063232422e-05, 0.0011959075927734375, 0.00044655799865722656, 0.0005125999450683594], "tokens": [284, 320, 446, 1022, 275, 319, 701, 1167, 322, 23307, 372, 9533, 600, 4991, 42302, 1600, 30, 415, 5420, 32, 275, 319, 333, 98, 48, 275, 319, 886, 1451, 432, 21440, 461, 8436, 16105, 883, 526, 28355, 1471, 275, 319, 3088, 1204, 588, 16516, 4014, 318, 22326, 26, 410, 4370, 461, 3088]}
{"line_number": 591, "line_type": "original", "code": "        if (iElementPairs.size() > 0) {", "entropy": 0.86669921875, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [4.90234375, 2.701171875, 0.174072265625, 0.68017578125, 0.8857421875, 0.004848480224609375, 0.01442718505859375, 0.2763671875, 0.0014295578002929688, 1.509765625, 0.01059722900390625, 0.25146484375, 0.69189453125, 0.025421142578125], "tokens": [351, 415, 308, 91, 1308, 23020, 32, 891, 346, 848, 225, 34, 27, 301]}
{"line_number": 591, "line_type": "generated", "code": "\n     * <p>\n     * The text will be parsed case-insensitively.\n     * <p>\n     * Note: appending a separator discontinues any further work on the latest\n     * appended field.\n     *\n     * @param", "entropy": 0.043731689453125, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.167724609375, 0.00274658203125, 1.39453125, 0.0019140243530273438, 0.00043845176696777344, 0.0212554931640625, 9.274482727050781e-05, 0.1207275390625, 0.1798095703125, 0.0229339599609375, 0.001850128173828125, 0.0139007568359375, 0.006511688232421875, 0.0013322830200195312, 0.01059722900390625, 0.0011053085327148438, 5.245208740234375e-06, 0.059967041015625, 0.062347412109375, 6.890296936035156e-05, 0.06658935546875, 0.0002856254577636719, 2.288818359375e-05, 0.004665374755859375, 0.00010013580322265625, 0.0224151611328125, 0.002948760986328125, 0.00830841064453125, 1.1682510375976562e-05, 0.0018320083618164062, 0.0010957717895507812, 0.00604248046875, 0.00013697147369384766, 2.110004425048828e-05, 1.7881393432617188e-06, 0.0003437995910644531, 0.0007610321044921875, 0.00016379356384277344, 8.463859558105469e-05, 0.0005273818969726562, 0.0012941360473632812, 0.003742218017578125, 2.4437904357910156e-05, 0.0010280609130859375, 0.0002810955047607422, 0.0019102096557617188, 0.027099609375, 0.0004031658172607422, 0.035919189453125, 6.091594696044922e-05, 0.0016193389892578125, 0.01409149169921875], "tokens": [275, 319, 333, 98, 48, 275, 319, 886, 1344, 1098, 526, 8436, 1135, 31, 2372, 18701, 8608, 32, 275, 319, 333, 98, 48, 275, 319, 5830, 44, 1123, 4013, 312, 17584, 1214, 666, 266, 1032, 1346, 9686, 1389, 544, 322, 6615, 275, 319, 22363, 1600, 32, 275, 319, 275, 319, 477, 753]}
{"line_number": 599, "line_type": "original", "code": "        if (originalPrinter == null || originalParser == null ||", "entropy": 1.2138671875, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [3.05078125, 1.8515625, 0.11798095703125, 5.51171875, 0.26513671875, 1.1416015625, 0.241943359375, 0.57861328125, 1.935546875, 0.460205078125, 0.1492919921875, 0.002552032470703125, 0.470458984375], "tokens": [351, 415, 308, 7318, 14384, 610, 744, 1276, 4707, 2825, 610, 744, 1276]}
{"line_number": 599, "line_type": "generated", "code": "\n     */\n    public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) {\n        return appendSeparator(text, null, text, false, true);\n    }\n\n    /**\n     * Append a separator, which is output only if fields are printed before the", "entropy": 0.0982666015625, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.51123046875, 1.0849609375, 0.0193939208984375, 0.01276397705078125, 0.003520965576171875, 5.793571472167969e-05, 1.621246337890625e-05, 0.00019598007202148438, 0.0018644332885742188, 0.0146331787109375, 0.001636505126953125, 0.00034737586975097656, 0.00039458274841308594, 0.008514404296875, 0.0012607574462890625, 0.0018262863159179688, 0.0025634765625, 0.035888671875, 0.03216552734375, 0.0016126632690429688, 0.0007476806640625, 0.0343017578125, 0.1041259765625, 0.001556396484375, 0.86669921875, 0.00183868408203125, 1.5087890625, 0.005504608154296875, 0.46923828125, 0.002593994140625, 0.08953857421875, 0.0009512901306152344, 0.028472900390625, 0.00012159347534179688, 0.08074951171875, 0.016998291015625, 0.005077362060546875, 5.424022674560547e-05, 0.01372528076171875, 0.0019855499267578125, 0.0027179718017578125, 0.013458251953125, 0.001735687255859375, 0.002872467041015625, 0.005435943603515625, 0.06256103515625, 0.00152587890625, 0.00351715087890625, 0.0009398460388183594, 0.0019321441650390625, 0.024383544921875, 0.0217437744140625], "tokens": [275, 569, 284, 562, 24156, 8736, 1796, 5489, 11145, 2797, 4140, 5125, 26, 652, 1344, 27, 301, 291, 442, 5489, 11145, 26, 878, 30, 744, 30, 1344, 30, 901, 30, 861, 293, 284, 320, 446, 1022, 275, 319, 20593, 312, 17584, 30, 1510, 438, 1688, 1755, 415, 3829, 884, 21440, 2670, 322]}
{"line_number": 730, "line_type": "original", "code": "        if (text == null || finalText == null) {", "entropy": 1.83984375, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [6.94921875, 5.16796875, 0.0699462890625, 4.890625, 1.314453125, 0.08197021484375, 1.3212890625, 3.611328125, 0.00531005859375, 0.03814697265625, 0.0035381317138671875, 0.40185546875, 0.06036376953125], "tokens": [351, 415, 308, 878, 610, 744, 1276, 1158, 1031, 610, 744, 27, 301]}
{"line_number": 730, "line_type": "generated", "code": "\n            throw new IllegalStateException();\n        }\n    }\n\n    /**\n     * Append the specified text to the prefix.\n     * <p>\n     * The text will be parsed case-insensitively.\n     *\n     * @param text  the text to append\n    ", "entropy": 0.287353515625, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.462890625, 0.36181640625, 0.0022068023681640625, 0.28955078125, 0.33984375, 0.0282440185546875, 0.00021827220916748047, 0.293701171875, 0.0010442733764648438, 0.1920166015625, 0.5859375, 0.0037078857421875, 2.8848648071289062e-05, 0.62939453125, 2.1328125, 1.4267578125, 0.43994140625, 0.91943359375, 0.195068359375, 0.85791015625, 1.2177734375, 0.07244873046875, 0.0009899139404296875, 0.364501953125, 0.0005736351013183594, 0.0006866455078125, 0.0007443428039550781, 2.1696090698242188e-05, 0.859375, 0.1943359375, 0.08544921875, 0.052398681640625, 0.32958984375, 0.016845703125, 0.00696563720703125, 0.1546630859375, 0.00127410888671875, 2.5510787963867188e-05, 0.0479736328125, 0.036895751953125, 0.0010786056518554688, 0.69384765625, 1.71661376953125e-05, 0.0014123916625976562, 0.0136260986328125, 0.151123046875, 0.0162811279296875, 0.0235595703125, 0.054534912109375, 0.0194091796875, 0.280517578125, 1.0830078125], "tokens": [324, 1422, 537, 21665, 473, 291, 320, 284, 320, 446, 1022, 275, 319, 20593, 322, 3191, 1344, 372, 322, 5202, 32, 275, 319, 333, 98, 48, 275, 319, 886, 1344, 1098, 526, 8436, 1135, 31, 2372, 18701, 8608, 32, 275, 319, 275, 319, 477, 753, 1344, 225, 322, 1344, 372, 5489, 275]}
{"line_number": 734, "line_type": "original", "code": "        clearPrefix();", "entropy": 2.8046875, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [5.66796875, 5.10546875, 0.3701171875, 0.0751953125], "tokens": [351, 4233, 5419, 473]}
{"line_number": 734, "line_type": "generated", "code": "\n    \n    //-----------------------------------------------------------------------\n    private void append0(Object element, Object element2) {\n        List<Object> pairs = iElementPairs;\n        if (pairs.size() == 0) {\n            pairs.add(element);\n            pairs.add(", "entropy": 0.2763671875, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [1.9853515625, 0.7099609375, 0.00559234619140625, 0.0155181884765625, 1.330078125, 0.395263671875, 0.91748046875, 0.73681640625, 0.0037860870361328125, 0.56591796875, 0.97265625, 0.372802734375, 0.09686279296875, 1.2646484375, 0.6953125, 0.00583648681640625, 0.006343841552734375, 0.02947998046875, 1.244140625, 0.0165557861328125, 0.0007576942443847656, 6.890296936035156e-05, 0.235595703125, 0.0017642974853515625, 0.00403594970703125, 0.00039958953857421875, 1.0609626770019531e-05, 0.0005812644958496094, 0.08551025390625, 0.42822265625, 0.02069091796875, 0.1309814453125, 0.01523590087890625, 0.04449462890625, 0.0019893646240234375, 0.7119140625, 0.0031528472900390625, 0.1767578125, 0.1783447265625, 0.00029778480529785156, 0.0237274169921875, 0.53857421875, 0.006099700927734375, 0.0095062255859375, 0.0004582405090332031, 0.0160980224609375, 0.0244903564453125, 0.27294921875, 0.068603515625, 6.651878356933594e-05, 0.00020563602447509766, 0.0001512765884399414], "tokens": [2170, 434, 42510, 284, 945, 763, 5489, 34, 26, 959, 1994, 30, 2194, 1994, 36, 27, 301, 291, 1682, 46, 959, 48, 11847, 280, 595, 1308, 23020, 45, 291, 415, 308, 16564, 32, 891, 346, 610, 225, 34, 27, 301, 324, 11847, 32, 669, 26, 2543, 293, 324, 11847, 32, 669, 26]}
{"line_number": 737, "line_type": "original", "code": "        List<Object> pairs = iElementPairs;", "entropy": 1.5595703125, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [2.0859375, 7.6640625, 0.333984375, 0.63134765625, 0.00864410400390625, 4.07421875, 0.0589599609375, 1.9013671875, 0.3310546875, 0.000988006591796875, 0.067626953125], "tokens": [351, 1682, 46, 959, 48, 11847, 280, 595, 1308, 23020, 45]}
{"line_number": 737, "line_type": "generated", "code": "\n        iElementPairs.add(parser);\n        return this;\n    }\n\n    private Object[] createComposite(List<Object> elementPairs) {\n        // create composite printer/parser\n        Object[] comp = new Object[2];\n        if (elementPairs", "entropy": 0.3583984375, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.258056640625, 0.421630859375, 0.030517578125, 0.006801605224609375, 0.000946044921875, 0.0013875961303710938, 0.0007147789001464844, 0.01016998291015625, 0.0011615753173828125, 0.1268310546875, 0.08380126953125, 0.002597808837890625, 0.00042891502380371094, 0.01064300537109375, 0.0004146099090576172, 0.2384033203125, 0.6337890625, 1.068359375, 0.006351470947265625, 0.007572174072265625, 0.0004949569702148438, 0.0009026527404785156, 0.08502197265625, 0.8037109375, 0.06500244140625, 0.0014944076538085938, 2.06640625, 0.01055145263671875, 0.00511932373046875, 0.0234375, 0.11944580078125, 2.267578125, 2.796875, 1.0986328125, 0.5810546875, 1.1630859375, 0.019317626953125, 0.54638671875, 1.2978515625, 0.0806884765625, 0.6806640625, 0.09100341796875, 0.1512451171875, 0.025787353515625, 0.3154296875, 0.016326904296875, 0.0013456344604492188, 0.1956787109375, 0.93798828125, 0.005634307861328125, 0.274169921875, 0.00016033649444580078], "tokens": [291, 595, 1308, 23020, 32, 669, 26, 3922, 293, 291, 442, 458, 45, 284, 320, 446, 945, 2194, 1178, 1487, 14386, 26, 720, 46, 959, 48, 1994, 23020, 27, 301, 291, 434, 1487, 23366, 23307, 33, 3922, 291, 2194, 1178, 918, 280, 537, 2194, 77, 36, 970, 291, 415, 308, 2543, 23020]}
{"line_number": 738, "line_type": "original", "code": "        if (pairs.size() == 0) {", "entropy": 1.2236328125, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [2.599609375, 2.837890625, 0.0265045166015625, 7.078125, 0.120361328125, 0.126220703125, 0.01224517822265625, 0.68359375, 0.032073974609375, 0.96337890625, 0.151123046875, 0.047119140625], "tokens": [351, 415, 308, 16564, 32, 891, 346, 610, 225, 34, 27, 301]}
{"line_number": 738, "line_type": "generated", "code": "\n        return this;\n    }", "entropy": 0.08538818359375, "is_bug_line": false, "sus_score": 0.16222142113076254, "per_token_entropy": [0.241455078125, 0.193603515625, 0.01375579833984375, 0.0012502670288085938, 0.060455322265625, 0.0015897750854492188], "tokens": [291, 442, 458, 45, 284, 320]}
