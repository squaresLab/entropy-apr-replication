{"line_number": 1510, "line_type": "original", "code": "    CompilerInput input = new CompilerInput(", "entropy": 1.6806640625, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [2.66796875, 8.5859375, 1.11328125, 0.364501953125, 0.1468505859375, 2.146484375, 0.0335693359375, 0.00038313865661621094, 0.06451416015625], "tokens": [264, 20209, 1612, 1509, 280, 537, 20209, 1612, 26]}
{"line_number": 1510, "line_type": "generated", "code": "\n   *\n   * @param root Root of the parse tree.\n   * @return JS code.\n   */\n  @Override\n  String toSource(Node root) {\n    return root.toSource();\n  }\n\n  /**\n   * Converts the main parse tree", "entropy": 0.35302734375, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [0.215087890625, 0.44775390625, 1.1162109375, 0.025726318359375, 0.327392578125, 0.33837890625, 0.857421875, 1.974609375, 0.2352294921875, 0.277099609375, 0.304931640625, 0.005756378173828125, 0.4326171875, 0.04339599609375, 0.1234130859375, 0.01837158203125, 0.430419921875, 0.472900390625, 0.399658203125, 0.73974609375, 0.042755126953125, 0.033905029296875, 0.031829833984375, 0.52392578125, 0.00847625732421875, 0.00775146484375, 0.94775390625, 0.0012292861938476562, 0.09912109375, 0.001628875732421875, 0.0015878677368164062, 0.007965087890625, 0.0034160614013671875, 0.0016222000122070312, 0.11065673828125, 1.26953125, 0.97802734375, 0.0292510986328125, 1.1396484375, 0.0020160675048828125, 0.372314453125, 0.01027679443359375, 0.0006403923034667969, 0.1541748046875, 0.7685546875, 0.057342529296875, 0.0005512237548828125, 0.430419921875, 1.4248046875, 1.0947265625, 0.016143798828125, 0.001148223876953125], "tokens": [664, 319, 664, 319, 477, 753, 3051, 14741, 432, 322, 3185, 4345, 32, 664, 319, 477, 601, 7750, 1340, 32, 664, 569, 334, 477, 1788, 334, 892, 372, 2028, 26, 1212, 3051, 27, 301, 284, 442, 3051, 32, 452, 2028, 473, 334, 320, 719, 1022, 664, 319, 25337, 322, 2575, 3185, 4345]}
{"line_number": 1512, "line_type": "original", "code": "    putCompilerInput(input.getInputId(), input);", "entropy": 1.9501953125, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [1.478515625, 12.078125, 4.3359375, 0.08380126953125, 0.10400390625, 4.95703125, 0.2841796875, 0.017486572265625, 0.0007739067077636719, 0.01104736328125, 0.04986572265625, 0.01104736328125], "tokens": [264, 4162, 8115, 1612, 26, 1131, 32, 29647, 606, 1026, 1509, 293]}
{"line_number": 1512, "line_type": "generated", "code": "\n    return new JsAst(getToplevel()).getCode();\n  }\n\n  /**\n   * Converts the main parse tree back to JS code.\n   * @param includePrefixComments Whether to include comments at the top of the\n   *     file.\n   */\n ", "entropy": 0.6171875, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [0.61669921875, 0.56787109375, 3.28515625, 0.6591796875, 0.235107421875, 0.31005859375, 2.4921875, 1.412109375, 0.1568603515625, 2.203125, 0.71337890625, 0.1964111328125, 0.0305023193359375, 0.0002624988555908203, 0.1248779296875, 0.650390625, 0.052581787109375, 0.00038623809814453125, 0.373291015625, 1.1064453125, 1.54296875, 0.0180206298828125, 0.0018863677978515625, 0.23388671875, 0.0016546249389648438, 0.0191192626953125, 0.026763916015625, 0.3896484375, 0.0897216796875, 1.39453125, 1.5029296875, 0.1273193359375, 1.251953125, 1.44921875, 1.1181640625, 0.8046875, 0.078125, 0.1962890625, 0.99609375, 0.7451171875, 0.046295166015625, 1.0322265625, 0.437255859375, 0.206298828125, 0.36572265625, 0.00368499755859375, 0.379638671875, 0.8505859375, 1.2666015625, 0.2078857421875, 0.1080322265625, 0.0009713172912597656], "tokens": [284, 442, 537, 22301, 19511, 26, 371, 3155, 2649, 4251, 24216, 473, 334, 320, 719, 1022, 664, 319, 25337, 322, 2575, 3185, 4345, 1751, 372, 7750, 1340, 32, 664, 319, 477, 753, 2305, 5419, 12504, 14071, 372, 2305, 8446, 821, 322, 2663, 432, 322, 664, 319, 262, 803, 32, 664, 569, 334]}
{"line_number": 1513, "line_type": "original", "code": "    return input.getAstRoot(this);", "entropy": 2.54296875, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [2.701171875, 2.638671875, 6.12109375, 0.2548828125, 1.5986328125, 2.787109375, 0.0014171600341796875, 0.07958984375, 2.283203125, 6.9765625], "tokens": [264, 442, 1509, 32, 371, 19511, 4058, 26, 578, 293]}
{"line_number": 1513, "line_type": "generated", "code": "\n      public String call() throws Exception {\n        Node root = parse(options.jsInput);\n        return root.toStringTree(options.prettyPrint);\n      }\n    });\n  }\n\n  /**\n   * Converts a subtree back to JS code.\n   */\n ", "entropy": 0.476806640625, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [0.57421875, 1.66796875, 0.0033321380615234375, 0.004611968994140625, 0.0023708343505859375, 0.69189453125, 0.0291290283203125, 0.005767822265625, 0.17236328125, 1.83203125, 1.3837890625, 0.00847625732421875, 1.365234375, 0.394287109375, 2.185546875, 0.004825592041015625, 1.0458984375, 1.28515625, 0.052490234375, 0.1258544921875, 1.3310546875, 0.70166015625, 0.08099365234375, 0.346435546875, 0.1505126953125, 1.1015625, 1.2412109375, 0.2408447265625, 3.240234375, 0.019439697265625, 0.060150146484375, 0.0292205810546875, 0.00966644287109375, 0.1336669921875, 0.038543701171875, 0.01215362548828125, 0.0009646415710449219, 0.1705322265625, 0.425537109375, 0.04681396484375, 0.0004267692565917969, 0.39013671875, 0.71630859375, 0.603515625, 0.498291015625, 0.0195770263671875, 0.00312042236328125, 0.02569580078125, 0.0677490234375, 0.0740966796875, 0.1798095703125, 0.00383758544921875], "tokens": [397, 562, 892, 1476, 346, 2571, 3268, 301, 291, 4004, 3051, 280, 3185, 26, 2184, 32, 754, 1612, 293, 291, 442, 3051, 32, 3108, 3350, 26, 2184, 32, 15917, 4014, 293, 397, 320, 284, 1122, 334, 320, 719, 1022, 664, 319, 25337, 312, 37255, 1751, 372, 7750, 1340, 32, 664, 569, 334]}
{"line_number": 363, "line_type": "original", "code": "        this.moduleGraph = new JSModuleGraph(modules);", "entropy": 1.287109375, "is_bug_line": false, "sus_score": 0.14334554477024897, "per_token_entropy": [8.34375, 5.140625, 0.0242156982421875, 1.5234375, 0.2159423828125, 0.033203125, 0.5673828125, 0.04486083984375, 8.726119995117188e-05, 0.00011491775512695312, 0.1165771484375, 0.458984375, 0.271484375], "tokens": [351, 458, 32, 1647, 3406, 280, 537, 7750, 2459, 3406, 26, 3477, 293]}
{"line_number": 363, "line_type": "generated", "code": "\n\n  /**\n   * Fills in any empty modules with a default input.\n   */\n  private static <T extends SourceFile> void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (", "entropy": 0.304931640625, "is_bug_line": false, "sus_score": 0.14334554477024897, "per_token_entropy": [0.6611328125, 0.33056640625, 0.040924072265625, 0.0002646446228027344, 2.181640625, 0.0016956329345703125, 0.69189453125, 0.8564453125, 1.0029296875, 0.2386474609375, 0.623046875, 1.28515625, 2.162109375, 1.1875, 0.78662109375, 0.2568359375, 0.10028076171875, 0.17626953125, 0.043792724609375, 0.685546875, 0.3759765625, 0.017486572265625, 0.085693359375, 0.271728515625, 0.00027823448181152344, 0.0137176513671875, 0.049713134765625, 0.01084136962890625, 0.0010232925415039062, 0.000789642333984375, 0.00098419189453125, 0.39453125, 0.0002601146697998047, 0.0108184814453125, 8.702278137207031e-06, 0.00016510486602783203, 0.037872314453125, 0.0010786056518554688, 0.0020294189453125, 0.14208984375, 0.591796875, 0.0006737709045410156, 0.248779296875, 2.7418136596679688e-06, 0.1920166015625, 0.005062103271484375, 0.005809783935546875, 0.0003056526184082031, 0.0001627206802368164, 0.022674560546875, 0.037017822265625, 0.0235137939453125], "tokens": [719, 1022, 664, 319, 506, 8576, 328, 1346, 3502, 7896, 623, 312, 1244, 1509, 32, 664, 569, 334, 945, 907, 333, 70, 2026, 6374, 974, 48, 763, 5318, 2766, 12242, 26, 720, 46, 4624, 2459, 48, 7896, 27, 301, 284, 436, 308, 4624, 2459, 2297, 499, 7896, 27, 301, 397, 415, 308]}
{"line_number": 370, "line_type": "original", "code": "      }", "entropy": 3.16015625, "is_bug_line": false, "sus_score": 0.14334554477024897, "per_token_entropy": [5.55859375, 0.763671875], "tokens": [647, 320]}
{"line_number": 370, "line_type": "generated", "code": "\n    }\n  }\n\n  /**\n   * If there is a module without any inputs, fill it in with an empty module.\n   */\n  private void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {", "entropy": 0.427001953125, "is_bug_line": false, "sus_score": 0.14334554477024897, "per_token_entropy": [0.39990234375, 0.009979248046875, 0.2001953125, 0.0003952980041503906, 0.059906005859375, 0.2498779296875, 0.03863525390625, 0.0001894235610961914, 1.4267578125, 2.2265625, 1.26171875, 1.2998046875, 1.5810546875, 2.041015625, 0.8662109375, 1.25, 0.1175537109375, 0.9140625, 0.325927734375, 0.83203125, 0.0980224609375, 2.30859375, 0.57861328125, 1.21875, 0.71337890625, 0.0027828216552734375, 0.2451171875, 0.0017652511596679688, 0.01568603515625, 0.56103515625, 0.0002834796905517578, 1.4185905456542969e-05, 3.409385681152344e-05, 6.210803985595703e-05, 0.0055389404296875, 0.0005631446838378906, 0.00014829635620117188, 1.2993812561035156e-05, 1.4543533325195312e-05, 0.00278472900390625, 0.0012159347534179688, 0.000885009765625, 0.038055419921875, 0.71044921875, 0.0006947517395019531, 0.404541015625, 9.894371032714844e-06, 0.1700439453125, 0.0075836181640625, 0.00743865966796875, 0.00043392181396484375, 0.00023984909057617188], "tokens": [284, 320, 334, 320, 719, 1022, 664, 319, 1670, 2017, 438, 312, 2297, 2876, 1346, 7806, 30, 5318, 561, 328, 623, 600, 3502, 2297, 32, 664, 569, 334, 945, 763, 5318, 2766, 12242, 26, 720, 46, 4624, 2459, 48, 7896, 27, 301, 284, 436, 308, 4624, 2459, 2297, 499, 7896, 27, 301]}
{"line_number": 2152, "line_type": "original", "code": "      if (inputs.isEmpty()) {", "entropy": 1.818359375, "is_bug_line": false, "sus_score": 0.1421338109037403, "per_token_entropy": [4.33984375, 4.13671875, 0.057098388671875, 3.8203125, 0.480224609375, 1.646484375, 0.0268096923828125, 0.040374755859375], "tokens": [647, 415, 308, 8075, 32, 6393, 1157, 301]}
{"line_number": 2152, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Gets the DOT graph of the AST after each optimization pass.\n   *\n   * @param passNames The names of the passes to include in the graph.\n   */\n  public String getAstDotGraphs(String... passNames)", "entropy": 0.53466796875, "is_bug_line": false, "sus_score": 0.1421338109037403, "per_token_entropy": [0.53173828125, 0.064453125, 0.3203125, 0.393798828125, 1.3466796875, 0.001148223876953125, 1.1474609375, 0.258056640625, 0.7958984375, 0.042327880859375, 0.09393310546875, 0.09893798828125, 0.383544921875, 2.076171875, 1.2626953125, 2.419921875, 0.454345703125, 0.303955078125, 0.28662109375, 0.80859375, 0.97802734375, 0.0216522216796875, 0.4365234375, 0.462646484375, 1.0498046875, 1.9287109375, 1.306640625, 0.6123046875, 0.007694244384765625, 0.1572265625, 0.34033203125, 0.638671875, 1.1318359375, 0.3955078125, 0.01605224609375, 0.37841796875, 0.281982421875, 0.59765625, 0.5966796875, 0.01203155517578125, 0.0399169921875, 0.05438232421875, 0.043243408203125, 0.50341796875, 0.459716796875, 0.6513671875, 0.301513671875, 0.6865234375, 0.60107421875, 0.0103759765625, 0.0004591941833496094, 0.000492095947265625], "tokens": [334, 320, 719, 1022, 664, 319, 7124, 322, 32763, 3996, 432, 322, 16095, 2685, 2504, 16809, 3097, 32, 664, 319, 664, 319, 477, 753, 3097, 4109, 886, 4467, 432, 322, 18200, 372, 2305, 328, 322, 3996, 32, 664, 569, 334, 562, 892, 622, 19511, 10025, 43504, 26, 652, 1179, 3097, 4109, 27]}
{"line_number": 2156, "line_type": "original", "code": "      return inputs.get(0).getAstRoot(this);", "entropy": 2.0390625, "is_bug_line": false, "sus_score": 0.1421338109037403, "per_token_entropy": [5.9140625, 0.2301025390625, 10.3515625, 0.08770751953125, 0.1483154296875, 0.004344940185546875, 0.01230621337890625, 0.005687713623046875, 2.775390625, 3.80078125, 0.0200347900390625, 0.1129150390625, 0.0267791748046875, 5.05859375], "tokens": [647, 442, 7806, 32, 371, 26, 34, 547, 371, 19511, 4058, 26, 578, 293]}
{"line_number": 2156, "line_type": "generated", "code": "\n    return errorManager;\n  }\n\n  @Override\n  public void setTypedScopeCreator(TypedScopeCreator creator) {\n    this.typedScopeCreator = creator;\n  }\n\n  @Override\n  public TypedScopeCreator getTypedScopeCreator() {\n    return typed", "entropy": 0.1964111328125, "is_bug_line": false, "sus_score": 0.1421338109037403, "per_token_entropy": [0.9892578125, 0.2344970703125, 0.35546875, 0.01221466064453125, 0.01104736328125, 0.0384521484375, 0.0011653900146484375, 0.1900634765625, 0.43505859375, 0.01470184326171875, 0.0014886856079101562, 0.521484375, 1.5048828125, 1.048828125, 1.4599609375, 0.35400390625, 0.0447998046875, 0.050872802734375, 0.019775390625, 4.1365623474121094e-05, 0.0005707740783691406, 0.52685546875, 0.004123687744140625, 0.003559112548828125, 0.205322265625, 0.8544921875, 0.000797271728515625, 0.12249755859375, 0.0019016265869140625, 0.00725555419921875, 0.0028476715087890625, 0.001178741455078125, 0.0022735595703125, 0.104248046875, 0.0002715587615966797, 0.093017578125, 0.25927734375, 0.005939483642578125, 0.0008115768432617188, 0.14111328125, 0.2030029296875, 6.139278411865234e-05, 0.023681640625, 0.005462646484375, 3.2067298889160156e-05, 1.9073486328125e-05, 0.00017511844635009766, 0.007137298583984375, 0.0008406639099121094, 0.1533203125, 0.1217041015625, 0.0723876953125], "tokens": [284, 442, 1048, 1572, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 739, 11851, 5504, 11143, 26, 11851, 5504, 11143, 21231, 27, 301, 284, 458, 32, 19065, 5504, 11143, 280, 21231, 45, 334, 320, 719, 477, 1788, 334, 562, 21418, 5504, 11143, 622, 11851, 5504, 11143, 346, 301, 284, 442, 20639]}
{"line_number": 2159, "line_type": "original", "code": "    List<CompilerInput> moduleInputs = module.getInputs();", "entropy": 2.181640625, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [1.2734375, 9.4453125, 0.0142669677734375, 3.869140625, 4.0546875, 0.0042877197265625, 3.50390625, 0.0572509765625, 0.07000732421875, 3.982421875, 2.6875, 1.4384765625, 0.0191497802734375, 0.12420654296875], "tokens": [264, 1682, 46, 8115, 1612, 48, 2297, 13719, 280, 2297, 32, 371, 13719, 473]}
{"line_number": 2159, "line_type": "generated", "code": "\n    return errorManager;\n  }\n\n  @Override\n  public void setErrorManager(ErrorManager errorManager) {\n    this.errorManager = errorManager;\n  }\n\n  @Override\n  public void setTypes(JSTypeRegistry registry) {\n    this.registry", "entropy": 0.308349609375, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.43017578125, 0.278076171875, 0.75048828125, 0.021331787109375, 0.0186767578125, 0.036376953125, 0.0005826950073242188, 0.205810546875, 0.49609375, 0.018096923828125, 0.0011653900146484375, 0.355712890625, 1.513671875, 1.3271484375, 0.01290130615234375, 0.00432586669921875, 0.004077911376953125, 0.00023043155670166016, 0.31689453125, 0.006671905517578125, 0.0023193359375, 0.0009965896606445312, 0.04913330078125, 0.19482421875, 0.00040841102600097656, 0.001163482666015625, 3.230571746826172e-05, 0.0005350112915039062, 0.0179595947265625, 0.0298919677734375, 0.0010023117065429688, 0.07122802734375, 9.059906005859375e-05, 0.157470703125, 0.51171875, 0.01357269287109375, 0.0008101463317871094, 0.2169189453125, 1.3056640625, 1.0869140625, 3.498046875, 0.496826171875, 1.2314453125, 0.00021183490753173828, 0.064208984375, 0.02093505859375, 0.048065185546875, 0.004894256591796875, 0.04736328125, 0.462158203125, 0.00017881393432617188, 0.68994140625], "tokens": [284, 442, 1048, 1572, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 48907, 1572, 26, 924, 1572, 1048, 1572, 27, 301, 284, 458, 32, 731, 1572, 280, 1048, 1572, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 739, 2424, 26, 4624, 620, 5378, 10880, 27, 301, 284, 458, 32, 8200]}
{"line_number": 2160, "line_type": "original", "code": "    if (moduleInputs.size() > 0) {", "entropy": 1.7744140625, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [2.849609375, 3.21875, 0.0200653076171875, 4.953125, 7.62890625, 0.401123046875, 2.390625, 0.00437164306640625, 0.99267578125, 0.01873779296875, 0.48974609375, 0.032196044921875, 0.06951904296875], "tokens": [264, 415, 308, 1647, 13719, 32, 891, 346, 848, 225, 34, 27, 301]}
{"line_number": 2160, "line_type": "generated", "code": "\n  }", "entropy": 0.54736328125, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.67822265625, 0.416259765625], "tokens": [334, 320]}
{"line_number": 2161, "line_type": "original", "code": "      return moduleInputs.get(0).getAstRoot(this);", "entropy": 1.2919921875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [8.0546875, 1.83203125, 3.486328125, 5.0078125, 0.202392578125, 0.03070068359375, 0.0138092041015625, 0.06402587890625, 0.1810302734375, 0.1878662109375, 0.2352294921875, 0.005054473876953125, 0.021392822265625, 0.024749755859375, 0.03155517578125], "tokens": [647, 442, 2297, 13719, 32, 371, 26, 34, 547, 371, 19511, 4058, 26, 578, 293]}
{"line_number": 2161, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [], "tokens": []}
{"line_number": 2151, "line_type": "original", "code": "    if (module == null) {", "entropy": 1.546875, "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [2.287109375, 3.4453125, 0.1343994140625, 3.15234375, 3.107421875, 0.0296630859375, 0.189697265625, 0.0293731689453125], "tokens": [264, 415, 308, 1647, 610, 744, 27, 301]}
{"line_number": 2151, "line_type": "generated", "code": "\n    }\n  }\n\n  /** Gets the DOT graph of the AST generated at the end of compilation. */\n  public String getAstDotGraph(String name) throws IOException {\n    if (jsRoot!= null) {\n      ControlFlowAnalysis cfa = new", "entropy": 0.2176513671875, "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [0.6357421875, 0.383056640625, 0.18408203125, 0.002166748046875, 0.306396484375, 0.37255859375, 0.4091796875, 0.085205078125, 0.25244140625, 0.02862548828125, 0.0396728515625, 0.0635986328125, 0.317626953125, 1.2548828125, 0.1630859375, 0.01264190673828125, 0.0157623291015625, 0.0006895065307617188, 0.053466796875, 0.0256500244140625, 0.002735137939453125, 0.014862060546875, 0.044708251953125, 0.056549072265625, 0.05682373046875, 0.439208984375, 0.5703125, 0.020599365234375, 0.0703125, 1.3876953125, 1.9541015625, 0.125732421875, 0.05108642578125, 0.004425048828125, 0.00905609130859375, 0.040771484375, 0.87890625, 0.0293731689453125, 0.52294921875, 0.146728515625, 0.062225341796875, 0.00020003318786621094, 0.018035888671875, 0.0005397796630859375, 0.016265869140625, 0.171142578125, 4.649162292480469e-06, 0.005367279052734375, 0.0014667510986328125, 8.666515350341797e-05, 0.0008440017700195312, 0.0104217529296875], "tokens": [284, 320, 334, 320, 719, 1022, 7124, 322, 32763, 3996, 432, 322, 16095, 4723, 821, 322, 943, 432, 16260, 32, 569, 334, 562, 892, 622, 19511, 10025, 3406, 26, 652, 636, 27, 2571, 6291, 301, 284, 415, 308, 754, 4058, 863, 744, 27, 301, 397, 7813, 4055, 9745, 281, 1919, 280, 537]}
{"line_number": 2334, "line_type": "original", "code": "    if (synthesizedExternsInput == null) {", "entropy": 0.6728515625, "is_bug_line": false, "sus_score": 0.0629940788348712, "per_token_entropy": [4.02734375, 1.474609375, 0.1658935546875, 2.669921875, 0.0230712890625, 0.0066986083984375, 5.960464477539062e-07, 0.003147125244140625, 0.036712646484375, 0.1763916015625, 0.00780487060546875, 0.08819580078125, 0.07171630859375], "tokens": [264, 415, 308, 15303, 44370, 571, 900, 101, 1612, 610, 744, 27, 301]}
{"line_number": 2334, "line_type": "generated", "code": "\n    processNewScript(ast, ast.getAstRoot());\n  }\n\n  private void processNewScript(JsAst ast, Node originalRoot) {\n    if (originalRoot == null) {\n      return;\n    }\n    Node newRoot = ast.", "entropy": 0.3447265625, "is_bug_line": false, "sus_score": 0.0629940788348712, "per_token_entropy": [0.263671875, 1.7158203125, 0.003284454345703125, 0.002758026123046875, 0.0018606185913085938, 0.026153564453125, 0.0634765625, 0.87939453125, 0.00905609130859375, 0.5087890625, 0.5390625, 0.0025634765625, 0.89013671875, 0.0697021484375, 0.0008726119995117188, 0.225830078125, 0.66943359375, 0.061859130859375, 0.0158233642578125, 0.00027251243591308594, 0.00016415119171142578, 0.003665924072265625, 0.015625, 2.1696090698242188e-05, 0.133544921875, 0.0018749237060546875, 0.00524139404296875, 1.369140625, 0.01126861572265625, 0.0013837814331054688, 0.005016326904296875, 0.151611328125, 2.609375, 0.2265625, 1.142578125, 0.000453948974609375, 0.84814453125, 0.02215576171875, 0.0728759765625, 0.0012683868408203125, 0.046722412109375, 1.2177734375, 0.0019369125366210938, 0.0221099853515625, 2.288818359375e-05, 0.73388671875, 1.9130859375, 0.96728515625, 0.09423828125, 0.0430908203125, 0.315673828125, 0.0010328292846679688], "tokens": [284, 2164, 1812, 3206, 26, 633, 30, 10020, 32, 371, 19511, 4058, 1035, 334, 320, 719, 945, 763, 2164, 1812, 3206, 26, 10535, 19511, 10020, 30, 4004, 4707, 4058, 27, 301, 284, 415, 308, 7318, 4058, 610, 744, 27, 301, 397, 442, 45, 284, 320, 284, 4004, 537, 4058, 280, 10020, 32]}
{"line_number": 2335, "line_type": "original", "code": "      synthesizedExternsInput = newExternInput(SYNTHETIC_EXTERNS);", "entropy": 1.53515625, "is_bug_line": false, "sus_score": 0.0629940788348712, "per_token_entropy": [5.93359375, 6.9609375, 0.5615234375, 0.07586669921875, 9.5367431640625e-07, 0.0033111572265625, 0.033538818359375, 0.252685546875, 1.4306640625, 5.87890625, 0.0001671314239501953, 3.28125, 0.87158203125, 6.27734375, 6.139278411865234e-05, 0.0972900390625, 0.0168914794921875, 0.043701171875, 0.05889892578125, 0.001979827880859375, 9.071826934814453e-05, 2.01171875], "tokens": [647, 20182, 44370, 571, 900, 101, 1612, 280, 537, 571, 900, 1612, 26, 26429, 1781, 1218, 1102, 81, 2399, 527, 3020, 293]}
{"line_number": 2335, "line_type": "generated", "code": "\n    processNewScript(ast, emptyScript);\n  }\n\n  /**\n   * Processes a new script.\n   */\n  private void processNewScript(JsAst ast, Node originalRoot) {\n    Preconditions.checkState(ast.isFromExtern", "entropy": 0.2919921875, "is_bug_line": false, "sus_score": 0.0629940788348712, "per_token_entropy": [0.90966796875, 0.490966796875, 0.0009984970092773438, 0.00040912628173828125, 0.0007472038269042969, 0.00762939453125, 0.000339508056640625, 0.005878448486328125, 0.00012862682342529297, 0.002674102783203125, 0.0472412109375, 0.00034236907958984375, 0.18017578125, 0.8515625, 0.024749755859375, 3.0994415283203125e-05, 2.08984375, 0.007152557373046875, 0.287841796875, 0.337646484375, 0.4716796875, 1.9013671875, 0.5224609375, 0.88916015625, 0.019073486328125, 0.10479736328125, 0.006237030029296875, 0.00025391578674316406, 1.6450881958007812e-05, 2.872943878173828e-05, 0.0025043487548828125, 0.0216217041015625, 1.1324882507324219e-05, 0.2203369140625, 0.0018796920776367188, 0.0028171539306640625, 0.73583984375, 0.01085662841796875, 0.0012769699096679688, 0.00086212158203125, 0.1201171875, 1.7109375, 0.002201080322265625, 0.018707275390625, 0.452392578125, 0.0809326171875, 1.13671875, 0.0738525390625, 0.74072265625, 0.462646484375, 0.232421875, 1.1205673217773438e-05], "tokens": [284, 2164, 1812, 3206, 26, 633, 30, 3502, 3206, 293, 334, 320, 719, 1022, 664, 319, 1312, 8251, 312, 537, 3261, 32, 664, 569, 334, 945, 763, 2164, 1812, 3206, 26, 10535, 19511, 10020, 30, 4004, 4707, 4058, 27, 301, 284, 40596, 32, 1553, 1078, 26, 633, 32, 297, 1792, 571, 900]}
{"line_number": 2337, "line_type": "original", "code": "    return synthesizedExternsInput;", "entropy": 2.146484375, "is_bug_line": false, "sus_score": 0.0629940788348712, "per_token_entropy": [3.6640625, 5.4296875, 8.4921875, 1.00390625, 0.02032470703125, 2.7418136596679688e-06, 0.0055999755859375, 0.0732421875, 0.62353515625], "tokens": [264, 442, 20182, 44370, 571, 900, 101, 1612, 45]}
{"line_number": 2337, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Removes the script with the given input id from the compile state.\n   *\n   * @param inputId the input id of the script to remove\n   */\n  public void removeScript(InputId inputId) {\n    removeSource", "entropy": 0.31640625, "is_bug_line": false, "sus_score": 0.0629940788348712, "per_token_entropy": [0.791015625, 0.002155303955078125, 0.1973876953125, 0.62890625, 0.02142333984375, 0.000152587890625, 1.671875, 1.6962890625, 1.2060546875, 1.2666015625, 0.05645751953125, 0.133544921875, 1.0283203125, 0.59423828125, 0.466064453125, 0.128662109375, 0.6357421875, 0.046661376953125, 0.113037109375, 0.57470703125, 0.07891845703125, 0.173583984375, 0.0004417896270751953, 0.032562255859375, 0.02508544921875, 0.1473388671875, 0.0198974609375, 0.253173828125, 0.75830078125, 0.0750732421875, 0.2347412109375, 0.013580322265625, 0.205810546875, 0.393798828125, 0.55322265625, 0.09698486328125, 0.2451171875, 0.0063323974609375, 0.022857666015625, 0.0184173583984375, 0.0035953521728515625, 0.0692138671875, 0.0252532958984375, 0.031494140625, 8.940696716308594e-06, 0.004611968994140625, 0.0008301734924316406, 0.0020351409912109375, 0.00392913818359375, 0.0626220703125, 0.89453125, 0.73681640625], "tokens": [334, 320, 719, 1022, 664, 319, 24992, 322, 3261, 623, 322, 2702, 1509, 804, 645, 322, 8329, 1603, 32, 664, 319, 664, 319, 477, 753, 1509, 606, 322, 1509, 804, 432, 322, 3261, 372, 3345, 664, 569, 334, 562, 763, 3345, 3206, 26, 1612, 606, 1509, 606, 27, 301, 284, 3345, 2028]}
{"line_number": 1027, "line_type": "original", "code": "    SourceAst ast = new SyntheticAst(name);", "entropy": 3.3671875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [3.046875, 9.0546875, 3.8515625, 4.4375, 1.0166015625, 0.830078125, 10.640625, 0.03839111328125, 0.509765625, 0.1468505859375, 4.3671875, 2.4765625], "tokens": [264, 6374, 19511, 10020, 280, 537, 40261, 18228, 19511, 26, 426, 293]}
{"line_number": 1027, "line_type": "generated", "code": "\n    return true;\n  }\n\n  @Override\n  public Iterable<CompilerInput> getInputsInOrder() {\n    return inputsById.values();\n  }\n\n  @Override\n  public Iterable<CompilerInput> getExternInputs() {\n    return externs;", "entropy": 0.154296875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [0.2357177734375, 0.353759765625, 0.00826263427734375, 0.0022068023681640625, 0.043609619140625, 0.0006580352783203125, 0.29931640625, 0.994140625, 0.006916046142578125, 0.0037212371826171875, 0.058258056640625, 1.458984375, 0.06585693359375, 0.0222015380859375, 0.0021209716796875, 7.462501525878906e-05, 0.58935546875, 0.70947265625, 0.35107421875, 0.35595703125, 0.0086669921875, 0.0005626678466796875, 0.11553955078125, 0.10809326171875, 0.442626953125, 0.0241851806640625, 0.00165557861328125, 0.024810791015625, 0.004261016845703125, 0.0028533935546875, 2.6345252990722656e-05, 0.12139892578125, 0.317626953125, 0.0032901763916015625, 0.0009169578552246094, 0.04241943359375, 0.5517578125, 0.00446319580078125, 0.027557373046875, 0.0027332305908203125, 0.0001571178436279297, 0.123779296875, 0.08734130859375, 2.384185791015625e-07, 0.051422119140625, 0.329345703125, 0.00022041797637939453, 0.034271240234375, 0.00875091552734375, 0.00904083251953125, 0.0006117820739746094, 0.01045989990234375], "tokens": [284, 442, 861, 45, 334, 320, 719, 477, 1788, 334, 562, 19209, 46, 8115, 1612, 48, 622, 13719, 383, 2871, 346, 301, 284, 442, 7806, 3213, 32, 2810, 473, 334, 320, 719, 477, 1788, 334, 562, 19209, 46, 8115, 1612, 48, 622, 571, 900, 13719, 346, 301, 284, 442, 12098, 101, 45]}
{"line_number": 1028, "line_type": "original", "code": "    if (inputsById.containsKey(ast.getInputId())) {", "entropy": 1.390625, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [4.15625, 1.0078125, 0.031585693359375, 9.2734375, 0.8984375, 0.0411376953125, 1.29296875, 0.004467010498046875, 2.392578125, 0.00177001953125, 0.0435791015625, 0.0019207000732421875, 0.1080322265625, 0.2213134765625], "tokens": [264, 415, 308, 8075, 3213, 32, 15943, 26, 633, 32, 29647, 606, 5156, 301]}
{"line_number": 1028, "line_type": "generated", "code": "\n    if (module!= null) {\n      newInput.setModule(module);\n      module.replace(oldInput, newInput);\n    }", "entropy": 0.301513671875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [0.65625, 1.1181640625, 0.0286865234375, 0.0576171875, 0.173828125, 0.005786895751953125, 0.058807373046875, 0.003963470458984375, 0.049560546875, 2.23046875, 0.0228271484375, 0.0008831024169921875, 0.04010009765625, 0.0291290283203125, 0.0080413818359375, 0.045989990234375, 0.0447998046875, 0.89453125, 0.4970703125, 0.01259613037109375, 0.90771484375, 1.8603515625, 0.09271240234375, 0.00023305416107177734, 0.08990478515625, 0.005466461181640625, 0.0001938343048095703, 0.0082855224609375, 0.10302734375, 4.6133995056152344e-05], "tokens": [284, 415, 308, 1647, 863, 744, 27, 301, 397, 537, 1612, 32, 470, 2459, 26, 1647, 293, 397, 2297, 32, 3227, 26, 1455, 1612, 30, 537, 1612, 293, 284, 320]}
{"line_number": 1031, "line_type": "original", "code": "    CompilerInput input = new CompilerInput(ast, true);", "entropy": 2.119140625, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [3.3671875, 8.0546875, 0.364013671875, 3.09765625, 0.206787109375, 2.52734375, 0.9833984375, 0.0002944469451904297, 0.021728515625, 0.517578125, 3.845703125, 4.44921875, 0.1092529296875], "tokens": [264, 20209, 1612, 1509, 280, 537, 20209, 1612, 26, 633, 30, 861, 293]}
{"line_number": 1031, "line_type": "generated", "code": "\n    }\n    return true;\n  }\n\n  //------------------------------------------------------------------------\n  // Modules\n  //------------------------------------------------------------------------\n\n  @Override\n  public JSModule getModule(String moduleName) {\n    return modulesByName.get(moduleName);\n  }\n\n  @Override\n  public JSModule create", "entropy": 0.22900390625, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [0.367919921875, 0.1585693359375, 0.95947265625, 0.158203125, 0.0015153884887695312, 0.0004220008850097656, 0.03289794921875, 0.0008602142333984375, 0.289306640625, 1.34765625, 0.0888671875, 0.016448974609375, 0.0081024169921875, 0.0004761219024658203, 1.703125, 0.048797607421875, 4.100799560546875e-05, 0.0025424957275390625, 0.00042748451232910156, 0.176513671875, 0.47900390625, 0.005626678466796875, 0.0031032562255859375, 0.1416015625, 0.406982421875, 0.00048661231994628906, 0.47802734375, 0.31884765625, 0.32373046875, 0.59814453125, 0.439697265625, 0.037994384765625, 0.001590728759765625, 0.0697021484375, 0.4755859375, 0.281005859375, 0.2420654296875, 0.00391387939453125, 0.0011606216430664062, 0.0005521774291992188, 0.0161285400390625, 0.0095367431640625, 0.0026187896728515625, 3.4689903259277344e-05, 0.077392578125, 0.3251953125, 0.0032176971435546875, 0.0005321502685546875, 0.0472412109375, 0.473388671875, 0.000514984130859375, 1.28125], "tokens": [284, 320, 284, 442, 861, 45, 334, 320, 719, 434, 2657, 430, 334, 434, 25122, 334, 434, 2657, 430, 719, 477, 1788, 334, 562, 7750, 2459, 622, 2459, 26, 652, 46009, 27, 301, 284, 442, 7896, 9813, 32, 371, 26, 37201, 293, 334, 320, 719, 477, 1788, 334, 562, 7750, 2459, 1487]}
{"line_number": 1032, "line_type": "original", "code": "    putCompilerInput(input.getInputId(), input);", "entropy": 1.6796875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [4.33984375, 7.24609375, 2.93359375, 0.0462646484375, 0.0292205810546875, 4.7421875, 0.33056640625, 0.397705078125, 0.0021953582763671875, 0.0119476318359375, 0.07452392578125, 0.006557464599609375], "tokens": [264, 4162, 8115, 1612, 26, 1131, 32, 29647, 606, 1026, 1509, 293]}
{"line_number": 1032, "line_type": "generated", "code": "\n    return true;\n  }\n\n  /**\n   * Add a new input file to the AST.\n   * @param id The id of the new input.\n   * @param source The source code of the new input.\n   */\n  protected void addNewInput", "entropy": 0.480712890625, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [0.2296142578125, 0.38818359375, 0.005657196044921875, 0.00162506103515625, 0.03106689453125, 0.0007920265197753906, 0.342041015625, 1.0751953125, 0.55712890625, 0.0005121231079101562, 2.25390625, 0.37646484375, 1.8515625, 1.53515625, 1.3740234375, 0.6875, 0.51123046875, 0.193115234375, 0.30859375, 0.30224609375, 0.056640625, 0.591796875, 0.095947265625, 2.1484375, 0.219970703125, 0.376708984375, 0.1983642578125, 0.0185394287109375, 1.255859375, 0.078125, 0.41796875, 0.055572509765625, 0.1129150390625, 0.00750732421875, 0.1593017578125, 1.54296875, 0.415771484375, 0.62060546875, 0.74560546875, 0.6298828125, 0.00986480712890625, 0.303955078125, 0.03314208984375, 0.0755615234375, 0.034332275390625, 0.8349609375, 0.00333404541015625, 0.5625, 0.70703125, 0.08831787109375, 0.408203125, 0.1651611328125], "tokens": [284, 442, 861, 45, 334, 320, 719, 1022, 664, 319, 2222, 312, 537, 1509, 803, 372, 322, 16095, 32, 664, 319, 477, 753, 804, 886, 804, 432, 322, 537, 1509, 32, 664, 319, 477, 753, 1914, 886, 1914, 1340, 432, 322, 537, 1509, 32, 664, 569, 334, 2522, 763, 1015, 1812, 1612]}
{"line_number": 1033, "line_type": "original", "code": "    externsRoot.addChildToFront(ast.getAstRoot(this));", "entropy": 1.71875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [3.759765625, 0.67626953125, 0.003025054931640625, 12.703125, 0.1470947265625, 2.740234375, 0.0262298583984375, 1.4560546875, 0.013031005859375, 3.09375, 0.048126220703125, 0.0721435546875, 3.95703125, 0.0242462158203125, 0.1842041015625, 0.1981201171875, 0.1192626953125], "tokens": [264, 12098, 101, 4058, 32, 21545, 705, 10112, 26, 633, 32, 371, 19511, 4058, 26, 578, 876]}
{"line_number": 1033, "line_type": "generated", "code": "\n    return true;\n  }\n\n  /**\n   * @return Whether the given input is an extern.\n   */\n  public boolean isExtern(CompilerInput input) {\n    return externs.contains(input);\n  }\n\n  @Override\n  public Iterable<", "entropy": 0.3701171875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [0.10308837890625, 1.103515625, 0.01220703125, 0.0022945404052734375, 0.042938232421875, 0.0006670951843261719, 0.3701171875, 1.330078125, 0.53125, 0.00063323974609375, 2.8125, 0.439208984375, 1.576171875, 1.046875, 1.6669921875, 0.8076171875, 0.6953125, 1.017578125, 0.061767578125, 0.6513671875, 0.06707763671875, 0.0202484130859375, 0.0013942718505859375, 0.92236328125, 0.03570556640625, 0.09222412109375, 0.00551605224609375, 2.384185791015625e-07, 0.0667724609375, 0.81884765625, 8.797645568847656e-05, 0.1429443359375, 0.0006856918334960938, 0.00015914440155029297, 0.034088134765625, 0.055755615234375, 0.0562744140625, 0.00125885009765625, 0.002239227294921875, 0.003902435302734375, 0.0002732276916503906, 0.0003476142883300781, 0.008636474609375, 0.0158843994140625, 0.00016772747039794922, 0.1864013671875, 1.2294921875, 0.006946563720703125, 0.003253936767578125, 0.0411376953125, 1.1005859375, 0.050140380859375], "tokens": [284, 442, 861, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 2702, 1509, 438, 600, 12098, 32, 664, 569, 334, 562, 1905, 438, 571, 900, 26, 8115, 1612, 1509, 27, 301, 284, 442, 12098, 101, 32, 4752, 26, 1131, 293, 334, 320, 719, 477, 1788, 334, 562, 19209, 46]}
{"line_number": 1034, "line_type": "original", "code": "    externs.add(0, input);", "entropy": 2.66796875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [3.638671875, 8.6484375, 0.150390625, 0.62060546875, 1.232421875, 0.0092315673828125, 9.4375, 0.1092529296875, 2.806640625, 0.037017822265625], "tokens": [264, 12098, 101, 32, 669, 26, 34, 30, 1509, 293]}
{"line_number": 1034, "line_type": "generated", "code": "\n    return true;\n  }\n\n  /**\n   * Replace a source input dynamically. Intended for incremental\n   * re-compilation.\n   *\n   * If the new source input doesn't parse, then keep the old input\n   * in the AST and return false", "entropy": 0.1717529296875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [0.260498046875, 0.190673828125, 0.018096923828125, 0.00199127197265625, 0.03253173828125, 0.0011148452758789062, 0.41357421875, 1.2822265625, 0.50146484375, 0.0006418228149414062, 2.595703125, 0.7802734375, 0.314453125, 0.048431396484375, 0.26171875, 0.24658203125, 0.06475830078125, 0.00044417381286621094, 0.001979827880859375, 0.08984375, 0.1019287109375, 0.00013339519500732422, 0.01064300537109375, 0.01189422607421875, 0.004383087158203125, 0.0235137939453125, 0.06719970703125, 0.09173583984375, 0.0283050537109375, 0.0005183219909667969, 0.853515625, 0.028656005859375, 0.06585693359375, 0.033233642578125, 0.00594329833984375, 0.1507568359375, 5.817413330078125e-05, 0.00464630126953125, 0.012542724609375, 0.037933349609375, 0.1260986328125, 0.001880645751953125, 0.0014753341674804688, 0.0026111602783203125, 0.015960693359375, 0.0005221366882324219, 0.0055084228515625, 0.0008878707885742188, 0.00130462646484375, 0.050079345703125, 0.06585693359375, 0.0134124755859375], "tokens": [284, 442, 861, 45, 334, 320, 719, 1022, 664, 319, 16695, 312, 1914, 1509, 22524, 32, 701, 10831, 436, 33530, 664, 319, 316, 31, 31670, 32, 664, 319, 664, 319, 1670, 322, 537, 1914, 1509, 4163, 1330, 3185, 30, 1615, 4986, 322, 3610, 1509, 664, 319, 328, 322, 16095, 461, 442, 901]}
{"line_number": 1035, "line_type": "original", "code": "    return input;", "entropy": 5.9296875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [2.4609375, 9.0, 4.79296875, 7.4609375], "tokens": [264, 442, 1509, 45]}
{"line_number": 1035, "line_type": "generated", "code": "\n        newInput.getInputId().getIdName().equals(ast.getInputId().getIdName())\n    );\n\n    return true;\n  }", "entropy": 0.31201171875, "is_bug_line": false, "sus_score": 0.062257280636469035, "per_token_entropy": [1.0859375, 1.244140625, 0.051361083984375, 0.080322265625, 0.289794921875, 0.001117706298828125, 0.431884765625, 1.259765625, 0.1328125, 0.1348876953125, 0.08831787109375, 0.026824951171875, 0.58837890625, 0.00264739990234375, 0.0261077880859375, 0.001251220703125, 0.002162933349609375, 0.0028362274169921875, 0.0003097057342529297, 1.88671875, 0.5361328125, 0.0294036865234375, 0.56982421875, 0.184814453125, 0.0019245147705078125, 0.00034999847412109375, 0.07037353515625, 0.0008077621459960938], "tokens": [291, 537, 1612, 32, 29647, 606, 922, 7061, 558, 922, 3574, 26, 633, 32, 29647, 606, 922, 7061, 558, 1157, 284, 1093, 446, 442, 861, 45, 334, 320]}
