{"line_number": 744, "line_type": "original", "code": "        cArg = cArg.getNext();", "entropy": 2.87890625, "is_bug_line": false, "sus_score": 0.3746343246326776, "per_token_entropy": [7.55078125, 10.8671875, 5.32421875, 0.1605224609375, 1.9619140625, 0.0023593902587890625, 0.0216217041015625, 0.0018787384033203125, 0.0167388916015625], "tokens": [351, 281, 1765, 280, 281, 1765, 32, 23017, 473]}
{"line_number": 744, "line_type": "generated", "code": "\n    return false;\n  }", "entropy": 0.455322265625, "is_bug_line": false, "sus_score": 0.3746343246326776, "per_token_entropy": [0.62646484375, 1.001953125, 1.0341796875, 0.00638580322265625, 0.06219482421875, 0.0008177757263183594], "tokens": [284, 442, 901, 45, 334, 320]}
{"line_number": 735, "line_type": "original", "code": "        fnParam = fnParam.getNext();", "entropy": 2.4921875, "is_bug_line": false, "sus_score": 0.3713906763541037, "per_token_entropy": [8.0625, 6.66015625, 5.21875, 0.060272216796875, 1.0068359375, 1.3271484375, 0.02557373046875, 0.0015211105346679688, 0.07330322265625], "tokens": [351, 2771, 3180, 280, 2771, 3180, 32, 23017, 473]}
{"line_number": 735, "line_type": "generated", "code": "\n    // If the function is removable, then it is inlined only if\n    // it reduces the size of the generated code.\n    if (isRemovable) {\n      // If there are no references to the function that are not\n      // in the", "entropy": 0.95361328125, "is_bug_line": false, "sus_score": 0.3713906763541037, "per_token_entropy": [1.255859375, 1.115234375, 1.9375, 1.029296875, 0.388427734375, 0.7255859375, 1.5849609375, 0.0006875991821289062, 1.451171875, 1.896484375, 1.3583984375, 1.203125, 3.787109375, 0.6416015625, 2.0078125, 0.2393798828125, 1.6767578125, 0.0023956298828125, 0.9375, 1.8544921875, 0.1507568359375, 1.310546875, 0.36767578125, 0.18603515625, 2.39453125, 0.131103515625, 0.389404296875, 0.314208984375, 1.111328125, 0.043670654296875, 0.02984619140625, 0.0014553070068359375, 2.0265579223632812e-06, 0.192138671875, 0.004581451416015625, 0.08660888671875, 1.041015625, 1.7958984375, 1.796875, 0.32763671875, 1.3125, 0.92529296875, 0.66015625, 0.7939453125, 0.31201171875, 2.271484375, 1.4912109375, 1.064453125, 0.94677734375, 0.0004987716674804688, 1.5634765625, 1.4931640625], "tokens": [284, 434, 1670, 322, 667, 438, 10606, 444, 30, 1615, 561, 438, 328, 14145, 1755, 415, 284, 434, 561, 42036, 322, 1334, 432, 322, 4723, 1340, 32, 284, 415, 308, 297, 25346, 444, 27, 301, 397, 434, 1670, 2017, 884, 1289, 10647, 372, 322, 667, 688, 884, 646, 397, 434, 328, 322]}
{"line_number": 727, "line_type": "original", "code": "          if (NodeUtil.mayEffectMutableState(cArg, compiler)", "entropy": 1.7802734375, "is_bug_line": true, "sus_score": 0.3508232077228117, "per_token_entropy": [4.2734375, 2.41796875, 0.1995849609375, 2.572265625, 0.001026153564453125, 0.0005369186401367188, 3.044921875, 6.19921875, 0.517578125, 0.00299072265625, 0.0249786376953125, 4.9375, 0.61181640625, 1.4736328125, 0.114990234375, 2.095703125], "tokens": [2033, 415, 308, 1212, 1733, 32, 17302, 5559, 12907, 1078, 26, 85, 1765, 30, 8980, 27]}
{"line_number": 727, "line_type": "generated", "code": "\n          return true;\n        }\n      }\n\n      // Check if any of the references are to an extern.\n      if (ref.isExtern()) {\n        return true;\n      }\n    }\n\n    // If the function is removable and it is not referenced", "entropy": 0.6220703125, "is_bug_line": true, "sus_score": 0.3508232077228117, "per_token_entropy": [0.241455078125, 0.489501953125, 0.408935546875, 0.0016269683837890625, 0.07147216796875, 0.0006561279296875, 0.037628173828125, 0.00023066997528076172, 1.279296875, 0.4248046875, 0.6005859375, 0.142822265625, 0.5673828125, 0.1397705078125, 0.00856781005859375, 0.281494140625, 1.0830078125, 1.3701171875, 3.171875, 1.828125, 1.33203125, 0.05059814453125, 0.32470703125, 0.11737060546875, 0.414794921875, 0.0018854141235351562, 1.1484375, 0.0283203125, 7.271766662597656e-06, 0.62451171875, 0.0013790130615234375, 0.6689453125, 0.16748046875, 0.004871368408203125, 0.0001933574676513672, 0.0068206787109375, 3.8743019104003906e-05, 0.9921875, 7.653236389160156e-05, 0.1788330078125, 0.58544921875, 1.6064453125, 1.154296875, 0.338134765625, 1.3017578125, 2.080078125, 0.0007157325744628906, 1.0263671875, 1.7666015625, 1.7431640625, 1.1865234375, 1.328125], "tokens": [616, 442, 861, 45, 291, 320, 397, 320, 1687, 434, 3456, 415, 1346, 432, 322, 10647, 884, 372, 600, 12098, 32, 397, 415, 308, 612, 32, 297, 571, 900, 1157, 301, 291, 442, 861, 45, 397, 320, 284, 320, 446, 434, 1670, 322, 667, 438, 10606, 444, 461, 561, 438, 646, 15167]}
{"line_number": 722, "line_type": "original", "code": "        if (cArg != null) {", "entropy": 1.609375, "is_bug_line": false, "sus_score": 0.34554737023254406, "per_token_entropy": [5.30078125, 0.57861328125, 0.06793212890625, 7.421875, 0.12451171875, 0.77001953125, 0.0014019012451171875, 0.1954345703125, 0.0225982666015625], "tokens": [351, 415, 308, 85, 1765, 863, 744, 27, 301]}
{"line_number": 722, "line_type": "generated", "code": "\n\n      // Check if the name is used in other modules.\n      if (checkModules) {\n        JSModule usingModule = moduleGraph.getModuleForReference(ref);\n        if (usingModule!= fnModule) {\n          // TODO(johnlenz):", "entropy": 0.51611328125, "is_bug_line": false, "sus_score": 0.34554737023254406, "per_token_entropy": [1.19140625, 0.8369140625, 1.630859375, 0.61962890625, 0.6845703125, 3.01171875, 0.62841796875, 2.287109375, 0.65087890625, 2.142578125, 0.3134765625, 0.64013671875, 0.1365966796875, 0.2216796875, 0.02154541015625, 0.03033447265625, 0.0002880096435546875, 0.447509765625, 0.0013170242309570312, 0.0249176025390625, 0.96875, 0.005580902099609375, 2.751953125, 0.006763458251953125, 0.005641937255859375, 0.309814453125, 0.0045623779296875, 0.0015468597412109375, 0.09356689453125, 0.64990234375, 2.099609375, 0.0022182464599609375, 0.0217437744140625, 0.069580078125, 0.1251220703125, 0.1759033203125, 0.1124267578125, 0.09490966796875, 2.5033950805664062e-06, 0.134033203125, 0.5791015625, 0.000579833984375, 0.38037109375, 0.00026488304138183594, 0.034027099609375, 0.7880859375, 1.7392578125, 0.078125, 0.052032470703125, 0.0018949508666992188, 0.0001100301742553711, 0.01338958740234375], "tokens": [1687, 434, 3456, 415, 322, 636, 438, 1654, 328, 1604, 7896, 32, 397, 415, 308, 1553, 12242, 27, 301, 291, 7750, 2459, 1471, 2459, 280, 2297, 3406, 32, 48639, 1562, 3564, 26, 612, 293, 291, 415, 308, 908, 2459, 863, 2771, 2459, 27, 301, 616, 434, 4296, 26, 25172, 1657, 108, 711]}
{"line_number": 741, "line_type": "original", "code": "        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {", "entropy": 1.5458984375, "is_bug_line": false, "sus_score": 0.34554737023254406, "per_token_entropy": [5.65234375, 2.39453125, 0.1541748046875, 4.171875, 0.00283050537109375, 0.00016415119171142578, 3.224609375, 0.318115234375, 0.0225372314453125, 0.008880615234375, 0.00789642333984375, 6.89453125, 1.0927734375, 1.66015625, 0.12744140625, 0.48291015625, 0.0660400390625], "tokens": [351, 415, 308, 1212, 1733, 32, 17302, 9037, 7427, 20126, 26, 85, 1765, 30, 8980, 490, 301]}
{"line_number": 741, "line_type": "generated", "code": "\n    return false;\n  }", "entropy": 0.3359375, "is_bug_line": false, "sus_score": 0.34554737023254406, "per_token_entropy": [0.371337890625, 0.62548828125, 0.89794921875, 0.00565338134765625, 0.1143798828125, 0.0013408660888671875], "tokens": [284, 442, 901, 45, 334, 320]}
{"line_number": 740, "line_type": "original", "code": "      if (cArg != null) {", "entropy": 2.15234375, "is_bug_line": false, "sus_score": 0.34050261230349943, "per_token_entropy": [5.50390625, 0.60986328125, 0.1611328125, 7.5546875, 2.8671875, 1.587890625, 0.0030155181884765625, 1.0419921875, 0.040679931640625], "tokens": [647, 415, 308, 85, 1765, 863, 744, 27, 301]}
{"line_number": 740, "line_type": "generated", "code": "\n    return isRemovable &&\n        referencesUsingDirectInlining > 0 &&\n        referencesUsingBlockInlining > 0;\n  }", "entropy": 0.474365234375, "is_bug_line": false, "sus_score": 0.34050261230349943, "per_token_entropy": [0.218505859375, 1.892578125, 1.6064453125, 0.0380859375, 1.1801719665527344e-05, 0.57080078125, 0.9970703125, 1.388671875, 0.034515380859375, 0.27490234375, 1.0848045349121094e-05, 1.7216796875, 0.1490478515625, 0.4482421875, 0.1856689453125, 0.11883544921875, 0.650390625, 0.07196044921875, 0.53759765625, 1.5497207641601562e-05, 0.69091796875, 0.028076171875, 0.061676025390625, 0.548828125, 0.098876953125, 0.0020351409912109375], "tokens": [284, 442, 438, 25346, 444, 962, 291, 10647, 9515, 6997, 29021, 848, 225, 34, 962, 291, 10647, 9515, 2227, 29021, 848, 225, 34, 45, 334, 320]}
{"line_number": 721, "line_type": "original", "code": "      if (fnParam != null) {", "entropy": 2.091796875, "is_bug_line": false, "sus_score": 0.32025630761017426, "per_token_entropy": [3.751953125, 2.748046875, 0.09130859375, 3.724609375, 7.62890625, 0.45947265625, 0.01216888427734375, 0.267333984375, 0.146240234375], "tokens": [647, 415, 308, 3359, 3180, 863, 744, 27, 301]}
{"line_number": 721, "line_type": "generated", "code": "\n        if (checkModules &&!moduleGraph.dependsOn(fnModule, ref.module)) {\n          return true;\n        }\n      } else if (ref.mode == InliningMode.VAR) {\n        if (checkModules &&!moduleGraph", "entropy": 0.341064453125, "is_bug_line": false, "sus_score": 0.32025630761017426, "per_token_entropy": [0.970703125, 0.90185546875, 0.07958984375, 0.44482421875, 0.0123291015625, 1.8115234375, 1.3720703125, 0.94189453125, 0.08697509765625, 0.0023288726806640625, 0.312255859375, 0.0048370361328125, 0.0906982421875, 0.390625, 0.023193359375, 0.054473876953125, 0.08245849609375, 0.004207611083984375, 0.75927734375, 0.0372314453125, 0.0017900466918945312, 0.048370361328125, 0.47509765625, 0.3623046875, 0.00033855438232421875, 0.0196380615234375, 6.532669067382812e-05, 0.2333984375, 0.0014543533325195312, 1.072265625, 0.900390625, 0.050689697265625, 0.1666259765625, 0.0009737014770507812, 0.09161376953125, 0.072509765625, 0.003772735595703125, 0.00018644332885742188, 4.6372413635253906e-05, 5.3763389587402344e-05, 3.197265625, 0.277587890625, 0.00138092041015625, 0.186279296875, 0.751953125, 0.1446533203125, 0.771484375, 0.004608154296875, 0.25244140625, 0.22509765625, 0.03948974609375, 9.620189666748047e-05], "tokens": [291, 415, 308, 1553, 12242, 962, 653, 1647, 3406, 32, 27263, 1484, 26, 3359, 2459, 30, 2488, 32, 1647, 490, 301, 616, 442, 861, 45, 291, 320, 397, 320, 813, 415, 308, 612, 32, 2816, 610, 701, 22914, 2101, 32, 7416, 27, 301, 291, 415, 308, 1553, 12242, 962, 653, 1647, 3406]}
{"line_number": 748, "line_type": "original", "code": "    return CanInlineResult.YES;", "entropy": 2.17578125, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [5.3203125, 0.9423828125, 9.2421875, 0.0074920654296875, 0.007335662841796875, 0.0169525146484375, 1.75390625, 0.1209716796875], "tokens": [264, 442, 5477, 10144, 1394, 32, 19354, 45]}
{"line_number": 748, "line_type": "generated", "code": "\n\n    // The function is too complex to inline.\n    return false;\n  }", "entropy": 0.873046875, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [1.4130859375, 0.61181640625, 2.705078125, 2.42578125, 1.126953125, 2.056640625, 0.248779296875, 0.61474609375, 0.7890625, 1.013671875, 0.31396484375, 0.53271484375, 0.039703369140625, 0.0011243820190429688, 0.072021484375, 0.0007228851318359375], "tokens": [446, 434, 886, 667, 438, 5133, 8640, 372, 4447, 32, 284, 442, 901, 45, 334, 320]}
{"line_number": 718, "line_type": "original", "code": "    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();", "entropy": 0.86474609375, "is_bug_line": false, "sus_score": 0.2286647801900118, "per_token_entropy": [3.474609375, 4.859375, 2.376953125, 1.2890625, 0.12322998046875, 2.970703125, 0.0022602081298828125, 0.0003921985626220703, 0.1368408203125, 0.09130859375, 0.0670166015625, 0.0016956329345703125, 0.0294647216796875, 0.002758026123046875, 0.10504150390625, 0.0262908935546875, 0.0011720657348632812, 0.005336761474609375], "tokens": [264, 4004, 2771, 3180, 280, 4004, 1733, 32, 371, 2447, 3675, 26, 3359, 1212, 547, 25657, 2931, 473]}
{"line_number": 718, "line_type": "generated", "code": "\n    for (Reference ref : refs) {\n      Node callNode = ref.getNode();\n      if (callNode.isAssign()) {\n        continue;\n      }\n\n      if (callNode.isCall()) {\n        if (isDirectCallNodeReplacementPossible", "entropy": 0.39697265625, "is_bug_line": false, "sus_score": 0.2286647801900118, "per_token_entropy": [0.099365234375, 0.351806640625, 0.0033473968505859375, 0.0584716796875, 0.2025146484375, 0.043060302734375, 0.004253387451171875, 0.00135040283203125, 0.0012340545654296875, 0.08172607421875, 0.779296875, 1.4716796875, 0.275634765625, 0.0156402587890625, 0.058380126953125, 0.0004062652587890625, 0.098388671875, 0.010955810546875, 0.457763671875, 1.0869140625, 0.268310546875, 1.2451171875, 0.002811431884765625, 0.37939453125, 0.8359375, 0.7080078125, 0.278076171875, 0.00039577484130859375, 0.01666259765625, 1.4169921875, 0.0003228187561035156, 0.04937744140625, 6.580352783203125e-05, 0.196533203125, 1.2998046875, 0.1722412109375, 1.451171875, 0.0035724639892578125, 0.0175933837890625, 0.62353515625, 1.7158203125, 0.60546875, 0.0003609657287597656, 0.08111572265625, 0.93359375, 0.254638671875, 1.779296875, 1.1142578125, 0.0099334716796875, 0.04339599609375, 0.038421630859375, 0.0024967193603515625], "tokens": [284, 436, 308, 3564, 2488, 499, 29284, 27, 301, 397, 4004, 1476, 1212, 280, 2488, 32, 17699, 473, 397, 415, 308, 1851, 1212, 32, 297, 9079, 1157, 301, 291, 4036, 45, 397, 320, 1687, 415, 308, 1851, 1212, 32, 297, 1853, 1157, 301, 291, 415, 308, 297, 6997, 1853, 1212, 24230, 23708]}
{"line_number": 719, "line_type": "original", "code": "    while (cArg != null || fnParam != null) {", "entropy": 1.478515625, "is_bug_line": false, "sus_score": 0.2286647801900118, "per_token_entropy": [5.28515625, 6.50390625, 0.06201171875, 3.482421875, 0.395263671875, 0.0184478759765625, 0.0038738250732421875, 4.78515625, 0.0897216796875, 0.0185546875, 0.003513336181640625, 0.0007257461547851562, 0.020721435546875, 0.0321044921875], "tokens": [264, 2218, 308, 85, 1765, 863, 744, 1276, 2771, 3180, 863, 744, 27, 301]}
{"line_number": 719, "line_type": "generated", "code": "\n        if (isRemovable) {\n          if (checkModules\n              &&!moduleGraph.dependsOn(fnModule, ref.getModule())) {\n            continue;\n          }\n\n          if (ref.isProperty()) {\n            continue;\n          }\n\n          if (", "entropy": 0.460693359375, "is_bug_line": false, "sus_score": 0.2286647801900118, "per_token_entropy": [1.0673828125, 1.1669921875, 0.2127685546875, 2.107421875, 0.5859375, 9.28640365600586e-05, 0.642578125, 0.003021240234375, 0.10308837890625, 1.1044921875, 0.1578369140625, 1.13671875, 0.09295654296875, 1.3056640625, 0.027130126953125, 1.1142578125, 0.5029296875, 0.040863037109375, 0.0015811920166015625, 0.265869140625, 0.0033092498779296875, 0.087158203125, 0.47607421875, 0.0261077880859375, 0.11651611328125, 0.059661865234375, 0.004047393798828125, 0.306640625, 0.2427978515625, 0.0007572174072265625, 0.0220489501953125, 0.72998046875, 0.0007314682006835938, 0.01502227783203125, 5.9485435485839844e-05, 0.515625, 0.5986328125, 0.2459716796875, 0.8076171875, 0.034912109375, 0.8984375, 2.125, 1.0029296875, 0.0003573894500732422, 0.030792236328125, 2.634765625, 0.0001684427261352539, 0.01495361328125, 3.719329833984375e-05, 0.546875, 0.62939453125, 0.13037109375], "tokens": [291, 415, 308, 297, 25346, 444, 27, 301, 616, 415, 308, 1553, 12242, 1090, 962, 653, 1647, 3406, 32, 27263, 1484, 26, 3359, 2459, 30, 2488, 32, 48639, 5156, 301, 324, 4036, 45, 616, 320, 5678, 415, 308, 612, 32, 297, 1653, 1157, 301, 324, 4036, 45, 616, 320, 5678, 415, 308]}
{"line_number": 695, "line_type": "original", "code": "    Node block = fnNode.getLastChild();", "entropy": 2.12890625, "is_bug_line": true, "sus_score": 0.22573305919324013, "per_token_entropy": [4.609375, 9.5625, 5.05078125, 0.27880859375, 1.380859375, 0.0352783203125, 0.027069091796875, 0.10028076171875, 0.0003159046173095703, 0.2587890625], "tokens": [264, 4004, 2163, 280, 2771, 1212, 32, 20197, 2931, 473]}
{"line_number": 695, "line_type": "generated", "code": "\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions", "entropy": 0.0928955078125, "is_bug_line": true, "sus_score": 0.22573305919324013, "per_token_entropy": [0.1396484375, 0.0016450881958007812, 0.08392333984375, 0.0006880760192871094, 0.351806640625, 0.5537109375, 0.03106689453125, 7.271766662597656e-05, 9.620189666748047e-05, 0.0031681060791015625, 0.06304931640625, 0.025543212890625, 0.053131103515625, 0.0005750656127929688, 0.440673828125, 0.45751953125, 0.09832763671875, 0.0002300739288330078, 0.75341796875, 0.1500244140625, 0.304443359375, 0.1556396484375, 0.2216796875, 0.01428985595703125, 0.0582275390625, 0.006099700927734375, 0.28564453125, 0.038818359375, 0.027801513671875, 0.037872314453125, 0.01335906982421875, 0.154296875, 0.01116180419921875, 0.0091094970703125, 0.2203369140625, 0.0008778572082519531, 0.01495361328125, 0.0010557174682617188, 0.0012493133544921875, 0.0032501220703125, 0.0017404556274414062, 0.005283355712890625, 0.0083160400390625, 0.004528045654296875, 0.002452850341796875, 0.003643035888671875, 0.001312255859375, 5.435943603515625e-05, 0.000316619873046875, 0.0002472400665283203, 0.0012722015380859375, 0.01296234130859375], "tokens": [397, 320, 284, 320, 446, 442, 5477, 10144, 1394, 32, 19354, 45, 334, 320, 719, 1022, 664, 319, 34450, 4946, 312, 667, 883, 526, 328, 14145, 821, 312, 8409, 1476, 4755, 32, 664, 319, 5802, 884, 10204, 15261, 688, 322, 667, 461, 4121, 2298, 7629, 328, 664, 319, 2532, 436, 322, 4442]}
{"line_number": 699, "line_type": "original", "code": "    Node cArg = callNode.getFirstChild().getNext();", "entropy": 0.92626953125, "is_bug_line": true, "sus_score": 0.22573305919324013, "per_token_entropy": [5.90625, 4.265625, 1.171875, 0.016387939453125, 0.0302886962890625, 0.1318359375, 0.06768798828125, 0.00902557373046875, 0.311767578125, 0.035614013671875, 0.061798095703125, 0.0008392333984375, 0.0328369140625], "tokens": [264, 4004, 281, 1765, 280, 1476, 1212, 32, 25657, 2931, 922, 23017, 473]}
{"line_number": 699, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a", "entropy": 0.078369140625, "is_bug_line": true, "sus_score": 0.22573305919324013, "per_token_entropy": [0.33935546875, 0.005512237548828125, 0.287841796875, 0.422119140625, 0.10614013671875, 0.00030350685119628906, 0.79833984375, 0.1448974609375, 0.279541015625, 0.1617431640625, 0.205810546875, 0.01435089111328125, 0.06207275390625, 0.005603790283203125, 0.3125, 0.03924560546875, 0.0246734619140625, 0.038665771484375, 0.01253509521484375, 0.1761474609375, 0.01306915283203125, 0.00787353515625, 0.201171875, 0.0008091926574707031, 0.013671875, 0.00098419189453125, 0.001178741455078125, 0.0029888153076171875, 0.0017995834350585938, 0.006237030029296875, 0.00894927978515625, 0.00421142578125, 0.0023822784423828125, 0.0037059783935546875, 0.0013580322265625, 0.0001577138900756836, 0.0003018379211425781, 0.00024271011352539062, 0.0012140274047851562, 0.01239013671875, 0.00020265579223632812, 9.942054748535156e-05, 0.00045490264892578125, 4.172325134277344e-06, 0.0105743408203125, 0.001556396484375, 0.00023639202117919922, 0.07763671875, 0.00911712646484375, 0.0015707015991210938, 0.2091064453125, 0.040924072265625], "tokens": [334, 320, 719, 1022, 664, 319, 34450, 4946, 312, 667, 883, 526, 328, 14145, 821, 312, 8409, 1476, 4755, 32, 664, 319, 5802, 884, 10204, 15261, 688, 322, 667, 461, 4121, 2298, 7629, 328, 664, 319, 2532, 436, 322, 4442, 372, 526, 328, 14145, 44, 664, 319, 225, 35, 27, 1670, 312]}
{"line_number": 704, "line_type": "original", "code": "    if (!callNode.getFirstChild().isName()) {", "entropy": 1.5478515625, "is_bug_line": false, "sus_score": 0.22573305919324013, "per_token_entropy": [2.4609375, 3.146484375, 1.6484375, 5.9765625, 0.3076171875, 0.0352783203125, 3.990234375, 0.003284454345703125, 0.0094451904296875, 1.7705078125, 0.5087890625, 0.20947265625, 0.0635986328125], "tokens": [264, 415, 1429, 1851, 1212, 32, 25657, 2931, 922, 297, 558, 1157, 301]}
{"line_number": 704, "line_type": "generated", "code": "\n   * @param callNode", "entropy": 0.56005859375, "is_bug_line": false, "sus_score": 0.22573305919324013, "per_token_entropy": [0.305419921875, 0.76416015625, 0.2137451171875, 0.483154296875, 1.31640625, 0.279052734375], "tokens": [664, 319, 477, 753, 1476, 1212]}
{"line_number": 208, "line_type": "original", "code": "      return canInlineReferenceDirectly(callNode, fnNode);", "entropy": 1.3154296875, "is_bug_line": false, "sus_score": 0.22430886163681774, "per_token_entropy": [5.71875, 0.90869140625, 6.9296875, 0.09295654296875, 1.2646484375, 0.4443359375, 0.00252532958984375, 0.12261962890625, 0.935546875, 0.022216796875, 0.1175537109375, 0.2203369140625, 0.047821044921875, 1.5947265625], "tokens": [647, 442, 883, 10144, 3564, 6997, 631, 26, 1851, 1212, 30, 2771, 1212, 293]}
{"line_number": 208, "line_type": "generated", "code": "\n    return callNode;\n  }\n\n  /**\n   * Inline a function that fulfills the requirements of\n   * canInlineReferenceAsStatementBlock into the call site, replacing only the\n   * CALL node.\n   */\n  private Node inlineFunction(Node callNode", "entropy": 0.124755859375, "is_bug_line": false, "sus_score": 0.22430886163681774, "per_token_entropy": [0.84765625, 0.712890625, 0.533203125, 0.00881195068359375, 0.1444091796875, 0.008026123046875, 0.0001615285873413086, 0.031463623046875, 0.09381103515625, 0.0108795166015625, 0.0006642341613769531, 0.3642578125, 0.061126708984375, 0.044769287109375, 0.2021484375, 0.091552734375, 0.00052642822265625, 0.009765625, 0.005550384521484375, 0.00963592529296875, 0.026153564453125, 0.00033736228942871094, 0.0135345458984375, 0.0028934478759765625, 0.045684814453125, 0.210205078125, 0.03106689453125, 0.0382080078125, 0.1341552734375, 0.04107666015625, 0.0572509765625, 0.01018524169921875, 0.377197265625, 0.221435546875, 1.1826171875, 0.193359375, 0.0330810546875, 0.00027251243591308594, 0.0096588134765625, 0.01088714599609375, 0.2900390625, 0.06292724609375, 0.1064453125, 0.0009508132934570312, 0.09454345703125, 0.0028057098388671875, 0.00031304359436035156, 0.01248931884765625, 0.014434814453125, 0.0689697265625, 0.007007598876953125, 0.007488250732421875], "tokens": [284, 442, 1476, 1212, 45, 334, 320, 719, 1022, 664, 319, 29662, 312, 667, 688, 33224, 101, 322, 10130, 432, 664, 319, 883, 10144, 3564, 1465, 5495, 2227, 1991, 322, 1476, 4755, 30, 27949, 1755, 322, 664, 319, 16084, 1541, 32, 664, 569, 334, 945, 4004, 4447, 2447, 26, 1212, 1476, 1212]}
{"line_number": 691, "line_type": "original", "code": "    if (!isDirectCallNodeReplacementPossible(fnNode)) {", "entropy": 3.0, "is_bug_line": false, "sus_score": 0.22430886163681774, "per_token_entropy": [5.4140625, 2.060546875, 2.8046875, 4.75390625, 3.919921875, 1.1923828125, 4.5625, 9.3359375, 2.97265625, 0.0482177734375, 2.314453125, 0.033233642578125, 2.5078125, 0.06988525390625], "tokens": [264, 415, 1429, 297, 6997, 1853, 1212, 24230, 23708, 26, 3359, 1212, 490, 301]}
{"line_number": 691, "line_type": "generated", "code": "\n        return CanInlineResult.NO;\n      }\n\n      // Move to the next argument.\n      cArg = cArg.getNext();\n    }\n\n    // The function contains no references to local variables or parameters.\n    return CanInlineResult.YES;\n  }", "entropy": 0.467041015625, "is_bug_line": false, "sus_score": 0.22430886163681774, "per_token_entropy": [0.85205078125, 0.97705078125, 0.014007568359375, 0.0005307197570800781, 0.00010788440704345703, 0.0011005401611328125, 0.07489013671875, 0.0062713623046875, 0.057647705078125, 0.0005593299865722656, 0.509765625, 0.364013671875, 0.13720703125, 0.042144775390625, 0.015655517578125, 0.007625579833984375, 0.7041015625, 0.285400390625, 0.006778717041015625, 0.0221099853515625, 1.4066696166992188e-05, 0.0004401206970214844, 0.045166015625, 0.00010192394256591797, 0.00274658203125, 8.416175842285156e-05, 0.00447845458984375, 0.04486083984375, 0.0004239082336425781, 0.2247314453125, 0.94140625, 2.65234375, 0.69775390625, 3.24609375, 1.625, 1.6572265625, 0.232177734375, 1.9560546875, 0.2042236328125, 2.9296875, 0.95458984375, 1.1025390625, 0.058441162109375, 1.2197265625, 0.03424072265625, 7.736682891845703e-05, 0.00011742115020751953, 0.0012559890747070312, 0.2401123046875, 0.0882568359375, 0.038818359375, 0.0015249252319335938], "tokens": [291, 442, 5477, 10144, 1394, 32, 2576, 45, 397, 320, 1687, 434, 11530, 372, 322, 2354, 2793, 32, 397, 281, 1765, 280, 281, 1765, 32, 23017, 473, 284, 320, 446, 434, 886, 667, 4304, 1289, 10647, 372, 2196, 4886, 556, 3377, 32, 284, 442, 5477, 10144, 1394, 32, 19354, 45, 334, 320]}
{"line_number": 796, "line_type": "original", "code": "      return true;", "entropy": 2.08203125, "is_bug_line": false, "sus_score": 0.22360679774997896, "per_token_entropy": [6.09765625, 1.3505859375, 0.86962890625, 0.0119171142578125], "tokens": [647, 442, 861, 45]}
{"line_number": 796, "line_type": "generated", "code": "\n\n  /**\n   * Estimate the cost of a call.\n   */\n  int estimateCallCost(Node fnNode, boolean referencesThis) {\n    int callCost = 0;\n    if (referencesThis) {\n      callCost += 1;\n   ", "entropy": 0.43994140625, "is_bug_line": false, "sus_score": 0.22360679774997896, "per_token_entropy": [1.4423828125, 0.568359375, 0.06884765625, 0.0003399848937988281, 1.8369140625, 0.2315673828125, 0.11956787109375, 0.51025390625, 0.11065673828125, 1.5771484375, 0.80908203125, 2.076171875, 0.281494140625, 0.78271484375, 0.003948211669921875, 1.4375, 0.002567291259765625, 0.001251220703125, 0.00012612342834472656, 0.0017957687377929688, 0.01299285888671875, 1.2021484375, 0.1483154296875, 0.0028057098388671875, 0.0036334991455078125, 0.12237548828125, 0.0009775161743164062, 0.004238128662109375, 0.0015707015991210938, 0.10736083984375, 0.97265625, 1.458984375, 0.11236572265625, 0.1273193359375, 0.59326171875, 0.3115234375, 0.003009796142578125, 0.92822265625, 1.2607421875, 0.1051025390625, 0.301025390625, 4.684925079345703e-05, 0.045684814453125, 0.002796173095703125, 0.0272064208984375, 0.434326171875, 0.00016391277313232422, 0.53125, 1.41796875, 0.54296875, 0.1307373046875, 0.10296630859375], "tokens": [719, 1022, 664, 319, 14164, 5679, 322, 7847, 432, 312, 1476, 32, 664, 569, 334, 629, 20772, 1853, 9375, 26, 1212, 2771, 1212, 30, 1905, 10647, 2272, 27, 301, 284, 629, 1476, 9375, 280, 225, 34, 45, 284, 415, 308, 6365, 2272, 27, 301, 397, 1476, 9375, 1454, 225, 35, 45, 284]}
{"line_number": 555, "line_type": "original", "code": "        return true;", "entropy": 3.68359375, "is_bug_line": false, "sus_score": 0.22086305214969307, "per_token_entropy": [8.3984375, 1.560546875, 4.7734375, 0.005645751953125], "tokens": [351, 442, 861, 45]}
{"line_number": 555, "line_type": "generated", "code": "\n\n  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * - It must be a simple call", "entropy": 0.09930419921875, "is_bug_line": false, "sus_score": 0.22086305214969307, "per_token_entropy": [1.3935546875, 0.363037109375, 0.09063720703125, 0.00027751922607421875, 1.0126953125, 0.30029296875, 0.429931640625, 0.257568359375, 0.3837890625, 0.01190948486328125, 0.05621337890625, 0.005512237548828125, 0.1446533203125, 0.033294677734375, 0.020416259765625, 0.039215087890625, 0.00951385498046875, 0.10662841796875, 0.004703521728515625, 0.046478271484375, 0.09814453125, 0.0004215240478515625, 0.0044403076171875, 0.0006213188171386719, 0.0004968643188476562, 0.0016336441040039062, 0.0009250640869140625, 0.0066070556640625, 0.0023670196533203125, 0.001312255859375, 0.0009937286376953125, 0.0018701553344726562, 0.000820159912109375, 6.67572021484375e-05, 0.0001571178436279297, 0.00011944770812988281, 0.001178741455078125, 0.01001739501953125, 0.0001533031463623047, 6.031990051269531e-05, 0.0002779960632324219, 2.0742416381835938e-05, 0.013824462890625, 0.0009093284606933594, 0.004817962646484375, 0.0665283203125, 0.0887451171875, 0.01087188720703125, 0.084716796875, 0.01395416259765625, 0.0229034423828125, 0.012847900390625], "tokens": [719, 1022, 664, 319, 34450, 4946, 312, 667, 883, 526, 328, 14145, 821, 312, 8409, 1476, 4755, 32, 664, 319, 5802, 884, 10204, 15261, 688, 322, 667, 461, 4121, 2298, 7629, 328, 664, 319, 2532, 436, 322, 4442, 372, 526, 328, 14145, 44, 664, 319, 429, 2030, 2298, 526, 312, 4281, 1476]}
{"line_number": 274, "line_type": "original", "code": "      Node returnNode = block.getFirstChild();", "entropy": 2.3203125, "is_bug_line": false, "sus_score": 0.20801257358446093, "per_token_entropy": [4.671875, 6.703125, 4.29296875, 0.205322265625, 0.324462890625, 4.42578125, 0.0472412109375, 2.19140625, 0.0026149749755859375, 0.335205078125], "tokens": [647, 4004, 442, 1212, 280, 2163, 32, 25657, 2931, 473]}
{"line_number": 274, "line_type": "generated", "code": "\n     *   EXPR_RESULT\n     *     NAME A\n     *     VAR\n     *       FOO\n     */\n    ASSIGN() {\n      @Override\n      public void prepare(FunctionInjector injector, Node callNode) {\n        Node assignNode = callNode", "entropy": 0.29931640625, "is_bug_line": false, "sus_score": 0.20801257358446093, "per_token_entropy": [0.2105712890625, 1.4208984375, 1.7001953125, 0.95068359375, 0.00046062469482421875, 0.0025539398193359375, 0.058319091796875, 0.02691650390625, 0.00273895263671875, 0.00635528564453125, 0.66650390625, 0.13818359375, 0.0716552734375, 0.0701904296875, 0.016265869140625, 1.9833984375, 0.48046875, 0.051788330078125, 0.0186004638671875, 0.66796875, 0.0011301040649414062, 0.51123046875, 0.305419921875, 0.00650787353515625, 0.367919921875, 0.00238800048828125, 1.8994140625, 0.0008454322814941406, 0.0243072509765625, 0.01143646240234375, 0.00016605854034423828, 0.0009627342224121094, 0.00731658935546875, 0.02789306640625, 0.004070281982421875, 0.0008416175842285156, 0.006061553955078125, 4.6372413635253906e-05, 0.00019979476928710938, 8.571147918701172e-05, 0.0007319450378417969, 0.00473785400390625, 0.0016145706176757812, 0.0002536773681640625, 0.00322723388671875, 0.05767822265625, 1.0185546875, 1.4951171875, 0.96142578125, 0.012969970703125, 0.291748046875, 0.00041413307189941406], "tokens": [275, 319, 261, 2783, 2978, 81, 6383, 275, 319, 262, 8912, 399, 275, 319, 262, 10244, 275, 319, 958, 506, 6223, 275, 569, 284, 32397, 3479, 346, 301, 397, 477, 1788, 397, 562, 763, 11656, 26, 2447, 26711, 44656, 30, 4004, 1476, 1212, 27, 301, 291, 4004, 5313, 1212, 280, 1476, 1212]}
{"line_number": 275, "line_type": "original", "code": "      Preconditions.checkArgument(returnNode.isReturn());", "entropy": 2.6796875, "is_bug_line": false, "sus_score": 0.20801257358446093, "per_token_entropy": [3.06640625, 15.0, 0.01393890380859375, 0.00873565673828125, 1.3388671875, 0.0379638671875, 6.57421875, 0.432861328125, 0.1456298828125, 0.3984375, 5.07421875, 0.06829833984375], "tokens": [647, 40596, 32, 1553, 3484, 26, 601, 1212, 32, 297, 2891, 1035]}
{"line_number": 275, "line_type": "generated", "code": "\n\n    /**\n     * A call as the right-hand side of an assignment. For example: \"a =\n     * 1 + foo();\".\n     *   EXPR_RESULT\n     *     NAME A\n     *     BINARY\n     *       1\n     *", "entropy": 0.402587890625, "is_bug_line": false, "sus_score": 0.20801257358446093, "per_token_entropy": [1.30078125, 0.10614013671875, 0.0187835693359375, 0.0011968612670898438, 1.3427734375, 1.2607421875, 0.642578125, 0.99609375, 1.7197265625, 0.62939453125, 0.032562255859375, 0.3173828125, 0.047454833984375, 0.08905029296875, 0.1776123046875, 0.43603515625, 0.1693115234375, 0.006328582763671875, 0.025146484375, 0.609375, 0.07623291015625, 0.37890625, 0.92431640625, 0.00037598609924316406, 2.296875, 0.46728515625, 1.0673828125, 0.0435791015625, 0.08502197265625, 0.07904052734375, 0.08929443359375, 0.00792694091796875, 0.052978515625, 0.0865478515625, 8.821487426757812e-06, 0.05828857421875, 0.0184173583984375, 0.01117706298828125, 0.0003020763397216797, 0.0078887939453125, 1.3408203125, 0.0418701171875, 0.004314422607421875, 0.00128173828125, 0.058624267578125, 2.111328125, 0.29345703125, 0.002834320068359375, 1.337890625, 0.0104217529296875, 0.0469970703125, 0.00019443035125732422], "tokens": [446, 1022, 275, 319, 399, 1476, 619, 322, 2091, 31, 4668, 5209, 432, 600, 13807, 32, 2616, 2280, 44, 313, 83, 280, 275, 319, 225, 35, 474, 9214, 473, 2296, 275, 319, 261, 2783, 2978, 81, 6383, 275, 319, 262, 8912, 399, 275, 319, 262, 44129, 275, 319, 351, 35, 275, 319]}
{"line_number": 278, "line_type": "original", "code": "      Node safeReturnNode = returnNode.cloneTree();", "entropy": 1.5205078125, "is_bug_line": false, "sus_score": 0.20801257358446093, "per_token_entropy": [3.857421875, 1.55078125, 3.013671875, 1.4453125, 0.1103515625, 0.046600341796875, 6.6796875, 0.263671875, 0.255126953125, 0.0298004150390625, 0.96630859375, 0.0279388427734375], "tokens": [647, 4004, 10061, 2891, 1212, 280, 442, 1212, 32, 6358, 3350, 473]}
{"line_number": 278, "line_type": "generated", "code": "\n      }\n    },\n\n    /**\n     * An assignment, where the result of the call is assigned to a qualified\n     * name. For example: \"a.b = foo();\".\n     *   EXPR_RESULT\n     *     GETPROP\n     *      ", "entropy": 0.107666015625, "is_bug_line": false, "sus_score": 0.20801257358446093, "per_token_entropy": [1.2998046875, 0.00843048095703125, 0.030914306640625, 0.02630615234375, 0.05462646484375, 0.005855560302734375, 0.0019893646240234375, 0.00030159950256347656, 0.457763671875, 0.12152099609375, 0.303955078125, 0.0247344970703125, 0.0236663818359375, 0.0882568359375, 0.0222625732421875, 0.00887298583984375, 0.01277923583984375, 0.0204010009765625, 0.055816650390625, 0.0299835205078125, 0.41796875, 1.125, 0.0419921875, 0.00032830238342285156, 0.037353515625, 0.1484375, 0.06597900390625, 0.0024261474609375, 0.0172271728515625, 0.006214141845703125, 0.10797119140625, 0.01251220703125, 0.037109375, 0.1361083984375, 0.00909423828125, 0.0113677978515625, 0.020751953125, 0.0289459228515625, 0.01026153564453125, 0.04437255859375, 0.032196044921875, 2.3484230041503906e-05, 0.0045318603515625, 0.0042572021484375, 0.003566741943359375, 0.00029158592224121094, 0.004993438720703125, 0.01157379150390625, 0.037353515625, 0.61083984375, 0.0020694732666015625, 0.0069732666015625], "tokens": [397, 320, 284, 801, 446, 1022, 275, 319, 2244, 13807, 30, 2154, 322, 1056, 432, 322, 1476, 438, 11012, 372, 312, 16793, 275, 319, 636, 32, 2616, 2280, 44, 313, 83, 32, 84, 280, 9214, 473, 2296, 275, 319, 261, 2783, 2978, 81, 6383, 275, 319, 262, 6272, 15262, 275, 319, 958]}
{"line_number": 279, "line_type": "original", "code": "      Node inlineResult = FunctionArgumentInjector.inject(", "entropy": 1.927734375, "is_bug_line": false, "sus_score": 0.20801257358446093, "per_token_entropy": [4.34375, 3.166015625, 6.83984375, 0.2117919921875, 0.2340087890625, 4.09375, 0.26123046875, 0.0037784576416015625, 0.0498046875, 0.93896484375, 1.0625], "tokens": [647, 4004, 4447, 1394, 280, 4540, 3484, 26711, 32, 10281, 26]}
{"line_number": 279, "line_type": "generated", "code": "\n      }\n    },\n\n    /**\n     * An assignment, where the result of the call is assigned to a qualified\n     * name. For example: \"a.b = foo();\".\n     *   EXPR_RESULT\n     *     GETPROP\n     *      ", "entropy": 0.09210205078125, "is_bug_line": false, "sus_score": 0.20801257358446093, "per_token_entropy": [0.1951904296875, 0.031402587890625, 0.043212890625, 0.07562255859375, 0.095703125, 0.00818634033203125, 0.0027751922607421875, 0.0009164810180664062, 0.50048828125, 0.1380615234375, 0.30517578125, 0.024139404296875, 0.0238800048828125, 0.09307861328125, 0.0211029052734375, 0.0085601806640625, 0.01296234130859375, 0.020294189453125, 0.05731201171875, 0.0296173095703125, 0.42236328125, 1.1767578125, 0.05157470703125, 0.0004429817199707031, 0.0361328125, 0.149169921875, 0.063720703125, 0.00237274169921875, 0.0173797607421875, 0.006389617919921875, 0.113525390625, 0.0139617919921875, 0.0364990234375, 0.146484375, 0.00954437255859375, 0.011932373046875, 0.0208282470703125, 0.026763916015625, 0.01180267333984375, 0.046051025390625, 0.03314208984375, 1.990795135498047e-05, 0.0031948089599609375, 0.004764556884765625, 0.003963470458984375, 0.00041556358337402344, 0.005908966064453125, 0.01300811767578125, 0.03900146484375, 0.62353515625, 0.002536773681640625, 0.0078887939453125], "tokens": [397, 320, 284, 801, 446, 1022, 275, 319, 2244, 13807, 30, 2154, 322, 1056, 432, 322, 1476, 438, 11012, 372, 312, 16793, 275, 319, 636, 32, 2616, 2280, 44, 313, 83, 32, 84, 280, 9214, 473, 2296, 275, 319, 261, 2783, 2978, 81, 6383, 275, 319, 262, 6272, 15262, 275, 319, 958]}
