{"line_number": 731, "line_type": "original", "code": "            return CanInlineResult.NO;", "entropy": 3.013671875, "is_bug_line": true, "sus_score": 0.7905694150420948, "per_token_entropy": [8.4453125, 4.078125, 11.125, 0.0016431808471679688, 0.0009417533874511719, 0.0031909942626953125, 0.44873046875, 0.01155853271484375], "tokens": [1468, 442, 5477, 10144, 1394, 32, 2576, 45]}
{"line_number": 731, "line_type": "generated", "code": "\n    }\n\n    if (referencesUsingBlockInlining > 0) {\n      // If there are any references using block inlining,\n      // then we should not inline.\n      return false;\n    }\n\n    // TODO(johnlenz): Implement this.\n   ", "entropy": 0.703125, "is_bug_line": true, "sus_score": 0.7905694150420948, "per_token_entropy": [0.533203125, 0.01529693603515625, 0.32421875, 1.3720703125, 0.076171875, 1.2509765625, 0.308837890625, 0.00016117095947265625, 9.5367431640625e-07, 1.046875, 0.467529296875, 0.144287109375, 0.2890625, 0.0008487701416015625, 0.07061767578125, 1.0439453125, 1.947265625, 1.5, 0.2197265625, 1.40625, 1.2021484375, 1.5126953125, 0.2626953125, 0.081298828125, 0.002429962158203125, 0.66259765625, 1.642578125, 0.005168914794921875, 1.3310546875, 2.103515625, 2.837890625, 1.3994140625, 0.57177734375, 1.2060546875, 0.30126953125, 0.26806640625, 0.09259033203125, 0.0010061264038085938, 0.017730712890625, 0.00015985965728759766, 0.1776123046875, 0.90087890625, 2.103515625, 0.07098388671875, 0.1092529296875, 0.0021572113037109375, 7.259845733642578e-05, 0.0313720703125, 2.884765625, 1.302734375, 1.2939453125, 0.17236328125], "tokens": [284, 320, 446, 415, 308, 6365, 9515, 2227, 29021, 848, 225, 34, 27, 301, 397, 434, 1670, 2017, 884, 1346, 10647, 1471, 2163, 328, 22914, 30, 397, 434, 1615, 996, 1395, 646, 4447, 32, 397, 442, 901, 45, 284, 320, 446, 434, 4296, 26, 25172, 1657, 108, 711, 10092, 458, 32, 284]}
{"line_number": 730, "line_type": "original", "code": "          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {", "entropy": 2.25390625, "is_bug_line": true, "sus_score": 0.2839809171235324, "per_token_entropy": [6.45703125, 1.9482421875, 0.10662841796875, 5.18359375, 3.25, 0.13671875, 5.00390625, 6.328125, 0.0026531219482421875, 0.003902435302734375, 5.296875, 1.873046875, 4.33203125, 0.767578125, 0.00855255126953125, 0.0404052734375, 3.470703125, 0.26611328125, 0.54296875, 0.060577392578125], "tokens": [2033, 415, 308, 2040, 7427, 20126, 962, 4004, 1733, 32, 3374, 1467, 7427, 33502, 1558, 26, 85, 1765, 490, 301]}
{"line_number": 730, "line_type": "generated", "code": "\n        if (isRemovable) {\n          // If the call to the function is removable,\n          // then it is safe to inline the function.\n          return true;\n        }\n      }\n\n      if (ref.mode == InliningMode.NORMAL)", "entropy": 0.7353515625, "is_bug_line": true, "sus_score": 0.2839809171235324, "per_token_entropy": [0.94921875, 1.388671875, 0.119384765625, 1.97265625, 0.1300048828125, 5.53131103515625e-05, 0.367431640625, 0.004917144775390625, 0.0682373046875, 1.56640625, 2.37109375, 1.0869140625, 2.376953125, 2.802734375, 0.459228515625, 0.324951171875, 0.67529296875, 0.63427734375, 0.0007791519165039062, 1.017578125, 2.072265625, 0.00896453857421875, 1.3486328125, 1.6904296875, 0.9345703125, 1.943359375, 0.051971435546875, 0.291748046875, 1.1162109375, 0.40869140625, 1.6474609375, 0.0653076171875, 0.70361328125, 0.046234130859375, 0.0005908012390136719, 0.01154327392578125, 6.4849853515625e-05, 0.748046875, 0.002346038818359375, 1.369140625, 0.5869140625, 0.142333984375, 0.79443359375, 0.006389617919921875, 0.82373046875, 0.23095703125, 0.0056915283203125, 0.00015246868133544922, 9.66787338256836e-05, 5.3763389587402344e-05, 2.65234375, 0.2227783203125], "tokens": [291, 415, 308, 297, 25346, 444, 27, 301, 616, 434, 1670, 322, 1476, 372, 322, 667, 438, 10606, 444, 30, 616, 434, 1615, 561, 438, 10061, 372, 4447, 322, 667, 32, 616, 442, 861, 45, 291, 320, 397, 320, 1687, 415, 308, 612, 32, 2816, 610, 701, 22914, 2101, 32, 15644, 27]}
{"line_number": 729, "line_type": "original", "code": "        if (cArg != null) {", "entropy": 1.8330078125, "is_bug_line": false, "sus_score": 0.2795084971874737, "per_token_entropy": [5.2578125, 1.7236328125, 0.170654296875, 6.6875, 0.84130859375, 1.4111328125, 0.0034694671630859375, 0.360595703125, 0.036865234375], "tokens": [351, 415, 308, 85, 1765, 863, 744, 27, 301]}
{"line_number": 729, "line_type": "generated", "code": "\n        referencesUsingBlockInlining++;\n      } else if (checkModules) {\n        // TODO(johnlenz): This is a hack to avoid inlining a function\n        // that references a global from another module.\n        // This should be handled better.\n       ", "entropy": 0.83349609375, "is_bug_line": false, "sus_score": 0.2795084971874737, "per_token_entropy": [0.1470947265625, 0.77880859375, 0.00031685829162597656, 5.8531761169433594e-05, 1.9073486328125e-06, 0.10711669921875, 0.422119140625, 0.0002605915069580078, 0.64111328125, 0.59130859375, 0.042205810546875, 1.328125, 0.0005640983581542969, 0.517578125, 0.0008587837219238281, 0.1029052734375, 1.3994140625, 2.337890625, 0.0426025390625, 0.045013427734375, 0.0024051666259765625, 0.0001302957534790039, 0.02142333984375, 3.11328125, 1.787109375, 1.4658203125, 1.8564453125, 0.7646484375, 1.96875, 1.787109375, 0.0258331298828125, 2.15234375, 0.63916015625, 1.0419921875, 0.0009832382202148438, 0.83154296875, 1.6455078125, 1.15625, 1.7666015625, 2.3828125, 0.5810546875, 0.0802001953125, 0.409423828125, 0.5546875, 0.45654296875, 2.21875, 1.2685546875, 0.353271484375, 2.259765625, 1.2099609375, 0.8671875, 0.154052734375], "tokens": [291, 10647, 9515, 2227, 29021, 3334, 397, 320, 813, 415, 308, 1553, 12242, 27, 301, 291, 434, 4296, 26, 25172, 1657, 108, 711, 1348, 438, 312, 16445, 372, 7358, 328, 22914, 312, 667, 291, 434, 688, 10647, 312, 3649, 645, 4674, 2297, 32, 291, 434, 1348, 1395, 526, 13744, 6085, 32, 291]}
{"line_number": 728, "line_type": "original", "code": "      if (fnParam != null) {", "entropy": 2.00390625, "is_bug_line": false, "sus_score": 0.25819888974716115, "per_token_entropy": [4.55078125, 0.66552734375, 0.16650390625, 4.15625, 7.4140625, 0.6796875, 0.0118255615234375, 0.339599609375, 0.043487548828125], "tokens": [647, 415, 308, 3359, 3180, 863, 744, 27, 301]}
{"line_number": 728, "line_type": "generated", "code": "\n      // Check if the reference is in a removable module.\n      if (checkModules) {\n        JSModule refModule = moduleGraph.getModuleForNode(ref.getNode());\n        if (refModule!= null && refModule!= fnModule\n            &&", "entropy": 0.38671875, "is_bug_line": false, "sus_score": 0.25819888974716115, "per_token_entropy": [0.28857421875, 1.3623046875, 2.05859375, 0.580078125, 0.5576171875, 0.90869140625, 0.45263671875, 1.3408203125, 0.94140625, 0.407958984375, 0.00029730796813964844, 0.9072265625, 0.50390625, 0.062225341796875, 0.2939453125, 0.0283203125, 0.06585693359375, 0.00044727325439453125, 0.64111328125, 0.0015125274658203125, 0.01477813720703125, 0.841796875, 0.0037021636962890625, 0.89208984375, 0.00815582275390625, 0.0045318603515625, 0.1309814453125, 0.0018711090087890625, 0.0013942718505859375, 0.0789794921875, 0.52978515625, 1.44921875, 0.0022525787353515625, 0.044158935546875, 0.001949310302734375, 0.0772705078125, 0.042388916015625, 0.06268310546875, 0.10760498046875, 0.215576171875, 0.244384765625, 0.00247955322265625, 0.30810546875, 0.243896484375, 0.309326171875, 0.6708984375, 0.0010089874267578125, 1.4033203125, 0.00968170166015625, 0.0026073455810546875, 0.98828125, 0.00412750244140625], "tokens": [397, 434, 3456, 415, 322, 4121, 438, 328, 312, 10606, 444, 2297, 32, 397, 415, 308, 1553, 12242, 27, 301, 291, 7750, 2459, 2488, 2459, 280, 2297, 3406, 32, 48639, 1562, 1212, 26, 612, 32, 17699, 1035, 291, 415, 308, 612, 2459, 863, 744, 962, 2488, 2459, 863, 2771, 2459, 324, 962]}
{"line_number": 866, "line_type": "original", "code": "      callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);", "entropy": 1.220703125, "is_bug_line": false, "sus_score": 0.19518001458970666, "per_token_entropy": [3.990234375, 9.8515625, 0.59326171875, 1.4677734375, 2.41015625, 6.08984375, 0.76318359375, 0.681640625, 4.12109375, 0.0007123947143554688, 0.0260009765625, 2.7418136596679688e-05, 0.042938232421875, 0.005645751953125, 0.0008683204650878906, 0.000614166259765625, 0.2666015625, 0.140869140625, 5.07421875, 0.2178955078125, 0.007686614990234375, 0.258056640625, 0.102783203125, 0.004512786865234375, 0.0160675048828125, 0.0260009765625, 2.634765625, 0.00010669231414794922, 0.00724029541015625, 0.01027679443359375, 0.0004987716674804688, 0.2529296875], "tokens": [647, 1476, 9375, 1454, 308, 1516, 3080, 319, 8912, 81, 1197, 635, 81, 4128, 2331, 1757, 27, 474, 1833, 1516, 3080, 429, 225, 35, 27, 319, 19531, 1400, 81, 1197, 635, 293]}
{"line_number": 866, "line_type": "generated", "code": "\n      // NOTE 3: The aliasing overhead is currently an under-estimate,\n      // as some parameters are aliased because of the parameters used.\n      // Perhaps we should just assume all parameters will be aliased?\n      final int aliasOverhead =", "entropy": 0.255859375, "is_bug_line": false, "sus_score": 0.19518001458970666, "per_token_entropy": [0.6611328125, 1.4404296875, 1.158203125, 0.85498046875, 0.058624267578125, 0.01033782958984375, 1.4453125, 2.162109375, 0.23486328125, 0.286865234375, 0.29541015625, 0.40087890625, 0.1580810546875, 0.12457275390625, 0.00931549072265625, 0.0013523101806640625, 0.1365966796875, 0.0295867919921875, 0.0007925033569335938, 0.11181640625, 0.424072265625, 0.287109375, 0.0494384765625, 0.049835205078125, 5.245208740234375e-06, 0.0401611328125, 0.01190948486328125, 0.038299560546875, 0.1688232421875, 0.009613037109375, 0.01409149169921875, 0.044586181640625, 0.07269287109375, 0.0173492431640625, 0.0015544891357421875, 0.0020656585693359375, 0.0014209747314453125, 0.0017681121826171875, 0.0025501251220703125, 0.004241943359375, 0.01061248779296875, 0.0006918907165527344, 0.0008335113525390625, 3.2186508178710938e-06, 0.005687713623046875, 0.286865234375, 1.03125, 0.00273895263671875, 0.417236328125, 0.68603515625, 0.001644134521484375, 0.040679931640625], "tokens": [397, 434, 12114, 225, 37, 44, 886, 8813, 299, 28359, 438, 5927, 600, 1531, 31, 26892, 30, 397, 434, 619, 1629, 3377, 884, 11934, 16109, 3301, 432, 322, 3377, 1654, 32, 397, 434, 32292, 996, 1395, 2258, 10014, 1169, 3377, 1098, 526, 11934, 16109, 49, 397, 1158, 629, 8813, 3966, 1816, 280]}
{"line_number": 699, "line_type": "original", "code": "      Preconditions.checkState(block.hasOneChild());", "entropy": 2.814453125, "is_bug_line": true, "sus_score": 0.19462473604038075, "per_token_entropy": [4.953125, 7.8046875, 0.0013341903686523438, 0.0282135009765625, 0.051116943359375, 0.01873779296875, 11.515625, 0.384033203125, 6.12109375, 0.0011005401611328125, 0.069091796875], "tokens": [647, 40596, 32, 1553, 1078, 26, 1521, 32, 41906, 2931, 1035]}
{"line_number": 699, "line_type": "generated", "code": "\n      if (cArg!= null) {\n        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }", "entropy": 0.07086181640625, "is_bug_line": true, "sus_score": 0.19462473604038075, "per_token_entropy": [0.124755859375, 0.1842041015625, 0.0137176513671875, 0.303466796875, 6.318092346191406e-06, 0.0364990234375, 0.0001533031463623047, 0.408447265625, 0.0005254745483398438, 0.0093841552734375, 0.234130859375, 0.0284423828125, 0.9921875, 0.0001596212387084961, 3.445148468017578e-05, 0.08062744140625, 0.021270751953125, 4.0531158447265625e-06, 4.1961669921875e-05, 0.044189453125, 0.00954437255859375, 0.00313568115234375, 3.0994415283203125e-06, 2.586841583251953e-05, 0.0003962516784667969, 0.0010967254638671875, 1.2993812561035156e-05, 0.004657745361328125, 0.0001386404037475586, 0.0089569091796875, 0.0301513671875, 0.0013113021850585938, 3.24249267578125e-05, 9.5367431640625e-07, 0.0001093149185180664, 0.009674072265625, 0.003021240234375, 0.0021877288818359375, 1.0132789611816406e-05, 0.64306640625, 0.366455078125, 5.7220458984375e-06, 0.00034427642822265625, 0.0008029937744140625, 9.5367431640625e-07, 5.9604644775390625e-05, 3.4928321838378906e-05, 0.00144195556640625, 0.018280029296875, 8.666515350341797e-05, 0.09466552734375, 0.001010894775390625], "tokens": [397, 415, 308, 85, 1765, 863, 744, 27, 301, 291, 415, 308, 2040, 7427, 20126, 962, 4004, 1733, 32, 3374, 1467, 7427, 33502, 1558, 26, 85, 1765, 490, 301, 616, 442, 5477, 10144, 1394, 32, 2576, 45, 291, 320, 291, 281, 1765, 280, 281, 1765, 32, 23017, 473, 397, 320, 284, 320]}
{"line_number": 700, "line_type": "original", "code": "      Node stmt = block.getFirstChild();", "entropy": 2.689453125, "is_bug_line": true, "sus_score": 0.19462473604038075, "per_token_entropy": [6.69921875, 4.4296875, 4.8828125, 0.0848388671875, 7.3046875, 0.0477294921875, 0.74755859375, 0.0003426074981689453, 0.0112152099609375], "tokens": [647, 4004, 16684, 280, 2163, 32, 25657, 2931, 473]}
{"line_number": 700, "line_type": "generated", "code": "\n        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n        // Move to the next argument.\n        cArg = cArg.getNext();\n      }\n    }\n\n   ", "entropy": 0.11566162109375, "is_bug_line": true, "sus_score": 0.19462473604038075, "per_token_entropy": [0.07342529296875, 0.368408203125, 0.031646728515625, 1.0908203125, 0.0004096031188964844, 6.99758529663086e-05, 0.1884765625, 0.041717529296875, 4.601478576660156e-05, 4.00543212890625e-05, 0.1329345703125, 0.01004791259765625, 0.00287628173828125, 5.841255187988281e-06, 1.621246337890625e-05, 0.0005197525024414062, 0.0031414031982421875, 5.0067901611328125e-06, 0.00705718994140625, 0.0002627372741699219, 0.0088653564453125, 0.037994384765625, 0.002376556396484375, 0.00014352798461914062, 4.0531158447265625e-06, 5.447864532470703e-05, 0.01000213623046875, 0.00283050537109375, 0.002361297607421875, 0.00027871131896972656, 0.7080078125, 1.4658203125, 0.64013671875, 0.0288238525390625, 0.01409149169921875, 0.006122589111328125, 0.5302734375, 0.1920166015625, 0.00846099853515625, 0.01293182373046875, 9.775161743164062e-06, 0.000316619873046875, 0.001384735107421875, 2.574920654296875e-05, 3.7670135498046875e-05, 4.792213439941406e-05, 0.002361297607421875, 0.034515380859375, 7.271766662597656e-05, 0.02581787109375, 0.00028705596923828125, 0.327880859375], "tokens": [291, 415, 308, 2040, 7427, 20126, 962, 4004, 1733, 32, 3374, 1467, 7427, 33502, 1558, 26, 85, 1765, 490, 301, 616, 442, 5477, 10144, 1394, 32, 2576, 45, 291, 320, 291, 434, 11530, 372, 322, 2354, 2793, 32, 291, 281, 1765, 280, 281, 1765, 32, 23017, 473, 397, 320, 284, 320, 446]}
{"line_number": 701, "line_type": "original", "code": "      if (stmt.isReturn()) {", "entropy": 2.48046875, "is_bug_line": true, "sus_score": 0.19462473604038075, "per_token_entropy": [6.62890625, 1.9599609375, 0.169921875, 7.0859375, 0.283935546875, 0.88916015625, 4.7578125, 0.5107421875, 0.044403076171875], "tokens": [647, 415, 308, 6404, 32, 297, 2891, 1157, 301]}
{"line_number": 701, "line_type": "generated", "code": "\n          hasSideEffects = true;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    if (hasSideEffects) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (callNode.getParent", "entropy": 0.25830078125, "is_bug_line": true, "sus_score": 0.19462473604038075, "per_token_entropy": [0.277099609375, 0.677734375, 0.00029206275939941406, 0.0001577138900756836, 0.003376007080078125, 0.01320648193359375, 0.0042572021484375, 0.215576171875, 0.0036525726318359375, 0.34814453125, 0.1107177734375, 2.86102294921875e-06, 0.00023412704467773438, 0.0005745887756347656, 3.7670135498046875e-05, 3.2782554626464844e-05, 3.8504600524902344e-05, 0.001194000244140625, 0.0231170654296875, 0.0004749298095703125, 0.04473876953125, 0.0004227161407470703, 0.354248046875, 0.98095703125, 0.196044921875, 0.10052490234375, 0.003482818603515625, 2.5987625122070312e-05, 0.159423828125, 0.0015573501586914062, 0.046722412109375, 1.7998046875, 1.36328125, 0.0279083251953125, 0.09259033203125, 0.0016841888427734375, 0.0001932382583618164, 0.020263671875, 1.8603515625, 0.69189453125, 0.06103515625, 0.0072174072265625, 0.0227203369140625, 0.01520538330078125, 0.03436279296875, 0.049163818359375, 0.6728515625, 0.271240234375, 1.5302734375, 0.00899505615234375, 0.01131439208984375, 1.326171875], "tokens": [616, 1401, 7427, 20126, 280, 861, 45, 291, 320, 291, 281, 1765, 280, 281, 1765, 32, 23017, 473, 397, 320, 284, 320, 446, 415, 308, 2040, 7427, 20126, 27, 301, 397, 434, 4296, 26, 25172, 1657, 108, 711, 6318, 7084, 458, 623, 312, 786, 32, 397, 415, 308, 1851, 1212, 32, 18789]}
{"line_number": 702, "line_type": "original", "code": "        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);", "entropy": 1.37890625, "is_bug_line": true, "sus_score": 0.19462473604038075, "per_token_entropy": [4.44921875, 2.70703125, 0.00044226646423339844, 0.00022351741790771484, 0.00930023193359375, 7.30078125, 0.000926971435546875, 0.000766754150390625, 1.9873046875, 0.28955078125, 0.0023975372314453125, 0.00015163421630859375, 0.00970458984375, 6.26171875, 2.703125, 1.015625, 0.004123687744140625, 0.61572265625, 0.186767578125, 0.03997802734375], "tokens": [351, 1401, 7427, 20126, 280, 4004, 1733, 32, 17302, 9037, 7427, 20126, 26, 6404, 32, 25657, 2931, 1026, 8980, 293]}
{"line_number": 702, "line_type": "generated", "code": "\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function", "entropy": 0.11358642578125, "is_bug_line": true, "sus_score": 0.19462473604038075, "per_token_entropy": [0.11810302734375, 0.0081024169921875, 0.60595703125, 0.268798828125, 4.5299530029296875e-06, 0.00024819374084472656, 0.0007510185241699219, 3.1113624572753906e-05, 5.1021575927734375e-05, 6.413459777832031e-05, 0.0017881393432617188, 0.037261962890625, 0.0003657341003417969, 0.07916259765625, 0.0006279945373535156, 0.415771484375, 0.5009765625, 0.044891357421875, 6.663799285888672e-05, 0.00013875961303710938, 0.0032329559326171875, 0.07513427734375, 0.0265655517578125, 0.09674072265625, 0.0007085800170898438, 0.3857421875, 0.51123046875, 0.089111328125, 0.00023603439331054688, 0.78564453125, 0.1583251953125, 0.30859375, 0.1824951171875, 0.2449951171875, 0.016510009765625, 0.07305908203125, 0.006107330322265625, 0.329833984375, 0.040557861328125, 0.0294952392578125, 0.03369140625, 0.01302337646484375, 0.166015625, 0.0127410888671875, 0.005443572998046875, 0.2042236328125, 0.0007309913635253906, 0.0148773193359375, 0.0010042190551757812, 0.0013341903686523438, 0.0031585693359375, 0.0017652511596679688], "tokens": [291, 320, 291, 281, 1765, 280, 281, 1765, 32, 23017, 473, 397, 320, 284, 320, 446, 442, 5477, 10144, 1394, 32, 19354, 45, 334, 320, 719, 1022, 664, 319, 34450, 4946, 312, 667, 883, 526, 328, 14145, 821, 312, 8409, 1476, 4755, 32, 664, 319, 5802, 884, 10204, 15261, 688, 322, 667]}
{"line_number": 725, "line_type": "original", "code": "    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();", "entropy": 0.87939453125, "is_bug_line": false, "sus_score": 0.18257418583505536, "per_token_entropy": [4.13671875, 4.4140625, 2.29296875, 1.2275390625, 0.093505859375, 3.193359375, 0.0024623870849609375, 0.0013265609741210938, 0.1199951171875, 0.1025390625, 0.047576904296875, 0.002826690673828125, 0.03277587890625, 0.0011501312255859375, 0.12158203125, 0.0287628173828125, 0.0006856918334960938, 0.005859375], "tokens": [264, 4004, 2771, 3180, 280, 4004, 1733, 32, 371, 2447, 3675, 26, 3359, 1212, 547, 25657, 2931, 473]}
{"line_number": 725, "line_type": "generated", "code": "\n    for (Reference ref : refs) {\n      Node n = ref.getNode();\n      if (n.getParent().isAssign()) {\n        // If the reference is part of an assignment, check if the RHS is\n        // a constant.\n        if (", "entropy": 0.67138671875, "is_bug_line": false, "sus_score": 0.18257418583505536, "per_token_entropy": [0.09088134765625, 0.238037109375, 0.0036830902099609375, 0.04815673828125, 0.2025146484375, 0.045928955078125, 0.0045318603515625, 0.0013628005981445312, 0.0010042190551757812, 0.042327880859375, 0.85107421875, 0.81640625, 0.00881195068359375, 0.0421142578125, 0.0004303455352783203, 0.1270751953125, 0.01236724853515625, 0.354248046875, 0.60888671875, 0.1405029296875, 0.638671875, 0.249755859375, 1.0654296875, 0.25244140625, 0.105224609375, 0.869140625, 0.1961669921875, 0.0008835792541503906, 0.00897216796875, 1.126953125, 2.830078125, 0.69677734375, 2.080078125, 0.162353515625, 2.7578125, 0.0038509368896484375, 0.2247314453125, 0.129638671875, 0.89306640625, 2.767578125, 0.7119140625, 0.66748046875, 3.2265625, 1.3701171875, 1.025390625, 0.0006837844848632812, 1.220703125, 2.599609375, 1.166015625, 0.55712890625, 1.4775390625, 0.1932373046875], "tokens": [284, 436, 308, 3564, 2488, 499, 29284, 27, 301, 397, 4004, 310, 280, 2488, 32, 17699, 473, 397, 415, 308, 96, 32, 18789, 922, 297, 9079, 1157, 301, 291, 434, 1670, 322, 4121, 438, 1742, 432, 600, 13807, 30, 1505, 415, 322, 40892, 438, 291, 434, 312, 8082, 32, 291, 415, 308]}
{"line_number": 726, "line_type": "original", "code": "    while (cArg != null || fnParam != null) {", "entropy": 1.1728515625, "is_bug_line": false, "sus_score": 0.18257418583505536, "per_token_entropy": [3.552734375, 5.203125, 0.0672607421875, 3.0625, 0.91162109375, 0.0086212158203125, 0.0009288787841796875, 3.5, 0.044647216796875, 0.0099029541015625, 0.002544403076171875, 0.0004949569702148438, 0.0290374755859375, 0.036224365234375], "tokens": [264, 2218, 308, 85, 1765, 863, 744, 1276, 2771, 3180, 863, 744, 27, 301]}
{"line_number": 726, "line_type": "generated", "code": "\n      if (checkModules) {\n        // Check if the function is in a module that is not the current module.\n        if (moduleGraph.dependsOn(\n            fnModule, compiler.getModuleGraph().getModuleOf(currentModule))) {\n          return false", "entropy": 0.771484375, "is_bug_line": false, "sus_score": 0.18257418583505536, "per_token_entropy": [0.9599609375, 1.236328125, 0.08612060546875, 0.8125, 0.00421905517578125, 0.28369140625, 0.00234222412109375, 0.03857421875, 1.0146484375, 1.908203125, 0.66845703125, 0.9296875, 1.056640625, 0.74609375, 1.9228515625, 1.390625, 1.6171875, 0.76806640625, 0.88916015625, 1.4130859375, 1.552734375, 1.431640625, 0.3154296875, 0.333984375, 0.0252838134765625, 1.890625, 0.3984375, 1.470703125, 0.01198577880859375, 0.03668212890625, 1.291015625, 0.0005807876586914062, 0.1793212890625, 2.19140625, 0.7119140625, 0.0738525390625, 0.419921875, 1.0048828125, 0.0003631114959716797, 0.1888427734375, 0.60400390625, 0.0020999908447265625, 0.249755859375, 1.0009765625, 2.154296875, 3.201171875, 0.3330078125, 0.09246826171875, 0.00041604042053222656, 0.0301055908203125, 0.4755859375, 0.7041015625], "tokens": [397, 415, 308, 1553, 12242, 27, 301, 291, 434, 3456, 415, 322, 667, 438, 328, 312, 2297, 688, 438, 646, 322, 1550, 2297, 32, 291, 415, 308, 1647, 3406, 32, 27263, 1484, 26, 324, 2771, 2459, 30, 8980, 32, 48639, 3406, 922, 48639, 1419, 26, 1700, 2459, 2610, 301, 616, 442, 901]}
{"line_number": 695, "line_type": "original", "code": "    Node block = fnNode.getLastChild();", "entropy": 2.173828125, "is_bug_line": false, "sus_score": 0.1801874925391118, "per_token_entropy": [5.5234375, 7.109375, 6.515625, 0.76171875, 1.361328125, 0.076416015625, 0.078857421875, 0.12152099609375, 0.0005502700805664062, 0.185546875], "tokens": [264, 4004, 2163, 280, 2771, 1212, 32, 20197, 2931, 473]}
{"line_number": 695, "line_type": "generated", "code": "\n      }\n\n      // Move to the next argument.\n      if (cArg!= null) {\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  /**\n   * Determines whether a function can be", "entropy": 0.1466064453125, "is_bug_line": false, "sus_score": 0.1801874925391118, "per_token_entropy": [0.1827392578125, 0.010162353515625, 0.54736328125, 0.268310546875, 0.3359375, 0.0199432373046875, 0.0097503662109375, 0.01366424560546875, 0.60107421875, 0.233642578125, 0.0283660888671875, 0.394775390625, 0.00902557373046875, 0.041839599609375, 1.0609626770019531e-05, 0.035369873046875, 0.0001806020736694336, 0.0504150390625, 0.001468658447265625, 0.006439208984375, 0.166015625, 1.6927719116210938e-05, 0.0003097057342529297, 0.0056304931640625, 3.0279159545898438e-05, 9.751319885253906e-05, 0.0007114410400390625, 0.00728607177734375, 0.434814453125, 7.140636444091797e-05, 0.2001953125, 0.0007157325744628906, 0.54443359375, 0.56982421875, 0.044281005859375, 5.793571472167969e-05, 0.00012695789337158203, 0.003948211669921875, 0.05950927734375, 0.02838134765625, 0.10235595703125, 0.0011501312255859375, 0.470458984375, 0.48486328125, 0.0965576171875, 0.0002332925796508789, 0.75, 0.1533203125, 0.306396484375, 0.164306640625, 0.2198486328125, 0.01483917236328125], "tokens": [397, 320, 1687, 434, 11530, 372, 322, 2354, 2793, 32, 397, 415, 308, 85, 1765, 863, 744, 27, 301, 291, 281, 1765, 280, 281, 1765, 32, 23017, 473, 397, 320, 284, 320, 446, 442, 5477, 10144, 1394, 32, 19354, 45, 334, 320, 719, 1022, 664, 319, 34450, 4946, 312, 667, 883, 526]}
{"line_number": 697, "line_type": "original", "code": "    boolean hasSideEffects = false;", "entropy": 2.142578125, "is_bug_line": true, "sus_score": 0.1801874925391118, "per_token_entropy": [5.9921875, 6.8125, 2.17578125, 1.7724609375, 0.0019044876098632812, 0.33056640625, 0.042449951171875, 0.005146026611328125], "tokens": [264, 1905, 1401, 7427, 20126, 280, 901, 45]}
{"line_number": 697, "line_type": "generated", "code": "\n\n      // Move to the next parameter.\n      cArg = cArg.getNext();\n    }", "entropy": 0.25146484375, "is_bug_line": true, "sus_score": 0.1801874925391118, "per_token_entropy": [1.279296875, 0.1846923828125, 0.381103515625, 0.0202178955078125, 0.00836181640625, 0.01015472412109375, 1.837890625, 0.3818359375, 0.0260467529296875, 0.385009765625, 4.649162292480469e-05, 0.0006008148193359375, 0.01259613037109375, 0.0004911422729492188, 0.1497802734375, 0.00012421607971191406, 0.00528717041015625, 0.094482421875, 0.0003962516784667969], "tokens": [1687, 434, 11530, 372, 322, 2354, 3395, 32, 397, 281, 1765, 280, 281, 1765, 32, 23017, 473, 284, 320]}
{"line_number": 698, "line_type": "original", "code": "    if (block.hasChildren()) {", "entropy": 1.951171875, "is_bug_line": true, "sus_score": 0.1801874925391118, "per_token_entropy": [5.890625, 1.0849609375, 0.07659912109375, 8.6796875, 0.154296875, 1.0859375, 0.0123138427734375, 0.5302734375, 0.050140380859375], "tokens": [264, 415, 308, 1521, 32, 2040, 7640, 1157, 301]}
{"line_number": 698, "line_type": "generated", "code": "\n        Preconditions.checkState(cArg!= null);\n        if (NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n        // Move to the next argument.\n        cArg = cArg.", "entropy": 0.16845703125, "is_bug_line": true, "sus_score": 0.1801874925391118, "per_token_entropy": [1.291015625, 0.62109375, 0.00016748905181884766, 0.002719879150390625, 0.0063018798828125, 0.0204925537109375, 0.27783203125, 7.510185241699219e-05, 0.388916015625, 0.0007543563842773438, 0.04425048828125, 0.05206298828125, 0.2266845703125, 0.0276336669921875, 0.6513671875, 4.363059997558594e-05, 1.3113021850585938e-05, 0.465576171875, 0.0231170654296875, 0.01425933837890625, 2.09808349609375e-05, 8.106231689453125e-06, 0.00135040283203125, 0.0030841827392578125, 9.5367431640625e-07, 0.0291290283203125, 0.0009212493896484375, 0.0157012939453125, 0.6044921875, 0.006526947021484375, 4.792213439941406e-05, 1.1324882507324219e-05, 5.614757537841797e-05, 0.0293731689453125, 0.00496673583984375, 0.0122222900390625, 0.0007352828979492188, 0.93896484375, 0.9599609375, 1.125, 0.026947021484375, 0.01447296142578125, 0.00847625732421875, 0.56689453125, 0.2008056640625, 0.0728759765625, 0.0197906494140625, 2.014636993408203e-05, 0.00044465065002441406, 0.0021533966064453125, 3.0279159545898438e-05, 5.137920379638672e-05], "tokens": [291, 40596, 32, 1553, 1078, 26, 85, 1765, 863, 744, 293, 291, 415, 308, 1212, 1733, 32, 3374, 1467, 7427, 33502, 1558, 26, 85, 1765, 490, 301, 616, 442, 5477, 10144, 1394, 32, 2576, 45, 291, 320, 291, 434, 11530, 372, 322, 2354, 2793, 32, 291, 281, 1765, 280, 281, 1765, 32]}
{"line_number": 706, "line_type": "original", "code": "    Node cArg = callNode.getFirstChild().getNext();", "entropy": 1.0380859375, "is_bug_line": false, "sus_score": 0.1801874925391118, "per_token_entropy": [5.60546875, 4.328125, 2.36328125, 0.0926513671875, 0.08807373046875, 0.185546875, 0.08721923828125, 0.0091705322265625, 0.62548828125, 0.0230560302734375, 0.05841064453125, 0.0005435943603515625, 0.0347900390625], "tokens": [264, 4004, 281, 1765, 280, 1476, 1212, 32, 25657, 2931, 922, 23017, 473]}
{"line_number": 706, "line_type": "generated", "code": "\n\n    return CanInlineResult.YES;\n  }", "entropy": 0.1539306640625, "is_bug_line": false, "sus_score": 0.1801874925391118, "per_token_entropy": [0.5888671875, 0.646484375, 0.0831298828125, 5.6743621826171875e-05, 0.0001348257064819336, 0.002117156982421875, 0.12890625, 0.0416259765625, 0.047210693359375, 0.00031495094299316406], "tokens": [446, 442, 5477, 10144, 1394, 32, 19354, 45, 334, 320]}
{"line_number": 711, "line_type": "original", "code": "    if (!callNode.getFirstChild().isName()) {", "entropy": 1.1962890625, "is_bug_line": false, "sus_score": 0.1801874925391118, "per_token_entropy": [2.0625, 2.9140625, 1.400390625, 3.755859375, 0.2083740234375, 0.0151214599609375, 3.439453125, 0.003620147705078125, 0.002658843994140625, 1.2548828125, 0.349609375, 0.1319580078125, 0.01424407958984375], "tokens": [264, 415, 1429, 1851, 1212, 32, 25657, 2931, 922, 297, 558, 1157, 301]}
{"line_number": 711, "line_type": "generated", "code": "\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have", "entropy": 0.0908203125, "is_bug_line": false, "sus_score": 0.1801874925391118, "per_token_entropy": [0.71435546875, 0.10406494140625, 1.037109375, 0.14404296875, 0.462158203125, 0.20556640625, 0.2890625, 0.0237884521484375, 0.10589599609375, 0.0085601806640625, 0.38916015625, 0.04278564453125, 0.042144775390625, 0.03167724609375, 0.0140533447265625, 0.16845703125, 0.06292724609375, 0.07464599609375, 0.278076171875, 0.001125335693359375, 0.017059326171875, 0.001247406005859375, 0.0017652511596679688, 0.003643035888671875, 0.0016527175903320312, 0.006206512451171875, 0.0103607177734375, 0.004360198974609375, 0.0023212432861328125, 0.00479888916015625, 0.006359100341796875, 0.0004620552062988281, 0.0005021095275878906, 0.00030875205993652344, 0.0014934539794921875, 0.0160369873046875, 0.00031447410583496094, 0.00013208389282226562, 0.0005688667297363281, 5.7220458984375e-06, 0.01617431640625, 0.0296783447265625, 0.0035114288330078125, 0.06768798828125, 0.02398681640625, 0.002445220947265625, 0.2012939453125, 0.03125, 0.025421142578125, 0.0257720947265625, 0.00445556640625, 0.01309967041015625], "tokens": [664, 319, 34450, 4946, 312, 667, 883, 526, 328, 14145, 821, 312, 8409, 1476, 4755, 32, 664, 319, 5802, 884, 10204, 15261, 688, 322, 667, 461, 4121, 2298, 7629, 328, 664, 319, 2532, 436, 322, 4442, 372, 526, 328, 14145, 44, 664, 319, 225, 35, 27, 1670, 312, 1476, 1182, 4209, 1159]}
{"line_number": 208, "line_type": "original", "code": "      return canInlineReferenceDirectly(callNode, fnNode);", "entropy": 1.3154296875, "is_bug_line": false, "sus_score": 0.17902871850985821, "per_token_entropy": [5.71875, 0.90869140625, 6.9296875, 0.09295654296875, 1.2646484375, 0.4443359375, 0.00252532958984375, 0.12261962890625, 0.935546875, 0.022216796875, 0.1175537109375, 0.2203369140625, 0.047821044921875, 1.5947265625], "tokens": [647, 442, 883, 10144, 3564, 6997, 631, 26, 1851, 1212, 30, 2771, 1212, 293]}
{"line_number": 208, "line_type": "generated", "code": "\n    return callNode;\n  }\n\n  /**\n   * Inline a function that fulfills the requirements of\n   * canInlineReferenceAsStatementBlock into the call site, replacing only the\n   * CALL node.\n   */\n  private Node inlineFunction(Node callNode", "entropy": 0.124755859375, "is_bug_line": false, "sus_score": 0.17902871850985821, "per_token_entropy": [0.84765625, 0.712890625, 0.533203125, 0.00881195068359375, 0.1444091796875, 0.008026123046875, 0.0001615285873413086, 0.031463623046875, 0.09381103515625, 0.0108795166015625, 0.0006642341613769531, 0.3642578125, 0.061126708984375, 0.044769287109375, 0.2021484375, 0.091552734375, 0.00052642822265625, 0.009765625, 0.005550384521484375, 0.00963592529296875, 0.026153564453125, 0.00033736228942871094, 0.0135345458984375, 0.0028934478759765625, 0.045684814453125, 0.210205078125, 0.03106689453125, 0.0382080078125, 0.1341552734375, 0.04107666015625, 0.0572509765625, 0.01018524169921875, 0.377197265625, 0.221435546875, 1.1826171875, 0.193359375, 0.0330810546875, 0.00027251243591308594, 0.0096588134765625, 0.01088714599609375, 0.2900390625, 0.06292724609375, 0.1064453125, 0.0009508132934570312, 0.09454345703125, 0.0028057098388671875, 0.00031304359436035156, 0.01248931884765625, 0.014434814453125, 0.0689697265625, 0.007007598876953125, 0.007488250732421875], "tokens": [284, 442, 1476, 1212, 45, 334, 320, 719, 1022, 664, 319, 29662, 312, 667, 688, 33224, 101, 322, 10130, 432, 664, 319, 883, 10144, 3564, 1465, 5495, 2227, 1991, 322, 1476, 4755, 30, 27949, 1755, 322, 664, 319, 16084, 1541, 32, 664, 569, 334, 945, 4004, 4447, 2447, 26, 1212, 1476, 1212]}
{"line_number": 691, "line_type": "original", "code": "    if (!isDirectCallNodeReplacementPossible(fnNode)) {", "entropy": 2.8125, "is_bug_line": false, "sus_score": 0.17902871850985821, "per_token_entropy": [5.6484375, 2.25390625, 1.9345703125, 3.384765625, 4.39453125, 1.671875, 5.09765625, 7.96484375, 2.791015625, 0.08447265625, 1.953125, 0.1514892578125, 1.9736328125, 0.06915283203125], "tokens": [264, 415, 1429, 297, 6997, 1853, 1212, 24230, 23708, 26, 3359, 1212, 490, 301]}
{"line_number": 691, "line_type": "generated", "code": "\n          cArg = cArg.getNext();\n        }\n        fnParam = fnParam.getNext();\n      } else {\n        // The function has more arguments than the call, which is not ok.\n        return CanInlineResult.NO;\n      }\n    }", "entropy": 0.393310546875, "is_bug_line": false, "sus_score": 0.17902871850985821, "per_token_entropy": [0.42919921875, 1.537109375, 0.0005984306335449219, 0.0016794204711914062, 0.006923675537109375, 0.00035858154296875, 0.004566192626953125, 5.817413330078125e-05, 0.006923675537109375, 0.25244140625, 0.0012454986572265625, 0.2568359375, 0.07464599609375, 0.00022900104522705078, 0.0008411407470703125, 0.006092071533203125, 1.537799835205078e-05, 9.953975677490234e-05, 6.54458999633789e-05, 0.0033092498779296875, 0.1346435546875, 0.017242431640625, 0.33544921875, 0.537109375, 0.07232666015625, 0.671875, 2.546875, 0.78955078125, 0.75048828125, 0.52685546875, 0.82080078125, 0.1590576171875, 0.53515625, 0.167236328125, 1.9873046875, 3.146484375, 0.81396484375, 1.2587890625, 1.775390625, 0.1302490234375, 0.0609130859375, 0.49658203125, 0.004604339599609375, 2.8848648071289062e-05, 1.0967254638671875e-05, 0.00017714500427246094, 0.057373046875, 0.002307891845703125, 0.01230621337890625, 0.0005774497985839844, 0.052825927734375, 0.0007562637329101562], "tokens": [616, 281, 1765, 280, 281, 1765, 32, 23017, 473, 291, 320, 291, 2771, 3180, 280, 2771, 3180, 32, 23017, 473, 397, 320, 813, 301, 291, 434, 886, 667, 1401, 1829, 4209, 2784, 322, 1476, 30, 1510, 438, 646, 3835, 32, 291, 442, 5477, 10144, 1394, 32, 2576, 45, 397, 320, 284, 320]}
{"line_number": 555, "line_type": "original", "code": "        return true;", "entropy": 3.68359375, "is_bug_line": false, "sus_score": 0.17622684421256035, "per_token_entropy": [8.3984375, 1.560546875, 4.7734375, 0.005645751953125], "tokens": [351, 442, 861, 45]}
{"line_number": 555, "line_type": "generated", "code": "\n\n  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * - It must be a simple call", "entropy": 0.09930419921875, "is_bug_line": false, "sus_score": 0.17622684421256035, "per_token_entropy": [1.3935546875, 0.363037109375, 0.09063720703125, 0.00027751922607421875, 1.0126953125, 0.30029296875, 0.429931640625, 0.257568359375, 0.3837890625, 0.01190948486328125, 0.05621337890625, 0.005512237548828125, 0.1446533203125, 0.033294677734375, 0.020416259765625, 0.039215087890625, 0.00951385498046875, 0.10662841796875, 0.004703521728515625, 0.046478271484375, 0.09814453125, 0.0004215240478515625, 0.0044403076171875, 0.0006213188171386719, 0.0004968643188476562, 0.0016336441040039062, 0.0009250640869140625, 0.0066070556640625, 0.0023670196533203125, 0.001312255859375, 0.0009937286376953125, 0.0018701553344726562, 0.000820159912109375, 6.67572021484375e-05, 0.0001571178436279297, 0.00011944770812988281, 0.001178741455078125, 0.01001739501953125, 0.0001533031463623047, 6.031990051269531e-05, 0.0002779960632324219, 2.0742416381835938e-05, 0.013824462890625, 0.0009093284606933594, 0.004817962646484375, 0.0665283203125, 0.0887451171875, 0.01087188720703125, 0.084716796875, 0.01395416259765625, 0.0229034423828125, 0.012847900390625], "tokens": [719, 1022, 664, 319, 34450, 4946, 312, 667, 883, 526, 328, 14145, 821, 312, 8409, 1476, 4755, 32, 664, 319, 5802, 884, 10204, 15261, 688, 322, 667, 461, 4121, 2298, 7629, 328, 664, 319, 2532, 436, 322, 4442, 372, 526, 328, 14145, 44, 664, 319, 429, 2030, 2298, 526, 312, 4281, 1476]}
{"line_number": 842, "line_type": "original", "code": "      if (blockInlines > 0 && costDeltaBlock > 0) {", "entropy": 1.59375, "is_bug_line": false, "sus_score": 0.1668115312456598, "per_token_entropy": [4.98828125, 3.08984375, 0.097900390625, 9.609375, 0.75927734375, 0.58984375, 1.1162109375, 0.0198516845703125, 0.2020263671875, 2.384765625, 2.216796875, 0.042022705078125, 1.921875, 1.2392578125, 0.206298828125, 0.074951171875, 0.060577392578125, 0.0692138671875], "tokens": [647, 415, 308, 1521, 383, 4446, 848, 225, 34, 962, 7847, 9189, 2227, 848, 225, 34, 27, 301]}
{"line_number": 842, "line_type": "generated", "code": "\n    return costDeltaFunctionOverhead;\n  }", "entropy": 0.25341796875, "is_bug_line": false, "sus_score": 0.1668115312456598, "per_token_entropy": [0.379638671875, 1.146484375, 0.72998046875, 0.0002472400665283203, 0.0012292861938476562, 0.00018906593322753906, 3.5762786865234375e-07, 0.2142333984375, 0.059906005859375, 0.0022830963134765625], "tokens": [284, 442, 7847, 9189, 2447, 3966, 1816, 45, 334, 320]}
{"line_number": 845, "line_type": "original", "code": "      return true;", "entropy": 3.44140625, "is_bug_line": false, "sus_score": 0.1668115312456598, "per_token_entropy": [4.65234375, 0.7197265625, 8.3828125, 0.007045745849609375], "tokens": [647, 442, 861, 45]}
{"line_number": 845, "line_type": "generated", "code": "\n      // If the function is an empty block, then it can be inlined\n      // without affecting the size of the function.\n      return 0;\n    }\n\n    int costDelta = 0;\n    for (Node child : block.children())", "entropy": 0.67626953125, "is_bug_line": false, "sus_score": 0.1668115312456598, "per_token_entropy": [0.513671875, 1.0439453125, 2.2734375, 0.58056640625, 0.164794921875, 1.177734375, 2.966796875, 0.26220703125, 0.413818359375, 0.51513671875, 1.591796875, 1.5498046875, 2.671875, 1.3564453125, 0.63720703125, 0.01123809814453125, 1.15625, 0.0182342529296875, 1.619140625, 2.173828125, 0.001995086669921875, 0.438720703125, 1.291015625, 0.6552734375, 0.134033203125, 1.583984375, 0.77099609375, 0.1287841796875, 0.41259765625, 0.76220703125, 0.0137786865234375, 0.007045745849609375, 0.06695556640625, 0.0003237724304199219, 0.2059326171875, 1.0244140625, 0.44921875, 0.156005859375, 0.533203125, 0.81787109375, 0.01099395751953125, 0.0016574859619140625, 0.384521484375, 1.306640625, 0.002254486083984375, 0.012786865234375, 0.58251953125, 0.488037109375, 0.161376953125, 0.00017654895782470703, 0.04168701171875, 0.0123748779296875], "tokens": [397, 434, 1670, 322, 667, 438, 600, 3502, 2163, 30, 1615, 561, 883, 526, 328, 14145, 397, 434, 2876, 13328, 299, 322, 1334, 432, 322, 667, 32, 397, 442, 225, 34, 45, 284, 320, 446, 629, 7847, 9189, 280, 225, 34, 45, 284, 436, 308, 1212, 2838, 499, 2163, 32, 4915, 1157]}
