{"line_number": 435, "line_type": "original", "code": "    }", "entropy": 4.80078125, "is_bug_line": false, "sus_score": 0.42008402520840293, "per_token_entropy": [7.7578125, 1.841796875], "tokens": [264, 320]}
{"line_number": 435, "line_type": "generated", "code": "\n\n  /**\n   * Returns the definition of a variable.\n   *\n   * @param name name of the variable. It can only be names of local variable\n   *     that are not function parameters, escaped variables or variables\n   *     declared in catch.\n  ", "entropy": 0.279541015625, "is_bug_line": false, "sus_score": 0.42008402520840293, "per_token_entropy": [0.87548828125, 0.65283203125, 0.054473876953125, 0.0005440711975097656, 2.42578125, 1.2001953125, 1.7080078125, 0.74169921875, 0.609375, 0.495849609375, 2.62890625, 0.89599609375, 0.3720703125, 0.31640625, 0.0025501251220703125, 0.1632080078125, 0.05975341796875, 0.248779296875, 0.415771484375, 0.005672454833984375, 0.0307769775390625, 0.0245208740234375, 0.137939453125, 0.2054443359375, 0.01186370849609375, 0.03564453125, 0.0006117820739746094, 0.0251617431640625, 0.0008711814880371094, 0.00618743896484375, 0.0261077880859375, 0.01023101806640625, 0.0005640983581542969, 0.0173187255859375, 0.00861358642578125, 0.0018949508666992188, 0.0017910003662109375, 0.00801849365234375, 0.0016431808471679688, 0.05670166015625, 0.0035419464111328125, 0.00312042236328125, 0.006931304931640625, 0.0030117034912109375, 0.00301361083984375, 0.0033206939697265625, 0.0010004043579101562, 0.0003173351287841797, 0.0003387928009033203, 0.00334930419921875, 0.01107025146484375, 0.005336761474609375], "tokens": [719, 1022, 664, 319, 3759, 322, 5644, 432, 312, 2677, 32, 664, 319, 664, 319, 477, 753, 636, 636, 432, 322, 2677, 32, 2030, 883, 1755, 526, 4467, 432, 2196, 2677, 664, 319, 262, 688, 884, 646, 667, 3377, 30, 31253, 4886, 556, 4886, 664, 319, 262, 17103, 328, 2368, 32, 664]}
{"line_number": 432, "line_type": "original", "code": "      if (s.scope != jsScope) {", "entropy": 1.53515625, "is_bug_line": false, "sus_score": 0.408248290463863, "per_token_entropy": [6.31640625, 3.099609375, 0.1590576171875, 2.00390625, 0.2095947265625, 2.349609375, 1.5556640625, 0.76953125, 0.004383087158203125, 0.33544921875, 0.08697509765625], "tokens": [647, 415, 308, 101, 32, 3473, 863, 4060, 5504, 27, 301]}
{"line_number": 432, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.408248290463863, "per_token_entropy": [], "tokens": []}
{"line_number": 258, "line_type": "original", "code": "        computeMustDef(n.getFirstChild(), cfgNode, output, conditional);", "entropy": 1.001953125, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [5.265625, 6.81640625, 0.0540771484375, 0.0017833709716796875, 0.0186309814453125, 2.005859375, 0.06292724609375, 0.88525390625, 0.00015044212341308594, 0.32421875, 0.1890869140625, 9.250640869140625e-05, 0.007595062255859375, 0.1739501953125, 0.02423095703125, 0.80029296875, 0.407470703125], "tokens": [351, 7596, 11387, 1350, 26, 96, 32, 25657, 2931, 1026, 8444, 1212, 30, 1688, 30, 21161, 293]}
{"line_number": 258, "line_type": "generated", "code": "\n                conditional? null : cfgNode,\n                target, output);\n          }\n        }\n\n        // We don't want to add a definition for a GETPROP\n        if (NodeUtil.isGet(n) &&!NodeUtil.isGet(n.", "entropy": 0.6240234375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.63818359375, 0.673828125, 0.01009368896484375, 0.050140380859375, 0.0054168701171875, 0.0235443115234375, 2.956390380859375e-05, 0.00331878662109375, 1.005859375, 0.34619140625, 0.038726806640625, 0.421142578125, 0.007659912109375, 0.064208984375, 0.00027108192443847656, 0.3359375, 0.0011034011840820312, 0.5390625, 0.7353515625, 3.1171875, 1.8212890625, 0.0008363723754882812, 1.7607421875, 0.0697021484375, 3.033203125, 2.15234375, 0.81787109375, 0.884765625, 1.798828125, 2.333984375, 0.1451416015625, 2.41796875, 0.646484375, 0.19482421875, 0.8134765625, 0.00011336803436279297, 5.245208740234375e-06, 0.0231170654296875, 0.1759033203125, 0.041717529296875, 0.0012416839599609375, 1.150390625, 0.2890625, 1.0390625, 0.330078125, 0.0007491111755371094, 2.658367156982422e-05, 0.1898193359375, 0.98095703125, 1.212890625, 0.07232666015625, 0.0328369140625], "tokens": [400, 21161, 1018, 744, 499, 8444, 1212, 30, 400, 1760, 30, 1688, 293, 616, 320, 291, 320, 584, 434, 2688, 2800, 1330, 2637, 372, 1015, 312, 5644, 436, 312, 6272, 15262, 291, 415, 308, 1212, 1733, 32, 297, 936, 26, 96, 27, 962, 653, 1212, 1733, 32, 297, 936, 26, 96, 32]}
{"line_number": 259, "line_type": "original", "code": "        computeMustDef(n.getLastChild(), cfgNode, output, true);", "entropy": 1.0986328125, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [6.08984375, 7.6640625, 0.0102386474609375, 0.0029926300048828125, 0.01192474365234375, 1.7255859375, 0.057708740234375, 1.662109375, 7.152557373046875e-05, 0.006923675537109375, 0.10443115234375, 2.288818359375e-05, 0.005870819091796875, 0.054351806640625, 0.037506103515625, 1.23828125, 0.004547119140625], "tokens": [351, 7596, 11387, 1350, 26, 96, 32, 20197, 2931, 1026, 8444, 1212, 30, 1688, 30, 861, 293]}
{"line_number": 259, "line_type": "generated", "code": "\n          }\n        }\n\n        if (NodeUtil.isExprAssign(n)) {\n          computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n          computeMustDef(n.getLastChild(), cfgNode, output, conditional);\n         ", "entropy": 0.236572265625, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.166748046875, 0.0018634796142578125, 0.31689453125, 0.0017910003662109375, 0.6767578125, 1.4541015625, 0.1256103515625, 1.3134765625, 0.0002301931381225586, 7.3909759521484375e-06, 0.0933837890625, 1.603515625, 0.302001953125, 0.0018625259399414062, 0.0005755424499511719, 0.224853515625, 0.0009813308715820312, 0.032562255859375, 0.8583984375, 0.0008096694946289062, 0.0001583099365234375, 0.006671905517578125, 0.09405517578125, 0.0010976791381835938, 0.8203125, 0.000530242919921875, 0.0699462890625, 0.0102691650390625, 1.8715858459472656e-05, 9.21487808227539e-05, 0.002490997314453125, 0.0014247894287109375, 0.287109375, 0.0058135986328125, 0.9052734375, 0.87548828125, 0.00099945068359375, 0.00023543834686279297, 0.00533294677734375, 0.042083740234375, 0.0032978057861328125, 0.0123748779296875, 3.1113624572753906e-05, 0.003932952880859375, 0.01519012451171875, 7.045269012451172e-05, 0.0003647804260253906, 0.002166748046875, 0.00232696533203125, 0.8115234375, 0.00824737548828125, 1.1416015625], "tokens": [616, 320, 291, 320, 584, 415, 308, 1212, 1733, 32, 297, 6150, 9079, 26, 96, 490, 301, 616, 7596, 11387, 1350, 26, 96, 32, 25657, 2931, 1026, 8444, 1212, 30, 1688, 30, 21161, 293, 616, 7596, 11387, 1350, 26, 96, 32, 20197, 2931, 1026, 8444, 1212, 30, 1688, 30, 21161, 293, 616]}
{"line_number": 260, "line_type": "original", "code": "        return;", "entropy": 4.21484375, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [6.6796875, 5.9609375, 0.0116424560546875], "tokens": [351, 442, 45]}
{"line_number": 260, "line_type": "generated", "code": "\n          } else if (NodeUtil.isGet(target)) {\n            // Treat all assignments to arguments as redefining the\n            // parameters itself.\n            Node obj = target.getFirstChild();\n            if (obj.isName() && \"arguments", "entropy": 0.09771728515625, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.23046875, 0.0111541748046875, 1.3720703125, 0.2054443359375, 0.00945281982421875, 0.2666015625, 0.00013756752014160156, 1.4424324035644531e-05, 0.065185546875, 0.057464599609375, 0.00994873046875, 0.1644287109375, 0.133056640625, 0.0007047653198242188, 0.0352783203125, 0.8427734375, 1.1240234375, 0.00014889240264892578, 0.13720703125, 0.0516357421875, 0.0018186569213867188, 0.054534912109375, 0.005367279052734375, 0.026611328125, 8.738040924072266e-05, 3.0994415283203125e-05, 0.01019287109375, 0.0157623291015625, 0.0009560585021972656, 0.0026397705078125, 0.00756072998046875, 0.003452301025390625, 0.013214111328125, 0.041168212890625, 0.01216888427734375, 0.0016021728515625, 0.109375, 0.001117706298828125, 0.004878997802734375, 1.6927719116210938e-05, 0.002605438232421875, 0.002979278564453125, 0.0065765380859375, 0.00315093994140625, 0.002025604248046875, 0.002101898193359375, 0.00887298583984375, 0.0013341903686523438, 0.00751495361328125, 0.0052947998046875, 0.0079803466796875, 0.0009026527404785156], "tokens": [616, 320, 813, 415, 308, 1212, 1733, 32, 297, 936, 26, 1977, 490, 301, 324, 434, 394, 4827, 1169, 29410, 372, 4209, 619, 316, 589, 19068, 322, 324, 434, 3377, 8015, 32, 324, 4004, 2830, 280, 1760, 32, 25657, 2931, 473, 324, 415, 308, 2067, 32, 297, 558, 346, 962, 313, 8299]}
{"line_number": 271, "line_type": "original", "code": "            computeMustDef(c.getFirstChild(), cfgNode, output, conditional);", "entropy": 2.03515625, "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [11.078125, 8.5546875, 0.4365234375, 0.01436614990234375, 1.8671875, 5.015625, 3.166015625, 1.330078125, 0.0013704299926757812, 0.051513671875, 0.89794921875, 0.006900787353515625, 0.022308349609375, 1.3076171875, 0.24853515625, 0.572265625, 0.033416748046875], "tokens": [1468, 7596, 11387, 1350, 26, 85, 32, 25657, 2931, 1026, 8444, 1212, 30, 1688, 30, 21161, 293]}
{"line_number": 271, "line_type": "generated", "code": "\n   * @param name The variable name\n   * @param node The node value\n   * @param output The output MustDef\n   */\n  private void addToDefIfLocal(String name, Node cfgNode, Node node, MustDef output) {\n    if", "entropy": 0.364501953125, "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [0.1820068359375, 0.123046875, 0.4091796875, 0.0313720703125, 0.431640625, 0.541015625, 1.234375, 0.312744140625, 0.72705078125, 0.01641845703125, 0.00043463706970214844, 0.00807952880859375, 1.4287109375, 0.0867919921875, 0.5576171875, 2.3984375, 0.73681640625, 0.318115234375, 0.003925323486328125, 0.062225341796875, 0.71240234375, 0.188720703125, 1.10546875, 2.255859375, 0.0256500244140625, 1.0146484375, 0.027618408203125, 0.00609588623046875, 0.05706787109375, 0.088623046875, 0.1668701171875, 0.005832672119140625, 0.225830078125, 0.0036106109619140625, 0.0027332305908203125, 0.1864013671875, 0.0023975372314453125, 0.00015044212341308594, 0.031097412109375, 1.248046875, 0.01351165771484375, 0.00113677978515625, 0.04925537109375, 0.07965087890625, 0.0016469955444335938, 1.1044921875, 3.361701965332031e-05, 0.019622802734375, 0.002197265625, 0.0032291412353515625, 0.0755615234375, 0.64111328125], "tokens": [664, 319, 477, 753, 636, 886, 2677, 636, 664, 319, 477, 753, 1541, 886, 1541, 786, 664, 319, 477, 753, 1688, 886, 1688, 15622, 1350, 664, 569, 334, 945, 763, 33662, 1350, 2797, 3325, 26, 652, 636, 30, 4004, 8444, 1212, 30, 4004, 1541, 30, 15622, 1350, 1688, 27, 301, 284, 415]}
{"line_number": 272, "line_type": "original", "code": "            addToDefIfLocal(c.getString(), conditional ? null : cfgNode,", "entropy": 1.7138671875, "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [9.9375, 8.6875, 0.1715087890625, 0.49072265625, 0.10968017578125, 0.26806640625, 6.40625, 0.302734375, 0.0770263671875, 0.0157928466796875, 2.0390625, 0.195068359375, 0.1881103515625, 0.09625244140625, 0.126708984375, 0.0019741058349609375, 0.0189208984375], "tokens": [1468, 33662, 1350, 2797, 3325, 26, 85, 32, 7069, 1026, 21161, 1018, 744, 499, 8444, 1212, 30]}
{"line_number": 272, "line_type": "generated", "code": "\n   *\n   * @param name variable name\n   * @param def the def lattice\n   */\n  private void addToDefIfLocal(String name, Node cfgNode, Node value,\n      MustDef def) {\n    if (def.escaped.contains(", "entropy": 0.35302734375, "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [0.15380859375, 0.153076171875, 1.001953125, 0.010162353515625, 0.087890625, 0.031951904296875, 0.517578125, 1.953125, 0.097412109375, 0.83544921875, 0.08416748046875, 0.0019741058349609375, 0.0255126953125, 1.02734375, 1.8271484375, 0.80419921875, 0.2008056640625, 0.8515625, 0.1959228515625, 0.0122528076171875, 0.07794189453125, 0.09173583984375, 1.23046875, 0.005146026611328125, 0.0716552734375, 0.0117340087890625, 0.0041046142578125, 0.056396484375, 0.003032684326171875, 0.0007801055908203125, 0.10113525390625, 0.59326171875, 0.0160980224609375, 0.0020923614501953125, 0.044586181640625, 0.599609375, 0.07659912109375, 0.9658203125, 0.03131103515625, 0.0002808570861816406, 0.16015625, 0.008026123046875, 0.003673553466796875, 0.119140625, 0.2274169921875, 0.416748046875, 1.421875, 0.1796875, 1.0869140625, 0.80859375, 0.07220458984375, 0.0024261474609375], "tokens": [664, 319, 664, 319, 477, 753, 636, 2677, 636, 664, 319, 477, 753, 665, 322, 665, 46411, 664, 569, 334, 945, 763, 33662, 1350, 2797, 3325, 26, 652, 636, 30, 4004, 8444, 1212, 30, 4004, 786, 30, 397, 15622, 1350, 665, 27, 301, 284, 415, 308, 589, 32, 37349, 32, 4752, 26]}
{"line_number": 333, "line_type": "original", "code": "      return;", "entropy": 3.189453125, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [6.1171875, 3.103515625, 0.34619140625], "tokens": [647, 442, 45]}
{"line_number": 333, "line_type": "generated", "code": "\n  private void computeDependence(Definition definition, Node n) {\n    if (n.isName()) {\n      Var v = jsScope.getVar(n.getString());\n      if (v!= null) {\n        definition.depends.add(v", "entropy": 0.184326171875, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [1.0986328125, 0.90380859375, 0.98583984375, 0.2242431640625, 0.30029296875, 0.00040721893310546875, 0.01934814453125, 0.081298828125, 0.53173828125, 0.0017061233520507812, 0.00951385498046875, 0.9111328125, 0.005096435546875, 0.0012264251708984375, 0.041839599609375, 0.77099609375, 0.049072265625, 0.2073974609375, 0.0345458984375, 0.2103271484375, 0.429443359375, 0.1392822265625, 0.0007939338684082031, 0.0077362060546875, 0.59228515625, 0.9404296875, 0.0089874267578125, 0.197509765625, 0.002368927001953125, 6.902217864990234e-05, 0.0095672607421875, 0.0020809173583984375, 0.005710601806640625, 0.0008478164672851562, 0.00116729736328125, 0.0018358230590820312, 0.065673828125, 0.11749267578125, 0.01654052734375, 0.01401519775390625, 0.11492919921875, 0.00026917457580566406, 0.391845703125, 0.0016717910766601562, 0.00788116455078125, 0.10076904296875, 7.736682891845703e-05, 0.0191650390625, 0.0018968582153320312, 0.00304412841796875, 0.00013530254364013672, 0.00467681884765625], "tokens": [334, 945, 763, 7596, 6164, 942, 26, 3373, 5644, 30, 4004, 310, 27, 301, 284, 415, 308, 96, 32, 297, 558, 1157, 301, 397, 7329, 354, 280, 4060, 5504, 32, 48086, 26, 96, 32, 7069, 1035, 397, 415, 308, 104, 863, 744, 27, 301, 291, 5644, 32, 27263, 32, 669, 26, 104]}
{"line_number": 436, "line_type": "original", "code": "    return false;", "entropy": 1.8291015625, "is_bug_line": false, "sus_score": 0.21004201260420147, "per_token_entropy": [7.171875, 0.11767578125, 0.00830841064453125, 0.0169677734375], "tokens": [264, 442, 901, 45]}
{"line_number": 436, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.21004201260420147, "per_token_entropy": [], "tokens": []}
{"line_number": 426, "line_type": "original", "code": "    Preconditions.checkArgument(getCfg().hasNode(useNode));", "entropy": 0.73291015625, "is_bug_line": false, "sus_score": 0.20851441405707474, "per_token_entropy": [4.77734375, 5.92578125, 0.0024929046630859375, 0.004833221435546875, 0.0173492431640625, 0.0122528076171875, 0.2078857421875, 3.5762786865234375e-06, 0.0022602081298828125, 0.0028743743896484375, 0.0004074573516845703, 0.0005030632019042969, 0.027557373046875, 0.0002651214599609375, 0.0131378173828125], "tokens": [264, 40596, 32, 1553, 3484, 26, 11640, 4637, 922, 2040, 1212, 26, 539, 1212, 876]}
{"line_number": 426, "line_type": "generated", "code": "\n  /**\n   * Gets the must reaching definition of a given node. The node must be one of\n   * the control flow graph nodes.\n   *\n   * @param name name of the variable. It can only be names of local variable\n   *    ", "entropy": 0.0926513671875, "is_bug_line": false, "sus_score": 0.20851441405707474, "per_token_entropy": [1.0439453125, 0.64306640625, 0.0662841796875, 0.0005831718444824219, 0.67138671875, 0.143798828125, 0.340576171875, 0.0963134765625, 0.0002617835998535156, 0.0318603515625, 0.063232421875, 0.0538330078125, 0.048370361328125, 0.323974609375, 0.2017822265625, 0.056396484375, 0.004917144775390625, 0.0253448486328125, 0.003337860107421875, 0.0114593505859375, 0.0028247833251953125, 0.0025482177734375, 0.00023353099822998047, 0.0016031265258789062, 0.0041046142578125, 0.000637054443359375, 0.0003402233123779297, 0.0014133453369140625, 0.011260986328125, 0.051910400390625, 0.043060302734375, 0.0116424560546875, 0.0009012222290039062, 0.0250396728515625, 0.006805419921875, 0.50439453125, 0.059173583984375, 0.00209808349609375, 0.005672454833984375, 0.01375579833984375, 0.036773681640625, 0.11810302734375, 0.007678985595703125, 0.0222930908203125, 0.00042724609375, 0.01548004150390625, 0.0005140304565429688, 0.00732421875, 0.01194000244140625, 0.005321502685546875, 1.9311904907226562e-05, 0.010162353515625], "tokens": [334, 1022, 664, 319, 7124, 322, 2298, 316, 9469, 5644, 432, 312, 2702, 1541, 32, 886, 1541, 2298, 526, 1591, 432, 664, 319, 322, 3498, 7290, 3996, 5166, 32, 664, 319, 664, 319, 477, 753, 636, 636, 432, 322, 2677, 32, 2030, 883, 1755, 526, 4467, 432, 2196, 2677, 664, 319, 262]}
{"line_number": 427, "line_type": "original", "code": "    GraphNode<Node, Branch> n = getCfg().getNode(useNode);", "entropy": 0.5859375, "is_bug_line": false, "sus_score": 0.20851441405707474, "per_token_entropy": [5.625, 4.76953125, 0.00656890869140625, 0.0108489990234375, 0.00247955322265625, 0.0007462501525878906, 0.01326751708984375, 0.0010519027709960938, 0.04302978515625, 0.00616455078125, 0.01305389404296875, 0.0013818740844726562, 0.0031223297119140625, 0.001438140869140625, 0.0036449432373046875, 0.045257568359375, 0.001277923583984375, 0.00220489501953125], "tokens": [264, 6466, 1212, 46, 1212, 30, 23745, 48, 310, 280, 622, 11812, 922, 17699, 26, 539, 1212, 293]}
{"line_number": 427, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.20851441405707474, "per_token_entropy": [], "tokens": []}
{"line_number": 428, "line_type": "original", "code": "    FlowState<MustDef> state = n.getAnnotation();", "entropy": 0.798828125, "is_bug_line": false, "sus_score": 0.20851441405707474, "per_token_entropy": [5.84375, 4.30859375, 0.01128387451171875, 0.00959014892578125, 0.01535797119140625, 0.00027561187744140625, 0.0027637481689453125, 0.1370849609375, 0.0111846923828125, 0.0350341796875, 0.0012941360473632812, 0.001026153564453125, 0.00438690185546875], "tokens": [264, 12419, 1078, 46, 11387, 1350, 48, 1603, 280, 310, 32, 45319, 473]}
{"line_number": 428, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.20851441405707474, "per_token_entropy": [], "tokens": []}
{"line_number": 429, "line_type": "original", "code": "    Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));", "entropy": 0.4658203125, "is_bug_line": true, "sus_score": 0.20851441405707474, "per_token_entropy": [6.01171875, 2.6875, 0.65771484375, 0.02716064453125, 0.0625, 0.0028591156005859375, 0.0411376953125, 0.0022144317626953125, 0.0157623291015625, 8.606910705566406e-05, 7.11679458618164e-05, 0.00547027587890625, 0.0012178421020507812, 0.00167083740234375, 0.22216796875, 0.0002810955047607422, 0.005947113037109375, 0.0286407470703125, 0.0014181137084960938, 0.004146575927734375, 0.00368499755859375], "tokens": [264, 16429, 665, 280, 1603, 32, 40807, 922, 268, 9469, 1350, 32, 371, 26, 754, 5504, 32, 48086, 26, 426, 876]}
{"line_number": 429, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": true, "sus_score": 0.20851441405707474, "per_token_entropy": [], "tokens": []}
{"line_number": 431, "line_type": "original", "code": "    for (Var s : def.depends) {", "entropy": 1.603515625, "is_bug_line": true, "sus_score": 0.20851441405707474, "per_token_entropy": [6.640625, 2.796875, 0.0167236328125, 1.439453125, 5.4296875, 0.329833984375, 0.66064453125, 0.00754547119140625, 0.2724609375, 0.00991058349609375, 0.029296875], "tokens": [264, 436, 308, 1881, 309, 499, 665, 32, 27263, 27, 301]}
{"line_number": 431, "line_type": "generated", "code": "\n\n  /**\n   * Gets the must reaching definition of a given node. The node must be one of\n   * the control flow graph nodes.\n   *\n   * @param name name of the variable. It can only be names of local variable\n   *    ", "entropy": 0.10345458984375, "is_bug_line": true, "sus_score": 0.20851441405707474, "per_token_entropy": [0.91357421875, 0.61279296875, 0.055938720703125, 0.0005631446838378906, 1.01953125, 0.18212890625, 0.42724609375, 0.1502685546875, 0.00023734569549560547, 0.044921875, 0.090087890625, 0.07476806640625, 0.060791015625, 0.392578125, 0.2449951171875, 0.054962158203125, 0.0049285888671875, 0.02276611328125, 0.0034313201904296875, 0.01201629638671875, 0.0023441314697265625, 0.0017642974853515625, 0.00021958351135253906, 0.00156402587890625, 0.0036640167236328125, 0.00048422813415527344, 0.00027871131896972656, 0.001209259033203125, 0.01142120361328125, 0.053466796875, 0.054931640625, 0.01068115234375, 0.00101470947265625, 0.0237274169921875, 0.00844573974609375, 0.51220703125, 0.06427001953125, 0.0020771026611328125, 0.0059967041015625, 0.01470947265625, 0.03875732421875, 0.1187744140625, 0.00756072998046875, 0.020050048828125, 0.0003635883331298828, 0.01556396484375, 0.0005002021789550781, 0.007289886474609375, 0.011871337890625, 0.0061492919921875, 0.00035309791564941406, 0.00934600830078125], "tokens": [719, 1022, 664, 319, 7124, 322, 2298, 316, 9469, 5644, 432, 312, 2702, 1541, 32, 886, 1541, 2298, 526, 1591, 432, 664, 319, 322, 3498, 7290, 3996, 5166, 32, 664, 319, 664, 319, 477, 753, 636, 636, 432, 322, 2677, 32, 2030, 883, 1755, 526, 4467, 432, 2196, 2677, 664, 319, 262]}
{"line_number": 342, "line_type": "original", "code": "        def.reachingDef.put(other, null);", "entropy": 1.642578125, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [8.0703125, 3.720703125, 0.01096343994140625, 5.0234375, 0.066650390625, 0.03057861328125, 0.369384765625, 0.1829833984375, 0.14599609375, 2.982421875, 0.210205078125, 0.5419921875, 0.00514984130859375], "tokens": [351, 665, 32, 268, 9469, 1350, 32, 524, 26, 2455, 30, 744, 293]}
{"line_number": 342, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Computes the must-defines for a node.\n   */\n  private void computeMustDef(Node n, Node cfgNode, MustDef output,\n      boolean conditional) {\n    switch (n.getType()) {\n      case Token.", "entropy": 0.427001953125, "is_bug_line": false, "sus_score": 0.20412414523193154, "per_token_entropy": [0.449462890625, 0.002910614013671875, 0.638671875, 0.41015625, 0.0565185546875, 0.0002593994140625, 2.09765625, 0.51513671875, 1.984375, 0.99609375, 1.7421875, 1.2294921875, 1.470703125, 1.818359375, 1.3525390625, 0.515625, 0.8173828125, 0.00855255126953125, 0.349609375, 0.93701171875, 0.1273193359375, 0.0736083984375, 0.275634765625, 0.27880859375, 0.1524658203125, 0.2364501953125, 0.00667572021484375, 0.12646484375, 0.12384033203125, 0.00499725341796875, 0.0206146240234375, 0.1015625, 8.809566497802734e-05, 0.6943359375, 0.1595458984375, 0.5166015625, 0.01505279541015625, 0.0172576904296875, 0.007373809814453125, 0.004241943359375, 0.386474609375, 0.87255859375, 0.033905029296875, 0.001636505126953125, 1.239776611328125e-05, 0.109375, 0.00010263919830322266, 0.005092620849609375, 0.2060546875, 0.08233642578125, 0.0159759521484375, 0.1588134765625], "tokens": [334, 320, 719, 1022, 664, 319, 41932, 322, 2298, 31, 36644, 436, 312, 1541, 32, 664, 569, 334, 945, 763, 7596, 11387, 1350, 26, 1212, 310, 30, 4004, 8444, 1212, 30, 15622, 1350, 1688, 30, 397, 1905, 21161, 27, 301, 284, 3578, 308, 96, 32, 10272, 1157, 301, 397, 1135, 6512, 32]}
{"line_number": 419, "line_type": "original", "code": "      return null;", "entropy": 1.90234375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [6.97265625, 0.366943359375, 0.259765625, 0.01094818115234375], "tokens": [647, 442, 744, 45]}
{"line_number": 419, "line_type": "generated", "code": "\n\n  @Override\n  public FlowState<MustDef> createInitialState() {\n    return new FlowState<MustDef>(new MustDef(null));\n  }\n\n  @Override\n  public FlowState<MustDef> createEntryState() {\n    return new Flow", "entropy": 0.34912109375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [1.6669921875, 2.609375, 0.0697021484375, 0.00836944580078125, 0.3994140625, 1.3701171875, 0.1846923828125, 0.0077056884765625, 0.01922607421875, 0.0006308555603027344, 0.0009374618530273438, 0.6748046875, 1.2275390625, 0.1553955078125, 0.0015172958374023438, 0.0225677490234375, 0.515625, 0.104248046875, 0.06561279296875, 0.00016319751739501953, 0.470703125, 0.0391845703125, 2.7298927307128906e-05, 0.0390625, 0.485107421875, 0.042327880859375, 0.00048065185546875, 1.3720703125, 0.9990234375, 0.381591796875, 0.01849365234375, 0.0009164810180664062, 0.2008056640625, 0.138427734375, 0.0008406639099121094, 0.002223968505859375, 0.0758056640625, 0.1339111328125, 0.01494598388671875, 0.0005350112915039062, 0.0007448196411132812, 1.1920928955078125e-05, 0.0006532669067382812, 1.73828125, 0.38134765625, 0.0008401870727539062, 1.095703125, 0.00206756591796875, 0.05755615234375, 0.76611328125, 0.5810546875, 0.0133514404296875], "tokens": [719, 477, 1788, 334, 562, 12419, 1078, 46, 11387, 1350, 48, 1487, 45280, 346, 301, 284, 442, 537, 12419, 1078, 46, 11387, 1350, 1563, 890, 15622, 1350, 26, 1693, 876, 334, 320, 719, 477, 1788, 334, 562, 12419, 1078, 46, 11387, 1350, 48, 1487, 2711, 1078, 346, 301, 284, 442, 537, 12419]}
{"line_number": 421, "line_type": "original", "code": "      return def.node;", "entropy": 1.4697265625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [7.2734375, 0.413818359375, 0.57177734375, 0.0777587890625, 0.447265625, 0.036590576171875], "tokens": [647, 442, 665, 32, 1251, 45]}
{"line_number": 421, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [], "tokens": []}
{"line_number": 269, "line_type": "original", "code": "        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {", "entropy": 0.55517578125, "is_bug_line": false, "sus_score": 0.1901172751573434, "per_token_entropy": [7.2421875, 3.28125, 0.0191650390625, 0.1531982421875, 0.320068359375, 0.1768798828125, 0.225830078125, 0.019012451171875, 0.102294921875, 0.003261566162109375, 0.034393310546875, 0.0869140625, 0.005451202392578125, 0.0019664764404296875, 0.0107269287109375, 0.368408203125, 0.006679534912109375, 0.10028076171875, 0.01235198974609375, 0.004154205322265625, 0.004459381103515625, 0.031097412109375], "tokens": [351, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301]}
{"line_number": 269, "line_type": "generated", "code": "\n  private void addToDefIfLocal(String name, Node cfgNode, Node rhs,\n      MustDef output) {\n    if (isLocal(name, rhs)) {\n      output.addDef(name, cfgNode);\n    }\n  }", "entropy": 0.28564453125, "is_bug_line": false, "sus_score": 0.1901172751573434, "per_token_entropy": [0.46533203125, 1.0859375, 0.215087890625, 0.64599609375, 0.002777099609375, 0.0123138427734375, 0.00194549560546875, 0.0023288726806640625, 0.417724609375, 0.208251953125, 0.0006666183471679688, 0.060333251953125, 0.51953125, 0.01348114013671875, 0.00212860107421875, 0.07342529296875, 1.8076171875, 0.01367950439453125, 0.78662109375, 0.01305389404296875, 0.00023031234741210938, 0.179931640625, 0.001399993896484375, 0.0018892288208007812, 0.0357666015625, 0.52587890625, 0.340087890625, 1.29296875, 0.2110595703125, 1.04296875, 0.10125732421875, 0.82568359375, 0.78759765625, 0.2181396484375, 0.002513885498046875, 0.01526641845703125, 0.419677734375, 0.00040793418884277344, 0.2479248046875, 0.966796875, 0.01898193359375, 0.192626953125, 0.02337646484375, 0.136474609375, 6.35385513305664e-05, 0.26220703125, 0.0390625, 6.079673767089844e-05, 0.043731689453125, 0.0005192756652832031], "tokens": [334, 945, 763, 33662, 1350, 2797, 3325, 26, 652, 636, 30, 4004, 8444, 1212, 30, 4004, 9322, 30, 397, 15622, 1350, 1688, 27, 301, 284, 415, 308, 297, 3325, 26, 426, 30, 9322, 490, 301, 397, 1688, 32, 669, 1350, 26, 426, 30, 8444, 1212, 293, 284, 320, 334, 320]}
{"line_number": 270, "line_type": "original", "code": "          if (c.hasChildren()) {", "entropy": 2.677734375, "is_bug_line": false, "sus_score": 0.1901172751573434, "per_token_entropy": [10.2578125, 3.984375, 0.3935546875, 4.6484375, 0.55615234375, 3.828125, 0.0085906982421875, 0.2388916015625, 0.1846923828125], "tokens": [2033, 415, 308, 85, 32, 2040, 7640, 1157, 301]}
{"line_number": 270, "line_type": "generated", "code": "\n   * @param n The node in question.\n   * @param cfgNode The node to add\n   * @param output The output.\n   * @param conditional true if the definition is not always executed.\n   */\n  private void computeMustDef(Node", "entropy": 0.306884765625, "is_bug_line": false, "sus_score": 0.1901172751573434, "per_token_entropy": [0.276611328125, 0.040771484375, 1.490234375, 0.09954833984375, 0.9921875, 0.41943359375, 0.367431640625, 0.325439453125, 0.01111602783203125, 0.0819091796875, 0.0234527587890625, 0.087890625, 0.0036220550537109375, 0.11114501953125, 0.4130859375, 0.01210784912109375, 0.030975341796875, 0.1580810546875, 0.036712646484375, 0.058349609375, 0.07244873046875, 0.07025146484375, 0.0001518726348876953, 0.042388916015625, 0.80029296875, 0.42529296875, 1.142578125, 3.16015625, 0.07080078125, 1.3134765625, 0.0372314453125, 0.154296875, 0.86181640625, 0.216064453125, 0.006130218505859375, 0.041229248046875, 0.037353515625, 0.020050048828125, 0.08319091796875, 0.00266265869140625, 0.0018358230590820312, 0.01325225830078125, 0.0192718505859375, 0.0745849609375, 0.0212554931640625, 0.05401611328125, 0.053070068359375, 0.6064453125, 0.3388671875, 0.08941650390625, 0.91064453125, 0.181640625], "tokens": [664, 319, 477, 753, 310, 886, 1541, 328, 7000, 32, 664, 319, 477, 753, 8444, 1212, 886, 1541, 372, 1015, 664, 319, 477, 753, 1688, 886, 1688, 32, 664, 319, 477, 753, 21161, 861, 415, 322, 5644, 438, 646, 5182, 10768, 32, 664, 569, 334, 945, 763, 7596, 11387, 1350, 26, 1212]}
{"line_number": 276, "line_type": "original", "code": "        return;", "entropy": 3.818359375, "is_bug_line": false, "sus_score": 0.1901172751573434, "per_token_entropy": [7.6328125, 3.79296875, 0.0242919921875], "tokens": [351, 442, 45]}
{"line_number": 276, "line_type": "generated", "code": "\n  private void addToDefIfLocal(String name, Node cfgNode, Node value,\n      VarLatticeMap output) {\n    if (escapedVars.contains(name)) {\n      return;\n    }\n    if (value!= null) {\n      output", "entropy": 0.36572265625, "is_bug_line": false, "sus_score": 0.1901172751573434, "per_token_entropy": [0.609375, 0.1258544921875, 0.347900390625, 0.170166015625, 0.0010538101196289062, 0.08343505859375, 0.00820159912109375, 0.007472991943359375, 0.09619140625, 0.224853515625, 0.0013303756713867188, 0.271728515625, 1.041015625, 0.004451751708984375, 0.00518035888671875, 0.0506591796875, 0.54541015625, 0.07080078125, 0.39501953125, 2.013671875, 0.06103515625, 0.010955810546875, 1.7353515625, 0.4580078125, 0.0065765380859375, 0.005420684814453125, 0.2203369140625, 0.258544921875, 0.354248046875, 1.2109375, 1.9306640625, 0.1422119140625, 0.072021484375, 0.0018148422241210938, 0.003849029541015625, 0.228271484375, 0.0109710693359375, 0.03411865234375, 0.085693359375, 0.0008959770202636719, 0.00603485107421875, 0.00012183189392089844, 0.7578125, 1.5390625, 0.2064208984375, 1.2099609375, 0.6953125, 0.0005273818969726562, 0.409912109375, 0.00478363037109375, 0.012725830078125, 1.265625], "tokens": [334, 945, 763, 33662, 1350, 2797, 3325, 26, 652, 636, 30, 4004, 8444, 1212, 30, 4004, 786, 30, 397, 7329, 62, 23353, 1208, 1688, 27, 301, 284, 415, 308, 37349, 12034, 32, 4752, 26, 426, 490, 301, 397, 442, 45, 284, 320, 284, 415, 308, 853, 863, 744, 27, 301, 397, 1688]}
{"line_number": 352, "line_type": "original", "code": "          computeDependence(definition, rValue);", "entropy": 2.189453125, "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [9.109375, 5.4765625, 0.62841796875, 0.0034046173095703125, 0.298828125, 5.32421875, 0.08502197265625, 0.56787109375, 0.064453125, 0.32861328125], "tokens": [2033, 7596, 6164, 942, 26, 7390, 30, 540, 882, 293]}
{"line_number": 352, "line_type": "generated", "code": "\n  }\n\n  private void computeMustDef(Node n, Node cfgNode, MustDef output,\n      boolean conditional) {\n    if (n.isName()) {\n      String name = n.getString();\n      if (jsScope.isDeclared(name", "entropy": 0.288818359375, "is_bug_line": false, "sus_score": 0.1889822365046136, "per_token_entropy": [0.39404296875, 0.0076751708984375, 0.53564453125, 1.3388671875, 1.3916015625, 1.1982421875, 1.40625, 0.09698486328125, 0.599609375, 0.21337890625, 0.309326171875, 0.008941650390625, 0.1619873046875, 0.2274169921875, 0.00907135009765625, 0.016510009765625, 0.139404296875, 5.137920379638672e-05, 0.61572265625, 0.1280517578125, 0.490234375, 0.0147552490234375, 0.0343017578125, 0.0081024169921875, 0.00450897216796875, 0.13232421875, 0.83642578125, 0.09552001953125, 0.1641845703125, 0.04638671875, 0.258544921875, 0.591796875, 0.19140625, 0.000743865966796875, 0.03485107421875, 1.4697265625, 0.084228515625, 0.0032024383544921875, 0.01488494873046875, 6.973743438720703e-05, 0.0020008087158203125, 0.0007476806640625, 0.1815185546875, 0.8037109375, 0.2247314453125, 0.429931640625, 0.003173828125, 0.0047760009765625, 0.0399169921875, 0.04437255859375, 0.004398345947265625, 0.007549285888671875], "tokens": [334, 320, 719, 945, 763, 7596, 11387, 1350, 26, 1212, 310, 30, 4004, 8444, 1212, 30, 15622, 1350, 1688, 30, 397, 1905, 21161, 27, 301, 284, 415, 308, 96, 32, 297, 558, 1157, 301, 397, 892, 636, 280, 310, 32, 7069, 473, 397, 415, 308, 754, 5504, 32, 297, 22050, 26, 426]}
