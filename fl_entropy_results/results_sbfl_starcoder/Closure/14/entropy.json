{"line_number": 579, "line_type": "original", "code": "          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));", "entropy": 1.0439453125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [7.64453125, 6.4453125, 0.00395965576171875, 0.003662109375, 0.006916046142578125, 0.00649261474609375, 0.435302734375, 0.00012612342834472656, 0.0009531974792480469, 1.9814453125, 0.947265625, 0.0010223388671875, 0.007419586181640625, 1.0068359375, 0.08367919921875, 0.14111328125, 0.0007543563842773438, 0.078369140625], "tokens": [2033, 8295, 1208, 32, 524, 26, 2135, 17861, 30, 7596, 38206, 17749, 26, 1537, 32, 20197, 2931, 5073]}
{"line_number": 579, "line_type": "generated", "code": "\n    } else {", "entropy": 0.258544921875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.307861328125, 0.005077362060546875, 0.392822265625, 0.328125], "tokens": [284, 320, 813, 301]}
{"line_number": 767, "line_type": "original", "code": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);", "entropy": 2.9140625, "is_bug_line": true, "sus_score": 0.4629100498862757, "per_token_entropy": [10.5, 6.00390625, 0.1590576171875, 0.28857421875, 4.01171875, 0.157958984375, 0.03948974609375, 0.08355712890625, 0.0263824462890625, 0.01073455810546875, 12.484375, 0.298095703125, 1.064453125, 0.5234375, 0.314453125, 15.890625, 0.185546875, 0.4072265625], "tokens": [2850, 281, 1919, 32, 1297, 6530, 26, 1070, 1212, 30, 23745, 32, 1413, 20954, 30, 8295, 1212, 293]}
{"line_number": 767, "line_type": "generated", "code": "  }\n   */\n  static void connect(Node fromNode, Node toNode) {\n    if (fromNode == toNode) {\n      return;\n    }\n    if (fromNode.isNormalBlock() && toNode.isNormalBlock()) {", "entropy": 0.351318359375, "is_bug_line": true, "sus_score": 0.4629100498862757, "per_token_entropy": [1.1572265625, 0.8828125, 0.5654296875, 0.07928466796875, 0.01174163818359375, 0.462890625, 0.03375244140625, 0.33935546875, 1.0244140625, 0.1614990234375, 0.01267242431640625, 0.005611419677734375, 0.00039124488830566406, 0.0078277587890625, 0.0012464523315429688, 0.0001386404037475586, 0.412353515625, 0.004894256591796875, 0.16162109375, 1.2333984375, 0.1094970703125, 0.38916015625, 0.0006756782531738281, 0.66162109375, 0.8740234375, 1.4066696166992188e-05, 0.06439208984375, 0.017578125, 0.050048828125, 0.1942138671875, 0.0013399124145507812, 0.0408935546875, 0.0020999908447265625, 0.73583984375, 1.138671875, 0.10821533203125, 0.5380859375, 0.0008864402770996094, 0.76611328125, 1.05859375, 2.88671875, 0.52392578125, 0.4697265625, 0.3994140625, 0.44287109375, 2.5153160095214844e-05, 0.014739990234375, 0.059051513671875, 0.050537109375, 0.00019073486328125, 0.0999755859375, 0.0009317398071289062], "tokens": [225, 320, 664, 569, 334, 907, 763, 5008, 26, 1212, 645, 1212, 30, 4004, 372, 1212, 27, 301, 284, 415, 308, 1070, 1212, 610, 372, 1212, 27, 301, 397, 442, 45, 284, 320, 284, 415, 308, 1070, 1212, 32, 297, 5947, 2227, 346, 962, 372, 1212, 32, 297, 5947, 2227, 1157, 301]}
{"line_number": 768, "line_type": "original", "code": "            }", "entropy": 7.4375, "is_bug_line": false, "sus_score": 0.4629100498862757, "per_token_entropy": [10.1875, 4.69140625], "tokens": [1468, 320]}
{"line_number": 768, "line_type": "generated", "code": "  static void connectNodes(Node fromNode, Node toNode,\n      ControlFlowAnalysis cfa) {\n    Preconditions.checkArgument(\n        fromNode.getParent() == toNode.getParent(),\n        \"fromNode and toNode must be in the same", "entropy": 0.34375, "is_bug_line": false, "sus_score": 0.4629100498862757, "per_token_entropy": [0.98486328125, 0.63037109375, 0.0198974609375, 0.60986328125, 1.080078125, 0.07281494140625, 0.2318115234375, 0.00855255126953125, 0.0078125, 0.0012731552124023438, 0.0256805419921875, 0.00113677978515625, 0.00015461444854736328, 0.541015625, 1.1416015625, 0.141845703125, 0.0023097991943359375, 0.098388671875, 0.06317138671875, 0.0003898143768310547, 0.06451416015625, 0.00740814208984375, 0.087890625, 1.5673828125, 0.0009589195251464844, 0.041748046875, 0.69580078125, 0.060394287109375, 1.283203125, 0.77734375, 0.00017547607421875, 0.5888671875, 1.021484375, 0.334716796875, 0.29638671875, 0.258544921875, 1.2755393981933594e-05, 0.002033233642578125, 0.002727508544921875, 0.1328125, 0.1669921875, 0.10565185546875, 2.125, 0.1236572265625, 0.99169921875, 0.004550933837890625, 0.00339508056640625, 0.67578125, 0.36376953125, 0.327880859375, 0.10040283203125, 0.0040130615234375], "tokens": [225, 907, 763, 5008, 5909, 26, 1212, 645, 1212, 30, 4004, 372, 1212, 30, 397, 7813, 4055, 9745, 281, 1919, 27, 301, 284, 40596, 32, 1553, 3484, 26, 291, 645, 1212, 32, 18789, 346, 610, 372, 1212, 32, 18789, 1026, 291, 313, 1070, 1212, 461, 372, 1212, 2298, 526, 328, 322, 2432]}
{"line_number": 844, "line_type": "original", "code": "            finallyMap.put(lastJump, handler.getLastChild());", "entropy": 1.669921875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [10.7421875, 7.22265625, 0.062408447265625, 0.09063720703125, 0.08111572265625, 0.0202789306640625, 0.358154296875, 0.007595062255859375, 0.002414703369140625, 2.32421875, 2.177734375, 0.2452392578125, 0.0010957717895507812, 0.044647216796875], "tokens": [1468, 8295, 1208, 32, 524, 26, 2135, 17861, 30, 4899, 32, 20197, 2931, 1035]}
{"line_number": 844, "line_type": "generated", "code": "\n\n  /**\n   * Checks if the given node is a break statement.\n   */\n  private static boolean isBreakStructure(Node node, boolean labeled) {\n    return labeled && node.getType() == Token.LABEL &&\n      node.hasChildren() &&\n     ", "entropy": 0.450927734375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.92431640625, 0.22607421875, 0.0419921875, 0.00033092498779296875, 0.91259765625, 0.17724609375, 0.97265625, 1.076171875, 0.5185546875, 0.36279296875, 0.61572265625, 1.095703125, 1.5927734375, 0.99853515625, 0.68017578125, 0.2626953125, 0.0187225341796875, 0.2264404296875, 0.01401519775390625, 0.0022983551025390625, 0.0017824172973632812, 0.002033233642578125, 0.1551513671875, 0.0018968582153320312, 0.005313873291015625, 1.2392578125, 0.011077880859375, 0.0097503662109375, 1.0380859375, 0.041961669921875, 0.0003800392150878906, 0.01380157470703125, 0.80615234375, 0.92138671875, 1.2763671875, 0.638671875, 0.036102294921875, 0.7421875, 0.0009598731994628906, 0.005107879638671875, 0.0020599365234375, 7.2479248046875e-05, 0.5185546875, 0.343505859375, 0.7216796875, 0.591796875, 0.005298614501953125, 2.34375, 0.0034389495849609375, 0.0174560546875, 0.004638671875, 1.2373046875], "tokens": [719, 1022, 664, 319, 17279, 415, 322, 2702, 1541, 438, 312, 1626, 7603, 32, 664, 569, 334, 945, 907, 1905, 438, 10438, 8634, 26, 1212, 1541, 30, 1905, 30429, 27, 301, 284, 442, 30429, 962, 1541, 32, 10272, 346, 610, 6512, 32, 11379, 962, 397, 1541, 32, 2040, 7640, 346, 962, 397]}
{"line_number": 491, "line_type": "original", "code": "      return;", "entropy": 3.931640625, "is_bug_line": false, "sus_score": 0.3396831102433787, "per_token_entropy": [7.21875, 4.13671875, 0.4443359375], "tokens": [647, 442, 45]}
{"line_number": 491, "line_type": "generated", "code": "\n    createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n  }\n\n  private void handleReturn(Node node) {\n    createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n  }", "entropy": 0.1485595703125, "is_bug_line": false, "sus_score": 0.3396831102433787, "per_token_entropy": [1.466796875, 1.166015625, 0.006687164306640625, 0.00521087646484375, 0.0105438232421875, 0.0010890960693359375, 0.00527191162109375, 4.589557647705078e-05, 0.38330078125, 0.00112152099609375, 0.0015411376953125, 0.1292724609375, 0.0767822265625, 0.000957489013671875, 0.0008997917175292969, 0.0012750625610351562, 0.005046844482421875, 0.0037441253662109375, 0.00739288330078125, 0.12078857421875, 0.0009703636169433594, 0.11859130859375, 0.135498046875, 0.03582763671875, 0.11981201171875, 1.205078125, 0.0347900390625, 0.0016469955444335938, 0.00574493408203125, 0.002834320068359375, 0.0011587142944335938, 0.1300048828125, 1.3896484375, 0.0022125244140625, 0.00014722347259521484, 0.001880645751953125, 0.0010633468627929688, 0.0026798248291015625, 3.5881996154785156e-05, 0.040374755859375, 0.000518798828125, 0.0024166107177734375, 0.054351806640625, 0.0088043212890625, 0.0005612373352050781, 0.00029397010803222656, 0.00146484375, 0.002017974853515625, 0.003814697265625, 0.006427764892578125, 1.0205078125, 0.0005440711975097656], "tokens": [284, 1487, 6530, 26, 1251, 30, 23745, 32, 1413, 20954, 30, 7596, 13052, 1212, 26, 1251, 30, 458, 876, 334, 320, 719, 945, 763, 2887, 2891, 26, 1212, 1541, 27, 301, 284, 1487, 6530, 26, 1251, 30, 23745, 32, 1413, 20954, 30, 7596, 13052, 1212, 26, 1251, 30, 458, 876, 334, 320]}
{"line_number": 766, "line_type": "original", "code": "            for (Node finallyNode : cfa.finallyMap.get(parent)) {", "entropy": 2.375, "is_bug_line": false, "sus_score": 0.3273268353539886, "per_token_entropy": [8.3046875, 6.22265625, 0.2244873046875, 0.441650390625, 12.7421875, 0.334716796875, 0.384521484375, 1.0986328125, 0.004924774169921875, 0.04376220703125, 3.1640625, 5.8359375, 0.0772705078125, 0.08428955078125, 0.0150909423828125, 3.513671875, 0.102294921875, 0.142578125], "tokens": [1468, 436, 308, 1212, 8295, 1212, 499, 281, 1919, 32, 22192, 1208, 32, 371, 26, 2544, 490, 301]}
{"line_number": 766, "line_type": "generated", "code": "    * @param toNode Destination.\n   * @param cfa The ControlFlowAnalysis for the current function.\n   */\n  static void connectTo(Node fromNode, Node toNode, ControlFlowAnalysis cfa) {\n    if (cfa!= null", "entropy": 0.381103515625, "is_bug_line": false, "sus_score": 0.3273268353539886, "per_token_entropy": [0.80859375, 0.62646484375, 0.023223876953125, 0.006366729736328125, 0.69580078125, 0.01861572265625, 0.1439208984375, 0.126708984375, 0.07513427734375, 0.86181640625, 0.0175933837890625, 0.06268310546875, 1.0244140625, 0.0018777847290039062, 0.890625, 1.396484375, 0.1767578125, 0.10009765625, 3.126953125, 0.5625, 1.580078125, 0.7001953125, 0.458740234375, 0.1898193359375, 0.09454345703125, 0.01263427734375, 0.428955078125, 0.021484375, 0.55712890625, 2.265625, 0.5537109375, 0.0762939453125, 0.0128173828125, 0.0022945404052734375, 0.0006017684936523438, 0.0197906494140625, 0.0015926361083984375, 9.512901306152344e-05, 0.0019168853759765625, 0.06829833984375, 6.699562072753906e-05, 0.0026798248291015625, 0.035186767578125, 1.1801719665527344e-05, 0.0149688720703125, 0.01033782958984375, 0.240234375, 0.845703125, 0.040008544921875, 0.6455078125, 0.1883544921875, 0.00022900104522705078], "tokens": [264, 319, 477, 753, 372, 1212, 27584, 32, 664, 319, 477, 753, 281, 1919, 886, 7813, 4055, 9745, 436, 322, 1550, 667, 32, 664, 569, 334, 907, 763, 5008, 705, 26, 1212, 645, 1212, 30, 4004, 372, 1212, 30, 7813, 4055, 9745, 281, 1919, 27, 301, 284, 415, 308, 37059, 863, 744]}
{"line_number": 764, "line_type": "original", "code": "        } else if (parent.getLastChild() == node){", "entropy": 1.8544921875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [7.5390625, 4.63671875, 1.1474609375, 0.78076171875, 0.064453125, 1.26171875, 0.1834716796875, 4.234375, 0.003467559814453125, 0.06427001953125, 0.05419921875, 0.056365966796875, 4.0859375], "tokens": [351, 320, 813, 415, 308, 2544, 32, 20197, 2931, 346, 610, 1541, 1511]}
{"line_number": 764, "line_type": "generated", "code": "\n   *\n   * @param fromNode The node we are coming from.\n   * @param toNode The node we are going to.\n   * @param cfa The control flow analysis object.\n   */\n  static void connect(Node fromNode, Node", "entropy": 0.33203125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.1806640625, 0.339111328125, 0.6904296875, 0.01328277587890625, 0.4228515625, 0.10589599609375, 0.403076171875, 0.18310546875, 0.859375, 0.60986328125, 1.80078125, 0.470703125, 1.123046875, 0.227783203125, 0.306396484375, 0.0780029296875, 0.0037288665771484375, 0.004032135009765625, 0.0008425712585449219, 0.42431640625, 0.0074462890625, 0.049774169921875, 0.046478271484375, 0.046417236328125, 0.07061767578125, 0.188720703125, 0.01910400390625, 0.0219268798828125, 0.07720947265625, 0.611328125, 0.02874755859375, 0.119873046875, 0.7333984375, 0.0010662078857421875, 0.377685546875, 1.02734375, 0.0089263916015625, 0.412841796875, 1.7255859375, 0.5654296875, 0.1517333984375, 0.1309814453125, 0.0120849609375, 0.5087890625, 0.022064208984375, 0.6884765625, 1.2451171875, 0.04595947265625, 0.0107574462890625, 0.004169464111328125, 0.00011289119720458984, 0.052154541015625], "tokens": [664, 319, 664, 319, 477, 753, 645, 1212, 886, 1541, 996, 884, 17705, 645, 32, 664, 319, 477, 753, 372, 1212, 886, 1541, 996, 884, 6783, 372, 32, 664, 319, 477, 753, 281, 1919, 886, 3498, 7290, 9209, 1300, 32, 664, 569, 334, 907, 763, 5008, 26, 1212, 645, 1212, 30, 4004]}
{"line_number": 765, "line_type": "original", "code": "          if (cfa != null) {", "entropy": 2.193359375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [8.828125, 1.8515625, 0.291259765625, 2.845703125, 3.3203125, 0.0037975311279296875, 0.247802734375, 0.153564453125], "tokens": [2033, 415, 308, 37059, 863, 744, 27, 301]}
{"line_number": 765, "line_type": "generated", "code": "\n   * @param fromNode The node to start the CFG edge from.\n   * @param toNode The node to end the CFG edge at.\n   */\n  private void createEdge(Node fromNode, Branch branch, Node toNode) {\n    Preconditions", "entropy": 0.31787109375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.55126953125, 0.2734375, 0.6083984375, 0.11724853515625, 0.3193359375, 0.193359375, 0.93115234375, 0.6845703125, 2.166015625, 1.75390625, 0.67822265625, 1.5751953125, 0.02880859375, 0.2440185546875, 0.1505126953125, 0.049896240234375, 0.00617218017578125, 0.003963470458984375, 0.0011377334594726562, 0.2310791015625, 0.00623321533203125, 0.0265350341796875, 0.07757568359375, 0.047149658203125, 0.64794921875, 0.019561767578125, 0.00872802734375, 0.004425048828125, 0.331298828125, 0.0172119140625, 0.035247802734375, 0.78369140625, 0.01303863525390625, 1.4619140625, 0.45849609375, 0.4443359375, 0.0079803466796875, 0.0106353759765625, 0.0308990478515625, 0.006824493408203125, 0.0045013427734375, 0.0006971359252929688, 0.06671142578125, 0.2132568359375, 0.042083740234375, 0.01108551025390625, 0.0022735595703125, 0.0002117156982421875, 0.03155517578125, 0.007205963134765625, 0.1612548828125, 0.97705078125], "tokens": [664, 319, 477, 753, 645, 1212, 886, 1541, 372, 1477, 322, 31848, 6731, 645, 32, 664, 319, 477, 753, 372, 1212, 886, 1541, 372, 943, 322, 31848, 6731, 821, 32, 664, 569, 334, 945, 763, 1487, 6530, 26, 1212, 645, 1212, 30, 23745, 5573, 30, 4004, 372, 1212, 27, 301, 284, 40596]}
{"line_number": 770, "line_type": "original", "code": "          return computeFollowNode(fromNode, parent, cfa);", "entropy": 1.671875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [9.734375, 3.36328125, 7.91796875, 0.60595703125, 0.037689208984375, 0.012359619140625, 0.13232421875, 0.005626678466796875, 0.0340576171875, 1.4951171875, 0.0243377685546875, 0.0224761962890625, 0.00010979175567626953, 0.02166748046875], "tokens": [2033, 442, 7596, 13052, 1212, 26, 1070, 1212, 30, 2935, 30, 281, 1919, 293]}
{"line_number": 770, "line_type": "generated", "code": "  }\n\n  /**\n   * Gets the control flow graph for this function.\n   */\n  public ControlFlowGraph getControlFlowGraph() {\n    return cfa;\n  }", "entropy": 0.476318359375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [1.5205078125, 0.084228515625, 0.9091796875, 0.246337890625, 0.05291748046875, 0.00042629241943359375, 3.357421875, 0.255126953125, 2.80859375, 0.044769287109375, 0.0863037109375, 1.64453125, 0.7939453125, 1.044921875, 0.267333984375, 0.138427734375, 0.80859375, 0.006561279296875, 0.58251953125, 0.032806396484375, 3.9696693420410156e-05, 0.0004050731658935547, 0.07537841796875, 0.54736328125, 0.00034165382385253906, 0.01153564453125, 0.0176849365234375, 0.0010042190551757812, 0.03070068359375, 0.1260986328125, 1.1181640625, 0.027313232421875, 0.012664794921875, 0.00991058349609375, 0.000728607177734375], "tokens": [225, 320, 719, 1022, 664, 319, 7124, 322, 3498, 7290, 3996, 436, 458, 667, 32, 664, 569, 334, 562, 7813, 4055, 3406, 622, 2422, 4055, 3406, 346, 301, 284, 442, 281, 1919, 45, 334, 320]}
{"line_number": 752, "line_type": "original", "code": "            return computeFallThrough(parent.getLastChild());", "entropy": 2.0703125, "is_bug_line": false, "sus_score": 0.2970442628930023, "per_token_entropy": [7.4296875, 0.5029296875, 1.927734375, 0.556640625, 0.000156402587890625, 0.0015087127685546875, 9.9453125, 0.62890625, 1.6669921875, 0.0028781890869140625, 0.107666015625], "tokens": [1468, 442, 7596, 38206, 17749, 26, 2544, 32, 20197, 2931, 1035]}
{"line_number": 752, "line_type": "generated", "code": "\n        } else {\n          return computeFallThrough(n.getFirstChild().getNext().getNext());\n        }\n      default:\n        return n;\n    }\n  }\n\n  /**\n   * Computes the follow node of a given node.\n   */\n  private static Node compute", "entropy": 0.31494140625, "is_bug_line": false, "sus_score": 0.2970442628930023, "per_token_entropy": [0.1326904296875, 0.003673553466796875, 0.0877685546875, 0.022186279296875, 0.1788330078125, 0.14453125, 0.64208984375, 0.051788330078125, 4.9591064453125e-05, 0.0008401870727539062, 0.00858306884765625, 0.0006341934204101562, 0.662109375, 0.0011882781982421875, 0.394775390625, 0.005725860595703125, 0.54296875, 0.0014295578002929688, 0.0023593902587890625, 0.01007843017578125, 0.0001049041748046875, 0.6728515625, 0.5234375, 0.0020694732666015625, 0.10101318359375, 0.0709228515625, 0.040557861328125, 0.08935546875, 0.0106964111328125, 0.0021877288818359375, 0.01505279541015625, 0.0022182464599609375, 0.350341796875, 0.381103515625, 0.05712890625, 0.0003573894500732422, 0.8642578125, 0.1390380859375, 1.609375, 0.210205078125, 0.623046875, 1.1787109375, 1.4775390625, 0.253662109375, 1.087890625, 0.78564453125, 1.2021484375, 0.008087158203125, 1.34375, 0.37060546875, 0.0133819580078125, 0.001216888427734375], "tokens": [291, 320, 813, 301, 616, 442, 7596, 38206, 17749, 26, 96, 32, 25657, 2931, 922, 23017, 922, 23017, 1035, 291, 320, 397, 1244, 44, 291, 442, 310, 45, 284, 320, 334, 320, 719, 1022, 664, 319, 41932, 322, 1976, 1541, 432, 312, 2702, 1541, 32, 664, 569, 334, 945, 907, 4004, 7596]}
{"line_number": 841, "line_type": "original", "code": "          if (lastJump == cfgNode) {", "entropy": 1.9375, "is_bug_line": false, "sus_score": 0.26490647141300877, "per_token_entropy": [9.6640625, 2.68359375, 0.20703125, 5.32421875, 0.40234375, 0.59375, 0.1566162109375, 0.0024623870849609375, 0.217529296875, 0.1279296875], "tokens": [2033, 415, 308, 2135, 17861, 610, 8444, 1212, 27, 301]}
{"line_number": 841, "line_type": "generated", "code": "\n   * Checks if target is actually the break target of labeled break. The label\n   * can be null if it is an unlabeled break.\n   */\n  private static boolean isBreakTarget(Node target, Node parent, String label) {\n    return is", "entropy": 0.19091796875, "is_bug_line": false, "sus_score": 0.26490647141300877, "per_token_entropy": [0.72900390625, 0.2335205078125, 0.9375, 0.1566162109375, 0.9091796875, 0.1705322265625, 0.56884765625, 0.216064453125, 0.654296875, 0.2421875, 0.11065673828125, 0.84619140625, 1.1796875, 0.208740234375, 0.12249755859375, 0.51611328125, 0.0182952880859375, 0.00016558170318603516, 0.008056640625, 0.0028133392333984375, 0.0022125244140625, 0.00408172607421875, 0.002529144287109375, 0.0014009475708007812, 0.00521087646484375, 0.00048232078552246094, 0.00151824951171875, 0.0157623291015625, 0.01085662841796875, 0.05169677734375, 0.05450439453125, 0.0247802734375, 0.478515625, 0.0518798828125, 0.0013437271118164062, 0.0218963623046875, 0.05120849609375, 0.5107421875, 0.0928955078125, 0.237060546875, 0.034881591796875, 0.0214080810546875, 0.12249755859375, 0.0291748046875, 0.00922393798828125, 0.06884765625, 0.0010700225830078125, 0.0025348663330078125, 0.002044677734375, 0.0308837890625, 0.0931396484375, 0.05999755859375], "tokens": [664, 319, 17279, 415, 1760, 438, 6723, 322, 1626, 1760, 432, 30429, 1626, 32, 886, 2266, 664, 319, 883, 526, 744, 415, 561, 438, 600, 707, 37415, 1626, 32, 664, 569, 334, 945, 907, 1905, 438, 10438, 2922, 26, 1212, 1760, 30, 4004, 2935, 30, 892, 2266, 27, 301, 284, 442, 438]}
{"line_number": 842, "line_type": "original", "code": "            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());", "entropy": 1.7138671875, "is_bug_line": false, "sus_score": 0.26490647141300877, "per_token_entropy": [9.1640625, 11.7578125, 0.346435546875, 0.212646484375, 1.517578125, 0.017364501953125, 0.01202392578125, 0.1282958984375, 0.002040863037109375, 0.207763671875, 0.004638671875, 2.033203125, 0.00533294677734375, 2.3125, 2.873046875, 0.218017578125, 0.00661468505859375, 0.0259552001953125], "tokens": [1468, 1487, 6530, 26, 4687, 1212, 30, 23745, 32, 567, 81, 1460, 30, 4899, 32, 20197, 2931, 1035]}
{"line_number": 842, "line_type": "generated", "code": "\n   * the label is null, then this method will always return true.\n   */\n  private static boolean matchLabel(Node target, String label) {\n    if (label == null) {\n      return true;\n    }\n    for (Node c = target", "entropy": 0.36181640625, "is_bug_line": false, "sus_score": 0.26490647141300877, "per_token_entropy": [0.52685546875, 0.0389404296875, 1.1611328125, 0.78271484375, 0.6171875, 0.97314453125, 0.320068359375, 1.435546875, 1.9951171875, 1.39453125, 1.255859375, 1.5048828125, 0.033416748046875, 0.1505126953125, 0.112548828125, 0.11663818359375, 0.1065673828125, 0.01885986328125, 0.09527587890625, 0.003757476806640625, 0.0028896331787109375, 0.00835418701171875, 0.00020444393157958984, 0.0073089599609375, 0.0091400146484375, 1.306640625, 0.02203369140625, 0.028839111328125, 0.0047454833984375, 0.004547119140625, 0.002971649169921875, 0.032379150390625, 0.53662109375, 0.02191162109375, 0.2080078125, 0.10400390625, 0.0005145072937011719, 0.0469970703125, 0.0136260986328125, 0.044921875, 0.00687408447265625, 0.0026340484619140625, 0.00013959407806396484, 0.0182647705078125, 0.0011358261108398438, 0.4150390625, 2.384765625, 0.0377197265625, 0.0161590576171875, 0.732421875, 0.10626220703125, 0.03497314453125], "tokens": [664, 319, 322, 2266, 438, 744, 30, 1615, 458, 1411, 1098, 5182, 442, 861, 32, 664, 569, 334, 945, 907, 1905, 2530, 2168, 26, 1212, 1760, 30, 892, 2266, 27, 301, 284, 415, 308, 1172, 610, 744, 27, 301, 397, 442, 861, 45, 284, 320, 284, 436, 308, 1212, 281, 280, 1760]}
{"line_number": 854, "line_type": "original", "code": "        lastJump = handler;", "entropy": 4.2578125, "is_bug_line": false, "sus_score": 0.26490647141300877, "per_token_entropy": [6.078125, 10.0234375, 3.236328125, 0.1636962890625, 5.125, 0.92529296875], "tokens": [351, 2401, 17861, 280, 4899, 45]}
{"line_number": 854, "line_type": "generated", "code": "\n    return false;\n  }\n\n  /**\n   * Returns true if the given node is a break statement.\n   */\n  private static boolean isBreakStructure(Node n, boolean labeled) {\n    return n.isBreak() && (labeled ||!n.", "entropy": 0.38671875, "is_bug_line": false, "sus_score": 0.26490647141300877, "per_token_entropy": [0.294677734375, 0.07550048828125, 0.028839111328125, 0.0012083053588867188, 0.0159149169921875, 0.0006380081176757812, 0.2138671875, 0.218505859375, 0.0831298828125, 0.0003294944763183594, 2.560546875, 0.68359375, 0.08929443359375, 0.7783203125, 1.23828125, 0.430419921875, 0.54833984375, 0.51953125, 1.0888671875, 1.3935546875, 1.203125, 0.4697265625, 0.207275390625, 0.001811981201171875, 0.264404296875, 0.024627685546875, 0.0023326873779296875, 0.0006055831909179688, 0.0012102127075195312, 0.10601806640625, 0.0014743804931640625, 0.004436492919921875, 0.958984375, 0.004314422607421875, 0.005352020263671875, 0.90625, 0.05487060546875, 0.0004086494445800781, 0.0257415771484375, 0.796875, 0.748046875, 0.1878662109375, 0.33935546875, 0.037872314453125, 0.007671356201171875, 0.8671875, 0.8564453125, 0.1878662109375, 0.142578125, 0.849609375, 0.5810546875, 0.0009250640869140625], "tokens": [284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 3759, 861, 415, 322, 2702, 1541, 438, 312, 1626, 7603, 32, 664, 569, 334, 945, 907, 1905, 438, 10438, 8634, 26, 1212, 310, 30, 1905, 30429, 27, 301, 284, 442, 310, 32, 297, 10438, 346, 962, 308, 37415, 1276, 653, 96, 32]}
{"line_number": 855, "line_type": "original", "code": "      }", "entropy": 4.71484375, "is_bug_line": false, "sus_score": 0.26490647141300877, "per_token_entropy": [8.234375, 1.1953125], "tokens": [647, 320]}
{"line_number": 855, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Checks if target is a break statement. The label can be null if it is an\n   * unlabeled break.\n   */\n  private static boolean isBreakStructure(Node target, boolean labeled) {\n    if (labeled) {", "entropy": 0.274658203125, "is_bug_line": false, "sus_score": 0.26490647141300877, "per_token_entropy": [0.252197265625, 0.2274169921875, 0.1861572265625, 0.216552734375, 0.09259033203125, 0.00025963783264160156, 1.0185546875, 0.19140625, 1.5, 0.4560546875, 1.015625, 0.81103515625, 1.2158203125, 1.25, 1.6279296875, 0.1319580078125, 0.1185302734375, 0.0079803466796875, 0.0374755859375, 0.0260009765625, 0.04217529296875, 0.0244598388671875, 0.059539794921875, 0.0026645660400390625, 0.0001271963119506836, 0.0013380050659179688, 0.00861358642578125, 0.005405426025390625, 0.040496826171875, 0.04388427734375, 0.0286102294921875, 0.00647735595703125, 0.263671875, 0.0280609130859375, 0.0012235641479492188, 0.0007686614990234375, 0.00107574462890625, 0.037506103515625, 0.0009045600891113281, 0.007640838623046875, 0.044342041015625, 0.0005950927734375, 0.01123046875, 0.98388671875, 0.0254364013671875, 0.0003628730773925781, 0.012451171875, 1.279296875, 0.392578125, 0.432861328125, 0.1116943359375, 0.002010345458984375], "tokens": [334, 320, 719, 1022, 664, 319, 17279, 415, 1760, 438, 312, 1626, 7603, 32, 886, 2266, 883, 526, 744, 415, 561, 438, 600, 664, 319, 707, 37415, 1626, 32, 664, 569, 334, 945, 907, 1905, 438, 10438, 8634, 26, 1212, 1760, 30, 1905, 30429, 27, 301, 284, 415, 308, 37415, 27, 301]}
{"line_number": 230, "line_type": "original", "code": "        exceptionHandler.push(n);", "entropy": 2.09375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.44140625, 7.8046875, 0.193359375, 0.01739501953125, 1.81640625, 0.036651611328125, 0.3955078125, 0.048370361328125], "tokens": [351, 3756, 1972, 32, 2018, 26, 96, 293]}
{"line_number": 230, "line_type": "generated", "code": "\n             * we need to stop the traversal.\n             */\n          return n == parent.getLastChild();\n      }\n    }\n\n    return true;\n  }\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (", "entropy": 0.342529296875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [1.6142578125, 0.2386474609375, 0.56982421875, 1.3515625, 0.01047515869140625, 2.623046875, 1.0849609375, 0.11199951171875, 0.689453125, 0.787109375, 0.4345703125, 0.318115234375, 0.482666015625, 0.12127685546875, 1.275390625, 0.01421356201171875, 0.0005421638488769531, 1.2255859375, 0.0008654594421386719, 0.85888671875, 0.63623046875, 0.004566192626953125, 0.1417236328125, 0.0007772445678710938, 0.36181640625, 0.759765625, 0.1456298828125, 9.167194366455078e-05, 0.00937652587890625, 0.0007767677307128906, 0.267333984375, 0.13427734375, 0.0007848739624023438, 0.0018310546875, 0.007488250732421875, 0.0285186767578125, 0.137939453125, 0.0062255859375, 0.1279296875, 0.0009489059448242188, 0.045135498046875, 0.0004241466522216797, 0.00368499755859375, 0.01534271240234375, 0.0134429931640625, 0.006557464599609375, 0.007244110107421875, 0.0006384849548339844, 0.0027484893798828125, 0.05902099609375, 1.0673828125, 0.006946563720703125], "tokens": [1802, 319, 996, 1849, 372, 4719, 322, 34395, 32, 1802, 569, 616, 442, 310, 610, 2935, 32, 20197, 2931, 473, 397, 320, 284, 320, 446, 442, 861, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 284, 3578, 308]}
{"line_number": 231, "line_type": "original", "code": "        return true;", "entropy": 2.892578125, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [6.01171875, 2.818359375, 2.7265625, 0.01136016845703125], "tokens": [351, 442, 861, 45]}
{"line_number": 231, "line_type": "generated", "code": "\n           *\n           * If we are visiting the CATCH node, we will not be able to\n           * synthesize a lattice for the exception variable.\n           *\n           * We will have to do a separate analysis to synthesize the lattice\n           * for the exception", "entropy": 1.0498046875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.6943359375, 0.65087890625, 0.8427734375, 0.01708984375, 2.064453125, 0.6337890625, 0.54345703125, 0.85302734375, 0.0029277801513671875, 0.279052734375, 0.74755859375, 1.158203125, 0.074462890625, 0.88232421875, 2.0546875, 2.404296875, 1.0830078125, 2.412109375, 0.0050506591796875, 2.3515625, 0.0004405975341796875, 2.45703125, 0.021240234375, 1.775390625, 0.5703125, 1.1748046875, 0.344482421875, 2.326171875, 1.30859375, 1.099609375, 1.5390625, 0.440185546875, 0.1480712890625, 0.00872802734375, 2.62890625, 1.6328125, 2.8515625, 0.32763671875, 2.5234375, 1.6943359375, 2.740234375, 1.19140625, 1.677734375, 1.8359375, 0.00875091552734375, 1.0634765625, 0.367919921875, 0.2379150390625, 0.0007414817810058594, 0.2415771484375, 0.367919921875, 0.2437744140625], "tokens": [2607, 319, 2607, 319, 1670, 996, 884, 7725, 299, 322, 33413, 1541, 30, 996, 1098, 646, 526, 5300, 372, 2607, 319, 20182, 17931, 312, 46411, 436, 322, 3756, 2677, 32, 2607, 319, 2607, 319, 2688, 1098, 1159, 372, 745, 312, 8111, 9209, 372, 20182, 17931, 322, 46411, 2607, 319, 436, 322, 3756]}
{"line_number": 285, "line_type": "original", "code": "          if (n == parent.getFirstChild().getNext()) {", "entropy": 1.3115234375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [5.44921875, 2.76171875, 0.3583984375, 2.60546875, 1.79296875, 0.39990234375, 0.012603759765625, 0.740234375, 0.00048828125, 2.626953125, 0.0190582275390625, 0.213134765625, 0.06610107421875], "tokens": [2033, 415, 308, 96, 610, 2935, 32, 25657, 2931, 922, 23017, 1157, 301]}
{"line_number": 285, "line_type": "generated", "code": "\n        Preconditions.checkState(exceptionHandler.isEmpty());\n        exceptionHandler.push(n);\n        return;\n      case Token.FINALLY:\n        handleFinally(n);\n        return;\n      case Token.BREAK:\n        handleBreak(n);\n        return", "entropy": 0.1744384765625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.5263671875, 1.060546875, 0.0011196136474609375, 0.002590179443359375, 0.0158843994140625, 0.11883544921875, 0.2259521484375, 0.0162506103515625, 0.0073699951171875, 1.3994140625, 0.2314453125, 0.20703125, 0.459228515625, 0.0020885467529296875, 0.0011682510375976562, 0.0897216796875, 0.0075836181640625, 0.314697265625, 0.055633544921875, 0.496826171875, 0.55224609375, 0.0007686614990234375, 0.233154296875, 0.044189453125, 0.0008058547973632812, 0.0001608133316040039, 0.360107421875, 2.7418136596679688e-06, 0.0001302957534790039, 0.541015625, 0.401123046875, 0.0188140869140625, 0.01425933837890625, 0.008087158203125, 0.00580596923828125, 0.01219940185546875, 0.01372528076171875, 0.0006051063537597656, 0.1812744140625, 0.07470703125, 0.0015125274658203125, 0.00017654895782470703, 0.80419921875, 0.0001842975616455078, 0.2476806640625, 0.040771484375, 0.050079345703125, 0.1685791015625, 0.0207366943359375, 0.023345947265625, 0.00424957275390625, 0.003467559814453125], "tokens": [291, 40596, 32, 1553, 1078, 26, 3893, 1972, 32, 6393, 1035, 291, 3756, 1972, 32, 2018, 26, 96, 293, 291, 442, 45, 397, 1135, 6512, 32, 12611, 31578, 44, 291, 2887, 28325, 26, 96, 293, 291, 442, 45, 397, 1135, 6512, 32, 26924, 44, 291, 2887, 10438, 26, 96, 293, 291, 442]}
{"line_number": 286, "line_type": "original", "code": "            Preconditions.checkState(exceptionHandler.peek() == parent);", "entropy": 1.7578125, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [7.7890625, 9.3125, 0.005458831787109375, 0.009124755859375, 0.042144775390625, 0.1539306640625, 0.71728515625, 0.0789794921875, 0.04229736328125, 1.1904296875, 0.55078125, 0.4853515625, 3.9453125, 0.28857421875], "tokens": [1468, 40596, 32, 1553, 1078, 26, 3893, 1972, 32, 20124, 346, 610, 2935, 293]}
{"line_number": 286, "line_type": "generated", "code": "\n        return;\n      case Token.FINALLY:\n        handleFinally(n);\n        return;\n      case Token.BREAK:\n        handleBreak(n);\n        return;\n      case Token.CONTINUE:\n        handleContinue(n);\n        return;\n    }\n ", "entropy": 0.11883544921875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.377197265625, 0.427734375, 0.00107574462890625, 0.143310546875, 0.0230560302734375, 0.00054168701171875, 0.0003616809844970703, 0.353759765625, 1.7881393432617188e-06, 0.00011837482452392578, 0.06597900390625, 0.020965576171875, 0.004497528076171875, 0.007564544677734375, 0.006061553955078125, 0.005451202392578125, 1.021484375, 0.016876220703125, 0.00045800209045410156, 0.1917724609375, 0.053131103515625, 0.0014219284057617188, 0.0014715194702148438, 0.81494140625, 0.0001977682113647461, 0.2061767578125, 0.0291290283203125, 0.0401611328125, 0.12225341796875, 0.0184783935546875, 0.0201873779296875, 0.0220794677734375, 0.00379180908203125, 5.8531761169433594e-05, 0.01148223876953125, 0.002010345458984375, 0.00011837482452392578, 4.6253204345703125e-05, 0.033294677734375, 3.445148468017578e-05, 0.0019207000732421875, 0.0009131431579589844, 0.00772857666015625, 0.0005202293395996094, 0.0014085769653320312, 0.007781982421875, 0.044158935546875, 0.002262115478515625, 0.0002187490463256836, 1.6376953125, 0.005886077880859375, 0.422119140625], "tokens": [291, 442, 45, 397, 1135, 6512, 32, 12611, 31578, 44, 291, 2887, 28325, 26, 96, 293, 291, 442, 45, 397, 1135, 6512, 32, 26924, 44, 291, 2887, 10438, 26, 96, 293, 291, 442, 45, 397, 1135, 6512, 32, 45405, 44, 291, 2887, 17743, 26, 96, 293, 291, 442, 45, 284, 320, 334]}
{"line_number": 287, "line_type": "original", "code": "            exceptionHandler.pop();", "entropy": 3.537109375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [9.34375, 11.140625, 0.1514892578125, 0.01885986328125, 0.5615234375, 0.00872039794921875], "tokens": [1468, 3756, 1972, 32, 3235, 473]}
{"line_number": 287, "line_type": "generated", "code": "\n    }\n  }\n\n  @Override\n  public void visit(NodeTraversal t, NodeScope n, NodeScope parent) {\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        handleFunction(n.getNode());\n        return;\n    }", "entropy": 0.2440185546875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.69677734375, 0.005565643310546875, 0.40380859375, 0.0008192062377929688, 0.390869140625, 1.6240234375, 0.01020050048828125, 0.005046844482421875, 0.0091552734375, 0.0224456787109375, 0.362060546875, 0.0474853515625, 0.05816650390625, 0.0019626617431640625, 0.007160186767578125, 0.005352020263671875, 0.408447265625, 0.376953125, 0.787109375, 0.1910400390625, 0.02294921875, 0.334716796875, 0.447265625, 0.0025005340576171875, 0.00824737548828125, 0.11724853515625, 1.40625, 0.01027679443359375, 0.00879669189453125, 0.0005393028259277344, 0.08941650390625, 0.0004546642303466797, 0.00957489013671875, 0.0631103515625, 0.020477294921875, 0.01690673828125, 0.0002751350402832031, 0.38818359375, 0.004268646240234375, 0.0816650390625, 0.494873046875, 0.208984375, 0.368408203125, 0.0181121826171875, 1.2080078125, 0.64306640625, 0.026214599609375, 0.036773681640625, 0.2376708984375, 0.0004897117614746094, 0.99365234375, 0.0012273788452148438], "tokens": [284, 320, 334, 320, 719, 477, 1788, 334, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 5504, 310, 30, 4004, 5504, 2935, 27, 301, 284, 3578, 308, 96, 32, 10272, 1157, 301, 397, 1135, 6512, 32, 9842, 44, 291, 2887, 2447, 26, 96, 32, 17699, 1035, 291, 442, 45, 284, 320]}
{"line_number": 332, "line_type": "original", "code": "        handleTry(n);", "entropy": 3.478515625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [8.296875, 3.712890625, 3.5546875, 1.36328125, 3.64453125, 0.302734375], "tokens": [351, 2887, 8296, 26, 96, 293]}
{"line_number": 332, "line_type": "generated", "code": "\n  }\n\n  private void handleDo(Node node) {\n    // Control goes to the follow() if the condition evaluates to false.\n    createEdge(node, Branch.ON_FALSE,\n        computeFollowNode(node, this));\n\n    // Control goes", "entropy": 0.11163330078125, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.470703125, 0.00931549072265625, 0.037261962890625, 0.0556640625, 0.00669097900390625, 0.0008234977722167969, 0.0322265625, 0.002170562744140625, 0.00022327899932861328, 0.0248870849609375, 0.0003421306610107422, 0.0009245872497558594, 0.0220489501953125, 0.26904296875, 0.69384765625, 0.1131591796875, 0.051605224609375, 0.06634521484375, 0.97412109375, 0.14208984375, 0.53759765625, 0.03350830078125, 0.06585693359375, 0.046905517578125, 0.0011987686157226562, 0.348388671875, 0.0280303955078125, 0.01525115966796875, 0.13330078125, 0.001461029052734375, 0.0005578994750976562, 0.01312255859375, 5.8650970458984375e-05, 0.0020275115966796875, 5.5909156799316406e-05, 0.0301513671875, 5.733966827392578e-05, 0.369140625, 0.0002484321594238281, 0.077392578125, 0.003932952880859375, 0.00530242919921875, 0.00013244152069091797, 0.0001481771469116211, 0.0010585784912109375, 0.0028438568115234375, 0.0029468536376953125, 0.0011529922485351562, 0.666015625, 0.1112060546875, 0.307373046875, 0.0262603759765625], "tokens": [334, 320, 719, 945, 763, 2887, 2555, 26, 1212, 1541, 27, 301, 284, 434, 7813, 13107, 372, 322, 1976, 346, 415, 322, 3700, 43992, 372, 901, 32, 284, 1487, 6530, 26, 1251, 30, 23745, 32, 567, 81, 7347, 30, 291, 7596, 13052, 1212, 26, 1251, 30, 458, 876, 446, 434, 7813, 13107]}
{"line_number": 333, "line_type": "original", "code": "        return;", "entropy": 3.869140625, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [9.2265625, 2.2109375, 0.170166015625], "tokens": [351, 442, 45]}
{"line_number": 333, "line_type": "generated", "code": "\n  private void handleDo(Node node) {\n    // Control goes to the first statement if the condition evaluates to true.\n    createEdge(node, Branch.ON_TRUE,\n        computeFallThrough(node.getLastChild()));\n\n    // Control goes to", "entropy": 0.1219482421875, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.556640625, 0.051971435546875, 0.01355743408203125, 0.0029697418212890625, 0.283447265625, 0.004032135009765625, 0.00044798851013183594, 0.039642333984375, 0.0005893707275390625, 0.0009760856628417969, 0.02532958984375, 0.2587890625, 0.63671875, 0.10540771484375, 0.05316162109375, 0.06378173828125, 0.89306640625, 0.00829315185546875, 0.4052734375, 0.023162841796875, 0.0299224853515625, 0.016510009765625, 0.002410888671875, 0.0677490234375, 0.005123138427734375, 0.0055389404296875, 0.1539306640625, 0.000946044921875, 0.0007615089416503906, 0.0220184326171875, 0.002155303955078125, 0.003131866455078125, 5.316734313964844e-05, 0.045257568359375, 2.1457672119140625e-06, 0.3642578125, 0.0010652542114257812, 0.2130126953125, 0.157958984375, 0.55810546875, 1.633167266845703e-05, 0.0025787353515625, 0.038330078125, 0.004619598388671875, 0.0404052734375, 0.0012912750244140625, 0.939453125, 0.09954833984375, 0.03192138671875, 0.08868408203125, 0.007236480712890625, 0.007038116455078125], "tokens": [334, 945, 763, 2887, 2555, 26, 1212, 1541, 27, 301, 284, 434, 7813, 13107, 372, 322, 1932, 7603, 415, 322, 3700, 43992, 372, 861, 32, 284, 1487, 6530, 26, 1251, 30, 23745, 32, 567, 81, 6373, 30, 291, 7596, 38206, 17749, 26, 1251, 32, 20197, 2931, 5073, 446, 434, 7813, 13107, 372]}
