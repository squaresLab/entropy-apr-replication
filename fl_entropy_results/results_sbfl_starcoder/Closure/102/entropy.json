{"line_number": 393, "line_type": "original", "code": "      Node next = current.getNext();", "entropy": 2.57421875, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [3.87109375, 3.310546875, 7.51953125, 1.8857421875, 3.78515625, 0.0799560546875, 0.1097412109375, 0.0308990478515625], "tokens": [647, 4004, 2354, 280, 1550, 32, 23017, 473]}
{"line_number": 393, "line_type": "generated", "code": "\n     */\n    @Override\n    public void onRedeclaration(Node declaration, Node original) {\n      // If the declaration is a VAR declaration, then we can simply remove\n      // the duplicate declaration.\n      if (declaration.getType() == Token.VAR)", "entropy": 0.6474609375, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [0.6484375, 0.60595703125, 0.0714111328125, 0.5849609375, 0.0009455680847167969, 0.0343017578125, 0.0098876953125, 0.42919921875, 0.1402587890625, 1.16015625, 0.01004791259765625, 0.060211181640625, 1.4267578125, 2.298828125, 0.104248046875, 0.255126953125, 0.83056640625, 0.93896484375, 0.09881591796875, 0.210205078125, 1.6181640625, 2.70703125, 0.87255859375, 1.6728515625, 0.397216796875, 1.5068359375, 1.1650390625, 1.8330078125, 0.79541015625, 1.306640625, 1.4541015625, 1.1015625, 2.26171875, 0.69970703125, 0.623046875, 0.005100250244140625, 0.416748046875, 1.0361328125, 0.7900390625, 0.367431640625, 0.44580078125, 0.2447509765625, 0.0158233642578125, 0.14453125, 0.0084686279296875, 0.058837890625, 0.000347137451171875, 0.0188140869140625, 0.001354217529296875, 1.537799835205078e-05, 0.00457000732421875, 0.1707763671875], "tokens": [275, 569, 284, 477, 1788, 284, 562, 763, 544, 435, 24050, 26, 1212, 13317, 30, 4004, 4707, 27, 301, 397, 434, 1670, 322, 13317, 438, 312, 10244, 13317, 30, 1615, 996, 883, 9639, 3345, 397, 434, 322, 12843, 13317, 32, 397, 415, 308, 24050, 32, 10272, 346, 610, 6512, 32, 7416, 27]}
{"line_number": 394, "line_type": "original", "code": "      if (NodeUtil.isFunctionDeclaration(current)) {", "entropy": 1.5947265625, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [2.25, 9.90625, 1.05859375, 2.12109375, 0.002285003662109375, 0.0010852813720703125, 1.25, 0.376953125, 0.0029811859130859375, 1.87890625, 0.1397705078125, 0.148681640625], "tokens": [647, 415, 308, 1212, 1733, 32, 39504, 10367, 26, 1700, 490, 301]}
{"line_number": 394, "line_type": "generated", "code": "\n     * the traversal.\n     */\n    @Override\n    public void onRedeclaration(String name, Node n, Node scope, Node other) {\n      // If we are in a VAR declaration, remove the duplicate declaration.\n      if (n.getType()", "entropy": 0.63330078125, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [1.068359375, 0.1756591796875, 1.9921875, 0.2088623046875, 0.2169189453125, 0.287353515625, 0.309326171875, 0.01526641845703125, 0.260498046875, 0.0005559921264648438, 0.0177154541015625, 0.00585174560546875, 0.237060546875, 0.062225341796875, 1.0439453125, 0.007587432861328125, 0.05560302734375, 1.419921875, 0.189208984375, 0.10382080078125, 0.0751953125, 1.0634765625, 0.5263671875, 0.1065673828125, 1.5625, 0.63330078125, 0.2462158203125, 1.896484375, 0.095703125, 0.07269287109375, 0.1982421875, 2.009765625, 2.59765625, 2.083984375, 1.0029296875, 1.3779296875, 0.6787109375, 1.3505859375, 1.0048828125, 0.7138671875, 1.703125, 0.34619140625, 1.08984375, 1.2275390625, 0.29443359375, 0.2021484375, 0.320556640625, 0.04205322265625, 0.5126953125, 0.0300445556640625, 0.19189453125, 0.0003879070281982422], "tokens": [275, 319, 322, 34395, 32, 275, 569, 284, 477, 1788, 284, 562, 763, 544, 435, 24050, 26, 652, 636, 30, 4004, 310, 30, 4004, 4576, 30, 4004, 1604, 27, 301, 397, 434, 1670, 996, 884, 328, 312, 10244, 13317, 30, 3345, 322, 12843, 13317, 32, 397, 415, 308, 96, 32, 10272, 346]}
{"line_number": 405, "line_type": "original", "code": "        previous = current;", "entropy": 4.00390625, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [4.14453125, 9.0078125, 0.53369140625, 5.54296875, 0.787109375], "tokens": [351, 4552, 280, 1550, 45]}
{"line_number": 405, "line_type": "generated", "code": "\n      }\n    }\n  }\n\n  /**\n   * Callback for traversing the AST marking the scopes as tickled.\n   */\n  private static class ScopeTicklingCallback implements Callback {\n\n    @Override\n    public void visit(NodeTraversal t, Node n,", "entropy": 0.452880859375, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [0.96435546875, 0.007320404052734375, 0.3349609375, 0.0014400482177734375, 0.16015625, 0.0022335052490234375, 0.2958984375, 0.1119384765625, 0.0227508544921875, 0.00063323974609375, 2.314453125, 1.3115234375, 1.9580078125, 0.01108551025390625, 0.0004508495330810547, 0.494384765625, 0.319091796875, 2.705078125, 1.66796875, 1.1435546875, 2.013671875, 2.17578125, 0.17041015625, 0.5546875, 0.091796875, 0.06488037109375, 0.003391265869140625, 0.031646728515625, 1.0009765625, 0.474853515625, 0.0015316009521484375, 9.083747863769531e-05, 1.6689300537109375e-06, 7.271766662597656e-06, 0.1888427734375, 0.3740234375, 0.031036376953125, 0.6220703125, 0.323974609375, 0.0002002716064453125, 0.007328033447265625, 0.007045745849609375, 0.978515625, 0.364501953125, 0.0003025531768798828, 0.00643157958984375, 0.2109375, 0.011688232421875, 0.00015914440155029297, 0.0003390312194824219, 0.0052642822265625, 0.0025577545166015625], "tokens": [397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 14720, 436, 8321, 424, 1738, 322, 16095, 44720, 322, 25353, 619, 12904, 1231, 32, 664, 569, 334, 945, 907, 443, 22148, 10400, 2920, 3296, 4575, 14720, 301, 446, 477, 1788, 284, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30]}
{"line_number": 407, "line_type": "original", "code": "      current = next;", "entropy": 4.2734375, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [3.24609375, 9.125, 1.654296875, 6.96875, 0.360595703125], "tokens": [647, 1550, 280, 2354, 45]}
{"line_number": 407, "line_type": "generated", "code": "\n        //  2) \"var a, b = c;\" which is replaced with \"a, b = c\"", "entropy": 0.294677734375, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [0.728515625, 0.2032470703125, 0.1143798828125, 0.007205963134765625, 0.0016536712646484375, 0.026519775390625, 0.01380157470703125, 0.063720703125, 1.0419921875, 0.1514892578125, 1.4716796875, 0.4921875, 1.134765625, 0.0816650390625, 0.028564453125, 0.041900634765625, 0.006710052490234375, 0.046783447265625, 0.275146484375, 1.0068359375, 0.040496826171875, 0.013916015625, 0.004192352294921875, 0.0751953125], "tokens": [291, 434, 261, 36, 27, 313, 869, 312, 30, 323, 280, 281, 7879, 1510, 438, 14171, 623, 313, 83, 30, 323, 280, 281, 20]}
{"line_number": 408, "line_type": "original", "code": "    }", "entropy": 4.3515625, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [4.0078125, 4.69921875], "tokens": [264, 320]}
{"line_number": 408, "line_type": "generated", "code": "\n        //     \";\" would be removed but that would require more complicated\n        //     logic to ensure that we didn't remove it if it was the only\n        //     statement in a block.  It's probably not worth the trouble.\n        //  3)", "entropy": 0.99560546875, "is_bug_line": false, "sus_score": 0.0584206237836986, "per_token_entropy": [1.068359375, 0.0794677734375, 0.1488037109375, 1.6767578125, 0.7109375, 0.295654296875, 1.091796875, 1.9052734375, 1.373046875, 1.3134765625, 1.060546875, 2.67578125, 2.90234375, 0.319580078125, 0.00600433349609375, 0.0036220550537109375, 1.4130859375, 0.97509765625, 2.521484375, 0.4599609375, 3.53125, 2.208984375, 0.0012521743774414062, 1.1025390625, 2.3984375, 1.6416015625, 0.42138671875, 0.70263671875, 1.6416015625, 1.0869140625, 0.31298828125, 0.001110076904296875, 0.00201416015625, 0.6171875, 0.1414794921875, 1.19921875, 0.57177734375, 0.455810546875, 1.6640625, 2.81640625, 1.2548828125, 2.36328125, 0.578125, 0.1126708984375, 0.71044921875, 1.7734375, 0.344970703125, 0.0411376953125, 0.0243377685546875, 0.04693603515625, 0.005596160888671875, 0.0008845329284667969], "tokens": [291, 434, 262, 44341, 2268, 526, 6556, 1273, 688, 2268, 1205, 1829, 26602, 291, 434, 262, 8130, 372, 7279, 688, 996, 9075, 1330, 3345, 561, 415, 561, 1597, 322, 1755, 291, 434, 262, 7603, 328, 312, 2163, 32, 225, 2030, 1182, 7801, 646, 16587, 322, 24314, 32, 291, 434, 261, 37, 27]}
{"line_number": 358, "line_type": "original", "code": "        if (assertOnChange && !c.hasChildren()) {", "entropy": 2.935546875, "is_bug_line": false, "sus_score": 0.05538487756217113, "per_token_entropy": [5.19921875, 2.22265625, 0.10150146484375, 11.15625, 7.6640625, 2.826171875, 1.4423828125, 5.5078125, 0.122802734375, 1.7509765625, 0.01056671142578125, 0.0968017578125, 0.0703125], "tokens": [351, 415, 308, 862, 35864, 962, 653, 85, 32, 2040, 7640, 1157, 301]}
{"line_number": 358, "line_type": "generated", "code": "\n    }\n  }\n\n  /**\n   * Add the given function to the front of the given function body.\n   * @param functionBody The function body to add the function to.\n   * @param function The function to add.\n   * @param insertAfter", "entropy": 0.34228515625, "is_bug_line": false, "sus_score": 0.05538487756217113, "per_token_entropy": [0.37060546875, 0.328857421875, 0.1451416015625, 0.0013837814331054688, 0.37451171875, 0.1978759765625, 0.052581787109375, 0.00012290477752685547, 1.8798828125, 1.46875, 1.1474609375, 1.083984375, 0.86328125, 0.0179443359375, 0.5576171875, 0.01148223876953125, 0.053985595703125, 1.0830078125, 0.35302734375, 0.10980224609375, 0.5068359375, 0.2509765625, 0.32177734375, 0.7939453125, 0.1507568359375, 0.197021484375, 0.0156402587890625, 0.09619140625, 0.4267578125, 0.063720703125, 1.2490234375, 0.444580078125, 0.495849609375, 0.0931396484375, 0.09576416015625, 0.038116455078125, 0.01174163818359375, 0.002384185791015625, 0.005016326904296875, 0.0034236907958984375, 0.340576171875, 0.70068359375, 0.014556884765625, 0.2039794921875, 0.1494140625, 0.7275390625, 0.018646240234375, 0.0203094482421875, 0.0020046234130859375, 0.10589599609375, 0.1376953125, 0.0165252685546875], "tokens": [284, 320, 334, 320, 719, 1022, 664, 319, 2222, 322, 2702, 667, 372, 322, 8432, 432, 322, 2702, 667, 3361, 32, 664, 319, 477, 753, 667, 3050, 886, 667, 3361, 372, 1015, 322, 667, 372, 32, 664, 319, 477, 753, 667, 886, 667, 372, 1015, 32, 664, 319, 477, 753, 5551, 5125]}
{"line_number": 362, "line_type": "original", "code": "        while (c.getFirstChild() != c.getLastChild()) {", "entropy": 1.98828125, "is_bug_line": false, "sus_score": 0.05538487756217113, "per_token_entropy": [7.70703125, 5.7578125, 0.10858154296875, 3.158203125, 1.9609375, 3.013671875, 0.0008740425109863281, 0.322265625, 0.0928955078125, 7.28125, 0.288818359375, 0.00873565673828125, 0.0002491474151611328, 0.08587646484375, 0.046539306640625], "tokens": [351, 2218, 308, 85, 32, 25657, 2931, 346, 863, 281, 32, 20197, 2931, 1157, 301]}
{"line_number": 362, "line_type": "generated", "code": "\n   * Move all the functions that are valid at the execution of the first\n   * statement of the function to the beginning of the function definition.\n   */\n  private void moveNamedFunctions(Node functionBody) {\n    Preconditions.checkState(\n        functionBody", "entropy": 0.1507568359375, "is_bug_line": false, "sus_score": 0.05538487756217113, "per_token_entropy": [0.497314453125, 0.139892578125, 1.5986328125, 0.955078125, 0.69140625, 1.048828125, 0.10296630859375, 0.01367950439453125, 0.029815673828125, 0.0244903564453125, 0.007793426513671875, 0.064697265625, 0.006916046142578125, 0.019073486328125, 0.0222625732421875, 0.034576416015625, 0.0002543926239013672, 0.006130218505859375, 0.00830078125, 0.005939483642578125, 0.014862060546875, 0.014739990234375, 0.0019550323486328125, 0.09234619140625, 0.0004968643188476562, 0.0009717941284179688, 0.002689361572265625, 0.0289764404296875, 0.0166778564453125, 0.1505126953125, 0.08984375, 0.05694580078125, 0.0288543701171875, 0.154296875, 0.194091796875, 0.89306640625, 0.041046142578125, 0.30224609375, 0.032135009765625, 0.12353515625, 0.040771484375, 0.058441162109375, 0.006839752197265625, 0.09393310546875, 0.0653076171875, 0.0008020401000976562, 0.00028586387634277344, 0.004566192626953125, 0.0013132095336914062, 0.048370361328125, 0.00180816650390625, 7.748603820800781e-06], "tokens": [664, 319, 11530, 1169, 322, 4442, 688, 884, 2080, 821, 322, 6063, 432, 322, 1932, 664, 319, 7603, 432, 322, 667, 372, 322, 13672, 432, 322, 667, 5644, 32, 664, 569, 334, 945, 763, 5169, 11049, 10905, 26, 1212, 667, 3050, 27, 301, 284, 40596, 32, 1553, 1078, 26, 291, 667, 3050]}
{"line_number": 269, "line_type": "original", "code": "      moveNamedFunctions(n.getLastChild());", "entropy": 3.76953125, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [1.9345703125, 15.625, 9.640625, 1.638671875, 0.8681640625, 1.39453125, 4.421875, 1.4384765625, 0.0014476776123046875, 0.7109375], "tokens": [647, 5169, 11049, 10905, 26, 96, 32, 20197, 2931, 1035]}
{"line_number": 269, "line_type": "generated", "code": "\n      }\n    }\n  }\n\n  /**\n   * Split a VAR statement into multiple VAR statements if there are multiple\n   * declarations in the same statement.\n   *\n   * @param n The node to inspect.\n   */\n  private void splitVarDeclarations(Node", "entropy": 0.38427734375, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [0.96435546875, 0.11029052734375, 0.2335205078125, 0.0005331039428710938, 0.03155517578125, 0.0005354881286621094, 0.11029052734375, 0.1590576171875, 0.03289794921875, 0.0002732276916503906, 0.7265625, 2.615234375, 0.74951171875, 0.66259765625, 0.55419921875, 0.3193359375, 1.298828125, 0.05963134765625, 1.330078125, 0.8701171875, 0.10882568359375, 1.109375, 0.017425537109375, 0.0005774497985839844, 0.990234375, 1.0224609375, 0.405517578125, 1.50390625, 0.11572265625, 0.07861328125, 0.42041015625, 0.78271484375, 0.34765625, 0.00396728515625, 0.7158203125, 0.01186370849609375, 0.14111328125, 0.168212890625, 0.689453125, 0.0673828125, 0.30419921875, 0.0604248046875, 0.020538330078125, 0.026336669921875, 0.00357818603515625, 0.0233917236328125, 0.00609588623046875, 0.0003654956817626953, 0.0001043081283569336, 0.0007777214050292969, 0.0005545616149902344, 0.0038089752197265625], "tokens": [397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 18968, 312, 10244, 7603, 1991, 4609, 10244, 15252, 415, 2017, 884, 4609, 664, 319, 20632, 328, 322, 2432, 7603, 32, 664, 319, 664, 319, 477, 753, 310, 886, 1541, 372, 17787, 32, 664, 569, 334, 945, 763, 6122, 1881, 34283, 26, 1212]}
{"line_number": 378, "line_type": "original", "code": "    Preconditions.checkState(", "entropy": 1.828125, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [4.61328125, 5.82421875, 0.0134429931640625, 0.09686279296875, 0.39599609375, 0.0262298583984375], "tokens": [264, 40596, 32, 1553, 1078, 26]}
{"line_number": 378, "line_type": "generated", "code": "\n    NodeUtil.isVar(n) &&!NodeUtil.isLet(n) &&!NodeUtil.isConst(n));\n    Node parent = n.getParent();\n    Node grandParent = parent.getParent();\n    Node next = n.", "entropy": 0.59912109375, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [1.49609375, 1.5673828125, 0.57763671875, 0.00548553466796875, 0.265625, 0.338623046875, 0.83203125, 1.306640625, 0.9423828125, 0.55078125, 2.279296875, 1.103515625, 0.0016841888427734375, 7.200241088867188e-05, 0.1546630859375, 2.189453125, 0.2225341796875, 0.014617919921875, 0.875, 0.2578125, 0.2978515625, 0.08831787109375, 0.0011491775512695312, 5.793571472167969e-05, 0.048919677734375, 0.006488800048828125, 0.0009093284606933594, 0.001522064208984375, 1.208984375, 0.958984375, 0.84033203125, 2.619140625, 0.039520263671875, 0.0399169921875, 0.0059356689453125, 0.00162506103515625, 0.0031890869140625, 0.14404296875, 1.05078125, 3.1640625, 1.50390625, 0.027130126953125, 0.0928955078125, 0.0307464599609375, 0.0009713172912597656, 0.00032138824462890625, 0.30859375, 1.041015625, 2.232421875, 0.308349609375, 0.09716796875, 0.0119781494140625], "tokens": [284, 4004, 1733, 32, 297, 1881, 26, 96, 27, 962, 653, 1212, 1733, 32, 297, 9809, 26, 96, 27, 962, 653, 1212, 1733, 32, 297, 2775, 26, 96, 876, 284, 4004, 2935, 280, 310, 32, 18789, 473, 284, 4004, 33162, 4433, 280, 2935, 32, 18789, 473, 284, 4004, 2354, 280, 310, 32]}
{"line_number": 380, "line_type": "original", "code": "    Node previous = null;", "entropy": 2.482421875, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [2.736328125, 0.55810546875, 10.8203125, 0.285400390625, 0.47607421875, 0.01324462890625], "tokens": [264, 4004, 4552, 280, 744, 45]}
{"line_number": 380, "line_type": "generated", "code": "\n    NodeTraversal.traverse(compiler, root, tickler);\n  }\n\n  /**\n   * Callback to traverse the tree and remove duplicate VAR declarations.\n   */\n  private class ScopeTicklingCallback extends AbstractShallowCallback {\n    private final Set<String>", "entropy": 0.427001953125, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [0.1893310546875, 0.475341796875, 0.6005859375, 0.00675201416015625, 0.00368499755859375, 0.07623291015625, 0.08587646484375, 0.00026106834411621094, 0.01409912109375, 0.0008044242858886719, 0.1004638671875, 3.814697265625e-06, 0.005146026611328125, 0.62548828125, 0.0003216266632080078, 0.2081298828125, 0.312744140625, 0.07745361328125, 0.0002741813659667969, 3.244140625, 1.521484375, 2.470703125, 0.5869140625, 1.6640625, 0.63720703125, 1.4775390625, 0.56640625, 0.27734375, 0.192626953125, 0.266357421875, 0.022613525390625, 0.1580810546875, 0.0022945404052734375, 0.11151123046875, 0.296875, 0.006832122802734375, 0.00015616416931152344, 8.58306884765625e-06, 1.3470649719238281e-05, 0.6884765625, 0.46435546875, 0.80712890625, 0.01751708984375, 0.0237884521484375, 0.03485107421875, 0.42041015625, 0.97607421875, 1.1943359375, 0.93798828125, 0.004230499267578125, 0.3408203125, 0.0005998611450195312], "tokens": [284, 4004, 35699, 32, 33261, 26, 10199, 30, 3051, 30, 12904, 1180, 293, 334, 320, 719, 1022, 664, 319, 14720, 372, 29046, 322, 4345, 461, 3345, 12843, 10244, 20632, 32, 664, 569, 334, 945, 443, 22148, 10400, 2920, 3296, 2026, 7400, 1189, 4568, 3296, 301, 284, 945, 1158, 1756, 46, 652, 48]}
{"line_number": 381, "line_type": "original", "code": "    Node current = functionBody.getFirstChild();", "entropy": 3.646484375, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [3.44140625, 5.625, 19.0, 2.796875, 4.12109375, 0.371337890625, 0.7802734375, 0.268310546875, 0.001979827880859375, 0.051849365234375], "tokens": [264, 4004, 1550, 280, 667, 3050, 32, 25657, 2931, 473]}
{"line_number": 381, "line_type": "generated", "code": "\n        compiler);\n    NodeTraversal.traverse(compiler, root, scopeCreator);\n    NodeTraversal.traverse(compiler, root, tickler);\n  }\n\n  /**\n   * @param n The node to check.\n   * @return Whether the node is a", "entropy": 0.34912109375, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [0.56689453125, 0.619140625, 0.60693359375, 0.346923828125, 0.5712890625, 0.10137939453125, 0.0263214111328125, 0.00843048095703125, 0.0716552734375, 0.125244140625, 0.00033664703369140625, 0.037750244140625, 0.0007410049438476562, 0.380859375, 0.0006198883056640625, 0.068359375, 0.2125244140625, 0.257080078125, 0.09234619140625, 0.0019931793212890625, 0.0005335807800292969, 0.009490966796875, 0.08062744140625, 3.7670135498046875e-05, 0.007198333740234375, 0.0009546279907226562, 0.496337890625, 1.6689300537109375e-06, 0.005008697509765625, 0.286376953125, 0.0011301040649414062, 0.2489013671875, 0.31982421875, 0.09228515625, 0.0003800392150878906, 3.765625, 0.67822265625, 1.28515625, 0.80126953125, 0.962890625, 0.60546875, 1.5546875, 0.370849609375, 0.026092529296875, 0.045074462890625, 0.0128326416015625, 0.06915283203125, 0.20166015625, 0.73046875, 0.456787109375, 0.47607421875, 0.465087890625], "tokens": [291, 8980, 293, 284, 4004, 35699, 32, 33261, 26, 10199, 30, 3051, 30, 4576, 11143, 293, 284, 4004, 35699, 32, 33261, 26, 10199, 30, 3051, 30, 12904, 1180, 293, 334, 320, 719, 1022, 664, 319, 477, 753, 310, 886, 1541, 372, 1505, 32, 664, 319, 477, 601, 14071, 322, 1541, 438, 312]}
{"line_number": 384, "line_type": "original", "code": "    while (current != null && NodeUtil.isFunctionDeclaration(current)) {", "entropy": 1.4208984375, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [3.1328125, 4.4140625, 0.09332275390625, 3.60546875, 2.037109375, 0.047576904296875, 2.751953125, 4.0546875, 0.0202178955078125, 0.00017583370208740234, 1.1064453125, 1.2421875, 0.003299713134765625, 0.0865478515625, 0.044281005859375, 0.0894775390625], "tokens": [264, 2218, 308, 1700, 863, 744, 962, 4004, 1733, 32, 39504, 10367, 26, 1700, 490, 301]}
{"line_number": 384, "line_type": "generated", "code": "\n    Node scopeRoot = tickler.getScopeRoot();\n    Preconditions.checkState(scopeRoot.getType() == Token.SCRIPT);\n    for (Node c = scopeRoot.getFirstChild(); c!= null; c = c.getNext()) {\n     ", "entropy": 0.3271484375, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [1.302734375, 1.8828125, 1.9267578125, 0.17822265625, 0.01425933837890625, 0.90576171875, 0.0005393028259277344, 0.0009403228759765625, 0.64306640625, 0.04266357421875, 0.012451171875, 0.146728515625, 0.274658203125, 1.4501953125, 0.0003371238708496094, 0.1502685546875, 0.0675048828125, 0.004680633544921875, 0.269775390625, 0.0011196136474609375, 0.70849609375, 1.0341796875, 0.0038356781005859375, 0.01293182373046875, 0.006717681884765625, 4.6133995056152344e-05, 0.59033203125, 0.4033203125, 0.473388671875, 2.181640625, 0.003765106201171875, 0.07049560546875, 1.6689453125, 0.1900634765625, 0.019195556640625, 0.00042748451232910156, 0.00763702392578125, 0.042938232421875, 0.0176544189453125, 0.119140625, 0.0304412841796875, 0.0020694732666015625, 0.0192413330078125, 0.0667724609375, 0.03594970703125, 0.0025634765625, 0.0011339187622070312, 0.0005340576171875, 0.0019702911376953125, 0.00228118896484375, 0.006744384765625, 0.0227203369140625], "tokens": [284, 4004, 4576, 4058, 280, 12904, 1180, 32, 371, 5504, 4058, 473, 284, 40596, 32, 1553, 1078, 26, 3473, 4058, 32, 10272, 346, 610, 6512, 32, 12210, 293, 284, 436, 308, 1212, 281, 280, 4576, 4058, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301, 397]}
{"line_number": 390, "line_type": "original", "code": "    Node insertAfter = previous;", "entropy": 5.95703125, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [6.28515625, 6.03515625, 17.015625, 0.58544921875, 0.5634765625, 9.4921875, 1.7216796875], "tokens": [264, 4004, 5551, 5125, 280, 4552, 45]}
{"line_number": 390, "line_type": "generated", "code": "\n      DuplicateDeclarationHandler {\n    @Override\n    public void handle(Node first, Node second) {\n      if (first.getParent()!= second.getParent()) {\n        // Don't report duplicate declarations across scopes.\n        return;\n      }\n\n      if (first", "entropy": 0.5869140625, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [0.9033203125, 1.01171875, 0.06134033203125, 0.06036376953125, 0.346435546875, 0.439697265625, 0.67333984375, 0.0009717941284179688, 0.04364013671875, 0.015899658203125, 0.353271484375, 0.154296875, 0.1953125, 0.73095703125, 2.0546875, 0.2489013671875, 0.02386474609375, 0.010009765625, 0.1517333984375, 0.03485107421875, 0.11102294921875, 1.5576171875, 0.205322265625, 1.185546875, 0.244384765625, 1.4921875, 0.9462890625, 0.494384765625, 0.036285400390625, 0.000949859619140625, 0.00011146068572998047, 0.06646728515625, 0.0020275115966796875, 0.0155029296875, 1.15234375, 2.556640625, 0.00044918060302734375, 2.689453125, 2.162109375, 1.7958984375, 1.2431640625, 1.3056640625, 0.321533203125, 0.1151123046875, 0.054534912109375, 0.0017852783203125, 0.00707244873046875, 0.0013704299926757812, 0.311767578125, 1.5478515625, 0.1846923828125, 1.1884765625], "tokens": [397, 30095, 10367, 1972, 301, 284, 477, 1788, 284, 562, 763, 2887, 26, 1212, 1932, 30, 4004, 3100, 27, 301, 397, 415, 308, 2232, 32, 18789, 346, 863, 3100, 32, 18789, 1157, 301, 291, 434, 12029, 1330, 3639, 12843, 20632, 10160, 25353, 32, 291, 442, 45, 397, 320, 1687, 415, 308, 2232]}
{"line_number": 391, "line_type": "original", "code": "    while (current != null) {", "entropy": 1.828125, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [3.103515625, 9.609375, 0.06634521484375, 0.8564453125, 0.284423828125, 0.06915283203125, 0.5166015625, 0.1190185546875], "tokens": [264, 2218, 308, 1700, 863, 744, 27, 301]}
{"line_number": 391, "line_type": "generated", "code": "\n    private final Map<String, Var> declaredVars = new HashMap<String, Var>();\n    private final Set<String> declaredFunctions = new HashSet<String>();\n\n    @Override\n    public void onVar(Var var) {\n      String name = var", "entropy": 0.453369140625, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [0.58935546875, 2.037109375, 0.529296875, 1.5693359375, 0.004199981689453125, 0.116943359375, 0.00037026405334472656, 1.1201171875, 0.222412109375, 1.654296875, 1.1298828125, 0.129150390625, 0.5732421875, 0.047119140625, 1.3251953125, 0.002197265625, 5.829334259033203e-05, 0.005329132080078125, 0.0152740478515625, 1.3427734375, 0.2254638671875, 0.5986328125, 1.05859375, 0.001255035400390625, 0.30712890625, 0.00018334388732910156, 0.759765625, 1.419921875, 0.00948333740234375, 0.09014892578125, 0.006641387939453125, 0.00356292724609375, 0.00027561187744140625, 0.0005855560302734375, 0.58935546875, 0.365478515625, 0.0007114410400390625, 0.0173797607421875, 0.00714874267578125, 0.42333984375, 0.5673828125, 1.20703125, 0.45166015625, 0.80322265625, 0.1419677734375, 0.29296875, 0.0067901611328125, 0.11505126953125, 1.44921875, 0.165283203125, 0.0031261444091796875, 0.0682373046875], "tokens": [284, 945, 1158, 3516, 46, 652, 30, 7329, 48, 17103, 12034, 280, 537, 8322, 46, 652, 30, 7329, 2923, 284, 945, 1158, 1756, 46, 652, 48, 17103, 10905, 280, 537, 14260, 46, 652, 2923, 446, 477, 1788, 284, 562, 763, 544, 1881, 26, 1881, 773, 27, 301, 397, 892, 636, 280, 773]}
{"line_number": 409, "line_type": "original", "code": "  }", "entropy": 3.64453125, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [4.234375, 3.052734375], "tokens": [225, 320]}
{"line_number": 409, "line_type": "generated", "code": "        //     current architecture.\n        //  3) \"var a, b;\" which is replaced with \"a, b\"\n        //\n\n        if (parent.getFirstChild() == n) {\n          // Case 1\n          parent.getParent().replaceChild", "entropy": 0.406494140625, "is_bug_line": false, "sus_score": 0.055131784641997125, "per_token_entropy": [1.26171875, 0.052825927734375, 0.0848388671875, 0.69091796875, 1.6513671875, 0.51123046875, 0.280517578125, 0.205322265625, 0.049407958984375, 0.0069580078125, 0.0009179115295410156, 0.042266845703125, 0.1856689453125, 0.040771484375, 0.58056640625, 0.2919921875, 0.6875, 0.1197509765625, 0.10186767578125, 0.200439453125, 0.009918212890625, 0.1513671875, 0.228271484375, 0.1080322265625, 0.045196533203125, 0.8466796875, 0.26318359375, 0.105224609375, 1.3642578125, 1.4970703125, 0.07470703125, 1.208984375, 0.03369140625, 1.5224609375, 0.0004935264587402344, 0.263916015625, 0.0814208984375, 0.017852783203125, 0.057342529296875, 0.000492095947265625, 0.08636474609375, 0.91552734375, 0.5341796875, 0.241943359375, 0.03460693359375, 1.6904296875, 0.97705078125, 0.0100860595703125, 1.6845703125, 0.00017309188842773438, 0.036712646484375, 0.00012362003326416016], "tokens": [351, 434, 262, 1550, 15488, 32, 291, 434, 261, 37, 27, 313, 869, 312, 30, 323, 7879, 1510, 438, 14171, 623, 313, 83, 30, 323, 20, 291, 434, 584, 415, 308, 2544, 32, 25657, 2931, 346, 610, 310, 27, 301, 616, 434, 12020, 225, 35, 616, 2935, 32, 18789, 922, 3227, 2931]}
{"line_number": 90, "line_type": "original", "code": "      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();", "entropy": 1.8125, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [7.46484375, 9.640625, 4.0078125, 1.24609375, 0.09600830078125, 2.87890625, 0.0020809173583984375, 5.2928924560546875e-05, 0.030853271484375, 0.595703125, 0.027679443359375, 0.00015425682067871094, 8.58306884765625e-06, 0.00015473365783691406, 1.1904296875], "tokens": [647, 6400, 22050, 4109, 10189, 316, 21140, 265, 280, 537, 6400, 22050, 4109, 10189, 473]}
{"line_number": 90, "line_type": "generated", "code": "\n          n.setString(n.getString() + NodeUtil.CONSTANT_MARKER);\n          reportCodeChange(\"Added constant marker to \" + n.getString());\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes duplicate variable declarations.\n   */\n ", "entropy": 0.32861328125, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [0.1295166015625, 0.91796875, 0.0067596435546875, 0.414794921875, 0.0022373199462890625, 0.15625, 0.002552032470703125, 0.0022640228271484375, 0.01372528076171875, 0.005626678466796875, 0.0802001953125, 0.0009784698486328125, 0.00027632713317871094, 0.0028667449951171875, 5.841255187988281e-06, 0.0022735595703125, 0.004680633544921875, 0.55859375, 0.433837890625, 0.01953125, 0.00043702125549316406, 0.392822265625, 2.35546875, 0.666015625, 0.452392578125, 0.449462890625, 0.76416015625, 0.018218994140625, 0.1287841796875, 0.1387939453125, 0.196533203125, 0.04437255859375, 0.138427734375, 0.00027179718017578125, 0.173828125, 0.0001862049102783203, 0.07489013671875, 0.0004477500915527344, 0.0738525390625, 0.0035114288330078125, 0.369873046875, 1.142578125, 0.06298828125, 0.00031876564025878906, 2.267578125, 0.51171875, 0.97607421875, 0.146240234375, 1.009765625, 0.6142578125, 1.158203125, 0.009002685546875], "tokens": [616, 310, 32, 24353, 26, 96, 32, 7069, 346, 474, 4004, 1733, 32, 21170, 81, 22600, 293, 616, 3639, 1227, 1791, 440, 11029, 8082, 10029, 372, 313, 474, 310, 32, 7069, 1035, 291, 320, 397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 24992, 12843, 2677, 20632, 32, 664, 569, 334]}
{"line_number": 91, "line_type": "original", "code": "      NodeTraversal t = new NodeTraversal(compiler, renamer);", "entropy": 1.9697265625, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [4.59765625, 4.89453125, 5.46484375, 5.05859375, 0.9755859375, 0.200439453125, 0.0023097991943359375, 0.0002753734588623047, 0.01288604736328125, 0.1905517578125, 0.366943359375, 7.51953125, 0.2142333984375, 0.0006685256958007812, 0.0506591796875], "tokens": [647, 4004, 35699, 273, 280, 537, 4004, 35699, 26, 10199, 30, 316, 21140, 265, 293]}
{"line_number": 91, "line_type": "generated", "code": "\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes duplicate declarations from a parse tree.\n   */\n  private static void removeDuplicateDeclarations(Node n) {\n    Node parent = n.getParent();\n    if (parent == null) {\n      return", "entropy": 0.423583984375, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [0.90283203125, 0.013427734375, 0.1307373046875, 0.00044345855712890625, 0.0791015625, 0.0005922317504882812, 0.08221435546875, 0.002655029296875, 0.27685546875, 1.08984375, 0.0618896484375, 0.0003516674041748047, 2.29296875, 0.4951171875, 1.306640625, 2.26953125, 1.509765625, 2.51171875, 0.0034618377685546875, 0.308837890625, 0.428955078125, 1.201171875, 0.004558563232421875, 0.73974609375, 0.6396484375, 0.1309814453125, 0.0010404586791992188, 0.0002906322479248047, 0.0002319812774658203, 0.0011043548583984375, 0.0036411285400390625, 0.80078125, 0.0031948089599609375, 0.00034546852111816406, 0.025360107421875, 1.4736328125, 1.291015625, 0.151123046875, 0.0396728515625, 0.0219573974609375, 0.0004048347473144531, 0.0010881423950195312, 0.22314453125, 0.61376953125, 0.060333251953125, 0.30322265625, 0.236083984375, 0.00015401840209960938, 0.12078857421875, 0.014556884765625, 0.0279693603515625, 0.13720703125], "tokens": [291, 320, 397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 24992, 12843, 20632, 645, 312, 3185, 4345, 32, 664, 569, 334, 945, 907, 763, 3345, 18017, 34283, 26, 1212, 310, 27, 301, 284, 4004, 2935, 280, 310, 32, 18789, 473, 284, 415, 308, 2544, 610, 744, 27, 301, 397, 442]}
{"line_number": 92, "line_type": "original", "code": "      t.traverseRoots(externs, root);", "entropy": 2.689453125, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [4.6484375, 4.46875, 0.0484619140625, 8.5078125, 8.28125, 0.07818603515625, 3.326171875, 0.006526947021484375, 0.006618499755859375, 0.1776123046875, 0.0305633544921875], "tokens": [647, 273, 32, 33261, 46394, 26, 4318, 101, 30, 3051, 293]}
{"line_number": 92, "line_type": "generated", "code": "\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Does the following:\n   * 1) Splits var statements contains multiple declarations into individual\n   * statements.\n   * 2) Splits chained assign statements such as \"a = b", "entropy": 0.22216796875, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [0.49609375, 0.004550933837890625, 0.3818359375, 0.0006966590881347656, 0.1304931640625, 0.00026869773864746094, 0.0791015625, 0.0005064010620117188, 0.0679931640625, 0.0022640228271484375, 0.251953125, 1.1318359375, 0.06439208984375, 0.0003688335418701172, 4.3828125, 1.2373046875, 0.261962890625, 0.83154296875, 0.0260162353515625, 0.0007991790771484375, 0.436767578125, 0.06280517578125, 0.10040283203125, 0.67626953125, 2.7418136596679688e-06, 0.039337158203125, 0.01702880859375, 0.30126953125, 0.00286102294921875, 0.0036106109619140625, 0.00775146484375, 0.0302886962890625, 0.0029277801513671875, 5.364418029785156e-05, 0.2325439453125, 0.0323486328125, 0.0225067138671875, 0.00905609130859375, 0.03533935546875, 0.00449371337890625, 0.0002624988555908203, 0.09405517578125, 3.4570693969726562e-06, 0.00583648681640625, 0.0247802734375, 0.0018024444580078125, 0.038787841796875, 0.00023245811462402344, 0.01082611083984375, 0.0024967193603515625, 0.002040863037109375, 0.0006232261657714844], "tokens": [616, 320, 291, 320, 397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 12894, 322, 2412, 44, 664, 319, 225, 35, 27, 23768, 1507, 773, 15252, 4304, 4609, 20632, 1991, 10090, 664, 319, 15252, 32, 664, 319, 225, 36, 27, 23768, 1507, 43675, 5313, 15252, 3751, 619, 313, 83, 280, 323]}
{"line_number": 94, "line_type": "original", "code": "    removeDuplicateDeclarations(root);", "entropy": 6.23828125, "is_bug_line": true, "sus_score": 0.04708816093480111, "per_token_entropy": [4.5703125, 11.4609375, 6.84375, 9.0, 0.240478515625, 3.576171875, 7.9609375], "tokens": [264, 3345, 18017, 34283, 26, 2388, 293]}
{"line_number": 94, "line_type": "generated", "code": "\n                \"Normalize constraints violated: \" + name +\n                \" is annotated as constant, but does not have a name ending \" +\n                \"with \" + NodeUtil.CONSTANT_MARKER + \".\");\n          }\n        }\n      }\n    }\n  }\n\n ", "entropy": 0.5458984375, "is_bug_line": true, "sus_score": 0.04708816093480111, "per_token_entropy": [0.890625, 0.1865234375, 1.20703125, 1.4873046875, 0.00463104248046875, 0.0025272369384765625, 0.69775390625, 1.216796875, 0.55810546875, 1.369140625, 0.24169921875, 0.95263671875, 0.0416259765625, 1.4033203125, 0.7548828125, 0.93603515625, 1.1005859375, 1.3427734375, 0.1318359375, 2.154296875, 0.0212554931640625, 0.66845703125, 1.3603515625, 1.857421875, 1.29296875, 1.40234375, 0.0943603515625, 0.0367431640625, 0.1387939453125, 0.5966796875, 0.7373046875, 0.0026874542236328125, 0.05816650390625, 0.0007300376892089844, 0.00031280517578125, 0.00548553466796875, 1.1920928955078125e-05, 0.0011053085327148438, 0.705078125, 0.67333984375, 0.2261962890625, 0.099853515625, 9.02414321899414e-05, 0.947265625, 0.0003819465637207031, 0.2249755859375, 0.0002167224884033203, 0.08245849609375, 0.0006222724914550781, 0.0714111328125, 0.00439453125, 0.391357421875], "tokens": [400, 313, 25640, 13383, 8943, 23723, 44, 313, 474, 636, 474, 400, 313, 438, 30395, 619, 8082, 30, 1273, 1957, 646, 1159, 312, 636, 22206, 313, 474, 400, 313, 1793, 313, 474, 4004, 1733, 32, 21170, 81, 22600, 474, 4939, 724, 616, 320, 291, 320, 397, 320, 284, 320, 334, 320, 719]}
{"line_number": 95, "line_type": "original", "code": "    new PropogateConstantAnnotations(compiler, assertOnChange)", "entropy": 1.3837890625, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [4.34765625, 5.31640625, 4.8359375, 0.002819061279296875, 0.00372314453125, 0.05364990234375, 0.0157928466796875, 0.45166015625, 0.89208984375, 0.06842041015625, 1.181640625, 0.00620269775390625, 0.8037109375], "tokens": [264, 537, 7855, 817, 332, 5465, 13041, 26, 10199, 30, 1201, 35864, 27]}
{"line_number": 95, "line_type": "generated", "code": "\n                \"    Variable \" + name + \" annotated as constant, but no \" +\n                \"IS_CONSTANT_NAME property set on the NAME node.\");\n          }\n          t.reportCodeChange();\n        }\n      }\n    }\n  }\n\n  private static class", "entropy": 0.62939453125, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [1.40234375, 0.4501953125, 3.224609375, 2.353515625, 0.95263671875, 0.03631591796875, 0.07525634765625, 0.04425048828125, 0.260009765625, 1.7626953125, 0.515625, 0.7529296875, 2.009765625, 0.56396484375, 3.361328125, 0.6611328125, 0.2177734375, 0.160888671875, 0.1939697265625, 0.4912109375, 0.0008144378662109375, 0.0032749176025390625, 0.012298583984375, 0.0034084320068359375, 1.119140625, 1.283203125, 1.34375, 1.541015625, 1.1494140625, 0.10186767578125, 0.70703125, 0.0235595703125, 0.00010335445404052734, 0.8505859375, 0.98681640625, 2.9921531677246094e-05, 0.1256103515625, 0.010528564453125, 3.445148468017578e-05, 0.022735595703125, 0.0728759765625, 4.839897155761719e-05, 0.1441650390625, 0.00016641616821289062, 0.07916259765625, 0.0005140304565429688, 0.06597900390625, 0.003993988037109375, 0.328857421875, 1.439453125, 0.84375, 0.9775390625], "tokens": [400, 313, 264, 9870, 313, 474, 636, 474, 313, 30395, 619, 8082, 30, 1273, 1289, 313, 474, 400, 313, 1296, 81, 21170, 81, 2474, 2804, 739, 544, 322, 8912, 1541, 5368, 616, 320, 616, 273, 32, 3734, 1227, 1791, 473, 291, 320, 397, 320, 284, 320, 334, 320, 719, 945, 907, 443]}
{"line_number": 97, "line_type": "original", "code": "  }", "entropy": 1.939453125, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [3.830078125, 0.048370361328125], "tokens": [225, 320]}
{"line_number": 97, "line_type": "generated", "code": "\n          }\n        }\n      }\n    }\n  }\n\n  // TODO(johnlenz): This is a hack that should be fixed in the parser.\n  // Remove this code when that is fixed.\n  private static final String[] EXTRA_VAR_DECL", "entropy": 0.98388671875, "is_bug_line": false, "sus_score": 0.04708816093480111, "per_token_entropy": [0.8427734375, 0.021759033203125, 0.6123046875, 0.00122833251953125, 0.1544189453125, 0.0006222724914550781, 0.12469482421875, 0.0009732246398925781, 0.265869140625, 0.0037384033203125, 0.439453125, 2.65234375, 1.3271484375, 0.0155487060546875, 0.37353515625, 0.0062713623046875, 0.0009541511535644531, 0.145263671875, 2.62109375, 1.7783203125, 0.9248046875, 2.47265625, 2.978515625, 1.44140625, 0.26513671875, 2.34765625, 1.2734375, 0.7529296875, 1.4375, 0.51123046875, 0.10498046875, 0.37109375, 3.671875, 1.1484375, 2.369140625, 0.703125, 1.0859375, 0.87841796875, 0.30810546875, 0.0809326171875, 0.0460205078125, 0.65185546875, 0.441650390625, 1.3818359375, 1.470703125, 2.6953125, 3.46875, 0.97900390625, 0.0009503364562988281, 2.154296875, 0.03759765625, 1.3115234375], "tokens": [616, 320, 291, 320, 397, 320, 284, 320, 334, 320, 719, 434, 4296, 26, 25172, 1657, 108, 711, 1348, 438, 312, 16445, 688, 1395, 526, 5253, 328, 322, 4118, 32, 334, 434, 6478, 458, 1340, 1412, 688, 438, 5253, 32, 334, 945, 907, 1158, 892, 1178, 2783, 12512, 81, 7416, 81, 7549]}
