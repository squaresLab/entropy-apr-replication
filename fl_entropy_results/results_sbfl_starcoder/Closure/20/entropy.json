{"line_number": 219, "line_type": "original", "code": "      Node value = callTarget.getNext();", "entropy": 2.310546875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.14453125, 3.3125, 3.58203125, 0.2076416015625, 6.21875, 0.287109375, 0.03759765625, 0.90966796875, 0.09576416015625], "tokens": [647, 4004, 786, 280, 1476, 2922, 32, 23017, 473]}
{"line_number": 219, "line_type": "generated", "code": "\n  }\n\n  private Node tryFoldImmediateCallToPrototypeMethod(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    PrototypeMethod method = getCodingConvention().describePrototypeMethod(", "entropy": 0.2310791015625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.452880859375, 0.1593017578125, 0.51318359375, 0.426513671875, 0.51171875, 0.2196044921875, 0.313232421875, 0.978515625, 0.35888671875, 0.240234375, 2.751953125, 0.72802734375, 0.01983642578125, 0.00896453857421875, 0.051422119140625, 0.0679931640625, 0.0018434524536132812, 0.03436279296875, 0.43603515625, 4.3392181396484375e-05, 0.0002970695495605469, 0.0166015625, 0.0013647079467773438, 0.01453399658203125, 5.269050598144531e-05, 0.0074920654296875, 0.006893157958984375, 0.029449462890625, 0.164794921875, 0.27587890625, 0.2318115234375, 0.0036296844482421875, 0.0028476715087890625, 0.01180267333984375, 3.8623809814453125e-05, 0.0282745361328125, 0.0004773139953613281, 0.00710296630859375, 0.126220703125, 1.029296875, 1.3947486877441406e-05, 0.23681640625, 0.38818359375, 0.0269927978515625, 0.330078125, 0.0126800537109375, 0.000247955322265625, 0.1312255859375, 0.498779296875, 0.10650634765625, 0.04638671875, 0.002880096435546875], "tokens": [334, 320, 719, 945, 4004, 1596, 15483, 20467, 1853, 705, 17534, 1868, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 1078, 26, 96, 32, 297, 1853, 1035, 284, 4004, 1476, 2922, 280, 310, 32, 25657, 2931, 473, 284, 36353, 3116, 1868, 1411, 280, 622, 27427, 21748, 922, 7628, 17534, 1868, 26]}
{"line_number": 220, "line_type": "original", "code": "      if (value != null) {", "entropy": 2.009765625, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [7.39453125, 2.5625, 0.1514892578125, 2.939453125, 1.55859375, 0.045989990234375, 1.38671875, 0.04345703125], "tokens": [647, 415, 308, 853, 863, 744, 27, 301]}
{"line_number": 220, "line_type": "generated", "code": "\n  private void reportCodeChange() {\n    compiler.reportChangeToEnclosingScope();\n  }", "entropy": 0.4296875, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [1.0712890625, 0.312744140625, 0.91796875, 3.236328125, 0.418212890625, 0.00476837158203125, 0.02288818359375, 0.004726409912109375, 0.03399658203125, 1.3115234375, 0.004657745361328125, 0.01491546630859375, 0.331787109375, 0.2249755859375, 0.0254364013671875, 0.03607177734375, 0.0309906005859375, 0.55078125, 0.041961669921875, 0.0007548332214355469], "tokens": [334, 945, 763, 3639, 1227, 1791, 346, 301, 284, 8980, 32, 3734, 1791, 705, 776, 21664, 5504, 473, 334, 320]}
{"line_number": 221, "line_type": "original", "code": "        Node addition = IR.add(", "entropy": 1.5576171875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.9609375, 1.41796875, 2.0859375, 0.1253662109375, 0.7041015625, 0.0015268325805664062, 0.08428955078125, 0.082763671875], "tokens": [351, 4004, 10879, 280, 14095, 32, 669, 26]}
{"line_number": 221, "line_type": "generated", "code": "\n  private Node tryFoldImmediateCallToUnboundFunction(Node n) {\n    // Rewriting \"fn(a,b)\" to \"fn.call(this, a, b)\" makes it inlinable\n    Preconditions.checkState(n", "entropy": 0.2666015625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.420166015625, 0.399169921875, 0.97314453125, 0.44921875, 0.416259765625, 1.2919921875, 0.27197265625, 0.2374267578125, 2.3359375, 0.05615234375, 0.07403564453125, 0.04132080078125, 0.01297760009765625, 0.036529541015625, 0.04827880859375, 0.001964569091796875, 0.0560302734375, 1.12890625, 0.28759765625, 0.0005702972412109375, 0.0008378028869628906, 1.189453125, 0.865234375, 0.27978515625, 0.056793212890625, 0.08294677734375, 0.281982421875, 0.33056640625, 0.0213775634765625, 0.026214599609375, 0.0389404296875, 0.0030345916748046875, 0.2021484375, 0.00592803955078125, 0.7451171875, 0.06494140625, 0.65625, 0.0005807876586914062, 0.048858642578125, 0.00949859619140625, 0.07525634765625, 0.02197265625, 0.0531005859375, 0.0006275177001953125, 0.0003159046173095703, 0.204833984375, 0.055450439453125, 6.67572021484375e-06, 0.00047898292541503906, 0.0004754066467285156, 0.0009031295776367188, 0.004634857177734375], "tokens": [334, 945, 4004, 1596, 15483, 20467, 1853, 705, 1061, 4464, 2447, 26, 1212, 310, 27, 301, 284, 434, 24120, 1184, 299, 313, 3359, 26, 83, 30, 84, 4731, 372, 313, 3359, 32, 1851, 26, 578, 30, 312, 30, 323, 4731, 7410, 561, 328, 1800, 444, 284, 40596, 32, 1553, 1078, 26, 96]}
{"line_number": 224, "line_type": "original", "code": "        n.getParent().replaceChild(n, addition);", "entropy": 2.205078125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.21484375, 3.55078125, 1.2392578125, 1.9931640625, 0.004364013671875, 0.8369140625, 0.0008254051208496094, 0.0038604736328125, 0.1202392578125, 0.0115966796875, 11.3515625, 0.1370849609375], "tokens": [351, 310, 32, 18789, 922, 3227, 2931, 26, 96, 30, 10879, 293]}
{"line_number": 224, "line_type": "generated", "code": "\n    }\n\n    if (!n.isComma()) {\n      return n;\n    }\n\n    Node parent = n.getParent();\n    if (parent == null) {\n      return n;\n    }\n\n    if (parent.isAssign()) {\n      // Don't", "entropy": 0.27490234375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.115234375, 0.03765869140625, 0.6513671875, 0.9970703125, 1.2138671875, 0.5283203125, 8.857250213623047e-05, 0.090087890625, 0.2763671875, 0.179931640625, 0.006748199462890625, 0.0123443603515625, 0.0225372314453125, 0.00992584228515625, 0.0012950897216796875, 0.01136016845703125, 7.104873657226562e-05, 0.1300048828125, 0.505859375, 1.212890625, 0.0296173095703125, 0.01242828369140625, 0.0008711814880371094, 0.0019283294677734375, 0.0018796920776367188, 0.276611328125, 0.3916015625, 0.1951904296875, 0.08062744140625, 0.90478515625, 0.0087432861328125, 0.472900390625, 0.0030231475830078125, 0.00806427001953125, 0.07574462890625, 0.003124237060546875, 0.0007333755493164062, 0.01384735107421875, 6.020069122314453e-05, 0.10546875, 1.0068359375, 0.206298828125, 0.123046875, 0.0018711090087890625, 0.0950927734375, 0.8232421875, 0.336181640625, 0.00028634071350097656, 0.0099945068359375, 0.97021484375, 2.12890625, 0.00043892860412597656], "tokens": [284, 320, 446, 415, 1429, 96, 32, 297, 34010, 1157, 301, 397, 442, 310, 45, 284, 320, 446, 4004, 2935, 280, 310, 32, 18789, 473, 284, 415, 308, 2544, 610, 744, 27, 301, 397, 442, 310, 45, 284, 320, 446, 415, 308, 2544, 32, 297, 9079, 1157, 301, 397, 434, 12029, 1330]}
{"line_number": 225, "line_type": "original", "code": "        reportCodeChange();", "entropy": 2.619140625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.6484375, 5.2890625, 0.10107421875, 0.0006275177001953125, 0.054412841796875], "tokens": [351, 3639, 1227, 1791, 473]}
{"line_number": 225, "line_type": "generated", "code": "\n    if (NodeUtil.isComma(n)) {\n      Node parent = n.getParent();\n      Node grandParent = parent.getParent();\n      if (grandParent!= null && parent.isFirstChild()\n          && grandParent.isAssign()) {", "entropy": 0.3740234375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.1580810546875, 1.2919921875, 0.306396484375, 1.64453125, 0.0007991790771484375, 7.593631744384766e-05, 0.239501953125, 0.50341796875, 0.175537109375, 0.0029735565185546875, 0.3056640625, 0.0013399124145507812, 0.038055419921875, 0.59912109375, 1.4326171875, 0.0207672119140625, 0.01068115234375, 0.0004949569702148438, 0.0016908645629882812, 0.0018682479858398438, 0.148681640625, 1.40234375, 0.755859375, 1.0048828125, 0.00751495361328125, 0.1011962890625, 0.027313232421875, 0.0008668899536132812, 0.00019943714141845703, 0.37451171875, 0.61083984375, 0.1373291015625, 1.58984375, 1.3113021850585938e-06, 0.69580078125, 0.0017843246459960938, 0.58935546875, 1.78125, 0.072998046875, 0.1806640625, 0.99853515625, 0.0011491775512695312, 0.31103515625, 0.4619140625, 0.0153656005859375, 0.4619140625, 9.417533874511719e-06, 0.004680633544921875, 0.09320068359375, 0.615234375, 0.27783203125, 0.000701904296875], "tokens": [284, 415, 308, 1212, 1733, 32, 297, 34010, 26, 96, 490, 301, 397, 4004, 2935, 280, 310, 32, 18789, 473, 397, 4004, 33162, 4433, 280, 2935, 32, 18789, 473, 397, 415, 308, 28856, 4433, 863, 744, 962, 2935, 32, 297, 3472, 2931, 346, 616, 962, 33162, 4433, 32, 297, 9079, 1157, 301]}
{"line_number": 226, "line_type": "original", "code": "        return addition;", "entropy": 6.453125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.08984375, 2.400390625, 15.3671875, 0.9482421875], "tokens": [351, 442, 10879, 45]}
{"line_number": 226, "line_type": "generated", "code": "\n    if (parent.isAssign()) {\n      // If the parent is an assignment, then we only want to split comma\n      // if the parent is a binary operation.\n      //\n      // For example, we do not want to split\n      //   a", "entropy": 0.9189453125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.247802734375, 0.483642578125, 0.2398681640625, 0.3037109375, 0.66259765625, 0.0955810546875, 1.4091796875, 0.6337890625, 0.0014696121215820312, 0.039031982421875, 1.1865234375, 3.625, 1.0302734375, 1.02734375, 0.250732421875, 0.311279296875, 0.2666015625, 0.214599609375, 1.4169921875, 1.2119140625, 3.033203125, 0.7216796875, 0.0180816650390625, 0.7509765625, 2.162109375, 0.5751953125, 0.0009927749633789062, 1.3203125, 0.6005859375, 1.6884765625, 0.25634765625, 1.607421875, 4.140625, 1.2568359375, 1.314453125, 0.55859375, 1.55078125, 1.3232421875, 0.00823211669921875, 1.9921875, 0.108154296875, 0.32470703125, 1.125, 1.14453125, 0.2027587890625, 0.035247802734375, 0.022125244140625, 0.486572265625, 2.158203125, 0.0017910003662109375, 1.580078125, 1.0595703125], "tokens": [284, 415, 308, 2544, 32, 297, 9079, 1157, 301, 397, 434, 1670, 322, 2935, 438, 600, 13807, 30, 1615, 996, 1755, 2637, 372, 6122, 18231, 397, 434, 415, 322, 2935, 438, 312, 5298, 4212, 32, 397, 434, 397, 434, 2616, 2280, 30, 996, 745, 646, 2637, 372, 6122, 397, 434, 261, 312]}
{"line_number": 1410, "line_type": "original", "code": "    return n;", "entropy": 2.177734375, "is_bug_line": false, "sus_score": 0.08838834764831843, "per_token_entropy": [3.69921875, 4.8359375, 0.1575927734375, 0.0197906494140625], "tokens": [264, 442, 310, 45]}
{"line_number": 1410, "line_type": "generated", "code": "\n    }\n\n    if (pattern.isString()) {\n      try {\n        String regexpString = pattern.getString();\n        if (null == flags || flags.isString()) {\n          String flagsString = null == flags? \"\" : flags.getString();\n          try {", "entropy": 0.449462890625, "is_bug_line": false, "sus_score": 0.08838834764831843, "per_token_entropy": [0.08953857421875, 0.0022258758544921875, 0.303955078125, 1.3466796875, 0.3505859375, 1.3310546875, 0.042999267578125, 0.67236328125, 0.4462890625, 0.0020923614501953125, 0.06414794921875, 2.47265625, 0.005092620849609375, 0.023773193359375, 1.943359375, 1.9755859375, 1.9326171875, 0.020538330078125, 0.1685791015625, 0.0007343292236328125, 0.034912109375, 0.058349609375, 0.205322265625, 1.296875, 0.0855712890625, 0.351806640625, 1.4189453125, 0.0572509765625, 0.78759765625, 0.307861328125, 0.002353668212890625, 0.76220703125, 0.07330322265625, 0.0011606216430664062, 0.0189056396484375, 0.6328125, 0.59716796875, 0.0704345703125, 0.0189971923828125, 0.8369140625, 0.65283203125, 0.0019044876098632812, 0.2073974609375, 0.0484619140625, 0.004268646240234375, 0.00722503662109375, 0.0003368854522705078, 0.0006318092346191406, 0.006885528564453125, 0.203125, 1.427734375, 0.0035152435302734375], "tokens": [284, 320, 446, 415, 308, 5607, 32, 35690, 1157, 301, 397, 1596, 301, 291, 892, 21189, 652, 280, 5257, 32, 7069, 473, 291, 415, 308, 1693, 610, 5736, 1276, 5736, 32, 35690, 1157, 301, 616, 892, 5736, 652, 280, 744, 610, 5736, 1018, 3330, 499, 5736, 32, 7069, 473, 616, 1596, 301]}
{"line_number": 144, "line_type": "original", "code": "          result = tryFoldSimpleFunctionCall(node);", "entropy": 3.16796875, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [6.3828125, 9.515625, 0.3642578125, 2.181640625, 2.67578125, 6.94140625, 4.046875, 0.372314453125, 0.1416015625, 2.00390625, 0.227783203125], "tokens": [2033, 1056, 280, 1596, 15483, 5291, 2447, 1853, 26, 1251, 293]}
{"line_number": 144, "line_type": "generated", "code": "\n        Node newCondition = IR.or(forCondition, fixedIfCondition)\n           .srcref(forCondition);\n        NodeUtil.replaceExpression(forCondition, newCondition);\n      }\n    }\n  }\n\n  /**\n   * Try to replace an EX", "entropy": 0.35791015625, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.2587890625, 1.587890625, 1.1015625, 1.0458984375, 0.1702880859375, 0.8515625, 0.00152587890625, 0.689453125, 0.0007987022399902344, 1.03125, 2.86102294921875e-06, 0.050537109375, 0.115478515625, 7.3909759521484375e-06, 2.2649765014648438e-06, 0.35595703125, 0.044647216796875, 0.0009508132934570312, 0.161376953125, 0.0003838539123535156, 0.023590087890625, 0.47998046875, 1.7404556274414062e-05, 0.091796875, 0.459228515625, 1.0234375, 0.027374267578125, 0.00022649765014648438, 0.30908203125, 0.2437744140625, 0.01389312744140625, 0.15869140625, 3.0994415283203125e-06, 0.005626678466796875, 0.0131683349609375, 1.2516975402832031e-05, 0.004756927490234375, 0.4755859375, 8.237361907958984e-05, 0.021392822265625, 0.00025343894958496094, 0.045318603515625, 0.00046133995056152344, 0.07904052734375, 0.8837890625, 0.09661865234375, 0.00045108795166015625, 1.265625, 0.15234375, 1.34765625, 2.19921875, 1.7138671875], "tokens": [291, 4004, 537, 5356, 280, 14095, 32, 271, 26, 979, 5356, 30, 5253, 2797, 5356, 27, 324, 638, 1617, 612, 26, 979, 5356, 293, 291, 4004, 1733, 32, 3227, 3487, 26, 979, 5356, 30, 537, 5356, 293, 397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 8959, 372, 7084, 600, 2783]}
{"line_number": 145, "line_type": "original", "code": "          if (result == node) {", "entropy": 2.62109375, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [6.5078125, 3.154296875, 1.4853515625, 7.7421875, 1.310546875, 0.7158203125, 0.0166778564453125, 0.03826904296875], "tokens": [2033, 415, 308, 1267, 610, 1541, 27, 301]}
{"line_number": 145, "line_type": "generated", "code": "\n            n.addChildToFront(fixedIfCondition);\n          } else {\n            Node forConditionParent = forCondition.getParent();\n            Node newCondition = IR.and(fixedIfCondition, forCondition)\n               .srcref(fixedIfCondition, for", "entropy": 0.389404296875, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.91943359375, 2.068359375, 0.0157012939453125, 0.63427734375, 0.0017566680908203125, 0.64892578125, 0.0011816024780273438, 0.2281494140625, 2.181529998779297e-05, 5.9604644775390625e-06, 0.10546875, 0.378662109375, 0.0153656005859375, 0.021453857421875, 0.0814208984375, 0.1063232421875, 0.99560546875, 2.58203125, 0.63720703125, 1.2314453125, 0.022857666015625, 0.034027099609375, 1.8596649169921875e-05, 0.00212860107421875, 0.003719329833984375, 0.01361846923828125, 0.111328125, 1.55078125, 1.2158203125, 0.94580078125, 0.143310546875, 0.83056640625, 0.00213623046875, 0.326171875, 0.00751495361328125, 0.93212890625, 1.33514404296875e-05, 5.0067901611328125e-06, 0.0177001953125, 0.51806640625, 5.841255187988281e-06, 0.290771484375, 0.0562744140625, 0.0009407997131347656, 0.173095703125, 8.96453857421875e-05, 0.0455322265625, 1.00390625, 0.00011301040649414062, 3.4570693969726562e-06, 1.3115234375, 0.0184173583984375], "tokens": [324, 310, 32, 21545, 705, 10112, 26, 8638, 2797, 5356, 293, 616, 320, 813, 301, 324, 4004, 436, 5356, 4433, 280, 436, 5356, 32, 18789, 473, 324, 4004, 537, 5356, 280, 14095, 32, 363, 26, 8638, 2797, 5356, 30, 436, 5356, 27, 400, 638, 1617, 612, 26, 8638, 2797, 5356, 30, 436]}
{"line_number": 146, "line_type": "original", "code": "            result = tryFoldImmediateCallToBoundFunction(node);", "entropy": 3.642578125, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [7.1484375, 9.859375, 0.225830078125, 3.76953125, 1.9287109375, 6.28515625, 2.6328125, 3.607421875, 9.875, 0.302001953125, 0.0865478515625, 1.5068359375, 0.104248046875], "tokens": [1468, 1056, 280, 1596, 15483, 20467, 1853, 705, 4716, 2447, 26, 1251, 293]}
{"line_number": 146, "line_type": "generated", "code": "\n        } else {\n          Node newForCondition = IR.and(forCondition, fixedIfCondition)\n             .srcref(forCondition);\n          n.replaceChild(forCondition, newForCondition);\n        }\n      }\n    }\n  }\n\n  /**", "entropy": 0.152587890625, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.2099609375, 0.0027008056640625, 0.12408447265625, 0.1016845703125, 0.034820556640625, 0.9404296875, 1.2412109375, 0.62158203125, 0.0712890625, 0.043548583984375, 0.63916015625, 0.001636505126953125, 0.300537109375, 0.0057525634765625, 0.50830078125, 3.0994415283203125e-06, 0.043243408203125, 0.263671875, 7.3909759521484375e-06, 2.384185791015625e-06, 0.1988525390625, 0.04937744140625, 0.0006461143493652344, 0.053131103515625, 6.711483001708984e-05, 0.0178985595703125, 0.275634765625, 2.0265579223632812e-06, 0.06494140625, 0.07977294921875, 0.1549072265625, 5.519390106201172e-05, 0.002307891845703125, 0.0001043081283569336, 0.00011646747589111328, 0.0026226043701171875, 0.0002570152282714844, 0.0005292892456054688, 0.004299163818359375, 1.1324882507324219e-05, 2.5033950805664062e-06, 0.004077911376953125, 0.6181640625, 9.167194366455078e-05, 0.2529296875, 0.0004544258117675781, 0.0225677490234375, 0.00040435791015625, 0.041229248046875, 0.0004825592041015625, 0.0635986328125, 0.8701171875], "tokens": [291, 320, 813, 301, 616, 4004, 537, 1562, 5356, 280, 14095, 32, 363, 26, 979, 5356, 30, 5253, 2797, 5356, 27, 1090, 638, 1617, 612, 26, 979, 5356, 293, 616, 310, 32, 3227, 2931, 26, 979, 5356, 30, 537, 1562, 5356, 293, 291, 320, 397, 320, 284, 320, 334, 320, 719, 1022]}
{"line_number": 209, "line_type": "original", "code": "    Preconditions.checkState(n.isCall());", "entropy": 1.5498046875, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [6.33203125, 9.484375, 0.004138946533203125, 0.01030731201171875, 0.06976318359375, 0.045318603515625, 0.5859375, 0.004268646240234375, 0.415771484375, 0.028167724609375, 0.060882568359375], "tokens": [264, 40596, 32, 1553, 1078, 26, 96, 32, 297, 1853, 1035]}
{"line_number": 209, "line_type": "generated", "code": "\n    }\n    return n;\n  }\n\n  private Node tryFoldImmediateCallToUnboundFunction(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    Bind bind = getCodingConvention", "entropy": 0.142578125, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.456298828125, 0.01061248779296875, 0.16455078125, 0.01045989990234375, 0.0036678314208984375, 0.0010433197021484375, 0.008392333984375, 0.0012979507446289062, 0.1962890625, 0.37255859375, 0.31396484375, 0.06488037109375, 0.58154296875, 0.50732421875, 0.362548828125, 0.2435302734375, 1.30859375, 0.01806640625, 0.0704345703125, 0.0218353271484375, 0.006526947021484375, 0.043243408203125, 0.043212890625, 0.0011806488037109375, 0.1744384765625, 0.73046875, 4.684925079345703e-05, 0.0001741647720336914, 0.01163482666015625, 0.0010471343994140625, 0.00759124755859375, 4.2557716369628906e-05, 0.00833892822265625, 0.0016231536865234375, 0.0189971923828125, 0.131103515625, 0.2122802734375, 0.0631103515625, 0.0019216537475585938, 0.0010852813720703125, 0.004863739013671875, 3.0159950256347656e-05, 0.019195556640625, 7.62939453125e-06, 0.005584716796875, 0.13427734375, 1.056640625, 0.00165557861328125, 0.003765106201171875, 0.011016845703125, 0.00024318695068359375, 9.942054748535156e-05], "tokens": [284, 320, 284, 442, 310, 45, 334, 320, 719, 945, 4004, 1596, 15483, 20467, 1853, 705, 1061, 4464, 2447, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 1078, 26, 96, 32, 297, 1853, 1035, 284, 4004, 1476, 2922, 280, 310, 32, 25657, 2931, 473, 284, 11462, 5111, 280, 622, 27427, 21748]}
{"line_number": 210, "line_type": "original", "code": "    Node callTarget = n.getFirstChild();", "entropy": 1.275390625, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [4.6484375, 5.46875, 2.125, 0.2384033203125, 0.131591796875, 0.062225341796875, 0.0010671615600585938, 0.0723876953125, 0.0012531280517578125, 0.00860595703125], "tokens": [264, 4004, 1476, 2922, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 210, "line_type": "generated", "code": "\n    return n;\n  }\n\n  private Node tryFoldImmediateCallToInlineFunction(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (!callTarget.isFunction()) {\n     ", "entropy": 0.259521484375, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.08648681640625, 0.1541748046875, 0.0161285400390625, 0.0034275054931640625, 0.015289306640625, 0.0005059242248535156, 0.181396484375, 0.3134765625, 0.25830078125, 0.062042236328125, 0.66357421875, 0.70068359375, 0.40234375, 0.2470703125, 3.455078125, 0.4501953125, 0.0250396728515625, 0.0128936767578125, 0.06561279296875, 0.068115234375, 0.0016918182373046875, 0.072998046875, 0.340576171875, 9.560585021972656e-05, 0.00020647048950195312, 0.005100250244140625, 0.0016050338745117188, 0.025390625, 0.00011932849884033203, 0.00905609130859375, 0.0020904541015625, 0.031036376953125, 0.408935546875, 0.55712890625, 0.1907958984375, 0.006214141845703125, 0.00299072265625, 0.01430511474609375, 2.6941299438476562e-05, 0.0267486572265625, 5.4836273193359375e-05, 0.005756378173828125, 0.230712890625, 1.4560546875, 1.61328125, 0.36767578125, 0.004497528076171875, 0.0003490447998046875, 0.78564453125, 0.1292724609375, 0.0027828216552734375, 0.0177764892578125], "tokens": [284, 442, 310, 45, 334, 320, 719, 945, 4004, 1596, 15483, 20467, 1853, 705, 10144, 2447, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 1078, 26, 96, 32, 297, 1853, 1035, 284, 4004, 1476, 2922, 280, 310, 32, 25657, 2931, 473, 284, 415, 1429, 1851, 2922, 32, 39504, 1157, 301, 397]}
{"line_number": 211, "line_type": "original", "code": "    if (callTarget != null && callTarget.isName() &&", "entropy": 1.0712890625, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [5.66015625, 1.3095703125, 0.16552734375, 1.078125, 0.00667572021484375, 1.7666015625, 0.004100799560546875, 0.51708984375, 0.337158203125, 0.0004830360412597656, 0.0032596588134765625, 0.39599609375, 2.921875, 0.96630859375, 0.927734375], "tokens": [264, 415, 308, 1851, 2922, 863, 744, 962, 1476, 2922, 32, 297, 558, 346, 962]}
{"line_number": 211, "line_type": "generated", "code": "\n    if (callTarget.isGetProp() && callTarget.getFirstChild().isThis()) {\n      // rewrite from \"this.fn(a, b)\" to \"fn.call(this, a, b)\"\n      Node newCallTarget =", "entropy": 0.37646484375, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [1.7919921875, 1.478515625, 0.263671875, 0.82373046875, 0.00582122802734375, 0.1971435546875, 0.42919921875, 0.291015625, 0.0217132568359375, 0.51953125, 0.58544921875, 0.5869140625, 0.00034618377685546875, 0.0014047622680664062, 1.8212890625, 0.00019848346710205078, 0.04266357421875, 0.35595703125, 0.478515625, 0.244140625, 0.0030155181884765625, 0.06005859375, 0.73974609375, 4.1328125, 1.1494140625, 0.150634765625, 0.1390380859375, 0.00690460205078125, 1.5517578125, 0.1439208984375, 0.031402587890625, 0.141357421875, 0.0640869140625, 0.004306793212890625, 0.00714874267578125, 0.0199737548828125, 0.173583984375, 0.10809326171875, 0.1500244140625, 0.0005030632019042969, 0.0163726806640625, 0.1263427734375, 0.004665374755859375, 0.0006442070007324219, 0.0008668899536132812, 0.0125579833984375, 0.035003662109375, 0.2257080078125, 0.402587890625, 0.036346435546875, 0.0009336471557617188, 0.001251220703125], "tokens": [284, 415, 308, 1851, 2922, 32, 297, 936, 6567, 346, 962, 1476, 2922, 32, 25657, 2931, 922, 297, 2272, 1157, 301, 397, 434, 21817, 645, 313, 578, 32, 3359, 26, 83, 30, 323, 4731, 372, 313, 3359, 32, 1851, 26, 578, 30, 312, 30, 323, 4731, 397, 4004, 537, 1853, 2922, 280]}
{"line_number": 229, "line_type": "original", "code": "    return n;", "entropy": 1.6376953125, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [4.58984375, 1.8740234375, 0.08270263671875, 0.0038280487060546875], "tokens": [264, 442, 310, 45]}
{"line_number": 229, "line_type": "generated", "code": "\n    if (parent.isAssign()) {\n      // Split comma in assignment\n      Preconditions.checkState(left.isName());\n      Node leftName = left.cloneTree();\n      Node rightName = right.cloneTree();\n      leftName.putBoolean", "entropy": 0.6494140625, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.92333984375, 0.97998046875, 0.1766357421875, 1.287109375, 0.25732421875, 0.0809326171875, 1.0712890625, 0.537109375, 0.0014238357543945312, 0.0298309326171875, 0.83984375, 1.8857421875, 1.150390625, 1.544921875, 1.9326171875, 1.6435546875, 2.46875, 0.0006575584411621094, 0.0017032623291015625, 0.060028076171875, 0.0206756591796875, 0.93505859375, 0.6337890625, 0.08917236328125, 0.56591796875, 0.439453125, 0.162841796875, 1.462890625, 3.021484375, 1.3876953125, 0.03558349609375, 0.036956787109375, 0.6630859375, 0.1903076171875, 0.394775390625, 0.0037021636962890625, 0.1649169921875, 0.72021484375, 0.544921875, 0.92431640625, 0.01238250732421875, 0.59423828125, 0.0029239654541015625, 0.0276336669921875, 0.0018768310546875, 0.001728057861328125, 0.343505859375, 1.4521484375, 0.8046875, 0.0036163330078125, 1.271484375, 0.009246826171875], "tokens": [284, 415, 308, 2544, 32, 297, 9079, 1157, 301, 397, 434, 18968, 18231, 328, 13807, 397, 40596, 32, 1553, 1078, 26, 1873, 32, 297, 558, 1035, 397, 4004, 2841, 558, 280, 2841, 32, 6358, 3350, 473, 397, 4004, 2091, 558, 280, 2091, 32, 6358, 3350, 473, 397, 2841, 558, 32, 524, 4709]}
{"line_number": 234, "line_type": "original", "code": "    Preconditions.checkState(n.isCall());", "entropy": 2.04296875, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [5.30859375, 8.0703125, 0.0036983489990234375, 0.0175323486328125, 0.0848388671875, 0.054779052734375, 2.435546875, 0.297607421875, 0.98779296875, 4.7109375, 0.50146484375], "tokens": [264, 40596, 32, 1553, 1078, 26, 96, 32, 297, 1853, 1035]}
{"line_number": 234, "line_type": "generated", "code": "\n      parent.replaceChild(n, left);\n      parent.addChildToFront(right);\n      reportCodeChange();\n    }\n\n    return n;\n  }\n\n  private Node tryFoldConstants(Node n) {\n    if (late) {\n      return n", "entropy": 0.235595703125, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.1297607421875, 0.498046875, 0.00656890869140625, 0.2435302734375, 0.0006194114685058594, 0.0005888938903808594, 0.5283203125, 0.001018524169921875, 0.039093017578125, 0.11492919921875, 0.33984375, 1.380859375, 0.110107421875, 0.0950927734375, 0.030853271484375, 0.330810546875, 0.000720977783203125, 0.25732421875, 0.241455078125, 0.367431640625, 0.20263671875, 0.0008440017700195312, 5.14984130859375e-05, 0.0032367706298828125, 0.34765625, 3.6835670471191406e-05, 1.103515625, 0.266845703125, 0.01152801513671875, 0.00104522705078125, 0.006870269775390625, 0.00013506412506103516, 0.2047119140625, 0.383544921875, 0.267578125, 0.1502685546875, 1.044921875, 1.9931640625, 0.10565185546875, 0.0023097991943359375, 0.0233917236328125, 0.0726318359375, 0.00200653076171875, 0.10546875, 0.68359375, 0.1287841796875, 0.3515625, 0.028533935546875, 0.004703521728515625, 0.0052490234375, 0.024169921875, 0.0068511962890625], "tokens": [397, 2935, 32, 3227, 2931, 26, 96, 30, 2841, 293, 397, 2935, 32, 21545, 705, 10112, 26, 990, 293, 397, 3639, 1227, 1791, 473, 284, 320, 446, 442, 310, 45, 334, 320, 719, 945, 4004, 1596, 15483, 5229, 26, 1212, 310, 27, 301, 284, 415, 308, 1089, 27, 301, 397, 442, 310]}
{"line_number": 235, "line_type": "original", "code": "    Node callTarget = n.getFirstChild();", "entropy": 1.7314453125, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [6.390625, 2.54296875, 5.0078125, 0.50341796875, 0.06622314453125, 1.56640625, 0.230712890625, 0.9521484375, 0.017547607421875, 0.0284881591796875], "tokens": [264, 4004, 1476, 2922, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 235, "line_type": "generated", "code": "\n      // If the right operand is not a comma, then we're done.\n      if (!right.isComma()) {\n        return n;\n      }\n\n      // Otherwise, move the right operand to the left.\n      right.detachChildren();\n      Node right", "entropy": 0.71044921875, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.17138671875, 0.7158203125, 2.498046875, 0.4462890625, 1.330078125, 0.273193359375, 0.2626953125, 1.830078125, 0.73779296875, 0.70458984375, 1.248046875, 1.8759765625, 1.4267578125, 1.3564453125, 0.125732421875, 0.1142578125, 0.1138916015625, 0.11376953125, 0.31201171875, 0.1815185546875, 0.0016202926635742188, 0.006381988525390625, 0.003143310546875, 0.039947509765625, 0.01163482666015625, 0.0718994140625, 0.342529296875, 0.505859375, 0.0083770751953125, 0.0054168701171875, 0.0002613067626953125, 0.576171875, 0.176513671875, 1.845703125, 0.2900390625, 2.31640625, 0.53271484375, 1.0205078125, 0.7216796875, 1.552734375, 0.724609375, 1.9013671875, 1.837890625, 0.0467529296875, 2.279296875, 0.28173828125, 0.1912841796875, 0.075927734375, 0.0016078948974609375, 0.041412353515625, 1.890625, 1.791015625], "tokens": [397, 434, 1670, 322, 2091, 19236, 438, 646, 312, 18231, 30, 1615, 996, 4484, 3390, 32, 397, 415, 1429, 990, 32, 297, 34010, 1157, 301, 291, 442, 310, 45, 397, 320, 1687, 434, 12779, 30, 5169, 322, 2091, 19236, 372, 322, 2841, 32, 397, 2091, 32, 18723, 7640, 473, 397, 4004, 2091]}
{"line_number": 236, "line_type": "original", "code": "    Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);", "entropy": 3.28515625, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [4.87890625, 13.21875, 0.435302734375, 0.1337890625, 2.236328125, 13.171875, 0.03887939453125, 0.04345703125, 7.81640625, 0.1800537109375, 2.349609375, 0.06494140625, 4.3515625, 0.79150390625, 2.62890625, 3.423828125, 0.0941162109375], "tokens": [264, 11462, 5111, 280, 622, 27427, 21748, 922, 7628, 2447, 3726, 26, 1851, 2922, 30, 901, 293]}
{"line_number": 236, "line_type": "generated", "code": "\n      parent.addChildToBack(right);\n      reportCodeChange();\n    }\n\n    return n;\n  }\n\n  private Node tryFoldArrayLiteral(Node n) {\n    if (late) {\n      return n;\n    }\n    // Fold array literals.", "entropy": 0.38525390625, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.1829833984375, 0.869140625, 0.00553131103515625, 0.0081634521484375, 0.25732421875, 0.0305633544921875, 0.004283905029296875, 0.08123779296875, 0.37158203125, 0.50732421875, 0.2587890625, 0.0009813308715820312, 0.00010883808135986328, 0.003326416015625, 0.361572265625, 5.1856040954589844e-05, 1.025390625, 0.1978759765625, 0.0178680419921875, 0.0015935897827148438, 0.0090484619140625, 0.00021827220916748047, 0.240234375, 0.391357421875, 0.28759765625, 0.1866455078125, 1.01171875, 2.775390625, 0.7001953125, 0.1318359375, 0.004779815673828125, 0.043548583984375, 0.052093505859375, 0.0018310546875, 0.04095458984375, 1.0634765625, 0.1705322265625, 0.208251953125, 0.033843994140625, 0.006290435791015625, 0.004364013671875, 0.021392822265625, 0.00524139404296875, 0.00013327598571777344, 0.0017004013061523438, 9.310245513916016e-05, 0.40771484375, 2.220703125, 2.15234375, 0.95166015625, 0.43408203125, 2.28515625], "tokens": [397, 2935, 32, 21545, 705, 2495, 26, 990, 293, 397, 3639, 1227, 1791, 473, 284, 320, 446, 442, 310, 45, 334, 320, 719, 945, 4004, 1596, 15483, 1261, 8208, 26, 1212, 310, 27, 301, 284, 415, 308, 1089, 27, 301, 397, 442, 310, 45, 284, 320, 284, 434, 40809, 1417, 36388, 32]}
{"line_number": 237, "line_type": "original", "code": "    if (bind != null) {", "entropy": 2.419921875, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [4.015625, 2.02734375, 0.2003173828125, 8.2265625, 4.34375, 0.005615234375, 0.486083984375, 0.060516357421875], "tokens": [264, 415, 308, 2539, 863, 744, 27, 301]}
{"line_number": 237, "line_type": "generated", "code": "\n        // We want to split the comma in the same place as the original\n        // expression, but we don't want to move the new statement to the\n        // right of the original expression.\n        parent.getParent().addChildAfter(newStatement, parent);", "entropy": 0.97998046875, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [1.4443359375, 1.43359375, 3.642578125, 2.568359375, 0.392333984375, 3.072265625, 1.2197265625, 0.87890625, 2.5546875, 1.033203125, 2.025390625, 2.193359375, 1.10546875, 0.445068359375, 0.73974609375, 0.72216796875, 0.0169677734375, 0.5732421875, 0.7041015625, 1.3193359375, 1.5361328125, 1.5068359375, 0.00018453598022460938, 0.66162109375, 0.196044921875, 1.80859375, 0.93408203125, 1.6083984375, 0.611328125, 2.0234375, 1.208984375, 0.2578125, 0.0053253173828125, 1.5068359375, 1.2431640625, 0.7333984375, 0.72607421875, 1.1162109375, 0.93017578125, 1.001953125, 1.623046875, 0.059234619140625, 0.64990234375, 0.003025054931640625, 0.026702880859375, 0.348876953125, 0.0003211498260498047, 0.057861328125, 3.552436828613281e-05, 0.017242431640625, 0.2459716796875, 0.2330322265625], "tokens": [291, 434, 2688, 2637, 372, 6122, 322, 18231, 328, 322, 2432, 3668, 619, 322, 4707, 291, 434, 6101, 30, 1273, 996, 2800, 1330, 2637, 372, 5169, 322, 537, 7603, 372, 322, 291, 434, 2091, 432, 322, 4707, 6101, 32, 291, 2935, 32, 18789, 922, 21545, 5125, 26, 890, 5495, 30, 2935, 293]}
{"line_number": 260, "line_type": "original", "code": "    return n;", "entropy": 2.83203125, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [5.9453125, 4.48046875, 0.8720703125, 0.0284576416015625], "tokens": [264, 442, 310, 45]}
{"line_number": 260, "line_type": "generated", "code": "\n        if (thenBranch.isReturn() && elseBranch.isReturn()) {\n          Node ifNode = IR.ifNode(cond.cloneTree(),\n              thenBranch.getFirstChild().cloneTree(),\n              elseBranch.getFirstChild().cloneTree());", "entropy": 0.26513671875, "is_bug_line": false, "sus_score": 0.08770580193070293, "per_token_entropy": [0.233154296875, 0.329833984375, 0.192138671875, 0.96142578125, 2.5153160095214844e-05, 0.232177734375, 0.044921875, 0.1885986328125, 0.03448486328125, 0.289794921875, 0.321044921875, 4.291534423828125e-06, 0.040557861328125, 0.0006842613220214844, 0.0011234283447265625, 1.26171875, 0.00774383544921875, 0.081298828125, 0.6259765625, 1.73828125, 1.6796875, 0.03338623046875, 1.3828125, 0.0002913475036621094, 0.07061767578125, 0.00394439697265625, 0.004291534423828125, 0.346435546875, 0.67822265625, 1.1865234375, 0.0253753662109375, 0.07269287109375, 0.59521484375, 0.040985107421875, 3.826618194580078e-05, 0.005527496337890625, 0.3486328125, 0.0083160400390625, 0.0638427734375, 0.11767578125, 0.0010862350463867188, 0.129150390625, 0.02301025390625, 0.0147705078125, 7.987022399902344e-06, 0.0004258155822753906, 0.0010986328125, 3.0040740966796875e-05, 0.0007834434509277344, 5.1021575927734375e-05, 9.5367431640625e-06, 0.3583984375], "tokens": [291, 415, 308, 3356, 10094, 32, 297, 2891, 346, 962, 813, 10094, 32, 297, 2891, 1157, 301, 616, 4004, 415, 1212, 280, 14095, 32, 325, 1212, 26, 1328, 32, 6358, 3350, 1026, 1090, 1615, 10094, 32, 25657, 2931, 922, 6358, 3350, 1026, 1090, 813, 10094, 32, 25657, 2931, 922, 6358, 3350, 1035]}
{"line_number": 142, "line_type": "original", "code": "        Node result =  tryFoldLiteralConstructor(node);", "entropy": 3.640625, "is_bug_line": false, "sus_score": 0.0873704056661038, "per_token_entropy": [4.8046875, 1.45703125, 4.69921875, 0.130615234375, 5.87890625, 3.34765625, 2.150390625, 7.62109375, 8.3203125, 0.38525390625, 4.51953125, 0.369140625], "tokens": [351, 4004, 1056, 280, 225, 1596, 15483, 8208, 7932, 26, 1251, 293]}
{"line_number": 142, "line_type": "generated", "code": "\n        Node whileCondition = IR.not(fixedIfCondition)\n           .srcref(fixedIfCondition);\n        Node whileNode = IR.whileNode(whileCondition, block)\n           .srcref(block);\n        maybeIf.getParent().replaceChild", "entropy": 0.40234375, "is_bug_line": false, "sus_score": 0.0873704056661038, "per_token_entropy": [0.1787109375, 1.4677734375, 2.9765625, 0.47802734375, 0.1507568359375, 0.89990234375, 0.0007791519165039062, 0.685546875, 0.00046324729919433594, 0.69482421875, 0.00015687942504882812, 6.079673767089844e-06, 0.4248046875, 0.0166168212890625, 0.0007538795471191406, 0.346923828125, 0.0003070831298828125, 0.0225677490234375, 0.419189453125, 4.57763671875e-05, 5.841255187988281e-06, 0.031982421875, 0.9716796875, 0.78271484375, 0.48388671875, 0.564453125, 0.016326904296875, 0.3662109375, 0.0007810592651367188, 0.01194000244140625, 0.048004150390625, 0.0010662078857421875, 0.1826171875, 0.0003757476806640625, 0.0830078125, 0.3154296875, 0.68310546875, 0.0157623291015625, 0.0012664794921875, 0.2491455078125, 0.00011587142944335938, 0.00986480712890625, 1.47265625, 0.04644775390625, 0.48974609375, 2.357421875, 1.1923828125, 0.032440185546875, 1.7158203125, 0.0016956329345703125, 0.035919189453125, 8.83340835571289e-05], "tokens": [291, 4004, 2218, 5356, 280, 14095, 32, 1206, 26, 8638, 2797, 5356, 27, 324, 638, 1617, 612, 26, 8638, 2797, 5356, 293, 291, 4004, 2218, 1212, 280, 14095, 32, 5525, 1212, 26, 5525, 5356, 30, 2163, 27, 324, 638, 1617, 612, 26, 1521, 293, 291, 8762, 2797, 32, 18789, 922, 3227, 2931]}
{"line_number": 143, "line_type": "original", "code": "        if (result == node) {", "entropy": 1.986328125, "is_bug_line": false, "sus_score": 0.0873704056661038, "per_token_entropy": [5.78125, 1.4228515625, 0.55908203125, 5.6484375, 1.6474609375, 0.74267578125, 0.039794921875, 0.0465087890625], "tokens": [351, 415, 308, 1267, 610, 1541, 27, 301]}
{"line_number": 143, "line_type": "generated", "code": "\n        Node forCondition = NodeUtil.getConditionExpression(n);\n        if (forCondition!= null) {\n          forCondition = IR.and(fixedIfCondition, forCondition)\n             .srcref(forCondition);\n        } else {\n          for", "entropy": 0.264892578125, "is_bug_line": false, "sus_score": 0.0873704056661038, "per_token_entropy": [0.78857421875, 1.0234375, 0.79443359375, 0.1339111328125, 0.056243896484375, 1.240234375, 0.001186370849609375, 0.0001838207244873047, 0.034942626953125, 0.00785064697265625, 0.0005469322204589844, 0.0022563934326171875, 0.011444091796875, 0.056884765625, 0.1572265625, 1.1318359375, 0.42578125, 0.1661376953125, 6.628036499023438e-05, 0.978515625, 0.029144287109375, 0.107666015625, 0.005496978759765625, 0.07391357421875, 1.5283203125, 0.00769805908203125, 0.306640625, 0.546875, 0.0011749267578125, 0.52880859375, 0.0033893585205078125, 1.4990234375, 2.0742416381835938e-05, 2.6226043701171875e-06, 0.01666259765625, 0.2548828125, 8.857250213623047e-05, 0.51708984375, 0.0565185546875, 0.0006103515625, 0.1180419921875, 0.0001481771469116211, 0.0223236083984375, 0.62353515625, 9.417533874511719e-06, 0.0251007080078125, 0.32666015625, 0.00012099742889404297, 0.09259033203125, 0.003673553466796875, 0.00989532470703125, 0.05615234375], "tokens": [291, 4004, 436, 5356, 280, 4004, 1733, 32, 371, 5356, 3487, 26, 96, 293, 291, 415, 308, 979, 5356, 863, 744, 27, 301, 616, 436, 5356, 280, 14095, 32, 363, 26, 8638, 2797, 5356, 30, 436, 5356, 27, 1090, 638, 1617, 612, 26, 979, 5356, 293, 291, 320, 813, 301, 616, 436]}
