{"line_number": 2884, "line_type": "original", "code": "        if (value.getBooleanProp(Node.INCRDECR_PROP)) {", "entropy": 1.26953125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [6.8359375, 2.005859375, 0.1640625, 2.986328125, 0.2054443359375, 4.42578125, 0.0024242401123046875, 0.004306793212890625, 0.0164337158203125, 0.00725555419921875, 5.4765625, 0.422607421875, 0.0008740425109863281, 0.0008311271667480469, 0.0013246536254882812, 0.0635986328125, 0.1693115234375, 0.061309814453125], "tokens": [351, 415, 308, 853, 32, 28186, 6567, 26, 1212, 32, 521, 3754, 852, 3754, 81, 15262, 490, 301]}
{"line_number": 2884, "line_type": "generated", "code": "\n  static Node getNthChild(Node n) {\n    Node parent = n.getParent();\n    if (parent == null) {\n      return null;\n    }\n    Node[] children = parent.children;\n    for (int i = 0;", "entropy": 0.262939453125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.38037109375, 0.415771484375, 0.035980224609375, 0.5234375, 0.365234375, 0.00017726421356201172, 0.37939453125, 0.0195770263671875, 0.01502227783203125, 1.6044921875, 0.4794921875, 0.008544921875, 0.125732421875, 0.822265625, 0.86474609375, 0.0163421630859375, 0.01387786865234375, 0.00887298583984375, 0.0006012916564941406, 0.0037593841552734375, 0.037750244140625, 0.763671875, 0.0160980224609375, 0.09967041015625, 0.1646728515625, 0.0010042190551757812, 0.04840087890625, 0.01381683349609375, 0.052978515625, 0.06646728515625, 0.0135498046875, 0.0015630722045898438, 0.003631591796875, 0.00022292137145996094, 0.48681640625, 1.3662109375, 2.3046875, 0.224365234375, 0.004123687744140625, 0.04241943359375, 0.0006475448608398438, 0.0233306884765625, 0.03314208984375, 0.07208251953125, 1.01953125, 0.0066986083984375, 0.10260009765625, 0.06256103515625, 0.01139068603515625, 0.023712158203125, 0.023284912109375, 0.493408203125], "tokens": [334, 907, 4004, 622, 64, 349, 2931, 26, 1212, 310, 27, 301, 284, 4004, 2935, 280, 310, 32, 18789, 473, 284, 415, 308, 2544, 610, 744, 27, 301, 397, 442, 744, 45, 284, 320, 284, 4004, 1178, 5713, 280, 2935, 32, 4915, 45, 284, 436, 308, 410, 595, 280, 225, 34, 45]}
{"line_number": 2885, "line_type": "original", "code": "          return evaluatesToLocalValue(value.getFirstChild(), locals);", "entropy": 2.22265625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.453125, 0.77001953125, 16.234375, 0.034454345703125, 0.0028839111328125, 0.0189208984375, 1.5390625, 0.341552734375, 1.0625, 0.0016469955444335938, 0.184326171875, 0.011871337890625, 0.237548828125], "tokens": [2033, 442, 43992, 40608, 882, 26, 853, 32, 25657, 2931, 1026, 28363, 293]}
{"line_number": 2885, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Returns whether the CALL node is the special case of a\n   * toString() call on an object.\n   */\n  private static boolean isToStringMethodCall(Node call) {\n    Node target = call.getFirstChild();\n    return call", "entropy": 0.64013671875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.8271484375, 0.00775909423828125, 0.0928955078125, 0.31884765625, 0.04345703125, 0.0010766983032226562, 1.7216796875, 1.484375, 0.69580078125, 1.904296875, 0.27197265625, 1.3681640625, 2.708984375, 2.8828125, 1.0400390625, 0.501953125, 1.078125, 2.0390625, 0.0019350051879882812, 1.142578125, 1.255859375, 0.9228515625, 1.8291015625, 0.83447265625, 1.0673828125, 1.1494140625, 0.259765625, 0.210205078125, 0.004199981689453125, 0.61376953125, 0.0021190643310546875, 0.0059051513671875, 0.0011224746704101562, 0.00252532958984375, 0.0016193389892578125, 0.00391387939453125, 0.002735137939453125, 0.521484375, 0.198486328125, 0.0007853507995605469, 0.14013671875, 1.1201171875, 0.74462890625, 0.0130157470703125, 0.0582275390625, 0.0007309913635253906, 0.0285491943359375, 0.00019681453704833984, 0.0053558349609375, 0.0689697265625, 0.94775390625, 1.142578125], "tokens": [334, 320, 719, 1022, 664, 319, 3759, 4946, 322, 16084, 1541, 438, 322, 7456, 1135, 432, 312, 664, 319, 11345, 346, 1476, 544, 600, 1300, 32, 664, 569, 334, 945, 907, 1905, 438, 4590, 28353, 26, 1212, 1476, 27, 301, 284, 4004, 1760, 280, 1476, 32, 25657, 2931, 473, 284, 442, 1476]}
{"line_number": 2887, "line_type": "original", "code": "          return true;", "entropy": 4.734375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [6.1484375, 4.46484375, 8.3125, 0.01180267333984375], "tokens": [2033, 442, 861, 45]}
{"line_number": 2887, "line_type": "generated", "code": "\n      sibling = sibling.getNext();\n      index--;\n    }\n    return sibling;\n  }\n\n  /**\n   * Returns whether the call is to a toString method.\n   */\n  private static boolean isToStringMethodCall(Node call) {\n    if (call.getType", "entropy": 0.37841796875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.393798828125, 0.261474609375, 0.0014476776123046875, 0.00905609130859375, 0.0012655258178710938, 0.0020809173583984375, 0.01004791259765625, 0.9482421875, 0.2215576171875, 0.06329345703125, 0.0139923095703125, 0.0001634359359741211, 0.069091796875, 0.0655517578125, 0.029632568359375, 0.0092926025390625, 0.00368499755859375, 0.0015897750854492188, 0.157958984375, 0.281982421875, 0.04132080078125, 0.0006566047668457031, 1.75, 1.3671875, 0.68505859375, 2.1796875, 1.359375, 1.5966796875, 1.185546875, 2.025390625, 0.303466796875, 0.71923828125, 0.06591796875, 0.277587890625, 0.006122589111328125, 0.35302734375, 0.0014934539794921875, 0.0046844482421875, 0.0008802413940429688, 0.0006575584411621094, 0.0005216598510742188, 0.0018262863159179688, 0.00250244140625, 0.39892578125, 0.144775390625, 0.0005636215209960938, 0.04248046875, 1.115234375, 0.90380859375, 0.1507568359375, 0.062164306640625, 0.38671875], "tokens": [397, 40560, 280, 40560, 32, 23017, 473, 397, 1650, 10612, 284, 320, 284, 442, 40560, 45, 334, 320, 719, 1022, 664, 319, 3759, 4946, 322, 1476, 438, 372, 312, 11345, 1411, 32, 664, 569, 334, 945, 907, 1905, 438, 4590, 28353, 26, 1212, 1476, 27, 301, 284, 415, 308, 1851, 32, 10272]}
{"line_number": 2912, "line_type": "original", "code": "        return true;", "entropy": 3.166015625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.4765625, 1.2802734375, 1.8955078125, 0.01280975341796875], "tokens": [351, 442, 861, 45]}
{"line_number": 2912, "line_type": "generated", "code": "\n  /**\n   * Determines if a function call has a local result.\n   *\n   * This is the case if the function is assigned to a local variable\n   * and the function is not a simple function.\n   *\n   * @param call The CALL node", "entropy": 0.873046875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [1.171875, 0.951171875, 0.08209228515625, 0.0007905960083007812, 2.978515625, 0.421875, 1.291015625, 1.39453125, 1.4248046875, 1.2880859375, 0.2548828125, 0.28857421875, 0.32568359375, 0.322265625, 0.115478515625, 0.2196044921875, 1.5517578125, 0.00362396240234375, 2.48828125, 1.0263671875, 2.376953125, 0.124267578125, 0.302490234375, 0.74951171875, 0.58837890625, 0.99169921875, 2.359375, 0.27978515625, 0.20458984375, 0.34130859375, 1.0634765625, 1.5048828125, 0.005046844482421875, 1.6171875, 0.91552734375, 1.375, 1.4130859375, 1.1650390625, 1.1513671875, 2.37109375, 1.529296875, 1.0634765625, 0.1573486328125, 0.33544921875, 0.382080078125, 0.01192474365234375, 1.158203125, 0.205322265625, 0.494140625, 0.74951171875, 0.51318359375, 0.298828125], "tokens": [334, 1022, 664, 319, 34450, 415, 312, 667, 1476, 1401, 312, 2196, 1056, 32, 664, 319, 664, 319, 1348, 438, 322, 1135, 415, 322, 667, 438, 11012, 372, 312, 2196, 2677, 664, 319, 461, 322, 667, 438, 646, 312, 4281, 667, 32, 664, 319, 664, 319, 477, 753, 1476, 886, 16084, 1541]}
{"line_number": 2923, "line_type": "original", "code": "        throw new IllegalStateException(", "entropy": 2.759765625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.6484375, 3.75, 0.0701904296875, 0.5546875, 0.7705078125], "tokens": [351, 1422, 537, 21665, 26]}
{"line_number": 2923, "line_type": "generated", "code": "\n\n  /**\n   * Checks if the given value is a simple operator.\n   */\n  private static boolean isSimpleOperator(Node value) {\n    return isAssignOp(value)\n        || isComma(value)\n        || isAnd(value)\n        ||", "entropy": 0.454833984375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.6953125, 0.49658203125, 0.065185546875, 0.0003924369812011719, 3.2734375, 0.5263671875, 0.6826171875, 1.6796875, 1.6943359375, 0.5390625, 0.68994140625, 1.98828125, 0.77734375, 0.763671875, 0.1080322265625, 0.8798828125, 0.007549285888671875, 0.398193359375, 0.01552581787109375, 0.00858306884765625, 0.00044798851013183594, 0.007656097412109375, 0.00763702392578125, 0.0006070137023925781, 0.0023479461669921875, 0.3837890625, 0.0013027191162109375, 0.000904083251953125, 0.045196533203125, 1.2001953125, 1.021484375, 2.19140625, 0.875, 0.004299163818359375, 0.0003783702850341797, 0.030242919921875, 0.52734375, 0.012298583984375, 0.283935546875, 0.5263671875, 0.2127685546875, 8.416175842285156e-05, 0.050567626953125, 0.01505279541015625, 0.005069732666015625, 0.044281005859375, 0.85205078125, 0.046295166015625, 2.849102020263672e-05, 0.0006909370422363281, 0.020965576171875, 0.0029964447021484375], "tokens": [719, 1022, 664, 319, 17279, 415, 322, 2702, 786, 438, 312, 4281, 4134, 32, 664, 569, 334, 945, 907, 1905, 438, 5291, 7145, 26, 1212, 786, 27, 301, 284, 442, 438, 9079, 3397, 26, 853, 27, 291, 1276, 438, 34010, 26, 853, 27, 291, 1276, 438, 2185, 26, 853, 27, 291, 1276]}
{"line_number": 2874, "line_type": "original", "code": "        return evaluatesToLocalValue(value.getLastChild(), locals);", "entropy": 1.802734375, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [2.419921875, 8.1328125, 9.28125, 0.0178070068359375, 0.00545501708984375, 0.029632568359375, 0.08514404296875, 0.1458740234375, 2.939453125, 0.000728607177734375, 0.136962890625, 0.01349639892578125, 0.2235107421875], "tokens": [351, 442, 43992, 40608, 882, 26, 853, 32, 20197, 2931, 1026, 28363, 293]}
{"line_number": 2874, "line_type": "generated", "code": "\n            \"Unexpected node type \" + value.getType() + \" in \" + value.toStringTree());\n    }\n  }\n\n  /**\n   * @param value The value node.\n   * @return Whether the node is a string literal.\n   */\n  static", "entropy": 0.55615234375, "is_bug_line": false, "sus_score": 0.35355339059327373, "per_token_entropy": [1.529296875, 0.349609375, 0.4814453125, 0.57958984375, 0.34130859375, 1.896484375, 0.09356689453125, 0.1270751953125, 0.0797119140625, 0.057952880859375, 0.490966796875, 0.4697265625, 0.57275390625, 1.9248046875, 0.9345703125, 0.254638671875, 0.1085205078125, 1.13671875, 0.17724609375, 0.0005345344543457031, 0.1002197265625, 0.0833740234375, 0.002529144287109375, 0.0345458984375, 0.0012798309326171875, 0.212158203125, 0.442138671875, 0.06494140625, 0.0005564689636230469, 0.52587890625, 1.6181640625, 1.640625, 0.728515625, 1.134765625, 1.0419921875, 0.5546875, 0.0132598876953125, 0.0208892822265625, 0.00530242919921875, 0.09765625, 0.144775390625, 0.291259765625, 0.8544921875, 0.387939453125, 1.3544921875, 2.671875, 1.68359375, 1.2470703125, 0.02252197265625, 0.01332855224609375, 0.0027675628662109375, 0.316162109375], "tokens": [324, 313, 10203, 1541, 827, 313, 474, 786, 32, 10272, 346, 474, 313, 328, 313, 474, 786, 32, 3108, 3350, 1035, 284, 320, 334, 320, 719, 1022, 664, 319, 477, 753, 786, 886, 786, 1541, 32, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 802, 10652, 32, 664, 569, 334, 907]}
{"line_number": 1262, "line_type": "original", "code": "        return true;", "entropy": 2.80859375, "is_bug_line": true, "sus_score": 0.1889822365046136, "per_token_entropy": [5.94921875, 3.8828125, 1.396484375, 0.0041961669921875], "tokens": [351, 442, 861, 45]}
{"line_number": 1262, "line_type": "generated", "code": "\n  }\n\n  static class NumericResultPredicate implements Predicate<Node> {\n    public boolean apply(Node n) {\n      return isNumericResultHelper(n);\n    }\n  }\n\n  static final NumericResultPredicate NUMERIC_RESULT_PREDICATE =\n     ", "entropy": 0.0906982421875, "is_bug_line": true, "sus_score": 0.1889822365046136, "per_token_entropy": [0.404296875, 0.00521087646484375, 0.1734619140625, 0.318115234375, 0.5830078125, 2.548828125, 0.07073974609375, 0.0288543701171875, 0.00138092041015625, 0.000881195068359375, 0.00018990039825439453, 7.212162017822266e-05, 0.0006275177001953125, 0.000400543212890625, 0.006439208984375, 0.01145172119140625, 0.0007786750793457031, 0.00011873245239257812, 0.00026679039001464844, 0.00011706352233886719, 0.0022945404052734375, 0.00013148784637451172, 0.00017464160919189453, 0.0035495758056640625, 0.0110321044921875, 0.028564453125, 0.0057830810546875, 0.005680084228515625, 0.355224609375, 0.00023758411407470703, 0.00013327598571777344, 0.0045318603515625, 0.0009908676147460938, 4.0650367736816406e-05, 0.002300262451171875, 0.00030350685119628906, 0.0084381103515625, 0.0128021240234375, 0.016937255859375, 0.0016384124755859375, 0.0001226663589477539, 1.8477439880371094e-05, 0.03955078125, 0.00267791748046875, 0.00020694732666015625, 0.033599853515625, 0.0029964447021484375, 0.0004115104675292969, 0.0012254714965820312, 0.00025963783264160156, 0.0030364990234375, 0.0132904052734375], "tokens": [334, 320, 719, 907, 443, 26674, 1394, 12688, 4575, 23426, 46, 1212, 48, 301, 284, 562, 1905, 4871, 26, 1212, 310, 27, 301, 397, 442, 438, 12930, 1394, 2762, 26, 96, 293, 284, 320, 334, 320, 719, 907, 1158, 26674, 1394, 12688, 12682, 30461, 81, 6383, 81, 2883, 54, 31198, 280, 397]}
{"line_number": 2890, "line_type": "original", "code": "        return locals.apply(value);", "entropy": 2.396484375, "is_bug_line": false, "sus_score": 0.14433756729740646, "per_token_entropy": [5.66796875, 0.2313232421875, 12.921875, 0.0560302734375, 0.01511383056640625, 0.0023403167724609375, 0.257568359375, 0.023345947265625], "tokens": [351, 442, 28363, 32, 4699, 26, 853, 293]}
{"line_number": 2890, "line_type": "generated", "code": "\n    return sibling;\n  }\n\n  /**\n   * Returns the first sibling of the given node that is not a comma.\n   */\n  private static Node getNonCommaSibling(Node node) {\n    Node sibling = node.getNext();\n    while (sibling!=", "entropy": 0.484619140625, "is_bug_line": false, "sus_score": 0.14433756729740646, "per_token_entropy": [0.27880859375, 0.07659912109375, 0.03021240234375, 0.0108795166015625, 0.0062255859375, 0.0012159347534179688, 0.177978515625, 0.278564453125, 0.056365966796875, 0.0006918907165527344, 1.689453125, 1.1806640625, 2.375, 2.623046875, 1.2021484375, 0.83154296875, 0.796875, 0.234619140625, 0.65380859375, 0.491943359375, 0.89404296875, 0.7890625, 3.259765625, 1.2236328125, 0.047637939453125, 0.3486328125, 0.006031036376953125, 0.440673828125, 0.01007843017578125, 0.0031833648681640625, 0.72412109375, 1.3037109375, 0.283203125, 0.0264129638671875, 0.00041747093200683594, 0.0009946823120117188, 0.6982421875, 0.003917694091796875, 0.0008234977722167969, 0.1175537109375, 0.68212890625, 0.495361328125, 0.01003265380859375, 0.0234832763671875, 0.332275390625, 0.1904296875, 0.005977630615234375, 0.0218505859375, 0.06353759765625, 0.00643157958984375, 0.1553955078125, 0.0335693359375], "tokens": [284, 442, 40560, 45, 334, 320, 719, 1022, 664, 319, 3759, 322, 1932, 40560, 432, 322, 2702, 1541, 688, 438, 646, 312, 18231, 32, 664, 569, 334, 945, 907, 4004, 622, 3910, 34010, 20862, 26, 1212, 1541, 27, 301, 284, 4004, 40560, 280, 1541, 32, 23017, 473, 284, 2218, 308, 43286, 863]}
{"line_number": 2966, "line_type": "original", "code": "      Node propNode = getNode.getLastChild();", "entropy": 1.2236328125, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [7.6953125, 3.056640625, 0.7216796875, 0.006649017333984375, 0.0210418701171875, 0.186767578125, 0.0090484619140625, 0.498291015625, 0.00042438507080078125, 0.0369873046875], "tokens": [647, 4004, 7018, 1212, 280, 40524, 32, 20197, 2931, 473]}
{"line_number": 2966, "line_type": "generated", "code": "\n\n  /**\n   * Given the function, this returns the number of arguments\n   * for the function.\n   */\n  static int getArgumentCountForFunction(Node function) {\n    Preconditions.checkState(isFunction(function));\n    Node argsNode = function.", "entropy": 0.378662109375, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [1.2099609375, 0.72216796875, 0.05938720703125, 0.0003306865692138672, 1.3505859375, 0.67578125, 1.53125, 0.330078125, 0.1025390625, 0.1241455078125, 0.396240234375, 2.123046875, 0.19873046875, 0.326416015625, 1.2275390625, 0.028076171875, 2.6640625, 0.268798828125, 0.09820556640625, 0.49658203125, 0.29345703125, 0.07684326171875, 0.007781982421875, 0.298095703125, 0.00652313232421875, 0.53857421875, 0.355224609375, 0.005107879638671875, 0.10675048828125, 0.0029926300048828125, 0.0009984970092773438, 0.0019989013671875, 0.031707763671875, 0.01837158203125, 0.0006260871887207031, 0.034515380859375, 0.07281494140625, 4.57763671875e-05, 0.0001748800277709961, 0.0098114013671875, 0.0004754066467285156, 0.002368927001953125, 0.0006775856018066406, 0.00010561943054199219, 0.0083160400390625, 0.1455078125, 0.69580078125, 1.3916015625, 1.322265625, 0.0035858154296875, 0.3212890625, 0.0032444000244140625], "tokens": [719, 1022, 664, 319, 15273, 322, 667, 30, 458, 3217, 322, 1451, 432, 4209, 664, 319, 436, 322, 667, 32, 664, 569, 334, 907, 629, 622, 3484, 1534, 1562, 2447, 26, 1212, 667, 27, 301, 284, 40596, 32, 1553, 1078, 26, 39504, 26, 1126, 876, 284, 4004, 2181, 1212, 280, 667, 32]}
{"line_number": 2967, "line_type": "original", "code": "      return isString(propNode) && \"toString\".equals(propNode.getString());", "entropy": 0.99755859375, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [7.14453125, 0.88427734375, 3.298828125, 1.6923828125, 0.4091796875, 0.355712890625, 0.01377105712890625, 0.853515625, 1.431640625, 2.466796875, 0.010589599609375, 0.054595947265625, 0.0015611648559570312, 0.00311279296875, 0.2191162109375, 0.0019054412841796875, 0.0181121826171875, 0.0034332275390625, 0.08721923828125], "tokens": [647, 442, 438, 652, 26, 4641, 1212, 27, 962, 313, 3108, 2296, 3574, 26, 4641, 1212, 32, 7069, 1035]}
{"line_number": 2967, "line_type": "generated", "code": "\n\n  /**\n   * Returns whether the value is a local value.\n   * A local value is a value that is not a global.\n   */\n  private static boolean isLocalValue(Node value) {\n    return isImmutableValue(value) || isLocal", "entropy": 0.6025390625, "is_bug_line": false, "sus_score": 0.1386750490563073, "per_token_entropy": [0.80859375, 0.6123046875, 0.057830810546875, 0.0004267692565917969, 1.7060546875, 1.3291015625, 0.6640625, 2.04296875, 0.677734375, 0.89208984375, 1.3828125, 1.1845703125, 0.76318359375, 0.1983642578125, 0.611328125, 1.6748046875, 0.62744140625, 0.036773681640625, 0.306640625, 0.7744140625, 0.316650390625, 0.31591796875, 1.0400390625, 1.0263671875, 2.28125, 0.77685546875, 2.458984375, 0.06866455078125, 0.80029296875, 0.01139068603515625, 0.4931640625, 0.1341552734375, 0.00970458984375, 0.0709228515625, 0.09112548828125, 0.044677734375, 0.0056304931640625, 0.0160980224609375, 0.114501953125, 0.24755859375, 0.0007672309875488281, 0.04962158203125, 0.99169921875, 1.0615234375, 0.6181640625, 0.019256591796875, 0.0011224746704101562, 0.0009675025939941406, 0.04949951171875, 0.703125, 0.77392578125, 0.390380859375], "tokens": [719, 1022, 664, 319, 3759, 4946, 322, 786, 438, 312, 2196, 786, 32, 664, 319, 399, 2196, 786, 438, 312, 786, 688, 438, 646, 312, 3649, 32, 664, 569, 334, 945, 907, 1905, 438, 3325, 882, 26, 1212, 786, 27, 301, 284, 442, 438, 15027, 882, 26, 853, 27, 1276, 438, 3325]}
{"line_number": 2870, "line_type": "original", "code": "        return NodeUtil.isImmutableValue(value.getLastChild())", "entropy": 1.7646484375, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [6.6640625, 0.7109375, 8.84375, 0.0010194778442382812, 0.005489349365234375, 0.402587890625, 0.759765625, 0.04412841796875, 0.006805419921875, 0.0689697265625, 2.8125, 2.333984375, 0.0006256103515625, 2.052734375], "tokens": [351, 442, 4004, 1733, 32, 297, 15027, 882, 26, 853, 32, 20197, 2931, 1157]}
{"line_number": 2870, "line_type": "generated", "code": "\n          return true;\n        }\n        return false;\n    }\n  }\n\n  /**\n   * @return Whether the node is known to be immutable.\n   */\n  static boolean isImmutableValue(Node value) {\n    switch (value.getType()) {\n      case", "entropy": 0.18310546875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.451171875, 0.1162109375, 0.28271484375, 0.003108978271484375, 0.044708251953125, 0.00272369384765625, 0.6787109375, 0.71240234375, 0.1456298828125, 0.0005269050598144531, 0.02166748046875, 0.0006427764892578125, 0.0134735107421875, 0.001617431640625, 0.2423095703125, 0.291748046875, 0.052398681640625, 0.0004341602325439453, 0.401611328125, 0.24658203125, 0.142822265625, 0.310791015625, 0.7255859375, 0.381103515625, 0.74072265625, 0.0167083740234375, 0.1539306640625, 1.48046875, 0.26708984375, 0.042510986328125, 0.021209716796875, 0.0026912689208984375, 0.160400390625, 0.00316619873046875, 0.0004684925079345703, 0.000988006591796875, 0.0022678375244140625, 0.0006742477416992188, 0.0005946159362792969, 0.50634765625, 0.00130462646484375, 0.00043582916259765625, 0.0526123046875, 0.73486328125, 0.01128387451171875, 0.002674102783203125, 2.849102020263672e-05, 0.0010509490966796875, 3.4689903259277344e-05, 0.0004444122314453125, 0.0266571044921875, 0.024932861328125], "tokens": [616, 442, 861, 45, 291, 320, 291, 442, 901, 45, 284, 320, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 8967, 372, 526, 26055, 32, 664, 569, 334, 907, 1905, 438, 15027, 882, 26, 1212, 786, 27, 301, 284, 3578, 308, 853, 32, 10272, 1157, 301, 397, 1135]}
{"line_number": 1264, "line_type": "original", "code": "        return false;", "entropy": 2.32421875, "is_bug_line": true, "sus_score": 0.12126781251816648, "per_token_entropy": [8.25, 0.7509765625, 0.289794921875, 0.006313323974609375], "tokens": [351, 442, 901, 45]}
{"line_number": 1264, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": true, "sus_score": 0.12126781251816648, "per_token_entropy": [], "tokens": []}
{"line_number": 1239, "line_type": "original", "code": "    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);", "entropy": 2.365234375, "is_bug_line": false, "sus_score": 0.11785113019775793, "per_token_entropy": [4.6796875, 4.9375, 8.5234375, 8.0546875, 1.32421875, 0.11468505859375, 1.966796875, 5.03515625, 0.003414154052734375, 0.03448486328125, 0.00421905517578125, 0.00208282470703125, 0.00037598609924316406, 7.891654968261719e-05, 0.7783203125], "tokens": [264, 442, 786, 2140, 26, 96, 30, 36143, 81, 6383, 81, 2883, 54, 31198, 293]}
{"line_number": 1239, "line_type": "generated", "code": "\n    }\n  }\n\n  static final MayBeStringResultPredicate MAY_BE_STRING_RESULT_PREDICATE =\n      new MayBeStringResultPredicate();\n\n  /**\n   * @return Whether the result of node evaluation may be a string\n   */\n  static", "entropy": 0.06201171875, "is_bug_line": false, "sus_score": 0.11785113019775793, "per_token_entropy": [0.053741455078125, 0.00616455078125, 0.031494140625, 0.0006823539733886719, 0.02545166015625, 0.1195068359375, 0.1361083984375, 0.0142669677734375, 8.58306884765625e-06, 6.115436553955078e-05, 0.0003838539123535156, 7.87973403930664e-05, 0.01445770263671875, 0.6572265625, 0.00028395652770996094, 0.0001423358917236328, 0.0008211135864257812, 0.0042266845703125, 0.039642333984375, 0.01361083984375, 0.0005207061767578125, 0.0015153884887695312, 0.0004935264587402344, 0.01119232177734375, 0.0191192626953125, 0.00028395652770996094, 0.00029921531677246094, 5.960464477539062e-07, 3.6716461181640625e-05, 1.430511474609375e-05, 2.4080276489257812e-05, 0.00048422813415527344, 0.030609130859375, 0.305908203125, 0.024017333984375, 0.00026106834411621094, 0.1290283203125, 0.015838623046875, 0.056884765625, 0.1478271484375, 0.1265869140625, 0.0310211181640625, 0.135986328125, 0.0283355712890625, 0.409912109375, 0.0357666015625, 0.056121826171875, 0.06494140625, 0.41796875, 0.0411376953125, 0.004528045654296875, 0.01044464111328125], "tokens": [284, 320, 334, 320, 719, 907, 1158, 10709, 1467, 652, 1394, 12688, 44491, 81, 4657, 81, 5203, 81, 6383, 81, 2883, 54, 31198, 280, 397, 537, 10709, 1467, 652, 1394, 12688, 473, 719, 1022, 664, 319, 477, 601, 14071, 322, 1056, 432, 1541, 11903, 1631, 526, 312, 802, 664, 569, 334, 907]}
{"line_number": 1243, "line_type": "original", "code": "    switch (n.getType()) {", "entropy": 1.640625, "is_bug_line": true, "sus_score": 0.11785113019775793, "per_token_entropy": [4.40625, 8.421875, 0.0428466796875, 0.1473388671875, 0.003265380859375, 0.0019931793212890625, 0.0007224082946777344, 0.0972900390625], "tokens": [264, 3578, 308, 96, 32, 10272, 1157, 301]}
{"line_number": 1243, "line_type": "generated", "code": "\n      return false;\n    }\n  }\n\n  static boolean mayBeString(Node n) {\n    return valueCheck(n, MAY_BE_STRING_PREDICATE);\n  }\n\n  static boolean mayBeStringHelper(Node n) {", "entropy": 0.105712890625, "is_bug_line": true, "sus_score": 0.11785113019775793, "per_token_entropy": [0.30712890625, 1.7294921875, 0.9326171875, 0.005924224853515625, 0.27783203125, 0.0295257568359375, 0.266845703125, 0.01508331298828125, 0.18212890625, 0.34619140625, 0.2200927734375, 0.1103515625, 0.0038852691650390625, 0.0041656494140625, 0.345703125, 0.0012531280517578125, 0.00616455078125, 0.0003933906555175781, 0.0005784034729003906, 0.1986083984375, 0.0771484375, 0.05609130859375, 0.0011272430419921875, 0.0030536651611328125, 0.0034351348876953125, 0.0006251335144042969, 0.00992584228515625, 0.0023250579833984375, 2.86102294921875e-05, 1.3470649719238281e-05, 5.257129669189453e-05, 6.42538070678711e-05, 0.0010461807250976562, 4.684925079345703e-05, 4.6253204345703125e-05, 0.005123138427734375, 0.0067596435546875, 0.00017523765563964844, 0.027374267578125, 0.03204345703125, 0.01396942138671875, 0.026580810546875, 0.001590728759765625, 0.0020923614501953125, 0.01953125, 0.0007319450378417969, 0.0008893013000488281, 0.0028743743896484375, 0.0005202293395996094, 0.00412750244140625], "tokens": [397, 442, 901, 45, 284, 320, 334, 320, 719, 907, 1905, 1631, 1467, 652, 26, 1212, 310, 27, 301, 284, 442, 786, 2140, 26, 96, 30, 44491, 81, 4657, 81, 5203, 81, 2883, 54, 31198, 293, 334, 320, 719, 907, 1905, 1631, 1467, 652, 2762, 26, 1212, 310, 27, 301]}
{"line_number": 2880, "line_type": "original", "code": "        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)", "entropy": 1.859375, "is_bug_line": false, "sus_score": 0.11470786693528087, "per_token_entropy": [7.421875, 1.0830078125, 6.85546875, 0.0271148681640625, 0.00884246826171875, 0.0178070068359375, 0.30859375, 0.2181396484375, 1.0546875, 0.002979278564453125, 7.6328125, 1.810546875, 0.320556640625, 0.03173828125, 1.0888671875], "tokens": [351, 442, 43992, 40608, 882, 26, 853, 32, 25657, 2931, 922, 23017, 1026, 28363, 27]}
{"line_number": 2880, "line_type": "generated", "code": "\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean callHasLocalResult(Node call) {\n    Preconditions.checkArgument(call.getType() == Token", "entropy": 0.2325439453125, "is_bug_line": false, "sus_score": 0.11470786693528087, "per_token_entropy": [0.71337890625, 0.48876953125, 0.47607421875, 0.33544921875, 0.2176513671875, 0.39501953125, 0.74853515625, 0.351806640625, 0.74658203125, 0.01580810546875, 0.2291259765625, 0.310791015625, 0.4912109375, 0.059417724609375, 0.135498046875, 0.3056640625, 0.9296875, 0.0826416015625, 0.04486083984375, 0.004703521728515625, 0.057769775390625, 0.038543701171875, 0.0261383056640625, 0.1419677734375, 0.00757598876953125, 0.1640625, 0.1356201171875, 0.033660888671875, 0.049407958984375, 0.253173828125, 0.013519287109375, 0.9609375, 0.0108489990234375, 0.00434112548828125, 0.0003304481506347656, 0.00173187255859375, 0.00281524658203125, 0.50390625, 0.14111328125, 0.0015277862548828125, 0.10650634765625, 1.6220703125, 0.0002875328063964844, 0.00311279296875, 0.2393798828125, 0.00223541259765625, 0.2109375, 0.0034465789794921875, 0.267578125, 0.0022792816162109375, 0.00045871734619140625, 0.0003879070281982422], "tokens": [664, 319, 477, 601, 14071, 322, 1541, 438, 8967, 372, 526, 312, 786, 688, 438, 646, 312, 4121, 664, 319, 262, 11127, 322, 6101, 4576, 32, 664, 569, 334, 907, 1905, 1476, 3993, 3325, 1394, 26, 1212, 1476, 27, 301, 284, 40596, 32, 1553, 3484, 26, 1851, 32, 10272, 346, 610, 6512]}
{"line_number": 2877, "line_type": "original", "code": "        return evaluatesToLocalValue(value.getFirstChild(), locals)", "entropy": 1.1806640625, "is_bug_line": false, "sus_score": 0.11180339887498948, "per_token_entropy": [5.4375, 1.0771484375, 5.5234375, 0.004375457763671875, 0.0038661956787109375, 0.01241302490234375, 0.185546875, 0.10638427734375, 1.171875, 0.0002543926239013672, 0.0170745849609375, 0.01488494873046875, 1.78515625], "tokens": [351, 442, 43992, 40608, 882, 26, 853, 32, 25657, 2931, 1026, 28363, 27]}
{"line_number": 2877, "line_type": "generated", "code": "\n  }\n\n  /**\n   * @return Whether the node is known to be a value that is not referenced\n   * elsewhere.\n   */\n  static boolean isImmutableValue(Node value) {\n    return isImmutableValue(value, Predicates.<Node>always", "entropy": 0.224609375, "is_bug_line": false, "sus_score": 0.11180339887498948, "per_token_entropy": [0.51318359375, 0.06353759765625, 0.1865234375, 0.46044921875, 0.07293701171875, 0.0006365776062011719, 0.623046875, 0.2017822265625, 0.1624755859375, 0.352294921875, 0.81982421875, 0.33935546875, 0.66259765625, 0.013824462890625, 0.1689453125, 0.4111328125, 0.55712890625, 0.0704345703125, 0.1820068359375, 0.428955078125, 0.40283203125, 0.04296875, 0.0008220672607421875, 0.90380859375, 0.21044921875, 0.039276123046875, 0.020263671875, 0.0127716064453125, 0.09039306640625, 0.00858306884765625, 0.29345703125, 0.33154296875, 0.01390838623046875, 0.001873016357421875, 0.001186370849609375, 0.373291015625, 0.0019626617431640625, 0.0005030632019042969, 0.01320648193359375, 1.3349609375, 0.7099609375, 0.1942138671875, 0.06561279296875, 0.0183868408203125, 0.025299072265625, 0.006290435791015625, 0.2607421875, 2.7418136596679688e-06, 0.006099700927734375, 0.002101898193359375, 3.2782554626464844e-05, 0.0029430389404296875], "tokens": [334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 8967, 372, 526, 312, 786, 688, 438, 646, 15167, 664, 319, 33289, 32, 664, 569, 334, 907, 1905, 438, 15027, 882, 26, 1212, 786, 27, 301, 284, 442, 438, 15027, 882, 26, 853, 30, 14407, 29770, 5700, 1212, 48, 12149]}
{"line_number": 1158, "line_type": "original", "code": "    switch (n.getType()) {", "entropy": 1.521484375, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [5.890625, 6.13671875, 0.039306640625, 0.0640869140625, 0.0014677047729492188, 0.026611328125, 0.0010938644409179688, 0.015411376953125], "tokens": [264, 3578, 308, 96, 32, 10272, 1157, 301]}
{"line_number": 1158, "line_type": "generated", "code": "\n        case Token.EQ:\n        case Token.NE:\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.INSTANCEOF:\n        case Token.IN:\n        case Token", "entropy": 0.1533203125, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [0.380615234375, 0.60595703125, 0.0006618499755859375, 0.0004901885986328125, 2.373046875, 0.0621337890625, 0.0321044921875, 0.00023746490478515625, 2.6941299438476562e-05, 1.823902130126953e-05, 0.1844482421875, 7.712841033935547e-05, 0.0218353271484375, 0.00047469139099121094, 5.733966827392578e-05, 2.777576446533203e-05, 0.69677734375, 0.00010001659393310547, 0.0010585784912109375, 2.765655517578125e-05, 4.887580871582031e-06, 5.173683166503906e-05, 0.2734375, 2.1696090698242188e-05, 0.0015659332275390625, 0.0001329183578491211, 1.0609626770019531e-05, 2.014636993408203e-05, 0.0240020751953125, 0.00013196468353271484, 0.0005021095275878906, 1.9550323486328125e-05, 4.291534423828125e-06, 3.3974647521972656e-05, 0.00396728515625, 0.00010061264038085938, 0.41162109375, 0.00957489013671875, 5.447864532470703e-05, 0.000469207763671875, 1.447265625, 0.00025773048400878906, 0.00010454654693603516, 0.453857421875, 0.007778167724609375, 0.00010657310485839844, 0.0002663135528564453, 0.26708984375, 0.0011425018310546875, 0.6962890625, 0.01296234130859375, 0.00011706352233886719], "tokens": [291, 1135, 6512, 32, 2697, 44, 291, 1135, 6512, 32, 3567, 44, 291, 1135, 6512, 32, 11704, 44, 291, 1135, 6512, 32, 11502, 44, 291, 1135, 6512, 32, 815, 44, 291, 1135, 6512, 32, 3055, 44, 291, 1135, 6512, 32, 12452, 2109, 44, 291, 1135, 6512, 32, 521, 44, 291, 1135, 6512]}
{"line_number": 1170, "line_type": "original", "code": "        return p.apply(n);", "entropy": 2.72265625, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [4.16796875, 0.4921875, 11.90625, 0.2052001953125, 4.53125, 0.033111572265625, 0.2276611328125, 0.218017578125], "tokens": [351, 442, 298, 32, 4699, 26, 96, 293]}
{"line_number": 1170, "line_type": "generated", "code": "\n    }\n    return false;\n  }\n\n  static boolean mayBeString(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n       ", "entropy": 0.1507568359375, "is_bug_line": false, "sus_score": 0.1091089451179962, "per_token_entropy": [1.4521484375, 0.0111846923828125, 0.62060546875, 0.10589599609375, 0.0219573974609375, 0.0007700920104980469, 0.018310546875, 0.0008296966552734375, 0.15283203125, 0.8232421875, 0.2142333984375, 0.34228515625, 0.0165557861328125, 0.0220489501953125, 0.007480621337890625, 0.0006923675537109375, 0.033660888671875, 0.0008473396301269531, 0.0004668235778808594, 0.037567138671875, 0.908203125, 0.0208587646484375, 0.0019063949584960938, 0.00011324882507324219, 0.00015056133270263672, 6.890296936035156e-05, 0.00038242340087890625, 0.0458984375, 0.009674072265625, 0.00016939640045166016, 6.198883056640625e-06, 0.599609375, 0.0140838623046875, 0.63232421875, 0.0180206298828125, 0.00897979736328125, 0.00023186206817626953, 0.1553955078125, 0.05096435546875, 4.124641418457031e-05, 1.6570091247558594e-05, 1.00390625, 5.2928924560546875e-05, 0.048309326171875, 0.37548828125, 0.03924560546875, 0.0008025169372558594, 0.003116607666015625, 5.5670738220214844e-05, 0.00015807151794433594, 0.0014190673828125, 0.01554107666015625], "tokens": [284, 320, 284, 442, 901, 45, 334, 320, 719, 907, 1905, 1631, 1467, 652, 26, 1212, 310, 27, 301, 284, 3578, 308, 96, 32, 10272, 1157, 301, 397, 1135, 6512, 32, 5203, 44, 291, 442, 861, 45, 397, 1135, 6512, 32, 2474, 44, 291, 892, 636, 280, 310, 32, 7069, 473, 291]}
{"line_number": 1488, "line_type": "original", "code": "    return n.getType() == Token.STRING;", "entropy": 2.138671875, "is_bug_line": false, "sus_score": 0.10660035817780521, "per_token_entropy": [3.63671875, 4.17578125, 5.3125, 0.06964111328125, 0.78857421875, 0.2271728515625, 0.15966796875, 0.049407958984375, 0.031829833984375, 8.765625, 0.294677734375], "tokens": [264, 442, 310, 32, 10272, 346, 610, 6512, 32, 5203, 45]}
{"line_number": 1488, "line_type": "generated", "code": "\n    }\n    return false;\n  }\n\n  /**\n   * Determines whether the given node is a FOR node.\n   */\n  static boolean isFor(Node n) {\n    return n.getType() == Token.FOR;\n  }\n\n  /**\n   * Determines", "entropy": 0.1407470703125, "is_bug_line": false, "sus_score": 0.10660035817780521, "per_token_entropy": [0.80810546875, 0.01171875, 0.1141357421875, 0.0308380126953125, 0.0015497207641601562, 0.0003685951232910156, 0.0094451904296875, 0.0009407997131347656, 0.17138671875, 0.0810546875, 0.0218658447265625, 0.0004818439483642578, 0.6796875, 0.022674560546875, 0.1044921875, 0.060211181640625, 0.095458984375, 0.1517333984375, 0.2281494140625, 2.134765625, 1.328125, 0.35302734375, 0.015838623046875, 0.0267333984375, 0.0004744529724121094, 0.01641845703125, 0.0006651878356933594, 0.0007662773132324219, 0.0102996826171875, 0.36376953125, 0.00036215782165527344, 0.0035381317138671875, 0.0005087852478027344, 0.0003204345703125, 0.019256591796875, 0.04150390625, 0.018096923828125, 0.0013027191162109375, 0.0016765594482421875, 0.00011944770812988281, 0.00012671947479248047, 0.00011658668518066406, 0.00012314319610595703, 9.906291961669922e-05, 0.11383056640625, 0.0099334716796875, 0.00020182132720947266, 0.0333251953125, 0.03253173828125, 0.00946044921875, 5.507469177246094e-05, 0.1868896484375], "tokens": [284, 320, 284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 34450, 4946, 322, 2702, 1541, 438, 312, 4786, 1541, 32, 664, 569, 334, 907, 1905, 438, 1562, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 7321, 45, 334, 320, 719, 1022, 664, 319, 34450]}
{"line_number": 2896, "line_type": "original", "code": "        return locals.apply(value);", "entropy": 2.333984375, "is_bug_line": false, "sus_score": 0.09805806756909202, "per_token_entropy": [7.70703125, 1.28515625, 8.28125, 0.10211181640625, 0.1292724609375, 0.003200531005859375, 0.5654296875, 0.59375], "tokens": [351, 442, 28363, 32, 4699, 26, 853, 293]}
{"line_number": 2896, "line_type": "generated", "code": "\n   */\n  private static Node getNthParameter(Node function, int index) {\n    Node call = function.getFirstChild();\n    Node parameter = call.getNext();\n    while (index!= 0 && parameter!= null) {\n      parameter = parameter", "entropy": 0.2449951171875, "is_bug_line": false, "sus_score": 0.09805806756909202, "per_token_entropy": [0.39892578125, 0.321533203125, 0.0166015625, 0.34814453125, 0.0179443359375, 0.0204620361328125, 0.01233673095703125, 0.09722900390625, 0.0010499954223632812, 0.73779296875, 0.0188140869140625, 0.06817626953125, 0.21484375, 0.04193115234375, 0.00382232666015625, 0.0391845703125, 0.007965087890625, 0.00402069091796875, 0.054168701171875, 0.9150390625, 2.263671875, 0.25732421875, 0.751953125, 0.142822265625, 1.5341796875, 0.0012989044189453125, 0.06280517578125, 0.047760009765625, 1.0244140625, 1.53125, 0.1632080078125, 0.40283203125, 0.018463134765625, 0.3837890625, 0.023101806640625, 0.1337890625, 0.2509765625, 0.01184844970703125, 0.109375, 0.129150390625, 0.0010328292846679688, 0.0012922286987304688, 0.05987548828125, 0.00818634033203125, 0.00685882568359375, 0.006229400634765625, 0.018157958984375, 0.0011091232299804688, 0.007781982421875, 0.03887939453125, 0.0003750324249267578, 0.0054168701171875], "tokens": [664, 569, 334, 945, 907, 4004, 622, 64, 349, 3012, 26, 1212, 667, 30, 629, 1650, 27, 301, 284, 4004, 1476, 280, 667, 32, 25657, 2931, 473, 284, 4004, 3395, 280, 1476, 32, 23017, 473, 284, 2218, 308, 1055, 863, 225, 34, 962, 3395, 863, 744, 27, 301, 397, 3395, 280, 3395]}
{"line_number": 972, "line_type": "original", "code": "    Preconditions.checkState(n.getType() == Token.NEW);", "entropy": 1.080078125, "is_bug_line": false, "sus_score": 0.08451542547285165, "per_token_entropy": [2.712890625, 5.16015625, 0.0015316009521484375, 0.0545654296875, 0.311279296875, 0.108154296875, 0.83349609375, 0.0943603515625, 0.410400390625, 0.004749298095703125, 0.06561279296875, 0.0163421630859375, 0.0002651214599609375, 6.34375, 0.09234619140625], "tokens": [264, 40596, 32, 1553, 1078, 26, 96, 32, 10272, 346, 610, 6512, 32, 11356, 293]}
{"line_number": 972, "line_type": "generated", "code": "\n   */\n  static boolean canBeSideEffected(Node n, Set<String> knownConstants) {\n    Preconditions.checkArgument(\n        n.getType() == Token.CALL || n.getType() == Token.NEW);\n\n    if (n.", "entropy": 0.240478515625, "is_bug_line": false, "sus_score": 0.08451542547285165, "per_token_entropy": [0.479248046875, 0.5234375, 0.00957489013671875, 0.056549072265625, 0.001834869384765625, 0.002933502197265625, 0.0005803108215332031, 0.0012254714965820312, 3.981590270996094e-05, 1.7881393432617188e-06, 0.0025615692138671875, 0.0289306640625, 0.0009369850158691406, 0.00031685829162597656, 0.080078125, 0.00296783447265625, 0.0013561248779296875, 6.4849853515625e-05, 0.005107879638671875, 0.0293121337890625, 0.0098724365234375, 0.00787353515625, 0.1865234375, 0.96240234375, 0.00035309791564941406, 0.043609619140625, 0.88232421875, 0.058563232421875, 2.013671875, 0.951171875, 0.07659912109375, 0.546875, 0.00365447998046875, 1.1376953125, 0.0028362274169921875, 0.00011086463928222656, 0.951171875, 0.1153564453125, 0.15234375, 0.00037217140197753906, 0.0220794677734375, 0.0006198883056640625, 0.0003094673156738281, 0.0004608631134033203, 2.002716064453125e-05, 0.0662841796875, 0.2423095703125, 0.6181640625, 1.029296875, 0.1524658203125, 1.0439453125, 0.003765106201171875], "tokens": [664, 569, 334, 907, 1905, 883, 1467, 7427, 33502, 1558, 26, 1212, 310, 30, 1756, 46, 652, 48, 8967, 5229, 27, 301, 284, 40596, 32, 1553, 3484, 26, 291, 310, 32, 10272, 346, 610, 6512, 32, 5038, 1276, 310, 32, 10272, 346, 610, 6512, 32, 11356, 293, 446, 415, 308, 96, 32]}
