{"line_number": 124, "line_type": "original", "code": "      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();", "entropy": 1.6279296875, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [4.0078125, 11.40625, 1.169921875, 0.019989013671875, 0.0027599334716796875, 5.19140625, 0.0024013519287109375, 6.008148193359375e-05, 0.039825439453125, 2.28125, 0.01934814453125, 0.00013887882232666016, 1.8477439880371094e-05, 3.4928321838378906e-05, 0.27978515625], "tokens": [647, 6400, 22050, 4109, 10189, 316, 21140, 265, 280, 537, 6400, 22050, 4109, 10189, 473]}
{"line_number": 124, "line_type": "generated", "code": "\n      if (n.isAssign() && n.getFirstChild().isGetProp()) {\n        visitAssignGetProp(n.getFirstChild());\n      }\n    }\n\n    private void visitAssignGetProp(Node getprop) {\n      Node obj = get", "entropy": 0.349365234375, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [0.64794921875, 0.387939453125, 0.10626220703125, 0.11773681640625, 0.0036258697509765625, 0.0982666015625, 1.08203125, 0.9453125, 0.4111328125, 0.2286376953125, 0.00015294551849365234, 0.7392578125, 0.007022857666015625, 0.0084686279296875, 0.08343505859375, 0.52001953125, 0.051025390625, 0.399169921875, 0.002643585205078125, 0.047027587890625, 2.26953125, 0.307373046875, 0.638671875, 0.042236328125, 0.020843505859375, 1.107421875, 1.75390625, 0.2333984375, 0.0032749176025390625, 0.654296875, 0.056610107421875, 0.00015723705291748047, 0.433349609375, 0.0005903244018554688, 0.43115234375, 0.468017578125, 0.02423095703125, 0.034698486328125, 0.001323699951171875, 0.00045371055603027344, 0.0001989603042602539, 0.0006451606750488281, 0.01036834716796875, 0.5927734375, 0.172119140625, 0.1165771484375, 0.0004107952117919922, 0.10333251953125, 0.6513671875, 2.013671875, 0.1383056640625, 0.01113128662109375], "tokens": [397, 415, 308, 96, 32, 297, 9079, 346, 962, 310, 32, 25657, 2931, 922, 297, 936, 6567, 1157, 301, 291, 7725, 9079, 936, 6567, 26, 96, 32, 25657, 2931, 1035, 397, 320, 284, 320, 446, 945, 763, 7725, 9079, 936, 6567, 26, 1212, 622, 4641, 27, 301, 397, 4004, 2830, 280, 622]}
{"line_number": 125, "line_type": "original", "code": "      NodeTraversal t = new NodeTraversal(compiler, renamer);", "entropy": 2.208984375, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [4.85546875, 4.32421875, 7.68359375, 4.421875, 0.712890625, 0.450439453125, 0.0038433074951171875, 0.00043773651123046875, 0.01629638671875, 0.328125, 0.292724609375, 9.5546875, 0.451904296875, 0.0006694793701171875, 0.043365478515625], "tokens": [647, 4004, 35699, 273, 280, 537, 4004, 35699, 26, 10199, 30, 316, 21140, 265, 293]}
{"line_number": 125, "line_type": "generated", "code": "\n      }\n    }\n  }\n\n  /**\n   * Renames variables and parameters that are declared in the same scope.\n   *\n   * <p>The goal of this pass is to make sure that all variables are uniquely\n   * named, even if they are", "entropy": 0.828125, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [1.0283203125, 0.008697509765625, 0.1590576171875, 0.0011577606201171875, 0.252197265625, 0.0029735565185546875, 0.2196044921875, 0.5234375, 0.0286712646484375, 0.0001779794692993164, 2.712890625, 0.63916015625, 2.26953125, 1.923828125, 1.4384765625, 1.9853515625, 0.99755859375, 0.74267578125, 1.5830078125, 0.91552734375, 0.280517578125, 0.30810546875, 0.923828125, 0.173828125, 0.428955078125, 1.1689453125, 0.010955810546875, 0.6630859375, 0.05230712890625, 0.01099395751953125, 2.68359375, 2.7421875, 0.64404296875, 0.1497802734375, 0.397216796875, 0.01143646240234375, 0.042388916015625, 2.234375, 1.373046875, 0.1697998046875, 1.708984375, 0.859375, 2.404296875, 1.83984375, 0.06634521484375, 0.0003082752227783203, 0.21484375, 1.95703125, 1.0771484375, 0.389892578125, 0.389404296875, 0.267333984375], "tokens": [397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 26655, 101, 4886, 461, 3377, 688, 884, 17103, 328, 322, 2432, 4576, 32, 664, 319, 664, 319, 333, 98, 48, 1318, 12260, 432, 458, 3097, 438, 372, 1930, 3654, 688, 1169, 4886, 884, 43699, 664, 319, 8189, 30, 4444, 415, 2953, 884]}
{"line_number": 126, "line_type": "original", "code": "      t.traverseRoots(externs, root);", "entropy": 2.95703125, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [4.59375, 4.73046875, 0.01226043701171875, 7.6796875, 9.4609375, 0.090087890625, 5.82421875, 0.0071563720703125, 0.006732940673828125, 0.11102294921875, 0.01788330078125], "tokens": [647, 273, 32, 33261, 46394, 26, 4318, 101, 30, 3051, 293]}
{"line_number": 126, "line_type": "generated", "code": "\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Normalizes statements, replacing them with equivalent equivalents\n   * that are easier to process.\n   */\n  private static class NormalizeStatements extends AbstractPostOrderCallback {\n    private final AbstractCompiler compiler", "entropy": 0.70849609375, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [1.5732421875, 1.052734375, 0.423583984375, 0.024200439453125, 0.2344970703125, 0.00284576416015625, 0.142822265625, 0.0015897750854492188, 0.26318359375, 0.0037822723388671875, 0.2100830078125, 0.51220703125, 0.0283050537109375, 0.0001710653305053711, 3.3828125, 0.0212249755859375, 1.6904296875, 3.154296875, 3.2265625, 2.23828125, 0.0994873046875, 0.8994140625, 3.26953125, 0.370361328125, 2.046875, 0.05853271484375, 1.36328125, 1.4248046875, 1.166015625, 0.1707763671875, 1.54296875, 0.5009765625, 0.333740234375, 0.62548828125, 0.003589630126953125, 1.7041015625, 0.748046875, 0.09307861328125, 0.0010051727294921875, 0.0003314018249511719, 0.65966796875, 0.105712890625, 0.120849609375, 4.947185516357422e-05, 1.430511474609375e-05, 0.81298828125, 0.1583251953125, 0.1641845703125, 0.1495361328125, 0.056182861328125, 0.00046539306640625, 0.0002105236053466797], "tokens": [616, 320, 291, 320, 397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 13574, 5052, 15252, 30, 27949, 3026, 623, 13741, 13741, 101, 664, 319, 688, 884, 12087, 372, 2164, 32, 664, 569, 334, 945, 907, 443, 40249, 26527, 2026, 7400, 3160, 2871, 3296, 301, 284, 945, 1158, 7400, 8115, 8980]}
{"line_number": 142, "line_type": "original", "code": "    removeDuplicateDeclarations(externs, root);", "entropy": 2.98046875, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [4.90625, 9.875, 3.3125, 0.44189453125, 0.1572265625, 10.75, 0.005496978759765625, 0.0186767578125, 0.2320556640625, 0.116455078125], "tokens": [264, 3345, 18017, 34283, 26, 4318, 101, 30, 3051, 293]}
{"line_number": 142, "line_type": "generated", "code": "\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n          reportCodeChange(\n              \"Changed \" + n + \" to be constant: \" + info);\n        } else if (!shouldBeConstant && isMarkedConstant) {", "entropy": 0.344970703125, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [0.29833984375, 1.2265625, 0.0003402233123779297, 0.61962890625, 9.131431579589844e-05, 0.0008254051208496094, 0.0004334449768066406, 0.004444122314453125, 1.1086463928222656e-05, 0.0006012916564941406, 1.0728836059570312e-05, 0.0005121231079101562, 3.504753112792969e-05, 0.0005903244018554688, 0.00321197509765625, 0.0482177734375, 0.0008158683776855469, 0.261962890625, 0.41552734375, 0.0357666015625, 0.0004360675811767578, 1.11328125, 0.213134765625, 0.1834716796875, 3.50390625, 1.3154296875, 0.018035888671875, 0.54150390625, 1.5771484375, 0.06634521484375, 0.315185546875, 0.72900390625, 0.8935546875, 2.068359375, 0.2183837890625, 0.051300048828125, 0.61865234375, 0.7119140625, 0.1165771484375, 5.793571472167969e-05, 0.23583984375, 0.0024566650390625, 0.16796875, 0.0012311935424804688, 5.0902366638183594e-05, 0.0064697265625, 0.0042724609375, 1.0132789611816406e-05, 3.2186508178710938e-06, 0.005374908447265625, 0.00084686279296875], "tokens": [616, 310, 32, 524, 4709, 6567, 26, 1212, 32, 1296, 81, 21170, 81, 2474, 30, 861, 293, 616, 3639, 1227, 1791, 26, 1090, 313, 3650, 313, 474, 310, 474, 313, 372, 526, 8082, 44, 313, 474, 3099, 293, 291, 320, 813, 415, 1429, 33357, 5465, 962, 438, 44846, 5465, 27, 301]}
{"line_number": 629, "line_type": "original", "code": "    Callback tickler = new ScopeTicklingCallback();", "entropy": 3.861328125, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [3.830078125, 14.1796875, 7.21875, 0.1446533203125, 0.69091796875, 1.0849609375, 6.61328125, 2.18359375, 4.98046875, 0.0086669921875, 1.5478515625], "tokens": [264, 14720, 12904, 1180, 280, 537, 22148, 10400, 2920, 3296, 473]}
{"line_number": 629, "line_type": "generated", "code": "\n        throw new IllegalStateException(\n            \"Catch expression variable redeclaration: \" + n.toStringTree());\n      }\n\n      if (v!= null && v.isParam() && parent.getType() == Token.VAR) {\n        // Duplicate parameter name.\n       ", "entropy": 0.646484375, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [0.80859375, 1.6455078125, 0.07537841796875, 0.310791015625, 0.44970703125, 0.1376953125, 0.048187255859375, 2.44140625, 1.5205078125, 0.73828125, 0.415283203125, 0.38671875, 1.1201171875, 0.0251312255859375, 0.08563232421875, 1.6103515625, 0.422607421875, 1.1962890625, 0.00829315185546875, 0.056396484375, 0.12127685546875, 8.857250213623047e-05, 0.340087890625, 0.76904296875, 0.1307373046875, 1.1328125, 0.352783203125, 0.00167083740234375, 0.39794921875, 0.7333984375, 0.025299072265625, 0.486328125, 1.7734375, 1.2724609375, 0.16650390625, 1.138671875, 0.060546875, 0.9033203125, 0.0013294219970703125, 0.2607421875, 0.0017833709716796875, 2.4557113647460938e-05, 2.09765625, 0.21826171875, 0.0006017684936523438, 0.03253173828125, 0.279052734375, 3.5390625, 0.70947265625, 1.765625, 1.080078125, 0.329833984375], "tokens": [291, 1422, 537, 21665, 26, 324, 313, 20377, 6101, 2677, 316, 24050, 44, 313, 474, 310, 32, 3108, 3350, 1035, 397, 320, 1687, 415, 308, 104, 863, 744, 962, 354, 32, 297, 3180, 346, 962, 2935, 32, 10272, 346, 610, 6512, 32, 7416, 27, 301, 291, 434, 30095, 3395, 636, 32, 291]}
{"line_number": 630, "line_type": "original", "code": "    ScopeCreator scopeCreator =  new SyntacticScopeCreator(", "entropy": 2.1015625, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [4.875, 6.90625, 5.1875, 0.9912109375, 0.01580810546875, 0.264404296875, 7.40625, 1.3505859375, 0.238037109375, 0.0001188516616821289, 0.0006046295166015625, 0.0012674331665039062, 0.09014892578125], "tokens": [264, 22148, 11143, 4576, 11143, 280, 225, 537, 40261, 25023, 5504, 11143, 26]}
{"line_number": 630, "line_type": "generated", "code": "\n        // TODO(johnlenz): remove this check after we have support for \"with\"\n        // expressions.\n        if (input.isExtern()) {\n          throw new IllegalStateException(\"Invalid duplicate catch variable\");\n        }\n      }\n\n      if (parent.", "entropy": 0.734375, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [0.72412109375, 2.30078125, 1.4814453125, 0.032806396484375, 0.2279052734375, 0.00560760498046875, 0.001529693603515625, 0.059967041015625, 2.69921875, 0.36279296875, 1.7255859375, 2.021484375, 1.16015625, 1.255859375, 1.9853515625, 0.2271728515625, 1.3720703125, 0.00814056396484375, 0.29833984375, 0.1661376953125, 0.8369140625, 0.53369140625, 0.316162109375, 0.11346435546875, 1.5693359375, 0.32421875, 2.546875, 0.0516357421875, 0.046295166015625, 0.048797607421875, 1.1920928955078125e-07, 0.290771484375, 0.00494384765625, 0.050079345703125, 1.5087890625, 0.069091796875, 0.296142578125, 1.29296875, 2.953125, 0.7236328125, 0.4814453125, 1.0166015625, 1.783203125, 0.01155853271484375, 5.996227264404297e-05, 0.6904296875, 0.00017642974853515625, 0.4384765625, 0.8701171875, 0.1412353515625, 1.0185546875, 0.0386962890625], "tokens": [291, 434, 4296, 26, 25172, 1657, 108, 711, 3345, 458, 1505, 2685, 996, 1159, 2193, 436, 313, 1793, 20, 291, 434, 15866, 32, 291, 415, 308, 1131, 32, 297, 571, 900, 1157, 301, 616, 1422, 537, 21665, 440, 3817, 12843, 2368, 2677, 724, 291, 320, 397, 320, 1687, 415, 308, 2544, 32]}
{"line_number": 632, "line_type": "original", "code": "    NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);", "entropy": 1.65625, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [4.73046875, 5.9140625, 4.92578125, 4.53125, 0.03326416015625, 0.183837890625, 0.00479888916015625, 0.0005407333374023438, 0.00882720947265625, 0.43896484375, 0.1307373046875, 3.349609375, 0.0128631591796875, 2.6015625, 1.181640625, 0.0540771484375, 0.059234619140625], "tokens": [264, 4004, 35699, 273, 280, 537, 4004, 35699, 26, 10199, 30, 12904, 1180, 30, 4576, 11143, 293]}
{"line_number": 632, "line_type": "generated", "code": "\n        throw new IllegalStateException(\n            \"Illegal duplicate declaration of catch variable: \" + name);\n      }\n\n      if (v!= null && v.isParam()) {\n        // If the variable is a parameter then it must be the first\n        // reference to the", "entropy": 0.7412109375, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [0.58935546875, 1.2119140625, 0.07928466796875, 0.3115234375, 0.515625, 0.1741943359375, 0.0487060546875, 2.07421875, 1.8564453125, 1.2529296875, 0.66552734375, 0.9560546875, 0.7080078125, 0.93798828125, 0.0286712646484375, 0.1134033203125, 0.444580078125, 0.1500244140625, 0.1123046875, 0.00010466575622558594, 0.270263671875, 0.7451171875, 0.1395263671875, 1.2646484375, 0.292724609375, 0.0014677047729492188, 0.376708984375, 0.771484375, 0.02777099609375, 0.468505859375, 1.8759765625, 0.3671875, 0.0004639625549316406, 0.02593994140625, 0.36572265625, 2.78125, 0.9189453125, 1.400390625, 0.458740234375, 0.4755859375, 0.416748046875, 2.181640625, 1.291015625, 1.6142578125, 0.58203125, 2.17578125, 1.3291015625, 0.387939453125, 0.0005679130554199219, 2.20703125, 0.400146484375, 0.6884765625], "tokens": [291, 1422, 537, 21665, 26, 324, 313, 15095, 12843, 13317, 432, 2368, 2677, 44, 313, 474, 636, 293, 397, 320, 1687, 415, 308, 104, 863, 744, 962, 354, 32, 297, 3180, 1157, 301, 291, 434, 1670, 322, 2677, 438, 312, 3395, 1615, 561, 2298, 526, 322, 1932, 291, 434, 4121, 372, 322]}
{"line_number": 633, "line_type": "original", "code": "    t.traverseRoots(externs, root);", "entropy": 2.6171875, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [3.4296875, 8.6640625, 0.0293731689453125, 7.51171875, 7.6640625, 0.034088134765625, 1.0986328125, 0.00959014892578125, 0.08135986328125, 0.2349853515625, 0.033050537109375], "tokens": [264, 273, 32, 33261, 46394, 26, 4318, 101, 30, 3051, 293]}
{"line_number": 633, "line_type": "generated", "code": "\n      }\n\n      // If name is \"arguments\", Var maybe null.\n      if (v!= null && v.getParentNode().getType() == Token.FUNCTION) {\n        // If this is a function declaration, then it's ok to redeclare\n        //", "entropy": 0.513671875, "is_bug_line": false, "sus_score": 0.010564428184106456, "per_token_entropy": [1.326171875, 0.0200653076171875, 0.46484375, 1.0537109375, 1.9794921875, 1.119140625, 0.04443359375, 0.0732421875, 0.442138671875, 0.0709228515625, 0.056304931640625, 0.0535888671875, 0.0009160041809082031, 0.0149993896484375, 0.0305633544921875, 0.07818603515625, 0.039520263671875, 0.10125732421875, 0.07403564453125, 0.0007281303405761719, 0.1190185546875, 0.1951904296875, 0.0018873214721679688, 0.322509765625, 0.001087188720703125, 0.010772705078125, 0.036529541015625, 0.00016546249389648438, 0.03466796875, 0.0005087852478027344, 7.748603820800781e-06, 0.91748046875, 0.1270751953125, 0.00040793418884277344, 0.048187255859375, 0.422607421875, 2.43359375, 2.099609375, 0.433349609375, 0.521484375, 0.9716796875, 0.87158203125, 0.95751953125, 1.5615234375, 1.5849609375, 1.556640625, 1.0166015625, 0.5986328125, 1.8359375, 0.128173828125, 0.81884765625, 0.036529541015625], "tokens": [397, 320, 1687, 434, 1670, 636, 438, 313, 8299, 392, 7329, 8762, 744, 32, 397, 415, 308, 104, 863, 744, 962, 354, 32, 18789, 1212, 922, 10272, 346, 610, 6512, 32, 9842, 27, 301, 291, 434, 1670, 458, 438, 312, 667, 13317, 30, 1615, 561, 1182, 3835, 372, 316, 8238, 291, 434]}
{"line_number": 77, "line_type": "original", "code": "  Normalize(AbstractCompiler compiler, boolean assertOnChange) {", "entropy": 2.3125, "is_bug_line": false, "sus_score": 0.010560303870779612, "per_token_entropy": [2.826171875, 9.875, 6.0703125, 7.47265625, 0.00901031494140625, 0.2034912109375, 0.1260986328125, 0.71923828125, 0.076416015625, 0.00954437255859375, 0.04156494140625, 0.31494140625], "tokens": [225, 40249, 26, 5584, 8115, 8980, 30, 1905, 1201, 35864, 27, 301]}
{"line_number": 77, "line_type": "generated", "code": "\n    }\n  }\n\n  /**\n   * This pass is used to normalize the AST.\n   *\n   * It is intended to be used in conjunction with other passes that\n   * depend on the normalized AST, such as {@link NormalizeNames}.\n   *\n   *", "entropy": 0.970703125, "is_bug_line": false, "sus_score": 0.010560303870779612, "per_token_entropy": [1.13671875, 0.1112060546875, 0.28662109375, 0.00099945068359375, 0.31298828125, 1.2001953125, 0.08941650390625, 0.0004906654357910156, 2.62890625, 1.3486328125, 2.359375, 1.958984375, 0.410400390625, 1.31640625, 1.2060546875, 1.111328125, 1.9033203125, 0.56201171875, 0.39208984375, 0.5380859375, 0.047943115234375, 1.7177734375, 2.013671875, 3.04296875, 0.200927734375, 0.55517578125, 1.453125, 2.03515625, 1.3994140625, 0.00917816162109375, 0.7373046875, 0.44580078125, 1.0556640625, 1.138671875, 0.0007958412170410156, 2.904296875, 0.09136962890625, 0.88623046875, 1.1923828125, 0.2227783203125, 1.87109375, 0.9677734375, 0.0238494873046875, 1.5126953125, 0.1773681640625, 1.900390625, 2.35546875, 0.58447265625, 0.050689697265625, 0.8173828125, 0.146728515625, 0.03167724609375], "tokens": [284, 320, 334, 320, 719, 1022, 664, 319, 1348, 3097, 438, 1654, 372, 13316, 322, 16095, 32, 664, 319, 664, 319, 2030, 438, 14212, 372, 526, 1654, 328, 40875, 623, 1604, 18200, 688, 664, 319, 3526, 544, 322, 17666, 16095, 30, 3751, 619, 3088, 1204, 40249, 4109, 4009, 664, 319, 664, 319]}
{"line_number": 78, "line_type": "original", "code": "    this.compiler = compiler;", "entropy": 1.638671875, "is_bug_line": false, "sus_score": 0.010560303870779612, "per_token_entropy": [2.619140625, 6.23046875, 0.01023101806640625, 1.1123046875, 1.3759765625, 0.081787109375, 0.03826904296875], "tokens": [264, 458, 32, 10199, 280, 8980, 45]}
{"line_number": 78, "line_type": "generated", "code": "  }", "entropy": 1.0029296875, "is_bug_line": false, "sus_score": 0.010560303870779612, "per_token_entropy": [1.78515625, 0.221435546875], "tokens": [225, 320]}
{"line_number": 79, "line_type": "original", "code": "    this.assertOnChange = assertOnChange;", "entropy": 2.47265625, "is_bug_line": false, "sus_score": 0.010560303870779612, "per_token_entropy": [1.908203125, 5.69921875, 0.6982421875, 5.80859375, 6.02734375, 0.2039794921875, 1.8798828125, 0.0014858245849609375, 0.0207061767578125], "tokens": [264, 458, 32, 862, 35864, 280, 1201, 35864, 45]}
{"line_number": 79, "line_type": "generated", "code": "\n  }\n\n  /**\n   * This pass is only used for testing.\n   */\n  static class NormalizeForTesting implements CompilerPass {\n    private final AbstractCompiler compiler;\n    private final boolean assertOnChange;\n\n    NormalizeForTesting(AbstractCompiler compiler, boolean assertOnChange) {", "entropy": 0.4951171875, "is_bug_line": false, "sus_score": 0.010560303870779612, "per_token_entropy": [1.501953125, 0.005828857421875, 0.298828125, 1.0810546875, 0.10174560546875, 0.0005207061767578125, 2.5234375, 1.23046875, 2.37890625, 3.39453125, 1.669921875, 1.2919921875, 0.630859375, 0.7333984375, 0.422119140625, 0.339599609375, 0.06793212890625, 0.71142578125, 0.80419921875, 0.272705078125, 0.91357421875, 0.81103515625, 0.0277252197265625, 0.0007405281066894531, 0.00727081298828125, 0.426025390625, 0.464111328125, 0.09698486328125, 0.1712646484375, 0.00115966796875, 0.0003254413604736328, 0.0020694732666015625, 0.56689453125, 0.2490234375, 0.2177734375, 1.033203125, 0.2802734375, 0.0273590087890625, 0.0041351318359375, 0.33056640625, 0.341552734375, 0.0005016326904296875, 0.0018672943115234375, 0.13427734375, 0.00019073486328125, 0.001598358154296875, 0.10333251953125, 0.053985595703125, 0.01190948486328125, 0.00421905517578125, 0.0004432201385498047, 0.0004944801330566406], "tokens": [334, 320, 719, 1022, 664, 319, 1348, 3097, 438, 1755, 1654, 436, 6325, 32, 664, 569, 334, 907, 443, 40249, 37484, 4575, 20209, 6129, 301, 284, 945, 1158, 7400, 8115, 8980, 45, 284, 945, 1158, 1905, 1201, 35864, 45, 446, 40249, 37484, 26, 5584, 8115, 8980, 30, 1905, 1201, 35864, 27, 301]}
{"line_number": 83, "line_type": "original", "code": "  }", "entropy": 1.3603515625, "is_bug_line": false, "sus_score": 0.010560303870779612, "per_token_entropy": [2.1875, 0.53271484375], "tokens": [225, 320]}
{"line_number": 83, "line_type": "generated", "code": "\n  }\n\n  private class NormalizeStatements extends AbstractPostOrderCallback {\n\n    private final AbstractCompiler compiler;\n    private final boolean assertOnChange;\n\n    NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange) {\n      this.compiler = compiler;\n      this.assertOnChange", "entropy": 0.1697998046875, "is_bug_line": false, "sus_score": 0.010560303870779612, "per_token_entropy": [0.931640625, 0.018310546875, 0.376220703125, 1.623046875, 1.3076171875, 0.0670166015625, 0.0091705322265625, 0.2509765625, 0.1510009765625, 0.435791015625, 0.0008339881896972656, 0.0013017654418945312, 0.1805419921875, 0.87646484375, 0.407470703125, 0.1612548828125, 0.370849609375, 0.0025501251220703125, 0.00028204917907714844, 0.002208709716796875, 0.1396484375, 0.07513427734375, 0.1044921875, 0.1231689453125, 0.1951904296875, 0.004974365234375, 0.00426483154296875, 0.446533203125, 0.37158203125, 0.0051422119140625, 0.00035262107849121094, 0.06982421875, 6.437301635742188e-05, 0.0010395050048828125, 0.0015478134155273438, 0.0692138671875, 0.00408935546875, 0.00217437744140625, 0.0002675056457519531, 0.0016193389892578125, 0.01190948486328125, 0.0095062255859375, 0.0002624988555908203, 0.00860595703125, 0.0003941059112548828, 0.00016927719116210938, 0.00034546852111816406, 0.003955841064453125, 0.0008511543273925781, 1.2874603271484375e-05, 0.00011670589447021484, 0.0005993843078613281], "tokens": [334, 320, 719, 945, 443, 40249, 26527, 2026, 7400, 3160, 2871, 3296, 301, 446, 945, 1158, 7400, 8115, 8980, 45, 284, 945, 1158, 1905, 1201, 35864, 45, 446, 40249, 26527, 26, 5584, 8115, 8980, 30, 1905, 1201, 35864, 27, 301, 397, 458, 32, 10199, 280, 8980, 45, 397, 458, 32, 862, 35864]}
{"line_number": 120, "line_type": "original", "code": "    new NodeTraversal(", "entropy": 2.80078125, "is_bug_line": true, "sus_score": 0.010560303870779612, "per_token_entropy": [4.3984375, 8.0, 1.2138671875, 0.27099609375, 0.11505126953125], "tokens": [264, 537, 4004, 35699, 26]}
{"line_number": 120, "line_type": "generated", "code": "\n        Node parent = node.getParent();\n        if (parent.isAssign()) {\n          Node left = parent.getFirstChild();\n          if (left == node) {\n            return;\n          }\n          if (left.isGetProp()) {\n            left =", "entropy": 0.4140625, "is_bug_line": true, "sus_score": 0.010560303870779612, "per_token_entropy": [1.1513671875, 2.701171875, 1.845703125, 0.390380859375, 0.8232421875, 0.02313232421875, 0.00868988037109375, 0.005214691162109375, 0.263427734375, 0.53564453125, 0.11602783203125, 0.340087890625, 0.48681640625, 0.150390625, 1.0625, 0.38720703125, 0.0020275115966796875, 0.050506591796875, 0.7783203125, 0.81884765625, 0.1796875, 0.03619384765625, 8.285045623779297e-05, 0.12457275390625, 0.001987457275390625, 0.03143310546875, 0.060150146484375, 0.4306640625, 0.09332275390625, 0.295166015625, 0.69775390625, 0.005584716796875, 0.323974609375, 0.0019092559814453125, 0.0295257568359375, 2.2734375, 0.03271484375, 0.12384033203125, 0.00016748905181884766, 0.7392578125, 0.533203125, 0.1666259765625, 0.478759765625, 0.007747650146484375, 0.12493896484375, 0.91650390625, 0.0352783203125, 0.53759765625, 0.0007724761962890625, 0.01332855224609375, 1.267578125, 0.032257080078125], "tokens": [291, 4004, 2935, 280, 1541, 32, 18789, 473, 291, 415, 308, 2544, 32, 297, 9079, 1157, 301, 616, 4004, 2841, 280, 2935, 32, 25657, 2931, 473, 616, 415, 308, 1873, 610, 1541, 27, 301, 324, 442, 45, 616, 320, 616, 415, 308, 1873, 32, 297, 936, 6567, 1157, 301, 324, 2841, 280]}
