{"line_number": 148, "line_type": "original", "code": "        c.inlineVariable();", "entropy": 4.97265625, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [5.91796875, 9.3828125, 1.05078125, 5.25390625, 4.0625, 4.18359375], "tokens": [351, 281, 32, 3221, 3818, 473]}
{"line_number": 148, "line_type": "generated", "code": "\n            } else {\n              // Check if the name is defined in this scope.\n              Var var = t.getScope().getVar(n.getString());\n              if (var!= null) {\n                if (var.isGlobal()) {\n                  // Don't", "entropy": 0.52685546875, "is_bug_line": false, "sus_score": 0.2, "per_token_entropy": [0.89404296875, 0.0233612060546875, 0.7080078125, 0.78759765625, 0.2978515625, 1.53125, 2.92578125, 0.358154296875, 1.3662109375, 1.90625, 0.7158203125, 1.611328125, 1.0263671875, 1.3330078125, 0.95458984375, 0.76025390625, 0.1734619140625, 0.60107421875, 0.69091796875, 0.0244293212890625, 0.5400390625, 1.8596649169921875e-05, 0.01229095458984375, 0.0013713836669921875, 0.0003719329833984375, 0.1751708984375, 0.009063720703125, 0.0175323486328125, 0.0017709732055664062, 0.007007598876953125, 0.00252532958984375, 0.1087646484375, 0.10064697265625, 0.0169525146484375, 0.01255035400390625, 0.315673828125, 0.0006504058837890625, 0.473876953125, 0.0009102821350097656, 0.13232421875, 1.880859375, 0.1849365234375, 1.2294921875, 0.0297698974609375, 0.310302734375, 0.68359375, 0.172119140625, 0.0038776397705078125, 0.241943359375, 0.7919921875, 1.2607421875, 0.0004458427429199219], "tokens": [324, 320, 813, 301, 1090, 434, 3456, 415, 322, 636, 438, 3417, 328, 458, 4576, 32, 1090, 7329, 773, 280, 273, 32, 371, 5504, 922, 48086, 26, 96, 32, 7069, 1035, 1090, 415, 308, 869, 863, 744, 27, 301, 400, 415, 308, 869, 32, 297, 4455, 1157, 301, 1750, 434, 12029, 1330]}
{"line_number": 468, "line_type": "original", "code": "    for (Node p = n; p != expressionRoot; p = p.getParent()) {", "entropy": 0.6376953125, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [4.8359375, 3.19921875, 0.0164642333984375, 0.02642822265625, 0.68994140625, 0.04266357421875, 0.1224365234375, 2.640625, 0.1922607421875, 0.05413818359375, 0.430419921875, 0.003047943115234375, 0.0931396484375, 0.2802734375, 0.00226593017578125, 0.004276275634765625, 0.0005483627319335938, 0.0667724609375, 0.004482269287109375, 0.052734375], "tokens": [264, 436, 308, 1212, 298, 280, 310, 45, 298, 863, 6101, 4058, 45, 298, 280, 298, 32, 18789, 1157, 301]}
{"line_number": 468, "line_type": "generated", "code": "\n\n  /**\n   * Given a node n, return true if it is the first child of its parent.\n   */\n  private static boolean isFirstChild(Node n) {\n    return n.getParent().getFirstChild() == n;\n  }\n\n  /**\n  ", "entropy": 0.391845703125, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [1.5390625, 0.300048828125, 0.06036376953125, 0.0009546279907226562, 1.2333984375, 1.5859375, 1.6767578125, 1.673828125, 0.38525390625, 0.84375, 0.52880859375, 0.03704833984375, 1.24609375, 0.34521484375, 1.876953125, 1.7724609375, 1.2216796875, 0.1591796875, 0.81298828125, 0.06060791015625, 0.6044921875, 0.041473388671875, 0.10504150390625, 0.009307861328125, 0.04827880859375, 0.051910400390625, 0.00447845458984375, 0.11065673828125, 0.10186767578125, 0.05462646484375, 0.1265869140625, 0.005550384521484375, 0.005451202392578125, 0.005397796630859375, 0.0007386207580566406, 0.0312347412109375, 0.430908203125, 0.06317138671875, 0.42236328125, 0.1492919921875, 0.040740966796875, 0.0299835205078125, 1.895427703857422e-05, 0.013397216796875, 0.0019855499267578125, 0.0007195472717285156, 0.0021152496337890625, 0.00945281982421875, 0.0021076202392578125, 0.4208984375, 0.10479736328125, 0.01317596435546875], "tokens": [719, 1022, 664, 319, 15273, 312, 1541, 310, 30, 442, 861, 415, 561, 438, 322, 1932, 2838, 432, 2819, 2935, 32, 664, 569, 334, 945, 907, 1905, 438, 3472, 2931, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 18789, 922, 25657, 2931, 346, 610, 310, 45, 334, 320, 719, 1022, 664]}
{"line_number": 469, "line_type": "original", "code": "      for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {", "entropy": 0.96630859375, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [7.28125, 4.1015625, 0.0247650146484375, 0.032135009765625, 0.791015625, 0.0291900634765625, 3.751953125, 0.03558349609375, 2.310546875, 0.06640625, 0.08056640625, 0.031219482421875, 0.78515625, 0.055389404296875, 0.73681640625, 0.004955291748046875, 0.098876953125, 0.006977081298828125, 0.017974853515625, 0.010528564453125, 0.036712646484375], "tokens": [647, 436, 308, 1212, 2738, 280, 298, 32, 23017, 473, 2738, 863, 744, 45, 2738, 280, 2738, 32, 23017, 1157, 301]}
{"line_number": 469, "line_type": "generated", "code": "\n  /**\n   * Given an expression by its root and sub-expression n, return true if there\n   * the predicate is true for some expression on the right of n, or the left of\n   * n, or both.\n   *\n   * Example:", "entropy": 0.325927734375, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [1.029296875, 0.54345703125, 0.0894775390625, 0.0005955696105957031, 1.291015625, 0.343505859375, 0.07452392578125, 0.2435302734375, 0.0119781494140625, 0.004657745361328125, 0.052520751953125, 0.035797119140625, 0.0035648345947265625, 0.003726959228515625, 0.0074310302734375, 0.00992584228515625, 0.08062744140625, 0.05242919921875, 0.0114288330078125, 0.252197265625, 0.00992584228515625, 0.0001575946807861328, 0.172119140625, 0.051055908203125, 0.00461578369140625, 0.007007598876953125, 0.044769287109375, 0.1397705078125, 0.104736328125, 0.392333984375, 0.141357421875, 0.8466796875, 0.42578125, 0.090087890625, 2.19921875, 1.2626953125, 2.24609375, 0.6337890625, 0.64111328125, 0.260498046875, 0.0005402565002441406, 0.0667724609375, 1.671875, 0.1754150390625, 0.487060546875, 0.19091796875, 0.04315185546875, 0.353271484375, 0.01258087158203125, 0.0016689300537109375, 0.10528564453125, 0.0333251953125], "tokens": [334, 1022, 664, 319, 15273, 600, 6101, 810, 2819, 3051, 461, 1361, 31, 7672, 310, 30, 442, 861, 415, 2017, 664, 319, 322, 14094, 438, 861, 436, 1629, 6101, 544, 322, 2091, 432, 310, 30, 556, 322, 2841, 432, 664, 319, 310, 30, 556, 4335, 32, 664, 319, 664, 319, 5938, 44]}
{"line_number": 475, "line_type": "original", "code": "    return false;", "entropy": 2.216796875, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [7.44140625, 1.384765625, 0.035003662109375, 0.00669097900390625], "tokens": [264, 442, 901, 45]}
{"line_number": 475, "line_type": "generated", "code": "\n\n  /**\n   * Given an expression by its root and sub-expression n, return true if there\n   * the predicate is true for some expression on the right of n, and there is\n   * no expression on the left of n that satisfies the predicate.", "entropy": 0.3310546875, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [0.9052734375, 0.222412109375, 0.0557861328125, 0.000408172607421875, 1.30859375, 0.389404296875, 0.08502197265625, 0.298095703125, 0.01445770263671875, 0.00540924072265625, 0.06744384765625, 0.04962158203125, 0.00550079345703125, 0.0024776458740234375, 0.00909423828125, 0.0118255615234375, 0.09149169921875, 0.06512451171875, 0.01238250732421875, 0.2548828125, 0.00794219970703125, 9.1552734375e-05, 0.1812744140625, 0.05316162109375, 0.00426483154296875, 0.007465362548828125, 0.04205322265625, 0.1466064453125, 0.11993408203125, 0.42919921875, 0.1729736328125, 0.70458984375, 0.40478515625, 0.08984375, 2.06640625, 1.3232421875, 2.251953125, 0.51513671875, 0.41552734375, 0.000141143798828125, 0.6650390625, 0.68701171875, 0.4755859375, 0.06072998046875, 0.053497314453125, 0.143798828125, 0.0457763671875, 0.89697265625, 0.8720703125, 0.361083984375, 0.11151123046875, 0.0615234375], "tokens": [719, 1022, 664, 319, 15273, 600, 6101, 810, 2819, 3051, 461, 1361, 31, 7672, 310, 30, 442, 861, 415, 2017, 664, 319, 322, 14094, 438, 861, 436, 1629, 6101, 544, 322, 2091, 432, 310, 30, 461, 2017, 438, 664, 319, 1289, 6101, 544, 322, 2841, 432, 310, 688, 48653, 322, 14094, 32]}
{"line_number": 488, "line_type": "original", "code": "    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {", "entropy": 0.4853515625, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [3.5546875, 1.5458984375, 0.01611328125, 0.0139617919921875, 0.416748046875, 0.0091094970703125, 0.026641845703125, 2.734375, 0.26904296875, 0.09539794921875, 0.11785888671875, 0.024169921875, 0.213623046875, 0.0019445419311523438, 0.040740966796875, 1.3427734375, 0.0222930908203125, 0.09771728515625, 0.038665771484375, 0.0374755859375, 0.005016326904296875, 0.055206298828125], "tokens": [264, 436, 308, 1212, 298, 280, 310, 32, 18789, 473, 298, 863, 6101, 4058, 45, 298, 280, 298, 32, 18789, 1157, 301]}
{"line_number": 488, "line_type": "generated", "code": "\n    /**\n     * Given an expression by its root and sub-expression n, return true if there\n     * the predicate is true for some expression on the left or right of n.\n     */\n    private static boolean checkLeftRightOf(\n        Node n,", "entropy": 0.2352294921875, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [1.3779296875, 1.748046875, 0.10638427734375, 0.0010547637939453125, 1.0859375, 0.26806640625, 0.067626953125, 0.218994140625, 0.0129852294921875, 0.004558563232421875, 0.044769287109375, 0.033447265625, 0.00974273681640625, 0.0015869140625, 0.008331298828125, 0.008392333984375, 0.08673095703125, 0.043731689453125, 0.010711669921875, 0.38671875, 0.007411956787109375, 0.000308990478515625, 0.10186767578125, 0.0242462158203125, 0.0029926300048828125, 0.005401611328125, 0.0350341796875, 0.08990478515625, 0.07861328125, 0.383056640625, 0.1484375, 0.56591796875, 0.71728515625, 0.27001953125, 0.10675048828125, 0.0085601806640625, 0.062408447265625, 0.0174560546875, 1.3017578125, 0.1468505859375, 0.0260162353515625, 0.054656982421875, 0.003459930419921875, 0.01108551025390625, 0.794921875, 1.5224609375, 0.0804443359375, 0.004917144775390625, 0.1290283203125, 0.004497528076171875, 0.004581451416015625, 0.00014638900756835938], "tokens": [284, 1022, 275, 319, 15273, 600, 6101, 810, 2819, 3051, 461, 1361, 31, 7672, 310, 30, 442, 861, 415, 2017, 275, 319, 322, 14094, 438, 861, 436, 1629, 6101, 544, 322, 2841, 556, 2091, 432, 310, 32, 275, 569, 284, 945, 907, 1905, 1505, 3679, 4046, 1419, 26, 291, 4004, 310, 30]}
{"line_number": 496, "line_type": "original", "code": "    return false;", "entropy": 1.8037109375, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [7.07421875, 0.11871337890625, 0.01100921630859375, 0.00994873046875], "tokens": [264, 442, 901, 45]}
{"line_number": 496, "line_type": "generated", "code": "\n\n  /**\n   * Given an expression by its root and sub-expression n, return true if there\n   * the predicate is true for some expression on the right of n.\n   *\n   * Example:\n   *\n   * NotChecked(), NotChecked(), n", "entropy": 0.158447265625, "is_bug_line": false, "sus_score": 0.1690308509457033, "per_token_entropy": [1.0380859375, 0.1669921875, 0.050811767578125, 0.0005483627319335938, 1.0517578125, 0.275146484375, 0.058990478515625, 0.196044921875, 0.01200103759765625, 0.004474639892578125, 0.05548095703125, 0.03900146484375, 0.004302978515625, 0.0018033981323242188, 0.0067596435546875, 0.0091400146484375, 0.06829833984375, 0.045989990234375, 0.0097198486328125, 0.1795654296875, 0.0080108642578125, 0.00010323524475097656, 0.132080078125, 0.0325927734375, 0.0038013458251953125, 0.006679534912109375, 0.044097900390625, 0.11669921875, 0.101318359375, 0.451904296875, 0.156005859375, 0.78466796875, 0.58154296875, 0.110595703125, 1.37890625, 0.1260986328125, 0.0267791748046875, 0.0222015380859375, 0.0016984939575195312, 0.09033203125, 0.00958251953125, 0.01030731201171875, 0.0003142356872558594, 0.024139404296875, 0.00023257732391357422, 0.3544921875, 0.01049041748046875, 0.039794921875, 0.291259765625, 0.00034356117248535156, 0.00478363037109375, 0.049163818359375], "tokens": [719, 1022, 664, 319, 15273, 600, 6101, 810, 2819, 3051, 461, 1361, 31, 7672, 310, 30, 442, 861, 415, 2017, 664, 319, 322, 14094, 438, 861, 436, 1629, 6101, 544, 322, 2091, 432, 310, 32, 664, 319, 664, 319, 5938, 44, 664, 319, 664, 319, 3182, 9020, 1026, 3182, 9020, 1026, 310]}
{"line_number": 147, "line_type": "original", "code": "      if (c.canInline()) {", "entropy": 2.107421875, "is_bug_line": false, "sus_score": 0.1259881576697424, "per_token_entropy": [5.73828125, 0.6455078125, 0.1722412109375, 7.69140625, 0.56298828125, 2.26953125, 0.5166015625, 1.2783203125, 0.09149169921875], "tokens": [647, 415, 308, 85, 32, 3374, 10144, 1157, 301]}
{"line_number": 147, "line_type": "generated", "code": "\n            if (parent.isAssign() && parent.getFirstChild() == n) {\n              Node left = parent.getFirstChild();\n              Node right = parent.getLastChild();\n              if (isCandidate(left, right, defs)) {\n                candidates.", "entropy": 0.41259765625, "is_bug_line": false, "sus_score": 0.1259881576697424, "per_token_entropy": [0.29248046875, 0.8134765625, 0.2548828125, 1.671875, 0.859375, 0.247314453125, 0.387939453125, 0.392333984375, 0.429931640625, 1.033203125, 0.0014295578002929688, 0.19580078125, 0.00011241436004638672, 0.0926513671875, 0.0207977294921875, 0.00638580322265625, 0.295654296875, 0.007080078125, 0.158203125, 2.1484375, 2.107421875, 0.28564453125, 0.252685546875, 0.00626373291015625, 0.40673828125, 0.01496124267578125, 0.040435791015625, 0.0723876953125, 0.529296875, 0.061248779296875, 0.0028896331787109375, 0.165771484375, 0.00020062923431396484, 0.036773681640625, 0.001373291015625, 0.0270538330078125, 0.280517578125, 0.732421875, 0.1800537109375, 2.494140625, 1.2451171875, 0.51318359375, 0.64208984375, 0.11163330078125, 0.1507568359375, 0.453857421875, 0.54248046875, 0.34326171875, 0.00266265869140625, 0.04364013671875, 0.397705078125, 0.0005974769592285156], "tokens": [324, 415, 308, 2544, 32, 297, 9079, 346, 962, 2935, 32, 25657, 2931, 346, 610, 310, 27, 301, 1090, 4004, 2841, 280, 2935, 32, 25657, 2931, 473, 1090, 4004, 2091, 280, 2935, 32, 20197, 2931, 473, 1090, 415, 308, 297, 19445, 26, 1873, 30, 2091, 30, 30213, 490, 301, 400, 22068, 32]}
{"line_number": 150, "line_type": "original", "code": "    }", "entropy": 3.716796875, "is_bug_line": false, "sus_score": 0.1259881576697424, "per_token_entropy": [6.578125, 0.85546875], "tokens": [264, 320]}
{"line_number": 150, "line_type": "generated", "code": "\n            if (defs.isDef(n.getString())) {\n              Candidate c = new Candidate(n.getString(), n, cfgNode, t);\n              if (c.canInline()) {\n                candidates.add(c);\n              }\n           ", "entropy": 0.402587890625, "is_bug_line": false, "sus_score": 0.1259881576697424, "per_token_entropy": [0.495361328125, 0.98779296875, 0.315185546875, 1.099609375, 0.07794189453125, 1.5849609375, 0.7373046875, 0.11810302734375, 0.1187744140625, 1.0576171875, 0.1484375, 0.5830078125, 0.0023937225341796875, 0.1014404296875, 2.140625, 0.0017261505126953125, 0.6064453125, 0.06561279296875, 0.2176513671875, 0.02301025390625, 6.80685043334961e-05, 0.0399169921875, 0.90185546875, 1.3525390625, 0.0261077880859375, 0.057769775390625, 1.20703125, 0.30859375, 0.455078125, 0.045440673828125, 0.48046875, 1.380859375, 1.107421875, 0.0516357421875, 1.17578125, 0.1640625, 0.139404296875, 0.00200653076171875, 1.04296875, 0.12353515625, 0.1031494140625, 0.0029754638671875, 0.0177459716796875, 0.1434326171875, 0.00012195110321044922, 0.004978179931640625, 0.01049041748046875, 0.0015773773193359375, 0.00022721290588378906, 0.03582763671875, 0.0005517005920410156, 0.07794189453125], "tokens": [324, 415, 308, 15312, 32, 297, 1350, 26, 96, 32, 7069, 5156, 301, 1090, 390, 7964, 281, 280, 537, 390, 7964, 26, 96, 32, 7069, 1026, 310, 30, 8444, 1212, 30, 273, 293, 1090, 415, 308, 85, 32, 3374, 10144, 1157, 301, 400, 22068, 32, 669, 26, 85, 293, 1090, 320, 324]}
{"line_number": 123, "line_type": "original", "code": "    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <", "entropy": 2.27734375, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [4.3046875, 9.3046875, 1.6015625, 9.8828125, 0.048187255859375, 0.214111328125, 0.04248046875, 7.36328125, 0.0167694091796875, 2.716796875, 1.640625, 0.578125, 0.339111328125, 0.0012969970703125, 0.458984375, 0.004177093505859375, 0.1807861328125, 2.298828125], "tokens": [264, 415, 308, 11082, 10165, 9745, 32, 3459, 81, 22370, 69, 81, 1407, 81, 39861, 75, 2720, 333]}
{"line_number": 123, "line_type": "generated", "code": "\n   * in {@link #candidates}.\n   */\n  class GatherCandiates extends AbstractShallowCallback {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction()) {\n        return", "entropy": 0.2032470703125, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.43701171875, 0.015838623046875, 0.22412109375, 0.56201171875, 0.193359375, 0.305419921875, 0.01120758056640625, 0.369384765625, 0.10577392578125, 0.1676025390625, 0.029052734375, 1.44140625, 0.0003108978271484375, 8.702278137207031e-06, 0.00838470458984375, 0.00019872188568115234, 2.384185791015625e-07, 0.77587890625, 0.205322265625, 0.0625, 0.02294921875, 0.290283203125, 0.11822509765625, 1.0302734375, 0.307373046875, 0.0008077621459960938, 0.01287841796875, 0.007965087890625, 0.0053558349609375, 0.0054473876953125, 0.0007138252258300781, 0.0013523101806640625, 0.006866455078125, 0.0033721923828125, 5.1021575927734375e-05, 0.0015745162963867188, 0.01415252685546875, 0.0004088878631591797, 0.002132415771484375, 0.00923919677734375, 0.0001558065414428711, 0.00131988525390625, 0.25927734375, 0.44970703125, 0.32666015625, 0.63134765625, 0.0260772705078125, 0.64501953125, 0.275146484375, 0.000804901123046875, 0.0367431640625, 1.158203125], "tokens": [664, 319, 328, 3088, 1204, 588, 26257, 4009, 664, 569, 334, 443, 570, 3790, 53, 36322, 1196, 2026, 7400, 1189, 4568, 3296, 301, 446, 477, 1788, 284, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 415, 308, 96, 32, 39504, 1157, 301, 291, 442]}
{"line_number": 129, "line_type": "original", "code": "    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);", "entropy": 1.31640625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [1.0703125, 12.078125, 0.007537841796875, 2.84765625, 0.8388671875, 0.0025196075439453125, 0.4755859375, 0.334716796875, 0.06317138671875, 6.23464584350586e-05, 0.000896453857421875, 0.7197265625, 0.97021484375, 1.044921875, 0.74267578125, 0.71142578125, 1.6123046875, 0.1607666015625], "tokens": [264, 7813, 4055, 9745, 281, 1919, 280, 537, 7813, 4055, 9745, 26, 10199, 30, 901, 30, 861, 293]}
{"line_number": 129, "line_type": "generated", "code": "\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction()) {\n        // Don't inline a function that has a parameter that is a function\n        // literal.\n        for (Node param = n.getFirst", "entropy": 0.607421875, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.75830078125, 0.08294677734375, 0.0035610198974609375, 0.004718780517578125, 0.0007767677307128906, 0.0021266937255859375, 0.0185089111328125, 0.0061798095703125, 8.058547973632812e-05, 0.0029850006103515625, 0.015625, 0.0009360313415527344, 0.0026149749755859375, 0.0155487060546875, 0.0003571510314941406, 0.008575439453125, 0.166259765625, 0.428466796875, 0.29345703125, 0.48291015625, 0.02691650390625, 0.5703125, 0.2607421875, 0.0014162063598632812, 0.0401611328125, 1.3388671875, 1.380859375, 0.00034928321838378906, 2.017578125, 2.3203125, 0.1982421875, 0.54345703125, 1.4755859375, 1.763671875, 2.390625, 0.82958984375, 0.82861328125, 2.97265625, 3.419921875, 0.986328125, 0.27392578125, 1.634765625, 0.58544921875, 0.84814453125, 1.4716796875, 0.0016927719116210938, 0.0221710205078125, 0.2421875, 0.59423828125, 0.07666015625, 0.00033211708068847656, 0.1719970703125], "tokens": [284, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 415, 308, 96, 32, 39504, 1157, 301, 291, 434, 12029, 1330, 4447, 312, 667, 688, 1401, 312, 3395, 688, 438, 312, 667, 291, 434, 10652, 32, 291, 436, 308, 1212, 4356, 280, 310, 32, 25657]}
{"line_number": 131, "line_type": "original", "code": "    Preconditions.checkState(t.getScopeRoot().isFunction());", "entropy": 1.966796875, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [4.59375, 6.55078125, 0.005413055419921875, 0.055572509765625, 0.1278076171875, 0.0435791015625, 5.99609375, 0.0159454345703125, 0.587890625, 0.0011453628540039062, 4.09765625, 2.357421875, 2.734375, 0.369384765625], "tokens": [264, 40596, 32, 1553, 1078, 26, 102, 32, 371, 5504, 4058, 922, 39504, 1035]}
{"line_number": 131, "line_type": "generated", "code": "\n      if (graphNode == null) {\n        return;\n      }\n\n      if (reachingDef.isLiveAtEntry(n)) {\n        // The variable is live at the entry of the function. We can inline it\n        // if it is not", "entropy": 0.67529296875, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.2509765625, 0.65673828125, 0.1546630859375, 0.67431640625, 0.0002598762512207031, 0.75537109375, 0.0017728805541992188, 0.193603515625, 0.006290435791015625, 0.028106689453125, 0.37353515625, 0.002269744873046875, 0.1915283203125, 0.0005831718444824219, 0.4794921875, 1.5859375, 0.2274169921875, 1.666015625, 0.001567840576171875, 0.0236053466796875, 0.00359344482421875, 0.71826171875, 2.826171875, 2.447265625, 1.3544921875, 0.0202178955078125, 0.347900390625, 0.455078125, 0.00148773193359375, 0.07574462890625, 1.3662109375, 2.009765625, 0.75634765625, 0.258056640625, 0.8828125, 0.2418212890625, 0.395751953125, 0.42724609375, 0.791015625, 0.3232421875, 0.54931640625, 0.9296875, 2.22265625, 1.7099609375, 1.1611328125, 0.9287109375, 0.908203125, 0.026214599609375, 1.02734375, 0.71728515625, 0.619140625, 1.3369140625], "tokens": [397, 415, 308, 2255, 1212, 610, 744, 27, 301, 291, 442, 45, 397, 320, 1687, 415, 308, 268, 9469, 1350, 32, 297, 11082, 1076, 2711, 26, 96, 490, 301, 291, 434, 886, 2677, 438, 10912, 821, 322, 3414, 432, 322, 667, 32, 2688, 883, 4447, 561, 291, 434, 415, 561, 438, 646]}
{"line_number": 132, "line_type": "original", "code": "    cfa.process(null, t.getScopeRoot().getLastChild());", "entropy": 1.23828125, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [4.11328125, 7.92578125, 2.115234375, 0.10296630859375, 0.505859375, 0.1441650390625, 1.8076171875, 0.0147552490234375, 3.25390625, 0.01236724853515625, 0.038177490234375, 0.00070953369140625, 0.1715087890625, 0.63623046875, 0.053680419921875, 0.0019140243530273438, 0.146728515625], "tokens": [264, 281, 1919, 32, 2416, 26, 1693, 30, 273, 32, 371, 5504, 4058, 922, 20197, 2931, 1035]}
{"line_number": 132, "line_type": "generated", "code": "\n        return;\n      }\n\n      // If the node is not reachable, then it's not a candidate.\n      if (graphNode.getPredecessors().isEmpty()) {", "entropy": 0.68359375, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.331298828125, 0.337646484375, 0.004718780517578125, 0.0987548828125, 0.0002608299255371094, 0.4873046875, 1.224609375, 2.318359375, 0.7216796875, 0.71044921875, 0.58544921875, 1.619140625, 2.5859375, 1.6123046875, 1.828125, 0.9375, 2.111328125, 0.66162109375, 0.431396484375, 0.108154296875, 0.6796875, 0.06805419921875, 0.0899658203125, 1.185546875, 1.1650390625, 0.0004513263702392578, 0.00855255126953125, 1.2255859375, 0.56640625, 0.02508544921875, 1.9073486328125e-06, 0.0278167724609375, 0.06036376953125, 0.1004638671875, 0.001903533935546875], "tokens": [291, 442, 45, 397, 320, 1687, 434, 1670, 322, 1541, 438, 646, 45804, 30, 1615, 561, 1182, 646, 312, 15133, 32, 397, 415, 308, 2255, 1212, 32, 371, 2626, 35041, 1734, 922, 6393, 1157, 301]}
{"line_number": 133, "line_type": "original", "code": "    cfg = cfa.getCfg();", "entropy": 2.72265625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [5.14453125, 8.671875, 4.05859375, 5.55859375, 0.042510986328125, 0.03302001953125, 0.93115234375, 0.008758544921875, 0.0557861328125], "tokens": [264, 8444, 280, 281, 1919, 32, 11640, 4637, 473]}
{"line_number": 133, "line_type": "generated", "code": "\n        return;\n      }\n\n      if (graphNode.isExit()) {\n        // We don't care about the return value of the function.\n        return;\n      }\n\n      if (n.isFunction()) {\n        // Don't even bother about the function.", "entropy": 0.65625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.142578125, 0.259033203125, 0.00408172607421875, 0.0267333984375, 0.0005025863647460938, 0.482421875, 1.220703125, 0.2470703125, 0.8681640625, 0.0008378028869628906, 0.032012939453125, 0.31494140625, 1.103515625, 0.439697265625, 0.0012989044189453125, 0.152587890625, 0.31396484375, 2.42578125, 1.3916015625, 0.0003185272216796875, 0.83154296875, 0.0518798828125, 1.1982421875, 2.072265625, 2.033203125, 0.8876953125, 0.58251953125, 0.1224365234375, 0.671875, 0.54736328125, 0.31103515625, 0.0010347366333007812, 0.01195526123046875, 0.0001436471939086914, 0.254150390625, 0.84375, 0.1768798828125, 1.4755859375, 0.01200103759765625, 0.98388671875, 0.2239990234375, 0.0006222724914550781, 0.0124969482421875, 0.2100830078125, 0.7041015625, 0.00030159950256347656, 1.619140625, 1.267578125, 2.236328125, 1.587890625, 0.97509765625, 2.779296875], "tokens": [291, 442, 45, 397, 320, 1687, 415, 308, 2255, 1212, 32, 297, 8112, 1157, 301, 291, 434, 2688, 2800, 1330, 9347, 2625, 322, 442, 786, 432, 322, 667, 32, 291, 442, 45, 397, 320, 1687, 415, 308, 96, 32, 39504, 1157, 301, 291, 434, 12029, 1330, 4444, 41569, 2625, 322, 667, 32]}
{"line_number": 134, "line_type": "original", "code": "    reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);", "entropy": 0.845703125, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [6.52734375, 4.88671875, 0.0095977783203125, 0.2349853515625, 3.228515625, 0.4482421875, 0.058441162109375, 0.001819610595703125, 0.00989532470703125, 0.0001239776611328125, 0.00860595703125, 0.0011167526245117188, 0.10009765625, 0.93798828125, 0.261962890625, 0.70166015625, 0.057861328125, 0.0413818359375, 0.00019729137420654297, 0.7509765625, 0.2646484375, 0.0811767578125], "tokens": [264, 316, 9469, 1350, 280, 537, 15622, 1467, 435, 9469, 3818, 1350, 26, 4687, 30, 273, 32, 371, 5504, 1026, 8980, 293]}
{"line_number": 134, "line_type": "generated", "code": "\n      }\n\n      if (graphNode.isImplicitReturn()) {\n        // The node is an implicit return, it can't be an inline candidate.\n        return;\n      }\n\n      if (graphNode.isExit()) {\n        // The node is an exit", "entropy": 0.587890625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.09234619140625, 0.1580810546875, 0.474609375, 1.2841796875, 0.275634765625, 0.80224609375, 0.0005450248718261719, 0.033203125, 0.36962890625, 1.693359375, 0.332275390625, 0.1900634765625, 0.001392364501953125, 0.04766845703125, 0.465087890625, 2.15625, 1.9814453125, 0.312744140625, 1.3740234375, 0.0574951171875, 0.01413726806640625, 1.94140625, 2.328125, 2.33984375, 0.85791015625, 0.65869140625, 2.634765625, 1.4365234375, 0.0772705078125, 0.2314453125, 0.0195465087890625, 0.059783935546875, 0.0049285888671875, 0.253662109375, 0.00038242340087890625, 0.303955078125, 0.77001953125, 0.180419921875, 1.01953125, 8.0108642578125e-05, 0.0117645263671875, 0.26025390625, 1.0693359375, 0.281494140625, 0.0006189346313476562, 0.0197601318359375, 0.1707763671875, 0.59521484375, 0.07177734375, 0.0960693359375, 0.61767578125, 0.1541748046875], "tokens": [397, 320, 1687, 415, 308, 2255, 1212, 32, 297, 24461, 2891, 1157, 301, 291, 434, 886, 1541, 438, 600, 10353, 442, 30, 561, 883, 1330, 526, 600, 4447, 15133, 32, 291, 442, 45, 397, 320, 1687, 415, 308, 2255, 1212, 32, 297, 8112, 1157, 301, 291, 434, 886, 1541, 438, 600, 4323]}
{"line_number": 135, "line_type": "original", "code": "    reachingDef.analyze();", "entropy": 2.0625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [5.4375, 5.18359375, 0.0018758773803710938, 0.1873779296875, 0.00873565673828125, 1.6923828125, 1.9296875], "tokens": [264, 316, 9469, 1350, 32, 25132, 473]}
{"line_number": 135, "line_type": "generated", "code": "\n      if (graphNode.isEntering() && NodeUtil.isExprAssign(n)) {\n        Node lhs = n.getFirstChild();\n        Node rhs = n.getLastChild();\n        if (NodeUtil.isName(lhs) && Node", "entropy": 0.3759765625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.1881103515625, 1.09375, 0.22705078125, 1.3681640625, 0.0003631114959716797, 0.03094482421875, 0.353271484375, 2.0390625, 0.65283203125, 0.658203125, 0.303466796875, 1.9521484375, 0.002529144287109375, 9.322166442871094e-05, 0.3037109375, 0.3779296875, 0.392578125, 0.0166168212890625, 0.04119873046875, 0.359130859375, 0.0032253265380859375, 0.0770263671875, 1.1875, 1.16796875, 0.034149169921875, 0.127197265625, 0.00013577938079833984, 0.010772705078125, 0.019775390625, 0.1055908203125, 0.083251953125, 1.03515625, 0.1861572265625, 0.0012292861938476562, 0.1787109375, 0.00013363361358642578, 0.005886077880859375, 0.0009484291076660156, 0.0237579345703125, 0.391357421875, 0.6640625, 0.1949462890625, 1.078125, 0.0003643035888671875, 3.0875205993652344e-05, 0.04168701171875, 0.8330078125, 0.3056640625, 0.00839996337890625, 0.3271484375, 0.17041015625, 0.927734375], "tokens": [397, 415, 308, 2255, 1212, 32, 297, 6545, 299, 346, 962, 4004, 1733, 32, 297, 6150, 9079, 26, 96, 490, 301, 291, 4004, 16020, 280, 310, 32, 25657, 2931, 473, 291, 4004, 9322, 280, 310, 32, 20197, 2931, 473, 291, 415, 308, 1212, 1733, 32, 297, 558, 26, 16027, 27, 962, 4004]}
{"line_number": 136, "line_type": "original", "code": "    candidates = Lists.newLinkedList();", "entropy": 2.306640625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [4.7265625, 7.984375, 2.58203125, 1.564453125, 0.00933837890625, 1.5126953125, 0.0031986236572265625, 0.0726318359375], "tokens": [264, 22068, 280, 25163, 32, 890, 20555, 473]}
{"line_number": 136, "line_type": "generated", "code": "\n      if (state == null) {\n        return;\n      }\n      for (MustDef def : state.getMustDefs()) {\n        if (def.isEscaped()) {\n          continue;\n        }\n        // TODO(user): We should only inline", "entropy": 0.498779296875, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.53955078125, 0.69287109375, 0.062286376953125, 0.1060791015625, 0.494384765625, 0.0031414031982421875, 0.172119140625, 0.00395965576171875, 0.016265869140625, 0.62353515625, 0.0015172958374023438, 0.1229248046875, 0.00010538101196289062, 0.86181640625, 0.853515625, 0.0028095245361328125, 0.5927734375, 0.0019502639770507812, 0.82861328125, 0.03564453125, 0.026947021484375, 0.02960205078125, 0.91259765625, 1.0146484375, 0.90576171875, 0.065673828125, 0.0033721923828125, 0.1646728515625, 0.7841796875, 0.2880859375, 0.253662109375, 0.061279296875, 0.77294921875, 1.8037109375, 0.12042236328125, 0.384033203125, 0.002979278564453125, 0.04400634765625, 0.4560546875, 0.0008192062377929688, 0.10211181640625, 0.0001577138900756836, 0.333984375, 2.166015625, 1.6396484375, 0.01806640625, 0.0826416015625, 0.0206146240234375, 1.9482421875, 1.99609375, 2.357421875, 1.1640625], "tokens": [397, 415, 308, 1293, 610, 744, 27, 301, 291, 442, 45, 397, 320, 397, 436, 308, 11387, 1350, 665, 499, 1603, 32, 371, 11387, 23820, 1157, 301, 291, 415, 308, 589, 32, 297, 24866, 26695, 1157, 301, 616, 4036, 45, 291, 320, 291, 434, 4296, 26, 496, 711, 2688, 1395, 1755, 4447]}
{"line_number": 140, "line_type": "original", "code": "    new NodeTraversal(compiler, new GatherCandiates()).traverse(", "entropy": 1.701171875, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [6.7265625, 6.515625, 2.3203125, 2.078125, 3.1640625, 0.1376953125, 0.049102783203125, 2.259765625, 0.77685546875, 0.0008101463317871094, 0.31884765625, 0.0048065185546875, 3.933906555175781e-06, 2.349609375, 0.337158203125, 0.1854248046875], "tokens": [264, 537, 4004, 35699, 26, 10199, 30, 537, 570, 3790, 53, 36322, 1196, 4251, 33261, 26]}
{"line_number": 140, "line_type": "generated", "code": "\n            @Override\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.isAssign() && NodeUtil.isExprAssign(n)) {\n                Node lhs = n.getFirstChild();\n                if (lhs.", "entropy": 0.24560546875, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.8759765625, 0.71240234375, 0.000568389892578125, 0.02630615234375, 0.110595703125, 0.174560546875, 0.016510009765625, 0.034332275390625, 0.0849609375, 0.061553955078125, 0.032806396484375, 0.01236724853515625, 0.007537841796875, 0.019317626953125, 0.017791748046875, 0.007282257080078125, 0.052734375, 0.0017805099487304688, 0.0263519287109375, 0.2237548828125, 0.5693359375, 0.321044921875, 0.49267578125, 0.07354736328125, 0.583984375, 0.494873046875, 1.0341796875, 0.468994140625, 1.7041015625, 0.0016937255859375, 3.731250762939453e-05, 0.044464111328125, 0.66259765625, 0.0027065277099609375, 0.009613037109375, 0.0017986297607421875, 0.2685546875, 0.0036830902099609375, 0.11968994140625, 0.662109375, 0.9453125, 0.02337646484375, 0.1385498046875, 5.078315734863281e-05, 0.021392822265625, 0.006946563720703125, 0.0264129638671875, 0.05535888671875, 0.80078125, 0.2216796875, 0.485107421875, 0.025543212890625], "tokens": [324, 477, 1788, 324, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 1090, 415, 308, 96, 32, 297, 9079, 346, 962, 4004, 1733, 32, 297, 6150, 9079, 26, 96, 490, 301, 400, 4004, 16020, 280, 310, 32, 25657, 2931, 473, 400, 415, 308, 16027, 32]}
{"line_number": 144, "line_type": "original", "code": "    reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);", "entropy": 1.009765625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [6.85546875, 5.2890625, 0.006683349609375, 0.314697265625, 3.423828125, 0.36474609375, 1.2607421875, 0.0022029876708984375, 0.00028443336486816406, 0.0031337738037109375, 0.002643585205078125, 0.0357666015625, 1.1416015625, 0.10260009765625, 1.302734375, 0.036346435546875, 0.029449462890625, 0.00013577938079833984, 0.2880859375, 0.62890625, 0.11077880859375], "tokens": [264, 316, 9469, 25626, 280, 537, 9204, 435, 9469, 3818, 4391, 26, 4687, 30, 273, 32, 371, 5504, 1026, 8980, 293]}
{"line_number": 144, "line_type": "generated", "code": "\n            if (defs.contains(n.getString())) {\n              candidates.add(Candidate.create(n, cfgNode, reachingDef));\n            }\n          }\n        }\n      };\n      gatherCb.startTraversal(t);\n    }\n  }", "entropy": 0.36669921875, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.26708984375, 1.3310546875, 0.2369384765625, 0.64013671875, 0.055419921875, 2.01953125, 0.37353515625, 0.11273193359375, 0.475830078125, 0.0413818359375, 0.443359375, 0.0030727386474609375, 0.045318603515625, 0.986328125, 0.00251007080078125, 0.007083892822265625, 0.0079193115234375, 1.25390625, 0.006008148193359375, 0.444091796875, 0.42529296875, 1.0390625, 0.296142578125, 0.388671875, 0.07232666015625, 0.432373046875, 0.87060546875, 2.0623207092285156e-05, 0.43212890625, 0.935546875, 0.07745361328125, 9.72747802734375e-05, 0.12481689453125, 0.0007891654968261719, 0.20361328125, 0.00431060791015625, 0.1131591796875, 0.00228118896484375, 0.267822265625, 1.23828125, 0.0006198883056640625, 0.002132415771484375, 1.0634765625, 0.0360107421875, 0.101806640625, 0.7275390625, 1.0126953125, 0.041351318359375, 0.001621246337890625, 0.033294677734375, 0.0052947998046875], "tokens": [324, 415, 308, 15312, 32, 4752, 26, 96, 32, 7069, 5156, 301, 1090, 22068, 32, 669, 26, 19445, 32, 1297, 26, 96, 30, 8444, 1212, 30, 316, 9469, 1350, 876, 324, 320, 616, 320, 291, 320, 397, 1472, 397, 20133, 14901, 32, 1366, 35699, 26, 102, 293, 284, 320, 334, 320]}
{"line_number": 145, "line_type": "original", "code": "    reachingUses.analyze();", "entropy": 2.591796875, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [6.68359375, 7.01953125, 0.0034542083740234375, 0.728515625, 0.01447296142578125, 1.6748046875, 2.009765625], "tokens": [264, 316, 9469, 25626, 32, 25132, 473]}
{"line_number": 145, "line_type": "generated", "code": "\n            if (defs.isDef(n)) {\n              candidates.add(Candidate.create(n, cfgNode, reachingDef,\n                  reachingUses));\n            }\n          }\n        }\n      };\n      gatherCb.startTraversal(t, n", "entropy": 0.39453125, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.275146484375, 1.078125, 0.256591796875, 0.54248046875, 0.08489990234375, 1.431640625, 0.66552734375, 0.12347412109375, 0.1414794921875, 0.8828125, 0.004146575927734375, 0.06927490234375, 1.4072265625, 0.00301361083984375, 0.0084381103515625, 0.0082244873046875, 1.275390625, 0.006031036376953125, 0.4755859375, 0.360107421875, 1.0244140625, 0.07958984375, 0.341064453125, 0.043792724609375, 0.454345703125, 0.978515625, 1.6689300537109375e-05, 0.39306640625, 0.72119140625, 1.2626953125, 0.169677734375, 4.4226646423339844e-05, 0.004764556884765625, 0.371826171875, 0.11187744140625, 0.0001252889633178711, 0.32958984375, 0.0009570121765136719, 0.19921875, 0.00495147705078125, 0.11578369140625, 0.002620697021484375, 0.29052734375, 1.2978515625, 0.0006937980651855469, 0.0017414093017578125, 1.1025390625, 0.03204345703125, 0.11663818359375, 0.76708984375, 0.576171875, 0.61328125], "tokens": [324, 415, 308, 15312, 32, 297, 1350, 26, 96, 490, 301, 1090, 22068, 32, 669, 26, 19445, 32, 1297, 26, 96, 30, 8444, 1212, 30, 316, 9469, 1350, 30, 1750, 316, 9469, 25626, 876, 324, 320, 616, 320, 291, 320, 397, 1472, 397, 20133, 14901, 32, 1366, 35699, 26, 102, 30, 310]}
{"line_number": 146, "line_type": "original", "code": "    for (Candidate c : candidates) {", "entropy": 1.3486328125, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [6.90234375, 3.44921875, 0.2216796875, 1.126953125, 0.147705078125, 0.11407470703125, 0.06817626953125, 0.00782012939453125, 0.10113525390625], "tokens": [264, 436, 308, 19445, 281, 499, 22068, 27, 301]}
{"line_number": 146, "line_type": "generated", "code": "\n            if (defs.get(n.getString()).getEscaped()) {\n              candidates.add(Candidate.create(n, cfgNode, reachingUses));\n            }\n          }\n        }\n      };\n\n      gatherCb.startTraversal(cfgNode);", "entropy": 0.556640625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [0.82568359375, 0.712890625, 0.27587890625, 1.8837890625, 0.07244873046875, 1.1435546875, 0.25830078125, 0.0635986328125, 0.56689453125, 0.117431640625, 0.8017578125, 2.408203125, 2.029296875, 0.2041015625, 1.53515625, 0.031982421875, 0.294677734375, 1.033203125, 0.0047454833984375, 0.006275177001953125, 0.01123809814453125, 0.94677734375, 0.0141448974609375, 0.375732421875, 0.1910400390625, 0.9130859375, 0.286376953125, 0.407958984375, 0.042388916015625, 0.73046875, 1.2529296875, 3.8504600524902344e-05, 0.66943359375, 0.5673828125, 0.0943603515625, 0.0014171600341796875, 0.168212890625, 0.0012102127075195312, 0.201904296875, 0.004390716552734375, 0.1314697265625, 0.002429962158203125, 1.3896484375, 2.091796875, 0.0010089874267578125, 0.0021820068359375, 1.0751953125, 0.039581298828125, 0.12188720703125, 1.4755859375, 0.70263671875, 0.759765625], "tokens": [324, 415, 308, 15312, 32, 371, 26, 96, 32, 7069, 4251, 371, 24866, 26695, 1157, 301, 1090, 22068, 32, 669, 26, 19445, 32, 1297, 26, 96, 30, 8444, 1212, 30, 316, 9469, 25626, 876, 324, 320, 616, 320, 291, 320, 397, 1472, 1687, 20133, 14901, 32, 1366, 35699, 26, 4687, 1212, 293]}
{"line_number": 151, "line_type": "original", "code": "  }", "entropy": 3.505859375, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [4.23828125, 2.7734375], "tokens": [225, 320]}
{"line_number": 151, "line_type": "generated", "code": "            // TODO(user): Handle the case where n is a\n            // parameter.\n            if (parent.isParamList()) {\n              return;\n            }\n\n            // TODO(user): Handle the case where n is a parameter.\n            if (parent.", "entropy": 0.6572265625, "is_bug_line": false, "sus_score": 0.07905694150420949, "per_token_entropy": [1.8173828125, 1.2646484375, 2.876953125, 0.05389404296875, 0.1776123046875, 0.04443359375, 3.357421875, 2.5859375, 0.599609375, 0.268798828125, 0.9345703125, 0.3701171875, 1.4365234375, 0.7021484375, 0.0097503662109375, 1.4912109375, 1.0458984375, 1.4013671875, 0.763671875, 0.13818359375, 1.5009765625, 0.00853729248046875, 0.306884765625, 0.072265625, 0.007282257080078125, 0.201904296875, 0.004535675048828125, 0.01380157470703125, 0.07208251953125, 0.0007138252258300781, 0.004924774169921875, 0.0024566650390625, 0.6357421875, 0.91650390625, 1.43359375, 0.0062408447265625, 0.0243682861328125, 0.0017833709716796875, 0.8515625, 0.6953125, 0.08673095703125, 0.09429931640625, 0.1644287109375, 0.1417236328125, 0.67236328125, 2.822265625, 0.7744140625, 0.31689453125, 0.286865234375, 0.0560302734375, 0.666015625, 0.004749298095703125], "tokens": [1468, 434, 4296, 26, 496, 711, 7968, 322, 1135, 2154, 310, 438, 312, 324, 434, 3395, 32, 324, 415, 308, 2544, 32, 297, 3180, 720, 1157, 301, 1090, 442, 45, 324, 320, 1064, 434, 4296, 26, 496, 711, 7968, 322, 1135, 2154, 310, 438, 312, 3395, 32, 324, 415, 308, 2544, 32]}
