{"line_number": 367, "line_type": "original", "code": "        registerMismatch(rightType, leftType, null);", "entropy": 1.7236328125, "is_bug_line": true, "sus_score": 0.6324555320336759, "per_token_entropy": [7.33203125, 11.6875, 0.25927734375, 0.0260009765625, 0.78076171875, 0.059173583984375, 0.00630950927734375, 0.1480712890625, 0.002643585205078125, 0.0982666015625, 0.273193359375, 0.0126953125], "tokens": [351, 3909, 31102, 26, 990, 620, 30, 2841, 620, 30, 744, 293]}
{"line_number": 367, "line_type": "generated", "code": "\n   *\n   * @param t The node traversal.\n   * @param n The CALL node.\n   * @param argIndex The index of the argument to check.\n   * @param paramIndex The index of the parameter to check.\n   * @param", "entropy": 0.22607421875, "is_bug_line": true, "sus_score": 0.6324555320336759, "per_token_entropy": [0.41162109375, 0.037811279296875, 0.5068359375, 0.0017719268798828125, 0.0501708984375, 0.0036563873291015625, 0.04345703125, 0.01177978515625, 0.018951416015625, 0.004055023193359375, 0.01474761962890625, 0.0019989013671875, 0.000377655029296875, 0.0001157522201538086, 0.00018978118896484375, 0.41162109375, 0.022186279296875, 0.90576171875, 0.2030029296875, 1.236328125, 0.00811004638671875, 0.06298828125, 0.000583648681640625, 0.01033782958984375, 1.453125, 0.9921875, 0.06683349609375, 0.2509765625, 0.05377197265625, 0.027008056640625, 0.135498046875, 0.98193359375, 0.4775390625, 0.1741943359375, 0.032745361328125, 0.0679931640625, 0.0029888153076171875, 0.032073974609375, 1.4697265625, 0.5107421875, 0.00566864013671875, 0.0103912353515625, 0.0031795501708984375, 0.001956939697265625, 0.18896484375, 0.2166748046875, 0.0350341796875, 0.045989990234375, 0.02581787109375, 0.29296875, 0.0099639892578125, 0.221923828125], "tokens": [664, 319, 664, 319, 477, 753, 273, 886, 1541, 34395, 32, 664, 319, 477, 753, 310, 886, 16084, 1541, 32, 664, 319, 477, 753, 1638, 1284, 886, 1650, 432, 322, 2793, 372, 1505, 32, 664, 319, 477, 753, 4356, 1284, 886, 1650, 432, 322, 3395, 372, 1505, 32, 664, 319, 477, 753]}
{"line_number": 406, "line_type": "original", "code": "        registerMismatch(rightType, leftType, null);", "entropy": 1.74609375, "is_bug_line": true, "sus_score": 0.4472135954999579, "per_token_entropy": [4.59765625, 9.5390625, 0.48876953125, 0.03643798828125, 6.046875, 0.02655029296875, 0.00327301025390625, 0.01398468017578125, 0.00042557716369628906, 0.0260772705078125, 0.1385498046875, 0.0292205810546875], "tokens": [351, 3909, 31102, 26, 990, 620, 30, 2841, 620, 30, 744, 293]}
{"line_number": 406, "line_type": "generated", "code": ")));\n    }\n  }\n\n  /**\n   * Expect that the first type can be assigned to the second type.\n   *\n   * @param t The node traversal.\n   * @param n The node to issue warnings on.\n   * @param rightType The", "entropy": 0.16943359375, "is_bug_line": true, "sus_score": 0.4472135954999579, "per_token_entropy": [0.3388671875, 0.091796875, 0.0012493133544921875, 0.0198974609375, 0.0002849102020263672, 0.105224609375, 0.09521484375, 0.01556396484375, 6.020069122314453e-05, 0.447509765625, 0.03173828125, 0.267822265625, 0.86376953125, 0.0264434814453125, 0.4130859375, 0.72412109375, 1.87890625, 0.034027099609375, 1.0224609375, 0.034088134765625, 0.6884765625, 0.338623046875, 0.06951904296875, 0.0006089210510253906, 0.1854248046875, 0.00034546852111816406, 0.028106689453125, 0.0021209716796875, 0.019622802734375, 0.002147674560546875, 0.00939178466796875, 0.0021648406982421875, 0.00341033935546875, 0.0001914501190185547, 0.00026345252990722656, 0.00017249584197998047, 3.159046173095703e-05, 0.0172882080078125, 0.0038051605224609375, 0.0102996826171875, 0.0098114013671875, 0.004367828369140625, 0.0009975433349609375, 0.0006403923034667969, 0.0016765594482421875, 0.0005578994750976562, 0.00023424625396728516, 0.00018453598022460938, 0.0009121894836425781, 0.96337890625, 0.0292205810546875, 0.0074920654296875], "tokens": [4236, 284, 320, 334, 320, 719, 1022, 664, 319, 9177, 688, 322, 1932, 827, 883, 526, 11012, 372, 322, 3100, 827, 32, 664, 319, 664, 319, 477, 753, 273, 886, 1541, 34395, 32, 664, 319, 477, 753, 310, 886, 1541, 372, 2427, 11685, 544, 32, 664, 319, 477, 753, 2091, 620, 886]}
{"line_number": 534, "line_type": "original", "code": "        info = parent.getJSDocInfo();", "entropy": 1.7353515625, "is_bug_line": false, "sus_score": 0.16064386578049977, "per_token_entropy": [6.3359375, 8.1875, 0.1517333984375, 4.296875, 0.012786865234375, 0.05841064453125, 0.019500732421875, 4.0650367736816406e-05, 3.5762786865234375e-07, 0.0004668235778808594, 0.024017333984375], "tokens": [351, 3099, 280, 2935, 32, 371, 60, 3181, 542, 1120, 473]}
{"line_number": 534, "line_type": "generated", "code": "\n    return newVar;\n  }", "entropy": 0.1031494140625, "is_bug_line": false, "sus_score": 0.16064386578049977, "per_token_entropy": [0.36474609375, 0.18896484375, 0.10888671875, 0.0001609325408935547, 0.004032135009765625, 0.054290771484375, 0.001239776611328125], "tokens": [284, 442, 537, 1881, 45, 334, 320]}
{"line_number": 577, "line_type": "original", "code": "          report(JSError.make(sourceName, n, DUP_VAR_DECLARATION,", "entropy": 1.8408203125, "is_bug_line": false, "sus_score": 0.1432229748078866, "per_token_entropy": [5.16796875, 3.015625, 0.61328125, 0.233642578125, 0.0131683349609375, 0.0008678436279296875, 0.00012671947479248047, 0.0037403106689453125, 4.0078125, 0.0323486328125, 0.00746917724609375, 1.8232421875, 0.002445220947265625, 10.609375, 0.322509765625, 5.67578125, 5.95703125, 0.021575927734375, 0.1588134765625, 2.794921875, 0.003078460693359375, 0.040985107421875], "tokens": [2033, 3639, 26, 60, 21887, 32, 2682, 26, 1855, 558, 30, 310, 30, 475, 2418, 81, 7416, 81, 7549, 783, 2893, 30]}
{"line_number": 577, "line_type": "generated", "code": "\n      checkInterfaceMethod(t, propNode,\n          propSlot.getType(), implementedInterface, prop);\n    }\n  }\n\n  /**\n   * Expect that all methods on interfaces that this type implements are\n   * implemented and correctly typed.\n   */\n  void expect", "entropy": 0.377197265625, "is_bug_line": false, "sus_score": 0.1432229748078866, "per_token_entropy": [0.900390625, 2.611328125, 2.05859375, 0.9033203125, 0.49072265625, 0.421630859375, 0.0247802734375, 0.6650390625, 0.177978515625, 0.0248260498046875, 1.5625, 0.677734375, 0.31591796875, 0.0149688720703125, 0.3330078125, 0.2471923828125, 0.876953125, 0.00017774105072021484, 0.50732421875, 0.307373046875, 0.287841796875, 0.0638427734375, 4.1365623474121094e-05, 0.00698089599609375, 0.0002789497375488281, 0.2861328125, 0.3369140625, 0.05035400390625, 0.00019621849060058594, 1.7529296875, 0.0821533203125, 1.3740234375, 1.2412109375, 0.284423828125, 0.3603515625, 0.0279998779296875, 0.01171875, 0.0083465576171875, 0.0182342529296875, 0.0208587646484375, 0.01291656494140625, 0.00017535686492919922, 0.0113067626953125, 0.047119140625, 0.0022983551025390625, 0.0004801750183105469, 0.0248260498046875, 0.04058837890625, 0.02191162109375, 0.0008306503295898438, 0.0963134765625, 0.0175933837890625], "tokens": [397, 1505, 3041, 1868, 26, 102, 30, 7018, 1212, 30, 616, 7018, 9490, 32, 10272, 1026, 7586, 3041, 30, 7018, 293, 284, 320, 334, 320, 719, 1022, 664, 319, 9177, 688, 1169, 4438, 544, 14091, 688, 458, 827, 4575, 884, 664, 319, 7586, 461, 8464, 20639, 32, 664, 569, 334, 763, 1424]}
{"line_number": 677, "line_type": "original", "code": "      FunctionType fnTypeA = found.toMaybeFunctionType();", "entropy": 2.56640625, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [5.1640625, 8.5, 0.008575439453125, 1.5166015625, 0.38720703125, 5.484375, 0.0537109375, 10.3984375, 1.4345703125, 0.291015625, 0.0760498046875, 0.00931549072265625, 0.056060791015625], "tokens": [647, 4540, 620, 2771, 620, 51, 280, 2431, 32, 452, 13257, 44334, 473]}
{"line_number": 677, "line_type": "generated", "code": "\n            objectType.getConstructor().hasProperty(propName)) {\n          return objectType.getConstructor().getPropertyType(propName).toString();\n        } else {\n          return objectType.toString();\n        }\n      }\n    }\n\n    JSType type =", "entropy": 0.296630859375, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.180419921875, 0.263916015625, 0.0009427070617675781, 0.012359619140625, 0.22021484375, 0.5419921875, 0.035308837890625, 0.6728515625, 0.12548828125, 0.006763458251953125, 0.05072021484375, 0.0002906322479248047, 0.11407470703125, 0.0250396728515625, 0.306396484375, 0.923828125, 0.427734375, 2.8848648071289062e-05, 0.0118560791015625, 0.1563720703125, 0.30419921875, 0.11627197265625, 0.79248046875, 0.20263671875, 0.0024127960205078125, 0.2088623046875, 2.205371856689453e-05, 0.7216796875, 0.2108154296875, 0.049835205078125, 0.0299530029296875, 0.00025653839111328125, 1.44140625, 0.65185546875, 0.177978515625, 1.2529296875, 0.4873046875, 0.0032405853271484375, 0.0131988525390625, 1.6455078125, 0.6494140625, 0.00909423828125, 0.00019419193267822266, 0.00893402099609375, 2.562999725341797e-05, 0.296875, 0.0017061233520507812, 0.46142578125, 1.04296875, 0.00014030933380126953, 0.5302734375, 0.03472900390625], "tokens": [324, 1300, 620, 32, 371, 7932, 922, 2040, 1653, 26, 4641, 558, 490, 301, 616, 442, 1300, 620, 32, 371, 7932, 922, 12707, 620, 26, 4641, 558, 547, 3108, 473, 291, 320, 813, 301, 616, 442, 1300, 620, 32, 3108, 473, 291, 320, 397, 320, 284, 320, 446, 7750, 620, 827, 280]}
{"line_number": 678, "line_type": "original", "code": "      FunctionType fnTypeB = required.toMaybeFunctionType();", "entropy": 2.23828125, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [5.41015625, 4.6171875, 0.00437164306640625, 3.291015625, 0.366943359375, 7.9140625, 0.082763671875, 6.46875, 0.70458984375, 0.1300048828125, 0.10870361328125, 0.004962921142578125, 0.006195068359375], "tokens": [647, 4540, 620, 2771, 620, 52, 280, 2129, 32, 452, 13257, 44334, 473]}
{"line_number": 678, "line_type": "generated", "code": "\n          return objectType.getImplicitPrototype().\n              getPropertyType(propName).toString();\n        }\n\n        ObjectType protoType = objectType.getPrototype();\n        while (protoType!= null) {\n          if (protoType.hasProperty(propName))", "entropy": 0.33544921875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.21533203125, 1.11328125, 0.900390625, 0.0011692047119140625, 0.03399658203125, 0.65380859375, 0.60693359375, 0.023101806640625, 0.0755615234375, 1.744140625, 0.53369140625, 0.71484375, 0.00910186767578125, 0.007053375244140625, 0.001674652099609375, 0.0174560546875, 0.042083740234375, 0.030792236328125, 0.1383056640625, 0.0014400482177734375, 1.837890625, 2.123046875, 2.328125, 1.126953125, 0.0135498046875, 0.047088623046875, 2.3245811462402344e-05, 0.25244140625, 0.00577545166015625, 0.201904296875, 0.0294952392578125, 0.0302886962890625, 0.2958984375, 0.01224517822265625, 0.0278778076171875, 9.775161743164062e-06, 0.0080108642578125, 0.005672454833984375, 0.1484375, 0.0003306865692138672, 0.03167724609375, 0.93603515625, 0.031768798828125, 0.040802001953125, 2.276897430419922e-05, 0.005222320556640625, 0.85546875, 0.089599609375, 0.002979278564453125, 0.0194091796875, 8.082389831542969e-05, 0.06121826171875], "tokens": [616, 442, 1300, 620, 32, 371, 24461, 17534, 922, 1090, 46290, 620, 26, 4641, 558, 547, 3108, 473, 291, 320, 584, 42562, 3642, 620, 280, 1300, 620, 32, 371, 17534, 473, 291, 2218, 308, 1805, 620, 863, 744, 27, 301, 616, 415, 308, 1805, 620, 32, 2040, 1653, 26, 4641, 558, 490]}
{"line_number": 679, "line_type": "original", "code": "      Iterator<Node> paramItA = fnTypeA.getParameters().iterator();", "entropy": 1.7763671875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [3.84375, 10.671875, 0.04150390625, 4.6796875, 0.0016002655029296875, 4.16796875, 0.280517578125, 3.08984375, 0.0172119140625, 3.234375, 0.0024318695068359375, 0.04498291015625, 0.01284027099609375, 0.045654296875, 0.05023193359375, 0.003612518310546875, 0.012298583984375], "tokens": [647, 14743, 46, 1212, 48, 4356, 1011, 51, 280, 2771, 620, 51, 32, 44034, 922, 5162, 473]}
{"line_number": 679, "line_type": "generated", "code": "\n              objectType.getConstructor());\n        }\n        if (objectType!= null) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType jsType = getJSType(n);\n    if (", "entropy": 0.3056640625, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.65234375, 0.1978759765625, 0.0008168220520019531, 0.52294921875, 0.046722412109375, 0.446533203125, 0.9990234375, 0.36962890625, 7.212162017822266e-05, 0.413330078125, 1.6962890625, 0.05224609375, 0.1297607421875, 1.4066696166992188e-05, 0.66796875, 0.007404327392578125, 0.1982421875, 0.001644134521484375, 0.041961669921875, 2.349609375, 0.38330078125, 0.0003464221954345703, 0.021942138671875, 1.41015625, 0.0352783203125, 0.01023101806640625, 0.66845703125, 0.017425537109375, 0.037078857421875, 1.9669532775878906e-05, 0.029144287109375, 0.004047393798828125, 5.161762237548828e-05, 0.089599609375, 8.14199447631836e-05, 0.168701171875, 0.0008368492126464844, 0.418701171875, 1.244140625, 0.00018393993377685547, 1.8486328125, 0.004673004150390625, 0.0166778564453125, 0.1021728515625, 0.0053558349609375, 0.00018310546875, 0.00429534912109375, 0.008636474609375, 0.09912109375, 0.136962890625, 0.308349609375, 0.03106689453125], "tokens": [1090, 1300, 620, 32, 371, 7932, 1035, 291, 320, 291, 415, 308, 1473, 620, 863, 744, 27, 301, 616, 442, 1300, 620, 32, 3108, 346, 474, 17021, 474, 7018, 558, 45, 291, 320, 397, 320, 284, 320, 446, 7750, 620, 4060, 620, 280, 622, 4624, 620, 26, 96, 293, 284, 415, 308]}
{"line_number": 680, "line_type": "original", "code": "      Iterator<Node> paramItB = fnTypeB.getParameters().iterator();", "entropy": 1.5390625, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [5.06640625, 7.6953125, 0.04412841796875, 3.64453125, 0.0008144378662109375, 4.2421875, 0.410888671875, 3.4140625, 0.027557373046875, 1.36328125, 0.0020542144775390625, 0.0513916015625, 0.0269622802734375, 0.096923828125, 0.049346923828125, 0.00460052490234375, 0.01338958740234375], "tokens": [647, 14743, 46, 1212, 48, 4356, 1011, 52, 280, 2771, 620, 52, 32, 44034, 922, 5162, 473]}
{"line_number": 680, "line_type": "generated", "code": "\n        }\n        ObjectType prototype = objectType.getPrototype();\n        if (prototype!= null) {\n          return getReadableJSTypeName(prototype.getPropertyType(propName),\n              dereference);\n        }\n      }\n    }\n\n    JSType type = getJS", "entropy": 0.299560546875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.408447265625, 0.01418304443359375, 0.5771484375, 2.59765625, 2.041015625, 0.29150390625, 0.06744384765625, 3.075599670410156e-05, 0.0875244140625, 0.01174163818359375, 0.6171875, 0.0217437744140625, 0.048065185546875, 0.72119140625, 0.018157958984375, 0.037200927734375, 0.1409912109375, 0.00534820556640625, 0.1925048828125, 0.00395965576171875, 0.04083251953125, 1.8984375, 0.568359375, 0.0260467529296875, 0.0132598876953125, 0.0272216796875, 0.09527587890625, 0.1663818359375, 0.419921875, 0.095703125, 0.05596923828125, 0.007472991943359375, 0.0679931640625, 0.00010204315185546875, 0.1295166015625, 0.248291015625, 0.69287109375, 2.777576446533203e-05, 0.57177734375, 0.070068359375, 7.283687591552734e-05, 0.299560546875, 0.0003123283386230469, 0.149169921875, 0.00102996826171875, 0.395751953125, 0.970703125, 0.00017833709716796875, 0.49755859375, 0.039703369140625, 0.1151123046875, 0.006755828857421875], "tokens": [291, 320, 291, 42562, 21666, 280, 1300, 620, 32, 371, 17534, 473, 291, 415, 308, 3889, 863, 744, 27, 301, 616, 442, 622, 23422, 4624, 11444, 26, 3889, 32, 12707, 620, 26, 4641, 558, 471, 1090, 26810, 1787, 293, 291, 320, 397, 320, 284, 320, 446, 7750, 620, 827, 280, 622, 4624]}
{"line_number": 681, "line_type": "original", "code": "      while (paramItA.hasNext() && paramItB.hasNext()) {", "entropy": 1.6796875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [5.7890625, 5.0859375, 0.1773681640625, 13.1875, 1.4423828125, 1.0302734375, 0.0748291015625, 0.0031909942626953125, 1.28125, 0.1253662109375, 0.276123046875, 0.0007576942443847656, 0.006618499755859375, 0.00119781494140625, 0.00024509429931640625, 0.02703857421875, 0.05718994140625], "tokens": [647, 2218, 308, 753, 1011, 51, 32, 16421, 346, 962, 4356, 1011, 52, 32, 16421, 1157, 301]}
{"line_number": 681, "line_type": "generated", "code": "\n          objectType = objectType.getPropertyType(propName);\n        }\n        if (objectType!= null) {\n          return objectType.toString();\n        }\n      }\n    }\n\n    // If we're analyzing a GETPROP, the property may be", "entropy": 0.328125, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.28955078125, 1.212890625, 0.0002620220184326172, 0.0096588134765625, 0.28369140625, 0.00015437602996826172, 0.021087646484375, 0.70361328125, 0.0074462890625, 0.037841796875, 0.161865234375, 0.00015056133270263672, 0.03741455078125, 0.75146484375, 0.004337310791015625, 0.59033203125, 0.29296875, 0.01419830322265625, 0.05517578125, 3.6954879760742188e-06, 0.1031494140625, 0.007457733154296875, 0.0777587890625, 0.006290435791015625, 0.092041015625, 0.9599609375, 0.474365234375, 6.9141387939453125e-06, 0.004802703857421875, 0.08172607421875, 0.0255279541015625, 0.0061492919921875, 0.0002086162567138672, 0.0977783203125, 0.00028634071350097656, 0.2454833984375, 0.0013484954833984375, 0.55126953125, 1.1904296875, 1.7158203125, 0.59130859375, 0.3515625, 0.236328125, 0.00017189979553222656, 0.261962890625, 2.0, 0.8720703125, 0.7568359375, 0.8349609375, 0.4580078125, 0.26513671875, 0.32177734375], "tokens": [616, 1300, 620, 280, 1300, 620, 32, 12707, 620, 26, 4641, 558, 293, 291, 320, 291, 415, 308, 1473, 620, 863, 744, 27, 301, 616, 442, 1300, 620, 32, 3108, 473, 291, 320, 397, 320, 284, 320, 446, 434, 1670, 996, 4484, 17920, 26768, 312, 6272, 15262, 30, 322, 2804, 1631, 526]}
{"line_number": 686, "line_type": "original", "code": "      registerIfMismatch(", "entropy": 2.650390625, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [4.06640625, 8.71875, 0.427001953125, 0.03131103515625, 0.0049896240234375], "tokens": [647, 3909, 2797, 31102, 26]}
{"line_number": 686, "line_type": "generated", "code": "\n          if (objectType!= null) {\n            return objectType.toString() + \".\" + propName;\n          }\n        }\n      }\n    }\n\n    // Otherwise, just print the type of the node.\n    JSType type = getJSType(n", "entropy": 0.31591796875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [1.8330078125, 0.49658203125, 0.0181884765625, 0.036407470703125, 1.71661376953125e-05, 0.2213134765625, 0.0008640289306640625, 0.416259765625, 0.0041961669921875, 0.034393310546875, 0.6689453125, 0.2861328125, 0.00026988983154296875, 0.0278472900390625, 0.338134765625, 0.51220703125, 0.006153106689453125, 0.371337890625, 0.00974273681640625, 0.05010986328125, 5.137920379638672e-05, 0.0252838134765625, 0.0152740478515625, 0.0004699230194091797, 0.224609375, 0.002414703369140625, 0.267822265625, 0.02227783203125, 0.465087890625, 0.019622802734375, 0.62109375, 1.2470703125, 1.6044921875, 0.27197265625, 0.411865234375, 2.310546875, 0.46142578125, 0.5107421875, 0.54833984375, 0.08734130859375, 0.28466796875, 0.431396484375, 0.0657958984375, 0.6591796875, 5.841255187988281e-05, 0.383056640625, 0.0193939208984375, 0.1068115234375, 0.004058837890625, 0.00010383129119873047, 0.0038204193115234375, 0.007476806640625], "tokens": [616, 415, 308, 1473, 620, 863, 744, 27, 301, 324, 442, 1300, 620, 32, 3108, 346, 474, 17021, 474, 7018, 558, 45, 616, 320, 291, 320, 397, 320, 284, 320, 446, 434, 12779, 30, 2258, 1459, 322, 827, 432, 322, 1541, 32, 284, 7750, 620, 827, 280, 622, 4624, 620, 26, 96]}
{"line_number": 693, "line_type": "original", "code": "    if (found != null && required != null &&", "entropy": 1.744140625, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [4.94921875, 3.15234375, 0.09747314453125, 5.4921875, 1.5576171875, 0.11468505859375, 0.73291015625, 1.337890625, 0.043853759765625, 0.0010509490966796875, 1.7099609375], "tokens": [264, 415, 308, 6264, 863, 744, 962, 2129, 863, 744, 962]}
{"line_number": 693, "line_type": "generated", "code": "\n        }\n      }\n    }\n\n    // Otherwise, just show the type of the node.\n    JSType type = getJSType(n);\n    if (dereference) {\n      type = type.dereference();\n    }\n    return type.toString();", "entropy": 0.2607421875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.343017578125, 0.0623779296875, 0.52783203125, 0.0012464523315429688, 0.169189453125, 0.0016431808471679688, 0.4443359375, 1.26953125, 2.052734375, 0.20849609375, 0.49560546875, 1.3798828125, 0.1156005859375, 0.73583984375, 0.8447265625, 0.0841064453125, 0.32275390625, 0.3583984375, 0.0809326171875, 0.845703125, 8.308887481689453e-05, 0.3642578125, 0.0191802978515625, 0.0965576171875, 0.0038318634033203125, 0.00014317035675048828, 0.0038738250732421875, 0.0113983154296875, 0.1038818359375, 0.07275390625, 0.290771484375, 0.046295166015625, 0.140869140625, 2.0265579223632812e-06, 0.35009765625, 0.012298583984375, 0.0184173583984375, 0.2384033203125, 0.0007014274597167969, 0.022796630859375, 0.005405426025390625, 0.005931854248046875, 3.4570693969726562e-06, 0.034027099609375, 0.076171875, 4.017353057861328e-05, 0.460205078125, 0.437744140625, 0.09893798828125, 0.271484375, 0.01275634765625, 0.0167083740234375], "tokens": [291, 320, 397, 320, 284, 320, 446, 434, 12779, 30, 2258, 2519, 322, 827, 432, 322, 1541, 32, 284, 7750, 620, 827, 280, 622, 4624, 620, 26, 96, 293, 284, 415, 308, 23881, 1787, 27, 301, 397, 827, 280, 827, 32, 23881, 1787, 473, 284, 320, 284, 442, 827, 32, 3108, 473]}
{"line_number": 697, "line_type": "original", "code": "  }", "entropy": 1.5302734375, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [2.771484375, 0.2890625], "tokens": [225, 320]}
{"line_number": 697, "line_type": "generated", "code": "\n\n    return n.getQualifiedName();\n  }\n\n  /**\n   * Given a node, get a human-readable name for the type of that node so\n   * that will be easy for the programmer to find the original declaration.\n   *\n   * For example,", "entropy": 0.2215576171875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [1.015625, 1.2705078125, 0.546875, 0.0084228515625, 1.6181640625, 0.486328125, 0.0360107421875, 0.0259857177734375, 0.0014753341674804688, 0.341552734375, 0.40771484375, 0.07318115234375, 0.00032973289489746094, 1.6298828125, 0.1229248046875, 1.154296875, 0.44677734375, 0.541015625, 0.2470703125, 0.1650390625, 0.01274871826171875, 0.00067138671875, 0.12158203125, 0.03765869140625, 0.0426025390625, 0.0545654296875, 0.0288848876953125, 0.0189971923828125, 0.007167816162109375, 0.207275390625, 0.04376220703125, 2.8967857360839844e-05, 0.002490997314453125, 0.04913330078125, 0.000560760498046875, 0.002140045166015625, 0.004486083984375, 0.005252838134765625, 0.0017824172973632812, 0.0008463859558105469, 0.00531005859375, 0.0085601806640625, 0.0113677978515625, 0.00594329833984375, 0.006412506103515625, 0.004055023193359375, 0.21923828125, 0.0968017578125, 0.0002779960632324219, 0.38134765625, 0.0019989013671875, 0.0004000663757324219], "tokens": [446, 442, 310, 32, 371, 41340, 473, 334, 320, 719, 1022, 664, 319, 15273, 312, 1541, 30, 622, 312, 13462, 31, 18210, 636, 436, 322, 827, 432, 688, 1541, 1259, 664, 319, 688, 1098, 526, 8792, 436, 322, 46718, 372, 2290, 322, 4707, 13317, 32, 664, 319, 664, 319, 2616, 2280, 30]}
{"line_number": 532, "line_type": "original", "code": "      JSDocInfo info = n.getJSDocInfo();", "entropy": 0.974609375, "is_bug_line": false, "sus_score": 0.12777531299998798, "per_token_entropy": [5.2421875, 7.6953125, 0.03021240234375, 3.7550926208496094e-05, 0.0005154609680175781, 0.277099609375, 0.09613037109375, 1.232421875, 0.00540924072265625, 0.009246826171875, 0.0008063316345214844, 4.5299530029296875e-06, 5.960464477539062e-07, 3.0994415283203125e-05, 0.0290374755859375], "tokens": [647, 971, 3181, 542, 1120, 3099, 280, 310, 32, 371, 60, 3181, 542, 1120, 473]}
{"line_number": 532, "line_type": "generated", "code": "\n      }\n    }\n\n    return newVar;\n  }\n\n  /**\n   * Expect that the given variable has a given type.\n   *\n   * @param t The node traversal.\n   * @param n The node where warnings should point to.\n   * @", "entropy": 0.265869140625, "is_bug_line": false, "sus_score": 0.12777531299998798, "per_token_entropy": [0.86669921875, 0.0792236328125, 0.186279296875, 6.020069122314453e-05, 0.92333984375, 0.384521484375, 0.01605224609375, 7.545948028564453e-05, 0.0014257431030273438, 0.106201171875, 0.0007605552673339844, 0.1947021484375, 0.2283935546875, 0.0222320556640625, 0.00010073184967041016, 1.5390625, 0.11895751953125, 0.31689453125, 0.374267578125, 0.76318359375, 0.3642578125, 1.91796875, 2.23828125, 0.1395263671875, 0.1859130859375, 0.5048828125, 0.0032520294189453125, 0.08984375, 0.00010120868682861328, 0.053466796875, 0.00787353515625, 1.216796875, 0.018280029296875, 0.11285400390625, 0.0188140869140625, 0.049835205078125, 0.003940582275390625, 8.690357208251953e-05, 0.0005350112915039062, 0.00011157989501953125, 0.2425537109375, 0.01317596435546875, 0.06878662109375, 0.1048583984375, 0.03106689453125, 0.004337310791015625, 0.016326904296875, 0.271484375, 0.0090789794921875, 0.0079803466796875, 0.00018799304962158203, 0.0007157325744628906], "tokens": [397, 320, 284, 320, 446, 442, 537, 1881, 45, 334, 320, 719, 1022, 664, 319, 9177, 688, 322, 2702, 2677, 1401, 312, 2702, 827, 32, 664, 319, 664, 319, 477, 753, 273, 886, 1541, 34395, 32, 664, 319, 477, 753, 310, 886, 1541, 2154, 11685, 1395, 2260, 372, 32, 664, 319, 477]}
{"line_number": 533, "line_type": "original", "code": "      if (info == null) {", "entropy": 1.7412109375, "is_bug_line": false, "sus_score": 0.12777531299998798, "per_token_entropy": [5.08203125, 1.6474609375, 0.4853515625, 2.2421875, 3.0078125, 0.0088653564453125, 1.390625, 0.06451416015625], "tokens": [647, 415, 308, 1338, 610, 744, 27, 301]}
{"line_number": 533, "line_type": "generated", "code": "\n      // Only warn about overriding the type of a declared variable if the\n      // type is more specific than the declared type.\n      //\n      // This is a bit tricky, because the declared type might be a subtype\n      // of the overriding type. For example", "entropy": 1.0361328125, "is_bug_line": false, "sus_score": 0.12777531299998798, "per_token_entropy": [1.6748046875, 1.5517578125, 2.884765625, 1.3046875, 0.390380859375, 2.892578125, 2.537109375, 0.266357421875, 0.419189453125, 0.71484375, 3.46484375, 0.466796875, 1.0576171875, 0.8359375, 0.2113037109375, 0.0004317760467529297, 1.9326171875, 1.0234375, 1.4658203125, 0.296630859375, 0.410400390625, 0.08612060546875, 1.0986328125, 0.058929443359375, 0.1463623046875, 0.330078125, 1.5673828125, 0.45361328125, 0.0018768310546875, 2.73046875, 1.072265625, 1.8447265625, 2.958984375, 2.171875, 1.72265625, 0.46044921875, 1.703125, 0.60205078125, 0.1151123046875, 1.3408203125, 0.814453125, 1.27734375, 1.083984375, 0.16064453125, 0.00038242340087890625, 0.1015625, 0.08770751953125, 1.970703125, 0.024017333984375, 0.59375, 1.4580078125, 0.043243408203125], "tokens": [397, 434, 9287, 17161, 2625, 37599, 322, 827, 432, 312, 17103, 2677, 415, 322, 397, 434, 827, 438, 1829, 2818, 2784, 322, 17103, 827, 32, 397, 434, 397, 434, 1348, 438, 312, 3493, 39621, 30, 3301, 322, 17103, 827, 4796, 526, 312, 36991, 397, 434, 432, 322, 37599, 827, 32, 2616, 2280]}
{"line_number": 536, "line_type": "original", "code": "      allowDupe =", "entropy": 1.8701171875, "is_bug_line": false, "sus_score": 0.12777531299998798, "per_token_entropy": [4.73046875, 4.328125, 0.0022430419921875, 2.7179718017578125e-05, 0.29248046875], "tokens": [647, 2608, 54, 24720, 280]}
{"line_number": 536, "line_type": "generated", "code": "\n    return var;\n  }\n\n  /**\n   * Expect that the given variable has been declared with a type.\n   *\n   * @param sourceName The name of the source file we're in.\n   * @param n The node where warnings should point to", "entropy": 0.1905517578125, "is_bug_line": false, "sus_score": 0.12777531299998798, "per_token_entropy": [1.3701171875, 1.0673828125, 0.341796875, 0.015411376953125, 0.1929931640625, 0.0016298294067382812, 0.2388916015625, 0.2369384765625, 0.02178955078125, 0.0001087188720703125, 1.5546875, 0.1287841796875, 0.292236328125, 0.331787109375, 0.68212890625, 0.34521484375, 1.0244140625, 0.047760009765625, 0.30419921875, 0.32177734375, 0.11590576171875, 0.2232666015625, 0.2349853515625, 0.0035114288330078125, 0.092041015625, 0.00012159347534179688, 0.0287933349609375, 0.006580352783203125, 0.368408203125, 0.0050048828125, 0.004711151123046875, 0.016815185546875, 0.0005135536193847656, 0.0008292198181152344, 0.00966644287109375, 0.004138946533203125, 0.0283660888671875, 0.00177001953125, 0.003391265869140625, 0.0022487640380859375, 0.0014057159423828125, 7.069110870361328e-05, 0.0006537437438964844, 7.557868957519531e-05, 0.09442138671875, 0.0038433074951171875, 0.019622802734375, 0.02081298828125, 0.01161956787109375, 0.00197601318359375, 0.00391387939453125, 0.076416015625], "tokens": [284, 442, 773, 45, 334, 320, 719, 1022, 664, 319, 9177, 688, 322, 2702, 2677, 1401, 2583, 17103, 623, 312, 827, 32, 664, 319, 664, 319, 477, 753, 1914, 558, 886, 636, 432, 322, 1914, 803, 996, 4484, 328, 32, 664, 319, 477, 753, 310, 886, 1541, 2154, 11685, 1395, 2260, 372]}
{"line_number": 386, "line_type": "original", "code": "      return false;", "entropy": 3.400390625, "is_bug_line": true, "sus_score": 0.12060453783110543, "per_token_entropy": [9.28125, 2.306640625, 1.9736328125, 0.0391845703125], "tokens": [647, 442, 901, 45]}
{"line_number": 386, "line_type": "generated", "code": "\n\n  /**\n   * Expect that the type of the return value matches the return type\n   * of the function.\n   *\n   * @param t The node traversal.\n   * @param n The node to issue warnings on.\n   * @param returnType The return", "entropy": 0.2861328125, "is_bug_line": true, "sus_score": 0.12060453783110543, "per_token_entropy": [0.54052734375, 0.1318359375, 0.021484375, 8.416175842285156e-05, 0.556640625, 0.09161376953125, 0.358642578125, 0.60986328125, 0.08038330078125, 1.794921875, 2.59765625, 0.2069091796875, 0.62451171875, 0.08001708984375, 2.0546875, 0.0701904296875, 0.9638671875, 0.00013756752014160156, 0.93212890625, 0.057708740234375, 0.1612548828125, 0.638671875, 0.0291748046875, 0.002490997314453125, 0.016387939453125, 0.0002505779266357422, 0.00911712646484375, 0.0006561279296875, 0.0191192626953125, 0.003047943115234375, 0.00919342041015625, 0.0021514892578125, 0.00495147705078125, 0.0005168914794921875, 9.298324584960938e-05, 0.0001628398895263672, 5.841255187988281e-05, 0.057464599609375, 0.006683349609375, 0.1641845703125, 0.0239410400390625, 0.0022869110107421875, 0.0009775161743164062, 0.0007243156433105469, 0.002483367919921875, 0.0009655952453613281, 0.0005497932434082031, 0.0003132820129394531, 0.0007224082946777344, 0.5712890625, 0.006763458251953125, 1.361328125], "tokens": [719, 1022, 664, 319, 9177, 688, 322, 827, 432, 322, 442, 786, 8001, 322, 442, 827, 664, 319, 432, 322, 667, 32, 664, 319, 664, 319, 477, 753, 273, 886, 1541, 34395, 32, 664, 319, 477, 753, 310, 886, 1541, 372, 2427, 11685, 544, 32, 664, 319, 477, 753, 40944, 886, 442]}
{"line_number": 366, "line_type": "original", "code": "      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {", "entropy": 0.394287109375, "is_bug_line": true, "sus_score": 0.11952286093343936, "per_token_entropy": [4.64453125, 2.7109375, 4.15234375, 0.6201171875, 0.07098388671875, 0.032012939453125, 0.32958984375, 0.232177734375, 0.01369476318359375, 0.0950927734375, 0.1741943359375, 0.000270843505859375, 0.0009775161743164062, 0.01434326171875, 0.0116119384765625, 0.007205963134765625, 0.021697998046875, 0.04833984375, 0.1492919921875, 0.01021575927734375, 0.0002008676528930664, 0.0011959075927734375, 0.004367828369140625, 0.006011962890625, 0.00244903564453125, 0.006175994873046875, 0.005466461181640625, 4.0411949157714844e-05, 0.0006570816040039062, 0.00316619873046875, 0.00015544891357421875, 0.00022339820861816406, 0.019744873046875, 0.0204925537109375], "tokens": [647, 415, 1833, 1873, 620, 32, 297, 7932, 346, 1276, 2841, 620, 32, 297, 2759, 620, 1157, 962, 308, 990, 620, 32, 297, 7932, 346, 1276, 2091, 620, 32, 297, 2759, 620, 5156, 301]}
{"line_number": 366, "line_type": "generated", "code": "\n   * Expect that the first type can be assigned to a symbol of the second\n   * type.\n   *\n   * @param t The node traversal.\n   * @param n The node to issue warnings on.\n   * @param rightType The type on", "entropy": 0.09466552734375, "is_bug_line": true, "sus_score": 0.11952286093343936, "per_token_entropy": [0.90625, 0.09808349609375, 0.51025390625, 0.08612060546875, 0.2086181640625, 0.6708984375, 0.03887939453125, 0.48583984375, 0.0287933349609375, 0.1844482421875, 0.02008056640625, 0.337646484375, 0.3173828125, 0.02716064453125, 0.0089263916015625, 0.039703369140625, 0.07733154296875, 0.0005593299865722656, 0.0018463134765625, 0.142333984375, 0.183349609375, 0.00974273681640625, 0.03900146484375, 0.0006041526794433594, 0.0213623046875, 0.0035114288330078125, 0.07122802734375, 0.0046234130859375, 0.005382537841796875, 0.0007772445678710938, 0.0020008087158203125, 0.0031261444091796875, 0.00023627281188964844, 0.00010418891906738281, 0.00011897087097167969, 0.0289764404296875, 0.003467559814453125, 0.0738525390625, 0.0035533905029296875, 0.000919342041015625, 0.00031638145446777344, 0.00021088123321533203, 0.0011720657348632812, 0.0109100341796875, 0.0005044937133789062, 0.0010166168212890625, 0.0007071495056152344, 0.2017822265625, 0.042205810546875, 0.004306793212890625, 0.0035266876220703125, 0.007541656494140625], "tokens": [664, 319, 9177, 688, 322, 1932, 827, 883, 526, 11012, 372, 312, 6977, 432, 322, 3100, 664, 319, 827, 32, 664, 319, 664, 319, 477, 753, 273, 886, 1541, 34395, 32, 664, 319, 477, 753, 310, 886, 1541, 372, 2427, 11685, 544, 32, 664, 319, 477, 753, 2091, 620, 886, 827, 544]}
{"line_number": 574, "line_type": "original", "code": "        if (!(allowDupe ||", "entropy": 3.716796875, "is_bug_line": false, "sus_score": 0.11846977555181847, "per_token_entropy": [3.396484375, 0.666015625, 4.9453125, 10.171875, 5.46875, 0.30615234375, 1.064453125], "tokens": [351, 415, 11007, 4568, 54, 24720, 1276]}
{"line_number": 574, "line_type": "generated", "code": "\n        if (propNode!= null) {\n          JSType propType = propSlot.getType();\n          if (propType == null) {\n            propType = typeRegistry.getNativeType(UNKNOWN_TYPE);\n          }\n          if (propType.", "entropy": 0.3095703125, "is_bug_line": false, "sus_score": 0.11846977555181847, "per_token_entropy": [1.8642578125, 0.84130859375, 0.2406005859375, 0.1383056640625, 0.1280517578125, 0.755859375, 0.00862884521484375, 0.734375, 0.01355743408203125, 0.137451171875, 1.03515625, 0.0007905960083007812, 1.3212890625, 0.1429443359375, 0.0168304443359375, 0.464599609375, 0.266845703125, 0.0008535385131835938, 0.204833984375, 0.04827880859375, 0.1439208984375, 0.77392578125, 0.294189453125, 0.057586669921875, 0.040130615234375, 0.63671875, 0.0234222412109375, 0.265869140625, 0.00504302978515625, 0.03131103515625, 1.1533203125, 0.10491943359375, 0.00023555755615234375, 0.50146484375, 0.005367279052734375, 0.00041556358337402344, 0.01837158203125, 0.0025997161865234375, 0.08660888671875, 0.0009708404541015625, 0.048583984375, 9.632110595703125e-05, 0.00015938282012939453, 0.005298614501953125, 0.07244873046875, 5.555152893066406e-05, 0.394775390625, 1.34375, 0.86083984375, 0.1966552734375, 0.20703125, 0.45849609375], "tokens": [291, 415, 308, 4641, 1212, 863, 744, 27, 301, 616, 7750, 620, 7018, 620, 280, 7018, 9490, 32, 10272, 473, 616, 415, 308, 4641, 620, 610, 744, 27, 301, 324, 7018, 620, 280, 827, 5378, 32, 371, 6134, 620, 26, 14174, 81, 2319, 293, 616, 320, 616, 415, 308, 4641, 620, 32]}
{"line_number": 674, "line_type": "original", "code": "    mismatches.add(new TypeMismatch(found, required, error));", "entropy": 2.107421875, "is_bug_line": false, "sus_score": 0.05741692517632146, "per_token_entropy": [4.69140625, 11.9921875, 1.78125, 0.9716796875, 1.001953125, 0.2132568359375, 2.29296875, 2.43359375, 0.0251312255859375, 0.152587890625, 4.6875, 0.19775390625, 0.1822509765625, 0.79833984375, 2.236328125, 0.073486328125], "tokens": [264, 3980, 8933, 32, 669, 26, 890, 2768, 31102, 26, 6264, 30, 2129, 30, 1048, 876]}
{"line_number": 674, "line_type": "generated", "code": "\n      return objectType.getReadableTypeName() + \".\" + n.getLastChild().getString();\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      type = type.dereference();\n    }\n    return type", "entropy": 0.248291015625, "is_bug_line": false, "sus_score": 0.05741692517632146, "per_token_entropy": [0.2208251953125, 2.134765625, 0.418701171875, 0.0014438629150390625, 0.129150390625, 0.78173828125, 0.320556640625, 0.9052734375, 0.69384765625, 0.0997314453125, 0.6513671875, 0.17919921875, 0.276611328125, 0.0010786056518554688, 0.8232421875, 0.0030536651611328125, 0.0283355712890625, 0.036834716796875, 0.076171875, 0.052947998046875, 8.738040924072266e-05, 0.75830078125, 1.25, 0.00022280216217041016, 0.568359375, 0.039520263671875, 0.08966064453125, 0.004302978515625, 0.00016498565673828125, 0.005100250244140625, 0.00738525390625, 0.1856689453125, 0.2071533203125, 0.290771484375, 0.052520751953125, 0.140869140625, 1.0728836059570312e-06, 0.27099609375, 0.01422119140625, 0.01253509521484375, 0.19189453125, 0.0007615089416503906, 0.0170135498046875, 0.004306793212890625, 0.0052947998046875, 2.5033950805664062e-06, 0.0303192138671875, 0.035552978515625, 0.00022864341735839844, 0.4638671875, 0.392822265625, 0.035736083984375], "tokens": [397, 442, 1300, 620, 32, 371, 23422, 11444, 346, 474, 17021, 474, 310, 32, 20197, 2931, 922, 7069, 473, 284, 320, 446, 7750, 620, 827, 280, 622, 4624, 620, 26, 96, 293, 284, 415, 308, 23881, 1787, 27, 301, 397, 827, 280, 827, 32, 23881, 1787, 473, 284, 320, 284, 442, 827]}
{"line_number": 675, "line_type": "original", "code": "    if (found.isFunctionType() &&", "entropy": 2.341796875, "is_bug_line": false, "sus_score": 0.05741692517632146, "per_token_entropy": [6.12890625, 2.056640625, 0.1026611328125, 7.5, 2.193359375, 0.68994140625, 0.042572021484375, 1.83984375, 0.52294921875], "tokens": [264, 415, 308, 6264, 32, 39504, 620, 346, 962]}
{"line_number": 675, "line_type": "generated", "code": "\n        if (objectType.isFunctionType()) {\n          // If it's a function, then the property must be on the prototype\n          // of the function.\n          FunctionType fnType = objectType.toMaybeFunctionType();\n          JSType parent = fnType", "entropy": 0.6416015625, "is_bug_line": false, "sus_score": 0.05741692517632146, "per_token_entropy": [0.295166015625, 1.794921875, 0.1151123046875, 0.397705078125, 0.0007290840148925781, 0.06304931640625, 1.3251953125, 0.541015625, 0.1998291015625, 0.00455474853515625, 0.035552978515625, 2.0234375, 2.123046875, 2.138671875, 0.19873046875, 0.23388671875, 0.2364501953125, 0.364501953125, 1.65625, 1.8095703125, 0.79541015625, 1.8427734375, 0.84814453125, 1.3056640625, 0.30224609375, 0.341796875, 0.974609375, 0.29833984375, 1.46484375, 0.41357421875, 0.2337646484375, 0.66064453125, 0.34326171875, 1.1123046875, 0.003299713134765625, 1.1640625, 0.1866455078125, 0.00360107421875, 0.055206298828125, 1.1086463928222656e-05, 0.007144927978515625, 0.044097900390625, 0.048675537109375, 0.005428314208984375, 0.0032100677490234375, 0.07305908203125, 1.6982421875, 0.0194244384765625, 2.51171875, 0.86962890625, 0.20068359375, 1.239776611328125e-05], "tokens": [291, 415, 308, 1473, 620, 32, 39504, 620, 1157, 301, 616, 434, 1670, 561, 1182, 312, 667, 30, 1615, 322, 2804, 2298, 526, 544, 322, 21666, 616, 434, 432, 322, 667, 32, 616, 4540, 620, 2771, 620, 280, 1300, 620, 32, 452, 13257, 44334, 473, 616, 7750, 620, 2935, 280, 2771, 620]}
{"line_number": 689, "line_type": "original", "code": "  }", "entropy": 2.38671875, "is_bug_line": false, "sus_score": 0.05741692517632146, "per_token_entropy": [3.203125, 1.568359375], "tokens": [225, 320]}
{"line_number": 689, "line_type": "generated", "code": "\n        if (objectType!= null &&\n           !objectType.isFunctionType() &&\n           !objectType.isUnknownType() &&\n           !objectType.isNoType()) {\n          return objectType.toString();\n        }\n      }\n    }\n\n    //", "entropy": 0.294677734375, "is_bug_line": false, "sus_score": 0.05741692517632146, "per_token_entropy": [0.6904296875, 0.5810546875, 0.0229644775390625, 0.06292724609375, 1.800060272216797e-05, 0.2008056640625, 0.00217437744140625, 0.609375, 1.0146484375, 1.2021484375, 0.2366943359375, 0.0001538991928100586, 0.0004963874816894531, 0.61572265625, 0.453125, 0.09210205078125, 0.012237548828125, 0.038421630859375, 0.38427734375, 0.06884765625, 0.00049591064453125, 0.0011415481567382812, 0.2578125, 0.61572265625, 0.004058837890625, 0.7666015625, 0.009521484375, 0.02001953125, 0.268798828125, 0.06884765625, 0.0013713836669921875, 0.0006985664367675781, 0.44921875, 2.0625, 0.40380859375, 0.44580078125, 0.015472412109375, 0.08111572265625, 0.67626953125, 0.4775390625, 0.0002186298370361328, 0.01531982421875, 0.1593017578125, 0.261474609375, 0.0089874267578125, 0.0026226043701171875, 0.218505859375, 0.0006113052368164062, 0.13671875, 0.0013265609741210938, 0.468994140625, 1.138671875], "tokens": [291, 415, 308, 1473, 620, 863, 744, 962, 324, 653, 1473, 620, 32, 39504, 620, 346, 962, 324, 653, 1473, 620, 32, 297, 5842, 620, 346, 962, 324, 653, 1473, 620, 32, 297, 2023, 620, 1157, 301, 616, 442, 1300, 620, 32, 3108, 473, 291, 320, 397, 320, 284, 320, 446, 434]}
