{"line_number": 1946, "line_type": "original", "code": "      return null;", "entropy": 2.111328125, "is_bug_line": false, "sus_score": 0.11785113019775793, "per_token_entropy": [6.9296875, 1.013671875, 0.48681640625, 0.0150909423828125], "tokens": [647, 442, 744, 45]}
{"line_number": 1946, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.11785113019775793, "per_token_entropy": [], "tokens": []}
{"line_number": 223, "line_type": "original", "code": "      JSType type = functionNode.getJSType();", "entropy": 2.197265625, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [4.64453125, 9.6015625, 0.014129638671875, 1.4736328125, 0.2607421875, 6.55078125, 2.947265625, 0.0660400390625, 0.6982421875, 0.0157623291015625, 0.00016570091247558594, 0.09747314453125], "tokens": [647, 7750, 620, 827, 280, 667, 1212, 32, 371, 4624, 620, 473]}
{"line_number": 223, "line_type": "generated", "code": "\n    while (varIter.hasNext()) {\n      Var var = varIter.next();\n      if (var.isGlobal()) {\n        varIter.remove();\n      }\n    }\n\n    // Re-traverse the script to generate a new global scope.\n   ", "entropy": 0.276611328125, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [0.396484375, 0.4150390625, 0.021026611328125, 0.0032196044921875, 0.000553131103515625, 0.00974273681640625, 0.0006422996520996094, 0.0009393692016601562, 0.0043792724609375, 0.03704833984375, 0.045684814453125, 0.151123046875, 0.053436279296875, 0.00815582275390625, 0.0002536773681640625, 0.00010526180267333984, 0.0001634359359741211, 0.0006432533264160156, 0.1553955078125, 0.26025390625, 0.0892333984375, 0.4228515625, 0.05987548828125, 1.0732421875, 0.599609375, 0.2034912109375, 0.002307891845703125, 0.040191650390625, 0.484619140625, 0.058258056640625, 0.00021946430206298828, 0.000102996826171875, 0.00017189979553222656, 0.072021484375, 0.00018835067749023438, 0.036865234375, 0.0002474784851074219, 0.275146484375, 0.69384765625, 1.5751953125, 0.294921875, 0.638671875, 0.18359375, 0.74462890625, 1.416015625, 2.064453125, 0.475830078125, 0.1593017578125, 0.53466796875, 0.10223388671875, 0.437744140625, 0.078369140625], "tokens": [284, 2218, 308, 869, 3853, 32, 16421, 1157, 301, 397, 7329, 773, 280, 773, 3853, 32, 1978, 473, 397, 415, 308, 869, 32, 297, 4455, 1157, 301, 291, 773, 3853, 32, 2546, 473, 397, 320, 284, 320, 446, 434, 902, 31, 33261, 322, 3261, 372, 4450, 312, 537, 3649, 4576, 32, 284]}
{"line_number": 224, "line_type": "original", "code": "      if (type != null && type.isFunctionType()) {", "entropy": 1.6142578125, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [4.3125, 4.1953125, 0.09320068359375, 5.25, 4.07421875, 0.015869140625, 1.068359375, 0.260986328125, 0.025421142578125, 0.5341796875, 1.0322265625, 0.06243896484375, 0.0552978515625], "tokens": [647, 415, 308, 681, 863, 744, 962, 827, 32, 39504, 620, 1157, 301]}
{"line_number": 224, "line_type": "generated", "code": "\n    while (varIter.hasNext()) {\n      Var var = varIter.next();\n      if (var.isGlobal()) {\n        varsToRemove.add(var);\n      }\n    }\n    for (Var var : varsToRemove) {\n      varIter", "entropy": 0.109619140625, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [0.1729736328125, 0.1591796875, 0.0253448486328125, 0.0011224746704101562, 2.6226043701171875e-05, 0.00902557373046875, 0.0001322031021118164, 0.0006957054138183594, 0.001293182373046875, 0.0165252685546875, 0.0244293212890625, 0.1510009765625, 0.03887939453125, 0.006237030029296875, 1.4781951904296875e-05, 4.9114227294921875e-05, 4.6133995056152344e-05, 0.00020885467529296875, 0.0765380859375, 0.324951171875, 0.07879638671875, 0.453857421875, 0.051300048828125, 1.06640625, 0.74560546875, 0.2257080078125, 0.00167083740234375, 0.025054931640625, 0.410400390625, 1.0132789611816406e-05, 0.00011909008026123047, 0.0004420280456542969, 0.0002732276916503906, 0.000881195068359375, 0.004756927490234375, 0.126708984375, 0.000156402587890625, 0.028533935546875, 0.0007343292236328125, 0.25244140625, 0.12298583984375, 0.0033626556396484375, 0.01087188720703125, 0.08026123046875, 0.1937255859375, 0.0019426345825195312, 2.86102294921875e-06, 0.0002942085266113281, 0.0007405281066894531, 0.0116424560546875, 0.6728515625, 0.1182861328125], "tokens": [284, 2218, 308, 869, 3853, 32, 16421, 1157, 301, 397, 7329, 773, 280, 773, 3853, 32, 1978, 473, 397, 415, 308, 869, 32, 297, 4455, 1157, 301, 291, 14447, 33288, 32, 669, 26, 869, 293, 397, 320, 284, 320, 284, 436, 308, 1881, 773, 499, 14447, 33288, 27, 301, 397, 773, 3853]}
{"line_number": 225, "line_type": "original", "code": "        FunctionType fnType = type.toMaybeFunctionType();", "entropy": 2.384765625, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [5.31640625, 10.34375, 0.07208251953125, 0.90869140625, 0.038909912109375, 0.012664794921875, 3.732421875, 4.87890625, 3.271484375, 0.00661468505859375, 0.029632568359375, 0.004306793212890625], "tokens": [351, 4540, 620, 2771, 620, 280, 827, 32, 452, 13257, 44334, 473]}
{"line_number": 225, "line_type": "generated", "code": "\n      Var var = varIter.next();\n      if (var.isFromExterns() || var.isGlobal()) {\n        varsToRemove.add(var);\n      }\n    }\n    for (Var var : varsToRemove) {\n      globalScope", "entropy": 0.173095703125, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [0.1275634765625, 0.2413330078125, 0.1724853515625, 0.046630859375, 0.018951416015625, 2.6702880859375e-05, 0.0001468658447265625, 0.00014460086822509766, 0.0007700920104980469, 0.09033203125, 0.361572265625, 0.08563232421875, 0.371826171875, 0.0587158203125, 1.111328125, 1.1552734375, 0.08807373046875, 0.00012433528900146484, 0.00551605224609375, 0.81787109375, 0.361572265625, 0.439453125, 0.004772186279296875, 0.58154296875, 0.7509765625, 0.1427001953125, 0.0022487640380859375, 0.0400390625, 0.1962890625, 6.556510925292969e-06, 0.00011014938354492188, 0.00035643577575683594, 0.00028634071350097656, 0.0006642341613769531, 0.006805419921875, 0.1224365234375, 0.0001227855682373047, 0.061737060546875, 0.00015306472778320312, 0.164306640625, 0.0911865234375, 0.002536773681640625, 0.00946044921875, 0.09619140625, 0.1873779296875, 0.0014753341674804688, 5.960464477539062e-07, 0.0002639293670654297, 0.0004973411560058594, 0.0589599609375, 0.9228515625, 5.924701690673828e-05], "tokens": [397, 7329, 773, 280, 773, 3853, 32, 1978, 473, 397, 415, 308, 869, 32, 297, 1792, 571, 900, 101, 346, 1276, 773, 32, 297, 4455, 1157, 301, 291, 14447, 33288, 32, 669, 26, 869, 293, 397, 320, 284, 320, 284, 436, 308, 1881, 773, 499, 14447, 33288, 27, 301, 397, 3649, 5504]}
{"line_number": 226, "line_type": "original", "code": "        ObjectType fnThisType = fnType.getTypeOfThis();", "entropy": 2.013671875, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [5.25390625, 8.15625, 4.3359375, 0.413818359375, 0.041412353515625, 0.03118896484375, 2.82421875, 2.580078125, 0.31787109375, 2.23046875, 0.0009365081787109375, 0.0004699230194091797, 0.005634307861328125], "tokens": [351, 42562, 2771, 2272, 620, 280, 2771, 620, 32, 10272, 1419, 2272, 473]}
{"line_number": 226, "line_type": "generated", "code": "\n      if (oldVar.isGlobal() && oldVar.getName().equals(scriptName)) {\n        varsToRemove.add(oldVar);\n      }\n    }\n    for (Var var : varsToRemove) {\n      globalScope.removeVar(var", "entropy": 0.2052001953125, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [0.16259765625, 0.51904296875, 0.13671875, 0.32470703125, 0.00026106834411621094, 0.054107666015625, 1.015625, 0.83447265625, 1.47265625, 0.33740234375, 0.57275390625, 0.01082611083984375, 0.0098724365234375, 0.6796875, 0.40771484375, 1.0322265625, 0.11767578125, 0.279541015625, 0.0219268798828125, 0.04901123046875, 0.0010242462158203125, 0.028839111328125, 0.1737060546875, 1.1324882507324219e-05, 0.00016021728515625, 0.00077056884765625, 0.0002682209014892578, 0.0031757354736328125, 8.630752563476562e-05, 0.0007786750793457031, 0.156494140625, 0.0027408599853515625, 0.05328369140625, 0.00027942657470703125, 0.168212890625, 0.08966064453125, 0.00244903564453125, 0.00861358642578125, 0.3515625, 0.5615234375, 0.0015859603881835938, 1.430511474609375e-06, 0.0002071857452392578, 0.0003139972686767578, 0.01470947265625, 0.7080078125, 0.0001556873321533203, 0.00020492076873779297, 0.278564453125, 0.015625, 0.006397247314453125, 0.0023212432861328125], "tokens": [397, 415, 308, 1455, 1881, 32, 297, 4455, 346, 962, 3610, 1881, 32, 5165, 922, 3574, 26, 1423, 558, 490, 301, 291, 14447, 33288, 32, 669, 26, 1455, 1881, 293, 397, 320, 284, 320, 284, 436, 308, 1881, 773, 499, 14447, 33288, 27, 301, 397, 3649, 5504, 32, 2546, 1881, 26, 869]}
{"line_number": 227, "line_type": "original", "code": "        if (!fnThisType.isUnknownType()) {", "entropy": 1.9228515625, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [2.89453125, 3.783203125, 1.576171875, 6.10546875, 3.685546875, 0.2210693359375, 0.09039306640625, 1.4384765625, 2.0390625, 0.04815673828125, 1.06640625, 0.125732421875], "tokens": [351, 415, 1429, 3359, 2272, 620, 32, 297, 5842, 620, 1157, 301]}
{"line_number": 227, "line_type": "generated", "code": "\n        varsToRemove.add(oldVar);\n      }\n    }\n    for (Var varToRemove : varsToRemove) {\n      globalScope.removeVar(varToRemove);\n    }\n\n    // Re-traverse the script.\n    NodeTraversal.traverse(compiler,", "entropy": 0.22314453125, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [0.17626953125, 0.48486328125, 6.699562072753906e-05, 0.000316619873046875, 0.0009407997131347656, 0.0009055137634277344, 0.005756378173828125, 0.00014543533325195312, 0.006023406982421875, 0.406494140625, 0.0009126663208007812, 0.020721435546875, 0.00038433074951171875, 0.2073974609375, 0.0985107421875, 0.0032501220703125, 0.0111846923828125, 0.32763671875, 0.7783203125, 0.01386260986328125, 0.0017795562744140625, 1.0728836059570312e-06, 0.0003120899200439453, 0.0003991127014160156, 0.041748046875, 0.66748046875, 0.0001112222671508789, 0.0002262592315673828, 0.324951171875, 0.0196533203125, 0.0073089599609375, 0.0026874542236328125, 4.9591064453125e-05, 0.1441650390625, 0.06854248046875, 0.0019397735595703125, 0.2193603515625, 0.47509765625, 1.3408203125, 0.287109375, 0.53369140625, 0.1812744140625, 0.68310546875, 1.9013671875, 0.1824951171875, 1.7568359375, 0.08892822265625, 0.037261962890625, 0.001972198486328125, 0.00901031494140625, 0.07525634765625, 6.914138793945312e-05], "tokens": [291, 14447, 33288, 32, 669, 26, 1455, 1881, 293, 397, 320, 284, 320, 284, 436, 308, 1881, 773, 33288, 499, 14447, 33288, 27, 301, 397, 3649, 5504, 32, 2546, 1881, 26, 869, 33288, 293, 284, 320, 446, 434, 902, 31, 33261, 322, 3261, 32, 284, 4004, 35699, 32, 33261, 26, 10199, 30]}
{"line_number": 232, "line_type": "original", "code": "    }", "entropy": 2.37890625, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [4.53515625, 0.22314453125], "tokens": [264, 320]}
{"line_number": 232, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Creates an initial scope, which declares all the built-in types and\n   * functions.\n   */\n  private Scope createInitialScope(Node root) {\n    // We need to declare these before we start analyzing the global", "entropy": 0.91162109375, "is_bug_line": false, "sus_score": 0.022238701440076274, "per_token_entropy": [2.08203125, 0.02716064453125, 0.334716796875, 0.31396484375, 0.06195068359375, 0.00023186206817626953, 0.88134765625, 1.451171875, 0.06787109375, 0.2183837890625, 3.046875, 1.6142578125, 3.130859375, 5.626678466796875e-05, 0.73291015625, 1.404296875, 1.25390625, 0.03668212890625, 0.1309814453125, 0.984375, 1.369140625, 0.61328125, 0.0003914833068847656, 2.25, 0.62646484375, 0.251220703125, 0.296875, 0.01271820068359375, 0.364501953125, 0.07916259765625, 0.0009107589721679688, 0.0002186298370361328, 1.9311904907226562e-05, 0.0007519721984863281, 0.0023441314697265625, 0.2607421875, 0.003955841064453125, 0.0017852783203125, 0.0538330078125, 1.39453125, 3.837890625, 2.322265625, 0.51318359375, 1.4833984375, 2.54296875, 2.7578125, 1.310546875, 2.3125, 1.9453125, 0.00045013427734375, 0.765625, 2.2578125], "tokens": [334, 320, 719, 1022, 664, 319, 9301, 600, 2815, 4576, 30, 1510, 4497, 10999, 1169, 322, 6895, 31, 266, 3738, 461, 664, 319, 4442, 32, 664, 569, 334, 945, 22148, 1487, 4678, 5504, 26, 1212, 3051, 27, 301, 284, 434, 2688, 1849, 372, 8864, 3282, 2670, 996, 1477, 17920, 26768, 322, 3649]}
{"line_number": 210, "line_type": "original", "code": "      newScope = new Scope(parent, root);", "entropy": 2.4609375, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [3.587890625, 6.44921875, 5.3828125, 0.31689453125, 2.984375, 1.5322265625, 0.1082763671875, 2.587890625, 0.425537109375, 2.689453125, 1.0087890625], "tokens": [647, 537, 5504, 280, 537, 22148, 26, 2544, 30, 3051, 293]}
{"line_number": 210, "line_type": "generated", "code": "\n        Node functionNode = functionAnalysisResults.get(node);\n        Preconditions.checkState(functionNode.getParent() == node.getParent());\n        functionNode.getParent().removeChild(functionNode);\n      }\n    }\n\n    // Re-traverse the script.", "entropy": 0.47802734375, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [0.525390625, 1.97265625, 1.623046875, 1.0732421875, 0.0129547119140625, 0.7451171875, 0.007770538330078125, 0.0003600120544433594, 0.0009794235229492188, 0.10882568359375, 0.015869140625, 0.0206298828125, 0.09454345703125, 0.1533203125, 1.267578125, 0.0005950927734375, 0.1796875, 0.050506591796875, 0.008544921875, 0.335693359375, 0.00557708740234375, 0.62890625, 1.6953125, 0.57861328125, 0.057708740234375, 0.73486328125, 0.2666015625, 0.01303863525390625, 0.17138671875, 0.29345703125, 1.728515625, 0.08544921875, 0.0328369140625, 0.607421875, 0.0003745555877685547, 1.4580078125, 0.00030040740966796875, 0.036407470703125, 0.00012993812561035156, 0.002155303955078125, 0.880859375, 6.270408630371094e-05, 0.0240478515625, 0.0003807544708251953, 0.388671875, 1.2490234375, 2.279296875, 0.355712890625, 0.42626953125, 0.1263427734375, 0.96337890625, 1.5712890625], "tokens": [291, 4004, 667, 1212, 280, 667, 9745, 5472, 32, 371, 26, 1251, 293, 291, 40596, 32, 1553, 1078, 26, 1126, 1212, 32, 18789, 346, 610, 1541, 32, 18789, 1035, 291, 667, 1212, 32, 18789, 922, 28878, 26, 1126, 1212, 293, 397, 320, 284, 320, 446, 434, 902, 31, 33261, 322, 3261, 32]}
{"line_number": 211, "line_type": "original", "code": "      LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);", "entropy": 1.21875, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [2.376953125, 8.328125, 0.260498046875, 0.42578125, 0.55712890625, 0.05926513671875, 0.03399658203125, 0.0391845703125, 1.076171875, 0.050079345703125, 0.0004467964172363281, 0.0016813278198242188, 0.0169219970703125, 5.859375, 0.09027099609375, 0.32568359375], "tokens": [647, 7089, 5504, 1796, 2196, 5504, 1796, 280, 537, 7089, 5504, 1796, 26, 890, 5504, 293]}
{"line_number": 211, "line_type": "generated", "code": "\n      }\n    }\n\n    NodeTraversal.traverse(compiler, scriptRoot, localScopeBuilder);\n    localScopeBuilder.build();\n\n    // Gather the properties in each function that we found in the\n    // global scope, if that function has a @this", "entropy": 0.20263671875, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [1.1396484375, 0.00957489013671875, 0.0455322265625, 0.0011606216430664062, 0.41552734375, 1.8271484375, 0.32177734375, 0.03875732421875, 0.0019311904907226562, 0.02215576171875, 0.06683349609375, 0.0001329183578491211, 0.0224761962890625, 0.0001627206802368164, 0.0190887451171875, 1.5576171875, 0.0006775856018066406, 0.00089263916015625, 0.03619384765625, 0.64306640625, 0.408935546875, 5.435943603515625e-05, 0.0003273487091064453, 0.0010623931884765625, 0.265625, 0.011962890625, 1.23046875, 0.92041015625, 1.2578125, 0.0013074874877929688, 0.04132080078125, 0.0174102783203125, 0.0195465087890625, 0.015289306640625, 0.00836944580078125, 0.01514434814453125, 0.0087127685546875, 0.0077972412109375, 0.0102081298828125, 0.020660400390625, 0.029266357421875, 0.0014934539794921875, 0.046966552734375, 0.0010099411010742188, 0.0176849365234375, 0.0023021697998046875, 0.0018491744995117188, 0.00032210350036621094, 0.0013799667358398438, 0.0005588531494140625, 0.0064849853515625, 0.0004410743713378906], "tokens": [397, 320, 284, 320, 446, 4004, 35699, 32, 33261, 26, 10199, 30, 3261, 4058, 30, 2196, 5504, 1796, 293, 284, 2196, 5504, 1796, 32, 1832, 473, 446, 434, 570, 3790, 322, 4308, 328, 2504, 667, 688, 996, 2431, 328, 322, 284, 434, 3649, 4576, 30, 415, 688, 667, 1401, 312, 477, 578]}
{"line_number": 212, "line_type": "original", "code": "      scopeBuilder = localScopeBuilder;", "entropy": 2.013671875, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [3.095703125, 4.93359375, 1.6533203125, 3.267578125, 2.822265625, 0.01244354248046875, 0.03411865234375, 0.28662109375], "tokens": [647, 4576, 1796, 280, 2196, 5504, 1796, 45]}
{"line_number": 212, "line_type": "generated", "code": "\n    }\n\n    // Create a new scope with the same parent as the given global scope.\n    Scope newScope = new Scope(globalScope.getParent(), scriptRoot);\n\n    // Traverse the new script and patch the scope.\n    GlobalScopeBuilder globalScope", "entropy": 0.6103515625, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [0.56298828125, 0.051910400390625, 0.406982421875, 1.1328125, 2.8828125, 0.12646484375, 0.300537109375, 0.474609375, 2.177734375, 0.70166015625, 0.79345703125, 1.09375, 0.78466796875, 0.0633544921875, 2.150390625, 0.69384765625, 0.130859375, 0.38134765625, 0.042694091796875, 0.26513671875, 0.22412109375, 0.1688232421875, 0.006221771240234375, 0.6015625, 0.0171356201171875, 0.0010280609130859375, 0.041107177734375, 1.823902130126953e-05, 0.2476806640625, 0.00933837890625, 0.2568359375, 0.0682373046875, 0.0016994476318359375, 0.06866455078125, 0.84619140625, 0.2027587890625, 2.685546875, 0.0010042190551757812, 0.145751953125, 1.19921875, 0.734375, 1.0341796875, 2.30859375, 0.27587890625, 2.138671875, 0.88720703125, 0.054718017578125, 1.4912109375, 0.0041046142578125, 0.01448822021484375, 0.7861328125, 0.00787353515625], "tokens": [284, 320, 446, 434, 2648, 312, 537, 4576, 623, 322, 2432, 2935, 619, 322, 2702, 3649, 4576, 32, 284, 22148, 537, 5504, 280, 537, 22148, 26, 3264, 5504, 32, 18789, 1026, 3261, 4058, 293, 446, 434, 21683, 3565, 322, 537, 3261, 461, 7841, 322, 4576, 32, 284, 6564, 5504, 1796, 3649, 5504]}
{"line_number": 213, "line_type": "original", "code": "      localScopeBuilder.build();", "entropy": 3.46484375, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [7.6171875, 7.51171875, 0.51220703125, 1.095703125, 0.2255859375, 5.15625, 2.138671875], "tokens": [647, 2196, 5504, 1796, 32, 1832, 473]}
{"line_number": 213, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Creates a scope with all types declared. Declares newly discovered types\n   * and type properties in the type registry.\n   */\n  Scope createInitialScope(Node root) {\n    Scope newScope = new Scope(null,", "entropy": 0.2430419921875, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [1.1337890625, 0.0036563873291015625, 0.340576171875, 0.419921875, 0.08099365234375, 6.091594696044922e-05, 1.0673828125, 0.8720703125, 0.64453125, 1.1416015625, 0.66259765625, 0.352294921875, 0.056976318359375, 0.273193359375, 0.8837890625, 5.459785461425781e-05, 1.6689300537109375e-06, 0.021148681640625, 0.0027446746826171875, 0.00748443603515625, 0.036163330078125, 0.00022673606872558594, 0.0694580078125, 0.00353240966796875, 0.0011148452758789062, 0.005573272705078125, 0.0037250518798828125, 0.00908660888671875, 0.0002110004425048828, 0.0167694091796875, 0.078369140625, 0.1627197265625, 0.016357421875, 1.310546875, 0.004199981689453125, 0.0272064208984375, 0.00013530254364013672, 0.0018148422241210938, 0.0034923553466796875, 0.25244140625, 0.00275421142578125, 0.00201416015625, 0.0479736328125, 1.193359375, 0.81884765625, 0.0146484375, 0.024139404296875, 0.1361083984375, 0.1568603515625, 0.048919677734375, 0.195556640625, 0.03277587890625], "tokens": [334, 320, 719, 1022, 664, 319, 9301, 312, 4576, 623, 1169, 3738, 17103, 32, 1513, 8475, 575, 16381, 28695, 3738, 664, 319, 461, 827, 4308, 328, 322, 827, 10880, 32, 664, 569, 334, 22148, 1487, 4678, 5504, 26, 1212, 3051, 27, 301, 284, 22148, 537, 5504, 280, 537, 22148, 26, 1693, 30]}
{"line_number": 1951, "line_type": "original", "code": "    return functionAnalysisResults.get(n);", "entropy": 1.2578125, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [5.41796875, 0.8251953125, 4.27734375, 1.1748046875, 0.744140625, 0.06597900390625, 0.00897216796875, 0.004573822021484375, 0.030303955078125, 0.032196044921875], "tokens": [264, 442, 667, 9745, 5472, 32, 371, 26, 96, 293]}
{"line_number": 1951, "line_type": "generated", "code": "\n\n  /**\n   * A simple class to hold the contents of a function, for analysis purposes.\n   */\n  private static class AstFunctionContents {\n    private final Node rootNode;\n    private boolean hasNonEmptyReturn = false;\n    private Set<String>", "entropy": 0.6513671875, "is_bug_line": false, "sus_score": 0.020332091984056118, "per_token_entropy": [1.0849609375, 0.5322265625, 0.0994873046875, 0.00017952919006347656, 2.583984375, 2.587890625, 1.478515625, 0.99560546875, 2.177734375, 1.19921875, 2.58203125, 0.0220489501953125, 0.350341796875, 0.1585693359375, 2.033203125, 2.15625, 2.8203125, 1.7392578125, 0.06719970703125, 0.0051422119140625, 0.28515625, 0.032135009765625, 0.314208984375, 0.030487060546875, 0.0399169921875, 0.002361297607421875, 2.2530555725097656e-05, 0.0001093149185180664, 0.046234130859375, 0.0435791015625, 0.442626953125, 0.5478515625, 0.106201171875, 1.3671875, 1.234375, 0.0018472671508789062, 0.1368408203125, 0.145751953125, 1.0634765625, 0.5517578125, 0.43798828125, 0.001689910888671875, 0.005825042724609375, 1.5361328125, 0.00429534912109375, 0.00044608116149902344, 0.04107666015625, 0.060943603515625, 0.72412109375, 0.00042057037353515625, 0.0017299652099609375, 2.1576881408691406e-05], "tokens": [719, 1022, 664, 319, 399, 4281, 443, 372, 7629, 322, 7299, 432, 312, 667, 30, 436, 9209, 14998, 32, 664, 569, 334, 945, 907, 443, 22344, 2447, 8041, 301, 284, 945, 1158, 4004, 3051, 1212, 45, 284, 945, 1905, 1401, 3910, 2766, 2891, 280, 901, 45, 284, 945, 1756, 46, 652, 48]}
{"line_number": 1945, "line_type": "original", "code": "    if (n == null) {", "entropy": 1.4033203125, "is_bug_line": false, "sus_score": 0.020286020648339485, "per_token_entropy": [5.83203125, 2.728515625, 0.1180419921875, 1.107421875, 0.94189453125, 0.10107421875, 0.2294921875, 0.1649169921875], "tokens": [264, 415, 308, 96, 610, 744, 27, 301]}
{"line_number": 1945, "line_type": "generated", "code": "\n\n  /**\n   * Returns whether the given function node is known to be empty.\n   */\n  private boolean isFunctionEmpty(Node n) {\n    AstFunctionContents functionData = getFunctionAnalysisResults(n);\n    return functionData == null ||!function", "entropy": 0.4833984375, "is_bug_line": false, "sus_score": 0.020286020648339485, "per_token_entropy": [1.162109375, 0.681640625, 0.0999755859375, 0.0002696514129638672, 2.6328125, 1.2578125, 0.8203125, 0.398193359375, 1.1162109375, 1.2822265625, 1.0078125, 1.802734375, 0.09423828125, 1.1630859375, 1.087890625, 0.64990234375, 0.260009765625, 0.27001953125, 0.0090179443359375, 1.099609375, 0.277587890625, 0.6396484375, 0.260009765625, 0.185791015625, 0.146484375, 0.027740478515625, 0.5859375, 0.01432037353515625, 0.0012578964233398438, 0.238525390625, 0.53076171875, 1.800060272216797e-05, 0.0006008148193359375, 1.10546875, 0.91259765625, 0.0013713836669921875, 0.0435791015625, 0.0006055831909179688, 0.00830841064453125, 0.0003478527069091797, 0.0007390975952148438, 0.00202178955078125, 0.002246856689453125, 0.05364990234375, 0.3896484375, 0.2384033203125, 0.0007443428039550781, 1.41015625, 0.000579833984375, 0.1600341796875, 1.0078125, 0.003345489501953125], "tokens": [719, 1022, 664, 319, 3759, 4946, 322, 2702, 667, 1541, 438, 8967, 372, 526, 3502, 32, 664, 569, 334, 945, 1905, 438, 2447, 2766, 26, 1212, 310, 27, 301, 284, 22344, 2447, 8041, 667, 750, 280, 622, 2447, 9745, 5472, 26, 96, 293, 284, 442, 667, 750, 610, 744, 1276, 653, 1126]}
{"line_number": 391, "line_type": "original", "code": "    return typeRegistry.getNativeType(nativeType);", "entropy": 2.125, "is_bug_line": false, "sus_score": 0.020219563399637347, "per_token_entropy": [3.337890625, 8.859375, 6.875, 1.04296875, 0.299560546875, 1.2275390625, 0.09136962890625, 0.587890625, 0.047210693359375, 2.572265625, 0.12548828125, 0.427978515625], "tokens": [264, 442, 827, 5378, 32, 371, 6134, 620, 26, 3723, 620, 293]}
{"line_number": 391, "line_type": "generated", "code": "\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction()) {\n        visitFunction(t, n, parent);\n      } else if (n.isAssign() && n.", "entropy": 0.28515625, "is_bug_line": false, "sus_score": 0.020219563399637347, "per_token_entropy": [0.7314453125, 0.0150604248046875, 0.1151123046875, 0.69140625, 0.0017080307006835938, 0.0109710693359375, 0.0137786865234375, 0.98876953125, 0.472900390625, 0.0004940032958984375, 0.00800323486328125, 0.000423431396484375, 0.01824951171875, 6.330013275146484e-05, 0.0011138916015625, 0.0814208984375, 0.0009551048278808594, 0.00782012939453125, 0.0193023681640625, 0.00014066696166992188, 0.003955841064453125, 0.276123046875, 1.240234375, 0.09002685546875, 0.6865234375, 0.1123046875, 1.2724609375, 0.12030029296875, 0.00035953521728515625, 0.06658935546875, 0.94970703125, 0.09716796875, 0.11297607421875, 0.34423828125, 0.006488800048828125, 0.04107666015625, 0.5322265625, 0.097900390625, 0.018280029296875, 0.063720703125, 5.6862831115722656e-05, 0.5224609375, 0.042877197265625, 0.00884246826171875, 0.1668701171875, 0.0014400482177734375, 0.10357666015625, 1.640625, 1.61328125, 0.62255859375, 0.78857421875, 0.0015439987182617188], "tokens": [284, 320, 446, 477, 1788, 284, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 415, 308, 96, 32, 39504, 1157, 301, 291, 7725, 2447, 26, 102, 30, 310, 30, 2935, 293, 397, 320, 813, 415, 308, 96, 32, 297, 9079, 346, 962, 310, 32]}
{"line_number": 175, "line_type": "original", "code": "    this(compiler, compiler.getCodingConvention());", "entropy": 2.49609375, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [4.2421875, 7.41796875, 5.98046875, 2.046875, 0.212646484375, 6.97265625, 0.11920166015625, 1.6689453125, 0.00390625, 0.00024819374084472656, 0.0030689239501953125, 1.287109375], "tokens": [264, 458, 26, 10199, 30, 8980, 32, 11640, 431, 299, 21748, 1035]}
{"line_number": 175, "line_type": "generated", "code": "\n      }\n    }\n\n    return newScope;\n  }\n\n  private Scope createInitialScope(Node root) {\n    // Create a scope to hold all the global symbols.\n    Scope globalScope = new Scope(null, root);\n    globalScope.declare(\"", "entropy": 0.399658203125, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [0.58740234375, 0.001628875732421875, 0.04583740234375, 0.0005006790161132812, 0.2607421875, 0.7841796875, 0.005096435546875, 0.001064300537109375, 0.0011816024780273438, 0.02490234375, 0.00033402442932128906, 0.196044921875, 1.1533203125, 0.1627197265625, 0.004970550537109375, 0.006031036376953125, 4.017353057861328e-05, 0.001499176025390625, 0.0038242340087890625, 0.19921875, 0.00254058837890625, 0.001880645751953125, 0.1307373046875, 1.265625, 1.7197265625, 1.0791015625, 0.60595703125, 2.53515625, 0.79638671875, 0.6865234375, 0.66796875, 1.474609375, 1.53515625, 0.35791015625, 0.16162109375, 0.837890625, 0.308837890625, 0.0297393798828125, 0.0102081298828125, 0.09100341796875, 0.224609375, 0.0220489501953125, 0.093994140625, 0.023468017578125, 0.0350341796875, 0.186279296875, 0.91748046875, 0.833984375, 0.0007338523864746094, 0.00652313232421875, 0.3798828125, 0.32421875], "tokens": [397, 320, 284, 320, 446, 442, 537, 5504, 45, 334, 320, 719, 945, 22148, 1487, 4678, 5504, 26, 1212, 3051, 27, 301, 284, 434, 2648, 312, 4576, 372, 7629, 1169, 322, 3649, 15455, 32, 284, 22148, 3649, 5504, 280, 537, 22148, 26, 1693, 30, 3051, 293, 284, 3649, 5504, 32, 8238, 440]}
{"line_number": 176, "line_type": "original", "code": "  }", "entropy": 2.302734375, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [3.8046875, 0.80078125], "tokens": [225, 320]}
{"line_number": 176, "line_type": "generated", "code": "\n        if (fnType.hasInstanceType()) {\n          ObjectType instanceType = fnType.getInstanceType();\n          if (instanceType.isInterface()) {\n            // TODO(johnlenz): we need to be able to attach the\n            // interface properties", "entropy": 0.71142578125, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [1.3212890625, 1.451171875, 0.1563720703125, 0.175537109375, 0.00021517276763916016, 0.080810546875, 1.548828125, 0.466796875, 0.01303863525390625, 0.1358642578125, 0.0015325546264648438, 0.059051513671875, 0.25634765625, 0.7626953125, 0.047088623046875, 0.0033054351806640625, 0.081787109375, 1.2874603271484375e-05, 0.00037407875061035156, 0.002529144287109375, 0.0237274169921875, 0.24560546875, 0.227294921875, 1.6728515625, 0.2174072265625, 0.33984375, 0.0007185935974121094, 0.6181640625, 0.72412109375, 1.169921875, 0.1744384765625, 0.00043511390686035156, 0.06573486328125, 1.4990234375, 1.685546875, 0.009857177734375, 0.95849609375, 0.00870513916015625, 0.0008840560913085938, 0.0292816162109375, 3.138671875, 1.8388671875, 0.40478515625, 3.736328125, 0.5126953125, 0.0265045166015625, 3.931640625, 1.4833984375, 1.443359375, 0.011322021484375, 2.42578125, 1.80859375], "tokens": [291, 415, 308, 3359, 620, 32, 2040, 1810, 620, 1157, 301, 616, 42562, 1980, 620, 280, 2771, 620, 32, 7426, 620, 473, 616, 415, 308, 2386, 620, 32, 297, 3041, 1157, 301, 324, 434, 4296, 26, 25172, 1657, 108, 711, 996, 1849, 372, 526, 5300, 372, 12386, 322, 324, 434, 2568, 4308]}
{"line_number": 196, "line_type": "original", "code": "    Scope newScope = null;", "entropy": 1.8935546875, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [2.63671875, 4.59765625, 2.4296875, 0.096435546875, 0.168701171875, 3.314453125, 0.0137786865234375], "tokens": [264, 22148, 537, 5504, 280, 744, 45]}
{"line_number": 196, "line_type": "generated", "code": "\n   * @param scope The global scope to patch.\n   * @param script The script to re-traverse and re-parse.\n   * @return The new global scope after re-parsing the script.\n   */\n  public Scope patchGlobalScope(Scope", "entropy": 0.5439453125, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [0.27734375, 0.211181640625, 0.71044921875, 0.1624755859375, 0.7998046875, 0.64501953125, 0.92431640625, 0.0113677978515625, 0.671875, 0.4853515625, 0.1588134765625, 0.0914306640625, 0.0849609375, 0.01139068603515625, 0.022369384765625, 0.8232421875, 1.29296875, 1.0390625, 1.0087890625, 1.1337890625, 0.0970458984375, 0.455810546875, 1.6005859375, 1.671875, 0.06671142578125, 2.240234375, 0.1416015625, 0.11016845703125, 0.41845703125, 0.03326416015625, 0.66845703125, 0.525390625, 0.92724609375, 0.9384765625, 0.00768280029296875, 2.470703125, 0.81396484375, 0.083251953125, 0.275390625, 1.16796875, 0.1719970703125, 0.1181640625, 0.1536865234375, 0.11322021484375, 0.027618408203125, 0.75537109375, 0.6943359375, 0.371337890625, 0.22998046875, 0.0277557373046875, 0.09307861328125, 0.240234375], "tokens": [664, 319, 477, 753, 4576, 886, 3649, 4576, 372, 7841, 32, 664, 319, 477, 753, 3261, 886, 3261, 372, 316, 31, 33261, 461, 316, 31, 2208, 32, 664, 319, 477, 601, 886, 537, 3649, 4576, 2685, 316, 31, 26801, 322, 3261, 32, 664, 569, 334, 562, 22148, 7841, 4455, 5504, 26, 5504]}
{"line_number": 197, "line_type": "original", "code": "    AbstractScopeBuilder scopeBuilder = null;", "entropy": 1.98828125, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [2.490234375, 9.2890625, 0.80419921875, 0.79931640625, 0.373046875, 0.013824462890625, 0.2333984375, 3.861328125, 0.027069091796875], "tokens": [264, 7400, 5504, 1796, 4576, 1796, 280, 744, 45]}
{"line_number": 197, "line_type": "generated", "code": "\n   */\n  void patchGlobalScope(Scope globalScope) {\n    Preconditions.checkState(globalScope.isGlobalScope());\n\n    // Find all the nodes in the global scope that have the same name\n    // as a variable in the global scope.\n   ", "entropy": 0.65380859375, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [0.210693359375, 0.62060546875, 0.0171356201171875, 1.361328125, 0.37158203125, 0.46435546875, 0.009918212890625, 0.07916259765625, 0.5107421875, 0.004398345947265625, 0.00046634674072265625, 0.75830078125, 0.012542724609375, 0.2091064453125, 0.83251953125, 0.0009965896606445312, 0.0251312255859375, 0.3232421875, 0.00959014892578125, 0.43896484375, 0.0033740997314453125, 0.09844970703125, 0.492431640625, 0.0030040740966796875, 0.70849609375, 0.10614013671875, 1.2236328125, 0.89599609375, 2.87890625, 0.748046875, 0.5322265625, 3.10546875, 1.693359375, 0.099609375, 1.138671875, 0.04156494140625, 0.484619140625, 1.9228515625, 2.876953125, 1.0546875, 1.0986328125, 1.263671875, 0.00650787353515625, 0.06463623046875, 0.8134765625, 0.43408203125, 1.044921875, 0.335693359375, 1.28515625, 0.05633544921875, 0.72119140625, 0.51416015625], "tokens": [664, 569, 334, 763, 7841, 4455, 5504, 26, 5504, 3649, 5504, 27, 301, 284, 40596, 32, 1553, 1078, 26, 3264, 5504, 32, 297, 4455, 5504, 1035, 446, 434, 7477, 1169, 322, 5166, 328, 322, 3649, 4576, 688, 1159, 322, 2432, 636, 284, 434, 619, 312, 2677, 328, 322, 3649, 4576, 32, 284]}
{"line_number": 198, "line_type": "original", "code": "    if (parent == null) {", "entropy": 1.341796875, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [2.181640625, 2.91796875, 0.2191162109375, 5.04296875, 0.1961669921875, 0.007038116455078125, 0.1043701171875, 0.06573486328125], "tokens": [264, 415, 308, 2544, 610, 744, 27, 301]}
{"line_number": 198, "line_type": "generated", "code": "\n   * @param sourceName The name of the source file.\n   */\n  public void patchGlobalScope(Scope globalScope, Node scriptRoot, String sourceName) {\n    Preconditions.checkState(globalScope.isGlobal());\n    Preconditions.checkState", "entropy": 0.395751953125, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [0.326171875, 0.78515625, 0.087158203125, 0.7412109375, 3.001953125, 1.6044921875, 0.381103515625, 0.5625, 0.137939453125, 0.05804443359375, 1.1279296875, 0.939453125, 0.95263671875, 0.276123046875, 1.0146484375, 0.047576904296875, 0.93115234375, 0.27099609375, 0.438232421875, 0.312744140625, 0.0187225341796875, 0.109619140625, 0.59130859375, 0.002407073974609375, 0.00020778179168701172, 0.003826141357421875, 0.13330078125, 0.01282501220703125, 0.0019664764404296875, 0.031494140625, 1.234375, 0.01479339599609375, 0.0006213188171386719, 0.0214691162109375, 0.04339599609375, 0.2030029296875, 0.666015625, 0.0008940696716308594, 0.04229736328125, 0.469970703125, 0.013336181640625, 0.398193359375, 0.00038433074951171875, 0.09503173828125, 0.2254638671875, 0.0026721954345703125, 0.82373046875, 0.689453125, 0.52490234375, 1.0013580322265625e-05, 0.0189208984375, 0.1912841796875], "tokens": [664, 319, 477, 753, 1914, 558, 886, 636, 432, 322, 1914, 803, 32, 664, 569, 334, 562, 763, 7841, 4455, 5504, 26, 5504, 3649, 5504, 30, 4004, 3261, 4058, 30, 892, 1914, 558, 27, 301, 284, 40596, 32, 1553, 1078, 26, 3264, 5504, 32, 297, 4455, 1035, 284, 40596, 32, 1553, 1078]}
{"line_number": 200, "line_type": "original", "code": "      (new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))", "entropy": 2.943359375, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [3.236328125, 7.33984375, 0.62841796875, 6.62109375, 0.14794921875, 1.09375, 2.66015625, 0.46240234375, 0.88525390625, 1.3251953125, 6.84375, 5.8515625, 3.6484375, 0.4599609375], "tokens": [647, 308, 890, 8819, 2871, 2447, 17412, 26, 10199, 30, 667, 9745, 5472, 490]}
{"line_number": 200, "line_type": "generated", "code": "\n    NodeTraversal.traverse(compiler, scriptRoot,\n        new GlobalScopeBuilder(globalScope));\n    globalScope.traverse(new FindGlobalScopeVars(globalScope));\n  }\n\n  /**\n   * Creates a scope that contains the initial global definitions.\n  ", "entropy": 0.806640625, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [1.064453125, 1.6298828125, 0.2412109375, 0.016265869140625, 0.00244903564453125, 0.01019287109375, 0.091064453125, 0.00013136863708496094, 0.06768798828125, 0.001049041748046875, 0.0792236328125, 0.93310546875, 0.07568359375, 0.80126953125, 0.063232421875, 0.84765625, 0.0498046875, 0.00658416748046875, 1.1205673217773438e-05, 0.09136962890625, 1.6884765625, 1.07421875, 0.0015993118286132812, 0.01288604736328125, 1.9296875, 0.62353515625, 0.402099609375, 2.666015625, 2.146484375, 2.515625, 2.939453125, 0.771484375, 0.2763671875, 0.006504058837890625, 0.341064453125, 0.87744140625, 0.0006604194641113281, 0.23486328125, 0.33447265625, 0.087890625, 0.00014388561248779297, 1.173828125, 0.8232421875, 0.541015625, 1.955078125, 1.154296875, 1.779296875, 3.212890625, 2.81640625, 2.421875, 0.75341796875, 0.289794921875], "tokens": [284, 4004, 35699, 32, 33261, 26, 10199, 30, 3261, 4058, 30, 291, 537, 6564, 5504, 1796, 26, 3264, 5504, 876, 284, 3649, 5504, 32, 33261, 26, 890, 7477, 4455, 5504, 12034, 26, 3264, 5504, 876, 334, 320, 719, 1022, 664, 319, 9301, 312, 4576, 688, 4304, 322, 2815, 3649, 13183, 32, 664]}
{"line_number": 204, "line_type": "original", "code": "      newScope = createInitialScope(root);", "entropy": 3.19921875, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [6.92578125, 3.974609375, 3.09375, 0.354736328125, 3.435546875, 9.7265625, 0.217529296875, 0.121337890625, 2.86328125, 1.275390625], "tokens": [647, 537, 5504, 280, 1487, 4678, 5504, 26, 2388, 293]}
{"line_number": 204, "line_type": "generated", "code": "\n\n    // First, remove all the variables in the global scope.\n    for (String name : globalScope.getAllNames()) {\n      if (name.startsWith(\"$\")) {\n        globalScope.removeVar(name);\n      }\n    }\n\n    // Second,", "entropy": 0.54736328125, "is_bug_line": false, "sus_score": 0.020036097492521526, "per_token_entropy": [1.02734375, 1.0087890625, 3.162109375, 0.6025390625, 1.650390625, 0.52099609375, 0.90478515625, 1.0185546875, 1.6767578125, 0.09307861328125, 0.6474609375, 0.0291900634765625, 1.017578125, 0.121337890625, 1.04296875, 0.0021381378173828125, 0.5712890625, 0.88330078125, 0.015350341796875, 0.492919921875, 0.018463134765625, 0.005100250244140625, 0.5107421875, 0.477783203125, 0.2337646484375, 0.00039577484130859375, 0.00897979736328125, 2.0, 0.5498046875, 0.6904296875, 0.30908203125, 1.6318359375, 0.415283203125, 0.93701171875, 0.0016107559204101562, 0.0223846435546875, 0.732421875, 0.00039768218994140625, 0.000774383544921875, 0.1859130859375, 1.169921875, 0.007335662841796875, 0.01446533203125, 0.0548095703125, 0.055755615234375, 0.00020885467529296875, 0.0548095703125, 2.5510787963867188e-05, 0.164306640625, 0.1849365234375, 1.5068359375, 0.01438140869140625], "tokens": [446, 434, 8819, 30, 3345, 1169, 322, 4886, 328, 322, 3649, 4576, 32, 284, 436, 308, 652, 636, 499, 3649, 5504, 32, 13917, 4109, 1157, 301, 397, 415, 308, 426, 32, 13912, 18663, 2131, 301, 291, 3649, 5504, 32, 2546, 1881, 26, 426, 293, 397, 320, 284, 320, 446, 434, 15086, 30]}
