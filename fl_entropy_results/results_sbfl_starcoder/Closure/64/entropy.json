{"line_number": 1705, "line_type": "original", "code": "          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;", "entropy": 1.66796875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [9.40625, 10.5234375, 0.287841796875, 4.31640625, 0.011322021484375, 0.07025146484375, 0.0008406639099121094, 0.04937744140625, 0.041290283203125, 0.000156402587890625, 0.0015001296997070312, 0.0030422210693359375, 0.33935546875, 1.5224609375, 0.002162933349609375, 0.11810302734375], "tokens": [2033, 2926, 280, 3383, 32, 5971, 2101, 32, 55, 3103, 1099, 38225, 39, 81, 22982, 45]}
{"line_number": 1705, "line_type": "generated", "code": "  }\n\n  @Override\n  public void setWarningsGuard(WarningsGuard guard) {\n    this.warningsGuard = guard;\n  }\n\n  @Override\n  public void setDebugMode(boolean debug) {\n    this.debugMode = debug;\n  }\n\n ", "entropy": 0.3916015625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [2.310546875, 1.078125, 0.2213134765625, 0.349853515625, 0.004451751708984375, 0.0012407302856445312, 0.0555419921875, 1.2109375, 1.4169921875, 1.4677734375, 0.00043392181396484375, 0.0031585693359375, 0.1904296875, 6.29425048828125e-05, 0.1915283203125, 0.0021800994873046875, 0.0003364086151123047, 0.01580810546875, 0.9326171875, 2.944469451904297e-05, 0.00015437602996826172, 3.933906555175781e-06, 0.00012564659118652344, 0.0031299591064453125, 0.001972198486328125, 0.0338134765625, 0.0014934539794921875, 0.11065673828125, 0.287353515625, 0.0041961669921875, 0.00051116943359375, 0.0242919921875, 0.9951171875, 0.96728515625, 3.291015625, 0.86279296875, 0.128173828125, 0.0209197998046875, 0.6025390625, 1.263671875, 0.01204681396484375, 0.037689208984375, 1.3779296875, 0.0002846717834472656, 0.3251953125, 0.1573486328125, 0.005039215087890625, 0.003131866455078125, 0.0010137557983398438, 0.31591796875, 0.00040650367736816406, 0.06951904296875], "tokens": [225, 320, 719, 477, 1788, 334, 562, 763, 739, 12069, 12380, 26, 12069, 12380, 16314, 27, 301, 284, 458, 32, 19991, 12380, 280, 16314, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 739, 3529, 2101, 26, 4398, 4588, 27, 301, 284, 458, 32, 2811, 2101, 280, 4588, 45, 334, 320, 719]}
{"line_number": 1706, "line_type": "original", "code": "          break;", "entropy": 6.09765625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [10.2734375, 7.98828125, 0.039520263671875], "tokens": [2033, 1626, 45]}
{"line_number": 1706, "line_type": "generated", "code": "\n  }\n\n  @Override\n  public void setWarningsGuard(WarningsGuard guard) {\n    this.warningsGuard = guard;\n  }\n\n  @Override\n  public void addMessageListener(MessageListener listener) {\n    errorManager.addMessageListener(listener);\n ", "entropy": 0.25830078125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.448974609375, 0.140380859375, 0.19677734375, 0.37353515625, 0.005779266357421875, 0.0010929107666015625, 0.06329345703125, 1.0185546875, 1.40625, 1.537109375, 0.000514984130859375, 0.004894256591796875, 0.24609375, 9.453296661376953e-05, 0.1824951171875, 0.0035572052001953125, 0.0004024505615234375, 0.0144805908203125, 0.7705078125, 2.2530555725097656e-05, 0.00019288063049316406, 3.933906555175781e-06, 0.0001627206802368164, 0.0065155029296875, 0.0085601806640625, 0.1663818359375, 0.000835418701171875, 0.1282958984375, 0.3447265625, 0.00455474853515625, 0.0007152557373046875, 0.024932861328125, 1.025390625, 1.4306640625, 1.6748046875, 1.4423828125, 0.0012798309326171875, 0.027435302734375, 0.2342529296875, 0.017059326171875, 0.0005755424499511719, 0.002658843994140625, 0.00940704345703125, 0.32666015625, 0.0006456375122070312, 0.0005216598510742188, 0.1063232421875, 0.0006327629089355469, 0.0003867149353027344, 0.0003650188446044922, 0.0006995201110839844, 0.024322509765625], "tokens": [334, 320, 719, 477, 1788, 334, 562, 763, 739, 12069, 12380, 26, 12069, 12380, 16314, 27, 301, 284, 458, 32, 19991, 12380, 280, 16314, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 1015, 1175, 2221, 26, 1175, 2221, 7503, 27, 301, 284, 1048, 1572, 32, 47400, 2221, 26, 9453, 293, 334]}
{"line_number": 1239, "line_type": "original", "code": "    CompilerInput input = new CompilerInput(", "entropy": 1.8349609375, "is_bug_line": false, "sus_score": 0.19518001458970666, "per_token_entropy": [4.9296875, 7.48046875, 1.734375, 0.2176513671875, 0.031219482421875, 2.029296875, 0.03302001953125, 0.00032067298889160156, 0.0626220703125], "tokens": [264, 20209, 1612, 1509, 280, 537, 20209, 1612, 26]}
{"line_number": 1239, "line_type": "generated", "code": "\n          NodeUtil.print(cb, jsRoot);\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });\n  }\n\n  @Override\n  String toSource(Node n) {\n   ", "entropy": 0.259033203125, "is_bug_line": false, "sus_score": 0.19518001458970666, "per_token_entropy": [0.68212890625, 2.00390625, 1.3671875, 0.0046539306640625, 0.449951171875, 1.1435546875, 0.76220703125, 0.003963470458984375, 0.60791015625, 0.0019550323486328125, 0.294921875, 0.37939453125, 0.1339111328125, 0.012847900390625, 0.0005650520324707031, 0.11737060546875, 0.004024505615234375, 0.026641845703125, 0.00018739700317382812, 0.00921630859375, 0.00036835670471191406, 0.011993408203125, 0.0499267578125, 0.00027060508728027344, 0.0002090930938720703, 0.00011789798736572266, 0.0077056884765625, 0.0008816719055175781, 0.003482818603515625, 0.00093841552734375, 0.0021495819091796875, 0.007503509521484375, 4.6372413635253906e-05, 0.00821685791015625, 0.0016508102416992188, 0.1500244140625, 0.08282470703125, 0.0087890625, 0.0006771087646484375, 0.191650390625, 2.173828125, 0.025299072265625, 0.0022754669189453125, 1.240234375, 0.338134765625, 0.896484375, 0.01318359375, 0.0270538330078125, 0.1290283203125, 0.043975830078125, 0.0096588134765625, 0.037139892578125], "tokens": [616, 4004, 1733, 32, 1216, 26, 2500, 30, 4060, 4058, 293, 616, 442, 6596, 32, 3108, 473, 291, 320, 8295, 301, 616, 4719, 24046, 26, 30209, 30, 313, 452, 2028, 724, 291, 320, 397, 320, 284, 1122, 334, 320, 719, 477, 1788, 334, 892, 372, 2028, 26, 1212, 310, 27, 301, 284]}
{"line_number": 1241, "line_type": "original", "code": "    inputsByName.put(input.getName(), input);", "entropy": 1.8154296875, "is_bug_line": false, "sus_score": 0.19518001458970666, "per_token_entropy": [6.35546875, 8.25, 2.609375, 0.630859375, 1.0029296875, 0.2744140625, 2.564453125, 0.054412841796875, 0.007434844970703125, 0.01490020751953125, 0.013641357421875, 0.005428314208984375], "tokens": [264, 7806, 9813, 32, 524, 26, 1131, 32, 5165, 1026, 1509, 293]}
{"line_number": 1241, "line_type": "generated", "code": "\n            return cb.toSource(jsRoot);\n          } else {\n            return \"\";\n          }\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });\n  }\n\n  //------------------------------------------------------------------------\n  // AST Traversal\n  //", "entropy": 0.30712890625, "is_bug_line": false, "sus_score": 0.19518001458970666, "per_token_entropy": [0.41552734375, 2.42578125, 0.2705078125, 0.002033233642578125, 0.92626953125, 0.34765625, 0.251220703125, 0.08612060546875, 0.0005211830139160156, 0.33447265625, 0.110107421875, 9.703636169433594e-05, 0.5390625, 0.0223236083984375, 0.00962066650390625, 0.06689453125, 0.1964111328125, 0.00867462158203125, 7.641315460205078e-05, 0.0300140380859375, 7.700920104980469e-05, 0.006267547607421875, 0.0003542900085449219, 0.0110015869140625, 0.04705810546875, 0.0003044605255126953, 0.00016570091247558594, 9.40561294555664e-05, 0.0088348388671875, 0.0007543563842773438, 0.002956390380859375, 0.0005655288696289062, 0.0015544891357421875, 0.005962371826171875, 0.0008459091186523438, 0.004985809326171875, 0.0011548995971679688, 0.1376953125, 0.09735107421875, 0.0085296630859375, 0.0005550384521484375, 0.1807861328125, 1.658203125, 0.04766845703125, 0.0175323486328125, 0.0082855224609375, 0.0011072158813476562, 4.6953125, 2.716796875, 0.036590576171875, 0.236572265625, 0.00022399425506591797], "tokens": [324, 442, 6596, 32, 452, 2028, 26, 754, 4058, 293, 616, 320, 813, 301, 324, 442, 5121, 616, 320, 291, 320, 8295, 301, 616, 4719, 24046, 26, 30209, 30, 313, 452, 2028, 724, 291, 320, 397, 320, 284, 1122, 334, 320, 719, 434, 2657, 430, 334, 434, 16095, 21683, 16292, 334, 434]}
{"line_number": 1242, "line_type": "original", "code": "    return input.getAstRoot(this);", "entropy": 1.744140625, "is_bug_line": false, "sus_score": 0.19518001458970666, "per_token_entropy": [6.93359375, 2.466796875, 6.10546875, 0.058258056640625, 0.85986328125, 0.88427734375, 0.001617431640625, 0.0175018310546875, 0.10272216796875, 0.01056671142578125], "tokens": [264, 442, 1509, 32, 371, 19511, 4058, 26, 578, 293]}
{"line_number": 1242, "line_type": "generated", "code": "\n                 scriptNode!= null;\n                 scriptNode = scriptNode.getNext()) {\n              if (scriptNode.getType() == Token.SCRIPT) {\n                cb.append(NodeUtil.getPrettyPrintedCode(scriptNode, i++));\n              }", "entropy": 0.40185546875, "is_bug_line": false, "sus_score": 0.19518001458970666, "per_token_entropy": [1.2216796875, 0.1732177734375, 0.00018024444580078125, 0.005260467529296875, 0.0010614395141601562, 0.06317138671875, 0.2239990234375, 0.051177978515625, 2.7418136596679688e-05, 0.001434326171875, 0.02301025390625, 0.0003376007080078125, 0.0007076263427734375, 0.0001703500747680664, 0.1353759765625, 0.092041015625, 0.443359375, 1.54296875, 0.132080078125, 1.79296875, 0.0022335052490234375, 0.00997161865234375, 0.3779296875, 0.0028743743896484375, 0.487060546875, 0.031951904296875, 0.0007586479187011719, 0.221435546875, 0.131103515625, 0.0018768310546875, 0.180908203125, 1.7568359375, 0.0008196830749511719, 0.5439453125, 1.08984375, 2.55859375, 0.00232696533203125, 0.00011587142944335938, 0.469482421875, 0.97216796875, 1.0263671875, 0.10699462890625, 0.3876953125, 0.0748291015625, 0.333984375, 1.4662742614746094e-05, 1.0966796875, 1.9912109375, 0.8671875, 0.03369140625, 0.230712890625, 9.775161743164062e-05], "tokens": [353, 3261, 1212, 863, 744, 45, 353, 3261, 1212, 280, 3261, 1212, 32, 23017, 1157, 301, 1090, 415, 308, 1423, 1212, 32, 10272, 346, 610, 6512, 32, 12210, 27, 301, 400, 6596, 32, 1689, 26, 1212, 1733, 32, 371, 20521, 4014, 318, 1227, 26, 1423, 1212, 30, 595, 1046, 876, 1090, 320]}
{"line_number": 1851, "line_type": "original", "code": "      if (inputs.isEmpty()) {", "entropy": 1.7099609375, "is_bug_line": false, "sus_score": 0.1529438225803745, "per_token_entropy": [4.49609375, 3.91796875, 0.0634765625, 2.869140625, 0.44677734375, 1.81640625, 0.029388427734375, 0.03717041015625], "tokens": [647, 415, 308, 8075, 32, 6393, 1157, 301]}
{"line_number": 1851, "line_type": "generated", "code": "\n  }\n\n  /** Gets the DOT graph of the AST generated at the end of compilation. */\n  public String getAstWithTypesDotGraph() throws IOException {\n    if (jsRoot!= null) {\n      ControlFlowAnalysis cfa = new ControlFlowAnalysis", "entropy": 0.151611328125, "is_bug_line": false, "sus_score": 0.1529438225803745, "per_token_entropy": [0.52783203125, 0.0992431640625, 0.27294921875, 0.376953125, 0.6396484375, 0.1092529296875, 0.279541015625, 0.03253173828125, 0.043304443359375, 0.0654296875, 0.362060546875, 1.2265625, 0.18505859375, 0.01392364501953125, 0.01708984375, 0.0008058547973632812, 0.055023193359375, 0.03570556640625, 0.004795074462890625, 0.01238250732421875, 0.040252685546875, 0.051116943359375, 0.053802490234375, 0.392333984375, 1.4208984375, 0.73779296875, 0.0009965896606445312, 0.000881195068359375, 0.043060302734375, 0.07733154296875, 0.00322723388671875, 0.005462646484375, 0.039031982421875, 0.101318359375, 0.0016412734985351562, 0.179931640625, 0.006404876708984375, 0.0330810546875, 0.00010991096496582031, 0.0279693603515625, 0.00030040740966796875, 0.01189422607421875, 0.26708984375, 9.894371032714844e-06, 0.0017547607421875, 0.005390167236328125, 6.151199340820312e-05, 0.002643585205078125, 0.021575927734375, 0.00028395652770996094, 2.5033950805664062e-06, 0.0003135204315185547], "tokens": [334, 320, 719, 1022, 7124, 322, 32763, 3996, 432, 322, 16095, 4723, 821, 322, 943, 432, 16260, 32, 569, 334, 562, 892, 622, 19511, 1554, 2424, 10025, 3406, 346, 2571, 6291, 301, 284, 415, 308, 754, 4058, 863, 744, 27, 301, 397, 7813, 4055, 9745, 281, 1919, 280, 537, 7813, 4055, 9745]}
{"line_number": 1855, "line_type": "original", "code": "      return inputs.get(0).getAstRoot(this);", "entropy": 2.095703125, "is_bug_line": false, "sus_score": 0.1529438225803745, "per_token_entropy": [6.19921875, 0.1920166015625, 9.9765625, 0.040435791015625, 0.1539306640625, 0.0033721923828125, 0.01593017578125, 0.004360198974609375, 3.19921875, 4.22265625, 0.0158843994140625, 0.05194091796875, 0.0223388671875, 5.22265625], "tokens": [647, 442, 7806, 32, 371, 26, 34, 547, 371, 19511, 4058, 26, 578, 293]}
{"line_number": 1855, "line_type": "generated", "code": "\n    return errorManager;\n  }\n\n  @Override\n  public void setTypedScopeCreator(TypedScopeCreator creator) {\n    this.typedScopeCreator = creator;\n  }\n\n  @Override\n  public TypedScopeCreator getTypedScopeCreator() {\n    return typed", "entropy": 0.190673828125, "is_bug_line": false, "sus_score": 0.1529438225803745, "per_token_entropy": [0.8291015625, 0.1968994140625, 0.323486328125, 0.00946044921875, 0.010406494140625, 0.037811279296875, 0.0005283355712890625, 0.1895751953125, 0.55078125, 0.01163482666015625, 0.0012302398681640625, 0.54296875, 1.4951171875, 0.99560546875, 1.2314453125, 0.47802734375, 0.038787841796875, 0.04449462890625, 0.016387939453125, 3.8743019104003906e-05, 0.00047206878662109375, 0.45458984375, 0.003696441650390625, 0.0042266845703125, 0.2296142578125, 0.8349609375, 0.0008459091186523438, 0.11859130859375, 0.0015201568603515625, 0.00628662109375, 0.0028438568115234375, 0.0009975433349609375, 0.001895904541015625, 0.109130859375, 0.00017881393432617188, 0.10394287109375, 0.309814453125, 0.00507354736328125, 0.0006809234619140625, 0.1424560546875, 0.2261962890625, 5.066394805908203e-05, 0.0236358642578125, 0.0045318603515625, 2.8014183044433594e-05, 1.9073486328125e-05, 0.00016987323760986328, 0.005489349365234375, 0.0007610321044921875, 0.1448974609375, 0.09625244140625, 0.07806396484375], "tokens": [284, 442, 1048, 1572, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 739, 11851, 5504, 11143, 26, 11851, 5504, 11143, 21231, 27, 301, 284, 458, 32, 19065, 5504, 11143, 280, 21231, 45, 334, 320, 719, 477, 1788, 334, 562, 21418, 5504, 11143, 622, 11851, 5504, 11143, 346, 301, 284, 442, 20639]}
{"line_number": 1858, "line_type": "original", "code": "    List<CompilerInput> moduleInputs = module.getInputs();", "entropy": 2.35546875, "is_bug_line": false, "sus_score": 0.12674485010489558, "per_token_entropy": [1.3603515625, 9.28125, 0.01241302490234375, 3.705078125, 5.19140625, 0.003849029541015625, 3.876953125, 0.0833740234375, 0.0875244140625, 4.64453125, 2.75, 1.7705078125, 0.0261383056640625, 0.16357421875], "tokens": [264, 1682, 46, 8115, 1612, 48, 2297, 13719, 280, 2297, 32, 371, 13719, 473]}
{"line_number": 1858, "line_type": "generated", "code": "\n    return errorManager;\n  }\n\n  @Override\n  public void setTypedScopeCreator(TypedScopeCreator creator) {\n    this.typedScopeCreator = creator;\n  }\n\n  @Override\n  public TypedScopeCreator getTypedScopeCreator() {\n    if (", "entropy": 0.215576171875, "is_bug_line": false, "sus_score": 0.12674485010489558, "per_token_entropy": [0.41162109375, 0.3427734375, 0.70751953125, 0.0194091796875, 0.0198974609375, 0.040557861328125, 0.0006117820739746094, 0.2142333984375, 0.56298828125, 0.0169830322265625, 0.0010776519775390625, 0.5927734375, 1.4501953125, 1.0029296875, 1.6201171875, 0.415771484375, 0.0264892578125, 0.046905517578125, 0.0166168212890625, 3.4332275390625e-05, 0.00048065185546875, 0.51123046875, 0.00318145751953125, 0.00449371337890625, 0.05889892578125, 0.8623046875, 0.0007243156433105469, 0.1474609375, 0.0017948150634765625, 0.0063629150390625, 0.0029163360595703125, 0.0012731552124023438, 0.0022869110107421875, 0.10003662109375, 0.00014841556549072266, 0.1243896484375, 0.296142578125, 0.00527191162109375, 0.0008339881896972656, 0.14453125, 0.188232421875, 3.886222839355469e-05, 0.01409149169921875, 0.006473541259765625, 2.6702880859375e-05, 2.014636993408203e-05, 0.0001760721206665039, 0.007648468017578125, 0.0008444786071777344, 0.04608154296875, 1.1591796875, 0.00751495361328125], "tokens": [284, 442, 1048, 1572, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 739, 11851, 5504, 11143, 26, 11851, 5504, 11143, 21231, 27, 301, 284, 458, 32, 19065, 5504, 11143, 280, 21231, 45, 334, 320, 719, 477, 1788, 334, 562, 21418, 5504, 11143, 622, 11851, 5504, 11143, 346, 301, 284, 415, 308]}
{"line_number": 1859, "line_type": "original", "code": "    if (moduleInputs.size() > 0) {", "entropy": 1.86328125, "is_bug_line": false, "sus_score": 0.12674485010489558, "per_token_entropy": [2.833984375, 3.171875, 0.0228729248046875, 5.5234375, 8.34375, 0.55322265625, 2.099609375, 0.004802703857421875, 0.9619140625, 0.017730712890625, 0.560546875, 0.04132080078125, 0.077880859375], "tokens": [264, 415, 308, 1647, 13719, 32, 891, 346, 848, 225, 34, 27, 301]}
{"line_number": 1859, "line_type": "generated", "code": "\n  }\n\n  @Override\n  public void setCheckTypes(boolean checkTypes) {\n    this.checkTypes = checkTypes;\n  }\n\n  @Override\n  public boolean getCheckTypes() {\n    return checkTypes;\n  }\n\n  @Override\n  public void", "entropy": 0.271728515625, "is_bug_line": false, "sus_score": 0.12674485010489558, "per_token_entropy": [0.70849609375, 0.402587890625, 0.347412109375, 0.74462890625, 0.0150604248046875, 0.0016889572143554688, 0.46826171875, 1.3173828125, 1.0732421875, 2.669921875, 0.1917724609375, 0.00490570068359375, 0.038299560546875, 0.59375, 0.11041259765625, 0.0062255859375, 0.0174713134765625, 0.09454345703125, 1.03515625, 0.0004050731658935547, 0.0914306640625, 0.003192901611328125, 0.005870819091796875, 0.009735107421875, 0.0002620220184326172, 0.003993988037109375, 0.35791015625, 0.0012798309326171875, 0.171875, 0.2452392578125, 0.005096435546875, 0.0010881423950195312, 0.08489990234375, 0.67919921875, 0.42333984375, 0.014068603515625, 0.0003886222839355469, 0.0009074211120605469, 0.0002808570861816406, 0.0225830078125, 0.1156005859375, 0.1572265625, 6.949901580810547e-05, 0.011993408203125, 0.30419921875, 0.00023937225341796875, 0.220947265625, 0.3544921875, 0.00827789306640625, 0.0017061233520507812, 0.130859375, 0.859375], "tokens": [334, 320, 719, 477, 1788, 334, 562, 763, 739, 2140, 2424, 26, 4398, 1505, 2424, 27, 301, 284, 458, 32, 1553, 2424, 280, 1505, 2424, 45, 334, 320, 719, 477, 1788, 334, 562, 1905, 622, 2140, 2424, 346, 301, 284, 442, 1505, 2424, 45, 334, 320, 719, 477, 1788, 334, 562, 763]}
{"line_number": 1860, "line_type": "original", "code": "      return moduleInputs.get(0).getAstRoot(this);", "entropy": 1.3251953125, "is_bug_line": false, "sus_score": 0.12674485010489558, "per_token_entropy": [8.109375, 1.8388671875, 3.6015625, 5.1484375, 0.21435546875, 0.031463623046875, 0.006999969482421875, 0.059600830078125, 0.258056640625, 0.1878662109375, 0.321533203125, 0.006252288818359375, 0.0201873779296875, 0.0253753662109375, 0.0391845703125], "tokens": [647, 442, 2297, 13719, 32, 371, 26, 34, 547, 371, 19511, 4058, 26, 578, 293]}
{"line_number": 1860, "line_type": "generated", "code": "\n\n  /**\n   * Returns the root of the AST.\n   */\n  public Node getRoot() {\n    return jsRoot;\n  }\n\n  /**\n   * Returns the root of the AST.\n   */\n  public Node getRoot(Compiler compiler) {\n    return", "entropy": 0.51025390625, "is_bug_line": false, "sus_score": 0.12674485010489558, "per_token_entropy": [1.0419921875, 1.5546875, 0.45361328125, 0.0010251998901367188, 2.12890625, 0.716796875, 3.33203125, 0.51708984375, 0.05340576171875, 0.72802734375, 1.3232421875, 0.3349609375, 0.30517578125, 0.01473236083984375, 0.51220703125, 0.265380859375, 0.003665924072265625, 0.59228515625, 0.09588623046875, 0.0037937164306640625, 0.025360107421875, 0.1591796875, 0.07440185546875, 0.0004355907440185547, 0.005695343017578125, 0.00443267822265625, 0.00011992454528808594, 0.149169921875, 0.493408203125, 0.10540771484375, 0.002166748046875, 0.9365234375, 0.41015625, 1.705078125, 0.1605224609375, 0.03704833984375, 0.401123046875, 1.17578125, 0.129150390625, 0.1513671875, 0.01178741455078125, 0.444580078125, 0.56982421875, 0.0626220703125, 2.4921875, 0.97998046875, 0.87841796875, 0.79052734375, 0.00920867919921875, 0.0028533935546875, 0.0118408203125, 0.1759033203125], "tokens": [719, 1022, 664, 319, 3759, 322, 3051, 432, 322, 16095, 32, 664, 569, 334, 562, 4004, 622, 4058, 346, 301, 284, 442, 4060, 4058, 45, 334, 320, 719, 1022, 664, 319, 3759, 322, 3051, 432, 322, 16095, 32, 664, 569, 334, 562, 4004, 622, 4058, 26, 8115, 8980, 27, 301, 284, 442]}
{"line_number": 1850, "line_type": "original", "code": "    if (module == null) {", "entropy": 1.560546875, "is_bug_line": false, "sus_score": 0.10327955589886445, "per_token_entropy": [2.37890625, 3.126953125, 0.1494140625, 3.33203125, 3.251953125, 0.027374267578125, 0.1905517578125, 0.0244293212890625], "tokens": [264, 415, 308, 1647, 610, 744, 27, 301]}
{"line_number": 1850, "line_type": "generated", "code": "\n    }\n  }\n\n  /** Gets the DOT graph of the AST generated at the end of compilation. */\n  public String getAstDotGraph(String name) throws IOException {\n    Node root = getAstRoot(name);\n    if (root!= null)", "entropy": 0.276123046875, "is_bug_line": false, "sus_score": 0.10327955589886445, "per_token_entropy": [0.66162109375, 0.5302734375, 0.180908203125, 0.0020751953125, 0.235107421875, 0.32470703125, 0.50537109375, 0.09576416015625, 0.2215576171875, 0.0298004150390625, 0.0374755859375, 0.061431884765625, 0.321044921875, 1.0400390625, 0.15673828125, 0.0113677978515625, 0.0128631591796875, 0.0007228851318359375, 0.039794921875, 0.03253173828125, 0.00424957275390625, 0.01436614990234375, 0.035736083984375, 0.0545654296875, 0.0599365234375, 0.456298828125, 0.59326171875, 0.0195770263671875, 0.0640869140625, 1.12890625, 1.826171875, 0.1339111328125, 0.05657958984375, 0.004459381103515625, 0.0099334716796875, 0.038848876953125, 0.96240234375, 2.37109375, 0.044158935546875, 0.482421875, 0.67138671875, 0.0291290283203125, 0.1336669921875, 0.08489990234375, 0.0118408203125, 0.059722900390625, 0.2064208984375, 0.000885009765625, 0.005626678466796875, 0.286376953125, 0.0005173683166503906, 0.004337310791015625], "tokens": [284, 320, 334, 320, 719, 1022, 7124, 322, 32763, 3996, 432, 322, 16095, 4723, 821, 322, 943, 432, 16260, 32, 569, 334, 562, 892, 622, 19511, 10025, 3406, 26, 652, 636, 27, 2571, 6291, 301, 284, 4004, 3051, 280, 622, 19511, 4058, 26, 426, 293, 284, 415, 308, 2388, 863, 744, 27]}
{"line_number": 312, "line_type": "original", "code": "    initModules(Lists.<JSSourceFile>newArrayList(externs),", "entropy": 0.94482421875, "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [4.31640625, 2.95703125, 1.9716796875, 0.12481689453125, 3.556640625, 0.51806640625, 0.0199127197265625, 0.0002218484878540039, 6.67572021484375e-06, 0.0007047653198242188, 0.0005669593811035156, 0.0202789306640625, 1.59375, 0.0251617431640625, 0.0010089874267578125, 0.0092010498046875], "tokens": [264, 3219, 12242, 26, 12981, 5700, 60, 1706, 703, 974, 48, 41668, 26, 4318, 101, 471]}
{"line_number": 312, "line_type": "generated", "code": "\n\n  /**\n   * Initializes the instance state needed for a compile job.\n   */\n  public void init(JSSourceFile[] inputs, CompilerOptions options) {\n    init(Lists.<JSSourceFile>newArrayList(inputs), options);\n  }\n\n ", "entropy": 0.2161865234375, "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [0.92919921875, 0.259765625, 0.07208251953125, 0.0004544258117675781, 1.619140625, 0.2161865234375, 0.261962890625, 0.0263519287109375, 0.290771484375, 0.04718017578125, 0.11004638671875, 0.68310546875, 0.0241546630859375, 0.83203125, 0.1427001953125, 0.2164306640625, 0.05181884765625, 0.1263427734375, 0.034393310546875, 0.01554107666015625, 0.170654296875, 1.5, 0.02923583984375, 0.005146026611328125, 0.0036144256591796875, 0.37890625, 1.2119140625, 0.00481414794921875, 0.1319580078125, 0.001049041748046875, 0.0018339157104492188, 0.024169921875, 0.0064849853515625, 0.136962890625, 0.3720703125, 0.051513671875, 0.810546875, 0.1851806640625, 0.006488800048828125, 7.033348083496094e-06, 2.2649765014648438e-06, 3.5643577575683594e-05, 8.320808410644531e-05, 0.0029315948486328125, 0.05401611328125, 0.09375, 0.00017726421356201172, 0.0117645263671875, 0.002132415771484375, 0.00695037841796875, 0.00011897087097167969, 0.0767822265625], "tokens": [719, 1022, 664, 319, 21037, 322, 1980, 1603, 5349, 436, 312, 8329, 3992, 32, 664, 569, 334, 562, 763, 3219, 26, 60, 1706, 703, 974, 1178, 7806, 30, 20209, 2031, 2075, 27, 301, 284, 3219, 26, 12981, 5700, 60, 1706, 703, 974, 48, 41668, 26, 8075, 471, 2075, 293, 334, 320, 719]}
{"line_number": 314, "line_type": "original", "code": "  }", "entropy": 3.234375, "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [2.619140625, 3.8515625], "tokens": [225, 320]}
{"line_number": 314, "line_type": "generated", "code": "\n\n  /**\n   * Initializes the instance state needed for a compile job.\n   */\n  public void init(CompilerOptions options) {\n    this.options = options;\n    initOptions(options);\n\n    this.externs = makeCompilerInput(options.extern", "entropy": 0.329833984375, "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [1.66015625, 0.3349609375, 0.058258056640625, 0.00042629241943359375, 1.890625, 0.1689453125, 0.19677734375, 0.019012451171875, 0.257568359375, 0.033355712890625, 0.0794677734375, 0.406494140625, 0.02227783203125, 0.8369140625, 0.116455078125, 0.1851806640625, 0.067138671875, 0.272705078125, 0.08502197265625, 0.023651123046875, 0.1634521484375, 1.603515625, 0.1944580078125, 0.0052337646484375, 0.19091796875, 0.00963592529296875, 0.09832763671875, 1.7421875, 0.00036215782165527344, 0.6103515625, 0.0021381378173828125, 0.029510498046875, 0.0286102294921875, 0.365966796875, 0.498779296875, 0.466796875, 0.0087890625, 0.01222991943359375, 0.0018520355224609375, 0.78662109375, 0.74755859375, 0.00010824203491210938, 0.1531982421875, 0.003936767578125, 0.00713348388671875, 1.1513671875, 0.0239715576171875, 0.0034580230712890625, 0.047943115234375, 1.1884765625, 0.059722900390625, 0.2357177734375], "tokens": [719, 1022, 664, 319, 21037, 322, 1980, 1603, 5349, 436, 312, 8329, 3992, 32, 664, 569, 334, 562, 763, 3219, 26, 8115, 2031, 2075, 27, 301, 284, 458, 32, 2184, 280, 2075, 45, 284, 3219, 2031, 26, 2184, 293, 446, 458, 32, 4318, 101, 280, 1930, 8115, 1612, 26, 2184, 32, 4318]}
{"line_number": 335, "line_type": "original", "code": "        this.moduleGraph = new JSModuleGraph(modules);", "entropy": 1.2880859375, "is_bug_line": false, "sus_score": 0.10088665446106365, "per_token_entropy": [8.4453125, 5.34765625, 0.01226806640625, 1.46875, 0.3203125, 0.043853759765625, 0.51904296875, 0.0335693359375, 5.4955482482910156e-05, 8.26120376586914e-05, 0.1219482421875, 0.2578125, 0.177001953125], "tokens": [351, 458, 32, 1647, 3406, 280, 537, 7750, 2459, 3406, 26, 3477, 293]}
{"line_number": 335, "line_type": "generated", "code": "\n  }\n\n  /**\n   * If there are any empty modules, fill them with a single input.\n   */\n  private void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.", "entropy": 0.322998046875, "is_bug_line": false, "sus_score": 0.10088665446106365, "per_token_entropy": [0.40576171875, 0.0011301040649414062, 0.060333251953125, 0.202880859375, 0.03533935546875, 0.00011336803436279297, 1.4521484375, 1.9912109375, 0.5009765625, 1.3017578125, 0.50927734375, 0.09222412109375, 0.430419921875, 0.642578125, 0.33447265625, 1.033203125, 1.369140625, 0.97998046875, 0.87451171875, 2.46484375, 0.16064453125, 0.08770751953125, 0.0032176971435546875, 0.01477813720703125, 0.251708984375, 0.00029540061950683594, 6.9141387939453125e-06, 3.635883331298828e-05, 0.0001004934310913086, 0.004497528076171875, 0.00036454200744628906, 0.00010228157043457031, 3.933906555175781e-06, 1.7762184143066406e-05, 0.0024890899658203125, 0.00118255615234375, 0.0012378692626953125, 0.370361328125, 0.38427734375, 0.0004968643188476562, 0.42919921875, 6.198883056640625e-06, 0.1959228515625, 0.0081329345703125, 0.0099639892578125, 0.0003414154052734375, 0.00016200542449951172, 0.118896484375, 0.034423828125, 0.021392822265625, 0.0091552734375, 0.0031948089599609375], "tokens": [334, 320, 719, 1022, 664, 319, 1670, 2017, 884, 1346, 3502, 7896, 30, 5318, 3026, 623, 312, 3982, 1509, 32, 664, 569, 334, 945, 763, 5318, 2766, 12242, 26, 720, 46, 4624, 2459, 48, 7896, 27, 301, 284, 436, 308, 4624, 2459, 2297, 499, 7896, 27, 301, 397, 415, 308, 1647, 32]}
{"line_number": 342, "line_type": "original", "code": "      }", "entropy": 4.63671875, "is_bug_line": false, "sus_score": 0.10088665446106365, "per_token_entropy": [7.4921875, 1.7841796875], "tokens": [647, 320]}
{"line_number": 342, "line_type": "generated", "code": "\n  }\n\n  /**\n   * If any modules are empty, fill them in with an empty file.\n   */\n  private void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.", "entropy": 0.27197265625, "is_bug_line": false, "sus_score": 0.10088665446106365, "per_token_entropy": [0.3916015625, 0.5234375, 0.1160888671875, 0.21044921875, 0.031280517578125, 0.0002467632293701172, 1.4140625, 1.4365234375, 0.880859375, 0.2734375, 0.291748046875, 0.100341796875, 0.6357421875, 0.2080078125, 0.450439453125, 0.078369140625, 2.361328125, 0.65869140625, 1.8837890625, 0.81103515625, 0.19482421875, 0.10028076171875, 0.0021514892578125, 0.022308349609375, 0.260498046875, 0.0002503395080566406, 1.7642974853515625e-05, 3.349781036376953e-05, 7.200241088867188e-05, 0.00699615478515625, 0.0002677440643310547, 0.0002715587615966797, 2.7418136596679688e-06, 1.621246337890625e-05, 0.0021686553955078125, 0.0015211105346679688, 0.0012140274047851562, 0.03619384765625, 0.262451171875, 0.0007615089416503906, 0.25048828125, 6.4373016357421875e-06, 0.1588134765625, 0.00650787353515625, 0.0038814544677734375, 0.00016200542449951172, 0.00012350082397460938, 0.005794525146484375, 0.0635986328125, 0.006679534912109375, 0.0018453598022460938, 0.0012912750244140625], "tokens": [334, 320, 719, 1022, 664, 319, 1670, 1346, 7896, 884, 3502, 30, 5318, 3026, 328, 623, 600, 3502, 803, 32, 664, 569, 334, 945, 763, 5318, 2766, 12242, 26, 720, 46, 4624, 2459, 48, 7896, 27, 301, 284, 436, 308, 4624, 2459, 2297, 499, 7896, 27, 301, 397, 415, 308, 1647, 32]}
{"line_number": 977, "line_type": "original", "code": "    if (inputsByName.containsKey(name)) {", "entropy": 1.6728515625, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [4.2890625, 0.66650390625, 0.02496337890625, 8.9296875, 0.5341796875, 0.061431884765625, 1.2099609375, 0.0108642578125, 2.275390625, 0.10430908203125, 0.300537109375], "tokens": [264, 415, 308, 8075, 9813, 32, 15943, 26, 426, 490, 301]}
{"line_number": 977, "line_type": "generated", "code": "\n    if (module!= null) {\n      module.replaceInput(oldInput, newInput);\n    }\n\n    return true;\n  }\n\n  /**\n   * Removes an extern file from AST.\n   * @param name The name of the file to be removed", "entropy": 0.2841796875, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [0.290283203125, 0.9921875, 0.021484375, 0.053985595703125, 0.146728515625, 0.00458526611328125, 0.048065185546875, 0.004428863525390625, 0.053314208984375, 0.80029296875, 0.028533935546875, 1.037109375, 0.955078125, 0.034332275390625, 0.05328369140625, 0.0006308555603027344, 0.007244110107421875, 0.0032367706298828125, 0.00031304359436035156, 0.00787353515625, 0.0709228515625, 6.42538070678711e-05, 0.97998046875, 0.1854248046875, 0.0013551712036132812, 0.0003361701965332031, 0.016876220703125, 0.0007338523864746094, 0.259033203125, 1.41796875, 0.484375, 0.0008387565612792969, 2.552734375, 1.0390625, 0.4228515625, 1.3544921875, 0.085693359375, 0.2442626953125, 0.042572021484375, 0.058746337890625, 0.07110595703125, 0.0911865234375, 0.00678253173828125, 0.17236328125, 0.015960693359375, 0.01348876953125, 0.002658843994140625, 0.005306243896484375, 0.62939453125, 0.00542449951171875, 0.00400543212890625, 0.00199127197265625], "tokens": [284, 415, 308, 1647, 863, 744, 27, 301, 397, 2297, 32, 3227, 1612, 26, 1455, 1612, 30, 537, 1612, 293, 284, 320, 446, 442, 861, 45, 334, 320, 719, 1022, 664, 319, 24992, 600, 12098, 803, 645, 16095, 32, 664, 319, 477, 753, 636, 886, 636, 432, 322, 803, 372, 526, 6556]}
{"line_number": 980, "line_type": "original", "code": "    SourceAst ast = new SyntheticAst(name);", "entropy": 3.5703125, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [3.052734375, 11.2265625, 4.3125, 3.873046875, 0.62548828125, 0.8310546875, 11.1796875, 0.058807373046875, 0.72021484375, 0.11578369140625, 4.4375, 2.396484375], "tokens": [264, 6374, 19511, 10020, 280, 537, 40261, 18228, 19511, 26, 426, 293]}
{"line_number": 980, "line_type": "generated", "code": "\n    }\n    return true;\n  }\n\n  @Override\n  public CompilerInput newStringInput(String name, String source) {\n    if (inputsByName.containsKey(name)) {\n      throw new IllegalArgumentException(\"Conflicting input name: \" + name);\n   ", "entropy": 0.1893310546875, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [0.380859375, 0.11883544921875, 0.95654296875, 0.07568359375, 0.0010309219360351562, 0.0004031658172607422, 0.072509765625, 0.0006260871887207031, 0.33837890625, 0.55712890625, 0.004405975341796875, 0.003101348876953125, 0.0762939453125, 0.82080078125, 0.0162200927734375, 0.220458984375, 2.248046875, 0.0281982421875, 0.00033545494079589844, 0.1689453125, 0.34228515625, 0.01220703125, 0.07440185546875, 1.408203125, 0.2254638671875, 0.0076446533203125, 0.09246826171875, 0.62158203125, 0.00798797607421875, 0.1414794921875, 0.00019228458404541016, 9.131431579589844e-05, 0.00133514404296875, 6.914138793945312e-05, 0.00028443336486816406, 0.00200653076171875, 0.0003037452697753906, 0.0025482177734375, 0.02288818359375, 0.0002970695495605469, 0.02325439453125, 0.0280609130859375, 0.182861328125, 0.0002009868621826172, 0.4931640625, 0.0289764404296875, 0.0144805908203125, 0.0018024444580078125, 0.00032520294189453125, 0.0013074874877929688, 0.0010089874267578125, 0.0169830322265625], "tokens": [284, 320, 284, 442, 861, 45, 334, 320, 719, 477, 1788, 334, 562, 20209, 1612, 537, 652, 1612, 26, 652, 636, 30, 892, 1914, 27, 301, 284, 415, 308, 8075, 9813, 32, 15943, 26, 426, 490, 301, 397, 1422, 537, 12137, 440, 19610, 299, 1509, 636, 44, 313, 474, 636, 293, 284]}
{"line_number": 981, "line_type": "original", "code": "    CompilerInput input = new CompilerInput(ast, name, true);", "entropy": 2.0703125, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [4.75390625, 7.11328125, 0.294677734375, 2.318359375, 0.1290283203125, 1.287109375, 0.7958984375, 0.00029587745666503906, 0.00960540771484375, 0.166015625, 4.19921875, 3.6015625, 1.9970703125, 4.26171875, 0.1273193359375], "tokens": [264, 20209, 1612, 1509, 280, 537, 20209, 1612, 26, 633, 30, 636, 30, 861, 293]}
{"line_number": 981, "line_type": "generated", "code": "\n    return true;\n  }\n\n  @Override\n  public CompilerInput newStringInput(String name, String source) {\n    return new SourceAst(name, source).compilerInput;\n  }\n\n  @Override\n  public CompilerInput newJsFileInput(File", "entropy": 0.37548828125, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [0.2423095703125, 0.098876953125, 0.003086090087890625, 0.0016193389892578125, 0.0285797119140625, 0.0012426376342773438, 0.3720703125, 0.69091796875, 0.005855560302734375, 0.0032806396484375, 0.08575439453125, 1.01171875, 0.036163330078125, 0.338623046875, 1.7431640625, 0.03076171875, 0.0003323554992675781, 0.2222900390625, 0.36376953125, 0.007122039794921875, 0.09246826171875, 1.5849609375, 0.2548828125, 0.00740814208984375, 0.051788330078125, 1.1845703125, 0.07830810546875, 2.408203125, 0.06365966796875, 0.08062744140625, 0.27197265625, 0.032745361328125, 0.138671875, 0.66357421875, 1.564453125, 0.0011739730834960938, 0.2042236328125, 0.0099945068359375, 0.000347137451171875, 0.151611328125, 0.29443359375, 0.002979278564453125, 0.0005054473876953125, 0.0897216796875, 0.2470703125, 0.016326904296875, 0.12744140625, 0.95703125, 1.478515625, 0.91552734375, 0.00299072265625, 1.2666015625], "tokens": [284, 442, 861, 45, 334, 320, 719, 477, 1788, 334, 562, 20209, 1612, 537, 652, 1612, 26, 652, 636, 30, 892, 1914, 27, 301, 284, 442, 537, 6374, 19511, 26, 426, 30, 1914, 547, 10199, 1612, 45, 334, 320, 719, 477, 1788, 334, 562, 20209, 1612, 537, 10535, 974, 1612, 26, 974]}
{"line_number": 982, "line_type": "original", "code": "    inputsByName.put(name, input);", "entropy": 1.2607421875, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [5.6328125, 2.69921875, 0.247802734375, 0.005008697509765625, 0.103515625, 0.00494384765625, 3.171875, 0.0037517547607421875, 0.72705078125, 0.0138702392578125], "tokens": [264, 7806, 9813, 32, 524, 26, 426, 30, 1509, 293]}
{"line_number": 982, "line_type": "generated", "code": "\n  }", "entropy": 0.125, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [0.2279052734375, 0.0220794677734375], "tokens": [334, 320]}
{"line_number": 983, "line_type": "original", "code": "    externsRoot.addChildToFront(ast.getAstRoot(this));", "entropy": 1.94140625, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [7.89453125, 9.6484375, 0.603515625, 3.5625, 2.685546875, 3.056640625, 0.01453399658203125, 1.626953125, 0.0116729736328125, 3.01171875, 0.42529296875, 0.09222412109375, 0.04034423828125, 0.001018524169921875, 0.15576171875, 0.12939453125, 0.0245819091796875], "tokens": [264, 12098, 101, 4058, 32, 21545, 705, 10112, 26, 633, 32, 371, 19511, 4058, 26, 578, 876]}
{"line_number": 983, "line_type": "generated", "code": "\n\n  /**\n   * Remove an extern input dynamically. Intended for incremental\n   * re-compilation.\n   */\n  void removeIncrementalExtern(String externName) {\n    Preconditions.checkArgument(externName.endsWith(\".js\"));\n    CompilerInput input =", "entropy": 0.388427734375, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [0.435302734375, 1.5556640625, 0.51416015625, 0.0007266998291015625, 2.921875, 1.5107421875, 0.6982421875, 0.60693359375, 0.29443359375, 0.0214080810546875, 0.10400390625, 0.00012743473052978516, 0.00749969482421875, 0.03271484375, 0.66943359375, 0.000530242919921875, 0.25146484375, 0.1376953125, 0.00621795654296875, 0.0157928466796875, 0.020751953125, 0.297119140625, 0.0064697265625, 0.09698486328125, 0.005565643310546875, 0.28369140625, 0.0207672119140625, 2.384185791015625e-07, 0.7861328125, 0.22021484375, 0.416259765625, 0.283203125, 0.00778961181640625, 0.0015554428100585938, 0.01276397705078125, 1.9013671875, 0.0002472400665283203, 0.05706787109375, 0.85400390625, 0.042724609375, 1.0595703125, 0.1295166015625, 0.18359375, 0.405517578125, 0.252685546875, 0.2117919921875, 0.1976318359375, 0.1279296875, 1.228515625, 0.0004150867462158203, 1.224609375, 0.08782958984375], "tokens": [719, 1022, 664, 319, 6478, 600, 12098, 1509, 22524, 32, 701, 10831, 436, 33530, 664, 319, 316, 31, 31670, 32, 664, 569, 334, 763, 3345, 44571, 571, 900, 26, 652, 12098, 558, 27, 301, 284, 40596, 32, 1553, 3484, 26, 4318, 558, 32, 21000, 5791, 754, 2974, 284, 20209, 1612, 1509, 280]}
{"line_number": 984, "line_type": "original", "code": "    return input;", "entropy": 3.013671875, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [7.828125, 3.0546875, 1.142578125, 0.032440185546875], "tokens": [264, 442, 1509, 45]}
{"line_number": 984, "line_type": "generated", "code": "\n  @Override\n  public void setExtern(String extern) {\n    externsRoot.getFirstChild().setString(extern);\n  }", "entropy": 0.54443359375, "is_bug_line": false, "sus_score": 0.0842151921066519, "per_token_entropy": [0.82958984375, 1.28515625, 0.00870513916015625, 0.0067291259765625, 0.152587890625, 1.9677734375, 1.74609375, 0.6630859375, 1.049041748046875e-05, 0.59033203125, 1.09375, 0.305419921875, 0.67626953125, 0.00800323486328125, 0.043212890625, 1.384765625, 0.4052734375, 0.385498046875, 0.09942626953125, 2.951171875, 0.00203704833984375, 0.02099609375, 0.41162109375, 0.01345062255859375, 0.06640625, 0.01898193359375, 0.1131591796875, 0.00040984153747558594], "tokens": [334, 477, 1788, 334, 562, 763, 739, 571, 900, 26, 652, 12098, 27, 301, 284, 12098, 101, 4058, 32, 25657, 2931, 922, 24353, 26, 4318, 293, 334, 320]}
