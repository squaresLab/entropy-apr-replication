{"line_number": 142, "line_type": "original", "code": "        Node finallyBlock = n.getLastChild();", "entropy": 1.6220703125, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [8.0703125, 2.953125, 3.7890625, 0.03082275390625, 0.05914306640625, 0.751953125, 0.055694580078125, 0.3701171875, 0.0012912750244140625, 0.1409912109375], "tokens": [351, 4004, 8295, 2227, 280, 310, 32, 20197, 2931, 473]}
{"line_number": 142, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Try to minimize an 'if' block.\n   *\n   * @param trueBlock The block of statements that are executed when the\n   *   condition is true.\n   * @param falseBlock The block of statements that are executed", "entropy": 0.458740234375, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.6787109375, 0.07305908203125, 0.2493896484375, 0.14208984375, 0.043914794921875, 0.0003807544708251953, 1.8046875, 0.10076904296875, 0.53515625, 2.20703125, 0.96142578125, 0.014984130859375, 0.037017822265625, 0.400146484375, 1.6572265625, 0.2025146484375, 0.07330322265625, 0.841796875, 0.000850677490234375, 0.72607421875, 0.0562744140625, 0.52685546875, 0.0229339599609375, 0.2078857421875, 1.138671875, 1.3525390625, 1.0029296875, 1.5009765625, 2.033203125, 0.6171875, 1.7216796875, 0.2330322265625, 0.57373046875, 0.00023853778839111328, 0.5908203125, 0.85986328125, 0.366455078125, 0.05108642578125, 0.0638427734375, 0.06280517578125, 0.002269744873046875, 0.00699615478515625, 0.001087188720703125, 0.01303863525390625, 0.0009179115295410156, 0.0172119140625, 0.0145416259765625, 0.005573272705078125, 0.0201873779296875, 0.0297698974609375, 0.007617950439453125, 0.01165008544921875], "tokens": [334, 320, 719, 1022, 664, 319, 8959, 372, 32758, 600, 330, 325, 25, 2163, 32, 664, 319, 664, 319, 477, 753, 861, 2227, 886, 2163, 432, 15252, 688, 884, 10768, 1412, 322, 664, 319, 261, 3700, 438, 861, 32, 664, 319, 477, 753, 901, 2227, 886, 2163, 432, 15252, 688, 884, 10768]}
{"line_number": 143, "line_type": "original", "code": "        tryMinimizeExits(finallyBlock, exitType, labelName);", "entropy": 1.490234375, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [10.9375, 2.205078125, 0.0171356201171875, 7.796287536621094e-05, 0.04522705078125, 2.574920654296875e-05, 0.00952911376953125, 10.2421875, 0.123046875, 0.162109375, 0.044158935546875, 0.0009889602661132812, 0.01763916015625, 0.037078857421875, 0.0008974075317382812, 0.00521087646484375], "tokens": [351, 1596, 2928, 12178, 571, 1507, 26, 22192, 2227, 30, 4323, 620, 30, 2266, 558, 293]}
{"line_number": 143, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Minimize exits in an 'if' block.\n   *\n   * @param ifBlock The if block to process.\n   * @param elseBlock The else block to process.\n   * @param ifNode The if node.", "entropy": 0.445556640625, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.364501953125, 0.0014362335205078125, 0.23388671875, 0.15576171875, 0.0440673828125, 0.00040984153747558594, 2.517578125, 0.08428955078125, 1.775390625, 1.30078125, 1.0380859375, 1.150390625, 0.01366424560546875, 0.034027099609375, 0.45166015625, 0.6328125, 0.181640625, 0.089111328125, 0.79345703125, 0.001155853271484375, 0.5615234375, 0.0655517578125, 1.755859375, 0.31201171875, 0.255615234375, 1.8447265625, 0.50439453125, 0.458740234375, 0.78515625, 0.144775390625, 0.050048828125, 0.01467132568359375, 0.01373291015625, 0.0015287399291992188, 0.1357421875, 0.0022411346435546875, 0.039947509765625, 0.1082763671875, 0.0191497802734375, 0.333740234375, 0.030792236328125, 0.281005859375, 0.0755615234375, 0.12890625, 0.014312744140625, 0.007404327392578125, 0.29541015625, 1.037109375, 0.054595947265625, 1.0703125, 0.254150390625, 1.65234375], "tokens": [334, 320, 719, 1022, 664, 319, 7507, 12178, 32835, 328, 600, 330, 325, 25, 2163, 32, 664, 319, 664, 319, 477, 753, 415, 2227, 886, 415, 2163, 372, 2164, 32, 664, 319, 477, 753, 813, 2227, 886, 813, 2163, 372, 2164, 32, 664, 319, 477, 753, 415, 1212, 886, 415, 1541, 32]}
{"line_number": 128, "line_type": "original", "code": "      Node tryBlock = n.getFirstChild();", "entropy": 2.11328125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [5.28125, 2.712890625, 8.7890625, 0.65380859375, 0.1536865234375, 1.7939453125, 0.73974609375, 0.8369140625, 0.001369476318359375, 0.1810302734375], "tokens": [647, 4004, 1596, 2227, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 128, "line_type": "generated", "code": "\n        if (falseBlock!= null) {\n          falseBlock = falseBlock.getNext();\n          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n              ifTree, exitType, labelName);\n        }\n      }\n    }\n\n    // Now", "entropy": 0.1790771484375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.15771484375, 0.85888671875, 0.1646728515625, 0.06695556640625, 0.00016117095947265625, 0.12890625, 0.0018825531005859375, 0.062225341796875, 0.00475311279296875, 0.02679443359375, 1.6748046875, 0.0016317367553710938, 0.039337158203125, 0.11224365234375, 0.0002243518829345703, 0.0004775524139404297, 0.014434814453125, 0.00235748291015625, 0.112060546875, 0.1253662109375, 0.000865936279296875, 1.9073486328125e-06, 0.006351470947265625, 0.0011625289916992188, 0.0005235671997070312, 1.3113021850585938e-06, 0.0008492469787597656, 0.01305389404296875, 2.384185791015625e-06, 0.0024471282958984375, 0.9052734375, 0.0003604888916015625, 0.0149688720703125, 0.0291748046875, 0.052215576171875, 3.933906555175781e-05, 0.126953125, 0.004444122314453125, 1.1444091796875e-05, 0.0001220703125, 0.0013971328735351562, 1.6927719116210938e-05, 0.0012807846069335938, 0.036956787109375, 4.851818084716797e-05, 0.4296875, 0.00862884521484375, 0.7626953125, 0.0010538101196289062, 0.6591796875, 0.1512451171875, 2.54296875], "tokens": [291, 415, 308, 1870, 2227, 863, 744, 27, 301, 616, 901, 2227, 280, 901, 2227, 32, 23017, 473, 616, 1596, 2928, 12178, 2797, 2227, 571, 1507, 26, 1870, 2227, 30, 861, 2227, 30, 1090, 415, 3350, 30, 4323, 620, 30, 2266, 558, 293, 291, 320, 397, 320, 284, 320, 446, 434, 9080]}
{"line_number": 129, "line_type": "original", "code": "      tryMinimizeExits(tryBlock, exitType, labelName);", "entropy": 1.3603515625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [7.15234375, 6.16015625, 0.04547119140625, 0.0001513957977294922, 1.630859375, 4.0531158447265625e-06, 0.0035572052001953125, 4.625, 1.9677734375, 0.07012939453125, 0.040069580078125, 0.000522613525390625, 0.0306854248046875, 0.027374267578125, 9.834766387939453e-05, 0.004398345947265625], "tokens": [647, 1596, 2928, 12178, 571, 1507, 26, 1270, 2227, 30, 4323, 620, 30, 2266, 558, 293]}
{"line_number": 129, "line_type": "generated", "code": "\n        trueBlock = ifTree.getFirstChild().getNext();\n        falseBlock = trueBlock.getNext();\n        tryMinimizeIfBlockExits(falseBlock, trueBlock,\n            ifTree, exitType, labelName);\n      }\n\n      // A '", "entropy": 0.09674072265625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.07513427734375, 0.609375, 0.0003437995910644531, 0.0019130706787109375, 0.0635986328125, 0.0003936290740966797, 0.00022900104522705078, 0.0106048583984375, 0.00010216236114501953, 0.002513885498046875, 0.00023221969604492188, 0.00218963623046875, 0.007053375244140625, 0.0265960693359375, 0.00024700164794921875, 0.00016641616821289062, 0.014923095703125, 5.245208740234375e-06, 5.054473876953125e-05, 5.793571472167969e-05, 0.003078460693359375, 0.1353759765625, 0.487548828125, 0.00406646728515625, 9.298324584960938e-06, 0.0064544677734375, 0.0016870498657226562, 0.0003972053527832031, 5.960464477539062e-07, 0.0007781982421875, 0.07525634765625, 7.152557373046875e-07, 0.0004253387451171875, 0.220458984375, 2.396106719970703e-05, 0.003376007080078125, 0.026397705078125, 0.0157470703125, 2.9087066650390625e-05, 0.08135986328125, 0.00785064697265625, 6.318092346191406e-06, 8.14199447631836e-05, 0.0014753341674804688, 4.887580871582031e-06, 0.0011873245239257812, 0.6162109375, 0.003082275390625, 0.92333984375, 0.072265625, 0.8837890625, 0.64306640625], "tokens": [291, 861, 2227, 280, 415, 3350, 32, 25657, 2931, 922, 23017, 473, 291, 901, 2227, 280, 861, 2227, 32, 23017, 473, 291, 1596, 2928, 12178, 2797, 2227, 571, 1507, 26, 1870, 2227, 30, 861, 2227, 30, 324, 415, 3350, 30, 4323, 620, 30, 2266, 558, 293, 397, 320, 1687, 434, 399, 330]}
{"line_number": 130, "line_type": "original", "code": "      Node allCatchNodes = NodeUtil.getCatchBlock(n);", "entropy": 1.8271484375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [4.91015625, 4.171875, 8.25, 0.798828125, 0.244873046875, 0.111328125, 1.41796875, 0.00580596923828125, 0.0009403228759765625, 3.1015625, 0.0175323486328125, 2.677734375, 0.09088134765625, 1.4912109375, 0.11419677734375], "tokens": [647, 4004, 1169, 20377, 5909, 280, 4004, 1733, 32, 11640, 746, 2227, 26, 96, 293]}
{"line_number": 130, "line_type": "generated", "code": "\n        falseBlock = trueBlock.getNext();\n        if (falseBlock!= null) {\n          tryMinimizeIfBlockExits(falseBlock, null,\n              ifTree, exitType, labelName);\n        }\n      }\n    }\n  }\n\n  /**", "entropy": 0.1142578125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.18994140625, 0.53173828125, 0.0013179779052734375, 0.0009908676147460938, 0.34375, 6.270408630371094e-05, 0.00522613525390625, 0.00017881393432617188, 0.008270263671875, 0.167236328125, 0.77685546875, 0.0274658203125, 0.07928466796875, 0.000240325927734375, 0.10137939453125, 0.0006375312805175781, 0.036956787109375, 0.004344940185546875, 0.021881103515625, 0.042388916015625, 0.0009236335754394531, 9.5367431640625e-07, 0.01421356201171875, 0.0004930496215820312, 0.00019299983978271484, 2.384185791015625e-07, 0.00035190582275390625, 0.12164306640625, 1.3113021850585938e-06, 0.0011205673217773438, 0.62841796875, 0.0014600753784179688, 0.195556640625, 0.031402587890625, 4.696846008300781e-05, 0.02191162109375, 0.0014753341674804688, 2.1457672119140625e-06, 0.0001996755599975586, 0.003261566162109375, 2.6702880859375e-05, 0.0003783702850341797, 0.02020263671875, 0.00015783309936523438, 0.448974609375, 0.00879669189453125, 0.759765625, 0.0010499954223632812, 0.69775390625, 0.002712249755859375, 0.48095703125, 0.15673828125], "tokens": [291, 901, 2227, 280, 861, 2227, 32, 23017, 473, 291, 415, 308, 1870, 2227, 863, 744, 27, 301, 616, 1596, 2928, 12178, 2797, 2227, 571, 1507, 26, 1870, 2227, 30, 744, 30, 1090, 415, 3350, 30, 4323, 620, 30, 2266, 558, 293, 291, 320, 397, 320, 284, 320, 334, 320, 719, 1022]}
{"line_number": 131, "line_type": "original", "code": "      if (NodeUtil.hasCatchHandler(allCatchNodes)) {", "entropy": 1.986328125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [4.78515625, 0.67529296875, 0.1824951171875, 4.4140625, 0.0010814666748046875, 0.00016880035400390625, 2.228515625, 7.72265625, 2.357421875, 0.0367431640625, 7.0390625, 0.00978851318359375, 0.0193023681640625, 0.156005859375, 0.1639404296875], "tokens": [647, 415, 308, 1212, 1733, 32, 2040, 20377, 1972, 26, 464, 20377, 5909, 490, 301]}
{"line_number": 131, "line_type": "generated", "code": "\n        if (falseBlock!= null) {\n          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n              ifTree, exitType, labelName);\n        }\n      }\n    }\n\n    // Now, look for consecutive statements that can be combined", "entropy": 0.37939453125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.224853515625, 0.689453125, 0.08837890625, 0.137451171875, 0.00042557716369628906, 0.10498046875, 0.00104522705078125, 0.04437255859375, 0.0102081298828125, 0.060150146484375, 0.09747314453125, 0.0020961761474609375, 4.887580871582031e-06, 0.01605224609375, 0.0008306503295898438, 0.0004627704620361328, 1.1920928955078125e-07, 0.0005640983581542969, 0.048675537109375, 1.1920928955078125e-06, 0.0003497600555419922, 0.634765625, 4.661083221435547e-05, 0.00142669677734375, 0.038177490234375, 0.0261077880859375, 2.193450927734375e-05, 0.103271484375, 0.004180908203125, 5.9604644775390625e-06, 0.0002460479736328125, 0.0021820068359375, 2.47955322265625e-05, 0.0009870529174804688, 0.025299072265625, 0.0001270771026611328, 0.2392578125, 0.00997161865234375, 0.904296875, 0.00191497802734375, 0.7490234375, 0.13427734375, 2.439453125, 2.423828125, 2.328125, 0.3232421875, 3.244140625, 1.4111328125, 0.962890625, 0.970703125, 0.0821533203125, 1.1474609375], "tokens": [291, 415, 308, 1870, 2227, 863, 744, 27, 301, 616, 1596, 2928, 12178, 2797, 2227, 571, 1507, 26, 1870, 2227, 30, 861, 2227, 30, 1090, 415, 3350, 30, 4323, 620, 30, 2266, 558, 293, 291, 320, 397, 320, 284, 320, 446, 434, 9080, 30, 2779, 436, 36059, 15252, 688, 883, 526, 16962]}
{"line_number": 141, "line_type": "original", "code": "      if (NodeUtil.hasFinally(n)) {", "entropy": 1.1884765625, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [6.14453125, 2.13671875, 0.2119140625, 2.921875, 0.0012149810791015625, 0.00010991096496582031, 2.01171875, 0.40087890625, 0.2188720703125, 0.051666259765625, 0.12744140625, 0.03729248046875], "tokens": [647, 415, 308, 1212, 1733, 32, 2040, 28325, 26, 96, 490, 301]}
{"line_number": 141, "line_type": "generated", "code": "\n    // If there is only one exit from the block, then we can try to\n    // move the exit up to the block itself.\n    if (n.hasOneChild()) {\n      Node onlyChild = n.getFirstChild();\n      if (onlyChild", "entropy": 0.8134765625, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [1.5361328125, 0.2418212890625, 2.740234375, 1.904296875, 0.884765625, 0.83642578125, 0.220703125, 1.189453125, 2.28515625, 0.496337890625, 0.287353515625, 0.57421875, 2.080078125, 2.4296875, 0.387451171875, 3.26171875, 0.27197265625, 0.85302734375, 0.0006923675537109375, 2.380859375, 0.875, 0.375732421875, 1.578125, 0.8466796875, 0.261962890625, 0.9501953125, 2.494140625, 0.328125, 0.341796875, 1.1396484375, 0.0906982421875, 0.84619140625, 0.005588531494140625, 2.197265625, 0.03192138671875, 0.459716796875, 0.0023975372314453125, 0.10638427734375, 0.3525390625, 1.451171875, 0.2244873046875, 0.0185546875, 0.01102447509765625, 0.0005922317504882812, 0.71142578125, 0.00017750263214111328, 0.0106658935546875, 0.250244140625, 0.50390625, 0.145263671875, 0.82666015625, 0.00012934207916259766], "tokens": [284, 434, 1670, 2017, 438, 1755, 1591, 4323, 645, 322, 2163, 30, 1615, 996, 883, 1596, 372, 284, 434, 5169, 322, 4323, 973, 372, 322, 2163, 8015, 32, 284, 415, 308, 96, 32, 41906, 2931, 1157, 301, 397, 4004, 1755, 2931, 280, 310, 32, 25657, 2931, 473, 397, 415, 308, 2585, 2931]}
{"line_number": 285, "line_type": "original", "code": "          return n.hasChildren()", "entropy": 2.603515625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [10.1953125, 2.6171875, 3.41796875, 0.384033203125, 1.255859375, 0.0039825439453125, 0.35205078125], "tokens": [2033, 442, 310, 32, 2040, 7640, 346]}
{"line_number": 285, "line_type": "generated", "code": "\n  private void tryMinimizeIfBlockExits(Node srcBlock, Node destBlock,\n      Node ifNode, int exitType, String labelName) {\n    Node exitNodeParent = null;\n    Node exitNode = null;\n\n    // Pick an", "entropy": 0.2137451171875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [1.42578125, 1.1513671875, 1.6494140625, 0.904296875, 0.46875, 0.0020732879638671875, 0.72119140625, 0.59716796875, 1.123046875, 0.0002779960632324219, 0.45947265625, 0.22265625, 0.272705078125, 0.0249481201171875, 0.0223846435546875, 0.024993896484375, 0.09478759765625, 0.00250244140625, 0.0718994140625, 0.229248046875, 0.02679443359375, 0.0290069580078125, 0.004520416259765625, 0.082275390625, 0.0986328125, 0.014129638671875, 0.002483367919921875, 0.440673828125, 0.1453857421875, 0.01019287109375, 0.0026302337646484375, 0.0526123046875, 0.03900146484375, 0.1629638671875, 0.259765625, 0.007656097412109375, 0.00617218017578125, 0.047576904296875, 0.0129852294921875, 0.058197021484375, 0.00036334991455078125, 0.004581451416015625, 0.0013523101806640625, 0.00023066997528076172, 0.00037097930908203125, 0.0021648406982421875, 0.0038585662841796875, 0.0006737709045410156, 0.07635498046875, 0.036834716796875, 0.01309967041015625, 0.00548553466796875], "tokens": [334, 945, 763, 1596, 2928, 12178, 2797, 2227, 571, 1507, 26, 1212, 1561, 2227, 30, 4004, 3466, 2227, 30, 397, 4004, 415, 1212, 30, 629, 4323, 620, 30, 892, 2266, 558, 27, 301, 284, 4004, 4323, 1212, 4433, 280, 744, 45, 284, 4004, 4323, 1212, 280, 744, 45, 446, 434, 24650, 600]}
{"line_number": 110, "line_type": "original", "code": "      NodeUtil.removeChild(n.getParent(), n);", "entropy": 1.8837890625, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [6.1796875, 2.892578125, 3.51171875, 0.0179443359375, 2.9375, 0.32177734375, 0.03094482421875, 2.5390625, 4.08203125, 0.004726409912109375, 0.0131683349609375, 0.08099365234375], "tokens": [647, 4004, 1733, 32, 28878, 26, 96, 32, 18789, 1026, 310, 293]}
{"line_number": 110, "line_type": "generated", "code": "\n    compiler.reportCodeChange();\n  }", "entropy": 0.251953125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.302001953125, 1.3837890625, 5.53131103515625e-05, 0.002231597900390625, 0.00124359130859375, 2.491474151611328e-05, 0.0020275115966796875, 0.576171875, 0.0006933212280273438], "tokens": [284, 8980, 32, 3734, 1227, 1791, 473, 334, 320]}
{"line_number": 111, "line_type": "original", "code": "      compiler.reportCodeChange();", "entropy": 2.68359375, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [5.9765625, 12.578125, 0.025054931640625, 0.12188720703125, 0.0712890625, 0.00107574462890625, 0.0117034912109375], "tokens": [647, 8980, 32, 3734, 1227, 1791, 473]}
{"line_number": 111, "line_type": "generated", "code": "\n    if (n.getLastChild().getNext()!= null) {\n      // We need to remove the exit statement from the end of the block.\n      Node exitNode = n.getLastChild();\n      NodeUtil.removeChild(n, exitNode);\n\n     ", "entropy": 0.640625, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.317138671875, 1.5947265625, 0.07989501953125, 0.73779296875, 0.004634857177734375, 1.63671875, 0.0031375885009765625, 0.06402587890625, 1.38671875, 0.270751953125, 0.263671875, 0.0033969879150390625, 0.2076416015625, 0.01389312744140625, 0.0826416015625, 2.55859375, 2.82421875, 2.181640625, 0.2000732421875, 3.51953125, 1.1494140625, 1.92578125, 2.966796875, 1.05078125, 0.42724609375, 1.2900390625, 0.157958984375, 0.2034912109375, 0.373291015625, 0.89404296875, 0.06329345703125, 0.7451171875, 0.76904296875, 0.55712890625, 0.0177001953125, 0.44873046875, 0.00045371055603027344, 0.02001953125, 0.00013697147369384766, 0.078125, 0.1500244140625, 0.7021484375, 0.186767578125, 0.0001634359359741211, 0.0252532958984375, 0.0002815723419189453, 0.1290283203125, 0.05328369140625, 0.032958984375, 0.00021648406982421875, 0.0011644363403320312, 0.93994140625], "tokens": [284, 415, 308, 96, 32, 20197, 2931, 922, 23017, 346, 863, 744, 27, 301, 397, 434, 2688, 1849, 372, 3345, 322, 4323, 7603, 645, 322, 943, 432, 322, 2163, 32, 397, 4004, 4323, 1212, 280, 310, 32, 20197, 2931, 473, 397, 4004, 1733, 32, 28878, 26, 96, 30, 4323, 1212, 293, 1687]}
{"line_number": 112, "line_type": "original", "code": "      return;", "entropy": 3.669921875, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [4.78515625, 6.0546875, 0.1641845703125], "tokens": [647, 442, 45]}
{"line_number": 112, "line_type": "generated", "code": "\n    Node lastNode = null;\n    Node firstNode = null;\n    Node nextNode = n.getFirstChild();\n    while (nextNode!= null) {\n      if (matchingExitNode(nextNode, exitType, labelName)) {\n        if", "entropy": 0.31396484375, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.61376953125, 1.2421875, 1.7255859375, 1.5537109375, 0.0869140625, 0.83203125, 0.003955841064453125, 0.0223388671875, 0.7265625, 2.15625, 0.56201171875, 0.1041259765625, 0.4248046875, 0.00043654441833496094, 0.053375244140625, 0.76416015625, 2.23046875, 0.19384765625, 0.160888671875, 0.68359375, 0.01406097412109375, 0.2890625, 0.0001252889633178711, 0.02874755859375, 0.053924560546875, 0.3095703125, 0.01446533203125, 0.06854248046875, 2.3603439331054688e-05, 0.006229400634765625, 0.005916595458984375, 0.0284423828125, 0.0010814666748046875, 0.0274505615234375, 0.359619140625, 0.10797119140625, 0.37841796875, 0.0024127960205078125, 0.0014104843139648438, 0.0015707015991210938, 0.004878997802734375, 4.0531158447265625e-06, 0.0017538070678710938, 0.0023517608642578125, 3.933906555175781e-06, 0.0040435791015625, 0.007965087890625, 3.147125244140625e-05, 0.055938720703125, 0.00048041343688964844, 0.0689697265625, 0.340576171875], "tokens": [284, 4004, 2401, 1212, 280, 744, 45, 284, 4004, 1932, 1212, 280, 744, 45, 284, 4004, 2354, 1212, 280, 310, 32, 25657, 2931, 473, 284, 2218, 308, 1978, 1212, 863, 744, 27, 301, 397, 415, 308, 19807, 8112, 1212, 26, 1978, 1212, 30, 4323, 620, 30, 2266, 558, 490, 301, 291, 415]}
{"line_number": 132, "line_type": "original", "code": "        Preconditions.checkState(allCatchNodes.hasOneChild());", "entropy": 2.955078125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [8.0546875, 11.1484375, 0.003536224365234375, 0.0280303955078125, 0.07440185546875, 0.0277099609375, 9.3359375, 2.5859375, 0.0345458984375, 1.8330078125, 5.140625, 0.0021991729736328125, 0.1309814453125], "tokens": [351, 40596, 32, 1553, 1078, 26, 464, 20377, 5909, 32, 41906, 2931, 1035]}
{"line_number": 132, "line_type": "generated", "code": "\n          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n              ifTree, exitType, labelName);\n        }\n      }\n\n      // A 'label' block to process below.\n      if (c.isLabel()) {\n        Node label", "entropy": 0.1358642578125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.039337158203125, 0.278076171875, 0.002048492431640625, 3.4570693969726562e-06, 0.00849151611328125, 0.0009274482727050781, 0.00041985511779785156, -0.0, 0.000316619873046875, 0.0693359375, 1.1920928955078125e-06, 0.0003829002380371094, 0.791015625, 4.8279762268066406e-05, 0.0013675689697265625, 0.0362548828125, 0.0311737060546875, 2.09808349609375e-05, 0.1346435546875, 0.003559112548828125, 7.510185241699219e-06, 0.00012135505676269531, 0.0027027130126953125, 4.0650367736816406e-05, 0.001033782958984375, 0.04559326171875, 0.0001653432846069336, 0.399169921875, 0.006927490234375, 1.0205078125, 0.06353759765625, 0.734375, 0.458984375, 1.341796875, 0.089599609375, 0.2445068359375, 0.13818359375, 0.03973388671875, 0.1712646484375, 0.0352783203125, 0.00821685791015625, 0.1583251953125, 0.0023670196533203125, 0.0283660888671875, 0.00019252300262451172, 0.0017061233520507812, 0.0008554458618164062, 0.055633544921875, 0.00042510032653808594, 0.1259765625, 0.406982421875, 0.08203125], "tokens": [616, 1596, 2928, 12178, 2797, 2227, 571, 1507, 26, 1870, 2227, 30, 861, 2227, 30, 1090, 415, 3350, 30, 4323, 620, 30, 2266, 558, 293, 291, 320, 397, 320, 1687, 434, 399, 330, 1172, 25, 2163, 372, 2164, 4794, 32, 397, 415, 308, 85, 32, 297, 2168, 1157, 301, 291, 4004, 2266]}
{"line_number": 133, "line_type": "original", "code": "        Node catchNode = allCatchNodes.getFirstChild();", "entropy": 1.9375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [4.62890625, 3.544921875, 9.2734375, 0.3798828125, 0.299560546875, 4.6640625, 0.007770538330078125, 0.0207672119140625, 0.10296630859375, 0.217041015625, 0.006744384765625, 0.09893798828125], "tokens": [351, 4004, 2368, 1212, 280, 1169, 20377, 5909, 32, 25657, 2931, 473]}
{"line_number": 133, "line_type": "generated", "code": "\n              ifTree, exitType, labelName);\n        }\n      }\n\n      // A 'while' block to process below.\n      if (c.isWhile()) {\n        Node whileTree = c;\n        Node body = whileTree.getLastChild();\n       ", "entropy": 0.199462890625, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.20849609375, 0.085205078125, 0.0012569427490234375, 0.09808349609375, 0.003925323486328125, 9.417533874511719e-06, 0.0007023811340332031, 0.003467559814453125, 9.417533874511719e-06, 0.00217437744140625, 0.0330810546875, 9.632110595703125e-05, 0.436767578125, 0.006435394287109375, 1.0224609375, 0.06451416015625, 0.85302734375, 0.5283203125, 1.7333984375, 0.19775390625, 0.6162109375, 0.256591796875, 0.034332275390625, 0.12005615234375, 0.035675048828125, 0.0109405517578125, 0.253173828125, 0.00457000732421875, 0.03594970703125, 0.00036025047302246094, 0.002941131591796875, 0.032135009765625, 0.14599609375, 0.0009331703186035156, 0.06390380859375, 0.11407470703125, 0.156494140625, 0.496337890625, 0.00322723388671875, 0.002498626708984375, 0.005931854248046875, 0.0958251953125, 0.0897216796875, 0.9423828125, 0.82666015625, 0.1737060546875, 0.0007672309875488281, 0.0016393661499023438, 0.318359375, 0.0028400421142578125, 0.11102294921875, 0.1387939453125], "tokens": [1090, 415, 3350, 30, 4323, 620, 30, 2266, 558, 293, 291, 320, 397, 320, 1687, 434, 399, 330, 5525, 25, 2163, 372, 2164, 4794, 32, 397, 415, 308, 85, 32, 297, 16225, 1157, 301, 291, 4004, 2218, 3350, 280, 281, 45, 291, 4004, 3361, 280, 2218, 3350, 32, 20197, 2931, 473, 291]}
{"line_number": 134, "line_type": "original", "code": "        Node catchCodeBlock = catchNode.getLastChild();", "entropy": 2.169921875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.4453125, 6.27734375, 6.734375, 2.775390625, 0.0237274169921875, 0.08319091796875, 3.130859375, 0.261962890625, 0.00978851318359375, 0.282958984375, 0.0010728836059570312, 0.02239990234375], "tokens": [351, 4004, 2368, 1227, 2227, 280, 2368, 1212, 32, 20197, 2931, 473]}
{"line_number": 134, "line_type": "generated", "code": "\n        }\n      }\n    }\n  }\n\n  /**\n   * Process an if block and convert any breaks in it to an 'else' block.\n   *\n   * @param trueBlock The block to process.\n   * @param falseBlock The block to process", "entropy": 0.6533203125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.1522216796875, 0.0137939453125, 0.428955078125, 0.00820159912109375, 0.8115234375, 0.00202178955078125, 0.51806640625, 0.0030269622802734375, 0.5419921875, 0.153076171875, 0.03955078125, 0.0004074573516845703, 3.59765625, 1.4130859375, 0.82666015625, 0.8125, 1.66796875, 1.8115234375, 2.1328125, 1.78515625, 2.01953125, 1.1435546875, 0.464599609375, 2.09765625, 1.96875, 0.47412109375, 0.355224609375, 0.54150390625, 0.377197265625, 0.0206756591796875, 0.06500244140625, 0.95849609375, 0.0008492469787597656, 0.66796875, 0.0305328369140625, 0.63818359375, 0.0205841064453125, 0.185546875, 1.0341796875, 1.1044921875, 0.66552734375, 1.0146484375, 0.055877685546875, 0.0056915283203125, 0.005153656005859375, 0.001186370849609375, 0.01513671875, 0.0007500648498535156, 0.056304931640625, 0.5146484375, 0.405029296875, 0.347412109375], "tokens": [291, 320, 397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 6833, 600, 415, 2163, 461, 4483, 1346, 20797, 328, 561, 372, 600, 330, 1824, 25, 2163, 32, 664, 319, 664, 319, 477, 753, 861, 2227, 886, 2163, 372, 2164, 32, 664, 319, 477, 753, 901, 2227, 886, 2163, 372, 2164]}
{"line_number": 135, "line_type": "original", "code": "        tryMinimizeExits(catchCodeBlock, exitType, labelName);", "entropy": 1.298828125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.73046875, 5.09765625, 0.04779052734375, 7.784366607666016e-05, 0.1446533203125, 2.777576446533203e-05, 0.0094757080078125, 8.515625, 1.283203125, 0.01013946533203125, 0.0165557861328125, 0.05572509765625, 0.0008263587951660156, 0.0210723876953125, 0.1373291015625, 0.0013856887817382812, 0.004810333251953125], "tokens": [351, 1596, 2928, 12178, 571, 1507, 26, 5628, 1227, 2227, 30, 4323, 620, 30, 2266, 558, 293]}
{"line_number": 135, "line_type": "generated", "code": "\n      }\n    }\n  }\n\n  /**\n   * Try to minimize the exits of an if block.\n   *\n   * @param trueBlock The block to minimize if it is the true condition.\n   * @param falseBlock The block to minimize if it is", "entropy": 0.4912109375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.341796875, 0.0163421630859375, 1.0693359375, 0.00354766845703125, 0.6787109375, 0.002872467041015625, 0.7177734375, 0.1588134765625, 0.0399169921875, 0.0003616809844970703, 1.853515625, 0.0928955078125, 0.5009765625, 1.0712890625, 1.0078125, 0.4580078125, 0.92431640625, 0.52490234375, 0.6845703125, 0.55859375, 0.1622314453125, 0.06903076171875, 0.76416015625, 0.0009226799011230469, 0.71923828125, 0.0810546875, 0.75927734375, 0.0257720947265625, 0.1868896484375, 1.0205078125, 1.2099609375, 2.068359375, 1.78125, 1.7880859375, 0.89111328125, 1.451171875, 0.42724609375, 0.95703125, 0.31396484375, 0.01004791259765625, 0.006984710693359375, 0.03179931640625, 0.0011148452758789062, 0.0118560791015625, 0.0009322166442871094, 0.0180206298828125, 0.017852783203125, 0.0113677978515625, 0.015655517578125, 0.01544952392578125, 0.01239776611328125, 0.012786865234375], "tokens": [397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 8959, 372, 32758, 322, 32835, 432, 600, 415, 2163, 32, 664, 319, 664, 319, 477, 753, 861, 2227, 886, 2163, 372, 32758, 415, 561, 438, 322, 861, 3700, 32, 664, 319, 477, 753, 901, 2227, 886, 2163, 372, 32758, 415, 561, 438]}
{"line_number": 224, "line_type": "original", "code": "        return;", "entropy": 4.58203125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.88671875, 0.7880859375, 6.0703125], "tokens": [351, 442, 45]}
{"line_number": 224, "line_type": "generated", "code": "\n   */\n  private boolean matchingExitNode(Node n, int type, String labelName) {\n    if (n == null) {\n      return false;\n    }\n\n    if (n.isReturn()) {\n      return true;\n    }\n\n    if (", "entropy": 0.1693115234375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.2117919921875, 0.117431640625, 0.00873565673828125, 0.06072998046875, 0.17626953125, 0.0011453628540039062, 0.0011768341064453125, 0.00042891502380371094, 0.0015115737915039062, 0.005947113037109375, 0.0015697479248046875, 0.00024175643920898438, 0.006237030029296875, 0.016571044921875, 0.0002827644348144531, 0.05267333984375, 0.0026569366455078125, 0.0005669593811035156, 0.0012578964233398438, 0.0023746490478515625, 0.0765380859375, 0.62109375, 0.297607421875, 0.2052001953125, 0.69921875, 0.00106048583984375, 0.250244140625, 0.012115478515625, 0.06292724609375, 0.0523681640625, 0.02392578125, 0.0007386207580566406, 0.00901031494140625, 0.0001093149185180664, 0.334228515625, 0.96435546875, 0.1463623046875, 0.50927734375, 0.00649261474609375, 0.411865234375, 0.10443115234375, 0.6435546875, 0.0004394054412841797, 0.034912109375, 0.7685546875, 1.1240234375, 0.0005316734313964844, 0.0289306640625, 0.00024580955505371094, 0.2073974609375, 0.239990234375, 0.30029296875], "tokens": [664, 569, 334, 945, 1905, 9215, 8112, 1212, 26, 1212, 310, 30, 629, 827, 30, 892, 2266, 558, 27, 301, 284, 415, 308, 96, 610, 744, 27, 301, 397, 442, 901, 45, 284, 320, 446, 415, 308, 96, 32, 297, 2891, 1157, 301, 397, 442, 861, 45, 284, 320, 446, 415, 308]}
{"line_number": 247, "line_type": "original", "code": "      } else if (destBlock.isEmpty()) {", "entropy": 2.138671875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [5.3203125, 5.98046875, 1.7041015625, 0.88916015625, 0.04443359375, 1.0517578125, 0.0218353271484375, 0.0609130859375, 8.3125, 0.0908203125, 0.048492431640625], "tokens": [647, 320, 813, 415, 308, 3316, 2227, 32, 6393, 1157, 301]}
{"line_number": 247, "line_type": "generated", "code": "\n   * @param srcParent The parent of the start node.\n   * @param destParent The parent of the destination node.\n   */\n  private void moveAllFollowing(Node start, Node srcParent, Node destParent) {\n    Node n = start", "entropy": 0.165283203125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.19384765625, 0.37841796875, 0.037689208984375, 0.0103607177734375, 0.021942138671875, 0.00469207763671875, 0.07891845703125, 0.67236328125, 0.43896484375, 0.261474609375, 0.986328125, 0.583984375, 0.06365966796875, 0.050567626953125, 0.0095672607421875, 0.0012111663818359375, 0.002429962158203125, 0.008819580078125, 0.004245758056640625, 0.0123443603515625, 0.08941650390625, 0.250244140625, 0.0257415771484375, 0.900390625, 0.43359375, 0.08013916015625, 0.07330322265625, 0.031768798828125, 0.00714874267578125, 0.056304931640625, 0.8837890625, 0.0009531974792480469, 0.0018205642700195312, 0.00018167495727539062, 0.0009136199951171875, 0.04608154296875, 0.003543853759765625, 0.0007066726684570312, 0.0035457611083984375, 0.0010671615600585938, 0.0001163482666015625, 0.00012409687042236328, 0.032470703125, 0.00051116943359375, 9.572505950927734e-05, 0.0009722709655761719, 0.0010747909545898438, 0.093994140625, 0.60546875, 0.98046875, 0.07537841796875, 0.09173583984375], "tokens": [664, 319, 477, 753, 1561, 4433, 886, 2935, 432, 322, 1477, 1541, 32, 664, 319, 477, 753, 3466, 4433, 886, 2935, 432, 322, 8050, 1541, 32, 664, 569, 334, 945, 763, 5169, 1934, 34054, 26, 1212, 1477, 30, 4004, 1561, 4433, 30, 4004, 3466, 4433, 27, 301, 284, 4004, 310, 280, 1477]}
{"line_number": 250, "line_type": "original", "code": "      } else if (destBlock.isBlock()) {", "entropy": 1.7763671875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.53515625, 5.5625, 3.02734375, 1.1142578125, 0.05706787109375, 1.3193359375, 0.01345062255859375, 0.1488037109375, 2.81640625, 0.501953125, 0.175048828125, 0.039520263671875], "tokens": [647, 320, 813, 415, 308, 3316, 2227, 32, 297, 2227, 1157, 301]}
{"line_number": 250, "line_type": "generated", "code": "\n  private void moveAllFollowing(Node start, Node srcParent, Node destParent) {\n    if (start == srcParent.getLastChild()) {\n      return;\n    }\n    Node next = start.getNext();\n    srcParent.removeChild(next);", "entropy": 0.269287109375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.3388671875, 0.17041015625, 0.6337890625, 0.0016565322875976562, 0.0020503997802734375, 0.000293731689453125, 0.0024509429931640625, 0.052764892578125, 0.00516510009765625, 0.0006232261657714844, 0.004199981689453125, 0.0013637542724609375, 0.00022149085998535156, 0.0004458427429199219, 0.0249481201171875, 0.0015153884887695312, 0.00017130374908447266, 0.0018053054809570312, 0.004413604736328125, 0.1630859375, 2.42578125, 0.11737060546875, 0.1923828125, 0.6728515625, 1.4169921875, 0.00014197826385498047, 0.047119140625, 0.00928497314453125, 0.00011217594146728516, 0.0345458984375, 0.00508880615234375, 0.02093505859375, 0.3798828125, 0.0011720657348632812, 0.0236663818359375, 0.0011014938354492188, 0.7490234375, 0.607421875, 1.9072265625, 0.5185546875, 0.062408447265625, 0.026611328125, 0.0019054412841796875, 0.005802154541015625, 0.07537841796875, 2.009765625, 0.00016999244689941406, 0.00018596649169921875, 0.12060546875, 0.6201171875, 0.54345703125, 0.0043792724609375], "tokens": [334, 945, 763, 5169, 1934, 34054, 26, 1212, 1477, 30, 4004, 1561, 4433, 30, 4004, 3466, 4433, 27, 301, 284, 415, 308, 1366, 610, 1561, 4433, 32, 20197, 2931, 1157, 301, 397, 442, 45, 284, 320, 284, 4004, 2354, 280, 1477, 32, 23017, 473, 284, 1561, 4433, 32, 28878, 26, 1978, 293]}
{"line_number": 252, "line_type": "original", "code": "        newDestBlock = destBlock;", "entropy": 2.890625, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [7.46875, 6.35546875, 1.01171875, 0.9375, 2.18359375, 2.66015625, 2.28515625, 0.2158203125], "tokens": [351, 537, 5077, 2227, 280, 3466, 2227, 45]}
{"line_number": 252, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Look for a named break or continue at the end of a block and removes it by\n   * moving the if node's siblings, if any, into the opposite condition block.\n   *\n   * @param srcBlock The block", "entropy": 0.376708984375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.397705078125, 0.0034694671630859375, 0.8818359375, 0.2454833984375, 0.03033447265625, 0.0009703636169433594, 2.912109375, 0.06890869140625, 2.0, 2.7734375, 1.0224609375, 1.62890625, 0.11529541015625, 2.1015625, 0.022674560546875, 0.0238037109375, 0.006328582763671875, 0.240234375, 0.1044921875, 0.258056640625, 1.34765625, 0.285400390625, 0.436767578125, 0.002407073974609375, 7.30752944946289e-05, 0.09710693359375, 0.251220703125, 1.0380859375, 0.051544189453125, 0.017425537109375, 0.06585693359375, 0.0007519721984863281, 0.08197021484375, 0.005718231201171875, 0.0006551742553710938, 0.0013074874877929688, 0.029541015625, 0.032257080078125, 0.1109619140625, 0.07171630859375, 0.12103271484375, 0.026275634765625, 0.0006303787231445312, 0.0248870849609375, 0.34619140625, 0.0012149810791015625, 0.08477783203125, 0.0030803680419921875, 0.1820068359375, 0.011474609375, 0.012603759765625, 0.01100921630859375], "tokens": [334, 320, 719, 1022, 664, 319, 12615, 436, 312, 8189, 1626, 556, 4036, 821, 322, 943, 432, 312, 2163, 461, 20080, 561, 810, 664, 319, 14089, 322, 415, 1541, 1182, 309, 28650, 30, 415, 1346, 30, 1991, 322, 30519, 3700, 2163, 32, 664, 319, 664, 319, 477, 753, 1561, 2227, 886, 2163]}
{"line_number": 282, "line_type": "original", "code": "        if (labelName == null) {", "entropy": 1.84375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [8.2109375, 2.0859375, 0.2105712890625, 3.81640625, 0.0819091796875, 1.7578125, 0.05218505859375, 0.329833984375, 0.04681396484375], "tokens": [351, 415, 308, 1172, 558, 610, 744, 27, 301]}
{"line_number": 282, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [], "tokens": []}
{"line_number": 190, "line_type": "original", "code": "    }", "entropy": 4.63671875, "is_bug_line": false, "sus_score": 0.29488391230979427, "per_token_entropy": [3.53125, 5.7421875], "tokens": [264, 320]}
{"line_number": 190, "line_type": "generated", "code": "\n    // Take case of the if nodes children, if any.", "entropy": 0.7080078125, "is_bug_line": false, "sus_score": 0.29488391230979427, "per_token_entropy": [0.92138671875, 0.90380859375, 3.525390625, 0.9453125, 0.0208282470703125, 0.2490234375, 0.546875, 0.55615234375, 1.2109375, 0.1947021484375, 0.052703857421875, 0.01422882080078125, 0.06561279296875], "tokens": [284, 434, 21740, 1135, 432, 322, 415, 5166, 5713, 30, 415, 1346, 32]}
