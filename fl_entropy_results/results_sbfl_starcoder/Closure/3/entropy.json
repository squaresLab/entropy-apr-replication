{"line_number": 166, "line_type": "original", "code": "          inlinedNewDependencies.add(t.getScope().getVar(c.varName));", "entropy": 2.822265625, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [4.29296875, 10.21875, 1.6103515625, 8.9921875, 6.18359375, 1.5107421875, 1.8916015625, 0.04180908203125, 3.73828125, 0.06475830078125, 0.0865478515625, 0.0011749267578125, 1.720703125, 0.814453125, 0.02484130859375, 9.4765625, 0.443603515625, 2.375, 0.12158203125], "tokens": [2033, 328, 14145, 1812, 12713, 32, 669, 26, 102, 32, 371, 5504, 922, 48086, 26, 85, 32, 48644, 876]}
{"line_number": 166, "line_type": "generated", "code": "\n            }\n          }\n        }\n      };\n      gatherCb.startTraversal(t, cfgNode);\n    }\n  }", "entropy": 0.284423828125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.8828125, 0.404296875, 0.25048828125, 0.004489898681640625, 0.2041015625, 0.0225830078125, 0.1080322265625, 0.005641937255859375, 0.51123046875, 0.9287109375, 0.0013036727905273438, 0.0065155029296875, 1.072265625, 0.0623779296875, 0.197265625, 0.8388671875, 0.2802734375, 0.490966796875, 0.07080078125, 0.345458984375, 0.08953857421875, 0.0028972625732421875, 0.0313720703125, 0.0139617919921875], "tokens": [324, 320, 616, 320, 291, 320, 397, 1472, 397, 20133, 14901, 32, 1366, 35699, 26, 102, 30, 8444, 1212, 293, 284, 320, 334, 320]}
{"line_number": 156, "line_type": "original", "code": "        c.inlineVariable();", "entropy": 4.89453125, "is_bug_line": true, "sus_score": 0.3110855084191276, "per_token_entropy": [5.80078125, 7.59375, 1.5439453125, 5.51171875, 5.171875, 3.73046875], "tokens": [351, 281, 32, 3221, 3818, 473]}
{"line_number": 156, "line_type": "generated", "code": "\n\n      // TODO(user): The following code is a hack to try to get around the\n      // fact that we don't have a good way to determine if a variable is\n      // declared in a loop or not.\n      //\n      // We are looking for", "entropy": 1.220703125, "is_bug_line": true, "sus_score": 0.3110855084191276, "per_token_entropy": [1.08203125, 0.9404296875, 2.916015625, 0.023193359375, 0.269775390625, 0.036346435546875, 3.37890625, 2.4296875, 1.9091796875, 1.2666015625, 1.85546875, 2.798828125, 0.82275390625, 3.916015625, 0.31298828125, 3.283203125, 2.26171875, 1.267578125, 0.44189453125, 0.0014867782592773438, 1.8056640625, 0.017578125, 1.576171875, 1.1884765625, 0.0003838539123535156, 0.923828125, 1.3623046875, 1.498046875, 0.319580078125, 0.344482421875, 2.560546875, 1.255859375, 0.363525390625, 0.83642578125, 0.7431640625, 0.478759765625, 0.004730224609375, 2.61328125, 1.40234375, 0.705078125, 1.494140625, 1.865234375, 0.623046875, 0.26025390625, 1.0751953125, 0.2420654296875, 0.42919921875, 0.002071380615234375, 1.7841796875, 2.7578125, 1.5244140625, 0.2264404296875], "tokens": [1687, 434, 4296, 26, 496, 711, 886, 2412, 1340, 438, 312, 16445, 372, 1596, 372, 622, 6835, 322, 397, 434, 8434, 688, 996, 2800, 1330, 1159, 312, 4644, 3352, 372, 9921, 415, 312, 2677, 438, 397, 434, 17103, 328, 312, 5258, 556, 646, 32, 397, 434, 397, 434, 2688, 884, 9696, 436]}
{"line_number": 165, "line_type": "original", "code": "        if (!c.defMetadata.depends.isEmpty()) {", "entropy": 3.29296875, "is_bug_line": false, "sus_score": 0.3110855084191276, "per_token_entropy": [6.1171875, 0.464599609375, 2.326171875, 7.15234375, 0.08306884765625, 4.8359375, 11.6015625, 0.1356201171875, 4.12890625, 4.05859375, 1.2236328125, 0.59423828125, 0.086181640625], "tokens": [351, 415, 1429, 85, 32, 589, 4097, 32, 27263, 32, 6393, 1157, 301]}
{"line_number": 165, "line_type": "generated", "code": "\n              if (n.getParent().isAssign()) {\n                Node grandParent = n.getParent().getParent();\n                if (grandParent.isExprResult()) {\n                  return;\n                }\n              }\n            }\n            String name = n.getString();\n            if", "entropy": 0.388427734375, "is_bug_line": false, "sus_score": 0.3110855084191276, "per_token_entropy": [0.8388671875, 0.76318359375, 0.2178955078125, 0.7578125, 0.060882568359375, 0.17431640625, 0.11053466796875, 0.25927734375, 0.322021484375, 0.78369140625, 0.0116424560546875, 0.227783203125, 1.734375, 2.478515625, 0.5205078125, 0.01169586181640625, 0.020538330078125, 0.00017023086547851562, 0.045440673828125, 0.00847625732421875, 0.00392913818359375, 0.0015354156494140625, 0.145751953125, 0.279052734375, 0.11865234375, 0.185302734375, 3.218650817871094e-05, 0.1024169921875, 0.08245849609375, 0.02569580078125, 0.00012791156768798828, 0.266845703125, 0.0021038055419921875, 0.115966796875, 1.546875, 0.005218505859375, 0.1875, 0.0004317760467529297, 0.1221923828125, 0.0013475418090820312, 1.66015625, 0.038482666015625, 1.3212890625, 2.462890625, 0.95556640625, 0.01491546630859375, 0.11492919921875, 3.266334533691406e-05, 0.0777587890625, 0.0035858154296875, 0.1356201171875, 0.880859375], "tokens": [1090, 415, 308, 96, 32, 18789, 922, 297, 9079, 1157, 301, 400, 4004, 33162, 4433, 280, 310, 32, 18789, 922, 18789, 473, 400, 415, 308, 28856, 4433, 32, 297, 6150, 1394, 1157, 301, 1750, 442, 45, 400, 320, 1090, 320, 324, 320, 324, 892, 636, 280, 310, 32, 7069, 473, 324, 415]}
{"line_number": 524, "line_type": "original", "code": "      for (Node cur = p.getParent().getFirstChild(); cur != p;", "entropy": 1.173828125, "is_bug_line": false, "sus_score": 0.2773500981126145, "per_token_entropy": [5.3671875, 3.27734375, 0.0452880859375, 0.05670166015625, 0.62109375, 0.01739501953125, 1.1484375, 0.03192138671875, 3.984375, 0.65771484375, 0.8017578125, 0.000514984130859375, 0.046905517578125, 1.490234375, 0.126220703125, 2.12890625, 0.14892578125], "tokens": [647, 436, 308, 1212, 2738, 280, 298, 32, 18789, 922, 25657, 2931, 473, 2738, 863, 298, 45]}
{"line_number": 524, "line_type": "generated", "code": "\n\n  /**\n   * Given an expression by its root and sub-expression n, return true if there\n   * the predicate is true for some expression on the left or right of n.\n   *\n   * Example:\n   *\n   * Checked(), Checked(), n", "entropy": 0.171142578125, "is_bug_line": false, "sus_score": 0.2773500981126145, "per_token_entropy": [1.734375, 0.258544921875, 0.06341552734375, 0.0012836456298828125, 1.2333984375, 0.30224609375, 0.0689697265625, 0.251220703125, 0.012359619140625, 0.0045623779296875, 0.05517578125, 0.035888671875, 0.010467529296875, 0.0025768280029296875, 0.0077972412109375, 0.0102081298828125, 0.08270263671875, 0.05792236328125, 0.011627197265625, 0.227294921875, 0.0087890625, 0.00017130374908447266, 0.1466064453125, 0.042205810546875, 0.004302978515625, 0.007568359375, 0.04620361328125, 0.130615234375, 0.09661865234375, 0.42626953125, 0.165283203125, 0.78564453125, 0.7470703125, 0.280517578125, 0.106689453125, 0.00980377197265625, 0.06951904296875, 0.0185699462890625, 0.33935546875, 0.024261474609375, 0.0036945343017578125, 0.095458984375, 0.01488494873046875, 0.006969451904296875, 0.000823974609375, 0.0181121826171875, 0.00040268898010253906, 0.412841796875, 0.0214080810546875, 0.360107421875, 0.00495147705078125, 0.06939697265625], "tokens": [719, 1022, 664, 319, 15273, 600, 6101, 810, 2819, 3051, 461, 1361, 31, 7672, 310, 30, 442, 861, 415, 2017, 664, 319, 322, 14094, 438, 861, 436, 1629, 6101, 544, 322, 2841, 556, 2091, 432, 310, 32, 664, 319, 664, 319, 5938, 44, 664, 319, 664, 319, 47264, 1026, 47264, 1026, 310]}
{"line_number": 503, "line_type": "original", "code": "    for (Node p = n; p != expressionRoot; p = p.getParent()) {", "entropy": 0.6376953125, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [4.8359375, 3.19921875, 0.0164642333984375, 0.02642822265625, 0.68994140625, 0.04266357421875, 0.1224365234375, 2.640625, 0.1922607421875, 0.05413818359375, 0.430419921875, 0.003047943115234375, 0.0931396484375, 0.2802734375, 0.00226593017578125, 0.004276275634765625, 0.0005483627319335938, 0.0667724609375, 0.004482269287109375, 0.052734375], "tokens": [264, 436, 308, 1212, 298, 280, 310, 45, 298, 863, 6101, 4058, 45, 298, 280, 298, 32, 18789, 1157, 301]}
{"line_number": 503, "line_type": "generated", "code": "\n\n  /**\n   * Given an expression by its root and sub-expression n, return true if there\n   * the predicate is true for some expression on the left and right of n.\n   *\n   * Example:\n   *\n   * Checked(), Checked(), n", "entropy": 0.1837158203125, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [1.5390625, 0.300048828125, 0.06036376953125, 0.0009546279907226562, 1.2333984375, 0.304931640625, 0.0665283203125, 0.241455078125, 0.01013946533203125, 0.004566192626953125, 0.05169677734375, 0.050201416015625, 0.0025882720947265625, 0.003780364990234375, 0.01090240478515625, 0.01032257080078125, 0.0919189453125, 0.0611572265625, 0.01241302490234375, 0.2734375, 0.0079193115234375, 0.00012540817260742188, 0.1900634765625, 0.058929443359375, 0.004619598388671875, 0.007659912109375, 0.045745849609375, 0.1368408203125, 0.0966796875, 0.404052734375, 0.1553955078125, 0.7353515625, 1.3388671875, 0.388671875, 0.1541748046875, 0.01372528076171875, 0.09344482421875, 0.01788330078125, 0.23193359375, 0.0274505615234375, 0.0014171600341796875, 0.062347412109375, 0.01110076904296875, 0.006237030029296875, 0.0006709098815917969, 0.021240234375, 0.0002815723419189453, 0.3955078125, 0.0273590087890625, 0.50927734375, 0.00615692138671875, 0.07177734375], "tokens": [719, 1022, 664, 319, 15273, 600, 6101, 810, 2819, 3051, 461, 1361, 31, 7672, 310, 30, 442, 861, 415, 2017, 664, 319, 322, 14094, 438, 861, 436, 1629, 6101, 544, 322, 2841, 461, 2091, 432, 310, 32, 664, 319, 664, 319, 5938, 44, 664, 319, 664, 319, 47264, 1026, 47264, 1026, 310]}
{"line_number": 504, "line_type": "original", "code": "      for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {", "entropy": 0.96630859375, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [7.28125, 4.1015625, 0.0247650146484375, 0.032135009765625, 0.791015625, 0.0291900634765625, 3.751953125, 0.03558349609375, 2.310546875, 0.06640625, 0.08056640625, 0.031219482421875, 0.78515625, 0.055389404296875, 0.73681640625, 0.004955291748046875, 0.098876953125, 0.006977081298828125, 0.017974853515625, 0.010528564453125, 0.036712646484375], "tokens": [647, 436, 308, 1212, 2738, 280, 298, 32, 23017, 473, 2738, 863, 744, 45, 2738, 280, 2738, 32, 23017, 1157, 301]}
{"line_number": 504, "line_type": "generated", "code": "\n\n  /**\n   * Given an expression by its root and sub-expression n, return true if there\n   * the predicate is true for some expression on the left or right of n.\n   *\n   * Example:\n   *\n   * Checked(), n, Checked", "entropy": 0.2265625, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [2.029296875, 0.332763671875, 0.07183837890625, 0.0009284019470214844, 1.3115234375, 0.359375, 0.0772705078125, 0.25634765625, 0.0122222900390625, 0.0046539306640625, 0.0556640625, 0.040069580078125, 0.00307464599609375, 0.004543304443359375, 0.00799560546875, 0.01033782958984375, 0.0867919921875, 0.058868408203125, 0.01226806640625, 0.268798828125, 0.0094146728515625, 0.00013458728790283203, 0.1849365234375, 0.054595947265625, 0.00473785400390625, 0.00720977783203125, 0.045074462890625, 0.1480712890625, 0.11761474609375, 0.4169921875, 0.148193359375, 0.7900390625, 0.861328125, 0.28173828125, 0.09619140625, 0.0100860595703125, 0.07220458984375, 0.0190887451171875, 0.397216796875, 0.02685546875, 0.0013799667358398438, 0.10784912109375, 0.0157318115234375, 0.00592803955078125, 0.000514984130859375, 0.018707275390625, 0.0002620220184326172, 0.427978515625, 0.019439697265625, 1.74609375, 0.053802490234375, 0.6865234375], "tokens": [719, 1022, 664, 319, 15273, 600, 6101, 810, 2819, 3051, 461, 1361, 31, 7672, 310, 30, 442, 861, 415, 2017, 664, 319, 322, 14094, 438, 861, 436, 1629, 6101, 544, 322, 2841, 556, 2091, 432, 310, 32, 664, 319, 664, 319, 5938, 44, 664, 319, 664, 319, 47264, 1026, 310, 30, 47264]}
{"line_number": 510, "line_type": "original", "code": "    return false;", "entropy": 2.216796875, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [7.44140625, 1.384765625, 0.035003662109375, 0.00669097900390625], "tokens": [264, 442, 901, 45]}
{"line_number": 510, "line_type": "generated", "code": "\n\n  /**\n   * Given a node, returns the corresponding CFG node.\n   */\n  private static AbstractCfgNode getCfgNode(Node n) {\n    Preconditions.checkState(n.getCFGNode()!= null);\n    return n.getCFGNode", "entropy": 0.4443359375, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [0.9052734375, 0.222412109375, 0.0557861328125, 0.000408172607421875, 1.30859375, 1.3740234375, 1.671875, 1.0380859375, 2.2421875, 1.076171875, 3.310546875, 0.5126953125, 0.125, 0.64111328125, 0.2252197265625, 0.27392578125, 0.020751953125, 0.1470947265625, 0.2529296875, 0.323486328125, 0.01016998291015625, 0.0006875991821289062, 0.46923828125, 0.09442138671875, 0.021453857421875, 0.185546875, 0.05859375, 0.1197509765625, 0.1011962890625, 0.0016880035400390625, 0.0279693603515625, 1.3701171875, 0.0007390975952148438, 0.03948974609375, 0.70361328125, 0.022857666015625, 0.263671875, 0.1339111328125, 1.3583984375, 0.87451171875, 0.1446533203125, 0.036956787109375, 0.026031494140625, 0.0015497207641601562, 0.432861328125, 0.0408935546875, 0.09478759765625, 0.73779296875, 0.0005078315734863281, 0.0007328987121582031, 0.0001533031463623047, 7.510185241699219e-05], "tokens": [719, 1022, 664, 319, 15273, 312, 1541, 30, 3217, 322, 8435, 31848, 1541, 32, 664, 569, 334, 945, 907, 7400, 11812, 1212, 622, 11812, 1212, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 1078, 26, 96, 32, 371, 11892, 1212, 346, 863, 744, 293, 284, 442, 310, 32, 371, 11892, 1212]}
{"line_number": 523, "line_type": "original", "code": "    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {", "entropy": 0.4853515625, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [3.5546875, 1.5458984375, 0.01611328125, 0.0139617919921875, 0.416748046875, 0.0091094970703125, 0.026641845703125, 2.734375, 0.26904296875, 0.09539794921875, 0.11785888671875, 0.024169921875, 0.213623046875, 0.0019445419311523438, 0.040740966796875, 1.3427734375, 0.0222930908203125, 0.09771728515625, 0.038665771484375, 0.0374755859375, 0.005016326904296875, 0.055206298828125], "tokens": [264, 436, 308, 1212, 298, 280, 310, 32, 18789, 473, 298, 863, 6101, 4058, 45, 298, 280, 298, 32, 18789, 1157, 301]}
{"line_number": 523, "line_type": "generated", "code": "\n  /**\n   * Returns true if the given node is a CALL node that is a direct call to\n   * Function.prototype.bind.\n   */\n  private static boolean isBindCall(Node n) {\n    if (!n.isCall()) {\n     ", "entropy": 0.640625, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [1.7216796875, 0.427490234375, 0.0626220703125, 0.0007214546203613281, 2.716796875, 0.60888671875, 0.100830078125, 0.798828125, 1.5546875, 0.775390625, 0.5458984375, 0.9990234375, 3.314453125, 0.5654296875, 1.8916015625, 1.208984375, 1.6171875, 2.56640625, 1.5869140625, 0.299072265625, 0.85595703125, 0.0009336471557617188, 2.87109375, 0.7021484375, 0.50390625, 0.02545166015625, 0.80419921875, 0.6328125, 0.1796875, 0.125244140625, 0.018524169921875, 0.064453125, 0.179931640625, 0.005889892578125, 0.06890869140625, 0.7734375, 0.33251953125, 0.060302734375, 0.006744384765625, 0.16015625, 0.027679443359375, 0.0009355545043945312, 0.04266357421875, 0.81494140625, 0.470947265625, 0.0914306640625, 9.071826934814453e-05, 0.013275146484375, 0.002307891845703125, 0.0660400390625, 0.0166168212890625, 0.017791748046875], "tokens": [334, 1022, 664, 319, 3759, 861, 415, 322, 2702, 1541, 438, 312, 16084, 1541, 688, 438, 312, 3872, 1476, 372, 664, 319, 4540, 32, 3889, 32, 2539, 32, 664, 569, 334, 945, 907, 1905, 438, 3726, 1853, 26, 1212, 310, 27, 301, 284, 415, 1429, 96, 32, 297, 1853, 1157, 301, 397]}
{"line_number": 531, "line_type": "original", "code": "    return false;", "entropy": 1.8037109375, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [7.07421875, 0.11871337890625, 0.01100921630859375, 0.00994873046875], "tokens": [264, 442, 901, 45]}
{"line_number": 531, "line_type": "generated", "code": "\n\n  /**\n   * Given an expression by its root and sub-expression n, return true if there\n   * the predicate is true for some expression on the right of n and on the left\n   * of n.\n   *\n   * Example:\n   *\n  ", "entropy": 0.18994140625, "is_bug_line": false, "sus_score": 0.26413527189768715, "per_token_entropy": [1.0380859375, 0.1669921875, 0.050811767578125, 0.0005483627319335938, 1.0517578125, 0.275146484375, 0.058990478515625, 0.196044921875, 0.01200103759765625, 0.004474639892578125, 0.05548095703125, 0.03900146484375, 0.004302978515625, 0.0018033981323242188, 0.0067596435546875, 0.0091400146484375, 0.06829833984375, 0.045989990234375, 0.0097198486328125, 0.1795654296875, 0.0080108642578125, 0.00010323524475097656, 0.132080078125, 0.0325927734375, 0.0038013458251953125, 0.006679534912109375, 0.044097900390625, 0.11669921875, 0.101318359375, 0.451904296875, 0.156005859375, 0.78466796875, 0.58154296875, 0.110595703125, 1.59765625, 1.6005859375, 0.033355712890625, 0.184326171875, 0.058013916015625, 0.0005450248718261719, 0.0164794921875, 0.153564453125, 0.1910400390625, 0.044281005859375, 0.08770751953125, 0.0088348388671875, 0.00244140625, 0.050750732421875, 0.01067352294921875, 0.00811767578125, 0.0008916854858398438, 0.021087646484375], "tokens": [719, 1022, 664, 319, 15273, 600, 6101, 810, 2819, 3051, 461, 1361, 31, 7672, 310, 30, 442, 861, 415, 2017, 664, 319, 322, 14094, 438, 861, 436, 1629, 6101, 544, 322, 2091, 432, 310, 461, 544, 322, 2841, 664, 319, 432, 310, 32, 664, 319, 664, 319, 5938, 44, 664, 319, 664]}
{"line_number": 155, "line_type": "original", "code": "      if (c.canInline()) {", "entropy": 1.83984375, "is_bug_line": true, "sus_score": 0.2041241452319315, "per_token_entropy": [3.1015625, 0.72705078125, 0.0850830078125, 8.8984375, 0.65283203125, 2.5234375, 0.0986328125, 0.4228515625, 0.05712890625], "tokens": [647, 415, 308, 85, 32, 3374, 10144, 1157, 301]}
{"line_number": 155, "line_type": "generated", "code": "\n      if (state == null) {\n        return;\n      }\n\n      for (MustDef def : state.defs) {\n        if (def.isVariable() && def.isSingleDef() &&\n            def.isEscaped() && def.is", "entropy": 0.54345703125, "is_bug_line": true, "sus_score": 0.2041241452319315, "per_token_entropy": [0.210693359375, 0.7880859375, 0.09552001953125, 0.1820068359375, 0.65576171875, 0.0032749176025390625, 0.2376708984375, 0.005405426025390625, 0.0217742919921875, 0.61669921875, 0.0020236968994140625, 0.101318359375, 0.0001239776611328125, 0.71630859375, 0.98095703125, 0.0022125244140625, 0.54443359375, 0.003360748291015625, 0.78076171875, 0.049041748046875, 0.03753662109375, 0.032196044921875, 1.1259765625, 0.388671875, 0.00205230712890625, 0.146728515625, 0.580078125, 0.287353515625, 0.265380859375, 0.074951171875, 0.7333984375, 3.708984375, 1.060546875, 0.1214599609375, 0.81689453125, 0.003543853759765625, 0.71044921875, 2.619140625, 0.51708984375, 0.9453125, 0.12127685546875, 1.0830078125, 0.9619140625, 0.0030879974365234375, 1.5244140625, 1.759765625, 0.1600341796875, 0.56005859375, 0.01131439208984375, 1.099609375, 0.0039825439453125, 0.7900390625], "tokens": [397, 415, 308, 1293, 610, 744, 27, 301, 291, 442, 45, 397, 320, 1687, 436, 308, 11387, 1350, 665, 499, 1603, 32, 15312, 27, 301, 291, 415, 308, 589, 32, 297, 3818, 346, 962, 665, 32, 297, 6276, 1350, 346, 962, 324, 665, 32, 297, 24866, 26695, 346, 962, 665, 32, 297]}
{"line_number": 169, "line_type": "original", "code": "    }", "entropy": 3.677734375, "is_bug_line": false, "sus_score": 0.2041241452319315, "per_token_entropy": [6.609375, 0.74462890625], "tokens": [264, 320]}
{"line_number": 169, "line_type": "generated", "code": "\n            // The candidate should be in the same scope as the CFG node.\n            Var v = t.getScope().getVar(n.getString());\n            if (v == null) {\n              return;\n            }\n\n            // The candidate should not be escaped.", "entropy": 0.61962890625, "is_bug_line": false, "sus_score": 0.2041241452319315, "per_token_entropy": [0.47265625, 0.97314453125, 2.947265625, 2.15234375, 2.806640625, 0.734375, 2.123046875, 0.404541015625, 0.2406005859375, 0.4033203125, 0.468994140625, 0.61669921875, 3.337890625, 0.202392578125, 0.927734375, 0.1083984375, 0.97998046875, 1.1025390625, 0.00893402099609375, 0.140869140625, 9.322166442871094e-05, 0.00922393798828125, 0.0014696121215820312, 0.0004987716674804688, 0.102783203125, 0.014923095703125, 0.024169921875, 0.0026721954345703125, 0.0185699462890625, 0.0020732879638671875, 0.1912841796875, 0.092529296875, 0.06317138671875, 0.0211639404296875, 0.427001953125, 0.0019683837890625, 0.3642578125, 0.00437164306640625, 0.0064849853515625, 0.131591796875, 0.0008740425109863281, 0.04364013671875, 0.00021207332611083984, 0.6513671875, 0.54443359375, 1.8759765625, 0.400146484375, 0.7451171875, 1.361328125, 0.4609375, 2.76171875, 0.74609375], "tokens": [324, 434, 886, 15133, 1395, 526, 328, 322, 2432, 4576, 619, 322, 31848, 1541, 32, 324, 7329, 354, 280, 273, 32, 371, 5504, 922, 48086, 26, 96, 32, 7069, 1035, 324, 415, 308, 104, 610, 744, 27, 301, 1090, 442, 45, 324, 320, 1064, 434, 886, 15133, 1395, 646, 526, 31253, 32]}
{"line_number": 131, "line_type": "original", "code": "    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <", "entropy": 1.92578125, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [3.67578125, 3.76953125, 0.1917724609375, 10.328125, 0.01444244384765625, 0.290283203125, 0.01983642578125, 8.2265625, 0.00785064697265625, 2.880859375, 1.9775390625, 0.5712890625, 0.438720703125, 0.0011835098266601562, 0.192626953125, 0.0008020401000976562, 0.153564453125, 1.9052734375], "tokens": [264, 415, 308, 11082, 10165, 9745, 32, 3459, 81, 22370, 69, 81, 1407, 81, 39861, 75, 2720, 333]}
{"line_number": 131, "line_type": "generated", "code": "\n  private class GatherCandiates extends AbstractShallowCallback {\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && t.getScope().isLocal(n.", "entropy": 0.2442626953125, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [0.5107421875, 0.75537109375, 0.72802734375, 0.03277587890625, 4.482269287109375e-05, 0.01499176025390625, 0.000274658203125, 8.344650268554688e-07, 0.6396484375, 0.08184814453125, 0.12030029296875, 0.051483154296875, 0.41845703125, 0.11102294921875, 0.57080078125, 0.26904296875, 0.000732421875, 0.051483154296875, 0.0125732421875, 0.00548553466796875, 0.00371551513671875, 0.0005326271057128906, 0.0008974075317382812, 0.07305908203125, 0.004726409912109375, 6.67572021484375e-05, 0.0005283355712890625, 0.01050567626953125, 0.002246856689453125, 0.0017690658569335938, 0.009796142578125, 0.00010836124420166016, 0.002712249755859375, 0.165771484375, 0.40771484375, 0.32763671875, 0.63525390625, 0.015655517578125, 0.76220703125, 0.9541015625, 0.7177734375, 0.21337890625, 2.119140625, 0.00039196014404296875, 0.209716796875, 0.0007996559143066406, 0.0033111572265625, 0.2030029296875, 0.37646484375, 0.9208984375, 0.02099609375, 0.16650390625], "tokens": [334, 945, 443, 570, 3790, 53, 36322, 1196, 2026, 7400, 1189, 4568, 3296, 301, 284, 477, 1788, 284, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 415, 308, 96, 32, 297, 558, 346, 962, 273, 32, 371, 5504, 922, 297, 3325, 26, 96, 32]}
{"line_number": 137, "line_type": "original", "code": "    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);", "entropy": 1.0390625, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [3.4140625, 5.44140625, 0.0002799034118652344, 2.294921875, 0.412353515625, 0.00399017333984375, 0.059356689453125, 1.1298828125, 0.021820068359375, 3.612041473388672e-05, 0.0004329681396484375, 0.6240234375, 1.2255859375, 0.88037109375, 1.07421875, 0.63330078125, 1.396484375, 0.09002685546875], "tokens": [264, 7813, 4055, 9745, 281, 1919, 280, 537, 7813, 4055, 9745, 26, 10199, 30, 901, 30, 861, 293]}
{"line_number": 137, "line_type": "generated", "code": "\n  }\n\n  /**\n   * A candidate for inlining is a variable that is defined in the\n   * current scope and used in the current scope.\n   */\n  private class Candidate {\n    /** The name of the variable. */\n    String varName;", "entropy": 0.5771484375, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [0.8076171875, 0.0248565673828125, 0.309326171875, 0.822265625, 0.0775146484375, 0.0003376007080078125, 2.130859375, 1.224609375, 0.810546875, 0.2423095703125, 0.0127105712890625, 1.63671875, 0.52099609375, 0.5869140625, 0.83349609375, 0.9111328125, 0.75927734375, 0.92333984375, 0.5087890625, 1.2119140625, 0.00044608116149902344, 0.60498046875, 0.09661865234375, 0.654296875, 1.5693359375, 0.65478515625, 1.03125, 1.3603515625, 0.2587890625, 0.94140625, 0.46533203125, 0.440185546875, 0.026458740234375, 0.60302734375, 0.39892578125, 0.0014820098876953125, 4.100799560546875e-05, 0.056488037109375, 0.2449951171875, 1.720703125, 0.84375, 0.87353515625, 0.00843048095703125, 0.054901123046875, 0.3935546875, 1.345703125, 0.013702392578125, 0.00626373291015625, 0.9541015625, 0.002197265625, 2.4557113647460938e-05, 0.032806396484375], "tokens": [334, 320, 719, 1022, 664, 319, 399, 15133, 436, 328, 22914, 438, 312, 2677, 688, 438, 3417, 328, 322, 664, 319, 1550, 4576, 461, 1654, 328, 322, 1550, 4576, 32, 664, 569, 334, 945, 443, 390, 7964, 301, 284, 1022, 886, 636, 432, 322, 2677, 32, 569, 284, 892, 773, 558, 45]}
{"line_number": 139, "line_type": "original", "code": "    Preconditions.checkState(t.getScopeRoot().isFunction());", "entropy": 1.6396484375, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [5.6875, 7.94140625, 0.00632476806640625, 0.033782958984375, 0.22412109375, 0.1307373046875, 3.40625, 0.043060302734375, 1.1611328125, 0.0101318359375, 2.359375, 0.8603515625, 0.87646484375, 0.2119140625], "tokens": [264, 40596, 32, 1553, 1078, 26, 102, 32, 371, 5504, 4058, 922, 39504, 1035]}
{"line_number": 139, "line_type": "generated", "code": "\n  private class GatherCandiates extends AbstractShallowCallback {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction()) {\n        // Don't inline functions that have escaped.\n       ", "entropy": 0.372802734375, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [0.78076171875, 0.74755859375, 0.79296875, 0.1397705078125, 2.5391578674316406e-05, 0.0097503662109375, 8.094310760498047e-05, 8.344650268554688e-07, 0.84765625, 0.158935546875, 0.0848388671875, 0.0193328857421875, 0.203857421875, 0.06280517578125, 0.958984375, 0.33251953125, 0.00027298927307128906, 0.007587432861328125, 0.0109710693359375, 0.0068511962890625, 0.004669189453125, 0.0013866424560546875, 0.0010194778442382812, 0.052154541015625, 0.004276275634765625, 8.189678192138672e-05, 0.0015764236450195312, 0.0117340087890625, 0.0007138252258300781, 0.001514434814453125, 0.0107421875, 0.00011205673217773438, 0.0011796951293945312, 0.1612548828125, 0.372802734375, 0.276123046875, 0.5029296875, 0.01425933837890625, 0.68798828125, 0.23583984375, 0.0009431838989257812, 0.031494140625, 1.6669921875, 1.7119140625, 0.00034737586975097656, 1.9365234375, 1.697265625, 0.517578125, 1.3046875, 2.0390625, 0.783203125, 0.189208984375], "tokens": [334, 945, 443, 570, 3790, 53, 36322, 1196, 2026, 7400, 1189, 4568, 3296, 301, 446, 477, 1788, 284, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 415, 308, 96, 32, 39504, 1157, 301, 291, 434, 12029, 1330, 4447, 4442, 688, 1159, 31253, 32, 291]}
{"line_number": 140, "line_type": "original", "code": "    cfa.process(null, t.getScopeRoot().getLastChild());", "entropy": 1.373046875, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [3.05859375, 8.71875, 2.185546875, 0.92578125, 2.5546875, 0.302001953125, 3.154296875, 0.0105438232421875, 1.279296875, 0.005489349365234375, 0.03546142578125, 0.0050506591796875, 0.064208984375, 0.75146484375, 0.05267333984375, 0.0023670196533203125, 0.24072265625], "tokens": [264, 281, 1919, 32, 2416, 26, 1693, 30, 273, 32, 371, 5504, 4058, 922, 20197, 2931, 1035]}
{"line_number": 140, "line_type": "generated", "code": "\n   * A candidate for inlining is a variable that is defined in the\n   * current scope and only used in one of the following ways:\n   *\n   * 1. As an operand to an assignment\n   * 2. As an operand to a", "entropy": 0.779296875, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [0.76318359375, 0.151611328125, 1.806640625, 0.99755859375, 0.98046875, 0.236083984375, 0.0131378173828125, 1.51953125, 0.5224609375, 0.541015625, 0.892578125, 0.984375, 0.65283203125, 0.9501953125, 0.56298828125, 0.9990234375, 0.00043964385986328125, 0.6123046875, 0.102294921875, 0.6845703125, 2.5078125, 0.34912109375, 0.47412109375, 1.7890625, 2.8984375, 0.279541015625, 1.5556640625, 0.8662109375, 0.1590576171875, 0.021026611328125, 0.0028839111328125, 0.837890625, 0.0015096664428710938, 0.65966796875, 0.0367431640625, 0.55419921875, 2.84765625, 0.95556640625, 1.857421875, 0.9150390625, 1.296875, 1.748046875, 1.9638671875, 0.00040721893310546875, 0.2044677734375, 0.003086090087890625, 0.0007543563842773438, 0.2421875, 0.826171875, 0.26171875, 0.037200927734375, 0.38916015625], "tokens": [664, 319, 399, 15133, 436, 328, 22914, 438, 312, 2677, 688, 438, 3417, 328, 322, 664, 319, 1550, 4576, 461, 1755, 1654, 328, 1591, 432, 322, 2412, 13563, 44, 664, 319, 664, 319, 225, 35, 32, 2894, 600, 19236, 372, 600, 13807, 664, 319, 225, 36, 32, 2894, 600, 19236, 372, 312]}
{"line_number": 141, "line_type": "original", "code": "    cfg = cfa.getCfg();", "entropy": 1.892578125, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [2.46875, 7.640625, 3.255859375, 3.24609375, 0.0024127960205078125, 0.016387939453125, 0.1436767578125, 0.001659393310546875, 0.26318359375], "tokens": [264, 8444, 280, 281, 1919, 32, 11640, 4637, 473]}
{"line_number": 141, "line_type": "generated", "code": "\n   * 1. The number of times a variable is defined.\n   * 2. The number of times a variable is used.\n   * 3. The number of times a variable is defined and used.\n   * 4. The number of", "entropy": 0.497314453125, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [0.86328125, 0.0166778564453125, 3.04296875, 1.298828125, 0.391357421875, 1.8916015625, 3.21875, 0.0118560791015625, 1.5576171875, 0.767578125, 0.12109375, 0.1529541015625, 1.15234375, 1.751953125, 0.301025390625, 0.012451171875, 0.04327392578125, 0.0035533905029296875, 0.0005564689636230469, 0.299072265625, 0.267333984375, 0.0095672607421875, 0.0733642578125, 0.1343994140625, 0.021240234375, 0.0301666259765625, 0.371337890625, 0.230712890625, 0.0400390625, 0.290283203125, 0.33984375, 0.0094451904296875, 0.0008106231689453125, 0.391357421875, 0.88671875, 0.012786865234375, 0.2252197265625, 0.1273193359375, 0.071044921875, 0.2193603515625, 1.4775390625, 0.45263671875, 0.2034912109375, 0.62109375, 0.0751953125, 0.363525390625, 0.8828125, 0.01131439208984375, 0.0011339187622070312, 0.398681640625, 0.7138671875, 0.01030731201171875], "tokens": [664, 319, 225, 35, 32, 886, 1451, 432, 6496, 312, 2677, 438, 3417, 32, 664, 319, 225, 36, 32, 886, 1451, 432, 6496, 312, 2677, 438, 1654, 32, 664, 319, 225, 37, 32, 886, 1451, 432, 6496, 312, 2677, 438, 3417, 461, 1654, 32, 664, 319, 225, 38, 32, 886, 1451, 432]}
{"line_number": 142, "line_type": "original", "code": "    reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);", "entropy": 0.99365234375, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [3.068359375, 12.34375, 0.01239776611328125, 0.337890625, 2.357421875, 0.46435546875, 0.0250244140625, 0.0002620220184326172, 0.003177642822265625, 0.00016868114471435547, 0.003002166748046875, 0.0010938644409179688, 0.148193359375, 0.712890625, 0.219970703125, 1.0341796875, 0.09112548828125, 0.0304718017578125, 0.0012483596801757812, 0.6435546875, 0.298095703125, 0.054962158203125], "tokens": [264, 316, 9469, 1350, 280, 537, 15622, 1467, 435, 9469, 3818, 1350, 26, 4687, 30, 273, 32, 371, 5504, 1026, 8980, 293]}
{"line_number": 142, "line_type": "generated", "code": "\n   * in {@link #candidates}.\n   */\n  class GatherCandiates extends AbstractShallowCallback {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction()) {\n        return", "entropy": 0.195068359375, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [0.2705078125, 0.00925445556640625, 0.2296142578125, 0.60791015625, 0.25830078125, 0.307861328125, 0.0087432861328125, 0.266845703125, 0.072509765625, 0.1878662109375, 0.0195770263671875, 1.0498046875, 0.0003097057342529297, 1.5497207641601562e-06, 0.004329681396484375, 7.617473602294922e-05, 9.5367431640625e-07, 1.0791015625, 0.2001953125, 0.1146240234375, 0.0169830322265625, 0.260986328125, 0.08721923828125, 1.24609375, 0.288818359375, 0.0004775524139404297, 0.01168060302734375, 0.00981903076171875, 0.00719451904296875, 0.0030651092529296875, 0.0007176399230957031, 0.00098419189453125, 0.00939178466796875, 0.003711700439453125, 4.9948692321777344e-05, 0.0012264251708984375, 0.01032257080078125, 0.00066375732421875, 0.0016489028930664062, 0.009124755859375, 0.00011754035949707031, 0.0011568069458007812, 0.1849365234375, 0.38525390625, 0.2724609375, 0.488037109375, 0.0149688720703125, 0.67919921875, 0.2568359375, 0.0008969306945800781, 0.02520751953125, 1.17578125], "tokens": [664, 319, 328, 3088, 1204, 588, 26257, 4009, 664, 569, 334, 443, 570, 3790, 53, 36322, 1196, 2026, 7400, 1189, 4568, 3296, 301, 446, 477, 1788, 284, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 415, 308, 96, 32, 39504, 1157, 301, 291, 442]}
{"line_number": 143, "line_type": "original", "code": "    reachingDef.analyze();", "entropy": 3.77734375, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [2.98046875, 8.1640625, 6.59765625, 1.318359375, 1.5771484375, 5.33984375, 0.453125], "tokens": [264, 316, 9469, 1350, 32, 25132, 473]}
{"line_number": 143, "line_type": "generated", "code": "\n   * be checked by calling {@link Candidate#canInline}.\n   */\n  class GatherCandiates implements NodeTraversal.Callback {\n    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if", "entropy": 0.208740234375, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [0.472900390625, 0.0211181640625, 0.2044677734375, 0.7861328125, 1.3271484375, 1.08203125, 0.1556396484375, 0.2452392578125, 0.268798828125, 0.0018587112426757812, 0.03509521484375, 0.165283203125, 0.0032444000244140625, 0.58056640625, 0.067138671875, 0.348876953125, 0.0255279541015625, 0.98779296875, 0.0003173351287841797, 1.3113021850585938e-06, 0.002681732177734375, 3.147125244140625e-05, 7.152557373046875e-07, 0.62255859375, 0.2120361328125, 0.027435302734375, 0.0015935897827148438, 0.300048828125, 0.284912109375, 0.50048828125, 0.30810546875, 0.0002803802490234375, 0.018402099609375, 0.0046539306640625, 0.20556640625, 0.0006299018859863281, 0.004489898681640625, 2.1576881408691406e-05, 0.00028014183044433594, 0.07049560546875, 0.003673553466796875, 0.06390380859375, 0.0004699230194091797, 0.0013837814331054688, 0.004589080810546875, 0.007232666015625, 0.0623779296875, 0.0273590087890625, 8.344650268554688e-05, 0.0003743171691894531, 0.09051513671875, 1.244140625], "tokens": [664, 319, 526, 8137, 810, 8276, 3088, 1204, 390, 7964, 21, 3374, 10144, 4009, 664, 569, 334, 443, 570, 3790, 53, 36322, 1196, 4575, 4004, 35699, 32, 3296, 301, 284, 477, 1788, 284, 562, 1905, 1395, 11242, 3565, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 415]}
{"line_number": 144, "line_type": "original", "code": "    candidates = Lists.newLinkedList();", "entropy": 2.650390625, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [2.955078125, 8.546875, 5.68359375, 1.390625, 0.01012420654296875, 2.59375, 0.006778717041015625, 0.0087432861328125], "tokens": [264, 22068, 280, 25163, 32, 890, 20555, 473]}
{"line_number": 144, "line_type": "generated", "code": "\n   * the dataflow analysis is complete.\n   */\n  private class GatherCandiates implements NodeTraversal.Callback {\n    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return!ControlFlowGraph", "entropy": 0.279052734375, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [0.341552734375, 0.1295166015625, 1.3818359375, 3.552734375, 0.26416015625, 0.3310546875, 1.095703125, 1.3017578125, 0.06939697265625, 0.0391845703125, 0.2386474609375, 0.016326904296875, 0.462158203125, 0.070068359375, 0.00039768218994140625, 1.6689300537109375e-06, 0.00798797607421875, 8.940696716308594e-05, 1.0728836059570312e-06, 0.6767578125, 0.317138671875, 0.02777099609375, 0.0015697479248046875, 0.2349853515625, 0.288330078125, 0.58056640625, 0.310546875, 0.00023496150970458984, 0.01416015625, 0.006679534912109375, 0.2239990234375, 0.0005822181701660156, 0.004528045654296875, 2.276897430419922e-05, 0.0002741813659667969, 0.069091796875, 0.00372314453125, 0.06402587890625, 0.00038361549377441406, 0.001251220703125, 0.005298614501953125, 0.0060272216796875, 0.052764892578125, 0.0273284912109375, 8.976459503173828e-05, 0.00025010108947753906, 0.0775146484375, 0.90234375, 0.6025390625, 0.69873046875, 4.0531158447265625e-06, 0.00189971923828125], "tokens": [664, 319, 322, 706, 1867, 9209, 438, 6153, 32, 664, 569, 334, 945, 443, 570, 3790, 53, 36322, 1196, 4575, 4004, 35699, 32, 3296, 301, 284, 477, 1788, 284, 562, 1905, 1395, 11242, 3565, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 442, 653, 2422, 4055, 3406]}
{"line_number": 148, "line_type": "original", "code": "    new NodeTraversal(compiler, new GatherCandiates()).traverse(", "entropy": 1.4404296875, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [3.578125, 8.9296875, 1.744140625, 0.7177734375, 1.3251953125, 0.11309814453125, 0.0693359375, 2.21875, 1.384765625, 0.002532958984375, 1.775390625, 0.034423828125, 3.6716461181640625e-05, 0.438720703125, 0.34326171875, 0.376953125], "tokens": [264, 537, 4004, 35699, 26, 10199, 30, 537, 570, 3790, 53, 36322, 1196, 4251, 33261, 26]}
{"line_number": 148, "line_type": "generated", "code": "\n        NodeTraversal t, Node n, Node parent) {\n      // Look for definitions in the current scope.\n      if (n.isName() && n.getParent().isAssign() &&\n          n.getParent().getFirstChild() == n) {\n       ", "entropy": 0.564453125, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [1.375, 1.345703125, 1.6396484375, 0.138671875, 1.3125, 0.416259765625, 0.0310516357421875, 0.064453125, 0.01052093505859375, 0.0311126708984375, 0.00937652587890625, 0.03826904296875, 0.40869140625, 1.9365234375, 3.541015625, 0.143310546875, 3.021484375, 2.904296875, 0.56982421875, 1.3525390625, 0.21142578125, 0.6455078125, 0.17919921875, 0.419189453125, 0.1505126953125, 0.2091064453125, 0.002376556396484375, 0.297607421875, 0.470947265625, 0.392822265625, 0.1361083984375, 0.63037109375, 0.0004012584686279297, 1.0966796875, 0.050933837890625, 0.093994140625, 0.744140625, 0.462646484375, 0.19873046875, 0.46826171875, 0.4326171875, 0.018585205078125, 0.728515625, 0.00018703937530517578, 0.1839599609375, 0.0001366138458251953, 0.1376953125, 0.0251312255859375, 0.00376129150390625, 0.460693359375, 0.0010862350463867188, 0.20849609375], "tokens": [291, 4004, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 434, 12615, 436, 13183, 328, 322, 1550, 4576, 32, 397, 415, 308, 96, 32, 297, 558, 346, 962, 310, 32, 18789, 922, 297, 9079, 346, 962, 616, 310, 32, 18789, 922, 25657, 2931, 346, 610, 310, 27, 301, 291]}
{"line_number": 152, "line_type": "original", "code": "    reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);", "entropy": 1.03125, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [5.7109375, 5.42578125, 0.01276397705078125, 0.5419921875, 4.79296875, 0.62109375, 1.4990234375, 0.00547027587890625, 0.0001722574234008789, 0.0021076202392578125, 0.0015125274658203125, 0.0360107421875, 0.6875, 0.1971435546875, 0.87646484375, 0.05218505859375, 0.041473388671875, 0.000308990478515625, 0.50146484375, 0.50341796875, 0.1513671875], "tokens": [264, 316, 9469, 25626, 280, 537, 9204, 435, 9469, 3818, 4391, 26, 4687, 30, 273, 32, 371, 5504, 1026, 8980, 293]}
{"line_number": 152, "line_type": "generated", "code": "\n        return;\n      }\n\n      // TODO(user): It is possible to inline variables even if they are\n      // assigned in the same basic block as the definition.\n      if (graphNode.isEntering()) {\n        return;\n      }\n\n      if (", "entropy": 0.83935546875, "is_bug_line": false, "sus_score": 0.12838814775327387, "per_token_entropy": [0.08819580078125, 0.1087646484375, 0.003627777099609375, 0.0178070068359375, 0.00037741661071777344, 0.35791015625, 1.470703125, 3.0234375, 0.0249786376953125, 0.24169921875, 0.03460693359375, 3.5859375, 1.6455078125, 0.77685546875, 0.6572265625, 2.1484375, 1.810546875, 2.626953125, 0.59814453125, 0.599609375, 0.39013671875, 0.76318359375, 0.001956939697265625, 2.830078125, 1.7412109375, 1.30078125, 1.4541015625, 1.78125, 0.0166778564453125, 0.94482421875, 1.0498046875, 2.0078125, 0.62060546875, 1.443359375, 0.59814453125, 0.1624755859375, 0.5908203125, 0.00015282630920410156, 0.01216888427734375, 0.97216796875, 1.3212890625, 0.028289794921875, 0.7998046875, 0.00261688232421875, 0.23388671875, 1.375, 0.0009560585021972656, 0.09661865234375, 0.0005106925964355469, 0.0986328125, 1.017578125, 0.1661376953125], "tokens": [291, 442, 45, 397, 320, 1687, 434, 4296, 26, 496, 711, 2030, 438, 4195, 372, 4447, 4886, 4444, 415, 2953, 884, 397, 434, 11012, 328, 322, 2432, 6550, 2163, 619, 322, 5644, 32, 397, 415, 308, 2255, 1212, 32, 297, 6545, 299, 1157, 301, 291, 442, 45, 397, 320, 1687, 415, 308]}
