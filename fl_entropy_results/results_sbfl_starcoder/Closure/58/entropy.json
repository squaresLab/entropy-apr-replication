{"line_number": 200, "line_type": "original", "code": "          Node lhs = n.getFirstChild();", "entropy": 1.5302734375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [4.0859375, 3.130859375, 5.1171875, 0.77734375, 0.53271484375, 0.0034732818603515625, 0.057281494140625, 0.021759033203125, 0.047607421875], "tokens": [2033, 4004, 16020, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 200, "line_type": "generated", "code": "\n          }\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n          if (NodeUtil.isGet(", "entropy": 0.2056884765625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.366943359375, 0.0224609375, 0.2119140625, 1.251953125, 0.0654296875, 0.0034580230712890625, 0.134033203125, 0.0011835098266601562, 0.0032901763916015625, 0.0052337646484375, 0.0494384765625, 0.6357421875, 0.1595458984375, 0.27880859375, 0.0005102157592773438, 6.306171417236328e-05, 0.037933349609375, 0.6220703125, 0.006732940673828125, 0.0099029541015625, 0.022674560546875, 0.0017747879028320312, 0.03363037109375, 0.172119140625, 1.48828125, 0.0106201171875, 0.007110595703125, 0.0211944580078125, 0.19384765625, 0.0087890625, 0.004123687744140625, 0.0126190185546875, 0.0019855499267578125, 0.0693359375, 0.14111328125, 0.0010747909545898438, 0.0025501251220703125, 6.0558319091796875e-05, 0.006351470947265625, 4.935264587402344e-05, 0.0006275177001953125, 0.06500244140625, 0.0003445148468017578, 0.322021484375, 1.779296875, 0.2239990234375, 0.434814453125, 0.0003285408020019531, 6.854534149169922e-05, 0.0760498046875, 1.4619140625, 0.268310546875], "tokens": [616, 320, 616, 4004, 9322, 280, 16020, 32, 23017, 473, 616, 415, 308, 1212, 1733, 32, 297, 1881, 26, 16027, 490, 301, 324, 434, 436, 26, 869, 816, 328, 533, 27, 12399, 111, 324, 16020, 280, 16020, 32, 20197, 2931, 473, 616, 320, 616, 415, 308, 1212, 1733, 32, 297, 936, 26]}
{"line_number": 201, "line_type": "original", "code": "          Node rhs = lhs.getNext();", "entropy": 1.2373046875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [5.5859375, 3.1015625, 0.06072998046875, 0.01381683349609375, 1.0732421875, 0.01461029052734375, 0.027313232421875, 0.020233154296875], "tokens": [2033, 4004, 9322, 280, 16020, 32, 23017, 473]}
{"line_number": 201, "line_type": "generated", "code": "\n          if (NodeUtil.isVar(lhs)) {\n            // var x =...\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n          computeGenKill(n.", "entropy": 0.1719970703125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.2269287109375, 1.412109375, 0.12744140625, 0.1397705078125, 0.0005702972412109375, 0.00012028217315673828, 0.00791168212890625, 0.1337890625, 0.01117706298828125, 0.0085601806640625, 0.0182037353515625, 0.0010824203491210938, 0.022369384765625, 0.5, 0.7646484375, 0.198486328125, 0.1728515625, 0.37158203125, 0.249267578125, 1.119140625, 0.0017223358154296875, 0.01070404052734375, 0.005157470703125, 0.0014295578002929688, 0.01027679443359375, 0.462646484375, 0.10491943359375, 0.0038509368896484375, 0.1502685546875, 0.0002987384796142578, 0.4814453125, 0.5869140625, 0.004589080810546875, 9.620189666748047e-05, 0.007083892822265625, 0.65673828125, 0.138916015625, 0.1158447265625, 0.005344390869140625, 0.0023479461669921875, 0.0001289844512939453, 0.00032448768615722656, 0.0008807182312011719, 0.06536865234375, 0.0077972412109375, 0.26171875, 0.1519775390625, 0.0015649795532226562, 1.895427703857422e-05, 0.0017557144165039062, 0.219970703125, 0.00010836124420166016], "tokens": [616, 415, 308, 1212, 1733, 32, 297, 1881, 26, 16027, 490, 301, 324, 434, 773, 816, 280, 2417, 324, 33662, 885, 2797, 3325, 26, 16027, 30, 4479, 293, 616, 320, 616, 7596, 5142, 27875, 26, 16027, 32, 23017, 1026, 4479, 30, 17487, 30, 21161, 293, 616, 7596, 5142, 27875, 26, 96, 32]}
{"line_number": 202, "line_type": "original", "code": "          if (NodeUtil.isVar(lhs)) {", "entropy": 1.5361328125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [5.8984375, 3.8515625, 0.48828125, 0.59521484375, 0.0011625289916992188, 0.0014429092407226562, 0.07977294921875, 4.34765625, 1.068359375, 0.83935546875, 1.2490234375, 0.017181396484375], "tokens": [2033, 415, 308, 1212, 1733, 32, 297, 1881, 26, 16027, 490, 301]}
{"line_number": 202, "line_type": "generated", "code": "\n            addToSetIfLocal(lhs, gen);\n          }\n          Node rhs = lhs.getNext();\n          computeGenKill(rhs, gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c!= null;", "entropy": 0.1436767578125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.490478515625, 0.62353515625, 0.001987457275390625, 0.00530242919921875, 0.007038116455078125, 0.0024242401123046875, 0.006938934326171875, 0.0101776123046875, 0.0185394287109375, 0.005016326904296875, 0.1715087890625, 0.002269744873046875, 0.9296875, 1.8466796875, 0.0731201171875, 0.00453948974609375, 0.385986328125, 0.005046844482421875, 0.0084228515625, 0.006336212158203125, 0.06903076171875, 0.4541015625, 0.005344390869140625, 0.00011599063873291016, 0.00830078125, 0.01126861572265625, 0.0012292861938476562, 0.0009794235229492188, 0.00019633769989013672, 8.893013000488281e-05, 0.00031757354736328125, 0.03594970703125, 0.0238800048828125, 0.427001953125, 0.0002853870391845703, 0.90087890625, 0.4990234375, 0.052337646484375, 0.25732421875, 0.0004515647888183594, 0.00595855712890625, 0.049163818359375, 0.04693603515625, 0.00292205810546875, 0.0003514289855957031, 0.0007452964782714844, 4.839897155761719e-05, 0.005878448486328125, 0.0008077621459960938, 0.00019216537475585938, 0.0005435943603515625, 0.0006694793701171875], "tokens": [324, 33662, 885, 2797, 3325, 26, 16027, 30, 4479, 293, 616, 320, 616, 4004, 9322, 280, 16020, 32, 23017, 473, 616, 7596, 5142, 27875, 26, 14312, 30, 4479, 30, 17487, 30, 21161, 293, 291, 320, 813, 301, 616, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45]}
{"line_number": 206, "line_type": "original", "code": "            addToSetIfLocal(lhs, kill);", "entropy": 1.138671875, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [6.1484375, 0.477783203125, 0.001171112060546875, 0.00428009033203125, 0.006473541259765625, 0.004489898681640625, 0.06396484375, 1.291015625, 3.3671875, 0.0159912109375], "tokens": [1468, 33662, 885, 2797, 3325, 26, 16027, 30, 17487, 293]}
{"line_number": 206, "line_type": "generated", "code": "\n            addToSetIfLocal(lhs.getNext(), gen);\n        } else {\n          for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n         ", "entropy": 0.0797119140625, "is_bug_line": true, "sus_score": 0.5773502691896258, "per_token_entropy": [1.1708984375, 0.1539306640625, 0.000823974609375, 0.0023479461669921875, 0.0028533935546875, 0.0016775131225585938, 0.0753173828125, 0.2384033203125, 0.0216064453125, 0.02301025390625, 0.023040771484375, 0.004116058349609375, 0.480224609375, 0.0036144256591796875, 0.78759765625, 0.537109375, 0.047210693359375, 0.279296875, 0.0006308555603027344, 0.007598876953125, 0.036224365234375, 0.0177001953125, 0.0042572021484375, 0.0007319450378417969, 0.0007152557373046875, 6.687641143798828e-05, 0.007289886474609375, 0.0011701583862304688, 0.00033164024353027344, 0.001094818115234375, 0.0006804466247558594, 0.0008130073547363281, 0.0003814697265625, 0.00011801719665527344, 0.0007810592651367188, 2.1576881408691406e-05, 0.0005106925964355469, 0.0014505386352539062, 0.1170654296875, 0.06292724609375, 1.1920928955078125e-05, 6.4373016357421875e-06, 0.00027370452880859375, 0.00022411346435546875, 0.000247955322265625, 0.00030994415283203125, 3.1828880310058594e-05, 2.8371810913085938e-05, 3.2067298889160156e-05, 0.00266265869140625, 0.005260467529296875, 0.0195770263671875], "tokens": [324, 33662, 885, 2797, 3325, 26, 16027, 32, 23017, 1026, 4479, 293, 291, 320, 813, 301, 616, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301, 324, 7596, 5142, 27875, 26, 85, 30, 4479, 30, 17487, 30, 21161, 293, 616]}
{"line_number": 195, "line_type": "original", "code": "        if (!NodeUtil.isForIn(n)) {", "entropy": 1.5205078125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [4.8203125, 2.03515625, 1.9609375, 1.0966796875, 0.0005340576171875, 9.679794311523438e-05, 0.054473876953125, 8.484375, 0.61083984375, 0.038787841796875, 0.114501953125, 0.53173828125, 0.017303466796875], "tokens": [351, 415, 1429, 1212, 1733, 32, 297, 1562, 383, 26, 96, 490, 301]}
{"line_number": 195, "line_type": "generated", "code": "\n      case Token.ASSIGN:\n        // Only the left hand side is evaluated, so it's a kill.\n        addToSetIfLocal(n.getFirstChild(), kill);\n        computeGenKill(n.getLastChild(), gen, kill, conditional);\n       ", "entropy": 0.54248046875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.5712890625, 0.1319580078125, 0.0012617111206054688, 0.00033974647521972656, 0.54150390625, 0.0265655517578125, 0.32861328125, 1.646484375, 3.166015625, 2.5859375, 1.3193359375, 0.6162109375, 0.02203369140625, 1.1669921875, 2.220703125, 2.162109375, 1.2373046875, 2.15625, 2.251953125, 1.8740234375, 0.7578125, 0.51513671875, 0.060516357421875, 0.9931640625, 0.009246826171875, 0.00791168212890625, 0.006317138671875, 0.0035305023193359375, 0.09881591796875, 0.0200958251953125, 0.06463623046875, 0.00042319297790527344, 0.0013189315795898438, 0.004123687744140625, 0.0198516845703125, 0.244140625, 1.1201171875, 0.042633056640625, 0.0006418228149414062, 0.0428466796875, 0.01126861572265625, 0.0010251998901367188, 0.060699462890625, 5.042552947998047e-05, 0.0010662078857421875, 0.00119781494140625, 0.00014865398406982422, 0.00044727325439453125, 0.0005955696105957031, 0.032623291015625, 0.00742340087890625, 0.065673828125], "tokens": [397, 1135, 6512, 32, 25620, 44, 291, 434, 9287, 322, 2841, 4091, 5209, 438, 22423, 30, 1259, 561, 1182, 312, 17487, 32, 291, 33662, 885, 2797, 3325, 26, 96, 32, 25657, 2931, 1026, 17487, 293, 291, 7596, 5142, 27875, 26, 96, 32, 20197, 2931, 1026, 4479, 30, 17487, 30, 21161, 293, 291]}
{"line_number": 266, "line_type": "original", "code": "    Preconditions.checkState(NodeUtil.isName(node));", "entropy": 1.7294921875, "is_bug_line": false, "sus_score": 0.09950371902099892, "per_token_entropy": [6.94921875, 8.03125, 0.0048828125, 0.0269927978515625, 0.2685546875, 0.2117919921875, 3.26953125, 0.0016145706176757812, 0.001068115234375, 0.057037353515625, 2.732421875, 0.03955078125, 2.240234375, 0.38720703125], "tokens": [264, 40596, 32, 1553, 1078, 26, 1212, 1733, 32, 297, 558, 26, 1251, 876]}
{"line_number": 266, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.09950371902099892, "per_token_entropy": [], "tokens": []}
{"line_number": 117, "line_type": "original", "code": "    super(cfg, new LiveVariableJoinOp());", "entropy": 3.01953125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [4.92578125, 7.8046875, 3.0625, 0.1922607421875, 0.48876953125, 3.146484375, 3.052734375, 0.252197265625, 8.375, 0.54345703125, 1.3671875], "tokens": [264, 2599, 26, 4687, 30, 537, 17780, 3818, 6249, 3397, 1035]}
{"line_number": 117, "line_type": "generated", "code": "  private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n    Preconditions.checkArgument(n!= null);\n    Preconditions.checkArgument(gen!= null);\n    Preconditions.checkArgument(kill!= null);", "entropy": 0.210205078125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [1.427734375, 0.708984375, 0.69970703125, 0.03607177734375, 0.33203125, 0.004245758056640625, 0.0294647216796875, 0.197265625, 1.30859375, 0.0024814605712890625, 0.049896240234375, 3.802776336669922e-05, 0.0146636962890625, 0.07666015625, 0.25, 6.401538848876953e-05, 0.0007081031799316406, 0.010711669921875, 0.89697265625, 0.06500244140625, 0.0155792236328125, 0.0153961181640625, 0.1890869140625, 1.4990234375, 0.0010213851928710938, 0.1488037109375, 0.298828125, 0.1070556640625, 0.70263671875, 1.1025390625, 0.00604248046875, 0.1717529296875, 0.1829833984375, 0.1624755859375, 0.0001049041748046875, 0.005603790283203125, 0.012176513671875, 0.0190887451171875, 0.1378173828125, 0.01593017578125, 0.0010118484497070312, 0.01117706298828125, 0.0030727386474609375, 0.0017862319946289062, 0.00030493736267089844, 3.552436828613281e-05, 0.0001227855682373047, 0.0003495216369628906, 0.0035076141357421875, 0.0010251998901367188, 0.00016391277313232422, 0.00032711029052734375], "tokens": [225, 945, 763, 7596, 5142, 27875, 26, 1212, 310, 30, 7588, 885, 4479, 30, 7588, 885, 17487, 30, 1905, 21161, 27, 301, 284, 40596, 32, 1553, 3484, 26, 96, 863, 744, 293, 284, 40596, 32, 1553, 3484, 26, 2518, 863, 744, 293, 284, 40596, 32, 1553, 3484, 26, 14046, 863, 744, 293]}
{"line_number": 118, "line_type": "original", "code": "    this.jsScope = jsScope;", "entropy": 2.0234375, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [2.296875, 9.140625, 1.033203125, 4.95703125, 0.0499267578125, 0.291748046875, 0.412841796875, 0.005718231201171875, 0.0210723876953125], "tokens": [264, 458, 32, 754, 5504, 280, 4060, 5504, 45]}
{"line_number": 118, "line_type": "generated", "code": "  * Computes the gen and kill sets of the given node.", "entropy": 0.74462890625, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [1.4755859375, 0.75634765625, 0.71533203125, 0.5068359375, 1.26171875, 0.37451171875, 0.0087127685546875, 0.2252197265625, 1.8681640625, 1.2099609375, 0.669921875, 0.2308349609375, 0.377197265625], "tokens": [225, 319, 41932, 322, 4479, 461, 17487, 6900, 432, 322, 2702, 1541, 32]}
{"line_number": 119, "line_type": "original", "code": "    this.escaped = Sets.newHashSet();", "entropy": 1.892578125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [3.08203125, 8.1328125, 1.578125, 4.54296875, 0.41064453125, 0.5966796875, 0.004180908203125, 0.285888671875, 0.0246124267578125, 0.2578125], "tokens": [264, 458, 32, 37349, 280, 9013, 32, 890, 17175, 473]}
{"line_number": 119, "line_type": "generated", "code": "\n   * @param node The node to compute the GEN and KILL set for.\n   * @param gen The GEN set.\n   * @param kill The KILL set.\n   * @param conditional If true, kills are conditional.\n   */\n ", "entropy": 0.32666015625, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.32421875, 0.345458984375, 0.8564453125, 0.01739501953125, 0.11907958984375, 0.84375, 0.27001953125, 0.9599609375, 0.68017578125, 0.5029296875, 1.0234375, 0.1424560546875, 0.01351165771484375, 0.002307891845703125, 0.42236328125, 0.27734375, 0.032318115234375, 0.013031005859375, 0.03167724609375, 0.0082244873046875, 0.00261688232421875, 0.0301055908203125, 0.4658203125, 1.72265625, 0.0312042236328125, 0.869140625, 0.16162109375, 0.000591278076171875, 0.001026153564453125, 0.00010824203491210938, 0.0007433891296386719, 0.007083892822265625, 0.00994110107421875, 0.0002701282501220703, 0.0008640289306640625, 0.007213592529296875, 0.01415252685546875, 0.2352294921875, 0.002445220947265625, 0.00434112548828125, 0.0296783447265625, 1.46484375, 0.3408203125, 0.1397705078125, 2.740234375, 0.00696563720703125, 0.408447265625, 0.37890625, 0.85107421875, 0.1383056640625, 0.0272674560546875, 0.0113525390625], "tokens": [664, 319, 477, 753, 1541, 886, 1541, 372, 7596, 322, 37906, 461, 1224, 13142, 739, 436, 32, 664, 319, 477, 753, 4479, 886, 37906, 739, 32, 664, 319, 477, 753, 17487, 886, 1224, 13142, 739, 32, 664, 319, 477, 753, 21161, 1670, 861, 30, 831, 8576, 884, 21161, 32, 664, 569, 334]}
{"line_number": 120, "line_type": "original", "code": "    computeEscaped(jsScope, escaped, compiler);", "entropy": 3.470703125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [3.4375, 8.0078125, 9.96875, 0.133056640625, 0.8544921875, 5.90234375, 0.1024169921875, 0.2391357421875, 2.40234375, 0.244873046875, 8.9375, 1.4208984375], "tokens": [264, 7596, 24866, 26695, 26, 754, 5504, 30, 31253, 30, 8980, 293]}
{"line_number": 120, "line_type": "generated", "code": "\n   * @param node The node to compute the sets for.\n   * @param gen The set of variables that are generated by the node.\n   * @param kill The set of variables that are killed by the node.\n   */\n  private void computeGen", "entropy": 0.27587890625, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.491943359375, 0.275390625, 0.295654296875, 0.0212860107421875, 0.126708984375, 0.67919921875, 0.27978515625, 0.89794921875, 0.7099609375, 0.438232421875, 1.4052734375, 0.199951171875, 0.04290771484375, 0.0133819580078125, 0.0259246826171875, 0.0025463104248046875, 0.0020236968994140625, 0.0242767333984375, 0.404541015625, 1.1044921875, 1.02734375, 0.36181640625, 0.6796875, 0.2281494140625, 0.67626953125, 0.86279296875, 0.64501953125, 0.10675048828125, 0.061431884765625, 0.08819580078125, 0.0014858245849609375, 0.0216827392578125, 0.00014019012451171875, 0.0009679794311523438, 0.0168304443359375, 0.004116058349609375, 0.0023708343505859375, 0.0401611328125, 0.0880126953125, 0.032470703125, 0.055633544921875, 0.0330810546875, 0.01129150390625, 0.0028076171875, 0.0097503662109375, 0.0101470947265625, 1.4658203125, 0.0103759765625, 0.322265625, 0.039154052734375, 0.00022041797637939453, 0.0011339187622070312], "tokens": [664, 319, 477, 753, 1541, 886, 1541, 372, 7596, 322, 6900, 436, 32, 664, 319, 477, 753, 4479, 886, 739, 432, 4886, 688, 884, 4723, 810, 322, 1541, 32, 664, 319, 477, 753, 17487, 886, 739, 432, 4886, 688, 884, 35171, 810, 322, 1541, 32, 664, 569, 334, 945, 763, 7596, 5142]}
{"line_number": 121, "line_type": "original", "code": "  }", "entropy": 2.705078125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [2.34375, 3.06640625], "tokens": [225, 320]}
{"line_number": 121, "line_type": "generated", "code": "\n   * @param gen Set to be populated with the GEN set.\n   * @param kill Set to be populated with the KILL set.\n   * @param conditional Whether to treat kills as conditional.\n   */\n  private void computeGenKill(Node", "entropy": 0.3251953125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.53759765625, 0.6123046875, 0.040069580078125, 0.00475311279296875, 0.059234619140625, 1.4384765625, 0.97265625, 1.107421875, 1.529296875, 0.04779052734375, 0.74462890625, 1.458984375, 0.18701171875, 0.1781005859375, 0.07421875, 0.0015659332275390625, 0.0036754608154296875, 9.191036224365234e-05, 0.0007295608520507812, 0.007015228271484375, 0.003009796142578125, 0.00164031982421875, 0.00673675537109375, 0.0018053054809570312, 0.005092620849609375, 0.00751495361328125, 0.0006680488586425781, 0.0015430450439453125, 0.005138397216796875, 0.06085205078125, 0.187744140625, 0.0036258697509765625, 0.0033435821533203125, 0.029632568359375, 0.90869140625, 1.6435546875, 1.3740234375, 2.291015625, 0.018768310546875, 0.1136474609375, 0.05462646484375, 0.44580078125, 0.119873046875, 0.03436279296875, 0.01042938232421875, 0.3017578125, 0.20263671875, 0.0003020763397216797, 0.00048351287841796875, 1.2040138244628906e-05, 0.00144195556640625, 0.0572509765625], "tokens": [664, 319, 477, 753, 4479, 1756, 372, 526, 24545, 623, 322, 37906, 739, 32, 664, 319, 477, 753, 17487, 1756, 372, 526, 24545, 623, 322, 1224, 13142, 739, 32, 664, 319, 477, 753, 21161, 14071, 372, 17562, 831, 8576, 619, 21161, 32, 664, 569, 334, 945, 763, 7596, 5142, 27875, 26, 1212]}
{"line_number": 133, "line_type": "original", "code": "    return false;", "entropy": 4.19140625, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [5.1953125, 3.490234375, 8.0703125, 0.00492095947265625], "tokens": [264, 442, 901, 45]}
{"line_number": 133, "line_type": "generated", "code": "\n      case Token.BLOCK:\n        for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n          computeGenKill(c, gen, kill, conditional);\n        }\n        break;\n\n      case Token.DO:", "entropy": 0.1580810546875, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [1.2509765625, 0.220947265625, 0.0012569427490234375, 6.9141387939453125e-06, 0.7373046875, 0.0008273124694824219, 0.70703125, 1.064453125, 0.0011539459228515625, 0.00617218017578125, 0.607421875, 0.6689453125, 0.034271240234375, 0.0002460479736328125, 0.0307769775390625, 0.002140045166015625, 0.017242431640625, 0.00710296630859375, 0.0006494522094726562, 0.004268646240234375, 0.004154205322265625, 0.0307464599609375, 0.0011882781982421875, 0.0009064674377441406, 0.0002930164337158203, 0.00015854835510253906, 0.0015697479248046875, 0.0083160400390625, 0.039306640625, 0.0341796875, 0.0010242462158203125, 0.00034308433532714844, 0.003108978271484375, 0.0015649795532226562, 0.0002090930938720703, 0.0019292831420898438, 0.003421783447265625, 0.0001920461654663086, 0.0006728172302246094, 0.0178070068359375, 0.004077911376953125, 0.07073974609375, 8.809566497802734e-05, 0.060089111328125, 0.058837890625, 0.0003075599670410156, 0.59423828125, 0.05267333984375, 0.002979278564453125, 4.172325134277344e-06, 1.837890625, 0.0201416015625], "tokens": [397, 1135, 6512, 32, 10322, 44, 291, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301, 616, 7596, 5142, 27875, 26, 85, 30, 4479, 30, 17487, 30, 21161, 293, 291, 320, 291, 1626, 45, 1687, 1135, 6512, 32, 1680, 44]}
{"line_number": 143, "line_type": "original", "code": "    return new LiveVariableLattice(jsScope.getVarCount());", "entropy": 1.484375, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [5.0234375, 4.45703125, 8.3125, 0.369384765625, 0.05303955078125, 0.011962890625, 1.3232231140136719e-05, 0.291748046875, 2.142578125, 0.006038665771484375, 0.031280517578125, 0.02911376953125, 0.001979827880859375, 0.053619384765625], "tokens": [264, 442, 537, 17780, 3818, 62, 23353, 26, 754, 5504, 32, 48086, 1534, 1035]}
{"line_number": 143, "line_type": "generated", "code": "\n\n      case Token.ASSIGN:\n        computeGenKillAssignment(n, gen, kill, conditional);\n        return;\n\n      case Token.EXPR_RESULT:\n        computeGenKill(NodeUtil.getFirstChild(n), gen, kill, conditional);\n        return", "entropy": 0.25048828125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [1.1025390625, 0.1353759765625, 0.002117156982421875, 1.1563301086425781e-05, 1.1279296875, 0.010650634765625, 0.31005859375, 2.103515625, 0.57568359375, 0.08404541015625, 1.5458984375, 0.07177734375, 0.437744140625, 0.01474761962890625, 0.1602783203125, 0.005168914794921875, 0.02239990234375, 0.11981201171875, 0.04412841796875, 0.02899169921875, 0.0168304443359375, 0.134521484375, 0.00019073486328125, 0.17236328125, 0.0947265625, 0.0036525726318359375, 2.1457672119140625e-05, 2.12109375, 4.088878631591797e-05, 0.00039458274841308594, 0.00013768672943115234, 0.09228515625, 0.307373046875, 0.0038661956787109375, 0.01068115234375, 0.47705078125, 0.95654296875, 0.0008945465087890625, 2.0623207092285156e-05, 0.55615234375, 0.093017578125, 0.0008072853088378906, 0.0008149147033691406, 0.004108428955078125, 0.002902984619140625, 3.445148468017578e-05, 0.0006775856018066406, 0.0019502639770507812, 0.036468505859375, 0.000492095947265625, 0.009552001953125, 0.0199737548828125], "tokens": [1687, 1135, 6512, 32, 25620, 44, 291, 7596, 5142, 27875, 12589, 26, 96, 30, 4479, 30, 17487, 30, 21161, 293, 291, 442, 45, 1687, 1135, 6512, 32, 17793, 81, 6383, 44, 291, 7596, 5142, 27875, 26, 1212, 1733, 32, 25657, 2931, 26, 96, 471, 4479, 30, 17487, 30, 21161, 293, 291, 442]}
{"line_number": 148, "line_type": "original", "code": "    final BitSet gen = new BitSet(input.liveSet.size());", "entropy": 1.6376953125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [4.515625, 5.9921875, 5.01171875, 0.00013756752014160156, 3.78125, 7.19140625, 0.0299224853515625, 0.002544403076171875, 3.814697265625e-06, 0.1734619140625, 1.04296875, 0.026275634765625, 0.056884765625, 0.0013284683227539062, 0.00640869140625, 0.0111846923828125, 0.003814697265625], "tokens": [264, 1158, 7588, 885, 4479, 280, 537, 7588, 885, 26, 1131, 32, 9732, 885, 32, 891, 1035]}
{"line_number": 148, "line_type": "generated", "code": "\n          computeGenKill(n.getLastChild(), gen, kill, conditional);\n        }\n        return;\n\n      case Token.HOOK:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        computeGenKill", "entropy": 0.2000732421875, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.7412109375, 0.56884765625, 0.0831298828125, 0.0017251968383789062, 0.0240325927734375, 1.314453125, 0.007465362548828125, 0.1864013671875, 8.106231689453125e-05, 0.0382080078125, 0.006847381591796875, 0.0007033348083496094, 0.0009446144104003906, 0.0018053054809570312, 0.0911865234375, 0.001995086669921875, 0.60107421875, 0.0018053054809570312, 0.44189453125, 0.1759033203125, 0.0003256797790527344, 0.07965087890625, 0.023101806640625, 0.00205230712890625, 7.748603820800781e-06, 3.13671875, 5.125999450683594e-05, 0.10302734375, 0.33935546875, 0.0033321380615234375, 0.0006380081176757812, 0.0033550262451171875, 1.1201171875, 0.003448486328125, 5.125999450683594e-06, 0.0635986328125, 0.130859375, 0.0009822845458984375, 0.0008516311645507812, 0.0002567768096923828, 0.0084075927734375, 0.002513885498046875, 2.3365020751953125e-05, 0.0035610198974609375, 0.00033974647521972656, 0.0467529296875, 0.0309906005859375, 0.0024929046630859375, 0.37646484375, 0.62158203125, 0.01198577880859375, 0.0006852149963378906], "tokens": [616, 7596, 5142, 27875, 26, 96, 32, 20197, 2931, 1026, 4479, 30, 17487, 30, 21161, 293, 291, 320, 291, 442, 45, 1687, 1135, 6512, 32, 29243, 44, 291, 7596, 5142, 27875, 26, 1212, 1733, 32, 371, 5356, 3487, 26, 96, 471, 4479, 30, 17487, 30, 324, 21161, 293, 291, 7596, 5142, 27875]}
{"line_number": 149, "line_type": "original", "code": "    final BitSet kill = new BitSet(input.liveSet.size());", "entropy": 1.6015625, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [5.5859375, 7.80859375, 4.5, 0.00018966197967529297, 1.9091796875, 5.9140625, 0.158935546875, 0.004730224609375, 2.586841583251953e-05, 0.153076171875, 1.0751953125, 0.0311431884765625, 0.06707763671875, 0.0021572113037109375, 0.0065155029296875, 0.01122283935546875, 0.0052032470703125], "tokens": [264, 1158, 7588, 885, 17487, 280, 537, 7588, 885, 26, 1131, 32, 9732, 885, 32, 891, 1035]}
{"line_number": 149, "line_type": "generated", "code": "\n        }\n        return;\n\n      case Token.FOR_IN:\n        computeGenKill(NodeUtil.getLeftmostChild(n), gen, kill, conditional);\n        return;\n\n      case Token.ASSIGN:\n        if (!conditional) {\n          computeGen", "entropy": 0.31787109375, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.3330078125, 0.003047943115234375, 0.040985107421875, 0.385986328125, 0.0001583099365234375, 0.05792236328125, 0.0225830078125, 0.002155303955078125, 1.239776611328125e-05, 1.7548828125, 0.0008358955383300781, 0.301513671875, 0.0015954971313476562, 0.54150390625, 0.438720703125, 0.057373046875, 0.0002307891845703125, 0.0311737060546875, 0.48583984375, 0.0008854866027832031, 0.00026988983154296875, 0.09832763671875, 1.9716796875, 0.970703125, 1.158203125, 0.0246734619140625, 0.07647705078125, 0.466796875, 0.00992584228515625, 0.00033020973205566406, 0.00312042236328125, 0.0014133453369140625, 0.1243896484375, 0.00164794921875, 0.09454345703125, 0.2220458984375, 0.0001838207244873047, 0.046112060546875, 0.0218505859375, 0.0036468505859375, 0.0002684593200683594, 1.64453125, 0.0034694671630859375, 0.25341796875, 1.31640625, 1.46484375, 0.397216796875, 0.14404296875, 0.0010766983032226562, 0.300537109375, 1.009765625, 0.235107421875], "tokens": [291, 320, 291, 442, 45, 1687, 1135, 6512, 32, 7321, 81, 521, 44, 291, 7596, 5142, 27875, 26, 1212, 1733, 32, 371, 3679, 7320, 2931, 26, 96, 471, 4479, 30, 17487, 30, 21161, 293, 291, 442, 45, 1687, 1135, 6512, 32, 25620, 44, 291, 415, 1429, 25065, 27, 301, 616, 7596, 5142]}
{"line_number": 152, "line_type": "original", "code": "    boolean conditional = false;", "entropy": 2.826171875, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [5.05078125, 5.65234375, 3.595703125, 2.001953125, 0.646484375, 0.0074005126953125], "tokens": [264, 1905, 21161, 280, 901, 45]}
{"line_number": 152, "line_type": "generated", "code": "\n          // x is always live because it is the iterator.\n          gen.set(lhs.getScope().getVar(lhs.getString()).index);\n          // y is always live because it is the iterable.\n          gen.set(rhs.getScope().", "entropy": 0.5498046875, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.253662109375, 2.259765625, 1.9306640625, 0.69580078125, 1.8828125, 1.0380859375, 2.296875, 1.439453125, 0.68896484375, 1.8720703125, 2.669921875, 1.265625, 0.061981201171875, 0.60205078125, 0.01122283935546875, 0.002376556396484375, 0.0012178421020507812, 0.701171875, 0.00820159912109375, 0.7626953125, 1.0068359375, 0.1943359375, 0.33984375, 0.1051025390625, 0.04473876953125, 0.0665283203125, 0.0042724609375, 0.0051727294921875, 0.33154296875, 0.01491546630859375, 0.26171875, 1.392578125, 0.78564453125, 0.498046875, 0.73095703125, 0.1505126953125, 0.150146484375, 0.381103515625, 0.232421875, 0.2430419921875, 1.001953125, 0.07366943359375, 0.017852783203125, 0.051055908203125, 0.0004146099090576172, 0.003543853759765625, 0.0003218650817871094, 0.018829345703125, 0.00012195110321044922, 0.0275115966796875, 0.0015888214111328125, 0.0003371238708496094], "tokens": [616, 434, 816, 438, 5182, 10912, 3301, 561, 438, 322, 10032, 32, 616, 4479, 32, 470, 26, 16027, 32, 371, 5504, 922, 48086, 26, 16027, 32, 7069, 4251, 1055, 293, 616, 434, 533, 438, 5182, 10912, 3301, 561, 438, 322, 27182, 32, 616, 4479, 32, 470, 26, 14312, 32, 371, 5504, 922]}
{"line_number": 153, "line_type": "original", "code": "    List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node);", "entropy": 1.5439453125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [5.30859375, 8.0390625, 0.0131683349609375, 7.2109375, 0.000751495361328125, 0.1400146484375, 0.00844573974609375, 0.006793975830078125, 0.00015211105346679688, 0.0880126953125, 0.0018787384033203125, 3.5625, 0.0816650390625, 0.08416748046875, 0.9423828125, 3.095703125, 0.422607421875, 0.291015625, 0.6533203125, 0.004177093505859375, 0.01064300537109375, 5.484375, 0.0423583984375], "tokens": [264, 1682, 46, 2820, 3406, 6530, 46, 1212, 30, 23745, 2005, 6731, 720, 280, 622, 11812, 922, 371, 1512, 18221, 26, 1251, 293]}
{"line_number": 153, "line_type": "generated", "code": "\n            gen.set(lhs.getFirstChild().getSymbol().getIndex());\n          }\n          if (NodeUtil.isName(rhs)) {\n            Var var = rhs.getScope().getVar(rhs.getString());\n            if (var!= null) {", "entropy": 0.32763671875, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.4931640625, 0.99462890625, 0.037017822265625, 0.00988006591796875, 0.0036754608154296875, 0.873046875, 0.016693115234375, 1.1748046875, 0.0013875961303710938, 0.0019016265869140625, 0.66455078125, 1.716796875, 0.00799560546875, 0.164794921875, 0.042083740234375, 0.1646728515625, 0.000335693359375, 0.3037109375, 1.765625, 0.049560546875, 0.20068359375, 0.0002987384796142578, 8.380413055419922e-05, 0.0253143310546875, 1.37890625, 0.043975830078125, 0.016204833984375, 0.1654052734375, 0.0006990432739257812, 0.8828125, 1.8271484375, 0.78515625, 0.0173187255859375, 1.2939453125, 0.000339508056640625, 0.2861328125, 0.552734375, 0.002658843994140625, 0.0367431640625, 0.004100799560546875, 0.04327392578125, 0.0003364086151123047, 0.003055572509765625, 0.0017957687377929688, 0.361328125, 0.39697265625, 0.0309906005859375, 0.0170135498046875, 0.11529541015625, 0.0003123283386230469, 0.05450439453125, 0.002414703369140625], "tokens": [324, 4479, 32, 470, 26, 16027, 32, 25657, 2931, 922, 371, 6084, 922, 27829, 1035, 616, 320, 616, 415, 308, 1212, 1733, 32, 297, 558, 26, 14312, 490, 301, 324, 7329, 773, 280, 9322, 32, 371, 5504, 922, 48086, 26, 14312, 32, 7069, 1035, 324, 415, 308, 869, 863, 744, 27, 301]}
{"line_number": 154, "line_type": "original", "code": "    for (DiGraphEdge<Node, Branch> edge : edgeList) {", "entropy": 1.234375, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [6.33984375, 4.3984375, 0.1312255859375, 8.796875, 0.0018100738525390625, 0.0166473388671875, 0.07257080078125, 0.0070037841796875, 0.0017147064208984375, 0.1463623046875, 0.0018014907836914062, 0.249755859375, 0.10150146484375, 0.623046875, 0.007648468017578125, 0.0082244873046875, 0.0797119140625], "tokens": [264, 436, 308, 2820, 3406, 6530, 46, 1212, 30, 23745, 48, 6731, 499, 6731, 720, 27, 301]}
{"line_number": 154, "line_type": "generated", "code": "\n              Var var = lhs.getFirstChild().getScope().getVar(lhs.getString());\n              gen.set(var.getIndex());\n            } else if (NodeUtil.isName(lhs)) {\n              // for(x in y) {...}\n             ", "entropy": 0.2352294921875, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [1.19921875, 2.4453125, 0.396728515625, 0.049652099609375, 0.685546875, 0.01274871826171875, 0.0208892822265625, 0.0010356903076171875, 0.00803375244140625, 0.27783203125, 0.4443359375, 0.0301055908203125, 0.06732177734375, 0.0254058837890625, 0.19677734375, 0.011566162109375, 0.030242919921875, 0.004512786865234375, 0.110595703125, 0.8740234375, 0.0233612060546875, 0.004138946533203125, 0.0007834434509277344, 0.0255279541015625, 0.005706787109375, 0.193115234375, 0.03375244140625, 0.36181640625, 0.0174713134765625, 0.9833984375, 1.1318359375, 0.06988525390625, 0.1148681640625, 0.0006470680236816406, 0.00025177001953125, 0.01861572265625, 0.437255859375, 0.035980224609375, 0.0010690689086914062, 0.25732421875, 0.0008268356323242188, 0.06463623046875, 0.068603515625, 0.060455322265625, 0.06732177734375, 0.53369140625, 0.0176239013671875, 0.00925445556640625, 0.004619598388671875, 0.0095977783203125, 0.00765228271484375, 0.78515625], "tokens": [1090, 7329, 773, 280, 16020, 32, 25657, 2931, 922, 371, 5504, 922, 48086, 26, 16027, 32, 7069, 1035, 1090, 4479, 32, 470, 26, 869, 32, 27829, 1035, 324, 320, 813, 415, 308, 1212, 1733, 32, 297, 558, 26, 16027, 490, 301, 1090, 434, 436, 26, 106, 328, 533, 27, 12399, 111, 1090]}
{"line_number": 155, "line_type": "original", "code": "      if (Branch.ON_EX.equals(edge.getValue())) {", "entropy": 2.4765625, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [4.4140625, 3.177734375, 0.346435546875, 11.6171875, 1.3427734375, 5.10546875, 0.264404296875, 3.40625, 5.03125, 1.232421875, 0.006992340087890625, 2.91015625, 0.036346435546875, 0.27734375, 0.39306640625, 0.071533203125], "tokens": [647, 415, 308, 10094, 32, 567, 81, 1460, 32, 3574, 26, 5854, 32, 6682, 5156, 301]}
{"line_number": 155, "line_type": "generated", "code": "\n          } else {\n            // for(let x in y) {...}\n            lhs = lhs.getFirstChild();\n          }\n          computeGenKill(lhs, gen, kill, conditional);\n          computeGenKill(rhs, gen, kill, conditional);\n       ", "entropy": 0.149169921875, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.365966796875, 0.003604888916015625, 0.2783203125, 0.2056884765625, 0.12066650390625, 0.271484375, 0.0433349609375, 0.1585693359375, 0.529296875, 0.2181396484375, 0.052520751953125, 0.001621246337890625, 0.0027008056640625, 0.007328033447265625, 0.005901336669921875, 0.2010498046875, 1.2744140625, 0.046539306640625, 0.2021484375, 0.001617431640625, 0.0423583984375, 9.107589721679688e-05, 0.03607177734375, 1.5751953125, 0.0007753372192382812, 0.2117919921875, 0.71142578125, 0.2509765625, 0.00209808349609375, 0.0631103515625, 0.3173828125, 0.00562286376953125, 0.0297698974609375, 0.0003807544708251953, 0.0019969940185546875, 0.00148773193359375, 0.1285400390625, 0.005870819091796875, 0.0997314453125, 0.042572021484375, 0.0205230712890625, 0.003971099853515625, 0.006290435791015625, 0.005046844482421875, 0.00341033935546875, 0.050537109375, 0.0018100738525390625, 0.0009260177612304688, 0.001758575439453125, 0.04803466796875, 0.0007309913635253906, 0.09326171875], "tokens": [616, 320, 813, 301, 324, 434, 436, 26, 730, 816, 328, 533, 27, 12399, 111, 324, 16020, 280, 16020, 32, 25657, 2931, 473, 616, 320, 616, 7596, 5142, 27875, 26, 16027, 30, 4479, 30, 17487, 30, 21161, 293, 616, 7596, 5142, 27875, 26, 14312, 30, 4479, 30, 17487, 30, 21161, 293, 291]}
{"line_number": 158, "line_type": "original", "code": "    }", "entropy": 2.80859375, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [4.56640625, 1.05078125], "tokens": [264, 320]}
{"line_number": 158, "line_type": "generated", "code": "\n        }\n        return;\n\n      case Token.FOR_IN:\n        // for(var x = 0 in y) {...}\n        Node lhs = n.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (NodeUtil.isVar", "entropy": 0.2325439453125, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.87939453125, 0.1380615234375, 0.082275390625, 0.25341796875, 0.0002532005310058594, 0.09161376953125, 0.032562255859375, 0.0019378662109375, 6.4373016357421875e-06, 1.8037109375, 0.0010051727294921875, 0.77099609375, 0.0014753341674804688, 0.18701171875, 0.65869140625, 0.1715087890625, 0.07830810546875, 1.2763671875, 0.073974609375, 1.3935546875, 1.0888671875, 0.3564453125, 0.7236328125, 0.0887451171875, 0.0164031982421875, 0.0740966796875, 0.010406494140625, 0.08331298828125, 0.29052734375, 0.16943359375, 0.00616455078125, 0.0313720703125, 0.003063201904296875, 0.07037353515625, 0.019683837890625, 0.1805419921875, 0.01009368896484375, 0.25537109375, 0.054229736328125, 0.0006761550903320312, 0.051422119140625, 0.00133514404296875, 0.0045928955078125, 0.0276947021484375, 0.0523681640625, 0.433837890625, 0.0242919921875, 0.021484375, 0.00016224384307861328, 8.106231689453125e-06, 0.0022258758544921875, 0.04278564453125], "tokens": [291, 320, 291, 442, 45, 1687, 1135, 6512, 32, 7321, 81, 521, 44, 291, 434, 436, 26, 869, 816, 280, 225, 34, 328, 533, 27, 12399, 111, 291, 4004, 16020, 280, 310, 32, 25657, 2931, 473, 291, 4004, 9322, 280, 16020, 32, 23017, 473, 291, 415, 308, 1212, 1733, 32, 297, 1881]}
{"line_number": 159, "line_type": "original", "code": "    computeGenKill(node, gen, kill, conditional);", "entropy": 1.3994140625, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [4.421875, 3.45703125, 0.068603515625, 0.0024013519287109375, 0.0165557861328125, 6.890625, 2.654296875, 0.374267578125, 0.01299285888671875, 0.0025634765625, 0.0865478515625, 0.1514892578125, 0.04986572265625], "tokens": [264, 7596, 5142, 27875, 26, 1251, 30, 4479, 30, 17487, 30, 21161, 293]}
{"line_number": 159, "line_type": "generated", "code": "\n        }\n        return;\n\n      case Token.BREAK:\n        if (n.getParent().getType() == Token.LABEL) {\n          // break label;\n          return;\n        }\n        // break;\n        String label = NodeUtil.getBreakContinueLabel(", "entropy": 0.452880859375, "is_bug_line": false, "sus_score": 0.09245003270420485, "per_token_entropy": [0.36083984375, 0.03814697265625, 0.04718017578125, 0.101318359375, 0.00035071372985839844, 0.082763671875, 0.03125, 0.0016565322875976562, 5.602836608886719e-06, 2.23046875, 0.00029540061950683594, 1.1533203125, 1.6240234375, 0.216064453125, 0.96533203125, 0.002399444580078125, 0.853515625, 0.31884765625, 0.11328125, 0.001373291015625, 0.255859375, 0.0033512115478515625, 1.4424324035644531e-05, 0.5810546875, 0.031951904296875, 0.002391815185546875, 0.0274505615234375, 1.0068359375, 1.826171875, 0.9619140625, 0.365234375, 0.09759521484375, 2.40234375, 0.0005660057067871094, 0.01544189453125, 0.00032448768615722656, 0.290283203125, 0.51904296875, 0.83642578125, 0.080322265625, 0.3349609375, 2.76953125, 0.1988525390625, 0.3828125, 0.5556640625, 0.0007262229919433594, 0.00011658668518066406, 0.1754150390625, 0.056060791015625, 1.4423828125, 0.07952880859375, 0.09637451171875], "tokens": [291, 320, 291, 442, 45, 1687, 1135, 6512, 32, 26924, 44, 291, 415, 308, 96, 32, 18789, 922, 10272, 346, 610, 6512, 32, 11379, 27, 301, 616, 434, 1626, 2266, 45, 616, 442, 45, 291, 320, 291, 434, 1626, 45, 291, 892, 2266, 280, 4004, 1733, 32, 371, 10438, 17743, 2168, 26]}
