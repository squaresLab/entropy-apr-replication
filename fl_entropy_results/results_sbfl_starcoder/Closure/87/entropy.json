{"line_number": 309, "line_type": "original", "code": "        n.removeChild(cond);", "entropy": 2.462890625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.0625, 6.17578125, 0.277099609375, 1.5380859375, 0.0011615753173828125, 0.1629638671875, 0.014556884765625], "tokens": [351, 310, 32, 28878, 26, 1328, 293]}
{"line_number": 309, "line_type": "generated", "code": "\n    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n      Node thenExpr = getBlockExpression(thenBranch);\n      Node elseExpr = getBlockExpression(elseBranch);\n      n.removeChild(cond);\n      thenExpr.detach", "entropy": 0.08660888671875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.06951904296875, 0.6640625, 0.149169921875, 0.2490234375, 0.00013077259063720703, 0.006038665771484375, 7.30752944946289e-05, 2.6226043701171875e-06, 0.253173828125, 0.206298828125, 2.1219253540039062e-05, 0.001483917236328125, 0.00014603137969970703, 1.5139579772949219e-05, 0.0791015625, 0.0018281936645507812, 0.0831298828125, 0.5703125, 0.1063232421875, 0.04705810546875, 0.00801849365234375, 0.031829833984375, 0.0016660690307617188, 0.00609588623046875, 0.0009603500366210938, 0.002590179443359375, 2.384185791015625e-07, 0.0225067138671875, 0.0141754150390625, 0.01044464111328125, 0.005130767822265625, 0.0003535747528076172, 0.00021529197692871094, 0.0015916824340820312, 7.605552673339844e-05, 0.0003991127014160156, 6.473064422607422e-05, 0.0003993511199951172, 1.1920928955078125e-07, 0.0035152435302734375, 0.72607421875, 0.7275390625, 0.000339508056640625, 0.083251953125, 8.428096771240234e-05, 0.0243377685546875, 0.005641937255859375, 0.190673828125, 0.12042236328125, 0.017486572265625, 0.0013551712036132812, 0.00807952880859375], "tokens": [284, 415, 308, 3356, 10094, 1622, 3487, 2227, 962, 813, 10094, 1622, 3487, 2227, 27, 301, 397, 4004, 1615, 6150, 280, 622, 2227, 3487, 26, 3356, 10094, 293, 397, 4004, 813, 6150, 280, 622, 2227, 3487, 26, 1824, 10094, 293, 397, 310, 32, 28878, 26, 1328, 293, 397, 1615, 6150, 32, 18723]}
{"line_number": 310, "line_type": "original", "code": "        Node and = new Node(Token.AND, cond, expr.removeFirstChild())", "entropy": 1.0, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.22265625, 1.2490234375, 3.630859375, 0.422607421875, 0.209716796875, 0.003414154052734375, 0.0008745193481445312, 0.021148681640625, 4.279613494873047e-05, 0.0018777847290039062, 0.0252227783203125, 0.267822265625, 0.6083984375, 2.87109375, 1.3046875, 0.3447265625, 0.00334930419921875, 0.001491546630859375, 0.814453125], "tokens": [351, 4004, 461, 280, 537, 4004, 26, 1763, 32, 3349, 30, 16526, 30, 9810, 32, 2546, 3472, 2931, 1157]}
{"line_number": 310, "line_type": "generated", "code": "\n      Node thenExpr = getBlockExpression(thenBranch);\n      Node elseExpr = getBlockExpression(elseBranch);\n      n.removeChild(cond);\n      thenExpr.detachFromParent();\n      elseExpr.detachFromParent();\n\n      Node hookNode =", "entropy": 0.108642578125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.72314453125, 0.87890625, 0.261474609375, 0.05670166015625, 0.0084228515625, 0.04888916015625, 0.003246307373046875, 0.0080413818359375, 0.0013561248779296875, 0.004024505615234375, 4.76837158203125e-07, 0.037567138671875, 0.016143798828125, 0.0166015625, 0.0054779052734375, 0.00037169456481933594, 0.00027251243591308594, 0.0020122528076171875, 0.00015091896057128906, 0.00048041343688964844, 7.903575897216797e-05, 0.0006666183471679688, 3.5762786865234375e-07, 0.0026187896728515625, 0.65087890625, 0.7490234375, 0.0004837512969970703, 0.07843017578125, 0.0001169443130493164, 0.022247314453125, 0.006389617919921875, 0.214599609375, 0.1832275390625, 0.0160064697265625, 0.002593994140625, 0.0133209228515625, 0.0004968643188476562, 7.140636444091797e-05, 0.00041604042053222656, 0.006195068359375, 0.0036373138427734375, 5.0067901611328125e-06, 1.0967254638671875e-05, 8.0108642578125e-05, 7.152557373046875e-07, 3.147125244140625e-05, 0.00019443035125732422, 0.431640625, 0.546875, 0.56005859375, 0.068603515625, 0.01442718505859375], "tokens": [397, 4004, 1615, 6150, 280, 622, 2227, 3487, 26, 3356, 10094, 293, 397, 4004, 813, 6150, 280, 622, 2227, 3487, 26, 1824, 10094, 293, 397, 310, 32, 28878, 26, 1328, 293, 397, 1615, 6150, 32, 18723, 1792, 4433, 473, 397, 813, 6150, 32, 18723, 1792, 4433, 473, 1687, 4004, 11962, 1212, 280]}
{"line_number": 312, "line_type": "original", "code": "        Node newExpr = NodeUtil.newExpr(and);", "entropy": 1.75, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.55859375, 3.083984375, 2.0703125, 1.1494140625, 0.441162109375, 2.00390625, 0.00653076171875, 0.0003173351287841797, 0.0169525146484375, 0.0027141571044921875, 0.0302276611328125, 5.86328125, 0.52001953125], "tokens": [351, 4004, 537, 6150, 280, 4004, 1733, 32, 890, 6150, 26, 363, 293]}
{"line_number": 312, "line_type": "generated", "code": "\n      if (thenOp.getType() == Token.AND && elseOp.getType() == Token.AND) {\n        // if(x&&y)foo();else bar(); -> x&&y?foo():bar();\n        Node thenExpr = get", "entropy": 0.31884765625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.2066650390625, 0.6083984375, 0.2056884765625, 1.1748046875, 0.03228759765625, 0.2158203125, 0.11907958984375, 0.002292633056640625, 0.1070556640625, 0.70751953125, 4.279613494873047e-05, 1.98046875, 0.513671875, 0.468505859375, 0.0005865097045898438, 0.0011625289916992188, 0.0004127025604248047, 0.0009031295776367188, 0.0030765533447265625, 0.002197265625, 5.5670738220214844e-05, 0.71337890625, 0.1595458984375, 0.003772735595703125, 0.0867919921875, 0.6875, 0.314453125, 0.1990966796875, 0.2120361328125, 1.3056640625, 0.10235595703125, 0.304931640625, 0.299560546875, 0.04608154296875, 0.08135986328125, 0.188232421875, 0.0168609619140625, 0.060150146484375, 0.658203125, 0.165283203125, 0.69384765625, 0.47119140625, 0.01812744140625, 0.0050201416015625, 0.0028820037841796875, 0.060028076171875, 0.10723876953125, 1.4814453125, 1.1337890625, 0.321533203125, 0.00997161865234375, 0.322509765625], "tokens": [397, 415, 308, 3356, 3397, 32, 10272, 346, 610, 6512, 32, 3349, 962, 813, 3397, 32, 10272, 346, 610, 6512, 32, 3349, 27, 301, 291, 434, 415, 26, 106, 6007, 107, 27, 3986, 473, 1824, 5697, 473, 967, 816, 6007, 107, 49, 3986, 2262, 1632, 473, 291, 4004, 1615, 6150, 280, 622]}
{"line_number": 313, "line_type": "original", "code": "        parent.replaceChild(n, newExpr);", "entropy": 1.87109375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [5.23828125, 7.73828125, 0.0218048095703125, 0.1505126953125, 0.002201080322265625, 0.0017404556274414062, 0.0985107421875, 0.0012054443359375, 2.6875, 4.46484375, 0.17138671875], "tokens": [351, 2935, 32, 3227, 2931, 26, 96, 30, 537, 6150, 293]}
{"line_number": 313, "line_type": "generated", "code": "\n        // if(x)foo();else bar(); -> x?foo():bar();\n        // An additional set of curly braces isn't worth it.\n        n.removeChild(cond);\n        thenOp.detachFromParent();\n        elseOp.", "entropy": 0.234130859375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.096435546875, 1.5732421875, 0.5986328125, 0.1199951171875, 0.1505126953125, 0.09478759765625, 0.92822265625, 0.186279296875, 0.07257080078125, 0.372314453125, 0.00917816162109375, 0.0618896484375, 0.359619140625, 0.036834716796875, 0.0163726806640625, 0.00539398193359375, 0.00177764892578125, 0.05401611328125, 0.0977783203125, 1.7509765625, 1.7060546875, 0.01702880859375, 0.0246429443359375, 0.0029964447021484375, 0.55810546875, 0.00383758544921875, 0.0037441253662109375, 2.872943878173828e-05, 0.040679931640625, 7.87973403930664e-05, 0.00766754150390625, 0.0012254714965820312, 0.023040771484375, 0.05743408203125, 0.908203125, 0.001667022705078125, 0.27685546875, 0.00036835670471191406, 0.1607666015625, 0.01267242431640625, 0.047943115234375, 1.1962890625, 0.4580078125, 0.0096893310546875, 0.033538818359375, 0.0013580322265625, 9.059906005859375e-06, 0.0007042884826660156, 0.01312255859375, 0.0198822021484375, 9.500980377197266e-05, 5.6624412536621094e-05], "tokens": [291, 434, 415, 26, 106, 27, 3986, 473, 1824, 5697, 473, 967, 816, 49, 3986, 2262, 1632, 473, 291, 434, 2244, 5388, 739, 432, 2738, 631, 3203, 2557, 7735, 1330, 16587, 561, 32, 291, 310, 32, 28878, 26, 1328, 293, 291, 1615, 3397, 32, 18723, 1792, 4433, 473, 291, 813, 3397, 32]}
{"line_number": 314, "line_type": "original", "code": "        reportCodeChange();", "entropy": 2.109375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [4.62890625, 5.88671875, 0.012847900390625, 0.0001341104507446289, 0.01445770263671875], "tokens": [351, 3639, 1227, 1791, 473]}
{"line_number": 314, "line_type": "generated", "code": "\n        n.removeChild(cond);\n        thenOp.detachFromParent();\n        elseOp.detachFromParent();\n\n        Node hookNode = new Node(Token.HOOK, cond, thenOp, elseOp)\n                           .copyInformationFrom(n);\n       ", "entropy": 0.0880126953125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.61474609375, 0.98828125, 0.0016298294067382812, 0.125732421875, 0.0001704692840576172, 0.0267181396484375, 0.007843017578125, 0.0845947265625, 0.95068359375, 0.302734375, 0.01519775390625, 0.045318603515625, 0.0010051727294921875, 1.4901161193847656e-05, 0.0010013580322265625, 0.004299163818359375, 0.0062255859375, 2.7060508728027344e-05, 5.054473876953125e-05, 8.559226989746094e-05, 1.7523765563964844e-05, 5.257129669189453e-05, 0.0001938343048095703, 0.471923828125, 0.18896484375, 0.1112060546875, 0.0623779296875, 0.0029811859130859375, 0.0294189453125, 0.0001513957977294922, 0.00013256072998046875, 0.02484130859375, 5.9604644775390625e-06, 2.3484230041503906e-05, 0.00010073184967041016, 0.00449371337890625, 0.005245208740234375, 0.018218994140625, 0.00408935546875, 0.013031005859375, 0.00372314453125, 0.00069427490234375, 0.09405517578125, 0.2568359375, 6.449222564697266e-05, 0.00021982192993164062, 0.0001322031021118164, 2.5272369384765625e-05, 0.0001100301742553711, 0.016845703125, 0.001949310302734375, 0.09002685546875], "tokens": [291, 310, 32, 28878, 26, 1328, 293, 291, 1615, 3397, 32, 18723, 1792, 4433, 473, 291, 813, 3397, 32, 18723, 1792, 4433, 473, 584, 4004, 11962, 1212, 280, 537, 4004, 26, 1763, 32, 29243, 30, 16526, 30, 1615, 3397, 30, 813, 3397, 27, 1014, 638, 2991, 6606, 1792, 26, 96, 293, 291]}
{"line_number": 316, "line_type": "original", "code": "        return newExpr;", "entropy": 3.537109375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [4.5078125, 4.484375, 4.8359375, 3.068359375, 0.79248046875], "tokens": [351, 442, 537, 6150, 45]}
{"line_number": 316, "line_type": "generated", "code": "\n          if (NodeUtil.isName(lhs) &&\n              NodeUtil.isName(cond.getFirstChild()) &&\n              lhs.getString().equals(cond.getFirstChild().getString())) {\n            n.removeChild(cond);\n            Node rhs = then", "entropy": 0.316650390625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.445556640625, 0.72021484375, 0.260498046875, 1.2841796875, 0.001621246337890625, 1.7404556274414062e-05, 0.11102294921875, 0.5400390625, 0.08026123046875, 0.005016326904296875, 0.3779296875, 0.43115234375, 1.21875, 1.775390625, 0.01030731201171875, 2.8371810913085938e-05, 0.140380859375, 0.346923828125, 0.79296875, 1.017578125, 0.143310546875, 0.51123046875, 0.0006055831909179688, 0.450927734375, 0.01177978515625, 0.0205535888671875, 0.412841796875, 0.007266998291015625, 0.0138702392578125, 0.09307861328125, 0.027130126953125, 0.0005779266357421875, 0.07574462890625, 7.855892181396484e-05, 0.043426513671875, 0.0001386404037475586, 0.0005645751953125, 0.0006546974182128906, 0.0703125, 0.005947113037109375, 0.278076171875, 0.87890625, 0.0019016265869140625, 0.1956787109375, 0.00014209747314453125, 0.1669921875, 0.0135040283203125, 0.079345703125, 1.4384765625, 1.4384765625, 0.234375, 0.285888671875], "tokens": [616, 415, 308, 1212, 1733, 32, 297, 558, 26, 16027, 27, 962, 1090, 4004, 1733, 32, 297, 558, 26, 1328, 32, 25657, 2931, 1157, 962, 1090, 16020, 32, 7069, 922, 3574, 26, 1328, 32, 25657, 2931, 922, 7069, 5156, 301, 324, 310, 32, 28878, 26, 1328, 293, 324, 4004, 9322, 280, 1615]}
{"line_number": 268, "line_type": "original", "code": "      return n;", "entropy": 1.9326171875, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [6.82421875, 0.89111328125, 0.01279449462890625, 0.0020122528076171875], "tokens": [647, 442, 310, 45]}
{"line_number": 268, "line_type": "generated", "code": "\n    }\n\n    // if(x)foo();else bar(); -> x?foo():bar();\n    if (isLowerPrecedenceInExpression(cond, HOOK_PRECEDENCE)) {\n      return n;\n    }\n\n    Node hook = new Node", "entropy": 0.281494140625, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.31005859375, 0.060394287109375, 0.80517578125, 1.62890625, 1.431640625, 0.3642578125, 0.41796875, 0.38427734375, 0.7119140625, 0.354248046875, 0.25341796875, 0.18994140625, 0.1131591796875, 0.165771484375, 0.1806640625, 0.0609130859375, 0.101318359375, 0.008026123046875, 0.0115966796875, 0.2037353515625, 0.05023193359375, 0.29931640625, 0.13330078125, 0.56298828125, 0.59521484375, 0.0005803108215332031, 1.3113021850585938e-06, 0.0054473876953125, 0.01507568359375, 0.0011386871337890625, 0.133544921875, 0.0116119384765625, 1.443359375, 5.4836273193359375e-05, 0.00030493736267089844, 0.0022983551025390625, 0.0001233816146850586, 6.687641143798828e-05, 0.60888671875, 0.0014524459838867188, 0.05047607421875, 0.62060546875, 0.004276275634765625, 0.00025343894958496094, 0.007282257080078125, 7.843971252441406e-05, 0.1773681640625, 1.0888671875, 0.736328125, 0.1268310546875, 0.2000732421875, 0.0014905929565429688], "tokens": [284, 320, 446, 434, 415, 26, 106, 27, 3986, 473, 1824, 5697, 473, 967, 816, 49, 3986, 2262, 1632, 473, 284, 415, 308, 297, 6724, 2626, 39939, 383, 3487, 26, 1328, 30, 11551, 2950, 81, 21320, 1345, 8303, 490, 301, 397, 442, 310, 45, 284, 320, 446, 4004, 11962, 280, 537, 4004]}
{"line_number": 302, "line_type": "original", "code": "        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) ||", "entropy": 1.0703125, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [5.5625, 3.65625, 0.242919921875, 2.126953125, 2.75, 0.0032176971435546875, 0.00013065338134765625, 0.03778076171875, 0.2705078125, 0.0078582763671875, 1.107421875, 0.01215362548828125, 2.939453125, 0.0006055831909179688, 5.841255187988281e-05, 0.00015151500701904297, 4.4465065002441406e-05, 0.83740234375, 0.783203125], "tokens": [351, 415, 308, 297, 6724, 2626, 39939, 383, 3487, 26, 1328, 30, 3114, 81, 21320, 1345, 8303, 27, 1276]}
{"line_number": 302, "line_type": "generated", "code": "\n      reportCodeChange();\n      return returnNode;\n    }\n\n    // if(x)foo();else if(y)bar();else baz(); -> if(x||y) foo();else baz();\n    // if(x)foo();else if", "entropy": 0.203369140625, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [0.2269287109375, 0.09332275390625, 0.0019359588623046875, 5.352497100830078e-05, 0.003559112548828125, 0.9462890625, 0.02301025390625, 0.10662841796875, 0.00011932849884033203, 0.002407073974609375, 0.019287109375, 5.53131103515625e-05, 0.076904296875, 0.416015625, 0.2127685546875, 0.1121826171875, 0.11773681640625, 0.24853515625, 0.98291015625, 0.10052490234375, 0.1180419921875, 0.367431640625, 0.11932373046875, 0.0264739990234375, 0.01522064208984375, 0.1795654296875, 0.0517578125, 0.445556640625, 0.207763671875, 0.030517578125, 0.2379150390625, 0.180419921875, 0.02056884765625, 0.0160675048828125, 0.39404296875, 0.00070953369140625, 0.0016956329345703125, 1.3974609375, 0.047149658203125, 0.69189453125, 0.08294677734375, 0.038299560546875, 0.025054931640625, 0.88232421875, 0.9521484375, 0.0465087890625, 0.0219573974609375, 0.030853271484375, 0.1632080078125, 0.00684356689453125, 0.017852783203125, 0.06591796875], "tokens": [397, 3639, 1227, 1791, 473, 397, 442, 442, 1212, 45, 284, 320, 446, 434, 415, 26, 106, 27, 3986, 473, 1824, 415, 26, 107, 27, 1632, 473, 1824, 29115, 473, 967, 415, 26, 106, 4697, 107, 27, 9214, 473, 1824, 29115, 473, 284, 434, 415, 26, 106, 27, 3986, 473, 1824, 415]}
{"line_number": 276, "line_type": "original", "code": "        Node expr = getBlockExpression(thenBranch);", "entropy": 2.685546875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [7.7421875, 3.552734375, 3.998046875, 0.505859375, 4.4140625, 6.51953125, 1.796875, 0.04669189453125, 0.80322265625, 0.00022649765014648438, 0.1712646484375], "tokens": [351, 4004, 9810, 280, 622, 2227, 3487, 26, 3356, 10094, 293]}
{"line_number": 276, "line_type": "generated", "code": "\n    if (NodeUtil.isLiteralValue(cond, true)) {\n      return n;\n    }\n\n    if (isFoldableExpressBlock(thenBranch) && isFoldableExpressBlock(elseBranch)) {\n      Node newCond = cond.clone", "entropy": 0.33837890625, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.27490234375, 0.740234375, 0.1356201171875, 2.232421875, 0.0025577545166015625, 4.1604042053222656e-05, 0.2391357421875, 0.9765625, 0.07684326171875, 0.0005102157592773438, 0.52880859375, 0.061676025390625, 0.223876953125, 0.2332763671875, 0.0013322830200195312, 0.0258636474609375, 0.6689453125, 0.020111083984375, 0.0013942718505859375, 0.01045989990234375, 0.00040411949157714844, 0.2137451171875, 0.9072265625, 0.15673828125, 0.900390625, 0.83984375, 0.0025081634521484375, 0.1485595703125, 0.0004470348358154297, 0.0031642913818359375, 0.323974609375, 6.794929504394531e-06, 0.316650390625, 0.1876220703125, 0.732421875, 0.031982421875, 0.0001398324966430664, 0.0051727294921875, 0.00016438961029052734, 0.0006771087646484375, 0.01355743408203125, 3.814697265625e-05, 0.119873046875, 0.006458282470703125, 0.32373046875, 1.7451171875, 1.65234375, 1.2734375, 0.150146484375, 0.84765625, 0.07568359375, 0.15283203125], "tokens": [284, 415, 308, 1212, 1733, 32, 297, 8208, 882, 26, 1328, 30, 861, 490, 301, 397, 442, 310, 45, 284, 320, 446, 415, 308, 297, 15483, 444, 12070, 2227, 26, 3356, 10094, 27, 962, 438, 15483, 444, 12070, 2227, 26, 1824, 10094, 490, 301, 397, 4004, 537, 21808, 280, 16526, 32, 6358]}
{"line_number": 277, "line_type": "original", "code": "        if (isPropertyAssignmentInExpression(expr)) {", "entropy": 2.501953125, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [6.74609375, 1.8369140625, 0.1807861328125, 0.90869140625, 8.1484375, 2.01171875, 4.52734375, 2.76953125, 0.32421875, 2.05078125, 0.499755859375, 0.01238250732421875], "tokens": [351, 415, 308, 297, 1653, 12589, 383, 3487, 26, 3385, 490, 301]}
{"line_number": 277, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Try to remove repeated statements in the body of an if or while.\n   *\n   * This is an improvement over the more obvious approach of just looking for\n   * the same statement repeated in a row. The reason is that it", "entropy": 1.13671875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [2.060546875, 0.0755615234375, 0.31591796875, 0.202392578125, 0.0831298828125, 0.0010271072387695312, 1.1669921875, 0.841796875, 0.943359375, 1.4970703125, 0.25341796875, 1.037109375, 1.3916015625, 2.1171875, 0.05548095703125, 0.62109375, 0.99072265625, 1.2607421875, 0.82861328125, 0.94921875, 0.1397705078125, 0.317626953125, 0.6962890625, 0.0044403076171875, 2.40234375, 1.6103515625, 2.6015625, 3.53515625, 0.29345703125, 1.0341796875, 4.4296875, 1.49609375, 1.6103515625, 0.0841064453125, 2.2109375, 2.208984375, 0.70263671875, 0.056610107421875, 0.00017762184143066406, 1.765625, 0.470458984375, 1.3203125, 3.736328125, 1.2978515625, 0.97900390625, 0.81640625, 0.69775390625, 2.4140625, 1.0234375, 0.697265625, 0.11669921875, 1.6650390625], "tokens": [334, 320, 719, 1022, 664, 319, 8959, 372, 3345, 16834, 15252, 328, 322, 3361, 432, 600, 415, 556, 2218, 32, 664, 319, 664, 319, 1348, 438, 600, 26289, 2288, 322, 1829, 20190, 10078, 432, 2258, 9696, 436, 664, 319, 322, 2432, 7603, 16834, 328, 312, 2698, 32, 886, 5966, 438, 688, 561]}
{"line_number": 283, "line_type": "original", "code": "        if (cond.getType() == Token.NOT) {", "entropy": 1.17578125, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [6.1640625, 3.44140625, 0.152099609375, 4.28125, 0.033935546875, 0.408203125, 0.006137847900390625, 0.07781982421875, 0.0010786056518554688, 3.0040740966796875e-05, 0.047698974609375, 0.6533203125, 0.01470184326171875], "tokens": [351, 415, 308, 1328, 32, 10272, 346, 610, 6512, 32, 3908, 27, 301]}
{"line_number": 283, "line_type": "generated", "code": "\n      reportCodeChange();\n      return n;\n    }\n\n    // if(x)foo();else if(y)bar();else baz(); -> if(x)foo();else if(y)bar();\n    // else baz();\n    // An additional", "entropy": 0.218017578125, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.19482421875, 0.72802734375, 0.00044035911560058594, 6.031990051269531e-05, 0.0023403167724609375, 0.72900390625, 0.046630859375, 0.044952392578125, 0.002666473388671875, 0.0168304443359375, 8.58306884765625e-05, 0.1241455078125, 0.489013671875, 0.262451171875, 0.25634765625, 0.08935546875, 0.11328125, 0.1591796875, 0.09521484375, 0.08856201171875, 0.461181640625, 0.24658203125, 0.0298614501953125, 0.01219940185546875, 0.193603515625, 0.03802490234375, 0.1964111328125, 0.2276611328125, 0.02801513671875, 0.318359375, 0.11932373046875, 0.027740478515625, 0.01078033447265625, 0.64990234375, 0.0574951171875, 0.12890625, 0.0241241455078125, 0.10198974609375, 0.03961181640625, 0.022216796875, 0.7880859375, 0.01153564453125, 0.047760009765625, 0.2239990234375, 0.452392578125, 0.97412109375, 0.2197265625, 0.05413818359375, 0.06451416015625, 0.90673828125, 1.2021484375, 0.0121002197265625], "tokens": [397, 3639, 1227, 1791, 473, 397, 442, 310, 45, 284, 320, 446, 434, 415, 26, 106, 27, 3986, 473, 1824, 415, 26, 107, 27, 1632, 473, 1824, 29115, 473, 967, 415, 26, 106, 27, 3986, 473, 1824, 415, 26, 107, 27, 1632, 473, 284, 434, 813, 29115, 473, 284, 434, 2244, 5388]}
{"line_number": 630, "line_type": "original", "code": "    Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {", "entropy": 1.2373046875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [7.875, 7.43359375, 0.0205535888671875, 0.01374053955078125, 0.00135040283203125, 0.54541015625, 1.8671875, 0.163330078125, 0.0013751983642578125, 0.430419921875, 0.0269012451171875, 2.513671875, 0.0660400390625, 0.0099639892578125, 0.0082244873046875, 0.0156402587890625, 0.041168212890625], "tokens": [264, 23426, 46, 1212, 48, 438, 6724, 2626, 39939, 12688, 280, 537, 23426, 46, 1212, 6940, 301]}
{"line_number": 630, "line_type": "generated", "code": "\n            Node firstFirst = first.getFirstChild();\n            if (NodeUtil.isBooleanExpression(firstFirst)) {\n              return firstFirst;\n            }\n            break;\n          }\n          case Token.OR: {", "entropy": 0.2861328125, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.09326171875, 0.7548828125, 1.8544921875, 0.70458984375, 0.0234527587890625, 0.041229248046875, 0.0011053085327148438, 0.005611419677734375, 0.0008349418640136719, 0.00433349609375, 0.10638427734375, 0.8427734375, 0.1436767578125, 0.91748046875, 0.0005030632019042969, 0.0005078315734863281, 0.6201171875, 0.336181640625, 0.9453125, 0.006641387939453125, 0.1488037109375, 0.01261138916015625, 0.28515625, 0.0174713134765625, 0.1614990234375, 1.16015625, 0.54638671875, 0.0225677490234375, 0.287353515625, 0.01555633544921875, 0.0007987022399902344, 0.7138671875, 0.45068359375, 0.0079193115234375, 0.0352783203125, 0.004398345947265625, 0.2093505859375, 0.006458282470703125, 0.0004372596740722656, 0.00010836124420166016, 0.279541015625, 0.0009737014770507812, 0.53466796875], "tokens": [324, 4004, 1932, 3472, 280, 1932, 32, 25657, 2931, 473, 324, 415, 308, 1212, 1733, 32, 297, 4709, 3487, 26, 2232, 3472, 490, 301, 1090, 442, 1932, 3472, 45, 324, 320, 324, 1626, 45, 616, 320, 616, 1135, 6512, 32, 758, 44, 301]}
{"line_number": 637, "line_type": "original", "code": "    return NodeUtil.has(n, isLowerPrecedencePredicate,", "entropy": 1.875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [6.44921875, 5.203125, 5.80078125, 0.016998291015625, 0.006008148193359375, 4.921875, 0.1175537109375, 0.51171875, 0.142578125, 2.03125, 0.28466796875, 0.00824737548828125, 1.1205673217773438e-05, 2.359375, 0.264404296875], "tokens": [264, 442, 4004, 1733, 32, 2040, 26, 96, 30, 438, 6724, 2626, 39939, 12688, 30]}
{"line_number": 637, "line_type": "generated", "code": "\n          default:\n            return n;\n        }\n\n      case Token.AND:\n      case Token.OR: {\n          Node newRoot = n.removeFirstChild();\n          newRoot.addChildToFront(n);\n          parent.replaceChild(n, new", "entropy": 0.3466796875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.405517578125, 0.6865234375, 0.0049591064453125, 0.2054443359375, 0.7490234375, 0.11859130859375, 0.0032482147216796875, 0.0258636474609375, 0.0012216567993164062, 1.5732421875, 0.2069091796875, 0.0004429817199707031, 6.830692291259766e-05, 0.69482421875, 0.00013935565948486328, 0.7919921875, 0.0023708343505859375, 0.00029087066650390625, 5.841255187988281e-06, 0.003757476806640625, 0.003322601318359375, 0.7705078125, 0.6630859375, 0.5927734375, 2.037109375, 0.1798095703125, 0.2215576171875, 1.109375, 0.099609375, 0.2291259765625, 0.078125, 0.0004773139953613281, 0.0697021484375, 0.0665283203125, 2.267578125, 0.006832122802734375, 0.1065673828125, 1.076171875, 0.0092010498046875, 0.486572265625, 0.0025882720947265625, 0.68408203125, 0.91748046875, 0.1029052734375, 0.75830078125, 0.0001518726348876953, 0.0017528533935546875, 4.839897155761719e-05, 5.888938903808594e-05, 0.0010852813720703125, 0.00022554397583007812, 0.00872802734375], "tokens": [616, 1244, 44, 324, 442, 310, 45, 291, 320, 1687, 1135, 6512, 32, 3349, 44, 397, 1135, 6512, 32, 758, 44, 301, 616, 4004, 537, 4058, 280, 310, 32, 2546, 3472, 2931, 473, 616, 537, 4058, 32, 21545, 705, 10112, 26, 96, 293, 616, 2935, 32, 3227, 2931, 26, 96, 30, 537]}
{"line_number": 645, "line_type": "original", "code": "    Predicate<Node> isPropertyAssignmentInExpressionPredicate =", "entropy": 1.8564453125, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [6.109375, 10.171875, 0.02520751953125, 0.055938720703125, 0.0026416778564453125, 0.56640625, 4.91015625, 0.054412841796875, 0.184814453125, 0.025604248046875, 0.10113525390625, 0.0751953125], "tokens": [264, 23426, 46, 1212, 48, 438, 1653, 12589, 383, 3487, 12688, 280]}
{"line_number": 645, "line_type": "generated", "code": "\n                Node newRoot = new Node(Token.OR, first);\n                newRoot.addChildToBack(left);\n                newRoot.addChildToBack(right);\n                parent.replaceChild(n, newRoot);\n                reportCodeChange();\n                //", "entropy": 0.1590576171875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.251220703125, 0.978515625, 0.5126953125, 0.19580078125, 0.349609375, 0.396728515625, 0.0914306640625, 0.00954437255859375, 0.55224609375, 0.0010519027709960938, 0.2220458984375, 0.0230255126953125, 1.7099609375, 0.1915283203125, 0.08941650390625, 0.4990234375, 0.01058197021484375, 0.000316619873046875, 0.043121337890625, 0.008392333984375, 0.1961669921875, 0.0003490447998046875, 0.397705078125, 0.0853271484375, 0.007526397705078125, 0.01491546630859375, 0.00010895729064941406, 6.854534149169922e-05, 0.0004096031188964844, 0.0008945465087890625, 0.0011072158813476562, 0.00019860267639160156, 0.008941650390625, 0.01082611083984375, 0.331298828125, 0.2626953125, 0.0002930164337158203, 0.000530242919921875, 5.650520324707031e-05, 0.00010895729064941406, 0.0166778564453125, 0.000324249267578125, 0.00444793701171875, 0.0014972686767578125, 0.0010013580322265625, 0.033203125, 0.036346435546875, 0.0003132820129394531, 6.67572021484375e-06, 0.000362396240234375, 0.1077880859375, 0.6142578125], "tokens": [400, 4004, 537, 4058, 280, 537, 4004, 26, 1763, 32, 758, 30, 1932, 293, 400, 537, 4058, 32, 21545, 705, 2495, 26, 1873, 293, 400, 537, 4058, 32, 21545, 705, 2495, 26, 990, 293, 400, 2935, 32, 3227, 2931, 26, 96, 30, 537, 4058, 293, 400, 3639, 1227, 1791, 473, 400, 434]}
{"line_number": 654, "line_type": "original", "code": "    return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,", "entropy": 1.6083984375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [6.38671875, 4.09765625, 5.5703125, 0.023193359375, 0.0036411285400390625, 5.3359375, 0.11346435546875, 0.32275390625, 0.0478515625, 1.12890625, 1.544921875, 0.003665924072265625, 0.016693115234375, 0.00406646728515625, 0.998046875, 0.13720703125], "tokens": [264, 442, 4004, 1733, 32, 2040, 26, 96, 30, 438, 1653, 12589, 383, 3487, 12688, 30]}
{"line_number": 654, "line_type": "generated", "code": "\n              return n;\n            }\n          default:\n            return n;\n        }\n      case Token.AND:\n      case Token.OR: {\n          Node left = n.getFirstChild();\n          Node right = n.getLastChild();\n\n          if (isBooleanLiteral", "entropy": 0.271240234375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [1.072265625, 1.6318359375, 0.1319580078125, 0.0020122528076171875, 0.1036376953125, 0.0007343292236328125, 0.366943359375, 0.4169921875, 0.002307891845703125, 0.28564453125, 0.2568359375, 0.00777435302734375, 0.000461578369140625, 0.0206298828125, 0.0008673667907714844, 0.455322265625, 0.06353759765625, 0.00023412704467773438, 3.4570693969726562e-06, 0.332275390625, 9.143352508544922e-05, 0.1990966796875, 0.0003426074981689453, 0.0001201629638671875, 1.0609626770019531e-05, 0.0003190040588378906, 0.0017910003662109375, 0.57666015625, 0.208984375, 0.607421875, 0.266357421875, 0.29248046875, 0.05364990234375, 6.818771362304688e-05, 0.023345947265625, 0.00011134147644042969, 0.0261383056640625, 0.0050811767578125, 0.045318603515625, 0.010284423828125, 0.0009055137634277344, 0.004474639892578125, 0.00019431114196777344, 0.000293731689453125, 5.9604644775390625e-06, 0.0005993843078613281, 0.9140625, 1.2275390625, 0.07940673828125, 1.4912109375, 1.6376953125, 1.28125], "tokens": [1090, 442, 310, 45, 324, 320, 616, 1244, 44, 324, 442, 310, 45, 291, 320, 397, 1135, 6512, 32, 3349, 44, 397, 1135, 6512, 32, 758, 44, 301, 616, 4004, 2841, 280, 310, 32, 25657, 2931, 473, 616, 4004, 2091, 280, 310, 32, 20197, 2931, 473, 5678, 415, 308, 297, 4709, 8208]}
{"line_number": 826, "line_type": "original", "code": "    return n;", "entropy": 1.8115234375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [3.21484375, 3.876953125, 0.1522216796875, 0.003864288330078125], "tokens": [264, 442, 310, 45]}
{"line_number": 826, "line_type": "generated", "code": "\n    if (isASTNormalized()) {\n      String className = constructorNameNode.getString();\n      if (className.equals(\"Object\") || className.equals(\"Array\")) {\n        newLiteralNode = n.getLastChild();\n\n        // If the AST is normalized", "entropy": 0.493896484375, "is_bug_line": false, "sus_score": 0.25, "per_token_entropy": [0.64892578125, 0.3916015625, 0.1512451171875, 0.61767578125, 0.03350830078125, 0.00011813640594482422, 0.39697265625, 0.09393310546875, 0.376953125, 1.458984375, 1.1806640625, 0.0892333984375, 0.1680908203125, 0.0004138946533203125, 0.0024890899658203125, 0.001857757568359375, 0.25439453125, 0.0019664764404296875, 0.46533203125, 0.449951171875, 0.310302734375, 0.11322021484375, 0.2130126953125, 0.019195556640625, 0.026458740234375, 0.578125, 1.1376953125, 0.59814453125, 0.020965576171875, 0.0005221366882324219, 0.0019893646240234375, 0.00039958953857421875, 0.01519012451171875, 0.1187744140625, 0.0020427703857421875, 0.141845703125, 0.9755859375, 0.0001169443130493164, 0.0007534027099609375, 0.0008935928344726562, 2.27734375, 0.1351318359375, 1.943359375, 0.00928497314453125, 1.0947265625, 1.7744140625, 1.08203125, 1.86328125, 0.65673828125, 2.87890625, 0.80419921875, 0.10198974609375], "tokens": [284, 415, 308, 297, 4375, 29814, 1157, 301, 397, 892, 2615, 280, 4374, 558, 1212, 32, 7069, 473, 397, 415, 308, 8678, 32, 3574, 440, 959, 657, 1276, 2615, 32, 3574, 440, 1261, 2131, 301, 291, 537, 8208, 1212, 280, 310, 32, 20197, 2931, 473, 584, 434, 1670, 322, 16095, 438, 17666]}
{"line_number": 749, "line_type": "original", "code": "        return n;", "entropy": 1.9140625, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [6.2109375, 1.408203125, 0.03570556640625, 0.00188446044921875], "tokens": [351, 442, 310, 45]}
{"line_number": 749, "line_type": "generated", "code": "\n        break;\n    }\n\n    return n;\n  }\n\n  /**\n   * Try to remove useless conditionals.\n   *\n   * @param n The node to try to minimize.\n   * @return The minimized node.\n   */\n  private Node tryMin", "entropy": 0.49462890625, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [1.134765625, 0.513671875, 0.0009427070617675781, 0.2322998046875, 0.0007219314575195312, 0.40283203125, 0.93359375, 0.054290771484375, 0.0037708282470703125, 0.0238189697265625, 0.0017185211181640625, 0.837890625, 0.466796875, 0.07025146484375, 0.0004944801330566406, 1.68359375, 0.096435546875, 1.9755859375, 2.34375, 1.6708984375, 0.17919921875, 1.4619140625, 0.317626953125, 0.28515625, 0.74267578125, 0.002285003662109375, 0.87255859375, 0.19775390625, 0.265625, 0.9892578125, 0.84130859375, 0.322021484375, 1.1630859375, 0.293212890625, 1.232421875, 0.5673828125, 0.03924560546875, 0.1798095703125, 0.052581787109375, 0.0894775390625, 0.258544921875, 1.3427734375, 0.0044097900390625, 0.219482421875, 0.9677734375, 0.07708740234375, 0.031646728515625, 0.0027599334716796875, 0.1502685546875, 0.0204620361328125, 0.0296478271484375, 0.07196044921875], "tokens": [291, 1626, 45, 284, 320, 446, 442, 310, 45, 334, 320, 719, 1022, 664, 319, 8959, 372, 3345, 38968, 3700, 3528, 32, 664, 319, 664, 319, 477, 753, 310, 886, 1541, 372, 1596, 372, 32758, 32, 664, 319, 477, 601, 886, 18206, 1191, 1541, 32, 664, 569, 334, 945, 4004, 1596, 2928]}
{"line_number": 544, "line_type": "original", "code": "    Preconditions.checkState(isFoldableExpressBlock(n));", "entropy": 1.4052734375, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [6.2734375, 5.44140625, 0.00070953369140625, 0.0014810562133789062, 0.00421142578125, 0.0008397102355957031, 0.058624267578125, 6.23046875, 0.017242431640625, 1.59375, 0.0020809173583984375, 0.004199981689453125, 0.004680633544921875, 0.046051025390625], "tokens": [264, 40596, 32, 1553, 1078, 26, 297, 15483, 444, 12070, 2227, 26, 96, 876]}
{"line_number": 544, "line_type": "generated", "code": "\n    return n.getFirstChild();\n  }\n\n  /**\n   * @return Whether the node is a block with a single statement that is\n   *     a single expression statement.\n   */\n  private boolean isExpressionBlock(Node n) {\n    if (n", "entropy": 0.16845703125, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.037384033203125, 0.0369873046875, 0.00710296630859375, 0.000339508056640625, 0.00473785400390625, 2.9921531677246094e-05, 0.003978729248046875, 0.006359100341796875, 0.00012636184692382812, 0.10406494140625, 0.10888671875, 0.0225372314453125, 0.0002994537353515625, 0.455322265625, 0.0253448486328125, 0.1591796875, 0.05657958984375, 0.1455078125, 0.0335693359375, 0.1326904296875, 0.276611328125, 0.07958984375, 0.0222625732421875, 0.0163421630859375, 0.0249481201171875, 0.04864501953125, 0.0640869140625, 0.041259765625, 0.00018775463104248047, 0.0308074951171875, 0.5302734375, 0.86962890625, 1.505859375, 0.9970703125, 0.202392578125, 0.0232391357421875, 0.003902435302734375, 0.0013599395751953125, 0.016326904296875, 0.0025615692138671875, 0.00408935546875, 1.7236328125, 0.63427734375, 0.0019426345825195312, 0.00035858154296875, 0.00370025634765625, 0.00142669677734375, 0.0006117820739746094, 0.04327392578125, 0.1934814453125, 0.006679534912109375, 0.045440673828125], "tokens": [284, 442, 310, 32, 25657, 2931, 473, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438, 664, 319, 262, 312, 3982, 6101, 7603, 32, 664, 569, 334, 945, 1905, 438, 3487, 2227, 26, 1212, 310, 27, 301, 284, 415, 308, 96]}
{"line_number": 545, "line_type": "original", "code": "    return n.getFirstChild();", "entropy": 1.1513671875, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [7.30078125, 0.398193359375, 0.264404296875, 0.044036865234375, 0.026763916015625, 0.0008249282836914062, 0.0252685546875], "tokens": [264, 442, 310, 32, 25657, 2931, 473]}
{"line_number": 545, "line_type": "generated", "code": "\n  }\n\n  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an if.\n   */\n  private boolean isIfBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {", "entropy": 0.10504150390625, "is_bug_line": false, "sus_score": 0.22941573387056174, "per_token_entropy": [0.08251953125, 0.0012121200561523438, 0.188232421875, 0.1337890625, 0.020538330078125, 0.0002720355987548828, 0.399658203125, 0.0305633544921875, 0.0552978515625, 0.050628662109375, 0.1168212890625, 0.031280517578125, 0.136962890625, 0.230224609375, 0.0738525390625, 0.0260772705078125, 0.0130462646484375, 0.025909423828125, 0.050994873046875, 0.061248779296875, 0.0330810546875, 6.99758529663086e-05, 0.026153564453125, 0.99658203125, 1.482421875, 0.8251953125, 0.0158538818359375, 0.0027675628662109375, 0.0026760101318359375, 0.0077362060546875, 0.0023136138916015625, 0.002208709716796875, 0.06427001953125, 0.1468505859375, 0.0033321380615234375, 0.00017058849334716797, 0.002582550048828125, 0.0019474029541015625, 0.0004208087921142578, 0.00655364990234375, 0.06573486328125, 0.0022602081298828125, 0.00832366943359375, 0.0001226663589477539, 0.0005850791931152344, 1.1324882507324219e-05, 0.0205535888671875, 3.337860107421875e-05, 2.1696090698242188e-05, 0.0001074075698852539, 0.01058197021484375, 0.0001232624053955078], "tokens": [334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438, 664, 319, 262, 600, 415, 32, 664, 569, 334, 945, 1905, 438, 2797, 2227, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 10272, 346, 610, 6512, 32, 10322, 27, 301]}
{"line_number": 713, "line_type": "original", "code": "        Node left = n.getFirstChild();", "entropy": 1.67578125, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [5.2265625, 3.0234375, 3.318359375, 0.315185546875, 1.9482421875, 0.0933837890625, 1.0009765625, 0.0004153251647949219, 0.1483154296875], "tokens": [351, 4004, 2841, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 713, "line_type": "generated", "code": "\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x? true : x  --> x\n        //   x? false : x --> x\n        //   x? x : true  --> x\n        //   x? x : false", "entropy": 0.22119140625, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [0.162109375, 0.438720703125, 0.6025390625, 0.08135986328125, 0.1141357421875, 0.00400543212890625, 0.11163330078125, 0.0687255859375, 0.15625, 0.57421875, 0.0010328292846679688, 0.01393890380859375, 0.0031681060791015625, 0.00318145751953125, 0.0828857421875, 0.5078125, 0.177490234375, 0.72607421875, 0.054718017578125, 0.66455078125, 1.994140625, 0.904296875, 0.0950927734375, 0.01352691650390625, 0.0009908676147460938, 0.00238037109375, 0.004306793212890625, 0.0005311965942382812, 1.1328125, 0.023193359375, 0.09613037109375, 0.25244140625, 0.0367431640625, 0.01422119140625, 0.15966796875, 0.07861328125, 0.07977294921875, 0.003833770751953125, 0.2105712890625, 0.0136566162109375, 1.43359375, 0.261474609375, 0.001617431640625, 0.08514404296875, 0.00412750244140625, 0.0079803466796875, 0.00450897216796875, 0.0008878707885742188, 0.0003528594970703125, 0.01482391357421875, 0.00324249267578125, 0.01555633544921875], "tokens": [291, 434, 6478, 38968, 3700, 3528, 291, 434, 7968, 12074, 6792, 44, 291, 434, 261, 816, 1018, 861, 499, 816, 225, 1101, 816, 291, 434, 261, 816, 1018, 901, 499, 816, 1101, 816, 291, 434, 261, 816, 1018, 816, 499, 861, 225, 1101, 816, 291, 434, 261, 816, 1018, 816, 499, 901]}
{"line_number": 714, "line_type": "original", "code": "        Node right = n.getLastChild();", "entropy": 2.095703125, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [6.59375, 3.8671875, 5.9375, 1.3525390625, 0.81689453125, 0.007366180419921875, 0.22607421875, 0.0026912689208984375, 0.060943603515625], "tokens": [351, 4004, 2091, 280, 310, 32, 20197, 2931, 473]}
{"line_number": 714, "line_type": "generated", "code": "\n\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x? true : x --> x\n        //   x? false : x  --> x\n        //   x? x : y --> x\n        //   x? y : x -->", "entropy": 0.21484375, "is_bug_line": false, "sus_score": 0.2182178902359924, "per_token_entropy": [0.5947265625, 0.397216796875, 0.86962890625, 0.040618896484375, 0.08819580078125, 0.0020580291748046875, 0.1207275390625, 0.135498046875, 0.2325439453125, 0.34033203125, 0.0008788108825683594, 0.006992340087890625, 0.0386962890625, 0.005645751953125, 0.056243896484375, 0.384521484375, 0.435302734375, 0.794921875, 0.050384521484375, 0.6982421875, 0.70458984375, 0.0168609619140625, 0.01178741455078125, 0.003505706787109375, 0.0022029876708984375, 0.00439453125, 0.0010251998901367188, 0.873046875, 0.0278778076171875, 0.06536865234375, 1.138671875, 0.024932861328125, 0.0692138671875, 0.0137939453125, 0.2183837890625, 0.06280517578125, 0.1011962890625, 0.0041046142578125, 0.1563720703125, 0.009490966796875, 1.158203125, 0.389892578125, 0.06488037109375, 0.0270843505859375, 0.2166748046875, 0.032501220703125, 0.0157318115234375, 0.0014104843139648438, 0.07415771484375, 0.004283905029296875, 0.0465087890625, 0.336669921875], "tokens": [584, 434, 6478, 38968, 3700, 3528, 291, 434, 7968, 12074, 6792, 44, 291, 434, 261, 816, 1018, 861, 499, 816, 1101, 816, 291, 434, 261, 816, 1018, 901, 499, 816, 225, 1101, 816, 291, 434, 261, 816, 1018, 816, 499, 533, 1101, 816, 291, 434, 261, 816, 1018, 533, 499, 816, 1101]}
