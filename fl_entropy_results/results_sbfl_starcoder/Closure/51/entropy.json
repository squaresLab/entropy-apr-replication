{"line_number": 124, "line_type": "original", "code": "    add(\",\");", "entropy": 7.46875, "is_bug_line": false, "sus_score": 0.04656201971797188, "per_token_entropy": [5.6640625, 7.11328125, 9.625], "tokens": [264, 1015, 35314]}
{"line_number": 124, "line_type": "generated", "code": "\n  void append(String str) {\n  }", "entropy": 0.5537109375, "is_bug_line": false, "sus_score": 0.04656201971797188, "per_token_entropy": [0.7822265625, 0.5341796875, 1.421875, 1.21484375, 0.496826171875, 0.33544921875, 0.053070068359375, 0.028167724609375, 0.6650390625, 0.0034465789794921875], "tokens": [334, 763, 5489, 26, 652, 596, 27, 301, 334, 320]}
{"line_number": 125, "line_type": "original", "code": "    maybeLineBreak();", "entropy": 1.4365234375, "is_bug_line": false, "sus_score": 0.04656201971797188, "per_token_entropy": [4.65625, 2.240234375, 0.28369140625, 0.0001068115234375, 0.002422332763671875], "tokens": [264, 8762, 1811, 10438, 473]}
{"line_number": 125, "line_type": "generated", "code": "\n  }\n\n  void endCaseBody() {\n    append(\"break;\");\n    maybeLineBreak();\n    endLine();\n  }\n\n  void beginSwitchCaseBody() {\n    appendBlockStart();\n    maybeLineBreak();\n  }\n\n  void endSwitchCaseBody()", "entropy": 0.320556640625, "is_bug_line": false, "sus_score": 0.04656201971797188, "per_token_entropy": [0.38916015625, 0.0006546974182128906, 0.08697509765625, 0.22802734375, 0.71240234375, 0.079833984375, 0.168212890625, 0.038055419921875, 0.0083465576171875, 0.70947265625, 1.798828125, 0.57421875, 0.296875, 0.205322265625, 0.2078857421875, 0.77783203125, 0.0443115234375, 2.09808349609375e-05, 0.0005774497985839844, 0.385498046875, 0.220703125, 0.46142578125, 0.005023956298828125, 0.17822265625, 0.0005474090576171875, 0.15771484375, 0.26708984375, 1.15625, 1.0400390625, 0.76904296875, 0.2371826171875, 0.130859375, 0.004253387451171875, 0.61328125, 1.0380859375, 1.13671875, 0.0273284912109375, 0.00101470947265625, 0.44189453125, 1.1416015625, 0.029754638671875, 0.00020551681518554688, 0.0003676414489746094, 0.68994140625, 0.00022971630096435547, 0.02069091796875, 0.031768798828125, 0.06298828125, 0.01059722900390625, 0.0031566619873046875, 0.0064544677734375, 0.0794677734375], "tokens": [334, 320, 719, 763, 943, 2732, 3050, 346, 301, 284, 5489, 440, 2969, 26327, 284, 8762, 1811, 10438, 473, 284, 943, 1811, 473, 334, 320, 719, 763, 4240, 7934, 2732, 3050, 346, 301, 284, 5489, 2227, 2130, 473, 284, 8762, 1811, 10438, 473, 334, 320, 719, 763, 943, 7934, 2732, 3050, 346]}
{"line_number": 126, "line_type": "original", "code": "  }", "entropy": 1.251953125, "is_bug_line": false, "sus_score": 0.04656201971797188, "per_token_entropy": [2.37890625, 0.12420654296875], "tokens": [225, 320]}
{"line_number": 126, "line_type": "generated", "code": "\n  }\n\n  void beginSwitchCaseBody() {\n    append(\":\");\n    maybeLineBreak();\n  }\n\n  void beginBlockComment() {\n    append(\"/*\");\n    maybeLineBreak();\n  }\n\n  void endBlockComment() {\n    append(\"*/\");", "entropy": 0.32373046875, "is_bug_line": false, "sus_score": 0.04656201971797188, "per_token_entropy": [1.125, 0.0751953125, 0.126220703125, 0.266357421875, 1.0283203125, 1.2431640625, 0.771484375, 0.2164306640625, 0.127685546875, 0.00402069091796875, 0.0968017578125, 0.42431640625, 0.1961669921875, 0.047271728515625, 1.5498046875, 0.398193359375, 0.021484375, 9.357929229736328e-05, 0.0034198760986328125, 0.501953125, 0.0009136199951171875, 0.12152099609375, 0.184814453125, 0.98486328125, 2.3671875, 0.5390625, 0.75390625, 0.0080718994140625, 0.1585693359375, 0.4853515625, 0.0469970703125, 0.03216552734375, 0.07037353515625, 1.4765625, 0.68701171875, 0.02618408203125, 0.0001671314239501953, 0.0009756088256835938, 0.11492919921875, 0.00033974647521972656, 0.0216217041015625, 0.0312347412109375, 0.08392333984375, 0.0268707275390625, 0.00010120868682861328, 0.0034465789794921875, 0.0004284381866455078, 0.00885009765625, 0.332275390625, 0.01184844970703125, 0.0220947265625, 0.0019702911376953125], "tokens": [334, 320, 719, 763, 4240, 7934, 2732, 3050, 346, 301, 284, 5489, 17919, 724, 284, 8762, 1811, 10438, 473, 334, 320, 719, 763, 4240, 2227, 6315, 346, 301, 284, 5489, 440, 1109, 724, 284, 8762, 1811, 10438, 473, 334, 320, 719, 763, 943, 2227, 6315, 346, 301, 284, 5489, 440, 1958, 724]}
{"line_number": 242, "line_type": "original", "code": "      long value = (long) x;", "entropy": 1.7919921875, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [8.46875, 4.08203125, 0.2381591796875, 0.91845703125, 1.9765625, 0.07855224609375, 0.01169586181640625, 0.34033203125, 0.01558685302734375], "tokens": [647, 1946, 786, 280, 308, 3222, 27, 816, 45]}
{"line_number": 242, "line_type": "generated", "code": "\n  /**\n   * @return Whether the specified node should be wrapped in a block when\n   * pretty printing.\n   */\n  boolean shouldWrap(Node n) {\n    if (n.isClass()) {\n      return true;\n    } else if (n", "entropy": 0.6728515625, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [0.6630859375, 1.427734375, 0.5400390625, 0.0030078887939453125, 1.77734375, 0.3134765625, 0.75927734375, 0.92041015625, 2.38671875, 0.73779296875, 2.22265625, 0.46630859375, 1.630859375, 0.2178955078125, 0.8095703125, 0.5166015625, 2.4296875, 0.382080078125, 0.00998687744140625, 2.119140625, 0.9423828125, 0.1859130859375, 0.2147216796875, 0.03875732421875, 0.00971221923828125, 0.1903076171875, 0.431396484375, 1.5625, 0.77294921875, 0.0182647705078125, 0.038970947265625, 0.2001953125, 0.0017986297607421875, 0.03582763671875, 2.0625, 0.1527099609375, 0.28857421875, 0.231689453125, 0.65185546875, 3.14453125, 0.251953125, 0.05267333984375, 0.026397705078125, 0.70458984375, 0.67138671875, 0.00020754337310791016, 0.0278167724609375, 8.571147918701172e-05, 1.53125, 0.0916748046875, 0.0230560302734375, 0.10986328125], "tokens": [334, 1022, 664, 319, 477, 601, 14071, 322, 3191, 1541, 1395, 526, 16283, 328, 312, 2163, 1412, 664, 319, 10191, 23582, 32, 664, 569, 334, 1905, 1395, 10001, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 297, 1339, 1157, 301, 397, 442, 861, 45, 284, 320, 813, 415, 308, 96]}
{"line_number": 243, "line_type": "original", "code": "      long mantissa = value;", "entropy": 2.052734375, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [8.8671875, 3.673828125, 0.0212249755859375, 3.170967102050781e-05, -0.0, 0.12841796875, 3.53125, 0.197509765625], "tokens": [647, 1946, 345, 29913, 2496, 280, 786, 45]}
{"line_number": 243, "line_type": "generated", "code": "\n  /**\n   * Called when we're at the end of a block.\n   *\n   * @param n The node that ends the block.\n   */\n  void endBlock(Node n) {}\n\n  /**\n   * Called when we're at the end of", "entropy": 0.392822265625, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [0.57421875, 1.423828125, 0.505859375, 0.00287628173828125, 2.205078125, 0.450927734375, 0.24951171875, 0.325927734375, 0.58349609375, 0.03375244140625, 0.63818359375, 0.007175445556640625, 0.111083984375, 1.634765625, 0.6552734375, 0.46875, 0.498291015625, 0.638671875, 0.040008544921875, 0.181884765625, 0.055572509765625, 0.346435546875, 0.60205078125, 0.55859375, 1.34375, 1.68359375, 0.1998291015625, 0.062255859375, 0.33544921875, 0.106201171875, 0.85302734375, 0.008026123046875, 0.046417236328125, 0.0116424560546875, 0.0126953125, 0.011810302734375, 0.026641845703125, 0.0045318603515625, 0.066162109375, 0.94482421875, 0.22265625, 0.273193359375, 0.26220703125, 0.0002472400665283203, 0.48486328125, 0.156494140625, 0.0654296875, 0.057830810546875, 0.11834716796875, 0.0095672607421875, 0.26513671875, 0.003692626953125], "tokens": [334, 1022, 664, 319, 18055, 1412, 996, 4484, 821, 322, 943, 432, 312, 2163, 32, 664, 319, 664, 319, 477, 753, 310, 886, 1541, 688, 15564, 322, 2163, 32, 664, 569, 334, 763, 943, 2227, 26, 1212, 310, 27, 2149, 719, 1022, 664, 319, 18055, 1412, 996, 4484, 821, 322, 943, 432]}
{"line_number": 244, "line_type": "original", "code": "      int exp = 0;", "entropy": 1.8095703125, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [8.8671875, 3.1953125, 0.4443359375, 0.114501953125, 0.01085662841796875, 0.01425933837890625, 0.0142669677734375], "tokens": [647, 629, 2910, 280, 225, 34, 45]}
{"line_number": 244, "line_type": "generated", "code": "\n  void add(String s) {\n    maybeCutLine();\n    out.append(s);\n  }\n\n  /**\n   * @return {@code true} if the last character output to {@link #out} is a\n   *     whitespace character.\n  ", "entropy": 0.5888671875, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [0.57080078125, 1.1484375, 1.2734375, 1.4580078125, 0.358642578125, 0.354248046875, 0.016082763671875, 0.0285797119140625, 0.10821533203125, 1.9697265625, 0.51611328125, 0.0026721954345703125, 0.005847930908203125, 0.2166748046875, 1.8974609375, 0.125, 0.1402587890625, 0.00214385986328125, 0.009735107421875, 0.007144927978515625, 0.1864013671875, 0.0006885528564453125, 0.151123046875, 1.1728515625, 0.466796875, 0.0011730194091796875, 1.9443359375, 0.19921875, 2.498046875, 0.0284881591796875, 0.1302490234375, 0.005481719970703125, 0.1436767578125, 1.1298828125, 1.5537109375, 0.623046875, 2.162109375, 1.130859375, 0.9169921875, 0.469970703125, 0.08587646484375, 0.042022705078125, 0.015167236328125, 1.615234375, 0.59130859375, 0.77197265625, 0.004497528076171875, 1.1328125, 0.6015625, 0.2880859375, 0.28955078125, 0.056976318359375], "tokens": [334, 763, 1015, 26, 652, 309, 27, 301, 284, 8762, 18024, 1811, 473, 284, 963, 32, 1689, 26, 101, 293, 334, 320, 719, 1022, 664, 319, 477, 601, 3088, 687, 861, 111, 415, 322, 2401, 5341, 1688, 372, 3088, 1204, 588, 541, 111, 438, 312, 664, 319, 262, 19782, 5341, 32, 664]}
{"line_number": 245, "line_type": "original", "code": "      if (Math.abs(x) >= 100) {", "entropy": 1.5068359375, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [8.0234375, 2.912109375, 0.18896484375, 5.375, 0.0113067626953125, 0.6650390625, 0.0186004638671875, 0.8173828125, 0.0732421875, 2.48046875, 0.11541748046875, 0.1302490234375, 1.0146484375, 0.47412109375, 1.7548828125, 0.054901123046875], "tokens": [647, 415, 308, 5717, 32, 3596, 26, 106, 27, 2377, 225, 35, 34, 34, 27, 301]}
{"line_number": 245, "line_type": "generated", "code": "\n  void maybeCutLine() {\n    int limit = getColumn();\n    if (limit == 0) {\n      return;\n    }\n\n    // We're going to add a line break. We'll try to break at the first\n    // whitespace character we", "entropy": 0.87548828125, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [0.65234375, 1.19921875, 1.294921875, 1.11328125, 0.01312255859375, 0.0169677734375, 0.00872802734375, 0.039031982421875, 1.7666015625, 2.857421875, 0.03741455078125, 1.7216796875, 1.1953125, 1.474609375, 0.4501953125, 0.486572265625, 0.0372314453125, 0.12298583984375, 1.6787109375, 0.11517333984375, 0.00521087646484375, 0.08380126953125, 0.1556396484375, 0.06585693359375, 0.6611328125, 0.0019969940185546875, 0.034088134765625, 0.00016617774963378906, 0.32568359375, 1.556640625, 2.814453125, 2.08203125, 1.0693359375, 0.01447296142578125, 2.8984375, 0.646484375, 2.060546875, 0.1763916015625, 0.79248046875, 3.236328125, 2.673828125, 2.076171875, 0.0936279296875, 1.19921875, 0.623046875, 0.379150390625, 1.150390625, 0.2042236328125, 0.00423431396484375, 0.56982421875, 0.5341796875, 1.06640625], "tokens": [334, 763, 8762, 18024, 1811, 346, 301, 284, 629, 2723, 280, 622, 2137, 473, 284, 415, 308, 3248, 610, 225, 34, 27, 301, 397, 442, 45, 284, 320, 446, 434, 2688, 4484, 6783, 372, 1015, 312, 1628, 1626, 32, 2688, 4621, 1596, 372, 1626, 821, 322, 1932, 284, 434, 19782, 5341, 996]}
{"line_number": 251, "line_type": "original", "code": "      if (exp > 2) {", "entropy": 2.921875, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [7.68359375, 2.90234375, 0.1773681640625, 8.6875, 2.111328125, 0.2705078125, 2.869140625, 1.5205078125, 0.07611083984375], "tokens": [647, 415, 308, 2832, 848, 225, 36, 27, 301]}
{"line_number": 251, "line_type": "generated", "code": "\n  void maybeCutLine() {\n    if (pos_ + lineLength_ >= maxLineLength_) {\n      if (pos_ == 0) {\n        // This is the only thing on the line, so we need to break it.\n        add", "entropy": 0.7666015625, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [0.677734375, 1.0673828125, 1.626953125, 1.2685546875, 0.01502227783203125, 0.020263671875, 0.02008056640625, 0.05169677734375, 0.71435546875, 0.1629638671875, 2.712890625, 1.4599609375, 1.5224609375, 1.541015625, 1.1494140625, 0.1519775390625, 0.802734375, 1.939453125, 0.183349609375, 0.419921875, 0.513671875, 0.022247314453125, 0.021392822265625, 2.630859375, 0.259033203125, 1.091796875, 0.0032253265380859375, 1.3623046875, 0.09454345703125, 0.006855010986328125, 0.1407470703125, 0.0189208984375, 0.0247039794921875, 0.7216796875, 1.849609375, 0.6640625, 1.1240234375, 0.9912109375, 0.9853515625, 0.01104736328125, 0.40380859375, 0.044281005859375, 1.466796875, 0.422607421875, 1.0751953125, 1.8857421875, 0.08526611328125, 1.689453125, 0.451904296875, 0.5009765625, 0.034271240234375, 1.7734375], "tokens": [334, 763, 8762, 18024, 1811, 346, 301, 284, 415, 308, 966, 81, 474, 1628, 2380, 81, 2377, 1769, 1811, 2380, 7912, 301, 397, 415, 308, 966, 81, 610, 225, 34, 27, 301, 291, 434, 1348, 438, 322, 1755, 7913, 544, 322, 1628, 30, 1259, 996, 1849, 372, 1626, 561, 32, 291, 1015]}
{"line_number": 254, "line_type": "original", "code": "        add(Long.toString(value));", "entropy": 1.7568359375, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [8.40625, 2.56640625, 0.35546875, 3.685546875, 0.0010004043579101562, 0.007099151611328125, 0.00518035888671875, 0.73291015625, 0.050079345703125], "tokens": [351, 1015, 26, 3952, 32, 3108, 26, 853, 876]}
{"line_number": 254, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [], "tokens": []}
{"line_number": 256, "line_type": "original", "code": "    } else {", "entropy": 4.66796875, "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [6.640625, 4.12890625, 7.6171875, 0.279541015625], "tokens": [264, 320, 813, 301]}
{"line_number": 256, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.04349196560146415, "per_token_entropy": [], "tokens": []}
{"line_number": 236, "line_type": "original", "code": "    char prev = getLastChar();", "entropy": 2.990234375, "is_bug_line": false, "sus_score": 0.043478260869565216, "per_token_entropy": [6.5859375, 9.296875, 2.88671875, 1.265625, 0.8720703125, 0.00736236572265625, 0.020538330078125], "tokens": [264, 1351, 7323, 280, 36695, 2659, 473]}
{"line_number": 236, "line_type": "generated", "code": "\n  boolean isLineBreakAfter(Node n) {\n    return n.getType() == Token.BLOCK;\n  }\n\n  /**\n   * @return Whether the a line break can be added after the specified token.\n   */\n  boolean isLineBreakAfter(", "entropy": 0.357666015625, "is_bug_line": false, "sus_score": 0.043478260869565216, "per_token_entropy": [0.09381103515625, 0.295654296875, 1.75, 1.224609375, 0.130859375, 0.625, 0.8544921875, 1.396484375, 0.27734375, 0.05242919921875, 0.00266265869140625, 0.07806396484375, 1.0888671875, 2.1640625, 0.135498046875, 0.64453125, 0.0193939208984375, 0.257080078125, 0.01457977294921875, 0.04364013671875, 0.10040283203125, 0.32958984375, 0.032196044921875, 0.001262664794921875, 0.27783203125, 0.46923828125, 0.036773681640625, 0.0019989013671875, 0.56689453125, 0.043304443359375, 0.173828125, 0.2161865234375, 0.1998291015625, 0.0137481689453125, 0.00873565673828125, 0.066650390625, 0.005153656005859375, 0.027313232421875, 1.5302734375, 0.1044921875, 0.06475830078125, 2.498046875, 0.09564208984375, 0.0021266937255859375, 0.023284912109375, 0.354736328125, 0.07830810546875, 0.0086669921875, 0.0083465576171875, 0.0007281303405761719, 0.066650390625, 0.040191650390625], "tokens": [334, 1905, 438, 1811, 10438, 5125, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 10322, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 312, 1628, 1626, 883, 526, 3640, 2685, 322, 3191, 2404, 32, 664, 569, 334, 1905, 438, 1811, 10438, 5125, 26]}
{"line_number": 237, "line_type": "original", "code": "    if (x < 0 && prev == '-') {", "entropy": 2.619140625, "is_bug_line": false, "sus_score": 0.043478260869565216, "per_token_entropy": [3.53515625, 2.662109375, 0.1783447265625, 8.6875, 2.91015625, 0.284912109375, 1.046875, 2.40625, 7.23828125, 0.87939453125, 1.548828125, 0.05328369140625], "tokens": [264, 415, 308, 106, 333, 225, 34, 962, 7323, 610, 40317, 301]}
{"line_number": 237, "line_type": "generated", "code": "\n    return true;\n  }\n\n  void addBlock(Node n, boolean statementContext) {\n    // TODO: we could try to preserve extra blocks here, but it's not\n    // clear it's a good idea.\n    // if (shouldPreserveExtra", "entropy": 0.9365234375, "is_bug_line": false, "sus_score": 0.043478260869565216, "per_token_entropy": [0.3896484375, 0.313720703125, 0.98095703125, 0.0018167495727539062, 0.0283203125, 0.0016260147094726562, 0.1510009765625, 1.71484375, 1.08984375, 2.109375, 0.086181640625, 0.48388671875, 0.1778564453125, 0.1319580078125, 0.2247314453125, 1.033203125, 0.017578125, 0.161376953125, 0.0087738037109375, 0.1551513671875, 2.556640625, 3.091796875, 1.3759765625, 3.580078125, 1.4970703125, 2.775390625, 0.273681640625, 2.626953125, 1.46875, 0.24560546875, 2.380859375, 1.41796875, 0.533203125, 1.3974609375, 1.037109375, 1.59765625, 0.9306640625, 0.032440185546875, 1.296875, 1.53515625, 0.5888671875, 1.55859375, 0.28076171875, 0.01434326171875, 0.33544921875, 0.62158203125, 2.2890625, 1.759765625, 0.218994140625, 0.10003662109375, 0.007171630859375, 0.0006837844848632812], "tokens": [284, 442, 861, 45, 334, 320, 719, 763, 1015, 2227, 26, 1212, 310, 30, 1905, 7603, 1222, 27, 301, 284, 434, 4296, 44, 996, 3065, 1596, 372, 24070, 6717, 9058, 2442, 30, 1273, 561, 1182, 646, 284, 434, 4233, 561, 1182, 312, 4644, 8749, 32, 284, 434, 415, 308, 3163, 46800, 9113]}
{"line_number": 241, "line_type": "original", "code": "    if ((long) x == x) {", "entropy": 3.46484375, "is_bug_line": true, "sus_score": 0.043478260869565216, "per_token_entropy": [6.03515625, 7.03125, 4.98828125, 9.0703125, 0.1595458984375, 1.7822265625, 1.9228515625, 3.265625, 0.314697265625, 0.0745849609375], "tokens": [264, 415, 1833, 3222, 27, 816, 610, 816, 27, 301]}
{"line_number": 241, "line_type": "generated", "code": "\n  void finishFile() {\n    maybeEndStatement();\n  }\n\n  /**\n   * Called when we're at the end of a function.\n   * @param n The function node.\n   */\n  void finishFunction(Node n) {\n    maybeEndStatement", "entropy": 0.38720703125, "is_bug_line": true, "sus_score": 0.043478260869565216, "per_token_entropy": [0.1915283203125, 0.1456298828125, 0.6865234375, 0.083740234375, 0.0198211669921875, 0.1865234375, 0.66357421875, 0.89501953125, 0.2249755859375, 0.014495849609375, 0.03424072265625, 0.69775390625, 0.0010538101196289062, 0.495361328125, 0.6630859375, 0.493896484375, 0.0012845993041992188, 2.384765625, 0.52880859375, 0.19921875, 0.271484375, 0.50146484375, 0.04229736328125, 0.331787109375, 0.00995635986328125, 0.12286376953125, 2.42578125, 0.9580078125, 0.356689453125, 0.49853515625, 1.1435546875, 0.074462890625, 0.541015625, 0.8681640625, 0.8671875, 0.376953125, 0.646484375, 0.01922607421875, 0.1331787109375, 0.046844482421875, 0.03936767578125, 0.15380859375, 0.0017757415771484375, 0.009735107421875, 0.064208984375, 0.007038116455078125, 0.04669189453125, 0.07568359375, 0.2186279296875, 0.5849609375, 0.081787109375, 0.004459381103515625], "tokens": [334, 763, 11361, 974, 346, 301, 284, 8762, 2102, 5495, 473, 334, 320, 719, 1022, 664, 319, 18055, 1412, 996, 4484, 821, 322, 943, 432, 312, 667, 32, 664, 319, 477, 753, 310, 886, 667, 1541, 32, 664, 569, 334, 763, 11361, 2447, 26, 1212, 310, 27, 301, 284, 8762, 2102, 5495]}
{"line_number": 259, "line_type": "original", "code": "  }", "entropy": 3.09375, "is_bug_line": false, "sus_score": 0.043478260869565216, "per_token_entropy": [3.39453125, 2.791015625], "tokens": [225, 320]}
{"line_number": 259, "line_type": "generated", "code": "\n  /**\n   * Called when we're at the end of a statement.\n   *\n   * @param n The node for which {@code n} is the end of a statement.\n   */\n  void endStatement(Node n) {}\n\n  /**\n   *", "entropy": 0.5751953125, "is_bug_line": false, "sus_score": 0.043478260869565216, "per_token_entropy": [1.7216796875, 1.3154296875, 0.513671875, 0.0030879974365234375, 2.36328125, 0.466552734375, 0.234619140625, 0.313720703125, 0.5390625, 0.03424072265625, 0.65576171875, 0.0071868896484375, 0.10760498046875, 1.0048828125, 0.26953125, 0.6826171875, 0.84375, 0.92919921875, 0.0733642578125, 0.8173828125, 0.10986328125, 1.2392578125, 0.72021484375, 0.83447265625, 2.49609375, 0.95458984375, 2.46875, 0.3720703125, 0.368408203125, 0.88623046875, 0.33935546875, 0.4228515625, 2.0546875, 0.386962890625, 0.64990234375, 0.01983642578125, 0.2232666015625, 0.08355712890625, 0.3583984375, 0.0132598876953125, 0.06365966796875, 0.045257568359375, 0.0016689300537109375, 0.0161895751953125, 0.0130615234375, 0.00557708740234375, 0.0273895263671875, 0.79248046875, 0.416015625, 0.351318359375, 0.267578125, 0.00022530555725097656], "tokens": [334, 1022, 664, 319, 18055, 1412, 996, 4484, 821, 322, 943, 432, 312, 7603, 32, 664, 319, 664, 319, 477, 753, 310, 886, 1541, 436, 1510, 3088, 687, 310, 111, 438, 322, 943, 432, 312, 7603, 32, 664, 569, 334, 763, 943, 5495, 26, 1212, 310, 27, 2149, 719, 1022, 664, 319]}
{"line_number": 185, "line_type": "original", "code": "      return;", "entropy": 4.3828125, "is_bug_line": false, "sus_score": 0.03832008326196737, "per_token_entropy": [4.70703125, 7.51953125, 0.92529296875], "tokens": [647, 442, 45]}
{"line_number": 185, "line_type": "generated", "code": "\n  }\n\n  void addString(String s) {\n    maybeEndStatement();\n\n    if (s.indexOf(\"\\\\\") >= 0) {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"\\\"foo\\\"\"\n     ", "entropy": 0.390869140625, "is_bug_line": false, "sus_score": 0.03832008326196737, "per_token_entropy": [0.87890625, 0.005405426025390625, 0.053314208984375, 0.405517578125, 0.320068359375, 0.368896484375, 0.03912353515625, 0.0200653076171875, 0.20849609375, 0.0699462890625, 0.0029621124267578125, 0.14404296875, 0.86669921875, 0.03265380859375, 0.0005512237548828125, 0.0008254051208496094, 0.75439453125, 1.9306640625, 0.1591796875, 0.73828125, 0.10601806640625, 1.6708984375, 0.9658203125, 0.34765625, 1.091796875, 0.0012998580932617188, 6.222724914550781e-05, 0.292236328125, 0.005992889404296875, 0.056884765625, 0.72705078125, 2.74609375, 0.043182373046875, 0.1629638671875, 0.06378173828125, 0.01427459716796875, 0.10504150390625, 0.63232421875, 0.0260009765625, 0.11328125, 0.08154296875, 0.1905517578125, 0.0142822265625, 0.044189453125, 0.66796875, 0.004302978515625, 1.244140625, 0.006664276123046875, 0.68505859375, 0.45849609375, 0.16845703125, 0.58349609375], "tokens": [334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 8762, 2102, 5495, 473, 446, 415, 308, 101, 32, 7142, 22899, 657, 2377, 225, 34, 27, 301, 397, 434, 1348, 438, 646, 10191, 23582, 32, 1348, 438, 372, 9454, 3980, 26801, 432, 397, 434, 6366, 2124, 12378, 3986, 21328, 397]}
{"line_number": 229, "line_type": "original", "code": "      maybeCutLine();", "entropy": 6.1953125, "is_bug_line": false, "sus_score": 0.03423934786989504, "per_token_entropy": [6.17578125, 6.3359375, 11.78125, 5.5703125, 1.109375], "tokens": [647, 8762, 18024, 1811, 473]}
{"line_number": 229, "line_type": "generated", "code": "\n  boolean shouldWrap() {\n    return true;\n  }\n\n  /**\n   * If the body of a for loop or the then clause of an if statement has\n   * a single statement, should it be wrapped in a block?  Doing so can\n  ", "entropy": 0.240478515625, "is_bug_line": false, "sus_score": 0.03423934786989504, "per_token_entropy": [0.9306640625, 0.6630859375, 0.67236328125, 0.84912109375, 1.2646484375, 0.003719329833984375, 0.1981201171875, 0.40625, 1.0234375, 0.004062652587890625, 0.02459716796875, 0.0013408660888671875, 0.253173828125, 0.9580078125, 0.06072998046875, 0.0011243820190429688, 1.83984375, 0.447021484375, 0.35595703125, 0.02294921875, 0.08740234375, 0.39697265625, 0.028045654296875, 0.11700439453125, 0.06439208984375, 0.011474609375, 0.021942138671875, 0.004169464111328125, 0.00501251220703125, 0.0013475418090820312, 0.0223541259765625, 0.20654296875, 0.041961669921875, 1.9669532775878906e-05, 0.10784912109375, 0.0279693603515625, 0.0225372314453125, 0.06695556640625, 0.39111328125, 0.154296875, 0.089599609375, 0.128662109375, 0.008575439453125, 0.11907958984375, 0.025604248046875, 0.16650390625, 0.1473388671875, 0.041717529296875, 0.00025463104248046875, 0.0002009868621826172, 0.0112152099609375, 0.00860595703125], "tokens": [334, 1905, 1395, 10001, 346, 301, 284, 442, 861, 45, 334, 320, 719, 1022, 664, 319, 1670, 322, 3361, 432, 312, 436, 5258, 556, 322, 1615, 15300, 432, 600, 415, 7603, 1401, 664, 319, 312, 3982, 7603, 30, 1395, 561, 526, 16283, 328, 312, 2163, 49, 225, 3278, 299, 1259, 883, 664]}
{"line_number": 200, "line_type": "original", "code": "    append(op);", "entropy": 4.5234375, "is_bug_line": false, "sus_score": 0.034205946878753044, "per_token_entropy": [4.390625, 4.78515625, 0.3486328125, 11.609375, 1.4794921875], "tokens": [264, 5489, 26, 520, 293]}
{"line_number": 200, "line_type": "generated", "code": "\n      } else {", "entropy": 0.3046875, "is_bug_line": false, "sus_score": 0.034205946878753044, "per_token_entropy": [0.51123046875, 0.01320648193359375, 0.5791015625, 0.1148681640625], "tokens": [397, 320, 813, 301]}
{"line_number": 201, "line_type": "original", "code": "  }", "entropy": 2.296875, "is_bug_line": false, "sus_score": 0.034205946878753044, "per_token_entropy": [4.00390625, 0.591796875], "tokens": [225, 320]}
{"line_number": 201, "line_type": "generated", "code": "\n    } else {\n      double mantissa = x;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (Math.abs(mantissa) / 10 * Math", "entropy": 0.224365234375, "is_bug_line": false, "sus_score": 0.034205946878753044, "per_token_entropy": [0.849609375, 0.00760650634765625, 0.08209228515625, 0.08416748046875, 0.372802734375, 2.421875, 1.5458984375, 0.096435546875, 5.0187110900878906e-05, 0.109619140625, 1.0400390625, 0.06365966796875, 0.040130615234375, 0.15087890625, 0.03912353515625, 0.003726959228515625, 0.008026123046875, 0.005931854248046875, 0.00043511390686035156, 0.07373046875, 0.374267578125, 0.003753662109375, 0.0166778564453125, 0.0005631446838378906, 0.00830078125, 0.00028443336486816406, 0.038787841796875, 0.0009484291076660156, 0.031402587890625, 0.00409698486328125, 0.024322509765625, 0.035369873046875, 0.08197021484375, 0.054718017578125, 0.0022125244140625, 0.00653076171875, 0.047393798828125, 0.032867431640625, 0.5400390625, 0.0003883838653564453, 0.6494140625, 0.0243072509765625, 0.21337890625, 3.5762786865234375e-07, 1.430511474609375e-06, 0.54443359375, 1.6650390625, 0.1361083984375, 0.00046825408935546875, 0.0006318092346191406, 0.061248779296875, 0.06976318359375], "tokens": [284, 320, 813, 301, 397, 2064, 345, 29913, 2496, 280, 816, 45, 397, 629, 2910, 280, 225, 34, 45, 397, 415, 308, 5717, 32, 3596, 26, 106, 27, 2377, 225, 35, 34, 34, 27, 301, 291, 2218, 308, 5717, 32, 3596, 26, 95, 29913, 2496, 27, 517, 225, 35, 34, 319, 4175]}
{"line_number": 217, "line_type": "original", "code": "    } else if (prev == '-' && first == '>') {", "entropy": 2.17578125, "is_bug_line": false, "sus_score": 0.033974845276783495, "per_token_entropy": [3.240234375, 9.5859375, 2.537109375, 0.3935546875, 0.1302490234375, 6.671875, 0.284912109375, 3.51953125, 0.1529541015625, 2.5, 0.03399658203125, 1.24609375, 0.16064453125, 0.01309967041015625], "tokens": [264, 320, 813, 415, 308, 5586, 610, 20514, 962, 1932, 610, 330, 22639, 301]}
{"line_number": 217, "line_type": "generated", "code": "\n            Character.isLetter(ch) ||\n            Character.isDigit(ch));\n  }\n\n  void maybeEndStatement() {\n    if (getLastChar()!= ';') {\n      endStatement();\n    }\n  }\n\n  void endStatement() {\n    append", "entropy": 0.31982421875, "is_bug_line": false, "sus_score": 0.033974845276783495, "per_token_entropy": [1.6044921875, 0.36962890625, 0.00029158592224121094, 0.0007114410400390625, 0.09967041015625, 1.1171875, 0.0005617141723632812, 0.427978515625, 0.042510986328125, 0.40869140625, 0.04791259765625, 8.618831634521484e-05, 0.0042266845703125, 0.0015268325805664062, 0.00028705596923828125, 0.0001246929168701172, 0.1995849609375, 0.03033447265625, 0.0005440711975097656, 0.1600341796875, 1.17578125, 0.7412109375, 0.384521484375, 0.01053619384765625, 0.003681182861328125, 0.00072479248046875, 0.03466796875, 0.91748046875, 0.408447265625, 2.40234375, 0.0212554931640625, 0.0081787109375, 1.015625, 1.1025390625, 0.0003795623779296875, 0.028228759765625, 0.023223876953125, 1.05859375, 0.1578369140625, 0.059295654296875, 0.039276123046875, 0.00032210350036621094, 0.033233642578125, 0.0002467632293701172, 0.03436279296875, 0.351806640625, 0.9091796875, 0.0440673828125, 0.007781982421875, 0.00083160400390625, 0.035430908203125, 1.1015625], "tokens": [324, 15041, 32, 297, 17663, 26, 380, 27, 1276, 324, 15041, 32, 297, 21530, 26, 380, 876, 334, 320, 719, 763, 8762, 2102, 5495, 346, 301, 284, 415, 308, 20197, 2659, 346, 863, 13044, 683, 301, 397, 943, 5495, 473, 284, 320, 334, 320, 719, 763, 943, 5495, 346, 301, 284, 5489]}
{"line_number": 204, "line_type": "original", "code": "    maybeEndStatement();", "entropy": 3.091796875, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [4.640625, 7.1328125, 3.638671875, 0.0055999755859375, 0.0439453125], "tokens": [264, 8762, 2102, 5495, 473]}
{"line_number": 204, "line_type": "generated", "code": "\n        add(Long.toString(value));\n      }\n    } else {\n      add(Double.toString(x));\n    }\n  }\n\n  void addString(String s) {\n    add(\"\\\"\");\n    int length = s.length();\n    for (", "entropy": 0.2103271484375, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [1.0908203125, 0.284912109375, 0.01104736328125, 0.06597900390625, 7.581710815429688e-05, 0.0007295608520507812, 0.004791259765625, 0.125, 0.0372314453125, 0.056610107421875, 7.224082946777344e-05, 0.07427978515625, 3.4928321838378906e-05, 0.00482940673828125, 0.118408203125, 0.5322265625, 0.51318359375, 0.02044677734375, 0.04400634765625, 0.0012598037719726562, 0.0050201416015625, 0.0013036727905273438, 0.002559661865234375, 0.033782958984375, 0.031402587890625, 7.271766662597656e-05, 0.077392578125, 0.0001856088638305664, 0.0738525390625, 0.34375, 0.3115234375, 0.288330078125, 0.0211334228515625, 0.0239410400390625, 0.153564453125, 0.07366943359375, 0.0038356781005859375, 0.1820068359375, 1.4228515625, 0.87109375, 0.02734375, 0.314453125, 1.7099609375, 1.806640625, 0.0021724700927734375, 0.0026683807373046875, 0.00011837482452392578, 0.0005059242248535156, 0.0011577606201171875, 0.0791015625, 0.08624267578125, 0.0020809173583984375], "tokens": [291, 1015, 26, 3952, 32, 3108, 26, 853, 876, 397, 320, 284, 320, 813, 301, 397, 1015, 26, 4075, 32, 3108, 26, 106, 876, 284, 320, 334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 1015, 33744, 724, 284, 629, 3104, 280, 309, 32, 1322, 473, 284, 436, 308]}
{"line_number": 206, "line_type": "original", "code": "    char first = op.charAt(0);", "entropy": 2.322265625, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [4.4375, 6.6171875, 2.4765625, 0.2218017578125, 7.3984375, 1.966796875, 0.06597900390625, 0.0005340576171875, 0.020599365234375, 0.020904541015625], "tokens": [264, 1351, 1932, 280, 3089, 32, 15611, 26, 34, 293]}
{"line_number": 206, "line_type": "generated", "code": "\n    } else {\n      add(Double.toString(x));\n    }\n  }\n\n  void addString(String s) {\n    // This is not pretty printing. This is to prevent misparsing of\n    // \"foo\" + \"bar\" as \"", "entropy": 0.295166015625, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [0.138427734375, 0.005245208740234375, 0.00789642333984375, 0.193115234375, 0.05230712890625, 0.461181640625, 0.0269317626953125, 0.07159423828125, 0.002674102783203125, 0.006984710693359375, 0.00160980224609375, 0.0030918121337890625, 0.034271240234375, 0.2939453125, 0.0002884864807128906, 0.1534423828125, 0.0003581047058105469, 0.0965576171875, 0.338623046875, 0.281494140625, 0.288818359375, 0.03375244140625, 0.03509521484375, 0.198486328125, 0.09466552734375, 0.003448486328125, 0.079833984375, 1.748046875, 1.5, 0.06793212890625, 0.060333251953125, 0.00917816162109375, 0.008087158203125, 0.0732421875, 0.358154296875, 0.004924774169921875, 0.07733154296875, 0.0538330078125, 0.170166015625, 0.01161956787109375, 0.039764404296875, 0.54541015625, 0.0038623809814453125, 1.6484375, 1.8310546875, 1.1640625, 0.53662109375, 1.099609375, 0.1907958984375, 0.2457275390625, 0.87255859375, 0.12371826171875], "tokens": [284, 320, 813, 301, 397, 1015, 26, 4075, 32, 3108, 26, 106, 876, 284, 320, 334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 434, 1348, 438, 646, 10191, 23582, 32, 1348, 438, 372, 9454, 3980, 26801, 432, 284, 434, 313, 3986, 20, 474, 313, 1632, 20, 619, 313]}
