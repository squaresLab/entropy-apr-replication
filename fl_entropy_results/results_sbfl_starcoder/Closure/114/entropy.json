{"line_number": 1722, "line_type": "original", "code": "      Node replacement = n.getLastChild();", "entropy": 1.6025390625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [5.27734375, 2.078125, 0.7412109375, 0.19677734375, 3.974609375, 0.283935546875, 1.427734375, 0.0007767677307128906, 0.440185546875], "tokens": [647, 4004, 15909, 280, 310, 32, 20197, 2931, 473]}
{"line_number": 1722, "line_type": "generated", "code": "\n    }\n\n    // replace n with replacements\n    n.detachFromParent();\n    changeProxy.replaceWith(parent, n, collapseReplacements(replacements));\n  }\n\n  /**\n   * Given a node n, returns a list of the n's", "entropy": 0.426025390625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.8876953125, 0.007678985595703125, 0.58642578125, 0.48046875, 0.7861328125, 1.4775390625, 0.1290283203125, 0.85009765625, 0.177001953125, 0.30712890625, 0.5703125, 0.007297515869140625, 0.0110321044921875, 0.00821685791015625, 0.00025963783264160156, 0.0001926422119140625, 0.0227508544921875, 0.28564453125, 4.124641418457031e-05, 0.0004439353942871094, 0.003993988037109375, 0.00514984130859375, 0.01190185546875, 0.197265625, 0.00019097328186035156, 0.0012712478637695312, 0.000133514404296875, 0.154052734375, 0.0002429485321044922, 0.0008511543273925781, 0.00011241436004638672, 0.0016126632690429688, 0.0003936290740966797, 0.0007953643798828125, 0.034027099609375, 0.00047278404235839844, 0.1734619140625, 0.1158447265625, 0.0286407470703125, 0.0002865791320800781, 3.18359375, 0.5029296875, 1.314453125, 1.7587890625, 0.58984375, 1.7939453125, 0.93408203125, 0.1400146484375, 0.209716796875, 1.5419921875, 2.7890625, 0.0694580078125], "tokens": [284, 320, 446, 434, 7084, 310, 623, 15909, 101, 284, 310, 32, 18723, 1792, 4433, 473, 284, 1539, 5392, 32, 3227, 1554, 26, 2544, 30, 310, 30, 19742, 24230, 101, 26, 27378, 101, 876, 334, 320, 719, 1022, 664, 319, 15273, 312, 1541, 310, 30, 3217, 312, 1149, 432, 322, 310, 1182]}
{"line_number": 1723, "line_type": "original", "code": "      replacement.detachFromParent();", "entropy": 2.19140625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [3.6015625, 3.828125, 7.2421875, 0.61962890625, 0.03643798828125, 0.0013780593872070312, 0.005237579345703125], "tokens": [647, 15909, 32, 18723, 1792, 4433, 473]}
{"line_number": 1723, "line_type": "generated", "code": "\n        replacements.add(IR.number(0).srcref(n));\n      } else {\n        replacements = Lists.newArrayList(replacements.get(replacements.size() - 1));\n      }\n    }\n\n    // replace\n    if", "entropy": 0.336181640625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.7958984375, 1.087890625, 0.0017194747924804688, 0.175048828125, 0.038726806640625, 0.003704071044921875, 2.49609375, 0.002498626708984375, 0.332763671875, 0.0116119384765625, 0.08062744140625, 0.662109375, 0.251953125, 0.0017175674438476562, 0.004787445068359375, 0.1446533203125, 0.0186004638671875, 0.08917236328125, 0.0007953643798828125, 0.1971435546875, 0.4521484375, 0.1982421875, 1.2119140625, 0.0024871826171875, 0.8896484375, 1.6767578125, 0.01142120361328125, 0.0184173583984375, 0.1417236328125, 0.46484375, 0.00011754035949707031, 0.130859375, 0.1414794921875, 0.0009355545043945312, 0.42041015625, 0.0005168914794921875, 0.0024547576904296875, 0.0006918907165527344, 0.025665283203125, 0.0104522705078125, 0.00818634033203125, 0.0004572868347167969, 0.00677490234375, 0.14208984375, 0.0003859996795654297, 0.1298828125, 0.00013518333435058594, 0.33642578125, 0.5263671875, 0.81787109375, 1.3349609375, 1.9853515625], "tokens": [291, 15909, 101, 32, 669, 26, 3900, 32, 2171, 26, 34, 547, 1617, 612, 26, 96, 876, 397, 320, 813, 301, 291, 15909, 101, 280, 25163, 32, 41668, 26, 27378, 101, 32, 371, 26, 27378, 101, 32, 891, 346, 429, 225, 35, 876, 397, 320, 284, 320, 446, 434, 7084, 284, 415]}
{"line_number": 1724, "line_type": "original", "code": "      changeProxy.replaceWith(parent, n, replacement);", "entropy": 1.353515625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [4.41015625, 6.25390625, 0.007709503173828125, 0.006153106689453125, 0.022552490234375, 0.1470947265625, 0.0081634521484375, 0.5849609375, 0.007843017578125, 0.0169830322265625, 0.018829345703125, 0.2841796875, 5.83203125], "tokens": [647, 1539, 5392, 32, 3227, 1554, 26, 2544, 30, 310, 30, 15909, 293]}
{"line_number": 1724, "line_type": "generated", "code": "\n      } else {\n        Node replacement = replacements.get(replacements.size() - 1);\n        replacement.detachFromParent();\n        replacements.clear();\n        replacements.add(replacement);\n      }\n    }\n\n    // replace node\n   ", "entropy": 0.210205078125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.096435546875, 0.0029850006103515625, 0.121337890625, 0.4580078125, 0.108642578125, 1.341796875, 0.88232421875, 0.222900390625, 0.2410888671875, 5.507469177246094e-05, 0.0002377033233642578, 0.3271484375, 0.000278472900390625, 0.41259765625, 0.00030303001403808594, 1.1444091796875e-05, 7.998943328857422e-05, 0.01116180419921875, 0.00013637542724609375, 0.0026416778564453125, 0.00014483928680419922, 0.007007598876953125, 0.0293426513671875, 0.09027099609375, 0.191162109375, 0.007221221923828125, 0.0009775161743164062, 0.0002052783966064453, 0.0002658367156982422, 0.201904296875, 0.09796142578125, 0.018768310546875, 0.2386474609375, 0.50927734375, 6.54458999633789e-05, 0.0146636962890625, 0.006435394287109375, 0.0016374588012695312, 0.0002701282501220703, 0.01297760009765625, 0.0001323223114013672, 0.031585693359375, 0.0029621124267578125, 0.375732421875, 0.0005102157592773438, 0.1617431640625, 0.0005674362182617188, 0.583984375, 0.5390625, 0.64599609375, 2.2109375, 0.71923828125], "tokens": [397, 320, 813, 301, 291, 4004, 15909, 280, 15909, 101, 32, 371, 26, 27378, 101, 32, 891, 346, 429, 225, 35, 293, 291, 15909, 32, 18723, 1792, 4433, 473, 291, 15909, 101, 32, 3815, 473, 291, 15909, 101, 32, 669, 26, 27378, 293, 397, 320, 284, 320, 446, 434, 7084, 1541, 284]}
{"line_number": 1725, "line_type": "original", "code": "    } else {", "entropy": 2.921875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [4.40625, 0.8251953125, 6.0234375, 0.4365234375], "tokens": [264, 320, 813, 301]}
{"line_number": 1725, "line_type": "generated", "code": "\n        replacements.add(replacements.remove(replacements.size() - 1));\n      }\n    }\n\n    // replace n with replacements\n    n.detachFromParent();\n    changeProxy.replaceWith(parent, n, collapseReplacements", "entropy": 0.220947265625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.669921875, 1.45703125, 0.00341033935546875, 0.378662109375, 0.471435546875, 0.004512786865234375, 0.68017578125, 0.0028934478759765625, 0.0015802383422851562, 0.62255859375, 0.006809234619140625, 0.69091796875, 0.0004298686981201172, 0.00024259090423583984, 0.001209259033203125, 0.0172882080078125, 0.000881195068359375, 0.0055389404296875, 0.004703521728515625, 0.0228729248046875, 0.1737060546875, 5.555152893066406e-05, 0.11431884765625, 0.0003159046173095703, 0.416748046875, 0.474365234375, 0.744140625, 1.69140625, 0.1356201171875, 0.7529296875, 0.1329345703125, 0.259033203125, 0.66455078125, 0.00434112548828125, 0.01000213623046875, 0.0231781005859375, 0.0014514923095703125, 0.00016129016876220703, 0.027862548828125, 0.44775390625, 4.553794860839844e-05, 0.0004057884216308594, 0.005107879638671875, 0.011962890625, 0.01444244384765625, 0.1788330078125, 0.0002808570861816406, 0.003032684326171875, 0.00016129016876220703, 0.15771484375, 0.0002092123031616211, 0.0008816719055175781], "tokens": [291, 15909, 101, 32, 669, 26, 27378, 101, 32, 2546, 26, 27378, 101, 32, 891, 346, 429, 225, 35, 876, 397, 320, 284, 320, 446, 434, 7084, 310, 623, 15909, 101, 284, 310, 32, 18723, 1792, 4433, 473, 284, 1539, 5392, 32, 3227, 1554, 26, 2544, 30, 310, 30, 19742, 24230, 101]}
{"line_number": 1611, "line_type": "original", "code": "        return scopes.get(parent);", "entropy": 2.84375, "is_bug_line": false, "sus_score": 0.22360679774997896, "per_token_entropy": [3.490234375, 6.13671875, 10.3203125, 0.09295654296875, 0.13818359375, 0.006072998046875, 2.501953125, 0.06304931640625], "tokens": [351, 442, 25353, 32, 371, 26, 2544, 293]}
{"line_number": 1611, "line_type": "generated", "code": "\n          || (!nodeIsClass && isClass == TriState.FALSE);\n\n      boolean refMatch = referenced == TriState.BOTH\n          || (name.referenced && referenced == TriState.TRUE)", "entropy": 0.0706787109375, "is_bug_line": false, "sus_score": 0.22360679774997896, "per_token_entropy": [0.68017578125, 0.09588623046875, 0.12274169921875, 0.005023956298828125, 0.0004513263702392578, 4.565715789794922e-05, 0.00286102294921875, 0.0054779052734375, 0.0004329681396484375, 0.01027679443359375, 0.000858306884765625, 0.00023818016052246094, 8.547306060791016e-05, 0.00048160552978515625, 0.023406982421875, 0.205810546875, 0.1199951171875, 1.26171875, 0.023040771484375, 0.0018329620361328125, 0.035675048828125, 0.006290435791015625, 0.0006694793701171875, 5.5789947509765625e-05, 4.553794860839844e-05, 0.0005192756652832031, 0.02728271484375, 0.0015211105346679688, 0.00946807861328125, 0.0302276611328125, 0.0002727508544921875, 0.1231689453125, 0.0171051025390625, 0.00270843505859375, 0.0009164810180664062, 0.0007834434509277344, 6.961822509765625e-05, 0.0002161264419555664, 0.00017774105072021484, 0.00811767578125], "tokens": [616, 1276, 1429, 1251, 1622, 1339, 962, 438, 1339, 610, 20916, 1078, 32, 7347, 293, 1687, 1905, 2488, 3665, 280, 15167, 610, 20916, 1078, 32, 44975, 616, 1276, 308, 426, 32, 36307, 962, 15167, 610, 20916, 1078, 32, 6373, 27]}
{"line_number": 1864, "line_type": "original", "code": "            return Collections.emptyList();", "entropy": 2.087890625, "is_bug_line": false, "sus_score": 0.17407765595569785, "per_token_entropy": [10.2734375, 1.9462890625, 0.1856689453125, 0.0306854248046875, 0.0831298828125, 0.003448486328125], "tokens": [1468, 442, 15496, 32, 31469, 473]}
{"line_number": 1864, "line_type": "generated", "code": "\n  private static final long serialVersionUID = 1L;", "entropy": 0.64892578125, "is_bug_line": false, "sus_score": 0.17407765595569785, "per_token_entropy": [1.470703125, 1.1474609375, 2.30859375, 0.81689453125, 1.10546875, 0.11004638671875, 0.0008282661437988281, 0.047088623046875, 0.09429931640625, 0.032470703125, 0.00725555419921875], "tokens": [334, 945, 907, 1158, 1946, 19910, 280, 225, 35, 62, 45]}
{"line_number": 1610, "line_type": "original", "code": "      if (parent.isAssign()) {", "entropy": 1.78515625, "is_bug_line": false, "sus_score": 0.15075567228888181, "per_token_entropy": [2.2734375, 2.84375, 0.188232421875, 7.69140625, 0.7392578125, 0.38037109375, 1.1650390625, 0.74658203125, 0.033843994140625], "tokens": [647, 415, 308, 2544, 32, 297, 9079, 1157, 301]}
{"line_number": 1610, "line_type": "generated", "code": "      || isClass == TriState.TRUE && nodeIsClass", "entropy": 0.32421875, "is_bug_line": false, "sus_score": 0.15075567228888181, "per_token_entropy": [2.2734375, 0.4365234375, 0.80419921875, 0.001720428466796875, 0.04022216796875, 0.1253662109375, 3.5643577575683594e-05, 0.00015687942504882812, 0.1676025390625, 0.333984375, 0.0299072265625, 0.00034117698669433594, 0.0004987716674804688], "tokens": [647, 1276, 438, 1339, 610, 20916, 1078, 32, 6373, 962, 1541, 1622, 1339]}
{"line_number": 1498, "line_type": "original", "code": "        return null;", "entropy": 4.015625, "is_bug_line": false, "sus_score": 0.14002800840280097, "per_token_entropy": [7.25390625, 1.3291015625, 7.47265625, 0.01091766357421875], "tokens": [351, 442, 744, 45]}
{"line_number": 1498, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Determines whether a name is externally referenceable.\n   *\n   * @param scope The current variable scope\n   * @param name The name\n   * @return True if the name is externally referenceable", "entropy": 0.2232666015625, "is_bug_line": false, "sus_score": 0.14002800840280097, "per_token_entropy": [0.83154296875, 0.027252197265625, 0.12841796875, 0.19970703125, 0.0333251953125, 9.453296661376953e-05, 2.1875, 0.129638671875, 0.27587890625, 1.1875, 0.67041015625, 0.9482421875, 0.0005106925964355469, 0.1285400390625, 0.0005540847778320312, 0.50634765625, 0.39794921875, 0.0574951171875, 0.2783203125, 0.0003027915954589844, 0.10491943359375, 0.00885772705078125, 0.07598876953125, 0.041351318359375, 0.1085205078125, 0.254150390625, 0.002590179443359375, 0.020477294921875, 0.0028553009033203125, 0.00024080276489257812, 0.0030002593994140625, 0.0218658447265625, 0.026641845703125, 0.0341796875, 0.134033203125, 0.0229034423828125, 0.0007081031799316406, 0.0054779052734375, 0.416748046875, 0.03131103515625, 0.64892578125, 0.032073974609375, 0.24462890625, 0.2352294921875, 0.0006299018859863281, 0.023529052734375, 0.0002620220184326172], "tokens": [334, 320, 719, 1022, 664, 319, 34450, 4946, 312, 636, 438, 12098, 1247, 4121, 444, 32, 664, 319, 664, 319, 477, 753, 4576, 886, 1550, 2677, 4576, 664, 319, 477, 753, 636, 886, 636, 664, 319, 477, 601, 2933, 415, 322, 636, 438, 12098, 1247, 4121, 444]}
{"line_number": 1598, "line_type": "original", "code": "    Node parent = function.getParent();", "entropy": 2.72265625, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [4.7734375, 6.16015625, 3.89453125, 0.6416015625, 5.35546875, 0.8330078125, 0.06781005859375, 0.048126220703125], "tokens": [264, 4004, 2935, 280, 667, 32, 18789, 473]}
{"line_number": 1598, "line_type": "generated", "code": "\n   */\n  private int getNodeCount(Node root, Predicate<Node> criteria) {\n    int count = 0;\n    for (Node n : root.children()) {\n      if (criteria.apply(n)) {\n        count++;\n      }\n   ", "entropy": 0.249755859375, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [0.14111328125, 0.447998046875, 0.02294921875, 0.148681640625, 0.375, 1.470703125, 0.023284912109375, 0.07537841796875, 0.86669921875, 1.6337890625, 0.03955078125, 0.59326171875, 0.08544921875, 0.0034580230712890625, 0.00142669677734375, 1.853515625, 0.06304931640625, 0.00788116455078125, 0.052276611328125, 0.492919921875, 0.145263671875, 0.0021038055419921875, 0.00720977783203125, 0.0013103485107421875, 0.0011501312255859375, 0.2254638671875, 0.216552734375, 0.0021839141845703125, 0.0084686279296875, 0.5771484375, 0.497314453125, 0.1826171875, 0.010223388671875, 0.208251953125, 0.0009851455688476562, 0.0017671585083007812, 0.0235748291015625, 0.279296875, 0.01446533203125, 0.0860595703125, 0.003276824951171875, 0.47265625, 0.0008416175842285156, 0.0009608268737792969, 0.011444091796875, 0.003948211669921875, 0.0258636474609375, 0.0638427734375, 0.0601806640625, 0.07611083984375, 7.534027099609375e-05, 1.3759765625], "tokens": [664, 569, 334, 945, 629, 40524, 1534, 26, 1212, 3051, 30, 23426, 46, 1212, 48, 15261, 27, 301, 284, 629, 2385, 280, 225, 34, 45, 284, 436, 308, 1212, 310, 499, 3051, 32, 4915, 1157, 301, 397, 415, 308, 19229, 32, 4699, 26, 96, 490, 301, 291, 2385, 3334, 397, 320, 284]}
{"line_number": 1599, "line_type": "original", "code": "    if (parent != null) {", "entropy": 2.0625, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [2.1640625, 4.53125, 0.235595703125, 5.28515625, 2.6328125, 0.048065185546875, 1.498046875, 0.1094970703125], "tokens": [264, 415, 308, 2544, 863, 744, 27, 301]}
{"line_number": 1599, "line_type": "generated", "code": "\n   * @param node The root node to search from\n   * @param isTarget The target node\n   * @param isTarget The target node\n   * @return The count of nodes matching the criteria\n   */\n  private int countNodes(Node node, Predicate", "entropy": 0.7880859375, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [0.72216796875, 0.67578125, 0.26318359375, 0.09002685546875, 1.9296875, 1.40625, 1.849609375, 0.818359375, 0.751953125, 1.142578125, 1.2900390625, 0.58447265625, 0.022705078125, 0.005756378173828125, 0.06011962890625, 3.4296875, 3.615234375, 1.8974609375, 2.078125, 0.87353515625, 1.5107421875, 0.0252685546875, 0.004337310791015625, 0.171142578125, 1.1953125, 2.89453125, 2.15234375, 0.962890625, 0.1549072265625, 0.248046875, 0.1455078125, 0.016448974609375, 1.2939453125, 0.419921875, 0.82568359375, 0.1903076171875, 0.52978515625, 0.37939453125, 0.1278076171875, 0.022674560546875, 0.246826171875, 0.1002197265625, 0.0489501953125, 0.1922607421875, 0.5576171875, 0.96142578125, 1.025390625, 0.39501953125, 0.177734375, 0.19970703125, 0.003719329833984375, 0.28369140625], "tokens": [664, 319, 477, 753, 1541, 886, 3051, 1541, 372, 3233, 645, 664, 319, 477, 753, 438, 2922, 886, 1760, 1541, 664, 319, 477, 753, 438, 2922, 886, 1760, 1541, 664, 319, 477, 601, 886, 2385, 432, 5166, 9215, 322, 15261, 664, 569, 334, 945, 629, 2385, 5909, 26, 1212, 1541, 30, 23426]}
{"line_number": 1602, "line_type": "original", "code": "      while (parent.isHook()) {", "entropy": 2.9453125, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [5.73828125, 8.0859375, 0.2265625, 4.3671875, 2.359375, 0.4443359375, 4.8125, 0.346435546875, 0.12286376953125], "tokens": [647, 2218, 308, 2544, 32, 297, 9824, 1157, 301]}
{"line_number": 1602, "line_type": "generated", "code": "\n   */\n  private int getCount(boolean isClass, TriState referenced) {\n    int count = 0;\n    for (JsName name : names.values()) {\n      if (name.isClass() == isClass) {\n        if (", "entropy": 0.197998046875, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [0.47119140625, 0.052520751953125, 0.026763916015625, 0.330810546875, 0.1029052734375, 0.837890625, 0.66796875, 0.08526611328125, 1.255859375, 0.00484466552734375, 0.006649017333984375, 0.0026912689208984375, 0.2900390625, 3.5643577575683594e-05, 0.0228118896484375, 0.0224609375, 0.0015716552734375, 0.0628662109375, 0.267822265625, 0.2408447265625, 0.004547119140625, 0.013458251953125, 0.0016279220581054688, 0.002635955810546875, 0.27197265625, 0.13671875, 0.002162933349609375, 0.63916015625, 0.059478759765625, 0.324462890625, 0.075439453125, 0.96533203125, 0.44189453125, 0.032379150390625, 0.0009016990661621094, 0.0004048347473144531, 0.05426025390625, 0.111572265625, 0.1165771484375, 0.1812744140625, 0.0170440673828125, 0.145263671875, 0.038238525390625, 0.86865234375, 0.1275634765625, 0.0029964447021484375, 1.5497207641601562e-05, 0.4228515625, 0.0005545616149902344, 0.0286407470703125, 0.415283203125, 0.04071044921875], "tokens": [664, 569, 334, 945, 629, 622, 1534, 26, 4398, 438, 1339, 30, 20916, 1078, 15167, 27, 301, 284, 629, 2385, 280, 225, 34, 45, 284, 436, 308, 10535, 558, 636, 499, 4467, 32, 2810, 1157, 301, 397, 415, 308, 426, 32, 297, 1339, 346, 610, 438, 1339, 27, 301, 291, 415, 308]}
{"line_number": 1606, "line_type": "original", "code": "      if (parent.isName()) {", "entropy": 2.203125, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [2.8515625, 0.302978515625, 0.1954345703125, 9.8046875, 0.9208984375, 0.2305908203125, 4.21875, 1.244140625, 0.06475830078125], "tokens": [647, 415, 308, 2544, 32, 297, 558, 1157, 301]}
{"line_number": 1606, "line_type": "generated", "code": "\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Gets the count of nodes matching the criteria\n   *\n   * @param isClass Whether the node is a class\n   * @param referenced Whether the node is referenced\n   * @return Number of", "entropy": 0.1405029296875, "is_bug_line": false, "sus_score": 0.13608276348795434, "per_token_entropy": [0.337646484375, 0.8056640625, 0.222412109375, 0.11083984375, 0.451416015625, 0.0158233642578125, 0.0029392242431640625, 0.0016021728515625, 0.0056915283203125, 0.00038433074951171875, 0.158935546875, 0.18505859375, 0.0986328125, 0.00026345252990722656, 1.201171875, 0.278076171875, 0.70654296875, 0.01152801513671875, 0.7802734375, 0.31103515625, 0.045867919921875, 0.0209503173828125, 0.106201171875, 0.0081329345703125, 0.026031494140625, 0.0002644062042236328, 0.0042266845703125, 0.0187530517578125, 0.28466796875, 0.1583251953125, 0.0089874267578125, 0.0038394927978515625, 0.0169677734375, 0.004749298095703125, 0.003971099853515625, 0.002376556396484375, 0.0155792236328125, 0.0005602836608886719, 0.00020194053649902344, 0.1492919921875, 0.288818359375, 0.00531005859375, 0.0012197494506835938, 0.00140380859375, 0.0016946792602539062, 0.0017328262329101562, 0.0092010498046875, 0.0018291473388671875, 0.0008907318115234375, 0.387451171875, 0.03985595703125, 0.0006518363952636719], "tokens": [397, 320, 284, 320, 284, 442, 2385, 45, 334, 320, 719, 1022, 664, 319, 7124, 322, 2385, 432, 5166, 9215, 322, 15261, 664, 319, 664, 319, 477, 753, 438, 1339, 14071, 322, 1541, 438, 312, 443, 664, 319, 477, 753, 15167, 14071, 322, 1541, 438, 15167, 664, 319, 477, 601, 5104, 432]}
{"line_number": 1591, "line_type": "original", "code": "    List<NameInformation> refs = scopes.get(function);", "entropy": 2.408203125, "is_bug_line": false, "sus_score": 0.125, "per_token_entropy": [1.8662109375, 19.25, 0.2265625, 1.548828125, 0.01873779296875, 0.0546875, 2.51171875, 1.046875, 3.88671875, 0.008026123046875, 0.00789642333984375, 0.0106658935546875, 3.060546875, 0.219970703125], "tokens": [264, 1682, 46, 558, 6606, 48, 29284, 280, 25353, 32, 371, 26, 1126, 293]}
{"line_number": 1591, "line_type": "generated", "code": "\n    FALSE,\n    /** If value is either */\n    BOTH\n  }\n\n  /**\n   * Callback for the reference propagation pass.\n   */\n  private class ReferencePropagationCallback\n      implements FixedPointGraphTraversal.GraphVisitor<Node, TriState> {\n    @", "entropy": 0.420166015625, "is_bug_line": false, "sus_score": 0.125, "per_token_entropy": [0.396728515625, 0.499267578125, 0.0189361572265625, 0.05889892578125, 0.03369140625, 0.306884765625, 0.0899658203125, 0.310791015625, 0.9658203125, 0.58154296875, 0.05474853515625, 0.476806640625, 7.450580596923828e-05, 1.1845703125, 0.01351165771484375, 0.248779296875, 0.192138671875, 0.08367919921875, 0.000392913818359375, 1.892578125, 0.55908203125, 2.470703125, 1.4267578125, 0.3310546875, 1.4921875, 0.3466796875, 0.1414794921875, 0.12152099609375, 0.021881103515625, 0.07659912109375, 0.08282470703125, 0.0006341934204101562, 0.00018715858459472656, 8.475780487060547e-05, 0.93505859375, 0.185546875, 0.1763916015625, 4.9233436584472656e-05, 0.00847625732421875, 0.0041656494140625, 0.07086181640625, 1.2509765625, 1.14453125, 0.247314453125, 0.42138671875, 0.55224609375, 0.8759765625, 0.0004582405090332031, 0.0280609130859375, 0.0037403106689453125, 1.05859375, 0.396484375], "tokens": [284, 7446, 30, 284, 1022, 1670, 786, 438, 3154, 569, 284, 26836, 58, 334, 320, 719, 1022, 664, 319, 14720, 436, 322, 4121, 36905, 3097, 32, 664, 569, 334, 945, 443, 9494, 21228, 3296, 397, 4575, 10123, 1943, 3406, 35699, 32, 3406, 10532, 46, 1212, 30, 20916, 1078, 48, 301, 284, 477]}
{"line_number": 1592, "line_type": "original", "code": "    if (!refs.isEmpty()) {", "entropy": 2.845703125, "is_bug_line": false, "sus_score": 0.125, "per_token_entropy": [1.7880859375, 12.6015625, 3.0546875, 4.84375, 0.0693359375, 0.11370849609375, 0.2037353515625, 0.09844970703125], "tokens": [264, 415, 1429, 8046, 32, 6393, 1157, 301]}
{"line_number": 1592, "line_type": "generated", "code": "\n    /** If value is either */\n    BOTH\n  }\n\n  /**\n   * Gets a name and sets its \"referenced\" property.\n   *\n   * @param name The name\n   * @param isGlobal Whether the name is global\n   * @return The", "entropy": 0.6591796875, "is_bug_line": false, "sus_score": 0.125, "per_token_entropy": [0.56982421875, 0.03497314453125, 0.27685546875, 0.086669921875, 0.3447265625, 0.8740234375, 0.57958984375, 0.0019989013671875, 0.56689453125, 0.00014257431030273438, 1.3798828125, 0.01200103759765625, 0.2861328125, 0.1781005859375, 0.0775146484375, 0.0003886222839355469, 3.857421875, 1.8515625, 1.2734375, 3.458984375, 4.03515625, 1.01953125, 2.07421875, 0.44189453125, 0.0201263427734375, 0.326171875, 1.3359375, 0.263671875, 0.301025390625, 0.44775390625, 0.0006399154663085938, 0.1864013671875, 0.05499267578125, 0.2744140625, 0.4365234375, 0.08953857421875, 0.603515625, 0.0074005126953125, 0.0010881423950195312, 0.1807861328125, 1.6005859375, 1.3623046875, 0.95361328125, 0.53271484375, 0.07489013671875, 0.17138671875, 0.9814453125, 0.399169921875, 0.087646484375, 0.0037136077880859375, 0.23388671875, 0.072998046875], "tokens": [284, 1022, 1670, 786, 438, 3154, 569, 284, 26836, 58, 334, 320, 719, 1022, 664, 319, 7124, 312, 636, 461, 6900, 2819, 313, 36307, 20, 2804, 32, 664, 319, 664, 319, 477, 753, 636, 886, 636, 664, 319, 477, 753, 438, 4455, 14071, 322, 636, 438, 3649, 664, 319, 477, 601, 886]}
{"line_number": 1554, "line_type": "original", "code": "      return false;", "entropy": 3.720703125, "is_bug_line": false, "sus_score": 0.1111111111111111, "per_token_entropy": [2.5234375, 4.50390625, 7.84375, 0.01178741455078125], "tokens": [647, 442, 901, 45]}
{"line_number": 1554, "line_type": "generated", "code": "\n      }\n      if (parent.isAssign()) {\n        Node left = parent.getFirstChild();\n        if (left.isName()) {\n          String name = left.getString();\n          if (name!= null) {\n            Var var = t.get", "entropy": 0.237548828125, "is_bug_line": false, "sus_score": 0.1111111111111111, "per_token_entropy": [0.319091796875, 0.005092620849609375, 0.76171875, 0.44384765625, 0.046539306640625, 0.061370849609375, 0.010406494140625, 0.0823974609375, 0.373779296875, 0.67041015625, 0.0002887248992919922, 0.03662109375, 0.65869140625, 1.02734375, 0.0679931640625, 0.01837158203125, 0.00011706352233886719, 0.097900390625, 0.000942230224609375, 0.12322998046875, 0.066162109375, 0.411865234375, 0.0276947021484375, 0.0513916015625, 0.19384765625, 0.03839111328125, 0.0447998046875, 0.1309814453125, 0.0005321502685546875, 0.033538818359375, 1.0791015625, 0.27880859375, 0.00403594970703125, 0.04718017578125, 5.6743621826171875e-05, 0.0151214599609375, 0.002536773681640625, 0.03985595703125, 1.552734375, 0.207275390625, 0.54150390625, 0.329345703125, 0.00145721435546875, 0.1854248046875, 0.0009851455688476562, 0.05096435546875, 1.4111328125, 0.61083984375, 0.0037593841552734375, 0.1583251953125, 1.919269561767578e-05, 0.0228424072265625], "tokens": [397, 320, 397, 415, 308, 2544, 32, 297, 9079, 1157, 301, 291, 4004, 2841, 280, 2935, 32, 25657, 2931, 473, 291, 415, 308, 1873, 32, 297, 558, 1157, 301, 616, 892, 636, 280, 2841, 32, 7069, 473, 616, 415, 308, 426, 863, 744, 27, 301, 324, 7329, 773, 280, 273, 32, 371]}
{"line_number": 1860, "line_type": "original", "code": "          Node rhs = n.getFirstChild();", "entropy": 1.740234375, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [10.03125, 2.736328125, 0.248779296875, 1.216796875, 0.61572265625, 0.0186309814453125, 0.0679931640625, 0.00360870361328125, 0.72607421875], "tokens": [2033, 4004, 9322, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 1860, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [], "tokens": []}
{"line_number": 1861, "line_type": "original", "code": "          if (rhs != null) {", "entropy": 2.46484375, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [9.984375, 3.115234375, 0.109130859375, 3.78125, 2.150390625, 0.0440673828125, 0.437255859375, 0.1043701171875], "tokens": [2033, 415, 308, 14312, 863, 744, 27, 301]}
{"line_number": 1861, "line_type": "generated", "code": "\n\n  /**\n   * Determine whether a node is a declaration, i.e. a VAR, NAME, or\n   * FUNCTION node.\n   */\n  private boolean isDeclaration(Node n) {\n    return n.getType() == Token.VAR ||\n        n", "entropy": 0.6083984375, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [1.69140625, 0.369873046875, 0.0426025390625, 0.0007128715515136719, 3.0390625, 1.1943359375, 0.9833984375, 1.080078125, 0.71875, 0.826171875, 4.3671875, 2.388671875, 2.619140625, 0.0015230178833007812, 0.0006470680236816406, 0.043548583984375, 1.2744140625, 1.2119140625, 1.2763671875, 1.7763671875, 0.65625, 0.630859375, 0.388671875, 0.0006299018859863281, 0.80517578125, 0.2763671875, 0.161376953125, 0.133056640625, 0.043060302734375, 0.008758544921875, 0.042144775390625, 0.226806640625, 0.0168304443359375, 0.053802490234375, 0.044921875, 0.0014600753784179688, 0.036956787109375, 0.002544403076171875, 0.0003066062927246094, 0.00673675537109375, 0.55859375, 0.5732421875, 0.0110931396484375, 0.36181640625, 0.0021724700927734375, 0.01251983642578125, 0.0006194114685058594, 3.147125244140625e-05, 0.1591796875, 0.35498046875, 1.0869140625, 0.05584716796875], "tokens": [719, 1022, 664, 319, 22022, 4946, 312, 1541, 438, 312, 13317, 30, 595, 32, 87, 32, 312, 10244, 30, 8912, 30, 556, 664, 319, 17747, 1541, 32, 664, 569, 334, 945, 1905, 438, 10367, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 7416, 1276, 291, 310]}
{"line_number": 1877, "line_type": "original", "code": "          List<Node> nodes = Lists.newArrayList();", "entropy": 1.1572265625, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [10.03125, 2.095703125, 0.005615234375, 0.003398895263671875, 0.0001710653305053711, 0.03704833984375, 0.0231475830078125, 0.47119140625, 0.0020008087158203125, 0.0294189453125, 0.03253173828125], "tokens": [2033, 1682, 46, 1212, 48, 5166, 280, 25163, 32, 41668, 473]}
{"line_number": 1877, "line_type": "generated", "code": "\n  /**\n   * Extract a list of subexpressions that act as LHSs.\n   */\n  private List<Node> getLhsSubexpressions(Node n) {\n    switch (n.getType()) {\n      case Token.EXPR_RESULT:\n       ", "entropy": 0.15673828125, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [0.89599609375, 0.7998046875, 0.06866455078125, 0.0009713172912597656, 1.5986328125, 0.2060546875, 0.048858642578125, 0.002285003662109375, 0.211669921875, 0.01125335693359375, 0.08428955078125, 0.1939697265625, 0.0019588470458984375, 1.8349609375, 0.0391845703125, 1.158203125, 0.207763671875, 0.09796142578125, 0.0711669921875, 0.0185089111328125, 0.021636962890625, 0.036590576171875, 0.0014190673828125, 0.0023136138916015625, 3.921985626220703e-05, 0.0016069412231445312, 0.0183563232421875, 0.0018949508666992188, 0.0214385986328125, 0.005275726318359375, 0.0020923614501953125, 0.0027790069580078125, 0.00826263427734375, 0.0146026611328125, 0.003322601318359375, 0.0755615234375, 0.08648681640625, 0.0030651092529296875, 0.0004839897155761719, 5.3763389587402344e-05, 7.390975952148438e-05, 1.4424324035644531e-05, 0.000591278076171875, 0.0121002197265625, 0.0038089752197265625, 0.000263214111328125, 1.4424324035644531e-05, 0.254638671875, 3.2186508178710938e-06, 0.00029468536376953125, 8.296966552734375e-05, 0.0174713134765625], "tokens": [334, 1022, 664, 319, 15218, 312, 1149, 432, 1361, 23483, 688, 1712, 619, 498, 11493, 101, 32, 664, 569, 334, 945, 1682, 46, 1212, 48, 622, 62, 3914, 1721, 23483, 26, 1212, 310, 27, 301, 284, 3578, 308, 96, 32, 10272, 1157, 301, 397, 1135, 6512, 32, 17793, 81, 6383, 44, 291]}
{"line_number": 1878, "line_type": "original", "code": "          for (Node child : n.children()) {", "entropy": 1.1494140625, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [7.78515625, 3.939453125, 0.0233612060546875, 0.0185546875, 0.22216796875, 0.349609375, 0.1591796875, 0.042205810546875, 0.007720947265625, 0.006439208984375, 0.09307861328125], "tokens": [2033, 436, 308, 1212, 2838, 499, 310, 32, 4915, 1157, 301]}
{"line_number": 1878, "line_type": "generated", "code": "\n    return Collections.emptyList();\n  }\n\n  /**\n   * Check whether the given node is a variable declaration statement.\n   */\n  private boolean isVarDeclaration(Node n) {\n    return n.getType() == Token.VAR;\n  }\n\n  /**\n  ", "entropy": 0.53564453125, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [2.42578125, 1.578125, 0.61376953125, 0.01910400390625, 0.06414794921875, 0.0029621124267578125, 0.1839599609375, 0.0050811767578125, 0.84375, 0.239990234375, 0.0252838134765625, 0.00074005126953125, 3.947265625, 1.5224609375, 1.4765625, 1.03125, 0.69677734375, 0.560546875, 0.796875, 3.52734375, 0.4033203125, 2.880859375, 0.62109375, 0.00940704345703125, 0.2890625, 0.00841522216796875, 0.045654296875, 0.1719970703125, 0.015625, 0.344482421875, 1.3359375, 0.368408203125, 0.002017974853515625, 0.04852294921875, 0.005710601806640625, 0.00033593177795410156, 0.0076446533203125, 0.458984375, 0.2264404296875, 0.0246734619140625, 0.453857421875, 0.0002613067626953125, 0.0005922317504882812, 0.0010137557983398438, 3.0279159545898438e-05, 0.0017375946044921875, 0.170166015625, 0.006107330322265625, 0.0005831718444824219, 0.284423828125, 0.080322265625, 0.0094451904296875], "tokens": [284, 442, 15496, 32, 31469, 473, 334, 320, 719, 1022, 664, 319, 3456, 4946, 322, 2702, 1541, 438, 312, 2677, 13317, 7603, 32, 664, 569, 334, 945, 1905, 438, 1881, 10367, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 7416, 45, 334, 320, 719, 1022, 664]}
{"line_number": 1879, "line_type": "original", "code": "            nodes.addAll(getRhsSubexpressions(child));", "entropy": 1.42578125, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [9.7734375, 5.71484375, 0.0193939208984375, 1.279296875, 0.0080108642578125, 0.07830810546875, 2.4437904357910156e-05, 0.0060882568359375, 0.000614166259765625, 0.003131866455078125, 0.20703125, 0.0235137939453125], "tokens": [1468, 5166, 32, 15120, 26, 43907, 3914, 1721, 23483, 26, 2661, 876]}
{"line_number": 1879, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [], "tokens": []}
{"line_number": 1880, "line_type": "original", "code": "          }", "entropy": 5.56640625, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [9.734375, 1.400390625], "tokens": [2033, 320]}
{"line_number": 1880, "line_type": "generated", "code": "\n\n  /**\n   * Given an expression node, returns the node that represents the\n   * value of the expression.  For example, given the expression\n   * \"a.b.c\", this method would return the node representing \"c\".\n   */\n  private", "entropy": 0.748046875, "is_bug_line": false, "sus_score": 0.07602859212697055, "per_token_entropy": [1.5361328125, 0.27294921875, 0.03240966796875, 0.0007839202880859375, 3.21875, 1.33203125, 0.92138671875, 1.6416015625, 0.28271484375, 2.521484375, 0.802734375, 2.578125, 1.095703125, 1.826171875, 0.51708984375, 0.4970703125, 0.0008640289306640625, 1.7333984375, 0.94873046875, 0.630859375, 0.11614990234375, 0.240478515625, 0.53466796875, 1.17578125, 0.4765625, 0.1640625, 1.04296875, 0.97509765625, 0.6298828125, 1.095703125, 0.0010509490966796875, 1.1357421875, 0.60009765625, 1.0009765625, 0.11480712890625, 0.548828125, 0.036834716796875, 0.72119140625, 0.76123046875, 0.50244140625, 0.87646484375, 0.0096282958984375, 0.482421875, 0.26611328125, 1.2578125, 0.30029296875, 0.7470703125, 0.1240234375, 0.06707763671875, 0.412841796875, 0.0176544189453125, 0.082763671875], "tokens": [719, 1022, 664, 319, 15273, 600, 6101, 1541, 30, 3217, 322, 1541, 688, 10666, 322, 664, 319, 786, 432, 322, 6101, 32, 225, 2616, 2280, 30, 2702, 322, 6101, 664, 319, 313, 83, 32, 84, 32, 85, 392, 458, 1411, 2268, 442, 322, 1541, 12681, 313, 85, 2296, 664, 569, 334, 945]}
