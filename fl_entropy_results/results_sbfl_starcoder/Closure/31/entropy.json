{"line_number": 1463, "line_type": "original", "code": "    CompilerInput input = new CompilerInput(", "entropy": 1.630859375, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [2.673828125, 8.21875, 1.1884765625, 0.3671875, 0.1568603515625, 1.9755859375, 0.032867431640625, 0.00042128562927246094, 0.06317138671875], "tokens": [264, 20209, 1612, 1509, 280, 537, 20209, 1612, 26]}
{"line_number": 1463, "line_type": "generated", "code": "\n   *\n   * @param root The root of the parse tree.\n   * @return The js source code.\n   */\n  @Override\n  public String toSource(Node root) {\n    initCompilerOptionsIfTesting();\n    return root.toStringTree();", "entropy": 0.308837890625, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [0.219970703125, 0.476806640625, 1.134765625, 0.0274505615234375, 0.326171875, 0.351318359375, 0.85302734375, 0.81103515625, 0.376953125, 0.342529296875, 0.0226287841796875, 0.270751953125, 0.0033817291259765625, 0.3994140625, 0.041412353515625, 0.1097412109375, 0.0196533203125, 0.441162109375, 0.3154296875, 0.85400390625, 1.130859375, 0.348388671875, 0.465576171875, 0.0264739990234375, 0.034637451171875, 0.033935546875, 0.52392578125, 0.00838470458984375, 0.00788116455078125, 0.59765625, 0.0133056640625, 0.0006871223449707031, 0.031158447265625, 0.0008034706115722656, 0.0017690658569335938, 0.007343292236328125, 0.00258636474609375, 0.00133514404296875, 0.126708984375, 1.505859375, 0.054473876953125, 0.0022907257080078125, 0.0036334991455078125, 0.00023424625396728516, 0.0003161430358886719, 0.12164306640625, 1.064453125, 1.2705078125, 0.0209808349609375, 0.39208984375, 0.2783203125, 0.59033203125], "tokens": [664, 319, 664, 319, 477, 753, 3051, 886, 3051, 432, 322, 3185, 4345, 32, 664, 319, 477, 601, 886, 4060, 1914, 1340, 32, 664, 569, 334, 477, 1788, 334, 562, 892, 372, 2028, 26, 1212, 3051, 27, 301, 284, 3219, 8115, 2031, 2797, 10855, 473, 284, 442, 3051, 32, 3108, 3350, 473]}
{"line_number": 1465, "line_type": "original", "code": "    putCompilerInput(input.getInputId(), input);", "entropy": 1.9609375, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [1.515625, 12.125, 4.3359375, 0.0819091796875, 0.10528564453125, 4.98828125, 0.28515625, 0.0178070068359375, 0.0008039474487304688, 0.0111236572265625, 0.049102783203125, 0.01145172119140625], "tokens": [264, 4162, 8115, 1612, 26, 1131, 32, 29647, 606, 1026, 1509, 293]}
{"line_number": 1465, "line_type": "generated", "code": "\n    return null;\n  }\n\n  /**\n   * Converts the main parse tree back to js code.\n   */\n  public String toSource(Node n) {", "entropy": 0.305419921875, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [0.6044921875, 0.5595703125, 2.82421875, 0.0023899078369140625, 0.0478515625, 0.001331329345703125, 0.117919921875, 0.6572265625, 0.048492431640625, 0.0005197525024414062, 0.410888671875, 1.0595703125, 1.3173828125, 0.0193634033203125, 0.0014162063598632812, 0.156005859375, 0.002101898193359375, 0.0704345703125, 0.00936126708984375, 0.3310546875, 0.0811767578125, 0.2890625, 0.00922393798828125, 0.285400390625, 0.051513671875, 0.0103607177734375, 0.48974609375, 0.0020809173583984375, 0.06243896484375, 0.2354736328125, 0.01163482666015625, 0.0015573501586914062], "tokens": [284, 442, 744, 45, 334, 320, 719, 1022, 664, 319, 25337, 322, 2575, 3185, 4345, 1751, 372, 4060, 1340, 32, 664, 569, 334, 562, 892, 372, 2028, 26, 1212, 310, 27, 301]}
{"line_number": 1466, "line_type": "original", "code": "    return input.getAstRoot(this);", "entropy": 2.529296875, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [2.728515625, 2.66015625, 6.20703125, 0.256591796875, 1.60546875, 2.669921875, 0.0013580322265625, 0.07952880859375, 2.2578125, 6.82421875], "tokens": [264, 442, 1509, 32, 371, 19511, 4058, 26, 578, 293]}
{"line_number": 1466, "line_type": "generated", "code": "\n      @Override\n      public String call() {\n        if (root == null) {\n          return null;\n        }\n        return root.toSource();\n      }\n    });\n  }\n\n  /**\n   * Converts a subtree of the parse tree back to js code.", "entropy": 0.2822265625, "is_bug_line": false, "sus_score": 0.1849000654084097, "per_token_entropy": [0.57080078125, 0.389892578125, 0.0009074211120605469, 0.039886474609375, 0.04010009765625, 0.0016374588012695312, 0.00024318695068359375, 0.0009188652038574219, 1.130859375, 0.2210693359375, 2.37890625, 0.073974609375, 1.5068359375, 0.46875, 0.0012006759643554688, 0.04730224609375, 0.022705078125, 0.02606201171875, 0.43017578125, 0.8037109375, 0.0007333755493164062, 0.00846099853515625, 0.0001456737518310547, 0.29541015625, 1.0693359375, 0.529296875, 0.003192901611328125, 0.68359375, 0.0018072128295898438, 0.2354736328125, 0.02874755859375, 0.00551605224609375, 0.1307373046875, 0.044036865234375, 0.01406097412109375, 0.0009293556213378906, 0.154296875, 0.430419921875, 0.045623779296875, 0.0004062652587890625, 0.36572265625, 0.64990234375, 0.23779296875, 1.0576171875, 0.0545654296875, 0.29931640625, 0.00540924072265625, 0.050537109375, 0.0081787109375, 0.06103515625, 0.01611328125, 0.036468505859375], "tokens": [397, 477, 1788, 397, 562, 892, 1476, 346, 301, 291, 415, 308, 2388, 610, 744, 27, 301, 616, 442, 744, 45, 291, 320, 291, 442, 3051, 32, 452, 2028, 473, 397, 320, 284, 1122, 334, 320, 719, 1022, 664, 319, 25337, 312, 37255, 432, 322, 3185, 4345, 1751, 372, 4060, 1340, 32]}
{"line_number": 2104, "line_type": "original", "code": "      if (inputs.isEmpty()) {", "entropy": 1.8095703125, "is_bug_line": false, "sus_score": 0.1421338109037403, "per_token_entropy": [4.2421875, 4.14453125, 0.054931640625, 3.83984375, 0.42919921875, 1.681640625, 0.0276641845703125, 0.05426025390625], "tokens": [647, 415, 308, 8075, 32, 6393, 1157, 301]}
{"line_number": 2104, "line_type": "generated", "code": "\n  }", "entropy": 0.32080078125, "is_bug_line": false, "sus_score": 0.1421338109037403, "per_token_entropy": [0.5400390625, 0.10150146484375], "tokens": [334, 320]}
{"line_number": 2108, "line_type": "original", "code": "      return inputs.get(0).getAstRoot(this);", "entropy": 2.04296875, "is_bug_line": false, "sus_score": 0.1421338109037403, "per_token_entropy": [5.84765625, 0.187255859375, 10.2578125, 0.07421875, 0.1712646484375, 0.004184722900390625, 0.012115478515625, 0.00629425048828125, 2.88671875, 4.21875, 0.018157958984375, 0.08843994140625, 0.0267181396484375, 4.8125], "tokens": [647, 442, 7806, 32, 371, 26, 34, 547, 371, 19511, 4058, 26, 578, 293]}
{"line_number": 2108, "line_type": "generated", "code": "\n  }\n\n  @Override\n  public void report(JSError error) {", "entropy": 0.410400390625, "is_bug_line": false, "sus_score": 0.1421338109037403, "per_token_entropy": [0.81689453125, 0.0107879638671875, 0.230712890625, 0.443359375, 0.01197052001953125, 0.0012531280517578125, 0.310546875, 1.537109375, 2.2109375, 0.2198486328125, 0.3369140625, 6.246566772460938e-05, 0.022857666015625, 0.00298309326171875, 0.0012531280517578125], "tokens": [334, 320, 719, 477, 1788, 334, 562, 763, 3639, 26, 60, 21887, 1048, 27, 301]}
{"line_number": 2111, "line_type": "original", "code": "    List<CompilerInput> moduleInputs = module.getInputs();", "entropy": 2.162109375, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [1.2744140625, 9.359375, 0.01372528076171875, 3.7421875, 3.890625, 0.0047607421875, 3.640625, 0.061004638671875, 0.07244873046875, 3.92578125, 2.7109375, 1.4296875, 0.018798828125, 0.1142578125], "tokens": [264, 1682, 46, 8115, 1612, 48, 2297, 13719, 280, 2297, 32, 371, 13719, 473]}
{"line_number": 2111, "line_type": "generated", "code": "\n    return errorManager;\n  }\n\n  @Override\n  public void setErrorManager(ErrorManager errorManager) {\n    this.errorManager = errorManager;\n  }\n\n  @Override\n  public void setTypeRegistry(TypeRegistry registry) {\n    this.type", "entropy": 0.248046875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.42578125, 0.273193359375, 0.74072265625, 0.0212554931640625, 0.0188751220703125, 0.033416748046875, 0.0006566047668457031, 0.1962890625, 0.4912109375, 0.0186920166015625, 0.0013055801391601562, 0.355224609375, 1.466796875, 1.271484375, 0.01409912109375, 0.003925323486328125, 0.004238128662109375, 0.00024390220642089844, 0.304443359375, 0.0064544677734375, 0.0022735595703125, 0.000965118408203125, 0.056884765625, 0.2052001953125, 0.0004448890686035156, 0.0012912750244140625, 3.457069396972656e-05, 0.0005459785461425781, 0.017974853515625, 0.0286865234375, 0.0010061264038085938, 0.07489013671875, 0.00010371208190917969, 0.15185546875, 0.51416015625, 0.014312744140625, 0.0009660720825195312, 0.217041015625, 1.287109375, 1.1025390625, 1.9091796875, 0.1876220703125, 0.0052337646484375, 0.583984375, 0.00725555419921875, 0.1744384765625, 0.0026302337646484375, 0.0016183853149414062, 0.0341796875, 0.38232421875, 0.0002111196517944336, 0.2802734375], "tokens": [284, 442, 1048, 1572, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 48907, 1572, 26, 924, 1572, 1048, 1572, 27, 301, 284, 458, 32, 731, 1572, 280, 1048, 1572, 45, 334, 320, 719, 477, 1788, 334, 562, 763, 739, 620, 5378, 26, 620, 5378, 10880, 27, 301, 284, 458, 32, 681]}
{"line_number": 2112, "line_type": "original", "code": "    if (moduleInputs.size() > 0) {", "entropy": 1.7705078125, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [2.8203125, 3.220703125, 0.0203094482421875, 4.95703125, 7.66015625, 0.396484375, 2.36328125, 0.00455474853515625, 0.96484375, 0.019287109375, 0.483642578125, 0.032501220703125, 0.06915283203125], "tokens": [264, 415, 308, 1647, 13719, 32, 891, 346, 848, 225, 34, 27, 301]}
{"line_number": 2112, "line_type": "generated", "code": "\n  }\n\n  @Override\n  public void setCheckTypes(boolean checkTypes) {\n    this.checkTypes = checkTypes;\n  }\n\n  @Override\n  public boolean getCheckTypes() {\n    return checkTypes;\n  }\n\n  @Override\n  public boolean", "entropy": 0.294677734375, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.681640625, 0.4248046875, 0.323486328125, 0.556640625, 0.0160369873046875, 0.0015659332275390625, 0.421142578125, 1.4638671875, 1.1025390625, 2.697265625, 0.1929931640625, 0.005252838134765625, 0.04296875, 0.62109375, 0.1036376953125, 0.00753021240234375, 0.016571044921875, 0.08636474609375, 1.1953125, 0.00045299530029296875, 0.10076904296875, 0.0035381317138671875, 0.005748748779296875, 0.00955963134765625, 0.00020575523376464844, 0.00400543212890625, 0.33349609375, 0.0006961822509765625, 0.13671875, 0.2025146484375, 0.00612640380859375, 0.0011014938354492188, 0.0758056640625, 0.6669921875, 0.364501953125, 0.01300811767578125, 0.0003726482391357422, 0.00099945068359375, 0.0002536773681640625, 0.0237884521484375, 0.100341796875, 0.1654052734375, 6.99758529663086e-05, 0.013092041015625, 0.357177734375, 0.00024366378784179688, 0.2198486328125, 0.307861328125, 0.0113983154296875, 0.00188446044921875, 0.1182861328125, 2.111328125], "tokens": [334, 320, 719, 477, 1788, 334, 562, 763, 739, 2140, 2424, 26, 4398, 1505, 2424, 27, 301, 284, 458, 32, 1553, 2424, 280, 1505, 2424, 45, 334, 320, 719, 477, 1788, 334, 562, 1905, 622, 2140, 2424, 346, 301, 284, 442, 1505, 2424, 45, 334, 320, 719, 477, 1788, 334, 562, 1905]}
{"line_number": 2113, "line_type": "original", "code": "      return moduleInputs.get(0).getAstRoot(this);", "entropy": 1.294921875, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [8.0625, 1.8447265625, 3.482421875, 5.00390625, 0.2138671875, 0.031402587890625, 0.013458251953125, 0.0631103515625, 0.1884765625, 0.19140625, 0.24755859375, 0.005191802978515625, 0.02142333984375, 0.0248260498046875, 0.031951904296875], "tokens": [647, 442, 2297, 13719, 32, 371, 26, 34, 547, 371, 19511, 4058, 26, 578, 293]}
{"line_number": 2113, "line_type": "generated", "code": "\n\n  @Override\n  public List<SourceFile> getExternInputs() {\n    return externs;\n  }\n\n  @Override\n  public List<SourceFile> getJsInputs() {\n    return inputs;\n  }\n\n  @Override\n  public List<SourceFile> get", "entropy": 0.287353515625, "is_bug_line": false, "sus_score": 0.12909944487358055, "per_token_entropy": [0.93408203125, 1.140625, 0.021240234375, 0.003368377685546875, 0.48046875, 2.974609375, 0.02880859375, 0.84765625, 0.0006132125854492188, 0.1295166015625, 1.1201171875, 3.4570693969726562e-06, 1.2216796875, 0.00519561767578125, 0.0080413818359375, 0.0335693359375, 0.1533203125, 0.10260009765625, 0.55517578125, 0.1268310546875, 0.01267242431640625, 0.00018393993377685547, 0.2005615234375, 0.252197265625, 0.005939483642578125, 0.0009832382202148438, 0.1033935546875, 0.75341796875, 0.016998291015625, 0.07562255859375, 5.424022674560547e-05, 0.050323486328125, 1.8212890625, 0.0654296875, 0.00879669189453125, 0.0035800933837890625, 0.0261077880859375, 0.06298828125, 0.1253662109375, 0.0149078369140625, 0.00688934326171875, 0.00022935867309570312, 0.1822509765625, 0.2017822265625, 0.00726318359375, 0.002613067626953125, 0.057159423828125, 0.74462890625, 0.0087127685546875, 0.1475830078125, 0.00010120868682861328, 0.09295654296875], "tokens": [719, 477, 1788, 334, 562, 1682, 46, 17900, 48, 622, 571, 900, 13719, 346, 301, 284, 442, 12098, 101, 45, 334, 320, 719, 477, 1788, 334, 562, 1682, 46, 17900, 48, 622, 10535, 13719, 346, 301, 284, 442, 7806, 45, 334, 320, 719, 477, 1788, 334, 562, 1682, 46, 17900, 48, 622]}
{"line_number": 2103, "line_type": "original", "code": "    if (module == null) {", "entropy": 1.5029296875, "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [2.375, 3.390625, 0.13134765625, 3.072265625, 2.798828125, 0.0305633544921875, 0.1907958984375, 0.032318115234375], "tokens": [264, 415, 308, 1647, 610, 744, 27, 301]}
{"line_number": 2103, "line_type": "generated", "code": "\n    }\n  }\n\n  /** Gets the DOT graph of the AST generated at the end of compilation. */\n  public String getAstDotGraph(String rootNodeName) throws IOException {\n    if (jsRoot!= null) {\n      ControlFlowAnalysis cfa =", "entropy": 0.2149658203125, "is_bug_line": false, "sus_score": 0.10206207261596577, "per_token_entropy": [0.6220703125, 0.481689453125, 0.1993408203125, 0.002262115478515625, 0.280517578125, 0.363525390625, 0.421630859375, 0.08929443359375, 0.250244140625, 0.0307159423828125, 0.04058837890625, 0.061279296875, 0.29150390625, 1.1875, 0.1614990234375, 0.01163482666015625, 0.01360321044921875, 0.0007724761962890625, 0.045379638671875, 0.030548095703125, 0.003314971923828125, 0.0175628662109375, 0.0516357421875, 0.058746337890625, 0.06439208984375, 0.52587890625, 0.64892578125, 0.02191162109375, 0.0784912109375, 1.4423828125, 1.6875, 0.529296875, 0.06793212890625, 0.08197021484375, 0.0037899017333984375, 0.007678985595703125, 0.039794921875, 0.73583984375, 0.0139617919921875, 0.245361328125, 0.018829345703125, 0.05291748046875, 0.00010454654693603516, 0.023040771484375, 0.0004887580871582031, 0.01300811767578125, 0.154296875, 4.76837158203125e-06, 0.0064697265625, 0.0014333724975585938, 5.614757537841797e-05, 0.0008020401000976562], "tokens": [284, 320, 334, 320, 719, 1022, 7124, 322, 32763, 3996, 432, 322, 16095, 4723, 821, 322, 943, 432, 16260, 32, 569, 334, 562, 892, 622, 19511, 10025, 3406, 26, 652, 3051, 37775, 27, 2571, 6291, 301, 284, 415, 308, 754, 4058, 863, 744, 27, 301, 397, 7813, 4055, 9745, 281, 1919, 280]}
{"line_number": 359, "line_type": "original", "code": "        this.moduleGraph = new JSModuleGraph(modules);", "entropy": 1.287109375, "is_bug_line": false, "sus_score": 0.09589266029707683, "per_token_entropy": [8.34375, 5.140625, 0.0242156982421875, 1.5234375, 0.2159423828125, 0.033203125, 0.5673828125, 0.04486083984375, 8.726119995117188e-05, 0.00011491775512695312, 0.1165771484375, 0.458984375, 0.271484375], "tokens": [351, 458, 32, 1647, 3406, 280, 537, 7750, 2459, 3406, 26, 3477, 293]}
{"line_number": 359, "line_type": "generated", "code": "\n\n  /**\n   * Initializes the instance state needed for a compile job if the sources\n   * are not in modules.\n   */\n  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options) {\n   ", "entropy": 0.19873046875, "is_bug_line": false, "sus_score": 0.09589266029707683, "per_token_entropy": [0.6611328125, 0.33056640625, 0.040924072265625, 0.0002646446228027344, 2.603515625, 0.43359375, 0.60400390625, 0.074462890625, 0.5654296875, 0.040924072265625, 0.053741455078125, 0.1395263671875, 0.01007843017578125, 1.23828125, 0.1422119140625, 0.1456298828125, 0.0772705078125, 0.0007562637329101562, 0.04364013671875, 1.1533203125, 0.0653076171875, 0.054107666015625, 0.06219482421875, 0.0880126953125, 0.11639404296875, 0.0953369140625, 0.04852294921875, 0.11651611328125, 0.00084686279296875, 0.0633544921875, 0.210693359375, 0.00019025802612304688, 3.039836883544922e-05, 0.0001016855239868164, 0.007610321044921875, 0.07366943359375, 0.0011777877807617188, 0.007244110107421875, 0.2237548828125, 3.5881996154785156e-05, 3.4570693969726562e-06, 3.2067298889160156e-05, 0.003505706787109375, 0.04364013671875, 0.004604339599609375, 0.0361328125, 0.54345703125, 0.0003795623779296875, 0.0016336441040039062, 0.0123138427734375, 0.002872467041015625, 0.09130859375], "tokens": [719, 1022, 664, 319, 21037, 322, 1980, 1603, 5349, 436, 312, 8329, 3992, 415, 322, 10849, 664, 319, 884, 646, 328, 7896, 32, 664, 569, 334, 562, 763, 3219, 26, 60, 1706, 703, 974, 1178, 12098, 101, 30, 971, 1706, 703, 974, 1178, 7806, 30, 397, 20209, 2031, 2075, 27, 301, 284]}
{"line_number": 366, "line_type": "original", "code": "      }", "entropy": 3.16015625, "is_bug_line": false, "sus_score": 0.09589266029707683, "per_token_entropy": [5.55859375, 0.763671875], "tokens": [647, 320]}
{"line_number": 366, "line_type": "generated", "code": "\n    }\n  }\n\n  /**\n   * Fill in any empty modules with synthetic input.\n   */\n  private static void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.getInputs", "entropy": 0.32763671875, "is_bug_line": false, "sus_score": 0.09589266029707683, "per_token_entropy": [0.39990234375, 0.009979248046875, 0.2001953125, 0.0003952980041503906, 0.059906005859375, 0.2498779296875, 0.03863525390625, 0.0001894235610961914, 2.521484375, 0.99560546875, 0.81787109375, 0.9638671875, 0.21142578125, 0.61181640625, 2.716796875, 1.970703125, 1.46484375, 0.273193359375, 0.103271484375, 0.00159454345703125, 0.01922607421875, 1.091796875, 0.935546875, 0.0005631446838378906, 8.356571197509766e-05, 0.0002830028533935547, 0.0001283884048461914, 0.0143280029296875, 0.0013380050659179688, 0.0001500844955444336, 5.245208740234375e-06, 1.2636184692382812e-05, 0.00308990478515625, 0.0005626678466796875, 0.0004730224609375, 0.0261383056640625, 0.51611328125, 0.0005035400390625, 0.41259765625, 3.814697265625e-06, 0.1705322265625, 0.0046539306640625, 0.00643157958984375, 0.0002275705337524414, 0.00010979175567626953, 0.003765106201171875, 0.01983642578125, 0.00962066650390625, 0.0014486312866210938, 0.0007328987121582031, 0.185546875, 0.0006089210510253906], "tokens": [284, 320, 334, 320, 719, 1022, 664, 319, 17837, 328, 1346, 3502, 7896, 623, 39391, 1509, 32, 664, 569, 334, 945, 907, 763, 5318, 2766, 12242, 26, 720, 46, 4624, 2459, 48, 7896, 27, 301, 284, 436, 308, 4624, 2459, 2297, 499, 7896, 27, 301, 397, 415, 308, 1647, 32, 371, 13719]}
{"line_number": 249, "line_type": "original", "code": "        PrintStreamErrorManager printer =", "entropy": 2.615234375, "is_bug_line": false, "sus_score": 0.0601929265428846, "per_token_entropy": [2.46484375, 10.171875, 0.0213470458984375, 0.228515625, 0.06854248046875, 4.7421875, 0.61572265625], "tokens": [351, 9194, 1862, 924, 1572, 23307, 280]}
{"line_number": 249, "line_type": "generated", "code": "\n       !options.checkTypes) {\n      composedGuards = new ComposeWarningsGuard(\n          guards,\n          new SuppressWarningsGuard(\n              \"missingProperties\",\n              \"missingProvide\",\n              \"missingRequire\",\n              \"missingReturn\",\n              \"extra", "entropy": 0.44140625, "is_bug_line": false, "sus_score": 0.0601929265428846, "per_token_entropy": [0.3232421875, 0.60205078125, 0.07708740234375, 0.0002474784851074219, 2.4921875, 0.373779296875, 0.401611328125, 0.0310821533203125, 0.49072265625, 0.998046875, 0.0005326271057128906, 6.079673767089844e-06, 0.2396240234375, 0.59033203125, 0.144775390625, 0.0001533031463623047, 0.0002338886260986328, 0.006916046142578125, 0.81201171875, 0.9482421875, 5.4955482482910156e-05, 0.65234375, 0.6044921875, 1.154296875, 0.46435546875, 0.0016937255859375, 1.185546875, 0.006458282470703125, 0.049652099609375, 0.35400390625, 3.076171875, 0.84619140625, 0.68017578125, 0.8603515625, 0.301025390625, 0.1990966796875, 0.7041015625, 0.638671875, 0.034149169921875, 0.00673675537109375, 0.003173828125, 0.0313720703125, 0.002605438232421875, 0.422607421875, 0.0156707763671875, 0.021881103515625, 0.5498046875, 0.73876953125, 0.2213134765625, 0.0053863525390625, 0.0097808837890625, 0.572265625], "tokens": [291, 653, 2184, 32, 1553, 2424, 27, 301, 397, 33172, 5708, 8805, 280, 537, 38426, 12069, 12380, 26, 616, 3932, 8805, 30, 616, 537, 14644, 1380, 12069, 12380, 26, 1090, 313, 9785, 3289, 392, 1090, 313, 9785, 15277, 392, 1090, 313, 9785, 3797, 392, 1090, 313, 9785, 2891, 392, 1090, 313, 7615]}
{"line_number": 251, "line_type": "original", "code": "        printer.setSummaryDetailLevel(options.summaryDetailLevel);", "entropy": 3.130859375, "is_bug_line": false, "sus_score": 0.0601929265428846, "per_token_entropy": [3.392578125, 12.046875, 1.216796875, 7.57421875, 7.7734375, 2.865234375, 0.5048828125, 0.0225372314453125, 5.453125, 0.1163330078125, 1.2978515625, 0.0004737377166748047, 0.05682373046875, 1.529296875], "tokens": [351, 23307, 32, 470, 8104, 5287, 2656, 26, 2184, 32, 1367, 5287, 2656, 293]}
{"line_number": 251, "line_type": "generated", "code": "\n          DiagnosticGroups.CHECK_VARIABLES),\n          CheckLevel.OFF);\n    }\n\n    // If the user has enabled the type checking pass, we have to\n    // turn on type checking for the parser.\n    if (options.checkTypes) {\n     ", "entropy": 0.77880859375, "is_bug_line": false, "sus_score": 0.0601929265428846, "per_token_entropy": [0.896484375, 0.316650390625, 0.044158935546875, 0.0005655288696289062, 0.31396484375, 2.3126602172851562e-05, 0.012451171875, 4.029273986816406e-05, 1.8759765625, 1.025390625, 0.63232421875, 0.00036215782165527344, 0.00014972686767578125, 0.07806396484375, 0.0082550048828125, 0.0435791015625, 0.0001246929168701172, 0.27001953125, 1.427734375, 2.73046875, 1.4111328125, 0.82080078125, 1.4384765625, 2.91015625, 1.5654296875, 2.525390625, 1.005859375, 1.0390625, 0.2467041015625, 1.96484375, 2.953125, 0.0787353515625, 0.73828125, 0.0246429443359375, 2.818359375, 0.381103515625, 2.146484375, 0.2479248046875, 1.6552734375, 1.205078125, 1.306640625, 0.7587890625, 0.406005859375, 0.098876953125, 0.1519775390625, 0.0279693603515625, 0.00020563602447509766, 0.1614990234375, 0.00263214111328125, 0.70068359375, 0.0005421638488769531, 0.03607177734375], "tokens": [616, 32350, 7332, 32, 6229, 81, 22370, 69, 471, 616, 3456, 2656, 32, 6664, 293, 284, 320, 446, 434, 1670, 322, 1256, 1401, 5887, 322, 827, 11056, 3097, 30, 996, 1159, 372, 284, 434, 6927, 544, 827, 11056, 436, 322, 4118, 32, 284, 415, 308, 2184, 32, 1553, 2424, 27, 301, 397]}
{"line_number": 252, "line_type": "original", "code": "        setErrorManager(printer);", "entropy": 2.958984375, "is_bug_line": false, "sus_score": 0.0601929265428846, "per_token_entropy": [6.0078125, 6.64453125, 0.06640625, 0.04022216796875, 4.9296875, 0.066162109375], "tokens": [351, 48907, 1572, 26, 21201, 293]}
{"line_number": 252, "line_type": "generated", "code": "\n    }\n\n    // If the user has specified that we should warn about missing\n    // goog.provide/goog.require, then we need to make sure that\n    // the checkTypes pass runs after the checkProvidesAndRequires\n    // pass, so that we", "entropy": 0.875, "is_bug_line": false, "sus_score": 0.0601929265428846, "per_token_entropy": [0.163330078125, 0.005130767822265625, 0.294921875, 1.4228515625, 2.896484375, 1.36328125, 0.7998046875, 1.458984375, 2.11328125, 1.2333984375, 1.197265625, 0.62255859375, 1.5087890625, 0.1409912109375, 1.2177734375, 0.377685546875, 0.0017919540405273438, 1.189453125, 0.00726318359375, 0.72265625, 1.4013671875, 0.82373046875, 0.00046062469482421875, 0.03466796875, 0.79248046875, 0.84765625, 0.6728515625, 1.7021484375, 0.0272064208984375, 2.25, 0.040283203125, 0.344970703125, 1.326171875, 0.0762939453125, 2.044921875, 2.171875, 1.1611328125, 0.415283203125, 0.5283203125, 2.2890625, 0.77734375, 2.201171875, 0.087158203125, 0.5390625, 0.0006699562072753906, 0.802734375, 0.0007600784301757812, 0.0252685546875, 1.703125, 0.77294921875, 0.1119384765625, 0.7958984375], "tokens": [284, 320, 446, 434, 1670, 322, 1256, 1401, 3191, 688, 996, 1395, 17161, 2625, 5816, 284, 434, 47917, 32, 15720, 33, 25745, 32, 1981, 30, 1615, 996, 1849, 372, 1930, 3654, 688, 284, 434, 322, 1505, 2424, 3097, 9792, 2685, 322, 1505, 29330, 2185, 21059, 284, 434, 3097, 30, 1259, 688, 996]}
{"line_number": 2142, "line_type": "original", "code": "    logger.setLevel(level);", "entropy": 3.345703125, "is_bug_line": false, "sus_score": 0.05986843400892496, "per_token_entropy": [3.263671875, 14.2734375, 0.1004638671875, 2.876953125, 0.01537322998046875, 2.79296875, 0.09228515625], "tokens": [264, 4082, 32, 34318, 26, 2649, 293]}
{"line_number": 2142, "line_type": "generated", "code": "\n   * calling {@code compile}.\n   */\n  public void saveState(CompilerState state) {\n    state.setInputs(inputs);\n    state.setExterns(externs);\n    state.setOptions(options);\n    state.setRoot", "entropy": 0.4716796875, "is_bug_line": false, "sus_score": 0.05986843400892496, "per_token_entropy": [0.5908203125, 0.423095703125, 1.53125, 0.10687255859375, 0.379150390625, 2.080078125, 0.26806640625, 0.09912109375, 0.285400390625, 0.05108642578125, 0.791015625, 1.0859375, 0.88037109375, 0.298828125, 0.27099609375, 0.85400390625, 0.74267578125, 0.95458984375, 0.0291595458984375, 0.2076416015625, 0.1492919921875, 1.126953125, 0.0091094970703125, 2.12109375, 2.71484375, 0.4375, 0.427978515625, 0.10943603515625, 0.124267578125, 0.0278167724609375, 0.0003154277801513672, 0.08502197265625, 0.253662109375, 2.384185791015625e-06, 0.054931640625, 0.01198577880859375, 0.0024929046630859375, 0.0011548995971679688, 0.00122833251953125, 0.2076416015625, 0.0557861328125, 0.0017480850219726562, 0.30126953125, 1.107421875, 0.00927734375, 0.1307373046875, 0.01490020751953125, 0.295654296875, 0.0699462890625, 0.00030493736267089844, 0.300537109375, 2.447265625], "tokens": [664, 319, 8276, 3088, 687, 8329, 4009, 664, 569, 334, 562, 763, 4131, 1078, 26, 8115, 1078, 1603, 27, 301, 284, 1603, 32, 470, 13719, 26, 8075, 293, 284, 1603, 32, 470, 571, 900, 101, 26, 4318, 101, 293, 284, 1603, 32, 470, 2031, 26, 2184, 293, 284, 1603, 32, 470, 4058]}
{"line_number": 2143, "line_type": "original", "code": "  }", "entropy": 2.533203125, "is_bug_line": false, "sus_score": 0.05986843400892496, "per_token_entropy": [1.73828125, 3.328125], "tokens": [225, 320]}
{"line_number": 2143, "line_type": "generated", "code": "  */\n  public void saveState(CompilerState compilerState) {\n    Preconditions.checkState(\n        compilerState.getOptions() == null,\n        \"CompilerState.getOptions() must be null\");\n    Preconditions.checkState(\n        compilerState.getEx", "entropy": 0.50048828125, "is_bug_line": false, "sus_score": 0.05986843400892496, "per_token_entropy": [1.73828125, 0.92333984375, 0.06280517578125, 0.437744140625, 0.5234375, 0.91455078125, 1.767578125, 0.2265625, 1.138671875, 0.84521484375, 1.138671875, 0.0010080337524414062, 0.0193634033203125, 0.16064453125, 0.1204833984375, 1.0380859375, 0.00189208984375, 0.02276611328125, 0.267822265625, 0.10687255859375, 1.607421875, 0.57177734375, 0.048095703125, 0.31201171875, 0.96240234375, 0.75732421875, 0.0916748046875, 0.5087890625, 0.7783203125, 0.1875, 0.01111602783203125, 1.3984375, 0.47021484375, 1.5029296875, 0.438720703125, 0.25732421875, 0.9921875, 0.19580078125, 0.038848876953125, 0.59521484375, 0.418701171875, 0.56640625, 4.3392181396484375e-05, 0.0006108283996582031, 0.0260467529296875, 0.0038852691650390625, 0.1761474609375, 0.0355224609375, 0.01256561279296875, 0.0006103515625, 0.6025390625, 1.013671875], "tokens": [225, 569, 334, 562, 763, 4131, 1078, 26, 8115, 1078, 8980, 1078, 27, 301, 284, 40596, 32, 1553, 1078, 26, 291, 8980, 1078, 32, 49151, 346, 610, 744, 30, 291, 313, 8115, 1078, 32, 49151, 346, 2298, 526, 744, 724, 284, 40596, 32, 1553, 1078, 26, 291, 8980, 1078, 32, 371, 571]}
{"line_number": 1515, "line_type": "original", "code": "    return runInCompilerThread(new Callable<String>() {", "entropy": 0.7412109375, "is_bug_line": false, "sus_score": 0.051639777949432225, "per_token_entropy": [4.2890625, 2.78515625, 2.208984375, 0.00856781005859375, 0.0014257431030273438, 0.00235748291015625, 0.0345458984375, 0.037200927734375, 0.098388671875, 0.0138702392578125, 0.00983428955078125, 0.098876953125, 0.047271728515625], "tokens": [264, 442, 1420, 383, 8115, 3021, 26, 890, 27087, 46, 652, 6940, 301]}
{"line_number": 1515, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Converts a subtree back to js code.\n   */\n  public String toSource(Node n) {\n    CodeBuilder cb = new CodeBuilder();\n    toSource(cb, 0, n);\n    return cb.toString();", "entropy": 0.2147216796875, "is_bug_line": false, "sus_score": 0.051639777949432225, "per_token_entropy": [0.96875, 0.5791015625, 0.1365966796875, 0.60546875, 0.038330078125, 0.0014743804931640625, 0.36474609375, 0.6826171875, 1.947265625, 0.494873046875, 0.0162200927734375, 0.077392578125, 0.07373046875, 0.10455322265625, 0.197509765625, 0.1773681640625, 0.02655029296875, 1.568359375, 0.576171875, 0.040557861328125, 0.0229339599609375, 0.004638671875, 0.059906005859375, 0.38330078125, 0.018218994140625, 0.003711700439453125, 0.164306640625, 1.1533203125, 0.0003199577331542969, 0.03399658203125, 0.0008730888366699219, 0.0007920265197753906, 0.0006012916564941406, 1.2755393981933594e-05, 0.01218414306640625, 0.01374053955078125, 0.12261962890625, 6.67572021484375e-05, 0.0030059814453125, 0.0012149810791015625, 0.0002892017364501953, 0.42041015625, 0.0302886962890625, 0.003875732421875, 0.0017261505126953125, 0.00359344482421875, 0.0080108642578125, 0.00937652587890625, 0.0008921623229980469, 0.00012934207916259766, 0.003692626953125, 0.0009565353393554688], "tokens": [334, 320, 719, 1022, 664, 319, 25337, 312, 37255, 1751, 372, 4060, 1340, 32, 664, 569, 334, 562, 892, 372, 2028, 26, 1212, 310, 27, 301, 284, 4402, 1796, 6596, 280, 537, 4402, 1796, 473, 284, 372, 2028, 26, 2500, 30, 225, 34, 30, 310, 293, 284, 442, 6596, 32, 3108, 473]}
{"line_number": 1631, "line_type": "original", "code": "    runInCompilerThread(new Callable<Void>() {", "entropy": 1.3349609375, "is_bug_line": false, "sus_score": 0.05006261743217589, "per_token_entropy": [4.671875, 9.8359375, 0.10028076171875, 0.04217529296875, 0.007129669189453125, 0.0849609375, 0.11962890625, 1.0068359375, 0.013214111328125, 0.07611083984375, 0.0159912109375, 0.042144775390625], "tokens": [264, 1420, 383, 8115, 3021, 26, 890, 27087, 46, 10716, 6940, 301]}
{"line_number": 1631, "line_type": "generated", "code": "\n          if (lastChar!= ';' || secondLastChar == '.') {\n            cb.append(\";\\n\");\n          }\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings have ended.", "entropy": 0.292724609375, "is_bug_line": false, "sus_score": 0.05006261743217589, "per_token_entropy": [0.51708984375, 0.369873046875, 0.595703125, 0.6025390625, 3.2782554626464844e-05, 0.1610107421875, 0.5986328125, 1.373046875, 1.3759765625, 2.276897430419922e-05, 1.7881393432617188e-06, 0.055023193359375, 1.59375, 0.0008306503295898438, 0.0277557373046875, 0.099365234375, 9.334087371826172e-05, 0.0114288330078125, 0.252197265625, 0.556640625, 0.00015461444854736328, 0.03582763671875, 0.0298004150390625, 0.0005292892456054688, 0.5703125, 0.00039196014404296875, 0.57177734375, 1.0419921875, 1.236328125, 0.29736328125, 0.2113037109375, 0.0193939208984375, 0.1170654296875, 0.004283905029296875, 0.00489044189453125, 0.0276947021484375, 0.1904296875, 0.31201171875, 0.06304931640625, 0.0230865478515625, 0.0194549560546875, 0.07244873046875, 0.181640625, 0.0007810592651367188, 3.3855438232421875e-05, 0.0333251953125, 0.01190948486328125, 0.07904052734375, 0.014739990234375, 1.259765625, 0.40234375, 0.2039794921875], "tokens": [616, 415, 308, 2135, 2659, 863, 40551, 1276, 3100, 3267, 2659, 610, 41723, 301, 324, 6596, 32, 1689, 440, 8871, 96, 724, 616, 320, 291, 320, 584, 434, 1670, 2017, 438, 312, 2080, 1914, 1992, 30, 1615, 14190, 372, 561, 688, 322, 1550, 291, 434, 3051, 1541, 1182, 22718, 1159, 22947, 32]}
{"line_number": 1690, "line_type": "original", "code": "  }", "entropy": 4.8046875, "is_bug_line": false, "sus_score": 0.05006261743217589, "per_token_entropy": [4.66796875, 4.9453125], "tokens": [225, 320]}
{"line_number": 1690, "line_type": "generated", "code": "\n      int len = str.length();\n      int lastNewLine = str.lastIndexOf('\\n');\n      if (lastNewLine == -1) {\n        colCount += len;\n      } else {\n        lineCount += 1 + str.substring(lastNewLine", "entropy": 0.306396484375, "is_bug_line": false, "sus_score": 0.05006261743217589, "per_token_entropy": [0.6298828125, 1.85546875, 2.4296875, 0.006381988525390625, 0.01262664794921875, 0.0008916854858398438, 0.0029125213623046875, 0.0027217864990234375, 0.073486328125, 1.1611328125, 1.5302734375, 1.955078125, 0.343994140625, 1.07421875, 0.00016820430755615234, 0.0002675056457519531, 0.271484375, 0.00016129016876220703, 0.06988525390625, 0.127685546875, 0.388916015625, 0.0019893646240234375, 0.0191497802734375, 1.9073486328125e-05, 0.89306640625, 0.033203125, 0.00040411949157714844, 0.014404296875, 0.0014858245849609375, 0.007686614990234375, 0.306640625, 6.568431854248047e-05, 0.002750396728515625, 0.0127105712890625, 0.00021696090698242188, 0.034393310546875, 6.413459777832031e-05, 0.0022830963134765625, 0.07073974609375, 0.0036334991455078125, 1.0146484375, 6.258487701416016e-05, 0.01222991943359375, 0.630859375, 0.00033473968505859375, 0.1630859375, 0.2117919921875, 0.0009703636169433594, 0.3671875, 5.3882598876953125e-05, 0.188232421875, 6.92605972290039e-05], "tokens": [397, 629, 2069, 280, 596, 32, 1322, 473, 397, 629, 2401, 19710, 280, 596, 32, 27296, 9442, 96, 895, 397, 415, 308, 2135, 19710, 610, 429, 35, 27, 301, 291, 932, 1534, 1454, 2069, 45, 397, 320, 813, 301, 291, 1628, 1534, 1454, 225, 35, 474, 596, 32, 8723, 26, 2135, 19710]}
{"line_number": 1127, "line_type": "original", "code": "    return moduleGraph;", "entropy": 3.62890625, "is_bug_line": false, "sus_score": 0.04194061219900216, "per_token_entropy": [2.115234375, 2.728515625, 8.9921875, 0.4453125, 3.861328125], "tokens": [264, 442, 2297, 3406, 45]}
{"line_number": 1127, "line_type": "generated", "code": "\n    return symbolTable;\n  }\n\n  public void addExtern(Node n) {\n    externsRoot.addChildToBack(n);\n  }\n\n  @Override\n  public void report(JSError error) {\n    if (error.isWarning())", "entropy": 0.49658203125, "is_bug_line": false, "sus_score": 0.04194061219900216, "per_token_entropy": [1.0205078125, 1.791015625, 0.150634765625, 9.143352508544922e-05, 0.053863525390625, 0.01458740234375, 0.0007958412170410156, 0.20703125, 1.8974609375, 1.427734375, 2.3671875, 1.921875, 4.291534423828125e-06, 0.28857421875, 0.416259765625, 0.6650390625, 0.1483154296875, 0.00562286376953125, 0.1258544921875, 1.3564453125, 0.043548583984375, 0.028076171875, 0.0024051666259765625, 0.4892578125, 0.005634307861328125, 0.0732421875, 0.0014429092407226562, 0.01247406005859375, 0.037872314453125, 0.2066650390625, 0.000560760498046875, 0.11163330078125, 1.3291015625, 0.0260162353515625, 0.0033397674560546875, 0.205322265625, 1.4013671875, 2.068359375, 0.32861328125, 0.525390625, 7.331371307373047e-05, 0.0223846435546875, 0.0016021728515625, 0.0008783340454101562, 0.158203125, 1.24609375, 0.222412109375, 0.46240234375, 0.2919921875, 0.56591796875, 1.5185546875, 0.57080078125], "tokens": [284, 442, 6977, 1599, 45, 334, 320, 719, 562, 763, 1015, 571, 900, 26, 1212, 310, 27, 301, 284, 12098, 101, 4058, 32, 21545, 705, 2495, 26, 96, 293, 334, 320, 719, 477, 1788, 334, 562, 763, 3639, 26, 60, 21887, 1048, 27, 301, 284, 415, 308, 731, 32, 297, 5711, 1157]}
{"line_number": 533, "line_type": "original", "code": "    Preconditions.checkState(jsRoot == null);", "entropy": 1.30078125, "is_bug_line": false, "sus_score": 0.03993615319154358, "per_token_entropy": [4.0703125, 9.8125, 0.007709503173828125, 0.00861358642578125, 0.0149383544921875, 0.019073486328125, 0.308837890625, 0.0011568069458007812, 0.02740478515625, 0.00037860870361328125, 0.035186767578125], "tokens": [264, 40596, 32, 1553, 1078, 26, 754, 4058, 610, 744, 293]}
{"line_number": 533, "line_type": "generated", "code": "\n      public Result call() {\n        try {\n          return compileInternal();\n        } catch (Throwable e) {\n          if (e instanceof OutOfMemoryError) {\n            throw e;\n          }\n          report(JSError.make(INTERNAL_ERROR, e", "entropy": 0.43701171875, "is_bug_line": false, "sus_score": 0.03993615319154358, "per_token_entropy": [0.79931640625, 0.154541015625, 0.007266998291015625, 0.0009217262268066406, 0.0022449493408203125, 0.8876953125, 0.27099609375, 1.5966796875, 0.028839111328125, 0.2225341796875, 1.5712890625, 1.0341796875, 0.6513671875, 0.0122528076171875, 0.020843505859375, 9.143352508544922e-05, 0.52783203125, 0.004680633544921875, 2.16015625, 0.11798095703125, 0.0011005401611328125, 0.0009598731994628906, 0.1290283203125, 2.380859375, 0.1400146484375, 1.2568359375, 0.072265625, 1.330078125, 0.0028553009033203125, 0.026519775390625, 0.0017986297607421875, 0.07598876953125, 0.0047454833984375, 0.042694091796875, 1.5908203125, 0.44970703125, 0.00029087066650390625, 0.0245513916015625, 7.68899917602539e-05, 0.39697265625, 1.8154296875, 0.175048828125, 1.025390625, 0.0032215118408203125, 0.0001049041748046875, 0.004756927490234375, 0.281982421875, 1.1533203125, 0.00580596923828125, 0.089599609375, 0.0306549072265625, 0.12841796875], "tokens": [397, 562, 4703, 1476, 346, 301, 291, 1596, 301, 616, 442, 8329, 4292, 473, 291, 320, 2368, 308, 14085, 484, 27, 301, 616, 415, 308, 87, 5113, 4306, 1419, 5017, 924, 27, 301, 324, 1422, 484, 45, 616, 320, 616, 3639, 26, 60, 21887, 32, 2682, 26, 16758, 81, 2930, 30, 484]}
