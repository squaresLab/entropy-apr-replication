{"line_number": 124, "line_type": "original", "code": "    add(\",\");", "entropy": 7.46875, "is_bug_line": false, "sus_score": 0.04671418358670517, "per_token_entropy": [5.6640625, 7.11328125, 9.625], "tokens": [264, 1015, 35314]}
{"line_number": 124, "line_type": "generated", "code": "\n  void append(String str) {\n  }\n\n  void append(char ch) {\n  }\n\n  void append(int i) {\n  }\n\n  void append(double d) {\n  }\n\n  void append(boolean b) {\n  }\n\n  void", "entropy": 0.35595703125, "is_bug_line": false, "sus_score": 0.04671418358670517, "per_token_entropy": [0.78076171875, 0.5341796875, 1.43359375, 1.2138671875, 0.496826171875, 0.335205078125, 0.05291748046875, 0.0281829833984375, 0.6650390625, 0.0034465789794921875, 0.59912109375, 0.447998046875, 0.392578125, 0.70556640625, 1.4482421875, 0.66552734375, 0.047943115234375, 0.0012054443359375, 0.36474609375, 0.0003707408905029297, 0.322021484375, 0.24365234375, 0.251708984375, 0.290283203125, 0.96484375, 1.4736328125, 0.0098114013671875, 0.0010004043579101562, 0.11871337890625, 0.0007529258728027344, 0.28125, 0.152099609375, 0.2022705078125, 0.24609375, 1.1005859375, 0.076171875, 0.0143585205078125, 0.0010766983032226562, 0.01105499267578125, 0.00099945068359375, 0.274658203125, 0.173828125, 0.2357177734375, 0.4462890625, 0.6865234375, 0.0782470703125, 0.0025691986083984375, 0.0019054412841796875, 0.06640625, 0.0010128021240234375, 0.323486328125, 0.2381591796875], "tokens": [334, 763, 5489, 26, 652, 596, 27, 301, 334, 320, 719, 763, 5489, 26, 1594, 663, 27, 301, 334, 320, 719, 763, 5489, 26, 410, 595, 27, 301, 334, 320, 719, 763, 5489, 26, 2627, 343, 27, 301, 334, 320, 719, 763, 5489, 26, 4398, 323, 27, 301, 334, 320, 719, 763]}
{"line_number": 125, "line_type": "original", "code": "    maybeLineBreak();", "entropy": 1.4365234375, "is_bug_line": false, "sus_score": 0.04671418358670517, "per_token_entropy": [4.65625, 2.240234375, 0.28369140625, 0.0001068115234375, 0.002422332763671875], "tokens": [264, 8762, 1811, 10438, 473]}
{"line_number": 125, "line_type": "generated", "code": "\n  }\n\n  void endCaseBody() {\n    endBlock();\n  }\n\n  void endSwitch() {\n    endBlock();\n  }\n\n  void endFor() {\n    endBlock();\n  }\n\n  void endWhile() {\n    endBlock();\n  }\n\n ", "entropy": 0.264892578125, "is_bug_line": false, "sus_score": 0.04671418358670517, "per_token_entropy": [0.38916015625, 0.0006546974182128906, 0.08697509765625, 0.22802734375, 0.71240234375, 0.079833984375, 0.168212890625, 0.038055419921875, 0.0083465576171875, 0.70947265625, 0.83056640625, 0.8017578125, 0.5322265625, 0.174560546875, 0.0006327629089355469, 0.1513671875, 0.2479248046875, 1.548828125, 1.271484375, 0.283203125, 0.00215911865234375, 0.05731201171875, 0.44189453125, 0.1676025390625, 0.1982421875, 0.08795166015625, 0.0006856918334960938, 0.10064697265625, 0.1749267578125, 0.7802734375, 1.009765625, 0.347900390625, 0.0012502670288085938, 0.0265350341796875, 0.30322265625, 0.124267578125, 0.18505859375, 0.0362548828125, 0.0002548694610595703, 0.033782958984375, 0.0550537109375, 0.158935546875, 1.0693359375, 0.00821685791015625, 0.0004315376281738281, 0.0021209716796875, 0.0538330078125, 0.007415771484375, 0.0304412841796875, 0.00949859619140625, 0.00021278858184814453, 0.036285400390625], "tokens": [334, 320, 719, 763, 943, 2732, 3050, 346, 301, 284, 943, 2227, 473, 334, 320, 719, 763, 943, 7934, 346, 301, 284, 943, 2227, 473, 334, 320, 719, 763, 943, 1562, 346, 301, 284, 943, 2227, 473, 334, 320, 719, 763, 943, 16225, 346, 301, 284, 943, 2227, 473, 334, 320, 719]}
{"line_number": 126, "line_type": "original", "code": "  }", "entropy": 1.251953125, "is_bug_line": false, "sus_score": 0.04671418358670517, "per_token_entropy": [2.37890625, 0.12420654296875], "tokens": [225, 320]}
{"line_number": 126, "line_type": "generated", "code": "\n\n    endLine();\n  }\n\n  void beginSwitchCaseBody() {\n    append(\":\");", "entropy": 0.4775390625, "is_bug_line": false, "sus_score": 0.04671418358670517, "per_token_entropy": [2.099609375, 1.31640625, 0.0772705078125, 0.00838470458984375, 0.46826171875, 0.0013151168823242188, 0.130859375, 0.251708984375, 1.02734375, 1.259765625, 0.72412109375, 0.24658203125, 0.10272216796875, 0.00408935546875, 0.1190185546875, 0.49609375, 0.23046875, 0.032440185546875], "tokens": [446, 943, 1811, 473, 334, 320, 719, 763, 4240, 7934, 2732, 3050, 346, 301, 284, 5489, 17919, 724]}
{"line_number": 185, "line_type": "original", "code": "      return;", "entropy": 3.798828125, "is_bug_line": false, "sus_score": 0.03853285604264582, "per_token_entropy": [5.703125, 5.51953125, 0.1768798828125], "tokens": [647, 442, 45]}
{"line_number": 185, "line_type": "generated", "code": "\n    }\n  }\n\n  void addComment(String comment) {\n    maybeEndStatement();\n    if (comment.startsWith(\"/**\")) {\n      append(\" * \");\n      append(comment.substring(3));\n    } else if (comment.startsWith(\"/*", "entropy": 0.39306640625, "is_bug_line": false, "sus_score": 0.03853285604264582, "per_token_entropy": [0.123779296875, 0.001476287841796875, 0.6005859375, 0.000553131103515625, 0.10870361328125, 0.59521484375, 0.74462890625, 2.8046875, 0.039642333984375, 0.2275390625, 0.763671875, 0.1680908203125, 0.00606536865234375, 0.10211181640625, 0.66796875, 0.0657958984375, 0.00276947021484375, 0.0018644332885742188, 0.55322265625, 2.251953125, 0.280517578125, 0.654296875, 0.124755859375, 0.8330078125, 0.310546875, 1.021484375, 0.26123046875, 0.00362396240234375, 0.05157470703125, 1.6923828125, 0.63427734375, 1.2470703125, 0.80224609375, 0.480224609375, 0.56396484375, 0.0640869140625, 0.0112457275390625, 0.1690673828125, 0.0472412109375, 0.026336669921875, 0.09014892578125, 0.156982421875, 0.51611328125, 0.00063323974609375, 0.017578125, 0.340576171875, 0.006290435791015625, 0.006999969482421875, 0.0007190704345703125, 0.01383209228515625, 0.11859130859375, 0.062347412109375], "tokens": [284, 320, 334, 320, 719, 763, 1015, 6315, 26, 652, 5093, 27, 301, 284, 8762, 2102, 5495, 473, 284, 415, 308, 3647, 32, 13912, 440, 1332, 2131, 301, 397, 5489, 440, 319, 7170, 397, 5489, 26, 3647, 32, 8723, 26, 37, 876, 284, 320, 813, 415, 308, 3647, 32, 13912, 440, 1109]}
{"line_number": 234, "line_type": "original", "code": "      maybeCutLine();", "entropy": 6.375, "is_bug_line": false, "sus_score": 0.03425273568971061, "per_token_entropy": [6.14453125, 6.15625, 11.90625, 6.4375, 1.2236328125], "tokens": [647, 8762, 18024, 1811, 473]}
{"line_number": 234, "line_type": "generated", "code": "\n  boolean shouldWrap(Node n) {\n    Node body = n.getLastChild();\n    return body!= null && body.hasOneChild() &&\n        (n.isFor() || n.isIf() || n.isCase());\n  }\n\n ", "entropy": 0.46533203125, "is_bug_line": false, "sus_score": 0.03425273568971061, "per_token_entropy": [0.9501953125, 0.52978515625, 0.62158203125, 0.98974609375, 1.9013671875, 0.299072265625, 0.2054443359375, 0.06475830078125, 0.0029048919677734375, 0.131591796875, 1.9541015625, 0.71142578125, 0.1549072265625, 0.673828125, 0.032318115234375, 0.1258544921875, 0.0012884140014648438, 0.0274658203125, 0.1361083984375, 1.361328125, 0.87841796875, 0.7431640625, 0.00704193115234375, 0.099365234375, 0.479736328125, 0.00597381591796875, 1.1923828125, 0.01157379150390625, 1.6005859375, 0.083984375, 1.3173828125, 0.6640625, 0.39892578125, 0.0091094970703125, 1.5537109375, 0.0221710205078125, 0.015869140625, 0.022735595703125, 0.154052734375, 0.00023663043975830078, 0.01495361328125, 0.0189056396484375, 0.64404296875, 0.335693359375, 0.065185546875, 0.0008411407470703125, 0.01354217529296875, 2.166015625, 0.5361328125, 0.0294342041015625, 0.0008234977722167969, 0.237060546875], "tokens": [334, 1905, 1395, 10001, 26, 1212, 310, 27, 301, 284, 4004, 3361, 280, 310, 32, 20197, 2931, 473, 284, 442, 3361, 863, 744, 962, 3361, 32, 41906, 2931, 346, 962, 291, 308, 96, 32, 297, 1562, 346, 1276, 310, 32, 297, 2797, 346, 1276, 310, 32, 297, 2732, 1035, 334, 320, 719]}
{"line_number": 205, "line_type": "original", "code": "    append(op);", "entropy": 4.55078125, "is_bug_line": false, "sus_score": 0.034205946878753044, "per_token_entropy": [4.02734375, 5.04296875, 0.351318359375, 11.4765625, 1.8515625], "tokens": [264, 5489, 26, 520, 293]}
{"line_number": 205, "line_type": "generated", "code": "\n      } else {\n        while (mantissa * Math.pow(10, exp) == value) {\n          mantissa *= 10;\n          exp--;\n        }", "entropy": 0.1884765625, "is_bug_line": false, "sus_score": 0.034205946878753044, "per_token_entropy": [0.6025390625, 0.01739501953125, 0.67578125, 0.128173828125, 0.30859375, 1.29296875, 0.03448486328125, 0.2724609375, 3.6954879760742188e-06, 2.0265579223632812e-06, 0.865234375, 0.4833984375, 4.851818084716797e-05, 0.0009355545043945312, 0.0010461807250976562, 0.0251617431640625, 0.0072174072265625, 0.005977630615234375, 0.00971221923828125, 1.697265625, 0.1998291015625, 0.0201568603515625, 0.064208984375, 0.00939178466796875, 0.028961181640625, 0.234619140625, 4.76837158203125e-07, 1.9073486328125e-06, 0.095703125, 0.001705169677734375, 0.0006570816040039062, 0.004596710205078125, 0.00063323974609375, 0.0025959014892578125, 0.00275421142578125, 0.060211181640625, 0.00408172607421875, 5.8770179748535156e-05], "tokens": [397, 320, 813, 301, 291, 2218, 308, 95, 29913, 2496, 319, 4175, 32, 7527, 26, 35, 34, 30, 2910, 27, 610, 786, 27, 301, 616, 345, 29913, 2496, 10439, 225, 35, 34, 45, 616, 2910, 10612, 291, 320]}
{"line_number": 206, "line_type": "original", "code": "  }", "entropy": 2.427734375, "is_bug_line": false, "sus_score": 0.034205946878753044, "per_token_entropy": [4.1796875, 0.67578125], "tokens": [225, 320]}
{"line_number": 206, "line_type": "generated", "code": "\n    } else {\n      add(Double.toString(x));\n    }\n  }\n\n  void addString(String s) {\n    // This is not pretty printing. This is to prevent misparsing of\n    // 'x' + 'y' as '", "entropy": 0.37548828125, "is_bug_line": false, "sus_score": 0.034205946878753044, "per_token_entropy": [0.77099609375, 0.006504058837890625, 0.055633544921875, 0.113037109375, 0.267578125, 1.5810546875, 0.0462646484375, 0.2958984375, 0.0299835205078125, 0.03204345703125, 0.0017910003662109375, 0.0053558349609375, 0.03338623046875, 0.076171875, 4.184246063232422e-05, 0.1197509765625, 0.00022482872009277344, 0.12188720703125, 0.492919921875, 0.279296875, 0.478759765625, 0.03436279296875, 0.033935546875, 0.257080078125, 0.093017578125, 0.00322723388671875, 0.13134765625, 1.8359375, 1.5615234375, 0.10260009765625, 0.07537841796875, 0.00800323486328125, 0.007266998291015625, 0.076171875, 0.384765625, 0.0020313262939453125, 0.07269287109375, 0.04718017578125, 0.154296875, 0.01169586181640625, 0.043914794921875, 0.576171875, 0.002620697021484375, 2.88671875, 1.6357421875, 1.2568359375, 0.312744140625, 1.1689453125, 0.6181640625, 0.143798828125, 0.8955078125, 0.291259765625], "tokens": [284, 320, 813, 301, 397, 1015, 26, 4075, 32, 3108, 26, 106, 876, 284, 320, 334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 434, 1348, 438, 646, 10191, 23582, 32, 1348, 438, 372, 9454, 3980, 26801, 432, 284, 434, 330, 106, 25, 474, 330, 107, 25, 619, 330]}
{"line_number": 222, "line_type": "original", "code": "    } else if (prev == '-' && first == '>') {", "entropy": 2.15625, "is_bug_line": false, "sus_score": 0.03396831102433787, "per_token_entropy": [3.162109375, 9.65625, 2.87109375, 0.411865234375, 0.1217041015625, 6.25, 0.214111328125, 3.220703125, 0.1630859375, 2.474609375, 0.0229339599609375, 1.46875, 0.136474609375, 0.0144805908203125], "tokens": [264, 320, 813, 415, 308, 5586, 610, 20514, 962, 1932, 610, 330, 22639, 301]}
{"line_number": 222, "line_type": "generated", "code": "       Character.isLetterOrDigit(ch));\n  }\n\n  void addString(String s) {\n    // TODO(nicksantos): Do something smarter here.\n    add(s);\n  }\n\n  void addToken(Token token)", "entropy": 0.48974609375, "is_bug_line": false, "sus_score": 0.03396831102433787, "per_token_entropy": [2.076171875, 0.5546875, 0.00033283233642578125, 0.0005898475646972656, 0.1265869140625, 0.2529296875, 2.47955322265625e-05, 0.002044677734375, 0.0005960464477539062, 0.1494140625, 0.028564453125, 0.0007281303405761719, 0.138916015625, 0.89404296875, 0.78271484375, 0.54345703125, 0.042816162109375, 0.035430908203125, 0.2381591796875, 0.126953125, 0.0039043426513671875, 0.060302734375, 1.8515625, 1.6953125, 0.7041015625, 0.67529296875, 0.021636962890625, 0.00010085105895996094, 0.0011701583862304688, 0.01419830322265625, 3.09375, 1.5625, 2.22265625, 0.0029468536376953125, 2.6226043701171875e-06, 1.150390625, 0.35205078125, 0.3427734375, 0.54296875, 0.444580078125, 0.26025390625, 0.10064697265625, 0.017669677734375, 0.0008001327514648438, 0.0684814453125, 0.291748046875, 0.66748046875, 2.08203125, 0.0306549072265625, 0.60107421875, 0.472412109375, 0.136962890625], "tokens": [958, 15041, 32, 297, 17663, 1527, 21530, 26, 380, 876, 334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 434, 4296, 26, 96, 6758, 278, 10369, 711, 3278, 4660, 309, 3303, 391, 2442, 32, 284, 1015, 26, 101, 293, 334, 320, 719, 763, 1015, 1763, 26, 1763, 2404, 27]}
{"line_number": 209, "line_type": "original", "code": "    maybeEndStatement();", "entropy": 3.359375, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [4.61328125, 7.91796875, 4.21875, 0.01343536376953125, 0.030181884765625], "tokens": [264, 8762, 2102, 5495, 473]}
{"line_number": 209, "line_type": "generated", "code": "\n        add(Long.toString(value));\n      }\n    } else {\n      add(Double.toString(x));\n    }\n  }\n\n  void addString(String s) {\n    if (s.indexOf(\"\\\\\") == -1) {\n      add", "entropy": 0.271728515625, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [0.962890625, 0.299560546875, 0.01390838623046875, 0.085693359375, 0.00011789798736572266, 0.0007257461547851562, 0.00458526611328125, 0.1351318359375, 0.036163330078125, 0.103271484375, 9.906291961669922e-05, 0.081298828125, 6.210803985595703e-05, 0.005039215087890625, 0.10809326171875, 0.64208984375, 0.62548828125, 0.0226898193359375, 0.08123779296875, 0.003265380859375, 0.007610321044921875, 0.0010814666748046875, 0.004024505615234375, 0.048553466796875, 0.040374755859375, 9.548664093017578e-05, 0.0911865234375, 0.00016689300537109375, 0.07562255859375, 0.52294921875, 0.445068359375, 0.44970703125, 0.038787841796875, 0.03240966796875, 0.23291015625, 0.09771728515625, 0.004291534423828125, 0.18359375, 2.47265625, 0.17919921875, 0.5712890625, 0.2125244140625, 1.0947265625, 1.2744140625, 0.257080078125, 1.4404296875, 0.0011587142944335938, 0.00049591064453125, 0.63623046875, 0.0028324127197265625, 0.07684326171875, 0.413818359375], "tokens": [291, 1015, 26, 3952, 32, 3108, 26, 853, 876, 397, 320, 284, 320, 813, 301, 397, 1015, 26, 4075, 32, 3108, 26, 106, 876, 284, 320, 334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 415, 308, 101, 32, 7142, 22899, 657, 610, 429, 35, 27, 301, 397, 1015]}
{"line_number": 211, "line_type": "original", "code": "    char first = op.charAt(0);", "entropy": 2.345703125, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [4.75, 6.203125, 2.60546875, 0.1903076171875, 7.44140625, 2.142578125, 0.0767822265625, 0.000408172607421875, 0.020111083984375, 0.01849365234375], "tokens": [264, 1351, 1932, 280, 3089, 32, 15611, 26, 34, 293]}
{"line_number": 211, "line_type": "generated", "code": "\n    } else {\n      add(Double.toString(x));\n    }\n  }\n\n  void addString(String s) {\n    add(s);\n  }\n\n  void addRegexp(String s) {\n    add(s);\n  }\n\n  void add", "entropy": 0.195556640625, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [0.1405029296875, 0.00876617431640625, 0.009735107421875, 0.1868896484375, 0.053253173828125, 0.50537109375, 0.0224151611328125, 0.100341796875, 0.0037631988525390625, 0.0084381103515625, 0.0012464523315429688, 0.00421142578125, 0.0433349609375, 0.27294921875, 0.00022852420806884766, 0.1982421875, 0.0003204345703125, 0.10406494140625, 0.497314453125, 0.30859375, 0.382080078125, 0.039337158203125, 0.03704833984375, 0.2205810546875, 0.09588623046875, 0.004184722900390625, 0.09588623046875, 1.3466796875, 0.77685546875, 0.6123046875, 0.113525390625, 0.094482421875, 0.0007691383361816406, 0.08465576171875, 0.294677734375, 0.4013671875, 1.3916015625, 0.016937255859375, 0.031890869140625, 0.2432861328125, 0.0738525390625, 0.0004520416259765625, 0.046875, 0.368408203125, 0.200439453125, 0.0091094970703125, 0.0136566162109375, 0.0374755859375, 9.143352508544922e-05, 0.073486328125, 0.210205078125, 0.38671875], "tokens": [284, 320, 813, 301, 397, 1015, 26, 4075, 32, 3108, 26, 106, 876, 284, 320, 334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 1015, 26, 101, 293, 334, 320, 719, 763, 1015, 29583, 26, 652, 309, 27, 301, 284, 1015, 26, 101, 293, 334, 320, 719, 763, 1015]}
{"line_number": 212, "line_type": "original", "code": "    char prev = getLastChar();", "entropy": 2.416015625, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [3.73046875, 8.234375, 4.55859375, 0.355712890625, 0.0252838134765625, 0.0007638931274414062, 0.0036258697509765625], "tokens": [264, 1351, 7323, 280, 36695, 2659, 473]}
{"line_number": 212, "line_type": "generated", "code": "\n    }\n  }\n\n  void maybeEndStatement() {\n    if (sawFunction) {\n      sawFunction = false;\n      return;\n    }\n\n    if (hasLine()) {\n      return;\n    }\n\n    // If we are at the start of a", "entropy": 0.5634765625, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [0.55712890625, 0.0033664703369140625, 0.11572265625, 0.00018739700317382812, 0.074951171875, 0.49951171875, 1.7509765625, 0.798828125, 0.0238800048828125, 0.005218505859375, 0.0007328987121582031, 0.05133056640625, 0.82861328125, 0.466064453125, 1.015625, 0.0002474784851074219, 1.109375, 0.303955078125, 0.020843505859375, 0.0260162353515625, 1.2158203125, 0.003856658935546875, 0.0025081634521484375, 0.002117156982421875, 9.226799011230469e-05, 0.375244140625, 0.96240234375, 0.0017042160034179688, 0.01355743408203125, 0.0002491474151611328, 0.3076171875, 1.2373046875, 0.208984375, 3.87890625, 1.4345703125, 1.0654296875, 0.01044464111328125, 0.019256591796875, 1.2333984375, 0.0005764961242675781, 0.01727294921875, 0.00010967254638671875, 0.0889892578125, 1.64453125, 2.44921875, 0.998046875, 1.50390625, 1.1884765625, 0.0958251953125, 0.98095703125, 0.0167694091796875, 0.68603515625], "tokens": [284, 320, 334, 320, 719, 763, 8762, 2102, 5495, 346, 301, 284, 415, 308, 101, 812, 2447, 27, 301, 397, 19301, 2447, 280, 901, 45, 397, 442, 45, 284, 320, 446, 415, 308, 2040, 1811, 1157, 301, 397, 442, 45, 284, 320, 446, 434, 1670, 996, 884, 821, 322, 1477, 432, 312]}
{"line_number": 214, "line_type": "original", "code": "    if ((first == '+' || first == '-') && prev == first) {", "entropy": 1.6376953125, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [5.9296875, 1.509765625, 2.853515625, 6.390625, 0.349365234375, 2.63671875, 0.083984375, 0.035614013671875, 0.0010423660278320312, 0.0166015625, 0.06597900390625, 1.814453125, 0.1409912109375, 4.234375, 0.140380859375, 0.004180908203125], "tokens": [264, 415, 1833, 2232, 610, 43563, 1276, 1932, 610, 40317, 962, 7323, 610, 1932, 27, 301]}
{"line_number": 214, "line_type": "generated", "code": "\n  }\n\n  private static boolean isNegativeZero(double x) {\n    return (1.0 / x) == Double.NEGATIVE_INFINITY;\n  }\n\n  void addString(String s) {\n    add(s);\n  }\n\n  void addRegexp", "entropy": 0.3271484375, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [0.52197265625, 0.11358642578125, 0.286376953125, 2.1015625, 0.98828125, 0.09710693359375, 0.0112762451171875, 0.049591064453125, 0.00031638145446777344, 0.0153961181640625, 0.00800323486328125, 0.2410888671875, 0.0010080337524414062, 0.0007543563842773438, 0.0234375, 0.2027587890625, 2.03125, 1.0, 0.5439453125, 0.012786865234375, 0.1182861328125, 0.00298309326171875, 1.115234375, 0.0031375885009765625, 0.29248046875, 0.0003960132598876953, 0.0004324913024902344, 1.430511474609375e-06, 6.258487701416016e-05, 0.00702667236328125, 0.040496826171875, 0.0005121231079101562, 0.193115234375, 0.302490234375, 0.343505859375, 0.564453125, 0.02557373046875, 0.035888671875, 0.2130126953125, 0.1195068359375, 0.00499725341796875, 0.044891357421875, 1.3974609375, 0.72314453125, 0.5927734375, 0.1129150390625, 0.1099853515625, 0.0004870891571044922, 0.0965576171875, 0.25048828125, 0.58349609375, 1.4638671875], "tokens": [334, 320, 719, 945, 907, 1905, 438, 17152, 8039, 26, 2627, 816, 27, 301, 284, 442, 308, 35, 32, 34, 517, 816, 27, 610, 6934, 32, 43518, 81, 36069, 45, 334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 1015, 26, 101, 293, 334, 320, 719, 763, 1015, 29583]}
{"line_number": 218, "line_type": "original", "code": "    } else if (Character.isLetter(first) &&", "entropy": 1.8388671875, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [5.54296875, 2.130859375, 4.78125, 0.47216796875, 0.108642578125, 3.87109375, 0.0030975341796875, 0.021240234375, 1.8447265625, 0.4453125, 3.5859375, 0.475830078125, 0.63037109375], "tokens": [264, 320, 813, 415, 308, 6881, 32, 297, 17663, 26, 2232, 27, 962]}
{"line_number": 218, "line_type": "generated", "code": "\n  }\n\n  void addString(String s) {\n    append(\"\\\"\");\n\n    for (int i = 0; i < s.length(); i++) {\n      char ch = s.charAt(i);\n      switch (ch) {\n        case '\\", "entropy": 0.1981201171875, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [0.45361328125, 0.04931640625, 0.12213134765625, 0.31787109375, 0.36328125, 0.4296875, 0.0330810546875, 0.03497314453125, 0.21923828125, 0.0955810546875, 0.005252838134765625, 0.05596923828125, 2.23046875, 0.615234375, 0.0290069580078125, 1.349609375, 0.8310546875, 0.0062713623046875, 0.0137786865234375, 0.0171661376953125, 0.0036334991455078125, 0.0004138946533203125, 0.0012664794921875, 0.332275390625, 0.0010843276977539062, 0.00878143310546875, 0.001129150390625, 5.8531761169433594e-05, 0.00046062469482421875, 0.006427764892578125, 0.115478515625, 0.0018014907836914062, 0.0007343292236328125, 0.03802490234375, 0.125244140625, 0.513671875, 0.0017156600952148438, 0.0004901885986328125, 4.76837158203125e-05, 0.00015926361083984375, 0.00012671947479248047, 0.00017559528350830078, 0.00029015541076660156, 0.240966796875, 0.41259765625, 0.0302581787109375, 0.0008707046508789062, 0.00011515617370605469, 0.00041103363037109375, 0.1436767578125, 0.0306854248046875, 1.015625], "tokens": [334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 5489, 33744, 724, 446, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309, 32, 1322, 473, 595, 1987, 301, 397, 1351, 663, 280, 309, 32, 15611, 26, 91, 293, 397, 3578, 308, 380, 27, 301, 291, 1135, 3228]}
{"line_number": 228, "line_type": "original", "code": "    appendOp(op, binOp);", "entropy": 3.228515625, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [3.01171875, 12.3828125, 5.578125, 2.51953125, 2.50390625, 0.234375, 2.216796875, 0.03826904296875, 0.5693359375], "tokens": [264, 5489, 3397, 26, 520, 30, 7395, 3397, 293]}
{"line_number": 228, "line_type": "generated", "code": "\n   * multiple lines, then we need to line break after the opening brace.\n   */\n  void maybeBreakAfterBraces(int line) {\n    if (lineBreaks.size() > 0) {\n      int lastLine = lineBreak", "entropy": 0.71044921875, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [0.71435546875, 0.045806884765625, 1.640625, 0.1708984375, 0.4072265625, 1.09375, 0.75146484375, 1.185546875, 0.0980224609375, 2.26953125, 0.140625, 0.84912109375, 0.2362060546875, 1.7177734375, 1.58203125, 0.0012159347534179688, 0.90380859375, 0.1300048828125, 0.49951171875, 0.03887939453125, 0.49853515625, 0.191650390625, 1.7138671875, 1.138671875, 1.798828125, 0.2064208984375, 0.7109375, 1.310546875, 1.693359375, 1.2197265625, 0.004291534423828125, 0.27392578125, 0.47216796875, 0.1834716796875, 1.6767578125, 0.923828125, 1.0654296875, 0.72021484375, 1.447265625, 0.0033664703369140625, 0.65771484375, 0.09814453125, 0.10931396484375, 0.6123046875, 0.0038356781005859375, 0.043914794921875, 1.00390625, 1.173828125, 0.970703125, 0.193603515625, 0.343017578125, 0.009521484375], "tokens": [664, 319, 4609, 5430, 30, 1615, 996, 1849, 372, 1628, 1626, 2685, 322, 14937, 3203, 560, 32, 664, 569, 334, 763, 8762, 10438, 5125, 4349, 2557, 26, 410, 1628, 27, 301, 284, 415, 308, 928, 10438, 101, 32, 891, 346, 848, 225, 34, 27, 301, 397, 629, 2401, 1811, 280, 1628, 10438]}
{"line_number": 233, "line_type": "original", "code": "    if (binOp) {", "entropy": 2.1953125, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [3.482421875, 3.87890625, 0.67236328125, 6.39453125, 0.18408203125, 0.34912109375, 0.4052734375], "tokens": [264, 415, 308, 1771, 3397, 27, 301]}
{"line_number": 233, "line_type": "generated", "code": "\n   */\n  boolean shouldWrap() {\n    return true;\n  }\n\n  /**\n   * If the body of a for loop or the then clause of an if statement has\n   * a single statement, should it be wrapped in a block?  Doing so", "entropy": 0.239013671875, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [0.344482421875, 0.2744140625, 0.038330078125, 0.30810546875, 0.6630859375, 0.87353515625, 1.5439453125, 0.0018215179443359375, 0.1234130859375, 0.67578125, 1.115234375, 0.005977630615234375, 0.044647216796875, 0.0004494190216064453, 0.259033203125, 0.97021484375, 0.0859375, 0.0010633468627929688, 1.9150390625, 0.50341796875, 0.357177734375, 0.0230255126953125, 0.08349609375, 0.418701171875, 0.0310211181640625, 0.09698486328125, 0.06903076171875, 0.00830841064453125, 0.023468017578125, 0.004245758056640625, 0.00473785400390625, 0.0014772415161132812, 0.022369384765625, 0.21044921875, 0.03753662109375, 2.2172927856445312e-05, 0.1123046875, 0.0243072509765625, 0.0213775634765625, 0.055084228515625, 0.36767578125, 0.1427001953125, 0.080322265625, 0.11767578125, 0.006557464599609375, 0.08343505859375, 0.02252197265625, 0.11279296875, 0.1148681640625, 0.03033447265625, 0.00020742416381835938, 0.00018584728240966797], "tokens": [664, 569, 334, 1905, 1395, 10001, 346, 301, 284, 442, 861, 45, 334, 320, 719, 1022, 664, 319, 1670, 322, 3361, 432, 312, 436, 5258, 556, 322, 1615, 15300, 432, 600, 415, 7603, 1401, 664, 319, 312, 3982, 7603, 30, 1395, 561, 526, 16283, 328, 312, 2163, 49, 225, 3278, 299, 1259]}
{"line_number": 236, "line_type": "original", "code": "  }", "entropy": 0.9951171875, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [1.9755859375, 0.01512908935546875], "tokens": [225, 320]}
{"line_number": 236, "line_type": "generated", "code": "\n  }\n\n  /**\n   * If the body of a for loop or the then clause of an if statement has\n   * a single statement, should it be wrapped in a block?  Doing so can\n   * help when pretty-printing the code, and", "entropy": 0.1348876953125, "is_bug_line": false, "sus_score": 0.03396178054056622, "per_token_entropy": [0.462646484375, 0.2158203125, 0.2415771484375, 1.0703125, 0.07098388671875, 0.0010204315185546875, 2.1015625, 0.521484375, 0.35595703125, 0.0185699462890625, 0.08294677734375, 0.458984375, 0.030517578125, 0.111328125, 0.051605224609375, 0.010467529296875, 0.028289794921875, 0.004123687744140625, 0.005100250244140625, 0.001338958740234375, 0.0206756591796875, 0.11578369140625, 0.0283660888671875, 2.562999725341797e-05, 0.0784912109375, 0.01473236083984375, 0.02203369140625, 0.04248046875, 0.25146484375, 0.113525390625, 0.0557861328125, 0.0982666015625, 0.005161285400390625, 0.07330322265625, 0.0210723876953125, 0.07720947265625, 0.09661865234375, 0.022674560546875, 0.00010693073272705078, 0.00021922588348388672, 0.00551605224609375, 0.00691986083984375, 1.3232231140136719e-05, 0.001125335693359375, 0.0007624626159667969, 0.0030345916748046875, 0.0004420280456542969, 0.0004355907440185547, 0.00028824806213378906, 9.047985076904297e-05, 0.0147247314453125, 0.0013170242309570312], "tokens": [334, 320, 719, 1022, 664, 319, 1670, 322, 3361, 432, 312, 436, 5258, 556, 322, 1615, 15300, 432, 600, 415, 7603, 1401, 664, 319, 312, 3982, 7603, 30, 1395, 561, 526, 16283, 328, 312, 2163, 49, 225, 3278, 299, 1259, 883, 664, 319, 3049, 1412, 10191, 31, 47404, 322, 1340, 30, 461]}
{"line_number": 170, "line_type": "original", "code": "      endLine();", "entropy": 3.03125, "is_bug_line": false, "sus_score": 0.0308386502464878, "per_token_entropy": [5.90625, 5.48046875, 0.72998046875, 0.006069183349609375], "tokens": [647, 943, 1811, 473]}
{"line_number": 170, "line_type": "generated", "code": "\n    } else if (binOp &&\n               Character.isLetter(prev) &&\n               isWordChar(first)) {", "entropy": 0.3505859375, "is_bug_line": false, "sus_score": 0.0308386502464878, "per_token_entropy": [0.2305908203125, 0.003421783447265625, 0.931640625, 0.35888671875, 0.272705078125, 1.369140625, 0.00023174285888671875, 0.291259765625, 1.470703125, 2.396484375, 0.0001100301742553711, 0.001598358154296875, 0.11968994140625, 0.08746337890625, 0.2454833984375, 0.408203125, 0.0184478759765625, 0.0421142578125, 0.305419921875, 0.01251220703125, 0.0002810955047607422, 0.003932952880859375, 0.140625, 0.05322265625, 0.0038356781005859375], "tokens": [284, 320, 813, 415, 308, 1771, 3397, 962, 3083, 15041, 32, 297, 17663, 26, 5586, 27, 962, 3083, 438, 5095, 2659, 26, 2232, 490, 301]}
{"line_number": 62, "line_type": "original", "code": "    add(identifier);", "entropy": 4.98828125, "is_bug_line": false, "sus_score": 0.0302659963383191, "per_token_entropy": [4.9140625, 5.80859375, 5.296875, 8.171875, 0.74169921875], "tokens": [264, 1015, 26, 7895, 293]}
{"line_number": 62, "line_type": "generated", "code": "\n  }\n\n  void endStatement() {", "entropy": 0.3095703125, "is_bug_line": false, "sus_score": 0.0302659963383191, "per_token_entropy": [0.6328125, 0.0028533935546875, 0.049163818359375, 0.2242431640625, 1.427734375, 0.1070556640625, 0.031036376953125, 0.001720428466796875], "tokens": [334, 320, 719, 763, 943, 5495, 346, 301]}
{"line_number": 63, "line_type": "original", "code": "  }", "entropy": 1.5693359375, "is_bug_line": false, "sus_score": 0.0302659963383191, "per_token_entropy": [2.802734375, 0.33544921875], "tokens": [225, 320]}
{"line_number": 63, "line_type": "generated", "code": "\n\n  void endBlock(boolean forceLineBreak) {\n    appendBlockEnd();\n    if (statementNeedsEnded || forceLineBreak) {\n      endLine();\n    }\n  }\n\n  void beginStatement() {\n    if (statementNeedsEnded) {\n      append", "entropy": 0.295166015625, "is_bug_line": false, "sus_score": 0.0302659963383191, "per_token_entropy": [0.34765625, 0.2763671875, 0.04864501953125, 0.025115966796875, 0.01140594482421875, 0.01386260986328125, 1.6806640625, 0.93701171875, 0.1300048828125, 0.009521484375, 0.0007457733154296875, 0.061431884765625, 0.82666015625, 0.136962890625, 7.677078247070312e-05, 0.0003948211669921875, 0.3603515625, 1.1748046875, 0.08111572265625, 0.55322265625, 0.26904296875, 0.02789306640625, 0.78759765625, 0.069091796875, 2.9802322387695312e-06, 3.0994415283203125e-06, 0.00787353515625, 0.0091094970703125, 0.012908935546875, 1.49609375, 0.40576171875, 0.0005927085876464844, 0.3896484375, 0.00016582012176513672, 1.208984375, 0.0009331703186035156, 0.1033935546875, 0.22998046875, 1.734375, 0.438232421875, 0.214111328125, 0.0007252693176269531, 0.03973388671875, 0.5283203125, 0.14990234375, 0.047882080078125, 0.31103515625, 8.535385131835938e-05, 0.060577392578125, 0.0091400146484375, 0.01070404052734375, 0.10101318359375], "tokens": [719, 763, 943, 2227, 26, 4398, 7650, 1811, 10438, 27, 301, 284, 5489, 2227, 2102, 473, 284, 415, 308, 9849, 32380, 33761, 1276, 7650, 1811, 10438, 27, 301, 397, 943, 1811, 473, 284, 320, 334, 320, 719, 763, 4240, 5495, 346, 301, 284, 415, 308, 9849, 32380, 33761, 27, 301, 397, 5489]}
{"line_number": 135, "line_type": "original", "code": "    endStatement(false);", "entropy": 2.732421875, "is_bug_line": false, "sus_score": 0.0302659963383191, "per_token_entropy": [3.16015625, 9.4375, 1.9482421875, 1.357421875, 0.48095703125, 0.005046844482421875], "tokens": [264, 943, 5495, 26, 1870, 293]}
{"line_number": 135, "line_type": "generated", "code": "\n    }\n\n    if (newcode.length() > 0) {\n      if (code.length() > 0) {\n        if (code.charAt(code.length() - 1) == '\\n') {\n          // If the previous", "entropy": 0.408447265625, "is_bug_line": false, "sus_score": 0.0302659963383191, "per_token_entropy": [0.6591796875, 0.00970458984375, 1.791015625, 1.0302734375, 0.2088623046875, 1.4345703125, 0.00048542022705078125, 0.042449951171875, 0.91796875, 0.004070281982421875, 0.666015625, 0.03131103515625, 0.0582275390625, 0.37939453125, 0.007595062255859375, 0.09136962890625, 0.98828125, 0.1748046875, 1.546875, 0.363525390625, 0.044647216796875, 0.002758026123046875, 0.2626953125, 0.005008697509765625, 0.0075531005859375, 0.2457275390625, 0.01299285888671875, 0.11041259765625, 1.0546875, 0.283935546875, 1.16015625, 0.038848876953125, 0.31591796875, 0.0009598731994628906, 0.00630950927734375, 0.0005488395690917969, 0.00030803680419921875, 0.20751953125, 0.00021982192993164062, 0.01088714599609375, 0.0004191398620605469, 0.0012159347534179688, 0.2802734375, 1.3974609375, 0.0011663436889648438, 0.1494140625, 0.017059326171875, 0.06304931640625, 1.6240234375, 1.98046875, 0.62890625, 0.90966796875], "tokens": [284, 320, 446, 415, 308, 890, 687, 32, 1322, 346, 848, 225, 34, 27, 301, 397, 415, 308, 687, 32, 1322, 346, 848, 225, 34, 27, 301, 291, 415, 308, 687, 32, 15611, 26, 687, 32, 1322, 346, 429, 225, 35, 27, 610, 3228, 96, 683, 301, 616, 434, 1670, 322, 4552]}
{"line_number": 136, "line_type": "original", "code": "  }", "entropy": 2.310546875, "is_bug_line": false, "sus_score": 0.0302659963383191, "per_token_entropy": [4.21484375, 0.406982421875], "tokens": [225, 320]}
{"line_number": 136, "line_type": "generated", "code": "\n    }\n\n    if (newcode.equals(\"}\")) {\n      maybeCutLine();\n    }\n\n    if (newcode.equals(\"} else \") || newcode.equals(\"} else{\")) {\n      maybeCutLine();\n      newcode = \"}", "entropy": 0.51123046875, "is_bug_line": false, "sus_score": 0.0302659963383191, "per_token_entropy": [0.387451171875, 0.0831298828125, 0.303466796875, 0.9541015625, 0.2139892578125, 1.6181640625, 0.005680084228515625, 0.0191497802734375, 1.46875, 1.13671875, 1.3896484375, 0.047119140625, 0.007537841796875, 0.037811279296875, 1.5390625, 0.7939453125, 0.01629638671875, 0.006862640380859375, 0.470947265625, 0.0003886222839355469, 0.36767578125, 0.86083984375, 0.1690673828125, 1.080078125, 2.7060508728027344e-05, 0.006404876708984375, 0.4931640625, 1.181640625, 2.005859375, 1.4853515625, 2.068359375, 0.233154296875, 0.2279052734375, 0.0003230571746826172, 0.003452301025390625, 0.030731201171875, 0.0199127197265625, 0.27001953125, 0.6845703125, 0.82763671875, 0.04571533203125, 0.0013713836669921875, 0.02044677734375, 0.544921875, 0.188720703125, 0.0019102096557617188, 0.005649566650390625, 0.87939453125, 1.9814453125, 0.0007271766662597656, 0.0034618377685546875, 0.38720703125], "tokens": [284, 320, 446, 415, 308, 890, 687, 32, 3574, 440, 111, 2131, 301, 397, 8762, 18024, 1811, 473, 284, 320, 446, 415, 308, 890, 687, 32, 3574, 440, 111, 813, 7788, 1276, 537, 687, 32, 3574, 440, 111, 813, 109, 2131, 301, 397, 8762, 18024, 1811, 473, 397, 537, 687, 280, 21595]}
