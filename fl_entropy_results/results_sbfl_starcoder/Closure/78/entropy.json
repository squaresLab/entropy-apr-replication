{"line_number": 718, "line_type": "original", "code": "          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);", "entropy": 0.80322265625, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [9.078125, 10.1640625, 0.11212158203125, 0.72607421875, 0.0099639892578125, 0.0003859996795654297, 0.04815673828125, 0.226806640625, 0.418212890625, 0.0032253265380859375, 0.001689910888671875, 1.7490234375, 5.340576171875e-05, 2.1576881408691406e-05, 0.00023090839385986328, 0.005367279052734375, 0.0004429817199707031, 0.051025390625, 0.00455474853515625, 0.0005211830139160156, 0.0406494140625, 0.095947265625, 0.01366424560546875, 0.0031528472900390625, 0.0023441314697265625, 0.00015819072723388672, 0.064453125, 0.453369140625, 0.01812744140625], "tokens": [2033, 1048, 26, 24058, 620, 32, 731, 440, 60, 2117, 81, 1724, 5676, 55, 81, 6265, 81, 34, 81, 2930, 392, 313, 38518, 810, 225, 34, 2113, 2091, 293]}
{"line_number": 718, "line_type": "generated", "code": "\n    Double lValObj = NodeUtil.getNumberValue(left);\n    if (lValObj == null) {\n      return null;\n    }\n    double lval = lValObj;\n    if (lval == 0) {\n      // If", "entropy": 0.345458984375, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.331298828125, 1.5263671875, 0.7734375, 0.51171875, 0.156494140625, 0.0099334716796875, 0.0601806640625, 0.0001875162124633789, 3.552436828613281e-05, 0.1304931640625, 0.00029206275939941406, 0.000934600830078125, 0.055908203125, 0.68505859375, 0.0528564453125, 0.135986328125, 0.01329803466796875, 0.01102447509765625, 4.756450653076172e-05, 1.3947486877441406e-05, 0.041595458984375, 0.0002536773681640625, 0.1041259765625, 0.0078277587890625, 0.023193359375, 0.0174102783203125, 0.0063018798828125, 0.0003235340118408203, 0.003936767578125, 6.35385513305664e-05, 0.273681640625, 1.609375, 0.10870361328125, 0.29150390625, 0.0040283203125, 0.010223388671875, 5.340576171875e-05, 9.298324584960938e-06, 0.058380126953125, 1.322265625, 1.162109375, 0.576171875, 1.4619140625, 0.0028743743896484375, 0.12396240234375, 0.03228759765625, 0.303466796875, 0.51318359375, 0.01456451416015625, 0.0972900390625, 2.048828125, 3.287109375], "tokens": [284, 6934, 456, 1402, 3273, 280, 4004, 1733, 32, 37903, 882, 26, 1873, 293, 284, 415, 308, 94, 1402, 3273, 610, 744, 27, 301, 397, 442, 744, 45, 284, 320, 284, 2064, 456, 695, 280, 456, 1402, 3273, 45, 284, 415, 308, 94, 695, 610, 225, 34, 27, 301, 397, 434, 1670]}
{"line_number": 719, "line_type": "original", "code": "          return null;", "entropy": 3.0625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [9.765625, 2.326171875, 0.15576171875, 0.0058135986328125], "tokens": [2033, 442, 744, 45]}
{"line_number": 719, "line_type": "generated", "code": "\n    if (rightValObj == null) {\n      return null;\n    }\n\n    double rightVal = rightValObj;\n\n    // We are looking for the pattern:\n    //   (foo * 10) * 20\n    // or\n   ", "entropy": 0.5234375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.349365234375, 0.1673583984375, 0.116943359375, 0.08660888671875, 0.0037403106689453125, 0.0005221366882324219, 0.1380615234375, 0.002216339111328125, 0.396484375, 0.0101470947265625, 0.0310211181640625, 0.034423828125, 0.0049896240234375, 0.0003814697265625, 0.0061492919921875, 0.0002684593200683594, 0.755859375, 1.0, 0.39208984375, 0.05810546875, 0.00409698486328125, 0.007755279541015625, 0.0009469985961914062, 4.1961669921875e-05, 0.1092529296875, 0.30859375, 1.2021484375, 3.53125, 2.51171875, 0.77099609375, 0.053619384765625, 1.9169921875, 0.75341796875, 0.701171875, 0.239990234375, 0.0033245086669921875, 1.8173828125, 1.0458984375, 2.4453125, 1.34765625, 0.7333984375, 0.355224609375, 0.154541015625, 0.11572265625, 0.2032470703125, 0.1365966796875, 0.055023193359375, 0.031951904296875, 0.1793212890625, 0.494873046875, 1.9892578125, 0.443603515625], "tokens": [284, 415, 308, 990, 1402, 3273, 610, 744, 27, 301, 397, 442, 744, 45, 284, 320, 446, 2064, 2091, 1402, 280, 2091, 1402, 3273, 45, 446, 434, 2688, 884, 9696, 436, 322, 5257, 44, 284, 434, 261, 308, 3986, 319, 225, 35, 34, 27, 319, 225, 36, 34, 284, 434, 556, 284]}
{"line_number": 717, "line_type": "original", "code": "        if (rval == 0) {", "entropy": 1.615234375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [4.875, 1.291015625, 0.410400390625, 6.1796875, 1.0380859375, 0.56201171875, 1.21484375, 0.16064453125, 0.37939453125, 0.0472412109375], "tokens": [351, 415, 308, 100, 695, 610, 225, 34, 27, 301]}
{"line_number": 717, "line_type": "generated", "code": "\n    if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false))) {\n      return null;\n    }\n\n    double result;\n\n    // TODO(john", "entropy": 0.10546875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.55615234375, 1.130859375, 0.483642578125, 0.51123046875, 0.0003485679626464844, 0.1756591796875, 0.0037784576416015625, 2.574920654296875e-05, 0.25634765625, 0.378173828125, 0.0195465087890625, 0.1304931640625, 0.043792724609375, 0.0002512931823730469, 3.2186508178710938e-06, 0.25634765625, 0.00011539459228515625, 0.0007715225219726562, 0.00044918060302734375, 0.07391357421875, 0.00749969482421875, 0.0249786376953125, 0.0023403167724609375, 0.031463623046875, 0.0023708343505859375, 0.023651123046875, 7.510185241699219e-05, 2.086162567138672e-05, 0.0036640167236328125, 0.000461578369140625, 0.0004477500915527344, 0.00016748905181884766, 0.0265960693359375, 0.0028743743896484375, 0.0014190673828125, 0.03314208984375, 0.01508331298828125, 0.04998779296875, 0.01013946533203125, 0.00884246826171875, 0.0004715919494628906, 0.01532745361328125, 0.0001043081283569336, 0.10595703125, 0.31982421875, 0.09417724609375, 0.08905029296875, 0.2017822265625, 0.33056640625, 0.05963134765625, 0.0010137557983398438, 0.0009560585021972656], "tokens": [284, 415, 308, 520, 620, 610, 6512, 32, 5363, 291, 962, 308, 1212, 1733, 32, 17302, 1467, 652, 26, 1873, 30, 901, 27, 324, 1276, 4004, 1733, 32, 17302, 1467, 652, 26, 990, 30, 901, 2610, 301, 397, 442, 744, 45, 284, 320, 446, 2064, 1056, 45, 446, 434, 4296, 26, 25172]}
{"line_number": 721, "line_type": "original", "code": "        result = lval / rval;", "entropy": 2.6484375, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [6.6796875, 7.109375, 0.08203125, 2.185546875, 0.1593017578125, 4.8828125, 0.017333984375, 0.06842041015625], "tokens": [351, 1056, 280, 456, 695, 517, 42445, 45]}
{"line_number": 721, "line_type": "generated", "code": "\n    }\n\n    return null;\n  }\n\n  private Node tryFoldRightChildOp(Node n, Node left, Node right) {\n    int opType = n.getType();\n    Preconditions.checkState(\n        (NodeUtil.isAssociative(op", "entropy": 0.1151123046875, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.587890625, 0.006801605224609375, 0.599609375, 0.08587646484375, 0.0133514404296875, 0.0003445148468017578, 0.007221221923828125, 0.0012769699096679688, 0.7978515625, 1.3974609375, 0.385986328125, 0.318603515625, 0.0595703125, 1.1240234375, 0.035430908203125, 0.00992584228515625, 0.00948333740234375, 0.012939453125, 0.01029205322265625, 0.00988006591796875, 0.0017910003662109375, 0.031768798828125, 0.00070953369140625, 0.00024437904357910156, 0.0008606910705566406, 0.0021343231201171875, 0.0015783309936523438, 0.021209716796875, 0.173583984375, 0.00385284423828125, 0.0013570785522460938, 0.0005602836608886719, 0.0013513565063476562, 9.775161743164062e-06, 3.325939178466797e-05, 6.556510925292969e-05, 0.07208251953125, 0.039703369140625, 6.556510925292969e-06, 0.0009202957153320312, 0.0009832382202148438, 0.0234832763671875, 0.08428955078125, 0.040283203125, 0.004505157470703125, 5.7697296142578125e-05, 2.384185791015625e-06, 0.000377655029296875, 0.0001785755157470703, 3.5762786865234375e-07, 8.71419906616211e-05, 0.0007395744323730469], "tokens": [284, 320, 446, 442, 744, 45, 334, 320, 719, 945, 4004, 1596, 15483, 4046, 2931, 3397, 26, 1212, 310, 30, 4004, 2841, 30, 4004, 2091, 27, 301, 284, 629, 3089, 620, 280, 310, 32, 10272, 473, 284, 40596, 32, 1553, 1078, 26, 291, 308, 1212, 1733, 32, 297, 10823, 1353, 26, 520]}
{"line_number": 722, "line_type": "original", "code": "        break;", "entropy": 5.2890625, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [6.05078125, 9.796875, 0.0170440673828125], "tokens": [351, 1626, 45]}
{"line_number": 722, "line_type": "generated", "code": "\n      double rval = rightValObj;\n      double lval = NodeUtil.getDoubleValue(left.getLastChild());\n      if (lval == null) {\n        return null;\n      }\n\n      double result;\n\n      switch (opType) {\n        case", "entropy": 0.2423095703125, "is_bug_line": false, "sus_score": 0.5773502691896258, "per_token_entropy": [0.218505859375, 1.435546875, 2.4765625, 0.02490234375, 0.06732177734375, 0.00653076171875, 0.0004925727844238281, 0.243408203125, 0.32568359375, 0.56005859375, 0.159423828125, 0.151123046875, 0.05181884765625, 0.1876220703125, 0.0017480850219726562, 0.0011968612670898438, 0.6484375, 0.0040130615234375, 0.016876220703125, 0.0634765625, 0.0157012939453125, 0.1610107421875, 0.0001556873321533203, 0.020233154296875, 0.54541015625, 0.89013671875, 0.06268310546875, 0.39501953125, 2.086162567138672e-05, 0.394287109375, 0.07666015625, 0.103271484375, 0.01078033447265625, 0.020233154296875, 0.2066650390625, 0.0212554931640625, 0.0003108978271484375, 0.0165557861328125, 0.00016987323760986328, 0.40185546875, 0.40380859375, 0.05859375, 0.64453125, 1.208984375, 0.2017822265625, 0.0189361572265625, 0.02130126953125, 0.00018513202667236328, 0.0002009868621826172, 0.002109527587890625, 0.042022705078125, 0.01239776611328125], "tokens": [397, 2064, 42445, 280, 2091, 1402, 3273, 45, 397, 2064, 456, 695, 280, 4004, 1733, 32, 37792, 882, 26, 1873, 32, 20197, 2931, 1035, 397, 415, 308, 94, 695, 610, 744, 27, 301, 291, 442, 744, 45, 397, 320, 1687, 2064, 1056, 45, 1687, 3578, 308, 520, 620, 27, 301, 291, 1135]}
{"line_number": 813, "line_type": "original", "code": "        return result;", "entropy": 3.12890625, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [3.994140625, 5.07421875, 3.181640625, 0.263916015625], "tokens": [351, 442, 1056, 45]}
{"line_number": 813, "line_type": "generated", "code": "\n        default:\n          throw new IllegalStateException(\"Unexpected op type: \" + n.getType());\n      }\n\n      // check for overflow\n      if (result!= (int) result) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, n", "entropy": 0.36865234375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.82080078125, 0.16650390625, 0.0034809112548828125, 0.037200927734375, 0.61376953125, 0.0038204193115234375, 0.302490234375, 0.50927734375, 0.89501953125, 2.41015625, 1.2587890625, 0.48291015625, 0.005886077880859375, 0.032318115234375, 0.31298828125, 0.05816650390625, 0.005153656005859375, 0.007083892822265625, 0.0160064697265625, 0.0004699230194091797, 0.1624755859375, 1.2802734375, 3.04296875, 1.029296875, 0.6640625, 0.47998046875, 0.1708984375, 0.62255859375, 0.2186279296875, 0.53662109375, 1.0107421875, 0.348388671875, 0.004093170166015625, 0.14208984375, 0.0237884521484375, 0.0012340545654296875, 0.01605224609375, 0.1220703125, 0.0030422210693359375, 0.59130859375, 0.0014743804931640625, 8.702278137207031e-06, 0.08184814453125, 7.152557373046875e-05, 0.0176239013671875, 0.4697265625, 1.1920928955078125e-05, 3.802776336669922e-05, 1.5854835510253906e-05, 0.0020542144775390625, 0.004917144775390625, 0.174072265625], "tokens": [291, 1244, 44, 616, 1422, 537, 21665, 440, 10203, 3089, 827, 44, 313, 474, 310, 32, 10272, 1035, 397, 320, 1687, 434, 1505, 436, 9973, 397, 415, 308, 1267, 863, 308, 410, 27, 1056, 27, 301, 291, 1048, 26, 5670, 10382, 81, 13357, 3349, 81, 4241, 81, 2109, 81, 13412, 30, 310]}
{"line_number": 701, "line_type": "original", "code": "        result = lval + rval;", "entropy": 3.623046875, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [6.3984375, 9.5703125, 0.391845703125, 7.44921875, 0.88671875, 3.759765625, 0.35400390625, 0.17578125], "tokens": [351, 1056, 280, 456, 695, 474, 42445, 45]}
{"line_number": 701, "line_type": "generated", "code": "\n   * this method tries to find such patterns and fold them.\n   */\n  private Node tryFoldConstExpr(Node n) {\n    if (n.getType()!= Token.HOOK) {\n      return n;\n    }\n    Node hook = n;", "entropy": 0.469970703125, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [0.2337646484375, 0.0606689453125, 1.5087890625, 1.3984375, 2.404296875, 0.04998779296875, 2.166015625, 1.3193359375, 1.46875, 0.324951171875, 1.1259765625, 0.3671875, 0.7255859375, 0.118896484375, 0.31396484375, 0.0252227783203125, 0.3134765625, 0.1270751953125, 0.6455078125, 0.041717529296875, 1.4833984375, 0.9150390625, 0.1956787109375, 0.00922393798828125, 0.18505859375, 0.148681640625, 0.002227783203125, 0.0697021484375, 0.8486328125, 0.216064453125, 0.225341796875, 0.0958251953125, 0.54443359375, 0.0012464523315429688, 0.5908203125, 0.0006146430969238281, 7.033348083496094e-05, 1.1943359375, 0.07196044921875, 0.0086212158203125, 0.033233642578125, 0.1566162109375, 0.04156494140625, 0.001964569091796875, 0.006591796875, 1.4185905456542969e-05, 1.130859375, 0.237548828125, 0.6015625, 0.5322265625, 0.122802734375, 0.0220184326171875], "tokens": [664, 319, 458, 1411, 19843, 372, 2290, 3751, 15103, 461, 11426, 3026, 32, 664, 569, 334, 945, 4004, 1596, 15483, 2775, 6150, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 10272, 346, 863, 6512, 32, 29243, 27, 301, 397, 442, 310, 45, 284, 320, 284, 4004, 11962, 280, 310, 45]}
{"line_number": 702, "line_type": "original", "code": "        break;", "entropy": 5.1484375, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [8.1328125, 7.26953125, 0.043731689453125], "tokens": [351, 1626, 45]}
{"line_number": 702, "line_type": "generated", "code": "\n   */\n  private Node tryFoldLeftChildOp(Node n, int opType) {\n    if (n.getType()!= Token.ADD && n.getType()!= Token.SUB) {\n      return null;\n    }\n\n    Node left = n", "entropy": 0.206298828125, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [0.344482421875, 0.397216796875, 0.04248046875, 0.10009765625, 0.07763671875, 0.0285797119140625, 0.0005965232849121094, 0.0369873046875, 0.0043792724609375, 0.00731658935546875, 0.00681304931640625, 0.53662109375, 0.220703125, 0.93896484375, 0.1839599609375, 0.082275390625, 0.0347900390625, 0.09527587890625, 0.0017366409301757812, 0.028839111328125, 1.27734375, 0.1915283203125, 0.240234375, 0.05804443359375, 0.408935546875, 0.001708984375, 0.358154296875, 0.1781005859375, 9.21487808227539e-05, 1.416015625, 0.861328125, 0.2230224609375, 6.80685043334961e-05, 0.0038909912109375, 0.0002655982971191406, 0.00152587890625, 0.073974609375, 6.794929504394531e-06, 0.6064453125, 0.222900390625, 0.0093994140625, 0.01473236083984375, 0.041534423828125, 0.259765625, 9.78708267211914e-05, 0.00823211669921875, 5.9723854064941406e-05, 0.473388671875, 0.17138671875, 0.281982421875, 0.0928955078125, 0.080078125], "tokens": [664, 569, 334, 945, 4004, 1596, 15483, 3679, 2931, 3397, 26, 1212, 310, 30, 629, 3089, 620, 27, 301, 284, 415, 308, 96, 32, 10272, 346, 863, 6512, 32, 5363, 962, 310, 32, 10272, 346, 863, 6512, 32, 7100, 27, 301, 397, 442, 744, 45, 284, 320, 446, 4004, 2841, 280, 310]}
{"line_number": 707, "line_type": "original", "code": "        result = lval * rval;", "entropy": 2.53125, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [8.5546875, 5.5625, 0.0302734375, 3.708984375, 0.1661376953125, 1.15625, 0.48681640625, 0.583984375], "tokens": [351, 1056, 280, 456, 695, 319, 42445, 45]}
{"line_number": 707, "line_type": "generated", "code": "\n  private Node tryFoldLeftChildOp(Node root, int opType) {\n    Node left = root.getFirstChild();\n    Node right = root.getLastChild();\n\n    // The left child is not an associative expression of the same type.\n   ", "entropy": 0.417724609375, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [0.7783203125, 0.28369140625, 0.158447265625, 0.038421630859375, 0.00116729736328125, 0.051025390625, 0.00566864013671875, 0.02825927734375, 0.056640625, 0.81689453125, 2.416015625, 0.78271484375, 0.391845703125, 0.1534423828125, 0.0406494140625, 0.2406005859375, 0.00594329833984375, 0.1583251953125, 1.0966796875, 0.44873046875, 0.1761474609375, 0.0755615234375, 0.004917144775390625, 0.0156402587890625, 0.000244140625, 0.07763671875, 0.079345703125, 0.40283203125, 0.03131103515625, 0.00946807861328125, 0.30224609375, 0.0006041526794433594, 0.006282806396484375, 4.9114227294921875e-05, 0.033447265625, 0.69384765625, 1.302734375, 2.412109375, 0.78466796875, 0.3671875, 1.40625, 0.9775390625, 0.537109375, 0.705078125, 0.001758575439453125, 0.6279296875, 1.4873046875, 0.03021240234375, 0.11676025390625, 0.69091796875, 0.38818359375, 0.01366424560546875], "tokens": [334, 945, 4004, 1596, 15483, 3679, 2931, 3397, 26, 1212, 3051, 30, 629, 3089, 620, 27, 301, 284, 4004, 2841, 280, 3051, 32, 25657, 2931, 473, 284, 4004, 2091, 280, 3051, 32, 20197, 2931, 473, 446, 434, 886, 2841, 2838, 438, 646, 600, 4653, 1353, 6101, 432, 322, 2432, 827, 32, 284]}
{"line_number": 708, "line_type": "original", "code": "        break;", "entropy": 4.078125, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [6.19921875, 6.01953125, 0.016632080078125], "tokens": [351, 1626, 45]}
{"line_number": 708, "line_type": "generated", "code": "\n    // TODO(johnlenz): handle NaN with unknown value.\n    if (n.getType()!= Token.ADD && n.getType()!= Token.MUL) {\n      return null;\n    }\n\n    Node leftLeft = left.getFirstChild();", "entropy": 0.373291015625, "is_bug_line": false, "sus_score": 0.3779644730092272, "per_token_entropy": [0.27734375, 2.208984375, 2.6640625, 0.0252532958984375, 0.0211639404296875, 0.000835418701171875, 0.00030612945556640625, 0.0209503173828125, 2.15234375, 1.921875, 0.68798828125, 0.06744384765625, 0.0469970703125, 0.27197265625, 0.380615234375, 1.1484375, 0.274169921875, 0.69287109375, 0.02203369140625, 0.11187744140625, 0.0035400390625, 0.98095703125, 0.00984954833984375, 0.0005021095275878906, 0.85791015625, 1.0078125, 0.281494140625, 0.00032520294189453125, 0.0009641647338867188, 0.0008778572082519531, 0.0007810592651367188, 0.000911712646484375, 1.7642974853515625e-05, 0.07159423828125, 0.1741943359375, 0.0247344970703125, 0.0305023193359375, 0.0248870849609375, 0.03472900390625, 0.0005521774291992188, 0.0060882568359375, 0.0003712177276611328, 0.3837890625, 0.8330078125, 0.724609375, 0.6640625, 0.11029052734375, 0.1280517578125, 0.00449371337890625, 0.0225067138671875, 0.00022161006927490234, 0.0232391357421875], "tokens": [284, 434, 4296, 26, 25172, 1657, 108, 711, 2887, 21644, 623, 8665, 786, 32, 284, 415, 308, 96, 32, 10272, 346, 863, 6512, 32, 5363, 962, 310, 32, 10272, 346, 863, 6512, 32, 12769, 27, 301, 397, 442, 744, 45, 284, 320, 446, 4004, 2841, 3679, 280, 2841, 32, 25657, 2931, 473]}
{"line_number": 146, "line_type": "original", "code": "          return result;", "entropy": 5.57421875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [5.1171875, 5.625, 11.5, 0.05841064453125], "tokens": [2033, 442, 1056, 45]}
{"line_number": 146, "line_type": "generated", "code": "\n        break;\n      case Token.ASSIGN_ADD:", "entropy": 0.271728515625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.490478515625, 0.2362060546875, 0.00019729137420654297, 0.373046875, 0.387939453125, 0.00034499168395996094, 2.396106719970703e-05, 1.19921875, 0.29345703125, 0.007358551025390625, 0.00039958953857421875], "tokens": [291, 1626, 45, 397, 1135, 6512, 32, 25620, 81, 5363, 44]}
{"line_number": 182, "line_type": "original", "code": "          tryConvertOperandsToNumber(n);", "entropy": 1.1015625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [5.58984375, 4.04296875, 1.271484375, 0.044219970703125, 1.6927719116210938e-05, 0.0014314651489257812, 0.00418853759765625, 0.00394439697265625, 0.010498046875, 0.04510498046875], "tokens": [2033, 1596, 6720, 6420, 5986, 705, 1918, 26, 96, 293]}
{"line_number": 182, "line_type": "generated", "code": "\n      case Token.HOOK:", "entropy": 0.2481689453125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [1.02734375, 0.2344970703125, 0.0004322528839111328, 4.9114227294921875e-05, 0.226318359375, 0.0001480579376220703], "tokens": [397, 1135, 6512, 32, 29243, 44]}
{"line_number": 811, "line_type": "original", "code": "      Node result = tryFoldArithmeticOp(node, left, right);", "entropy": 1.88671875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [3.333984375, 13.2734375, 1.5361328125, 0.346923828125, 3.00390625, 0.048553466796875, 1.90625, 0.2388916015625, 0.06500244140625, 3.529296875, 0.1900634765625, 0.62255859375, 0.040191650390625, 0.063720703125, 0.105712890625], "tokens": [647, 4004, 1056, 280, 1596, 15483, 37375, 3397, 26, 1251, 30, 2841, 30, 2091, 293]}
{"line_number": 811, "line_type": "generated", "code": "\n        default:\n          throw new IllegalStateException(\"Unexpected op: \" + n.getType());\n      }\n\n      // If the result is outside the range of a 32-bit int, then the\n      // result is undefined, and we should report an error.", "entropy": 0.6474609375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.30517578125, 0.4130859375, 0.00519561767578125, 0.05401611328125, 0.5703125, 0.005401611328125, 0.274169921875, 0.52001953125, 0.96337890625, 2.376953125, 1.21875, 0.007244110107421875, 0.00911712646484375, 0.273681640625, 0.1162109375, 0.017822265625, 0.0146942138671875, 0.0219268798828125, 0.0006318092346191406, 0.1407470703125, 1.279296875, 2.2109375, 0.52978515625, 0.5419921875, 0.72265625, 1.0283203125, 0.237548828125, 1.271484375, 0.317626953125, 0.85302734375, 0.72412109375, 0.022674560546875, 0.00653839111328125, 0.15625, 0.001834869384765625, 0.9599609375, 0.061492919921875, 1.5703125, 1.552734375, 0.82177734375, 0.00016760826110839844, 1.2236328125, 0.67236328125, 1.7431640625, 1.58203125, 0.9931640625, 0.923828125, 2.158203125, 1.6025390625, 0.306884765625, 0.0154266357421875, 0.24951171875], "tokens": [291, 1244, 44, 616, 1422, 537, 21665, 440, 10203, 3089, 44, 313, 474, 310, 32, 10272, 1035, 397, 320, 1687, 434, 1670, 322, 1056, 438, 11127, 322, 2155, 432, 312, 225, 37, 36, 31, 2400, 629, 30, 1615, 322, 397, 434, 1056, 438, 3469, 30, 461, 996, 1395, 3639, 600, 1048, 32]}
{"line_number": 812, "line_type": "original", "code": "      if (result != node) {", "entropy": 3.349609375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [5.0703125, 4.890625, 0.1488037109375, 1.90625, 2.384765625, 7.25, 4.99609375, 0.1510009765625], "tokens": [647, 415, 308, 1267, 863, 1541, 27, 301]}
{"line_number": 812, "line_type": "generated", "code": "\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          result = (long) lvalInt >>> rvalInt;\n          break;\n        default:\n          throw new IllegalStateException(\"Unexpected node type: \" + n);", "entropy": 0.196044921875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.552734375, 0.086181640625, 0.0004973411560058594, 0.0601806640625, 2.5033950805664062e-05, 0.01149749755859375, 0.2105712890625, 0.0004487037658691406, 0.0007014274597167969, 0.001483917236328125, 0.043121337890625, 0.006256103515625, 0.00012099742889404297, 0.06512451171875, 0.4375, 7.808208465576172e-05, 4.3272972106933594e-05, 0.040130615234375, 4.7206878662109375e-05, 8.809566497802734e-05, 0.154052734375, 0.1573486328125, 0.0002872943878173828, 0.55712890625, 0.791015625, 0.01433563232421875, 0.10791015625, 4.0531158447265625e-06, 0.220947265625, 0.018798828125, 0.001346588134765625, 0.001220703125, 0.0006928443908691406, 0.04144287109375, 0.00753021240234375, 0.00023496150970458984, 0.06927490234375, 0.00702667236328125, 0.0017175674438476562, 0.015777587890625, 0.415771484375, 0.004436492919921875, 0.241943359375, 0.5205078125, 0.87744140625, 1.7744140625, 0.2369384765625, 0.55908203125, 0.00640106201171875, 0.029052734375, 0.2125244140625, 1.6298828125], "tokens": [616, 1056, 280, 456, 695, 1428, 3776, 42445, 1428, 45, 616, 1626, 45, 291, 1135, 6512, 32, 1263, 2514, 44, 616, 1056, 280, 308, 3222, 27, 456, 695, 1428, 8217, 42445, 1428, 45, 616, 1626, 45, 291, 1244, 44, 616, 1422, 537, 21665, 440, 10203, 1541, 827, 44, 313, 474, 310, 293]}
{"line_number": 148, "line_type": "original", "code": "        return tryFoldLeftChildOp(subtree, left, right);", "entropy": 2.65234375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [6.71875, 3.94140625, 5.0234375, 2.400390625, 5.97265625, 3.876953125, 5.27734375, 0.106689453125, 5.67578125, 0.012451171875, 0.32763671875, 0.281982421875, 0.0965576171875, 0.03314208984375, 0.0309295654296875], "tokens": [351, 442, 1596, 15483, 3679, 2931, 3397, 26, 1113, 3242, 30, 2841, 30, 2091, 293]}
{"line_number": 148, "line_type": "generated", "code": "\n      default:\n        break;\n    }\n  }\n\n  private void tryReduceOperands(Node n) {\n    tryReduceOperandsForOp(n);\n    tryReduceVoid(n);\n  }\n\n  /**\n   * Try to fold a GETPROP operation", "entropy": 0.391845703125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.89111328125, 0.6259765625, 0.0020275115966796875, 0.0906982421875, 0.261962890625, 0.00020766258239746094, 0.01313018798828125, 0.00041747093200683594, 0.04254150390625, 0.0005207061767578125, 0.15185546875, 0.50830078125, 1.037109375, 0.067138671875, 0.92236328125, 1.087890625, 0.00010645389556884766, 0.537109375, 0.00475311279296875, 0.042144775390625, 0.055694580078125, 0.0004930496215820312, 0.0197906494140625, 1.357421875, 0.041259765625, 0.0294189453125, 3.4570693969726562e-06, 0.0111541748046875, 0.01306915283203125, 0.0012760162353515625, 0.0024547576904296875, 0.01042938232421875, 0.50439453125, 2.00390625, 0.25048828125, 0.91162109375, 0.0105133056640625, 0.0016613006591796875, 0.0099334716796875, 0.257080078125, 0.0004520416259765625, 0.1395263671875, 1.4833984375, 0.1673583984375, 0.00035881996154785156, 1.08984375, 0.1961669921875, 1.2890625, 0.8837890625, 1.1025390625, 0.363037109375, 1.876953125], "tokens": [397, 1244, 44, 291, 1626, 45, 284, 320, 334, 320, 719, 945, 763, 1596, 21853, 6420, 5986, 26, 1212, 310, 27, 301, 284, 1596, 21853, 6420, 5986, 1562, 3397, 26, 96, 293, 284, 1596, 21853, 10716, 26, 96, 293, 334, 320, 719, 1022, 664, 319, 8959, 372, 11426, 312, 6272, 15262, 4212]}
{"line_number": 680, "line_type": "original", "code": "      return null;", "entropy": 3.19921875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [5.94921875, 6.12109375, 0.72216796875, 0.0010194778442382812], "tokens": [647, 442, 744, 45]}
{"line_number": 680, "line_type": "generated", "code": "\n        NodeUtil.getStringValue(left).length() + 1 +\n        NodeUtil.getStringValue(right).length()) {\n      return Node.newNumber(result);\n    }\n    return null;\n  }", "entropy": 0.216796875, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.6279296875, 1.822265625, 0.0126800537109375, 0.00042128562927246094, 1.3369140625, 0.1405029296875, 0.0090789794921875, 0.051361083984375, 0.0162506103515625, 0.0028171539306640625, 0.0179443359375, 0.337646484375, 1.857421875, 0.06585693359375, 0.3271484375, 0.287353515625, 0.00925445556640625, 1.609325408935547e-05, 9.965896606445312e-05, 0.00013148784637451172, 0.0001043081283569336, 9.97781753540039e-05, 0.002895355224609375, 0.00042366981506347656, 0.00021123886108398438, 0.22412109375, 0.0029048919677734375, 0.062042236328125, 0.278564453125, 0.8212890625, 0.02154541015625, 0.0005421638488769531, 0.181640625, 0.005290985107421875, 0.030120849609375, 0.0232696533203125, 0.00859832763671875, 7.772445678710938e-05, 0.88427734375, 0.037872314453125, 0.007129669189453125, 8.177757263183594e-05, 0.021636962890625, 0.00021600723266601562], "tokens": [291, 4004, 1733, 32, 7069, 882, 26, 1873, 547, 1322, 346, 474, 225, 35, 474, 291, 4004, 1733, 32, 7069, 882, 26, 990, 547, 1322, 1157, 301, 397, 442, 4004, 32, 890, 1918, 26, 1267, 293, 284, 320, 284, 442, 744, 45, 334, 320]}
{"line_number": 758, "line_type": "original", "code": "    int opType = n.getType();", "entropy": 2.375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [4.3984375, 9.4140625, 4.296875, 0.8935546875, 0.09161376953125, 2.259765625, 0.0035114288330078125, 0.00848388671875, 0.00647735595703125], "tokens": [264, 629, 3089, 620, 280, 310, 32, 10272, 473]}
{"line_number": 758, "line_type": "generated", "code": "\n      }\n    } else {\n      return tryFoldChildAdd(node, left, right);\n    }\n  }\n\n  private Node tryFoldAddConstantString(Node node, Node left, Node right) {\n    String leftValue = left.getString();\n   ", "entropy": 0.2156982421875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.18017578125, 0.0023403167724609375, 0.05682373046875, 0.0017042160034179688, 0.984375, 0.3515625, 0.0679931640625, 0.67333984375, 0.150390625, 0.00241851806640625, 0.611328125, 0.29150390625, 0.5380859375, 0.0033931732177734375, 0.005184173583984375, 0.001766204833984375, 0.0012359619140625, 0.00039958953857421875, 0.0040283203125, 0.64404296875, 0.0001614093780517578, 0.0955810546875, 0.0008611679077148438, 0.178955078125, 0.89306640625, 0.042022705078125, 0.006816864013671875, 0.0010633468627929688, 0.78173828125, 0.119140625, 0.00673675537109375, 0.0028324127197265625, 0.017578125, 0.259765625, 0.0005731582641601562, 0.0072784423828125, 0.0157012939453125, 0.00591278076171875, 0.004119873046875, 0.0010213851928710938, 0.0005393028259277344, 0.002109527587890625, 0.0628662109375, 1.5712890625, 0.60498046875, 1.197265625, 0.035369873046875, 0.65234375, 0.0002846717834472656, 0.04144287109375, 0.01092529296875, 0.0242919921875], "tokens": [397, 320, 284, 320, 813, 301, 397, 442, 1596, 15483, 2931, 1103, 26, 1251, 30, 2841, 30, 2091, 293, 284, 320, 334, 320, 719, 945, 4004, 1596, 15483, 1103, 5465, 652, 26, 1212, 1541, 30, 4004, 2841, 30, 4004, 2091, 27, 301, 284, 892, 2841, 882, 280, 2841, 32, 7069, 473, 284]}
{"line_number": 759, "line_type": "original", "code": "    Preconditions.checkState(", "entropy": 1.8408203125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [3.5859375, 7.24609375, 0.0035228729248046875, 0.003017425537109375, 0.1510009765625, 0.06005859375], "tokens": [264, 40596, 32, 1553, 1078, 26]}
{"line_number": 759, "line_type": "generated", "code": "\n    } else if (NodeUtil.isLiteralValue(left, false) &&\n        NodeUtil.isLiteralValue(right, false)) {\n      return tryFoldAddConstant(node, left, right);", "entropy": 0.188232421875, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.45751953125, 0.045684814453125, 0.7470703125, 0.5693359375, 0.08551025390625, 0.6015625, 0.0009531974792480469, 1.239776611328125e-05, 0.375732421875, 0.9013671875, 0.0121612548828125, 0.0002410411834716797, 0.369384765625, 0.047943115234375, 0.1517333984375, 0.1273193359375, 0.1524658203125, 0.95263671875, 0.047576904296875, 0.0001895427703857422, 0.0001589059829711914, 0.03533935546875, 0.02008056640625, 0.0029430389404296875, 0.0004839897155761719, 0.0009121894836425781, 0.0027751922607421875, 0.009063720703125, 0.0665283203125, 0.00572967529296875, 0.1575927734375, 1.1962890625, 0.02642822265625, 0.0037097930908203125, 0.261962890625, 0.1243896484375, 0.50390625, 0.01303863525390625, 0.00556182861328125, 0.00482177734375, 0.0022068023681640625, 0.0006570816040039062, 0.005992889404296875], "tokens": [284, 320, 813, 415, 308, 1212, 1733, 32, 297, 8208, 882, 26, 1873, 30, 901, 27, 962, 291, 4004, 1733, 32, 297, 8208, 882, 26, 990, 30, 901, 490, 301, 397, 442, 1596, 15483, 1103, 5465, 26, 1251, 30, 2841, 30, 2091, 293]}
{"line_number": 763, "line_type": "original", "code": "    Preconditions.checkState(", "entropy": 1.8017578125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [4.73046875, 5.96484375, 0.005954742431640625, 0.0183563232421875, 0.056793212890625, 0.032257080078125], "tokens": [264, 40596, 32, 1553, 1078, 26]}
{"line_number": 763, "line_type": "generated", "code": "\n        reportCodeChange();\n      }\n      return result;\n    }\n  }\n\n  /**\n   * Folds a string concatenation expression.\n   * @param n The ADD node\n   * @param left The left operand\n   * @param right The right operand\n  ", "entropy": 0.517578125, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.438232421875, 1.796875, 0.005352020263671875, 4.9233436584472656e-05, 0.015045166015625, 0.262939453125, 0.00016129016876220703, 0.1318359375, 0.015777587890625, 0.00902557373046875, 0.01134490966796875, 0.006381988525390625, 0.00020015239715576172, 0.0260772705078125, 0.0005288124084472656, 0.1536865234375, 0.7021484375, 0.12939453125, 0.0004379749298095703, 2.28515625, 1.08984375, 2.3203125, 1.52734375, 0.6748046875, 0.099853515625, 2.78515625, 1.71875, 0.321533203125, 0.28515625, 1.392578125, 0.640625, 1.9658203125, 0.58642578125, 1.775390625, 0.2327880859375, 1.1396484375, 0.0374755859375, 0.001567840576171875, 0.0252838134765625, 0.035919189453125, 0.169189453125, 0.50634765625, 0.8896484375, 0.6171875, 0.0003447532653808594, 0.0003631114959716797, 0.0022182464599609375, 0.00196075439453125, 0.0197296142578125, 0.01074981689453125, 0.0033245086669921875, 0.0308837890625], "tokens": [291, 3639, 1227, 1791, 473, 397, 320, 397, 442, 1056, 45, 284, 320, 334, 320, 719, 1022, 664, 319, 40809, 101, 312, 802, 14314, 23597, 6101, 32, 664, 319, 477, 753, 310, 886, 8897, 1541, 664, 319, 477, 753, 2841, 886, 2841, 19236, 664, 319, 477, 753, 2091, 886, 2091, 19236, 664]}
{"line_number": 768, "line_type": "original", "code": "    Double rightValObj = NodeUtil.getNumberValue(right);", "entropy": 1.6025390625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [7.234375, 10.375, 1.3095703125, 0.041015625, 0.95458984375, 0.2158203125, 0.78515625, 0.0060882568359375, 0.0004203319549560547, 1.419921875, 0.009124755859375, 0.0034503936767578125, 0.039398193359375, 0.045379638671875], "tokens": [264, 6934, 2091, 1402, 3273, 280, 4004, 1733, 32, 37903, 882, 26, 990, 293]}
{"line_number": 768, "line_type": "generated", "code": "\n  /**\n   * Try to fold a string concatenation.\n   *\n   * @param node The ADD node to try to fold.\n   * @param left The left operand.\n   * @param right The right operand.\n   * @return The new node", "entropy": 0.4599609375, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.56201171875, 1.228515625, 0.1260986328125, 0.0006155967712402344, 1.2666015625, 0.376220703125, 0.33544921875, 1.171875, 1.515625, 0.73046875, 0.1055908203125, 1.6494140625, 0.2401123046875, 0.3486328125, 0.93798828125, 0.0031681060791015625, 0.64794921875, 0.55810546875, 0.42138671875, 0.71728515625, 1.53125, 0.199951171875, 1.7978515625, 1.294921875, 0.609375, 0.1058349609375, 0.391845703125, 0.032440185546875, 0.017333984375, 0.0094451904296875, 0.02838134765625, 0.021209716796875, 0.117919921875, 0.51708984375, 0.96435546875, 0.68017578125, 0.06915283203125, 0.0003635883331298828, 0.0014848709106445312, 0.004299163818359375, 0.0024204254150390625, 0.008331298828125, 0.01337432861328125, 0.0031604766845703125, 0.0221099853515625, 0.0124969482421875, 0.204345703125, 0.055206298828125, 0.007137298583984375, 0.450927734375, 1.365234375, 0.44091796875], "tokens": [334, 1022, 664, 319, 8959, 372, 11426, 312, 802, 14314, 23597, 32, 664, 319, 664, 319, 477, 753, 1541, 886, 8897, 1541, 372, 1596, 372, 11426, 32, 664, 319, 477, 753, 2841, 886, 2841, 19236, 32, 664, 319, 477, 753, 2091, 886, 2091, 19236, 32, 664, 319, 477, 601, 886, 537, 1541]}
{"line_number": 769, "line_type": "original", "code": "    if (rightValObj != null && left.getType() == opType) {", "entropy": 1.31640625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [4.83984375, 2.001953125, 0.1259765625, 2.62109375, 1.84375, 0.12359619140625, 0.685546875, 0.006908416748046875, 1.0712890625, 2.12109375, 0.1822509765625, 0.83056640625, 0.00232696533203125, 0.07891845703125, 6.40234375, 0.022674560546875, 0.62841796875, 0.09539794921875], "tokens": [264, 415, 308, 990, 1402, 3273, 863, 744, 962, 2841, 32, 10272, 346, 610, 3089, 620, 27, 301]}
{"line_number": 769, "line_type": "generated", "code": "\n  /**\n   * Try to fold a string concatenation.\n   */\n  private Node tryFoldAddConstantString(Node node, Node left, Node right) {\n    String leftString = left.getString();\n    String rightString = right.getString();\n\n   ", "entropy": 0.3056640625, "is_bug_line": false, "sus_score": 0.30151134457776363, "per_token_entropy": [0.4169921875, 0.84716796875, 0.11016845703125, 0.0005259513854980469, 1.1962890625, 0.380859375, 0.3369140625, 1.138671875, 1.5380859375, 0.7373046875, 0.1234130859375, 1.6591796875, 0.2388916015625, 1.2236328125, 0.01216888427734375, 0.05291748046875, 0.01641845703125, 0.0018482208251953125, 0.0006327629089355469, 0.11126708984375, 0.040496826171875, 0.00034546852111816406, 0.0026264190673828125, 0.0221405029296875, 0.6064453125, 0.0014944076538085938, 0.01204681396484375, 0.0200653076171875, 0.0083160400390625, 0.00550079345703125, 0.0008292198181152344, 0.0004322528839111328, 0.001987457275390625, 0.022918701171875, 1.23046875, 0.57080078125, 1.2236328125, 0.037017822265625, 0.75927734375, 0.0003037452697753906, 0.036773681640625, 0.0105438232421875, 0.0149993896484375, 0.1680908203125, 0.0011034011840820312, 0.0010280609130859375, 0.0014629364013671875, 0.02862548828125, 2.5153160095214844e-05, 0.00041294097900390625, 0.0013599395751953125, 0.921875], "tokens": [334, 1022, 664, 319, 8959, 372, 11426, 312, 802, 14314, 23597, 32, 664, 569, 334, 945, 4004, 1596, 15483, 1103, 5465, 652, 26, 1212, 1541, 30, 4004, 2841, 30, 4004, 2091, 27, 301, 284, 892, 2841, 652, 280, 2841, 32, 7069, 473, 284, 892, 2091, 652, 280, 2091, 32, 7069, 473, 446]}
