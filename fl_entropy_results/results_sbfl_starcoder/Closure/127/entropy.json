{"line_number": 59, "line_type": "original", "code": "      boolean removeNoOpStatements) {", "entropy": 2.68359375, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [6.15234375, 4.5, 2.8515625, 3.337890625, 0.01006317138671875, 0.08270263671875, 4.40625, 0.133056640625], "tokens": [647, 1905, 3345, 2023, 3397, 26527, 27, 301]}
{"line_number": 59, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Removes a statement if it is an expression statement and is immediately\n   * preceded by a return statement.\n   *\n   * @param n The statement to remove.\n   */\n  private void removeDeadExprStatementSafely(", "entropy": 0.495849609375, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [0.88671875, 0.069091796875, 0.477783203125, 0.78662109375, 0.1207275390625, 0.00028777122497558594, 1.21875, 1.5439453125, 0.45751953125, 1.62890625, 0.32421875, 0.9189453125, 2.39453125, 0.2449951171875, 0.25390625, 0.7373046875, 2.392578125, 2.978515625, 0.036895751953125, 0.0003638267517089844, 0.9189453125, 0.00360870361328125, 0.046051025390625, 0.2325439453125, 0.30419921875, 0.736328125, 0.29931640625, 0.480712890625, 0.783203125, 0.466796875, 0.01062774658203125, 0.73095703125, 0.156005859375, 0.3994140625, 0.4814453125, 0.3095703125, 0.50244140625, 0.71875, 0.295166015625, 0.04742431640625, 0.11126708984375, 0.0174102783203125, 0.11376953125, 0.098876953125, 0.0418701171875, 0.00029969215393066406, 0.003231048583984375, 3.743171691894531e-05, 0.0012807846069335938, -0.0, -0.0, 0.0007147789001464844], "tokens": [334, 320, 719, 1022, 664, 319, 24992, 312, 7603, 415, 561, 438, 600, 6101, 7603, 461, 438, 13282, 664, 319, 48911, 981, 810, 312, 442, 7603, 32, 664, 319, 664, 319, 477, 753, 310, 886, 7603, 372, 3345, 32, 664, 569, 334, 945, 763, 3345, 17563, 6150, 5495, 69, 1549, 3128, 26]}
{"line_number": 60, "line_type": "original", "code": "    this.compiler = compiler;", "entropy": 1.998046875, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [2.486328125, 9.2421875, 0.024169921875, 1.9990234375, 0.06494140625, 0.1497802734375, 0.016510009765625], "tokens": [264, 458, 32, 10199, 280, 8980, 45]}
{"line_number": 60, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Try to remove a statement that is unreachable because its condition is\n   * always false.\n   *\n   * @param n The statement to remove.\n   */\n  private void tryRemoveUnconditionalBranching(Node n) {\n   ", "entropy": 0.5048828125, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [1.111328125, 0.037139892578125, 0.34765625, 0.7783203125, 0.1099853515625, 0.0002808570861816406, 2.341796875, 0.1181640625, 0.08990478515625, 1.8974609375, 1.013671875, 0.84521484375, 1.5751953125, 2.873046875, 1.5380859375, 1.7783203125, 1.26171875, 0.434326171875, 0.50634765625, 9.489059448242188e-05, 0.24072265625, 0.08135986328125, 0.297119140625, 0.64990234375, 0.59716796875, 0.650390625, 0.0097198486328125, 1.134765625, 0.09979248046875, 0.39013671875, 0.576171875, 0.339599609375, 0.81298828125, 0.94091796875, 0.22265625, 0.10174560546875, 0.1748046875, 0.017730712890625, 0.09613037109375, 0.051666259765625, 0.056793212890625, 0.002429962158203125, 0.0017547607421875, 0.0009379386901855469, 0.00017845630645751953, 0.0003485679626464844, 0.0004897117614746094, 0.004894256591796875, 0.0025787353515625, 0.00019228458404541016, 0.0005288124084472656, 0.0467529296875], "tokens": [334, 320, 719, 1022, 664, 319, 8959, 372, 3345, 312, 7603, 688, 438, 36878, 3301, 2819, 3700, 438, 664, 319, 5182, 901, 32, 664, 319, 664, 319, 477, 753, 310, 886, 7603, 372, 3345, 32, 664, 569, 334, 945, 763, 1596, 4913, 1061, 25065, 10094, 299, 26, 1212, 310, 27, 301, 284]}
{"line_number": 61, "line_type": "original", "code": "    this.removeNoOpStatements = removeNoOpStatements;", "entropy": 1.798828125, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [1.48046875, 9.1875, 3.537109375, 2.41796875, 5.09375, 0.023284912109375, 0.6943359375, 0.321044921875, 0.60009765625, 0.004199981689453125, 0.0008568763732910156, 0.0033016204833984375, 0.0243682861328125], "tokens": [264, 458, 32, 2546, 2023, 3397, 26527, 280, 3345, 2023, 3397, 26527, 45]}
{"line_number": 61, "line_type": "generated", "code": "\n     * If the node has a single child, and the child is a statement node,\n     * then the node can be removed.\n     */\n    private void tryRemoveUnconditionalBranching(Node n) {\n      List<DiGraphEdge<Node,", "entropy": 0.626953125, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [0.9033203125, 0.734375, 2.142578125, 1.091796875, 1.5068359375, 1.4169921875, 1.7607421875, 1.21484375, 1.14453125, 0.69140625, 0.810546875, 1.1357421875, 0.5986328125, 0.494873046875, 0.677734375, 2.6015625, 1.9365234375, 0.2890625, 0.52978515625, 0.0002257823944091797, 0.9638671875, 2.009765625, 0.8232421875, 1.556640625, 0.1427001953125, 0.6884765625, 1.357421875, 0.533203125, 0.61865234375, 0.028411865234375, 0.051239013671875, 0.10455322265625, 0.11279296875, 0.0014295578002929688, 0.012603759765625, 2.7179718017578125e-05, 3.540515899658203e-05, 5.924701690673828e-05, 0.0006389617919921875, 0.0086822509765625, 0.095458984375, 0.00047850608825683594, 0.0006475448608398438, 0.0235137939453125, 1.4248046875, 0.056884765625, 0.259033203125, 4.76837158203125e-07, 0.030670166015625, 0.0010843276977539062, 0.017364501953125, 0.0001169443130493164], "tokens": [275, 319, 1670, 322, 1541, 1401, 312, 3982, 2838, 30, 461, 322, 2838, 438, 312, 7603, 1541, 30, 275, 319, 1615, 322, 1541, 883, 526, 6556, 32, 275, 569, 284, 945, 763, 1596, 4913, 1061, 25065, 10094, 299, 26, 1212, 310, 27, 301, 397, 1682, 46, 2820, 3406, 6530, 46, 1212, 30]}
{"line_number": 62, "line_type": "original", "code": "  }", "entropy": 7.97265625, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [5.953125, 9.9921875], "tokens": [225, 320]}
{"line_number": 62, "line_type": "generated", "code": "\n     * return, or throw).\n     */\n    private void tryRemoveUnconditionalBranching(Node n) {\n      Preconditions.checkArgument(n.isBreak(), n.isContinue(), n.isReturn(),\n          n.isThrow());\n      Node", "entropy": 0.26953125, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [0.1956787109375, 0.0021915435791015625, 0.131103515625, 0.76025390625, 1.2490234375, 0.64453125, 0.60791015625, 0.50146484375, 0.353271484375, 0.0113067626953125, 0.04803466796875, 0.047576904296875, 0.0023288726806640625, 0.00011670589447021484, 0.00011658668518066406, 6.556510925292969e-06, 2.2649765014648438e-06, 0.00011479854583740234, 0.0003139972686767578, 0.014984130859375, 0.0218353271484375, 0.0002579689025878906, 0.000385284423828125, 0.025299072265625, 1.359375, 0.0005078315734863281, 0.0092315673828125, 0.5439453125, 0.034881591796875, 0.3935546875, 0.0721435546875, 0.05877685546875, 0.37353515625, 0.46142578125, 0.404052734375, 0.86181640625, 1.3857421875, 0.1861572265625, 0.0699462890625, 0.2393798828125, 0.0091705322265625, 0.01549530029296875, 0.0047607421875, 0.19580078125, 0.46875, 0.0208892822265625, 0.011749267578125, 0.0237579345703125, 0.01264190673828125, 0.130126953125, 0.251708984375, 1.7998046875], "tokens": [275, 319, 442, 30, 556, 1422, 547, 275, 569, 284, 945, 763, 1596, 4913, 1061, 25065, 10094, 299, 26, 1212, 310, 27, 301, 397, 40596, 32, 1553, 3484, 26, 96, 32, 297, 10438, 1026, 310, 32, 297, 17743, 1026, 310, 32, 297, 2891, 1026, 616, 310, 32, 297, 6561, 1035, 397, 4004]}
{"line_number": 66, "line_type": "original", "code": "    NodeTraversal.traverseChangedFunctions(compiler, new FunctionCallback() {", "entropy": 2.39453125, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [4.359375, 10.53125, 2.701171875, 1.0302734375, 0.0628662109375, 10.4609375, 1.3681640625, 0.52197265625, 0.5009765625, 0.37353515625, 3.06640625, 0.66064453125, 0.026824951171875, 0.2098388671875, 0.046295166015625], "tokens": [264, 4004, 35699, 32, 33261, 3650, 10905, 26, 10199, 30, 537, 4540, 3296, 346, 301]}
{"line_number": 66, "line_type": "generated", "code": "\n     * is that we want to remove the whole chain of unconditional branches\n     * if possible.\n     */\n    private void tryRemoveUnconditionalBranching(Node n) {\n      if (n.isReturn() || n.isBreak() || n", "entropy": 0.43994140625, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [1.03125, 0.030670166015625, 0.34326171875, 0.78173828125, 2.09375, 1.0703125, 0.04327392578125, 0.82568359375, 2.41796875, 1.7353515625, 1.0244140625, 0.330322265625, 0.92724609375, 0.0265960693359375, 0.42724609375, 1.447265625, 0.005527496337890625, 2.099609375, 0.9755859375, 0.381103515625, 0.69677734375, 0.322509765625, 0.058074951171875, 0.052459716796875, 0.0655517578125, 0.0028514862060546875, 0.0008153915405273438, 0.0023956298828125, 6.580352783203125e-05, 0.0001004934310913086, 0.000843048095703125, 0.0016345977783203125, 0.03582763671875, 0.033905029296875, 0.0005016326904296875, 0.0009140968322753906, 0.11737060546875, 1.1142578125, 0.425537109375, 0.2059326171875, 0.050994873046875, 0.1978759765625, 0.76025390625, 0.382080078125, 0.1396484375, 0.0653076171875, 0.0007634162902832031, 0.020843505859375, 0.07958984375, 0.016754150390625, 0.0023174285888671875, 0.002758026123046875], "tokens": [275, 319, 438, 688, 996, 2637, 372, 3345, 322, 9844, 8241, 432, 707, 25065, 19216, 275, 319, 415, 4195, 32, 275, 569, 284, 945, 763, 1596, 4913, 1061, 25065, 10094, 299, 26, 1212, 310, 27, 301, 397, 415, 308, 96, 32, 297, 2891, 346, 1276, 310, 32, 297, 10438, 346, 1276, 310]}
{"line_number": 85, "line_type": "original", "code": "  }", "entropy": 4.5078125, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [4.35546875, 4.6640625], "tokens": [225, 320]}
{"line_number": 85, "line_type": "generated", "code": "\n       * Otherwise, if the node is a return node, check to see if the\n       * ControlFlowAnalysis.computeReturnNode is the same as the node.\n       * If it is, the return node is safe to be removed.\n       *\n       *", "entropy": 0.54150390625, "is_bug_line": false, "sus_score": 0.2013468165642073, "per_token_entropy": [0.8427734375, 0.466064453125, 3.744140625, 0.1341552734375, 1.66015625, 0.314208984375, 2.015625, 0.388427734375, 0.7509765625, 1.19140625, 0.89990234375, 0.304443359375, 1.7158203125, 0.67919921875, 0.006504058837890625, 0.043975830078125, 0.49609375, 0.82568359375, 0.0003504753112792969, 0.86962890625, 0.0017976760864257812, 0.0159912109375, 0.0100555419921875, 0.041534423828125, 1.2470703125, 0.1737060546875, 1.201171875, 0.69970703125, 0.130126953125, 0.1693115234375, 0.08673095703125, 1.9287109375, 0.403564453125, 1.0224609375, 0.0458984375, 0.469482421875, 0.482666015625, 0.01329803466796875, 0.069580078125, 0.67236328125, 0.451171875, 0.11553955078125, 0.09130859375, 0.10491943359375, 0.004970550537109375, 0.039581298828125, 0.00931549072265625, 0.10302734375, 0.16796875, 0.335205078125, 0.484130859375, 0.0176239013671875], "tokens": [1568, 319, 12779, 30, 415, 322, 1541, 438, 312, 442, 1541, 30, 1505, 372, 2318, 415, 322, 1568, 319, 7813, 4055, 9745, 32, 7924, 2891, 1212, 438, 322, 2432, 619, 322, 1541, 32, 1568, 319, 1670, 561, 438, 30, 322, 442, 1541, 438, 10061, 372, 526, 6556, 32, 1568, 319, 1568, 319]}
