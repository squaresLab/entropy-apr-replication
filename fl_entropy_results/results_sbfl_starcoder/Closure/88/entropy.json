{"line_number": 302, "line_type": "original", "code": "            return false;", "entropy": 3.52734375, "is_bug_line": false, "sus_score": 0.9354143466934853, "per_token_entropy": [10.625, 2.13671875, 1.32421875, 0.0217437744140625], "tokens": [1468, 442, 901, 45]}
{"line_number": 302, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.9354143466934853, "per_token_entropy": [], "tokens": []}
{"line_number": 330, "line_type": "original", "code": "        return VariableLiveness.KILL;", "entropy": 1.3291015625, "is_bug_line": true, "sus_score": 0.9354143466934853, "per_token_entropy": [7.94921875, 1.169921875, 0.042938232421875, 0.0004487037658691406, 3.647804260253906e-05, 0.00160980224609375, 1.44140625, 0.02423095703125], "tokens": [351, 442, 9870, 62, 28597, 32, 48995, 45]}
{"line_number": 330, "line_type": "generated", "code": "\n\n  /**\n   * @param t A template node.\n   * @param n The node to be removed.\n   * @param exprRoot The root of the expression we are removing.\n   * @param state The state of the variable.\n   */\n  private", "entropy": 0.7294921875, "is_bug_line": true, "sus_score": 0.9354143466934853, "per_token_entropy": [1.5498046875, 0.78076171875, 0.054046630859375, 0.0004901885986328125, 3.07421875, 0.73974609375, 2.171875, 2.330078125, 2.880859375, 1.4755859375, 1.099609375, 0.08740234375, 0.08526611328125, 0.023681640625, 0.2020263671875, 0.599609375, 0.9384765625, 0.9697265625, 0.8916015625, 1.8974609375, 1.9326171875, 0.362060546875, 0.07177734375, 0.15576171875, 0.041748046875, 0.1864013671875, 0.2396240234375, 0.016143798828125, 0.1417236328125, 0.5361328125, 0.17919921875, 0.10687255859375, 0.759765625, 2.951171875, 0.89111328125, 1.52734375, 0.390380859375, 0.06256103515625, 0.273681640625, 0.051361083984375, 0.079345703125, 0.2281494140625, 0.425048828125, 1.255859375, 0.352294921875, 0.186279296875, 0.84619140625, 1.380859375, 0.10223388671875, 0.255615234375, 0.05047607421875, 0.053375244140625], "tokens": [719, 1022, 664, 319, 477, 753, 273, 399, 3079, 1541, 32, 664, 319, 477, 753, 310, 886, 1541, 372, 526, 6556, 32, 664, 319, 477, 753, 9810, 4058, 886, 3051, 432, 322, 6101, 996, 884, 15255, 32, 664, 319, 477, 753, 1603, 886, 1603, 432, 322, 2677, 32, 664, 569, 334, 945]}
{"line_number": 301, "line_type": "original", "code": "          } else if (state == VariableLiveness.KILL) {", "entropy": 1.5244140625, "is_bug_line": false, "sus_score": 0.8366600265340756, "per_token_entropy": [10.9296875, 1.3701171875, 3.88671875, 0.83740234375, 0.07366943359375, 3.625, 0.0809326171875, 0.054962158203125, 0.002597808837890625, 0.0006227493286132812, 0.001461029052734375, 0.0916748046875, 0.377197265625, 0.01384735107421875], "tokens": [2033, 320, 813, 415, 308, 1293, 610, 9870, 62, 28597, 32, 48995, 27, 301]}
{"line_number": 301, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.8366600265340756, "per_token_entropy": [], "tokens": []}
{"line_number": 326, "line_type": "original", "code": "      if (NodeUtil.isLhs(n, n.getParent())) {", "entropy": 1.740234375, "is_bug_line": true, "sus_score": 0.7977240352174656, "per_token_entropy": [6.796875, 1.958984375, 0.160888671875, 1.015625, 0.0004162788391113281, 6.115436553955078e-05, 0.0732421875, 5.88671875, 0.82275390625, 2.03125, 0.457763671875, 3.1953125, 4.90625, 0.2330322265625, 1.4423828125, 0.5771484375, 0.01549530029296875], "tokens": [647, 415, 308, 1212, 1733, 32, 297, 62, 3914, 26, 96, 30, 310, 32, 18789, 5156, 301]}
{"line_number": 326, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": true, "sus_score": 0.7977240352174656, "per_token_entropy": [], "tokens": []}
{"line_number": 339, "line_type": "original", "code": "      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION", "entropy": 1.587890625, "is_bug_line": false, "sus_score": 0.7977240352174656, "per_token_entropy": [6.63671875, 2.169921875, 2.06640625, 2.16796875, 9.894371032714844e-06, 0.0008859634399414062, 0.0019235610961914062, 0.0090789794921875, 0.036285400390625, 4.76837158203125e-06, 0.00044989585876464844, 0.0006761550903320312, 0.00047087669372558594, 0.001438140869140625, 1.6650390625, 0.039764404296875, 0.044586181640625, 6.3828125, 3.427734375, 1.63671875, 7.05078125], "tokens": [647, 415, 1429, 2422, 4055, 3406, 32, 297, 6545, 299, 1812, 11812, 1212, 26, 2661, 490, 301, 434, 3182, 312, 17747]}
{"line_number": 339, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7977240352174656, "per_token_entropy": [], "tokens": []}
{"line_number": 340, "line_type": "original", "code": "        VariableLiveness state = isVariableReadBeforeKill(child, variable);", "entropy": 1.0283203125, "is_bug_line": false, "sus_score": 0.7977240352174656, "per_token_entropy": [8.296875, 4.07421875, 0.006134033203125, 2.8014183044433594e-05, 0.0242156982421875, 0.039947509765625, 1.130859375, 0.005298614501953125, 0.006244659423828125, 0.0014066696166992188, 0.0007615089416503906, 0.00681304931640625, 2.69140625, 0.005641937255859375, 0.160888671875, 0.006500244140625], "tokens": [351, 9870, 62, 28597, 1603, 280, 438, 3818, 2230, 5658, 27875, 26, 2661, 30, 2677, 293]}
{"line_number": 340, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7977240352174656, "per_token_entropy": [], "tokens": []}
{"line_number": 341, "line_type": "original", "code": "        if (state != VariableLiveness.MAYBE_LIVE) {", "entropy": 0.962890625, "is_bug_line": false, "sus_score": 0.7977240352174656, "per_token_entropy": [7.69921875, 2.734375, 0.12139892578125, 1.484375, 1.701171875, 0.04541015625, 0.0026531219482421875, 0.00019979476928710938, 0.0014591217041015625, 0.578125, 0.00025200843811035156, 0.0003886222839355469, 6.341934204101562e-05, 0.0523681640625, 0.02520751953125], "tokens": [351, 415, 308, 1293, 863, 9870, 62, 28597, 32, 44380, 81, 1798, 2478, 27, 301]}
{"line_number": 341, "line_type": "generated", "code": "\n\n  /**\n   * Remove assignments to variables that are not read.\n   */\n  public void tryRemoveDeadAssignments(Node n, Node exprRoot) {\n    if (n.isAssign()) {\n      tryRemoveAssignment(n, exprRoot);\n    }", "entropy": 0.65283203125, "is_bug_line": false, "sus_score": 0.7977240352174656, "per_token_entropy": [1.4619140625, 0.6171875, 0.049285888671875, 0.0007519721984863281, 3.46484375, 2.59375, 1.10546875, 1.232421875, 0.77001953125, 0.2086181640625, 1.6796875, 1.5361328125, 1.3720703125, 0.3212890625, 1.0849609375, 0.03924560546875, 2.150390625, 0.449462890625, 0.794921875, 0.221435546875, 1.310546875, 0.05902099609375, 0.2109375, 0.270751953125, 0.95263671875, 0.51171875, 0.36669921875, 0.396484375, 0.0091705322265625, 0.52490234375, 0.004596710205078125, 0.083740234375, 1.712890625, 0.2288818359375, 0.9296875, 0.1292724609375, 0.29296875, 0.5068359375, 0.262939453125, 0.0031986236572265625, 0.064453125, 1.4365234375, 0.03656005859375, 0.1373291015625, 0.03778076171875, 0.26171875, 0.09246826171875, 1.384765625, 9.608268737792969e-05, 0.41845703125, 0.1397705078125, 0.0001989603042602539], "tokens": [719, 1022, 664, 319, 6478, 29410, 372, 4886, 688, 884, 646, 1491, 32, 664, 569, 334, 562, 763, 1596, 4913, 17563, 35780, 26, 1212, 310, 30, 4004, 9810, 4058, 27, 301, 284, 415, 308, 96, 32, 297, 9079, 1157, 301, 397, 1596, 4913, 12589, 26, 96, 30, 9810, 4058, 293, 284, 320]}
{"line_number": 342, "line_type": "original", "code": "          return state;", "entropy": 3.966796875, "is_bug_line": false, "sus_score": 0.7977240352174656, "per_token_entropy": [10.140625, 1.435546875, 4.1875, 0.09979248046875], "tokens": [2033, 442, 1603, 45]}
{"line_number": 342, "line_type": "generated", "code": "\n  /**\n   * Given a statement, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on", "entropy": 0.26611328125, "is_bug_line": false, "sus_score": 0.7977240352174656, "per_token_entropy": [1.80859375, 1.0947265625, 0.067138671875, 0.0009737014770507812, 1.615234375, 0.40673828125, 2.23046875, 1.35546875, 1.5185546875, 0.062103271484375, 0.4287109375, 0.02325439453125, 0.049072265625, 0.33203125, 0.0694580078125, 0.056060791015625, 0.002132415771484375, 0.001842498779296875, 0.019439697265625, 0.00044846534729003906, 0.0029506683349609375, 0.08270263671875, 0.001453399658203125, 0.499755859375, 0.00757598876953125, 0.00012636184692382812, 0.00406646728515625, 0.002079010009765625, 0.034271240234375, 0.1021728515625, 0.017486572265625, 0.41943359375, 0.1068115234375, 0.01065826416015625, 0.335693359375, 0.09783935546875, 0.1064453125, 0.313232421875, 0.06414794921875, 0.12109375, 0.0309600830078125, 0.0002624988555908203, 0.091064453125, 0.10003662109375, 0.03765869140625, 0.01043701171875, 0.0166473388671875, 0.0037403106689453125, 0.0012826919555664062, 0.02911376953125, 0.006549835205078125, 0.032562255859375], "tokens": [334, 1022, 664, 319, 15273, 312, 7603, 30, 1541, 310, 328, 322, 4345, 461, 312, 1361, 31, 3242, 5537, 14192, 810, 9810, 4058, 619, 664, 319, 322, 3051, 30, 458, 667, 3217, 861, 415, 2017, 5375, 312, 1491, 432, 688, 664, 319, 2677, 2670, 312, 2866, 372, 688, 2677, 688, 438, 544]}
{"line_number": 295, "line_type": "original", "code": "        if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {", "entropy": 0.953125, "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [5.3828125, 0.9765625, 2.173828125, 2.177734375, 0.00014078617095947266, 0.0004749298095703125, 0.00034332275390625, 0.042388916015625, 0.287353515625, 5.817413330078125e-05, 0.004482269287109375, 0.01302337646484375, 0.00628662109375, 0.01116180419921875, 5.0546875, 0.0538330078125, 0.01515960693359375], "tokens": [351, 415, 1429, 2422, 4055, 3406, 32, 297, 6545, 299, 1812, 11812, 1212, 26, 43286, 490, 301]}
{"line_number": 295, "line_type": "generated", "code": "\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }\n\n  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a", "entropy": 0.164794921875, "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [0.2398681640625, 0.04266357421875, 0.472900390625, 0.0894775390625, 0.00428009033203125, 0.00011658668518066406, 1.5497207641601562e-06, 0.00031876564025878906, 0.0002524852752685547, 2.5987625122070312e-05, 1.0728836059570312e-06, 1.0728836059570312e-06, 0.006465911865234375, 0.060272216796875, 0.005748748779296875, 1.298828125, 0.63330078125, 0.042266845703125, 0.0005168914794921875, 1.5185546875, 0.411376953125, 1.4873046875, 0.6669921875, 0.37646484375, 0.01385498046875, 0.060638427734375, 0.006809234619140625, 0.01012420654296875, 0.08343505859375, 0.0259246826171875, 0.0191650390625, 0.0017290115356445312, 0.0007882118225097656, 0.01366424560546875, 0.0004086494445800781, 0.0016422271728515625, 0.039703369140625, 0.0008959770202636719, 0.06414794921875, 0.0034027099609375, 9.202957153320312e-05, 0.0032329559326171875, 0.0005817413330078125, 0.0247039794921875, 0.0797119140625, 0.0185699462890625, 0.1419677734375, 0.1009521484375, 0.01015472412109375, 0.257568359375, 0.09014892578125, 0.1363525390625], "tokens": [284, 320, 284, 442, 9870, 62, 28597, 32, 44380, 81, 1798, 2478, 45, 334, 320, 719, 1022, 664, 319, 15273, 312, 2677, 30, 1541, 310, 328, 322, 4345, 461, 312, 1361, 31, 3242, 5537, 14192, 810, 9810, 4058, 619, 664, 319, 322, 3051, 30, 458, 667, 3217, 861, 415, 2017, 5375, 312]}
{"line_number": 296, "line_type": "original", "code": "          VariableLiveness state = isVariableReadBeforeKill(sibling, variable);", "entropy": 1.666015625, "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [10.59375, 7.484375, 0.004863739013671875, 0.00016438961029052734, 1.7392578125, 0.056884765625, 2.072265625, 0.07916259765625, 0.08746337890625, 0.0240325927734375, 0.0035953521728515625, 0.035888671875, 4.3515625, 0.0159454345703125, 0.0926513671875, 0.01190185546875], "tokens": [2033, 9870, 62, 28597, 1603, 280, 438, 3818, 2230, 5658, 27875, 26, 43286, 30, 2677, 293]}
{"line_number": 296, "line_type": "generated", "code": "\n    return VariableLiveness.MAYBE_LIVE;\n  }", "entropy": 0.047821044921875, "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [0.408935546875, 0.1595458984375, 0.0075531005859375, 6.222724914550781e-05, 5.4836273193359375e-06, 0.0005054473876953125, 0.0003762245178222656, 2.753734588623047e-05, 1.9073486328125e-06, 1.6689300537109375e-06, 0.004886627197265625, 0.03314208984375, 0.006687164306640625], "tokens": [284, 442, 9870, 62, 28597, 32, 44380, 81, 1798, 2478, 45, 334, 320]}
{"line_number": 299, "line_type": "original", "code": "          if (state == VariableLiveness.READ) {", "entropy": 1.6083984375, "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [10.6953125, 2.716796875, 0.1483154296875, 2.091796875, 0.316650390625, 0.0482177734375, 0.00241851806640625, 0.00012731552124023438, 0.0014371871948242188, 3.03515625, 0.2091064453125, 0.032806396484375], "tokens": [2033, 415, 308, 1293, 610, 9870, 62, 28597, 32, 4409, 27, 301]}
{"line_number": 299, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [], "tokens": []}
{"line_number": 325, "line_type": "original", "code": "    if (NodeUtil.isName(n) && variable.equals(n.getString())) {", "entropy": 0.7490234375, "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [5.42578125, 1.6318359375, 0.1622314453125, 0.6435546875, 0.0004963874816894531, 4.363059997558594e-05, 0.029632568359375, 4.56640625, 0.1129150390625, 0.411376953125, 0.6357421875, 0.27294921875, 1.47265625, 0.045806884765625, 0.023651123046875, 0.002658843994140625, 0.1312255859375, 0.001247406005859375, 0.09942626953125, 0.051849365234375, 0.006076812744140625], "tokens": [264, 415, 308, 1212, 1733, 32, 297, 558, 26, 96, 27, 962, 2677, 32, 3574, 26, 96, 32, 7069, 5156, 301]}
{"line_number": 325, "line_type": "generated", "code": "\n\n  /**\n   * Returns true if the node n is an assignment to a variable that is\n   * declared as a parameter.\n   */\n  private boolean isParameterAssignment(Node n) {\n    Node parent = n.getParent();\n    if (parent == null", "entropy": 0.66162109375, "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [1.4580078125, 0.6845703125, 0.0543212890625, 0.0006918907165527344, 2.458984375, 0.97119140625, 0.07958984375, 0.71875, 1.607421875, 2.30859375, 0.63916015625, 1.7236328125, 0.51611328125, 1.1689453125, 0.6787109375, 0.81884765625, 1.609375, 0.560546875, 1.87109375, 0.0002391338348388672, 2.28125, 1.6318359375, 0.50390625, 0.7587890625, 1.4091796875, 0.172607421875, 0.252197265625, 0.0095672607421875, 0.07464599609375, 0.199462890625, 0.08648681640625, 1.2724609375, 0.58642578125, 0.0312347412109375, 0.053985595703125, 0.0148773193359375, 0.28955078125, 0.0005779266357421875, 0.085693359375, 1.2470703125, 0.7080078125, 0.0150299072265625, 0.036865234375, 0.00337982177734375, 0.0012645721435546875, 0.001613616943359375, 0.1253662109375, 0.5400390625, 0.260986328125, 0.6435546875, 1.185546875, 0.004459381103515625], "tokens": [719, 1022, 664, 319, 3759, 861, 415, 322, 1541, 310, 438, 600, 13807, 372, 312, 2677, 688, 438, 664, 319, 17103, 619, 312, 3395, 32, 664, 569, 334, 945, 1905, 438, 3012, 12589, 26, 1212, 310, 27, 301, 284, 4004, 2935, 280, 310, 32, 18789, 473, 284, 415, 308, 2544, 610, 744]}
{"line_number": 337, "line_type": "original", "code": "    for (Node child = n.getFirstChild();", "entropy": 1.0458984375, "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [6.23828125, 3.87890625, 0.1243896484375, 0.04290771484375, 0.900390625, 0.2098388671875, 0.064697265625, 0.006191253662109375, 0.018035888671875, 0.005157470703125, 0.0182037353515625], "tokens": [264, 436, 308, 1212, 2838, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 337, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [], "tokens": []}
{"line_number": 338, "line_type": "original", "code": "        child != null; child = child.getNext()) {", "entropy": 2.119140625, "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [8.5, 5.4921875, 7.6484375, 0.277587890625, 0.7412109375, 2.408203125, 0.00687408447265625, 0.0282440185546875, 0.006046295166015625, 0.0196075439453125, 0.1622314453125, 0.129150390625], "tokens": [351, 2838, 863, 744, 45, 2838, 280, 2838, 32, 23017, 1157, 301]}
{"line_number": 338, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7337993857053429, "per_token_entropy": [], "tokens": []}
{"line_number": 143, "line_type": "original", "code": "          if (n.hasChildren()) {", "entropy": 2.125, "is_bug_line": false, "sus_score": 0.6060915267313265, "per_token_entropy": [6.1484375, 4.65234375, 0.52783203125, 3.2734375, 0.30517578125, 3.755859375, 0.01519012451171875, 0.435302734375, 0.015594482421875], "tokens": [2033, 415, 308, 96, 32, 2040, 7640, 1157, 301]}
{"line_number": 143, "line_type": "generated", "code": "\n        return; // Not a local variable assignment.\n      }\n\n      if (isLive(t, state, lhs, exprRoot)) {\n        return; // Variable is live at the target instruction.\n      }\n\n      // If we get here, we are sure", "entropy": 0.712890625, "is_bug_line": false, "sus_score": 0.6060915267313265, "per_token_entropy": [0.1861572265625, 0.2022705078125, 0.00135040283203125, 0.192138671875, 0.64404296875, 0.15771484375, 0.08648681640625, 0.0208282470703125, 0.6943359375, 0.081298828125, 0.025299072265625, 0.00013327598571777344, 0.560546875, 1.13671875, 0.385498046875, 1.7666015625, 1.4404296875, 0.70068359375, 2.078125, 0.026397705078125, 2.126953125, 0.058807373046875, 1.880859375, 0.477783203125, 0.396240234375, 4.1365623474121094e-05, 0.1932373046875, 0.0033779144287109375, 0.12744140625, 0.1922607421875, 0.0005812644958496094, 0.3662109375, 1.818359375, 0.2412109375, 0.489013671875, 1.8984375, 0.94287109375, 1.392578125, 0.658203125, 0.117919921875, 0.08526611328125, 7.95125961303711e-05, 0.24072265625, 0.8349609375, 2.568359375, 1.96875, 1.560546875, 0.09710693359375, 0.12396240234375, 1.3828125, 2.63671875, 1.798828125], "tokens": [291, 442, 45, 434, 3182, 312, 2196, 2677, 13807, 32, 397, 320, 1687, 415, 308, 297, 11082, 26, 102, 30, 1603, 30, 16020, 30, 9810, 4058, 490, 301, 291, 442, 45, 434, 9870, 438, 10912, 821, 322, 1760, 12404, 32, 397, 320, 1687, 434, 1670, 996, 622, 2442, 30, 996, 884, 3654]}
{"line_number": 144, "line_type": "original", "code": "            tryRemoveAssignment(t, n.getFirstChild(), state);", "entropy": 1.763671875, "is_bug_line": false, "sus_score": 0.6060915267313265, "per_token_entropy": [7.79296875, 6.4921875, 0.22509765625, 0.376953125, 0.270263671875, 0.486572265625, 0.005290985107421875, 1.724609375, 1.6982421875, 3.44140625, 0.0037517547607421875, 0.08978271484375, 1.9921875, 0.0902099609375], "tokens": [1468, 1596, 4913, 12589, 26, 102, 30, 310, 32, 25657, 2931, 1026, 1603, 293]}
{"line_number": 144, "line_type": "generated", "code": "\n      }\n\n      // If the variable is not live at the point of the assignment, then it\n      // can be removed.\n      if (state.isLive(name, exprRoot)) {\n        return;\n      }\n\n      // If the variable is live at", "entropy": 0.6533203125, "is_bug_line": false, "sus_score": 0.6060915267313265, "per_token_entropy": [0.17919921875, 0.0101165771484375, 0.56787109375, 1.3203125, 2.53125, 0.79931640625, 1.2861328125, 0.305908203125, 2.025390625, 1.1123046875, 0.81103515625, 0.70751953125, 2.21875, 0.77734375, 0.499755859375, 0.564453125, 0.2054443359375, 1.06640625, 1.1669921875, 1.0029296875, 0.0008635520935058594, 1.62109375, 0.28564453125, 0.439697265625, 0.2607421875, 0.18359375, 0.54736328125, 1.34765625, 0.76611328125, 0.043182373046875, 1.302734375, 0.189453125, 0.302734375, 0.6181640625, 0.71630859375, 0.1922607421875, 0.00010669231414794922, 0.59765625, 0.003955841064453125, 0.0283203125, 0.061126708984375, 0.002719879150390625, 0.1072998046875, 0.00026988983154296875, 0.2489013671875, 0.52978515625, 1.5888671875, 0.39453125, 0.52392578125, 0.1624755859375, 1.1484375, 0.59814453125], "tokens": [397, 320, 1687, 434, 1670, 322, 2677, 438, 646, 10912, 821, 322, 2260, 432, 322, 13807, 30, 1615, 561, 397, 434, 883, 526, 6556, 32, 397, 415, 308, 1293, 32, 297, 11082, 26, 426, 30, 9810, 4058, 490, 301, 291, 442, 45, 397, 320, 1687, 434, 1670, 322, 2677, 438, 10912, 821]}
{"line_number": 293, "line_type": "original", "code": "      for(Node sibling = n.getNext(); sibling != null;", "entropy": 1.587890625, "is_bug_line": false, "sus_score": 0.5916079783099616, "per_token_entropy": [4.51953125, 6.1796875, 4.109375, 0.374755859375, 0.85693359375, 0.03521728515625, 3.052734375, 0.0142059326171875, 0.1591796875, 0.264892578125, 1.392578125, 0.0931396484375, 0.051727294921875, 1.1259765625], "tokens": [647, 436, 26, 1212, 40560, 280, 310, 32, 23017, 473, 40560, 863, 744, 45]}
{"line_number": 293, "line_type": "generated", "code": "\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }", "entropy": 0.051055908203125, "is_bug_line": false, "sus_score": 0.5916079783099616, "per_token_entropy": [0.176025390625, 0.01522064208984375, 0.071044921875, 0.0005049705505371094, 0.03253173828125, 0.0009298324584960938, 0.505859375, 0.072509765625, 0.0057525634765625, 2.5987625122070312e-05, 2.849102020263672e-05, 0.0007963180541992188, 0.00014913082122802734, 3.8623809814453125e-05, 1.3113021850585938e-06, 1.0728836059570312e-06, 0.0075531005859375, 0.07666015625, 0.004688262939453125], "tokens": [291, 320, 397, 320, 284, 320, 284, 442, 9870, 62, 28597, 32, 44380, 81, 1798, 2478, 45, 334, 320]}
{"line_number": 292, "line_type": "original", "code": "    while (n != exprRoot) {", "entropy": 2.072265625, "is_bug_line": false, "sus_score": 0.5773502691896257, "per_token_entropy": [6.2890625, 8.7890625, 0.40234375, 2.00390625, 0.413818359375, 0.3369140625, 0.006465911865234375, 0.3134765625, 0.09906005859375], "tokens": [264, 2218, 308, 96, 863, 9810, 4058, 27, 301]}
{"line_number": 292, "line_type": "generated", "code": "\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }\n\n  private void tryRemoveAssignment(\n      Node n, Node exprRoot, Node expr, VariableLiveness state) {\n    if (n.", "entropy": 0.34375, "is_bug_line": false, "sus_score": 0.5773502691896257, "per_token_entropy": [0.261962890625, 0.123291015625, 0.005199432373046875, 0.005054473876953125, 0.038482666015625, 0.0008406639099121094, 0.0299835205078125, 0.0001977682113647461, 0.0236358642578125, 0.0005269050598144531, 0.4189453125, 0.068115234375, 0.003223419189453125, 3.039836883544922e-05, 7.557868957519531e-05, 0.003955841064453125, 0.0005311965942382812, 2.5391578674316406e-05, 4.76837158203125e-07, 1.0728836059570312e-06, 0.004207611083984375, 0.07611083984375, 0.004985809326171875, 1.02734375, 1.5986328125, 1.232421875, 0.66552734375, 0.59130859375, 1.4375, 0.2271728515625, 0.343994140625, 0.63671875, 1.5625, 0.0008997917175292969, 0.06842041015625, 0.81787109375, 0.1280517578125, 0.0017786026000976562, 0.04876708984375, 0.38671875, 1.068359375, 0.70654296875, 0.2005615234375, 0.0005664825439453125, 0.529296875, 0.0249481201171875, 0.00733184814453125, 0.373779296875, 0.9169921875, 0.255615234375, 1.765625, 0.1832275390625], "tokens": [616, 442, 1603, 45, 291, 320, 397, 320, 284, 320, 284, 442, 9870, 62, 28597, 32, 44380, 81, 1798, 2478, 45, 334, 320, 719, 945, 763, 1596, 4913, 12589, 26, 397, 4004, 310, 30, 4004, 9810, 4058, 30, 4004, 9810, 30, 9870, 62, 28597, 1603, 27, 301, 284, 415, 308, 96, 32]}
{"line_number": 234, "line_type": "original", "code": "        n.removeChild(rhs);", "entropy": 3.369140625, "is_bug_line": false, "sus_score": 0.5091750772173156, "per_token_entropy": [6.3125, 5.55078125, 2.982421875, 7.765625, 0.0095367431640625, 0.9248046875, 0.039642333984375], "tokens": [351, 310, 32, 28878, 26, 14312, 293]}
{"line_number": 234, "line_type": "generated", "code": "\n   * @param n The node to start searching from.\n   * @param exprRoot The root of the subtree to search.\n   * @param var The variable to check.\n   * @return Whether there exists a read of var before a write to var", "entropy": 0.51171875, "is_bug_line": false, "sus_score": 0.5091750772173156, "per_token_entropy": [0.39599609375, 0.052459716796875, 1.77734375, 0.087646484375, 0.1141357421875, 0.755859375, 0.441162109375, 1.1826171875, 1.6728515625, 1.6708984375, 0.75732421875, 0.10089111328125, 0.034942626953125, 0.0109710693359375, 0.002925872802734375, 0.005771636962890625, 0.04962158203125, 0.0034694671630859375, 0.126220703125, 0.51025390625, 0.0760498046875, 0.08807373046875, 1.69140625, 1.1103515625, 0.9404296875, 1.0556640625, 0.029266357421875, 0.01216888427734375, 0.004383087158203125, 0.040313720703125, 0.380859375, 0.428466796875, 0.11639404296875, 0.448486328125, 2.02734375, 0.8447265625, 0.0082855224609375, 0.74951171875, 0.01251983642578125, 0.0105743408203125, 0.6806640625, 1.033203125, 1.1396484375, 0.20849609375, 0.12646484375, 0.5830078125, 1.7177734375, 0.734375, 0.221923828125, 0.00971221923828125, 0.21484375, 0.11566162109375], "tokens": [664, 319, 477, 753, 310, 886, 1541, 372, 1477, 20286, 645, 32, 664, 319, 477, 753, 9810, 4058, 886, 3051, 432, 322, 37255, 372, 3233, 32, 664, 319, 477, 753, 773, 886, 2677, 372, 1505, 32, 664, 319, 477, 601, 14071, 2017, 5375, 312, 1491, 432, 773, 2670, 312, 2866, 372, 773]}
{"line_number": 235, "line_type": "original", "code": "        n.getParent().replaceChild(n, rhs);", "entropy": 2.255859375, "is_bug_line": false, "sus_score": 0.5091750772173156, "per_token_entropy": [7.31640625, 8.1015625, 2.78125, 3.158203125, 0.9873046875, 1.98828125, 0.01268768310546875, 0.00952911376953125, 0.0430908203125, 0.0088043212890625, 2.578125, 0.08502197265625], "tokens": [351, 310, 32, 18789, 922, 3227, 2931, 26, 96, 30, 9322, 293]}
{"line_number": 235, "line_type": "generated", "code": "\n   * y = 1, x = 1, print(x) // false, there is a read right of n but\n   *                       // it's not the last read.\n   * y = 1, x = 1, x =", "entropy": 0.521484375, "is_bug_line": false, "sus_score": 0.5091750772173156, "per_token_entropy": [0.49072265625, 0.0192413330078125, 1.4326171875, 0.00824737548828125, 0.100830078125, 0.0170135498046875, 0.0207061767578125, 0.323974609375, 0.0305328369140625, 0.10772705078125, 0.070068359375, 0.08294677734375, 1.0830078125, 0.0268402099609375, 1.20703125, 1.5732421875, 0.53271484375, 0.9931640625, 0.061126708984375, 0.1461181640625, 0.0157623291015625, 0.2098388671875, 0.060760498046875, 0.27783203125, 0.01263427734375, 0.0167236328125, 0.50244140625, 0.7333984375, 0.005512237548828125, 2.171875, 0.103515625, 2.599609375, 1.43359375, 0.97900390625, 1.9677734375, 2.470703125, 0.984375, 0.70947265625, 0.02703857421875, 0.1854248046875, 1.244140625, 0.00550079345703125, 0.056121826171875, 0.0154876708984375, 0.0242156982421875, 0.234619140625, 0.059295654296875, 0.0914306640625, 0.04541015625, 0.09954833984375, 1.2880859375, 0.1600341796875], "tokens": [664, 319, 533, 280, 225, 35, 30, 816, 280, 225, 35, 30, 1459, 26, 106, 27, 434, 901, 30, 2017, 438, 312, 1491, 2091, 432, 310, 1273, 664, 319, 7693, 434, 561, 1182, 646, 322, 2401, 1491, 32, 664, 319, 533, 280, 225, 35, 30, 816, 280, 225, 35, 30, 816, 280]}
{"line_number": 260, "line_type": "original", "code": "      compiler.reportCodeChange();", "entropy": 1.9375, "is_bug_line": false, "sus_score": 0.48304589153964794, "per_token_entropy": [8.7421875, 4.76953125, 0.0011701583862304688, 0.026123046875, 0.021270751953125, 0.00017142295837402344, 0.0031452178955078125], "tokens": [647, 8980, 32, 3734, 1227, 1791, 473]}
{"line_number": 260, "line_type": "generated", "code": "\n\n  /**\n   * Returns the VariableLiveness state of the given node.\n   *\n   * @param n The node to look at.\n   * @param variable The variable to look at.\n   * @return The VariableLiveness state of the given node", "entropy": 0.489501953125, "is_bug_line": false, "sus_score": 0.48304589153964794, "per_token_entropy": [1.134765625, 0.375244140625, 0.038421630859375, 0.0003943443298339844, 1.9677734375, 1.3173828125, 2.072265625, 0.039825439453125, 0.0038776397705078125, 1.8564453125, 0.6005859375, 0.77197265625, 1.408203125, 0.84716796875, 1.1328125, 0.373046875, 0.39208984375, 0.623046875, 0.005054473876953125, 0.56103515625, 0.10009765625, 0.285400390625, 0.259765625, 0.34814453125, 0.7587890625, 1.6220703125, 0.04388427734375, 0.07489013671875, 0.020843505859375, 0.13671875, 0.0173492431640625, 0.11181640625, 0.299072265625, 0.06597900390625, 0.287353515625, 0.99462890625, 0.41259765625, 0.80126953125, 0.051361083984375, 0.00830078125, 0.8349609375, 0.1202392578125, 0.0281219482421875, 0.5439453125, 0.525390625, 0.00957489013671875, 0.0013446807861328125, 0.294677734375, 0.442626953125, 0.09051513671875, 0.309326171875, 0.032684326171875], "tokens": [719, 1022, 664, 319, 3759, 322, 9870, 62, 28597, 1603, 432, 322, 2702, 1541, 32, 664, 319, 664, 319, 477, 753, 310, 886, 1541, 372, 2779, 821, 32, 664, 319, 477, 753, 2677, 886, 2677, 372, 2779, 821, 32, 664, 319, 477, 601, 886, 9870, 62, 28597, 1603, 432, 322, 2702, 1541]}
