{"line_number": 734, "line_type": "original", "code": "              hasPropertyAssign = true;", "entropy": 3.599609375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [9.96875, 9.109375, 2.0, 0.1236572265625, 0.250244140625, 3.7109375, 0.037445068359375], "tokens": [2850, 1401, 1653, 9079, 280, 861, 45]}
{"line_number": 734, "line_type": "generated", "code": "\n    }\n  }\n\n  private static class Assign {\n    private final Node assignNode;\n    private final boolean isPropertyAssign;\n\n    private Assign(Node assignNode, boolean isPropertyAssign) {\n      this.assignNode = assignNode;\n      this.is", "entropy": 0.208984375, "is_bug_line": false, "sus_score": 0.24253562503633297, "per_token_entropy": [0.55615234375, 0.0096435546875, 0.2470703125, 0.0012083053588867188, 0.464599609375, 1.7880859375, 1.4482421875, 0.4365234375, 0.6513671875, 0.07049560546875, 0.040985107421875, 0.994140625, 0.297119140625, 0.390869140625, 0.0938720703125, 0.005832672119140625, 0.0008950233459472656, 0.033966064453125, 0.0599365234375, 0.03741455078125, 0.5673828125, 0.00817108154296875, 0.0609130859375, 0.00018131732940673828, 0.002410888671875, 0.51953125, 1.6396484375, 0.033111572265625, 0.001476287841796875, 0.0242462158203125, 0.1419677734375, 0.042724609375, 0.142822265625, 0.0115509033203125, 0.0024776458740234375, 0.00267791748046875, 0.0014905929565429688, 0.0005812644958496094, 0.00037217140197753906, 0.0019435882568359375, 0.023223876953125, 6.282329559326172e-05, 0.0015201568603515625, 2.014636993408203e-05, 9.763240814208984e-05, 0.003147125244140625, 2.09808349609375e-05, 0.00031304359436035156, 0.0010175704956054688, 0.0009860992431640625, 1.6450881958007812e-05, 0.00019288063049316406], "tokens": [284, 320, 334, 320, 719, 945, 907, 443, 17069, 301, 284, 945, 1158, 4004, 5313, 1212, 45, 284, 945, 1158, 1905, 438, 1653, 9079, 45, 446, 945, 17069, 26, 1212, 5313, 1212, 30, 1905, 438, 1653, 9079, 27, 301, 397, 458, 32, 5157, 1212, 280, 5313, 1212, 45, 397, 458, 32, 297]}
{"line_number": 735, "line_type": "original", "code": "            } else if (!NodeUtil.isLiteralValue(", "entropy": 1.9423828125, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [8.1171875, 5.67578125, 2.93359375, 0.73046875, 2.599609375, 2.1328125, 0.0009121894836425781, 0.0004703998565673828, 0.0635986328125, 1.0126953125, 0.03729248046875, 0.01029205322265625], "tokens": [1468, 320, 813, 415, 1429, 1212, 1733, 32, 297, 8208, 882, 26]}
{"line_number": 735, "line_type": "generated", "code": "\n      if (convention.isPrivate(var.getName())) {\n        // TODO(johnlenz): consider removing this var, but only\n        // if it is not used in any externally-visible scope.\n        continue;\n      }", "entropy": 0.83935546875, "is_bug_line": false, "sus_score": 0.23570226039551587, "per_token_entropy": [0.214599609375, 0.8759765625, 0.4091796875, 1.5703125, 0.06268310546875, 0.0384521484375, 1.201171875, 0.11810302734375, 0.03619384765625, 0.2021484375, 0.051361083984375, 0.5693359375, 0.0110321044921875, 0.157958984375, 1.3291015625, 2.806640625, 0.030242919921875, 0.48193359375, 0.00457763671875, 0.0019741058349609375, 0.023956298828125, 2.658203125, 1.771484375, 1.74609375, 3.279296875, 2.25, 1.0087890625, 2.876953125, 1.7822265625, 0.004497528076171875, 0.26171875, 0.626953125, 0.826171875, 0.81787109375, 1.759765625, 1.0146484375, 1.015625, 2.5703125, 0.5986328125, 1.1455078125, 0.44482421875, 0.77783203125, 0.1875, 0.08868408203125, 0.541015625, 0.00377655029296875, 0.01203155517578125, 0.00013875961303710938], "tokens": [397, 415, 308, 31614, 32, 297, 6527, 26, 869, 32, 5165, 5156, 301, 291, 434, 4296, 26, 25172, 1657, 108, 711, 6295, 15255, 458, 773, 30, 1273, 1755, 291, 434, 415, 561, 438, 646, 1654, 328, 1346, 12098, 1247, 31, 7891, 4576, 32, 291, 4036, 45, 397, 320]}
{"line_number": 756, "line_type": "original", "code": "      assign.remove();", "entropy": 4.41015625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [2.74609375, 8.5625, 4.55859375, 5.17578125, 1.0009765625], "tokens": [647, 5313, 32, 2546, 473]}
{"line_number": 756, "line_type": "generated", "code": "          toRemove.isAssign() ||\n          toRemove.isName() ||\n          toRemove.isGetProp() ||\n          toRemove.isThis() ||\n          toRemove.isCatch());\n\n      // If the variable is a property of a prototype,", "entropy": 0.53955078125, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [1.3310546875, 0.316650390625, 8.392333984375e-05, 0.0033664703369140625, 0.053009033203125, 1.279296875, 0.56884765625, 0.1143798828125, 0.421875, 0.1602783203125, 1.71661376953125e-05, 0.00373077392578125, 0.04718017578125, 0.9501953125, 0.45361328125, 0.379150390625, 0.1427001953125, 0.1119384765625, 2.3365020751953125e-05, 0.0005445480346679688, 0.1275634765625, 1.4072265625, 0.0153350830078125, 0.356201171875, 0.02496337890625, 0.07708740234375, 0.060821533203125, 4.172325134277344e-06, 0.00032782554626464844, 0.379150390625, 0.55859375, 0.362548828125, 0.0225830078125, 0.0487060546875, 0.0667724609375, 7.867813110351562e-06, 0.0007295608520507812, 0.41455078125, 1.685546875, 1.09375, 0.50244140625, 1.0185546875, 1.96875, 0.89599609375, 0.9208984375, 0.6328125, 1.349609375, 2.4140625, 1.3994140625, 1.3544921875, 1.9345703125, 0.63330078125], "tokens": [2033, 372, 4913, 32, 297, 9079, 346, 1276, 616, 372, 4913, 32, 297, 558, 346, 1276, 616, 372, 4913, 32, 297, 936, 6567, 346, 1276, 616, 372, 4913, 32, 297, 2272, 346, 1276, 616, 372, 4913, 32, 297, 20377, 1035, 1687, 434, 1670, 322, 2677, 438, 312, 2804, 432, 312, 21666, 30]}
{"line_number": 757, "line_type": "original", "code": "      compiler.reportCodeChange();", "entropy": 1.9306640625, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [2.17578125, 5.2265625, 0.0021800994873046875, 4.15625, 0.7197265625, 0.00014090538024902344, 1.23828125], "tokens": [647, 8980, 32, 3734, 1227, 1791, 473]}
{"line_number": 757, "line_type": "generated", "code": "\n      );\n\n      // We have to remove the node before we change the parent of the\n      // next node.\n      if (toRemove.isVar()) {\n        parent.removeChild(toRemove);\n      } else {\n        parent.replaceChild(toRemove", "entropy": 0.8173828125, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [1.880859375, 0.3154296875, 0.2685546875, 1.005859375, 2.923828125, 3.48046875, 0.38427734375, 1.6689453125, 0.6279296875, 2.951171875, 2.23046875, 1.169921875, 3.34375, 0.80517578125, 1.1376953125, 2.267578125, 0.82470703125, 0.98583984375, 0.006099700927734375, 2.119140625, 0.74365234375, 1.5693359375, 0.21240234375, 1.0556640625, 0.04730224609375, 0.75390625, 0.00013971328735351562, 0.1298828125, 0.2734375, 0.393310546875, 0.217041015625, 0.0003616809844970703, 0.01007843017578125, 2.8984375, 0.033782958984375, 1.208984375, 0.0005178451538085938, 0.022735595703125, 5.364418029785156e-06, 0.0016775131225585938, 0.463134765625, 0.0003464221954345703, 0.470947265625, 0.418701171875, 0.006809234619140625, 1.109375, 0.0123443603515625, 0.01213836669921875, 0.00010704994201660156, 0.00016796588897705078, 0.04461669921875, 8.58306884765625e-06], "tokens": [397, 1093, 1687, 434, 2688, 1159, 372, 3345, 322, 1541, 2670, 996, 1539, 322, 2935, 432, 322, 397, 434, 2354, 1541, 32, 397, 415, 308, 452, 4913, 32, 297, 1881, 1157, 301, 291, 2935, 32, 28878, 26, 452, 4913, 293, 397, 320, 813, 301, 291, 2935, 32, 3227, 2931, 26, 452, 4913]}
{"line_number": 758, "line_type": "original", "code": "    }", "entropy": 6.1484375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [3.95703125, 8.34375], "tokens": [264, 320]}
{"line_number": 758, "line_type": "generated", "code": "\n          \"Unexpected node type: \" + toRemove.getType());\n\n      // If we're removing a function, then we need to remove any\n      // function declarations inside the function body, too.\n      if (toRemove.isFunction()) {\n        for (Node", "entropy": 0.7880859375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.67138671875, 0.384033203125, 1.1689453125, 0.58837890625, 1.2607421875, 0.921875, 0.736328125, 0.0164794921875, 0.1485595703125, 0.002025604248046875, 0.2052001953125, 0.9951171875, 0.41650390625, 0.278076171875, 1.0380859375, 1.9287109375, 2.244140625, 1.2265625, 0.57275390625, 0.383056640625, 1.3447265625, 1.09765625, 2.48828125, 0.73779296875, 0.8251953125, 0.0162353515625, 1.1044921875, 1.263671875, 1.587890625, 0.0038509368896484375, 2.32421875, 1.2783203125, 1.966796875, 1.76171875, 0.1461181640625, 1.3876953125, 1.671875, 2.255859375, 0.09375, 0.1448974609375, 0.47021484375, 0.007183074951171875, 0.057525634765625, 5.0067901611328125e-06, 0.00141143798828125, 0.023712158203125, 0.0770263671875, 0.00022339820861816406, 0.01137542724609375, 1.5380859375, 0.0020923614501953125, 0.085205078125], "tokens": [616, 313, 10203, 1541, 827, 44, 313, 474, 372, 4913, 32, 10272, 1035, 1687, 434, 1670, 996, 4484, 15255, 312, 667, 30, 1615, 996, 1849, 372, 3345, 1346, 397, 434, 667, 20632, 6517, 322, 667, 3361, 30, 5133, 32, 397, 415, 308, 452, 4913, 32, 39504, 1157, 301, 291, 436, 308, 1212]}
{"line_number": 225, "line_type": "original", "code": "              continuations.put(var, new Continuation(n, scope));", "entropy": 1.244140625, "is_bug_line": false, "sus_score": 0.18569533817705186, "per_token_entropy": [8.3984375, 11.1796875, 0.0012865066528320312, 0.014923095703125, 0.05242919921875, 0.01317596435546875, 0.078125, 0.0016384124755859375, 0.06414794921875, 0.0079193115234375, 3.504753112792969e-05, 0.0028438568115234375, 0.034576416015625, 0.006877899169921875, 0.037139892578125, 0.008331298828125], "tokens": [2850, 11059, 993, 32, 524, 26, 869, 30, 537, 29765, 367, 26, 96, 30, 4576, 876]}
{"line_number": 225, "line_type": "generated", "code": "\n        }\n        break;\n    }", "entropy": 0.311767578125, "is_bug_line": false, "sus_score": 0.18569533817705186, "per_token_entropy": [0.430908203125, 0.005870819091796875, 0.130615234375, 0.09259033203125, 0.000164031982421875, 1.5205078125, 0.0014333724975585938], "tokens": [291, 320, 291, 1626, 45, 284, 320]}
{"line_number": 226, "line_type": "original", "code": "              return;", "entropy": 3.220703125, "is_bug_line": false, "sus_score": 0.18569533817705186, "per_token_entropy": [7.82421875, 1.82421875, 0.012908935546875], "tokens": [2850, 442, 45]}
{"line_number": 226, "line_type": "generated", "code": "\n        }\n        break;\n\n      case Token.GETPROP:\n        // All name references that aren't declarations or assigns", "entropy": 0.3662109375, "is_bug_line": false, "sus_score": 0.18569533817705186, "per_token_entropy": [0.443359375, 0.0015840530395507812, 0.1279296875, 0.0936279296875, 0.0007128715515136719, 0.6826171875, 0.1273193359375, 0.0027637481689453125, 8.273124694824219e-05, 1.1259765625, 0.0670166015625, 0.0006518363952636719, 0.265380859375, 0.84765625, 2.828125, 1.66796875, 0.02301025390625, 0.065673828125, 0.006679534912109375, 3.719329833984375e-05, 0.0167999267578125, 0.027618408203125, 0.0006098747253417969], "tokens": [291, 320, 291, 1626, 45, 1687, 1135, 6512, 32, 2788, 15262, 44, 291, 434, 3367, 636, 10647, 688, 15420, 1330, 20632, 556, 44428]}
{"line_number": 733, "line_type": "original", "code": "            if (assign.isPropertyAssign) {", "entropy": 2.45703125, "is_bug_line": true, "sus_score": 0.17407765595569785, "per_token_entropy": [9.46875, 2.080078125, 0.255126953125, 5.92578125, 0.99951171875, 1.3740234375, 1.5830078125, 0.0740966796875, 2.73046875, 0.07147216796875], "tokens": [1468, 415, 308, 5157, 32, 297, 1653, 9079, 27, 301]}
{"line_number": 733, "line_type": "generated", "code": "\n    for (Var var : maybeUnreferenced) {\n      if (convention.isExported(var.getName())) {\n        compiler.report(JSError.make(var, UNREFERENCED_VAR_ERROR, var.getName()));\n      }\n     ", "entropy": 0.347900390625, "is_bug_line": true, "sus_score": 0.17407765595569785, "per_token_entropy": [0.603515625, 0.76171875, 0.0024547576904296875, 0.2144775390625, 0.07684326171875, 0.012969970703125, 0.42919921875, 0.002147674560546875, 7.677078247070312e-05, 0.01059722900390625, 0.001041412353515625, 0.1025390625, 0.83544921875, 0.44091796875, 1.7509765625, 0.046234130859375, 0.0204315185546875, 1.18359375, 0.01300811767578125, 0.01202392578125, 0.53369140625, 0.0258941650390625, 0.458740234375, 0.005096435546875, 0.07818603515625, 1.31640625, 0.0001360177993774414, 0.018798828125, 1.1259765625, 0.393798828125, 0.24267578125, 0.0009107589721679688, 0.001140594482421875, 0.005847930908203125, 0.7060546875, 0.232177734375, 1.3046875, 1.0029296875, 0.00011110305786132812, 0.00047016143798828125, 0.01308441162109375, 0.9658203125, 0.410400390625, 0.46240234375, 0.515625, 0.6337890625, 0.034881591796875, 0.0236968994140625, 0.00988006591796875, 0.159423828125, 0.0001533031463623047, 0.89404296875], "tokens": [284, 436, 308, 1881, 773, 499, 8762, 1061, 36307, 27, 301, 397, 415, 308, 31614, 32, 297, 47125, 26, 869, 32, 5165, 5156, 301, 291, 8980, 32, 3734, 26, 60, 21887, 32, 2682, 26, 869, 30, 6407, 18807, 8764, 1345, 81, 7416, 81, 2930, 30, 773, 32, 5165, 5073, 397, 320, 397]}
{"line_number": 739, "line_type": "original", "code": "          }", "entropy": 3.896484375, "is_bug_line": false, "sus_score": 0.17407765595569785, "per_token_entropy": [5.8125, 1.9794921875], "tokens": [2033, 320]}
{"line_number": 739, "line_type": "generated", "code": "\n      }\n\n      // Remove all assignments to this variable.\n      removeAllAssigns(var);\n\n      // Remove any properties that were added to this variable.\n      if (var.isLocal()) {\n        Node parent = var.getParentNode();\n        if (", "entropy": 0.5771484375, "is_bug_line": false, "sus_score": 0.17407765595569785, "per_token_entropy": [0.943359375, 0.032867431640625, 0.10052490234375, 0.458984375, 0.7451171875, 2.408203125, 1.330078125, 0.26904296875, 0.8701171875, 0.59912109375, 0.3818359375, 0.05047607421875, 0.117919921875, 0.0003266334533691406, 0.00012886524200439453, 9.107589721679688e-05, 0.00023818016052246094, 0.00044345855712890625, 0.0014257431030273438, 0.09197998046875, 0.31396484375, 0.99755859375, 1.8701171875, 3.017578125, 1.5234375, 1.0693359375, 2.08984375, 0.336669921875, 0.6591796875, 0.5537109375, 0.41796875, 0.033538818359375, 1.4619140625, 0.1348876953125, 0.6201171875, 0.02606201171875, 0.4765625, 1.3984375, 0.2354736328125, 0.00024771690368652344, 0.0285186767578125, 1.630859375, 1.7978515625, 0.0733642578125, 0.042938232421875, 0.00067138671875, 0.130615234375, 0.0019483566284179688, 0.0223846435546875, 0.124267578125, 0.458740234375, 0.06829833984375], "tokens": [397, 320, 1687, 434, 6478, 1169, 29410, 372, 458, 2677, 32, 397, 3345, 1934, 9079, 101, 26, 869, 293, 1687, 434, 6478, 1346, 4308, 688, 4528, 3640, 372, 458, 2677, 32, 397, 415, 308, 869, 32, 297, 3325, 1157, 301, 291, 4004, 2935, 280, 773, 32, 18789, 1212, 473, 291, 415, 308]}
{"line_number": 773, "line_type": "original", "code": "    return false;", "entropy": 3.009765625, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [4.12890625, 5.82421875, 2.06640625, 0.0171356201171875], "tokens": [264, 442, 901, 45]}
{"line_number": 773, "line_type": "generated", "code": "\n        // Don't remove vars declared in for loop heads.\n        // We can't remove them, but we can remove the for loop.\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      } else if (parent!= null &&\n         ", "entropy": 0.65380859375, "is_bug_line": false, "sus_score": 0.16012815380508713, "per_token_entropy": [1.162109375, 0.401611328125, 0.822265625, 3.266334533691406e-05, 0.08441162109375, 2.01953125, 2.228515625, 0.3994140625, 0.4375, 1.5244140625, 1.2216796875, 0.669921875, 1.857421875, 0.328857421875, 2.40625, 2.283203125, 0.4423828125, 0.95703125, 0.61376953125, 1.666015625, 0.95166015625, 0.37548828125, 0.277587890625, 1.2568359375, 0.89111328125, 2.013671875, 0.4169921875, 0.95947265625, 0.132568359375, 1.595703125, 0.022491455078125, 0.33984375, 0.341552734375, 0.00014770030975341797, 0.0005130767822265625, 0.2298583984375, 0.127685546875, 1.9669532775878906e-05, 0.0005178451538085938, 0.00862884521484375, 4.649162292480469e-06, 0.0010251998901367188, 0.288330078125, 0.0002758502960205078, 0.020538330078125, 0.51123046875, 0.11785888671875, 1.0341796875, 0.28955078125, 0.0005440711975097656, 0.06854248046875, 0.203857421875], "tokens": [291, 434, 12029, 1330, 3345, 14447, 17103, 328, 436, 5258, 35426, 32, 291, 434, 2688, 883, 1330, 3345, 3026, 30, 1273, 996, 883, 3345, 322, 436, 5258, 32, 291, 2935, 32, 18723, 1792, 4433, 473, 291, 8980, 32, 3734, 1227, 1791, 473, 397, 320, 813, 415, 308, 2544, 863, 744, 962, 616]}
{"line_number": 723, "line_type": "original", "code": "            Node value = var.getInitialValue();", "entropy": 1.916015625, "is_bug_line": false, "sus_score": 0.15811388300841897, "per_token_entropy": [9.21875, 6.41796875, 1.369140625, 0.11724853515625, 0.32470703125, 0.00563812255859375, 1.5546875, 0.1434326171875, 0.0004892349243164062, 0.00861358642578125], "tokens": [1468, 4004, 786, 280, 773, 32, 371, 4678, 882, 473]}
{"line_number": 723, "line_type": "generated", "code": "\n    return false;\n  }\n\n  /**\n   * Remove all assigns to a var.\n   */\n  private void removeAllAssigns(Var var) {\n    for (Assign assign : assignsByVar.get(var)) {\n      assign.remove();\n     ", "entropy": 0.19970703125, "is_bug_line": false, "sus_score": 0.15811388300841897, "per_token_entropy": [0.379150390625, 0.216552734375, 0.007503509521484375, 0.01464080810546875, 0.0631103515625, 0.0041961669921875, 0.37548828125, 0.326171875, 0.05560302734375, 0.0004851818084716797, 3.294921875, 0.8212890625, 1.6923828125, 0.362060546875, 0.55810546875, 0.4892578125, 0.5859375, 0.040557861328125, 0.042449951171875, 0.0167694091796875, 0.031494140625, 0.07452392578125, 0.1517333984375, 0.2919921875, 0.0987548828125, 0.01258087158203125, 0.058837890625, 0.1553955078125, 0.002658843994140625, 0.02703857421875, 0.0023651123046875, 0.007503509521484375, 0.040252685546875, 0.0003018379211425781, 0.0095367431640625, 0.002025604248046875, 0.00031447410583496094, 0.00945281982421875, 0.0009036064147949219, 7.295608520507812e-05, 0.00019156932830810547, 0.00201416015625, 1.430511474609375e-05, 8.881092071533203e-05, 0.00047969818115234375, 0.0002486705780029297, 0.002674102783203125, 0.01324462890625, 0.0001289844512939453, 0.0024261474609375, 0.0005965232849121094, 0.04022216796875], "tokens": [284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 6478, 1169, 44428, 372, 312, 773, 32, 664, 569, 334, 945, 763, 3345, 1934, 9079, 101, 26, 1881, 773, 27, 301, 284, 436, 308, 9079, 5313, 499, 5313, 12986, 1881, 32, 371, 26, 869, 490, 301, 397, 5313, 32, 2546, 473, 397]}
{"line_number": 724, "line_type": "original", "code": "            assignedToUnknownValue = value != null &&", "entropy": 2.947265625, "is_bug_line": false, "sus_score": 0.15811388300841897, "per_token_entropy": [8.7265625, 9.65625, 0.1051025390625, 0.0411376953125, 0.01045989990234375, 0.400146484375, 7.5625, 2.451171875, 0.10205078125, 0.41845703125], "tokens": [1468, 11012, 705, 5842, 882, 280, 786, 863, 744, 962]}
{"line_number": 724, "line_type": "generated", "code": "\n    return false;\n  }\n\n  /**\n   * Given a node, find all the references to that node.\n   *\n   * @param node The node to find references to.\n   * @param scope The scope to search for references.\n   * @return", "entropy": 0.72705078125, "is_bug_line": false, "sus_score": 0.15811388300841897, "per_token_entropy": [1.5712890625, 0.8427734375, 0.2174072265625, 0.01422882080078125, 0.09112548828125, 0.003780364990234375, 0.40380859375, 0.345947265625, 0.05419921875, 0.0005021095275878906, 3.923828125, 0.2415771484375, 1.8984375, 1.015625, 1.97265625, 0.68505859375, 1.1181640625, 2.58984375, 0.396240234375, 2.03125, 0.137939453125, 0.75048828125, 0.241943359375, 0.685546875, 1.6630859375, 0.004299163818359375, 1.2353515625, 0.26171875, 0.9375, 0.45849609375, 0.1995849609375, 0.50390625, 0.9521484375, 0.1214599609375, 0.122314453125, 0.0921630859375, 0.04302978515625, 0.1512451171875, 0.0240020751953125, 0.70361328125, 3.123046875, 0.312255859375, 0.07073974609375, 0.91845703125, 1.232421875, 1.498046875, 0.42626953125, 0.724609375, 0.08544921875, 0.1798095703125, 0.04266357421875, 0.49560546875], "tokens": [284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 15273, 312, 1541, 30, 2290, 1169, 322, 10647, 372, 688, 1541, 32, 664, 319, 664, 319, 477, 753, 1541, 886, 1541, 372, 2290, 10647, 372, 32, 664, 319, 477, 753, 4576, 886, 4576, 372, 3233, 436, 10647, 32, 664, 319, 477, 601]}
{"line_number": 726, "line_type": "original", "code": "          } else {", "entropy": 4.16796875, "is_bug_line": false, "sus_score": 0.15811388300841897, "per_token_entropy": [10.4375, 2.75, 2.6875, 0.798828125], "tokens": [2033, 320, 813, 301]}
{"line_number": 726, "line_type": "generated", "code": "\n  private static final class Continuation {\n    private final Node node;\n    private final Var var;\n    private final Var parent;\n    private final Node parentNode;\n\n    Continuation(Node node, Var var, Var parent, Node parentNode) {\n     ", "entropy": 0.48193359375, "is_bug_line": false, "sus_score": 0.15811388300841897, "per_token_entropy": [0.71826171875, 1.1513671875, 1.638671875, 1.4990234375, 1.2958984375, 0.92236328125, 0.0013895034790039062, 0.239013671875, 0.08447265625, 0.4638671875, 0.07659912109375, 0.93994140625, 1.599609375, 0.008880615234375, 0.135498046875, 0.06866455078125, 0.0458984375, 1.302734375, 0.04364013671875, 0.008514404296875, 0.47705078125, 0.08197021484375, 0.10748291015625, 2.96875, 2.763671875, 0.52001953125, 0.521484375, 0.0650634765625, 0.1153564453125, 1.810546875, 0.736328125, 0.1876220703125, 0.00225067138671875, 0.916015625, 0.99951171875, 0.00010609626770019531, 0.002941131591796875, 0.1639404296875, 0.10211181640625, 0.0145416259765625, 0.0169830322265625, 0.0164794921875, 0.0594482421875, 0.0250244140625, 0.00345611572265625, 0.123779296875, 0.00977325439453125, 0.0010528564453125, 0.0003552436828613281, 0.004199981689453125, 0.0017194747924804688, 0.0021915435791015625], "tokens": [334, 945, 907, 1158, 443, 29765, 367, 301, 284, 945, 1158, 4004, 1541, 45, 284, 945, 1158, 7329, 773, 45, 284, 945, 1158, 7329, 2935, 45, 284, 945, 1158, 4004, 2935, 1212, 45, 446, 29765, 367, 26, 1212, 1541, 30, 7329, 773, 30, 7329, 2935, 30, 4004, 2935, 1212, 27, 301, 397]}
{"line_number": 835, "line_type": "original", "code": "      } else if (toRemove.isVar() &&", "entropy": 1.6796875, "is_bug_line": false, "sus_score": 0.15617376188860607, "per_token_entropy": [3.51171875, 8.0234375, 2.52734375, 0.8994140625, 0.08013916015625, 4.83984375, 0.0243682861328125, 0.01294708251953125, 0.04998779296875, 0.11187744140625, 0.059722900390625, 0.01280975341796875], "tokens": [647, 320, 813, 415, 308, 452, 4913, 32, 297, 1881, 346, 962]}
{"line_number": 835, "line_type": "generated", "code": "\n    final SideEffect sideEffect;\n\n    Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {\n      this.assignNode = assignNode;\n      this.nameNode = nameNode;\n      this.isPropertyAssign = isPropertyAssign", "entropy": 0.146484375, "is_bug_line": false, "sus_score": 0.15617376188860607, "per_token_entropy": [0.434326171875, 0.70751953125, 2.380859375, 0.37353515625, 0.51708984375, 0.2626953125, 0.11529541015625, 0.09747314453125, 0.362548828125, 0.00287628173828125, 0.06829833984375, 0.06396484375, 0.063232421875, 0.0841064453125, 0.17236328125, 0.027191162109375, 0.0133209228515625, 0.06610107421875, 0.324462890625, 0.0032253265380859375, 0.004421234130859375, 0.005947113037109375, 1.1806640625, 0.0033054351806640625, 0.004428863525390625, 0.125244140625, 0.05340576171875, 0.0137786865234375, 4.088878631591797e-05, 0.00043773651123046875, 0.006435394287109375, 1.049041748046875e-05, 0.0003452301025390625, 0.010498046875, 0.01024627685546875, 2.467632293701172e-05, 0.01453399658203125, 0.00012350082397460938, 0.00015246868133544922, 0.0028400421142578125, 1.5497207641601562e-06, 0.000640869140625, 0.0111083984375, 0.00780487060546875, 1.2516975402832031e-05, 0.0182647705078125, 2.5510787963867188e-05, 2.9206275939941406e-05, 3.8504600524902344e-05, 0.0015172958374023438, 2.1338462829589844e-05, 0.0002434253692626953], "tokens": [284, 1158, 16489, 5559, 5209, 5559, 45, 446, 17069, 26, 1212, 5313, 1212, 30, 4004, 636, 1212, 30, 1905, 438, 1653, 9079, 27, 301, 397, 458, 32, 5157, 1212, 280, 5313, 1212, 45, 397, 458, 32, 426, 1212, 280, 636, 1212, 45, 397, 458, 32, 297, 1653, 9079, 280, 438, 1653, 9079]}
{"line_number": 841, "line_type": "original", "code": "      } else if (parent != null) {", "entropy": 2.849609375, "is_bug_line": false, "sus_score": 0.15617376188860607, "per_token_entropy": [3.82421875, 13.2421875, 2.00390625, 0.79931640625, 0.126953125, 3.548828125, 1.765625, 0.01439666748046875, 3.171875, 0.01029205322265625], "tokens": [647, 320, 813, 415, 308, 2544, 863, 744, 27, 301]}
{"line_number": 841, "line_type": "generated", "code": "\n    // need to keep the assignment.\n    final List<Node> secondarySideEffects;\n\n    Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {\n      this.assignNode = assignNode;\n      this.nameNode = nameNode", "entropy": 0.275146484375, "is_bug_line": false, "sus_score": 0.15617376188860607, "per_token_entropy": [0.50537109375, 0.2435302734375, 1.828125, 0.08050537109375, 2.298828125, 0.53125, 0.998046875, 1.384765625, 0.21484375, 0.37646484375, 2.146484375, 0.006999969482421875, 0.056640625, 0.0009832382202148438, 0.1112060546875, 0.09722900390625, 0.084228515625, 0.3681640625, 0.06390380859375, 0.348388671875, 0.0020160675048828125, 0.08099365234375, 0.06634521484375, 0.06671142578125, 0.1097412109375, 0.22021484375, 0.0241546630859375, 0.01393890380859375, 0.083984375, 0.53515625, 0.0030918121337890625, 0.0036220550537109375, 0.005832672119140625, 1.07421875, 0.0010290145874023438, 0.005916595458984375, 0.14697265625, 0.06402587890625, 0.01224517822265625, 3.8743019104003906e-05, 0.00043702125549316406, 0.006473541259765625, 9.5367431640625e-07, 0.0003705024719238281, 0.011932373046875, 0.01372528076171875, 2.0623207092285156e-05, 0.01148223876953125, 0.00013434886932373047, 0.00014925003051757812, 0.0025196075439453125, 6.318092346191406e-06], "tokens": [284, 434, 1849, 372, 4986, 322, 13807, 32, 284, 1158, 1682, 46, 1212, 48, 15997, 7427, 20126, 45, 446, 17069, 26, 1212, 5313, 1212, 30, 4004, 636, 1212, 30, 1905, 438, 1653, 9079, 27, 301, 397, 458, 32, 5157, 1212, 280, 5313, 1212, 45, 397, 458, 32, 426, 1212, 280, 636, 1212]}
{"line_number": 842, "line_type": "original", "code": "        NodeUtil.removeChild(parent, toRemove);", "entropy": 2.9140625, "is_bug_line": false, "sus_score": 0.15617376188860607, "per_token_entropy": [5.53515625, 2.42578125, 5.296875, 0.025909423828125, 8.7265625, 1.123046875, 3.9765625, 0.1259765625, 4.6953125, 0.09765625, 0.04620361328125], "tokens": [351, 4004, 1733, 32, 28878, 26, 2544, 30, 372, 4913, 293]}
{"line_number": 842, "line_type": "generated", "code": "\n    final Node secondarySideEffects;\n\n    Assign(Node assignNode, Node nameNode, boolean isPropertyAssign,\n        Node secondarySideEffects) {\n      this.assignNode = assignNode;\n      this.nameNode = nameNode;\n      this.is", "entropy": 0.1307373046875, "is_bug_line": false, "sus_score": 0.15617376188860607, "per_token_entropy": [0.521484375, 0.472412109375, 1.7236328125, 0.732421875, 0.15869140625, 0.1925048828125, 0.042388916015625, 0.10040283203125, 0.400634765625, 0.0026721954345703125, 0.0811767578125, 0.068115234375, 0.06988525390625, 0.116455078125, 0.2418212890625, 0.0338134765625, 0.01425933837890625, 0.0865478515625, 0.6142578125, 0.00308990478515625, 0.0035381317138671875, 0.005741119384765625, 0.368896484375, 0.515625, 0.019866943359375, 0.02947998046875, 0.00225830078125, 0.0010271072387695312, 0.004367828369140625, 0.0016393661499023438, 0.006130218505859375, 0.119873046875, 8.690357208251953e-05, 0.006587982177734375, 2.110004425048828e-05, 0.0003933906555175781, 0.006221771240234375, 9.5367431640625e-07, 0.0002474784851074219, 0.003955841064453125, 0.00884246826171875, 6.794929504394531e-06, 0.00669097900390625, 0.00013530254364013672, 9.381771087646484e-05, 0.0020503997802734375, 9.417533874511719e-06, 0.00038313865661621094, 0.004985809326171875, 0.002071380615234375, 4.887580871582031e-06, 0.002979278564453125], "tokens": [284, 1158, 4004, 15997, 7427, 20126, 45, 446, 17069, 26, 1212, 5313, 1212, 30, 4004, 636, 1212, 30, 1905, 438, 1653, 9079, 30, 291, 4004, 15997, 7427, 20126, 27, 301, 397, 458, 32, 5157, 1212, 280, 5313, 1212, 45, 397, 458, 32, 426, 1212, 280, 636, 1212, 45, 397, 458, 32, 297]}
{"line_number": 843, "line_type": "original", "code": "        compiler.reportCodeChange();", "entropy": 2.439453125, "is_bug_line": false, "sus_score": 0.15617376188860607, "per_token_entropy": [7.00390625, 9.71875, 0.00959014892578125, 0.156005859375, 0.16552734375, 6.830692291259766e-05, 0.01715087890625], "tokens": [351, 8980, 32, 3734, 1227, 1791, 473]}
{"line_number": 843, "line_type": "generated", "code": "\n    final boolean hasSecondarySideEffects;\n\n    Assign(Node assignNode, Node nameNode, boolean isPropertyAssign,\n        boolean hasSecondarySideEffects) {\n      this.assignNode = assignNode;\n      this.nameNode = nameNode;\n      this", "entropy": 0.128173828125, "is_bug_line": false, "sus_score": 0.15617376188860607, "per_token_entropy": [0.7578125, 0.69140625, 1.2353515625, 0.490478515625, 0.2440185546875, 0.181640625, 0.026092529296875, 0.0223388671875, 0.1458740234375, 0.47216796875, 0.0030193328857421875, 0.0997314453125, 0.08111572265625, 0.07513427734375, 0.113037109375, 0.288818359375, 0.0288848876953125, 0.01235198974609375, 0.09747314453125, 0.5341796875, 0.048095703125, 0.003810882568359375, 0.00534820556640625, 0.469482421875, 0.345703125, 0.0116119384765625, 0.00569915771484375, 0.02093505859375, 0.0006771087646484375, 0.001819610595703125, 0.00580596923828125, 0.0018949508666992188, 0.00823211669921875, 0.09661865234375, 0.00010716915130615234, 0.00647735595703125, 1.5616416931152344e-05, 0.0003612041473388672, 0.005710601806640625, 1.9073486328125e-06, 0.0002046823501586914, 0.00405120849609375, 0.007007598876953125, 6.9141387939453125e-06, 0.005374908447265625, 9.500980377197266e-05, 9.572505950927734e-05, 0.0016851425170898438, 1.0013580322265625e-05, 0.000324249267578125, 0.006122589111328125, 0.002376556396484375], "tokens": [284, 1158, 1905, 1401, 18095, 7427, 20126, 45, 446, 17069, 26, 1212, 5313, 1212, 30, 4004, 636, 1212, 30, 1905, 438, 1653, 9079, 30, 291, 1905, 1401, 18095, 7427, 20126, 27, 301, 397, 458, 32, 5157, 1212, 280, 5313, 1212, 45, 397, 458, 32, 426, 1212, 280, 636, 1212, 45, 397, 458]}
{"line_number": 820, "line_type": "original", "code": "      } else if (parent != null &&", "entropy": 1.57421875, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [1.9912109375, 0.10601806640625, 3.8515625, 0.355224609375, 0.0222015380859375, 4.37890625, 1.541015625, 0.0234527587890625, 1.896484375], "tokens": [647, 320, 813, 415, 308, 2544, 863, 744, 962]}
{"line_number": 820, "line_type": "generated", "code": "\n      }\n    }\n  }\n\n  /**\n   * Returns the continuation to apply after this node has been traversed.\n   */\n  private Continuation traverseNode(Node n, Node parent, Scope parentScope) {\n    if (n.isFunction()) {\n     ", "entropy": 0.48486328125, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [0.9169921875, 0.051849365234375, 0.1077880859375, 0.0006060600280761719, 0.169677734375, 0.0017595291137695312, 0.187255859375, 0.330810546875, 0.06292724609375, 0.0002429485321044922, 2.884765625, 1.4609375, 1.4921875, 1.697265625, 2.05859375, 2.11328125, 1.4912109375, 0.29833984375, 2.5703125, 0.0985107421875, 1.0947265625, 0.00023949146270751953, 0.1435546875, 0.01456451416015625, 0.2451171875, 0.01198577880859375, 0.08990478515625, 0.0255126953125, 3.337860107421875e-06, 0.4833984375, 0.040069580078125, 0.01195526123046875, 0.1209716796875, 1.1865234375, 0.0013980865478515625, 0.02557373046875, 0.034698486328125, 0.00659942626953125, 0.0191192626953125, 0.9638671875, 0.0034809112548828125, 0.000614166259765625, 0.004413604736328125, 0.123779296875, 1.4833984375, 0.0728759765625, 0.472900390625, 0.052978515625, 0.358642578125, 0.1126708984375, 0.0006418228149414062, 0.0163116455078125], "tokens": [397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 3759, 322, 30728, 372, 4871, 2685, 458, 1541, 1401, 2583, 8321, 16411, 32, 664, 569, 334, 945, 29765, 367, 29046, 1212, 26, 1212, 310, 30, 4004, 2935, 30, 22148, 2935, 5504, 27, 301, 284, 415, 308, 96, 32, 39504, 1157, 301, 397]}
{"line_number": 824, "line_type": "original", "code": "      } else if (toRemove.isVar() &&", "entropy": 1.2197265625, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [5.828125, 4.453125, 1.783203125, 0.2459716796875, 0.041107177734375, 1.125, 0.004764556884765625, 0.0159149169921875, 0.52392578125, 0.26611328125, 0.279296875, 0.0762939453125], "tokens": [647, 320, 813, 415, 308, 452, 4913, 32, 297, 1881, 346, 962]}
{"line_number": 824, "line_type": "generated", "code": "\n  private void traverseNode(Node node, Node parent, Scope parentScope) {\n    Preconditions.checkState(parent!= null);\n\n    // The scope we're in now.\n    Scope scope = parentScope;\n\n    if (node.isFunction()) {\n     ", "entropy": 0.60888671875, "is_bug_line": false, "sus_score": 0.1543033499620919, "per_token_entropy": [0.58984375, 1.0966796875, 0.60498046875, 0.75146484375, 1.041015625, 0.06146240234375, 0.055145263671875, 0.50390625, 0.00936126708984375, 0.06646728515625, 0.08099365234375, 0.0151519775390625, 0.033111572265625, 1.1015625, 0.00461578369140625, 0.0020465850830078125, 0.006389617919921875, 0.0992431640625, 1.45703125, 0.0011949539184570312, 0.07794189453125, 0.6728515625, 0.07330322265625, 1.998046875, 1.0908203125, 0.10595703125, 0.546875, 0.8955078125, 1.6533203125, 3.486328125, 2.443359375, 2.6796875, 0.68017578125, 1.2333984375, 1.2060546875, 0.7099609375, 0.265380859375, 0.025360107421875, 0.32470703125, 0.08758544921875, 0.60107421875, 0.01184844970703125, 0.268310546875, 0.41259765625, 1.23046875, 0.048248291015625, 0.344482421875, 0.09716796875, 0.67041015625, 0.1292724609375, 0.00029969215393066406, 0.0089874267578125], "tokens": [334, 945, 763, 29046, 1212, 26, 1212, 1541, 30, 4004, 2935, 30, 22148, 2935, 5504, 27, 301, 284, 40596, 32, 1553, 1078, 26, 2544, 863, 744, 293, 446, 434, 886, 4576, 996, 4484, 328, 2464, 32, 284, 22148, 4576, 280, 2935, 5504, 45, 446, 415, 308, 1251, 32, 39504, 1157, 301, 397]}
{"line_number": 814, "line_type": "original", "code": "      } else if (NodeUtil.isFunctionExpression(toRemove)) {", "entropy": 1.4091796875, "is_bug_line": false, "sus_score": 0.1414213562373095, "per_token_entropy": [4.83203125, 0.170654296875, 0.2119140625, 0.0748291015625, 0.014373779296875, 0.83349609375, 0.00012123584747314453, 2.5272369384765625e-05, 2.2890625, 0.050048828125, 0.0078887939453125, 12.078125, 0.1585693359375, 0.395751953125, 0.0214080810546875], "tokens": [647, 320, 813, 415, 308, 1212, 1733, 32, 39504, 3487, 26, 452, 4913, 490, 301]}
{"line_number": 814, "line_type": "generated", "code": "\n        if (!preserveFunctionExpressionNames) {\n          node.getFirstChild().setString(\"\");\n          compiler.reportCodeChange();\n        }\n      }\n      node.accept(this);\n    }\n\n    @Override\n    public boolean visit(NodeTraversal t, Node n,", "entropy": 0.2109375, "is_bug_line": false, "sus_score": 0.1414213562373095, "per_token_entropy": [0.302734375, 1.51953125, 0.7373046875, 0.217041015625, 0.0022640228271484375, 0.0941162109375, 0.003231048583984375, 0.09588623046875, 0.0026302337646484375, 0.01776123046875, 0.9052734375, 0.006862640380859375, 0.1337890625, 0.00473785400390625, 0.0008530616760253906, 0.055511474609375, 0.02691650390625, 0.289306640625, 0.0193023681640625, 6.079673767089844e-06, 0.0010042190551757812, 0.019195556640625, 5.245208740234375e-06, 0.0005545616149902344, 0.0117340087890625, 0.00018656253814697266, 0.8076171875, 0.0008802413940429688, 1.1357421875, 1.9208984375, 0.041473388671875, 0.136474609375, 0.0020580291748046875, 0.154052734375, 0.0301361083984375, 0.07855224609375, 0.00010001659393310547, 0.56201171875, 0.261474609375, 0.003185272216796875, 0.0303192138671875, 0.0165557861328125, 0.463623046875, 0.24658203125, 0.0006952285766601562, 0.0084686279296875, 0.39501953125, 0.06707763671875, 0.0011587142944335938, 0.0008668899536132812, 0.0100555419921875, 0.1290283203125], "tokens": [291, 415, 1429, 32650, 2447, 3487, 4109, 27, 301, 616, 1541, 32, 25657, 2931, 922, 24353, 10920, 616, 8980, 32, 3734, 1227, 1791, 473, 291, 320, 397, 320, 397, 1541, 32, 7494, 26, 578, 293, 284, 320, 446, 477, 1788, 284, 562, 1905, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30]}
{"line_number": 286, "line_type": "original", "code": "              markReferencedVar(var);", "entropy": 3.46875, "is_bug_line": false, "sus_score": 0.14002800840280097, "per_token_entropy": [13.0078125, 5.70703125, 1.9267578125, 0.57080078125, 0.023345947265625, 3.0, 0.05242919921875], "tokens": [2850, 3634, 34481, 1881, 26, 869, 293]}
{"line_number": 286, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Traverses a FOR loop.\n   */\n  private void traverseFor(Node n, Scope parentScope) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.", "entropy": 0.24072265625, "is_bug_line": false, "sus_score": 0.14002800840280097, "per_token_entropy": [0.335205078125, 0.00115966796875, 0.33154296875, 0.348388671875, 0.0673828125, 0.00013124942779541016, 0.6591796875, 0.0015516281127929688, 0.0007505416870117188, 0.43359375, 3.9609375, 0.6435546875, 0.8427734375, 0.46923828125, 0.88916015625, 0.005413055419921875, 0.01788330078125, 0.003692626953125, 0.004726409912109375, 0.0271148681640625, 0.1864013671875, 0.006267547607421875, 0.0258636474609375, 0.029327392578125, 0.27490234375, 0.180908203125, 0.25830078125, 0.01016998291015625, 0.001373291015625, 0.06390380859375, 0.099853515625, 9.894371032714844e-06, 0.0002949237823486328, 0.108154296875, 0.0018949508666992188, 0.06195068359375, 0.0002663135528564453, 0.182861328125, 3.039836883544922e-05, 0.00012683868408203125, 0.229248046875, 0.0008902549743652344, 1.275390625, 0.12432861328125, 0.256591796875, 0.03472900390625, 1.1444091796875e-05, 0.002399444580078125, 0.0003027915954589844, 0.0014238357543945312, 0.054443359375, 0.0001609325408935547], "tokens": [334, 320, 719, 1022, 664, 319, 1565, 15219, 1464, 312, 4786, 5258, 32, 664, 569, 334, 945, 763, 29046, 1562, 26, 1212, 310, 30, 22148, 2935, 5504, 27, 301, 284, 40596, 32, 1553, 1078, 26, 96, 32, 24213, 1534, 346, 610, 225, 37, 293, 284, 40596, 32, 1553, 1078, 26, 96, 32]}
