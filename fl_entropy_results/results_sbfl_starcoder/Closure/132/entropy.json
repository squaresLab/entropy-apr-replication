{"line_number": 776, "line_type": "original", "code": "          Node lhs = thenOp.getFirstChild();", "entropy": 3.40234375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [2.75, 11.5703125, 10.4140625, 1.234375, 3.8671875, 2.609375, 0.021514892578125, 1.388671875, 0.0259246826171875, 0.1456298828125], "tokens": [2033, 4004, 16020, 280, 1615, 3397, 32, 25657, 2931, 473]}
{"line_number": 776, "line_type": "generated", "code": "\n          && maybeName2.hasChildren()\n          && name1.getFirstChild().getString().equals(\n              maybeName2.getFirstChild().getString())) {\n        Node thenExpr = getBlockVarInitializer(thenBranch);\n        Node elseExpr = elseAssign", "entropy": 0.30810546875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.7744140625, 0.1746826171875, 0.8388671875, 0.003047943115234375, 0.0014944076538085938, 0.048553466796875, 0.60009765625, 0.0003299713134765625, 0.199951171875, 0.44970703125, 0.033935546875, 0.9736328125, 0.0011053085327148438, 0.01010894775390625, 1.4541015625, 0.0004353523254394531, 0.05218505859375, 0.2122802734375, 0.10205078125, 0.01194000244140625, 0.0028076171875, 0.332275390625, 0.008056640625, 4.2438507080078125e-05, 2.6226043701171875e-05, 0.0002372264862060547, 0.075927734375, 0.00011134147644042969, 0.0006461143493652344, 0.0002608299255371094, 0.2015380859375, 0.00930023193359375, 1.080078125, 1.1123046875, 1.5654296875, 1.458984375, 0.019317626953125, 0.8916015625, 0.04693603515625, 0.96044921875, 1.4443359375, 0.0294952392578125, 0.021636962890625, 4.0531158447265625e-06, 0.20654296875, 0.068359375, 0.1324462890625, 0.03167724609375, 0.0171356201171875, 0.00421905517578125, 0.353515625, 0.000640869140625], "tokens": [616, 962, 8762, 558, 36, 32, 2040, 7640, 346, 616, 962, 636, 35, 32, 25657, 2931, 922, 7069, 922, 3574, 26, 1090, 8762, 558, 36, 32, 25657, 2931, 922, 7069, 5156, 301, 291, 4004, 1615, 6150, 280, 622, 2227, 1881, 20048, 26, 3356, 10094, 293, 291, 4004, 813, 6150, 280, 813, 9079]}
{"line_number": 777, "line_type": "original", "code": "          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&", "entropy": 2.73828125, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [4.890625, 8.515625, 0.334228515625, 4.78515625, 4.4765625, 1.1962890625, 2.67578125, 0.032257080078125, 0.01399993896484375, 7.8984375, 0.317138671875, 4.33984375, 4.2265625, 1.390625, 0.8291015625, 0.0018558502197265625, 1.9267578125, 1.419921875], "tokens": [2033, 415, 308, 586, 5909, 1324, 1562, 29021, 26, 16027, 30, 813, 3397, 32, 25657, 2931, 1157, 962]}
{"line_number": 777, "line_type": "generated", "code": "\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n             !mayEffectMutableState(", "entropy": 0.094970703125, "is_bug_line": true, "sus_score": 0.5, "per_token_entropy": [1.21875, 0.95849609375, 0.73095703125, 0.69384765625, 0.00020885467529296875, 0.04931640625, 0.00814056396484375, 0.00327301025390625, 0.00844573974609375, 0.0116729736328125, 8.344650268554688e-05, 0.00579071044921875, 0.07818603515625, 0.0164337158203125, 0.01222991943359375, 0.05255126953125, 0.017974853515625, 0.00041556358337402344, 0.0176544189453125, 0.00940704345703125, 2.6106834411621094e-05, 0.002841949462890625, 0.0038204193115234375, 0.0159759521484375, 0.0697021484375, 0.2017822265625, 0.0194091796875, 0.005413055419921875, 0.0067901611328125, 0.00026035308837890625, 0.0002646446228027344, 0.0009899139404296875, 0.00017011165618896484, 0.0006103515625, 0.0001468658447265625, 0.005092620849609375, 8.58306884765625e-06, 0.0016794204711914062, 0.0009331703186035156, 0.0006895065307617188, 0.0005488395690917969, 0.00014221668243408203, 0.00019299983978271484, 0.00012087821960449219, 0.007625579833984375, 0.11187744140625, 0.54345703125, 0.0307464599609375, 0.0011243820190429688, 0.00589752197265625, 6.818771362304688e-05, 0.004058837890625], "tokens": [1090, 434, 415, 498, 11493, 1401, 5209, 15987, 30, 2800, 1330, 21846, 428, 8119, 322, 16809, 1090, 434, 43992, 498, 11493, 2670, 16526, 79, 1090, 434, 12114, 429, 2017, 884, 1629, 46367, 2154, 996, 883, 1090, 434, 21846, 4444, 415, 2017, 884, 5209, 15987, 1179, 1090, 653, 17302, 5559, 12907, 1078, 26]}
{"line_number": 784, "line_type": "original", "code": "            n.removeChild(cond);", "entropy": 2.146484375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [7.73828125, 3.0703125, 0.11334228515625, 2.544921875, 0.0009937286376953125, 1.5439453125, 0.00917816162109375], "tokens": [1468, 310, 32, 28878, 26, 1328, 293]}
{"line_number": 784, "line_type": "generated", "code": "\n        Node newVar = IR.var(hookNode, IR.name(name1.getString(), name1))\n                         .useSourceInfoIfMissingFrom(var)\n                         .srcref(var);\n        parent.replaceChild(n, newVar", "entropy": 0.30859375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.10406494140625, 0.347900390625, 2.083984375, 0.194091796875, 0.0711669921875, 0.43701171875, 0.0005817413330078125, 0.006771087646484375, 0.00771331787109375, 1.8583984375, 0.0006728172302246094, 0.67578125, 0.6337890625, 0.001285552978515625, 0.1307373046875, 0.0200347900390625, 0.10174560546875, 0.00482177734375, 0.030975341796875, 0.01071929931640625, 1.3095703125, 0.77392578125, 0.0006957054138183594, 0.951171875, 1.279296875, 0.0005078315734863281, 1.529296875, 0.00885772705078125, 0.0002961158752441406, 0.397705078125, 0.0018396377563476562, 0.00220489501953125, 0.388427734375, 0.420654296875, 0.919921875, 0.0090179443359375, 0.005138397216796875, 0.267333984375, 2.384185791015625e-05, 0.00450897216796875, 0.429931640625, 0.043731689453125, 0.1341552734375, 0.388671875, 0.0002605915069580078, 0.00505828857421875, 0.00010859966278076172, 0.00011813640594482422, 0.037384033203125, 0.00018739700317382812, 0.019775390625, 1.3828277587890625e-05], "tokens": [291, 4004, 537, 1881, 280, 14095, 32, 869, 26, 7133, 1212, 30, 14095, 32, 426, 26, 426, 35, 32, 7069, 1026, 636, 35, 490, 3775, 638, 539, 2028, 1120, 2797, 9085, 1792, 26, 869, 27, 3775, 638, 1617, 612, 26, 869, 293, 291, 2935, 32, 3227, 2931, 26, 96, 30, 537, 1881]}
{"line_number": 785, "line_type": "original", "code": "            Node assignName = thenOp.removeFirstChild();", "entropy": 2.240234375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.2265625, 2.337890625, 3.76171875, 4.2734375, 0.373779296875, 4.3046875, 1.6484375, 0.1221923828125, 0.7529296875, 0.0360107421875, 0.000606536865234375, 0.03851318359375], "tokens": [1468, 4004, 5313, 558, 280, 1615, 3397, 32, 2546, 3472, 2931, 473]}
{"line_number": 785, "line_type": "generated", "code": "\n        parent.replaceChild(n, var);\n        reportCodeChange();\n\n        return var;\n      }\n    }\n\n    // if(x)y=1;else var y=2  ->  var y=x?1:2\n    if (", "entropy": 0.135498046875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.1163330078125, 1.5166015625, 0.00074005126953125, 0.029693603515625, 0.0002803802490234375, 0.0001341104507446289, 0.022735595703125, 0.0002429485321044922, 0.3203125, 0.0126800537109375, 0.0740966796875, 0.051025390625, 0.0003428459167480469, 9.894371032714844e-06, 0.00043010711669921875, 1.37890625, 0.0819091796875, 0.162109375, 0.002246856689453125, 0.018280029296875, 4.8041343688964844e-05, 0.08514404296875, 0.0002899169921875, 0.2171630859375, 0.2098388671875, 0.1153564453125, 0.04217529296875, 0.0098876953125, 0.077392578125, 1.0888671875, 0.038818359375, 0.02777099609375, 0.004932403564453125, 0.0167388916015625, 0.406005859375, 0.08453369140625, 0.0206146240234375, 0.03973388671875, 0.3857421875, 0.0027618408203125, 0.040374755859375, 0.07781982421875, 0.004642486572265625, 0.05572509765625, 0.0080413818359375, 0.001010894775390625, 0.00505828857421875, 0.0080413818359375, 0.064697265625, 0.0440673828125, 0.07098388671875, 0.004150390625], "tokens": [291, 2935, 32, 3227, 2931, 26, 96, 30, 773, 293, 291, 3639, 1227, 1791, 473, 584, 442, 773, 45, 397, 320, 284, 320, 446, 434, 415, 26, 106, 27, 107, 47, 35, 45, 1824, 773, 533, 47, 36, 225, 967, 225, 773, 533, 47, 106, 49, 35, 44, 36, 284, 415, 308]}
{"line_number": 786, "line_type": "original", "code": "            Node thenExpr = thenOp.removeFirstChild();", "entropy": 2.361328125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.390625, 4.26953125, 4.625, 2.189453125, 0.3046875, 2.99609375, 2.58984375, 0.06793212890625, 0.5869140625, 1.28515625, 0.0006985664367675781, 0.04193115234375], "tokens": [1468, 4004, 1615, 6150, 280, 1615, 3397, 32, 2546, 3472, 2931, 473]}
{"line_number": 786, "line_type": "generated", "code": "\n        reportCodeChange();\n        return var;\n      }\n    }\n\n    // if(x)y=1;else var y=2  ->  var y=x?1:2\n    if (elseBranchIsVar && thenBranchIsExpressionBlock", "entropy": 0.0987548828125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.1077880859375, 0.1207275390625, 0.0008373260498046875, 0.0006985664367675781, 0.0017490386962890625, 0.1873779296875, 0.0124053955078125, 0.2548828125, 0.001995086669921875, 0.0154266357421875, 5.7220458984375e-05, 0.0985107421875, 0.000438690185546875, 0.2232666015625, 0.221435546875, 0.131591796875, 0.0462646484375, 0.01200103759765625, 0.10101318359375, 1.1630859375, 0.046112060546875, 0.028045654296875, 0.005496978759765625, 0.0192108154296875, 0.4501953125, 0.099853515625, 0.0200347900390625, 0.042877197265625, 0.396484375, 0.0029048919677734375, 0.041107177734375, 0.09112548828125, 0.004787445068359375, 0.05926513671875, 0.008331298828125, 0.0011005401611328125, 0.00527191162109375, 0.00859832763671875, 0.06402587890625, 0.049591064453125, 0.074462890625, 0.004253387451171875, 0.8818359375, 5.602836608886719e-06, 7.212162017822266e-05, 0.0007066726684570312, 0.006870269775390625, 0.0203399658203125, 2.0265579223632812e-06, 0.0005812644958496094, 0.0007476806640625, 3.5762786865234375e-06], "tokens": [291, 3639, 1227, 1791, 473, 291, 442, 773, 45, 397, 320, 284, 320, 446, 434, 415, 26, 106, 27, 107, 47, 35, 45, 1824, 773, 533, 47, 36, 225, 967, 225, 773, 533, 47, 106, 49, 35, 44, 36, 284, 415, 308, 1824, 10094, 1622, 1881, 962, 1615, 10094, 1622, 3487, 2227]}
{"line_number": 787, "line_type": "original", "code": "            Node elseExpr = elseOp.getLastChild();", "entropy": 2.9765625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [10.203125, 5.73046875, 6.30078125, 2.2421875, 0.292236328125, 0.432861328125, 5.23828125, 0.0272216796875, 1.2509765625, 0.001102447509765625, 1.044921875], "tokens": [1468, 4004, 813, 6150, 280, 813, 3397, 32, 20197, 2931, 473]}
{"line_number": 787, "line_type": "generated", "code": "\n        return var;\n      }\n    }\n\n    // if(x)y=1;else var y=2  ->  var y=x?1:2\n    if (thenBranchIsExpressionBlock && elseBranchIsVar &&\n        getBlockExpression", "entropy": 0.09375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.1739501953125, 0.1051025390625, 0.298583984375, 0.00453948974609375, 0.02587890625, 6.687641143798828e-05, 0.1038818359375, 0.0006012916564941406, 0.253662109375, 0.261474609375, 0.11578369140625, 0.0426025390625, 0.00966644287109375, 0.0994873046875, 1.23828125, 0.038818359375, 0.0251922607421875, 0.00498199462890625, 0.01522064208984375, 0.351806640625, 0.10113525390625, 0.0203704833984375, 0.044097900390625, 0.396240234375, 0.0029449462890625, 0.043548583984375, 0.087890625, 0.004547119140625, 0.054962158203125, 0.007366180419921875, 0.0010223388671875, 0.005527496337890625, 0.00724029541015625, 0.06365966796875, 0.047119140625, 0.06622314453125, 0.00431060791015625, 0.50830078125, 5.0067901611328125e-06, 0.0008053779602050781, 0.00461578369140625, 2.7418136596679688e-06, 0.04742431640625, 0.01467132568359375, 5.364418029785156e-06, 0.00010502338409423828, 0.0015239715576171875, 0.11083984375, 0.0108184814453125, 0.033447265625, 0.0002677440643310547, 0.01336669921875], "tokens": [291, 442, 773, 45, 397, 320, 284, 320, 446, 434, 415, 26, 106, 27, 107, 47, 35, 45, 1824, 773, 533, 47, 36, 225, 967, 225, 773, 533, 47, 106, 49, 35, 44, 36, 284, 415, 308, 3356, 10094, 1622, 3487, 2227, 962, 813, 10094, 1622, 1881, 962, 291, 622, 2227, 3487]}
{"line_number": 788, "line_type": "original", "code": "            elseOp.removeChild(elseExpr);", "entropy": 3.126953125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.3046875, 4.21484375, 7.38671875, 0.10711669921875, 3.78125, 0.010040283203125, 1.1181640625, 2.185546875, 0.0372314453125], "tokens": [1468, 813, 3397, 32, 28878, 26, 1824, 6150, 293]}
{"line_number": 788, "line_type": "generated", "code": "\n      }\n    }\n\n    // if(x)var y=1;else y=2  ->  var y=x?1:2\n    if (thenBranchIsExpressionBlock && elseBranchIsVar &&\n        getBlockExpression(thenBranch).", "entropy": 0.07708740234375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.11370849609375, 0.0007076263427734375, 0.12548828125, 0.0007996559143066406, 0.2744140625, 0.241943359375, 0.1334228515625, 0.042633056640625, 0.01105499267578125, 0.12158203125, 0.55322265625, 0.048309326171875, 0.0877685546875, 0.032867431640625, 0.025726318359375, 0.022186279296875, 1.0888671875, 0.01055145263671875, 0.03106689453125, 0.1690673828125, 0.0030498504638671875, 0.00872802734375, 0.055023193359375, 0.0024776458740234375, 0.04425048828125, 0.06939697265625, 0.0007529258728027344, 0.0026416778564453125, 0.0008568763732910156, 0.0021076202392578125, 0.0214080810546875, 0.0521240234375, 0.004421234130859375, 0.398681640625, 4.172325134277344e-06, 0.0013713836669921875, 0.011138916015625, 1.1920928955078125e-06, 0.048583984375, 0.00860595703125, 5.125999450683594e-06, 0.00012135505676269531, 0.00539398193359375, 0.07586669921875, 0.00829315185546875, 0.0172882080078125, 9.429454803466797e-05, 0.02349853515625, 7.140636444091797e-05, 0.00559234619140625, 4.76837158203125e-07, 0.0005879402160644531], "tokens": [397, 320, 284, 320, 446, 434, 415, 26, 106, 27, 869, 533, 47, 35, 45, 1824, 533, 47, 36, 225, 967, 225, 773, 533, 47, 106, 49, 35, 44, 36, 284, 415, 308, 3356, 10094, 1622, 3487, 2227, 962, 813, 10094, 1622, 1881, 962, 291, 622, 2227, 3487, 26, 3356, 10094, 547]}
{"line_number": 790, "line_type": "original", "code": "            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);", "entropy": 0.9111328125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.8359375, 2.193359375, 2.4609375, 0.33544921875, 0.036285400390625, 0.12359619140625, 0.0012950897216796875, 0.002414703369140625, 0.003948211669921875, 0.10107421875, 0.013519287109375, 0.4580078125, 0.416259765625, 0.00960540771484375, 0.0269775390625, 0.004108428955078125, 3.916015625, 0.00574493408203125, 0.0002262592315673828, 0.00347137451171875, 0.0821533203125, 0.0105133056640625], "tokens": [1468, 4004, 11962, 1212, 280, 14095, 32, 7133, 26, 1328, 30, 1615, 6150, 30, 813, 6150, 547, 1617, 612, 26, 96, 293]}
{"line_number": 790, "line_type": "generated", "code": "\n    }\n\n    // if(x)var y=1;else var y=2; -> var y=x?1:2\n    if (thenBranchIsExpressionBlock && elseBranchIsVar &&\n        getBlockExpression(thenBranch).getFirstChild", "entropy": 0.19091796875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.81982421875, 0.1019287109375, 1.087890625, 0.27783203125, 0.173095703125, 0.08807373046875, 0.032470703125, 0.322021484375, 0.80029296875, 0.06329345703125, 0.1806640625, 0.038238525390625, 0.04620361328125, 0.0323486328125, 0.59814453125, 0.673828125, 0.0279693603515625, 0.0279541015625, 1.4501953125, 0.482177734375, 0.43017578125, 0.009307861328125, 0.216064453125, 0.0926513671875, 0.006221771240234375, 0.00604248046875, 0.00565338134765625, 0.02850341796875, 0.42529296875, 0.08843994140625, 0.01080322265625, 0.05926513671875, 1.4901161193847656e-05, 0.0011167526245117188, 0.466552734375, 5.841255187988281e-06, 0.090087890625, 0.034759521484375, 7.62939453125e-06, 0.00010347366333007812, 0.01406097412109375, 0.4365234375, 0.0216827392578125, 0.055694580078125, 0.0003294944763183594, 0.053802490234375, 0.00015985965728759766, 0.0099334716796875, 5.960464477539062e-07, 0.0007867813110351562, 0.037628173828125, 0.0001939535140991211], "tokens": [284, 320, 446, 434, 415, 26, 106, 27, 869, 533, 47, 35, 45, 1824, 773, 533, 47, 36, 45, 967, 773, 533, 47, 106, 49, 35, 44, 36, 284, 415, 308, 3356, 10094, 1622, 3487, 2227, 962, 813, 10094, 1622, 1881, 962, 291, 622, 2227, 3487, 26, 3356, 10094, 547, 25657, 2931]}
{"line_number": 791, "line_type": "original", "code": "            Node assign = new Node(thenOp.getType(), assignName, hookNode)", "entropy": 2.208984375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.1328125, 2.759765625, 4.515625, 0.7080078125, 4.0390625, 0.2454833984375, 0.0243682861328125, 5.69921875, 2.8515625, 0.410400390625, 0.122314453125, 0.51318359375, 2.5703125, 0.44482421875, 1.6123046875, 1.587890625, 0.4169921875, 3.103515625], "tokens": [1468, 4004, 5313, 280, 537, 4004, 26, 3356, 3397, 32, 10272, 1026, 5313, 558, 30, 11962, 1212, 27]}
{"line_number": 791, "line_type": "generated", "code": "\n    } else if (thenBranchIsExpressionBlock && elseBranchIsVar &&\n               getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n\n      Node var = getBlockVar(elseBranch);\n      Node thenAssign = getBlockExpression(then", "entropy": 0.07037353515625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.4794921875, 0.13232421875, 0.395263671875, 0.004993438720703125, 0.0079345703125, 0.55029296875, 3.731250762939453e-05, 0.0018072128295898438, 0.005779266357421875, 8.463859558105469e-06, 0.10748291015625, 0.055419921875, 5.805492401123047e-05, 0.0003478527069091797, 0.002460479736328125, 0.2705078125, 0.6748046875, 0.03424072265625, 0.00024890899658203125, 0.0146636962890625, 0.00015985965728759766, 0.007213592529296875, 1.430511474609375e-06, 0.001422882080078125, 0.0280914306640625, 9.131431579589844e-05, 0.0015697479248046875, 0.0017147064208984375, 6.54458999633789e-05, 0.007366180419921875, 0.0071563720703125, 0.39404296875, 0.040924072265625, 0.282958984375, 0.01479339599609375, 0.057586669921875, 0.0007390975952148438, 0.0016765594482421875, 0.00017464160919189453, 0.01114654541015625, 6.556510925292969e-06, 0.0033969879150390625, 0.01424407958984375, 0.00482177734375, 0.028076171875, 0.0030517578125, 0.0007734298706054688, 0.004917144775390625, 0.00010859966278076172, 0.0003819465637207031, 9.34600830078125e-05, 0.0033283233642578125], "tokens": [284, 320, 813, 415, 308, 3356, 10094, 1622, 3487, 2227, 962, 813, 10094, 1622, 1881, 962, 3083, 622, 2227, 3487, 26, 3356, 10094, 547, 25657, 2931, 922, 297, 9079, 1157, 301, 1687, 4004, 773, 280, 622, 2227, 1881, 26, 1824, 10094, 293, 397, 4004, 1615, 9079, 280, 622, 2227, 3487, 26, 3356]}
{"line_number": 793, "line_type": "original", "code": "            Node expr = NodeUtil.newExpr(assign);", "entropy": 2.580078125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [10.671875, 1.0703125, 5.0625, 0.1590576171875, 5.234375, 0.006626129150390625, 0.0033016204833984375, 0.2091064453125, 0.62060546875, 0.0838623046875, 7.16796875, 0.65771484375], "tokens": [1468, 4004, 9810, 280, 4004, 1733, 32, 890, 6150, 26, 5157, 293]}
{"line_number": 793, "line_type": "generated", "code": "\n      Node var = getBlockVar(elseBranch);\n      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n\n      Node name1 = var.getFirstChild();\n      Node maybeName2 = thenAssign.getFirstChild();\n\n      if (name", "entropy": 0.031036376953125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.298095703125, 0.2144775390625, 0.172607421875, 0.0165863037109375, 0.02752685546875, 0.00047016143798828125, 0.0011167526245117188, 0.0002903938293457031, 0.00936126708984375, 7.033348083496094e-06, 0.00634002685546875, 0.02294921875, 0.011871337890625, 0.0299072265625, 0.002521514892578125, 0.0007224082946777344, 0.00493621826171875, 8.487701416015625e-05, 0.0004868507385253906, 9.751319885253906e-05, 0.0035343170166015625, 4.76837158203125e-07, 0.004550933837890625, 0.011474609375, 6.663799285888672e-05, 0.0008516311645507812, 0.1383056640625, 0.0127410888671875, 0.137451171875, 0.039031982421875, 0.000728607177734375, 0.34716796875, 6.461143493652344e-05, 0.0030803680419921875, 0.00010097026824951172, 0.0029773712158203125, 0.003322601318359375, 0.0030384063720703125, 0.0236358642578125, 0.0006470680236816406, 0.0005369186401367188, 0.0003440380096435547, 0.00431060791015625, 4.649162292480469e-06, 8.952617645263672e-05, 0.00394439697265625, 0.00013375282287597656, 0.0011167526245117188, 0.019805908203125, 0.01374053955078125, 0.0026645660400390625, 0.01442718505859375], "tokens": [397, 4004, 773, 280, 622, 2227, 1881, 26, 1824, 10094, 293, 397, 4004, 1615, 9079, 280, 622, 2227, 3487, 26, 3356, 10094, 547, 25657, 2931, 473, 1687, 4004, 636, 35, 280, 773, 32, 25657, 2931, 473, 397, 4004, 8762, 558, 36, 280, 1615, 9079, 32, 25657, 2931, 473, 1687, 415, 308, 426]}
{"line_number": 794, "line_type": "original", "code": "            parent.replaceChild(n, expr);", "entropy": 2.23828125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.984375, 6.5, 0.12420654296875, 0.0948486328125, 0.006378173828125, 0.006053924560546875, 0.18212890625, 0.005069732666015625, 5.44140625, 0.0499267578125], "tokens": [1468, 2935, 32, 3227, 2931, 26, 96, 30, 9810, 293]}
{"line_number": 794, "line_type": "generated", "code": "\n      Node var = getBlockVar(elseBranch);\n      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n\n      Node name1 = var.getFirstChild();\n      Node maybeName2 = thenAssign.getFirstChild();\n\n      if (name", "entropy": 0.036163330078125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.283203125, 0.2313232421875, 0.1759033203125, 0.026153564453125, 0.03363037109375, 0.0008091926574707031, 0.0013151168823242188, 0.00035452842712402344, 0.0105133056640625, 1.33514404296875e-05, 0.0070037841796875, 0.033721923828125, 0.0167388916015625, 0.035247802734375, 0.002628326416015625, 0.0007920265197753906, 0.005939483642578125, 8.881092071533203e-05, 0.0007367134094238281, 0.00011587142944335938, 0.003833770751953125, 7.152557373046875e-07, 0.006595611572265625, 0.01110076904296875, 0.00022685527801513672, 0.0010833740234375, 0.19580078125, 0.01812744140625, 0.135986328125, 0.037109375, 0.0008320808410644531, 0.4814453125, 6.413459777832031e-05, 0.0028629302978515625, 0.0001289844512939453, 0.0034656524658203125, 0.00439453125, 0.00402069091796875, 0.029449462890625, 0.0006918907165527344, 0.00054931640625, 0.0003745555877685547, 0.00539398193359375, 7.748603820800781e-06, 0.00011622905731201172, 0.004695892333984375, 0.00010633468627929688, 0.0013303756713867188, 0.027099609375, 0.017059326171875, 0.0035114288330078125, 0.016632080078125], "tokens": [397, 4004, 773, 280, 622, 2227, 1881, 26, 1824, 10094, 293, 397, 4004, 1615, 9079, 280, 622, 2227, 3487, 26, 3356, 10094, 547, 25657, 2931, 473, 1687, 4004, 636, 35, 280, 773, 32, 25657, 2931, 473, 397, 4004, 8762, 558, 36, 280, 1615, 9079, 32, 25657, 2931, 473, 1687, 415, 308, 426]}
{"line_number": 795, "line_type": "original", "code": "            reportCodeChange();", "entropy": 2.7109375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.296875, 4.15625, 0.08282470703125, 0.0008625984191894531, 0.019500732421875], "tokens": [1468, 3639, 1227, 1791, 473]}
{"line_number": 795, "line_type": "generated", "code": "\n      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n\n      Node name1 = var.getFirstChild();\n      Node maybeName2 = thenAssign.getFirstChild();\n\n      if (name1.hasChildren()\n          && maybeName2.", "entropy": 0.0400390625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.54443359375, 0.1783447265625, 0.10467529296875, 0.00534820556640625, 0.0013570785522460938, 0.00917816162109375, 0.00012767314910888672, 0.0014667510986328125, 0.0001169443130493164, 0.004451751708984375, 1.0728836059570312e-06, 0.0096588134765625, 0.0262451171875, 0.00013172626495361328, 0.00411224365234375, 0.364501953125, 0.022674560546875, 0.17529296875, 0.038116455078125, 0.0008301734924316406, 0.360595703125, 8.106231689453125e-05, 0.0032558441162109375, 0.00016820430755615234, 0.003765106201171875, 0.01495361328125, 0.005786895751953125, 0.030059814453125, 0.000820159912109375, 0.0007457733154296875, 0.0004382133483886719, 0.00647735595703125, 8.940696716308594e-06, 0.00013518333435058594, 0.003570556640625, 8.368492126464844e-05, 0.0014333724975585938, 0.04937744140625, 0.02001953125, 0.0040130615234375, 0.01477813720703125, 1.3113021850585938e-05, 0.0008649826049804688, 0.00800323486328125, 6.401538848876953e-05, 0.0004277229309082031, 0.05120849609375, 0.001739501953125, 0.0076751708984375, 6.198883056640625e-06, 3.2067298889160156e-05, 0.0001201629638671875], "tokens": [397, 4004, 1615, 9079, 280, 622, 2227, 3487, 26, 3356, 10094, 547, 25657, 2931, 473, 1687, 4004, 636, 35, 280, 773, 32, 25657, 2931, 473, 397, 4004, 8762, 558, 36, 280, 1615, 9079, 32, 25657, 2931, 473, 1687, 415, 308, 426, 35, 32, 2040, 7640, 346, 616, 962, 8762, 558, 36, 32]}
{"line_number": 797, "line_type": "original", "code": "            return expr;", "entropy": 4.734375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [10.046875, 4.63671875, 4.16015625, 0.0941162109375], "tokens": [1468, 442, 9810, 45]}
{"line_number": 797, "line_type": "generated", "code": "\n      Node name1 = var.getFirstChild();\n      Node maybeName2 = thenAssign.getFirstChild();\n\n      if (name1.hasChildren()\n          && maybeName2.isName()\n          && name1.getString().equals(maybeName2", "entropy": 0.058135986328125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.8984375, 0.351806640625, 0.10284423828125, 0.034271240234375, 0.0016956329345703125, 1.109375, 0.00014841556549072266, 0.007472991943359375, 0.0008759498596191406, 0.00945281982421875, 0.01406097412109375, 0.027008056640625, 0.048797607421875, 0.0017852783203125, 0.0012712478637695312, 0.0005822181701660156, 0.0114288330078125, 6.4849853515625e-05, 0.00019061565399169922, 0.006992340087890625, 0.00010943412780761719, 0.0030002593994140625, 0.239013671875, 0.0245819091796875, 0.0053558349609375, 0.018768310546875, 5.91278076171875e-05, 0.0015859603881835938, 0.01226806640625, 9.882450103759766e-05, 0.000865936279296875, 0.06292724609375, 0.0020771026611328125, 0.01038360595703125, 1.5497207641601562e-05, 0.00012099742889404297, 0.00016188621520996094, 0.000659942626953125, 0.00019609928131103516, 0.0032444000244140625, 0.0033626556396484375, 0.0009088516235351562, 0.0023784637451171875, 2.2411346435546875e-05, 4.3392181396484375e-05, 8.690357208251953e-05, 0.00010311603546142578, 0.0004220008850097656, 0.0001232624053955078, 0.0008654594421386719, 9.047985076904297e-05, 1.7881393432617188e-06], "tokens": [397, 4004, 636, 35, 280, 773, 32, 25657, 2931, 473, 397, 4004, 8762, 558, 36, 280, 1615, 9079, 32, 25657, 2931, 473, 1687, 415, 308, 426, 35, 32, 2040, 7640, 346, 616, 962, 8762, 558, 36, 32, 297, 558, 346, 616, 962, 636, 35, 32, 7069, 922, 3574, 26, 16877, 558, 36]}
{"line_number": 775, "line_type": "original", "code": "        if (NodeUtil.isAssignmentOp(thenOp)) {", "entropy": 1.546875, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [5.71484375, 0.308349609375, 0.1998291015625, 3.279296875, 0.0003685951232910156, 3.981590270996094e-05, 0.092041015625, 4.46484375, 0.0672607421875, 0.0030994415283203125, 4.22265625, 1.701171875, 1.5771484375, 0.02069091796875], "tokens": [351, 415, 308, 1212, 1733, 32, 297, 12589, 3397, 26, 3356, 3397, 490, 301]}
{"line_number": 775, "line_type": "generated", "code": "\n      if (areNodesEqualForInlining(name1, maybeName2)) {\n        Node thenExpr = getBlockExpression(thenBranch);\n        Node elseExpr = elseAssign.getLastChild();\n        elseAssign.removeChild(elseExpr);\n\n        Node hook", "entropy": 0.240234375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.225830078125, 0.2099609375, 0.13232421875, 0.7763671875, 0.00791168212890625, 0.01326751708984375, 0.07025146484375, 0.00066375732421875, 0.0012149810791015625, 0.057586669921875, 9.059906005859375e-05, 0.0019063949584960938, 0.0109100341796875, 6.520748138427734e-05, 0.00012052059173583984, 0.471435546875, 0.0086517333984375, 0.323974609375, 1.0126953125, 1.576171875, 1.1962890625, 0.01544189453125, 0.69140625, 0.0452880859375, 0.67529296875, 0.01018524169921875, 0.23779296875, 1.8477439880371094e-05, 0.82763671875, 0.08477783203125, 0.2039794921875, 0.061676025390625, 0.0253143310546875, 0.003887176513671875, 0.5869140625, 0.0165252685546875, 0.1934814453125, 0.12384033203125, 0.0009131431579589844, 0.047393798828125, 0.448486328125, 0.95947265625, 0.023651123046875, 0.0009164810180664062, 0.017852783203125, 6.67572021484375e-05, 0.0028858184814453125, 0.004489898681640625, 0.001125335693359375, 0.5283203125, 0.384033203125, 0.1739501953125], "tokens": [397, 415, 308, 586, 5909, 1324, 1562, 29021, 26, 426, 35, 30, 8762, 558, 36, 490, 301, 291, 4004, 1615, 6150, 280, 622, 2227, 3487, 26, 3356, 10094, 293, 291, 4004, 813, 6150, 280, 813, 9079, 32, 20197, 2931, 473, 291, 813, 9079, 32, 28878, 26, 1824, 6150, 293, 584, 4004, 11962]}
{"line_number": 771, "line_type": "original", "code": "      Node thenOp = getBlockExpression(thenBranch).getFirstChild();", "entropy": 1.3701171875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [5.578125, 1.3388671875, 3.0625, 6.7578125, 0.0323486328125, 1.8857421875, 0.25146484375, 0.2861328125, 0.0047760009765625, 0.1373291015625, 6.937980651855469e-05, 0.51611328125, 0.6767578125, 0.0030574798583984375, 0.01145172119140625], "tokens": [647, 4004, 1615, 3397, 280, 622, 2227, 3487, 26, 3356, 10094, 547, 25657, 2931, 473]}
{"line_number": 771, "line_type": "generated", "code": "\n      if (areNodesEqualForInlining(var, elseAssign.getFirstChild())) {\n        n.removeChild(cond);\n        Node thenExpr = var.removeFirstChild();\n        Node elseExpr = elseAssign.getLastChild();\n        elseAssign.removeChild", "entropy": 0.1646728515625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.168212890625, 0.6083984375, 0.0977783203125, 0.6181640625, 0.003841400146484375, 0.01270294189453125, 0.0282440185546875, 0.0005726814270019531, 0.0010004043579101562, 0.08416748046875, 0.056793212890625, 0.0234832763671875, 0.00079345703125, 0.06683349609375, 0.08038330078125, 0.006710052490234375, 0.397216796875, 0.00327301025390625, 0.1944580078125, 0.77294921875, 0.0008606910705566406, 0.047698974609375, 0.00010085105895996094, 0.0225982666015625, 0.0018835067749023438, 0.11077880859375, 0.54541015625, 0.83984375, 0.775390625, 0.005229949951171875, 1.11328125, 0.029937744140625, 0.72509765625, 0.12396240234375, 0.0002918243408203125, 0.020233154296875, 0.019744873046875, 0.0699462890625, 0.02642822265625, 0.0242462158203125, 0.0028285980224609375, 0.056915283203125, 0.0006170272827148438, 0.0158233642578125, 0.10986328125, 6.604194641113281e-05, 0.032806396484375, 0.159423828125, 0.4296875, 0.005733489990234375, 0.00038743019104003906, 0.01873779296875], "tokens": [397, 415, 308, 586, 5909, 1324, 1562, 29021, 26, 869, 30, 813, 9079, 32, 25657, 2931, 5156, 301, 291, 310, 32, 28878, 26, 1328, 293, 291, 4004, 1615, 6150, 280, 773, 32, 2546, 3472, 2931, 473, 291, 4004, 813, 6150, 280, 813, 9079, 32, 20197, 2931, 473, 291, 813, 9079, 32, 28878]}
{"line_number": 772, "line_type": "original", "code": "      Node elseOp = getBlockExpression(elseBranch).getFirstChild();", "entropy": 1.4443359375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.73828125, 2.990234375, 2.35546875, 3.9375, 0.022613525390625, 4.08203125, 0.51904296875, 0.1585693359375, 0.00954437255859375, 0.02435302734375, 0.00547027587890625, 0.55419921875, 0.1959228515625, 0.004573822021484375, 0.0673828125], "tokens": [647, 4004, 813, 3397, 280, 622, 2227, 3487, 26, 1824, 10094, 547, 25657, 2931, 473]}
{"line_number": 772, "line_type": "generated", "code": "\n      if (areNodesEqualForInlining(var, elseAssign.getFirstChild())) {\n        n.removeChild(cond);\n        Node thenExpr = var.removeFirstChild();\n        Node elseExpr = elseAssign.getLastChild();\n        elseAssign.removeChild", "entropy": 0.152587890625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.09637451171875, 0.24853515625, 0.06683349609375, 0.53466796875, 0.0025501251220703125, 0.01087188720703125, 0.021331787109375, 0.00047016143798828125, 0.00090789794921875, 0.08953857421875, 0.05267333984375, 0.01898193359375, 0.0014743804931640625, 0.08001708984375, 0.06781005859375, 0.00450897216796875, 0.3603515625, 0.0015811920166015625, 0.153564453125, 0.8623046875, 0.0008153915405273438, 0.03936767578125, 9.775161743164062e-05, 0.0223236083984375, 0.0019969940185546875, 0.1287841796875, 0.58203125, 0.73046875, 0.77880859375, 0.006076812744140625, 1.138671875, 0.02288818359375, 0.78515625, 0.1666259765625, 0.0002384185791015625, 0.0199737548828125, 0.02862548828125, 0.08447265625, 0.03173828125, 0.0221405029296875, 0.002895355224609375, 0.055328369140625, 0.00107574462890625, 0.01276397705078125, 0.09454345703125, 4.8995018005371094e-05, 0.03173828125, 0.1466064453125, 0.307861328125, 0.003932952880859375, 0.0002949237823486328, 0.0146636962890625], "tokens": [397, 415, 308, 586, 5909, 1324, 1562, 29021, 26, 869, 30, 813, 9079, 32, 25657, 2931, 5156, 301, 291, 310, 32, 28878, 26, 1328, 293, 291, 4004, 1615, 6150, 280, 773, 32, 2546, 3472, 2931, 473, 291, 4004, 813, 6150, 280, 813, 9079, 32, 20197, 2931, 473, 291, 813, 9079, 32, 28878]}
{"line_number": 773, "line_type": "original", "code": "      if (thenOp.getType() == elseOp.getType()) {", "entropy": 1.4697265625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.9375, 0.47705078125, 0.28369140625, 4.79296875, 3.28515625, 0.165283203125, 3.28515625, 0.036590576171875, 0.1895751953125, 3.16796875, 0.443115234375, 0.0014886856079101562, 0.0103302001953125, 0.927734375, 0.04327392578125], "tokens": [647, 415, 308, 3356, 3397, 32, 10272, 346, 610, 813, 3397, 32, 10272, 1157, 301]}
{"line_number": 773, "line_type": "generated", "code": "\n      if (areNodesEqualForInlining(name1, elseAssign.getFirstChild())) {\n        Node value1 = var.getLastChild();\n        Node value2 = elseAssign.getLastChild();\n        var.removeChild(value1);\n        elseAssign.", "entropy": 0.2056884765625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.423583984375, 0.513671875, 0.1409912109375, 0.70263671875, 0.0030517578125, 0.0081634521484375, 0.0298919677734375, 0.0003376007080078125, 0.0008387565612792969, 0.0361328125, 0.0002262592315673828, 0.0028781890869140625, 0.05023193359375, 0.0005345344543457031, 0.006732940673828125, 0.058502197265625, 0.011444091796875, 0.386474609375, 0.007572174072265625, 0.2205810546875, 1.0419921875, 1.7607421875, 0.2320556640625, 0.004543304443359375, 0.505859375, 0.0019817352294921875, 0.132568359375, 0.0003647804260253906, 0.08544921875, 0.0684814453125, 0.42578125, 0.30859375, 0.01259613037109375, 0.005435943603515625, 0.055755615234375, 0.00013124942779541016, 0.0008392333984375, 0.011138916015625, 0.0004086494445800781, 0.046051025390625, 0.68408203125, 1.7958984375, 0.01137542724609375, 0.2327880859375, 0.0004360675811767578, 0.1429443359375, 0.0038127899169921875, 0.0016889572143554688, 0.0372314453125, 0.482666015625, 9.5367431640625e-05, 7.081031799316406e-05], "tokens": [397, 415, 308, 586, 5909, 1324, 1562, 29021, 26, 426, 35, 30, 813, 9079, 32, 25657, 2931, 5156, 301, 291, 4004, 786, 35, 280, 773, 32, 20197, 2931, 473, 291, 4004, 786, 36, 280, 813, 9079, 32, 20197, 2931, 473, 291, 773, 32, 28878, 26, 853, 35, 293, 291, 813, 9079, 32]}
{"line_number": 913, "line_type": "original", "code": "        break;", "entropy": 5.54296875, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [7.921875, 8.671875, 0.02996826171875], "tokens": [351, 1626, 45]}
{"line_number": 913, "line_type": "generated", "code": "\n    return n.getFirstChild().getFirstChild();\n  }\n\n  /**\n   * Try to fold the statement into the previous statement.\n   *\n   * For example, the statement:\n   *\n   * x = 1;\n   * x = 2;", "entropy": 0.61279296875, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [1.72265625, 0.39013671875, 0.6474609375, 0.1595458984375, 0.400390625, 0.034149169921875, 0.2099609375, 0.1964111328125, 0.0018339157104492188, 0.1771240234375, 0.0151519775390625, 0.0006775856018066406, 0.1973876953125, 0.1695556640625, 0.0219879150390625, 0.00015914440155029297, 1.3935546875, 0.0188140869140625, 1.4482421875, 1.6669921875, 2.427734375, 1.5380859375, 0.77490234375, 2.197265625, 0.75390625, 0.62353515625, 0.90234375, 0.07666015625, 0.66650390625, 0.0019273757934570312, 2.19921875, 0.0230560302734375, 0.97802734375, 2.34765625, 0.9208984375, 1.2607421875, 0.0176544189453125, 0.0002789497375488281, 0.47216796875, 0.0001647472381591797, 0.9716796875, 0.0882568359375, 0.186279296875, 0.29833984375, 0.1514892578125, 0.08367919921875, 0.0004019737243652344, 1.9091796875, 0.5810546875, 0.404541015625, 0.064453125, 0.0765380859375], "tokens": [284, 442, 310, 32, 25657, 2931, 922, 25657, 2931, 473, 334, 320, 719, 1022, 664, 319, 8959, 372, 11426, 322, 7603, 1991, 322, 4552, 7603, 32, 664, 319, 664, 319, 2616, 2280, 30, 322, 7603, 44, 664, 319, 664, 319, 816, 280, 225, 35, 45, 664, 319, 816, 280, 225, 36, 45]}
{"line_number": 989, "line_type": "original", "code": "        Node first = n.getFirstChild();", "entropy": 1.1640625, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [6.734375, 3.345703125, 0.339599609375, 0.0126495361328125, 0.0192413330078125, 0.0022373199462890625, 0.00983428955078125, 0.0005178451538085938, 0.01125335693359375], "tokens": [351, 4004, 1932, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 989, "line_type": "generated", "code": "\n    return n.getFirstChild();\n  }\n\n  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression statement.\n   */\n  private boolean isExpressBlock(Node n) {\n    if (n.", "entropy": 0.154052734375, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.0645751953125, 0.044525146484375, 0.159912109375, 0.004276275634765625, 0.010101318359375, 0.0002815723419189453, 0.025787353515625, 0.0102386474609375, 0.00014066696166992188, 0.0626220703125, 0.037841796875, 0.00788116455078125, 0.00033664703369140625, 0.08245849609375, 0.01280975341796875, 0.4306640625, 0.04473876953125, 0.1129150390625, 0.0312042236328125, 0.1429443359375, 0.83642578125, 0.0755615234375, 0.020904541015625, 0.0169525146484375, 0.048126220703125, 0.05157470703125, 0.0638427734375, 0.0323486328125, 0.00021123886108398438, 0.0293731689453125, 1.27734375, 1.1220703125, 1.13671875, 0.2099609375, 0.0114593505859375, 0.00339508056640625, 0.0004487037658691406, 0.006366729736328125, 0.00263214111328125, 0.0024967193603515625, 1.6494140625, 0.028472900390625, 0.0029850006103515625, 0.00017976760864257812, 0.0009002685546875, 0.0007724761962890625, 0.00024318695068359375, 0.010040283203125, 0.0753173828125, 0.0026760101318359375, 0.00505828857421875, 0.00027251243591308594], "tokens": [284, 442, 310, 32, 25657, 2931, 473, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438, 664, 319, 262, 600, 6101, 7603, 32, 664, 569, 334, 945, 1905, 438, 12070, 2227, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32]}
{"line_number": 990, "line_type": "original", "code": "        if (first.isReturn()) {", "entropy": 1.705078125, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [6.44140625, 2.990234375, 0.08251953125, 0.89111328125, 0.012451171875, 0.2325439453125, 4.48046875, 0.183837890625, 0.03173828125], "tokens": [351, 415, 308, 2232, 32, 297, 2891, 1157, 301]}
{"line_number": 990, "line_type": "generated", "code": "\n  }\n\n  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isExpressionBlock(Node n) {\n    if (n.isBlock()) {\n      if (n", "entropy": 0.142578125, "is_bug_line": false, "sus_score": 0.19611613513818404, "per_token_entropy": [0.255859375, 0.1942138671875, 0.453857421875, 0.06610107421875, 0.0172119140625, 0.0010547637939453125, 0.14013671875, 0.0202789306640625, 0.2381591796875, 0.055145263671875, 0.1207275390625, 0.0357666015625, 0.1805419921875, 0.7138671875, 0.0867919921875, 0.025421142578125, 0.018035888671875, 0.057220458984375, 0.054443359375, 0.06396484375, 0.040679931640625, 0.00046753883361816406, 0.031524658203125, 1.142578125, 1.064453125, 0.9375, 0.0310211181640625, 0.004108428955078125, 0.0138397216796875, 0.00666046142578125, 0.003448486328125, 0.0033245086669921875, 1.01953125, 0.0302276611328125, 0.0009021759033203125, 0.0002455711364746094, 0.0018110275268554688, 0.0007276535034179688, 0.0009312629699707031, 0.019622802734375, 0.144287109375, 0.0029201507568359375, 0.01073455810546875, 0.00018274784088134766, 0.0006871223449707031, 0.0006642341613769531, 0.01318359375, 0.00026607513427734375, 0.00403594970703125, 0.0828857421875, 0.0005154609680175781, 0.0009050369262695312], "tokens": [334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438, 664, 319, 262, 600, 6101, 32, 664, 569, 334, 945, 1905, 438, 3487, 2227, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 297, 2227, 1157, 301, 397, 415, 308, 96]}
{"line_number": 963, "line_type": "original", "code": "    Preconditions.checkState(isFoldableExpressBlock(n));", "entropy": 1.6064453125, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [5.76171875, 10.8984375, 0.0012598037719726562, 0.001739501953125, 0.1595458984375, 0.0026149749755859375, 1.0341796875, 3.51171875, 0.004924774169921875, 0.90380859375, 0.0019626617431640625, 0.004062652587890625, 0.00827789306640625, 0.197021484375], "tokens": [264, 40596, 32, 1553, 1078, 26, 297, 15483, 444, 12070, 2227, 26, 96, 876]}
{"line_number": 963, "line_type": "generated", "code": "\n    return n.getFirstChild();\n  }\n\n  /**\n   * @return Whether the node is a block with a single statement that is\n   *     a throw with or without an expression.\n   */\n  private boolean isThrowBlock(Node n) {\n   ", "entropy": 0.144287109375, "is_bug_line": false, "sus_score": 0.19245008972987526, "per_token_entropy": [0.154296875, 0.07720947265625, 0.0548095703125, 0.00339508056640625, 0.0552978515625, 0.01776123046875, 0.5986328125, 0.00921630859375, 0.0004413127899169922, 0.1904296875, 0.1387939453125, 0.0222625732421875, 0.00034689903259277344, 0.64404296875, 0.05059814453125, 0.179931640625, 0.09722900390625, 0.1824951171875, 0.0758056640625, 0.3212890625, 0.89111328125, 0.2158203125, 0.0831298828125, 0.0240936279296875, 0.11151123046875, 0.12060546875, 0.09283447265625, 0.050994873046875, 0.00017321109771728516, 0.032989501953125, 1.0751953125, 1.1142578125, 0.61865234375, 0.12939453125, 0.0006780624389648438, 0.005096435546875, 0.0118408203125, 0.007045745849609375, 0.0030879974365234375, 0.0007953643798828125, 0.0005335807800292969, 0.0036563873291015625, 0.0014410018920898438, 0.0015811920166015625, 0.008941650390625, 0.01335906982421875, 0.0009737014770507812, 0.00010848045349121094, 0.0008244514465332031, 0.0003802776336669922, 0.0003330707550048828, 0.003734588623046875], "tokens": [284, 442, 310, 32, 25657, 2931, 473, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438, 664, 319, 262, 312, 1422, 623, 556, 2876, 600, 6101, 32, 664, 569, 334, 945, 1905, 438, 6561, 2227, 26, 1212, 310, 27, 301, 284]}
