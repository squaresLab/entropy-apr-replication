{"line_number": 1431, "line_type": "original", "code": "    if (!right.isNumber()) {", "entropy": 2.4453125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [5.88671875, 1.6083984375, 1.0419921875, 2.2421875, 0.00916290283203125, 8.6328125, 0.134033203125, 0.010772705078125], "tokens": [264, 415, 1429, 990, 32, 42128, 1157, 301]}
{"line_number": 1431, "line_type": "generated", "code": "\n      // Sometimes people like to use complex expressions to index into\n      // objects, or strings to index into object methods.\n      return n;\n    }\n\n    String propName = right.getString();\n    Node value = left.getProp(propName);\n   ", "entropy": 0.186767578125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.341552734375, 0.401611328125, 0.697265625, 0.0024394989013671875, 0.0257720947265625, 0.0005764961242675781, 0.026153564453125, 0.0950927734375, 0.0030498504638671875, 0.031707763671875, 0.264404296875, 0.010894775390625, 0.03631591796875, 0.0006899833679199219, 0.9580078125, 0.2080078125, 0.1114501953125, 0.204345703125, 0.00583648681640625, 0.0186614990234375, 0.013580322265625, 0.40380859375, 0.0794677734375, 0.0135650634765625, 0.01230621337890625, 0.027130126953125, 0.002628326416015625, 0.00031185150146484375, 0.0154571533203125, 0.000946044921875, 0.03765869140625, 0.246337890625, 0.59326171875, 0.29833984375, 0.0021419525146484375, 0.01910400390625, 0.00012826919555664062, 0.0013637542724609375, 0.002170562744140625, 0.335693359375, 0.372802734375, 1.986328125, 0.11285400390625, 0.73291015625, 0.0013408660888671875, 0.374267578125, 0.07122802734375, 0.01555633544921875, 0.01087188720703125, 5.733966827392578e-05, 0.0094757080078125, 0.473876953125], "tokens": [397, 434, 38517, 7024, 2124, 372, 793, 8640, 15866, 372, 1650, 1991, 397, 434, 4684, 30, 556, 5852, 372, 1650, 1991, 1300, 4438, 32, 397, 442, 310, 45, 284, 320, 446, 892, 7018, 558, 280, 2091, 32, 7069, 473, 284, 4004, 786, 280, 2841, 32, 371, 6567, 26, 4641, 558, 293, 284]}
{"line_number": 1437, "line_type": "original", "code": "    double index = right.getDouble();", "entropy": 2.232421875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.97265625, 8.4765625, 0.728515625, 0.153564453125, 1.400390625, 0.006694793701171875, 0.06787109375, 0.056182861328125], "tokens": [264, 2064, 1650, 280, 2091, 32, 37792, 473]}
{"line_number": 1437, "line_type": "generated", "code": "\n    String propName = right.getString();\n    if (!isValidJsIdentifier(propName)) {\n      return n;\n    }\n\n    Node prop = left.getFirstChild();\n    while (prop!= null) {\n      String key = prop.getString();\n     ", "entropy": 0.35693359375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.11383056640625, 0.24169921875, 0.74853515625, 0.2000732421875, 0.004241943359375, 0.07354736328125, 0.0003414154052734375, 0.00415802001953125, 0.0034465789794921875, 0.311279296875, 1.7666015625, 0.63134765625, 2.25, 2.640625, 0.63232421875, 0.04083251953125, 0.0224151611328125, 1.4543533325195312e-05, 0.045318603515625, 0.0024261474609375, 0.01413726806640625, 0.71533203125, 0.00948333740234375, 0.00014579296112060547, 0.005466461181640625, 4.1484832763671875e-05, 0.1494140625, 0.51513671875, 1.49609375, 0.7216796875, 0.56591796875, 0.0023517608642578125, 0.229736328125, 0.0040283203125, 0.12457275390625, 0.06622314453125, 0.1856689453125, 0.01494598388671875, 0.00531768798828125, 0.002262115478515625, 0.00015866756439208984, 0.3603515625, 0.0004673004150390625, 0.073974609375, 1.9658203125, 1.021484375, 0.1251220703125, 0.1751708984375, 0.0015001296997070312, 0.1138916015625, 0.006023406982421875, 0.157470703125], "tokens": [284, 892, 7018, 558, 280, 2091, 32, 7069, 473, 284, 415, 1429, 13433, 10535, 5541, 26, 4641, 558, 490, 301, 397, 442, 310, 45, 284, 320, 446, 4004, 7018, 280, 2841, 32, 25657, 2931, 473, 284, 2218, 308, 4641, 863, 744, 27, 301, 397, 892, 1202, 280, 7018, 32, 7069, 473, 397]}
{"line_number": 1438, "line_type": "original", "code": "    int intIndex = (int) index;", "entropy": 1.7138671875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.44140625, 3.6484375, 3.333984375, 0.02947998046875, 0.038818359375, 3.244140625, 0.06982421875, 0.0062103271484375, 0.265380859375, 0.06494140625], "tokens": [264, 629, 629, 1284, 280, 308, 410, 27, 1650, 45]}
{"line_number": 1438, "line_type": "generated", "code": "\n    String propName = right.getString();\n    Node value = null;\n    for (Node key = left.getFirstChild(); key!= null; key = key.getNext()) {\n      if (!key.isString()) {\n        continue;\n      }\n\n      String", "entropy": 0.2578125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.050384521484375, 0.470458984375, 0.68896484375, 0.30908203125, 0.006866455078125, 0.0792236328125, 0.002361297607421875, 0.00365447998046875, 0.006649017333984375, 0.3154296875, 0.89404296875, 1.548828125, 0.1488037109375, 1.6845703125, 0.0015535354614257812, 0.348876953125, 0.496826171875, 0.0102081298828125, 0.07196044921875, 0.99609375, 0.457275390625, 0.0274658203125, 0.0013561248779296875, 0.005817413330078125, 0.0012683868408203125, 0.0238800048828125, 0.1868896484375, 0.0038852691650390625, 0.0005474090576171875, 0.058502197265625, 0.11737060546875, 0.001209259033203125, 0.002368927001953125, 0.00021445751190185547, 7.37905502319336e-05, 0.00858306884765625, 0.0011415481567382812, 0.15478515625, 0.23681640625, 1.2578125, 0.0687255859375, 5.841255187988281e-05, 0.08355712890625, 0.1700439453125, 0.0022945404052734375, 0.0104217529296875, 0.59765625, 0.00025963783264160156, 0.03143310546875, 7.30752944946289e-05, 0.483642578125, 1.2724609375], "tokens": [284, 892, 7018, 558, 280, 2091, 32, 7069, 473, 284, 4004, 786, 280, 744, 45, 284, 436, 308, 1212, 1202, 280, 2841, 32, 25657, 2931, 473, 1202, 863, 744, 45, 1202, 280, 1202, 32, 23017, 1157, 301, 397, 415, 1429, 678, 32, 35690, 1157, 301, 291, 4036, 45, 397, 320, 1687, 892]}
{"line_number": 1439, "line_type": "original", "code": "    if (intIndex != index) {", "entropy": 2.884765625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.30859375, 2.111328125, 0.3896484375, 9.8046875, 0.2021484375, 3.509765625, 2.447265625, 0.11407470703125, 0.07440185546875], "tokens": [264, 415, 308, 410, 1284, 863, 1650, 27, 301]}
{"line_number": 1439, "line_type": "generated", "code": "\n      error(INVALID_GETPROP_ERROR, right);\n      return n;\n    }\n\n    // Replace the entire GETPROP with the value\n    n.getParent().replaceChild(n, right);\n    reportCodeChange();\n    return right;\n  }\n\n ", "entropy": 0.254150390625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.38720703125, 0.368408203125, 0.003082275390625, 0.6806640625, 9.012222290039062e-05, 0.08282470703125, 0.1981201171875, 0.0004954338073730469, 2.2421875, 0.00962066650390625, 0.1748046875, 0.0142669677734375, 0.039886474609375, 0.01311492919921875, 0.017822265625, 0.0003657341003417969, 0.058013916015625, 0.0078887939453125, 0.0848388671875, 1.6435546875, 3.0078125, 0.089111328125, 0.2371826171875, 0.01145172119140625, 0.11199951171875, 0.0390625, 0.01476287841796875, 0.0635986328125, 0.0997314453125, 0.12298583984375, 0.00010275840759277344, 0.00356292724609375, 2.4557113647460938e-05, 0.0002675056457519531, 0.00019598007202148438, 4.374980926513672e-05, 0.0015344619750976562, 5.328655242919922e-05, 2.2890625, 0.196044921875, 0.0200347900390625, 0.0299072265625, 2.8252601623535156e-05, 3.337860107421875e-05, 0.0005178451538085938, 0.11480712890625, 0.01110076904296875, 0.00899505615234375, 0.0029926300048828125, 0.0207977294921875, 0.0014066696166992188, 0.69482421875], "tokens": [397, 1048, 26, 8606, 81, 2788, 15262, 81, 2930, 30, 2091, 293, 397, 442, 310, 45, 284, 320, 446, 434, 16695, 322, 9449, 6272, 15262, 623, 322, 786, 284, 310, 32, 18789, 922, 3227, 2931, 26, 96, 30, 2091, 293, 284, 3639, 1227, 1791, 473, 284, 442, 2091, 45, 334, 320, 719]}
{"line_number": 1444, "line_type": "original", "code": "    if (intIndex < 0) {", "entropy": 2.75390625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.890625, 5.01953125, 0.2403564453125, 10.2421875, 0.38037109375, 3.296875, 0.3408203125, 0.02197265625, 1.0625, 0.04486083984375], "tokens": [264, 415, 308, 410, 1284, 333, 225, 34, 27, 301]}
{"line_number": 1444, "line_type": "generated", "code": "\n          case Token.STRING_KEY:\n            key = c;\n            value = c.getFirstChild();\n            break;\n          case Token.GET_VALUE:\n            key = c;\n            value = c.getLastChild();\n            break;\n          default:\n           ", "entropy": 0.216064453125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.798828125, 0.301513671875, 0.328857421875, 0.006656646728515625, 0.61865234375, 0.09454345703125, 0.0016336441040039062, 0.01197052001953125, 0.250244140625, 0.31787109375, 0.0008292198181152344, 0.0223236083984375, 0.576171875, 0.08587646484375, 0.162109375, 0.00039958953857421875, 0.0926513671875, 0.004718780517578125, 0.145751953125, 0.0045928955078125, 0.035369873046875, 0.059326171875, 0.08673095703125, 0.001682281494140625, 0.4033203125, 0.31689453125, 0.007373809814453125, 6.4373016357421875e-06, 1.3251953125, 1.0576171875, 0.39013671875, 0.1258544921875, 0.0694580078125, 0.45556640625, 0.0002961158752441406, 0.1273193359375, 1.291015625, 0.00972747802734375, 0.10992431640625, 0.00015115737915039062, 0.083251953125, 0.07977294921875, 0.365234375, 0.0015172958374023438, 0.17822265625, 0.0236053466796875, 0.037811279296875, 0.00036597251892089844, 0.2132568359375, 0.51220703125, 0.00131988525390625, 0.041168212890625], "tokens": [616, 1135, 6512, 32, 5203, 81, 3307, 44, 324, 1202, 280, 281, 45, 324, 786, 280, 281, 32, 25657, 2931, 473, 324, 1626, 45, 616, 1135, 6512, 32, 2788, 81, 5975, 44, 324, 1202, 280, 281, 45, 324, 786, 280, 281, 32, 20197, 2931, 473, 324, 1626, 45, 616, 1244, 44, 324]}
{"line_number": 1449, "line_type": "original", "code": "    Node current = left.getFirstChild();", "entropy": 2.25390625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.73828125, 4.578125, 5.8515625, 0.1336669921875, 1.4345703125, 0.1224365234375, 0.362548828125, 0.0002524852752685547, 0.0577392578125], "tokens": [264, 4004, 1550, 280, 2841, 32, 25657, 2931, 473]}
{"line_number": 1449, "line_type": "generated", "code": "\n              return n;\n            }\n            key = c;\n            value = c.getFirstChild();\n            break;\n          case Token.NUMBER_KEY:\n            if (value!= null && mayHaveSideEffects(value)) {", "entropy": 0.150146484375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.06390380859375, 1.353515625, 0.050750732421875, 0.0007758140563964844, 0.056854248046875, 0.0031642913818359375, 0.204345703125, 0.29345703125, 0.0006103515625, 0.0195159912109375, 0.040618896484375, 0.0130767822265625, 0.1136474609375, 0.0002682209014892578, 0.09698486328125, 0.00461578369140625, 0.458251953125, 0.0013265609741210938, 0.14892578125, 0.0595703125, 0.1964111328125, 0.00016999244689941406, 0.11187744140625, 0.484619140625, 0.0014333724975585938, 1.811981201171875e-05, 1.392578125, 0.0135955810546875, 0.01038360595703125, 0.0003554821014404297, 0.252685546875, 0.5478515625, 0.2137451171875, 0.409423828125, 0.0196533203125, 0.0002944469451904297, 0.057403564453125, 0.0517578125, 3.790855407714844e-05, 3.540515899658203e-05, 2.753734588623047e-05, 0.000202178955078125, 0.0014972686767578125, 0.005397796630859375, 0.0006361007690429688], "tokens": [1090, 442, 310, 45, 324, 320, 324, 1202, 280, 281, 45, 324, 786, 280, 281, 32, 25657, 2931, 473, 324, 1626, 45, 616, 1135, 6512, 32, 10463, 81, 3307, 44, 324, 415, 308, 853, 863, 744, 962, 1631, 9037, 7427, 20126, 26, 853, 490, 301]}
{"line_number": 1450, "line_type": "original", "code": "    Node elem = null;", "entropy": 3.904296875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.3828125, 6.36328125, 6.453125, 0.097412109375, 4.09765625, 0.028350830078125], "tokens": [264, 4004, 10313, 280, 744, 45]}
{"line_number": 1450, "line_type": "generated", "code": "\n              return n;\n            }\n            key = c;\n            value = c.getFirstChild();\n            break;\n          case Token.STRING_KEY:\n            key = c;\n            value = c.getFirstChild();\n            break;\n          default:\n            throw new", "entropy": 0.20849609375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.1536865234375, 0.69091796875, 0.04559326171875, 0.0013599395751953125, 0.051971435546875, 0.0005955696105957031, 0.1829833984375, 0.42724609375, 0.00058746337890625, 0.01328277587890625, 0.034942626953125, 0.012847900390625, 0.09686279296875, 0.0004165172576904297, 0.07293701171875, 0.004032135009765625, 0.306396484375, 0.0018358230590820312, 0.133056640625, 0.04998779296875, 0.2109375, 0.0003285408020019531, 0.1251220703125, 0.52783203125, 0.0015106201171875, 3.314018249511719e-05, 2.34765625, 0.04730224609375, 0.1478271484375, 0.88232421875, 0.1904296875, 1.541015625, 0.001285552978515625, 0.00818634033203125, 0.00374603271484375, 0.01406097412109375, 0.06524658203125, 0.00020325183868408203, 0.0164794921875, 0.0031585693359375, 0.03717041015625, 0.00017154216766357422, 0.005725860595703125, 0.125244140625, 0.05328369140625, 0.0004756450653076172, 0.2880859375, 0.63818359375, 0.0009093284606933594, 0.030670166015625, 1.2431640625, 0.006175994873046875], "tokens": [1090, 442, 310, 45, 324, 320, 324, 1202, 280, 281, 45, 324, 786, 280, 281, 32, 25657, 2931, 473, 324, 1626, 45, 616, 1135, 6512, 32, 5203, 81, 3307, 44, 324, 1202, 280, 281, 45, 324, 786, 280, 281, 32, 25657, 2931, 473, 324, 1626, 45, 616, 1244, 44, 324, 1422, 537]}
{"line_number": 1451, "line_type": "original", "code": "    for (int i = 0; current != null && i < intIndex; i++) {", "entropy": 1.5771484375, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [8.0234375, 7.08203125, 0.14111328125, 3.62109375, 0.12432861328125, 0.0738525390625, 0.07733154296875, 0.10992431640625, 0.1195068359375, 6.87890625, 0.1229248046875, 0.01068878173828125, 2.619140625, 0.199951171875, 0.247314453125, 3.19140625, 0.0133209228515625, 0.060333251953125, 0.2802734375, 0.024017333984375, 0.100830078125], "tokens": [264, 436, 308, 410, 595, 280, 225, 34, 45, 1550, 863, 744, 962, 595, 333, 629, 1284, 45, 595, 1987, 301]}
{"line_number": 1451, "line_type": "generated", "code": "\n            }\n            key = c;\n            value = c.getFirstChild();\n            break;\n          default:\n            throw new IllegalStateException(\"Unexpected node type: \" + c.getType());\n        }\n      }\n    }\n\n    if (key == null) {\n      //", "entropy": 0.206298828125, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.40576171875, 0.1676025390625, 0.49951171875, 0.29833984375, 0.0005106925964355469, 0.018798828125, 0.04107666015625, 0.02587890625, 0.04901123046875, 0.00022852420806884766, 0.1187744140625, 0.004947662353515625, 0.3349609375, 0.002132415771484375, 0.1693115234375, 0.204345703125, 0.271484375, 0.003391265869140625, 0.351806640625, 0.7646484375, 0.000782012939453125, 0.0275726318359375, 0.7236328125, 0.00687408447265625, 0.06781005859375, 0.61572265625, 0.595703125, 0.70849609375, 0.517578125, 0.365966796875, 0.007015228271484375, 0.061767578125, 0.0557861328125, 0.22412109375, 0.0226898193359375, 0.020294189453125, 0.10498046875, 4.100799560546875e-05, 0.1339111328125, 0.0001838207244873047, 0.10821533203125, 0.0004076957702636719, 0.1512451171875, 0.140869140625, 0.0189208984375, 0.64501953125, 0.08441162109375, 0.0005879402160644531, 0.26904296875, 0.00104522705078125, 0.0090789794921875, 1.3076171875], "tokens": [324, 320, 324, 1202, 280, 281, 45, 324, 786, 280, 281, 32, 25657, 2931, 473, 324, 1626, 45, 616, 1244, 44, 324, 1422, 537, 21665, 440, 10203, 1541, 827, 44, 313, 474, 281, 32, 10272, 1035, 291, 320, 397, 320, 284, 320, 446, 415, 308, 678, 610, 744, 27, 301, 397, 434]}
{"line_number": 1457, "line_type": "original", "code": "    if (elem == null) {", "entropy": 2.306640625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [5.86328125, 4.921875, 0.2410888671875, 4.48828125, 2.80859375, 0.01433563232421875, 0.1044921875, 0.01490020751953125], "tokens": [264, 415, 308, 7613, 610, 744, 27, 301]}
{"line_number": 1457, "line_type": "generated", "code": "\n        }\n      }\n    }\n\n    if (value == null) {\n      value = NodeUtil.newUndefinedNode(n);\n    } else {\n      left.removeChild(key);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.", "entropy": 0.13916015625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.2861328125, 0.01088714599609375, 0.1148681640625, 0.00052642822265625, 0.1346435546875, 0.0006418228149414062, 0.341796875, 0.1900634765625, 0.0224151611328125, 0.67626953125, 0.1707763671875, 0.0006403923034667969, 0.0875244140625, 0.0013818740844726562, 0.02587890625, 1.0390625, 0.0002448558807373047, 0.30517578125, 0.0012273788452148438, 1.4781951904296875e-05, 0.0010995864868164062, 0.013275146484375, 0.00827789306640625, 0.01088714599609375, 0.63916015625, 0.020111083984375, 0.35693359375, 0.00016629695892333984, 0.1241455078125, 0.0948486328125, 0.0089263916015625, 0.7275390625, 0.000392913818359375, 0.0296173095703125, 0.00010883808135986328, 0.336181640625, 0.00528717041015625, 0.076171875, 2.7894973754882812e-05, 0.08935546875, 0.273193359375, 0.117431640625, 0.008819580078125, 0.037017822265625, 0.011444091796875, 0.75537109375, 0.0176849365234375, 0.0013561248779296875, 0.0025196075439453125, 0.0147705078125, 0.043701171875, 0.0001856088638305664], "tokens": [291, 320, 397, 320, 284, 320, 446, 415, 308, 853, 610, 744, 27, 301, 397, 786, 280, 4004, 1733, 32, 890, 14339, 1212, 26, 96, 293, 284, 320, 813, 301, 397, 2841, 32, 28878, 26, 678, 293, 284, 320, 446, 434, 16695, 322, 9449, 6272, 32313, 623, 322, 786, 284, 310, 32]}
{"line_number": 1458, "line_type": "original", "code": "      error(INDEX_OUT_OF_BOUNDS_ERROR, right);", "entropy": 1.4697265625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [5.32421875, 6.69140625, 0.047027587890625, 10.078125, 0.2529296875, 0.86083984375, 0.0005779266357421875, 0.0002340078353881836, 2.4199485778808594e-05, 0.000812530517578125, 2.86102294921875e-06, 0.0011377334594726562, 0.0017461776733398438, 0.0134429931640625, 0.2359619140625, 0.0095977783203125], "tokens": [647, 1048, 26, 9193, 81, 4241, 81, 2109, 81, 31569, 4135, 81, 2930, 30, 2091, 293]}
{"line_number": 1458, "line_type": "generated", "code": "\n    }\n\n    if (key == null) {", "entropy": 0.1986083984375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.75244140625, 0.042694091796875, 0.1478271484375, 0.151611328125, 0.0166473388671875, 0.541015625, 0.10296630859375, 0.0010042190551757812, 0.2271728515625, 0.0027103424072265625], "tokens": [284, 320, 446, 415, 308, 678, 610, 744, 27, 301]}
{"line_number": 1459, "line_type": "original", "code": "      return n;", "entropy": 1.5712890625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [3.529296875, 2.748046875, 0.0054168701171875, 0.0010843276977539062], "tokens": [647, 442, 310, 45]}
{"line_number": 1459, "line_type": "generated", "code": "\n      }\n    }\n\n    if (key == null) {\n      return n;\n    }\n\n    if (value == null) {\n      value = NodeUtil.newUndefinedNode(key);\n    } else {\n      left.removeChild(key);\n    }\n\n   ", "entropy": 0.1622314453125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.24853515625, 0.0091094970703125, 0.06048583984375, 0.0004749298095703125, 0.1910400390625, 0.1396484375, 0.0169219970703125, 0.58544921875, 0.11981201171875, 0.0007419586181640625, 0.204345703125, 0.00235748291015625, 0.0654296875, 1.4755859375, 0.06884765625, 0.0004169940948486328, 0.018157958984375, 8.14199447631836e-05, 0.1090087890625, 1.1669921875, 0.074951171875, 0.318603515625, 0.360107421875, 0.000759124755859375, 0.038421630859375, 0.00048542022705078125, 0.0165863037109375, 0.34912109375, 0.000324249267578125, 0.2081298828125, 0.0013103485107421875, 1.3947486877441406e-05, 0.0008554458618164062, 0.012451171875, 0.00266265869140625, 0.0034122467041015625, 0.5830078125, 0.01666259765625, 0.2384033203125, 5.173683166503906e-05, 0.192138671875, 0.03851318359375, 0.0079803466796875, 0.56494140625, 0.00024139881134033203, 0.007843017578125, 6.747245788574219e-05, 0.79248046875, 0.005786895751953125, 0.0270538330078125, 2.1338462829589844e-05, 0.09332275390625], "tokens": [397, 320, 284, 320, 446, 415, 308, 678, 610, 744, 27, 301, 397, 442, 310, 45, 284, 320, 446, 415, 308, 853, 610, 744, 27, 301, 397, 786, 280, 4004, 1733, 32, 890, 14339, 1212, 26, 678, 293, 284, 320, 813, 301, 397, 2841, 32, 28878, 26, 678, 293, 284, 320, 446]}
{"line_number": 1364, "line_type": "original", "code": "      return tryFoldArrayAccess(n, left, right);", "entropy": 2.115234375, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [3.57421875, 0.1627197265625, 10.390625, 0.216064453125, 3.974609375, 3.759765625, 0.145751953125, 0.4453125, 0.89208984375, 3.74609375, 0.0814208984375, 0.02471923828125, 0.09112548828125], "tokens": [647, 442, 1596, 15483, 1261, 2791, 26, 96, 30, 2841, 30, 2091, 293]}
{"line_number": 1364, "line_type": "generated", "code": "\n    }\n\n    return false;\n  }\n\n  /**\n   * Try to fold an object literal access.\n   * e.g. {foo: 1}.foo ==> 1, {foo: 1}[\"foo\"] ==> 1, {foo", "entropy": 0.53759765625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.79296875, 0.0293121337890625, 1.6669921875, 0.215576171875, 0.0272064208984375, 0.0009508132934570312, 0.01593017578125, 0.0006880760192871094, 0.16259765625, 0.56787109375, 0.0499267578125, 0.0003476142883300781, 0.485107421875, 0.009552001953125, 0.14208984375, 2.466796875, 0.658203125, 1.017578125, 2.16015625, 0.716796875, 0.64208984375, 0.2418212890625, 1.0224609375, 0.0014057159423828125, 0.0004150867462158203, 0.55517578125, 1.28125, 1.87109375, 0.060089111328125, 0.70654296875, 0.53857421875, 1.8291015625, 0.019866943359375, 0.75390625, 0.0076446533203125, 0.0010833740234375, 1.099609375, 0.2498779296875, 0.671875, 0.0390625, 0.69873046875, 0.135009765625, 1.275390625, 0.720703125, 0.0440673828125, 0.05853271484375, 0.01070404052734375, 0.01009368896484375, 0.0013589859008789062, 1.4150390625, 0.250244140625, 0.548828125], "tokens": [284, 320, 446, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 8959, 372, 11426, 600, 1300, 10652, 2857, 32, 664, 319, 484, 32, 89, 32, 301, 3986, 44, 225, 35, 4009, 3986, 23044, 225, 35, 30, 301, 3986, 44, 225, 35, 111, 1365, 3986, 1446, 23044, 225, 35, 30, 301, 3986]}
{"line_number": 1423, "line_type": "original", "code": "    Node parent = n.getParent();", "entropy": 1.8994140625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [5.2734375, 2.970703125, 6.30859375, 0.311767578125, 0.3046875, 0.01248931884765625, 0.00852203369140625, 0.002498626708984375], "tokens": [264, 4004, 2935, 280, 310, 32, 18789, 473]}
{"line_number": 1423, "line_type": "generated", "code": "\n  private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.isGetProp());\n\n    // If GETPROP/GETELEM is used as assignment target the object literal is\n    // acting", "entropy": 0.153076171875, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.9599609375, 0.1553955078125, 0.03924560546875, 0.006603240966796875, 0.00507354736328125, 0.1412353515625, 0.04058837890625, 0.002468109130859375, 0.0015201568603515625, 0.012481689453125, 0.0043792724609375, 5.91278076171875e-05, 0.0026340484619140625, 0.057891845703125, 0.0010499954223632812, 0.0030193328857421875, 0.004261016845703125, 0.0010347366333007812, 0.004138946533203125, 0.35888671875, 1.828125, 0.0003261566162109375, 0.0011701583862304688, 0.1971435546875, 0.0014295578002929688, 1.005859375, 0.000713348388671875, 0.01885986328125, 0.0034122467041015625, 0.0004267692565917969, 0.1339111328125, 0.5361328125, 1.2509765625, 0.5986328125, 0.1627197265625, 0.01555633544921875, 0.2318115234375, 0.00047087669372558594, 0.0009822845458984375, 0.004848480224609375, 0.0009369850158691406, 0.00113677978515625, 0.0038852691650390625, 0.0006952285766601562, 0.033905029296875, 0.08160400390625, 0.01238250732421875, 0.0196380615234375, 0.0035457611083984375, 0.00036144256591796875, 0.0015058517456054688, 6.783008575439453e-05], "tokens": [334, 945, 4004, 1596, 15483, 959, 6567, 2791, 26, 1212, 310, 30, 4004, 2841, 30, 4004, 2091, 27, 301, 284, 40596, 32, 1553, 3484, 26, 96, 32, 297, 936, 6567, 1035, 446, 434, 1670, 6272, 15262, 33, 2788, 32313, 438, 1654, 619, 13807, 1760, 322, 1300, 10652, 438, 284, 434, 1712, 299]}
{"line_number": 1427, "line_type": "original", "code": "    if (isAssignmentTarget(n)) {", "entropy": 1.1103515625, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [5.171875, 2.1796875, 0.5830078125, 2.21875, 0.2086181640625, 0.0008559226989746094, 0.005435943603515625, 0.58935546875, 0.1318359375, 0.0141143798828125], "tokens": [264, 415, 308, 297, 12589, 2922, 26, 96, 490, 301]}
{"line_number": 1427, "line_type": "generated", "code": "\n      return n;\n    }\n\n    String rightString = right.getString();\n    if (rightString.startsWith(\"__\")) {\n      // We can't fold these because they are used for the JSCompiler to track\n      // information about the object.\n      return n", "entropy": 0.892578125, "is_bug_line": false, "sus_score": 0.7071067811865475, "per_token_entropy": [0.7294921875, 0.080810546875, 0.018890380859375, 0.0006914138793945312, 0.03558349609375, 0.0105438232421875, 0.08984375, 1.58203125, 1.7939453125, 0.919921875, 0.0148162841796875, 0.05120849609375, 0.0011157989501953125, 0.0204925537109375, 0.0023784637451171875, 0.467529296875, 0.93994140625, 0.74560546875, 0.86669921875, 0.1307373046875, 0.5859375, 1.634765625, 1.87109375, 0.8203125, 0.00128936767578125, 0.05029296875, 0.45654296875, 2.541015625, 1.283203125, 0.145263671875, 0.8994140625, 2.564453125, 1.9404296875, 0.71630859375, 1.578125, 2.751953125, 1.6171875, 2.580078125, 2.126953125, 0.1923828125, 2.44140625, 2.400390625, 0.0228424072265625, 0.0029659271240234375, 1.865234375, 0.73828125, 0.6875, 2.3359375, 0.84521484375, 0.14306640625, 0.04144287109375, 0.016357421875], "tokens": [397, 442, 310, 45, 284, 320, 446, 892, 2091, 652, 280, 2091, 32, 7069, 473, 284, 415, 308, 990, 652, 32, 13912, 27176, 2131, 301, 397, 434, 2688, 883, 1330, 11426, 3282, 3301, 2953, 884, 1654, 436, 322, 7750, 8115, 372, 4562, 397, 434, 2471, 2625, 322, 1300, 32, 397, 442, 310]}
{"line_number": 1419, "line_type": "original", "code": "    return false;", "entropy": 3.9609375, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [4.390625, 1.5986328125, 9.828125, 0.023590087890625], "tokens": [264, 442, 901, 45]}
{"line_number": 1419, "line_type": "generated", "code": "\n    return elem;\n  }\n\n  private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the object literal is\n    //", "entropy": 0.11846923828125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.444091796875, 1.15625, 0.27734375, 0.0419921875, 0.039031982421875, 0.00038695335388183594, 0.1568603515625, 0.53759765625, 0.057403564453125, 0.01323699951171875, 0.00579833984375, 0.240966796875, 0.0576171875, 0.005870819091796875, 0.00144195556640625, 0.01316070556640625, 0.0163421630859375, 6.628036499023438e-05, 0.003231048583984375, 0.162109375, 0.0008568763732910156, 0.0032215118408203125, 0.006649017333984375, 0.00136566162109375, 0.0008525848388671875, 0.040771484375, 1.3349609375, 0.42724609375, 0.004131317138671875, 0.007282257080078125, 4.935264587402344e-05, 0.0010013580322265625, 0.00052642822265625, 0.19482421875, 0.458251953125, 0.07867431640625, 0.047515869140625, 0.0032405853271484375, 0.1427001953125, 0.000244140625, 0.0009341239929199219, 0.004230499267578125, 0.0010633468627929688, 0.0016269683837890625, 0.004638671875, 0.000640869140625, 0.025634765625, 0.1055908203125, 0.008636474609375, 0.0172882080078125, 0.0033855438232421875, 0.0006270408630371094], "tokens": [284, 442, 10313, 45, 334, 320, 719, 945, 4004, 1596, 15483, 959, 6567, 2791, 26, 1212, 310, 30, 4004, 2841, 30, 4004, 2091, 27, 301, 284, 4004, 2935, 280, 310, 32, 18789, 473, 284, 434, 1670, 6272, 15262, 33, 2788, 32313, 438, 1654, 619, 13807, 1760, 322, 1300, 10652, 438, 284, 434]}
{"line_number": 1410, "line_type": "original", "code": "    Node parent = n.getParent();", "entropy": 2.021484375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [4.25390625, 6.1171875, 5.359375, 0.33447265625, 0.092529296875, 0.00305938720703125, 0.003467559814453125, 0.002124786376953125], "tokens": [264, 4004, 2935, 280, 310, 32, 18789, 473]}
{"line_number": 1410, "line_type": "generated", "code": "\n    }\n\n    if (current!= null) {\n      Node value = current.removeFirstChild();\n      parent.replaceChild(n, value);\n      reportCodeChange();\n      return value;\n    } else {\n      // The array is shorter than the index", "entropy": 0.41455078125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.09710693359375, 0.0125579833984375, 0.392822265625, 0.939453125, 0.1268310546875, 0.65771484375, 1.3193359375, 0.002544403076171875, 0.1929931640625, 0.0019407272338867188, 0.143798828125, 1.849609375, 2.16796875, 0.094482421875, 0.1787109375, 0.1082763671875, 0.2276611328125, 0.173828125, 0.00017964839935302734, 0.00580596923828125, 0.26611328125, 0.97216796875, 0.00039577484130859375, 0.02947998046875, 0.00010657310485839844, 0.000377655029296875, 0.057403564453125, 0.0005269050598144531, 0.031494140625, 0.06048583984375, 0.1929931640625, 0.236328125, 0.0006422996520996094, 7.009506225585938e-05, 0.004749298095703125, 0.97216796875, 0.1302490234375, 0.0252532958984375, 0.00728607177734375, 0.09454345703125, 0.0003635883331298828, 0.919921875, 0.1591796875, 0.03289794921875, 1.3974609375, 2.646484375, 1.51171875, 1.271484375, 1.3369140625, 0.07867431640625, 0.1883544921875, 0.2431640625], "tokens": [284, 320, 446, 415, 308, 1700, 863, 744, 27, 301, 397, 4004, 786, 280, 1550, 32, 2546, 3472, 2931, 473, 397, 2935, 32, 3227, 2931, 26, 96, 30, 786, 293, 397, 3639, 1227, 1791, 473, 397, 442, 786, 45, 284, 320, 813, 301, 397, 434, 886, 1417, 438, 35759, 2784, 322, 1650]}
{"line_number": 1411, "line_type": "original", "code": "    if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)", "entropy": 1.0927734375, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [4.9140625, 0.50537109375, 4.19921875, 5.5390625, 0.005695343017578125, 0.0006899833679199219, 0.322509765625, 3.421875, 0.06182861328125, 0.01328277587890625, 0.2164306640625, 0.1307373046875, 0.7763671875, 1.822265625, 0.035247802734375, 0.41015625, 0.00026988983154296875, 0.1575927734375, 0.04302978515625, 0.1549072265625, 0.2156982421875], "tokens": [264, 415, 1833, 1212, 1733, 32, 297, 12589, 3397, 26, 2544, 27, 962, 2935, 32, 25657, 2931, 346, 610, 310, 27]}
{"line_number": 1411, "line_type": "generated", "code": "\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // We have a valid element.\n    Node result = current.detach();\n    parent.replaceChild(", "entropy": 0.5078125, "is_bug_line": false, "sus_score": 0.4082482904638631, "per_token_entropy": [0.75439453125, 0.68603515625, 0.142333984375, 0.68994140625, 0.360107421875, 0.0039825439453125, 0.2027587890625, 0.00402069091796875, 0.12200927734375, 1.4384765625, 0.00201416015625, 0.13623046875, 0.0001024007797241211, 0.004459381103515625, 3.743171691894531e-05, 0.00024056434631347656, 3.838539123535156e-05, 2.002716064453125e-05, 2.1457672119140625e-06, 0.0003006458282470703, 0.00039505958557128906, 0.0010347366333007812, 0.0035495758056640625, 0.0010929107666015625, 0.037841796875, 0.00492095947265625, 0.006343841552734375, 0.0004725456237792969, 0.01421356201171875, 0.000453948974609375, 0.81494140625, 2.1875, 2.7421875, 2.52734375, 1.5, 1.2880859375, 1.9794921875, 1.35546875, 1.2744140625, 1.37890625, 1.365234375, 0.14892578125, 0.65576171875, 0.327392578125, 0.3115234375, 0.437744140625, 0.3232421875, 1.1494140625, 0.0003037452697753906, 0.01514434814453125, 9.40561294555664e-05, 0.00017333030700683594], "tokens": [284, 415, 308, 1700, 610, 744, 27, 301, 397, 1048, 26, 9193, 81, 4241, 81, 2109, 81, 31569, 4135, 81, 2930, 30, 2091, 293, 397, 442, 310, 45, 284, 320, 446, 434, 2688, 1159, 312, 2080, 1994, 32, 284, 4004, 1056, 280, 1550, 32, 18723, 473, 284, 2935, 32, 3227, 2931, 26]}
{"line_number": 1363, "line_type": "original", "code": "    if (left.isArrayLit()) {", "entropy": 2.724609375, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [4.125, 8.5859375, 0.09564208984375, 7.15234375, 0.207763671875, 3.6796875, 0.109375, 0.5380859375, 0.02008056640625], "tokens": [264, 415, 308, 1873, 32, 15436, 27472, 1157, 301]}
{"line_number": 1363, "line_type": "generated", "code": "\n        || parent.isDec()) {\n      return true;\n    }\n\n    // TODO(johnlenz): handle destructuring assignment.\n    return false;\n  }\n\n  private Node tryFoldArrayAccess(Node n, Node array, Node index) {\n   ", "entropy": 0.411865234375, "is_bug_line": false, "sus_score": 0.2886751345948129, "per_token_entropy": [0.4169921875, 0.1893310546875, 0.276123046875, 0.0013246536254882812, 0.058563232421875, 0.783203125, 0.8837890625, 0.0364990234375, 0.06634521484375, 0.1358642578125, 0.0193023681640625, 0.00012087821960449219, 0.0117950439453125, 9.334087371826172e-05, 0.55859375, 1.767578125, 2.337890625, 0.0220947265625, 0.291748046875, 0.005096435546875, 0.0007905960083007812, 0.09075927734375, 1.8046875, 3.201171875, 0.01267242431640625, 1.482421875, 1.14453125, 0.25244140625, 0.38134765625, 0.0237884521484375, 0.001041412353515625, 0.037506103515625, 0.00046062469482421875, 0.18310546875, 1.1533203125, 0.52001953125, 0.12261962890625, 0.0335693359375, 1.16015625, 0.04400634765625, 0.005523681640625, 0.0223388671875, 0.13916015625, 0.0002970695495605469, 0.0026607513427734375, 1.2705078125, 0.290283203125, 0.0012521743774414062, 0.0872802734375, 0.034942626953125, 0.0011577606201171875, 0.053802490234375], "tokens": [291, 1276, 2935, 32, 297, 13774, 1157, 301, 397, 442, 861, 45, 284, 320, 446, 434, 4296, 26, 25172, 1657, 108, 711, 2887, 42670, 4093, 13807, 32, 284, 442, 901, 45, 334, 320, 719, 945, 4004, 1596, 15483, 1261, 2791, 26, 1212, 310, 30, 4004, 1417, 30, 4004, 1650, 27, 301, 284]}
{"line_number": 118, "line_type": "original", "code": "        return tryFoldGetElem(subtree, left, right);", "entropy": 1.5498046875, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [7.640625, 1.025390625, 0.10626220703125, 0.03369140625, 9.0859375, 2.904296875, 0.70263671875, 0.059783935546875, 4.00543212890625e-05, 0.037872314453125, 0.05731201171875, 0.00914764404296875, 0.005664825439453125, 0.035247802734375], "tokens": [351, 442, 1596, 15483, 936, 10797, 26, 1113, 3242, 30, 2841, 30, 2091, 293]}
{"line_number": 118, "line_type": "generated", "code": "\n\n      case Token.LE:\n      case Token.GE:\n        return tryFoldComparison(subtree, left, right);\n\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldStrictEquality(subtree, left, right", "entropy": 0.1270751953125, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.255859375, 0.0635986328125, 6.985664367675781e-05, 3.933906555175781e-06, 0.107421875, 0.0014142990112304688, 0.00547027587890625, 2.0265579223632812e-05, 5.125999450683594e-06, 1.4424324035644531e-05, 0.0005078315734863281, 3.6716461181640625e-05, 0.63720703125, 0.2232666015625, 0.01019287109375, 0.0240631103515625, 1.09765625, 0.81884765625, 0.0040283203125, 6.079673767089844e-06, 0.00795745849609375, 0.0140533447265625, 0.0005712509155273438, 0.0011835098266601562, 0.00968170166015625, 0.16064453125, 0.296875, 0.00058746337890625, 2.5391578674316406e-05, 0.767578125, 0.0006289482116699219, 0.0004773139953613281, 0.0662841796875, 0.00012218952178955078, 1.919269561767578e-05, 5.352497100830078e-05, 0.0276031494140625, 0.055511474609375, 5.161762237548828e-05, 0.160400390625, 0.0648193359375, 0.01511383056640625, 0.0083465576171875, 0.8935546875, 0.6669921875, 0.12030029296875, 0.00334930419921875, 5.364418029785156e-06, 0.006378173828125, 0.007526397705078125, 0.0011415481567382812, 0.00048828125], "tokens": [1687, 1135, 6512, 32, 815, 44, 397, 1135, 6512, 32, 3055, 44, 291, 442, 1596, 15483, 15021, 26, 1113, 3242, 30, 2841, 30, 2091, 293, 1687, 1135, 6512, 32, 27951, 67, 44, 397, 1135, 6512, 32, 2514, 3567, 44, 291, 442, 1596, 15483, 15891, 25142, 26, 1113, 3242, 30, 2841, 30, 2091]}
{"line_number": 1357, "line_type": "original", "code": "    Preconditions.checkArgument(n.isGetElem());", "entropy": 1.8662109375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [8.125, 7.81640625, 0.0015993118286132812, 0.004390716552734375, 0.642578125, 0.0084991455078125, 2.3203125, 0.012420654296875, 0.133056640625, 0.03668212890625, 3.244140625, 0.050506591796875], "tokens": [264, 40596, 32, 1553, 3484, 26, 96, 32, 297, 936, 10797, 1035]}
{"line_number": 1357, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Try to fold array-length. e.g [1, 2, 3].length ==> 3, [x, y].length ==> 2\n   */\n  private Node tryFoldGetElemOrGetProp(", "entropy": 0.157958984375, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.1522216796875, 0.006908416748046875, 0.09808349609375, 0.31298828125, 0.038543701171875, 0.000308990478515625, 0.32421875, 0.01177215576171875, 0.0826416015625, 1.7578125, 0.3173828125, 0.9765625, 0.039215087890625, 0.022064208984375, 0.00019180774688720703, 8.618831634521484e-05, 0.123046875, 0.0143890380859375, 0.004451751708984375, 0.0033550262451171875, 0.0002570152282714844, 0.003719329833984375, 0.00150299072265625, 0.0003490447998046875, 0.190185546875, 0.031585693359375, 0.1292724609375, 0.0015439987182617188, 0.002536773681640625, 0.0660400390625, 0.01151275634765625, 0.0016908645629882812, 0.0002758502960205078, 0.0008058547973632812, 0.001438140869140625, 0.00047588348388671875, 0.0001881122589111328, 0.0006432533264160156, 0.00020420551300048828, 0.00859832763671875, 0.03753662109375, 0.0162200927734375, 0.0239410400390625, 0.00930023193359375, 0.00209808349609375, 0.0032291412353515625, 1.0166015625, 0.105224609375, 2.15234375, 0.07672119140625, 0.0009579658508300781, 0.0282440185546875], "tokens": [334, 320, 719, 1022, 664, 319, 8959, 372, 11426, 1417, 31, 1322, 32, 484, 32, 89, 428, 35, 30, 225, 36, 30, 225, 37, 997, 1322, 23044, 225, 37, 30, 428, 106, 30, 533, 997, 1322, 23044, 225, 36, 664, 569, 334, 945, 4004, 1596, 15483, 936, 10797, 1527, 936, 6567, 26]}
{"line_number": 1359, "line_type": "original", "code": "    if (left.isObjectLit()) {", "entropy": 1.03515625, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [5.87109375, 1.775390625, 0.142333984375, 0.70947265625, 0.01285552978515625, 0.6845703125, 0.0011692047119140625, 0.1116943359375, 0.00518798828125], "tokens": [264, 415, 308, 1873, 32, 37704, 27472, 1157, 301]}
{"line_number": 1359, "line_type": "generated", "code": "\n  /**\n   * Try to fold an object-literal property access. e.g {a: 1, b: 2}.a ==> 1\n   */\n  private Node tryFoldObjectPropAccess(Node n, Node left, Node right)", "entropy": 0.303955078125, "is_bug_line": false, "sus_score": 0.2773500981126146, "per_token_entropy": [0.72705078125, 0.89697265625, 0.051544189453125, 0.0004987716674804688, 0.271484375, 0.00952911376953125, 0.09368896484375, 2.4453125, 0.84814453125, 0.71728515625, 0.69580078125, 1.216796875, 0.2447509765625, 0.40673828125, 1.1396484375, 0.00042557716369628906, 0.00019073486328125, 1.94140625, 0.673828125, 0.03802490234375, 0.435546875, 0.325439453125, 0.61376953125, 0.03558349609375, 0.00502777099609375, 0.122802734375, 0.02099609375, 0.374755859375, 0.2159423828125, 0.282470703125, 0.00919342041015625, 0.0036449432373046875, 0.401611328125, 0.11297607421875, 0.027069091796875, 0.031768798828125, 0.003997802734375, 0.00048732757568359375, 0.00048661231994628906, 0.005889892578125, 0.0105743408203125, 0.0005483627319335938, 0.0005965232849121094, 0.0263824462890625, 0.037261962890625, 8.797645568847656e-05, 0.003780364990234375, 0.263916015625, 0.003963470458984375, 0.0025463104248046875, 0.007549285888671875, 0.00039696693420410156], "tokens": [334, 1022, 664, 319, 8959, 372, 11426, 600, 1300, 31, 7538, 2804, 2857, 32, 484, 32, 89, 301, 83, 44, 225, 35, 30, 323, 44, 225, 36, 4009, 83, 23044, 225, 35, 664, 569, 334, 945, 4004, 1596, 15483, 959, 6567, 2791, 26, 1212, 310, 30, 4004, 2841, 30, 4004, 2091, 27]}
