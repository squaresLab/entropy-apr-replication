{"line_number": 1018, "line_type": "original", "code": "              appendHexJavaScriptRepresentation(sb, c);", "entropy": 2.271484375, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [10.0390625, 11.140625, 1.361328125, 0.003879547119140625, 0.01983642578125, 0.049560546875, 0.048797607421875, 0.005580902099609375, 0.0360107421875, 0.01178741455078125], "tokens": [2850, 5489, 10226, 14575, 16541, 26, 5682, 30, 281, 293]}
{"line_number": 1018, "line_type": "generated", "code": "\n    return n.getFirstChild();\n  }\n\n  /**\n   * Gets the last non-empty child of the given node.\n   *\n   * @param n The node to get the last non-empty child of.\n   * @return The last non-", "entropy": 0.28662109375, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [0.56005859375, 0.90966796875, 0.578125, 0.1846923828125, 0.02398681640625, 0.0002465248107910156, 0.024749755859375, 0.03192138671875, 0.0007686614990234375, 0.1832275390625, 0.327880859375, 1.0947265625, 0.000446319580078125, 1.6494140625, 0.15869140625, 1.037109375, 0.092041015625, 0.009033203125, 0.01166534423828125, 0.0270538330078125, 0.0219268798828125, 0.040679931640625, 0.0053558349609375, 0.01023101806640625, 0.179443359375, 0.2427978515625, 0.85302734375, 1.0068359375, 0.017822265625, 1.154296875, 0.56005859375, 0.193359375, 0.491455078125, 0.2073974609375, 0.74072265625, 0.80810546875, 0.10211181640625, 0.067626953125, 0.263916015625, 0.0640869140625, 0.006084442138671875, 0.017913818359375, 0.4541015625, 0.0655517578125, 0.01397705078125, 0.0789794921875, 0.028350830078125, 0.07598876953125, 0.0843505859375, 0.036712646484375, 0.0870361328125, 0.0217437744140625], "tokens": [284, 442, 310, 32, 25657, 2931, 473, 334, 320, 719, 1022, 664, 319, 7124, 322, 2401, 2979, 31, 2951, 2838, 432, 322, 2702, 1541, 32, 664, 319, 664, 319, 477, 753, 310, 886, 1541, 372, 622, 322, 2401, 2979, 31, 2951, 2838, 432, 32, 664, 319, 477, 601, 886, 2401, 2979, 31]}
{"line_number": 1127, "line_type": "original", "code": "      appendHexJavaScriptRepresentation(c, sb);", "entropy": 1.451171875, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [7.078125, 4.703125, 0.35400390625, 0.0006237030029296875, 0.01465606689453125, 0.0714111328125, 1.6953125, 0.1185302734375, 0.458251953125, 0.0215606689453125], "tokens": [647, 5489, 10226, 14575, 16541, 26, 85, 30, 6115, 293]}
{"line_number": 1127, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [], "tokens": []}
{"line_number": 1131, "line_type": "original", "code": "    }", "entropy": 4.5390625, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [6.3671875, 2.7109375], "tokens": [264, 320]}
{"line_number": 1131, "line_type": "generated", "code": "\n  /**\n   * Returns a javascript representation of the string in a hex escaped\n   * format.\n   *\n   * @param s The string to append.\n   * @param out The buffer to which the hex representation should be appended.\n   */\n  private static", "entropy": 0.16552734375, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [1.205078125, 0.4990234375, 0.1640625, 0.0006647109985351562, 1.4228515625, 0.25244140625, 0.277099609375, 0.052734375, 0.003131866455078125, 0.052581787109375, 1.2109375, 0.43603515625, 0.07159423828125, 0.222900390625, 0.00579071044921875, 0.50244140625, 0.00011467933654785156, 0.00586700439453125, 0.027099609375, 0.07305908203125, 0.07550048828125, 0.026947021484375, 0.0012989044189453125, 0.0447998046875, 0.0056915283203125, 1.1259765625, 0.054046630859375, 0.062744140625, 0.0726318359375, 0.339111328125, 0.032440185546875, 0.007747650146484375, 0.0215301513671875, 0.0032634735107421875, 0.0251617431640625, 0.045196533203125, 0.002635955810546875, 0.0023365020751953125, 0.0005068778991699219, 0.0009446144104003906, 0.0008740425109863281, 0.01092529296875, 0.0029659271240234375, 0.0024127960205078125, 0.00024235248565673828, 0.0011339187622070312, 0.000606536865234375, 0.0012378692626953125, 0.0284423828125, 0.00991058349609375, 0.06756591796875, 0.044677734375], "tokens": [334, 1022, 664, 319, 3759, 312, 18778, 10293, 432, 322, 802, 328, 312, 9960, 31253, 664, 319, 2179, 32, 664, 319, 664, 319, 477, 753, 309, 886, 802, 372, 5489, 32, 664, 319, 477, 753, 963, 886, 3112, 372, 1510, 322, 9960, 10293, 1395, 526, 22363, 32, 664, 569, 334, 945, 907]}
{"line_number": 1132, "line_type": "original", "code": "  }", "entropy": 2.673828125, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [4.046875, 1.30078125], "tokens": [225, 320]}
{"line_number": 1132, "line_type": "generated", "code": "\n\n  /**\n   * Returns a javascript representation of the string in a hex escaped\n   * format.\n   *\n   * @param s The string to append.\n   * @param out The buffer to which the hex representation should be appended.\n   */\n  private static", "entropy": 0.1387939453125, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [0.286865234375, 0.185546875, 0.1260986328125, 0.0004405975341796875, 1.3447265625, 0.323486328125, 0.360107421875, 0.06646728515625, 0.0038013458251953125, 0.06689453125, 1.0556640625, 0.363037109375, 0.080322265625, 0.1815185546875, 0.006252288818359375, 0.56640625, 8.928775787353516e-05, 0.005817413330078125, 0.02593994140625, 0.0838623046875, 0.07110595703125, 0.02825927734375, 0.0011835098266601562, 0.05548095703125, 0.006282806396484375, 1.0556640625, 0.051910400390625, 0.058319091796875, 0.077880859375, 0.36572265625, 0.032501220703125, 0.00878143310546875, 0.0202484130859375, 0.0030155181884765625, 0.0226287841796875, 0.04351806640625, 0.0026760101318359375, 0.002185821533203125, 0.0005431175231933594, 0.000980377197265625, 0.0009593963623046875, 0.0110626220703125, 0.002826690673828125, 0.002574920654296875, 0.00023925304412841797, 0.0011472702026367188, 0.0005826950073242188, 0.0009279251098632812, 0.0271453857421875, 0.00736236572265625, 0.07659912109375, 0.0401611328125], "tokens": [719, 1022, 664, 319, 3759, 312, 18778, 10293, 432, 322, 802, 328, 312, 9960, 31253, 664, 319, 2179, 32, 664, 319, 664, 319, 477, 753, 309, 886, 802, 372, 5489, 32, 664, 319, 477, 753, 963, 886, 3112, 372, 1510, 322, 9960, 10293, 1395, 526, 22363, 32, 664, 569, 334, 945, 907]}
{"line_number": 1144, "line_type": "original", "code": "    if (Character.isSupplementaryCodePoint(codePoint)) {", "entropy": 0.66015625, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [4.33984375, 2.43359375, 0.241455078125, 2.28515625, 0.0008854866027832031, 0.12420654296875, 0.6865234375, 2.2649765014648438e-06, 6.318092346191406e-06, 0.00012302398681640625, 0.0011758804321289062, 0.003421783447265625, 0.320068359375, 0.013397216796875, 0.0611572265625, 0.054931640625], "tokens": [264, 415, 308, 6881, 32, 297, 33777, 727, 672, 1227, 1943, 26, 687, 1943, 490, 301]}
{"line_number": 1144, "line_type": "generated", "code": "\n  private static void appendHexJavaScriptRepresentation(char c, Appendable out)\n      throws IOException {\n    out.append(\"\\\\u\")\n       .append(HEX_CHARS[(c >>> 12) & 0xf])\n       .append(HEX_", "entropy": 0.1385498046875, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [0.90283203125, 1.31640625, 0.1248779296875, 0.40576171875, 0.00955963134765625, 0.1353759765625, 0.0029163360595703125, 0.0024318695068359375, 0.00879669189453125, 1.076171875, 0.1275634765625, 0.002323150634765625, 0.2066650390625, 4.172325134277344e-06, 0.07904052734375, 0.0005803108215332031, 0.041412353515625, 0.000354766845703125, 8.702278137207031e-05, 0.0025997161865234375, 0.1329345703125, 1.6005859375, 0.0011272430419921875, 0.00022661685943603516, 0.0625, 0.56884765625, 0.11956787109375, 0.0408935546875, 0.0014047622680664062, 1.5497207641601562e-05, 0.00447845458984375, 0.01390838623046875, 3.039836883544922e-05, 0.0003619194030761719, 0.1290283203125, 0.0183868408203125, 0.03814697265625, 0.0003292560577392578, 0.0009832382202148438, 0.00010156631469726562, 0.0122528076171875, 0.0002942085266113281, 0.00027251243591308594, 3.063678741455078e-05, 0.00473785400390625, 0.0020503997802734375, 0.0017070770263671875, 0.0006732940673828125, 2.0265579223632812e-06, 0.00028061866760253906, 7.796287536621094e-05, 1.0848045349121094e-05], "tokens": [334, 945, 907, 763, 5489, 10226, 14575, 16541, 26, 1594, 281, 30, 20593, 444, 963, 27, 397, 2571, 6291, 301, 284, 963, 32, 1689, 22899, 103, 657, 291, 638, 1689, 26, 25902, 81, 45852, 9357, 85, 8217, 225, 35, 36, 27, 549, 225, 34, 2072, 1130, 291, 638, 1689, 26, 25902, 81]}
{"line_number": 1154, "line_type": "original", "code": "    out.append(\"\\\\u\")", "entropy": 1.4638671875, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [4.55859375, 3.37109375, 0.0176239013671875, 0.01727294921875, 1.2587890625, 0.2237548828125, 0.80029296875], "tokens": [264, 963, 32, 1689, 22899, 103, 657]}
{"line_number": 1154, "line_type": "generated", "code": "\n\n  /**\n   * @see #appendHexJavaScriptRepresentation(int, Appendable)\n   */\n  private static void appendHexJavaScriptRepresentation(\n      String s, Appendable out)\n      throws IOException {\n    for (int i = 0; i < s", "entropy": 0.178466796875, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [1.291015625, 0.2412109375, 0.1502685546875, 0.0005879402160644531, 1.6728515625, 0.10833740234375, 0.040313720703125, 0.166259765625, 1.13671875, 0.017486572265625, 0.2822265625, 0.06390380859375, 0.1580810546875, 0.03765869140625, 0.1258544921875, 3.2901763916015625e-05, 0.0122528076171875, 0.004276275634765625, 0.024017333984375, 0.00690460205078125, 0.043212890625, 0.053192138671875, 0.1536865234375, 0.0016527175903320312, 0.08868408203125, 0.005374908447265625, 0.02313232421875, 0.0187835693359375, 0.59033203125, 0.6826171875, 0.759765625, 0.0012693405151367188, 0.300048828125, 3.0994415283203125e-06, 0.06781005859375, 0.0017385482788085938, 0.1402587890625, 0.000232696533203125, 0.00019109249114990234, 0.0030975341796875, 0.0166473388671875, 0.252685546875, 0.002185821533203125, 0.06402587890625, 0.06256103515625, 0.004062652587890625, 0.002079010009765625, 5.829334259033203e-05, 0.355224609375, 0.0007529258728027344, 0.045806884765625, 0.0007367134094238281], "tokens": [719, 1022, 664, 319, 477, 2970, 588, 1689, 10226, 14575, 16541, 26, 410, 30, 20593, 444, 27, 664, 569, 334, 945, 907, 763, 5489, 10226, 14575, 16541, 26, 397, 892, 309, 30, 20593, 444, 963, 27, 397, 2571, 6291, 301, 284, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309]}
{"line_number": 1159, "line_type": "original", "code": "  }", "entropy": 3.09375, "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [4.65625, 1.5302734375], "tokens": [225, 320]}
{"line_number": 1159, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2581988897471611, "per_token_entropy": [], "tokens": []}
{"line_number": 205, "line_type": "original", "code": "        add(\"[\");", "entropy": 3.68359375, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [6.546875, 2.083984375, 5.94140625, 0.162109375], "tokens": [351, 1015, 9670, 724]}
{"line_number": 205, "line_type": "generated", "code": "\n      }\n\n      case Token.INC:\n      case Token.DEC:\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), true);\n        addExpr(first, Node", "entropy": 0.1046142578125, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [0.10675048828125, 0.29296875, 0.140869140625, 0.06634521484375, 0.00024509429931640625, 2.872943878173828e-05, 0.6435546875, 0.00769805908203125, 0.143798828125, 0.00027298927307128906, 6.16312026977539e-05, 1.2040138244628906e-05, 0.00206756591796875, 0.0009822845458984375, 1.05859375, 0.58837890625, 0.0001614093780517578, 0.00014066696166992188, 0.0005507469177246094, 0.007434844970703125, 0.060760498046875, 1.2278556823730469e-05, 0.0018377304077148438, 0.0011167526245117188, 0.10406494140625, 0.010589599609375, 0.1124267578125, 0.56591796875, 0.0003037452697753906, 0.0106353759765625, 0.09521484375, 0.042999267578125, 0.1444091796875, 3.5881996154785156e-05, 1.5616416931152344e-05, 0.005023956298828125, 0.00020885467529296875, 0.0003139972686767578, 0.036407470703125, 3.159046173095703e-05, 0.00039005279541015625, 0.00778961181640625, 0.045074462890625, 0.7216796875, 0.0065155029296875, 0.02667236328125, 0.128662109375, 0.1807861328125, 0.00666046142578125, 0.01983642578125, 0.0115966796875, 0.0338134765625], "tokens": [397, 320, 1687, 1135, 6512, 32, 16177, 44, 397, 1135, 6512, 32, 14221, 44, 291, 40596, 32, 1553, 1078, 26, 2661, 1534, 610, 225, 35, 293, 291, 10639, 32, 669, 3397, 26, 1212, 1733, 32, 520, 705, 2007, 2023, 4976, 26, 681, 471, 861, 293, 291, 1015, 6150, 26, 2232, 30, 4004]}
{"line_number": 206, "line_type": "original", "code": "        addArrayList(first);", "entropy": 4.17578125, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [8.2421875, 2.6953125, 12.1875, 0.1448974609375, 1.2509765625, 0.52490234375], "tokens": [351, 1015, 7110, 26, 2232, 293]}
{"line_number": 206, "line_type": "generated", "code": "\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil", "entropy": 0.13232421875, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [0.77783203125, 0.1685791015625, 0.000579833984375, 0.00022113323211669922, 1.5029296875, 0.01123046875, 0.1466064453125, 0.00036144256591796875, 4.279613494873047e-05, 9.894371032714844e-06, 0.002384185791015625, 0.0006771087646484375, 0.75634765625, 0.01300811767578125, 0.65869140625, 0.00020039081573486328, 0.00014209747314453125, 0.00040030479431152344, 0.005954742431640625, 0.049041748046875, 1.0728836059570312e-05, 0.0023784637451171875, 0.002361297607421875, 0.08636474609375, 0.0098419189453125, 0.24169921875, 0.810546875, 0.0003204345703125, 0.01322174072265625, 0.126220703125, 0.0418701171875, 0.12060546875, 3.1948089599609375e-05, 1.0609626770019531e-05, 0.00536346435546875, 0.00022423267364501953, 0.0003001689910888672, 0.033294677734375, 4.017353057861328e-05, 0.0004467964172363281, 0.00821685791015625, 0.04901123046875, 0.6845703125, 0.0037097930908203125, 0.04931640625, 0.2412109375, 0.15283203125, 0.012542724609375, 0.0352783203125, 0.01678466796875, 0.03570556640625, 3.814697265625e-06], "tokens": [397, 1135, 6512, 32, 16177, 44, 397, 1135, 6512, 32, 14221, 44, 301, 291, 40596, 32, 1553, 1078, 26, 2661, 1534, 610, 225, 35, 293, 291, 10639, 32, 669, 3397, 26, 1212, 1733, 32, 520, 705, 2007, 2023, 4976, 26, 681, 471, 901, 293, 291, 1015, 6150, 26, 2232, 30, 4004, 1733]}
{"line_number": 207, "line_type": "original", "code": "        add(\"]\");", "entropy": 3.767578125, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [6.01953125, 3.71875, 2.46484375, 2.869140625], "tokens": [351, 1015, 440, 28915]}
{"line_number": 207, "line_type": "generated", "code": "\n      case Token.STRING:\n        cc.addString(n.getString());\n        break;\n\n      case Token.HOOK:\n        Preconditions.checkState(childCount == 3);\n        cc.addOp(\"?\", false);\n        addExpr(first,", "entropy": 0.2042236328125, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [0.493408203125, 0.1842041015625, 0.0007596015930175781, 0.0002218484878540039, 1.6669921875, 0.040802001953125, 0.202392578125, 1.2666015625, 0.00014281272888183594, 0.00457000732421875, 0.06256103515625, 0.0172882080078125, 0.2578125, 0.0127410888671875, 0.0016965866088867188, 0.058258056640625, 0.01641845703125, 0.01425933837890625, 0.0003592967987060547, 0.09576416015625, 0.08984375, 0.0006380081176757812, 8.940696716308594e-06, 1.5390625, 0.00015628337860107422, 0.332275390625, 0.306640625, 0.00015985965728759766, 0.00011229515075683594, 0.00545501708984375, 0.00275421142578125, 0.0262908935546875, 2.8371810913085938e-05, 0.01020050048828125, 0.0007882118225097656, 0.06011962890625, 0.03533935546875, 0.2086181640625, 1.646484375, 0.0007624626159667969, 0.1627197265625, 0.062744140625, 0.069091796875, 0.380859375, 0.69677734375, 0.0116119384765625, 0.0791015625, 0.11285400390625, 0.052642822265625, 0.00865936279296875, 0.30712890625, 0.0101470947265625], "tokens": [397, 1135, 6512, 32, 5203, 44, 291, 10639, 32, 669, 652, 26, 96, 32, 7069, 1035, 291, 1626, 45, 1687, 1135, 6512, 32, 29243, 44, 291, 40596, 32, 1553, 1078, 26, 2661, 1534, 610, 225, 37, 293, 291, 10639, 32, 669, 3397, 440, 14206, 901, 293, 291, 1015, 6150, 26, 2232, 30]}
{"line_number": 208, "line_type": "original", "code": "        break;", "entropy": 1.9130859375, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [4.8203125, 0.91259765625, 0.0036983489990234375], "tokens": [351, 1626, 45]}
{"line_number": 208, "line_type": "generated", "code": "\n        break;\n      }\n\n      case Token.STRING:\n        cc.addString(n.getString());\n        break;\n\n      case Token.THIS:\n        add(\"this\");\n        break;\n\n      case Token.NULL:\n        add(\"null\");\n        break;", "entropy": 0.169921875, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [0.50732421875, 1.0908203125, 0.0004515647888183594, 0.0087432861328125, 0.0006055831909179688, 0.061676025390625, 0.06787109375, 0.00047707557678222656, 2.5033950805664062e-06, 1.2861328125, 0.052154541015625, 0.197265625, 1.16796875, 9.191036224365234e-05, 0.00391387939453125, 0.0467529296875, 0.015106201171875, 0.2318115234375, 0.006000518798828125, 0.0011768341064453125, 0.05267333984375, 0.0174560546875, 0.0157623291015625, 0.00026345252990722656, 0.0237274169921875, 0.07342529296875, 0.0006132125854492188, 2.6226043701171875e-05, 1.345703125, 0.0002739429473876953, 0.0927734375, 0.317626953125, 0.048797607421875, 0.0007205009460449219, 0.002773284912109375, 0.0224761962890625, 0.05950927734375, 0.00022041797637939453, 0.0301666259765625, 0.03167724609375, 0.0003323554992675781, 5.7220458984375e-06, 1.7568359375, 0.0003294944763183594, 0.03509521484375, 0.12548828125, 0.0182342529296875, 0.002079010009765625, 0.00067901611328125, 0.005649566650390625, 0.0069580078125, 0.0001252889633178711], "tokens": [291, 1626, 45, 397, 320, 1687, 1135, 6512, 32, 5203, 44, 291, 10639, 32, 669, 652, 26, 96, 32, 7069, 1035, 291, 1626, 45, 1687, 1135, 6512, 32, 25339, 44, 291, 1015, 440, 578, 724, 291, 1626, 45, 1687, 1135, 6512, 32, 3293, 44, 291, 1015, 440, 1693, 724, 291, 1626, 45]}
{"line_number": 880, "line_type": "original", "code": "    boolean lastWasEmpty = false;", "entropy": 2.779296875, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [2.310546875, 7.875, 5.39453125, 0.224365234375, 5.9921875, 0.2037353515625, 0.2142333984375, 0.022491455078125], "tokens": [264, 1905, 2401, 22434, 2766, 280, 901, 45]}
{"line_number": 880, "line_type": "generated", "code": "\n    }\n\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);", "entropy": 0.13134765625, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [0.1995849609375, 0.004772186279296875, 0.37890625, 1.5126953125, 0.1990966796875, 0.005462646484375, 0.017974853515625, 0.0006690025329589844, 0.91943359375, 0.08544921875, 0.027679443359375, 0.00244903564453125, 0.1580810546875, 0.039581298828125, 0.07208251953125, 0.88232421875, 0.28125, 0.1397705078125, 0.1871337890625, 0.00017726421356201172, 0.00041866302490234375, 0.00688934326171875, 0.00347900390625, 0.0090789794921875, 0.357421875, 0.272216796875, 0.005931854248046875, 0.015228271484375, 0.0150604248046875, 0.006961822509765625, 0.0006566047668457031, 4.5299530029296875e-05, 0.041412353515625, 0.0008845329284667969, 0.001617431640625, 0.00029015541076660156, 1.2159347534179688e-05, 3.5762786865234375e-05, 0.0010318756103515625, 0.051605224609375, 0.0024089813232421875, 0.0008106231689453125, 0.0190582275390625, 0.3515625, 0.541015625, 0.004535675048828125, 0.0010328292846679688, 4.6372413635253906e-05, 2.3603439331054688e-05, 3.4332275390625e-05, 4.851818084716797e-05, 0.0007529258728027344], "tokens": [284, 320, 446, 9706, 6115, 280, 537, 9706, 26, 101, 32, 1322, 346, 474, 225, 36, 293, 284, 6115, 32, 1689, 26, 7345, 293, 284, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309, 32, 1322, 473, 595, 1987, 301, 397, 1351, 281, 280, 309, 32, 15611, 26, 91, 293]}
{"line_number": 881, "line_type": "original", "code": "    for (Node n = firstInList; n != null; n = n.getNext()) {", "entropy": 0.71240234375, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [3.0390625, 4.0546875, 0.0234832763671875, 5.41015625, 1.4150390625, 0.06866455078125, 0.427490234375, 0.305419921875, 0.09429931640625, 0.01715087890625, 0.0245819091796875, 0.006038665771484375, 0.0017328262329101562, 0.01163482666015625, 0.0194244384765625, 0.0013904571533203125, 0.004756927490234375, 7.37905502319336e-05, 0.005329132080078125, 0.00740814208984375, 0.0240478515625], "tokens": [264, 436, 308, 1212, 310, 280, 1932, 383, 720, 45, 310, 863, 744, 45, 310, 280, 310, 32, 23017, 1157, 301]}
{"line_number": 881, "line_type": "generated", "code": "\n    // Output the string\n    cc.add(quote);\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (c == quote) {\n        cc.add", "entropy": 0.35498046875, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [0.440673828125, 1.8955078125, 4.52734375, 0.85498046875, 0.3623046875, 2.138671875, 1.3251953125, 0.00629425048828125, 0.62255859375, 0.861328125, 0.82861328125, 0.07305908203125, 0.1343994140625, 0.42236328125, 0.00945281982421875, 0.0296783447265625, 0.03125, 0.0104827880859375, 0.004917144775390625, 0.0002560615539550781, 0.06549072265625, 0.0015211105346679688, 0.002376556396484375, 0.0214996337890625, 0.00013947486877441406, 0.0005106925964355469, 0.0025177001953125, 0.05889892578125, 0.003200531005859375, 0.0039520263671875, 0.0287933349609375, 0.7431640625, 0.52978515625, 0.005619049072265625, 0.003261566162109375, 0.0001881122589111328, 0.00013136863708496094, 0.00014460086822509766, 0.0002129077911376953, 0.0006613731384277344, 0.1234130859375, 0.7099609375, 0.051971435546875, 0.13134765625, 0.08203125, 0.347412109375, 0.7685546875, 0.01776123046875, 0.06243896484375, 0.10565185546875, 0.0013942718505859375, 0.0054931640625], "tokens": [284, 434, 5582, 322, 802, 284, 10639, 32, 669, 26, 7345, 293, 284, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309, 32, 1322, 473, 595, 1987, 301, 397, 1351, 281, 280, 309, 32, 15611, 26, 91, 293, 397, 415, 308, 85, 610, 15358, 27, 301, 291, 10639, 32, 669]}
{"line_number": 889, "line_type": "original", "code": "    if (lastWasEmpty) {", "entropy": 1.537109375, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [4.03515625, 2.91796875, 0.17578125, 4.5234375, 0.294677734375, 0.2041015625, 0.0802001953125, 0.06903076171875], "tokens": [264, 415, 308, 2135, 22434, 2766, 27, 301]}
{"line_number": 889, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Escapes a string.\n   * @param s The string to escape\n   * @param quote The quote character to use\n   * @param doublequote The double quote character to use\n   * @param singlequote The single quote", "entropy": 0.354248046875, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [0.380126953125, 0.052825927734375, 0.12005615234375, 0.30908203125, 1.1455078125, 0.0006570816040039062, 0.6328125, 0.1600341796875, 0.0077056884765625, 0.6455078125, 0.18505859375, 2.185546875, 0.485107421875, 0.111328125, 1.021484375, 0.031890869140625, 0.53369140625, 0.55712890625, 0.1605224609375, 0.1534423828125, 0.2489013671875, 1.0009765625, 0.0011444091796875, 0.0007309913635253906, 0.008880615234375, 0.59521484375, 0.280029296875, 0.79248046875, 0.169921875, 0.92041015625, 0.491943359375, 1.1142578125, 0.004932403564453125, 0.0014448165893554688, 0.0074615478515625, 0.211181640625, 0.028167724609375, 0.265380859375, 1.435546875, 0.35595703125, 0.76953125, 0.2626953125, 0.16015625, 0.332275390625, 0.000995635986328125, 0.0016880035400390625, 0.0046844482421875, 0.040679931640625, 0.003940582275390625, 0.0085296630859375, 0.0138092041015625, 0.00360107421875], "tokens": [334, 320, 719, 1022, 664, 319, 516, 545, 10247, 312, 802, 32, 664, 319, 477, 753, 309, 886, 802, 372, 15820, 664, 319, 477, 753, 15358, 886, 15358, 5341, 372, 793, 664, 319, 477, 753, 2064, 7345, 886, 2064, 15358, 5341, 372, 793, 664, 319, 477, 753, 3982, 7345, 886, 3982, 15358]}
{"line_number": 892, "line_type": "original", "code": "  }", "entropy": 2.65234375, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [2.40625, 2.900390625], "tokens": [225, 320]}
{"line_number": 892, "line_type": "generated", "code": "  */\n  static String strEscape(String s, char quote, String doublequote,\n                         String singlequote, String backslash,\n                         CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(quote);\n    for (", "entropy": 0.1954345703125, "is_bug_line": false, "sus_score": 0.11724207635210984, "per_token_entropy": [2.40625, 0.89306640625, 0.229736328125, 0.3056640625, 0.04022216796875, 0.05364990234375, 0.0003504753112792969, 0.0019292831420898438, 0.051544189453125, 0.057861328125, 0.0009264945983886719, 0.1103515625, 0.396484375, 0.09283447265625, 0.040496826171875, 0.2100830078125, 0.0243072509765625, 0.00885009765625, 1.2080078125, 0.00013363361358642578, 0.0010786056518554688, 0.001087188720703125, 0.00012123584747314453, 0.0291748046875, 0.4794921875, 0.00458526611328125, 0.0038852691650390625, 0.06439208984375, 0.0005359649658203125, 0.0004322528839111328, 0.018829345703125, 0.0014019012451171875, 0.000621795654296875, 0.0010690689086914062, 0.004718780517578125, 0.1181640625, 1.02734375, 0.10601806640625, 0.006378173828125, 0.034423828125, 0.0006117820739746094, 0.499755859375, 0.397216796875, 0.2861328125, 0.0003616809844970703, 0.00174713134765625, 0.005313873291015625, 0.006221771240234375, 0.0029582977294921875, 0.41650390625, 0.5107421875, 0.0027408599853515625], "tokens": [225, 569, 334, 907, 892, 596, 19033, 26, 652, 309, 30, 1351, 15358, 30, 892, 2064, 7345, 30, 656, 892, 3982, 7345, 30, 892, 1751, 16227, 30, 656, 47048, 8770, 1688, 26082, 8770, 27, 301, 284, 9706, 6115, 280, 537, 9706, 473, 284, 6115, 32, 1689, 26, 7345, 293, 284, 436, 308]}
{"line_number": 467, "line_type": "original", "code": "        Preconditions.checkState(", "entropy": 1.5048828125, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [3.7734375, 5.2265625, 0.0022716522216796875, 0.0025539398193359375, 0.01293182373046875, 0.01275634765625], "tokens": [351, 40596, 32, 1553, 1078, 26]}
{"line_number": 467, "line_type": "generated", "code": "\n        } else {\n          addExpr(first, NodeUtil.precedence(Token.COMMA));\n        }\n        add(\"(\");\n        addArguments(n);\n        add(\")\");\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n       ", "entropy": 0.193603515625, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [0.9755859375, 0.1217041015625, 0.021697998046875, 0.1995849609375, 0.09637451171875, 0.234619140625, 0.66162109375, 0.006916046142578125, 0.01050567626953125, 0.0008969306945800781, 0.01739501953125, 0.0024547576904296875, 1.2874603271484375e-05, 0.003070831298828125, 0.00014889240264892578, 0.0022430419921875, 0.91650390625, 1.4901161193847656e-05, 0.17138671875, 0.0201416015625, 0.4052734375, 3.910064697265625e-05, 0.257080078125, 0.47119140625, 0.09588623046875, 0.005008697509765625, 0.0013895034790039062, 0.2115478515625, 1.126953125, 1.505859375, 0.023681640625, 0.56005859375, 0.71044921875, 0.0118408203125, 0.0655517578125, 0.0022735595703125, 0.0103759765625, 0.0380859375, 0.04718017578125, 0.00022041797637939453, 0.032135009765625, 0.0270538330078125, 0.0003921985626220703, 6.67572021484375e-06, 0.04412841796875, 0.002105712890625, 0.1136474609375, 0.70703125, 0.04461669921875, 0.0020236968994140625, 0.06610107421875, 0.02093505859375], "tokens": [291, 320, 813, 301, 616, 1015, 6150, 26, 2232, 30, 4004, 1733, 32, 1001, 39939, 26, 1763, 32, 47451, 876, 291, 320, 291, 1015, 440, 440, 293, 291, 1015, 8555, 26, 96, 293, 291, 1015, 440, 13372, 291, 1626, 45, 1687, 1135, 6512, 32, 11356, 44, 291, 1015, 440, 890, 7170, 291]}
{"line_number": 470, "line_type": "original", "code": "        addLeftExpr(first, NodeUtil.precedence(type), context);", "entropy": 0.86669921875, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [5.59765625, 0.5546875, 5.69921875, 1.9658203125, 0.10675048828125, 0.51416015625, 0.02935791015625, 0.06317138671875, 0.00098419189453125, 6.16312026977539e-05, 0.003955841064453125, 3.6954879760742188e-06, 0.0009245872497558594, 0.0694580078125, 0.054229736328125, 0.0667724609375, 0.00926971435546875], "tokens": [351, 1015, 3679, 6150, 26, 2232, 30, 4004, 1733, 32, 1001, 39939, 26, 681, 471, 1619, 293]}
{"line_number": 470, "line_type": "generated", "code": "\n        add(\"(\");\n        boolean firstTime = true;\n        for (Node child : n.children()) {\n          if (child == first) {\n            continue;\n          }\n          if (firstTime) {\n            firstTime = false;\n          } else", "entropy": 0.232666015625, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [0.0965576171875, 0.5537109375, 0.064697265625, 0.0037822723388671875, 0.002086639404296875, 0.147705078125, 2.080078125, 1.1640625, 0.79443359375, 0.0033721923828125, 0.0025997161865234375, 0.00042128562927246094, 0.05078125, 0.301025390625, 0.0034580230712890625, 0.050323486328125, 1.1669921875, 0.87646484375, 0.4990234375, 0.0100250244140625, 0.00858306884765625, 0.00943756103515625, 0.000530242919921875, 0.0179443359375, 0.1016845703125, 0.5810546875, 0.67724609375, 0.89306640625, 0.1756591796875, 0.10125732421875, 0.018035888671875, 0.0304412841796875, 0.2249755859375, 0.00019240379333496094, 0.0175323486328125, 0.0001068115234375, 0.1324462890625, 0.051727294921875, 0.89892578125, 0.226806640625, 0.003124237060546875, 0.0015707015991210938, 0.015411376953125, 0.01030731201171875, 0.0189056396484375, 0.0001863241195678711, 9.47713851928711e-05, 0.0003218650817871094, 4.887580871582031e-05, 0.007656097412109375, 3.921985626220703e-05, 0.0008912086486816406], "tokens": [291, 1015, 440, 440, 293, 291, 1905, 1932, 1043, 280, 861, 45, 291, 436, 308, 1212, 2838, 499, 310, 32, 4915, 1157, 301, 616, 415, 308, 2661, 610, 1932, 27, 301, 324, 4036, 45, 616, 320, 616, 415, 308, 2232, 1043, 27, 301, 324, 1932, 1043, 280, 901, 45, 616, 320, 813]}
{"line_number": 471, "line_type": "original", "code": "        add(\"[\");", "entropy": 3.951171875, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [5.7421875, 0.92578125, 8.7734375, 0.364990234375], "tokens": [351, 1015, 9670, 724]}
{"line_number": 471, "line_type": "generated", "code": "\n        for (Node c = n.getFirstChild(), next = c.getNext();\n             c!= null;\n             c = next, next = c.getNext()) {\n          add(c);\n          if (next!= null) {\n            add(\",\");\n          }", "entropy": 0.2724609375, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [0.0712890625, 1.59375, 0.0035762786865234375, 0.8076171875, 0.9912109375, 0.09063720703125, 1.7529296875, 0.005405426025390625, 0.0341796875, 0.0005340576171875, 0.9267578125, 0.43359375, 0.45849609375, 0.294921875, 0.04168701171875, 0.00013244152069091797, 0.05267333984375, 1.3271484375, 0.00647735595703125, 0.004642486572265625, 0.0667724609375, 0.012603759765625, 0.08990478515625, 0.007595062255859375, 0.0006113052368164062, 0.004795074462890625, 0.07696533203125, 0.00925445556640625, 0.0006403923034667969, 0.5263671875, 0.6064453125, 0.000339508056640625, 0.0027828216552734375, 0.006946563720703125, 0.0272674560546875, 1.26171875, 1.28515625, 0.02960205078125, 0.04193115234375, 0.0264129638671875, 0.36572265625, 0.01264190673828125, 0.257568359375, 0.023040771484375, 0.00015985965728759766, 0.005153656005859375, 0.005458831787109375, 0.007030487060546875, 0.1212158203125, 0.33251953125, 0.052337646484375, 9.763240814208984e-05], "tokens": [291, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 1026, 2354, 280, 281, 32, 23017, 473, 1802, 281, 863, 744, 45, 1802, 281, 280, 2354, 30, 2354, 280, 281, 32, 23017, 1157, 301, 616, 1015, 26, 85, 293, 616, 415, 308, 1978, 863, 744, 27, 301, 324, 1015, 35314, 616, 320]}
{"line_number": 472, "line_type": "original", "code": "        add(first.getNext());", "entropy": 2.32421875, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [6.77734375, 0.371337890625, 4.36328125, 3.353515625, 0.074462890625, 0.419677734375, 0.90576171875], "tokens": [351, 1015, 26, 2232, 32, 23017, 1035]}
{"line_number": 472, "line_type": "generated", "code": "\n        add(\")\");\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        add(first);\n        add(\"(\");\n        addList(first.getNext());", "entropy": 0.0909423828125, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [0.0438232421875, 0.1849365234375, 0.018402099609375, 0.0128326416015625, 0.0218505859375, 0.05120849609375, 0.00010609626770019531, 0.0196990966796875, 0.022308349609375, 0.0003566741943359375, 5.245208740234375e-06, 0.0428466796875, 0.0034084320068359375, 0.11102294921875, 1.0966796875, 0.04266357421875, 0.0022296905517578125, 0.05340576171875, 0.024322509765625, 0.10565185546875, 0.87744140625, 0.07037353515625, 0.0341796875, 0.02423095703125, 0.09716796875, 0.0119476318359375, 0.004520416259765625, 0.0003192424774169922, 0.078125, 0.051727294921875, 0.057586669921875, 0.00922393798828125, 0.07830810546875, 0.0005869865417480469, 0.0002084970474243164, 0.0204010009765625], "tokens": [291, 1015, 440, 13372, 291, 1626, 45, 1687, 1135, 6512, 32, 11356, 44, 291, 1015, 440, 890, 7170, 291, 1015, 26, 2232, 293, 291, 1015, 440, 440, 293, 291, 1015, 720, 26, 2232, 32, 23017, 1035]}
{"line_number": 473, "line_type": "original", "code": "        add(\"]\");", "entropy": 4.875, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [7.40625, 4.3359375, 3.462890625, 4.296875], "tokens": [351, 1015, 440, 28915]}
{"line_number": 473, "line_type": "generated", "code": "\n        break;\n\n      case Token.NEW:\n        Preconditions.checkState(childCount == 1);\n        add(\"new \");\n        addExpr(first, NodeUtil.precedence(type));", "entropy": 0.07470703125, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [0.047027587890625, 0.028411865234375, 0.0002961158752441406, 0.031036376953125, 0.029937744140625, 0.00037026405334472656, 6.67572021484375e-06, 0.05047607421875, 0.003520965576171875, 0.1048583984375, 0.6064453125, 5.8770179748535156e-05, 5.9723854064941406e-05, 0.004241943359375, 0.001354217529296875, 0.10711669921875, 7.3909759521484375e-06, 0.1385498046875, 0.00011944770812988281, 0.235595703125, 0.10174560546875, 0.0183258056640625, 0.2235107421875, 0.03070068359375, 0.0023956298828125, 0.0457763671875, 0.00962066650390625, 0.08642578125, 0.72900390625, 0.00870513916015625, 0.0104522705078125, 0.037689208984375, 0.037811279296875, 0.0002689361572265625, 6.794929504394531e-06, 0.0015783309936523438, 5.960464477539062e-07, 0.0016336441040039062, 0.18505859375, 0.06866455078125], "tokens": [291, 1626, 45, 1687, 1135, 6512, 32, 11356, 44, 291, 40596, 32, 1553, 1078, 26, 2661, 1534, 610, 225, 35, 293, 291, 1015, 440, 890, 7170, 291, 1015, 6150, 26, 2232, 30, 4004, 1733, 32, 1001, 39939, 26, 681, 876]}
{"line_number": 474, "line_type": "original", "code": "        break;", "entropy": 3.427734375, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [7.9453125, 2.33203125, 0.0038661956787109375], "tokens": [351, 1626, 45]}
{"line_number": 474, "line_type": "generated", "code": "\n\n      case Token.NEW:\n        add(\"new \");\n        add(first);\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.TYPEOF:\n        add(\"typeof \");\n        add(first", "entropy": 0.1021728515625, "is_bug_line": false, "sus_score": 0.08144629623753681, "per_token_entropy": [0.16162109375, 0.083251953125, 0.0005688667297363281, 2.0503997802734375e-05, 0.2373046875, 0.00811004638671875, 0.1282958984375, 1.09765625, 0.046966552734375, 0.0025005340576171875, 0.06561279296875, 0.01015472412109375, 0.11553955078125, 0.6552734375, 0.037750244140625, 0.036102294921875, 0.010528564453125, 0.170654296875, 0.01422882080078125, 0.0157012939453125, 0.00027441978454589844, 0.0028972625732421875, 0.044342041015625, 0.042724609375, 0.0084686279296875, 0.051910400390625, 0.0005397796630859375, 0.00029158592224121094, 0.0159454345703125, 0.0012750625610351562, 0.003009796142578125, 0.00017118453979492188, 0.004177093505859375, 0.01947021484375, 0.01031494140625, 0.0006489753723144531, 0.08642578125, 0.0296630859375, 0.0004665851593017578, 4.410743713378906e-06, 1.341796875, 1.4185905456542969e-05, 0.00024116039276123047, 0.190185546875, 0.17822265625, 0.01435089111328125, 0.00616455078125, 0.1358642578125, 0.0041656494140625, 0.0489501953125, 0.1678466796875, 0.0034313201904296875], "tokens": [1687, 1135, 6512, 32, 11356, 44, 291, 1015, 440, 890, 7170, 291, 1015, 26, 2232, 293, 291, 1015, 440, 440, 293, 291, 1015, 720, 26, 2232, 32, 23017, 1035, 291, 1015, 440, 13372, 291, 1626, 45, 1687, 1135, 6512, 32, 2319, 2109, 44, 291, 1015, 440, 5139, 7170, 291, 1015, 26, 2232]}
