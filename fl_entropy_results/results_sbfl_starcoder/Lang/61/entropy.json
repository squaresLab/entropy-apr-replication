{"line_number": 1184, "line_type": "original", "code": "        int len = (str == null ? 0 : str.length());", "entropy": 0.794921875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [3.689453125, 2.55859375, 3.341796875, 0.0297088623046875, 0.76220703125, 2.294921875, 0.0093994140625, 0.00022709369659423828, 0.0010671615600585938, 0.00409698486328125, 0.0002815723419189453, 0.0003159046173095703, 0.002483367919921875, 0.00014221668243408203, 0.0007901191711425781, 0.0203704833984375], "tokens": [351, 629, 2069, 280, 308, 466, 610, 744, 1018, 225, 34, 499, 596, 32, 1322, 1035]}
{"line_number": 1184, "line_type": "generated", "code": "\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(StrMatcher matcher) {\n        return replace(matcher, null, 0", "entropy": 0.022216796875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.1734619140625, 0.002529144287109375, 0.09063720703125, 0.00946044921875, 0.00299835205078125, 0.0052337646484375, 0.0019626617431640625, 0.00035381317138671875, 0.004337310791015625, 0.015167236328125, 0.0022220611572265625, 0.0124359130859375, 0.00328826904296875, 0.02178955078125, 0.03125, 0.0007839202880859375, 0.00626373291015625, 0.00010645389556884766, 0.00048804283142089844, 0.0258331298828125, 1.6450881958007812e-05, 0.0001976490020751953, 0.0010223388671875, 0.0308990478515625, 0.0019931793212890625, 0.0001131296157836914, 0.00016105175018310547, 0.0005941390991210938, 0.006664276123046875, 0.07269287109375, 0.0127105712890625, 0.0014562606811523438, 0.0002989768981933594, 2.384185791015625e-07, 7.319450378417969e-05, 0.0002446174621582031, 5.066394805908203e-05, 0.0092010498046875, 6.866455078125e-05, 6.556510925292969e-06, 9.250640869140625e-05, 0.01349639892578125, 0.0970458984375, 0.362060546875, 0.007518768310546875, 0.11767578125, 0.0026111602783203125, 4.5299530029296875e-05, 0.0028247833251953125, 0.00017559528350830078, 0.0013780593872070312, 0.0009927749633789062], "tokens": [275, 319, 477, 753, 20638, 225, 322, 20638, 372, 793, 372, 2290, 322, 22602, 30, 744, 15663, 1289, 2125, 275, 319, 477, 601, 458, 30, 372, 5352, 38009, 275, 569, 284, 562, 6700, 1796, 3066, 3472, 26, 2007, 11945, 20638, 27, 301, 291, 442, 7084, 26, 16937, 30, 744, 30, 225, 34]}
{"line_number": 1185, "line_type": "original", "code": "        if (len > 0) {", "entropy": 1.3857421875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [3.97265625, 0.83203125, 0.016387939453125, 6.421875, 0.56201171875, 0.006244659423828125, 0.004756927490234375, 0.497314453125, 0.1566162109375], "tokens": [351, 415, 308, 1657, 848, 225, 34, 27, 301]}
{"line_number": 1185, "line_type": "generated", "code": "\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(StrMatcher matcher) {\n        return replace(matcher, null, 0, size, 1);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Deletes all the characters", "entropy": 0.10540771484375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.56787109375, 0.080078125, 0.001529693603515625, 0.002696990966796875, 0.0216217041015625, 0.0026702880859375, 0.0002071857452392578, 0.0002359151840209961, 0.0010824203491210938, 0.264404296875, 0.05401611328125, 0.03302001953125, 0.0018568038940429688, 0.0005221366882324219, 1.1920928955078125e-07, 0.00012886524200439453, 0.00030159950256347656, 4.7326087951660156e-05, 0.00543212890625, 6.23464584350586e-05, 7.62939453125e-06, 0.00019228458404541016, 0.024261474609375, 0.0733642578125, 0.465087890625, 0.0084686279296875, 0.1123046875, 0.0031642913818359375, 7.462501525878906e-05, 0.0031375885009765625, 0.00023555755615234375, 0.0017690658569335938, 0.0009236335754394531, 0.0007791519165039062, 0.061553955078125, 0.002498626708984375, 0.0369873046875, 0.004657745361328125, 0.0008244514465332031, 0.060760498046875, 0.0007066726684570312, 0.2252197265625, 0.089599609375, 0.0007452964782714844, 0.0259552001953125, 0.0161895751953125, 0.00443267822265625, 4.57763671875e-05, 1.21484375, 0.51025390625, 0.97021484375, 0.5224609375], "tokens": [275, 319, 477, 601, 458, 30, 372, 5352, 38009, 275, 569, 284, 562, 6700, 1796, 3066, 3472, 26, 2007, 11945, 20638, 27, 301, 291, 442, 7084, 26, 16937, 30, 744, 30, 225, 34, 30, 1334, 30, 225, 35, 293, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 34391, 1169, 322, 7125]}
{"line_number": 1186, "line_type": "original", "code": "            int index = indexOf(str, 0);", "entropy": 1.376953125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [6.375, 3.6015625, 1.548828125, 0.024749755859375, 0.09228515625, 0.0191650390625, 2.771484375, 0.0220947265625, 0.295654296875, 0.0009226799011230469, 0.39501953125], "tokens": [1468, 629, 1650, 280, 40635, 26, 466, 30, 225, 34, 293]}
{"line_number": 1186, "line_type": "generated", "code": "\n    public StrBuilder deleteFirst(StrMatcher matcher) {\n        return replace(matcher, null, 0, size, 1);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Replaces all matching substrings within the builder.\n     * <p>", "entropy": 0.16064453125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [1.2724609375, 1.76953125, 0.0182647705078125, 8.344650268554688e-07, 0.0006566047668457031, 0.001590728759765625, 0.0002777576446533203, 0.01025390625, 3.528594970703125e-05, 2.1219253540039062e-05, 0.0004527568817138672, 0.026824951171875, 0.0721435546875, 0.60986328125, 0.011016845703125, 0.055908203125, 0.005035400390625, 0.00020182132720947266, 0.00716400146484375, 0.0005216598510742188, 0.0033359527587890625, 0.00240325927734375, 0.0014410018920898438, 0.0408935546875, 0.0036563873291015625, 0.041778564453125, 0.00749969482421875, 0.0025634765625, 0.08233642578125, 0.00189971923828125, 0.35107421875, 0.08514404296875, 0.0012798309326171875, 0.031707763671875, 0.02178955078125, 0.006160736083984375, 3.886222839355469e-05, 0.392333984375, 0.1356201171875, 0.8125, 1.0673828125, 0.020904541015625, 0.01021575927734375, 0.650390625, 0.405029296875, 0.0115814208984375, 0.146484375, 0.00555419921875, 2.1576881408691406e-05, 0.1444091796875, 0.0009860992431640625, 0.00032067298889160156], "tokens": [284, 562, 6700, 1796, 3066, 3472, 26, 2007, 11945, 20638, 27, 301, 291, 442, 7084, 26, 16937, 30, 744, 30, 225, 34, 30, 1334, 30, 225, 35, 293, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 902, 15778, 1169, 9215, 1361, 8352, 4797, 322, 4906, 32, 275, 319, 333, 98, 48]}
{"line_number": 1187, "line_type": "original", "code": "            while (index >= 0) {", "entropy": 1.4375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [6.828125, 4.1953125, 0.08563232421875, 1.3935546875, 0.208251953125, 0.006603240966796875, 0.00011491775512695312, 0.11590576171875, 0.1075439453125], "tokens": [1468, 2218, 308, 1055, 2377, 225, 34, 27, 301]}
{"line_number": 1187, "line_type": "generated", "code": "\n    public StrBuilder deleteFirst(StrMatcher matcher) {\n        return replace(matcher, null, 0, size, 1);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Replaces all matching substrings in this builder with the given replacement.\n    ", "entropy": 0.1668701171875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.34375, 0.057037353515625, 0.0038299560546875, 5.960464477539062e-07, 0.0003788471221923828, 0.000598907470703125, 0.000148773193359375, 0.00501251220703125, 5.7697296142578125e-05, 1.33514404296875e-05, 0.0007104873657226562, 0.042022705078125, 0.0975341796875, 0.359619140625, 0.010650634765625, 0.11212158203125, 0.0030193328857421875, 0.00021159648895263672, 0.004390716552734375, 0.0005741119384765625, 0.0018587112426757812, 0.0009107589721679688, 0.0013828277587890625, 0.03277587890625, 0.003810882568359375, 0.0760498046875, 0.0049896240234375, 0.0018911361694335938, 0.043365478515625, 0.001323699951171875, 0.1842041015625, 0.166015625, 0.0011148452758789062, 0.034149169921875, 0.01788330078125, 0.002147674560546875, 4.482269287109375e-05, 0.57080078125, 0.1756591796875, 0.94921875, 1.1025390625, 0.01788330078125, 0.00974273681640625, 1.51171875, 0.55078125, 0.0347900390625, 0.9560546875, 0.2376708984375, 0.36181640625, 0.291015625, 0.289794921875, 0.0013446807861328125], "tokens": [284, 562, 6700, 1796, 3066, 3472, 26, 2007, 11945, 20638, 27, 301, 291, 442, 7084, 26, 16937, 30, 744, 30, 225, 34, 30, 1334, 30, 225, 35, 293, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 902, 15778, 1169, 9215, 1361, 8352, 328, 458, 4906, 623, 322, 2702, 15909, 32, 275]}
{"line_number": 1188, "line_type": "original", "code": "                deleteImpl(index, index + len, len);", "entropy": 1.189453125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [8.0, 3.68359375, 1.2470703125, 0.06695556640625, 0.48681640625, 0.033111572265625, 0.351318359375, 0.14111328125, 0.1341552734375, 0.022064208984375, 0.104736328125, 0.005344390869140625], "tokens": [2071, 3066, 3482, 26, 1055, 30, 1650, 474, 2069, 30, 2069, 293]}
{"line_number": 1188, "line_type": "generated", "code": "\n        return this;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Replaces each substring of the builder that matches the given\n     * regular expression with the given replacement.\n     * <p>\n     * This method uses Java's {@link java.util.regex", "entropy": 0.253662109375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.15478515625, 0.41015625, 1.02734375, 0.0026702880859375, 0.0379638671875, 0.0004582405090332031, 0.108154296875, 0.1058349609375, 0.0010213851928710938, 0.0183258056640625, 0.017333984375, 0.0019817352294921875, 4.1365623474121094e-05, 0.58349609375, 0.25341796875, 1.4833984375, 0.1082763671875, 0.310302734375, 0.1837158203125, 0.01513671875, 0.005035400390625, 0.14404296875, 0.0601806640625, 0.52587890625, 1.2763671875, 1.919269561767578e-05, 0.55859375, 0.0001697540283203125, 0.09185791015625, 0.00241851806640625, 0.0040130615234375, 0.1212158203125, 0.431640625, 0.044647216796875, 2.0384788513183594e-05, 0.264892578125, 0.0020847320556640625, 0.00092315673828125, 0.00031256675720214844, 1.52587890625e-05, 1.607421875, 0.234619140625, 0.361083984375, 1.46875, 0.69580078125, 0.407470703125, 0.0105438232421875, 0.050384521484375, 1.800060272216797e-05, 0.0010251998901367188, 2.47955322265625e-05, 5.8531761169433594e-05], "tokens": [291, 442, 458, 45, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 902, 15778, 2504, 33826, 432, 322, 4906, 688, 8001, 322, 2702, 275, 319, 10605, 6101, 623, 322, 2702, 15909, 32, 275, 319, 333, 98, 48, 275, 319, 1348, 1411, 5251, 4949, 1182, 3088, 1204, 1383, 32, 1040, 32, 7920]}
{"line_number": 1189, "line_type": "original", "code": "                index = indexOf(str, index);", "entropy": 2.5390625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [9.6484375, 6.12109375, 0.174072265625, 0.54345703125, 0.04864501953125, 1.869140625, 0.0289459228515625, 3.908203125, 0.50244140625], "tokens": [2071, 1650, 280, 40635, 26, 466, 30, 1650, 293]}
{"line_number": 1189, "line_type": "generated", "code": "\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Replaces all matching substrings within the builder.\n     * <p>\n     * Matchers can be used to perform advanced replacement behaviour.\n     * For example you could write a matcher to replace all occurances\n    ", "entropy": 0.1563720703125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.144775390625, 0.017364501953125, 0.164306640625, 0.161865234375, 0.0012598037719726562, 0.0209808349609375, 0.0203857421875, 0.0030651092529296875, 4.6372413635253906e-05, 0.68701171875, 0.331787109375, 0.9814453125, 1.12109375, 0.0155181884765625, 0.00916290283203125, 0.8173828125, 0.3798828125, 0.00933837890625, 0.165283203125, 0.005573272705078125, 2.0384788513183594e-05, 0.163330078125, 0.0010690689086914062, 0.0003757476806640625, 0.00016951560974121094, 1.7762184143066406e-05, 0.0865478515625, 6.16312026977539e-05, 0.00305938720703125, 0.0004391670227050781, 0.00037217140197753906, 0.002071380615234375, 0.0009565353393554688, 0.0118560791015625, 0.87060546875, 0.1658935546875, 0.031280517578125, 0.00965118408203125, 1.0967254638671875e-05, 0.124267578125, 0.0008778572082519531, 0.041961669921875, 0.0018434524536132812, 0.042816162109375, 0.0020904541015625, 0.0006747245788574219, 0.1727294921875, 0.2464599609375, 0.55859375, 0.51220703125, 0.0002875328063964844, 0.0188140869140625], "tokens": [284, 320, 446, 434, 42510, 284, 1022, 275, 319, 902, 15778, 1169, 9215, 1361, 8352, 4797, 322, 4906, 32, 275, 319, 333, 98, 48, 275, 319, 12253, 483, 883, 526, 1654, 372, 4436, 20174, 15909, 13978, 32, 275, 319, 2616, 2280, 844, 3065, 2866, 312, 20638, 372, 7084, 1169, 13791, 3151, 275]}
{"line_number": 1202, "line_type": "original", "code": "        int len = (str == null ? 0 : str.length());", "entropy": 1.166015625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [4.55078125, 3.1953125, 2.802734375, 0.08184814453125, 2.943359375, 5.00390625, 0.0218353271484375, 0.0004265308380126953, 0.00421905517578125, 0.01174163818359375, 0.0005364418029785156, 0.0011205673217773438, 0.018585205078125, 0.0011806488037109375, 0.0007338523864746094, 0.023773193359375], "tokens": [351, 629, 2069, 280, 308, 466, 610, 744, 1018, 225, 34, 499, 596, 32, 1322, 1035]}
{"line_number": 1202, "line_type": "generated", "code": "\n    private void deleteImpl(int startIndex, int endIndex, int removeLen, String insertStr, int insertLen) {\n        if (insertStr == null) {\n            insertLen = 0;\n        }\n        if (insertLen!= removeLen", "entropy": 0.2017822265625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.1429443359375, 0.54248046875, 0.14208984375, 0.0249481201171875, 0.0014820098876953125, 0.0094146728515625, 0.039794921875, 0.0012607574462890625, 0.00016629695892333984, 0.0031147003173828125, 0.0002491474151611328, 5.602836608886719e-06, 0.0003848075866699219, 0.0072174072265625, 0.007232666015625, 0.0002510547637939453, 0.6142578125, 0.320068359375, 0.009735107421875, 0.0018720626831054688, 0.011962890625, 0.027740478515625, 0.0012063980102539062, 0.0020771026611328125, 0.0117950439453125, 0.07171630859375, 0.2344970703125, 0.7080078125, 0.05078125, 0.8984375, 0.2078857421875, 0.3974609375, 0.004608154296875, 0.0924072265625, 0.0014162063598632812, 0.1107177734375, 1.7998046875, 0.17138671875, 0.0005664825439453125, 0.0249481201171875, 0.00016689300537109375, 0.00012433528900146484, 0.0645751953125, 4.982948303222656e-05, 0.58056640625, 0.83837890625, 0.1180419921875, 1.2080078125, 0.116943359375, 0.79736328125, 0.068359375, 1.1563301086425781e-05], "tokens": [284, 945, 763, 3066, 3482, 26, 410, 23529, 30, 629, 943, 1284, 30, 629, 3345, 5745, 30, 892, 5551, 2007, 30, 629, 5551, 5745, 27, 301, 291, 415, 308, 3215, 2007, 610, 744, 27, 301, 324, 5551, 5745, 280, 225, 34, 45, 291, 320, 291, 415, 308, 3215, 5745, 863, 3345, 5745]}
{"line_number": 1203, "line_type": "original", "code": "        if (len > 0) {", "entropy": 1.45703125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [4.55859375, 0.7705078125, 0.0616455078125, 5.75390625, 1.646484375, 0.0589599609375, 0.003391265869140625, 0.183349609375, 0.07879638671875], "tokens": [351, 415, 308, 1657, 848, 225, 34, 27, 301]}
{"line_number": 1203, "line_type": "generated", "code": "\n        if (insertStr == null) {\n            if (removeLen > 0) {\n                System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\n                size -= removeLen;\n            }\n        } else {\n            if", "entropy": 0.168701171875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.262939453125, 0.8623046875, 0.045379638671875, 0.64599609375, 0.378173828125, 0.397705078125, 0.00423431396484375, 0.08984375, 0.0017337799072265625, 0.099365234375, 1.0625, 0.046844482421875, 1.9853515625, 0.004001617431640625, 0.53857421875, 0.043212890625, 0.00452423095703125, 0.041778564453125, 0.0010204315185546875, 0.06561279296875, 0.54736328125, 0.0019702911376953125, 3.3736228942871094e-05, 0.0036869049072265625, 0.004547119140625, 0.00010037422180175781, 0.05072021484375, 1.609325408935547e-05, 0.0008716583251953125, 0.020294189453125, 2.193450927734375e-05, 0.00063323974609375, 8.881092071533203e-05, 0.0810546875, 0.0013380050659179688, 0.005504608154296875, 1.4424324035644531e-05, 0.0016946792602539062, 0.376708984375, 0.134765625, 0.01305389404296875, 0.0074310302734375, 1.3113021850585938e-06, 0.0006422996520996094, 0.186767578125, 3.7670135498046875e-05, 0.0330810546875, 0.0003247261047363281, 0.004123687744140625, 0.3828125, 0.046722412109375, 0.28857421875], "tokens": [291, 415, 308, 3215, 2007, 610, 744, 27, 301, 324, 415, 308, 2546, 5745, 848, 225, 34, 27, 301, 400, 1171, 32, 40863, 26, 2668, 30, 943, 1284, 30, 3112, 30, 23529, 30, 1334, 429, 943, 1284, 293, 400, 1334, 5912, 3345, 5745, 45, 324, 320, 291, 320, 813, 301, 324, 415]}
{"line_number": 1204, "line_type": "original", "code": "            int index = indexOf(str, 0);", "entropy": 1.8623046875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [6.27734375, 2.642578125, 3.982421875, 0.084228515625, 4.15234375, 0.1845703125, 1.8828125, 0.0301055908203125, 1.1953125, 0.0025482177734375, 0.05499267578125], "tokens": [1468, 629, 1650, 280, 40635, 26, 466, 30, 225, 34, 293]}
{"line_number": 1204, "line_type": "generated", "code": "\n        if (newSize > buffer.length) {\n            char[] newBuf = new char[calculateNewSize(newSize)];", "entropy": 0.30517578125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.181884765625, 0.64013671875, 0.014251708984375, 0.88134765625, 0.002685546875, 0.41357421875, 0.74365234375, 0.004306793212890625, 0.00021219253540039062, 0.02081298828125, 0.0050048828125, 0.06982421875, 1.9033203125, 0.08892822265625, 0.032073974609375, 1.537109375, 0.004268646240234375, 0.005466461181640625, 0.0005350112915039062, 0.00315093994140625, 0.72314453125, 0.03277587890625, 0.45458984375, 0.04315185546875, 0.32763671875, 0.00013709068298339844, 0.11102294921875], "tokens": [291, 415, 308, 890, 1250, 848, 3112, 32, 1322, 27, 301, 324, 1351, 1178, 537, 7346, 280, 537, 1351, 77, 12979, 1812, 1250, 26, 890, 1250, 16728]}
{"line_number": 1205, "line_type": "original", "code": "            if (index >= 0) {", "entropy": 2.056640625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [4.9765625, 1.4541015625, 0.021575927734375, 5.4609375, 3.966796875, 1.955078125, 0.00353240966796875, 0.45654296875, 0.2225341796875], "tokens": [1468, 415, 308, 1055, 2377, 225, 34, 27, 301]}
{"line_number": 1205, "line_type": "generated", "code": "\n            if (startIndex == 0) {\n                buffer = Arrays.copyOfRange(buffer, endIndex, newSize);\n            } else if (endIndex == size) {\n                buffer = Arrays.copyOfRange(buffer, 0, startIndex);\n           ", "entropy": 0.214111328125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.2978515625, 1.5087890625, 0.017059326171875, 1.3994140625, 2.15234375, 0.42529296875, 0.000690460205078125, 0.45361328125, 0.00867462158203125, 0.162109375, 1.4599609375, 0.31640625, 0.7578125, 0.0077362060546875, 0.01264190673828125, 0.60498046875, 0.018341064453125, 0.00789642333984375, 0.0012788772583007812, 0.143798828125, 7.939338684082031e-05, 0.0016069412231445312, 0.4111328125, 0.00029087066650390625, 0.0188751220703125, 0.1597900390625, 0.0006551742553710938, 0.036407470703125, 0.325439453125, 0.00888824462890625, 0.0136566162109375, 1.7642974853515625e-05, 0.01149749755859375, 0.03350830078125, 0.005100250244140625, 0.0029811859130859375, 0.049102783203125, 0.00897216796875, 0.001293182373046875, 0.0011148452758789062, 0.00028967857360839844, 6.16312026977539e-05, 0.054962158203125, 0.00011372566223144531, 0.0002104043960571289, 0.00019884109497070312, 0.1446533203125, 0.00024008750915527344, 0.0001817941665649414, 0.05401611328125, 0.0036907196044921875, 0.027099609375], "tokens": [324, 415, 308, 42335, 610, 225, 34, 27, 301, 400, 3112, 280, 14473, 32, 36981, 3198, 26, 2668, 30, 943, 1284, 30, 537, 1250, 293, 324, 320, 813, 415, 308, 416, 1284, 610, 1334, 27, 301, 400, 3112, 280, 14473, 32, 36981, 3198, 26, 2668, 30, 225, 34, 30, 23529, 293, 324]}
{"line_number": 1206, "line_type": "original", "code": "                deleteImpl(index, index + len, len);", "entropy": 1.609375, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [6.32421875, 6.25390625, 0.1297607421875, 0.022247314453125, 3.7265625, 0.2490234375, 0.18798828125, 0.05078125, 1.8720703125, 0.07373046875, 0.400390625, 0.024993896484375], "tokens": [2071, 3066, 3482, 26, 1055, 30, 1650, 474, 2069, 30, 2069, 293]}
{"line_number": 1206, "line_type": "generated", "code": "\n            if (insertLen > 0) {\n                buffer[startIndex + insertLen] = buffer[endIndex];\n            }", "entropy": 0.326416015625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.83251953125, 0.83642578125, 0.00836944580078125, 0.60546875, 0.8271484375, 0.1998291015625, 0.12457275390625, 0.0007581710815429688, 0.058258056640625, 0.00856781005859375, 0.2442626953125, 1.58203125, 1.1474609375, 0.6650390625, 0.2802734375, 0.11505126953125, 0.00019371509552001953, 0.0234222412109375, 0.0009417533874511719, 0.11895751953125, 0.00521087646484375, 0.2939453125, 5.4955482482910156e-05, 0.10430908203125, 0.403564453125, 0.0004260540008544922], "tokens": [324, 415, 308, 3215, 5745, 848, 225, 34, 27, 301, 400, 3112, 77, 42335, 474, 5551, 5745, 79, 280, 3112, 77, 416, 1284, 970, 324, 320]}
{"line_number": 1209, "line_type": "original", "code": "        return this;", "entropy": 2.345703125, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [4.03515625, 5.09765625, 0.247314453125, 0.002376556396484375], "tokens": [351, 442, 458, 45]}
{"line_number": 1209, "line_type": "generated", "code": "\n        if (insertStr!= null) {\n            buffer[startIndex] = insertStr;\n        }\n    }\n\n    /**\n     * Internal method to delete a range without validation.\n     *\n     * @param startIndex  the start index, must be valid\n     *", "entropy": 0.160888671875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.55615234375, 0.8515625, 0.007110595703125, 0.1131591796875, 0.47509765625, 0.0323486328125, 0.0003485679626464844, 0.0762939453125, 0.00063323974609375, 0.042816162109375, 2.228515625, 0.2369384765625, 0.055023193359375, 0.00989532470703125, 0.0004317760467529297, 0.06341552734375, 0.0026950836181640625, 0.572265625, 0.235595703125, 0.0013151168823242188, 0.98681640625, 0.00525665283203125, 0.16357421875, 0.462890625, 0.00138092041015625, 5.793571472167969e-05, 0.51025390625, 0.0267181396484375, 0.061187744140625, 0.1307373046875, 0.0626220703125, 0.0550537109375, 0.2156982421875, 0.0045623779296875, 0.0233306884765625, 0.0030040740966796875, 0.00042438507080078125, 0.06683349609375, 5.5909156799316406e-05, 0.000514984130859375, 0.00046515464782714844, 0.00670623779296875, 0.0025310516357421875, 0.0009212493896484375, 0.0005307197570800781, 8.988380432128906e-05, 0.00417327880859375, 0.0019197463989257812, 8.046627044677734e-05, 0.00048613548278808594, 0.0035648345947265625, 1.895427703857422e-05], "tokens": [291, 415, 308, 3215, 2007, 863, 744, 27, 301, 324, 3112, 77, 42335, 79, 280, 5551, 2007, 45, 291, 320, 284, 320, 446, 1022, 275, 319, 11540, 1411, 372, 3066, 312, 2155, 2876, 6850, 32, 275, 319, 275, 319, 477, 753, 23529, 225, 322, 1477, 1650, 30, 2298, 526, 2080, 275, 319]}
{"line_number": 1747, "line_type": "original", "code": "        return indexOf(str, 0);", "entropy": 1.09765625, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [4.48828125, 0.56591796875, 0.49658203125, 0.013946533203125, 2.7421875, 0.38330078125, 1.14453125, 0.000568389892578125, 0.045928955078125], "tokens": [351, 442, 40635, 26, 466, 30, 225, 34, 293]}
{"line_number": 1747, "line_type": "generated", "code": "\n     * @return the first index of the match, or -1 if no match\n     */\n    public int indexOf(StrMatcher matcher) {\n        return indexOf(matcher, 0);\n    }\n\n    /**\n     * Searches the string builder using the", "entropy": 0.06317138671875, "is_bug_line": false, "sus_score": 0.5, "per_token_entropy": [0.368408203125, 0.75830078125, 0.0038776397705078125, 0.0199432373046875, 0.05072021484375, 0.344482421875, 0.0203094482421875, 0.1666259765625, 0.049835205078125, 0.436279296875, 0.00267791748046875, 0.056884765625, 0.0237884521484375, 6.139278411865234e-05, 0.0112457275390625, 0.2783203125, 0.00907135009765625, 0.138671875, 0.12890625, 0.0280609130859375, 0.0035610198974609375, 0.0005016326904296875, 0.0001468658447265625, 0.00017821788787841797, 0.005001068115234375, 3.0994415283203125e-06, 7.62939453125e-06, 0.00373077392578125, 0.01654052734375, 0.2047119140625, 0.0241546630859375, 0.0007300376892089844, 0.0003266334533691406, 0.00037550926208496094, 7.593631744384766e-05, 0.00035071372985839844, 1.2755393981933594e-05, 0.0018224716186523438, 0.0163116455078125, 0.0003180503845214844, 0.057159423828125, 0.00553131103515625, 0.0019178390502929688, 9.298324584960938e-06, 0.0010089874267578125, -0.0, 2.6702880859375e-05, 0.0005154609680175781, 0.013641357421875, 0.0015239715576171875, 0.028106689453125, 0.0006132125854492188], "tokens": [275, 319, 477, 601, 322, 1932, 1650, 432, 322, 2530, 30, 556, 429, 35, 415, 1289, 2530, 275, 569, 284, 562, 629, 40635, 26, 2007, 11945, 20638, 27, 301, 291, 442, 40635, 26, 16937, 30, 225, 34, 293, 284, 320, 446, 1022, 275, 319, 358, 1928, 2907, 322, 802, 4906, 1471, 322]}
{"line_number": 1761, "line_type": "original", "code": "        startIndex = (startIndex < 0 ? 0 : startIndex);", "entropy": 0.54248046875, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [2.189453125, 5.1171875, 0.0222015380859375, 0.08465576171875, 0.0008783340454101562, 0.00814056396484375, 0.00409698486328125, 0.0001571178436279297, 0.00812530517578125, 0.00125885009765625, 1.9550323486328125e-05, 0.0011224746704101562, 0.01009368896484375, 0.151611328125], "tokens": [351, 23529, 280, 308, 42335, 333, 225, 34, 1018, 225, 34, 499, 23529, 293]}
{"line_number": 1761, "line_type": "generated", "code": "\n     * @param matcher  the matcher to use, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index matched, or -1 if not found\n     */\n    public int", "entropy": 0.0168914794921875, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [0.387939453125, 0.00885009765625, 0.03057861328125, 0.005039215087890625, 0.059722900390625, 0.002170562744140625, 0.0010852813720703125, 0.0004742145538330078, 0.0004906654357910156, 0.001277923583984375, 0.0066680908203125, 0.0014791488647460938, 0.0014219284057617188, 8.559226989746094e-05, 2.3126602172851562e-05, 0.0015287399291992188, 5.9485435485839844e-05, 6.604194641113281e-05, 0.00612640380859375, 0.0005259513854980469, 0.00763702392578125, 0.003200531005859375, 0.00629425048828125, 0.0008063316345214844, 0.0015821456909179688, 0.005756378173828125, 0.005817413330078125, 0.041015625, 0.00461578369140625, 0.01654052734375, 0.0003190040588378906, 0.01227569580078125, 0.0037746429443359375, 3.7789344787597656e-05, 0.00010073184967041016, 0.0005397796630859375, 0.0041046142578125, 0.00968170166015625, 0.0025787353515625, 0.039459228515625, 0.0009446144104003906, 0.0012311935424804688, 0.00019085407257080078, 7.009506225585938e-05, 0.0013828277587890625, 0.006740570068359375, 0.0008301734924316406, 0.025115966796875, 0.1451416015625, 0.01117706298828125, 0.0032939910888671875, 0.0003085136413574219], "tokens": [275, 319, 477, 753, 20638, 225, 322, 20638, 372, 793, 30, 744, 3217, 429, 35, 275, 319, 477, 753, 23529, 225, 322, 1650, 372, 1477, 821, 30, 5535, 1650, 13116, 372, 6731, 275, 319, 477, 601, 322, 1932, 1650, 14995, 30, 556, 429, 35, 415, 646, 2431, 275, 569, 284, 562, 629]}
{"line_number": 1762, "line_type": "original", "code": "        if (str == null || startIndex >= size) {", "entropy": 1.6181640625, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [3.53125, 2.203125, 0.0258331298828125, 4.37109375, 1.3486328125, 0.0074310302734375, 1.28515625, 3.76953125, 1.857421875, 0.403564453125, 0.45458984375, 0.1710205078125], "tokens": [351, 415, 308, 466, 610, 744, 1276, 23529, 2377, 1334, 27, 301]}
{"line_number": 1762, "line_type": "generated", "code": "\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher, int startIndex) {\n        startIndex = (startIndex", "entropy": 0.07330322265625, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [1.6357421875, 0.290771484375, 0.00263214111328125, 0.1737060546875, 0.0003814697265625, 0.00962066650390625, 0.003173828125, 0.006168365478515625, 0.0009069442749023438, 0.0012836456298828125, 0.00623321533203125, 0.00833892822265625, 0.039459228515625, 0.004364013671875, 0.0151519775390625, 0.0002532005310058594, 0.01287841796875, 0.0943603515625, 0.0004050731658935547, 0.00032138824462890625, 0.0009312629699707031, 0.0037174224853515625, 0.01216888427734375, 0.003704071044921875, 0.038909912109375, 0.0017118453979492188, 0.0013265609741210938, 0.00019991397857666016, 2.9087066650390625e-05, 0.00144195556640625, 0.008544921875, 0.00054168701171875, 0.0982666015625, 0.063232421875, 0.044158935546875, 0.004169464111328125, 0.0003991127014160156, 2.3245811462402344e-05, 0.00016772747039794922, 0.0076751708984375, 1.0251998901367188e-05, 1.1801719665527344e-05, 7.033348083496094e-05, 0.00046062469482421875, 5.602836608886719e-05, 0.00037860870361328125, 0.07763671875, 0.134521484375, 0.99658203125, 0.00021660327911376953, 0.005275726318359375, 0.0007452964782714844], "tokens": [275, 319, 477, 753, 23529, 225, 322, 1650, 372, 1477, 821, 30, 5535, 1650, 13116, 372, 6731, 275, 319, 477, 601, 322, 1932, 1650, 14995, 30, 556, 429, 35, 415, 646, 2431, 275, 569, 284, 562, 629, 40635, 26, 2007, 11945, 20638, 30, 629, 23529, 27, 301, 291, 23529, 280, 308, 42335]}
{"line_number": 1765, "line_type": "original", "code": "        int strLen = str.length();", "entropy": 1.61328125, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [5.5078125, 1.306640625, 2.5703125, 0.72802734375, 0.04931640625, 3.853515625, 0.485107421875, 0.0032176971435546875, 0.01505279541015625], "tokens": [351, 629, 596, 5745, 280, 596, 32, 1322, 473]}
{"line_number": 1765, "line_type": "generated", "code": "\n    public int indexOf(StrMatcher matcher, int startIndex) {\n        startIndex = (startIndex < 0? 0 : startIndex);\n        if (matcher == null || startIndex >= size) {\n            return -1;\n        }\n        if (startIndex == ", "entropy": 0.12744140625, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [0.07928466796875, 0.055999755859375, 0.0009121894836425781, 3.218650817871094e-05, 0.00048351287841796875, 0.00821685791015625, 1.0728836059570312e-05, 2.4080276489257812e-05, 0.0001786947250366211, 0.0005621910095214844, 0.00010704994201660156, 0.0004067420959472656, 0.042266845703125, 0.050262451171875, 1.0087890625, 0.00023543834686279297, 0.00566864013671875, 0.0006079673767089844, 0.0010929107666015625, 0.0003094673156738281, 5.841255187988281e-06, 0.0015163421630859375, 0.0005564689636230469, 5.0067901611328125e-05, 0.0004286766052246094, 0.0098876953125, 0.00013113021850585938, 0.0203399658203125, 0.049468994140625, 0.0015230178833007812, 0.14404296875, 0.00670623779296875, 0.00214385986328125, 0.032928466796875, 0.161376953125, 0.017822265625, 0.00284576416015625, 0.032012939453125, 0.0010557174682617188, 0.003566741943359375, 0.00030303001403808594, 0.00037360191345214844, 0.00038361549377441406, 8.07046890258789e-05, 0.004695892333984375, 2.002716064453125e-05, 0.204833984375, 1.3916015625, 0.00614166259765625, 1.36328125, 1.3212890625, 0.59326171875], "tokens": [284, 562, 629, 40635, 26, 2007, 11945, 20638, 30, 629, 23529, 27, 301, 291, 23529, 280, 308, 42335, 333, 225, 34, 1018, 225, 34, 499, 23529, 293, 291, 415, 308, 16937, 610, 744, 1276, 23529, 2377, 1334, 27, 301, 324, 442, 429, 35, 45, 291, 320, 291, 415, 308, 42335, 610, 225]}
{"line_number": 1766, "line_type": "original", "code": "        if (strLen == 1) {", "entropy": 2.13671875, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [5.6796875, 1.712890625, 0.01097869873046875, 6.39453125, 2.68359375, 0.112548828125, 0.003971099853515625, 4.55859375, 0.15966796875, 0.03717041015625], "tokens": [351, 415, 308, 466, 5745, 610, 225, 35, 27, 301]}
{"line_number": 1766, "line_type": "generated", "code": "\n        return indexOf(matcher, startIndex, size);\n    }\n\n    /**\n     * Searches the string builder using the matcher to find the first\n     * match searching from the given index.\n     * <p>\n     * Matchers can be used to perform", "entropy": 0.1243896484375, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [0.880859375, 0.95751953125, 0.5302734375, 0.0292510986328125, 0.12548828125, 0.5078125, 0.0187225341796875, 0.59326171875, 0.2529296875, 0.03839111328125, 0.032501220703125, 0.00113677978515625, 0.08294677734375, 0.0131683349609375, 0.00534820556640625, 1.7404556274414062e-05, 0.0082550048828125, 1.1920928955078125e-07, 8.893013000488281e-05, 0.006103515625, 0.08026123046875, 0.00217437744140625, 0.035736083984375, 0.0016298294067382812, 0.0036449432373046875, 0.002532958984375, 0.00205230712890625, 0.0249481201171875, 0.018890380859375, 0.53564453125, 1.4543533325195312e-05, 0.0160980224609375, 0.07000732421875, 0.59716796875, 0.021881103515625, 0.0386962890625, 0.00843048095703125, 0.70751953125, 0.0207977294921875, 7.152557373046875e-06, 0.147216796875, 0.0006189346313476562, 4.696846008300781e-05, 0.00018036365509033203, 1.811981201171875e-05, 0.0469970703125, 4.291534423828125e-06, 3.612041473388672e-05, 7.987022399902344e-06, 4.756450653076172e-05, 1.5139579772949219e-05, 1.33514404296875e-05], "tokens": [291, 442, 40635, 26, 16937, 30, 23529, 30, 1334, 293, 284, 320, 446, 1022, 275, 319, 358, 1928, 2907, 322, 802, 4906, 1471, 322, 20638, 372, 2290, 322, 1932, 275, 319, 2530, 20286, 645, 322, 2702, 1650, 32, 275, 319, 333, 98, 48, 275, 319, 12253, 483, 883, 526, 1654, 372, 4436]}
{"line_number": 1769, "line_type": "original", "code": "        if (strLen == 0) {", "entropy": 1.6171875, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [4.078125, 3.705078125, 0.032989501953125, 4.25390625, 0.744140625, 1.3212890625, 0.00414276123046875, 1.9111328125, 0.0858154296875, 0.03387451171875], "tokens": [351, 415, 308, 466, 5745, 610, 225, 34, 27, 301]}
{"line_number": 1769, "line_type": "generated", "code": "\n        }\n        int len = size;\n        char[] thisBuf = buffer;\n        while (true) {\n            int index = matcher.isMatch(thisBuf, startIndex, thisBuf, 0, len);\n            if (index < 0)", "entropy": 0.238037109375, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [0.207763671875, 0.28857421875, 0.09234619140625, 1.443359375, 1.0478515625, 0.00579071044921875, 0.62109375, 0.650390625, 0.03167724609375, 0.7353515625, 0.005962371826171875, 0.398681640625, 0.0017642974853515625, 0.0006661415100097656, 0.0035648345947265625, 0.0010089874267578125, 0.1263427734375, 2.12109375, 0.01367950439453125, 0.41796875, 0.0006232261657714844, 0.0112457275390625, 0.137451171875, 0.1697998046875, 0.66455078125, 0.004138946533203125, 0.07745361328125, 0.00048232078552246094, 0.0012235641479492188, 0.003353118896484375, 0.0033721923828125, 0.0165863037109375, 0.0003693103790283203, 0.0001804828643798828, 0.0066986083984375, 0.0128326416015625, 0.8505859375, 0.1544189453125, 0.6025390625, 0.355712890625, 0.0107574462890625, 0.00992584228515625, 0.0946044921875, 0.00771331787109375, 0.1981201171875, 0.004711151123046875, 0.0011463165283203125, 0.0010194778442382812, 0.669921875, 0.0011138916015625, 0.00011706352233886719, 0.088623046875], "tokens": [291, 320, 291, 629, 2069, 280, 1334, 45, 291, 1351, 1178, 458, 7346, 280, 3112, 45, 291, 2218, 308, 1508, 27, 301, 324, 629, 1650, 280, 20638, 32, 297, 3665, 26, 578, 7346, 30, 23529, 30, 458, 7346, 30, 225, 34, 30, 2069, 293, 324, 415, 308, 1055, 333, 225, 34, 27]}
{"line_number": 1772, "line_type": "original", "code": "        if (strLen > size) {", "entropy": 2.45703125, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [3.66015625, 2.595703125, 0.037872314453125, 5.4453125, 1.57421875, 4.01171875, 4.5078125, 0.1787109375, 0.09844970703125], "tokens": [351, 415, 308, 466, 5745, 848, 1334, 27, 301]}
{"line_number": 1772, "line_type": "generated", "code": "\n        return -1;\n    }\n\n    /**\n     * Searches the string builder to find the last reference to the specified character.\n     * \n     * @param ch  the character to find\n     * @return the last index of the character, or -", "entropy": 0.07940673828125, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [0.58251953125, 0.9853515625, 0.0694580078125, 0.0008058547973632812, 0.0010089874267578125, 0.06170654296875, 0.0016269683837890625, 0.158447265625, 0.21337890625, 0.006130218505859375, 4.470348358154297e-05, 0.11053466796875, 3.6954879760742188e-06, 7.104873657226562e-05, 0.018798828125, 0.021942138671875, 0.00238800048828125, 0.478515625, 0.005107879638671875, 0.00310516357421875, 0.151611328125, 0.326904296875, 0.00501251220703125, 0.05621337890625, 0.1134033203125, 0.1124267578125, 0.0084991455078125, 0.003131866455078125, 7.867813110351562e-06, 0.314208984375, 6.67572021484375e-06, 0.0008687973022460938, 0.00019466876983642578, 0.0007920265197753906, 0.0106353759765625, 0.0219879150390625, 0.019012451171875, 0.0016565322875976562, 0.031402587890625, 0.1275634765625, 3.6954879760742188e-06, 5.316734313964844e-05, 0.001247406005859375, 0.01116180419921875, 0.0653076171875, 0.0005450248718261719, 0.00884246826171875, 0.0015010833740234375, 0.0019435882568359375, 0.00679779052734375, 0.004856109619140625, 0.0012273788452148438], "tokens": [291, 442, 429, 35, 45, 284, 320, 446, 1022, 275, 319, 358, 1928, 2907, 322, 802, 4906, 372, 2290, 322, 2401, 4121, 372, 322, 3191, 5341, 32, 275, 319, 5384, 319, 477, 753, 663, 225, 322, 5341, 372, 2290, 275, 319, 477, 601, 322, 2401, 1650, 432, 322, 5341, 30, 556, 429]}
{"line_number": 1775, "line_type": "original", "code": "        char[] thisBuf = buffer;", "entropy": 1.5498046875, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [5.046875, 6.14453125, 0.90380859375, 0.2449951171875, 0.0034809112548828125, 0.002758026123046875, 0.045623779296875, 0.004673004150390625], "tokens": [351, 1351, 1178, 458, 7346, 280, 3112, 45]}
{"line_number": 1775, "line_type": "generated", "code": "\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Searches the string builder to find the last reference to the specified character.\n     * \n     * @param ch  the character to find\n     * @return the last index of the", "entropy": 0.0543212890625, "is_bug_line": false, "sus_score": 0.47140452079103173, "per_token_entropy": [0.09429931640625, 0.041717529296875, 0.07208251953125, 0.0001690387725830078, 0.0193328857421875, 0.0010480880737304688, 0.0011386871337890625, 0.00011491775512695312, 0.001251220703125, 0.0400390625, 0.0008111000061035156, 0.210693359375, 0.1343994140625, 0.01108551025390625, 5.650520324707031e-05, 0.08575439453125, 3.933906555175781e-06, 0.00012218952178955078, 0.0161285400390625, 0.0311737060546875, 0.0031147003173828125, 0.477783203125, 0.004146575927734375, 0.0045928955078125, 0.177001953125, 0.21826171875, 0.0034313201904296875, 0.0506591796875, 0.0723876953125, 0.25537109375, 0.009735107421875, 0.0030670166015625, 1.2993812561035156e-05, 0.329833984375, 6.9141387939453125e-06, 0.0012884140014648438, 0.0006361007690429688, 0.0014333724975585938, 0.011016845703125, 0.0181121826171875, 0.0555419921875, 0.0023517608642578125, 0.035064697265625, 0.11883544921875, 3.933906555175781e-06, 3.3020973205566406e-05, 0.0011377334594726562, 0.023193359375, 0.16259765625, 0.0006847381591796875, 0.0143585205078125, 0.0072479248046875], "tokens": [324, 320, 291, 320, 291, 442, 429, 35, 45, 284, 320, 446, 1022, 275, 319, 358, 1928, 2907, 322, 802, 4906, 372, 2290, 322, 2401, 4121, 372, 322, 3191, 5341, 32, 275, 319, 5384, 319, 477, 753, 663, 225, 322, 5341, 372, 2290, 275, 319, 477, 601, 322, 2401, 1650, 432, 322]}
{"line_number": 1776, "line_type": "original", "code": "        int len = thisBuf.length - strLen;", "entropy": 2.443359375, "is_bug_line": true, "sus_score": 0.47140452079103173, "per_token_entropy": [3.21875, 9.5234375, 5.14453125, 0.62060546875, 3.513671875, 2.126953125, 0.01259613037109375, 0.0012178421020507812, 2.42578125, 1.095703125, 0.59130859375, 1.0556640625], "tokens": [351, 629, 2069, 280, 458, 7346, 32, 1322, 429, 596, 5745, 45]}
{"line_number": 1776, "line_type": "generated", "code": "\n        }\n        return -1;\n    }\n\n    /**\n     * Searches the string builder to find the last reference to the specified character.\n     * \n     * @param ch  the character to find\n     * @return the last index of the character,", "entropy": 0.0533447265625, "is_bug_line": true, "sus_score": 0.47140452079103173, "per_token_entropy": [0.12548828125, 0.0194854736328125, 0.01282501220703125, 0.0007238388061523438, 0.000629425048828125, 9.250640869140625e-05, 0.0008311271667480469, 0.0218963623046875, 0.0008249282836914062, 0.213134765625, 0.122802734375, 0.00986480712890625, 6.031990051269531e-05, 0.07965087890625, 4.0531158447265625e-06, 0.00010800361633300781, 0.0135345458984375, 0.023651123046875, 0.00250244140625, 0.472412109375, 0.003978729248046875, 0.00408172607421875, 0.19140625, 0.2242431640625, 0.00342559814453125, 0.044525146484375, 0.064697265625, 0.271728515625, 0.00939178466796875, 0.003185272216796875, 1.0609626770019531e-05, 0.37353515625, 6.67572021484375e-06, 0.001308441162109375, 0.0006079673767089844, 0.0019931793212890625, 0.011077880859375, 0.0147857666015625, 0.056243896484375, 0.0025119781494140625, 0.03472900390625, 0.133544921875, 4.5299530029296875e-06, 2.968311309814453e-05, 0.0013093948364257812, 0.02203369140625, 0.13916015625, 0.0007119178771972656, 0.0162353515625, 0.006744384765625, 0.006683349609375, 0.00809478759765625], "tokens": [291, 320, 291, 442, 429, 35, 45, 284, 320, 446, 1022, 275, 319, 358, 1928, 2907, 322, 802, 4906, 372, 2290, 322, 2401, 4121, 372, 322, 3191, 5341, 32, 275, 319, 5384, 319, 477, 753, 663, 225, 322, 5341, 372, 2290, 275, 319, 477, 601, 322, 2401, 1650, 432, 322, 5341, 30]}
