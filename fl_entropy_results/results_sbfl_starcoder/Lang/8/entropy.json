{"line_number": 259, "line_type": "original", "code": "                if (tokenLen >= 4) {", "entropy": 1.6689453125, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [4.2734375, 1.9765625, 0.1287841796875, 6.9453125, 0.373046875, 2.416015625, 0.11383056640625, 0.1602783203125, 0.2958984375, 0.00829315185546875], "tokens": [2071, 415, 308, 1956, 5745, 2377, 225, 38, 27, 301]}
{"line_number": 259, "line_type": "generated", "code": "\n            } else {\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + c);\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            // The only characters that need to be escaped are'and", "entropy": 0.40087890625, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [0.3837890625, 1.6650390625, 0.257080078125, 0.51806640625, 0.1768798828125, 1.892578125, 0.12841796875, 0.03094482421875, 0.0887451171875, 0.2335205078125, 0.0008835792541503906, 0.01108551025390625, 0.0015325546264648438, 0.006561279296875, 0.0033435821533203125, 0.2078857421875, 0.0860595703125, 0.2215576171875, 0.0008678436279296875, 0.65576171875, 0.0240936279296875, 1.220703125, 0.282470703125, 0.032379150390625, 0.1895751953125, 0.5419921875, 0.9912109375, 0.254150390625, 0.134521484375, 0.98388671875, 0.65185546875, 0.006458282470703125, 0.204833984375, 0.1669921875, 0.027130126953125, 0.1878662109375, 0.143310546875, 0.004344940185546875, 0.0011873245239257812, 0.418212890625, 1.6650390625, 2.470703125, 0.52685546875, 1.60546875, 0.0021495819091796875, 0.1739501953125, 0.0038661956787109375, 9.810924530029297e-05, 0.15966796875, 0.432373046875, 0.662109375, 0.10260009765625], "tokens": [324, 320, 813, 301, 400, 1422, 537, 12137, 440, 15095, 5257, 2577, 44, 313, 474, 281, 293, 324, 320, 291, 320, 813, 301, 324, 434, 1348, 1098, 12411, 2404, 619, 1344, 32, 324, 4845, 32, 1689, 463, 6945, 895, 1064, 434, 886, 1755, 7125, 688, 1849, 372, 526, 31253, 884, 330, 461]}
{"line_number": 262, "line_type": "original", "code": "                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);", "entropy": 1.24609375, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [5.484375, 10.921875, 0.27197265625, 0.45947265625, 2.2265625, 2.40234375, 0.162841796875, 0.0015583038330078125, 0.01436614990234375, 0.12237548828125, 0.0251007080078125, 0.008453369140625, 0.0233306884765625, 0.0001481771469116211, 0.062164306640625, 0.1982421875, 0.0005545616149902344, 0.002185821533203125, 2.513671875, 0.01328277587890625], "tokens": [4696, 5750, 280, 537, 3717, 6767, 558, 3842, 26, 95, 26223, 30, 345, 9467, 30, 3717, 6767, 32, 15456, 293]}
{"line_number": 262, "line_type": "generated", "code": "\n                } else {\n                    break;\n                }\n                i++;\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            boolean inLiteral = false;\n\n            for (; i < length; i++) {\n               ", "entropy": 0.2017822265625, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [1.2255859375, 0.005779266357421875, 0.130615234375, 0.260009765625, 0.042205810546875, 0.010284423828125, 0.0004394054412841797, 0.006259918212890625, 0.0028324127197265625, 1.1904296875, 0.458984375, 0.04815673828125, 0.2391357421875, 5.424022674560547e-05, 0.25390625, 0.001827239990234375, 0.044097900390625, 0.034759521484375, 0.1173095703125, 0.0880126953125, 0.3935546875, 1.1728515625, 0.1810302734375, 0.06549072265625, 1.2978515625, 0.493408203125, 0.006439208984375, 0.324462890625, 0.6884765625, 0.01788330078125, 0.04443359375, 0.25927734375, 0.0200347900390625, 0.0026378631591796875, 0.38525390625, 0.2298583984375, 0.0292205810546875, 0.066650390625, 0.00013256072998046875, 0.0008878707885742188, 0.0012865066528320312, 0.1778564453125, 0.30419921875, 0.08489990234375, 0.003448486328125, 0.0003609657287597656, 0.0256195068359375, 0.005878448486328125, 0.0322265625, 0.0037994384765625, 0.00012803077697753906, 0.0142974853515625], "tokens": [400, 320, 813, 301, 528, 1626, 45, 400, 320, 400, 595, 3334, 324, 320, 291, 320, 813, 301, 324, 434, 1348, 1098, 12411, 2404, 619, 1344, 32, 324, 4845, 32, 1689, 463, 6945, 895, 1064, 1905, 328, 8208, 280, 901, 45, 1064, 436, 23031, 595, 333, 3104, 45, 595, 1987, 301, 400]}
{"line_number": 264, "line_type": "original", "code": "                break;", "entropy": 3.8828125, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [3.32421875, 8.3203125, 0.0027313232421875], "tokens": [2071, 1626, 45]}
{"line_number": 264, "line_type": "generated", "code": "\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This character is not a pattern letter, so it should be copied\n            // directly to the output buffer.\n            buf.append(c);", "entropy": 0.256103515625, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [0.135986328125, 0.0016574859619140625, 0.040374755859375, 0.11376953125, 0.03436279296875, 0.0157928466796875, 0.0007605552673339844, 0.007266998291015625, 0.0021038055419921875, 0.0110931396484375, 0.00044035911560058594, 0.404052734375, 0.00145721435546875, 0.0606689453125, 0.0258636474609375, 0.06915283203125, 0.059600830078125, 0.1917724609375, 1.12890625, 0.0081787109375, 0.0022525787353515625, 0.341064453125, 0.8984375, 1.2373046875, 0.11883544921875, 0.1282958984375, 0.00948333740234375, 2.818359375, 0.002803802490234375, 1.55078125, 0.00292205810546875, 0.000949859619140625, 0.65673828125, 0.51806640625, 0.00023984909057617188, 0.11566162109375, 0.170166015625, 0.04656982421875, 0.299072265625, 0.276611328125, 5.650520324707031e-05, 2.753734588623047e-05, 0.0012083053588867188, 0.01235198974609375, 0.0005254745483398438], "tokens": [400, 320, 813, 301, 528, 1626, 45, 400, 320, 324, 320, 291, 320, 813, 301, 324, 434, 1348, 5341, 438, 646, 312, 5257, 11692, 30, 1259, 561, 1395, 526, 14668, 324, 434, 7029, 372, 322, 1688, 3112, 32, 324, 4845, 32, 1689, 26, 85, 293]}
{"line_number": 1079, "line_type": "original", "code": "        TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);", "entropy": 0.85009765625, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [2.0546875, 6.828125, 0.0030269622802734375, 2.5390625, 0.0031414031982421875, 0.154541015625, 0.057373046875, 0.145751953125, 0.00177764892578125, 1.1563301086425781e-05, 0.00022351741790771484, 2.849102020263672e-05, 0.0230712890625, 5.08203125, 0.0621337890625, 1.1357421875, 0.0023517608642578125, 0.10076904296875, 0.31884765625, 0.11041259765625, 0.05548095703125, 0.0212249755859375], "tokens": [351, 3717, 6767, 3933, 953, 1202, 280, 537, 3717, 6767, 3933, 953, 26, 10185, 30, 5808, 2429, 30, 1418, 30, 11259, 293]}
{"line_number": 1079, "line_type": "generated", "code": "\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            TimeZone zone = calendar.getTimeZone();\n            if (calendar.get(Calendar.DST_OFFSET) == 0)", "entropy": 0.0863037109375, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [0.33935546875, 0.1448974609375, 0.01025390625, 0.0004494190216064453, 0.06622314453125, 0.00011920928955078125, 0.00018894672393798828, 0.0023956298828125, 0.029815673828125, 0.00608062744140625, 0.01031494140625, 0.0002906322479248047, 0.00157928466796875, 0.0038928985595703125, 0.004024505615234375, 0.0005035400390625, 0.0004024505615234375, 0.000904083251953125, 0.01416778564453125, 0.009368896484375, 0.00022590160369873047, 0.031280517578125, 0.007213592529296875, 0.0010042190551757812, 0.0026073455810546875, 0.102783203125, 0.802734375, 8.678436279296875e-05, 0.394287109375, 0.1002197265625, 0.0246734619140625, 0.0011463165283203125, 0.0005917549133300781, 9.894371032714844e-05, 0.00030803680419921875, 0.1868896484375, 1.2958984375, 0.048797607421875, 0.433837890625, 0.00058746337890625, 0.043670654296875, 0.00324249267578125, 0.00336456298828125, 0.0009241104125976562, 0.00803375244140625, 3.5762786865234375e-07, 0.00762939453125, 0.0002913475036621094, 0.06427001953125, 0.0031261444091796875, 0.00017642974853515625, 0.274169921875], "tokens": [291, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 16600, 14461, 27, 301, 324, 3717, 6767, 10790, 280, 14461, 32, 11957, 6767, 473, 324, 415, 308, 10542, 32, 371, 26, 9389, 32, 28635, 81, 10158, 27, 610, 225, 34, 27]}
{"line_number": 1080, "line_type": "original", "code": "        String value = cTimeZoneDisplayCache.get(key);", "entropy": 1.4912109375, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [1.8427734375, 6.5859375, 3.037109375, 0.390625, 5.875, 0.339111328125, 0.72607421875, 0.00421905517578125, 0.0037174224853515625, 0.00531005859375, 0.00855255126953125, 0.5751953125, 0.004486083984375], "tokens": [351, 892, 786, 280, 281, 26223, 3933, 2597, 32, 371, 26, 678, 293]}
{"line_number": 1080, "line_type": "generated", "code": "        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            TimeZone zone = calendar.getTimeZone();\n            if (zone.useDaylightTime()) {\n                buffer.append(mDaylight);\n            } else {\n                buffer", "entropy": 0.169189453125, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [1.8427734375, 0.9306640625, 0.01136016845703125, 0.04376220703125, 0.01297760009765625, 0.0226287841796875, 0.0025177001953125, 0.0008716583251953125, 0.0037441253662109375, 0.0267181396484375, 0.007625579833984375, 0.0005278587341308594, 0.024932861328125, 0.00865936279296875, 0.0044708251953125, 0.007343292236328125, 0.08636474609375, 0.68798828125, 2.9087066650390625e-05, 0.24267578125, 0.0858154296875, 0.01556396484375, 0.0016946792602539062, 0.000545501708984375, 0.00011420249938964844, 0.0006132125854492188, 0.2239990234375, 1.3642578125, 0.05450439453125, 1.5947265625, 0.4833984375, 0.40283203125, 7.867813110351562e-05, 5.2928924560546875e-05, 5.1975250244140625e-05, 0.1746826171875, 0.00168609619140625, 0.10272216796875, 0.134521484375, 0.00015151500701904297, 0.00017917156219482422, 0.0028705596923828125, 0.1063232421875, 0.0016946792602539062, 1.0251998901367188e-05, 0.0022525787353515625, 0.0195159912109375, 0.0035400390625, 0.03765869140625, 0.0010967254638671875, 0.01160430908203125, 0.0010938644409179688], "tokens": [351, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 16600, 14461, 27, 301, 324, 3717, 6767, 10790, 280, 14461, 32, 11957, 6767, 473, 324, 415, 308, 5634, 32, 539, 6280, 2429, 1043, 1157, 301, 400, 3112, 32, 1689, 26, 95, 6280, 2429, 293, 324, 320, 813, 301, 400, 3112]}
{"line_number": 1081, "line_type": "original", "code": "        if (value == null) {", "entropy": 1.943359375, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [1.94921875, 5.578125, 0.1121826171875, 2.361328125, 0.94091796875, 4.4609375, 0.09552001953125, 0.04888916015625], "tokens": [351, 415, 308, 853, 610, 744, 27, 301]}
{"line_number": 1081, "line_type": "generated", "code": "            if (calendar.getTimeZone().inDaylightTime(calendar.getTime())) {\n                buffer.append(mDaylight);\n            } else {\n                buffer.append(mStandard);\n            }", "entropy": 0.25634765625, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [2.509765625, 2.427734375, 0.11968994140625, 0.73779296875, 0.68212890625, 0.6982421875, 0.0002830028533935547, 0.2578125, 1.4775390625, 0.00013971328735351562, 7.998943328857422e-05, 0.00025534629821777344, 0.0043182373046875, 0.04034423828125, 0.014617919921875, 0.0013799667358398438, 0.00550079345703125, 0.08795166015625, 0.767578125, 0.284423828125, 0.0004963874816894531, 0.0023059844970703125, 0.0015974044799804688, 0.08294677734375, 0.006412506103515625, 0.0003650188446044922, 0.00960540771484375, 0.0960693359375, 0.0018701553344726562, 0.04339599609375, 0.01442718505859375, 0.043304443359375, 0.0025386810302734375, 4.4465065002441406e-05, 0.0001475811004638672, 0.00010883808135986328, 0.0010051727294921875, 0.0001081228256225586, 0.00026345252990722656, 0.081298828125, 0.00524139404296875], "tokens": [1468, 415, 308, 10542, 32, 11957, 6767, 922, 266, 6280, 2429, 1043, 26, 10542, 32, 11957, 5156, 301, 400, 3112, 32, 1689, 26, 95, 6280, 2429, 293, 324, 320, 813, 301, 400, 3112, 32, 1689, 26, 95, 8090, 293, 324, 320]}
{"line_number": 1083, "line_type": "original", "code": "            value = tz.getDisplayName(daylight, style, locale);", "entropy": 1.681640625, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [5.52734375, 10.0, 0.1065673828125, 7.53515625, 0.0711669921875, 0.224609375, 0.1182861328125, 0.0270843505859375, 1.029296875, 0.002017974853515625, 0.0160675048828125, 0.35986328125, 0.00460052490234375, 0.17138671875, 0.0235137939453125], "tokens": [1468, 786, 280, 25932, 32, 371, 12566, 26, 3368, 2429, 30, 1418, 30, 11259, 293]}
{"line_number": 1083, "line_type": "generated", "code": "\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            TimeZone zone = calendar.getTimeZone();\n            int offset = zone.getOffset(calendar.getTimeInMillis());\n            boolean daylight = offset!= zone.getRawOffset();\n            if", "entropy": 0.25732421875, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [0.1846923828125, 0.035858154296875, 0.01261138916015625, 0.00356292724609375, 0.000640869140625, 0.003261566162109375, 0.0190887451171875, 0.024200439453125, 0.0024547576904296875, 0.0938720703125, 0.01047515869140625, 0.0027103424072265625, 0.0210113525390625, 0.124755859375, 1.134765625, 8.237361907958984e-05, 0.5380859375, 0.131103515625, 0.037841796875, 0.002490997314453125, 0.0006489753723144531, 4.0531158447265625e-05, 0.000705718994140625, 0.217529296875, 1.6162109375, 0.74755859375, 0.07708740234375, 0.57861328125, 9.78708267211914e-05, 0.041107177734375, 0.005222320556640625, 0.0022220611572265625, 0.01027679443359375, 0.00016295909881591797, 0.003276824951171875, 0.003421783447265625, 3.0994415283203125e-06, 0.43603515625, 0.27197265625, 1.05859375, 1.44140625, 0.0007171630859375, 0.0144500732421875, 1.2412109375, 0.8330078125, 0.058197021484375, 0.00012123584747314453, 0.452880859375, 0.0003402233123779297, 0.06207275390625, 0.367431640625, 1.453125], "tokens": [291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 16600, 14461, 27, 301, 324, 3717, 6767, 10790, 280, 14461, 32, 11957, 6767, 473, 324, 629, 3401, 280, 10790, 32, 371, 3457, 26, 10542, 32, 11957, 383, 10906, 1035, 324, 1905, 5808, 2429, 280, 3401, 863, 10790, 32, 44898, 3457, 473, 324, 415]}
{"line_number": 1084, "line_type": "original", "code": "            String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);", "entropy": 1.0224609375, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [3.751953125, 2.34375, 3.83203125, 0.2357177734375, 4.52734375, 0.434814453125, 0.10626220703125, 0.0035610198974609375, 0.0076446533203125, 1.220703125, 0.27978515625, 0.00044655799865722656, 0.0889892578125, 0.262939453125, 0.01116180419921875, 0.254638671875, 0.0101165771484375], "tokens": [1468, 892, 9553, 280, 281, 26223, 3933, 2597, 32, 524, 2797, 28772, 26, 678, 30, 786, 293]}
{"line_number": 1084, "line_type": "generated", "code": "\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, int value) {\n            if (value == 1) {\n                buffer.append(mDaylight);\n            } else {\n                buffer.", "entropy": 0.1202392578125, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [0.8681640625, 0.006420135498046875, 0.040008544921875, 0.005573272705078125, 0.001674652099609375, 0.00010216236114501953, 0.0081329345703125, 9.775161743164062e-05, 5.3882598876953125e-05, 0.0003120899200439453, 0.00455474853515625, 0.0006961822509765625, 0.002223968505859375, 5.555152893066406e-05, 0.0005235671997070312, 0.0013494491577148438, 0.0019931793212890625, 9.78708267211914e-05, 2.014636993408203e-05, 0.00012373924255371094, 0.0016984939575195312, 0.000560760498046875, 0.000217437744140625, 0.00637054443359375, 0.04486083984375, 0.0004146099090576172, 0.0012359619140625, 0.42138671875, 0.9248046875, 0.0469970703125, 0.11602783203125, 1.02734375, 0.254638671875, 0.9228515625, 0.009979248046875, 0.002033233642578125, 0.08172607421875, 0.036865234375, 7.939338684082031e-05, 0.0002923011779785156, 0.015716552734375, 0.029693603515625, 1.130859375, 4.76837158203125e-07, 0.0030612945556640625, 0.0235443115234375, 0.00021314620971679688, 0.061614990234375, 0.10723876953125, 0.0269622802734375, 0.0129241943359375, 5.447864532470703e-05], "tokens": [291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 629, 786, 27, 301, 324, 415, 308, 853, 610, 225, 35, 27, 301, 400, 3112, 32, 1689, 26, 95, 6280, 2429, 293, 324, 320, 813, 301, 400, 3112, 32]}
{"line_number": 1085, "line_type": "original", "code": "            if (prior != null) {", "entropy": 2.857421875, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [4.69921875, 3.970703125, 0.063720703125, 12.78125, 1.1240234375, 0.038787841796875, 0.058929443359375, 0.1204833984375], "tokens": [1468, 415, 308, 20621, 863, 744, 27, 301]}
{"line_number": 1085, "line_type": "generated", "code": "\n                    && calendar.get(Calendar.DST_OFFSET)!= 0) {\n                buffer.append(mDaylight);\n            } else {\n                buffer.append(mStandard);\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n       ", "entropy": 0.0748291015625, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [1.638671875, 0.59375, 0.230712890625, 0.046783447265625, 0.053314208984375, 0.0106353759765625, 0.00849151611328125, 0.0023441314697265625, 0.0423583984375, 5.841255187988281e-06, 0.0081939697265625, 0.005832672119140625, 0.1812744140625, 0.074951171875, 0.00872039794921875, 0.2115478515625, 0.0173187255859375, 0.1717529296875, 0.026580810546875, 0.00028395652770996094, 0.0001958608627319336, 0.0013895034790039062, 0.0066375732421875, 0.0006046295166015625, 3.6954879760742188e-06, 0.0025272369384765625, 0.10870361328125, 0.0009164810180664062, 0.065673828125, 0.006290435791015625, 0.02557373046875, 0.0016794204711914062, 8.761882781982422e-05, 3.540515899658203e-05, 6.103515625e-05, 0.00017845630645751953, 4.6133995056152344e-05, 0.0001119375228881836, 0.052490234375, 0.00013124942779541016, 0.02117919921875, 3.921985626220703e-05, 0.232666015625, 0.0137786865234375, 0.0014867782592773438, 0.0001506805419921875, 0.0087890625, 8.71419906616211e-05, 6.842613220214844e-05, 0.0002803802490234375, 0.004344940185546875, 0.0007848739624023438], "tokens": [528, 962, 14461, 32, 371, 26, 9389, 32, 28635, 81, 10158, 27, 863, 225, 34, 27, 301, 400, 3112, 32, 1689, 26, 95, 6280, 2429, 293, 324, 320, 813, 301, 400, 3112, 32, 1689, 26, 95, 8090, 293, 324, 320, 291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291]}
{"line_number": 1089, "line_type": "original", "code": "        return value;", "entropy": 3.484375, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [2.755859375, 7.22265625, 3.78125, 0.175537109375], "tokens": [351, 442, 786, 45]}
{"line_number": 1089, "line_type": "generated", "code": "\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, int value) {\n            buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));\n        }\n    }", "entropy": 0.09246826171875, "is_bug_line": false, "sus_score": 0.4364357804719848, "per_token_entropy": [1.162109375, 0.007549285888671875, 0.0309906005859375, 8.821487426757812e-05, 0.31787109375, 0.024566650390625, 0.0030994415283203125, 0.00029730796813964844, 0.01146697998046875, 9.822845458984375e-05, 9.882450103759766e-05, 0.00045013427734375, 0.004146575927734375, 0.0035533905029296875, 0.002685546875, 0.0001373291015625, 0.0013952255249023438, 0.004669189453125, 0.005268096923828125, 0.00042366981506347656, 6.985664367675781e-05, 0.0002620220184326172, 0.0015974044799804688, 0.0006399154663085938, 0.0005750656127929688, 0.01358795166015625, 0.025482177734375, 0.0004749298095703125, 0.00635528564453125, 0.11376953125, 1.734375, 0.000408172607421875, 0.0019702911376953125, 0.016510009765625, 0.1697998046875, 3.743171691894531e-05, 0.00275421142578125, 0.002674102783203125, 0.01971435546875, 0.00027060508728027344, 0.48828125, 0.0002880096435546875, 0.0029582977294921875, 1.4066696166992188e-05, 0.0002321004867553711, 0.0016775131225585938, 1.3113021850585938e-06, 0.0010690689086914062, 0.416259765625, 0.00023162364959716797, 0.203369140625, 0.0022430419921875], "tokens": [324, 320, 291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 629, 786, 27, 301, 324, 3112, 32, 1689, 26, 11957, 6767, 3933, 26, 5634, 30, 901, 30, 345, 2275, 30, 345, 9467, 876, 291, 320, 284, 320]}
{"line_number": 220, "line_type": "original", "code": "                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));", "entropy": 1.306640625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.9296875, 5.57421875, 0.302001953125, 0.8603515625, 11.359375, 0.7412109375, 9.5367431640625e-06, 0.002044677734375, 0.164306640625, 0.05621337890625, 2.251953125, 0.002349853515625, 0.0003147125244140625, 0.005054473876953125, 0.004802703857421875, 0.00038504600524902344, 0.00064849853515625, 0.2227783203125, 0.03997802734375, 0.002567291259765625, 0.91064453125], "tokens": [2071, 5750, 280, 537, 12038, 342, 587, 14415, 1176, 26, 1613, 1918, 3842, 26, 9389, 32, 30540, 30, 2404, 5745, 876]}
{"line_number": 220, "line_type": "generated", "code": "\n                }\n                break;\n            case '\\'': // escape for text\n                String sub = token.substring(1);\n                if (sub.length() == 0) {\n                    throw new IllegalArgumentException(\"Empty text block\");\n                }\n                rule = new TextRule", "entropy": 0.20263671875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.10137939453125, 0.0012645721435546875, 0.01036834716796875, 0.0017538070678710938, 0.0010843276977539062, 0.057769775390625, 0.65771484375, 0.026123046875, 2.9802322387695312e-05, 0.01502227783203125, 0.86474609375, 0.436767578125, 0.00637054443359375, 0.0706787109375, 0.46826171875, 0.044281005859375, 0.00421142578125, 0.10809326171875, 0.0036640167236328125, 0.0006546974182128906, 9.059906005859375e-06, 0.00018203258514404297, 0.0131378173828125, 0.01486968994140625, 0.052947998046875, 0.0077056884765625, 0.0133514404296875, 4.172325134277344e-06, 0.0084686279296875, 0.00013637542724609375, 0.00887298583984375, 6.854534149169922e-05, 0.4287109375, 0.01021575927734375, 0.001354217529296875, 0.046417236328125, 0.1070556640625, 0.01983642578125, 0.0100250244140625, 0.033538818359375, 1.724609375, 0.6142578125, 1.5341796875, 0.0150146484375, 0.01117706298828125, 0.0007557868957519531, 0.040496826171875, 0.75732421875, 0.0003643035888671875, 0.009552001953125, 2.111328125, 0.059356689453125], "tokens": [400, 320, 400, 1626, 45, 324, 1135, 26271, 950, 434, 15820, 436, 1344, 400, 892, 1361, 280, 2404, 32, 8723, 26, 35, 293, 400, 415, 308, 1113, 32, 1322, 346, 610, 225, 34, 27, 301, 528, 1422, 537, 12137, 440, 2766, 1344, 2163, 724, 400, 320, 400, 5750, 280, 537, 3319, 3842]}
{"line_number": 221, "line_type": "original", "code": "                break;", "entropy": 2.0859375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.21875, 0.0390625, 0.0011434555053710938], "tokens": [2071, 1626, 45]}
{"line_number": 221, "line_type": "generated", "code": "\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + c);\n            }\n\n            rules.add(rule);\n        }\n\n        return new RuleSet(rules.toArray(new Rule[rules.size()]));\n    }\n\n    private Rule selectNumber", "entropy": 0.20361328125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.546875, 0.83251953125, 0.0010986328125, 0.13720703125, 0.1815185546875, 0.0220184326171875, 0.1593017578125, 0.025238037109375, 0.02679443359375, 0.00295257568359375, 0.005649566650390625, 0.0018453598022460938, 0.0208282470703125, 0.009521484375, 0.7763671875, 0.074462890625, 0.072265625, 0.0041351318359375, 0.1661376953125, 1.884765625, 0.05853271484375, 0.1341552734375, 0.08203125, 0.03546142578125, 0.0021800994873046875, 0.2237548828125, 0.001689910888671875, 0.2890625, 0.61865234375, 1.109375, 0.25048828125, 0.169921875, 0.00799560546875, 0.0190887451171875, 0.1927490234375, 0.0134735107421875, 0.0012693405151367188, 0.054901123046875, 0.0146026611328125, 0.010528564453125, 0.0241546630859375, 7.891654968261719e-05, 3.5762786865234375e-06, 0.2841796875, 0.0006852149963378906, 0.09161376953125, 0.0027256011962890625, 0.428466796875, 0.7705078125, 0.71923828125, 0.0232086181640625, 0.0004591941833496094], "tokens": [324, 1244, 44, 400, 1422, 537, 12137, 440, 15095, 5257, 2577, 44, 313, 474, 281, 293, 324, 320, 1064, 7019, 32, 669, 26, 5275, 293, 291, 320, 584, 442, 537, 13708, 885, 26, 7004, 32, 14320, 26, 890, 13708, 77, 7004, 32, 891, 7662, 876, 284, 320, 446, 945, 13708, 2192, 1918]}
{"line_number": 226, "line_type": "original", "code": "                rule = selectNumberRule(Calendar.MINUTE, tokenLen);", "entropy": 1.2939453125, "is_bug_line": false, "sus_score": 0.3216337604513384, "per_token_entropy": [5.26171875, 6.61328125, 0.1102294921875, 2.677734375, 0.9013671875, 0.01438140869140625, 0.01358795166015625, 0.0350341796875, 0.1231689453125, 2.185546875, 0.007694244384765625, 0.06475830078125, 0.00563812255859375, 0.09149169921875], "tokens": [2071, 5750, 280, 2192, 1918, 3842, 26, 9389, 32, 47229, 30, 2404, 5745, 293]}
{"line_number": 226, "line_type": "generated", "code": "\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            mRules.add(rule);\n        }\n\n        if (indexRef[", "entropy": 0.1903076171875, "is_bug_line": false, "sus_score": 0.3216337604513384, "per_token_entropy": [0.1385498046875, 0.00457763671875, 0.1417236328125, 0.026214599609375, 0.09124755859375, 0.1944580078125, 0.001262664794921875, 0.0211029052734375, 0.00289154052734375, 0.0030460357666015625, 0.0112457275390625, 0.024505615234375, 0.025390625, 0.285888671875, 0.003025054931640625, 0.024505615234375, 0.005588531494140625, 0.0006074905395507812, 0.048980712890625, 0.62744140625, 0.00115203857421875, 0.2452392578125, 0.150634765625, 0.02056884765625, 0.10626220703125, 0.03472900390625, 0.055694580078125, 0.003246307373046875, 0.0026683807373046875, 0.0015697479248046875, 0.02008056640625, 0.011627197265625, 0.2178955078125, 0.01224517822265625, 0.05181884765625, 0.001773834228515625, 0.20703125, 1.4912109375, 0.102294921875, 0.041351318359375, 0.0869140625, 0.03515625, 0.0207672119140625, 0.0036487579345703125, 0.276123046875, 0.002048492431640625, 1.0322265625, 2.01953125, 0.11236572265625, 1.8369140625, 0.007648468017578125, 0.0006351470947265625], "tokens": [400, 320, 813, 301, 528, 5750, 280, 537, 892, 8208, 26, 1113, 293, 400, 320, 400, 1626, 45, 324, 1244, 44, 400, 1422, 537, 12137, 440, 15095, 5257, 2577, 44, 313, 474, 2404, 293, 324, 320, 1064, 345, 9154, 32, 669, 26, 5275, 293, 291, 320, 584, 415, 308, 1055, 2084, 77]}
{"line_number": 227, "line_type": "original", "code": "                break;", "entropy": 3.607421875, "is_bug_line": false, "sus_score": 0.3216337604513384, "per_token_entropy": [3.70703125, 7.1015625, 0.0084991455078125], "tokens": [2071, 1626, 45]}
{"line_number": 227, "line_type": "generated", "code": "\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            case'': // whitespace\n                rule = WhitespaceRule.INSTANCE;\n                break;\n            case '(': // comment\n                rule = new CommentRule(token.substring(1, token", "entropy": 0.2313232421875, "is_bug_line": false, "sus_score": 0.3216337604513384, "per_token_entropy": [1.21484375, 0.5166015625, 0.0017805099487304688, 0.06884765625, 0.0153045654296875, 0.006572723388671875, 0.0810546875, 0.04168701171875, 0.059356689453125, 0.07720947265625, 0.0003871917724609375, 0.0295562744140625, 0.003406524658203125, 0.00024437904357910156, 0.0916748046875, 0.54541015625, 0.9599609375, 1.509765625, 0.132080078125, 1.052734375, 0.060821533203125, 0.21826171875, 0.00038313865661621094, 0.375244140625, 6.67572021484375e-06, 0.0241241455078125, 0.00010943412780761719, 0.12335205078125, 0.0065155029296875, 0.00803375244140625, 0.003070831298828125, 0.00023615360260009766, 0.057098388671875, 0.54931640625, 0.65380859375, 1.08203125, 0.015899658203125, 0.5625, 0.043670654296875, 0.41650390625, 0.00112152099609375, 0.50048828125, 0.06829833984375, 0.037872314453125, 0.154541015625, 0.1298828125, 0.4228515625, 0.038604736328125, 7.224082946777344e-05, 0.0120697021484375, 0.051544189453125, 0.0060272216796875], "tokens": [528, 5750, 280, 537, 892, 8208, 26, 1113, 293, 400, 320, 400, 1626, 45, 324, 1135, 330, 14589, 434, 19782, 400, 5750, 280, 2619, 12616, 3842, 32, 12452, 45, 400, 1626, 45, 324, 1135, 330, 16487, 434, 5093, 400, 5750, 280, 537, 14533, 3842, 26, 1956, 32, 8723, 26, 35, 30, 2404]}
{"line_number": 250, "line_type": "original", "code": "                rule = new TextField(Calendar.AM_PM, AmPmStrings);", "entropy": 2.08984375, "is_bug_line": false, "sus_score": 0.29814239699997197, "per_token_entropy": [7.75, 7.046875, 0.456298828125, 1.3095703125, 3.861328125, 0.056610107421875, 0.0276031494140625, 0.02301025390625, 2.701171875, 0.00507354736328125, 0.0010023117065429688, 0.058502197265625, 5.44921875, 8.7738037109375e-05, 3.318359375, 1.375], "tokens": [2071, 5750, 280, 537, 28563, 26, 9389, 32, 2210, 81, 7453, 30, 21469, 32364, 9634, 293]}
{"line_number": 250, "line_type": "generated", "code": "\n        return buf.toString();\n    }\n\n    /**\n     * <p>\n     * Parses the pattern, extracting the tokens and setting up the masks.\n     * </p>\n     *\n     * @param pattern  the pattern to parse\n     * @return the", "entropy": 0.51416015625, "is_bug_line": false, "sus_score": 0.29814239699997197, "per_token_entropy": [0.8359375, 1.2822265625, 0.0288848876953125, 0.0010766983032226562, 0.0094757080078125, 0.0225067138671875, 0.0169525146484375, 0.000545501708984375, 0.361083984375, 0.1871337890625, 0.0078582763671875, 0.00016105175018310547, 0.1048583984375, 0.0005249977111816406, 0.0006422996520996094, 2.041015625, 0.00015270709991455078, 1.5908203125, 0.71923828125, 0.7822265625, 1.455078125, 1.3671875, 1.345703125, 1.689453125, 1.58203125, 1.9658203125, 1.1044921875, 0.24853515625, 2.611328125, 0.67333984375, 0.09979248046875, 0.0010995864868164062, 0.334228515625, 0.00015270709991455078, 0.003452301025390625, 0.0010633468627929688, 0.0294647216796875, 0.0772705078125, 0.0005021095275878906, 0.0177459716796875, 0.057403564453125, 0.0121002197265625, 0.08978271484375, 0.0280914306640625, 0.0162353515625, 0.68359375, 0.03631591796875, 0.7783203125, 0.429443359375, 0.0049591064453125, 0.7177734375, 1.275390625], "tokens": [291, 442, 4845, 32, 3108, 473, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 44280, 322, 5257, 30, 42487, 322, 7937, 461, 5748, 973, 322, 33406, 32, 275, 319, 576, 98, 48, 275, 319, 275, 319, 477, 753, 5257, 225, 322, 5257, 372, 3185, 275, 319, 477, 601, 322]}
{"line_number": 251, "line_type": "original", "code": "                break;", "entropy": 4.3125, "is_bug_line": false, "sus_score": 0.29814239699997197, "per_token_entropy": [7.40234375, 5.51953125, 0.018585205078125], "tokens": [2071, 1626, 45]}
{"line_number": 251, "line_type": "generated", "code": "\n        while (i < pattern.length()) {\n            char c = pattern.charAt(i++);\n            if (c == '\\'') {\n                // handle quoted strings\n                int j = i;\n                while (j < pattern.length()) {\n                    j++;", "entropy": 0.2724609375, "is_bug_line": false, "sus_score": 0.29814239699997197, "per_token_entropy": [0.384765625, 1.06640625, 0.03912353515625, 0.039703369140625, 0.38330078125, 0.01219940185546875, 0.0019741058349609375, 3.1948089599609375e-05, 0.1522216796875, 0.0011157989501953125, 0.022308349609375, 0.0093231201171875, 0.2880859375, 0.0008668899536132812, 0.00018215179443359375, 2.193450927734375e-05, 8.463859558105469e-06, 5.2094459533691406e-05, 0.00015425682067871094, 0.277587890625, 0.498779296875, 0.342041015625, 0.06854248046875, 0.01568603515625, 0.251220703125, 0.15087890625, 0.002719879150390625, 0.001239776611328125, 0.265869140625, 1.03125, 1.04296875, 1.033203125, 1.8916015625, 0.0205841064453125, 1.078125, 0.391357421875, 0.007625579833984375, 0.05572509765625, 0.0178070068359375, 0.0180511474609375, 0.1240234375, 0.0023708343505859375, 0.8271484375, 0.0017518997192382812, 0.0002529621124267578, 8.344650268554688e-06, 1.3113021850585938e-05, 0.0271453857421875, 0.00016820430755615234, 0.0031070709228515625, 1.876953125, 0.4345703125], "tokens": [291, 2218, 308, 91, 333, 5257, 32, 1322, 1157, 301, 324, 1351, 281, 280, 5257, 32, 15611, 26, 91, 24907, 324, 415, 308, 85, 610, 26271, 683, 301, 400, 434, 2887, 34210, 5852, 400, 629, 594, 280, 595, 45, 400, 2218, 308, 92, 333, 5257, 32, 1322, 1157, 301, 528, 594, 3334]}
{"line_number": 359, "line_type": "original", "code": "            return new UnpaddedNumberField(field);", "entropy": 2.265625, "is_bug_line": false, "sus_score": 0.2519763153394848, "per_token_entropy": [7.9296875, 3.046875, 3.27734375, 6.3203125, 0.01110076904296875, 0.65771484375, 0.0186309814453125, 0.047119140625, 0.52490234375, 0.82958984375], "tokens": [1468, 442, 537, 1683, 34294, 1918, 1176, 26, 1495, 293]}
{"line_number": 359, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2519763153394848, "per_token_entropy": [], "tokens": []}
{"line_number": 361, "line_type": "original", "code": "            return new TwoDigitNumberField(field);", "entropy": 3.02734375, "is_bug_line": false, "sus_score": 0.23145502494313785, "per_token_entropy": [6.38671875, 5.07421875, 2.439453125, 8.640625, 0.1585693359375, 4.71484375, 0.52197265625, 0.1578369140625, 1.19140625, 0.98095703125], "tokens": [1468, 442, 537, 16510, 21530, 1918, 1176, 26, 1495, 293]}
{"line_number": 361, "line_type": "generated", "code": "\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar)\n     */\n    @Override\n    public String format(Calendar calendar) {\n        return applyRules(calendar, new StringBuffer(mMaxLength", "entropy": 0.045074462890625, "is_bug_line": false, "sus_score": 0.23145502494313785, "per_token_entropy": [1.0732421875, 0.44873046875, 0.05267333984375, 0.0201568603515625, 0.00865936279296875, 0.0001577138900756836, 0.003505706787109375, 3.1113624572753906e-05, 0.0013132095336914062, 1.1682510375976562e-05, 0.0014286041259765625, 0.0005750656127929688, 6.330013275146484e-05, 0.0003986358642578125, 1.2159347534179688e-05, 0.01338958740234375, 0.0006909370422363281, 0.0016469955444335938, 0.132080078125, 0.006099700927734375, 0.01593017578125, 0.00029850006103515625, 0.0021457672119140625, 0.0020904541015625, 0.0253753662109375, 0.048065185546875, 0.1241455078125, 0.0225982666015625, 0.05328369140625, 0.01153564453125, 0.0003910064697265625, 0.013153076171875, 0.003414154052734375, 0.0029277801513671875, 0.00024890899658203125, 0.00021731853485107422, 0.002506256103515625, 0.0667724609375, 0.00447845458984375, 0.0008449554443359375, 0.0277099609375, 0.125732421875, 0.0169677734375, 8.857250213623047e-05, 0.0005736351013183594, 0.0007872581481933594, 0.00215911865234375, 0.00212860107421875, 0.00032401084899902344, 0.0005521774291992188, 0.0013189315795898438, 2.8133392333984375e-05], "tokens": [275, 319, 477, 2970, 1086, 32, 2104, 32, 8369, 32, 1581, 37, 32, 1003, 32, 1547, 14384, 21, 1643, 26, 1859, 32, 1040, 32, 9389, 27, 275, 569, 284, 477, 1788, 284, 562, 892, 2179, 26, 9389, 14461, 27, 301, 291, 442, 4871, 9154, 26, 10542, 30, 537, 21933, 26, 95, 25949]}
{"line_number": 312, "line_type": "original", "code": "                    buf.append(c);", "entropy": 2.494140625, "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [8.1640625, 8.90625, 0.052459716796875, 0.0237884521484375, 0.14501953125, 0.1617431640625, 0.0034732818603515625], "tokens": [4696, 4845, 32, 1689, 26, 85, 293]}
{"line_number": 312, "line_type": "generated", "code": "\n        default:\n            throw new IllegalArgumentException(\"Illegal padding: \" + padding);\n        }\n    }\n\n    /**\n     * <p>Gets an appropriate rule for the padding required.</p>\n     *\n     * @param field  the field to get a rule for", "entropy": 0.1776123046875, "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [0.24658203125, 0.59423828125, 0.0008683204650878906, 0.0406494140625, 0.57568359375, 0.0083465576171875, 0.1832275390625, 0.2197265625, 1.3212890625, 1.7421875, 0.071044921875, 0.0014219284057617188, 0.0047149658203125, 0.007251739501953125, 0.01441192626953125, 0.0114288330078125, 0.0002961158752441406, 0.01262664794921875, 0.0017805099487304688, 0.46826171875, 0.2509765625, 0.00893402099609375, 0.00035500526428222656, 0.064697265625, 6.73532485961914e-05, 0.0005970001220703125, 1.0068359375, 0.32568359375, 0.0268096923828125, 0.06689453125, 0.055023193359375, 0.068115234375, 1.1669921875, 0.0178680419921875, 0.046783447265625, 4.9233436584472656e-05, 0.0002200603485107422, 0.00039768218994140625, 0.00081634521484375, 0.00801849365234375, 0.0004496574401855469, 0.0482177734375, 0.0017900466918945312, 0.51123046875, 0.01219940185546875, 0.0010547637939453125, 0.00614166259765625, 0.0074462890625, 0.0010194778442382812, 0.0025463104248046875, 0.0004944801330566406, 0.0004954338073730469], "tokens": [291, 1244, 44, 324, 1422, 537, 12137, 440, 15095, 3714, 44, 313, 474, 3714, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 600, 9136, 5750, 436, 322, 3714, 2129, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 1600, 225, 322, 1600, 372, 622, 312, 5750, 436]}
{"line_number": 313, "line_type": "original", "code": "                    i++;", "entropy": 7.09375, "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [9.1328125, 10.4375, 1.703125], "tokens": [4696, 595, 3334]}
{"line_number": 313, "line_type": "generated", "code": "\n        }\n    }\n\n    /**\n     * <p>Gets an appropriate rule for the padding required.</p>\n     *\n     * @param field  the field to get a rule for\n     * @param padding  the padding required\n     * @return a new", "entropy": 0.10577392578125, "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [0.447021484375, 0.01123809814453125, 0.36474609375, 0.0018491744995117188, 0.53076171875, 0.260986328125, 0.013519287109375, 0.00023925304412841797, 0.05914306640625, 9.202957153320312e-05, 0.0004658699035644531, 1.2958984375, 0.4150390625, 0.031890869140625, 0.062042236328125, 0.08203125, 0.08544921875, 0.75927734375, 0.0267181396484375, 0.0458984375, 4.398822784423828e-05, 0.00018393993377685547, 0.0004448890686035156, 0.00032448768615722656, 0.00855255126953125, 0.0014791488647460938, 0.0921630859375, 0.00284576416015625, 0.5341796875, 0.0185546875, 0.0008378028869628906, 0.00438690185546875, 0.005970001220703125, 0.001438140869140625, 0.002376556396484375, 0.0006284713745117188, 0.0004010200500488281, 0.004291534423828125, 0.00020956993103027344, 0.0008249282836914062, 0.01763916015625, 0.074462890625, 0.011077880859375, 0.002834320068359375, 0.0028400421142578125, 0.03216552734375, 0.0169525146484375, 0.0001786947250366211, 0.0037174224853515625, 0.153564453125, 0.007617950439453125, 0.0013208389282226562], "tokens": [291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 600, 9136, 5750, 436, 322, 3714, 2129, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 1600, 225, 322, 1600, 372, 622, 312, 5750, 436, 275, 319, 477, 753, 3714, 225, 322, 3714, 2129, 275, 319, 477, 601, 312, 537]}
{"line_number": 317, "line_type": "original", "code": "            }", "entropy": 4.90234375, "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [8.3828125, 1.423828125], "tokens": [1468, 320]}
{"line_number": 317, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.21997067253202995, "per_token_entropy": [], "tokens": []}
