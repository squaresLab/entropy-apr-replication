{"line_number": 250, "line_type": "original", "code": "        Date date= parse(source, new ParsePosition(0));", "entropy": 1.9052734375, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [3.353515625, 6.88671875, 5.1171875, 0.281982421875, 2.896484375, 1.00390625, 2.896484375, 1.2392578125, 2.765625, 0.060546875, 1.7881393432617188e-05, 0.0027008056640625, 0.135986328125, 0.0296630859375], "tokens": [351, 2821, 2340, 47, 3185, 26, 1855, 30, 537, 8661, 2731, 26, 34, 876]}
{"line_number": 250, "line_type": "generated", "code": "\n     */\n    private void escape(StringBuilder regex, String value) {\n        for(int i=0; i<value.length(); i++) {\n            char ch= value.charAt(i);\n            switch(ch) {\n                case '.':\n               ", "entropy": 0.1895751953125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.399658203125, 0.1180419921875, 0.019378662109375, 0.34423828125, 0.474365234375, 1.4853515625, 0.69677734375, 0.1966552734375, 0.004123687744140625, 0.0011987686157226562, 0.70751953125, 0.005939483642578125, 0.032440185546875, 0.005645751953125, 0.043487548828125, 1.1962890625, 0.285400390625, 0.07147216796875, 0.047821044921875, 0.0048980712890625, 0.0994873046875, 0.032989501953125, 0.150390625, 0.0303497314453125, 0.0175018310546875, 0.00011301040649414062, 0.00014495849609375, 0.004451751708984375, 0.53466796875, 0.0202789306640625, 0.0016107559204101562, 0.0174560546875, 0.040679931640625, 0.345458984375, 0.019927978515625, 0.05780029296875, 4.303455352783203e-05, 3.516674041748047e-05, 7.021427154541016e-05, 0.00012302398681640625, 0.0006642341613769531, 0.055755615234375, 0.63330078125, 0.0736083984375, 0.004772186279296875, 0.0078582763671875, 0.0022487640380859375, 0.303955078125, 0.037994384765625, 1.0185546875, 4.9114227294921875e-05, 0.205322265625], "tokens": [275, 569, 284, 945, 763, 15820, 26, 20884, 9667, 30, 892, 786, 27, 301, 291, 436, 26, 410, 595, 47, 34, 45, 595, 46, 853, 32, 1322, 473, 595, 1987, 301, 324, 1351, 663, 47, 786, 32, 15611, 26, 91, 293, 324, 3578, 26, 380, 27, 301, 400, 1135, 5608, 950, 400]}
{"line_number": 251, "line_type": "original", "code": "        if(date==null) {", "entropy": 2.306640625, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [3.0859375, 2.17578125, 0.9736328125, 7.0, 4.17578125, 0.59423828125, 0.33056640625, 0.123046875], "tokens": [351, 415, 26, 770, 379, 1693, 27, 301]}
{"line_number": 251, "line_type": "generated", "code": "\n     */\n    private void escapeRegex(StringBuilder regex, String value, boolean unquote) {\n        if(value.length() == 0) {\n            regex.append(\"(?:''", "entropy": 0.45361328125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.482421875, 0.1900634765625, 0.018890380859375, 0.361083984375, 0.5263671875, 1.4814453125, 0.96435546875, 0.03350830078125, 0.1734619140625, 0.0027866363525390625, 0.0009822845458984375, 0.1650390625, 0.0029048919677734375, 0.01345062255859375, 0.02203369140625, 0.005786895751953125, 0.004024505615234375, 0.016357421875, 0.006702423095703125, 0.066650390625, 2.048828125, 0.2406005859375, 0.378662109375, 0.89306640625, 1.0390625, 1.748046875, 0.6416015625, 0.0235748291015625, 0.08843994140625, 0.0589599609375, 0.00800323486328125, 0.0433349609375, 0.422607421875, 0.0002589225769042969, 0.0009174346923828125, 0.7646484375, 1.462890625, 2.83984375], "tokens": [275, 569, 284, 945, 763, 15820, 10851, 26, 20884, 9667, 30, 892, 786, 30, 1905, 707, 7345, 27, 301, 291, 415, 26, 853, 32, 1322, 346, 610, 225, 34, 27, 301, 324, 9667, 32, 1689, 440, 18470, 2699]}
{"line_number": 260, "line_type": "original", "code": "        return date;", "entropy": 5.0, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [2.931640625, 4.44921875, 10.3046875, 2.3125], "tokens": [351, 442, 2340, 45]}
{"line_number": 260, "line_type": "generated", "code": "\n                }\n            } else {\n                wasWhite= false;\n                regex.append(c);\n            }\n        }\n        return regex;\n    }\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param", "entropy": 0.181396484375, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [1.2080078125, 0.0252685546875, 0.1279296875, 0.00797271728515625, 0.181396484375, 0.07940673828125, 0.055084228515625, 0.416015625, 2.4199485778808594e-05, 0.0021991729736328125, 0.004390716552734375, 0.0005559921264648438, 0.2237548828125, 1.49609375, 0.0007648468017578125, 6.80685043334961e-05, 0.052642822265625, 0.07733154296875, 0.0167999267578125, 0.2047119140625, 0.0010089874267578125, 0.03875732421875, 0.0013103485107421875, 0.11859130859375, 0.123779296875, 0.001392364501953125, 0.003833770751953125, 0.0278778076171875, 0.0010776519775390625, 0.246337890625, 0.216064453125, 0.01204681396484375, 0.00013959407806396484, 2.24609375, 0.021392822265625, 0.41455078125, 0.12091064453125, 0.10418701171875, 0.88720703125, 0.0159149169921875, 0.1688232421875, 0.0011577606201171875, 0.043609619140625, 0.0025119781494140625, 0.31640625, 0.015869140625, 0.0533447265625, 0.0152587890625, 0.01277923583984375, 0.0002701282501220703, 0.005680084228515625, 0.01183319091796875], "tokens": [400, 320, 324, 320, 813, 301, 400, 1597, 11075, 47, 901, 45, 400, 9667, 32, 1689, 26, 85, 293, 324, 320, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829, 1991, 10605, 6101, 275, 319, 477, 753, 9667, 886, 8050, 9667, 275, 319, 477, 753]}
{"line_number": 276, "line_type": "original", "code": "        int offset= pos.getIndex();", "entropy": 3.498046875, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [4.8515625, 7.8203125, 5.87890625, 0.08544921875, 7.3046875, 1.7177734375, 0.1015625, 0.220703125], "tokens": [351, 629, 3401, 47, 3400, 32, 27829, 473]}
{"line_number": 276, "line_type": "generated", "code": "\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @return The <code>", "entropy": 0.1353759765625, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.81884765625, 0.5537109375, 0.051300048828125, 0.0244598388671875, 0.00022399425506591797, 1.609325408935547e-05, 0.0318603515625, 0.0133209228515625, 0.0019235610961914062, 0.010589599609375, 0.0003745555877685547, 0.021575927734375, 0.0242767333984375, 0.00035190582275390625, 0.0021820068359375, 0.010406494140625, 0.0008182525634765625, 0.2232666015625, 0.2166748046875, 0.01110076904296875, 6.520748138427734e-05, 2.3046875, 0.0386962890625, 0.36767578125, 0.0662841796875, 0.08477783203125, 0.5576171875, 0.0178985595703125, 0.168701171875, 0.001056671142578125, 0.0338134765625, 0.00415802001953125, 0.317138671875, 0.016143798828125, 0.08050537109375, 0.01552581787109375, 0.0182342529296875, 0.0006861686706542969, 0.00274658203125, 0.02520751953125, 0.34130859375, 0.00821685791015625, 0.0145721435546875, 0.039703369140625, 0.011322021484375, 0.0023517608642578125, 0.00283050537109375, 0.429443359375, 0.0060577392578125, 0.044464111328125, 0.0005474090576171875, 0.00010120868682861328], "tokens": [324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829, 1991, 10605, 6101, 275, 319, 477, 753, 9667, 886, 8050, 9667, 275, 319, 477, 753, 786, 886, 1914, 1600, 275, 319, 477, 601, 886, 333, 687, 48]}
{"line_number": 277, "line_type": "original", "code": "        Matcher matcher= parsePattern.matcher(source.substring(offset));", "entropy": 2.181640625, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [5.5546875, 12.2265625, 1.853515625, 0.28076171875, 4.75, 0.146728515625, 0.0259552001953125, 0.0007166862487792969, 0.08935546875, 3.5234375, 3.1640625, 0.2081298828125, 0.0025806427001953125, 0.60986328125, 0.28564453125], "tokens": [351, 33128, 20638, 47, 3185, 5516, 32, 16937, 26, 1855, 32, 8723, 26, 2881, 876]}
{"line_number": 277, "line_type": "generated", "code": "\n                break;\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * Strategy interface.\n     */\n    private static interface Strategy {\n        /**\n         * Set the calendar field for this strategy.\n         * @param parser", "entropy": 0.3623046875, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.82275390625, 0.5859375, 0.000995635986328125, 0.026275634765625, 0.56396484375, 0.0220184326171875, 0.01213836669921875, 0.0001684427261352539, 1.633167266845703e-05, 0.0255279541015625, 0.007671356201171875, 0.0015163421630859375, 0.00893402099609375, 0.00020647048950195312, 0.0274505615234375, 0.0199737548828125, 0.0003161430358886719, 0.00193023681640625, 0.00827789306640625, 0.0008897781372070312, 0.1954345703125, 0.2144775390625, 0.01044464111328125, 5.733966827392578e-05, 3.265625, 0.92724609375, 0.90771484375, 0.0849609375, 0.339599609375, 0.003398895263671875, 0.39990234375, 0.7705078125, 0.07275390625, 0.0012378692626953125, 0.09783935546875, 0.35107421875, 0.59814453125, 0.0148162841796875, 7.927417755126953e-05, 0.9091796875, 0.36767578125, 0.87158203125, 1.2548828125, 2.341796875, 1.673828125, 0.287109375, 0.2454833984375, 0.0166473388671875, 0.007480621337890625, 0.155029296875, 0.0006036758422851562, 0.327392578125], "tokens": [400, 1626, 45, 324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 39243, 2568, 32, 275, 569, 284, 945, 907, 2568, 39243, 301, 291, 1022, 276, 319, 1756, 322, 14461, 1600, 436, 458, 13689, 32, 276, 319, 477, 753, 4118]}
{"line_number": 278, "line_type": "original", "code": "        if(!matcher.lookingAt()) {", "entropy": 2.28515625, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [4.859375, 4.546875, 2.4296875, 5.7890625, 0.05059814453125, 2.638671875, 0.00022494792938232422, 0.09515380859375, 0.1470947265625], "tokens": [351, 415, 3836, 16937, 32, 44535, 1076, 1157, 301]}
{"line_number": 278, "line_type": "generated", "code": "\n                break;\n            default:\n                break;\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * Add a strategy to the list\n     * @param strategy The strategy to add\n     */\n    private void addStrategy", "entropy": 0.294677734375, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.98876953125, 0.447265625, 0.001262664794921875, 0.034698486328125, 1.66796875, 0.004940032958984375, 0.11029052734375, 0.265869140625, 0.0003826618194580078, 0.01554107666015625, 0.0025463104248046875, 0.0258331298828125, 0.01056671142578125, 0.00022494792938232422, 1.704692840576172e-05, 0.03143310546875, 0.00902557373046875, 0.0013170242309570312, 0.0109405517578125, 0.0005002021789550781, 0.031219482421875, 0.0205841064453125, 0.0003261566162109375, 0.0016832351684570312, 0.007778167724609375, 0.0009183883666992188, 0.220458984375, 0.231689453125, 0.01092529296875, 5.543231964111328e-05, 3.0, 0.5966796875, 0.8662109375, 0.669921875, 0.377685546875, 1.4794921875, 1.3154296875, 0.00867462158203125, 0.04803466796875, 0.0041351318359375, 0.52587890625, 0.1968994140625, 0.2457275390625, 0.482666015625, 0.054931640625, 0.087646484375, 0.486328125, 0.006824493408203125, 0.63427734375, 0.0677490234375, 0.013275146484375, 0.00658416748046875], "tokens": [400, 1626, 45, 324, 1244, 44, 400, 1626, 45, 324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 2222, 312, 13689, 372, 322, 1149, 275, 319, 477, 753, 13689, 886, 13689, 372, 1015, 275, 569, 284, 945, 763, 1015, 8089]}
{"line_number": 282, "line_type": "original", "code": "        Calendar cal= Calendar.getInstance(timeZone, locale);", "entropy": 2.275390625, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [5.9375, 12.75, 3.36328125, 0.230224609375, 0.5634765625, 0.0042572021484375, 0.00891876220703125, 0.425537109375, 5.8671875, 0.027618408203125, 0.353271484375, 0.038665771484375, 0.01190948486328125], "tokens": [351, 16600, 2182, 47, 16600, 32, 7426, 26, 1003, 6767, 30, 11259, 293]}
{"line_number": 282, "line_type": "generated", "code": "\n                break;\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @param un", "entropy": 0.1668701171875, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.74169921875, 0.58544921875, 0.00107574462890625, 0.0333251953125, 0.56689453125, 0.0306854248046875, 0.0069122314453125, 0.0002071857452392578, 1.9431114196777344e-05, 0.01934814453125, 0.003753662109375, 0.0009198188781738281, 0.0105438232421875, 0.0002841949462890625, 0.0250396728515625, 0.018798828125, 0.00029730796813964844, 0.002017974853515625, 0.0091094970703125, 0.0009965896606445312, 0.2222900390625, 0.23193359375, 0.01215362548828125, 4.220008850097656e-05, 2.197265625, 0.036529541015625, 0.3828125, 0.07708740234375, 0.08929443359375, 0.7841796875, 0.0166168212890625, 0.15966796875, 0.0007309913635253906, 0.028045654296875, 0.0029621124267578125, 0.319580078125, 0.0173187255859375, 0.0716552734375, 0.01500701904296875, 0.01702880859375, 0.0004963874816894531, 0.0016193389892578125, 0.0168914794921875, 0.361083984375, 0.0088043212890625, 0.014373779296875, 0.04559326171875, 0.01136016845703125, 0.002349853515625, 0.002071380615234375, 1.1162109375, 0.35546875], "tokens": [400, 1626, 45, 324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829, 1991, 10605, 6101, 275, 319, 477, 753, 9667, 886, 8050, 9667, 275, 319, 477, 753, 786, 886, 1914, 1600, 275, 319, 477, 753, 707]}
{"line_number": 283, "line_type": "original", "code": "        cal.clear();", "entropy": 4.17578125, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [5.953125, 11.375, 0.1939697265625, 3.283203125, 0.0626220703125], "tokens": [351, 2182, 32, 3815, 473]}
{"line_number": 283, "line_type": "generated", "code": "\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @param unquote If true", "entropy": 0.1474609375, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.70458984375, 0.23779296875, 0.03643798828125, 0.00836181640625, 0.00018274784088134766, 1.9073486328125e-05, 0.0295257568359375, 0.0047760009765625, 0.0010595321655273438, 0.00959014892578125, 0.0003020763397216797, 0.01522064208984375, 0.0224456787109375, 0.00031065940856933594, 0.00203704833984375, 0.005496978759765625, 0.0009527206420898438, 0.227783203125, 0.25390625, 0.01143646240234375, 4.5299530029296875e-05, 2.13671875, 0.034088134765625, 0.405517578125, 0.0867919921875, 0.10321044921875, 0.73583984375, 0.015899658203125, 0.1678466796875, 0.00074005126953125, 0.02777099609375, 0.003269195556640625, 0.299072265625, 0.0164947509765625, 0.0716552734375, 0.0155792236328125, 0.0169830322265625, 0.0005693435668945312, 0.0012922286987304688, 0.0179595947265625, 0.34619140625, 0.00830078125, 0.01444244384765625, 0.04339599609375, 0.01215362548828125, 0.0023860931396484375, 0.0014486312866210938, 1.1162109375, 0.372802734375, 0.0094146728515625, 0.0123443603515625, 0.0007376670837402344], "tokens": [324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829, 1991, 10605, 6101, 275, 319, 477, 753, 9667, 886, 8050, 9667, 275, 319, 477, 753, 786, 886, 1914, 1600, 275, 319, 477, 753, 707, 7345, 1670, 861]}
{"line_number": 285, "line_type": "original", "code": "        for(int i=0; i<strategies.length;) {", "entropy": 1.923828125, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [6.97265625, 8.859375, 0.185302734375, 0.98828125, 3.443359375, 0.150634765625, 2.41796875, 0.053131103515625, 0.1322021484375, 0.08538818359375, 1.73046875, 0.016876220703125, 0.01374053955078125, 0.003360748291015625, 5.68359375, 0.050262451171875], "tokens": [351, 436, 26, 410, 595, 47, 34, 45, 595, 46, 466, 21412, 32, 1322, 21288, 301]}
{"line_number": 285, "line_type": "generated", "code": "\n                regex.append('\\\\');\n                break;\n            default:\n                break;\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * A strategy to parse a field\n     */\n    private static class Strategy {\n        /**", "entropy": 0.368408203125, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.67626953125, 1.486328125, 0.001071929931640625, 0.0013246536254882812, 0.521484375, 0.055328369140625, 0.556640625, 0.09991455078125, 0.0010461807250976562, 0.045074462890625, 1.623046875, 0.00701141357421875, 0.0703125, 0.1513671875, 0.00023281574249267578, 0.0162506103515625, 0.0018396377563476562, 0.0132293701171875, 0.003986358642578125, 7.426738739013672e-05, 9.059906005859375e-06, 0.0005774497985839844, 0.0014019012451171875, 0.00013685226440429688, 0.01134490966796875, 0.00042748451232910156, 0.02423095703125, 0.0178375244140625, 0.00027751922607421875, 0.0015516281127929688, 0.00920867919921875, 0.0011920928955078125, 0.31884765625, 0.28857421875, 0.015594482421875, 4.935264587402344e-05, 2.978515625, 0.3583984375, 2.662109375, 0.65673828125, 0.61279296875, 1.0869140625, 1.7578125, 0.21630859375, 0.006191253662109375, 0.3935546875, 0.460693359375, 0.85791015625, 0.0186004638671875, 0.0704345703125, 0.51318359375, 0.489013671875], "tokens": [400, 9667, 32, 1689, 40348, 895, 400, 1626, 45, 324, 1244, 44, 400, 1626, 45, 324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 399, 13689, 372, 3185, 312, 1600, 275, 569, 284, 945, 907, 443, 39243, 301, 291, 1022]}
{"line_number": 286, "line_type": "original", "code": "            Strategy strategy= strategies[i++];", "entropy": 4.31640625, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [6.8828125, 16.03125, 2.24609375, 0.12481689453125, 1.62109375, 0.06756591796875, 1.2958984375, 6.265625], "tokens": [1468, 39243, 13689, 47, 35678, 77, 91, 31783]}
{"line_number": 286, "line_type": "generated", "code": "\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @return The <code>", "entropy": 0.130615234375, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.88427734375, 0.2427978515625, 0.059356689453125, 0.01010894775390625, 0.00022721290588378906, 2.849102020263672e-05, 0.04132080078125, 0.00669097900390625, 0.0013322830200195312, 0.01207733154296875, 0.0005674362182617188, 0.017303466796875, 0.019989013671875, 0.0003643035888671875, 0.002044677734375, 0.00537109375, 0.0008783340454101562, 0.290283203125, 0.261962890625, 0.0120086669921875, 4.267692565917969e-05, 1.99609375, 0.035675048828125, 0.39306640625, 0.06768798828125, 0.10546875, 0.7021484375, 0.0158538818359375, 0.1544189453125, 0.0010251998901367188, 0.0254974365234375, 0.00464630126953125, 0.3310546875, 0.0160675048828125, 0.067626953125, 0.01541900634765625, 0.01837158203125, 0.0008645057678222656, 0.0011701583862304688, 0.02301025390625, 0.39404296875, 0.0090484619140625, 0.01611328125, 0.050994873046875, 0.01200103759765625, 0.0024242401123046875, 0.0014810562133789062, 0.407958984375, 0.00608062744140625, 0.043670654296875, 0.0004706382751464844, 0.00011098384857177734], "tokens": [324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829, 1991, 10605, 6101, 275, 319, 477, 753, 9667, 886, 8050, 9667, 275, 319, 477, 753, 786, 886, 1914, 1600, 275, 319, 477, 601, 886, 333, 687, 48]}
{"line_number": 287, "line_type": "original", "code": "            strategy.setCalendar(this, cal, matcher.group(i));", "entropy": 3.240234375, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [6.69140625, 14.7578125, 0.372314453125, 3.478515625, 8.2734375, 3.025390625, 4.90234375, 1.4609375, 2.001953125, 0.923828125, 2.115234375, 1.708984375, 0.35791015625, 0.151123046875, 1.21875, 0.394287109375], "tokens": [1468, 13689, 32, 470, 9389, 26, 578, 30, 2182, 30, 20638, 32, 1363, 26, 91, 876]}
{"line_number": 287, "line_type": "generated", "code": "\n                break;\n            default:\n                break;\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * Add a strategy to the chain\n     * @param strategy The strategy\n     */\n    private void addStrategy(Strategy", "entropy": 0.306396484375, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.87158203125, 0.2396240234375, 0.000507354736328125, 0.032623291015625, 1.17578125, 0.005756378173828125, 0.1025390625, 0.469482421875, 0.0002951622009277344, 0.0256805419921875, 0.0019168853759765625, 0.0201568603515625, 0.00650787353515625, 0.00017583370208740234, 2.4437904357910156e-05, 0.0216522216796875, 0.0058746337890625, 0.0011720657348632812, 0.01074981689453125, 0.0002884864807128906, 0.0195465087890625, 0.0204010009765625, 0.0003311634063720703, 0.001873016357421875, 0.007251739501953125, 0.0010929107666015625, 0.315185546875, 0.283203125, 0.0135345458984375, 4.684925079345703e-05, 2.884765625, 0.74072265625, 1.140625, 0.6748046875, 0.390869140625, 2.228515625, 0.5205078125, 0.01092529296875, 0.05255126953125, 0.007053375244140625, 0.64794921875, 0.1866455078125, 0.2406005859375, 1.0234375, 0.87060546875, 0.005046844482421875, 0.464111328125, 0.121826171875, 0.0247955322265625, 0.014984130859375, 0.004116058349609375, 0.0221710205078125], "tokens": [400, 1626, 45, 324, 1244, 44, 400, 1626, 45, 324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 2222, 312, 13689, 372, 322, 8241, 275, 319, 477, 753, 13689, 886, 13689, 275, 569, 284, 945, 763, 1015, 8089, 26, 8089]}
{"line_number": 288, "line_type": "original", "code": "        }", "entropy": 2.974609375, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [5.2890625, 0.65966796875], "tokens": [351, 320]}
{"line_number": 288, "line_type": "generated", "code": "\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @return The <code>", "entropy": 0.1326904296875, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.66552734375, 0.405517578125, 0.07275390625, 0.00934600830078125, 0.00021731853485107422, 2.3126602172851562e-05, 0.031768798828125, 0.00743865966796875, 0.0012769699096679688, 0.0209197998046875, 0.0014934539794921875, 0.02685546875, 0.01947021484375, 0.0003228187561035156, 0.0017633438110351562, 0.007671356201171875, 0.0011682510375976562, 0.2374267578125, 0.253662109375, 0.01140594482421875, 4.470348358154297e-05, 2.310546875, 0.0382080078125, 0.378662109375, 0.07806396484375, 0.094482421875, 0.69873046875, 0.014892578125, 0.16455078125, 0.0009036064147949219, 0.0283966064453125, 0.003421783447265625, 0.286376953125, 0.015594482421875, 0.05682373046875, 0.014923095703125, 0.01611328125, 0.0005364418029785156, 0.0018815994262695312, 0.0191192626953125, 0.33984375, 0.0081787109375, 0.0155487060546875, 0.043914794921875, 0.0117645263671875, 0.0023860931396484375, 0.002185821533203125, 0.434814453125, 0.0054473876953125, 0.03759765625, 0.0004417896270751953, 8.90493392944336e-05], "tokens": [324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829, 1991, 10605, 6101, 275, 319, 477, 753, 9667, 886, 8050, 9667, 275, 319, 477, 753, 786, 886, 1914, 1600, 275, 319, 477, 601, 886, 333, 687, 48]}
{"line_number": 289, "line_type": "original", "code": "        pos.setIndex(offset+matcher.end());", "entropy": 1.9365234375, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [5.3671875, 12.3125, 0.9033203125, 0.1959228515625, 0.0009517669677734375, 0.01042938232421875, 1.2197265625, 1.173828125, 1.5595703125, 0.00592041015625, 0.2408447265625, 0.25146484375], "tokens": [351, 3400, 32, 470, 1284, 26, 2881, 29, 16937, 32, 416, 1035]}
{"line_number": 289, "line_type": "generated", "code": "\n                break;\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * A strategy to parse a field.\n     */\n    private static interface Strategy {\n        /**\n         * Parse the field into the calendar.\n         *", "entropy": 0.3828125, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.5703125, 0.1966552734375, 0.00028586387634277344, 0.0267333984375, 0.474853515625, 0.052093505859375, 0.005634307861328125, 0.00012040138244628906, 1.2516975402832031e-05, 0.0014982223510742188, 0.0021533966064453125, 0.00018930435180664062, 0.0228271484375, 0.0005688667297363281, 0.02764892578125, 0.017547607421875, 0.00027561187744140625, 0.00177001953125, 0.009521484375, 0.0009236335754394531, 0.2822265625, 0.242919921875, 0.011505126953125, 5.0187110900878906e-05, 3.171875, 0.33544921875, 2.748046875, 0.6533203125, 0.5048828125, 1.0068359375, 1.603515625, 0.080078125, 0.39208984375, 0.006443023681640625, 0.4775390625, 0.41259765625, 0.8583984375, 0.0007462501525878906, 0.054046630859375, 0.397216796875, 0.4091796875, 0.01495361328125, 4.208087921142578e-05, 1.564453125, 0.84326171875, 0.4287109375, 1.236328125, 0.09991455078125, 0.154541015625, 0.4873046875, 0.0115509033203125, 0.00496673583984375], "tokens": [400, 1626, 45, 324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 399, 13689, 372, 3185, 312, 1600, 32, 275, 569, 284, 945, 907, 2568, 39243, 301, 291, 1022, 276, 319, 8661, 322, 1600, 1991, 322, 14461, 32, 276, 319]}
{"line_number": 290, "line_type": "original", "code": "        return cal.getTime();", "entropy": 3.775390625, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [2.791015625, 4.76953125, 13.1015625, 1.861328125, 0.050872802734375, 0.07666015625], "tokens": [351, 442, 2182, 32, 11957, 473]}
{"line_number": 290, "line_type": "generated", "code": "\n        }\n        return regex;\n    }\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @return The <code>StringBuilder</code>\n     */\n    private static", "entropy": 0.1363525390625, "is_bug_line": false, "sus_score": 0.44172610429938614, "per_token_entropy": [0.74462890625, 0.1661376953125, 0.06976318359375, 0.0426025390625, 0.000640869140625, 0.004589080810546875, 0.0200347900390625, 0.0015344619750976562, 0.4384765625, 0.3671875, 0.0143280029296875, 7.05718994140625e-05, 2.279296875, 0.028076171875, 0.33984375, 0.09246826171875, 0.0970458984375, 0.71630859375, 0.01546478271484375, 0.1466064453125, 0.0007214546203613281, 0.028717041015625, 0.0027008056640625, 0.277099609375, 0.0133514404296875, 0.04425048828125, 0.0135955810546875, 0.01355743408203125, 0.0004916191101074219, 0.0020313262939453125, 0.016632080078125, 0.2900390625, 0.0066070556640625, 0.0123138427734375, 0.035614013671875, 0.00988006591796875, 0.0025005340576171875, 0.0024318695068359375, 0.58349609375, 0.00540924072265625, 0.03289794921875, 0.0011911392211914062, 7.092952728271484e-05, 0.00417327880859375, 0.00045871734619140625, 3.0159950256347656e-05, 0.0007100105285644531, 0.003963470458984375, 0.0259246826171875, 0.0063018798828125, 0.034881591796875, 0.031890869140625], "tokens": [291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829, 1991, 10605, 6101, 275, 319, 477, 753, 9667, 886, 8050, 9667, 275, 319, 477, 753, 786, 886, 1914, 1600, 275, 319, 477, 601, 886, 333, 687, 48, 20884, 377, 687, 48, 275, 569, 284, 945, 907]}
{"line_number": 388, "line_type": "original", "code": "                Calendar c = Calendar.getInstance(locale);", "entropy": 1.958984375, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [8.015625, 8.6484375, 1.5, 0.458251953125, 0.64697265625, 0.00559234619140625, 0.002475738525390625, 0.1986083984375, 0.0989990234375, 0.0234832763671875], "tokens": [2071, 16600, 281, 280, 16600, 32, 7426, 26, 6921, 293]}
{"line_number": 388, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Count the number of non-null entries in an array\n     * @param values The array to count\n     * @return The number of non-null entries in the array\n     */\n    private static int count(String[] values)", "entropy": 0.277587890625, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [0.4013671875, 0.08856201171875, 0.1298828125, 0.642578125, 0.0066375732421875, 0.00040149688720703125, 2.052734375, 0.2244873046875, 0.6962890625, 0.0062408447265625, 1.1142578125, 0.46533203125, 0.058807373046875, 1.9052734375, 0.1368408203125, 0.484619140625, 0.006610870361328125, 0.093505859375, 0.032135009765625, 0.01035308837890625, 0.002887725830078125, 1.1630859375, 0.1873779296875, 0.3291015625, 1.126953125, 1.0078125, 0.220947265625, 0.0037212371826171875, 0.0002467632293701172, 0.005695343017578125, 0.072265625, 0.2900390625, 0.004001617431640625, 0.291015625, 0.015838623046875, 0.003841400146484375, 0.155517578125, 0.5615234375, 0.06817626953125, 0.0105133056640625, 0.034759521484375, 0.0016689300537109375, 0.002826690673828125, 0.08392333984375, 0.00153350830078125, 0.0198822021484375, 0.00017142295837402344, 0.00406646728515625, 0.18310546875, 0.0284576416015625, 0.0011138916015625, 0.0021686553955078125], "tokens": [284, 320, 446, 1022, 275, 319, 9618, 322, 1451, 432, 2979, 31, 1693, 8036, 328, 600, 1417, 275, 319, 477, 753, 2078, 886, 1417, 372, 2385, 275, 319, 477, 601, 886, 1451, 432, 2979, 31, 1693, 8036, 328, 322, 1417, 275, 569, 284, 945, 907, 629, 2385, 26, 652, 1178, 2078, 27]}
{"line_number": 390, "line_type": "original", "code": "                String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));", "entropy": 0.6279296875, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [8.4375, 4.2109375, 0.321044921875, 1.2548828125, 0.302001953125, 0.00263214111328125, 0.10369873046875, 0.90478515625, 0.0008454322814941406, 0.0078582763671875, 0.071044921875, 0.004772186279296875, 0.00824737548828125, 6.794929504394531e-06, 0.003383636474609375, 0.00872802734375, 0.004589080810546875, 8.559226989746094e-05, 0.0011625289916992188, 0.00893402099609375, 0.0010433197021484375, 0.004352569580078125, 0.0014200210571289062, 0.03228759765625, 0.005138397216796875], "tokens": [2071, 892, 1178, 4504, 55, 12792, 280, 372, 1261, 26, 85, 32, 47104, 4109, 26, 9389, 32, 26260, 30, 16600, 32, 15456, 30, 11259, 876]}
{"line_number": 390, "line_type": "generated", "code": "\n    private static int count(String[] values) {\n        return values==null? 0 : values.length;\n    }\n\n    private static int copy(KeyValue[] target, int offset, String[] values) {\n        if(values!=null) {", "entropy": 0.2049560546875, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [0.88525390625, 0.56689453125, 0.11785888671875, 0.42578125, 0.04132080078125, 0.009613037109375, 0.107666015625, 0.03936767578125, 0.68359375, 0.00527191162109375, 0.003173828125, 0.01427459716796875, 0.0784912109375, 0.16552734375, 0.19482421875, 0.007007598876953125, 0.66650390625, 0.0193939208984375, 0.0003223419189453125, 0.0303955078125, 0.005382537841796875, 0.00012600421905517578, 2.193450927734375e-05, 0.001953125, 0.004001617431640625, 0.0006418228149414062, 0.1787109375, 0.215087890625, 0.0045623779296875, 0.77099609375, 0.2342529296875, 0.0015087127685546875, 0.01617431640625, 0.003055572509765625, 1.7626953125, 0.013031005859375, 0.2132568359375, 1.203125, 0.0023517608642578125, 0.0124664306640625, 0.0189361572265625, 0.822265625, 0.005584716796875, 0.0010051727294921875, 0.004093170166015625, 0.1788330078125, 0.0955810546875, 0.0308074951171875, 0.7685546875, 0.007770538330078125, 0.0169830322265625, 0.00283050537109375], "tokens": [284, 945, 907, 629, 2385, 26, 652, 1178, 2078, 27, 301, 291, 442, 2078, 379, 1693, 1018, 225, 34, 499, 2078, 32, 1322, 45, 284, 320, 446, 945, 907, 629, 1933, 26, 22015, 1178, 1760, 30, 629, 3401, 30, 892, 1178, 2078, 27, 301, 291, 415, 26, 2810, 6901, 1693, 27, 301]}
{"line_number": 391, "line_type": "original", "code": "                String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));", "entropy": 0.85693359375, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [7.80859375, 7.3828125, 0.29150390625, 0.9970703125, 3.21875, 0.0145263671875, 0.1571044921875, 1.2353515625, 0.0016689300537109375, 0.01514434814453125, 0.09375, 0.007373809814453125, 0.01219940185546875, 1.7404556274414062e-05, 0.00408935546875, 0.0207061767578125, 0.0022125244140625, 0.00019800662994384766, 0.0030193328857421875, 0.0254058837890625, 0.0002923011779785156, 0.0036029815673828125, 0.0071563720703125, 0.10369873046875, 0.0174407958984375], "tokens": [2071, 892, 1178, 1946, 55, 12792, 280, 372, 1261, 26, 85, 32, 47104, 4109, 26, 9389, 32, 26260, 30, 16600, 32, 10129, 30, 11259, 876]}
{"line_number": 391, "line_type": "generated", "code": "\n     * Copy the values from one array to another\n     * @param dest The destination array\n     * @param src The source array\n     * @param start The start index in the destination array\n     * @param values The values to copy\n     * @return The", "entropy": 0.38525390625, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [0.94091796875, 0.28857421875, 0.440185546875, 1.4033203125, 1.4775390625, 0.6123046875, 0.75146484375, 0.144287109375, 0.4296875, 0.0992431640625, 0.293212890625, 0.029052734375, 0.04730224609375, 0.0016117095947265625, 1.50390625, 0.1383056640625, 0.2376708984375, 0.1285400390625, 0.1519775390625, 0.0001188516616821289, 0.00047326087951660156, 0.002307891845703125, 1.2353515625, 0.040069580078125, 0.0694580078125, 0.0484619140625, 0.116943359375, 0.019989013671875, 0.0013980865478515625, 0.419189453125, 1.78515625, 0.19775390625, 1.1181640625, 0.7607421875, 1.5458984375, 0.1270751953125, 0.1773681640625, 0.37109375, 0.2486572265625, 0.004718780517578125, 0.00894927978515625, 0.309814453125, 0.97802734375, 0.06292724609375, 0.3671875, 0.10052490234375, 0.30517578125, 0.31884765625, 0.04437255859375, 0.00147247314453125, 0.03302001953125, 0.0888671875], "tokens": [275, 319, 2389, 322, 2078, 645, 1591, 1417, 372, 4674, 275, 319, 477, 753, 3466, 886, 8050, 1417, 275, 319, 477, 753, 1561, 886, 1914, 1417, 275, 319, 477, 753, 1477, 886, 1477, 1650, 328, 322, 8050, 1417, 275, 319, 477, 753, 2078, 886, 2078, 372, 1933, 275, 319, 477, 601, 886]}
{"line_number": 392, "line_type": "original", "code": "                fieldKeyValues= createKeyValues(longEras, shortEras);", "entropy": 1.5986328125, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [7.51171875, 7.5546875, 0.86572265625, 0.0040283203125, 0.80224609375, 0.72705078125, 0.011688232421875, 0.0003771781921386719, 0.026336669921875, 3.07421875, 6.0078125, 0.022735595703125, 0.02813720703125, 0.51171875, 0.0024585723876953125, 0.00151824951171875, 0.016357421875], "tokens": [2071, 1600, 953, 3354, 47, 1487, 953, 3354, 26, 3222, 55, 12792, 30, 4504, 55, 12792, 293]}
{"line_number": 392, "line_type": "generated", "code": "\n     * @param values The array to be checked\n     * @return The count of valid values in array\n     */\n    private static int count(String[] values) {\n        int count=0;\n        if(values!=null) {\n            for(String", "entropy": 0.287353515625, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [0.525390625, 0.6416015625, 0.055023193359375, 0.006847381591796875, 0.66162109375, 0.2490234375, 0.4736328125, 1.0673828125, 1.2216796875, 2.0390625, 0.195068359375, 0.00415802001953125, 0.00041174888610839844, 0.0044403076171875, 0.133544921875, 0.43017578125, 0.0731201171875, 0.383544921875, 0.1346435546875, 1.0478515625, 1.50390625, 0.3330078125, 0.007480621337890625, 0.007396697998046875, 0.125244140625, 0.00287628173828125, 0.0249176025390625, 0.0004107952117919922, 0.00469970703125, 0.071533203125, 0.0390625, 0.0020580291748046875, 0.00377655029296875, 0.0029506683349609375, 0.058929443359375, 0.292236328125, 0.334716796875, 0.265380859375, 1.3759765625, 0.004863739013671875, 0.0285491943359375, 0.5341796875, 0.060821533203125, 0.007709503173828125, 0.08984375, 0.0106353759765625, 0.021728515625, 0.0035991668701171875, 0.0271759033203125, 0.0716552734375, 0.05181884765625, 0.2186279296875], "tokens": [275, 319, 477, 753, 2078, 886, 1417, 372, 526, 8137, 275, 319, 477, 601, 886, 2385, 432, 2080, 2078, 328, 1417, 275, 569, 284, 945, 907, 629, 2385, 26, 652, 1178, 2078, 27, 301, 291, 629, 2385, 47, 34, 45, 291, 415, 26, 2810, 6901, 1693, 27, 301, 324, 436, 26, 652]}
{"line_number": 393, "line_type": "original", "code": "                break;", "entropy": 5.19921875, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [6.55859375, 9.015625, 0.0292816162109375], "tokens": [2071, 1626, 45]}
{"line_number": 393, "line_type": "generated", "code": "\n     * @return The count of valid values in the array\n     */\n    private static int count(String[] values) {\n        if(values==null) {\n            return 0;\n        }\n        int count= 0;\n        for(String value", "entropy": 0.152587890625, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [0.52392578125, 0.370361328125, 0.006656646728515625, 0.0099029541015625, 0.1636962890625, 0.3857421875, 0.09429931640625, 0.312744140625, 0.06903076171875, 1.30078125, 0.56640625, 0.0560302734375, 0.9326171875, 0.0080413818359375, 0.005584716796875, 0.1165771484375, 0.0023365020751953125, 0.0262451171875, 0.0004413127899169922, 0.0061187744140625, 0.0634765625, 0.06646728515625, 0.002193450927734375, 0.005031585693359375, 0.005519866943359375, 0.042816162109375, 0.58544921875, 0.1231689453125, 0.01168060302734375, 0.050201416015625, 0.0030307769775390625, 0.055450439453125, 0.0614013671875, 0.058837890625, 0.00949859619140625, 0.0036258697509765625, 0.00119781494140625, 0.0005822181701660156, 0.0266265869140625, 0.0006084442138671875, 0.06683349609375, 0.1402587890625, 0.347900390625, 0.1585693359375, 0.260498046875, 0.00029540061950683594, 0.0007920265197753906, 0.01678466796875, 0.0203704833984375, 0.0338134765625, 0.2398681640625, 0.5146484375], "tokens": [275, 319, 477, 601, 886, 2385, 432, 2080, 2078, 328, 322, 1417, 275, 569, 284, 945, 907, 629, 2385, 26, 652, 1178, 2078, 27, 301, 291, 415, 26, 2810, 379, 1693, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 2385, 47, 225, 34, 45, 291, 436, 26, 652, 786]}
{"line_number": 415, "line_type": "original", "code": "        String[] eras = new String[era.size()]; // assume no gaps in entry values", "entropy": 2.599609375, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [4.72265625, 4.65625, 1.1201171875, 4.19921875, 0.00542449951171875, 0.1611328125, 0.3681640625, 0.00180816650390625, 0.04693603515625, 5.70703125, 2.4765625, 1.1884765625, 0.03240966796875, 5.52734375, 4.859375, 2.296875, 4.08203125, 0.0006151199340820312, 1.4736328125, 9.328125, 2.349609375], "tokens": [351, 892, 1178, 5097, 302, 280, 537, 892, 77, 3002, 32, 891, 22086, 434, 10014, 1289, 485, 7333, 328, 3414, 2078]}
{"line_number": 415, "line_type": "generated", "code": "\n        if(values!=null) {\n            for(String value : values) {\n                fieldKeyValues[offset++]= new KeyValue(value, value);\n            }\n        }\n        return offset;\n    }", "entropy": 0.06732177734375, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [0.06817626953125, 0.2493896484375, 0.0265960693359375, 0.00933074951171875, 0.1259765625, 0.0017271041870117188, 0.0089111328125, 0.0013980865478515625, 0.0189056396484375, 0.11376953125, 0.0226287841796875, 0.1005859375, 0.042388916015625, 0.0186309814453125, 0.0013532638549804688, 0.0008115768432617188, 0.0006041526794433594, 0.02362060546875, 0.80029296875, 0.00039124488830566406, 3.457069396972656e-05, 0.0020847320556640625, 0.00457000732421875, 0.291259765625, 0.01078033447265625, 0.09368896484375, 0.014312744140625, 9.453296661376953e-05, 0.0200042724609375, 0.05914306640625, 0.252685546875, 0.3369140625, 0.11016845703125, 0.02825927734375, 0.00040459632873535156, 0.0030841827392578125, 0.00018084049224853516, 0.00809478759765625, 0.0015316009521484375, 0.00017642974853515625, 0.00045371055603027344, 0.017425537109375, 0.00437164306640625], "tokens": [291, 415, 26, 2810, 6901, 1693, 27, 301, 324, 436, 26, 652, 786, 499, 2078, 27, 301, 400, 1600, 953, 3354, 77, 2881, 1046, 7770, 537, 3891, 882, 26, 853, 30, 786, 293, 324, 320, 291, 320, 291, 442, 3401, 45, 284, 320]}
{"line_number": 416, "line_type": "original", "code": "        for(Map.Entry<String, Integer> me : era.entrySet()) {", "entropy": 1.4072265625, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [8.1171875, 3.982421875, 0.09442138671875, 6.05078125, 0.002655029296875, 0.00011909008026123047, 0.0657958984375, 0.07659912109375, 0.001216888427734375, 0.282958984375, 0.0009121894836425781, 0.0743408203125, 0.0975341796875, 6.3046875, 0.08642578125, 0.0096435546875, 0.0091094970703125, 0.07568359375], "tokens": [351, 436, 26, 1208, 32, 2711, 46, 652, 30, 4401, 48, 597, 499, 34666, 32, 24351, 1157, 301]}
{"line_number": 416, "line_type": "generated", "code": "\n                fieldKeyValues[offset++]= new KeyValue(key, Integer.valueOf(value));\n            }\n        }\n        return offset;\n    }\n\n    /**\n     * Get the locale for this instance\n     * @return The locale\n     */\n    public Locale get", "entropy": 0.369873046875, "is_bug_line": false, "sus_score": 0.42640143271122083, "per_token_entropy": [0.69921875, 0.693359375, 0.0011987686157226562, 9.179115295410156e-05, 0.0030803680419921875, 0.131591796875, 0.8681640625, 0.02301025390625, 0.1087646484375, 0.01393890380859375, 0.0001373291015625, 0.0214385986328125, 2.15234375, 0.0267181396484375, 1.2841796875, 0.0010242462158203125, 0.007659912109375, 0.0019350051879882812, 0.720703125, 0.076171875, 0.2032470703125, 0.005340576171875, 0.043426513671875, 0.0221099853515625, 0.01255035400390625, 0.0023326873779296875, 0.000274658203125, 0.0005202293395996094, 0.0179290771484375, 0.0032672882080078125, 0.65673828125, 0.3017578125, 0.03216552734375, 0.00033926963806152344, 1.318359375, 0.33837890625, 3.318359375, 1.3837890625, 0.7392578125, 1.92578125, 0.25634765625, 0.006961822509765625, 0.005069732666015625, 0.0012063980102539062, 0.087890625, 0.1041259765625, 0.8798828125, 0.00678253173828125, 0.0087890625, 0.6552734375, 0.05096435546875, 0.0050811767578125], "tokens": [400, 1600, 953, 3354, 77, 2881, 1046, 7770, 537, 3891, 882, 26, 678, 30, 4401, 32, 9162, 26, 853, 876, 324, 320, 291, 320, 291, 442, 3401, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 11259, 436, 458, 1980, 275, 319, 477, 601, 886, 11259, 275, 569, 284, 562, 23265, 622]}
