{"line_number": 466, "line_type": "original", "code": "        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);", "entropy": 1.0322265625, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [3.693359375, 5.30078125, 5.1953125, 0.167236328125, 2.400390625, 0.00127410888671875, 0.09332275390625, 0.0001304149627685547, 0.016510009765625, 1.2548828125, 0.0271148681640625, 0.0002307891845703125, 0.0009469985961914062, 0.054290771484375, 0.00490570068359375, 0.0014629364013671875, 0.36669921875, 0.00583648681640625], "tokens": [351, 629, 43422, 280, 48299, 5240, 6775, 22306, 26, 5717, 32, 3596, 26, 1516, 11290, 471, 39920, 293]}
{"line_number": 466, "line_type": "generated", "code": "\n     * @return a new fraction instance with the same numerator, but\n     *         an absolute denominator\n     */\n    public Fraction abs() {\n        return (numerator >= 0? this : negate());\n    }\n\n    /**\n     * <p>", "entropy": 0.178466796875, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [0.193603515625, 0.27978515625, 0.278076171875, 0.00518035888671875, 0.3193359375, 0.018341064453125, 0.0285797119140625, 0.061309814453125, 1.0068359375, 0.0904541015625, 0.033294677734375, 0.460205078125, 1.6570091247558594e-05, 0.312744140625, 0.5400390625, 0.41943359375, 0.00022399425506591797, 0.12286376953125, 0.5224609375, 0.10504150390625, 1.388671875, 0.0293121337890625, 0.045806884765625, 0.025909423828125, 0.005481719970703125, 0.0014514923095703125, 0.01148223876953125, 0.003665924072265625, 0.0098724365234375, 0.12420654296875, 1.2890625, 0.1058349609375, 0.0247344970703125, 4.76837158203125e-06, 0.293212890625, 0.0026149749755859375, 5.841255187988281e-06, 0.08392333984375, 0.002307891845703125, 0.005367279052734375, 0.5693359375, 2.3365020751953125e-05, 0.00287628173828125, 0.0174713134765625, 5.173683166503906e-05, 0.1702880859375, 0.222900390625, 0.006801605224609375, 1.7881393432617188e-05, 0.040252685546875, 4.947185516357422e-05, 0.00043320655822753906], "tokens": [275, 319, 477, 601, 312, 537, 18795, 1980, 623, 322, 2432, 1929, 11290, 30, 1273, 275, 319, 263, 600, 7976, 39920, 275, 569, 284, 562, 40823, 11366, 346, 301, 291, 442, 308, 1516, 11290, 2377, 225, 34, 1018, 458, 499, 7528, 332, 1035, 284, 320, 446, 1022, 275, 319, 333, 98, 48]}
{"line_number": 467, "line_type": "original", "code": "        if (gcd == 1) {", "entropy": 1.78125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [2.482421875, 1.9638671875, 0.050079345703125, 9.9296875, 1.068359375, 0.0924072265625, 0.13671875, 0.214111328125, 0.08990478515625], "tokens": [351, 415, 308, 46060, 610, 225, 35, 27, 301]}
{"line_number": 467, "line_type": "generated", "code": "\n        return this;\n    }\n\n    /**\n     * <p>Gets a fraction that is the absolute value of this one.</p>\n     * \n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction", "entropy": 0.11883544921875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.37109375, 0.28564453125, 0.4033203125, 0.0810546875, 0.14501953125, 0.00417327880859375, 0.58642578125, 0.1380615234375, 0.0164947509765625, 3.314018249511719e-05, 0.033477783203125, 7.37905502319336e-05, 0.0005316734313964844, 0.41650390625, 0.2054443359375, 0.01459503173828125, 0.246826171875, 0.00864410400390625, 0.045745849609375, 0.1483154296875, 0.1373291015625, 0.0101165771484375, 0.000705718994140625, 0.0010423660278320312, 0.0010309219360351562, 6.92605972290039e-05, 0.0002455711364746094, 0.005695343017578125, 2.9206275939941406e-05, 1.5068359375, 0.00010395050048828125, 0.003414154052734375, 0.00659942626953125, 0.007526397705078125, 0.0277557373046875, 0.01532745361328125, 0.0009593963623046875, 0.00296783447265625, 0.0046234130859375, 0.0025119781494140625, 0.002185821533203125, 0.00024628639221191406, 0.0005788803100585938, 0.00872039794921875, 0.0001461505889892578, 0.20947265625, 0.0001417398452758789, 0.00621795654296875, 0.000732421875, 0.044891357421875, 0.0020599365234375, 0.019317626953125], "tokens": [291, 442, 458, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 312, 18795, 688, 438, 322, 7976, 786, 432, 458, 1591, 1730, 98, 48, 275, 319, 5384, 319, 333, 98, 48, 1318, 4717, 18795, 438, 646, 22974, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 312, 537, 18795]}
{"line_number": 468, "line_type": "original", "code": "            return this;", "entropy": 4.62890625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [5.74609375, 7.72265625, 2.34375, 2.708984375], "tokens": [1468, 442, 458, 45]}
{"line_number": 468, "line_type": "generated", "code": "\n     */\n    public Fraction abs() {\n        return (numerator >= 0? this : negate());\n    }\n\n    /**\n     * <p>Gets a fraction that is the fractional part of this one.</p>\n     * \n     * <p", "entropy": 0.153564453125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.488525390625, 0.07470703125, 0.0172576904296875, 0.00641632080078125, 0.001529693603515625, 0.0181732177734375, 0.003932952880859375, 0.0117034912109375, 0.157470703125, 1.0302734375, 0.0916748046875, 0.0209808349609375, 6.4373016357421875e-06, 0.3251953125, 0.0045166015625, 9.417533874511719e-06, 0.09771728515625, 0.004352569580078125, 0.007091522216796875, 0.76953125, 4.0531158447265625e-05, 0.00457763671875, 0.0236663818359375, 3.6716461181640625e-05, 0.11871337890625, 0.19140625, 0.0084228515625, 2.0503997802734375e-05, 0.040069580078125, 4.6253204345703125e-05, 0.0005092620849609375, 0.67822265625, 0.202880859375, 0.00980377197265625, 0.474853515625, 0.00977325439453125, 0.07952880859375, 0.9150390625, 1.00390625, 0.0219573974609375, 0.403076171875, 0.108154296875, 0.00502777099609375, 0.047393798828125, 9.202957153320312e-05, 0.00022804737091064453, 0.006763458251953125, 3.5762786865234375e-05, 0.489013671875, 3.4928321838378906e-05, 0.0101318359375, 0.0038089752197265625], "tokens": [275, 569, 284, 562, 40823, 11366, 346, 301, 291, 442, 308, 1516, 11290, 2377, 225, 34, 1018, 458, 499, 7528, 332, 1035, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 312, 18795, 688, 438, 322, 18795, 279, 1742, 432, 458, 1591, 1730, 98, 48, 275, 319, 5384, 319, 333, 98]}
{"line_number": 470, "line_type": "original", "code": "        return Fraction.getFraction(numerator / gcd, denominator / gcd);", "entropy": 1.5205078125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.9453125, 0.759765625, 6.87890625, 0.039093017578125, 1.9921875, 0.071533203125, 0.114501953125, 0.62109375, 0.0005154609680175781, 5.69140625, 1.0390625, 0.0169830322265625, 0.092041015625, 0.042938232421875, 0.0094451904296875, 0.016693115234375], "tokens": [351, 442, 40823, 32, 371, 20709, 26, 1516, 11290, 517, 43422, 30, 39920, 517, 43422, 293]}
{"line_number": 470, "line_type": "generated", "code": "\n\n    /**\n     * <p>Gets a fraction that is the absolute value of this one.</p>\n     * <p>More precisely: <code>(fraction >= 0? this : -fraction)</code></p>\n     *\n     * <", "entropy": 0.0677490234375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.4697265625, 0.393310546875, 0.01293182373046875, 4.982948303222656e-05, 0.0219573974609375, 5.638599395751953e-05, 0.00038123130798339844, 0.3701171875, 0.196533203125, 0.008514404296875, 0.11126708984375, 0.00577545166015625, 0.024017333984375, 0.158203125, 0.185546875, 0.0165863037109375, 0.0006918907165527344, 0.0013036727905273438, 0.000553131103515625, 5.555152893066406e-05, 0.0002300739288330078, 0.0079803466796875, 2.4437904357910156e-05, 0.71875, 0.00276947021484375, 0.0021953582763671875, 0.03912353515625, 0.0008664131164550781, 2.86102294921875e-05, 0.0301666259765625, 0.019927978515625, 0.00036525726318359375, 0.0018024444580078125, 0.005672454833984375, 0.13525390625, 0.0011587142944335938, 0.0011415481567382812, 0.00164031982421875, 0.4296875, 0.0001456737518310547, 0.0004680156707763672, 0.00019121170043945312, 0.00032520294189453125, 7.104873657226562e-05, 0.002384185791015625, 3.039836883544922e-05, 0.00032782554626464844, 0.0017881393432617188, 1.0132789611816406e-05, 0.1279296875, 1.4066696166992188e-05, 0.012298583984375], "tokens": [446, 1022, 275, 319, 333, 98, 48, 20931, 312, 18795, 688, 438, 322, 7976, 786, 432, 458, 1591, 1730, 98, 48, 275, 319, 333, 98, 48, 8892, 27447, 631, 44, 333, 687, 1563, 21284, 2377, 225, 34, 1018, 458, 499, 429, 21284, 2874, 687, 855, 98, 48, 275, 319, 275, 319, 333]}
{"line_number": 146, "line_type": "original", "code": "            if (numerator==Integer.MIN_VALUE ||", "entropy": 1.45703125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [5.63671875, 3.119140625, 0.1531982421875, 1.2265625, 0.01934814453125, 3.091796875, 0.904296875, 0.001720428466796875, 0.0114898681640625, 0.00014793872833251953, 0.00013554096221923828, 3.322265625], "tokens": [1468, 415, 308, 1516, 11290, 379, 3061, 32, 4683, 81, 5975, 1276]}
{"line_number": 146, "line_type": "generated", "code": "\n    /**\n     * <p>Gets the fraction as a <code>double</code>,\n     * using the double constructor.</p>\n     *\n     * @return this fraction as a <code>double</code>.\n     */\n    public double doubleValue", "entropy": 0.234375, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [1.5517578125, 0.33935546875, 0.07830810546875, 0.0001550912857055664, 0.1436767578125, 0.0008955001831054688, 0.00225067138671875, 0.492919921875, 0.0185089111328125, 0.29443359375, 0.0227508544921875, 0.151611328125, 0.00960540771484375, 0.003261566162109375, 0.0014181137084960938, 0.33203125, 0.000621795654296875, 0.00021910667419433594, 1.1357421875, 0.912109375, 0.0002741813659667969, 1.267578125, 0.08502197265625, 1.12109375, 0.9326171875, 0.45654296875, 0.00014531612396240234, 0.0032749176025390625, 0.0181884765625, 0.0019273757934570312, 0.1761474609375, 0.00022590160369873047, 0.51611328125, 0.0213775634765625, 0.2047119140625, 0.09576416015625, 0.006092071533203125, 0.0012578964233398438, 0.03533935546875, 0.0013799667358398438, 5.0902366638183594e-05, 0.02154541015625, 0.0010881423950195312, 3.445148468017578e-05, 1.4462890625, 0.006641387939453125, 0.0975341796875, 0.027679443359375, 0.09381103515625, 0.00952911376953125, 0.048919677734375, 7.152557373046875e-06], "tokens": [284, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 687, 48, 2627, 377, 687, 2717, 275, 319, 1471, 322, 2064, 4374, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 458, 18795, 619, 312, 333, 687, 48, 2627, 377, 687, 4503, 275, 569, 284, 562, 2064, 2064, 882]}
{"line_number": 150, "line_type": "original", "code": "            numerator = -numerator;", "entropy": 5.1328125, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [7.5078125, 5.75390625, 7.510185241699219e-05, 7.328125, 7.51953125, 11.984375, 0.00881195068359375, 0.9521484375], "tokens": [1468, 1929, 11290, 280, 429, 1516, 11290, 45]}
{"line_number": 150, "line_type": "generated", "code": "\n     * instance will represent 1/2.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three", "entropy": 0.06939697265625, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.978515625, 0.0115203857421875, 0.366943359375, 0.50439453125, 0.98828125, 0.05810546875, 2.86102294921875e-06, 0.00018405914306640625, 7.987022399902344e-05, 0.09051513671875, 0.00022411346435546875, 0.0021495819091796875, 0.016876220703125, 0.0019397735595703125, 0.0494384765625, 7.092952728271484e-05, 0.459716796875, 0.00080108642578125, 0.0008044242858886719, 5.245208740234375e-05, 0.00341033935546875, 0.0019207000732421875, 0.0007948875427246094, 1.728534698486328e-05, 0.027252197265625, 0.0018777847290039062, 1.5616416931152344e-05, 0.0006885528564453125, 0.005580902099609375, 0.00036454200744628906, 0.0006003379821777344, 0.00118255615234375, 0.02325439453125, 1.0728836059570312e-06, 2.5033950805664062e-06, 0.00014328956604003906, 0.0012083053588867188, 1.537799835205078e-05, 6.747245788574219e-05, 0.00011241436004638672, 0.0001938343048095703, 0.003772735595703125, 0.00012159347534179688, 0.0002536773681640625, 0.00013339519500732422, 0.0002073049545288086, 9.441375732421875e-05, 7.998943328857422e-05, 0.0016717910766601562, 6.4373016357421875e-06, 0.0018548965454101562, 3.910064697265625e-05], "tokens": [275, 319, 1980, 1098, 4042, 225, 35, 33, 36, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 1929, 11290, 225, 322, 1929, 11290, 30, 436, 2280, 322, 8019, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 753, 39920, 225, 322, 39920, 30, 436, 2280, 322, 46213, 328, 330, 12192]}
{"line_number": 151, "line_type": "original", "code": "            denominator = -denominator;", "entropy": 3.83984375, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [7.6015625, 9.0078125, 1.111328125, 6.17578125, 2.857421875, 0.00046062469482421875, 0.12225341796875], "tokens": [1468, 39920, 280, 429, 29805, 9693, 45]}
{"line_number": 151, "line_type": "generated", "code": "\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance, or", "entropy": 0.046112060546875, "is_bug_line": false, "sus_score": 0.4472135954999579, "per_token_entropy": [0.373779296875, 0.281982421875, 0.64111328125, 0.0068511962890625, 0.001556396484375, 8.90493392944336e-05, 0.00568389892578125, 0.00211334228515625, 0.0010080337524414062, 1.609325408935547e-05, 0.040435791015625, 0.004177093505859375, 1.0848045349121094e-05, 0.0028438568115234375, 0.00591278076171875, 0.0002760887145996094, 0.0002751350402832031, 0.0018682479858398438, 0.03472900390625, 1.1920928955078125e-06, 1.6689300537109375e-06, 0.00010144710540771484, 0.001979827880859375, 1.6570091247558594e-05, 0.00010609626770019531, 0.00019025802612304688, 0.00028967857360839844, 0.003253936767578125, 7.62939453125e-05, 0.00023472309112548828, 0.00012302398681640625, 0.0002046823501586914, 8.320808410644531e-05, 7.557868957519531e-05, 0.001354217529296875, 4.649162292480469e-06, 0.0008492469787597656, 2.491474151611328e-05, 0.00029397010803222656, 6.914138793945312e-05, 1.3828277587890625e-05, 0.0007305145263671875, 0.01273345947265625, 0.007381439208984375, 0.0007791519165039062, 0.0195465087890625, 0.0052337646484375, 0.03765869140625, 0.05938720703125, 0.01215362548828125, 0.44970703125, 0.37841796875], "tokens": [275, 319, 477, 753, 1929, 11290, 225, 322, 1929, 11290, 30, 436, 2280, 322, 8019, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 753, 39920, 225, 322, 39920, 30, 436, 2280, 322, 46213, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 601, 312, 537, 18795, 1980, 30, 556]}
{"line_number": 578, "line_type": "original", "code": "        if (u>0) { u=-u; } // make u negative", "entropy": 1.759765625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [3.5, 7.5, 0.0264892578125, 10.3984375, 1.4716796875, 1.859375, 0.8134765625, 0.07489013671875, 1.75, 0.452880859375, 0.0192718505859375, 0.0233306884765625, 0.07342529296875, 0.285400390625, 0.476318359375, 0.11822509765625, 1.083984375], "tokens": [351, 415, 308, 103, 48, 34, 27, 301, 1044, 6593, 103, 45, 320, 434, 1930, 1044, 11003]}
{"line_number": 578, "line_type": "generated", "code": "\n            m > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"Multiplication overflow\");\n        }\n        return (int)m;\n    }\n\n    /**\n     * <p>Adds two fractions.  The fraction returned is in reduced form.</", "entropy": 0.2369384765625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.77001953125, 0.062469482421875, 0.01271820068359375, 0.0084686279296875, 4.589557647705078e-05, 0.00012111663818359375, 0.00011777877807617188, 0.00012993812561035156, 0.0565185546875, 0.037109375, 0.1478271484375, 0.053802490234375, 0.0017004013061523438, 0.01338958740234375, 1.4066696166992188e-05, 0.321533203125, 1.244140625, 8.594989776611328e-05, 0.01611328125, 0.26708984375, 0.0206146240234375, 0.00022614002227783203, 0.03680419921875, 0.0007953643798828125, 0.009429931640625, 2.5391578674316406e-05, 0.0012683868408203125, 0.1649169921875, 0.0006113052368164062, 0.0164031982421875, 0.0008802413940429688, 0.261474609375, 0.05291748046875, 0.292236328125, 5.996227264404297e-05, 0.68408203125, 0.0008563995361328125, 0.006988525390625, 0.56591796875, 0.44580078125, 0.67333984375, 3.5762786865234375e-07, 1.0234375, 0.66552734375, 0.388671875, 0.428466796875, 1.65625, 0.364501953125, 0.1981201171875, 0.05426025390625, 0.01471710205078125, 1.279296875], "tokens": [324, 345, 848, 4401, 32, 3459, 81, 5975, 27, 301, 324, 1422, 537, 47721, 984, 440, 11005, 1280, 9973, 724, 291, 320, 291, 442, 308, 410, 27, 95, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 34048, 3134, 4937, 3543, 32, 225, 886, 18795, 4717, 438, 328, 22974, 2234, 1730]}
{"line_number": 579, "line_type": "original", "code": "        if (v>0) { v=-v; } // make v negative", "entropy": 1.759765625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.42578125, 6.375, 0.217041015625, 10.2578125, 2.65234375, 0.2459716796875, 0.05377197265625, 0.1376953125, 1.482421875, 0.85400390625, 0.1533203125, 0.040496826171875, 0.091552734375, 0.63916015625, 1.02734375, 1.1982421875, 0.06689453125], "tokens": [351, 415, 308, 104, 48, 34, 27, 301, 354, 6593, 104, 45, 320, 434, 1930, 354, 11003]}
{"line_number": 579, "line_type": "generated", "code": "\n            throw new ArithmeticException(\"Multiplication overflow\");\n        }\n        return (int)m;\n    }\n\n    /**\n     * <p>Adds two numbers, checking for overflow.</p>\n     *\n     * @param x a number to add\n     * @", "entropy": 0.197265625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.1431884765625, 0.08868408203125, 0.0023365020751953125, 0.0103607177734375, 1.239776611328125e-05, 0.1695556640625, 1.595703125, 8.738040924072266e-05, 0.01517486572265625, 0.230712890625, 0.042327880859375, 0.00033593177795410156, 0.042572021484375, 0.00041604042053222656, 0.006519317626953125, 7.62939453125e-06, 0.0011501312255859375, 0.1746826171875, 0.0002027750015258789, 0.0164031982421875, 0.000667572021484375, 0.25830078125, 0.0416259765625, 0.31494140625, 5.8770179748535156e-05, 0.80810546875, 0.0010938644409179688, 0.00791168212890625, 0.57421875, 0.4267578125, 0.8037109375, 0.7236328125, 0.060089111328125, 2.6702880859375e-05, 0.017913818359375, 0.50732421875, 0.0005154609680175781, 0.001369476318359375, 0.021026611328125, 0.0008034706115722656, 0.377197265625, 6.35385513305664e-05, 0.0992431640625, 0.0034999847412109375, 0.09619140625, 0.412353515625, 0.51904296875, 0.0794677734375, 1.3828125, 0.178466796875, 5.245208740234375e-06, 1.2874603271484375e-05], "tokens": [324, 1422, 537, 47721, 984, 440, 11005, 1280, 9973, 724, 291, 320, 291, 442, 308, 410, 27, 95, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 34048, 3134, 7515, 30, 11056, 436, 9973, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 816, 312, 1451, 372, 1015, 275, 319, 477]}
{"line_number": 581, "line_type": "original", "code": "        int k=0;", "entropy": 3.78125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [5.40234375, 5.53125, 7.796875, 3.11328125, 0.74267578125, 0.1068115234375], "tokens": [351, 629, 831, 47, 34, 45]}
{"line_number": 581, "line_type": "generated", "code": "\n        return (int)m;\n    }\n\n    /** \n     * Divide two integers, checking for overflow.\n     * \n     * @param x the dividend\n     * @param y the divisor\n     * @return the quotient <code>x/", "entropy": 0.09857177734375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.043426513671875, 0.01309967041015625, 0.058135986328125, 0.0014982223510742188, 0.007366180419921875, 0.2357177734375, 0.02691650390625, 0.0537109375, 0.0006346702575683594, 0.1944580078125, 0.0390625, 1.2119140625, 4.553794860839844e-05, 2.01953125, 0.0008206367492675781, 0.3212890625, 0.0921630859375, 0.0211181640625, 0.040679931640625, 0.00016999244689941406, 0.0024871826171875, 0.0008869171142578125, 0.10223388671875, 0.0003132820129394531, 0.0728759765625, 0.000152587890625, 0.0007367134094238281, 0.0003650188446044922, 0.13818359375, 0.1536865234375, 0.14453125, 0.0197601318359375, 2.944469451904297e-05, 0.000804901123046875, 1.1205673217773438e-05, 1.4901161193847656e-05, 5.7816505432128906e-05, 0.0003020763397216797, 0.00011479854583740234, 0.0022678375244140625, 0.055908203125, 2.110004425048828e-05, 0.0007033348083496094, 0.0017366409301757812, 0.005741119384765625, 0.006420135498046875, 8.58306884765625e-06, 0.0286865234375, 0.0005078315734863281, 0.00052642822265625, 0.00128936767578125, 0.0015344619750976562], "tokens": [291, 442, 308, 410, 27, 95, 45, 284, 320, 446, 1022, 5384, 319, 17536, 805, 3134, 18670, 30, 11056, 436, 9973, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 4451, 314, 416, 275, 319, 477, 753, 533, 322, 33482, 275, 319, 477, 601, 322, 32785, 1606, 333, 687, 48, 106, 33]}
{"line_number": 582, "line_type": "original", "code": "        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...", "entropy": 0.91357421875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.37890625, 5.0, 2.009765625, 3.17578125, 0.85888671875, 0.06085205078125, 0.0738525390625, 0.0236053466796875, 2.708984375, 1.0576171875, 0.0200653076171875, 0.0062408447265625, 0.00146484375, 0.007152557373046875, 0.0037364959716796875, 1.857421875, 0.356201171875, 1.4921875, 0.10333251953125, 0.03741455078125, 0.04449462890625, 0.0303497314453125, 0.8056640625, 0.368408203125, 0.0849609375, 0.3076171875, 0.024322509765625, 0.11639404296875, 2.30078125, 0.013427734375, 1.0009765625], "tokens": [351, 2218, 1833, 103, 24, 35, 19162, 34, 962, 308, 104, 24, 35, 19162, 34, 962, 831, 46, 37, 35, 27, 301, 434, 2218, 1044, 461, 354, 884, 4335, 4444, 1179]}
{"line_number": 582, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Multiply a number by a fraction.\n     * @param v the number to multiply\n     * @param f the fraction\n     * @return <code>v * f</code>\n     */\n    public static int mulByFraction(", "entropy": 0.293212890625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.2467041015625, 0.1883544921875, 0.32275390625, 0.05108642578125, 0.332763671875, 0.00010406970977783203, 1.8310546875, 1.1064453125, 0.059814453125, 0.0302276611328125, 0.09356689453125, 0.3017578125, 0.0401611328125, 0.10400390625, 0.00567626953125, 1.3642578125, 0.006378173828125, 1.375, 0.65673828125, 0.308349609375, 0.0281524658203125, 0.1326904296875, 0.6396484375, 7.867813110351562e-05, 0.0001747608184814453, 0.00936126708984375, 0.030303955078125, 0.004940032958984375, 0.004467010498046875, 0.39501953125, 0.01352691650390625, 0.000659942626953125, 0.00986480712890625, 0.58740234375, 0.043365478515625, 0.0034942626953125, 0.034576416015625, 0.482666015625, 0.0025539398193359375, 0.001308441162109375, 0.000537872314453125, 0.01181793212890625, 0.00916290283203125, 0.5361328125, 0.01123809814453125, 0.60693359375, 0.1163330078125, 0.172119140625, 0.418212890625, 1.30859375, 1.1962890625, 0.0034580230712890625], "tokens": [284, 320, 446, 1022, 275, 319, 44155, 312, 1451, 810, 312, 18795, 32, 275, 319, 477, 753, 354, 322, 1451, 372, 22213, 275, 319, 477, 753, 296, 322, 18795, 275, 319, 477, 601, 333, 687, 48, 104, 319, 296, 377, 687, 48, 275, 569, 284, 562, 907, 629, 17476, 1083, 20709, 26]}
{"line_number": 585, "line_type": "original", "code": "        if (k==31) {", "entropy": 2.404296875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [3.572265625, 2.736328125, 0.22412109375, 6.546875, 1.4638671875, 6.29296875, 0.42431640625, 0.307861328125, 0.0665283203125], "tokens": [351, 415, 308, 93, 379, 37, 35, 27, 301]}
{"line_number": 585, "line_type": "generated", "code": "\n     * <p>Computes the multiplicative inverse of this fraction,\n     * ie. the number <code>x</code> such that\n     * <code>this * x = 1</code>.\n     * @return the multiplic", "entropy": 0.327880859375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [1.12890625, 0.347900390625, 1.6875, 0.005649566650390625, 0.008544921875, 2.01171875, 0.022979736328125, 0.282470703125, 1.767578125, 0.0002180337905883789, 0.0003364086151123047, 0.00458526611328125, 0.0020885467529296875, 0.73388671875, 0.035400390625, 0.01190185546875, 0.9462890625, 1.2516975402832031e-05, 2.322265625, 0.10687255859375, 0.0772705078125, 1.05078125, 0.08831787109375, 0.005702972412109375, 0.0006132125854492188, 0.418701171875, 0.0007781982421875, 2.276897430419922e-05, 0.013519287109375, 0.0032253265380859375, 0.00012493133544921875, 1.3046875, 3.540515899658203e-05, 0.00970458984375, 0.0684814453125, 0.07757568359375, 0.19287109375, 0.0229339599609375, 0.0008449554443359375, 0.07684326171875, 0.0025424957275390625, 5.125999450683594e-06, 0.004505157470703125, 3.921985626220703e-05, 0.74267578125, 0.234619140625, 0.01177215576171875, 0.9453125, 0.04150390625, 0.2132568359375, 0.01110076904296875, 2.6464462280273438e-05], "tokens": [275, 319, 333, 98, 48, 982, 3676, 322, 12044, 406, 1353, 19385, 432, 458, 18795, 30, 275, 319, 21775, 32, 322, 1451, 333, 687, 48, 106, 377, 687, 48, 3751, 688, 275, 319, 333, 687, 48, 578, 319, 816, 280, 225, 35, 377, 687, 4503, 275, 319, 477, 601, 322, 12044, 406]}
{"line_number": 590, "line_type": "original", "code": "        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;", "entropy": 2.23046875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.96484375, 5.203125, 6.25, 0.1563720703125, 4.06640625, 3.8515625, 0.3642578125, 4.20703125, 3.095703125, 0.66015625, 1.0771484375, 0.01244354248046875, 1.0283203125, 0.1405029296875, 3.25, 0.99365234375, 0.45166015625, 0.04449462890625, 1.7724609375, 3.775390625, 2.2890625, 3.01171875, 0.64404296875], "tokens": [351, 629, 273, 280, 1833, 103, 24, 35, 19162, 35, 27, 1018, 354, 499, 25298, 103, 33, 36, 27, 1109, 52, 37, 35202]}
{"line_number": 590, "line_type": "generated", "code": "\n     * @throws ArithmeticException if the result can not be represented as\n     *                             an int\n     */\n    private static int mulPosAndCheck(int x, int y) {\n        /* assert x>=0 && y>=0; */\n        long m", "entropy": 0.07421875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.2088623046875, 0.845703125, 0.0081787109375, 0.033294677734375, 0.0401611328125, 0.00016045570373535156, 0.01503753662109375, 0.0021915435791015625, 0.005603790283203125, 0.03839111328125, 0.0021381378173828125, 0.0025615692138671875, 0.0014600753784179688, 0.029327392578125, 0.039520263671875, 0.0013055801391601562, 0.193359375, 0.403564453125, 0.0487060546875, 0.2186279296875, 0.048187255859375, 0.027252197265625, 0.0665283203125, 0.0131072998046875, 0.156982421875, 0.00800323486328125, 0.2890625, 0.0005016326904296875, 7.998943328857422e-05, 0.0004525184631347656, 0.01678466796875, 0.004146575927734375, 0.0008893013000488281, 0.00254058837890625, 8.678436279296875e-05, 0.003215789794921875, 0.01416778564453125, 0.049072265625, 0.353271484375, 0.034271240234375, 0.041839599609375, 0.1129150390625, 0.0109100341796875, 0.038787841796875, 0.0018262863159179688, 0.0011682510375976562, 0.006435394287109375, 0.021087646484375, 0.006580352783203125, 0.0299530029296875, 0.350830078125, 0.01081085205078125], "tokens": [275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646, 526, 17718, 619, 275, 319, 11347, 600, 629, 275, 569, 284, 945, 907, 629, 17476, 2996, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1257, 1201, 816, 7148, 34, 962, 533, 7148, 34, 45, 569, 291, 1946, 345]}
{"line_number": 596, "line_type": "original", "code": "            while ((t&1)==0) { // while t is even..", "entropy": 2.42578125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.875, 8.84375, 3.15234375, 11.4765625, 3.091796875, 1.0849609375, 0.317138671875, 0.03619384765625, 0.88232421875, 0.047332763671875, 1.2294921875, 0.2264404296875, 2.595703125, 0.07989501953125, 0.0018024444580078125, 0.8837890625], "tokens": [1468, 2218, 1833, 102, 24, 35, 19162, 34, 27, 301, 434, 2218, 273, 438, 4444, 497]}
{"line_number": 596, "line_type": "generated", "code": "\n        if (m > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow: mulPos\");\n        }\n        return (int)m;\n    }\n\n    /**\n     *  Multiply a number by a fraction.\n     *\n     * @param", "entropy": 0.2022705078125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.2196044921875, 0.0268402099609375, 0.002620697021484375, 0.0067291259765625, 0.052520751953125, 0.0163726806640625, 8.225440979003906e-05, 3.230571746826172e-05, 1.7404556274414062e-05, 2.0384788513183594e-05, 0.00513458251953125, 0.00432586669921875, 0.03619384765625, 0.00974273681640625, 0.00020384788513183594, 0.00585174560546875, 5.602836608886719e-06, 0.0005064010620117188, 0.036865234375, 0.0028018951416015625, 0.0020904541015625, 0.45849609375, 0.07708740234375, 0.004795074462890625, 0.0005331039428710938, 0.0118560791015625, 0.0008387565612792969, 0.0005774497985839844, 2.8014183044433594e-05, 0.00013577938079833984, 0.0222625732421875, 0.0012502670288085938, 0.0138397216796875, 0.0012454986572265625, 0.5498046875, 0.10760498046875, 0.197509765625, 0.00011157989501953125, 0.74462890625, 1.1513671875, 1.3671875, 0.54150390625, 0.0911865234375, 0.05438232421875, 1.9697265625, 0.5380859375, 0.139892578125, 0.01239013671875, 1.7294921875, 0.0029163360595703125, 0.29052734375, 0.004451751708984375], "tokens": [291, 415, 308, 95, 848, 4401, 32, 3459, 81, 5975, 27, 301, 324, 1422, 537, 47721, 984, 440, 9642, 44, 17476, 2996, 724, 291, 320, 291, 442, 308, 410, 27, 95, 45, 284, 320, 446, 1022, 275, 319, 225, 44155, 312, 1451, 810, 312, 18795, 32, 275, 319, 275, 319, 477, 753]}
{"line_number": 600, "line_type": "original", "code": "            if (t>0) {", "entropy": 2.875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.1875, 4.82421875, 0.099853515625, 7.64453125, 2.923828125, 1.1669921875, 0.0762939453125, 0.07672119140625], "tokens": [1468, 415, 308, 102, 48, 34, 27, 301]}
{"line_number": 600, "line_type": "generated", "code": "\n    }\n\n    /**\n     *  Multiply two non-negative integers, checking for overflow.\n     * \n     * @param x a non-negative factor\n     * @param y a non-negative factor\n     * @return the product <code>x*y", "entropy": 0.11334228515625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.149169921875, 0.039154052734375, 0.5615234375, 0.1368408203125, 0.220458984375, 0.0001842975616455078, 0.55517578125, 0.8984375, 0.69287109375, 0.509765625, 0.000659942626953125, 0.0123748779296875, 0.449951171875, 0.0165863037109375, 0.02069091796875, 0.0191802978515625, 0.00969696044921875, 0.40966796875, 0.034332275390625, 0.002323150634765625, 0.0997314453125, 0.00010013580322265625, 0.0141754150390625, 0.0017681121826171875, 0.05145263671875, 0.06036376953125, 0.062103271484375, 0.00012993812561035156, 0.0037937164306640625, 0.004688262939453125, 0.010040283203125, 2.47955322265625e-05, 0.0006861686706542969, 0.0009150505065917969, 0.1334228515625, 0.0192718505859375, 0.07080078125, 4.887580871582031e-06, 0.002162933349609375, 0.0003306865692138672, 0.0022106170654296875, 0.0003464221954345703, 0.0025005340576171875, 0.544921875, 0.0132904052734375, 0.036773681640625, 0.00409698486328125, 0.0004012584686279297, 0.0033969879150390625, 0.004779815673828125, 0.006816864013671875, 0.0008692741394042969], "tokens": [284, 320, 446, 1022, 275, 319, 225, 44155, 3134, 2979, 31, 15272, 18670, 30, 11056, 436, 9973, 32, 275, 319, 5384, 319, 477, 753, 816, 312, 2979, 31, 15272, 10365, 275, 319, 477, 753, 533, 312, 2979, 31, 15272, 10365, 275, 319, 477, 601, 322, 4054, 333, 687, 48, 106, 28, 107]}
{"line_number": 601, "line_type": "original", "code": "                u = -t;", "entropy": 4.16796875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [8.4453125, 10.125, 0.587890625, 2.736328125, 2.984375, 0.1363525390625], "tokens": [2071, 1044, 280, 429, 102, 45]}
{"line_number": 601, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [], "tokens": []}
{"line_number": 603, "line_type": "original", "code": "                v = t;", "entropy": 5.92578125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [8.625, 7.56640625, 2.146484375, 7.22265625, 4.05859375], "tokens": [2071, 354, 280, 273, 45]}
{"line_number": 603, "line_type": "generated", "code": "\n     *  Returns the greatest common divisor of the absolute value of\n     *  two numbers, using the \"binary gcd\" method which avoids\n     *  division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * ", "entropy": 0.1646728515625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.86083984375, 0.7666015625, 1.009765625, 1.6708984375, 0.378173828125, 1.177734375, 0.020965576171875, 0.00592041015625, 0.09930419921875, 0.481689453125, 0.369384765625, 0.01007843017578125, 0.0182342529296875, 0.262939453125, 6.961822509765625e-05, 0.302001953125, 0.619140625, 0.07720947265625, 0.0673828125, 0.036712646484375, 0.0252227783203125, 0.11920166015625, 0.01535797119140625, 0.0010166168212890625, 0.0006814002990722656, 0.001087188720703125, 0.0028896331787109375, 0.0013246536254882812, 0.01320648193359375, 4.3272972106933594e-05, 0.0257720947265625, 0.00444793701171875, 0.0001289844512939453, 0.0003643035888671875, 0.00022232532501220703, 0.019287109375, 0.044158935546875, 0.005207061767578125, 0.0003521442413330078, 1.1920928955078125e-07, 0.0011510848999023438, 1.8835067749023438e-05, 2.0265579223632812e-06, 7.152557373046875e-07, 2.5272369384765625e-05, 2.5391578674316406e-05, 0.0001761913299560547, 0.0003058910369873047, 0.0012235641479492188, 0.0056915283203125, 0.0014295578002929688, 0.04132080078125], "tokens": [275, 319, 225, 3759, 322, 48299, 4942, 33482, 432, 322, 7976, 786, 432, 275, 319, 225, 3134, 7515, 30, 1471, 322, 313, 7003, 43422, 20, 1411, 1510, 43585, 275, 319, 225, 20654, 461, 41647, 7373, 32, 225, 2802, 44327, 860, 225, 38, 32, 39, 32, 36, 8218, 551, 32, 275, 319, 225]}
{"line_number": 606, "line_type": "original", "code": "            t = (v - u)/2;", "entropy": 3.275390625, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [6.546875, 8.90625, 1.041015625, 1.6162109375, 7.609375, 3.26171875, 0.72607421875, 2.767578125, 0.0300750732421875, 0.2413330078125], "tokens": [1468, 273, 280, 308, 104, 429, 1044, 4165, 36, 45]}
{"line_number": 606, "line_type": "generated", "code": "\n     * @param y an addend", "entropy": 0.05072021484375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.3369140625, 0.02667236328125, 0.019744873046875, 0.012237548828125, 0.002368927001953125, 0.00676727294921875, 0.00038623809814453125, 0.0006036758422851562], "tokens": [275, 319, 477, 753, 533, 600, 1015, 416]}
{"line_number": 609, "line_type": "original", "code": "        } while (t!=0);", "entropy": 3.115234375, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.05078125, 6.29296875, 7.28125, 0.25439453125, 3.8671875, 2.685546875, 0.2181396484375, 0.27587890625], "tokens": [351, 320, 2218, 308, 102, 6901, 34, 293]}
{"line_number": 609, "line_type": "generated", "code": "\n     */\n    private static int addAndCheck(int x, int y) {\n        long s = (long)x + (long)y;\n        if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE) {", "entropy": 0.036407470703125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [0.3955078125, 0.0131378173828125, 0.0169830322265625, 0.01178741455078125, 0.001323699951171875, 0.006195068359375, 0.0042266845703125, 0.0004544258117675781, 9.655952453613281e-05, 5.9485435485839844e-05, 0.0017528533935546875, 0.0004146099090576172, 8.797645568847656e-05, 0.0010051727294921875, 1.9788742065429688e-05, 0.0002868175506591797, 0.006244659423828125, 0.0130767822265625, 0.0027103424072265625, 0.05670166015625, 0.0007433891296386719, 0.84716796875, 0.051788330078125, 0.0011014938354492188, 0.00652313232421875, 0.18212890625, 0.0157318115234375, 6.556510925292969e-05, 3.5881996154785156e-05, 0.001308441162109375, 0.0001646280288696289, 0.00809478759765625, 0.0026569366455078125, 0.0007615089416503906, 0.002002716064453125, 0.0248260498046875, 0.0011959075927734375, 6.949901580810547e-05, 1.0728836059570312e-06, 3.6954879760742188e-06, 2.6106834411621094e-05, 0.0008630752563476562, 0.206787109375, 4.3511390686035156e-05, 0.0003829002380371094, 0.00018644332885742188, 1.2516975402832031e-05, 9.417533874511719e-06, 6.9141387939453125e-06, 1.430511474609375e-05, 0.0010728836059570312, 0.004291534423828125], "tokens": [275, 569, 284, 945, 907, 629, 1015, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1946, 309, 280, 308, 3222, 27, 106, 474, 308, 3222, 27, 107, 45, 291, 415, 308, 101, 333, 4401, 32, 4683, 81, 5975, 1276, 324, 309, 848, 4401, 32, 3459, 81, 5975, 27, 301]}
{"line_number": 610, "line_type": "original", "code": "        return -u*(1<<k); // gcd is u*2^k", "entropy": 3.38671875, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [4.4765625, 3.47265625, 8.984375, 7.1171875, 6.81640625, 1.998046875, 1.7294921875, 2.44921875, 0.791015625, 2.283203125, 6.1640625, 1.4453125, 6.09765625, 3.63671875, 0.00832366943359375, 0.02349853515625, 0.0633544921875], "tokens": [351, 442, 429, 103, 8088, 35, 3571, 93, 293, 434, 43422, 438, 1044, 28, 36, 80, 93]}
{"line_number": 610, "line_type": "generated", "code": "\n    }\n\n    /**\n     *  Add two non-negative integers, checking for overflow.\n     * \n     * @param x a non-negative addend\n     * @param y a non-negative addend\n     * @return the sum <code>x", "entropy": 0.110595703125, "is_bug_line": false, "sus_score": 0.3333333333333333, "per_token_entropy": [2.177734375, 0.043548583984375, 0.908203125, 0.338134765625, 0.47216796875, 0.00033545494079589844, 0.94921875, 0.232177734375, 0.10064697265625, 0.0256195068359375, 0.0012216567993164062, 0.00036597251892089844, 0.00469207763671875, 0.00220489501953125, 0.0014438629150390625, 0.0004239082336425781, 0.0029392242431640625, 0.006591796875, 0.0243682861328125, 0.0006933212280273438, 0.0748291015625, 8.45193862915039e-05, 0.008331298828125, 0.0008263587951660156, 0.00742340087890625, 0.297119140625, 0.00260162353515625, 0.0005803108215332031, 0.0003008842468261719, 0.01062774658203125, 8.726119995117188e-05, 0.005077362060546875, 1.049041748046875e-05, 2.002716064453125e-05, 4.112720489501953e-05, 0.00037169456481933594, 0.0008511543273925781, 0.0015201568603515625, 2.3365020751953125e-05, 0.0008854866027832031, 0.0009889602661132812, 0.00048828125, 0.0049896240234375, 0.0001811981201171875, 0.00042724609375, 0.00042510032653808594, 0.0029125213623046875, 0.0301361083984375, 0.0035858154296875, 0.00060272216796875, 5.1021575927734375e-05, 0.0004093647003173828], "tokens": [284, 320, 446, 1022, 275, 319, 225, 2222, 3134, 2979, 31, 15272, 18670, 30, 11056, 436, 9973, 32, 275, 319, 5384, 319, 477, 753, 816, 312, 2979, 31, 15272, 1015, 416, 275, 319, 477, 753, 533, 312, 2979, 31, 15272, 1015, 416, 275, 319, 477, 601, 322, 3632, 333, 687, 48, 106]}
{"line_number": 571, "line_type": "original", "code": "        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {", "entropy": 1.33984375, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [2.978515625, 0.93505859375, 0.12646484375, 6.3515625, 0.0019407272338867188, 0.0270843505859375, 0.015869140625, 9.9765625, 0.3837890625, 5.484375, 3.509765625, 1.7216796875, 0.392578125, 0.12188720703125, 0.00046324729919433594, 0.00023925304412841797, 0.0005173683166503906, 0.004016876220703125, 0.0030803680419921875, 0.01062774658203125, 0.00466156005859375, 0.0012025833129882812, 0.0254974365234375, 0.0909423828125], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 103, 27, 2511, 225, 35, 1276, 4175, 32, 3596, 26, 104, 27, 2511, 225, 35, 27, 301]}
{"line_number": 571, "line_type": "generated", "code": "\n     */\n    private static int mulAndCheck(int x, int y) {\n        long m = (long)x * (long)y;\n        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {\n           ", "entropy": 0.075439453125, "is_bug_line": false, "sus_score": 0.31622776601683794, "per_token_entropy": [0.433837890625, 0.5205078125, 0.02655029296875, 0.0772705078125, 0.009490966796875, 0.229736328125, 0.61181640625, 0.02972412109375, 6.842613220214844e-05, 0.002685546875, 0.032470703125, 0.0003294944763183594, 0.0007519721984863281, 0.00969696044921875, 6.449222564697266e-05, 0.0006685256958007812, 0.0814208984375, 0.0911865234375, 0.0472412109375, 0.005329132080078125, 0.0020694732666015625, 0.26171875, 0.00118255615234375, 0.0010633468627929688, 0.61083984375, 0.0261077880859375, 0.462646484375, 0.0004057884216308594, 0.00013637542724609375, 0.00333404541015625, 0.0011606216430664062, 0.03857421875, 0.004138946533203125, 0.030792236328125, 0.00372314453125, 0.1214599609375, 0.050384521484375, 0.00015485286712646484, 2.1457672119140625e-06, 1.430511474609375e-06, 1.4781951904296875e-05, 0.0014791488647460938, 0.03375244140625, 0.0006031990051269531, 0.0006933212280273438, 2.9206275939941406e-05, 6.4373016357421875e-06, 3.814697265625e-06, 2.9802322387695312e-05, 0.0016775131225585938, 0.0092315673828125, 0.043487548828125], "tokens": [275, 569, 284, 945, 907, 629, 17476, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1946, 345, 280, 308, 3222, 27, 106, 319, 308, 3222, 27, 107, 45, 291, 415, 308, 95, 333, 4401, 32, 4683, 81, 5975, 1276, 345, 848, 4401, 32, 3459, 81, 5975, 27, 301, 324]}
