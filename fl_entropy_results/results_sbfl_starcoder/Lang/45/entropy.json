{"line_number": 607, "line_type": "original", "code": "        if (str == null) {", "entropy": 1.087890625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [3.69140625, 2.41015625, 0.06451416015625, 1.40234375, 0.884765625, 0.005107879638671875, 0.082763671875, 0.1610107421875], "tokens": [351, 415, 308, 466, 610, 744, 27, 301]}
{"line_number": 607, "line_type": "generated", "code": "\n    /**\n     * <p>Checks if a String is whitespace, empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isBlank(null)      = true\n     * StringUtils.isBlank(\"\")        = true\n     * StringUtils", "entropy": 0.14404296875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.326171875, 0.7421875, 0.05078125, 0.0006022453308105469, 1.34375, 0.09722900390625, 0.0169677734375, 1.521484375, 0.0545654296875, 0.29248046875, 0.1015625, 0.31787109375, 1.5029296875, 0.0014781951904296875, 0.0027790069580078125, 0.00035834312438964844, 0.0006203651428222656, 9.894371032714844e-06, 0.0018329620361328125, 0.007396697998046875, 2.0265579223632812e-06, 0.0006580352783203125, 0.00414276123046875, 0.00039839744567871094, 0.061187744140625, 0.0009436607360839844, 0.00702667236328125, 0.003910064697265625, 0.0012331008911132812, 0.00024402141571044922, 0.0007638931274414062, 0.0074615478515625, 6.818771362304688e-05, 0.011505126953125, 0.00252532958984375, 5.841255187988281e-06, 1.4543533325195312e-05, 0.0009860992431640625, 4.184246063232422e-05, 0.0006575584411621094, 0.0003848075866699219, 1.8596649169921875e-05, 1.1801719665527344e-05, 4.0531158447265625e-05, 0.00021123886108398438, 0.0005617141723632812, 6.9141387939453125e-06, 8.463859558105469e-06, 1.1444091796875e-05, 0.00043654441833496094, 1.2159347534179688e-05, 7.510185241699219e-05], "tokens": [284, 1022, 275, 319, 333, 98, 48, 19393, 415, 312, 892, 438, 19782, 30, 3502, 2884, 657, 556, 744, 1730, 98, 48, 275, 319, 275, 319, 333, 1001, 48, 275, 319, 26617, 32, 40519, 26, 1693, 27, 647, 280, 861, 275, 319, 26617, 32, 40519, 17987, 351, 280, 861, 275, 319, 26617]}
{"line_number": 608, "line_type": "original", "code": "            return null;", "entropy": 2.919921875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.7890625, 2.6484375, 2.20703125, 0.035400390625], "tokens": [1468, 442, 744, 45]}
{"line_number": 608, "line_type": "generated", "code": "\n    /**\n     * <p>Checks if a String is empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isEmpty(null)      = true\n     * StringUtils.isEmpty(\"\")        = true\n     * StringUtils.isEmpty", "entropy": 0.1290283203125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.369140625, 0.86767578125, 0.0496826171875, 0.000759124755859375, 1.291015625, 0.1298828125, 0.0221099853515625, 1.626953125, 0.0570068359375, 0.281982421875, 0.09796142578125, 0.30810546875, 0.40966796875, 0.0103607177734375, 0.00019228458404541016, 0.0009002685546875, 0.00502777099609375, 0.002346038818359375, 4.291534423828125e-06, 0.0007834434509277344, 0.003604888916015625, 0.0003247261047363281, 0.10235595703125, 0.00154876708984375, 0.00539398193359375, 0.0015277862548828125, 0.0009307861328125, 0.00013947486877441406, 0.0014200210571289062, 0.0030422210693359375, 4.6133995056152344e-05, 0.0360107421875, 0.01161956787109375, 8.225440979003906e-06, 1.4066696166992188e-05, 0.0010662078857421875, 6.985664367675781e-05, 0.0003745555877685547, 0.00029659271240234375, 1.5854835510253906e-05, 1.0609626770019531e-05, 4.1961669921875e-05, 0.00010538101196289062, 0.00360107421875, 3.933906555175781e-06, 7.033348083496094e-06, 2.014636993408203e-05, 0.0006055831909179688, 1.33514404296875e-05, 7.11679458618164e-05, 0.0009317398071289062, 0.0005130767822265625], "tokens": [284, 1022, 275, 319, 333, 98, 48, 19393, 415, 312, 892, 438, 3502, 2884, 657, 556, 744, 1730, 98, 48, 275, 319, 275, 319, 333, 1001, 48, 275, 319, 26617, 32, 6393, 26, 1693, 27, 647, 280, 861, 275, 319, 26617, 32, 6393, 17987, 351, 280, 861, 275, 319, 26617, 32, 6393]}
{"line_number": 610, "line_type": "original", "code": "        if (str.length() == 0) {", "entropy": 1.126953125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [4.38671875, 2.3359375, 0.0648193359375, 2.0234375, 0.8984375, 0.323974609375, 0.007720947265625, 3.13671875, 0.1793212890625, 0.03021240234375, 0.05560302734375, 0.0810546875], "tokens": [351, 415, 308, 466, 32, 1322, 346, 610, 225, 34, 27, 301]}
{"line_number": 610, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [], "tokens": []}
{"line_number": 611, "line_type": "original", "code": "            return StringUtils.EMPTY;", "entropy": 2.986328125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.01171875, 2.6640625, 2.91015625, 0.004669189453125, 5.12109375, 0.2156982421875], "tokens": [1468, 442, 26617, 32, 13073, 45]}
{"line_number": 611, "line_type": "generated", "code": "\n    public static String abbreviate(String str, int lower, int upper) {\n        return StringUtils.abbreviate(str, lower, upper, null);\n    }\n\n    /**\n     * <p>Abbreviates a String using another given String", "entropy": 0.2447509765625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.3564453125, 1.7412109375, 0.042755126953125, 0.4130859375, 0.58642578125, 0.00024890899658203125, 0.0006070137023925781, 0.1959228515625, 0.0156402587890625, 0.0052642822265625, 0.026458740234375, 0.0091552734375, 0.498291015625, 0.134521484375, 0.146240234375, 0.00013554096221923828, 0.06488037109375, 0.018707275390625, 0.0307769775390625, 0.031890869140625, 0.8271484375, 0.0023345947265625, 0.00018548965454101562, 1.239776611328125e-05, 1.71661376953125e-05, 0.0007581710815429688, 0.004123687744140625, 5.7220458984375e-05, 0.004222869873046875, 0.00021636486053466797, 0.0007877349853515625, 0.004085540771484375, 0.1348876953125, 0.001194000244140625, 0.0178985595703125, 0.0008006095886230469, 0.478759765625, 0.89599609375, 0.039337158203125, 0.00039839744567871094, 1.7919921875, 0.011932373046875, 0.00925445556640625, 0.7177734375, 5.7220458984375e-06, 0.00026869773864746094, 0.005889892578125, 0.978515625, 0.09625244140625, 0.56298828125, 0.81005859375, 0.00839996337890625], "tokens": [284, 562, 907, 892, 31838, 4788, 332, 26, 652, 596, 30, 629, 7216, 30, 629, 8342, 27, 301, 291, 442, 26617, 32, 28944, 4788, 332, 26, 466, 30, 7216, 30, 8342, 30, 744, 293, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 44336, 4788, 1196, 312, 892, 1471, 4674, 2702, 892]}
{"line_number": 618, "line_type": "original", "code": "        if (upper == -1 || upper > str.length()) {", "entropy": 0.939453125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [3.8359375, 2.041015625, 0.05792236328125, 1.91796875, 3.18359375, 1.2314453125, 0.001605987548828125, 1.501953125, 0.135498046875, 0.058837890625, 0.072021484375, 0.01261138916015625, 0.0004787445068359375, 0.015838623046875, 0.0303802490234375], "tokens": [351, 415, 308, 7607, 610, 429, 35, 1276, 8342, 848, 596, 32, 1322, 1157, 301]}
{"line_number": 618, "line_type": "generated", "code": "\n    /**\n     * <p>Checks if a String is whitespace, empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isBlank(null)      = true\n     * StringUtils.isBlank(\"\")        = true\n     * StringUtils", "entropy": 0.1480712890625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.962890625, 0.453125, 0.038909912109375, 0.0004725456237792969, 1.6142578125, 0.08453369140625, 0.01445770263671875, 2.13671875, 0.05535888671875, 0.278564453125, 0.0987548828125, 0.38330078125, 1.4541015625, 0.001285552978515625, 0.003047943115234375, 0.0003986358642578125, 0.0006937980651855469, 1.0132789611816406e-05, 0.0019626617431640625, 0.00751495361328125, 2.5033950805664062e-06, 0.0006022453308105469, 0.004283905029296875, 0.00033473968505859375, 0.061279296875, 0.00091552734375, 0.00704193115234375, 0.0036754608154296875, 0.0010166168212890625, 0.0002416372299194336, 0.000751495361328125, 0.008544921875, 6.949901580810547e-05, 0.01230621337890625, 0.00243377685546875, 6.079673767089844e-06, 1.5497207641601562e-05, 0.0009679794311523438, 4.184246063232422e-05, 0.0006594657897949219, 0.00040531158447265625, 1.811981201171875e-05, 1.239776611328125e-05, 3.743171691894531e-05, 0.0002925395965576172, 0.0005688667297363281, 6.556510925292969e-06, 9.5367431640625e-06, 1.239776611328125e-05, 0.00047588348388671875, 1.2993812561035156e-05, 9.691715240478516e-05], "tokens": [284, 1022, 275, 319, 333, 98, 48, 19393, 415, 312, 892, 438, 19782, 30, 3502, 2884, 657, 556, 744, 1730, 98, 48, 275, 319, 275, 319, 333, 1001, 48, 275, 319, 26617, 32, 40519, 26, 1693, 27, 647, 280, 861, 275, 319, 26617, 32, 40519, 17987, 351, 280, 861, 275, 319, 26617]}
{"line_number": 619, "line_type": "original", "code": "            upper = str.length();", "entropy": 2.244140625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.734375, 5.58984375, 0.306640625, 2.791015625, 0.0439453125, 0.08154296875, 0.1522216796875], "tokens": [1468, 8342, 280, 596, 32, 1322, 473]}
{"line_number": 619, "line_type": "generated", "code": "    public static void main(String[] args) {\n        System.out.println(abbreviate(\"helloworld\", 0, 10, \"...\"));\n        System.out.println(abbreviate(\"helloworld\", 0, 5,", "entropy": 0.29248046875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.990234375, 1.9697265625, 0.05157470703125, 1.51953125, 0.084716796875, 0.006103515625, 0.015045166015625, 0.0380859375, 0.01519775390625, 0.013885498046875, 0.309326171875, 0.408203125, 0.84521484375, 0.0006651878356933594, 0.004573822021484375, 0.0018825531005859375, 0.00337982177734375, 0.276611328125, 0.27587890625, 4.2438507080078125e-05, 0.00019752979278564453, 0.31103515625, 2.20703125, 0.39990234375, 0.05841064453125, 0.405029296875, 0.0081329345703125, 0.068115234375, 1.2509765625, 0.27099609375, 0.1883544921875, 0.5888671875, 0.01020050048828125, 0.36279296875, 0.01239013671875, 0.0027980804443359375, 0.0002338886260986328, 0.0002206563949584961, 7.677078247070312e-05, 0.0036449432373046875, 0.001338958740234375, 2.384185791015625e-07, 8.344650268554688e-07, 0.0175628662109375, 0.06134033203125, 0.038330078125, 0.0406494140625, 0.072998046875, 0.000804901123046875, 0.0924072265625, 0.88232421875, 0.0258026123046875], "tokens": [264, 562, 907, 763, 2575, 26, 652, 1178, 2181, 27, 301, 291, 1171, 32, 541, 32, 3948, 26, 28944, 4788, 332, 440, 47967, 392, 225, 34, 30, 225, 35, 34, 30, 20550, 2974, 291, 1171, 32, 541, 32, 3948, 26, 28944, 4788, 332, 440, 47967, 392, 225, 34, 30, 225, 39, 30]}
{"line_number": 622, "line_type": "original", "code": "        if (upper < lower) {", "entropy": 1.1904296875, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [3.62890625, 1.91796875, 0.053558349609375, 2.0859375, 1.6494140625, 0.1326904296875, 0.017120361328125, 0.03851318359375], "tokens": [351, 415, 308, 7607, 333, 7216, 27, 301]}
{"line_number": 622, "line_type": "generated", "code": "\n    /**\n     * Wraps a single String into a paragraph of a given width using a given\n     * delimiter.\n     * \n     * <p>\n     * The String is broken into tokens using {@link #split(String, String)}.\n     * The delimiter", "entropy": 0.5810546875, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [1.103515625, 0.55419921875, 0.044769287109375, 0.0004858970642089844, 3.53125, 0.018096923828125, 0.0223388671875, 0.07562255859375, 0.611328125, 0.6474609375, 0.1947021484375, 0.464599609375, 0.187255859375, 1.3720703125, 0.59912109375, 0.005290985107421875, 2.00390625, 1.552734375, 1.1748046875, 1.283203125, 8.821487426757812e-05, 0.51220703125, 0.488037109375, 0.66748046875, 0.001544952392578125, 1.146484375, 9.131431579589844e-05, 1.251953125, 0.374267578125, 0.0031185150146484375, 0.273193359375, 8.320808410644531e-05, 1.939453125, 0.97216796875, 0.329345703125, 0.71484375, 0.6533203125, 1.421875, 0.7265625, 0.923828125, 0.038116455078125, 0.0445556640625, 0.072265625, 0.0447998046875, 0.00811004638671875, 0.247802734375, 0.2039794921875, 0.148193359375, 0.55224609375, 0.00010395050048828125, 0.3232421875, 0.67919921875], "tokens": [284, 1022, 275, 319, 27637, 101, 312, 3982, 892, 1991, 312, 18852, 432, 312, 2702, 1861, 1471, 312, 2702, 275, 319, 19713, 32, 275, 319, 5384, 319, 333, 98, 48, 275, 319, 886, 892, 438, 12850, 1991, 7937, 1471, 3088, 1204, 588, 2998, 26, 652, 30, 892, 31842, 275, 319, 886, 19713]}
{"line_number": 623, "line_type": "original", "code": "            upper = lower;", "entropy": 3.015625, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [6.4609375, 5.61328125, 0.271728515625, 2.326171875, 0.408447265625], "tokens": [1468, 8342, 280, 7216, 45]}
{"line_number": 623, "line_type": "generated", "code": "\n    /**\n     * <p>Checks if a String is empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isEmpty(null)      = true\n     * StringUtils.isEmpty(\"\")        = true\n     * StringUtils.isEmpty", "entropy": 0.13525390625, "is_bug_line": true, "sus_score": 1.0, "per_token_entropy": [1.431640625, 0.86083984375, 0.040802001953125, 0.0005354881286621094, 1.400390625, 0.1207275390625, 0.02008056640625, 1.7685546875, 0.057586669921875, 0.296875, 0.09796142578125, 0.330078125, 0.410400390625, 0.0096282958984375, 0.0001919269561767578, 0.00089263916015625, 0.005573272705078125, 0.00246429443359375, 3.814697265625e-06, 0.0007429122924804688, 0.0037059783935546875, 0.0002834796905517578, 0.1102294921875, 0.0014448165893554688, 0.005329132080078125, 0.0014181137084960938, 0.0008130073547363281, 0.00014102458953857422, 0.001338958740234375, 0.0030155181884765625, 4.661083221435547e-05, 0.034515380859375, 0.0097198486328125, 8.225440979003906e-06, 1.2874603271484375e-05, 0.0011758804321289062, 7.069110870361328e-05, 0.00026702880859375, 0.0002791881561279297, 1.3947486877441406e-05, 1.0132789611816406e-05, 3.898143768310547e-05, 9.441375732421875e-05, 0.0029773712158203125, 3.814697265625e-06, 6.9141387939453125e-06, 1.7523765563964844e-05, 0.0005960464477539062, 1.3470649719238281e-05, 7.605552673339844e-05, 0.001007080078125, 0.0005040168762207031], "tokens": [284, 1022, 275, 319, 333, 98, 48, 19393, 415, 312, 892, 438, 3502, 2884, 657, 556, 744, 1730, 98, 48, 275, 319, 275, 319, 333, 1001, 48, 275, 319, 26617, 32, 6393, 26, 1693, 27, 647, 280, 861, 275, 319, 26617, 32, 6393, 17987, 351, 280, 861, 275, 319, 26617, 32, 6393]}
{"line_number": 626, "line_type": "original", "code": "        StringBuffer result = new StringBuffer();", "entropy": 1.3095703125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [3.55859375, 5.20703125, 0.2135009765625, 0.006412506103515625, 0.0017642974853515625, 0.00017404556274414062, 0.1727294921875], "tokens": [351, 21933, 1056, 280, 537, 21933, 473]}
{"line_number": 626, "line_type": "generated", "code": "\n    /**\n     * <p>Abbreviates a string using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n     *\n     * <p>Specifically", "entropy": 0.1717529296875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.81494140625, 0.281982421875, 0.028472900390625, 0.0005083084106445312, 1.962890625, 0.10821533203125, 0.01447296142578125, 0.95068359375, 1.8835067749023438e-05, 0.0002104043960571289, 0.01123046875, 0.51220703125, 1.6630859375, 0.65283203125, 0.0009326934814453125, 0.00027251243591308594, 0.005290985107421875, 0.418212890625, 0.078125, 0.0016984939575195312, 0.38330078125, 5.1856040954589844e-05, 0.038116455078125, 0.031524658203125, 1.8477439880371094e-05, 4.363059997558594e-05, 0.01227569580078125, 0.0003325939178466797, 0.0013103485107421875, 0.0037784576416015625, 0.0174407958984375, 0.276123046875, 0.0002765655517578125, 0.0285186767578125, 0.0010290145874023438, 0.0171966552734375, 0.0094451904296875, 0.0213165283203125, 0.002361297607421875, 0.0227203369140625, 0.01375579833984375, 5.4836273193359375e-06, 0.00848388671875, 0.005641937255859375, 9.40561294555664e-05, 0.280029296875, 0.0007395744323730469, 0.017791748046875, 0.16162109375, 0.0042266845703125, 0.046630859375, 0.0160369873046875], "tokens": [284, 1022, 275, 319, 333, 98, 48, 44336, 4788, 1196, 312, 802, 1471, 709, 2794, 1464, 32, 1348, 1098, 6927, 275, 319, 313, 6529, 438, 322, 1133, 436, 1169, 4644, 10446, 20, 1991, 313, 6529, 438, 322, 1133, 436, 13585, 377, 98, 48, 275, 319, 275, 319, 333, 98, 48, 16552, 1247]}
{"line_number": 627, "line_type": "original", "code": "        int index = StringUtils.indexOf(str, \" \", lower);", "entropy": 0.7919921875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [3.3828125, 2.462890625, 0.2005615234375, 0.00531005859375, 1.203125, 0.0008649826049804688, 0.090087890625, 0.20703125, 0.03973388671875, 0.0121917724609375, 2.583984375, 0.213623046875, 0.37646484375, 0.305419921875], "tokens": [351, 629, 1650, 280, 26617, 32, 7142, 26, 466, 30, 313, 3003, 7216, 293]}
{"line_number": 627, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the", "entropy": 0.1011962890625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.82177734375, 0.495849609375, 0.037506103515625, 0.000637054443359375, 1.4443359375, 0.016082763671875, 4.017353057861328e-05, 0.00016891956329345703, 0.0008053779602050781, 0.00859832763671875, 0.1839599609375, 0.5595703125, 0.0743408203125, 0.039093017578125, 0.00029015541076660156, 0.2484130859375, 4.398822784423828e-05, 0.02655029296875, 0.00392913818359375, 0.4287109375, 0.0005388259887695312, 0.0004968643188476562, 0.003826141357421875, 0.055572509765625, 0.056793212890625, 0.00922393798828125, 0.00836181640625, 0.0082550048828125, 0.01233673095703125, 0.002513885498046875, 4.6253204345703125e-05, 3.2186508178710938e-06, 0.0079345703125, 0.0001004934310913086, 0.0004017353057861328, 0.007289886474609375, 0.005191802978515625, 0.0300140380859375, 0.59716796875, 0.0029087066650390625, 0.0009350776672363281, 0.00020110607147216797, 0.0163116455078125, 0.013458251953125, 0.0007352828979492188, 0.0007123947143554688, 0.00225830078125, 0.00038909912109375, 0.0273284912109375, 8.7738037109375e-05, 0.00037169456481933594, 3.457069396972656e-05], "tokens": [284, 1022, 275, 319, 399, 2882, 268, 4788, 1196, 312, 802, 46931, 32, 275, 319, 5384, 319, 1348, 1411, 33243, 436, 322, 1932, 5122, 2685, 322, 7216, 2723, 461, 31838, 4788, 1196, 275, 319, 322, 892, 2017, 32, 2030, 1098, 2329, 5489, 1346, 892, 5403, 619, 312, 3395, 275, 319, 372, 322]}
{"line_number": 628, "line_type": "original", "code": "        if (index == -1) {", "entropy": 0.9208984375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [3.330078125, 1.9140625, 0.04376220703125, 0.30517578125, 1.6669921875, 0.0660400390625, 0.0009522438049316406, 0.94677734375, 0.0185394287109375], "tokens": [351, 415, 308, 1055, 610, 429, 35, 27, 301]}
{"line_number": 628, "line_type": "generated", "code": "\n    /**\n     * <p>Abbreviates a string using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n     *\n     * <p>Specifically", "entropy": 0.181640625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.0341796875, 0.439208984375, 0.043792724609375, 0.0005445480346679688, 1.6630859375, 0.08941650390625, 0.0132293701171875, 1.2958984375, 3.3974647521972656e-05, 0.00022733211517333984, 0.010467529296875, 0.5703125, 1.6513671875, 0.720703125, 0.0009708404541015625, 0.0003597736358642578, 0.004638671875, 0.46533203125, 0.0841064453125, 0.001987457275390625, 0.337158203125, 6.23464584350586e-05, 0.041351318359375, 0.02777099609375, 1.7523765563964844e-05, 4.2438507080078125e-05, 0.01201629638671875, 0.00035309791564941406, 0.00133514404296875, 0.00373077392578125, 0.015869140625, 0.2342529296875, 0.00027370452880859375, 0.0303955078125, 0.0011157989501953125, 0.0193634033203125, 0.00954437255859375, 0.0200347900390625, 0.0025730133056640625, 0.0206298828125, 0.01189422607421875, 6.079673767089844e-06, 0.00798797607421875, 0.005207061767578125, 0.0001226663589477539, 0.29345703125, 0.0007152557373046875, 0.020782470703125, 0.1544189453125, 0.004119873046875, 0.05987548828125, 0.015533447265625], "tokens": [284, 1022, 275, 319, 333, 98, 48, 44336, 4788, 1196, 312, 802, 1471, 709, 2794, 1464, 32, 1348, 1098, 6927, 275, 319, 313, 6529, 438, 322, 1133, 436, 1169, 4644, 10446, 20, 1991, 313, 6529, 438, 322, 1133, 436, 13585, 377, 98, 48, 275, 319, 275, 319, 333, 98, 48, 16552, 1247]}
{"line_number": 629, "line_type": "original", "code": "            result.append(str.substring(0, upper));", "entropy": 0.98388671875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.8125, 2.78515625, 0.006893157958984375, 0.034393310546875, 0.11492919921875, 0.45751953125, 0.004886627197265625, 0.0020294189453125, 0.0025463104248046875, 1.892578125, 0.0018129348754882812, 0.65234375, 0.0185699462890625], "tokens": [1468, 1056, 32, 1689, 26, 466, 32, 8723, 26, 34, 30, 8342, 876]}
{"line_number": 629, "line_type": "generated", "code": "    /**\n     * <p>Abbreviates a string nicely. This method searches for the first space after the lower limit\n     * and abbreviates the String there. It will also append any String passed as a parameter\n     * to the end of the", "entropy": 0.2998046875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [1.6640625, 0.4404296875, 0.18603515625, 0.0003466606140136719, 1.63671875, 0.10443115234375, 0.0172576904296875, 1.4951171875, 3.0279159545898438e-05, 0.00022125244140625, 0.00933837890625, 0.5830078125, 0.85791015625, 0.52001953125, 0.32666015625, 1.111328125, 1.6552734375, 0.01430511474609375, 0.000568389892578125, 0.01242828369140625, 0.350341796875, 0.6669921875, 0.49755859375, 0.359375, 0.392578125, 0.81787109375, 9.000301361083984e-05, 0.059478759765625, 0.00380706787109375, 0.00045013427734375, 1.1920928955078125e-05, 0.00811767578125, 0.07666015625, 0.04071044921875, 0.06365966796875, 1.236328125, 0.00506591796875, 0.0010347366333007812, 0.0007991790771484375, 0.114013671875, 0.05023193359375, 0.005710601806640625, 0.0126495361328125, 0.007167816162109375, 0.0244293212890625, 0.1612548828125, 0.00018584728240966797, 0.001911163330078125, 6.771087646484375e-05, 0.00042724609375, 9.381771087646484e-05, 0.0001418590545654297], "tokens": [264, 1022, 275, 319, 333, 98, 48, 44336, 4788, 1196, 312, 802, 46931, 32, 1348, 1411, 33243, 436, 322, 1932, 5122, 2685, 322, 7216, 2723, 275, 319, 461, 31838, 4788, 1196, 322, 892, 2017, 32, 2030, 1098, 2329, 5489, 1346, 892, 5403, 619, 312, 3395, 275, 319, 372, 322, 943, 432, 322]}
{"line_number": 631, "line_type": "original", "code": "            if (upper != str.length()) {", "entropy": 1.859375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.37890625, 2.369140625, 0.061981201171875, 2.44140625, 3.8125, 3.142578125, 0.00921630859375, 0.0008997917175292969, 0.214111328125, 0.162841796875], "tokens": [1468, 415, 308, 7607, 863, 596, 32, 1322, 1157, 301]}
{"line_number": 631, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string using ellipses.\n     * \n     * This method abbreviates a string using ellipses.  This will turn \"Now is the time for all\n     * good men to come to the aid", "entropy": 0.30859375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [0.99755859375, 0.630859375, 0.057830810546875, 0.0004532337188720703, 2.072265625, 0.02703857421875, 5.173683166503906e-05, 0.0001804828643798828, 0.0010805130004882812, 0.00847625732421875, 0.1805419921875, 1.970703125, 0.52392578125, 0.0010881423950195312, 0.0004131793975830078, 0.006885528564453125, 0.146240234375, 0.0001385211944580078, 0.6123046875, 5.614757537841797e-05, 0.0207672119140625, 0.83935546875, 1.16015625, 0.0003876686096191406, 1.1920928955078125e-07, 0.022308349609375, 0.41845703125, 0.52978515625, 0.1903076171875, 4.1365623474121094e-05, 2.6226043701171875e-06, 0.59716796875, 0.489501953125, 1.1357421875, 0.211669921875, 0.020538330078125, 1.0830078125, 0.301513671875, 3.790855407714844e-05, 0.01512908935546875, 0.240234375, 0.33447265625, 0.327392578125, 0.1707763671875, 5.8531761169433594e-05, 0.0014314651489257812, 0.00812530517578125, 0.68017578125, 0.009063720703125, 4.279613494873047e-05, 0.003936767578125, 0.00029587745666503906], "tokens": [284, 1022, 275, 319, 399, 2882, 268, 4788, 1196, 312, 802, 1471, 709, 2794, 1464, 32, 275, 319, 5384, 319, 1348, 1411, 31838, 4788, 1196, 312, 802, 1471, 709, 2794, 1464, 32, 225, 1348, 1098, 6927, 313, 6529, 438, 322, 1133, 436, 1169, 275, 319, 4644, 10446, 372, 6539, 372, 322, 36854]}
{"line_number": 632, "line_type": "original", "code": "                result.append(StringUtils.defaultString(appendToEnd));", "entropy": 0.9716796875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [7.87890625, 3.0078125, 0.006389617919921875, 0.03070068359375, 0.1549072265625, 1.3759765625, 0.0027828216552734375, 0.1278076171875, 0.005855560302734375, 0.0134735107421875, 0.0063629150390625, 0.0006723403930664062, 0.020965576171875], "tokens": [2071, 1056, 32, 1689, 26, 15209, 32, 1536, 652, 26, 30716, 2102, 876]}
{"line_number": 632, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [], "tokens": []}
{"line_number": 634, "line_type": "original", "code": "        } else if (index > upper) {", "entropy": 1.58203125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [3.474609375, 3.984375, 3.44140625, 1.7587890625, 0.011138916015625, 0.307861328125, 2.50390625, 0.2227783203125, 0.107177734375, 0.01141357421875], "tokens": [351, 320, 813, 415, 308, 1055, 848, 8342, 27, 301]}
{"line_number": 634, "line_type": "generated", "code": "    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the", "entropy": 0.1258544921875, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [2.31640625, 0.6015625, 0.139404296875, 0.0005526542663574219, 1.326171875, 0.0178680419921875, 3.409385681152344e-05, 0.0001697540283203125, 0.0007929801940917969, 0.007152557373046875, 0.1705322265625, 0.4736328125, 0.0653076171875, 0.03289794921875, 0.00036334991455078125, 0.276123046875, 5.340576171875e-05, 0.0229034423828125, 0.004161834716796875, 0.4794921875, 0.00074005126953125, 0.0003237724304199219, 0.0026264190673828125, 0.058990478515625, 0.061126708984375, 0.00550079345703125, 0.010772705078125, 0.006122589111328125, 0.0098724365234375, 0.0026226043701171875, 4.649162292480469e-05, 3.4570693969726562e-06, 0.00659942626953125, 0.0001742839813232422, 0.0002624988555908203, 0.004604339599609375, 0.003566741943359375, 0.0289154052734375, 0.361572265625, 0.0015096664428710938, 0.0006070137023925781, 0.00024199485778808594, 0.00948333740234375, 0.010955810546875, 0.0005483627319335938, 0.000377655029296875, 0.0014934539794921875, 0.0003705024719238281, 0.01739501953125, 9.179115295410156e-05, 0.0002887248992919922, 2.9087066650390625e-05], "tokens": [264, 1022, 275, 319, 399, 2882, 268, 4788, 1196, 312, 802, 46931, 32, 275, 319, 5384, 319, 1348, 1411, 33243, 436, 322, 1932, 5122, 2685, 322, 7216, 2723, 461, 31838, 4788, 1196, 275, 319, 322, 892, 2017, 32, 2030, 1098, 2329, 5489, 1346, 892, 5403, 619, 312, 3395, 275, 319, 372, 322]}
{"line_number": 635, "line_type": "original", "code": "            result.append(str.substring(0, upper));", "entropy": 0.775390625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.328125, 2.15234375, 0.00923919677734375, 0.02557373046875, 0.04229736328125, 0.302001953125, 0.0037136077880859375, 0.00146484375, 0.003276824951171875, 0.68359375, 0.0017528533935546875, 0.50537109375, 0.0196075439453125], "tokens": [1468, 1056, 32, 1689, 26, 466, 32, 8723, 26, 34, 30, 8342, 876]}
{"line_number": 635, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [], "tokens": []}
{"line_number": 636, "line_type": "original", "code": "            result.append(StringUtils.defaultString(appendToEnd));", "entropy": 0.8828125, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.83203125, 2.619140625, 0.00922393798828125, 0.033935546875, 0.1395263671875, 1.5341796875, 0.0014019012451171875, 0.25537109375, 0.0113983154296875, 0.007541656494140625, 0.010467529296875, 0.0005626678466796875, 0.0183258056640625], "tokens": [1468, 1056, 32, 1689, 26, 15209, 32, 1536, 652, 26, 30716, 2102, 876]}
{"line_number": 636, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [], "tokens": []}
{"line_number": 638, "line_type": "original", "code": "            result.append(str.substring(0, index));", "entropy": 0.73974609375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.4375, 1.740234375, 0.00571441650390625, 0.0131072998046875, 0.03619384765625, 0.260009765625, 0.00726318359375, 0.0013265609741210938, 0.00496673583984375, 0.4912109375, 0.0011949539184570312, 0.436279296875, 0.1820068359375], "tokens": [1468, 1056, 32, 1689, 26, 466, 32, 8723, 26, 34, 30, 1650, 876]}
{"line_number": 638, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [], "tokens": []}
{"line_number": 639, "line_type": "original", "code": "            result.append(StringUtils.defaultString(appendToEnd));", "entropy": 0.83349609375, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [6.890625, 2.69921875, 0.0035762786865234375, 0.0186309814453125, 0.08831787109375, 0.96240234375, 0.0015020370483398438, 0.1357421875, 0.00908660888671875, 0.00787353515625, 0.005016326904296875, 0.0004229545593261719, 0.010955810546875], "tokens": [1468, 1056, 32, 1689, 26, 15209, 32, 1536, 652, 26, 30716, 2102, 876]}
{"line_number": 639, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [], "tokens": []}
{"line_number": 641, "line_type": "original", "code": "        return result.toString();", "entropy": 0.89697265625, "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [4.578125, 0.7607421875, 0.027099609375, 0.002056121826171875, 0.0003097057342529297, 0.0138092041015625], "tokens": [351, 442, 1056, 32, 3108, 473]}
{"line_number": 641, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 1.0, "per_token_entropy": [], "tokens": []}
