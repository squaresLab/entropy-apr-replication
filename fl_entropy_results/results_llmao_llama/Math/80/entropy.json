{"line_number": 1136, "line_type": "original", "code": "            for (int i = 0; i < j; i += 4) {", "entropy": 1.4846036434173584, "is_bug_line": false, "sus_score": 0.4164, "per_token_entropy": [7.401666164398193, 3.9533352851867676, 0.003443147987127304, 0.008224074728786945, 1.6953063011169434, 0.084660105407238, 0.17953886091709137, 0.02073037438094616, 0.007193616591393948, 0.003069453639909625, 0.004079710692167282, 10.023785591125488, 0.19997736811637878, 1.3747884035110474, 0.7480157613754272, 1.247002363204956, 1.2291765213012695, 0.019154343754053116, 0.00432282779365778], "tokens": [632, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474, 529, 432, 29936, 474, 4619, 29871, 29946, 29897, 426]}
{"line_number": 1136, "line_type": "generated", "code": "\n            final double middle = (left + right) * 0.5;\n            final double rho    = middle - left;\n            final double sigma  = middle + right;\n            double sum = 0;\n            for", "entropy": 0.5374965667724609, "is_bug_line": false, "sus_score": 0.4164, "per_token_entropy": [0.04960086569190025, 0.7542105913162231, 0.7867178916931152, 0.12405713647603989, 0.7049330472946167, 0.03188700973987579, 0.772547721862793, 0.05379955470561981, 0.008100513368844986, 0.0012265071272850037, 0.005278104450553656, 0.3631986081600189, 0.00986144132912159, 0.00017557987303007394, 0.0003997480380348861, 0.0003349220205564052, 0.006353417877107859, 0.012170106172561646, 0.23553216457366943, 0.8539995551109314, 0.3148171007633209, 4.173335075378418, 2.119906187057495, 1.2920939922332764, 1.585470999998506e-05, 2.7554543018341064, 0.8762295246124268, 1.4600458145141602, 0.041931990534067154, 0.0049341581761837006, 0.3677847683429718, 0.863710880279541, 0.17632541060447693, 1.0101189613342285, 0.047560714185237885, 0.05917297303676605, 4.529942543740617e-06, 0.5505123138427734, 0.13346874713897705, 0.043302930891513824, 0.00874936394393444, 0.0010270564816892147, 0.6536511778831482, 1.6761956214904785, 2.543516159057617, 0.613561749458313, 0.08264706283807755, 0.021303169429302216, 0.8075851202011108, 0.00555151654407382, 0.10806047171354294, 0.362861305475235], "tokens": [13, 9651, 2186, 3765, 7256, 353, 313, 1563, 718, 1492, 29897, 334, 29871, 29900, 29889, 29945, 29936, 13, 9651, 2186, 3765, 364, 1251, 1678, 353, 7256, 448, 2175, 29936, 13, 9651, 2186, 3765, 269, 2934, 29871, 353, 7256, 718, 1492, 29936, 13, 9651, 3765, 2533, 353, 29871, 29900, 29936, 13, 9651, 363]}
{"line_number": 1135, "line_type": "original", "code": "            int j = 4 * n - 1;", "entropy": 2.061967134475708, "is_bug_line": true, "sus_score": 0.41635, "per_token_entropy": [6.761302947998047, 7.284938812255859, 2.2821407318115234, 0.2861258387565613, 0.756879985332489, 2.928391218185425, 0.11698862910270691, 2.062821388244629, 1.7053872346878052, 0.05212061107158661, 0.4458550214767456, 0.06065110117197037], "tokens": [632, 938, 432, 353, 29871, 29946, 334, 302, 448, 29871, 29896, 29936]}
{"line_number": 1135, "line_type": "generated", "code": "\n            }\n\n            // compute midpoint\n            final double mid = 0.5 * (left + right);\n\n            // evaluate function and its derivative\n            final double fm = functionValue(index, n, mid);\n", "entropy": 0.475648432970047, "is_bug_line": true, "sus_score": 0.41635, "per_token_entropy": [0.08942783623933792, 0.3379644453525543, 0.01836966909468174, 0.04737040773034096, 0.09861604124307632, 0.030010510236024857, 0.5098454356193542, 1.1447231769561768, 2.284289836883545, 0.5222899913787842, 0.8120717406272888, 0.06801927089691162, 0.06883372366428375, 0.004911619704216719, 0.41335922479629517, 1.0420138835906982, 0.4116894006729126, 0.001260439632460475, 3.766942609217949e-05, 0.0010384886991232634, 0.0008506731828674674, 0.02750081941485405, 0.04108811169862747, 0.00167598866391927, 0.0006792622152715921, 0.002580291125923395, 0.003244138788431883, 0.253081738948822, 0.0335598960518837, 0.04400327056646347, 1.9761338233947754, 1.7945959568023682, 1.196329951286316, 1.8795788288116455, 0.29040825366973877, 0.31751981377601624, 0.11475073546171188, 1.1775116920471191, 0.19217835366725922, 0.8483026623725891, 1.5345170497894287, 0.1333354264497757, 3.2557997703552246, 0.6521046161651611, 0.08207519352436066, 0.6286163330078125, 0.021747801452875137, 0.1846081018447876, 0.005787638947367668, 0.03000541962683201, 0.10160615295171738, 0.0017960622208192945], "tokens": [13, 9651, 500, 13, 13, 9651, 849, 10272, 7145, 3149, 13, 9651, 2186, 3765, 7145, 353, 29871, 29900, 29889, 29945, 334, 313, 1563, 718, 1492, 416, 13, 13, 9651, 849, 14707, 740, 322, 967, 16291, 13, 9651, 2186, 3765, 285, 29885, 353, 740, 1917, 29898, 2248, 29892, 302, 29892, 7145, 416, 13]}
{"line_number": 1137, "line_type": "original", "code": "                for (int k = 0; k < 4; k += step) {", "entropy": 1.6537543535232544, "is_bug_line": false, "sus_score": 0.4148, "per_token_entropy": [7.22052001953125, 8.215444564819336, 0.004360572434961796, 0.009591212496161461, 2.41282320022583, 0.023036127910017967, 0.4754752516746521, 0.02994294837117195, 0.012883638963103294, 0.005476353224366903, 0.01270721573382616, 3.2280325889587402, 0.7395070195198059, 1.2726267576217651, 2.6381008625030518, 2.6247243881225586, 2.437268018722534, 0.05173264071345329, 0.007077503949403763], "tokens": [462, 363, 313, 524, 413, 353, 29871, 29900, 29936, 413, 529, 29871, 29946, 29936, 413, 4619, 4331, 29897, 426]}
{"line_number": 1137, "line_type": "generated", "code": "\n            // compute the bisection point\n            final double middle = 0.5 * (left + right);\n\n            // compute the corresponding value of the function\n            work[0] = middle;\n            for (int j =", "entropy": 0.5047957301139832, "is_bug_line": false, "sus_score": 0.4148, "per_token_entropy": [0.048921920359134674, 0.4157700836658478, 0.9590960144996643, 1.2122583389282227, 1.2264773845672607, 3.186678886413574, 0.0002320735511602834, 0.0019921474158763885, 0.18229517340660095, 0.2020031064748764, 0.019348809495568275, 0.1222810298204422, 0.02893093414604664, 0.8326714038848877, 0.024887027218937874, 0.5740848779678345, 0.001279726973734796, 5.3165931603871286e-05, 0.0010562323732301593, 0.0009651293512433767, 0.02048642560839653, 0.04779950901865959, 0.002878928557038307, 0.0008947421447373927, 0.0031459862366318703, 0.003352975007146597, 0.3903416097164154, 0.026570841670036316, 0.06893431395292282, 1.384333848953247, 0.32555079460144043, 3.242229700088501, 2.0762228965759277, 0.36923524737358093, 0.8392799496650696, 1.638978123664856, 0.1672680675983429, 0.024854235351085663, 2.105306386947632, 0.012184002436697483, 1.4570602178573608, 0.06293578445911407, 0.05770132318139076, 0.745927631855011, 0.016816169023513794, 0.003592349123209715, 0.06750717014074326, 1.7532708644866943, 0.0013938959455117583, 0.000719645875506103, 0.2892695963382721, 0.002049847040325403], "tokens": [13, 9651, 849, 10272, 278, 289, 895, 428, 1298, 13, 9651, 2186, 3765, 7256, 353, 29871, 29900, 29889, 29945, 334, 313, 1563, 718, 1492, 416, 13, 13, 9651, 849, 10272, 278, 6590, 995, 310, 278, 740, 13, 9651, 664, 29961, 29900, 29962, 353, 7256, 29936, 13, 9651, 363, 313, 524, 432, 353]}
{"line_number": 1203, "line_type": "original", "code": "            if ((range < absoluteTolerance) ||", "entropy": 2.238340377807617, "is_bug_line": false, "sus_score": 0.38127, "per_token_entropy": [9.56281852722168, 3.1158862113952637, 3.210374116897583, 7.365182876586914, 3.021266460418701, 0.5395508408546448, 0.000706780469045043, 6.961580220377073e-05, 0.00015400654228869826, 0.00016437610611319542, 0.011147717013955116, 0.03276360407471657], "tokens": [632, 565, 5135, 3881, 529, 8380, 29911, 324, 261, 749, 29897, 3830]}
{"line_number": 1203, "line_type": "generated", "code": "\n    private void decomposeShiftedTridiagonal(final double lambda,\n                                             final int index, final int n) {\n\n        // initialize the first row\n        double previousDiagonal = main[index] - lambda", "entropy": 0.446991503238678, "is_bug_line": false, "sus_score": 0.38127, "per_token_entropy": [0.10984694212675095, 0.289808452129364, 0.07397119700908661, 0.034921057522296906, 1.5169800519943237, 0.004829883575439453, 0.5988711714744568, 0.01310050580650568, 0.5867546796798706, 0.002478981390595436, 0.0010433712741360068, 0.02590174600481987, 0.3629319369792938, 0.030112192034721375, 0.022073186933994293, 0.011916756629943848, 0.0020714986603707075, 1.4828606843948364, 0.044979751110076904, 0.014146641828119755, 0.12004005908966064, 0.0020293849520385265, 0.005760378669947386, 0.008817427791655064, 0.0007200032705441117, 0.33664241433143616, 0.0004951919545419514, 0.00045313104055821896, 0.014209521003067493, 0.010074716061353683, 0.000578474544454366, 0.46943700313568115, 0.08104436844587326, 0.4025956094264984, 1.6635560989379883, 1.1876482963562012, 2.017040967941284, 1.3317352533340454, 0.9778403639793396, 0.038317833095788956, 1.4598103761672974, 3.5923213958740234, 2.2102279663085938, 0.003600307274609804, 0.24379943311214447, 0.28347766399383545, 0.3665233254432678, 0.0024103655014187098, 0.0057697417214512825, 0.8163010478019714, 0.34899476170539856, 0.011685376055538654], "tokens": [13, 1678, 2024, 1780, 316, 19438, 29657, 287, 2308, 8819, 351, 7177, 29898, 8394, 3765, 14013, 29892, 13, 462, 462, 632, 2186, 938, 2380, 29892, 2186, 938, 302, 29897, 426, 13, 13, 4706, 849, 11905, 278, 937, 1948, 13, 4706, 3765, 3517, 12130, 351, 7177, 353, 1667, 29961, 2248, 29962, 448, 14013]}
{"line_number": 645, "line_type": "original", "code": "                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);", "entropy": 1.3486460447311401, "is_bug_line": false, "sus_score": 0.38014, "per_token_entropy": [7.470544338226318, 6.277912616729736, 0.8633699417114258, 4.673509120941162, 0.6785472631454468, 0.024160832166671753, 0.003679293440654874, 4.289152145385742, 0.0004439560289029032, 0.6102758646011353, 0.08174173533916473, 0.013253096491098404, 0.08782877773046494, 0.0041514174081385136, 0.14960849285125732, 0.2124992161989212, 5.839159965515137, 0.16790400445461273, 4.253170967102051, 0.06852041929960251, 0.2766496241092682, 0.001598986447788775, 0.273287296295166, 0.037339068949222565, 0.00037222131504677236, 0.0013063953956589103, 0.05345585569739342], "tokens": [462, 2186, 3765, 697, 29943, 473, 386, 268, 353, 29871, 29900, 29889, 29906, 29945, 334, 313, 29941, 334, 3464, 29961, 29900, 29962, 718, 3464, 29961, 29896, 5691]}
{"line_number": 645, "line_type": "generated", "code": "\n        // look for a sub-diagonal element with a negative diagonal\n        for (int i = 0; i", "entropy": 0.7838581204414368, "is_bug_line": false, "sus_score": 0.38014, "per_token_entropy": [0.08773192763328552, 0.2056555449962616, 0.8051958084106445, 3.419048309326172, 0.0681157112121582, 2.094404935836792, 2.056934118270874, 0.6461795568466187, 0.6464804410934448, 0.0036513819359242916, 0.0023910999298095703, 0.700513482093811, 1.3958576917648315, 1.7305643558502197, 1.6513917446136475, 2.0262269973754883, 0.7975718379020691, 0.03585284948348999, 1.3554096221923828, 0.0018116504652425647, 0.00790952518582344, 0.5133123397827148, 0.015832901000976562, 0.21875648200511932, 0.6193832159042358, 0.024588726460933685, 0.033397458493709564], "tokens": [13, 4706, 849, 1106, 363, 263, 1014, 29899, 6051, 351, 7177, 1543, 411, 263, 8178, 19640, 13, 4706, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474]}
