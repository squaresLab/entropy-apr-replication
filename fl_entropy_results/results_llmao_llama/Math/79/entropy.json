{"line_number": 157, "line_type": "original", "code": "                }", "entropy": 5.879546642303467, "is_bug_line": false, "sus_score": 0.33391, "per_token_entropy": [5.643124580383301, 6.115968704223633], "tokens": [462, 500]}
{"line_number": 157, "line_type": "generated", "code": "\n        } else {\n            // For n > 61, the naive implementation for n! and k! is not\n            // scalable. However, (n-k) <= n/2, so we can use:\n           ", "entropy": 0.3086434304714203, "is_bug_line": false, "sus_score": 0.33391, "per_token_entropy": [0.1590142846107483, 0.5878722071647644, 0.058822911232709885, 0.190514475107193, 0.11117442697286606, 0.21248756349086761, 0.2897389233112335, 0.5102208852767944, 0.6381927728652954, 0.3738935887813568, 0.06883694976568222, 7.950943836476654e-05, 0.0010745710460469127, 0.011621395125985146, 0.00016902448260225356, 0.06944045424461365, 0.5537984371185303, 0.002925642067566514, 0.26152071356773376, 0.2956072986125946, 1.139960527420044, 0.03894519805908203, 0.058905407786369324, 0.5335201025009155, 4.0411134250462055e-05, 0.30524492263793945, 0.3410576283931732, 1.107290267944336, 0.002873579505831003, 0.0005292683490552008, 0.3866959512233734, 0.0007827793597243726, 0.3073822259902954, 0.4032380282878876, 0.00020621081057470292, 0.2410372644662857, 6.437280717364047e-06, 0.4657038450241089, 0.24210648238658905, 0.296432226896286, 1.8549247980117798, 0.08164022862911224, 0.26533427834510803, 6.985420623095706e-05, 1.4594347476959229, 0.991173505783081, 0.04289187863469124, 0.0008316157618537545, 0.761565089225769, 0.31166163086891174, 0.0005332001601345837, 0.01043247152119875], "tokens": [13, 4706, 500, 1683, 426, 13, 9651, 849, 1152, 302, 1405, 29871, 29953, 29896, 29892, 278, 1055, 573, 5314, 363, 302, 29991, 322, 413, 29991, 338, 451, 13, 9651, 849, 8716, 519, 29889, 2398, 29892, 313, 29876, 29899, 29895, 29897, 5277, 302, 29914, 29906, 29892, 577, 591, 508, 671, 29901, 13, 9651]}
{"line_number": 156, "line_type": "original", "code": "                    throw new ArithmeticException(msg);", "entropy": 1.980407953262329, "is_bug_line": false, "sus_score": 0.32992, "per_token_entropy": [6.741672039031982, 2.7395286560058594, 6.7939863204956055, 0.01921246573328972, 0.19797655940055847, 0.0013387774815782905, 0.0012417471734806895, 1.370167851448059, 1.7548363208770752, 0.18411676585674286], "tokens": [462, 268, 3183, 716, 826, 18542, 2451, 29898, 7645, 416]}
{"line_number": 156, "line_type": "generated", "code": "\n        return result;\n    }\n\n    /**\n     * Check that n and k satisfy the preconditions for\n     * {@link #binomialCoefficient(int, int)}.\n     *\n     * @param n the", "entropy": 0.1436793953180313, "is_bug_line": false, "sus_score": 0.32992, "per_token_entropy": [0.07743526995182037, 0.19070836901664734, 0.22758561372756958, 0.04595493897795677, 0.015289131551980972, 0.003032017033547163, 0.028535597026348114, 0.004698664415627718, 0.003256615251302719, 0.04564463719725609, 0.08845781534910202, 0.08808784186840057, 0.014079762622714043, 0.005718182772397995, 0.00021872512297704816, 0.8264071941375732, 0.7118454575538635, 2.163412570953369, 0.07213006168603897, 0.0023630333598703146, 0.38435837626457214, 0.3710305392742157, 0.1423465609550476, 0.00046039948938414454, 0.0011027929140254855, 0.05842561274766922, 1.0138027667999268, 0.0013777059502899647, 0.00010191874753218144, 0.057494256645441055, 0.016459869220852852, 0.05982096865773201, 0.013823016546666622, 0.000310730334604159, 9.822363062994555e-05, 7.998623186722398e-05, 0.0002108589978888631, 0.024180149659514427, 0.005438176915049553, 0.07686062902212143, 0.06472261995077133, 0.10423995554447174, 0.03128824383020401, 0.0021848634351044893, 0.03925368934869766, 0.2821802794933319, 0.0006861716392450035, 0.00035339308669790626, 0.002058888552710414, 0.009053017012774944, 0.0027052494697272778, 0.08995760232210159], "tokens": [13, 4706, 736, 1121, 29936, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 5399, 393, 302, 322, 413, 15523, 278, 758, 1116, 2187, 363, 13, 268, 334, 26633, 2324, 396, 2109, 7615, 29907, 7297, 4543, 29898, 524, 29892, 938, 29512, 13, 268, 334, 13, 268, 334, 732, 3207, 302, 278]}
{"line_number": 1629, "line_type": "original", "code": "      return Math.sqrt(sum);", "entropy": 2.037339210510254, "is_bug_line": false, "sus_score": 0.29971, "per_token_entropy": [8.440308570861816, 4.932784080505371, 2.2710204124450684, 0.010732547380030155, 0.3710270822048187, 0.02614530548453331, 0.21160829067230225, 0.035088539123535156], "tokens": [539, 736, 5792, 29889, 3676, 29898, 2083, 416]}
{"line_number": 1629, "line_type": "generated", "code": "\n    /**\n     * Calculates the Chebyshev distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n     * @return the Chebyshe", "entropy": 0.10559306293725967, "is_bug_line": false, "sus_score": 0.29971, "per_token_entropy": [0.11225469410419464, 0.6660613417625427, 0.37974846363067627, 0.016437001526355743, 0.025904765352606773, 0.0024878999684005976, 0.5394836664199829, 0.01327497698366642, 0.033273279666900635, 2.5545825958251953, 0.20576481521129608, 0.0004704084130935371, 0.0018461579456925392, 0.0016653967322781682, 0.24624481797218323, 0.1506442427635193, 0.051246896386146545, 0.023267343640327454, 0.0874566063284874, 0.07395026832818985, 0.005383755080401897, 0.003753522876650095, 0.06969866156578064, 0.0051202597096562386, 0.0008288762182928622, 0.021108848974108696, 0.005786572117358446, 0.02789030410349369, 0.0017927302978932858, 0.011358005926012993, 0.0009203489171341062, 0.0031211492605507374, 0.0035824901424348354, 0.0007844470092095435, 0.000416907190810889, 0.0006630606367252767, 0.0005308172549121082, 0.001095886342227459, 0.0005796659388579428, 0.0006191005813889205, 0.0012891324004158378, 0.0006998711614869535, 0.0011984078446403146, 0.0032116996590048075, 0.0023586330935359, 0.0021820086985826492, 0.011983898468315601, 0.005115990061312914, 0.1007082462310791, 0.010113660246133804, 0.0004441943601705134, 0.00043215948971919715], "tokens": [13, 1678, 7762, 13, 268, 334, 20535, 1078, 278, 6561, 29890, 952, 354, 29894, 5418, 1546, 1023, 3291, 29889, 13, 268, 334, 13, 268, 334, 732, 3207, 282, 29896, 278, 937, 1298, 13, 268, 334, 732, 3207, 282, 29906, 278, 1473, 1298, 13, 268, 334, 732, 2457, 278, 6561, 29890, 952, 354]}
{"line_number": 1625, "line_type": "original", "code": "      for (int i = 0; i < p1.length; i++) {", "entropy": 0.7344986796379089, "is_bug_line": false, "sus_score": 0.29249, "per_token_entropy": [7.838328838348389, 5.201117038726807, 0.09215767681598663, 0.06484273076057434, 0.15553788840770721, 0.03878454864025116, 0.04726216569542885, 0.02999361976981163, 0.013801970519125462, 0.005227705929428339, 0.007080699782818556, 0.34684184193611145, 0.03298427537083626, 0.004999042488634586, 0.003287270897999406, 0.019623544067144394, 0.010144578292965889, 0.008032873272895813, 0.03542583808302879], "tokens": [539, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474, 529, 282, 29896, 29889, 2848, 29936, 474, 4862, 426]}
{"line_number": 1625, "line_type": "generated", "code": "\n    /**\n     * Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n", "entropy": 0.06577089428901672, "is_bug_line": false, "sus_score": 0.29249, "per_token_entropy": [0.14294616878032684, 0.511326014995575, 0.44107547402381897, 0.018230147659778595, 0.024395395070314407, 0.0035893793683499098, 0.5346545577049255, 0.013567615300416946, 0.03398747369647026, 0.6207931637763977, 0.01699608750641346, 0.00986569095402956, 0.6421250104904175, 0.03218013793230057, 4.410646579344757e-05, 0.0020283141639083624, 0.0006658005877397954, 0.0013178244698792696, 0.02042405679821968, 0.013236155733466148, 0.017119960859417915, 0.012220862321555614, 0.001702408422715962, 0.023802367970347404, 0.020005710422992706, 0.04202435165643692, 0.03767767548561096, 0.05155569314956665, 0.009599123150110245, 0.003222750499844551, 0.0020857739727944136, 0.02842819318175316, 0.00504625029861927, 0.0022488560061901808, 0.009332839399576187, 0.0028358979616314173, 0.034976083785295486, 0.002845050999894738, 0.00553290406242013, 0.0011861439561471343, 0.0024414039216935635, 0.005131526384502649, 0.0009760859538801014, 0.0011433976469561458, 0.001007764250971377, 0.002522384049370885, 0.0043165371753275394, 0.0011100566480308771, 0.0010060969507321715, 0.0013680632691830397, 0.000730128725990653, 0.0014355602907016873], "tokens": [13, 1678, 7762, 13, 268, 334, 20535, 1078, 278, 365, 29966, 1491, 19250, 262, 4951, 14814, 1491, 29958, 313, 3317, 310, 6425, 29897, 5418, 1546, 1023, 3291, 29889, 13, 268, 334, 13, 268, 334, 732, 3207, 282, 29896, 278, 937, 1298, 13, 268, 334, 732, 3207, 282, 29906, 278, 1473, 1298, 13]}
{"line_number": 57, "line_type": "original", "code": "    private static final byte  ZB = (byte)0;", "entropy": 1.6133016347885132, "is_bug_line": false, "sus_score": 0.28006, "per_token_entropy": [2.7447638511657715, 8.947735786437988, 0.09192097932100296, 1.9446278810501099, 3.8959546089172363, 2.219506025314331, 2.2758917808532715, 0.15664836764335632, 0.07896454632282257, 0.14722687005996704, 0.0054056900553405285, 0.0038302408065646887, 0.04174129664897919, 0.03200224041938782], "tokens": [268, 2024, 2294, 2186, 7023, 29871, 796, 29933, 353, 313, 10389, 29897, 29900, 29936]}
{"line_number": 57, "line_type": "generated", "code": "\n     * @param b an addend\n     * @return the sum", "entropy": 0.055920977145433426, "is_bug_line": false, "sus_score": 0.28006, "per_token_entropy": [0.15076524019241333, 0.20594091713428497, 0.013465295545756817, 0.003330994863063097, 0.019258305430412292, 0.0007516896002925932, 0.01006610132753849, 0.0016354055842384696, 0.000849482137709856, 0.010357438586652279, 0.4680485129356384, 0.000987995183095336, 0.0020353333093225956, 0.0035311745014041662, 0.003396102227270603, 0.0003156163729727268], "tokens": [13, 268, 334, 732, 3207, 289, 385, 788, 355, 13, 268, 334, 732, 2457, 278, 2533]}
