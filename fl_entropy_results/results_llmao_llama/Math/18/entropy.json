{"line_number": 1035, "line_type": "original", "code": "                double diff = Math.abs(x[i] - repaired[i]);", "entropy": 1.7534302473068237, "is_bug_line": false, "sus_score": 0.33375, "per_token_entropy": [7.264723777770996, 5.586372375488281, 6.937806606292725, 0.145332932472229, 2.430403709411621, 0.016579821705818176, 0.31190329790115356, 0.020018329843878746, 4.2831621170043945, 1.2910507917404175, 1.4139347076416016, 0.31283295154571533, 0.07539423555135727, 3.083446979522705, 0.031255777925252914, 0.0007714632665738463, 0.03981894999742508, 0.003797464072704315, 0.06656750291585922], "tokens": [462, 3765, 2923, 353, 5792, 29889, 6897, 29898, 29916, 29961, 29875, 29962, 448, 1634, 29874, 2859, 29961, 29875, 5691]}
{"line_number": 1035, "line_type": "generated", "code": "\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise exponential of m.\n     */\n    private static", "entropy": 0.09300793707370758, "is_bug_line": false, "sus_score": 0.33375, "per_token_entropy": [0.27201953530311584, 0.203110471367836, 0.11846733093261719, 0.13482318818569183, 0.11775919049978256, 0.004336121492087841, 0.0010832638945430517, 0.0018706695409491658, 0.0034874591510742903, 0.0018897071713581681, 0.0028860606253147125, 0.013982667587697506, 0.05192211642861366, 0.09577696025371552, 0.02215072698891163, 0.01630624197423458, 0.17497041821479797, 0.002690150635316968, 0.006713691167533398, 0.054862670600414276, 0.07616305351257324, 0.16979855298995972, 0.0053177098743617535, 0.011737924069166183, 0.0009004590683616698, 0.10506300628185272, 0.013251214288175106, 0.2614031136035919, 0.41167691349983215, 0.0120074562728405, 0.05628407374024391, 0.0019044610671699047, 0.000976919662207365, 0.0014466306893154979, 0.06725185364484787, 0.19310307502746582, 0.0737086683511734, 0.013716724701225758, 0.10143652558326721, 0.003991969861090183, 0.0006923662149347365, 1.545918345451355, 0.33450213074684143, 0.015170197933912277, 0.020770423114299774, 0.004175397567451, 0.001629335805773735, 0.003848528489470482, 0.0004913791781291366, 0.009130037389695644, 0.013759642839431763, 0.004075793083757162], "tokens": [13, 4706, 736, 716, 4398, 29906, 29928, 4301, 21713, 14609, 29898, 29881, 29892, 2089, 416, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 732, 3207, 286, 10567, 4636, 13, 268, 334, 732, 2457, 22513, 15783, 278, 1543, 29899, 3538, 25658, 310, 286, 29889, 13, 268, 3776, 13, 1678, 2024, 2294]}
{"line_number": 514, "line_type": "original", "code": "                hasFiniteBounds = true;", "entropy": 2.181013345718384, "is_bug_line": false, "sus_score": 0.31332, "per_token_entropy": [5.3235931396484375, 10.641359329223633, 0.5229998826980591, 0.0001597276859683916, 0.2621421217918396, 0.212404265999794, 0.4705309271812439, 0.014917138032615185], "tokens": [462, 756, 12881, 568, 18526, 353, 1565, 29936]}
{"line_number": 514, "line_type": "generated", "code": "\n            }\n        }\n    }\n\n    /**\n     * Returns the boundaries for the given dimension.\n     * @param dim dimension index\n     * @return boundaries for the given dimension\n     */\n    private double[] getBound", "entropy": 0.42695340514183044, "is_bug_line": false, "sus_score": 0.31332, "per_token_entropy": [0.11266877502202988, 0.9794747233390808, 0.014616905711591244, 0.0078166788443923, 0.22336077690124512, 0.003638435387983918, 0.20374076068401337, 0.5293651819229126, 0.004231665749102831, 0.00856062676757574, 0.033114951103925705, 0.04954811558127403, 0.03774230554699898, 0.11646779626607895, 0.0023061842657625675, 0.00039617318543605506, 3.0721373558044434, 0.4734342694282532, 3.323089838027954, 1.5741804838180542, 0.8086187243461609, 1.6631762981414795, 1.3794509172439575, 0.2567580044269562, 0.11256268620491028, 0.011527596972882748, 0.030796974897384644, 1.818223237991333, 0.016791200265288353, 0.8422616124153137, 0.603221595287323, 0.5709587931632996, 0.1737700253725052, 0.009462152607738972, 0.008240035735070705, 0.002541647292673588, 0.027648676186800003, 1.2766081094741821, 0.41087430715560913, 0.055628709495067596, 0.19045299291610718, 0.00223910273052752, 0.1584673821926117, 0.015493622981011868, 0.3540078103542328, 0.0011547094909474254, 0.05896924436092377, 0.17040595412254333, 0.03194531798362732, 0.03240117058157921, 0.02691090852022171, 0.3101141154766083], "tokens": [13, 9651, 500, 13, 4706, 500, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 16969, 278, 24371, 363, 278, 2183, 9927, 29889, 13, 268, 334, 732, 3207, 3964, 9927, 2380, 13, 268, 334, 732, 2457, 24371, 363, 278, 2183, 9927, 13, 268, 3776, 13, 1678, 2024, 3765, 2636, 679, 17109]}
{"line_number": 1018, "line_type": "original", "code": "                } else if (x[i] > 1.0) {", "entropy": 1.3807590007781982, "is_bug_line": false, "sus_score": 0.27793, "per_token_entropy": [4.777977466583252, 4.098479270935059, 4.440149784088135, 1.382699728012085, 0.0436018630862236, 5.352753162384033, 0.8018466830253601, 0.3116060197353363, 0.02423029951751232, 0.5429875254631042, 0.07210632413625717, 0.041185010224580765, 0.1552308201789856, 0.0028626436833292246, 0.036186788231134415, 0.008240035735070705], "tokens": [462, 500, 1683, 565, 313, 29916, 29961, 29875, 29962, 1405, 29871, 29896, 29889, 29900, 29897, 426]}
{"line_number": 1018, "line_type": "generated", "code": "\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m\n     *            Input matrix\n     * @return Matrix representing the element-wise exponential", "entropy": 0.07931777089834213, "is_bug_line": false, "sus_score": 0.27793, "per_token_entropy": [0.2707805633544922, 0.6034986972808838, 0.0171587485820055, 0.0012659162748605013, 0.006354365963488817, 0.0008945039589889348, 0.000788139586802572, 0.022499993443489075, 0.005321504082530737, 0.0035514873452484608, 0.004159846343100071, 0.0004624251159839332, 0.00021646064124070108, 0.00025567124248482287, 0.00028379703871905804, 0.00023850933939684182, 0.0003134713042527437, 0.001116367639042437, 0.023064669221639633, 0.012044675648212433, 0.001353063271380961, 0.0016374287661165, 0.04183458909392357, 0.000971917703282088, 0.002088390989229083, 0.0295134037733078, 0.040845874696969986, 0.06901498138904572, 0.004153316840529442, 0.005389327649027109, 0.0007435894221998751, 0.11679624021053314, 0.013936114497482777, 0.2569256126880646, 0.4790351390838623, 0.0004463391669560224, 9.715084888739511e-05, 0.012694151140749454, 0.06606949865818024, 0.011937370523810387, 0.052367597818374634, 0.0009417866240255535, 0.0010600429959595203, 0.0013228246243670583, 0.08031648397445679, 0.2057732492685318, 0.081202432513237, 0.022525284439325333, 0.1329781413078308, 0.0036180056631565094, 0.0009049849468283355, 1.4117599725723267], "tokens": [13, 9651, 500, 13, 4706, 500, 13, 4706, 736, 716, 4398, 29906, 29928, 4301, 21713, 14609, 29898, 29881, 29892, 2089, 416, 13, 1678, 500, 13, 13, 1678, 7762, 13, 268, 334, 732, 3207, 286, 13, 268, 334, 9651, 10567, 4636, 13, 268, 334, 732, 2457, 22513, 15783, 278, 1543, 29899, 3538, 25658]}
{"line_number": 971, "line_type": "original", "code": "                value = CMAESOptimizer.this", "entropy": 1.649497151374817, "is_bug_line": false, "sus_score": 0.27444, "per_token_entropy": [2.0725467205047607, 12.943291664123535, 1.251896619796753, 1.8158408403396606, 0.0006117141456343234, 0.0010449193650856614, 0.0017688118387013674, 0.00011657988943625242, 0.0002302858338225633, 0.04404524713754654, 0.01307438500225544], "tokens": [462, 995, 353, 315, 1529, 2890, 20624, 326, 3950, 29889, 1366]}
{"line_number": 971, "line_type": "generated", "code": "\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param point Original objective variables.\n         * @param repaired", "entropy": 0.12867224216461182, "is_bug_line": false, "sus_score": 0.27444, "per_token_entropy": [0.24766980111598969, 0.4107239544391632, 0.8107702732086182, 0.18894267082214355, 0.00036113892565481365, 0.0005607224884442985, 0.0018904210301116109, 0.0014572249492630363, 0.0015313815092667937, 0.0027254601009190083, 0.10931799560785294, 0.0013768726494163275, 0.0015245969407260418, 0.031029175966978073, 0.03150288760662079, 0.38448473811149597, 0.0037870134692639112, 0.0050546713173389435, 0.030720101669430733, 0.0012056708801537752, 0.001259010867215693, 0.07776585966348648, 0.009867225773632526, 0.005447543226182461, 0.00035661060246638954, 0.0005080600967630744, 0.0006451908848248422, 0.0006406639004126191, 0.00822797603905201, 0.0009682258241809905, 0.004498718306422234, 0.03201470896601677, 0.044065896421670914, 0.07694485783576965, 0.0039036276284605265, 0.006324041169136763, 0.0003415954706724733, 0.08691053837537766, 0.017819665372371674, 1.640776515007019, 2.1046345233917236, 0.05289383977651596, 0.007404266390949488, 0.08075862377882004, 0.0019964303355664015, 0.0023378203622996807, 0.0019983339589089155, 0.001213648240081966, 0.0723666176199913, 0.0778476893901825, 0.001312467036768794, 0.0002683041093405336], "tokens": [13, 462, 1678, 1634, 29874, 2859, 29961, 29875, 29962, 353, 921, 29961, 29875, 1385, 13, 18884, 500, 13, 9651, 500, 13, 9651, 736, 1634, 29874, 2859, 29936, 13, 4706, 500, 13, 13, 4706, 7762, 13, 308, 334, 732, 3207, 1298, 8533, 12091, 3651, 29889, 13, 308, 334, 732, 3207, 1634, 29874, 2859]}
