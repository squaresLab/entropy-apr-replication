{"line_number": 375, "line_type": "original", "code": "    private void checkParameters() {", "entropy": 2.2074294090270996, "is_bug_line": false, "sus_score": 0.37338, "per_token_entropy": [7.163910865783691, 3.926729202270508, 1.9051029682159424, 0.7421215772628784, 0.2393878698348999, 0.951604425907135, 0.5231475830078125], "tokens": [268, 2024, 1780, 1423, 11507, 580, 426]}
{"line_number": 375, "line_type": "generated", "code": "\n        if (getLowerBound() == null &&\n            getUpperBound() == null) {\n            throw new MathIllegalStateException(LocalizedFormats.NO_BOUND);\n        }\n<|endmask|>\n", "entropy": 0.20106925070285797, "is_bug_line": false, "sus_score": 0.37338, "per_token_entropy": [0.054453182965517044, 1.6449533700942993, 0.5018598437309265, 0.051090821623802185, 0.21190819144248962, 0.16991081833839417, 0.002674457151442766, 0.04045625030994415, 0.5772448182106018, 0.0016577800270169973, 1.3611905574798584, 0.16078902781009674, 0.014203292317688465, 0.0031911423429846764, 0.004627471789717674, 0.0009764432325027883, 0.0009925207123160362, 0.016108017414808273, 0.001077548018656671, 0.009252526797354221, 0.002568281954154372, 0.0068114944733679295, 0.2796374559402466, 0.4677529036998749, 0.009738082997500896, 0.3169563114643097, 0.5257095098495483, 0.0005025792634114623, 0.3944971263408661, 0.00019834458362311125, 0.003613373264670372, 0.04184064641594887, 0.001279965159483254, 0.018731489777565002, 0.0011517327511683106, 0.001637666835449636, 0.48203951120376587, 0.0006947487709112465, 0.015560525469481945, 0.0005178302526473999, 0.7707999348640442, 0.002233155770227313, 0.014649328775703907, 0.0024877809919416904, 0.01524087879806757, 1.0464311838150024, 0.013587960973381996, 0.7966275811195374, 0.10131114721298218, 0.24295353889465332, 0.04318568482995033, 0.006035672966390848], "tokens": [13, 4706, 565, 313, 657, 19357, 17109, 580, 1275, 1870, 2607, 13, 9651, 679, 26214, 17109, 580, 1275, 1870, 29897, 426, 13, 9651, 3183, 716, 5792, 14126, 12018, 2792, 2451, 29898, 7717, 1891, 2500, 1446, 29889, 6632, 29918, 8456, 18783, 416, 13, 4706, 500, 13, 29966, 29989, 355, 13168, 29989, 29958, 13]}
{"line_number": 377, "line_type": "original", "code": "            getUpperBound() != null) {", "entropy": 2.73172664642334, "is_bug_line": false, "sus_score": 0.36648, "per_token_entropy": [10.67016887664795, 4.885423183441162, 3.8709897994995117, 0.01031579077243805, 1.0341800451278687, 2.1760201454162598, 0.003882847260683775, 1.8692766427993774, 0.06528227776288986], "tokens": [632, 679, 26214, 17109, 580, 2804, 1870, 29897, 426]}
{"line_number": 377, "line_type": "generated", "code": "\n\n    /**\n     * @param point Current point.\n     * @param direction Search direction.\n     * @return the objective function value at the given point.\n     */\n    private double computeObjectiveValue(double[] point,", "entropy": 0.35506176948547363, "is_bug_line": false, "sus_score": 0.36648, "per_token_entropy": [0.0922536700963974, 1.0693581104278564, 0.1639433354139328, 0.08823715895414352, 0.16783255338668823, 0.0038852221332490444, 0.001520549994893372, 1.7872207164764404, 0.9832680225372314, 2.760043144226074, 2.0464091300964355, 0.1103743240237236, 0.05677222087979317, 0.01051233522593975, 0.002641286002472043, 0.026876211166381836, 0.005607588682323694, 0.32574591040611267, 2.151797294616699, 0.45471471548080444, 0.0043711354956030846, 0.03466719016432762, 0.00688703078776598, 0.012645772658288479, 0.023671403527259827, 0.00639819260686636, 0.6576392650604248, 0.4018585681915283, 1.2663848400115967, 0.4003757834434509, 0.1227041557431221, 0.2571498453617096, 0.4170108437538147, 0.5041481256484985, 0.011409982107579708, 0.20868143439292908, 0.004917787853628397, 0.006250831298530102, 0.3125927448272705, 0.002843862399458885, 0.06890860944986343, 0.36173102259635925, 0.010791396722197533, 0.13065162301063538, 0.015073678456246853, 0.00309750041924417, 0.00109112320933491, 0.009287841618061066, 0.47082769870758057, 0.014983256347477436, 0.0024311768356710672, 0.4027126729488373], "tokens": [13, 13, 1678, 7762, 13, 268, 334, 732, 3207, 1298, 9626, 1298, 29889, 13, 268, 334, 732, 3207, 5305, 11856, 5305, 29889, 13, 268, 334, 732, 2457, 278, 12091, 740, 995, 472, 278, 2183, 1298, 29889, 13, 268, 3776, 13, 1678, 2024, 3765, 10272, 2061, 573, 1917, 29898, 8896, 2636, 1298, 29892]}
{"line_number": 299, "line_type": "original", "code": "     * Class for finding the minimum of the objective function along a given", "entropy": 3.197370767593384, "is_bug_line": false, "sus_score": 0.36151, "per_token_entropy": [7.614590644836426, 7.102011680603027, 9.96606159210205, 5.3365888595581055, 3.708761215209961, 0.5918704867362976, 0.6220934391021729, 0.09596552699804306, 0.6829487681388855, 3.5500245094299316, 0.31445184350013733, 2.622842311859131, 0.5818527340888977, 1.973124384880066], "tokens": [418, 334, 4134, 363, 9138, 278, 9212, 310, 278, 12091, 740, 3412, 263, 2183]}
{"line_number": 299, "line_type": "generated", "code": "\n                        for (int i = 0; i", "entropy": 0.05468898266553879, "is_bug_line": false, "sus_score": 0.36151, "per_token_entropy": [0.12241994589567184, 0.0868699923157692, 0.06286738812923431, 0.3226647675037384, 0.005577004048973322, 0.0015274535398930311, 0.032247550785541534, 0.00910416804254055, 0.006087689660489559, 0.001416513929143548, 0.0028019000310450792, 0.0026833738666027784], "tokens": [13, 462, 4706, 363, 313, 524, 474, 353, 29871, 29900, 29936, 474]}
{"line_number": 378, "line_type": "original", "code": "            throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);", "entropy": 0.9655916094779968, "is_bug_line": false, "sus_score": 0.35666, "per_token_entropy": [10.829633712768555, 4.253446578979492, 0.04289484769105911, 0.09488073736429214, 0.024087287485599518, 0.007976582273840904, 0.018998440355062485, 0.0036225190851837397, 0.004864405374974012, 0.0041508241556584835, 0.9991097450256348, 0.4360651969909668, 0.001396872103214264, 0.3227095603942871, 0.0005650115781463683, 0.016569973900914192, 1.4647434949874878, 0.010467862710356712, 0.0006547214579768479, 1.5514469146728516, 0.18913784623146057], "tokens": [632, 3183, 716, 5792, 25807, 29884, 3016, 287, 10925, 2451, 29898, 7717, 1891, 2500, 1446, 29889, 6007, 1254, 4717, 10192, 416]}
{"line_number": 378, "line_type": "generated", "code": "\n\n    /**\n     * @throws MathUnsupportedOperationException if the goal type is\n     * {@link GoalType#MAXIMIZE}.\n     */\n    private void checkGoalType() {\n        if", "entropy": 0.21834337711334229, "is_bug_line": false, "sus_score": 0.35666, "per_token_entropy": [0.1030779778957367, 0.9686845541000366, 0.18716228008270264, 0.09572626650333405, 0.16570501029491425, 0.007403319701552391, 0.001966924872249365, 1.7910375595092773, 0.9406265020370483, 0.001772143878042698, 0.3695662021636963, 0.2290746569633484, 0.0046434905380010605, 0.006016121711581945, 0.0022644372656941414, 0.002328781643882394, 0.001617077155970037, 0.06363090127706528, 1.6575262546539307, 1.8809010982513428, 0.08043660968542099, 0.11435102671384811, 0.5219007134437561, 0.002963676815852523, 0.0017296605510637164, 0.17985589802265167, 0.013075090944766998, 0.12805698812007904, 0.0014221088495105505, 0.002984951948747039, 0.010805665515363216, 0.0748043805360794, 3.0636318115284666e-05, 0.0005218812730163336, 0.0011137479450553656, 0.17000696063041687, 0.010532506741583347, 0.014647684060037136, 0.04567344859242439, 0.002970451721921563, 0.03936738520860672, 0.03368161991238594, 0.010583464987576008, 0.05341709405183792, 0.38378021121025085, 0.0010432521812617779, 0.16554804146289825, 0.03505631163716316, 0.031483713537454605, 0.0074203587137162685, 0.3742862343788147, 0.3595719635486603], "tokens": [13, 13, 1678, 7762, 13, 268, 334, 732, 386, 5727, 5792, 25807, 29884, 3016, 287, 10925, 2451, 565, 278, 7306, 1134, 338, 13, 268, 334, 26633, 2324, 2921, 284, 1542, 29937, 12648, 7833, 29902, 10721, 1836, 13, 268, 3776, 13, 1678, 2024, 1780, 1423, 8120, 284, 1542, 580, 426, 13, 4706, 565]}
{"line_number": 344, "line_type": "original", "code": "        public UnivariatePointValuePair search(final double[] p, final double[] d) {", "entropy": 1.655011534690857, "is_bug_line": false, "sus_score": 0.32904, "per_token_entropy": [8.467392921447754, 4.930800437927246, 4.901017665863037, 0.0028221087995916605, 0.0009218971827067435, 0.36426499485969543, 0.010304464027285576, 0.0037760876584798098, 7.865870952606201, 0.05806392803788185, 1.5953457355499268, 1.4276628494262695, 0.19280141592025757, 1.563352346420288, 0.4591382145881653, 1.6079745292663574, 0.04579291120171547, 0.05549372732639313, 0.0968591570854187, 0.42742690443992615, 0.6781588792800903], "tokens": [308, 970, 853, 27432, 403, 5228, 1917, 20547, 2740, 29898, 8394, 3765, 2636, 282, 29892, 2186, 3765, 2636, 270, 29897, 426]}
{"line_number": 344, "line_type": "generated", "code": "\n    /**\n     * Class for finding the minimum of the objective function along a given\n     * direction.\n     */\n    private class LineSearch {\n        /**\n         * Value that will pass the precondition check for {@link Brent", "entropy": 0.163497194647789, "is_bug_line": false, "sus_score": 0.32904, "per_token_entropy": [0.12392329424619675, 0.6953351497650146, 0.13788308203220367, 0.12941186130046844, 0.009205280803143978, 0.0015306673012673855, 2.155608654022217, 0.3191770613193512, 0.8964555263519287, 0.1845075935125351, 0.22215372323989868, 0.04068072512745857, 0.08568042516708374, 0.08726543933153152, 0.005610670894384384, 0.24566389620304108, 0.03910696133971214, 0.0361088328063488, 0.013244508765637875, 0.0011232740944251418, 0.00041929035796783864, 0.022629128769040108, 0.11368019133806229, 0.036003272980451584, 0.02118763141334057, 0.08048324286937714, 0.00302108284085989, 0.045192617923021317, 0.06352116167545319, 0.0696784257888794, 0.1346132606267929, 0.009949376806616783, 1.1117173433303833, 0.00482573127374053, 0.26097768545150757, 0.05552372708916664, 0.1224307045340538, 0.004912212491035461, 0.0007407305529341102, 0.7714913487434387, 0.0025955105666071177, 0.003072662279009819, 0.00495005352422595, 0.0003466005437076092, 0.011425775475800037, 0.00020037073409184813, 0.0008013612823560834, 0.006401746068149805, 0.0351116769015789, 0.0005932478234171867, 0.07362549751996994, 5.447716102935374e-05], "tokens": [13, 1678, 7762, 13, 268, 334, 4134, 363, 9138, 278, 9212, 310, 278, 12091, 740, 3412, 263, 2183, 13, 268, 334, 5305, 29889, 13, 268, 3776, 13, 1678, 2024, 770, 7407, 7974, 426, 13, 4706, 7762, 13, 308, 334, 7865, 393, 674, 1209, 278, 758, 16122, 1423, 363, 26633, 2324, 1771, 296]}
