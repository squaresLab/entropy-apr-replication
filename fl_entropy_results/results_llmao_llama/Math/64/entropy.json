{"line_number": 613, "line_type": "original", "code": "                for (int i = j + 1; i < solvedCols; ++i) {", "entropy": 0.779438316822052, "is_bug_line": false, "sus_score": 0.45989, "per_token_entropy": [5.78597354888916, 8.253335952758789, 0.006734294816851616, 0.003062085248529911, 0.3206348419189453, 0.006308404263108969, 0.5127258896827698, 1.1095484495162964, 0.005482636857777834, 0.0012507957872003317, 0.002893192460760474, 0.0025222653057426214, 0.010665911249816418, 0.2534620463848114, 0.015703234821558, 9.786603914108127e-05, 0.004938310012221336, 0.05145843327045441, 0.0004634975048247725, 0.004356655292212963, 0.016586270183324814], "tokens": [462, 363, 313, 524, 474, 353, 432, 718, 29871, 29896, 29936, 474, 529, 7484, 1625, 29879, 29936, 8445, 29875, 29897, 426]}
{"line_number": 613, "line_type": "generated", "code": "\n            lmDiag[j] = diag[j];\n        }\n        for (int k = 0; k", "entropy": 0.18158404529094696, "is_bug_line": false, "sus_score": 0.45989, "per_token_entropy": [0.1920824497938156, 0.567064642906189, 1.2626498937606812, 0.0004190520558040589, 0.22656624019145966, 2.777537883957848e-05, 0.0014765085652470589, 0.1129947379231453, 0.0015235256869345903, 0.044198550283908844, 0.048273637890815735, 0.0012016226537525654, 0.29549551010131836, 0.03297550976276398, 0.010775829665362835, 1.1673202514648438, 0.015796056017279625, 0.0024473497178405523, 0.2743777632713318, 0.3628961145877838, 0.0005544078885577619, 0.00041607304592616856, 0.37770622968673706, 0.0010624246206134558, 0.05783375725150108, 0.001100530382245779, 0.024612337350845337, 0.0005042473785579205], "tokens": [13, 9651, 301, 29885, 12130, 351, 29961, 29926, 29962, 353, 7936, 29961, 29926, 1385, 13, 4706, 500, 13, 4706, 363, 313, 524, 413, 353, 29871, 29900, 29936, 413]}
{"line_number": 609, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.6693031787872314, "is_bug_line": false, "sus_score": 0.44499, "per_token_entropy": [8.048562049865723, 3.3251237869262695, 0.005534444935619831, 0.004678849596530199, 0.9453068971633911, 0.01063441950827837, 0.017790507525205612, 0.004326744936406612, 0.007594759110361338, 0.0018763808766379952, 0.0053828065283596516, 0.25457999110221863, 0.002552467631176114, 0.0006199345225468278, 0.0043694740161299706, 0.07086418569087982, 0.00039009589818306267, 0.0012756790965795517, 0.005297195632010698], "tokens": [632, 363, 313, 524, 432, 353, 29871, 29900, 29936, 432, 529, 7484, 1625, 29879, 29936, 8445, 29926, 29897, 426]}
{"line_number": 609, "line_type": "generated", "code": "\n        int n = jacobian.length;\n        double[][] r = new double[n][n];\n        double[][] qraux = new double[n][n];\n        for (int i = 0;", "entropy": 0.3706848621368408, "is_bug_line": false, "sus_score": 0.44499, "per_token_entropy": [0.12743118405342102, 0.21801233291625977, 1.1975802183151245, 1.1436446905136108, 0.38007140159606934, 1.674067497253418, 0.0033943201415240765, 0.0099160922691226, 0.00010918975021922961, 0.2003786265850067, 0.013017082586884499, 0.038122087717056274, 0.01012428104877472, 0.3193265497684479, 1.8885610103607178, 0.101759172976017, 0.6573628783226013, 0.7078708410263062, 0.05642807483673096, 0.6043862700462341, 0.004836882930248976, 0.0026454473845660686, 0.026498403400182724, 0.02952231653034687, 0.1749539077281952, 0.04959757626056671, 0.01689036749303341, 0.28711026906967163, 1.337388515472412, 0.021351829171180725, 1.1503099203109741, 0.8224927186965942, 2.8587803840637207, 0.012260311283171177, 0.0061254859901964664, 0.04953404888510704, 0.00037555795279331505, 0.002279780339449644, 0.007546133827418089, 0.008748418651521206, 0.5410979986190796, 0.016338728368282318, 0.005897857714444399, 0.4108399450778961, 1.4646284580230713, 0.002422971185296774, 0.000871278636623174, 0.5734676122665405, 0.02430429868400097, 0.008209532126784325, 0.00401642918586731, 0.0027056061662733555], "tokens": [13, 4706, 938, 302, 353, 432, 562, 711, 713, 29889, 2848, 29936, 13, 4706, 3765, 2636, 2636, 364, 353, 716, 3765, 29961, 29876, 3816, 29876, 1385, 13, 4706, 3765, 2636, 2636, 3855, 336, 1314, 353, 716, 3765, 29961, 29876, 3816, 29876, 1385, 13, 4706, 363, 313, 524, 474, 353, 29871, 29900, 29936]}
{"line_number": 632, "line_type": "original", "code": "            lmPar = Math.max(parl, lmPar + correction);", "entropy": 2.0825250148773193, "is_bug_line": false, "sus_score": 0.43617, "per_token_entropy": [7.173496723175049, 2.6193337440490723, 0.009818828664720058, 4.234552383422852, 0.30543747544288635, 3.425712823867798, 0.008649386465549469, 3.8774163722991943, 0.010381978005170822, 3.379680871963501, 0.12783420085906982, 0.013272741809487343, 0.865871012210846, 0.0013447299133986235, 0.03117085061967373, 6.502059459686279, 4.7038397789001465, 0.195577934384346], "tokens": [632, 301, 29885, 2177, 353, 5792, 29889, 3317, 29898, 862, 29880, 29892, 301, 29885, 2177, 718, 26385, 416]}
{"line_number": 632, "line_type": "generated", "code": "\n\n            // eliminate the column of lmDir corresponding to d\n            // using a Givens rotation\n            for (int k = j + 1; k", "entropy": 0.2351360321044922, "is_bug_line": false, "sus_score": 0.43617, "per_token_entropy": [0.032443638890981674, 0.7239284515380859, 0.4307842552661896, 0.09137582778930664, 0.932041585445404, 0.00016246906307060272, 0.28458651900291443, 0.000578474544454366, 0.40639767050743103, 0.15215513110160828, 0.19612999260425568, 1.1758127212524414, 9.953480184776708e-05, 0.08101116865873337, 0.8807907104492188, 0.06388960033655167, 0.2890332043170929, 1.4091861248016357, 0.00793270580470562, 0.04780564829707146, 2.2649508537142538e-05, 2.264974000354414e-06, 0.0007179781678132713, 0.024720268324017525, 0.19688375294208527, 0.0761607363820076, 0.0005259322933852673, 0.0016558758215978742, 0.46061277389526367, 0.00446513295173645, 0.09782646596431732, 0.3936029374599457, 0.0002112165529979393, 0.0001538873475510627, 0.0007753941463306546, 0.00041416651220060885], "tokens": [13, 13, 9651, 849, 27399, 278, 1897, 310, 301, 29885, 9170, 6590, 304, 270, 13, 9651, 849, 773, 263, 402, 440, 575, 13733, 13, 9651, 363, 313, 524, 413, 353, 432, 718, 29871, 29896, 29936, 413]}
