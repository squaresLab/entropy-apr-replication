{"line_number": 755, "line_type": "original", "code": "    }", "entropy": 5.268835067749023, "is_bug_line": false, "sus_score": 0.32248, "per_token_entropy": [6.852530479431152, 3.6851394176483154], "tokens": [268, 500]}
{"line_number": 755, "line_type": "generated", "code": "\n      return true;\n    }\n\n    // Calculate the cost of the function, based on the number of references\n    // and the size of the function.\n    int fnCost = compiler.getCostEstimator().getCost", "entropy": 0.575817346572876, "is_bug_line": false, "sus_score": 0.32248, "per_token_entropy": [0.14127163589000702, 0.4058147370815277, 0.7396371960639954, 0.2811105251312256, 0.0007819455349817872, 0.022576218470931053, 0.09556993842124939, 0.0012653210433200002, 0.18203774094581604, 0.23255348205566406, 0.1818360984325409, 0.9158119559288025, 2.0479543209075928, 0.024424593895673752, 0.12533719837665558, 0.7819406986236572, 0.3612138330936432, 1.0762056112289429, 0.610885500907898, 3.047492265701294, 3.7737555503845215, 0.04873073846101761, 0.49413034319877625, 1.0572947263717651, 0.02809826284646988, 1.0093863010406494, 0.8988034725189209, 0.005736673250794411, 0.02103099599480629, 0.7716154456138611, 0.5645822286605835, 1.5292454957962036, 0.0529513880610466, 0.06267347931861877, 0.28623202443122864, 0.42774373292922974, 0.08294587582349777, 0.1813243180513382, 0.5818619728088379, 1.5063263177871704, 0.784553050994873, 0.05100711062550545, 2.784522771835327, 0.012027479708194733, 0.021741501986980438, 0.4607364237308502, 0.4066060781478882, 0.005711189471185207, 4.351044481154531e-05, 0.023548921570181847, 0.25577405095100403, 0.47603943943977356], "tokens": [13, 418, 736, 1565, 29936, 13, 1678, 500, 13, 13, 1678, 849, 20535, 403, 278, 3438, 310, 278, 740, 29892, 2729, 373, 278, 1353, 310, 9282, 13, 1678, 849, 322, 278, 2159, 310, 278, 740, 29889, 13, 1678, 938, 7876, 25733, 353, 6516, 29889, 657, 25733, 12787, 326, 1061, 2141, 657, 25733]}
{"line_number": 729, "line_type": "original", "code": "        if (cArg != null) {", "entropy": 2.8858165740966797, "is_bug_line": false, "sus_score": 0.31784, "per_token_entropy": [6.358345031738281, 2.3819525241851807, 0.15574775636196136, 7.092325687408447, 8.90174388885498, 0.6912547945976257, 0.01728951372206211, 0.3706214725971222, 0.0030702855437994003], "tokens": [308, 565, 313, 29883, 8559, 2804, 1870, 29897, 426]}
{"line_number": 729, "line_type": "generated", "code": "\n        referencesUsingBlockInlining++;\n      }\n\n      if (checkModules) {\n        Node callNode = ref.callNode;\n        JSModule refModule = moduleGraph.getContainingModule(callNode);\n", "entropy": 0.1863390952348709, "is_bug_line": false, "sus_score": 0.31784, "per_token_entropy": [0.0687127560377121, 0.22872771322727203, 0.7007408738136292, 0.0006816447712481022, 3.099393507000059e-05, 1.3708974620385561e-05, 5.722029527532868e-06, 1.0251946150674485e-05, 0.032204147428274155, 0.0029844765085726976, 0.4896235466003418, 0.0011872155591845512, 0.620063841342926, 0.6696561574935913, 0.04688936471939087, 0.44405385851860046, 0.049239832907915115, 0.06549432128667831, 0.00010418349120300263, 4.410734163684538e-06, 0.26167598366737366, 0.00028463127091526985, 0.0008532935753464699, 0.07389812171459198, 1.0596922636032104, 0.4413241744041443, 0.40975916385650635, 0.004746242426335812, 0.017495937645435333, 0.002279899315908551, 0.3480275869369507, 0.11091071367263794, 0.008216507732868195, 0.0005830018781125546, 0.06776854395866394, 0.929872989654541, 0.007248058449476957, 1.100346565246582, 0.018445273861289024, 0.015007448382675648, 0.38545718789100647, 0.00035255891270935535, 0.00799786951392889, 0.0005315321614034474, 0.8000088930130005, 8.95221673999913e-05, 0.0006484074983745813, 0.0009484559996053576, 0.16166380047798157, 0.0002628219372127205, 0.03264869377017021, 0.00015698630886618048], "tokens": [13, 4706, 9282, 15156, 7445, 797, 1915, 292, 9107, 13, 418, 500, 13, 13, 418, 565, 313, 3198, 2111, 2540, 29897, 426, 13, 4706, 9071, 1246, 4247, 353, 2143, 29889, 4804, 4247, 29936, 13, 4706, 7649, 7355, 2143, 7355, 353, 3883, 9527, 29889, 657, 1323, 17225, 7355, 29898, 4804, 4247, 416, 13]}
{"line_number": 515, "line_type": "original", "code": "        greatGrandParent.addChildAfter(newBlock, grandParent);", "entropy": 2.3139243125915527, "is_bug_line": false, "sus_score": 0.29617, "per_token_entropy": [10.120354652404785, 16.791942596435547, 0.3968932628631592, 0.0017037175130099058, 0.3108088970184326, 2.749253273010254, 2.8529224395751953, 0.06555740535259247, 1.256411075592041, 0.004233565181493759, 1.2621136903762817, 0.29843586683273315, 0.04338877275586128, 0.8399746417999268, 0.0073251002468168736, 0.021472830325365067], "tokens": [308, 2107, 3338, 392, 9780, 29889, 1202, 5938, 13555, 29898, 1482, 7445, 29892, 4595, 9780, 416]}
{"line_number": 515, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Checks if the given function matches the criteria for an inlinable\n   * function.\n   *\n   * @param fnNode The function to check.\n   * @param callNode The", "entropy": 0.2691953778266907, "is_bug_line": false, "sus_score": 0.29617, "per_token_entropy": [0.27106550335884094, 0.9405130743980408, 0.023351779207587242, 0.011274673976004124, 0.05603872984647751, 0.021557068452239037, 0.4152098000049591, 0.05473221465945244, 0.0014898402150720358, 0.00015960850578267127, 1.2728798389434814, 0.14427627623081207, 0.22820769250392914, 0.3679024279117584, 0.24545584619045258, 0.5490404367446899, 0.5637087821960449, 0.0161549374461174, 0.012959306128323078, 0.014851367101073265, 0.19341200590133667, 0.024725154042243958, 0.0005373702733777463, 0.0005909841856919229, 0.070172518491745, 0.0006434039096347988, 0.00012730741582345217, 0.007599609903991222, 0.7574704885482788, 0.23526574671268463, 0.011928418651223183, 1.023697853088379, 0.3629671037197113, 0.001962760929018259, 0.002912448486313224, 0.30205225944519043, 0.7925891876220703, 0.28024715185165405, 0.2897835373878479, 0.47535112500190735, 0.22616641223430634, 0.7564036250114441, 0.3786941170692444, 0.541142463684082, 0.04955798387527466, 0.003960267174988985, 0.10643887519836426, 0.013472353108227253, 0.8210513591766357, 0.6876736879348755, 0.29503047466278076, 0.07370124757289886], "tokens": [13, 29871, 500, 13, 13, 29871, 7762, 13, 259, 334, 5399, 29879, 565, 278, 2183, 740, 7087, 278, 16614, 363, 385, 297, 1915, 519, 13, 259, 334, 740, 29889, 13, 259, 334, 13, 259, 334, 732, 3207, 7876, 4247, 450, 740, 304, 1423, 29889, 13, 259, 334, 732, 3207, 1246, 4247, 450]}
{"line_number": 900, "line_type": "original", "code": "      // The part of the function that is inlined using direct inlining:", "entropy": 2.59694766998291, "is_bug_line": false, "sus_score": 0.28222, "per_token_entropy": [11.634662628173828, 1.7413330078125, 3.9768617153167725, 6.449204921722412, 0.3572607636451721, 0.12765458226203918, 0.2812180519104004, 0.144140362739563, 0.10437237471342087, 2.978644609451294, 0.01287987269461155, 10.008115768432617, 2.2079529762268066, 1.4850605726242065, 0.1370350569486618, 0.0026857517659664154, 2.499027967453003], "tokens": [539, 849, 450, 760, 310, 278, 740, 393, 338, 297, 21354, 773, 1513, 297, 1915, 292, 29901]}
{"line_number": 900, "line_type": "generated", "code": "\n  /**\n   * Store the names of functions that are known to be pure to be used when\n   * classifying call-sites in expressions.\n   */\n  public void setKnownPureFunctions(Set<String> known", "entropy": 0.3019092381000519, "is_bug_line": false, "sus_score": 0.28222, "per_token_entropy": [0.055782727897167206, 0.5376289486885071, 0.388360857963562, 0.04448125511407852, 0.004529217258095741, 0.000979539705440402, 2.077148199081421, 0.18743519484996796, 1.1023085117340088, 0.04981989786028862, 2.406942844390869, 0.8764643669128418, 1.0035192966461182, 1.2310763597488403, 0.11502715200185776, 0.6418312788009644, 1.6922633647918701, 1.4697105884552002, 0.0328139029443264, 0.01949448697268963, 0.2157697081565857, 0.014306476339697838, 0.0014067525044083595, 0.0013719918206334114, 0.06741868704557419, 0.004088377580046654, 0.08602339774370193, 0.009103341028094292, 0.012554306536912918, 0.07491300255060196, 0.014868631958961487, 0.025583527982234955, 0.0510263666510582, 0.0021673778537660837, 0.050277311354875565, 0.0011750705307349563, 0.011056585237383842, 0.03369833156466484, 0.0055512795224785805, 0.006862641777843237, 0.6603777408599854, 0.005669110454618931, 0.0609549880027771, 0.023003043606877327, 0.07939176261425018, 0.02660253271460533, 0.00496357586234808, 0.04153832793235779, 0.0016678959364071488, 0.005839075893163681, 0.0011882871622219682, 0.16124214231967926], "tokens": [13, 29871, 7762, 13, 259, 334, 14491, 278, 2983, 310, 3168, 393, 526, 2998, 304, 367, 8296, 304, 367, 1304, 746, 13, 259, 334, 770, 9215, 1246, 29899, 16315, 297, 12241, 29889, 13, 259, 3776, 13, 29871, 970, 1780, 731, 29968, 21369, 29925, 545, 6678, 29879, 29898, 2697, 29966, 1231, 29958, 2998]}
{"line_number": 228, "line_type": "original", "code": "        }", "entropy": 6.224055290222168, "is_bug_line": false, "sus_score": 0.27181, "per_token_entropy": [8.230433464050293, 4.217677116394043], "tokens": [308, 500]}
{"line_number": 228, "line_type": "generated", "code": "\n      Node returnValue = returnNode.removeFirstChild();\n      newExpression = returnValue.detachFromParent();\n\n      // Inline the return value into the call site.\n      Node callReplacement = newExpression;\n     ", "entropy": 0.5009400248527527, "is_bug_line": false, "sus_score": 0.27181, "per_token_entropy": [0.12883689999580383, 0.30061662197113037, 1.2461886405944824, 1.1027086973190308, 0.4321175217628479, 0.09132621437311172, 0.21768049895763397, 0.0012431758223101497, 0.0038291718810796738, 0.2570643723011017, 0.01831582933664322, 2.0146166207268834e-05, 0.0192418172955513, 0.0037889136001467705, 0.4752318859100342, 1.096732497215271, 0.0001102625101339072, 0.0011999557027593255, 0.5099049210548401, 0.2991570234298706, 0.12302634119987488, 0.8565983772277832, 0.00022230061586014926, 0.8106013536453247, 0.001179595128633082, 0.008638513274490833, 0.0029381224885582924, 0.8939310908317566, 0.04746192693710327, 0.3750913739204407, 2.8472018241882324, 0.26267239451408386, 1.2472964525222778, 1.0517783164978027, 0.2989402711391449, 2.003645181655884, 0.16748294234275818, 0.8650656938552856, 0.8098902702331543, 0.3048057556152344, 0.03897271305322647, 0.11308375000953674, 1.0636448860168457, 2.007669448852539, 1.574171543121338, 0.000938332756049931, 0.22249093651771545, 1.124699592590332, 0.004875319544225931, 0.42879918217658997, 0.0013250865740701556, 0.28442874550819397], "tokens": [13, 418, 9071, 736, 1917, 353, 736, 4247, 29889, 5992, 6730, 5938, 890, 13, 418, 716, 10960, 353, 736, 1917, 29889, 4801, 496, 4591, 9780, 890, 13, 13, 418, 849, 512, 1220, 278, 736, 995, 964, 278, 1246, 3268, 29889, 13, 418, 9071, 1246, 5612, 9552, 353, 716, 10960, 29936, 13, 418]}
