{"line_number": 241, "line_type": "original", "code": "    if ((long) x == x) {", "entropy": 3.4364304542541504, "is_bug_line": true, "sus_score": 0.53272, "per_token_entropy": [8.393997192382812, 4.397678375244141, 5.617199420928955, 8.706499099731445, 0.6500310897827148, 4.312002182006836, 1.7964836359024048, 0.12285935878753662, 0.3540707230567932, 0.013482820242643356], "tokens": [268, 565, 5135, 5426, 29897, 921, 1275, 921, 29897, 426]}
{"line_number": 241, "line_type": "generated", "code": "\n  void endFile() {\n    // do nothing\n  }\n\n  /**\n   * Called when we're at the end of a line.\n   * @return Whether a line break should be added after this line.\n", "entropy": 0.499991774559021, "is_bug_line": true, "sus_score": 0.53272, "per_token_entropy": [0.09855706244707108, 0.2112954705953598, 0.49288004636764526, 1.1492791175842285, 0.7862983345985413, 0.09040083736181259, 0.22527816891670227, 0.04684852808713913, 0.44362080097198486, 1.557013988494873, 3.3095815181732178, 0.04225761815905571, 0.3976063132286072, 0.02314085140824318, 0.0029488196596503258, 0.015164562501013279, 0.21506428718566895, 0.12627190351486206, 0.511317789554596, 0.43921056389808655, 0.0049507650546729565, 0.0002051381452474743, 1.191815972328186, 0.0008977196994237602, 0.6258504986763, 0.267888605594635, 0.19711115956306458, 0.028139524161815643, 0.549451470375061, 0.03589160740375519, 0.17285272479057312, 0.004236532840877771, 0.16632458567619324, 2.092580556869507, 0.35165032744407654, 0.48228588700294495, 0.007527085021138191, 0.4881353974342346, 1.1113444566726685, 0.850908100605011, 1.0281636714935303, 1.0690128803253174, 0.4782020151615143, 0.25158992409706116, 0.6224382519721985, 0.17875546216964722, 0.3506234288215637, 1.2655797004699707, 0.8806145191192627, 0.897823691368103, 0.13195420801639557, 0.030727500095963478], "tokens": [13, 29871, 1780, 1095, 2283, 580, 426, 13, 1678, 849, 437, 3078, 13, 29871, 500, 13, 13, 29871, 7762, 13, 259, 334, 3037, 839, 746, 591, 29915, 276, 472, 278, 1095, 310, 263, 1196, 29889, 13, 259, 334, 732, 2457, 26460, 263, 1196, 2867, 881, 367, 2715, 1156, 445, 1196, 29889, 13]}
{"line_number": 250, "line_type": "original", "code": "      }", "entropy": 6.95827579498291, "is_bug_line": false, "sus_score": 0.44305, "per_token_entropy": [10.818442344665527, 3.098109722137451], "tokens": [539, 500]}
{"line_number": 250, "line_type": "generated", "code": "\n  void add(String x) {\n    append(x);\n  }\n\n  void add(char x) {\n    append(x);\n  }\n\n  void add(char[] x) {\n    append(", "entropy": 0.34150052070617676, "is_bug_line": false, "sus_score": 0.44305, "per_token_entropy": [0.05992314592003822, 0.22528816759586334, 2.0666146278381348, 1.8958696126937866, 1.9314461946487427, 0.5602452754974365, 2.7380294799804688, 0.03955933451652527, 0.011666405946016312, 0.031650617718696594, 0.038437370210886, 0.8214292526245117, 0.0234978049993515, 0.015923481434583664, 0.02542978711426258, 0.0026987106539309025, 0.12731605768203735, 0.003117465414106846, 0.006398903671652079, 0.128723606467247, 0.031039807945489883, 0.5101706385612488, 0.3305491805076599, 0.7388949990272522, 0.6477077603340149, 0.5045487880706787, 0.009458963759243488, 0.0019221893744543195, 0.004439498297870159, 0.004565767012536526, 0.12656185030937195, 0.014257353730499744, 0.36785629391670227, 0.0054861935786902905, 0.0009009354980662465, 0.004650253802537918, 0.0017392997397109866, 0.005688905715942383, 0.07675807178020477, 0.02008364535868168, 0.3250664472579956, 0.2192162424325943, 0.5715867877006531, 1.1820029020309448, 0.6822579503059387, 0.4007263779640198, 0.11990208178758621, 0.001254724687896669, 0.0027255788445472717, 0.0036532822996377945, 0.08585219830274582, 0.003235583659261465], "tokens": [13, 29871, 1780, 788, 29898, 1231, 921, 29897, 426, 13, 1678, 9773, 29898, 29916, 416, 13, 29871, 500, 13, 13, 29871, 1780, 788, 29898, 3090, 921, 29897, 426, 13, 1678, 9773, 29898, 29916, 416, 13, 29871, 500, 13, 13, 29871, 1780, 788, 29898, 3090, 2636, 921, 29897, 426, 13, 1678, 9773, 29898]}
{"line_number": 169, "line_type": "original", "code": "    if (statementContext) {", "entropy": 2.4292497634887695, "is_bug_line": false, "sus_score": 0.29558, "per_token_entropy": [5.345398902893066, 3.265376567840576, 0.15238291025161743, 5.702236175537109, 2.1548047065734863, 0.3479430079460144, 0.036606233566999435], "tokens": [268, 565, 313, 20788, 2677, 29897, 426]}
{"line_number": 169, "line_type": "generated", "code": "\n      append(\" \");\n    }\n\n    append(op);\n  }\n\n  void addLineBreak(int indent) {\n    if (statementStarted) {\n      append(\" \");\n    }\n    appendLine", "entropy": 0.4582463502883911, "is_bug_line": false, "sus_score": 0.29558, "per_token_entropy": [0.14996439218521118, 0.4645383358001709, 0.19424939155578613, 0.06382160633802414, 0.4144253134727478, 0.008242636919021606, 0.13209481537342072, 0.0013550871517509222, 0.6507428884506226, 0.37661007046699524, 0.02891981601715088, 0.10091302543878555, 0.46474215388298035, 0.0033622421324253082, 0.002834114944562316, 0.0009888288332149386, 0.24269358813762665, 0.0005660838796757162, 0.0011204162146896124, 0.023654988035559654, 0.03210706636309624, 0.3634415566921234, 0.6237805485725403, 3.649996519088745, 1.09165620803833, 0.009731943719089031, 0.9550026655197144, 0.6304229497909546, 1.3723570108413696, 0.612853467464447, 0.007105438504368067, 0.00279357866384089, 0.06597553938627243, 1.7865386009216309, 0.2635214626789093, 2.5260419845581055, 0.24813784658908844, 0.0015453074593096972, 0.2101963609457016, 0.0064141834154725075, 0.0032676656264811754, 0.03690522164106369, 1.7747029066085815, 0.34281274676322937, 1.0306349992752075, 0.042204249650239944, 0.19899100065231323, 0.0005751386051997542, 0.11876049637794495, 0.27943697571754456, 1.137776255607605, 1.0772825479507446], "tokens": [13, 418, 9773, 703, 14796, 13, 1678, 500, 13, 13, 1678, 9773, 29898, 459, 416, 13, 29871, 500, 13, 13, 29871, 1780, 788, 3542, 20130, 557, 29898, 524, 29536, 29897, 426, 13, 1678, 565, 313, 20788, 4763, 287, 29897, 426, 13, 418, 9773, 703, 14796, 13, 1678, 500, 13, 1678, 9773, 3542]}
{"line_number": 285, "line_type": "original", "code": "   */", "entropy": 6.294706344604492, "is_bug_line": false, "sus_score": 0.27634, "per_token_entropy": [7.51652717590332, 5.072885036468506], "tokens": [1678, 3776]}
{"line_number": 285, "line_type": "generated", "code": "\n  /**\n   * Called when we're at the end of a statement.\n   *\n   * @param statementContext {@code true} if the statement is being printed\n   *    as part of a statement context (e.", "entropy": 0.6024478077888489, "is_bug_line": false, "sus_score": 0.27634, "per_token_entropy": [0.047117747366428375, 0.4296356439590454, 0.761878490447998, 0.5210723876953125, 0.10207375138998032, 0.00158184755127877, 1.0871262550354004, 0.0010475391754880548, 0.5483486652374268, 0.24500435590744019, 0.17974953353405, 0.02775755524635315, 0.5651816129684448, 0.04135442152619362, 0.18696027994155884, 0.00445563904941082, 0.16109146177768707, 0.6741532683372498, 0.3160531222820282, 0.45850902795791626, 0.2803577780723572, 0.3859519064426422, 0.8702107667922974, 0.07025075703859329, 0.017049646005034447, 0.5011913180351257, 0.40805599093437195, 0.6308760046958923, 0.07657468318939209, 2.187218189239502, 0.27053993940353394, 0.03831874951720238, 0.010426927357912064, 0.17574380338191986, 1.172183871269226, 1.168805480003357, 0.5356801748275757, 2.9956557750701904, 1.590840220451355, 0.6789711117744446, 0.243733748793602, 0.007961208000779152, 2.6903510093688965, 1.3549154996871948, 0.6510195732116699, 0.003602564102038741, 0.34894153475761414, 0.7649021744728088, 1.7769967317581177, 1.719110369682312, 1.3283346891403198, 0.012361106462776661], "tokens": [13, 29871, 7762, 13, 259, 334, 3037, 839, 746, 591, 29915, 276, 472, 278, 1095, 310, 263, 3229, 29889, 13, 259, 334, 13, 259, 334, 732, 3207, 3229, 2677, 26633, 401, 1565, 29913, 565, 278, 3229, 338, 1641, 13350, 13, 259, 334, 1678, 408, 760, 310, 263, 3229, 3030, 313, 29872, 29889]}
{"line_number": 226, "line_type": "original", "code": "    // operator on the other hand is not. We only line break after a bin op", "entropy": 4.066617965698242, "is_bug_line": false, "sus_score": 0.25898, "per_token_entropy": [7.230000972747803, 5.729514122009277, 12.3219633102417, 5.191266059875488, 1.8525478839874268, 5.177316665649414, 0.28911587595939636, 1.4811547994613647, 2.067373752593994, 2.5398964881896973, 5.452853679656982, 4.21295690536499, 7.004467010498047, 1.084509253501892, 2.0975189208984375, 3.323476552963257, 4.035542964935303, 2.107640504837036], "tokens": [268, 849, 5455, 373, 278, 916, 1361, 338, 451, 29889, 1334, 871, 1196, 2867, 1156, 263, 9016, 1015]}
{"line_number": 226, "line_type": "generated", "code": "\n   *\n   * @return true if we should wrap the body of a for loop or the then\n   *         clause of an if statement in a block, if it has a single\n   *         statement.\n   */\n  boolean", "entropy": 0.4841780960559845, "is_bug_line": false, "sus_score": 0.25898, "per_token_entropy": [0.219156414270401, 0.1384103149175644, 0.6151131391525269, 1.500630259513855, 0.09234236925840378, 0.05063661187887192, 0.8177580833435059, 0.9570942521095276, 0.6729456782341003, 0.31041619181632996, 2.345633029937744, 0.21116818487644196, 0.445755273103714, 1.101835012435913, 1.1165063381195068, 1.4544532299041748, 0.5126670598983765, 0.6338604092597961, 0.20966669917106628, 0.4779505729675293, 0.3748701512813568, 0.33822086453437805, 0.3428787291049957, 0.16300886869430542, 0.0027933409437537193, 1.8366172313690186, 0.0505158007144928, 0.012274559587240219, 0.025050153955817223, 0.006787577178329229, 0.11286675184965134, 0.9829610586166382, 0.055750031024217606, 0.0415901318192482, 1.817650556564331, 1.5816378593444824, 0.8473032712936401, 0.6729537844657898, 0.40869006514549255, 0.021966135129332542, 0.16201038658618927, 0.06453477591276169, 0.0013062763027846813, 0.004994297865778208, 0.016819801181554794, 0.3634786903858185, 0.12018013745546341, 0.2658921778202057, 0.02704400196671486, 0.0010781434830278158, 0.1020926982164383, 0.46744304895401], "tokens": [13, 259, 334, 13, 259, 334, 732, 2457, 1565, 565, 591, 881, 12244, 278, 3573, 310, 263, 363, 2425, 470, 278, 769, 13, 259, 334, 308, 11845, 310, 385, 565, 3229, 297, 263, 2908, 29892, 565, 372, 756, 263, 2323, 13, 259, 334, 308, 3229, 29889, 13, 259, 3776, 13, 29871, 7223]}
