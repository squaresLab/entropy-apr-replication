{"line_number": 626, "line_type": "original", "code": "        StringBuffer result = new StringBuffer();", "entropy": 1.4097157716751099, "is_bug_line": false, "sus_score": 0.38679, "per_token_entropy": [6.755797863006592, 4.691552639007568, 0.600509524345398, 0.11882041394710541, 0.02214641310274601, 0.020943794399499893, 0.0008873577462509274, 0.0003195490571670234, 0.4764643609523773], "tokens": [308, 1714, 7701, 1121, 353, 716, 1714, 7701, 890]}
{"line_number": 626, "line_type": "generated", "code": "\n        if (index == -1) {\n            result.append(str.substring(0, upper));\n            // only if abbreviation has occured do we append the appendToEnd value\n            if (upper != str.length())", "entropy": 0.14045222103595734, "is_bug_line": false, "sus_score": 0.38679, "per_token_entropy": [0.0607374869287014, 1.8364663124084473, 1.9966765642166138, 0.027717437595129013, 1.3980857133865356, 0.45061981678009033, 0.01585765928030014, 0.0009756095823831856, 0.1593002825975418, 0.002777649089694023, 0.00957787036895752, 0.024523472413420677, 0.6227651834487915, 0.03268999606370926, 0.0028278145473450422, 0.0038500723894685507, 0.025141412392258644, 0.04462035000324249, 0.010447571985423565, 0.00048565989709459245, 0.07963727414608002, 0.0015405465383082628, 0.040727194398641586, 0.03491530194878578, 0.001450439915060997, 0.16389426589012146, 0.20097903907299042, 0.0028778587002307177, 0.00039033422945067286, 0.0004457433824427426, 0.0002026352594839409, 0.00013064485392533243, 0.0048837424255907536, 0.0004638549580704421, 0.0008213722030632198, 0.00016258825780823827, 0.0003137096355203539, 0.0005757343024015427, 0.0008781867218203843, 0.0005623904871754348, 0.00013171759201213717, 0.0011388728162273765, 0.0022357723210006952, 0.00998997874557972, 0.0045623257756233215, 0.0010087168775498867, 0.0037182497326284647, 0.007254212629050016, 0.004066532477736473, 0.0004843492351938039, 0.00024720950750634074, 0.0066806538961827755], "tokens": [13, 4706, 565, 313, 2248, 1275, 448, 29896, 29897, 426, 13, 9651, 1121, 29889, 4397, 29898, 710, 29889, 20363, 29898, 29900, 29892, 7568, 2483, 13, 9651, 849, 871, 565, 29759, 14641, 756, 2179, 2955, 437, 591, 9773, 278, 9773, 1762, 5044, 995, 13, 9651, 565, 313, 21064, 2804, 851, 29889, 2848, 3101]}
{"line_number": 627, "line_type": "original", "code": "        int index = StringUtils.indexOf(str, \" \", lower);", "entropy": 1.0860953330993652, "is_bug_line": false, "sus_score": 0.21196, "per_token_entropy": [6.707897186279297, 3.7332191467285156, 0.09042119979858398, 0.061677485704422, 3.1773250102996826, 0.006200363393872976, 0.002856224775314331, 0.13546042144298553, 0.007868011482059956, 0.016143091022968292, 0.016640320420265198, 1.8092447519302368, 0.07651615142822266, 0.03145021200180054, 0.41850945353507996], "tokens": [308, 938, 2380, 353, 1714, 12177, 29889, 19402, 29898, 710, 29892, 376, 9162, 5224, 416]}
{"line_number": 627, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.05357306823134422, "is_bug_line": false, "sus_score": 0.21196, "per_token_entropy": [0.09180483967065811, 0.5175559520721436, 0.44716593623161316, 0.009943593293428421, 0.003897452959790826, 0.0006688979919999838, 0.5215373039245605, 0.0001754606782924384, 1.6927575416048057e-05, 0.016106491908431053, 0.004335884470492601, 0.062458816915750504, 0.18405181169509888, 0.04807199537754059, 0.019203344359993935, 0.0004226268210913986, 0.00031609306461177766, 0.29372239112854004, 0.0003921216703020036, 0.00025018901214934886, 3.85038583772257e-05, 0.015478480607271194, 0.003452533157542348, 0.004808054305613041, 0.00048458753735758364, 0.00028224775451235473, 0.00600178400054574, 0.018741082400083542, 0.010571668855845928, 0.0013141338713467121, 0.00356300943531096, 0.001978703308850527, 0.002741033909842372, 0.006909406278282404, 4.291525328881107e-06, 0.00039188333903439343, 0.004775428678840399, 7.462222856702283e-05, 2.1457441107486375e-05, 0.00017391123401466757, 0.00323320715688169, 0.0008251837571151555, 0.004122094251215458, 0.3238290846347809, 0.010261515155434608, 0.0021877181716263294, 0.000871040450874716, 0.12683753669261932, 0.0072465199045836926, 0.001039203256368637, 0.0009199915803037584, 0.000521523819770664], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 639, "line_type": "original", "code": "            result.append(StringUtils.defaultString(appendToEnd));", "entropy": 1.0508191585540771, "is_bug_line": false, "sus_score": 0.20586, "per_token_entropy": [9.172185897827148, 4.8543901443481445, 0.039923422038555145, 0.03398782014846802, 0.1243547797203064, 1.3197813034057617, 0.018919017165899277, 0.004804614000022411, 0.16195634007453918, 0.0017245433991774917, 0.0025760105345398188, 0.018062274903059006, 0.0015941066667437553, 0.0012206730898469687, 0.006806048098951578], "tokens": [632, 1121, 29889, 4397, 29898, 1231, 12177, 29889, 4381, 1231, 29898, 4397, 1762, 5044, 2483]}
{"line_number": 639, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there.\n     * \n     * @param", "entropy": 0.09661147743463516, "is_bug_line": false, "sus_score": 0.20586, "per_token_entropy": [0.10045965760946274, 0.48805132508277893, 0.7674666047096252, 0.008560390211641788, 0.006227848585695028, 0.0008107712492346764, 0.6637151837348938, 0.00018153927521780133, 1.8715683836489916e-05, 0.017132850363850594, 0.004239619243890047, 0.05722173675894737, 0.2958191931247711, 0.05001393333077431, 0.019617116078734398, 0.0007538337376900017, 0.0003496989083942026, 0.30121511220932007, 0.00045193947153165936, 0.0005218812730163336, 4.446407547220588e-05, 0.019346237182617188, 0.00406344560906291, 0.004771750420331955, 0.00013755806139670312, 0.00020549570035655051, 0.0032309493981301785, 0.010440965183079243, 0.007733997423201799, 0.0009588173124939203, 0.002267529722303152, 0.0017244244227185845, 0.0028988979756832123, 0.006382675841450691, 4.529942543740617e-06, 0.00046695294440723956, 0.005119429435580969, 0.00014673586701974273, 1.728519782773219e-05, 0.0001820160250645131, 0.003855297341942787, 0.0008326877141371369, 0.004597450606524944, 1.8411500453948975, 0.00041321321623399854, 0.0001438752660760656, 0.2223336547613144, 0.001177213853225112, 0.00035958975786343217, 4.672895011026412e-05, 0.0644497200846672, 0.03146395832300186], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 13, 268, 334, 29871, 13, 268, 334, 732, 3207]}
{"line_number": 638, "line_type": "original", "code": "            result.append(str.substring(0, index));", "entropy": 1.0212384462356567, "is_bug_line": false, "sus_score": 0.20061, "per_token_entropy": [8.724663734436035, 2.888176441192627, 0.012107922695577145, 0.03969591110944748, 0.0704946368932724, 0.3059636354446411, 0.11225011199712753, 0.008329533040523529, 0.0022656265646219254, 0.7787388563156128, 0.0017072877380996943, 0.22095151245594025, 0.11075343936681747], "tokens": [632, 1121, 29889, 4397, 29898, 710, 29889, 20363, 29898, 29900, 29892, 2380, 2483]}
{"line_number": 638, "line_type": "generated", "code": "\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a", "entropy": 0.07157087326049805, "is_bug_line": false, "sus_score": 0.20061, "per_token_entropy": [0.0996362566947937, 0.6637747287750244, 0.8510724902153015, 0.008295721374452114, 0.007676506415009499, 0.0008449559682048857, 0.6356430649757385, 0.00018892886873800308, 1.9907753085135482e-05, 0.01639818586409092, 0.0045992303639650345, 0.05803850665688515, 0.24619393050670624, 0.04824785143136978, 0.018522275611758232, 0.0006887924391776323, 0.0003856868715956807, 0.28951388597488403, 0.00039319414645433426, 0.0008581769652664661, 4.207999518257566e-05, 0.018455572426319122, 0.0037971078418195248, 0.004634710028767586, 0.0001394651480950415, 0.00020144341397099197, 0.003819315228611231, 0.011057528667151928, 0.008731638081371784, 0.0010758809512481093, 0.002538555534556508, 0.0017553649377077818, 0.0030797929503023624, 0.006275590509176254, 4.291525328881107e-06, 0.00042524831951595843, 0.005195805337280035, 0.0001879753835964948, 2.1934269170742482e-05, 0.00018308870494365692, 0.0037276323419064283, 0.0008997444529086351, 0.004728089552372694, 0.3881846070289612, 0.013428246602416039, 0.0033426384907215834, 0.001053850632160902, 0.27249205112457275, 0.008238380774855614, 0.0013165149139240384, 0.0010700459824874997, 0.0005888396990485489], "tokens": [13, 1678, 7762, 13, 268, 334, 1976, 1030, 1403, 1078, 263, 1347, 28138, 29889, 13, 268, 334, 29871, 13, 268, 334, 910, 1158, 29645, 363, 278, 937, 2913, 1156, 278, 5224, 4046, 322, 29759, 1403, 1078, 13, 268, 334, 278, 1714, 727, 29889, 739, 674, 884, 9773, 738, 1714, 4502, 408, 263]}
{"line_number": 629, "line_type": "original", "code": "            result.append(str.substring(0, upper));", "entropy": 1.2162458896636963, "is_bug_line": false, "sus_score": 0.17212, "per_token_entropy": [9.29751205444336, 4.137722492218018, 0.07570240646600723, 0.05085008963942528, 0.12085718661546707, 0.6371305584907532, 0.09083592891693115, 0.04092208668589592, 0.002799165900796652, 0.5944687724113464, 0.003564197337254882, 0.7161425352096558, 0.042688120156526566], "tokens": [632, 1121, 29889, 4397, 29898, 710, 29889, 20363, 29898, 29900, 29892, 7568, 2483]}
{"line_number": 629, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     *", "entropy": 0.09676160663366318, "is_bug_line": false, "sus_score": 0.17212, "per_token_entropy": [0.07879610359668732, 0.4304654896259308, 0.6634106636047363, 0.08172515034675598, 0.0024133387487381697, 0.0029927962459623814, 0.003903983859345317, 0.015307563357055187, 0.002722131321206689, 0.031145082786679268, 0.03411133214831352, 0.005244782194495201, 0.0021162275224924088, 0.0003077510336879641], "tokens": [13, 1678, 849, 2683, 2683, 2683, 2683, 26589, 13, 1678, 7762, 13, 268, 334]}
