{"line_number": 289, "line_type": "original", "code": "  }", "entropy": 3.125, "is_bug_line": false, "sus_score": 0.56817, "per_token_entropy": [3.009765625, 3.240234375], "tokens": [225, 320]}
{"line_number": 289, "line_type": "generated", "code": "\n\n  /**\n   * Return the indentation to use for the specified node.\n   */\n  String getIndent(Node n) {\n    String indent = n.getStaticSourceFile().getIndent();\n    return indent == null? \"  \" : indent;\n  }", "entropy": 0.57373046875, "is_bug_line": false, "sus_score": 0.56817, "per_token_entropy": [0.74365234375, 0.54931640625, 0.44482421875, 0.002223968505859375, 4.01171875, 0.8369140625, 2.142578125, 1.927734375, 0.53076171875, 0.345703125, 0.423095703125, 1.1923828125, 0.368896484375, 0.364013671875, 0.363037109375, 0.66259765625, 0.00748443603515625, 0.5693359375, 0.432861328125, 0.0887451171875, 0.443115234375, 0.10943603515625, 0.0335693359375, 0.07635498046875, 0.0025768280029296875, 0.02618408203125, 1.66015625, 1.0595703125, 0.293212890625, 1.33203125, 0.001804351806640625, 0.708984375, 1.236328125, 0.198974609375, 0.0928955078125, 0.58251953125, 0.14306640625, 0.2027587890625, 0.27490234375, 1.7041015625, 0.7080078125, 1.232421875, 0.008148193359375, 0.0555419921875, 1.29296875, 0.30126953125, 0.006687164306640625, 0.0004608631134033203, 0.01024627685546875, 0.007137298583984375, 0.029083251953125, 0.0008492469787597656], "tokens": [719, 1022, 664, 319, 2744, 322, 33166, 372, 793, 436, 322, 3191, 1541, 32, 664, 569, 334, 892, 622, 13491, 26, 1212, 310, 27, 301, 284, 892, 10525, 280, 310, 32, 371, 5972, 17900, 922, 371, 13491, 473, 284, 442, 10525, 610, 744, 1018, 313, 225, 313, 499, 10525, 45, 334, 320]}
{"line_number": 245, "line_type": "original", "code": "    if (x < 0 && prev == '-') {", "entropy": 2.529296875, "is_bug_line": true, "sus_score": 0.51479, "per_token_entropy": [3.65234375, 2.501953125, 0.1781005859375, 7.87890625, 2.93359375, 0.32421875, 1.052734375, 2.326171875, 7.1015625, 0.81298828125, 1.53515625, 0.041412353515625], "tokens": [264, 415, 308, 106, 333, 225, 34, 962, 7323, 610, 40317, 301]}
{"line_number": 245, "line_type": "generated", "code": "\n    return false;\n  }\n\n  /**\n   * @return Whether the a line break can be added after the specified\n   *          FUNCTION_LIT.\n   */\n  boolean breakAfterFunctionLitFor(Node n, boolean statementContext) {", "entropy": 0.334228515625, "is_bug_line": true, "sus_score": 0.51479, "per_token_entropy": [0.4990234375, 0.40625, 0.951171875, 0.001247406005859375, 0.031494140625, 0.003513336181640625, 0.145263671875, 0.5244140625, 0.0377197265625, 0.0024242401123046875, 0.4287109375, 0.0606689453125, 0.12274169921875, 0.164306640625, 0.11651611328125, 0.007022857666015625, 0.007266998291015625, 0.0435791015625, 0.0036773681640625, 0.01309967041015625, 1.0478515625, 0.1029052734375, 0.041168212890625, 1.1875, 0.0034160614013671875, 3.0859375, 2.259765625, 0.380859375, 2.197265625, 1.0732421875, 0.0251312255859375, 0.005970001220703125, 0.0027561187744140625, 0.020355224609375, 0.006687164306640625, 0.0155487060546875, 0.10626220703125, 0.154541015625, 0.019195556640625, 0.002704620361328125, 0.052001953125, 0.020965576171875, 0.5830078125, 0.0177154541015625, 0.05633544921875, 0.0017108917236328125, 0.005329132080078125, 0.0009641647338867188], "tokens": [284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 312, 1628, 1626, 883, 526, 3640, 2685, 322, 3191, 664, 319, 2033, 17747, 81, 22532, 32, 664, 569, 334, 1905, 1626, 5125, 2447, 27472, 1562, 26, 1212, 310, 30, 1905, 7603, 1222, 27, 301]}
{"line_number": 220, "line_type": "original", "code": "    } else if (Character.isLetter(first) &&", "entropy": 1.8857421875, "is_bug_line": false, "sus_score": 0.49553, "per_token_entropy": [3.716796875, 5.265625, 3.02734375, 0.60107421875, 0.09375, 5.01171875, 0.0037994384765625, 0.08221435546875, 1.677734375, 0.255615234375, 3.73046875, 0.5673828125, 0.488037109375], "tokens": [264, 320, 813, 415, 308, 6881, 32, 297, 17663, 26, 2232, 27, 962]}
{"line_number": 220, "line_type": "generated", "code": "\n    return x == 0 && 1 / x < 0;\n  }\n\n  void addString(String s) {\n    // TODO(nicksantos): Make this more robust.\n    // TODO(nicksantos): Make this handle", "entropy": 0.56103515625, "is_bug_line": false, "sus_score": 0.49553, "per_token_entropy": [0.82861328125, 0.294921875, 0.9462890625, 0.056121826171875, 0.0166168212890625, 0.00028705596923828125, 0.57373046875, 0.51513671875, 0.001171112060546875, 0.304931640625, 0.01027679443359375, 0.6494140625, 0.0004673004150390625, 9.763240814208984e-05, 0.0158233642578125, 0.030975341796875, 0.0005984306335449219, 0.0977783203125, 0.343017578125, 0.3798828125, 0.55322265625, 0.020233154296875, 0.026611328125, 0.26025390625, 0.0946044921875, 0.0047760009765625, 0.12225341796875, 1.7802734375, 1.76171875, 0.69970703125, 0.70263671875, 0.0289154052734375, 0.00013065338134765625, 0.0007987022399902344, 0.0138092041015625, 3.318359375, 0.86181640625, 2.51953125, 1.3994140625, 0.46826171875, 0.450927734375, 1.7685546875, 2.1640625, 0.0238037109375, 0.09100341796875, 0.0001646280288696289, 0.0005450248718261719, 9.179115295410156e-06, 0.0077667236328125, 2.3359375, 0.5927734375, 2.037109375], "tokens": [284, 442, 816, 610, 225, 34, 962, 225, 35, 517, 816, 333, 225, 34, 45, 334, 320, 719, 763, 1015, 652, 26, 652, 309, 27, 301, 284, 434, 4296, 26, 96, 6758, 278, 10369, 711, 6400, 458, 1829, 28819, 32, 284, 434, 4296, 26, 96, 6758, 278, 10369, 711, 6400, 458, 2887]}
{"line_number": 270, "line_type": "original", "code": "    return x == 0.0 && Math.copySign(1, x) == -1.0;", "entropy": 1.1455078125, "is_bug_line": false, "sus_score": 0.4596, "per_token_entropy": [6.0390625, 3.189453125, 5.2265625, 4.15234375, 0.1636962890625, 0.1773681640625, 1.67578125, 0.04754638671875, 1.056640625, 2.91796875, 0.003490447998046875, 0.01338958740234375, 0.046875, 0.00437164306640625, 0.057647705078125, 2.00390625, 0.09271240234375, 0.00913238525390625, 0.138671875, 0.1885986328125, 0.0016040802001953125, 0.2139892578125, 0.0003802776336669922, 0.07501220703125], "tokens": [264, 442, 816, 610, 225, 34, 32, 34, 962, 4175, 32, 2991, 3388, 26, 35, 30, 816, 27, 610, 429, 35, 32, 34, 45]}
{"line_number": 270, "line_type": "generated", "code": "\n\n  /**\n   * @return Whether to break before the specified node.\n   */\n  boolean breakBefore(Node n) {\n    if (n.isCall()) {\n      Node parent = n.getParent();\n      if (parent.isExprResult()) {", "entropy": 0.456787109375, "is_bug_line": false, "sus_score": 0.4596, "per_token_entropy": [1.4423828125, 0.94140625, 0.459716796875, 0.0024623870849609375, 1.6552734375, 0.31005859375, 0.85595703125, 2.107421875, 1.259765625, 0.88232421875, 0.69287109375, 0.82666015625, 0.74072265625, 0.480224609375, 0.159912109375, 0.057525634765625, 0.00457763671875, 0.14404296875, 0.24658203125, 0.0021209716796875, 0.06329345703125, 0.032257080078125, 0.06829833984375, 0.16455078125, 0.0015783309936523438, 0.03936767578125, 1.8251953125, 0.0986328125, 0.281494140625, 0.1795654296875, 0.440185546875, 3.138671875, 0.533203125, 0.0233917236328125, 0.0100555419921875, 0.82861328125, 0.306396484375, 0.00830078125, 0.0328369140625, 0.0016155242919921875, 0.0180206298828125, 0.021270751953125, 0.1209716796875, 0.51904296875, 0.083984375, 0.0843505859375, 0.2418212890625, 0.0885009765625, 1.0302734375, 0.002414703369140625, 0.1932373046875, 0.002780914306640625], "tokens": [719, 1022, 664, 319, 477, 601, 14071, 372, 1626, 2670, 322, 3191, 1541, 32, 664, 569, 334, 1905, 1626, 5658, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 297, 1853, 1157, 301, 397, 4004, 2935, 280, 310, 32, 18789, 473, 397, 415, 308, 2544, 32, 297, 6150, 1394, 1157, 301]}
{"line_number": 265, "line_type": "original", "code": "      add(String.valueOf(x));", "entropy": 1.76953125, "is_bug_line": false, "sus_score": 0.3034, "per_token_entropy": [8.375, 3.533203125, 0.496337890625, 2.787109375, 0.59326171875, 0.052825927734375, 0.007259368896484375, 0.036865234375, 0.046844482421875], "tokens": [647, 1015, 26, 652, 32, 9162, 26, 106, 876]}
{"line_number": 265, "line_type": "generated", "code": "\n  void endStatement() {}\n\n  /**\n   * @return Whether the a line break can be added before the specified BLOCK.\n   */\n  boolean breakBeforeBlockFor(Node n, boolean statementContext) {\n    return statementContext;\n  }\n\n  /**\n  ", "entropy": 0.362060546875, "is_bug_line": false, "sus_score": 0.3034, "per_token_entropy": [1.1015625, 1.126953125, 2.0703125, 1.40625, 0.256103515625, 1.310546875, 0.2344970703125, 1.2802734375, 0.5146484375, 0.0023288726806640625, 1.6015625, 0.214111328125, 0.83251953125, 0.82080078125, 1.041015625, 0.0162353515625, 0.00787353515625, 0.08123779296875, 0.006900787353515625, 0.03314208984375, 0.9599609375, 0.06378173828125, 0.055328369140625, 0.9560546875, 0.06915283203125, 0.0007543563842773438, 0.0233154296875, 0.01242828369140625, 0.034027099609375, 0.011566162109375, 0.0005335807800292969, 0.00862884521484375, 0.048980712890625, 0.0008120536804199219, 0.006908416748046875, 0.0073089599609375, 0.440185546875, 0.006404876708984375, 0.01546478271484375, 0.0021533966064453125, 0.0080108642578125, 0.00276947021484375, 0.015472412109375, 0.13818359375, 0.79638671875, 0.00013124942779541016, 0.055908203125, 0.002285003662109375, 0.0005297660827636719, 0.099609375, 0.7373046875, 0.28369140625], "tokens": [334, 763, 943, 5495, 346, 2149, 719, 1022, 664, 319, 477, 601, 14071, 322, 312, 1628, 1626, 883, 526, 3640, 2670, 322, 3191, 20313, 32, 664, 569, 334, 1905, 1626, 5658, 2227, 1562, 26, 1212, 310, 30, 1905, 7603, 1222, 27, 301, 284, 442, 7603, 1222, 45, 334, 320, 719, 1022, 664]}
