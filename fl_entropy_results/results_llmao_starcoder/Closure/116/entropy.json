{"line_number": 741, "line_type": "original", "code": "        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {", "entropy": 1.5458984375, "is_bug_line": false, "sus_score": 0.39907, "per_token_entropy": [5.65234375, 2.39453125, 0.1541748046875, 4.171875, 0.00283050537109375, 0.00016415119171142578, 3.224609375, 0.318115234375, 0.0225372314453125, 0.008880615234375, 0.00789642333984375, 6.89453125, 1.0927734375, 1.66015625, 0.12744140625, 0.48291015625, 0.0660400390625], "tokens": [351, 415, 308, 1212, 1733, 32, 17302, 9037, 7427, 20126, 26, 85, 1765, 30, 8980, 490, 301]}
{"line_number": 741, "line_type": "generated", "code": "\n    return false;\n  }", "entropy": 0.3359375, "is_bug_line": false, "sus_score": 0.39907, "per_token_entropy": [0.371337890625, 0.62548828125, 0.89794921875, 0.00565338134765625, 0.1143798828125, 0.0013408660888671875], "tokens": [284, 442, 901, 45, 334, 320]}
{"line_number": 775, "line_type": "original", "code": "        if (ref.module != fnModule &&", "entropy": 2.763671875, "is_bug_line": false, "sus_score": 0.34086, "per_token_entropy": [4.19140625, 3.4765625, 0.236083984375, 8.9453125, 1.4951171875, 2.12109375, 0.396728515625, 4.4765625, 0.0909423828125, 2.20703125], "tokens": [351, 415, 308, 612, 32, 1647, 863, 2771, 2459, 962]}
{"line_number": 775, "line_type": "generated", "code": "\n    // is always included.\n    int threshold = callCost - costDeltaDirect;\n    if (threshold > costDeltaBlock) {\n      threshold = costDeltaBlock;\n    }\n\n    int fnSize = getFunctionSize(fnNode);\n    int inlined", "entropy": 0.755859375, "is_bug_line": false, "sus_score": 0.34086, "per_token_entropy": [0.7216796875, 1.5947265625, 1.4755859375, 4.265625, 2.880859375, 0.9853515625, 0.359375, 0.66455078125, 1.169921875, 0.6015625, 1.2392578125, 0.0031948089599609375, 1.3173828125, 1.6025390625, 0.0191650390625, 0.130615234375, 0.9697265625, 0.68359375, 0.64990234375, 0.1351318359375, 0.98193359375, 1.78125, 2.00390625, 0.0225982666015625, 0.06854248046875, 0.09747314453125, 0.00823974609375, 0.051849365234375, 0.05792236328125, 0.006046295166015625, 0.07275390625, 4.363059997558594e-05, 0.002536773681640625, 0.05413818359375, 0.052001953125, 0.00011157989501953125, 0.63427734375, 1.50390625, 1.34375, 1.203125, 0.1368408203125, 1.826171875, 0.65087890625, 0.7265625, 0.056488037109375, 0.050537109375, 0.0001544952392578125, 0.36083984375, 0.5263671875, 0.71923828125, 2.671875, 0.1571044921875], "tokens": [284, 434, 438, 5182, 5964, 32, 284, 629, 10084, 280, 1476, 9375, 429, 7847, 9189, 6997, 45, 284, 415, 308, 10402, 848, 7847, 9189, 2227, 27, 301, 397, 10084, 280, 7847, 9189, 2227, 45, 284, 320, 446, 629, 2771, 1250, 280, 622, 2447, 1250, 26, 3359, 1212, 293, 284, 629, 328, 14145]}
{"line_number": 840, "line_type": "original", "code": "        (blockInlines * costDeltaBlock);", "entropy": 2.5, "is_bug_line": false, "sus_score": 0.33955, "per_token_entropy": [6.28125, 7.82421875, 3.697265625, 3.02734375, 0.2049560546875, 1.15625, 0.258056640625, 0.01399993896484375, 0.263427734375, 2.279296875], "tokens": [351, 308, 1521, 383, 4446, 319, 7847, 9189, 2227, 293]}
{"line_number": 840, "line_type": "generated", "code": "\n    // The part of the function that is inlined.\n    // This is the cost of the function body minus the function\n    // declaration overhead.\n    int costDelta = getCostDelta(block, namesToAlias, mode);\n\n    // The cost of", "entropy": 0.837890625, "is_bug_line": false, "sus_score": 0.33955, "per_token_entropy": [0.30908203125, 1.20703125, 1.1318359375, 1.515625, 0.1572265625, 0.0189056396484375, 0.052764892578125, 0.09417724609375, 0.2255859375, 0.5546875, 0.0440673828125, 1.439453125, 0.1873779296875, 1.2119140625, 2.9375, 0.6630859375, 0.9638671875, 1.662109375, 0.335693359375, 0.71484375, 1.9423828125, 1.375, 1.5263671875, 0.424072265625, 2.748046875, 2.470703125, 0.0005249977111816406, 1.46484375, 1.2841796875, 0.399169921875, 0.259765625, 0.55859375, 0.32763671875, 0.10821533203125, 1.0390625, 2.572265625, 0.65771484375, 1.0576171875, 0.279296875, 0.62060546875, 0.173095703125, 0.458740234375, 6.866455078125e-05, 1.728534698486328e-05, 0.057159423828125, 0.057220458984375, 0.273681640625, 0.69775390625, 1.2958984375, 1.3994140625, 1.7998046875, 0.81103515625], "tokens": [284, 434, 886, 1742, 432, 322, 667, 688, 438, 328, 14145, 32, 284, 434, 1348, 438, 322, 7847, 432, 322, 667, 3361, 25897, 322, 667, 284, 434, 13317, 28359, 32, 284, 629, 7847, 9189, 280, 622, 9375, 9189, 26, 1521, 30, 4467, 705, 7886, 30, 2926, 293, 446, 434, 886, 7847, 432]}
{"line_number": 821, "line_type": "original", "code": "", "entropy": 3.048828125, "is_bug_line": false, "sus_score": 0.33846, "per_token_entropy": [3.048828125], "tokens": [203]}
{"line_number": 821, "line_type": "generated", "code": "\n  /**\n   * Get the cost delta for inlining a function with the given names.\n   * @param namesToAlias\n   */\n  private int inlineCostDelta(Node fnNode,\n                             Map<String, String> namesToAlias,\n                             Inlining", "entropy": 0.501953125, "is_bug_line": false, "sus_score": 0.33846, "per_token_entropy": [0.377685546875, 0.41943359375, 0.0810546875, 0.0006952285766601562, 2.744140625, 0.1878662109375, 1.0771484375, 0.728515625, 1.734375, 0.95458984375, 0.006885528564453125, 1.224609375, 0.194580078125, 2.599609375, 0.53662109375, 0.228759765625, 1.369140625, 1.318359375, 0.0234222412109375, 0.412841796875, 0.60302734375, 0.2142333984375, 0.93359375, 0.2393798828125, 0.015594482421875, 1.7265625, 0.98388671875, 0.00833892822265625, 0.0916748046875, 0.6611328125, 0.00696563720703125, 0.00023686885833740234, 5.710124969482422e-05, 0.0010223388671875, 1.033203125, 0.07989501953125, 0.058929443359375, 0.00023257732391357422, 1.5595703125, 1.072265625, 0.006366729736328125, 0.054840087890625, 5.91278076171875e-05, 0.401611328125, 0.004558563232421875, 0.004520416259765625, 0.0002944469451904297, 0.00177001953125, 0.06927490234375, 0.01708984375, 0.017303466796875, 4.6133995056152344e-05], "tokens": [334, 1022, 664, 319, 1390, 322, 7847, 7715, 436, 328, 22914, 312, 667, 623, 322, 2702, 4467, 32, 664, 319, 477, 753, 4467, 705, 7886, 664, 569, 334, 945, 629, 4447, 9375, 9189, 26, 1212, 2771, 1212, 30, 6035, 3516, 46, 652, 30, 892, 48, 4467, 705, 7886, 30, 6035, 701, 22914]}
{"line_number": 882, "line_type": "original", "code": "        (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);", "entropy": 2.560546875, "is_bug_line": false, "sus_score": 0.33196, "per_token_entropy": [8.25, 5.41796875, 5.984375, 1.05859375, 0.8427734375, 9.3203125, 0.1654052734375, 0.0278472900390625, 0.1300048828125, 6.828125, 0.20751953125, 0.927734375, 0.0006556510925292969, 3.96875, 0.038818359375, 0.8955078125, 0.00189971923828125, 2.029296875], "tokens": [351, 308, 753, 1534, 319, 29662, 9375, 38469, 32, 4128, 2331, 8149, 81, 26626, 81, 1197, 635, 293]}
{"line_number": 882, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.33196, "per_token_entropy": [], "tokens": []}
