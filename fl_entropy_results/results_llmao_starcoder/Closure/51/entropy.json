{"line_number": 241, "line_type": "original", "code": "    if ((long) x == x) {", "entropy": 3.46484375, "is_bug_line": true, "sus_score": 0.53272, "per_token_entropy": [6.03515625, 7.03125, 4.98828125, 9.0703125, 0.1595458984375, 1.7822265625, 1.9228515625, 3.265625, 0.314697265625, 0.0745849609375], "tokens": [264, 415, 1833, 3222, 27, 816, 610, 816, 27, 301]}
{"line_number": 241, "line_type": "generated", "code": "\n  void finishFile() {\n  }\n\n  /**\n   * @return Whether we are at the beginning of a line.\n   */\n  boolean atLineStart() {\n    return cursor == 0;\n  }\n\n  /**\n   * @return Whether we are at", "entropy": 0.44482421875, "is_bug_line": true, "sus_score": 0.53272, "per_token_entropy": [0.1915283203125, 0.1456298828125, 0.6865234375, 0.083740234375, 0.0198211669921875, 0.1865234375, 1.0224609375, 0.008270263671875, 0.55859375, 0.59619140625, 0.51611328125, 0.0014858245849609375, 1.6787109375, 0.293701171875, 0.83056640625, 1.7216796875, 0.8359375, 1.6103515625, 0.293212890625, 0.97314453125, 0.0194091796875, 0.1673583984375, 0.8388671875, 0.50927734375, 0.1353759765625, 0.026397705078125, 0.01047515869140625, 0.1475830078125, 0.66162109375, 0.418212890625, 0.0225677490234375, 0.00412750244140625, 0.0016021728515625, 0.03131103515625, 0.1806640625, 3.921875, 1.2783203125, 0.32373046875, 0.008941650390625, 0.17529296875, 0.004913330078125, 0.00028228759765625, 0.08990478515625, 0.2191162109375, 0.09185791015625, 0.00011491775512695312, 0.373291015625, 0.045135498046875, 0.2548828125, 0.63330078125, 0.080322265625, 0.1942138671875], "tokens": [334, 763, 11361, 974, 346, 301, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 996, 884, 821, 322, 13672, 432, 312, 1628, 32, 664, 569, 334, 1905, 821, 1811, 2130, 346, 301, 284, 442, 6213, 610, 225, 34, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 996, 884, 821]}
{"line_number": 250, "line_type": "original", "code": "      }", "entropy": 5.4453125, "is_bug_line": false, "sus_score": 0.44305, "per_token_entropy": [7.76953125, 3.123046875], "tokens": [647, 320]}
{"line_number": 250, "line_type": "generated", "code": "\n  /**\n   * @return Whether the a line break can be added after the specified node.\n   */\n  boolean breakAfter(Node n) {\n    if (n.isBlock()) {\n      return breakAfterBlockFor(n, false);\n    }", "entropy": 0.3212890625, "is_bug_line": false, "sus_score": 0.44305, "per_token_entropy": [0.9345703125, 1.234375, 0.491943359375, 0.003139495849609375, 1.787109375, 0.33056640625, 0.72216796875, 0.9140625, 1.009765625, 0.016204833984375, 0.00727081298828125, 0.081298828125, 0.00748443603515625, 0.0256805419921875, 0.4580078125, 0.1632080078125, 0.079833984375, 1.0126953125, 0.1309814453125, 0.005413055419921875, 0.06396484375, 0.0063934326171875, 0.08642578125, 0.048614501953125, 0.035980224609375, 0.05657958984375, 0.061676025390625, 0.0292816162109375, 0.424072265625, 0.0022430419921875, 0.029754638671875, 1.8681640625, 0.077392578125, 0.237060546875, 0.2303466796875, 0.474365234375, 1.65625, 0.236572265625, 0.033935546875, 0.0096435546875, 0.34423828125, 0.0675048828125, 0.00047087669372558594, 0.0006127357482910156, 0.0186920166015625, 0.06097412109375, 0.009552001953125, 0.014190673828125, 1.0458984375, 0.0216064453125, 0.028228759765625, 0.00014913082122802734], "tokens": [334, 1022, 664, 319, 477, 601, 14071, 322, 312, 1628, 1626, 883, 526, 3640, 2685, 322, 3191, 1541, 32, 664, 569, 334, 1905, 1626, 5125, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 297, 2227, 1157, 301, 397, 442, 1626, 5125, 2227, 1562, 26, 96, 30, 901, 293, 284, 320]}
{"line_number": 169, "line_type": "original", "code": "    if (statementContext) {", "entropy": 2.396484375, "is_bug_line": false, "sus_score": 0.29558, "per_token_entropy": [4.19140625, 4.1015625, 0.2490234375, 4.76953125, 3.263671875, 0.08245849609375, 0.1259765625], "tokens": [264, 415, 308, 9849, 1222, 27, 301]}
{"line_number": 169, "line_type": "generated", "code": "\n      // as this is used for XML comments.\n    } else if (prev == '.' && first == '.') {\n      // Make sure that we don't emit..", "entropy": 0.7998046875, "is_bug_line": false, "sus_score": 0.29558, "per_token_entropy": [0.87255859375, 2.005859375, 1.8642578125, 1.7119140625, 0.564453125, 3.169921875, 1.5244140625, 2.125, 1.7255859375, 0.96630859375, 1.3115234375, 0.00630950927734375, 0.57861328125, 0.2330322265625, 0.2685546875, 1.291015625, 0.060821533203125, 1.5166015625, 0.05926513671875, 0.60302734375, 0.039703369140625, 0.90185546875, 0.0016145706176757812, 0.026824951171875, 0.2388916015625, 1.6796875, 0.0023975372314453125, 0.362060546875, 0.058349609375, 0.01416015625, 2.384185791015625e-06, 0.1055908203125, 0.5009765625], "tokens": [397, 434, 619, 458, 438, 1654, 436, 7402, 8446, 32, 284, 320, 813, 415, 308, 5586, 610, 18491, 962, 1932, 610, 41723, 301, 397, 434, 6400, 3654, 688, 996, 2800, 1330, 9533, 4377]}
{"line_number": 285, "line_type": "original", "code": "   */", "entropy": 6.49609375, "is_bug_line": false, "sus_score": 0.27634, "per_token_entropy": [8.421875, 4.5703125], "tokens": [261, 569]}
{"line_number": 285, "line_type": "generated", "code": "\n\n  /**\n   * @return Whether the a line break can be added after the specified\n   *     expression.\n   */\n  boolean breakAfter(Node n) {\n    return false;\n  }\n\n  /**\n   * @return Whether the a line break can be", "entropy": 0.354248046875, "is_bug_line": false, "sus_score": 0.27634, "per_token_entropy": [1.1064453125, 0.448974609375, 0.5615234375, 0.002452850341796875, 1.5859375, 0.2412109375, 0.5615234375, 0.81494140625, 0.951171875, 0.01305389404296875, 0.00722503662109375, 0.07501220703125, 0.005458831787109375, 0.0205535888671875, 0.626953125, 0.1575927734375, 0.066162109375, 1.5439453125, 0.01477813720703125, 2.2265625, 1.4267578125, 0.4130859375, 0.42529296875, 0.1002197265625, 0.07232666015625, 0.068603515625, 0.05841064453125, 0.031890869140625, 0.50341796875, 0.210693359375, 0.052215576171875, 0.373291015625, 0.0029010772705078125, 0.036712646484375, 1.1484375, 0.84326171875, 0.0004153251647949219, 0.01259613037109375, 0.0004420280456542969, 0.197021484375, 0.241455078125, 0.141845703125, 0.002475738525390625, 0.444580078125, 0.07427978515625, 0.145751953125, 0.1771240234375, 0.1220703125, 0.003986358642578125, 0.0007123947143554688, 0.049224853515625, 0.003597259521484375], "tokens": [719, 1022, 664, 319, 477, 601, 14071, 322, 312, 1628, 1626, 883, 526, 3640, 2685, 322, 3191, 664, 319, 262, 6101, 32, 664, 569, 334, 1905, 1626, 5125, 26, 1212, 310, 27, 301, 284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 312, 1628, 1626, 883, 526]}
{"line_number": 226, "line_type": "original", "code": "    // operator on the other hand is not. We only line break after a bin op", "entropy": 4.0, "is_bug_line": false, "sus_score": 0.25898, "per_token_entropy": [3.966796875, 3.732421875, 11.671875, 5.36328125, 1.3779296875, 6.98046875, 2.91015625, 1.8193359375, 2.037109375, 2.115234375, 5.01171875, 4.22265625, 7.0625, 0.6552734375, 2.234375, 3.654296875, 3.8515625, 3.326171875], "tokens": [264, 434, 4134, 544, 322, 1604, 4091, 438, 646, 32, 2688, 1755, 1628, 1626, 2685, 312, 7395, 3089]}
{"line_number": 226, "line_type": "generated", "code": "\n   *\n   * @return true if the body of a for loop or the then clause of an if\n   *     statement has a single statement, should it be wrapped in a block?\n   */\n  boolean shouldWrapFor(Node n) {\n    return", "entropy": 0.380615234375, "is_bug_line": false, "sus_score": 0.25898, "per_token_entropy": [0.2001953125, 0.51171875, 0.5498046875, 0.038238525390625, 0.958984375, 0.4560546875, 0.9423828125, 0.359375, 1.1630859375, 0.599609375, 0.2315673828125, 0.1898193359375, 0.316162109375, 0.1236572265625, 0.11163330078125, 0.267578125, 0.01215362548828125, 0.016387939453125, 0.017608642578125, 0.06396484375, 0.513671875, 0.07208251953125, 0.00738525390625, 0.8837890625, 0.035675048828125, 1.41796875, 0.06756591796875, 0.0038623809814453125, 0.0227813720703125, 0.685546875, 0.68017578125, 0.287109375, 0.0018281936645507812, 0.00638580322265625, 0.01154327392578125, 0.0123138427734375, 0.1763916015625, 0.226318359375, 0.0924072265625, 0.12939453125, 0.056396484375, 0.2479248046875, 0.68310546875, 1.1748046875, 1.1318359375, 2.033203125, 0.5458984375, 0.251220703125, 0.035736083984375, 0.0015201568603515625, 0.11724853515625, 1.0615234375], "tokens": [664, 319, 664, 319, 477, 601, 861, 415, 322, 3361, 432, 312, 436, 5258, 556, 322, 1615, 15300, 432, 600, 415, 664, 319, 262, 7603, 1401, 312, 3982, 7603, 30, 1395, 561, 526, 16283, 328, 312, 2163, 49, 664, 569, 334, 1905, 1395, 10001, 1562, 26, 1212, 310, 27, 301, 284, 442]}
