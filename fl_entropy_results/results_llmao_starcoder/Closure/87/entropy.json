{"line_number": 1024, "line_type": "original", "code": "  private static boolean areValidRegexpFlags(String flags) {", "entropy": 1.609375, "is_bug_line": false, "sus_score": 0.4963, "per_token_entropy": [4.23828125, 9.6796875, 0.08453369140625, 1.916015625, 4.48046875, 0.084716796875, 0.00856781005859375, 0.0005850791931152344, 0.01331329345703125, 0.0248870849609375, 0.315185546875, 0.013397216796875, 0.054534912109375], "tokens": [225, 945, 907, 1905, 884, 2303, 29583, 4629, 26, 652, 5736, 27, 301]}
{"line_number": 1024, "line_type": "generated", "code": "\n    return esc.length()!= s.length();\n  }\n\n  /**\n   * true if the javascript string would contain a unicode escape when written\n   * out as the body of a regular expression literal.\n   */\n  static boolean containsUnicodeEscape(Node n", "entropy": 0.2188720703125, "is_bug_line": false, "sus_score": 0.4963, "per_token_entropy": [0.4228515625, 0.50341796875, 0.51953125, 0.10302734375, 0.666015625, 0.002483367919921875, 0.09564208984375, 0.00347900390625, 0.00017380714416503906, 0.00027680397033691406, 0.0247802734375, 0.0244903564453125, 0.0002467632293701172, 0.69775390625, 0.441650390625, 0.05523681640625, 0.0007915496826171875, 3.150390625, 0.05413818359375, 0.3017578125, 0.5107421875, 0.1402587890625, 0.158447265625, 0.28662109375, 0.216552734375, 0.1617431640625, 0.019622802734375, 0.0938720703125, 0.0207672119140625, 0.002414703369140625, 0.00010395050048828125, 0.0166473388671875, 0.030059814453125, 0.2479248046875, 0.1885986328125, 0.0008301734924316406, 0.0198516845703125, 0.1380615234375, 0.0009465217590332031, 0.016387939453125, 0.2457275390625, 0.0271148681640625, 0.1097412109375, 0.161376953125, 0.297607421875, 0.328857421875, 0.037689208984375, 0.17724609375, 0.0286865234375, 0.1766357421875, 0.40380859375, 0.04913330078125], "tokens": [284, 442, 15050, 32, 1322, 346, 863, 309, 32, 1322, 473, 334, 320, 719, 1022, 664, 319, 861, 415, 322, 18778, 802, 2268, 4799, 312, 15390, 15820, 1412, 6638, 664, 319, 963, 619, 322, 3361, 432, 312, 10605, 6101, 10652, 32, 664, 569, 334, 907, 1905, 4304, 14923, 19033, 26, 1212, 310]}
{"line_number": 1018, "line_type": "original", "code": "   * are the given flags valid regular expression flags?", "entropy": 2.66796875, "is_bug_line": false, "sus_score": 0.28465, "per_token_entropy": [6.57421875, 3.33984375, 7.50390625, 2.287109375, 0.5390625, 1.9951171875, 2.55078125, 4.15234375, 0.04010009765625, 0.2384033203125, 0.11724853515625], "tokens": [261, 319, 884, 322, 2702, 5736, 2080, 10605, 6101, 5736, 49]}
{"line_number": 1018, "line_type": "generated", "code": "\n\n  /**\n   * Determines whether a string contains unicode escape sequences.\n   *\n   * @param s the string to check\n   * @return true if the string contains unicode escapes\n   */\n  private static boolean containsUnicodeEscape(String s) {\n    //", "entropy": 0.49072265625, "is_bug_line": false, "sus_score": 0.28465, "per_token_entropy": [1.728515625, 0.39794921875, 0.17138671875, 0.0005078315734863281, 2.92578125, 0.47607421875, 1.17578125, 0.658203125, 0.47265625, 1.7744140625, 0.93701171875, 0.207275390625, 0.3701171875, 0.1043701171875, 0.693359375, 1.103515625, 0.009124755859375, 1.4091796875, 0.35546875, 0.372802734375, 1.6513671875, 0.10693359375, 0.247802734375, 0.81494140625, 0.373779296875, 0.1649169921875, 0.0216217041015625, 0.008331298828125, 0.7265625, 0.394287109375, 0.4228515625, 0.05804443359375, 0.0958251953125, 0.57421875, 1.26953125, 0.0145721435546875, 0.8271484375, 0.02484130859375, 0.00585174560546875, 0.10772705078125, 0.10418701171875, 0.00943756103515625, 0.0005922317504882812, 0.00017702579498291016, 5.0067901611328125e-06, 0.0017223358154296875, 0.004169464111328125, 0.00153350830078125, 0.0008883476257324219, 0.0006570816040039062, 0.01483917236328125, 2.115234375], "tokens": [719, 1022, 664, 319, 34450, 4946, 312, 802, 4304, 15390, 15820, 17211, 32, 664, 319, 664, 319, 477, 753, 309, 322, 802, 372, 1505, 664, 319, 477, 601, 861, 415, 322, 802, 4304, 15390, 40777, 307, 664, 569, 334, 945, 907, 1905, 4304, 14923, 19033, 26, 652, 309, 27, 301, 284, 434]}
{"line_number": 918, "line_type": "original", "code": "", "entropy": 4.2578125, "is_bug_line": false, "sus_score": 0.27866, "per_token_entropy": [4.2578125], "tokens": [203]}
{"line_number": 918, "line_type": "generated", "code": "\n      return n;\n    }\n\n    if (null!= flags && 0 == flags.getString().length()) {\n      flags = null;\n    }\n\n    if (null == flags) {\n      flags = new Node(Token.STRING, \"\");\n    }\n\n   ", "entropy": 0.356689453125, "is_bug_line": false, "sus_score": 0.27866, "per_token_entropy": [0.607421875, 0.64404296875, 0.029266357421875, 0.0008983612060546875, 0.0762939453125, 0.000606536865234375, 0.1865234375, 1.70703125, 0.2066650390625, 1.4091796875, 0.392578125, 0.2529296875, 1.06640625, 2.595703125, 0.0989990234375, 0.68994140625, 0.268310546875, 0.0002696514129638672, 0.2437744140625, 0.01023101806640625, 0.06488037109375, 0.0110321044921875, 0.00421142578125, 0.220947265625, 0.53515625, 0.045013427734375, 0.082763671875, 0.0008726119995117188, 0.08660888671875, 5.5789947509765625e-05, 0.11102294921875, 1.6416015625, 0.1737060546875, 0.5283203125, 0.6552734375, 0.3837890625, 0.26611328125, 0.0039215087890625, 0.130126953125, 1.37890625, 0.56396484375, 0.448486328125, 0.15625, 0.0012845993041992188, 0.0168304443359375, 1.2040138244628906e-05, 0.0615234375, 0.052459716796875, 0.255126953125, 0.080810546875, 0.0001308917999267578, 0.09185791015625], "tokens": [397, 442, 310, 45, 284, 320, 446, 415, 308, 1693, 863, 5736, 962, 225, 34, 610, 5736, 32, 7069, 922, 1322, 1157, 301, 397, 5736, 280, 744, 45, 284, 320, 446, 415, 308, 1693, 610, 5736, 27, 301, 397, 5736, 280, 537, 4004, 26, 1763, 32, 5203, 30, 10779, 284, 320, 446]}
{"line_number": 963, "line_type": "original", "code": "    if (!isASTNormalized()) {", "entropy": 3.07421875, "is_bug_line": false, "sus_score": 0.27428, "per_token_entropy": [7.625, 2.517578125, 2.109375, 2.427734375, 9.4140625, 0.0015201568603515625, 0.45849609375, 0.03857421875], "tokens": [264, 415, 1429, 297, 4375, 29814, 1157, 301]}
{"line_number": 963, "line_type": "generated", "code": "\n  }\n\n  private static Node makeForwardSlashBracketSafe(Node pattern) {\n    // Make sure that / is escaped, so that it will fit safely in /brackets/.\n    // pattern is a string value with \\\\ and similar already escaped\n    String pattern", "entropy": 0.228271484375, "is_bug_line": false, "sus_score": 0.27428, "per_token_entropy": [0.31591796875, 0.09832763671875, 0.215576171875, 0.92333984375, 1.3642578125, 1.3349609375, 0.05029296875, 0.006504058837890625, 2.9802322387695312e-06, 0.0002205371856689453, 1.0728836059570312e-06, 0.0010652542114257812, 0.005336761474609375, 0.3798828125, 0.0227508544921875, 0.0011835098266601562, 0.0245208740234375, 1.32421875, 2.0703125, 0.0305938720703125, 0.08758544921875, 0.1287841796875, 0.033721923828125, 0.016571044921875, 0.06982421875, 0.0073699951171875, 0.003696441650390625, 0.004375457763671875, 0.00620269775390625, 0.0028839111328125, 0.0017766952514648438, 0.009735107421875, 0.0294647216796875, 0.005168914794921875, 0.0001093149185180664, 0.025726318359375, 0.0269927978515625, 0.1685791015625, 0.08599853515625, 0.01291656494140625, 0.0151519775390625, 0.0273895263671875, 0.01434326171875, 0.04681396484375, 0.0132293701171875, 0.0214691162109375, 0.0007615089416503906, 0.0007238388061523438, 0.00077056884765625, 0.12420654296875, 0.8701171875, 1.8388671875], "tokens": [334, 320, 719, 945, 907, 4004, 1930, 11342, 28444, 24086, 11691, 26, 1212, 5257, 27, 301, 284, 434, 6400, 3654, 688, 517, 438, 31253, 30, 1259, 688, 561, 1098, 8157, 31484, 328, 517, 839, 20379, 4724, 284, 434, 5257, 438, 312, 802, 786, 623, 6080, 461, 6693, 3425, 31253, 284, 892, 5257]}
