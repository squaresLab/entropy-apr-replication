{"line_number": 260, "line_type": "original", "code": "      compiler.reportCodeChange();", "entropy": 1.9375, "is_bug_line": false, "sus_score": 0.55039, "per_token_entropy": [8.7421875, 4.76953125, 0.0011701583862304688, 0.026123046875, 0.021270751953125, 0.00017142295837402344, 0.0031452178955078125], "tokens": [647, 8980, 32, 3734, 1227, 1791, 473]}
{"line_number": 260, "line_type": "generated", "code": "\n\n  /**\n   * Returns whether a variable is read before a kill in a subtree.\n   *\n   * @param n The root of the subtree.\n   * @param variable The variable to look for.\n   */\n  private VariableLiveness isVariableReadBefore", "entropy": 0.5087890625, "is_bug_line": false, "sus_score": 0.55039, "per_token_entropy": [1.134765625, 0.375244140625, 0.038421630859375, 0.0003943443298339844, 1.9677734375, 1.8017578125, 1.498046875, 0.5224609375, 0.40673828125, 0.95703125, 0.53515625, 1.9228515625, 0.6455078125, 1.865234375, 0.9462890625, 1.3466796875, 0.96875, 0.1488037109375, 0.353271484375, 0.58984375, 0.00424957275390625, 0.4951171875, 0.11236572265625, 0.71484375, 0.262939453125, 1.9375, 0.1744384765625, 0.060272216796875, 0.10504150390625, 0.615234375, 0.00963592529296875, 0.059234619140625, 0.00559234619140625, 0.049163818359375, 0.2493896484375, 0.05047607421875, 0.53564453125, 1.05078125, 0.845703125, 0.1646728515625, 0.058563232421875, 0.003459930419921875, 0.701171875, 0.01551055908203125, 0.09393310546875, 0.07244873046875, 0.0002675056457519531, 2.753734588623047e-05, 0.001983642578125, 0.0002772808074951172, 0.0004787445068359375, 0.00020515918731689453], "tokens": [719, 1022, 664, 319, 3759, 4946, 312, 2677, 438, 1491, 2670, 312, 17487, 328, 312, 37255, 32, 664, 319, 664, 319, 477, 753, 310, 886, 3051, 432, 322, 37255, 32, 664, 319, 477, 753, 2677, 886, 2677, 372, 2779, 436, 32, 664, 569, 334, 945, 9870, 62, 28597, 438, 3818, 2230, 5658]}
{"line_number": 248, "line_type": "original", "code": "            NodeUtil.getConditionExpression(parent) != n) {", "entropy": 2.224609375, "is_bug_line": false, "sus_score": 0.37633, "per_token_entropy": [2.34765625, 4.81640625, 2.408203125, 0.0034885406494140625, 2.60546875, 4.06640625, 0.34765625, 0.37744140625, 5.234375, 1.876953125, 1.7421875, 3.3125, 1.859375, 0.1497802734375], "tokens": [1468, 4004, 1733, 32, 371, 5356, 3487, 26, 2544, 27, 863, 310, 27, 301]}
{"line_number": 248, "line_type": "generated", "code": "\n          if (state == null) {\n            continue;\n          }\n\n          if (state.getOut().isLive(variable)) {\n            return true;\n          }\n        }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "entropy": 0.203857421875, "is_bug_line": false, "sus_score": 0.37633, "per_token_entropy": [1.1962890625, 0.390869140625, 0.060272216796875, 0.04034423828125, 1.154296875, 0.312255859375, 0.259033203125, 0.0306396484375, 0.0726318359375, 1.0546875, 0.002979278564453125, 0.1446533203125, 0.0003407001495361328, 0.7900390625, 0.478759765625, 0.20703125, 0.0947265625, 0.0249176025390625, 0.880859375, 0.0391845703125, 0.0235748291015625, 0.045074462890625, 0.00902557373046875, 0.01056671142578125, 0.13720703125, 0.316650390625, 0.0015993118286132812, 0.0357666015625, 0.55517578125, 0.08660888671875, 0.00048732757568359375, 0.135498046875, 0.0002608299255371094, 0.771484375, 0.0018863677978515625, 0.285400390625, 0.0007796287536621094, 0.265625, 0.147216796875, 0.0012216567993164062, 0.0118408203125, 0.0001552104949951172, 0.002704620361328125, 0.0018138885498046875, 0.12115478515625, 4.088878631591797e-05, 0.333740234375, 0.039825439453125, 0.0098114013671875, 0.0002720355987548828, 0.0127716064453125, 0.0014247894287109375], "tokens": [616, 415, 308, 1293, 610, 744, 27, 301, 324, 4036, 45, 616, 320, 5678, 415, 308, 1293, 32, 371, 1512, 922, 297, 11082, 26, 4502, 490, 301, 324, 442, 861, 45, 616, 320, 291, 320, 397, 320, 397, 310, 280, 310, 32, 18789, 473, 284, 320, 284, 442, 901, 45, 334, 320]}
{"line_number": 283, "line_type": "original", "code": "   * y = 1, x = 1, print(x) // true, there is a read right of n.", "entropy": 1.0, "is_bug_line": false, "sus_score": 0.29506, "per_token_entropy": [8.390625, 6.06640625, 3.529296875, 0.026580810546875, 0.086181640625, 0.038970947265625, 0.07196044921875, 0.08453369140625, 0.008697509765625, 0.0330810546875, 0.03497314453125, 0.2734375, 2.7421875, 0.0216522216796875, 0.046356201171875, 0.465087890625, 0.11370849609375, 1.2294921875, 0.3017578125, 0.452392578125, 0.0389404296875, 0.10577392578125, 0.12030029296875, 1.248046875, 0.54345703125, 0.254150390625, 0.671875], "tokens": [261, 319, 533, 280, 225, 35, 30, 816, 280, 225, 35, 30, 1459, 26, 106, 27, 434, 861, 30, 2017, 438, 312, 1491, 2091, 432, 310, 32]}
{"line_number": 283, "line_type": "generated", "code": "\n      }\n    }\n    VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n    for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNew", "entropy": 0.1395263671875, "is_bug_line": false, "sus_score": 0.29506, "per_token_entropy": [0.43212890625, 0.007328033447265625, 0.054595947265625, 0.0020694732666015625, 1.6318359375, 1.771484375, 0.004261016845703125, 3.5762786865234375e-07, 1.26953125, 0.0328369140625, 0.05401611328125, 0.0002586841583251953, 2.5033950805664062e-06, 6.198883056640625e-05, 0.01348876953125, 5.0187110900878906e-05, 8.344650268554688e-06, 2.1457672119140625e-06, 0.0016651153564453125, 0.150146484375, 0.1876220703125, 0.07330322265625, 0.0012655258178710938, 0.1619873046875, 0.05242919921875, 0.00391387939453125, 0.0004069805145263672, 0.005828857421875, 0.00022137165069580078, 0.003986358642578125, 0.055023193359375, 0.00218963623046875, 0.000804901123046875, 0.432861328125, 0.0631103515625, 0.0037250518798828125, 0.0010614395141601562, 4.5180320739746094e-05, 0.00234222412109375, 0.00354766845703125, 0.0008220672607421875, 0.0265045166015625, 0.64794921875, 0.08355712890625, 0.0128631591796875, 3.933906555175781e-06, 3.933906555175781e-06, 1.3589859008789062e-05, 0.0003116130828857422, 0.0010051727294921875, 7.152557373046875e-07, 5.900859832763672e-05], "tokens": [397, 320, 284, 320, 284, 9870, 62, 28597, 1603, 280, 9870, 62, 28597, 32, 44380, 81, 1798, 2478, 45, 284, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301, 397, 415, 1429, 2422, 4055, 3406, 32, 297, 6545, 299, 1812]}
{"line_number": 333, "line_type": "original", "code": "      }", "entropy": 5.1328125, "is_bug_line": false, "sus_score": 0.25682, "per_token_entropy": [8.6875, 1.58203125], "tokens": [647, 320]}
{"line_number": 333, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.25682, "per_token_entropy": [], "tokens": []}
{"line_number": 335, "line_type": "original", "code": "", "entropy": 0.841796875, "is_bug_line": false, "sus_score": 0.23449, "per_token_entropy": [0.841796875], "tokens": [203]}
{"line_number": 335, "line_type": "generated", "code": "\n  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a write to that\n   * variable before a read to that variable that is on", "entropy": 0.21142578125, "is_bug_line": false, "sus_score": 0.23449, "per_token_entropy": [1.8603515625, 0.603515625, 0.050994873046875, 0.0007414817810058594, 1.5087890625, 0.4033203125, 1.1044921875, 0.5068359375, 0.24267578125, 0.0139007568359375, 0.060760498046875, 0.0070648193359375, 0.00916290283203125, 0.08392333984375, 0.031585693359375, 0.0217437744140625, 0.0017251968383789062, 0.0008816719055175781, 0.01497650146484375, 0.0003879070281982422, 0.0016193389892578125, 0.046417236328125, 0.0009016990661621094, 0.058929443359375, 0.0032711029052734375, 0.00011098384857177734, 0.0030117034912109375, 0.00055694580078125, 0.024810791015625, 0.08465576171875, 0.017578125, 0.1883544921875, 0.0928955078125, 0.00920867919921875, 0.2242431640625, 0.08514404296875, 0.1181640625, 0.8798828125, 0.36669921875, 0.0732421875, 0.01041412353515625, 6.461143493652344e-05, 0.0012760162353515625, 0.88916015625, 0.191162109375, 0.1434326171875, 0.75, 0.019287109375, 0.0081787109375, 0.102294921875, 0.007251739501953125, 0.0604248046875], "tokens": [334, 1022, 664, 319, 15273, 312, 2677, 30, 1541, 310, 328, 322, 4345, 461, 312, 1361, 31, 3242, 5537, 14192, 810, 9810, 4058, 619, 664, 319, 322, 3051, 30, 458, 667, 3217, 861, 415, 2017, 5375, 312, 2866, 372, 688, 664, 319, 2677, 2670, 312, 1491, 372, 688, 2677, 688, 438, 544]}
