{"line_number": 987, "line_type": "original", "code": "  static Node getCatchHandlerForBlock(Node block) {", "entropy": 1.5556640625, "is_bug_line": false, "sus_score": 0.50306, "per_token_entropy": [4.89453125, 6.390625, 5.2734375, 0.45068359375, 2.1015625, 0.05364990234375, 0.07232666015625, 0.08026123046875, 0.01483917236328125, 0.03350830078125, 0.8203125, 0.004291534423828125, 0.0301361083984375], "tokens": [225, 907, 4004, 622, 20377, 1972, 1562, 2227, 26, 1212, 2163, 27, 301]}
{"line_number": 987, "line_type": "generated", "code": "\n      } else {\n        return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return", "entropy": 0.0209197998046875, "is_bug_line": false, "sus_score": 0.50306, "per_token_entropy": [0.49658203125, 0.08544921875, 0.2249755859375, 0.00952911376953125, 0.03302001953125, 0.050018310546875, 0.040985107421875, 0.0029964447021484375, 0.00016951560974121094, 0.0015430450439453125, 0.00371551513671875, 2.9325485229492188e-05, 3.552436828613281e-05, 0.0005917549133300781, 0.00012958049774169922, 0.004619598388671875, 0.00030612945556640625, 0.0003151893615722656, 0.012939453125, 0.0017337799072265625, 0.00013506412506103516, 0.003009796142578125, 0.0014944076538085938, 0.0001379251480102539, 2.0742416381835938e-05, 0.00022542476654052734, 0.044342041015625, 0.0012598037719726562, 4.291534423828125e-06, 2.753734588623047e-05, 7.593631744384766e-05, 6.854534149169922e-05, 3.3855438232421875e-05, 0.0002193450927734375, 1.3589859008789062e-05, 0.0008821487426757812, 0.0007891654968261719, 1.4066696166992188e-05, 0.0032958984375, 8.499622344970703e-05, 1.2874603271484375e-05, 2.765655517578125e-05, 4.267692565917969e-05, 0.00013768672943115234, 0.0009398460388183594, 2.872943878173828e-05, 0.00013494491577148438, 8.106231689453125e-06, 5.042552947998047e-05, 0.00022876262664794922, 0.01274871826171875, 0.048126220703125], "tokens": [397, 320, 813, 301, 291, 442, 537, 34868, 46, 2820, 3406, 1212, 46, 1212, 30, 23745, 35660, 301, 616, 477, 1788, 616, 562, 629, 8868, 26, 1090, 6349, 3406, 1212, 46, 1212, 30, 23745, 48, 310, 35, 30, 6349, 3406, 1212, 46, 1212, 30, 23745, 48, 310, 36, 27, 301, 324, 442]}
{"line_number": 767, "line_type": "original", "code": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);", "entropy": 2.9140625, "is_bug_line": true, "sus_score": 0.50037, "per_token_entropy": [10.5, 6.00390625, 0.1590576171875, 0.28857421875, 4.01171875, 0.157958984375, 0.03948974609375, 0.08355712890625, 0.0263824462890625, 0.01073455810546875, 12.484375, 0.298095703125, 1.064453125, 0.5234375, 0.314453125, 15.890625, 0.185546875, 0.4072265625], "tokens": [2850, 281, 1919, 32, 1297, 6530, 26, 1070, 1212, 30, 23745, 32, 1413, 20954, 30, 8295, 1212, 293]}
{"line_number": 767, "line_type": "generated", "code": "\n   */\n  static void connectTo(Node fromNode, Node toNode) {\n    Preconditions.checkArgument(fromNode.isNormalBlock() ||\n        fromNode.isParamList() ||\n        fromNode.isScript() ||\n        fromNode.", "entropy": 0.433349609375, "is_bug_line": true, "sus_score": 0.50037, "per_token_entropy": [1.1259765625, 0.1885986328125, 0.0107421875, 0.492919921875, 0.037200927734375, 0.365966796875, 2.20703125, 0.4794921875, 0.12109375, 0.01346588134765625, 0.006786346435546875, 0.000576019287109375, 0.00931549072265625, 0.0013828277587890625, 0.0001741647720336914, 0.52880859375, 0.0095672607421875, 0.1883544921875, 1.16015625, 0.0006256103515625, 0.03680419921875, 0.85546875, 0.05535888671875, 0.6689453125, 0.0007181167602539062, 0.99072265625, 1.6044921875, 0.93603515625, 0.4541015625, 0.70654296875, 0.237548828125, 0.8173828125, 0.20068359375, 3.695487976074219e-05, 0.004840850830078125, 0.2230224609375, 3.314453125, 4.553794860839844e-05, 0.45849609375, 0.01190185546875, 0.599609375, 0.15771484375, 1.4781951904296875e-05, 0.0017061233520507812, 0.309814453125, 2.314453125, 0.44970703125, 0.00553131103515625, 0.028656005859375, 0.139892578125, 3.2782554626464844e-05, 0.002025604248046875], "tokens": [664, 569, 334, 907, 763, 5008, 705, 26, 1212, 645, 1212, 30, 4004, 372, 1212, 27, 301, 284, 40596, 32, 1553, 3484, 26, 1070, 1212, 32, 297, 5947, 2227, 346, 1276, 291, 645, 1212, 32, 297, 3180, 720, 346, 1276, 291, 645, 1212, 32, 297, 3206, 346, 1276, 291, 645, 1212, 32]}
{"line_number": 296, "line_type": "original", "code": "    switch (n.getType()) {", "entropy": 1.3095703125, "is_bug_line": false, "sus_score": 0.48428, "per_token_entropy": [4.6171875, 5.69140625, 0.06634521484375, 0.046600341796875, 0.0009107589721679688, 0.004825592041015625, 0.0005049705505371094, 0.0491943359375], "tokens": [264, 3578, 308, 96, 32, 10272, 1157, 301]}
{"line_number": 296, "line_type": "generated", "code": "\n      case Token.VAR:\n        handleVar(n);\n        return;\n      case Token.ASSIGN:\n        handleAssign(n);\n        return;\n      case Token.HOOK:\n        handleHook(n);\n        return;\n      case Token.AND:\n     ", "entropy": 0.25390625, "is_bug_line": false, "sus_score": 0.48428, "per_token_entropy": [1.98828125, 1.4150390625, 0.002475738525390625, 0.0008955001831054688, 0.86572265625, 0.00090789794921875, 0.1607666015625, 0.1004638671875, 0.10858154296875, 0.08843994140625, 0.017181396484375, 0.046173095703125, 0.03729248046875, 0.0137786865234375, 0.0009455680847167969, 0.6484375, 0.35595703125, 0.0014743804931640625, 1.8715858459472656e-05, 1.978515625, 0.006061553955078125, 0.345947265625, 0.020233154296875, 0.020233154296875, 0.0127410888671875, 0.00347137451171875, 0.0450439453125, 0.01113128662109375, 0.005268096923828125, 0.000518798828125, 0.135009765625, 0.053009033203125, 0.0084381103515625, 0.00042629241943359375, 1.9609375, 0.0004527568817138672, 0.01137542724609375, 0.008758544921875, 0.0745849609375, 0.0048980712890625, 0.0014562606811523438, 0.005077362060546875, 0.006526947021484375, 0.0022106170654296875, 0.00036263465881347656, 0.059112548828125, 0.02239990234375, 0.00030040740966796875, 7.867813110351562e-05, 2.271484375, 0.00020623207092285156, 0.271484375], "tokens": [397, 1135, 6512, 32, 7416, 44, 291, 2887, 1881, 26, 96, 293, 291, 442, 45, 397, 1135, 6512, 32, 25620, 44, 291, 2887, 9079, 26, 96, 293, 291, 442, 45, 397, 1135, 6512, 32, 29243, 44, 291, 2887, 9824, 26, 96, 293, 291, 442, 45, 397, 1135, 6512, 32, 3349, 44, 397]}
{"line_number": 664, "line_type": "original", "code": "      finallyMap.put(lastJump, null);", "entropy": 2.73828125, "is_bug_line": false, "sus_score": 0.45612, "per_token_entropy": [3.830078125, 10.5546875, 0.05023193359375, 0.03497314453125, 7.1484375, 0.11444091796875, 5.4140625, 0.0224151611328125, 0.0039520263671875, 2.822265625, 0.12548828125], "tokens": [647, 8295, 1208, 32, 524, 26, 2135, 17861, 30, 744, 293]}
{"line_number": 664, "line_type": "generated", "code": "\n        node.isReturn()) {\n      return null;\n    }\n\n    if (node.isBreak() || node.isContinue()) {\n      // In this case we need to transfer control to the loop header.\n      Preconditions.checkState(parent.is", "entropy": 0.6328125, "is_bug_line": false, "sus_score": 0.45612, "per_token_entropy": [0.68505859375, 0.84228515625, 0.2205810546875, 0.039154052734375, 0.06414794921875, 0.58837890625, 0.0103759765625, 0.12164306640625, 1.208984375, 2.34375, 0.0020656585693359375, 0.0222320556640625, 0.0002524852752685547, 0.314453125, 1.5302734375, 0.057769775390625, 0.8671875, 0.043670654296875, 0.15625, 1.2861328125, 0.51953125, 0.1781005859375, 0.0347900390625, 4.267692565917969e-05, 0.0018377304077148438, 0.0977783203125, 0.2108154296875, 0.0004661083221435547, 0.03955078125, 1.9033203125, 3.48046875, 1.3994140625, 0.06121826171875, 0.966796875, 1.66796875, 0.027374267578125, 1.9013671875, 0.1214599609375, 0.3154296875, 0.22021484375, 2.798828125, 3.23828125, 0.417724609375, 0.1461181640625, 1.8359375, 0.002567291259765625, 0.035430908203125, 0.1302490234375, 0.04168701171875, 0.51318359375, 0.1676025390625, 0.022613525390625], "tokens": [291, 1541, 32, 297, 2891, 1157, 301, 397, 442, 744, 45, 284, 320, 446, 415, 308, 1251, 32, 297, 10438, 346, 1276, 1541, 32, 297, 17743, 1157, 301, 397, 434, 701, 458, 1135, 996, 1849, 372, 8872, 3498, 372, 322, 5258, 3338, 32, 397, 40596, 32, 1553, 1078, 26, 2544, 32, 297]}
{"line_number": 930, "line_type": "original", "code": "    return false;", "entropy": 3.302734375, "is_bug_line": false, "sus_score": 0.43239, "per_token_entropy": [5.09375, 0.259521484375, 7.85546875, 0.0055999755859375], "tokens": [264, 442, 901, 45]}
{"line_number": 930, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Get the CATCH node for a given block, or null if there is none.\n   */\n  private static Node getCatchHandlerForBlock(Node n) {\n    Node parent = n.getParent();\n    if (parent.is", "entropy": 0.389404296875, "is_bug_line": false, "sus_score": 0.43239, "per_token_entropy": [0.376708984375, 0.005657196044921875, 0.1876220703125, 0.1600341796875, 0.0237274169921875, 0.0002627372741699219, 1.0634765625, 0.08636474609375, 1.626953125, 0.63671875, 1.056640625, 1.04296875, 0.7353515625, 1.2861328125, 1.87109375, 0.96435546875, 0.089599609375, 0.0718994140625, 1.0048828125, 1.03125, 0.919921875, 0.05499267578125, 0.07208251953125, 0.10028076171875, 0.00412750244140625, 0.63916015625, 0.0031032562255859375, 0.00577545166015625, 0.0004596710205078125, 4.9233436584472656e-05, 0.00034236907958984375, 0.0003185272216796875, 0.0014905929565429688, 0.00037026405334472656, 0.0035381317138671875, 0.357421875, 0.00074005126953125, 0.0004372596740722656, 0.05938720703125, 1.1826171875, 1.4853515625, 0.06829833984375, 0.0831298828125, 0.054168701171875, 0.00405120849609375, 0.0010690689086914062, 0.046417236328125, 0.476318359375, 0.20947265625, 0.16943359375, 0.6171875, 0.310791015625], "tokens": [334, 320, 719, 1022, 664, 319, 1390, 322, 33413, 1541, 436, 312, 2702, 2163, 30, 556, 744, 415, 2017, 438, 4909, 32, 664, 569, 334, 945, 907, 4004, 622, 20377, 1972, 1562, 2227, 26, 1212, 310, 27, 301, 284, 4004, 2935, 280, 310, 32, 18789, 473, 284, 415, 308, 2544, 32, 297]}
