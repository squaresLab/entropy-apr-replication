{"line_number": 1446, "line_type": "original", "code": "          // \"Array([args])\" --> \"[[args]]\"", "entropy": 2.423828125, "is_bug_line": false, "sus_score": 0.45522, "per_token_entropy": [7.0, 1.6875, 6.17578125, 4.19140625, 5.61328125, 5.7734375, 0.50244140625, 0.104736328125, 0.335205078125, 0.6318359375, 1.7216796875, 0.119140625, 0.0307769775390625, 0.0474853515625], "tokens": [2033, 434, 313, 1261, 2009, 1132, 1130, 20, 1101, 7185, 77, 1132, 3212, 20]}
{"line_number": 1446, "line_type": "generated", "code": "\n        }\n        regexLiteral = IR.regexp(pattern, flags);\n      }\n\n      // TODO(johnlenz): This is a hack to get around the fact that the\n      // compiler doesn't support the \"new\" operator for regexp literals.\n      //", "entropy": 0.83935546875, "is_bug_line": false, "sus_score": 0.45522, "per_token_entropy": [0.0867919921875, 0.00902557373046875, 0.364013671875, 0.11798095703125, 7.49826431274414e-05, 0.0003180503845214844, 0.01190948486328125, 0.00014090538024902344, 0.1414794921875, 0.0139617919921875, 0.0743408203125, 0.003551483154296875, 0.1639404296875, 0.057037353515625, 0.158447265625, 0.0003733634948730469, 0.48974609375, 1.8203125, 3.125, 0.02471923828125, 0.7890625, 0.0018129348754882812, 0.00173187255859375, 0.017333984375, 3.447265625, 1.5625, 1.0439453125, 1.4423828125, 0.74560546875, 2.15234375, 1.009765625, 1.2900390625, 0.697265625, 0.04351806640625, 1.6181640625, 1.146484375, 0.006160736083984375, 1.900390625, 1.25, 0.0009713172912597656, 3.064453125, 2.83984375, 3.04296875, 2.294921875, 0.55810546875, 0.67529296875, 1.568359375, 1.4169921875, 0.42724609375, 0.301025390625, 0.0841064453125, 0.56396484375], "tokens": [291, 320, 291, 9667, 8208, 280, 14095, 32, 18349, 26, 5607, 30, 5736, 293, 397, 320, 1687, 434, 4296, 26, 25172, 1657, 108, 711, 1348, 438, 312, 16445, 372, 622, 6835, 322, 8434, 688, 322, 397, 434, 8980, 4163, 1330, 2193, 322, 313, 890, 20, 4134, 436, 21189, 36388, 32, 397, 434]}
{"line_number": 1417, "line_type": "original", "code": "  private static enum FoldArrayAction {", "entropy": 4.140625, "is_bug_line": false, "sus_score": 0.32984, "per_token_entropy": [5.03125, 10.53125, 1.18359375, 8.109375, 0.88330078125, 7.12109375, 0.06951904296875, 0.20654296875], "tokens": [225, 945, 907, 3833, 40809, 1261, 1711, 301]}
{"line_number": 1417, "line_type": "generated", "code": "\n        Token.STRING == pattern.getType() &&\n        // is flags folded\n        (flags == null || Token.STRING == flags.getType())) {\n      // \"new RegExp('^foobar$')\" --> /^foobar$/\n      // \"new RegExp('^", "entropy": 0.300048828125, "is_bug_line": false, "sus_score": 0.32984, "per_token_entropy": [0.4833984375, 1.4619140625, 0.006755828857421875, 0.0682373046875, 0.216064453125, 0.01134490966796875, 0.0015239715576171875, 0.0012884140014648438, 0.34423828125, 0.7412109375, 0.73876953125, 0.6318359375, 0.3896484375, 0.1629638671875, 0.065673828125, 4.673004150390625e-05, 0.256591796875, 0.2203369140625, 0.87060546875, 0.007755279541015625, 0.0005207061767578125, 0.1182861328125, 0.48681640625, 0.00017547607421875, 0.00774383544921875, 0.007843017578125, 0.005462646484375, 0.0007119178771972656, 0.00019693374633789062, 0.373046875, 0.043670654296875, 0.453857421875, 0.95703125, 1.97265625, 0.474365234375, 0.0089111328125, 0.38671875, 0.85693359375, 0.07952880859375, 1.2109375, 0.1177978515625, 0.1873779296875, 0.493896484375, 0.0009508132934570312, 0.0179290771484375, 0.1373291015625, 0.365966796875, 0.0755615234375, 0.005176544189453125, 0.00124359130859375, 0.032745361328125, 0.038848876953125], "tokens": [291, 6512, 32, 5203, 610, 5257, 32, 10272, 346, 962, 291, 434, 438, 5736, 14801, 981, 291, 308, 4545, 610, 744, 1276, 6512, 32, 5203, 610, 5736, 32, 10272, 5156, 301, 397, 434, 313, 890, 20368, 463, 80, 26018, 22, 27059, 1101, 17602, 26018, 12639, 397, 434, 313, 890, 20368, 463, 80]}
{"line_number": 1433, "line_type": "original", "code": "    } else {", "entropy": 3.716796875, "is_bug_line": false, "sus_score": 0.31036, "per_token_entropy": [6.7578125, 7.05859375, 0.414794921875, 0.63232421875], "tokens": [264, 320, 813, 301]}
{"line_number": 1433, "line_type": "generated", "code": "\n      String patternString = pattern.getString();\n      if (patternString.indexOf('\\\\') == -1) {\n        patternString = patternString.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n      }\n      if (patternString.indexOf('\\n') == -", "entropy": 0.326904296875, "is_bug_line": false, "sus_score": 0.31036, "per_token_entropy": [0.09942626953125, 0.744140625, 1.1025390625, 0.6533203125, 0.060546875, 0.252685546875, 0.004528045654296875, 0.036865234375, 0.165283203125, 0.12371826171875, 1.0107421875, 0.5771484375, 0.75341796875, 0.07598876953125, 0.00884246826171875, 0.60009765625, 0.96044921875, 0.26953125, 1.8447265625, 0.0309600830078125, 0.0002942085266113281, 0.94775390625, 0.01009368896484375, 0.0673828125, 0.5576171875, 0.06561279296875, 0.0119171142578125, 0.99072265625, 0.08294677734375, 0.00933074951171875, 0.58642578125, 0.45263671875, 0.1522216796875, 0.58154296875, 0.03094482421875, 0.00021648406982421875, 0.05450439453125, 0.0233917236328125, 0.173095703125, 0.00024378299713134766, 0.481201171875, 0.5146484375, 0.150390625, 0.406982421875, 0.0118865966796875, 0.000606536865234375, 0.1783447265625, 0.83740234375, 0.1575927734375, 0.0018968582153320312, 0.0855712890625, 0.0013246536254882812], "tokens": [397, 892, 5257, 652, 280, 5257, 32, 7069, 473, 397, 415, 308, 5607, 652, 32, 7142, 40348, 683, 610, 429, 35, 27, 301, 291, 5257, 652, 280, 5257, 652, 32, 23358, 440, 11468, 392, 313, 11468, 11468, 724, 397, 320, 397, 415, 308, 5607, 652, 32, 7142, 9442, 96, 683, 610, 429]}
{"line_number": 1023, "line_type": "original", "code": "      if (n.hasOneChild()) {", "entropy": 2.662109375, "is_bug_line": false, "sus_score": 0.25407, "per_token_entropy": [3.88671875, 11.515625, 0.1788330078125, 0.904296875, 0.1470947265625, 7.1015625, 0.0005688667297363281, 0.181396484375, 0.033050537109375], "tokens": [647, 415, 308, 96, 32, 41906, 2931, 1157, 301]}
{"line_number": 1023, "line_type": "generated", "code": "\n      int precedence) {\n    while (true) {\n      switch (n.getType()) {\n        case Token.HOOK:\n          return precedence <= HOOK_PRECEDENCE;\n        case Token.COMMA:\n          return precedence <= COMMA_PRECEDENCE", "entropy": 0.258056640625, "is_bug_line": false, "sus_score": 0.25407, "per_token_entropy": [0.583984375, 0.323974609375, 0.434814453125, 0.07257080078125, 0.0044403076171875, 0.1253662109375, 1.1845703125, 0.0138092041015625, 0.426513671875, 0.00033092498779296875, 0.0033817291259765625, 0.048736572265625, 0.390625, 0.00862884521484375, 0.0022754669189453125, 8.559226989746094e-05, 0.0019350051879882812, 0.00011324882507324219, 0.00525665283203125, 0.1324462890625, 0.034454345703125, 0.0014619827270507812, 0.0019102096557617188, 1.1396484375, 0.0005254745483398438, 0.336181640625, 1.203125, 1.3984375, 1.236328125, 1.7431640625, 3.9577484130859375e-05, 0.2249755859375, 0.0048370361328125, 0.00948333740234375, 0.00038313865661621094, 0.02362060546875, 0.1732177734375, 0.0180511474609375, 0.0008444786071777344, 1.8477439880371094e-05, 1.7548828125, 0.00016105175018310547, 0.115478515625, 0.11102294921875, 0.046356201171875, 0.06719970703125, 0.01343536376953125, 4.208087921142578e-05, 0.0002073049545288086, 9.97781753540039e-05, 0.0005869865417480469, 4.887580871582031e-06], "tokens": [397, 629, 32787, 27, 301, 284, 2218, 308, 1508, 27, 301, 397, 3578, 308, 96, 32, 10272, 1157, 301, 291, 1135, 6512, 32, 29243, 44, 616, 442, 32787, 2511, 11551, 2950, 81, 21320, 1345, 8303, 45, 291, 1135, 6512, 32, 47451, 44, 616, 442, 32787, 2511, 19531, 1400, 81, 21320, 1345, 8303]}
{"line_number": 861, "line_type": "original", "code": "        reportCodeChange();", "entropy": 2.57421875, "is_bug_line": false, "sus_score": 0.24345, "per_token_entropy": [6.17578125, 6.6015625, 0.059417724609375, 0.000621795654296875, 0.03887939453125], "tokens": [351, 3639, 1227, 1791, 473]}
{"line_number": 861, "line_type": "generated", "code": "\n      if (lastTrue.isAssign() && lastFalse.isAssign()\n          && lastTrue.getFirstChild().getString().equals(\n              lastFalse.getFirstChild().getString())) {\n        Node trueAssign = lastTrue.detachFromParent();\n        Node", "entropy": 0.2763671875, "is_bug_line": false, "sus_score": 0.24345, "per_token_entropy": [0.52001953125, 0.2347412109375, 0.5390625, 0.541015625, 0.055145263671875, 0.8125, 0.5576171875, 1.740234375, 0.07537841796875, 0.167724609375, 0.15087890625, 0.1724853515625, 0.0029697418212890625, 0.001865386962890625, 0.00821685791015625, 1.0546875, 0.56982421875, 0.013580322265625, 0.428466796875, 0.01702880859375, 0.0119476318359375, 0.16259765625, 0.005367279052734375, 0.0567626953125, 0.444580078125, 0.225830078125, 0.003787994384765625, 0.0101165771484375, 0.225341796875, 0.0011310577392578125, 0.0017118453979492188, 6.115436553955078e-05, 0.0012493133544921875, 6.973743438720703e-05, 0.00026345252990722656, 0.00024962425231933594, 0.12078857421875, 0.0013751983642578125, 0.314453125, 0.96826171875, 1.703125, 0.5654296875, 0.08599853515625, 0.2080078125, 0.0016193389892578125, 0.97412109375, 0.384033203125, 0.00839996337890625, 0.00018739700317382812, 0.0175018310546875, 0.01055908203125, 0.1968994140625], "tokens": [397, 415, 308, 2135, 1815, 32, 297, 9079, 346, 962, 2401, 2700, 32, 297, 9079, 346, 616, 962, 2401, 1815, 32, 25657, 2931, 922, 7069, 922, 3574, 26, 1090, 2401, 2700, 32, 25657, 2931, 922, 7069, 5156, 301, 291, 4004, 861, 9079, 280, 2401, 1815, 32, 18723, 1792, 4433, 473, 291, 4004]}
