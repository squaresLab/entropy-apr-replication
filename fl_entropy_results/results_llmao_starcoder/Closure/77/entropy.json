{"line_number": 624, "line_type": "original", "code": "        if (childCount !=", "entropy": 2.27734375, "is_bug_line": false, "sus_score": 0.34253, "per_token_entropy": [7.28125, 2.00390625, 0.2197265625, 2.5859375, 0.00818634033203125, 1.5673828125], "tokens": [351, 415, 308, 2661, 1534, 863]}
{"line_number": 624, "line_type": "generated", "code": "\n        break;\n      }\n\n      case Token.GETPROP:\n        Preconditions.checkState(childCount == 2);\n        addExpr(first, NodeUtil.precedence(type));\n        add(\".\");\n        add(second);\n        break;\n\n      case", "entropy": 0.1424560546875, "is_bug_line": false, "sus_score": 0.34253, "per_token_entropy": [0.375244140625, 0.328857421875, 0.001949310302734375, 0.022857666015625, 0.0020847320556640625, 0.104248046875, 0.035064697265625, 0.0006661415100097656, 5.7220458984375e-06, 1.595703125, 0.334716796875, 0.07427978515625, 0.489013671875, 0.65087890625, 0.00037741661071777344, 0.000156402587890625, 0.006755828857421875, 0.00276947021484375, 0.038238525390625, 1.9669532775878906e-05, 0.043731689453125, 0.0003066062927246094, 0.01934814453125, 0.0273895263671875, 0.1177978515625, 0.74365234375, 0.11962890625, 0.00637054443359375, 0.04437255859375, 0.011322021484375, 0.2254638671875, 5.3048133850097656e-05, 6.4849853515625e-05, 0.0034923553466796875, 2.384185791015625e-07, 0.007038116455078125, 0.30810546875, 0.21484375, 0.06304931640625, 0.1240234375, 0.12841796875, 0.01239776611328125, 0.038604736328125, 0.2215576171875, 0.379638671875, 0.275634765625, 0.0828857421875, 0.057098388671875, 0.03668212890625, 0.00010538101196289062, 0.0167236328125, 0.0125885009765625], "tokens": [291, 1626, 45, 397, 320, 1687, 1135, 6512, 32, 2788, 15262, 44, 291, 40596, 32, 1553, 1078, 26, 2661, 1534, 610, 225, 36, 293, 291, 1015, 6150, 26, 2232, 30, 4004, 1733, 32, 1001, 39939, 26, 681, 876, 291, 1015, 440, 5368, 291, 1015, 26, 3090, 293, 291, 1626, 45, 1687, 1135]}
{"line_number": 911, "line_type": "original", "code": "    for (int i = 0; i < s.length(); i++) {", "entropy": 0.46923828125, "is_bug_line": false, "sus_score": 0.29272, "per_token_entropy": [5.43359375, 1.5791015625, 0.0124969482421875, 0.0267791748046875, 0.0269622802734375, 0.0261383056640625, 0.0138397216796875, 0.000720977783203125, 0.47021484375, 0.006107330322265625, 0.315185546875, 0.3173828125, 0.003658294677734375, 0.0014200210571289062, 0.0167083740234375, 0.18115234375, 0.0033283233642578125, 0.01215362548828125], "tokens": [264, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309, 32, 1322, 473, 595, 1987, 301]}
{"line_number": 911, "line_type": "generated", "code": "\n    for (int i = 0; i < s.length(); i++) {\n      switch (s.charAt(i)) {\n        case '\\\\':\n          if (outputCharsetEncoder == null) {\n            sb.append(backslashEscape);\n          }", "entropy": 0.2205810546875, "is_bug_line": false, "sus_score": 0.29272, "per_token_entropy": [0.1982421875, 1.4580078125, 0.01538848876953125, 0.0283203125, 0.0347900390625, 0.0278778076171875, 0.01514434814453125, 0.0007076263427734375, 0.447509765625, 0.005596160888671875, 0.31005859375, 0.396240234375, 0.0031948089599609375, 0.0015306472778320312, 0.017333984375, 0.1932373046875, 0.0032711029052734375, 0.0051727294921875, 0.0484619140625, 1.2451171875, 0.0217132568359375, 0.0283050537109375, 0.0002378225326538086, 0.0001043081283569336, 0.0002560615539550781, 0.00012886524200439453, 0.00023281574249267578, 0.005645751953125, 0.061920166015625, 0.0204010009765625, 1.01171875, 0.007373809814453125, 0.583984375, 1.009765625, 0.029815673828125, 1.10546875, 0.0008759498596191406, 0.0001895427703857422, 0.9638671875, 0.004268646240234375, 0.51611328125, 0.040679931640625, 0.067626953125, 0.89892578125, 0.0128021240234375, 0.0026569366455078125, 0.37353515625, 0.1370849609375, 0.00098419189453125, 0.0201416015625, 0.08453369140625, 6.508827209472656e-05], "tokens": [284, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309, 32, 1322, 473, 595, 1987, 301, 397, 3578, 308, 101, 32, 15611, 26, 91, 490, 301, 291, 1135, 17276, 950, 616, 415, 308, 2024, 26082, 8770, 610, 744, 27, 301, 324, 6115, 32, 1689, 26, 29022, 19033, 293, 616, 320]}
{"line_number": 1154, "line_type": "original", "code": "    out.append(\"\\\\u\")", "entropy": 1.4638671875, "is_bug_line": false, "sus_score": 0.28716, "per_token_entropy": [4.55859375, 3.37109375, 0.0176239013671875, 0.01727294921875, 1.2587890625, 0.2237548828125, 0.80029296875], "tokens": [264, 963, 32, 1689, 22899, 103, 657]}
{"line_number": 1154, "line_type": "generated", "code": "\n\n  /**\n   * @see #appendHexJavaScriptRepresentation(int, Appendable)\n   */\n  private static void appendHexJavaScriptRepresentation(\n      String s, Appendable out)\n      throws IOException {\n    for (int i = 0; i < s", "entropy": 0.178466796875, "is_bug_line": false, "sus_score": 0.28716, "per_token_entropy": [1.291015625, 0.2412109375, 0.1502685546875, 0.0005879402160644531, 1.6728515625, 0.10833740234375, 0.040313720703125, 0.166259765625, 1.13671875, 0.017486572265625, 0.2822265625, 0.06390380859375, 0.1580810546875, 0.03765869140625, 0.1258544921875, 3.2901763916015625e-05, 0.0122528076171875, 0.004276275634765625, 0.024017333984375, 0.00690460205078125, 0.043212890625, 0.053192138671875, 0.1536865234375, 0.0016527175903320312, 0.08868408203125, 0.005374908447265625, 0.02313232421875, 0.0187835693359375, 0.59033203125, 0.6826171875, 0.759765625, 0.0012693405151367188, 0.300048828125, 3.0994415283203125e-06, 0.06781005859375, 0.0017385482788085938, 0.1402587890625, 0.000232696533203125, 0.00019109249114990234, 0.0030975341796875, 0.0166473388671875, 0.252685546875, 0.002185821533203125, 0.06402587890625, 0.06256103515625, 0.004062652587890625, 0.002079010009765625, 5.829334259033203e-05, 0.355224609375, 0.0007529258728027344, 0.045806884765625, 0.0007367134094238281], "tokens": [719, 1022, 664, 319, 477, 2970, 588, 1689, 10226, 14575, 16541, 26, 410, 30, 20593, 444, 27, 664, 569, 334, 945, 907, 763, 5489, 10226, 14575, 16541, 26, 397, 892, 309, 30, 20593, 444, 963, 27, 397, 2571, 6291, 301, 284, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309]}
{"line_number": 192, "line_type": "original", "code": "          addIdentifier(n.getString());", "entropy": 2.822265625, "is_bug_line": false, "sus_score": 0.28417, "per_token_entropy": [8.9453125, 2.197265625, 8.1171875, 2.06640625, 1.0888671875, 0.022430419921875, 0.067138671875, 0.07659912109375], "tokens": [2033, 1015, 5541, 26, 96, 32, 7069, 1035]}
{"line_number": 192, "line_type": "generated", "code": "\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.STRING:\n        Preconditions.checkState(\n            child", "entropy": 0.137939453125, "is_bug_line": false, "sus_score": 0.28417, "per_token_entropy": [0.043365478515625, 0.650390625, 0.0007181167602539062, 0.01374053955078125, 0.033111572265625, 0.98291015625, 0.1114501953125, 0.00010192394256591797, 1.3589859008789062e-05, 0.00534820556640625, 0.0007348060607910156, 0.00043582916259765625, 0.0751953125, 7.605552673339844e-05, 0.000732421875, 0.0538330078125, 0.041412353515625, 0.7958984375, 0.007434844970703125, 0.042877197265625, 0.30517578125, 0.0260162353515625, 0.005939483642578125, 0.00952911376953125, 0.0014495849609375, 0.06610107421875, 0.000896453857421875, 5.698204040527344e-05, 0.0016756057739257812, 4.9591064453125e-05, 0.0020961761474609375, 0.033935546875, 0.08404541015625, 0.05633544921875, 0.0174560546875, 0.0002090930938720703, 0.005924224853515625, 0.00010335445404052734, 0.043548583984375, 0.03143310546875, 0.00023353099822998047, 0.00011920928955078125, 1.826171875, 0.049468994140625, 0.1375732421875, 0.9853515625, 0.0001310110092163086, 7.152557373046875e-05, 0.00012981891632080078, 0.01534271240234375, 0.580078125, 0.0248565673828125], "tokens": [291, 10639, 32, 669, 3397, 26, 1212, 1733, 32, 520, 705, 2007, 2023, 4976, 26, 681, 471, 901, 293, 291, 1015, 6150, 26, 2232, 30, 4004, 1733, 32, 1001, 39939, 26, 681, 876, 291, 1626, 45, 397, 320, 1687, 1135, 6512, 32, 5203, 44, 291, 40596, 32, 1553, 1078, 26, 324, 2838]}
{"line_number": 1144, "line_type": "original", "code": "    if (Character.isSupplementaryCodePoint(codePoint)) {", "entropy": 0.66015625, "is_bug_line": false, "sus_score": 0.27975, "per_token_entropy": [4.33984375, 2.43359375, 0.241455078125, 2.28515625, 0.0008854866027832031, 0.12420654296875, 0.6865234375, 2.2649765014648438e-06, 6.318092346191406e-06, 0.00012302398681640625, 0.0011758804321289062, 0.003421783447265625, 0.320068359375, 0.013397216796875, 0.0611572265625, 0.054931640625], "tokens": [264, 415, 308, 6881, 32, 297, 33777, 727, 672, 1227, 1943, 26, 687, 1943, 490, 301]}
{"line_number": 1144, "line_type": "generated", "code": "\n\n  /**\n   * Returns a javascript representation of the character in a hex escaped\n   * format.\n   *\n   * @param c The character to append.\n   * @param out The buffer to which the hex representation should be appended.\n   */\n  private static", "entropy": 0.1153564453125, "is_bug_line": false, "sus_score": 0.27975, "per_token_entropy": [1.3876953125, 0.27490234375, 0.1461181640625, 0.0006670951843261719, 1.408203125, 0.36181640625, 0.296630859375, 0.052825927734375, 0.003536224365234375, 0.062255859375, 0.51220703125, 0.030731201171875, 0.0193634033203125, 0.0140838623046875, 0.001018524169921875, 0.00659942626953125, 3.695487976074219e-05, 0.0012941360473632812, 0.0249481201171875, 0.04449462890625, 0.06488037109375, 0.01593017578125, 0.0012159347534179688, 0.022857666015625, 0.00794219970703125, 0.37158203125, 0.032867431640625, 0.421142578125, 0.0128173828125, 0.0997314453125, 0.01806640625, 0.004688262939453125, 0.00762176513671875, 0.0023097991943359375, 0.01873779296875, 0.1502685546875, 0.001750946044921875, 0.0028095245361328125, 0.0003833770751953125, 0.0009160041809082031, 0.00034928321838378906, 0.0022258758544921875, 0.000885009765625, 0.0009374618530273438, 0.00017333030700683594, 0.0009641647338867188, 0.00035881996154785156, 0.0007381439208984375, 0.025146484375, 0.0121612548828125, 0.0423583984375, 0.00543975830078125], "tokens": [719, 1022, 664, 319, 3759, 312, 18778, 10293, 432, 322, 5341, 328, 312, 9960, 31253, 664, 319, 2179, 32, 664, 319, 664, 319, 477, 753, 281, 886, 5341, 372, 5489, 32, 664, 319, 477, 753, 963, 886, 3112, 372, 1510, 322, 9960, 10293, 1395, 526, 22363, 32, 664, 569, 334, 945, 907]}
