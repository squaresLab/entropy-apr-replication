{"line_number": 539, "line_type": "original", "code": "      if (declaration.getBasicBlock() != initialization.getBasicBlock()", "entropy": 1.9873046875, "is_bug_line": false, "sus_score": 0.58265, "per_token_entropy": [5.84765625, 8.4375, 0.090576171875, 4.08203125, 0.124267578125, 1.865234375, 1.2900390625, 0.0242767333984375, 0.443115234375, 3.76953125, 0.0728759765625, 0.009796142578125, 0.00036072731018066406, 1.7783203125], "tokens": [647, 415, 308, 24050, 32, 371, 47269, 346, 863, 13577, 32, 371, 47269, 346]}
{"line_number": 539, "line_type": "generated", "code": "\n          || value.isFunction()\n          || value.isObjectLit();\n    }\n\n    /**\n     * If the value is a simple expression, we can move it within the same\n     * basic block.\n     */\n    private boolean canMoveModerately(\n        Reference", "entropy": 0.354248046875, "is_bug_line": false, "sus_score": 0.58265, "per_token_entropy": [0.360595703125, 0.055694580078125, 0.370849609375, 0.0046539306640625, 0.61376953125, 0.44287109375, 0.456787109375, 0.016021728515625, 0.367919921875, 0.0028057098388671875, 1.037109375, 0.382568359375, 0.411376953125, 0.03778076171875, 0.00046062469482421875, 0.0445556640625, 0.07098388671875, 0.0249176025390625, 5.245208740234375e-05, 0.67822265625, 0.1348876953125, 0.232177734375, 0.156982421875, 0.8154296875, 2.3828125, 1.4599609375, 0.472900390625, 0.278564453125, 0.10650634765625, 0.779296875, 1.046875, 1.826171875, 0.297119140625, 0.340576171875, 0.33984375, 0.0009226799011230469, 0.2880859375, 0.00449371337890625, 0.900390625, 0.212890625, 0.044403076171875, 0.00537872314453125, 0.0115814208984375, 0.0008330345153808594, 0.0005269050598144531, 0.00010824203491210938, 0.00027680397033691406, 9.5367431640625e-07, 1.1920928955078125e-07, 0.00014579296112060547, 0.89599609375, 0.0094451904296875], "tokens": [616, 1276, 786, 32, 39504, 346, 616, 1276, 786, 32, 37704, 27472, 473, 284, 320, 446, 1022, 275, 319, 1670, 322, 786, 438, 312, 4281, 6101, 30, 996, 883, 5169, 561, 4797, 322, 2432, 275, 319, 6550, 2163, 32, 275, 569, 284, 945, 1905, 883, 5775, 2573, 7309, 631, 26, 291, 9494]}
{"line_number": 519, "line_type": "original", "code": "    private boolean canInline(", "entropy": 3.720703125, "is_bug_line": false, "sus_score": 0.42602, "per_token_entropy": [6.13671875, 8.9140625, 0.414794921875, 5.04296875, 0.37890625, 1.4462890625], "tokens": [264, 945, 1905, 883, 10144, 26]}
{"line_number": 519, "line_type": "generated", "code": "\n          if (relationship!= null &&\n              relationship.isSubclass(declaration.getNode(),\n                                     reference.getNode())) {\n            return false;\n          }\n        } else if (reference.getParent().isAssign()) {\n          // Don't inline into a function expression used", "entropy": 0.4443359375, "is_bug_line": false, "sus_score": 0.42602, "per_token_entropy": [0.515625, 0.278564453125, 0.05615234375, 0.029296875, 0.1416015625, 0.1990966796875, 0.822265625, 1.0576171875, 0.38671875, 0.025726318359375, 0.7099609375, 0.1463623046875, 0.8955078125, 0.33740234375, 0.0478515625, 0.50244140625, 0.5869140625, 1.474609375, 0.8662109375, 0.006500244140625, 0.19677734375, 0.13232421875, 0.0013675689697265625, 0.06304931640625, 0.046234130859375, 0.0012340545654296875, 0.0002237558364868164, 0.007232666015625, 9.632110595703125e-05, 0.319091796875, 0.00013577938079833984, 1.41015625, 0.47509765625, 0.11151123046875, 0.8662109375, 0.0215301513671875, 0.2362060546875, 0.0049896240234375, 0.2978515625, 0.2384033203125, 0.4033203125, 0.0004658699035644531, 0.026123046875, 0.75390625, 1.654296875, 0.0002980232238769531, 0.122802734375, 1.87109375, 0.966796875, 0.87744140625, 1.47265625, 1.44140625], "tokens": [616, 415, 308, 19115, 863, 744, 962, 1090, 12112, 32, 297, 44114, 26, 24050, 32, 17699, 1026, 9474, 4121, 32, 17699, 5156, 301, 324, 442, 901, 45, 616, 320, 291, 320, 813, 415, 308, 3576, 32, 18789, 922, 297, 9079, 1157, 301, 616, 434, 12029, 1330, 4447, 1991, 312, 667, 6101, 1654]}
{"line_number": 532, "line_type": "original", "code": "      if (declaration != initialization &&", "entropy": 2.44140625, "is_bug_line": false, "sus_score": 0.30233, "per_token_entropy": [4.03515625, 2.107421875, 0.412353515625, 1.5224609375, 5.109375, 0.9296875, 2.984375], "tokens": [647, 415, 308, 24050, 863, 13577, 962]}
{"line_number": 532, "line_type": "generated", "code": "\n    /**\n     * Returns true if the given value can be moved aggressively.\n     */\n    private boolean canMoveAggressively(Node value) {\n      if (value.isAssign() || value.isAssignOp()) {\n        return false;", "entropy": 0.480224609375, "is_bug_line": false, "sus_score": 0.30233, "per_token_entropy": [0.63818359375, 0.59619140625, 0.1051025390625, 0.0002601146697998047, 2.150390625, 0.607421875, 0.0489501953125, 0.6142578125, 1.6044921875, 1.1630859375, 1.005859375, 0.1107177734375, 0.71142578125, 1.3681640625, 0.0111846923828125, 0.0006036758422851562, 0.640625, 0.45751953125, 0.54931640625, 0.0097808837890625, 0.045501708984375, 0.074462890625, 0.000965118408203125, 0.00020813941955566406, 0.0013971328735351562, 4.0531158447265625e-06, 2.384185791015625e-07, 0.001194000244140625, 0.003543853759765625, 0.283447265625, 0.007129669189453125, 0.0007653236389160156, 0.049713134765625, 1.1103515625, 0.28515625, 0.20947265625, 0.033447265625, 0.7236328125, 1.388671875, 1.4072265625, 1.0751953125, 0.1492919921875, 0.0002803802490234375, 0.06475830078125, 1.96484375, 1.466796875, 0.2420654296875, 0.0010423660278320312, 0.0164031982421875, 0.90625, 1.0673828125, 9.59634780883789e-05], "tokens": [284, 1022, 275, 319, 3759, 861, 415, 322, 2702, 786, 883, 526, 13639, 1894, 2257, 8608, 32, 275, 569, 284, 945, 1905, 883, 5775, 3284, 2257, 8608, 26, 1212, 786, 27, 301, 397, 415, 308, 853, 32, 297, 9079, 346, 1276, 786, 32, 297, 9079, 3397, 1157, 301, 291, 442, 901, 45]}
{"line_number": 724, "line_type": "original", "code": "}", "entropy": 5.58203125, "is_bug_line": false, "sus_score": 0.25919, "per_token_entropy": [5.58203125], "tokens": [111]}
{"line_number": 724, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.25919, "per_token_entropy": [], "tokens": []}
{"line_number": 593, "line_type": "original", "code": "     * If the value of a variable is not constant, then it may read or modify", "entropy": 2.572265625, "is_bug_line": false, "sus_score": 0.25479, "per_token_entropy": [6.21484375, 2.603515625, 2.6640625, 1.8701171875, 1.8173828125, 3.390625, 1.2109375, 1.9921875, 0.451416015625, 1.7724609375, 3.564453125, 0.49365234375, 1.658203125, 1.1220703125, 2.994140625, 7.0, 3.22265625, 2.275390625], "tokens": [262, 319, 1670, 322, 786, 432, 312, 2677, 438, 646, 8082, 30, 1615, 561, 1631, 1491, 556, 5351]}
{"line_number": 593, "line_type": "generated", "code": "\n    private boolean hasInitialValue(Reference reference) {\n      Node initialization = reference.getNode().getFirstChild();\n      return initialization!= null && initialization.isName();\n    }\n\n    /**\n     * @return Whether there is a variable declaration.\n     */\n    private", "entropy": 0.463623046875, "is_bug_line": false, "sus_score": 0.25479, "per_token_entropy": [0.144287109375, 0.07366943359375, 0.10443115234375, 0.246337890625, 0.427734375, 0.013702392578125, 0.01270294189453125, 0.53466796875, 1.5673828125, 0.03546142578125, 0.0014581680297851562, 0.053497314453125, 0.94873046875, 2.208984375, 0.035888671875, 0.0985107421875, 0.0021495819091796875, 0.78857421875, 0.41064453125, 0.155517578125, 0.0016794204711914062, 0.006404876708984375, 0.08551025390625, 0.367431640625, 0.1885986328125, 0.142333984375, 0.0021152496337890625, 1.03515625, 0.6416015625, 0.004444122314453125, 0.28857421875, 1.7685546875, 0.07513427734375, 0.0577392578125, 0.0007791519165039062, 0.5712890625, 0.258544921875, 0.1365966796875, 0.0013990402221679688, 0.83251953125, 0.07061767578125, 0.36474609375, 1.3544921875, 0.20654296875, 0.51513671875, 4.23046875, 1.38671875, 0.87548828125, 0.049835205078125, 0.017913818359375, 0.68017578125, 0.021942138671875], "tokens": [284, 945, 1905, 1401, 4678, 882, 26, 3564, 4121, 27, 301, 397, 4004, 13577, 280, 4121, 32, 17699, 922, 25657, 2931, 473, 397, 442, 13577, 863, 744, 962, 13577, 32, 297, 558, 473, 284, 320, 446, 1022, 275, 319, 477, 601, 14071, 2017, 438, 312, 2677, 13317, 32, 275, 569, 284, 945]}
