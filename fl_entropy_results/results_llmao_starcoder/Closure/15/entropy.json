{"line_number": 244, "line_type": "original", "code": "    // Number of uses of the variable within the CFG node that represented the", "entropy": 3.01171875, "is_bug_line": false, "sus_score": 0.36353, "per_token_entropy": [4.296875, 0.058990478515625, 13.1875, 0.018524169921875, 0.8388671875, 0.99755859375, 0.4267578125, 1.3212890625, 1.3115234375, 0.337890625, 3.28125, 0.7314453125, 4.484375, 12.9453125, 0.947265625], "tokens": [264, 434, 5104, 432, 5251, 432, 322, 2677, 4797, 322, 31848, 1541, 688, 17718, 322]}
{"line_number": 244, "line_type": "generated", "code": "\n      //   assignments to the variable in the same basic block as the\n      //   definition.\n      //   x = readProp(b);\n      //   if (x == null) {\n      //     x = readProp(b);\n      //  ", "entropy": 0.744140625, "is_bug_line": false, "sus_score": 0.36353, "per_token_entropy": [0.72607421875, 0.118896484375, 3.501953125, 2.65625, 0.8896484375, 0.94287109375, 0.97509765625, 2.158203125, 0.55517578125, 2.412109375, 1.701171875, 0.01470184326171875, 1.8017578125, 0.34326171875, 1.16796875, 0.0020809173583984375, 0.07427978515625, 0.4130859375, 0.4267578125, 0.67431640625, 0.908203125, 1.5810546875, 2.599609375, 0.0755615234375, 0.75048828125, 0.112060546875, 0.07489013671875, 0.07415771484375, 0.400390625, 1.4365234375, 0.0011844635009765625, 0.01500701904296875, 1.009765625, 0.19970703125, 1.3837890625, 1.5791015625, 1.580078125, 0.01617431640625, 0.076171875, 0.1536865234375, 0.00028204917907714844, 0.05645751953125, 0.5625, 0.00989532470703125, 1.392578125, 0.07403564453125, 0.08740234375, 0.54443359375, 0.09521484375, 0.16748046875, 0.00193023681640625, 0.10833740234375], "tokens": [397, 434, 261, 29410, 372, 322, 2677, 328, 322, 2432, 6550, 2163, 619, 322, 397, 434, 261, 5644, 32, 397, 434, 261, 816, 280, 1491, 6567, 26, 84, 293, 397, 434, 261, 415, 308, 106, 610, 744, 27, 301, 397, 434, 262, 816, 280, 1491, 6567, 26, 84, 293, 397, 434, 261]}
{"line_number": 264, "line_type": "original", "code": "      getNumUseInUseCfgNode(useCfgNode, null);", "entropy": 2.69921875, "is_bug_line": false, "sus_score": 0.36119, "per_token_entropy": [5.48046875, 10.0703125, 0.64208984375, 14.0390625, 0.112548828125, 0.024444580078125, 0.91015625, 0.529296875, 0.369140625, 0.0005030632019042969, 0.96484375, 1.8876953125, 0.06585693359375], "tokens": [647, 44929, 4391, 44035, 11812, 1212, 26, 539, 11812, 1212, 30, 744, 293]}
{"line_number": 264, "line_type": "generated", "code": "\n      return true;\n    }\n\n    /**\n     * Returns the definition of this candidate.\n     *\n     * @param defCfgNode The CFG node where the definition is.\n     * @param def The definition if it is already known.\n     * @return The", "entropy": 0.6240234375, "is_bug_line": false, "sus_score": 0.36119, "per_token_entropy": [1.052734375, 0.375, 0.0335693359375, 0.0016908645629882812, 0.05462646484375, 0.0006356239318847656, 0.463134765625, 0.83642578125, 0.07470703125, 0.0004763603210449219, 1.8642578125, 0.5732421875, 0.59326171875, 0.6064453125, 1.83203125, 0.82275390625, 0.80712890625, 0.5751953125, 0.50439453125, 0.53271484375, 0.0066986083984375, 0.623046875, 0.26806640625, 2.00390625, 0.5625, 0.03240966796875, 0.97998046875, 0.3720703125, 0.0797119140625, 1.3330078125, 0.1614990234375, 0.2034912109375, 1.064453125, 2.3203125, 0.2313232421875, 0.0987548828125, 0.023468017578125, 0.10101318359375, 1.5458984375, 0.72021484375, 0.365234375, 2.7109375, 0.916015625, 0.853515625, 1.1162109375, 0.4384765625, 0.332763671875, 0.303955078125, 0.65478515625, 0.1756591796875, 0.012359619140625, 0.22607421875], "tokens": [397, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 5644, 432, 458, 15133, 32, 275, 319, 275, 319, 477, 753, 665, 11812, 1212, 886, 31848, 1541, 2154, 322, 5644, 438, 32, 275, 319, 477, 753, 665, 886, 5644, 415, 561, 438, 3425, 8967, 32, 275, 319, 477, 601, 886]}
{"line_number": 319, "line_type": "original", "code": "      }", "entropy": 3.150390625, "is_bug_line": false, "sus_score": 0.34647, "per_token_entropy": [3.6484375, 2.65234375], "tokens": [647, 320]}
{"line_number": 319, "line_type": "generated", "code": "\n                 new PathChecker<Node, ControlFlowGraph.Branch>() {\n                     @Override\n                     public boolean apply(List<DiGraphEdge<Node, ControlFlowGraph.Branch>> path) {\n                       for (DiGraphEdge<Node, ControlFlowGraph.", "entropy": 0.385009765625, "is_bug_line": false, "sus_score": 0.34647, "per_token_entropy": [0.90625, 2.30078125, 3.5390625, 1.986328125, 1.0859375, 0.486083984375, 0.016571044921875, 0.06732177734375, 4.8279762268066406e-05, 0.0006880760192871094, 0.00197601318359375, 0.0001938343048095703, 0.1142578125, 0.007415771484375, 0.69580078125, 0.0635986328125, 0.0005984306335449219, 0.02276611328125, 0.12091064453125, 0.1798095703125, 2.162109375, 0.01465606689453125, 2.14453125, 0.0178680419921875, 0.2120361328125, 0.00044035911560058594, 0.01021575927734375, 0.00643157958984375, 0.0194244384765625, 0.00036144256591796875, 0.70361328125, 3.123283386230469e-05, 0.0004532337188720703, 0.0021572113037109375, 0.00193023681640625, 0.006076812744140625, 0.5654296875, 0.103759765625, 0.0198974609375, 0.1475830078125, 2.12109375, 0.005275726318359375, 0.10308837890625, 8.952617645263672e-05, 0.00013208389282226562, 0.003185272216796875, 0.001430511474609375, 2.7418136596679688e-05, 0.045013427734375, 6.67572021484375e-06, 0.00017368793487548828, 0.0002799034118652344], "tokens": [353, 537, 5380, 14003, 46, 1212, 30, 7813, 4055, 3406, 32, 10094, 6940, 301, 3486, 477, 1788, 3486, 562, 1905, 4871, 26, 720, 46, 2820, 3406, 6530, 46, 1212, 30, 7813, 4055, 3406, 32, 10094, 2005, 1519, 27, 301, 5556, 436, 308, 2820, 3406, 6530, 46, 1212, 30, 7813, 4055, 3406, 32]}
{"line_number": 426, "line_type": "original", "code": "              }", "entropy": 5.5234375, "is_bug_line": false, "sus_score": 0.32302, "per_token_entropy": [10.296875, 0.7470703125], "tokens": [2850, 320]}
{"line_number": 426, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Given an expression by its root and sub-expression n, return true if there\n   * the predicate is true for some expression on the left of n.\n   *\n   * Example:\n   *\n   * NotChecked(), n,", "entropy": 0.09576416015625, "is_bug_line": false, "sus_score": 0.32302, "per_token_entropy": [0.40478515625, 0.02520751953125, 0.458984375, 0.2108154296875, 0.0307464599609375, 0.0013875961303710938, 0.82568359375, 0.15869140625, 0.024658203125, 0.073974609375, 0.0073699951171875, 0.003536224365234375, 0.01611328125, 0.0474853515625, 0.00638580322265625, 0.002941131591796875, 0.0121917724609375, 0.004970550537109375, 0.0312347412109375, 0.0379638671875, 0.007114410400390625, 0.08172607421875, 0.006435394287109375, 0.00030303001403808594, 0.09320068359375, 0.01183319091796875, 0.0026836395263671875, 0.004795074462890625, 0.014007568359375, 0.050628662109375, 0.0308380126953125, 0.1712646484375, 0.007625579833984375, 0.0711669921875, 0.0211944580078125, 0.00391387939453125, 0.0187225341796875, 0.007587432861328125, 0.04791259765625, 0.0079803466796875, 0.0002913475036621094, 0.01715087890625, 0.006259918212890625, 0.00876617431640625, 0.00011622905731201172, 0.0748291015625, 0.0004565715789794922, 1.0390625, 0.0019025802612304688, 0.015655517578125, 0.755859375, 0.01392364501953125], "tokens": [334, 320, 719, 1022, 664, 319, 15273, 600, 6101, 810, 2819, 3051, 461, 1361, 31, 7672, 310, 30, 442, 861, 415, 2017, 664, 319, 322, 14094, 438, 861, 436, 1629, 6101, 544, 322, 2841, 432, 310, 32, 664, 319, 664, 319, 5938, 44, 664, 319, 664, 319, 3182, 9020, 1026, 310, 30]}
