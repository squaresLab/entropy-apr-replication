{"line_number": 755, "line_type": "original", "code": "    }", "entropy": 1.5185546875, "is_bug_line": false, "sus_score": 0.32248, "per_token_entropy": [2.849609375, 0.188232421875], "tokens": [264, 320]}
{"line_number": 755, "line_type": "generated", "code": "\n      return true;\n    }\n\n    // Don't bother checking the cost if there are too many references\n    // (this can be a lot of work).\n    if (referencesUsingDirectInlining > 1) {\n      return true;\n    }\n\n    // Don", "entropy": 0.8193359375, "is_bug_line": false, "sus_score": 0.32248, "per_token_entropy": [0.92822265625, 0.446044921875, 0.39990234375, 0.0007081031799316406, 0.055023193359375, 0.00045037269592285156, 0.28857421875, 0.71875, 2.869140625, 0.0002875328063964844, 1.2353515625, 2.33984375, 1.119140625, 0.580078125, 0.67724609375, 1.451171875, 0.402587890625, 1.9365234375, 0.07733154296875, 0.51513671875, 1.521484375, 0.08349609375, 3.03515625, 2.837890625, 2.755859375, 1.4375, 1.8056640625, 1.5166015625, 0.642578125, 0.89306640625, 1.3603515625, 0.1324462890625, 0.33642578125, 0.03875732421875, 1.685546875, 0.0028705596923828125, 0.2939453125, 3.2186508178710938e-06, 0.44580078125, 0.53466796875, 0.9248046875, 1.3837890625, 0.0015659332275390625, 0.175537109375, 0.11474609375, 0.2259521484375, 0.0003299713134765625, 0.006580352783203125, 0.00010263919830322266, 0.125244140625, 0.58349609375, 1.650390625], "tokens": [397, 442, 861, 45, 284, 320, 446, 434, 12029, 1330, 41569, 11056, 322, 7847, 415, 2017, 884, 5133, 5075, 10647, 284, 434, 308, 578, 883, 526, 312, 8215, 432, 1389, 547, 284, 415, 308, 6365, 9515, 6997, 29021, 848, 225, 35, 27, 301, 397, 442, 861, 45, 284, 320, 446, 434, 12029]}
{"line_number": 729, "line_type": "original", "code": "        if (cArg != null) {", "entropy": 1.8330078125, "is_bug_line": false, "sus_score": 0.31784, "per_token_entropy": [5.2578125, 1.7236328125, 0.170654296875, 6.6875, 0.84130859375, 1.4111328125, 0.0034694671630859375, 0.360595703125, 0.036865234375], "tokens": [351, 415, 308, 85, 1765, 863, 744, 27, 301]}
{"line_number": 729, "line_type": "generated", "code": "\n        if (isRemovable) {\n          return false;\n        }\n        referencesUsingBlockInlining++;\n        continue;\n      }\n\n      // TODO(johnlenz): Support inlining the function if it is marked as\n      // @noinline.\n\n      // TODO", "entropy": 0.7529296875, "is_bug_line": false, "sus_score": 0.31784, "per_token_entropy": [0.1470947265625, 1.779296875, 0.161865234375, 1.5244140625, 0.29150390625, 8.034706115722656e-05, 0.34375, 0.0009870529174804688, 0.028076171875, 1.7734375, 0.6298828125, 0.000705718994140625, 0.0177764892578125, 6.711483001708984e-05, 0.456298828125, 0.346923828125, 0.00014448165893554688, 3.349781036376953e-05, 1.0728836059570312e-06, 0.1378173828125, 1.595703125, 0.1400146484375, 0.0005269050598144531, 0.01593017578125, 7.522106170654297e-05, 0.2198486328125, 1.5390625, 2.28125, 0.037994384765625, 0.08544921875, 0.00209808349609375, 5.447864532470703e-05, 0.0299530029296875, 2.833984375, 3.056640625, 0.0190277099609375, 4.07421875, 1.0751953125, 1.0302734375, 1.0888671875, 1.0966796875, 2.666015625, 0.50537109375, 1.2861328125, 0.0005469322204589844, 1.623046875, 0.654296875, 0.3271484375, 0.6943359375, 1.2509765625, 0.96337890625, 1.3271484375], "tokens": [291, 415, 308, 297, 25346, 444, 27, 301, 616, 442, 901, 45, 291, 320, 291, 10647, 9515, 2227, 29021, 3334, 291, 4036, 45, 397, 320, 1687, 434, 4296, 26, 25172, 1657, 108, 711, 6318, 328, 22914, 322, 667, 415, 561, 438, 15177, 619, 397, 434, 477, 1347, 3221, 32, 1687, 434, 4296]}
{"line_number": 515, "line_type": "original", "code": "        greatGrandParent.addChildAfter(newBlock, grandParent);", "entropy": 2.369140625, "is_bug_line": false, "sus_score": 0.29617, "per_token_entropy": [6.03515625, 16.84375, 0.3154296875, 0.1278076171875, 2.01953125, 2.205078125, 3.7734375, 0.005039215087890625, 0.92822265625, 0.05389404296875, 0.0211944580078125, 0.763671875, 0.0024471282958984375, 0.048675537109375], "tokens": [351, 8040, 41332, 4433, 32, 21545, 5125, 26, 890, 2227, 30, 33162, 4433, 293]}
{"line_number": 515, "line_type": "generated", "code": "\n    NO\n  }\n\n  /**\n   * Determines whether the given function call node can be inlined.\n   *\n   * @return YES if the function can be inlined, AFTER_PREPARATION if the\n   *     function can be inlined after some", "entropy": 0.533203125, "is_bug_line": false, "sus_score": 0.29617, "per_token_entropy": [1.1298828125, 0.07562255859375, 0.720703125, 0.005268096923828125, 0.194091796875, 0.3232421875, 0.069580078125, 0.00027751922607421875, 1.2880859375, 0.91845703125, 1.22265625, 0.343994140625, 1.228515625, 2.099609375, 1.1875, 0.68505859375, 0.050994873046875, 0.15576171875, 0.006786346435546875, 0.71435546875, 0.2093505859375, 0.30908203125, 0.99365234375, 0.00254058837890625, 0.625, 0.91796875, 2.41015625, 0.353515625, 0.41015625, 0.78369140625, 0.59033203125, 0.018585205078125, 0.05615234375, 0.005680084228515625, 0.85302734375, 1.13671875, 0.0035800933837890625, 0.0028896331787109375, 0.005313873291015625, 0.0009255409240722656, 0.1781005859375, 0.99951171875, 0.2244873046875, 0.00028228759765625, 0.09765625, 0.1103515625, 1.2470703125, 0.1727294921875, 0.214111328125, 0.0010051727294921875, 0.5048828125, 1.8828125], "tokens": [284, 4435, 334, 320, 719, 1022, 664, 319, 34450, 4946, 322, 2702, 667, 1476, 1541, 883, 526, 328, 14145, 32, 664, 319, 664, 319, 477, 601, 24065, 415, 322, 667, 883, 526, 328, 14145, 30, 48048, 81, 2883, 4186, 2893, 415, 322, 664, 319, 262, 667, 883, 526, 328, 14145, 2685, 1629]}
{"line_number": 900, "line_type": "original", "code": "      // The part of the function that is inlined using direct inlining:", "entropy": 2.12890625, "is_bug_line": false, "sus_score": 0.28222, "per_token_entropy": [8.046875, 1.0390625, 3.564453125, 4.53125, 0.1280517578125, 0.04034423828125, 0.1856689453125, 0.141845703125, 0.1409912109375, 0.99072265625, 0.0960693359375, 8.6484375, 3.205078125, 1.0341796875, 0.0157623291015625, 2.25], "tokens": [647, 434, 886, 1742, 432, 322, 667, 688, 438, 328, 14145, 1471, 3872, 328, 22914, 44]}
{"line_number": 900, "line_type": "generated", "code": "\n  /**\n   * The set of known constants to be used when classifying call-sites\n   * in expressions.\n   */\n  private Set<String> knownConstants = Sets.newHashSet();", "entropy": 0.302490234375, "is_bug_line": false, "sus_score": 0.28222, "per_token_entropy": [0.7685546875, 0.483642578125, 0.173583984375, 0.0009784698486328125, 3.322265625, 1.5615234375, 0.0079345703125, 1.0908203125, 0.5576171875, 1.1083984375, 0.299072265625, 0.025665283203125, 0.1251220703125, 0.0802001953125, 0.005863189697265625, 0.0919189453125, 0.01374053955078125, 0.00921630859375, 0.888671875, 0.0196533203125, 0.0207672119140625, 0.00872802734375, 0.0260772705078125, 0.09271240234375, 0.07110595703125, 0.005859375, 0.07012939453125, 0.01442718505859375, 0.00011909008026123047, 7.045269012451172e-05, 0.000148773193359375, 0.00032806396484375, 0.0001043081283569336, 0.451171875, 0.333740234375, 0.004825592041015625, 0.0003516674041748047, 0.021026611328125, 0.038848876953125], "tokens": [334, 1022, 664, 319, 886, 739, 432, 8967, 12388, 372, 526, 1654, 1412, 443, 20911, 1476, 31, 12095, 664, 319, 328, 15866, 32, 664, 569, 334, 945, 1756, 46, 652, 48, 8967, 5229, 280, 9013, 32, 890, 17175, 473]}
{"line_number": 228, "line_type": "original", "code": "        }", "entropy": 5.4296875, "is_bug_line": false, "sus_score": 0.27181, "per_token_entropy": [5.1328125, 5.72265625], "tokens": [351, 320]}
{"line_number": 228, "line_type": "generated", "code": "\n      // Replace the callNode with the new expression.\n      callParentNode.replaceChild(callNode, newExpression);\n\n      // If the return node has no children, then replace it with an empty\n      // return statement.\n      if (returnNode.", "entropy": 0.71142578125, "is_bug_line": false, "sus_score": 0.27181, "per_token_entropy": [0.458984375, 0.82763671875, 1.484375, 1.19921875, 2.751953125, 1.564453125, 0.25146484375, 0.09515380859375, 1.40234375, 0.84716796875, 0.333740234375, 0.0992431640625, 1.232421875, 0.219970703125, 0.00027060508728027344, 0.0005593299865722656, 0.0287017822265625, 0.00016796588897705078, 0.00018084049224853516, 0.09051513671875, 0.00043702125549316406, 0.00014829635620117188, 0.04541015625, 0.003082275390625, 0.00432586669921875, 1.451171875, 0.340087890625, 2.75390625, 0.5234375, 1.078125, 1.431640625, 1.015625, 2.009765625, 0.576171875, 0.630859375, 1.40625, 2.404296875, 0.5546875, 0.169921875, 1.1455078125, 1.1240234375, 0.765625, 0.0021800994873046875, 1.2666015625, 1.4072265625, 0.269287109375, 0.1712646484375, 0.269775390625, 1.0556640625, 0.236328125, 8.296966552734375e-05, 0.00269317626953125], "tokens": [397, 434, 16695, 322, 1476, 1212, 623, 322, 537, 6101, 32, 397, 1476, 4433, 1212, 32, 3227, 2931, 26, 1851, 1212, 30, 537, 3487, 293, 1687, 434, 1670, 322, 442, 1541, 1401, 1289, 5713, 30, 1615, 7084, 561, 623, 600, 3502, 397, 434, 442, 7603, 32, 397, 415, 308, 601, 1212, 32]}
