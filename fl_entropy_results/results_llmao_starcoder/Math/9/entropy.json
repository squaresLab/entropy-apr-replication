{"line_number": 222, "line_type": "original", "code": "    public SubLine wholeLine() {", "entropy": 1.44140625, "is_bug_line": false, "sus_score": 0.28881, "per_token_entropy": [4.79296875, 2.83984375, 0.439697265625, 0.0024242401123046875, 3.05859375, 0.249267578125, 0.046051025390625, 0.1046142578125], "tokens": [264, 562, 3725, 1811, 9844, 1811, 346, 301]}
{"line_number": 222, "line_type": "generated", "code": "\n    /** Build a sub-line covering a subset of the line.\n     * @param mask sub-line mask\n     * @return a sub-line covering the specified subset of the line\n     */\n    public SubLine subLine(final BitSet", "entropy": 0.333251953125, "is_bug_line": false, "sus_score": 0.28881, "per_token_entropy": [0.82177734375, 0.176025390625, 0.28466796875, 0.0279083251953125, 0.0523681640625, 0.004108428955078125, 0.004764556884765625, 0.31640625, 0.0005159378051757812, 0.720703125, 3.080078125, 0.004215240478515625, 0.0677490234375, 0.2919921875, 0.04559326171875, 0.024932861328125, 0.00128173828125, 0.111083984375, 0.00817108154296875, 2.341796875, 1.5185546875, 0.051788330078125, 0.28759765625, 0.339599609375, 0.1668701171875, 0.00024437904357910156, 0.002094268798828125, 0.004032135009765625, 0.0615234375, 0.024078369140625, 0.00103759765625, 0.0010480880737304688, 0.11322021484375, 0.0001844167709350586, 0.6748046875, 0.86376953125, 1.2470703125, 0.2239990234375, 0.02667236328125, 0.059722900390625, 0.01074981689453125, 0.402587890625, 0.182861328125, 0.022308349609375, 0.2003173828125, 0.0001952648162841797, 1.0615234375, 0.0017805099487304688, 0.01256561279296875, 0.007022857666015625, 1.349609375, 0.0173492431640625], "tokens": [284, 1022, 5238, 312, 1361, 31, 928, 6369, 299, 312, 17272, 432, 322, 1628, 32, 275, 319, 477, 753, 5941, 1361, 31, 928, 5941, 275, 319, 477, 601, 312, 1361, 31, 928, 6369, 299, 322, 3191, 17272, 432, 322, 1628, 275, 569, 284, 562, 3725, 1811, 1361, 1811, 26, 3220, 7588, 885]}
{"line_number": 88, "line_type": "original", "code": "        return reverted;", "entropy": 1.5048828125, "is_bug_line": false, "sus_score": 0.27232, "per_token_entropy": [5.51953125, 1.1982421875, 0.72509765625, 0.000553131103515625, 0.08135986328125], "tokens": [351, 442, 316, 17445, 45]}
{"line_number": 88, "line_type": "generated", "code": "\n\n    /** Get the first point belonging to the line.\n     * @return first point belonging to the line\n     */\n    public Vector3D getP1() {\n        return zero.add(direction);\n    }\n\n    /** Get the second point belong", "entropy": 0.203369140625, "is_bug_line": false, "sus_score": 0.27232, "per_token_entropy": [2.03515625, 0.179443359375, 1.625, 0.939453125, 2.361328125, 0.07598876953125, 0.67138671875, 0.0002930164337158203, 0.002796173095703125, 0.0159759521484375, 0.06011962890625, 0.1236572265625, 0.00844573974609375, 0.0006618499755859375, 0.06396484375, 0.0157012939453125, 0.203857421875, 0.009979248046875, 0.11871337890625, 0.00027060508728027344, 0.0006747245788574219, 0.00042128562927246094, 0.0018453598022460938, 0.07598876953125, 0.06298828125, 0.0185089111328125, 0.0217437744140625, 0.0041656494140625, 0.0008258819580078125, 4.291534423828125e-06, 0.005077362060546875, 0.3173828125, 6.127357482910156e-05, 0.0033779144287109375, 0.01264190673828125, 0.06976318359375, 0.0292816162109375, 0.75537109375, 0.2088623046875, 0.0614013671875, 0.13427734375, 0.0916748046875, 0.11199951171875, 0.019622802734375, 0.0006289482116699219, 0.033782958984375, 0.001148223876953125, 0.00836944580078125, 0.00563812255859375, 0.005588531494140625, 0.0003666877746582031, 0.0006642341613769531], "tokens": [446, 1022, 1390, 322, 1932, 2260, 22056, 299, 372, 322, 1628, 32, 275, 319, 477, 601, 1932, 2260, 22056, 299, 372, 322, 1628, 275, 569, 284, 562, 4107, 37, 54, 622, 66, 35, 346, 301, 291, 442, 5934, 32, 669, 26, 7354, 293, 284, 320, 446, 1022, 1390, 322, 3100, 2260, 22056]}
{"line_number": 79, "line_type": "original", "code": "        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);", "entropy": 1.3251953125, "is_bug_line": false, "sus_score": 0.27229, "per_token_entropy": [3.150390625, 6.0703125, 0.437255859375, 1.0947265625, 0.69140625, 1.3955078125, 0.0266571044921875, 0.00946044921875, 0.0004677772521972656, 0.181396484375, 0.73193359375, 0.049407958984375, 0.0008754730224609375, 7.05859375, 5.05078125, 0.00035119056701660156, 9.918212890625e-05, 0.306396484375, 0.0222015380859375, 2.08984375, 0.260986328125, 0.05755615234375, 3.06640625, 0.06695556640625], "tokens": [351, 458, 32, 7354, 280, 537, 4107, 37, 54, 26, 35, 32, 34, 517, 15938, 5717, 32, 8663, 26, 7927, 36, 471, 7715, 293]}
{"line_number": 79, "line_type": "generated", "code": "\n    }\n\n    /** {@inheritDoc}\n     * @see #pointAt(double)\n     */\n    public Vector<Euclidean3D> toSpace(final Vector1D point) {\n        return pointAt(point.getX());\n    }\n\n    /** Get", "entropy": 0.1259765625, "is_bug_line": false, "sus_score": 0.27229, "per_token_entropy": [0.261962890625, 0.143310546875, 0.11614990234375, 0.00894927978515625, 0.11944580078125, 0.00012028217315673828, 0.0006585121154785156, 0.08209228515625, 0.0113372802734375, 0.07635498046875, 0.03173828125, 0.03240966796875, 0.302490234375, 0.00017273426055908203, 0.00028324127197265625, 0.003387451171875, 0.000213623046875, 0.0015077590942382812, 0.017913818359375, 0.005794525146484375, 0.0081634521484375, 0.07147216796875, 0.429931640625, 0.0010499954223632812, 6.794929504394531e-06, 0.2333984375, 2.384185791015625e-07, 0.00012159347534179688, 0.19384765625, 0.0014896392822265625, 0.0042877197265625, 0.005046844482421875, 0.001766204833984375, 0.0762939453125, 4.887580871582031e-06, 1.2568359375, 0.003749847412109375, 0.00470733642578125, 0.01239013671875, 0.0187530517578125, 0.320556640625, 0.009521484375, 0.0472412109375, 0.0004944801330566406, 0.00021016597747802734, 0.1671142578125, 0.00925445556640625, 0.6416015625, 0.0010366439819335938, 0.361328125, 0.058441162109375, 1.3935546875], "tokens": [284, 320, 446, 1022, 3088, 18446, 111, 275, 319, 477, 2970, 588, 1493, 1076, 26, 2627, 27, 275, 569, 284, 562, 4107, 46, 55, 34986, 37, 54, 48, 372, 5135, 26, 3220, 4107, 35, 54, 2260, 27, 301, 291, 442, 2260, 1076, 26, 1493, 32, 18817, 1035, 284, 320, 446, 1022, 1390]}
{"line_number": 87, "line_type": "original", "code": "        final Line reverted = new Line(zero, zero.subtract(direction));", "entropy": 0.70654296875, "is_bug_line": true, "sus_score": 0.24403, "per_token_entropy": [5.74609375, 3.3046875, 0.111083984375, 0.0298309326171875, 1.9550323486328125e-05, 0.0404052734375, 0.0296630859375, 0.0026874542236328125, 0.1492919921875, 1.0546875, 0.08673095703125, 0.57763671875, 0.0220489501953125, 0.736328125, 0.0396728515625, 0.01505279541015625, 0.059478759765625], "tokens": [351, 1158, 7064, 316, 17445, 280, 537, 7064, 26, 6158, 30, 5934, 32, 25330, 26, 7354, 876]}
{"line_number": 87, "line_type": "generated", "code": "\n\n    /** {@inheritDoc} */\n    @Override\n    public String toString() {\n        return \"Line\" + getDirection();\n    }\n\n    /** Get a line from two points.\n     * @param p1 first point belonging to the line (this can be", "entropy": 0.370849609375, "is_bug_line": true, "sus_score": 0.24403, "per_token_entropy": [1.830078125, 0.07373046875, 1.5927734375, 0.0025730133056640625, 0.0009794235229492188, 0.212890625, 0.0243377685546875, 0.341552734375, 0.0042724609375, 0.0049285888671875, 0.01515960693359375, 1.357421875, 0.0019083023071289062, 0.0037593841552734375, 0.0030307769775390625, 0.0634765625, 0.475341796875, 1.19140625, 0.11517333984375, 1.408203125, 0.00444793701171875, 1.462890625, 0.405517578125, 0.3701171875, 0.07904052734375, 0.0019063949584960938, 0.91796875, 0.042266845703125, 2.232421875, 0.1884765625, 1.2607421875, 1.8037109375, 0.39306640625, 0.732421875, 0.2244873046875, 0.0112762451171875, 0.0003476142883300781, 0.1767578125, 0.003993988037109375, 0.1114501953125, 0.007049560546875, 0.023040771484375, 0.0014142990112304688, 0.01678466796875, 7.11679458618164e-05, 1.2278556823730469e-05, 6.723403930664062e-05, 0.0019779205322265625, 0.0677490234375, 0.01739501953125, 0.0010309219360351562, 0.0004353523254394531], "tokens": [446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 892, 11345, 346, 301, 291, 442, 313, 1811, 20, 474, 622, 5222, 473, 284, 320, 446, 1022, 1390, 312, 1628, 645, 3134, 4981, 32, 275, 319, 477, 753, 298, 35, 1932, 2260, 22056, 299, 372, 322, 1628, 308, 578, 883, 526]}
{"line_number": 55, "line_type": "original", "code": "        reset(p1, p2);", "entropy": 1.7666015625, "is_bug_line": false, "sus_score": 0.22262, "per_token_entropy": [6.1640625, 8.5, 0.1568603515625, 0.99609375, 0.0206756591796875, 0.01165771484375, 0.01512908935546875, 0.0018177032470703125, 0.02850341796875], "tokens": [351, 5657, 26, 98, 35, 30, 298, 36, 293]}
{"line_number": 55, "line_type": "generated", "code": "\n    /** Get the point at abscissa <code>t</code>.\n     * @param t abscissa\n     * @return point at abscissa <code>t</code>\n     */\n    public Vector3D pointAt(final double", "entropy": 0.1744384765625, "is_bug_line": false, "sus_score": 0.22262, "per_token_entropy": [1.2744140625, 0.11529541015625, 0.61376953125, 0.304443359375, 1.4521484375, 0.226806640625, 0.634765625, 7.05718994140625e-05, 1.8477439880371094e-05, 0.6337890625, 0.034210205078125, 0.0006680488586425781, 0.97998046875, 0.00844573974609375, 0.0003857612609863281, 0.1182861328125, 0.08575439453125, 0.0005974769592285156, 0.350341796875, 0.00534820556640625, 0.0040283203125, 0.0120697021484375, 0.0003802776336669922, 4.9591064453125e-05, 0.53564453125, 0.00046062469482421875, 0.0003643035888671875, 0.0024623870849609375, 0.875, 0.03179931640625, 0.0162200927734375, 0.00028228759765625, 0.00023066997528076172, 0.1865234375, 0.002582550048828125, 0.00021028518676757812, 0.0013856887817382812, 0.0010499954223632812, 9.5367431640625e-07, 0.0250701904296875, 0.026031494140625, 0.17724609375, 0.0149993896484375, 0.027313232421875, 0.002132415771484375, 0.013519287109375, 1.0728836059570312e-06, 0.030914306640625, 0.00047016143798828125, 0.0005202293395996094, 0.23681640625, 0.00753021240234375], "tokens": [284, 1022, 1390, 322, 2260, 821, 1399, 545, 47250, 333, 687, 48, 102, 377, 687, 4503, 275, 319, 477, 753, 273, 1399, 545, 47250, 275, 319, 477, 601, 2260, 821, 1399, 545, 47250, 333, 687, 48, 102, 377, 687, 48, 275, 569, 284, 562, 4107, 37, 54, 2260, 1076, 26, 3220, 2064]}
