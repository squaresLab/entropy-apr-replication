{"line_number": 305, "line_type": "original", "code": "            return NaN;", "entropy": 3.66015625, "is_bug_line": true, "sus_score": 0.5267, "per_token_entropy": [6.765625, 2.64453125, 4.98828125, 0.2403564453125], "tokens": [1468, 442, 21644, 45]}
{"line_number": 305, "line_type": "generated", "code": "\n     * @return hash code for this Complex instance\n     */\n    @Override\n    public int hashCode() {\n        return 37 * Double.hashCode(real) ^ Double.hashCode(imaginary);\n    }\n\n    /**\n     * Get a string representation of", "entropy": 0.311279296875, "is_bug_line": true, "sus_score": 0.5267, "per_token_entropy": [0.978515625, 0.369384765625, 1.5712890625, 0.55908203125, 1.51953125, 0.0118865966796875, 0.06170654296875, 0.0225677490234375, 0.677734375, 0.734375, 0.17529296875, 0.17138671875, 0.0193328857421875, 0.01213836669921875, 5.9485435485839844e-05, 0.003688812255859375, 0.0009446144104003906, 0.0010290145874023438, 0.00040221214294433594, 0.0278167724609375, 0.01053619384765625, 0.0662841796875, 1.9580078125, 0.439453125, 0.127197265625, 0.4365234375, 0.035369873046875, 1.9072265625, 0.0027637481689453125, 0.1162109375, 0.0008921623229980469, 0.0254058837890625, 0.0030059814453125, 1.0244140625, 0.54443359375, 0.0002713203430175781, 0.00011539459228515625, 0.00016689300537109375, 0.0005602836608886719, 1.9431114196777344e-05, 0.0096893310546875, 0.013153076171875, 0.0020999908447265625, 0.13623046875, 0.0215606689453125, 0.2071533203125, 0.0002474784851074219, 1.798828125, 0.153564453125, 0.164794921875, 0.055816650390625, 0.01181793212890625], "tokens": [275, 319, 477, 601, 3677, 1340, 436, 458, 19915, 1980, 275, 569, 284, 477, 1788, 284, 562, 629, 17772, 346, 301, 291, 442, 225, 37, 41, 319, 6934, 32, 14948, 26, 4543, 27, 5304, 6934, 32, 14948, 26, 17792, 3172, 293, 284, 320, 446, 1022, 275, 319, 1390, 312, 802, 10293, 432]}
{"line_number": 345, "line_type": "original", "code": "            if (c.isNaN) {", "entropy": 2.298828125, "is_bug_line": false, "sus_score": 0.36001, "per_token_entropy": [7.5078125, 3.662109375, 0.1773681640625, 5.6640625, 0.54443359375, 0.4619140625, 0.235595703125, 0.1319580078125], "tokens": [1468, 415, 308, 85, 32, 26821, 27, 301]}
{"line_number": 345, "line_type": "generated", "code": "\n    public boolean isNaN() {\n        return isNaN;\n    }\n\n    /**\n     * Checks whether either or both parts of this complex number is infinite.\n     * A complex number is infinite if either (or both) real and imaginary\n     * parts are", "entropy": 0.139404296875, "is_bug_line": false, "sus_score": 0.36001, "per_token_entropy": [0.63427734375, 0.350341796875, 0.03570556640625, 0.0020427703857421875, 0.0002186298370361328, 0.10394287109375, 0.0245819091796875, 0.146484375, 0.00980377197265625, 0.106689453125, 0.000347137451171875, 0.0150146484375, 0.063232421875, 0.0017547607421875, 0.224365234375, 0.015533447265625, 0.033538818359375, 5.1975250244140625e-05, 0.376953125, 0.035888671875, 0.445068359375, 0.0408935546875, 0.00037097930908203125, 0.002452850341796875, 0.00032019615173339844, 0.01910400390625, 0.00574493408203125, 0.00235748291015625, 0.06231689453125, 0.70703125, 0.64599609375, 0.003841400146484375, 8.26120376586914e-05, 1.0810546875, 0.012237548828125, 8.58306884765625e-05, 0.049041748046875, 0.2130126953125, 0.0036602020263671875, 0.7314453125, 0.196533203125, 0.030029296875, 6.4373016357421875e-06, 0.0022735595703125, 0.048370361328125, 0.058135986328125, 0.1053466796875, 3.5762786865234375e-07, 0.391845703125, 0.0001270771026611328, 0.038848876953125, 0.17236328125], "tokens": [284, 562, 1905, 438, 11126, 346, 301, 291, 442, 438, 11126, 45, 284, 320, 446, 1022, 275, 319, 17279, 4946, 3154, 556, 4335, 8710, 432, 458, 8640, 1451, 438, 20280, 32, 275, 319, 399, 8640, 1451, 438, 20280, 415, 3154, 308, 271, 4335, 27, 4011, 461, 17463, 3172, 275, 319, 8710, 884]}
{"line_number": 304, "line_type": "original", "code": "        if (real == 0.0 && imaginary == 0.0) {", "entropy": 0.68408203125, "is_bug_line": false, "sus_score": 0.29454, "per_token_entropy": [5.3125, 1.7451171875, 0.15234375, 2.515625, 0.6513671875, 1.06640625, 0.034759521484375, 0.60546875, 0.030487060546875, 0.56787109375, 0.045013427734375, 0.0021457672119140625, 0.0728759765625, 0.01085662841796875, 0.0026264190673828125, 0.007568359375, 0.0005702972412109375, 0.1328125, 0.04437255859375], "tokens": [351, 415, 308, 4543, 610, 225, 34, 32, 34, 962, 17463, 3172, 610, 225, 34, 32, 34, 27, 301]}
{"line_number": 304, "line_type": "generated", "code": "\n\n    /**\n     * Returns {@code true} iff the values of both real and imaginary\n     * parts of this Complex number are exactly zero.\n     *\n     * @return {@code true} if both real and imaginary parts of this Complex\n     * number", "entropy": 0.219482421875, "is_bug_line": false, "sus_score": 0.29454, "per_token_entropy": [0.96728515625, 0.1014404296875, 0.1258544921875, 0.00019073486328125, 1.24609375, 0.6650390625, 0.0009493827819824219, 0.0181884765625, 0.0011148452758789062, 0.359619140625, 0.09967041015625, 0.0290679931640625, 0.203125, 0.2056884765625, 0.2066650390625, 0.0005335807800292969, 0.0003387928009033203, 2.384185791015625e-07, 1.166015625, 9.059906005859375e-06, 0.11444091796875, 0.1470947265625, 0.0168914794921875, 0.09716796875, 0.1448974609375, 0.182373046875, 1.3564453125, 0.8017578125, 0.252685546875, 0.0875244140625, 0.0005183219909667969, 0.046722412109375, 7.665157318115234e-05, 0.0099639892578125, 0.0014562606811523438, 0.0218658447265625, 4.398822784423828e-05, 0.0005865097045898438, 6.0558319091796875e-05, 0.1317138671875, 0.372802734375, 0.1280517578125, 0.0006012916564941406, 3.9696693420410156e-05, 5.960464477539062e-07, 0.0180511474609375, 0.0645751953125, 0.137939453125, 0.5029296875, 0.110107421875, 5.8650970458984375e-05, 1.271484375], "tokens": [446, 1022, 275, 319, 3759, 3088, 687, 861, 111, 44778, 322, 2078, 432, 4335, 4011, 461, 17463, 3172, 275, 319, 8710, 432, 458, 19915, 1451, 884, 11114, 5934, 32, 275, 319, 275, 319, 477, 601, 3088, 687, 861, 111, 415, 4335, 4011, 461, 17463, 3172, 8710, 432, 458, 19915, 275, 319, 1451]}
{"line_number": 340, "line_type": "original", "code": "        if (this == other) {", "entropy": 2.470703125, "is_bug_line": false, "sus_score": 0.29211, "per_token_entropy": [2.1484375, 11.6015625, 1.140625, 2.00390625, 1.158203125, 1.533203125, 0.12176513671875, 0.06109619140625], "tokens": [351, 415, 308, 578, 610, 1604, 27, 301]}
{"line_number": 340, "line_type": "generated", "code": "\n     * {@code Double.NaN}.\n     *\n     * @return {@code true} if either (or both) real and imaginary parts of\n     * this Complex number is {@code NaN}.\n     */\n    public boolean isNaN() {\n        return is", "entropy": 0.22314453125, "is_bug_line": false, "sus_score": 0.29211, "per_token_entropy": [1.1171875, 0.0210113525390625, 1.7001953125, 0.03753662109375, 0.97607421875, 0.00044226646423339844, 0.4013671875, 0.03314208984375, 0.065185546875, 0.0006232261657714844, 0.11639404296875, 0.00021457672119140625, 0.01251983642578125, 0.00421142578125, 0.0256805419921875, 0.0004096031188964844, 0.003490447998046875, 0.00030875205993652344, 0.03369140625, 0.18310546875, 0.32763671875, 0.00415802001953125, 5.841255187988281e-06, 0.0006909370422363281, 0.07623291015625, 0.09246826171875, 0.0171051025390625, 3.4570693969726562e-06, 0.41259765625, 0.5244140625, 0.2001953125, 3.7550926208496094e-05, 0.036865234375, 1.0390625, 1.3134765625, 0.370361328125, 0.336181640625, 0.0009622573852539062, 0.861328125, 0.994140625, 0.003688812255859375, 0.056060791015625, 0.007488250732421875, 0.07171630859375, 0.00548553466796875, 0.0018472671508789062, 0.00015985965728759766, 0.04736328125, 0.0034770965576171875, 0.052154541015625, 0.003429412841796875, 0.0081329345703125], "tokens": [275, 319, 3088, 687, 6934, 32, 11126, 4009, 275, 319, 275, 319, 477, 601, 3088, 687, 861, 111, 415, 3154, 308, 271, 4335, 27, 4011, 461, 17463, 3172, 8710, 432, 275, 319, 458, 19915, 1451, 438, 3088, 687, 21644, 4009, 275, 569, 284, 562, 1905, 438, 11126, 346, 301, 291, 442, 438]}
{"line_number": 348, "line_type": "original", "code": "                return (real == c.real) && (imaginary == c.imaginary);", "entropy": 0.95556640625, "is_bug_line": false, "sus_score": 0.27443, "per_token_entropy": [9.0859375, 1.759765625, 3.28515625, 0.849609375, 0.404296875, 1.767578125, 0.2410888671875, 0.1103515625, 0.1849365234375, 0.093505859375, 0.297607421875, 0.0062713623046875, 0.00023686885833740234, 0.006378173828125, 0.00579833984375, 0.00011432170867919922, 0.0051116943359375, 8.416175842285156e-05, 0.049713134765625], "tokens": [2071, 442, 308, 4543, 610, 281, 32, 4543, 27, 962, 308, 17792, 3172, 610, 281, 32, 17792, 3172, 293]}
{"line_number": 348, "line_type": "generated", "code": "\n\n    /**\n     * Checks whether either or both parts of this complex number is infinite\n     * (positive or negative infinity).\n     *\n     * @return {@code true} if either or both parts of this complex number is\n     * infinite; {@code false}", "entropy": 0.16259765625, "is_bug_line": false, "sus_score": 0.27443, "per_token_entropy": [1.2412109375, 0.052032470703125, 0.06793212890625, 8.58306884765625e-05, 1.5859375, 0.061431884765625, 0.3896484375, 0.053863525390625, 0.00037360191345214844, 0.002773284912109375, 0.0004265308380126953, 0.01397705078125, 0.005252838134765625, 0.0021076202392578125, 0.0792236328125, 0.48974609375, 0.6337890625, 0.0012845993041992188, 0.426025390625, 0.044281005859375, 0.01128387451171875, 0.0003104209899902344, 0.60986328125, 0.05615234375, 0.072998046875, 4.935264587402344e-05, 0.12445068359375, 7.081031799316406e-05, 0.004909515380859375, 0.002269744873046875, 0.435302734375, 0.0004520416259765625, 0.0037860870361328125, 0.0003554821014404297, 0.0210723876953125, 0.09320068359375, 0.0458984375, 0.0004661083221435547, 0.00919342041015625, 0.00205230712890625, 0.00553131103515625, 0.01373291015625, 0.0279083251953125, 0.2783203125, 0.2205810546875, 2.4199485778808594e-05, 0.1826171875, 1.072265625, 0.0003528594970703125, 0.00045108795166015625, 0.0022029876708984375, 0.0011072158813476562], "tokens": [446, 1022, 275, 319, 17279, 4946, 3154, 556, 4335, 8710, 432, 458, 8640, 1451, 438, 20280, 275, 319, 308, 18502, 556, 11003, 46936, 547, 275, 319, 275, 319, 477, 601, 3088, 687, 861, 111, 415, 3154, 556, 4335, 8710, 432, 458, 8640, 1451, 438, 275, 319, 20280, 45, 3088, 687, 901, 111]}
