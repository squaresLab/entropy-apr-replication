{"line_number": 711, "line_type": "original", "code": "            return 0;", "entropy": 3.029296875, "is_bug_line": false, "sus_score": 0.48851, "per_token_entropy": [6.1171875, 4.234375, 3.87890625, 0.271484375, 0.64794921875], "tokens": [1468, 442, 225, 34, 45]}
{"line_number": 711, "line_type": "generated", "code": "\n     */\n    public static long mulAndCheck(long a, long b) {\n        long m = a * b;\n        if (m < Long.MIN_VALUE || m > Long.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow", "entropy": 0.06976318359375, "is_bug_line": false, "sus_score": 0.48851, "per_token_entropy": [0.6240234375, 0.82861328125, 0.0426025390625, 0.0379638671875, 0.001201629638671875, 0.00794219970703125, 0.00634765625, 0.034149169921875, 0.0002703666687011719, 0.0005102157592773438, 0.039337158203125, 0.002140045166015625, 0.0012559890747070312, 0.001972198486328125, 4.6253204345703125e-05, 0.0038585662841796875, 0.019927978515625, 0.1136474609375, 0.171142578125, 1.16015625, 0.00345611572265625, 0.02301025390625, 0.01207733154296875, 0.0006399154663085938, 0.003772735595703125, 0.04315185546875, 0.0355224609375, 0.0272674560546875, 0.0447998046875, 0.08978271484375, 0.0992431640625, 0.0004322528839111328, 3.337860107421875e-06, 1.33514404296875e-05, 4.100799560546875e-05, 0.0023479461669921875, 0.007526397705078125, 0.0004870891571044922, 0.006927490234375, 8.046627044677734e-05, 9.608268737792969e-05, 9.775161743164062e-06, 5.364418029785156e-06, 0.00719451904296875, 0.00756072998046875, 0.0625, 0.0137939453125, 0.0011568069458007812, 0.0013990402221679688, 0.0003352165222167969, 0.0042724609375, 0.032470703125], "tokens": [275, 569, 284, 562, 907, 1946, 17476, 2185, 2140, 26, 3222, 312, 30, 1946, 323, 27, 301, 291, 1946, 345, 280, 312, 319, 323, 45, 291, 415, 308, 95, 333, 6359, 32, 4683, 81, 5975, 1276, 345, 848, 6359, 32, 3459, 81, 5975, 27, 301, 324, 1422, 537, 47721, 984, 440, 9642]}
{"line_number": 713, "line_type": "original", "code": "        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));", "entropy": 1.55859375, "is_bug_line": true, "sus_score": 0.45961, "per_token_entropy": [2.765625, 5.86328125, 3.439453125, 0.0855712890625, 1.388671875, 2.375, 0.162841796875, 0.08056640625, 0.04443359375, 5.22265625, 3.849609375, 0.01056671142578125, 0.1973876953125, 0.62939453125, 4.08984375, 0.646484375, 4.3046875, 0.07415771484375, 0.01428985595703125, 0.3955078125, 0.0703125, 0.0750732421875, 0.052520751953125], "tokens": [351, 629, 456, 4072, 280, 4175, 32, 3596, 26, 8829, 2185, 2140, 26, 83, 517, 43422, 26, 83, 30, 323, 471, 323, 876]}
{"line_number": 713, "line_type": "generated", "code": "\n     */\n    public static long mulAndCheck(long a, long b) {\n        long m = a * b;\n        if (m < Long.MIN_VALUE || m > Long.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow", "entropy": 0.060333251953125, "is_bug_line": true, "sus_score": 0.45961, "per_token_entropy": [0.6220703125, 0.2822265625, 0.04437255859375, 0.0214080810546875, 0.0009517669677734375, 0.0038471221923828125, 0.0015401840209960938, 0.0256805419921875, 8.90493392944336e-05, 0.0003142356872558594, 0.06842041015625, 0.0025806427001953125, 0.0012865066528320312, 0.00238800048828125, 7.545948028564453e-05, 0.0018529891967773438, 0.0263214111328125, 0.1519775390625, 0.157958984375, 1.0595703125, 0.003932952880859375, 0.0239105224609375, 0.01288604736328125, 0.0006189346313476562, 0.00390625, 0.08221435546875, 0.032684326171875, 0.0244140625, 0.06378173828125, 0.1568603515625, 0.13671875, 0.0010356903076171875, 8.344650268554688e-06, 6.508827209472656e-05, 5.042552947998047e-05, 0.00244903564453125, 0.006786346435546875, 0.00055694580078125, 0.007740020751953125, 0.00017535686492919922, 0.0001087188720703125, 1.800060272216797e-05, 8.58306884765625e-06, 0.008544921875, 0.00626373291015625, 0.03094482421875, 0.01222991943359375, 0.001155853271484375, 0.0009093284606933594, 0.00018548965454101562, 0.002971649169921875, 0.03778076171875], "tokens": [275, 569, 284, 562, 907, 1946, 17476, 2185, 2140, 26, 3222, 312, 30, 1946, 323, 27, 301, 291, 1946, 345, 280, 312, 319, 323, 45, 291, 415, 308, 95, 333, 6359, 32, 4683, 81, 5975, 1276, 345, 848, 6359, 32, 3459, 81, 5975, 27, 301, 324, 1422, 537, 47721, 984, 440, 9642]}
{"line_number": 714, "line_type": "original", "code": "        return lcm;", "entropy": 3.029296875, "is_bug_line": true, "sus_score": 0.40034, "per_token_entropy": [5.01953125, 1.908203125, 4.7109375, 0.806640625, 2.701171875], "tokens": [351, 442, 456, 4072, 45]}
{"line_number": 714, "line_type": "generated", "code": "\n     */\n    public static long mulAndCheck(long a, long b) {\n        long result = a * b;\n        final long MIN_VALUE = Long.MIN_VALUE;\n        final long MAX_VALUE = Long.MAX_VALUE;\n       ", "entropy": 0.11163330078125, "is_bug_line": true, "sus_score": 0.40034, "per_token_entropy": [1.4248046875, 0.06256103515625, 0.0489501953125, 0.0217132568359375, 0.0006737709045410156, 0.00365447998046875, 0.0016622543334960938, 0.0160980224609375, 0.0001239776611328125, 0.0002467632293701172, 0.036865234375, 0.0016813278198242188, 0.0010738372802734375, 0.0016145706176757812, 3.731250762939453e-05, 0.0015287399291992188, 0.0146026611328125, 0.056427001953125, 0.2291259765625, 0.91162109375, 0.00197601318359375, 0.0031604766845703125, 0.0096588134765625, 0.0004279613494873047, 0.0036182403564453125, 0.031585693359375, 1.486328125, 0.054962158203125, 1.0908203125, 0.0035037994384765625, 0.0309295654296875, 0.0033550262451171875, 0.090087890625, 0.001983642578125, 0.003650665283203125, 4.0531158447265625e-06, 1.5497207641601562e-05, 0.025909423828125, 0.0227813720703125, 0.0219268798828125, 0.00014710426330566406, 0.0003173351287841797, 8.463859558105469e-06, 0.0005369186401367188, 0.00016105175018310547, 0.0013780593872070312, 0.00019872188568115234, 0.00045680999755859375, 4.649162292480469e-06, 1.2159347534179688e-05, 0.0010509490966796875, 0.07879638671875], "tokens": [275, 569, 284, 562, 907, 1946, 17476, 2185, 2140, 26, 3222, 312, 30, 1946, 323, 27, 301, 291, 1946, 1056, 280, 312, 319, 323, 45, 291, 1158, 1946, 14369, 81, 5975, 280, 6359, 32, 4683, 81, 5975, 45, 291, 1158, 1946, 7482, 81, 5975, 280, 6359, 32, 3459, 81, 5975, 45, 291]}
{"line_number": 710, "line_type": "original", "code": "        if (a==0 || b==0){", "entropy": 1.19921875, "is_bug_line": false, "sus_score": 0.3798, "per_token_entropy": [2.55859375, 1.884765625, 0.247314453125, 1.2197265625, 1.9541015625, 0.56884765625, 0.77294921875, 0.0291595458984375, 0.054534912109375, 0.0041656494140625, 3.896484375], "tokens": [351, 415, 308, 83, 379, 34, 1276, 323, 379, 34, 1511]}
{"line_number": 710, "line_type": "generated", "code": "\n        if (b < 0) {\n            if (a == Long.MIN_VALUE || b == Long.MIN_VALUE) {\n                return a == b? 1 : 0;\n            }\n            if (a < 0) {", "entropy": 0.39208984375, "is_bug_line": false, "sus_score": 0.3798, "per_token_entropy": [1.5859375, 2.10546875, 0.27783203125, 1.380859375, 2.1796875, 0.414306640625, 0.0148468017578125, 0.211669921875, 0.03240966796875, 0.0928955078125, 0.405517578125, 0.0099029541015625, 0.030853271484375, 1.2919921875, 0.275634765625, 0.0017442703247070312, 0.0008721351623535156, 3.552436828613281e-05, 3.254413604736328e-05, 0.78271484375, 0.87255859375, 0.37353515625, 0.358154296875, 0.0005984306335449219, 0.0037479400634765625, 2.5391578674316406e-05, 0.0003783702850341797, 0.06097412109375, 0.0367431640625, 0.031158447265625, 0.68408203125, 1.7353515625, 0.97900390625, 0.1397705078125, 0.0182037353515625, 0.1251220703125, 0.7802734375, 0.1251220703125, 0.392578125, 0.00917816162109375, 0.004802703857421875, 0.0916748046875, 0.0007519721984863281, 0.412841796875, 1.2294921875, 0.043609619140625, 0.038909912109375, 0.5390625, 0.09527587890625, 0.0013971328735351562, 0.060760498046875, 0.050445556640625], "tokens": [291, 415, 308, 84, 333, 225, 34, 27, 301, 324, 415, 308, 83, 610, 6359, 32, 4683, 81, 5975, 1276, 323, 610, 6359, 32, 4683, 81, 5975, 27, 301, 400, 442, 312, 610, 323, 1018, 225, 35, 499, 225, 34, 45, 324, 320, 324, 415, 308, 83, 333, 225, 34, 27, 301]}
{"line_number": 562, "line_type": "original", "code": "            k++; // cast out twos.", "entropy": 5.9375, "is_bug_line": false, "sus_score": 0.3357, "per_token_entropy": [6.6640625, 9.5390625, 7.703125, 3.98828125, 10.8828125, 0.129150390625, 9.7109375, 2.5033950805664062e-06, 4.8046875], "tokens": [1468, 831, 3334, 434, 9936, 963, 8206, 500, 32]}
{"line_number": 562, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float", "entropy": 0.035919189453125, "is_bug_line": false, "sus_score": 0.3357, "per_token_entropy": [1.32421875, 0.01009368896484375, 0.11407470703125, 0.01384735107421875, 0.004489898681640625, 0.0006356239318847656, 0.055816650390625, 0.0526123046875, 0.006908416748046875, 0.0003559589385986328, 0.00013971328735351562, 0.00811767578125, 0.0019683837890625, 0.004291534423828125, 0.10931396484375, 0.0066986083984375, 0.001285552978515625, 0.00475311279296875, 3.2782554626464844e-05, 0.005878448486328125, 9.5367431640625e-06, 0.00139617919921875, 0.0002968311309814453, 0.0009641647338867188, 0.0016803741455078125, 0.0006742477416992188, 0.0001367330551147461, 2.3603439331054688e-05, 4.482269287109375e-05, 0.004131317138671875, 0.00010991096496582031, 1.800060272216797e-05, 0.00016605854034423828, 0.00039076805114746094, 0.0005407333374023438, 0.0005831718444824219, 0.0018148422241210938, 0.045745849609375, 0.00254058837890625, 0.0008306503295898438, 0.0001398324966430664, 0.00010073184967041016, 0.0014200210571289062, 6.520748138427734e-05, 0.00675201416015625, 0.0007433891296386719, 0.0008072853088378906, 9.083747863769531e-05, 0.01302337646484375, 0.005523681640625, 0.049896240234375, 0.0014867782592773438], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174]}
