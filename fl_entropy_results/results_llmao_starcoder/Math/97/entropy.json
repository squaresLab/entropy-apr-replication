{"line_number": 138, "line_type": "original", "code": "        if (sign >= 0) {", "entropy": 1.91015625, "is_bug_line": true, "sus_score": 0.59186, "per_token_entropy": [4.94921875, 3.9453125, 0.1246337890625, 3.6953125, 4.171875, 0.00255584716796875, 0.0032501220703125, 0.2384033203125, 0.0589599609375], "tokens": [351, 415, 308, 1333, 2377, 225, 34, 27, 301]}
{"line_number": 138, "line_type": "generated", "code": "\n            }\n\n            // compute the new approximation\n            double xm = x0 + (x2 - x0) * (y2 / (y2 - y0));\n            double ym = f.value(xm);\n\n            // check for convergence\n           ", "entropy": 0.357666015625, "is_bug_line": true, "sus_score": 0.59186, "per_token_entropy": [0.45458984375, 0.697265625, 0.689453125, 0.4462890625, 2.1796875, 0.2071533203125, 0.7021484375, 0.39013671875, 0.78857421875, 0.51318359375, 1.6826171875, 0.47021484375, 0.0439453125, 0.6689453125, 0.603515625, 0.5654296875, 1.1240234375, 0.326904296875, 0.49365234375, 0.033905029296875, 0.00274658203125, 0.041900634765625, 0.041748046875, 0.1817626953125, 0.97412109375, 0.269775390625, 0.64404296875, 0.210205078125, 0.0026988983154296875, 0.0008144378662109375, 0.024688720703125, 0.0052947998046875, 0.0032787322998046875, 0.10797119140625, 0.0474853515625, 0.310546875, 0.138671875, 0.1282958984375, 0.0020694732666015625, 0.0042877197265625, 0.01284027099609375, 0.00012063980102539062, 0.000530242919921875, 0.00032258033752441406, 0.0013780593872070312, 0.0008802413940429688, 0.4296875, 0.440185546875, 0.76171875, 0.56787109375, 0.055572509765625, 0.101318359375], "tokens": [324, 320, 1064, 434, 7596, 322, 537, 39431, 324, 2064, 816, 95, 280, 816, 34, 474, 308, 106, 36, 429, 816, 34, 27, 319, 308, 107, 36, 517, 308, 107, 36, 429, 533, 34, 876, 324, 2064, 533, 95, 280, 296, 32, 853, 26, 18974, 293, 1064, 434, 1505, 436, 47454, 324]}
{"line_number": 193, "line_type": "original", "code": "                setResult(x1, i);", "entropy": 1.4326171875, "is_bug_line": false, "sus_score": 0.54111, "per_token_entropy": [6.9921875, 4.62890625, 0.07098388671875, 0.0169525146484375, 0.0235443115234375, 0.055145263671875, 0.99365234375, 0.049835205078125, 0.06158447265625], "tokens": [2071, 739, 1394, 26, 106, 35, 30, 595, 293]}
{"line_number": 193, "line_type": "generated", "code": "\n            if (Math.abs(delta) > tolerance) {\n                // update the root-bracket\n                if (x1 > x0) {\n                    x2 = x1;\n                    y2 = y1;\n                } else {\n                    x2 =", "entropy": 0.322998046875, "is_bug_line": false, "sus_score": 0.54111, "per_token_entropy": [0.27880859375, 1.4384765625, 0.12396240234375, 0.72607421875, 0.0012674331665039062, 0.01128387451171875, 0.00199127197265625, 0.111083984375, 0.0171051025390625, 1.3662109375, 0.880859375, 0.024017333984375, 0.006107330322265625, 0.0330810546875, 1.302734375, 2.375, 0.81640625, 1.3310546875, 0.26171875, 0.332763671875, 1.57421875, 0.344970703125, 0.09490966796875, 0.291748046875, 0.33349609375, 0.57568359375, 0.007083892822265625, 0.4248046875, 0.0008592605590820312, 0.0020008087158203125, 0.0112457275390625, 0.1883544921875, 0.0035572052001953125, 0.0016994476318359375, 0.051025390625, 0.017425537109375, 0.01236724853515625, 0.2039794921875, 0.2105712890625, 0.00016820430755615234, 0.00017499923706054688, 0.0002276897430419922, 0.00016832351684570312, 0.0001430511474609375, 0.8408203125, 0.0019283294677734375, 0.020355224609375, 0.006786346435546875, 0.00269317626953125, 0.0626220703125, 0.06549072265625, 0.0008935928344726562], "tokens": [324, 415, 308, 5717, 32, 3596, 26, 6558, 27, 848, 26434, 27, 301, 400, 434, 1974, 322, 3051, 31, 32180, 400, 415, 308, 106, 35, 848, 816, 34, 27, 301, 528, 816, 36, 280, 816, 35, 45, 528, 533, 36, 280, 533, 35, 45, 400, 320, 813, 301, 528, 816, 36, 280]}
{"line_number": 194, "line_type": "original", "code": "                return result;", "entropy": 4.53515625, "is_bug_line": false, "sus_score": 0.28813, "per_token_entropy": [6.38671875, 9.40625, 2.34765625, 0.0072021484375], "tokens": [2071, 442, 1056, 45]}
{"line_number": 194, "line_type": "generated", "code": "\n        }\n        throw new MaxIterationsExceededException();\n    }", "entropy": 0.21435546875, "is_bug_line": false, "sus_score": 0.28813, "per_token_entropy": [1.4697265625, 0.01447296142578125, 0.52001953125, 0.131103515625, 0.00936126708984375, 0.0216217041015625, 0.0018243789672851562, 9.930133819580078e-05, 9.655952453613281e-05, 0.322021484375, 0.079833984375, 0.0026874542236328125], "tokens": [291, 320, 291, 1422, 537, 7462, 31219, 28741, 984, 473, 284, 320]}
{"line_number": 169, "line_type": "original", "code": "     */", "entropy": 7.96875, "is_bug_line": false, "sus_score": 0.28713, "per_token_entropy": [6.609375, 9.328125], "tokens": [262, 569]}
{"line_number": 169, "line_type": "generated", "code": "\n                } else {\n                    // Inverse quadratic interpolation.\n                    q = (y0 - y2) / (2.0 * dx);\n                    p = q * q - y1 / y0;\n                    p1 = 1.0 -", "entropy": 0.234375, "is_bug_line": false, "sus_score": 0.28713, "per_token_entropy": [0.338623046875, 0.0032100677490234375, 0.015625, 0.015594482421875, 0.06622314453125, 0.2452392578125, 0.084716796875, 0.12396240234375, 0.0012502670288085938, 8.785724639892578e-05, 0.0012922286987304688, 0.84912109375, 0.03338623046875, 0.783203125, 0.09765625, 0.552734375, 0.89453125, 0.53759765625, 0.1605224609375, 0.0029144287109375, 0.01074981689453125, 0.004344940185546875, 0.431640625, 0.056365966796875, 0.24169921875, 0.37939453125, 0.003864288330078125, 0.002353668212890625, 0.33984375, 0.0411376953125, 0.02764892578125, 0.79443359375, 0.39599609375, 0.362060546875, 0.00882720947265625, 0.65234375, 0.78955078125, 0.50732421875, 0.09619140625, 0.457275390625, 0.02886962890625, 0.372802734375, 0.0212249755859375, 0.0299530029296875, 0.40380859375, 0.11346435546875, 0.0013666152954101562, 0.525390625, 0.169677734375, 0.01103973388671875, 0.006244659423828125, 0.09014892578125], "tokens": [400, 320, 813, 301, 528, 434, 701, 3565, 28624, 689, 23334, 32, 528, 2678, 280, 308, 107, 34, 429, 533, 36, 27, 517, 308, 36, 32, 34, 319, 12211, 293, 528, 298, 280, 2678, 319, 2678, 429, 533, 35, 517, 533, 34, 45, 528, 298, 35, 280, 225, 35, 32, 34, 429]}
{"line_number": 133, "line_type": "original", "code": "        double yMin = f.value(min);", "entropy": 1.6806640625, "is_bug_line": false, "sus_score": 0.28128, "per_token_entropy": [4.41796875, 3.587890625, 0.218505859375, 5.96875, 0.0269622802734375, 2.556640625, 0.007236480712890625, 0.0035610198974609375, 0.0008945465087890625, 1.697265625, 0.00377655029296875], "tokens": [351, 2064, 533, 2928, 280, 296, 32, 853, 26, 887, 293]}
{"line_number": 133, "line_type": "generated", "code": "\n                y0 = y1;\n                x1 = x2;\n                y1 = y2;\n            }\n            \n            // compute the new approximation\n            double d = (x1 - x0) * y2 / (y1 - y2);\n           ", "entropy": 0.38427734375, "is_bug_line": false, "sus_score": 0.28128, "per_token_entropy": [0.310791015625, 0.31689453125, 0.00716400146484375, 0.0017080307006835938, 0.0026702880859375, 0.005138397216796875, 0.004352569580078125, 0.69287109375, 0.1868896484375, 0.72509765625, 0.0013494491577148438, 0.003635406494140625, 0.0012636184692382812, 0.0008263587951660156, 0.35693359375, 0.01995849609375, 0.0007987022399902344, 0.0003800392150878906, 0.0017290115356445312, 0.0005035400390625, 0.00043201446533203125, 1.025390625, 0.0022487640380859375, 2.12890625, 0.54052734375, 2.3203125, 0.45556640625, 0.8369140625, 0.56103515625, 0.73046875, 0.55126953125, 2.921875, 0.7255859375, 0.99755859375, 0.5361328125, 0.50048828125, 0.11175537109375, 0.002166748046875, 0.06396484375, 0.09747314453125, 0.66455078125, 0.332275390625, 0.1981201171875, 0.1986083984375, 0.0321044921875, 0.00409698486328125, 0.315185546875, 0.002864837646484375, 0.0010881423950195312, 0.28515625, 0.040191650390625, 0.1563720703125], "tokens": [400, 533, 34, 280, 533, 35, 45, 400, 816, 35, 280, 816, 36, 45, 400, 533, 35, 280, 533, 36, 45, 324, 320, 6428, 434, 7596, 322, 537, 39431, 324, 2064, 343, 280, 308, 106, 35, 429, 816, 34, 27, 319, 533, 36, 517, 308, 107, 35, 429, 533, 36, 293, 324]}
