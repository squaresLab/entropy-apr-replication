{"line_number": 991, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.8095703125, "is_bug_line": false, "sus_score": 0.3619, "per_token_entropy": [4.328125, 1.8388671875, 0.0023632049560546875, 0.0015106201171875, 3.689453125, 0.007678985595703125, 0.0104522705078125, 0.0016613006591796875, 0.00597381591796875, 0.00201416015625, 0.034088134765625, 4.4765625, 0.06427001953125, 0.043487548828125, 0.015380859375, 0.0173492431640625, 0.00786590576171875, 0.0208740234375], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 991, "line_type": "generated", "code": "\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = Math.sqrt(m.", "entropy": 0.02337646484375, "is_bug_line": false, "sus_score": 0.3619, "per_token_entropy": [0.51611328125, 0.3984375, 0.0015926361083984375, 0.001262664794921875, 0.02410888671875, 0.00119781494140625, 0.001018524169921875, 0.0005950927734375, 0.0007166862487792969, 0.0002830028533935547, 0.0035552978515625, 0.00974273681640625, 5.3048133850097656e-05, 0.0010023117065429688, 1.2516975402832031e-05, 0.00031638145446777344, 0.008026123046875, 0.000732421875, 0.00415802001953125, 0.01114654541015625, 0.006671905517578125, 0.00014412403106689453, 0.00040602684020996094, 0.00012505054473876953, 6.61611557006836e-05, 0.00016772747039794922, 3.337860107421875e-05, 0.00011241436004638672, 0.00016999244689941406, 0.0002465248107910156, 0.0002930164337158203, 4.1365623474121094e-05, 8.535385131835938e-05, 2.6226043701171875e-06, 7.426738739013672e-05, 0.0001627206802368164, 0.00019550323486328125, 0.0012636184692382812, 0.01380157470703125, 0.08319091796875, 0.00011456012725830078, 0.0008859634399414062, 0.00012731552124023438, 8.726119995117188e-05, 0.00012683868408203125, 0.0006728172302246094, 0.039642333984375, 0.002399444580078125, 0.016265869140625, 0.0004000663757324219, 0.06414794921875, 6.473064422607422e-05], "tokens": [291, 436, 308, 410, 540, 280, 225, 34, 45, 540, 333, 345, 32, 30093, 9883, 473, 540, 1987, 301, 324, 436, 308, 410, 281, 280, 225, 34, 45, 281, 333, 345, 32, 19239, 9883, 473, 281, 1987, 301, 400, 343, 77, 100, 1674, 85, 79, 280, 4175, 32, 8663, 26, 95, 32]}
{"line_number": 910, "line_type": "original", "code": "                double diff = boundaries[1][i] - boundaries[0][i];", "entropy": 1.033203125, "is_bug_line": false, "sus_score": 0.3435, "per_token_entropy": [7.19921875, 5.40234375, 3.697265625, 0.128662109375, 0.41259765625, 0.032196044921875, 0.06195068359375, 0.01059722900390625, 0.050628662109375, 0.0048065185546875, 0.037353515625, 0.50732421875, 0.0014677047729492188, 0.001544952392578125, 0.003192901611328125, 0.0005669593811035156, 0.006328582763671875], "tokens": [2071, 2064, 5839, 280, 28116, 77, 35, 1674, 91, 79, 429, 28116, 77, 34, 1674, 91, 970]}
{"line_number": 910, "line_type": "generated", "code": "\n         * @param point\n         * @param repaired\n         * @return penalty for violated bounds\n         */\n        private double penalty(final double[] point, final double[] repaired) {\n            double penalty = 0;\n            for (int i =", "entropy": 0.244384765625, "is_bug_line": false, "sus_score": 0.3435, "per_token_entropy": [0.5654296875, 0.0670166015625, 0.306884765625, 0.063232421875, 0.68359375, 1.9208984375, 0.02301025390625, 0.324951171875, 0.4580078125, 0.1617431640625, 0.00034332275390625, 0.1416015625, 0.091796875, 0.0084381103515625, 0.005260467529296875, 1.716796875, 0.92431640625, 1.4580078125, 0.0009551048278808594, 0.140625, 0.5712890625, 0.0273895263671875, 0.00855255126953125, 0.51708984375, 0.011962890625, 0.0009179115295410156, 0.0005354881286621094, 0.172119140625, 0.0009217262268066406, 0.002689361572265625, 0.005077362060546875, 0.0006361007690429688, 0.291259765625, 0.00037288665771484375, 0.0007815361022949219, 0.0032749176025390625, 7.62939453125e-06, 0.0018396377563476562, 0.0033092498779296875, 0.07537841796875, 0.1578369140625, 0.75, 0.0139007568359375, 0.0174407958984375, 0.0039825439453125, 0.630859375, 0.1007080078125, 0.2318115234375, 0.0019102096557617188, 0.004680633544921875, 0.041229248046875, 0.001720428466796875], "tokens": [276, 319, 477, 753, 2260, 276, 319, 477, 753, 316, 41376, 276, 319, 477, 601, 35806, 436, 8943, 23723, 11615, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064, 1178, 2260, 30, 1158, 2064, 1178, 316, 41376, 27, 301, 324, 2064, 35806, 280, 225, 34, 45, 324, 436, 308, 410, 595, 280]}
{"line_number": 949, "line_type": "original", "code": "                value = CMAESOptimizer.this", "entropy": 1.2294921875, "is_bug_line": false, "sus_score": 0.34248, "per_token_entropy": [4.70703125, 3.58984375, 1.7607421875, 0.97314453125, 0.00018513202667236328, 0.000278472900390625, 0.0028934478759765625, 0.02593994140625, 0.005279541015625], "tokens": [2071, 786, 280, 390, 1400, 940, 29248, 32, 578]}
{"line_number": 949, "line_type": "generated", "code": "\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired normalized objective variables.\n         * @return the penalty for violated bounds.\n         */\n        private double penalty(final", "entropy": 0.166259765625, "is_bug_line": false, "sus_score": 0.34248, "per_token_entropy": [0.8173828125, 0.046905517578125, 0.06298828125, 0.0117340087890625, 0.005832672119140625, 3.337860107421875e-06, 0.002346038818359375, 0.0533447265625, 0.0004680156707763672, 0.26953125, 0.044921875, 0.00960540771484375, 0.00022459030151367188, 0.1612548828125, 0.02703857421875, 0.66943359375, 0.433349609375, 0.0004611015319824219, 0.028839111328125, 0.007587432861328125, 0.0258941650390625, 0.0015869140625, 0.0015878677368164062, 0.0010519027709960938, 0.136962890625, 0.6005859375, 0.0004665851593017578, 0.157470703125, 0.004718780517578125, 1.203125, 0.04595947265625, 0.0146331787109375, 0.10260009765625, 0.009765625, 0.00823211669921875, 0.008636474609375, 0.002712249755859375, 0.378173828125, 0.274169921875, 1.05859375, 1.453125, 0.0010585784912109375, 0.1046142578125, 0.14208984375, 0.016082763671875, 0.0165863037109375, 0.005756378173828125, 0.09625244140625, 0.01198577880859375, 0.0016069412231445312, 0.0002968311309814453, 0.1123046875], "tokens": [324, 320, 324, 442, 316, 41376, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 17666, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220]}
