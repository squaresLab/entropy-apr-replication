{"line_number": 122, "line_type": "original", "code": "                        final double entry = tableau.getEntry(row, column);", "entropy": 1.9033203125, "is_bug_line": false, "sus_score": 0.42547, "per_token_entropy": [10.0625, 3.5703125, 0.2763671875, 2.9140625, 0.0831298828125, 0.032806396484375, 2.6702880859375e-05, 0.0017080307006835938, 0.0156097412109375, 0.00047850608825683594, 7.91015625, 0.0196533203125, 1.7490234375, 0.008148193359375], "tokens": [6797, 1158, 2064, 3414, 280, 1858, 4452, 32, 48895, 26, 643, 30, 2623, 293]}
{"line_number": 122, "line_type": "generated", "code": "\n        tableau.pivot(pivotRow, pivotCol);\n    }", "entropy": 0.218994140625, "is_bug_line": false, "sus_score": 0.42547, "per_token_entropy": [0.6123046875, 1.43359375, 5.459785461425781e-05, 0.01255035400390625, 0.224365234375, 0.006687164306640625, 0.0033817291259765625, 0.296875, 0.007030487060546875, 0.003437042236328125, 0.0014362335205078125, 0.031646728515625, 0.4287109375, 0.003993988037109375], "tokens": [291, 1858, 4452, 32, 23444, 26, 23444, 2352, 30, 20991, 871, 293, 284, 320]}
{"line_number": 231, "line_type": "original", "code": "", "entropy": 0.57080078125, "is_bug_line": false, "sus_score": 0.31493, "per_token_entropy": [0.57080078125], "tokens": [203]}
{"line_number": 231, "line_type": "generated", "code": "\n    /** {@inheritDoc} */\n    @Override\n    public PointValuePair getOptimalSolution() {\n        return getRawOptimalSolution();\n    }", "entropy": 0.44189453125, "is_bug_line": false, "sus_score": 0.31493, "per_token_entropy": [1.830078125, 0.1778564453125, 1.3359375, 0.0008654594421386719, 0.00437164306640625, 0.004642486572265625, 0.14453125, 0.055999755859375, 0.0019235610961914062, 0.040008544921875, 0.15966796875, 1.2607421875, 0.10504150390625, 1.3779296875, 1.7880859375, 0.02130126953125, 1.0888671875, 0.0008139610290527344, 0.21533203125, 0.06463623046875, 0.270751953125, 1.2958984375, 1.322265625, 0.07171630859375, 0.03143310546875, 0.01251983642578125, 0.0709228515625, 0.05419921875, 0.007289886474609375], "tokens": [284, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 6431, 14782, 622, 5482, 2977, 13628, 346, 301, 291, 442, 622, 6189, 5482, 2977, 13628, 473, 284, 320]}
{"line_number": 121, "line_type": "original", "code": "                        int column = i + tableau.getArtificialVariableOffset();", "entropy": 2.69921875, "is_bug_line": false, "sus_score": 0.28912, "per_token_entropy": [9.25, 4.65234375, 3.4765625, 0.146728515625, 8.328125, 3.0546875, 0.394287109375, 0.0006399154663085938, 0.002086639404296875, 5.87109375, 2.83984375, 0.0009760856628417969, 1.6298828125, 0.81884765625, 0.044708251953125], "tokens": [6797, 629, 2623, 280, 595, 474, 1858, 4452, 32, 371, 5271, 31251, 3818, 3457, 473]}
{"line_number": 121, "line_type": "generated", "code": "\n        }\n\n        tableau.pivot(pivotRow, pivotCol);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void doPhase(final List<Phase> phases) {\n        SimplexTableau tableau = (Simp", "entropy": 0.45947265625, "is_bug_line": false, "sus_score": 0.28912, "per_token_entropy": [0.346923828125, 0.017791748046875, 0.63232421875, 1.7197265625, 1.5974044799804688e-05, 0.0296478271484375, 0.1759033203125, 0.004436492919921875, 0.0027370452880859375, 0.3349609375, 0.0033016204833984375, 0.0018835067749023438, 0.0009403228759765625, 0.021728515625, 0.55615234375, 0.00820159912109375, 0.391845703125, 0.07098388671875, 0.11407470703125, 5.328655242919922e-05, 3.123046875, 0.051177978515625, 0.0032958984375, 0.01056671142578125, 0.2890625, 0.01336669921875, 0.259521484375, 0.002651214599609375, 0.039276123046875, 0.53173828125, 0.80517578125, 1.52734375, 0.66552734375, 0.277587890625, 0.427734375, 2.375, 0.004711151123046875, 2.013671875, 0.038177490234375, 0.4833984375, 0.7119140625, 1.75390625, 0.2587890625, 2.099609375, 2.384185791015625e-07, 0.034820556640625, 0.0002791881561279297, 0.052825927734375, 0.00028514862060546875, 0.041778564453125, 1.5517578125, 0.002384185791015625], "tokens": [291, 320, 584, 1858, 4452, 32, 23444, 26, 23444, 2352, 30, 20991, 871, 293, 284, 320, 446, 1022, 275, 319, 3088, 18446, 111, 275, 569, 284, 477, 1788, 284, 2522, 763, 745, 12230, 26, 3220, 1682, 46, 12230, 48, 43887, 27, 301, 291, 28421, 1909, 1599, 4452, 1858, 4452, 280, 308, 31390]}
{"line_number": 230, "line_type": "original", "code": "    }", "entropy": 1.61328125, "is_bug_line": false, "sus_score": 0.27692, "per_token_entropy": [2.021484375, 1.2041015625], "tokens": [264, 320]}
{"line_number": 230, "line_type": "generated", "code": "    // check for unboundedness\n        if (getGoalType() == GoalType.MINIMIZE &&\n            tableau.getEntry(0, tableau.getRhsOffset()) < -epsilon) {\n            throw new UnboundedSolutionException();", "entropy": 0.49365234375, "is_bug_line": false, "sus_score": 0.27692, "per_token_entropy": [2.02734375, 2.828125, 3.37109375, 1.5234375, 1.2197265625, 0.005893707275390625, 0.5517578125, 1.1748046875, 0.388427734375, 0.67041015625, 2.02734375, 0.024505615234375, 0.0011453628540039062, 0.35400390625, 0.04559326171875, 0.006488800048828125, 0.0013980865478515625, 3.647804260253906e-05, 0.43798828125, 0.01131439208984375, 0.0006814002990722656, 0.74951171875, 1.443359375, 1.0166015625, 1.3709068298339844e-05, 0.001148223876953125, 1.216796875, 0.0009889602661132812, 0.55810546875, 0.0001729726791381836, 0.0626220703125, 0.00014102458953857422, 0.00015175342559814453, 0.06744384765625, 1.7881393432617188e-06, 0.0002582073211669922, 0.0249176025390625, 1.3330078125, 0.736328125, 0.480224609375, 0.050567626953125, 0.00762176513671875, 0.1435546875, 0.08758544921875, 0.0011463165283203125, 0.01678466796875, 2.1457672119140625e-05, 9.810924530029297e-05, 5.960464477539062e-07, 0.018829345703125], "tokens": [264, 434, 1505, 436, 707, 28959, 4321, 291, 415, 308, 371, 17357, 620, 346, 610, 42010, 620, 32, 4683, 2331, 8484, 962, 324, 1858, 4452, 32, 48895, 26, 34, 30, 1858, 4452, 32, 43907, 3914, 3457, 1157, 333, 429, 20094, 27, 301, 324, 1422, 537, 1683, 28959, 13628, 984, 473]}
