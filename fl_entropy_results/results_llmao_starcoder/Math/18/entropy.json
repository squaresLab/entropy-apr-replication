{"line_number": 1035, "line_type": "original", "code": "                double diff = Math.abs(x[i] - repaired[i]);", "entropy": 1.4658203125, "is_bug_line": false, "sus_score": 0.33375, "per_token_entropy": [7.45703125, 4.2734375, 6.03515625, 0.09747314453125, 1.7998046875, 0.0175933837890625, 0.560546875, 0.030731201171875, 3.90625, 0.44970703125, 0.57666015625, 0.12335205078125, 0.0283966064453125, 0.931640625, 0.000789642333984375, 0.009796142578125, 0.003887176513671875, 0.0823974609375], "tokens": [2071, 2064, 5839, 280, 4175, 32, 3596, 26, 106, 77, 91, 79, 429, 316, 41376, 77, 91, 1989]}
{"line_number": 1035, "line_type": "generated", "code": "\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise absolute value of m.\n     */\n    private static RealMatrix abs(final RealMatrix", "entropy": 0.08306884765625, "is_bug_line": false, "sus_score": 0.33375, "per_token_entropy": [0.13525390625, 0.04541015625, 0.0307159423828125, 0.0036106109619140625, 0.00010013580322265625, 3.6597251892089844e-05, 4.184246063232422e-05, 2.1457672119140625e-05, 3.933906555175781e-06, 0.0009698867797851562, 0.003948211669921875, 0.029052734375, 0.01256561279296875, 0.0013399124145507812, 0.06463623046875, 0.004039764404296875, 0.340087890625, 0.187744140625, 0.0119781494140625, 0.00027680397033691406, 0.1634521484375, 0.007232666015625, 0.2353515625, 0.47998046875, 0.019256591796875, 0.061004638671875, 0.0004429817199707031, 0.0003440380096435547, 0.232177734375, 0.1463623046875, 0.0196533203125, 0.02618408203125, 0.0911865234375, 0.0026264190673828125, 0.0008449554443359375, 1.7119140625, 0.07098388671875, 0.03729248046875, 0.01099395751953125, 0.036956787109375, 0.0033397674560546875, 0.0012197494506835938, 0.0024814605712890625, 0.01244354248046875, 0.0080718994140625, 0.00162506103515625, 8.20159912109375e-05, 0.043487548828125, 0.009552001953125, 0.0110931396484375, 0.0007467269897460938, 1.3232231140136719e-05], "tokens": [291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 4237, 5045, 275, 319, 477, 601, 9320, 12681, 322, 1994, 31, 3767, 7976, 786, 432, 345, 32, 275, 569, 284, 945, 907, 11443, 4161, 11366, 26, 3220, 11443, 4161]}
{"line_number": 514, "line_type": "original", "code": "                hasFiniteBounds = true;", "entropy": 2.419921875, "is_bug_line": false, "sus_score": 0.31332, "per_token_entropy": [4.125, 11.0390625, 0.7958984375, 0.089599609375, 0.22705078125, 0.6455078125, 0.016845703125], "tokens": [2071, 1401, 40643, 8285, 280, 861, 45]}
{"line_number": 514, "line_type": "generated", "code": "\n            }\n        }\n    }\n\n    /**\n     * Returns the number of iterations.\n     *\n     * @return the number of iterations\n     */\n    public int getIterations() {\n        return iterations;\n    }\n\n    /**\n     * Returns the best value of the objective", "entropy": 0.3857421875, "is_bug_line": false, "sus_score": 0.31332, "per_token_entropy": [1.0419921875, 0.004360198974609375, 0.11505126953125, 0.001552581787109375, 0.83349609375, 0.0025386810302734375, 0.4208984375, 0.12890625, 0.058441162109375, 7.069110870361328e-05, 2.6171875, 0.50439453125, 3.396484375, 0.00930023193359375, 1.5185546875, 1.0048828125, 0.0765380859375, 0.037689208984375, 0.4716796875, 0.0034084320068359375, 0.015106201171875, 0.0035762786865234375, 0.2144775390625, 0.1435546875, 0.0008435249328613281, 0.01041412353515625, 0.24462890625, 0.1937255859375, 0.0125885009765625, 0.236572265625, 0.04638671875, 0.451171875, 0.052825927734375, 0.016845703125, 0.0037975311279296875, 0.0305938720703125, 0.0242462158203125, 0.060546875, 0.006801605224609375, 0.0036678314208984375, 0.0003972053527832031, 0.2230224609375, 0.0283203125, 0.02044677734375, 7.021427154541016e-05, 0.64306640625, 0.10467529296875, 1.3984375, 1.880859375, 0.434814453125, 0.08251953125, 1.2265625], "tokens": [324, 320, 291, 320, 284, 320, 446, 1022, 275, 319, 3759, 322, 1451, 432, 17576, 32, 275, 319, 275, 319, 477, 601, 322, 1451, 432, 17576, 275, 569, 284, 562, 629, 622, 31219, 346, 301, 291, 442, 17576, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 5273, 786, 432, 322, 25110]}
{"line_number": 1018, "line_type": "original", "code": "                } else if (x[i] > 1.0) {", "entropy": 1.14453125, "is_bug_line": false, "sus_score": 0.27793, "per_token_entropy": [2.951171875, 5.15234375, 5.23828125, 2.234375, 0.057525634765625, 2.017578125, 0.1483154296875, 0.0732421875, 0.009002685546875, 0.1583251953125, 0.047271728515625, 0.052947998046875, 0.108642578125, 0.0025482177734375, 0.033782958984375, 0.031341552734375], "tokens": [2071, 320, 813, 415, 308, 106, 77, 91, 79, 848, 225, 35, 32, 34, 27, 301]}
{"line_number": 1018, "line_type": "generated", "code": "\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m\n     *            Input matrix\n     * @return Matrix representing the element-wise absolute value of m.\n     */\n    private static", "entropy": 0.10699462890625, "is_bug_line": false, "sus_score": 0.27793, "per_token_entropy": [0.309814453125, 0.0081634521484375, 0.016265869140625, 0.00013256072998046875, 0.0298919677734375, 0.004974365234375, 0.00269317626953125, 0.00026106834411621094, 1.52587890625e-05, 1.1444091796875e-05, 4.303455352783203e-05, 1.7881393432617188e-06, 6.318092346191406e-06, 0.00015914440155029297, 0.001018524169921875, 0.04071044921875, 0.00811004638671875, 0.0004963874816894531, 0.1629638671875, 0.00048828125, 0.261962890625, 0.1507568359375, 0.0157928466796875, 0.00027441978454589844, 0.2373046875, 0.01444244384765625, 0.264404296875, 0.470458984375, 0.00018799304962158203, 0.020172119140625, 0.07568359375, 0.01535797119140625, 0.0965576171875, 0.0007171630859375, 0.0012464523315429688, 0.162841796875, 0.099853515625, 0.035614013671875, 0.0287933349609375, 0.06561279296875, 0.0022983551025390625, 0.0005002021789550781, 2.814453125, 0.0401611328125, 0.0220794677734375, 0.010711669921875, 0.0261383056640625, 0.002994537353515625, 0.0015630722045898438, 0.0042877197265625, 0.018951416015625, 0.0122833251953125], "tokens": [324, 320, 291, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 275, 319, 1468, 4237, 5045, 275, 319, 477, 601, 9320, 12681, 322, 1994, 31, 3767, 7976, 786, 432, 345, 32, 275, 569, 284, 945, 907]}
{"line_number": 971, "line_type": "original", "code": "                value = CMAESOptimizer.this", "entropy": 1.8701171875, "is_bug_line": false, "sus_score": 0.27444, "per_token_entropy": [6.17578125, 8.625, 0.89990234375, 1.091796875, 0.00028228759765625, 0.0002435445785522461, 0.0038204193115234375, 0.0264129638671875, 0.005954742431640625], "tokens": [2071, 786, 280, 390, 1400, 940, 29248, 32, 578]}
{"line_number": 971, "line_type": "generated", "code": "\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param y Repaired normalized objective variables.\n         * @return the penalty for violated bounds.\n         */\n        private double penalty(", "entropy": 0.19140625, "is_bug_line": false, "sus_score": 0.27444, "per_token_entropy": [1.3486328125, 0.01027679443359375, 0.0224609375, 0.0010271072387695312, 0.02520751953125, 0.006977081298828125, 0.0021610260009765625, 5.960464477539062e-07, 0.0004458427429199219, 0.00934600830078125, 0.0002529621124267578, 0.13525390625, 0.0399169921875, 0.0109710693359375, 0.0003113746643066406, 0.1904296875, 0.021240234375, 0.6875, 0.383056640625, 0.0005602836608886719, 0.031829833984375, 0.0085601806640625, 0.031829833984375, 0.0019893646240234375, 0.0011072158813476562, 0.0004992485046386719, 0.1629638671875, 1.322265625, 0.375244140625, 0.006320953369140625, 1.0126953125, 0.016448974609375, 0.0121917724609375, 0.06683349609375, 0.00817108154296875, 0.005672454833984375, 0.0028285980224609375, 0.0022144317626953125, 0.319091796875, 0.27490234375, 1.1298828125, 1.8681640625, 0.0011358261108398438, 0.11376953125, 0.156005859375, 0.0172271728515625, 0.017364501953125, 0.002315521240234375, 0.073486328125, 0.01264190673828125, 0.0014400482177734375, 0.00026679039001464844], "tokens": [400, 320, 324, 320, 324, 442, 316, 41376, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 533, 902, 41376, 17666, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26]}
