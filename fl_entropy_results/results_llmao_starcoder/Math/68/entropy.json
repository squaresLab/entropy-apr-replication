{"line_number": 514, "line_type": "original", "code": "            sum2 = 0;", "entropy": 1.8896484375, "is_bug_line": false, "sus_score": 0.48513, "per_token_entropy": [7.046875, 6.09765625, 0.03778076171875, 0.001056671142578125, 0.0107879638671875, 9.143352508544922e-05, 0.035186767578125], "tokens": [1468, 3632, 36, 280, 225, 34, 45]}
{"line_number": 514, "line_type": "generated", "code": "\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double sum = 0;\n                for (int i = 0; i < j; ++i) {\n                    sum", "entropy": 0.015411376953125, "is_bug_line": false, "sus_score": 0.48513, "per_token_entropy": [0.06072998046875, 0.50048828125, 0.0003941059112548828, 9.632110595703125e-05, 0.00830841064453125, 0.0006580352783203125, 0.00107574462890625, 0.0001251697540283203, 0.0005712509155273438, 0.0003273487091064453, 0.00048041343688964844, 0.007579803466796875, 0.0001862049102783203, 0.0001837015151977539, 0.0008249282836914062, 3.2782554626464844e-05, 0.00011169910430908203, 0.00040912628173828125, 0.0012836456298828125, 0.031890869140625, 0.0010623931884765625, 0.00015246868133544922, 6.437301635742188e-05, 0.00029015541076660156, 7.62939453125e-06, 7.390975952148438e-05, 0.0007843971252441406, 0.053314208984375, 0.04779052734375, 0.004169464111328125, 0.007251739501953125, 6.794929504394531e-06, 0.0022487640380859375, 0.0010852813720703125, 0.006244659423828125, 0.0003097057342529297, 3.7789344787597656e-05, 0.0015401840209960938, 0.000186920166015625, 0.0009288787841796875, 7.545948028564453e-05, 0.00013148784637451172, 0.00017523765563964844, 0.033721923828125, 0.01325225830078125, 0.0003142356872558594, 0.0006175041198730469, 6.532669067382812e-05, 0.0001970529556274414, 0.0003273487091064453, 0.0010280609130859375, 0.00829315185546875], "tokens": [324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 629, 46704, 280, 38151, 77, 92, 970, 400, 2064, 3632, 280, 225, 34, 45, 400, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 594, 45, 3311, 91, 27, 301, 528, 3632]}
{"line_number": 593, "line_type": "original", "code": "                for (int i = j + 1; i < solvedCols; ++i) {", "entropy": 0.70947265625, "is_bug_line": false, "sus_score": 0.43736, "per_token_entropy": [8.25, 4.21875, 0.004032135009765625, 0.00528717041015625, 0.50439453125, 0.004550933837890625, 0.228515625, 0.54345703125, 0.0026073455810546875, 0.00141143798828125, 0.0038547515869140625, 0.001995086669921875, 0.004547119140625, 0.024871826171875, 0.3681640625, 0.0012102127075195312, 0.005985260009765625, 0.00019490718841552734, 0.0055389404296875, 0.01161956787109375], "tokens": [2071, 436, 308, 410, 595, 280, 594, 474, 225, 35, 45, 595, 333, 19479, 19911, 45, 3311, 91, 27, 301]}
{"line_number": 593, "line_type": "generated", "code": "\n            lmDiag[j] = diag[permutation[j]];\n            work[j] = qy[permutation[j]];\n        }\n\n        // eliminate the diagonal matrix d using a Givens rotation\n        for (int j = 0; j <", "entropy": 0.10357666015625, "is_bug_line": false, "sus_score": 0.43736, "per_token_entropy": [0.09027099609375, 0.4052734375, 0.335205078125, 0.0005407333374023438, 0.07232666015625, 0.00035881996154785156, 0.0057220458984375, 0.02239990234375, 0.00302886962890625, 0.91015625, 0.0008907318115234375, 0.004657745361328125, 0.04522705078125, 0.7236328125, 0.22119140625, 0.0003325939178466797, 0.0298614501953125, 0.000736236572265625, 0.07049560546875, 0.1280517578125, 0.00022220611572265625, 0.0002887248992919922, 0.295654296875, 0.00013625621795654297, 0.00024139881134033203, 0.196044921875, 0.1519775390625, 0.0009455680847167969, 0.1302490234375, 0.1409912109375, 0.63916015625, 0.00013065338134765625, 0.40234375, 0.006771087646484375, 0.01287841796875, 0.0003123283386230469, 0.00040268898010253906, 0.161865234375, 0.0036487579345703125, 3.5762786865234375e-06, 0.0202178955078125, 0.0246124267578125, 0.0262451171875, 0.00019466876983642578, 0.00029778480529785156, 0.07952880859375, 0.0011005401611328125, 0.00424957275390625, 0.00963592529296875, 0.002582550048828125, 0.0012454986572265625, 0.0004017353057861328], "tokens": [324, 30780, 26244, 77, 92, 79, 280, 15534, 77, 40237, 77, 92, 19730, 324, 1389, 77, 92, 79, 280, 2678, 107, 77, 40237, 77, 92, 19730, 291, 320, 584, 434, 40533, 322, 27601, 5045, 343, 1471, 312, 570, 387, 1229, 11410, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333]}
{"line_number": 589, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.634765625, "is_bug_line": false, "sus_score": 0.43658, "per_token_entropy": [8.625, 2.021484375, 0.00496673583984375, 0.0050811767578125, 0.399658203125, 0.00986480712890625, 0.0178680419921875, 0.01043701171875, 0.0077667236328125, 0.0004949569702148438, 0.0039825439453125, 0.189453125, 0.043487548828125, 0.003231048583984375, 0.01397705078125, 0.00011706352233886719, 0.0016450881958007812, 0.0643310546875], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 589, "line_type": "generated", "code": "\n        // copy r and (q transpose)*b to preserve input and initialize s.\n        // in particular, save the diagonal elements of r in x.\n        for (int j = 0; j < solvedCols; ++j) {\n            work[", "entropy": 0.14013671875, "is_bug_line": false, "sus_score": 0.43658, "per_token_entropy": [0.1597900390625, 0.9501953125, 1.59375, 0.416015625, 0.1405029296875, 0.0247344970703125, 0.0004420280456542969, 0.024810791015625, 0.005840301513671875, 0.00044465065002441406, 0.039459228515625, 0.006420135498046875, 0.0770263671875, 0.003681182861328125, 0.0021305084228515625, 0.01262664794921875, 0.50732421875, 0.038238525390625, 0.1441650390625, 0.0067138671875, 0.0302581787109375, 5.805492401123047e-05, 0.0028133392333984375, 0.0016202926635742188, 0.00975799560546875, 0.0054473876953125, 1.3589859008789062e-05, 0.0007219314575195312, 0.097412109375, 0.005706787109375, 0.06005859375, 0.66259765625, 0.6171875, 0.0018939971923828125, 0.0011415481567382812, 0.07061767578125, 0.0023136138916015625, 0.00811004638671875, 0.005706787109375, 0.00577545166015625, 0.00022614002227783203, 0.001598358154296875, 0.242919921875, 0.0765380859375, 0.0012302398681640625, 0.012969970703125, 6.210803985595703e-05, 0.00081634521484375, 0.00545501708984375, 0.023040771484375, 1.146484375, 0.0293121337890625], "tokens": [291, 434, 1933, 540, 461, 308, 99, 27224, 4586, 84, 372, 24070, 1509, 461, 7379, 309, 32, 291, 434, 328, 8409, 30, 4131, 322, 27601, 4702, 432, 540, 328, 816, 32, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 324, 1389, 77]}
{"line_number": 521, "line_type": "original", "code": "                double s = (work1[pj] - sum) / diagR[pj];", "entropy": 1.69921875, "is_bug_line": false, "sus_score": 0.43279, "per_token_entropy": [4.1015625, 4.72265625, 1.6484375, 2.509765625, 4.62109375, 2.41015625, 0.6259765625, 0.004802703857421875, 0.016937255859375, 0.02081298828125, 1.5771484375, 5.5703125, 0.98388671875, 0.364013671875, 2.068359375, 0.98388671875, 0.002857208251953125, 0.0290374755859375, 0.0234375], "tokens": [2071, 2064, 309, 280, 308, 1007, 35, 77, 25287, 79, 429, 3632, 27, 517, 15534, 68, 77, 25287, 970]}
{"line_number": 521, "line_type": "generated", "code": "\n                dxNorm += s * s;\n            }\n            dxNorm = Math.sqrt(dxNorm);\n            double fp = dxNorm - delta;\n\n            // check the new value of lmPar\n            if (fp <= 0.1 * delta) {", "entropy": 0.06915283203125, "is_bug_line": false, "sus_score": 0.43279, "per_token_entropy": [0.10382080078125, 0.120361328125, 0.00032973289489746094, 0.005138397216796875, 0.0191650390625, 0.0016317367553710938, 0.0017061233520507812, 0.0005016326904296875, 0.0318603515625, 8.249282836914062e-05, 0.055694580078125, 0.1322021484375, 0.0015544891357421875, 7.832050323486328e-05, 0.0008234977722167969, 0.00010633468627929688, 0.0002853870391845703, 5.066394805908203e-05, 0.0010557174682617188, 1.919269561767578e-05, 0.0003972053527832031, 0.035125732421875, 0.016876220703125, 0.98828125, 0.407958984375, 0.0019311904907226562, 5.364418029785156e-06, 4.398822784423828e-05, 0.0002613067626953125, 0.00031256675720214844, 0.0838623046875, 0.043975830078125, 0.2174072265625, 0.48876953125, 0.10772705078125, 0.25732421875, 4.410743713378906e-06, 0.026763916015625, 9.393692016601562e-05, 0.00600433349609375, 0.00266265869140625, 0.02301025390625, 0.0164337158203125, 0.36083984375, 0.00012981891632080078, 1.5497207641601562e-06, 0.00019049644470214844, 3.4928321838378906e-05, 0.0026683807373046875, 7.557868957519531e-05, 0.0286102294921875, 0.00164794921875], "tokens": [400, 12211, 14373, 1454, 309, 319, 309, 45, 324, 320, 324, 12211, 14373, 280, 4175, 32, 8663, 26, 4582, 14373, 293, 324, 2064, 11828, 280, 12211, 14373, 429, 7715, 45, 1064, 434, 1505, 322, 537, 786, 432, 30780, 926, 324, 415, 308, 4426, 2511, 225, 34, 32, 35, 319, 7715, 27, 301]}
