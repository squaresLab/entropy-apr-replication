{"line_number": 783, "line_type": "original", "code": "     *", "entropy": 2.4296875, "is_bug_line": false, "sus_score": 0.38641, "per_token_entropy": [4.73828125, 0.12091064453125], "tokens": [262, 319]}
{"line_number": 783, "line_type": "generated", "code": "\n     * @param row Row to be fetched.\n     * @param column Column to be fetched.\n     * @return the matrix entry in [row,column]\n     * @throws MatrixIndexException if the row or column index is not valid\n     */\n   ", "entropy": 0.212890625, "is_bug_line": false, "sus_score": 0.38641, "per_token_entropy": [0.113037109375, 0.004428863525390625, 0.04638671875, 0.003757476806640625, 0.0002646446228027344, 1.14453125, 1.2451171875, 0.0192108154296875, 0.040740966796875, 0.347412109375, 0.0031280517578125, 1.728534698486328e-05, 0.00013148784637451172, 0.00013554096221923828, 0.08270263671875, 0.002895355224609375, 0.0003314018249511719, 0.0003514289855957031, 0.0005998611450195312, 0.01043701171875, 0.00905609130859375, 0.0004439353942871094, 0.002025604248046875, 0.00679779052734375, 1.6962890625, 0.0997314453125, 0.036956787109375, 0.1402587890625, 2.056640625, 0.0010547637939453125, 0.0594482421875, 0.35791015625, 0.6123046875, 0.0184173583984375, 0.0029506683349609375, 0.00238800048828125, 0.10003662109375, 0.0096588134765625, 0.00199127197265625, 0.00018537044525146484, 0.06500244140625, 0.41796875, 0.399169921875, 0.183837890625, 0.0433349609375, 0.5517578125, 0.0633544921875, 0.67919921875, 0.0020313262939453125, 0.2919921875, 0.057708740234375, 0.032470703125], "tokens": [275, 319, 477, 753, 2698, 5570, 372, 526, 27535, 32, 275, 319, 477, 753, 2623, 7723, 372, 526, 27535, 32, 275, 319, 477, 601, 322, 5045, 3414, 328, 428, 643, 30, 2592, 79, 275, 319, 477, 5117, 9320, 1284, 984, 415, 322, 2698, 556, 2623, 1650, 438, 646, 2080, 275, 569, 284]}
{"line_number": 994, "line_type": "original", "code": "            for (int i = 0; i < nCols; i++) {", "entropy": 1.3984375, "is_bug_line": false, "sus_score": 0.25116, "per_token_entropy": [5.21484375, 9.8828125, 0.427734375, 0.262939453125, 1.3779296875, 0.06292724609375, 0.0109100341796875, 0.0032978057861328125, 0.04754638671875, 0.00659942626953125, 0.296875, 4.4453125, 1.4287109375, 0.018218994140625, 0.05181884765625, 0.04608154296875, 0.1744384765625], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 310, 19911, 45, 595, 1987, 301]}
{"line_number": 994, "line_type": "generated", "code": "\n     *\n     * @param b the right-hand-side vectors\n     * @return a matrix of solutions\n     * @throws IllegalArgumentException if the matrices are not conformable\n     */\n    public BigDecimalMatrix solve(BigDecimalMatrix b) throws IllegalArgumentException {\n        // sanity", "entropy": 0.3876953125, "is_bug_line": false, "sus_score": 0.25116, "per_token_entropy": [0.82470703125, 0.0079345703125, 0.923828125, 0.0012569427490234375, 0.0294342041015625, 0.013275146484375, 0.30126953125, 0.896484375, 0.5283203125, 0.59912109375, 0.0004100799560546875, 1.6064453125, 0.018707275390625, 0.62841796875, 0.276611328125, 0.00018787384033203125, 0.00605010986328125, 0.019195556640625, 0.94091796875, 0.367431640625, 0.10595703125, 1.2900390625, 0.32861328125, 0.00667572021484375, 0.0268096923828125, 0.0270233154296875, 0.0704345703125, 0.122802734375, 1.076171875, 0.98828125, 0.5986328125, 0.47705078125, 0.509765625, 0.432861328125, 0.55419921875, 0.25927734375, 0.0188140869140625, 0.0090179443359375, 0.07861328125, 0.7353515625, 0.57177734375, 0.0135650634765625, 0.09429931640625, 0.037841796875, 0.0206298828125, 0.00241851806640625, 0.24658203125, 0.031951904296875, 0.032989501953125, 0.09619140625, 1.7646484375, 1.529296875], "tokens": [275, 319, 275, 319, 477, 753, 323, 322, 2091, 31, 4668, 31, 2671, 16540, 275, 319, 477, 601, 312, 5045, 432, 16295, 275, 319, 477, 5117, 12137, 415, 322, 23784, 884, 646, 30526, 444, 275, 569, 284, 562, 17280, 4161, 10932, 26, 20827, 4161, 323, 27, 2571, 12137, 301, 291, 434, 37090]}
{"line_number": 995, "line_type": "original", "code": "                sum = sum.add(data[row][i].multiply(v[i]));", "entropy": 1.8310546875, "is_bug_line": false, "sus_score": 0.2443, "per_token_entropy": [9.015625, 12.0078125, 1.9033203125, 3.23828125, 0.1710205078125, 0.132568359375, 0.033416748046875, 0.66259765625, 0.0099945068359375, 2.220703125, 0.0208587646484375, 2.76171875, 0.146484375, 0.0118255615234375, 0.01424407958984375, 2.107421875, 0.046051025390625, 0.24951171875, 0.039459228515625], "tokens": [2071, 3632, 280, 3632, 32, 669, 26, 605, 77, 643, 1674, 91, 997, 20123, 26, 104, 77, 91, 10674]}
{"line_number": 995, "line_type": "generated", "code": "\n     *\n     * @param b the matrix of constant vectors\n     * @return matrix of solution vectors\n     * @throws IllegalArgumentException if columnDimension of b!= rowDimension of this\n     * @throws RuntimeException if this matrix is singular\n     */\n    public BigDecimal[][] solve", "entropy": 0.346435546875, "is_bug_line": false, "sus_score": 0.2443, "per_token_entropy": [0.323486328125, 0.100830078125, 0.869140625, 0.0066986083984375, 0.03936767578125, 0.00982666015625, 0.0222625732421875, 1.689453125, 1.369140625, 0.09588623046875, 0.40673828125, 0.12384033203125, 0.1729736328125, 0.0007548332214355469, 0.00777435302734375, 0.0220947265625, 0.8232421875, 0.035064697265625, 0.26220703125, 0.0017719268798828125, 0.27490234375, 0.00803375244140625, 0.034149169921875, 0.033905029296875, 0.096435546875, 0.1298828125, 1.203125, 0.11541748046875, 0.64013671875, 0.448486328125, 0.485107421875, 0.040985107421875, 0.0058441162109375, 0.748046875, 0.12469482421875, 0.272705078125, 0.84375, 0.2000732421875, 0.0406494140625, 2.328125, 0.407958984375, 1.3662109375, 0.68798828125, 0.04791259765625, 0.1229248046875, 0.2208251953125, 0.0660400390625, 0.026275634765625, 0.0101776123046875, 0.035888671875, 0.40234375, 0.1717529296875], "tokens": [275, 319, 275, 319, 477, 753, 323, 322, 5045, 432, 8082, 16540, 275, 319, 477, 601, 5045, 432, 5295, 16540, 275, 319, 477, 5117, 12137, 415, 2623, 9883, 432, 323, 863, 2698, 9883, 432, 458, 275, 319, 477, 5117, 13386, 415, 458, 5045, 438, 36134, 275, 569, 284, 562, 17280, 11336, 10932]}
{"line_number": 986, "line_type": "original", "code": "        if (v.length != this.getColumnDimension()) {", "entropy": 1.2978515625, "is_bug_line": false, "sus_score": 0.23079, "per_token_entropy": [4.8984375, 4.09375, 0.231201171875, 3.73046875, 0.77490234375, 0.023834228515625, 0.0188446044921875, 2.076171875, 0.005260467529296875, 0.92822265625, 0.0003235340118408203, 0.042694091796875, 0.053497314453125], "tokens": [351, 415, 308, 104, 32, 1322, 863, 458, 32, 19239, 9883, 1157, 301]}
{"line_number": 986, "line_type": "generated", "code": "\n            out[col] = sum;\n        }\n        return out;\n    }\n    \n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector", "entropy": 0.021514892578125, "is_bug_line": false, "sus_score": 0.23079, "per_token_entropy": [0.2105712890625, 0.203857421875, 0.001739501953125, 0.06683349609375, 0.00283050537109375, 0.0012292861938476562, 0.004673004150390625, 0.016571044921875, 0.0435791015625, 0.0012445449829101562, 0.053802490234375, 0.0016031265258789062, 0.0006771087646484375, 0.0013980865478515625, 0.036102294921875, 0.0003228187561035156, 0.15380859375, 0.01678466796875, 0.011932373046875, 0.0001310110092163086, 0.035614013671875, 0.00914764404296875, 0.047271728515625, 0.0843505859375, 0.0007786750793457031, 0.0010318756103515625, 0.001678466796875, 0.00044345855712890625, 0.033935546875, 0.0001220703125, 2.396106719970703e-05, 0.01418304443359375, 0.002407073974609375, 0.0009045600891113281, 0.009368896484375, 0.0027103424072265625, 0.0002256631851196289, 0.00011074542999267578, 0.0005731582641601562, 9.85860824584961e-05, 2.5391578674316406e-05, 0.0022144317626953125, 0.0011034011840820312, 4.279613494873047e-05, 0.0067138671875, 0.0003037452697753906, 0.0003330707550048828, 0.00010478496551513672, 0.0015459060668945312, 0.0015277862548828125, 0.0299224853515625, 0.0003788471221923828], "tokens": [324, 963, 77, 748, 79, 280, 3632, 45, 291, 320, 291, 442, 963, 45, 284, 320, 2170, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026]}
{"line_number": 774, "line_type": "original", "code": "        }", "entropy": 4.29296875, "is_bug_line": false, "sus_score": 0.22926, "per_token_entropy": [4.15625, 4.4296875], "tokens": [351, 320]}
{"line_number": 774, "line_type": "generated", "code": "\n     * Returns the entries in the specified row as a Vector.\n     * <p>\n     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n     * unless <code>0 <= row < rowDimension", "entropy": 0.12200927734375, "is_bug_line": false, "sus_score": 0.22926, "per_token_entropy": [0.8623046875, 0.424560546875, 0.80029296875, 0.144775390625, 0.363037109375, 0.227294921875, 0.047760009765625, 0.119873046875, 0.01373291015625, 1.673828125, 0.04559326171875, 0.89404296875, 0.03375244140625, 0.06744384765625, 0.000606536865234375, 0.262939453125, 0.004291534423828125, 0.00214385986328125, 0.07476806640625, 5.1140785217285156e-05, 0.01160430908203125, 0.0257720947265625, 0.0002219676971435547, 0.0004189014434814453, 0.0016689300537109375, 1.919269561767578e-05, 0.0845947265625, 0.023895263671875, 0.0023899078369140625, 0.0056610107421875, 0.0008234977722167969, 2.8133392333984375e-05, 0.0041656494140625, 0.0017108917236328125, 8.64267349243164e-05, 0.0003185272216796875, 0.00026226043701171875, 3.707408905029297e-05, 0.013519287109375, 0.0228424072265625, 0.035430908203125, 5.602836608886719e-05, 0.0022525787353515625, 0.0028400421142578125, 0.0005316734313964844, 0.00016009807586669922, 0.0027256011962890625, 0.0048675537109375, 0.0033664703369140625, 0.0081329345703125, 0.005916595458984375, 0.01287841796875], "tokens": [275, 319, 3759, 322, 8036, 328, 322, 3191, 2698, 619, 312, 4107, 32, 275, 319, 333, 98, 48, 275, 319, 5570, 10193, 1477, 821, 225, 34, 32, 225, 399, 333, 687, 48, 4161, 1284, 984, 377, 687, 48, 438, 12163, 275, 319, 7351, 333, 687, 48, 34, 2511, 2698, 333, 2698, 9883]}
