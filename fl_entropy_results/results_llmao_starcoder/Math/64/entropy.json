{"line_number": 613, "line_type": "original", "code": "                for (int i = j + 1; i < solvedCols; ++i) {", "entropy": 0.70947265625, "is_bug_line": false, "sus_score": 0.45989, "per_token_entropy": [8.25, 4.21875, 0.004032135009765625, 0.00528717041015625, 0.50439453125, 0.004550933837890625, 0.228515625, 0.54345703125, 0.0026073455810546875, 0.00141143798828125, 0.0038547515869140625, 0.001995086669921875, 0.004547119140625, 0.024871826171875, 0.3681640625, 0.0012102127075195312, 0.005985260009765625, 0.00019490718841552734, 0.0055389404296875, 0.01161956787109375], "tokens": [2071, 436, 308, 410, 595, 280, 594, 474, 225, 35, 45, 595, 333, 19479, 19911, 45, 3311, 91, 27, 301]}
{"line_number": 613, "line_type": "generated", "code": "\n            lmDir[permutation[j]] = diag[j];\n        }\n\n        // eliminate the variables from the diagonal matrix\n        for (int j = 0; j < solvedCols; ++j) {\n            double s = 0;\n            int pj", "entropy": 0.351318359375, "is_bug_line": false, "sus_score": 0.45989, "per_token_entropy": [0.09027099609375, 0.4052734375, 1.2568359375, 0.001049041748046875, 1.1982421875, 0.0004858970642089844, 0.017364501953125, 0.0012540817260742188, 0.003688812255859375, 0.09442138671875, 0.0030975341796875, 1.7705078125, 0.050384521484375, 0.7197265625, 0.0032520294189453125, 1.18359375, 0.6181640625, 0.5654296875, 0.00017011165618896484, 1.8896484375, 1.2265625, 0.0029544830322265625, 1.6279296875, 0.12384033203125, 0.3466796875, 0.1324462890625, 0.00021517276763916016, 0.0023250579833984375, 0.4609375, 0.0033435821533203125, 0.01531219482421875, 0.0124664306640625, 0.0038242340087890625, 0.0007200241088867188, 0.0007734298706054688, 0.06402587890625, 0.037139892578125, 0.1749267578125, 0.0045318603515625, 3.1828880310058594e-05, 0.00018155574798583984, 0.0014095306396484375, 0.72412109375, 0.6123046875, 0.7060546875, 0.037384033203125, 0.0210418701171875, 0.00015628337860107422, 0.0726318359375, 0.06549072265625, 1.052734375, 0.853515625], "tokens": [324, 30780, 2976, 77, 40237, 77, 92, 3212, 280, 15534, 77, 92, 970, 291, 320, 584, 434, 40533, 322, 4886, 645, 322, 27601, 5045, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 324, 2064, 309, 280, 225, 34, 45, 324, 629, 46704]}
{"line_number": 609, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.634765625, "is_bug_line": false, "sus_score": 0.44499, "per_token_entropy": [8.625, 2.021484375, 0.00496673583984375, 0.0050811767578125, 0.399658203125, 0.00986480712890625, 0.0178680419921875, 0.01043701171875, 0.0077667236328125, 0.0004949569702148438, 0.0039825439453125, 0.189453125, 0.043487548828125, 0.003231048583984375, 0.01397705078125, 0.00011706352233886719, 0.0016450881958007812, 0.0643310546875], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 609, "line_type": "generated", "code": "\n        int n = qy.length;\n        double minDiag = Double.POSITIVE_INFINITY;\n        for (int j = 0; j < n; ++j) {\n            double s = Math.abs(qy[j]);\n            if (", "entropy": 0.32666015625, "is_bug_line": false, "sus_score": 0.44499, "per_token_entropy": [0.1597900390625, 1.8720703125, 0.6162109375, 0.5244140625, 0.57373046875, 0.002460479736328125, 0.0014324188232421875, 0.0004506111145019531, 0.040557861328125, 0.2705078125, 1.5068359375, 3.04296875, 1.6943359375, 0.2266845703125, 0.91162109375, 0.0003495216369628906, 0.355224609375, 1.6689300537109375e-06, 4.291534423828125e-06, 0.01299285888671875, 0.12841796875, 0.9697265625, 0.0031948089599609375, 0.0027256011962890625, 0.289306640625, 0.0026454925537109375, 0.019134521484375, 0.01476287841796875, 0.0013074874877929688, 0.0006051063537597656, 0.0009274482727050781, 0.0219268798828125, 0.00954437255859375, 0.0200347900390625, 0.00016248226165771484, 0.0012454986572265625, 0.0019512176513671875, 0.014862060546875, 0.9853515625, 1.1962890625, 0.0164642333984375, 0.226318359375, 0.0004372596740722656, 0.007770538330078125, 0.00037860870361328125, 0.77587890625, 0.0006270408630371094, 0.0052642822265625, 0.15966796875, 0.0122833251953125, 0.2376708984375, 0.039215087890625], "tokens": [291, 629, 310, 280, 2678, 107, 32, 1322, 45, 291, 2064, 1847, 26244, 280, 6934, 32, 42270, 81, 36069, 45, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 310, 45, 3311, 92, 27, 301, 324, 2064, 309, 280, 4175, 32, 3596, 26, 28542, 77, 92, 1989, 324, 415, 308]}
{"line_number": 632, "line_type": "original", "code": "            lmPar = Math.max(parl, lmPar + correction);", "entropy": 1.90234375, "is_bug_line": false, "sus_score": 0.43617, "per_token_entropy": [4.25390625, 1.798828125, 4.69140625, 0.10003662109375, 1.4970703125, 0.002590179443359375, 0.3046875, 0.0037517547607421875, 5.73828125, 0.1492919921875, 0.0712890625, 0.42822265625, 0.08392333984375, 6.2578125, 4.875, 0.1805419921875], "tokens": [1468, 30780, 926, 280, 4175, 32, 1449, 26, 568, 94, 30, 30780, 926, 474, 25683, 293]}
{"line_number": 632, "line_type": "generated", "code": "\n\n            // The transformations to eliminate the row of d modify only a\n            // single element of (q transpose)*b beyond the first n, which\n            // is initially zero.\n            double delta = work[j];\n            for (int i = j + ", "entropy": 0.1322021484375, "is_bug_line": false, "sus_score": 0.43617, "per_token_entropy": [0.7919921875, 0.053802490234375, 1.064453125, 0.002269744873046875, 2.849102020263672e-05, 0.001857757568359375, 9.59634780883789e-05, 0.004825592041015625, 0.0020904541015625, 0.0005540847778320312, 0.1414794921875, 0.0020389556884765625, 0.00782012939453125, 0.017730712890625, 0.0007081031799316406, 0.00556182861328125, 0.00038313865661621094, 0.00014841556549072266, 0.035888671875, 0.1287841796875, 0.11541748046875, 0.02716064453125, 0.08978271484375, 0.274658203125, 4.220008850097656e-05, 0.0002770423889160156, 0.00013911724090576172, 0.0232696533203125, 0.2174072265625, 0.140869140625, 0.0027313232421875, 1.2040138244628906e-05, 0.000492095947265625, 0.00878143310546875, 0.0006818771362304688, 0.56982421875, 0.49609375, 0.427001953125, 0.036895751953125, 0.75, 0.0007448196411132812, 0.0157012939453125, 0.018157958984375, 0.1634521484375, 0.34521484375, 0.0005483627319335938, 0.0003886222839355469, 0.53662109375, 0.001987457275390625, 0.0103912353515625, 0.337158203125, 0.00042939186096191406], "tokens": [1064, 434, 886, 34816, 372, 40533, 322, 2698, 432, 343, 5351, 1755, 312, 324, 434, 3982, 1994, 432, 308, 99, 27224, 4586, 84, 21861, 322, 1932, 310, 30, 1510, 324, 434, 438, 26302, 5934, 32, 324, 2064, 7715, 280, 1389, 77, 92, 970, 324, 436, 308, 410, 595, 280, 594, 474, 225]}
