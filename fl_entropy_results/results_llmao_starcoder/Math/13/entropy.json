{"line_number": 423, "line_type": "original", "code": "        return optimizeInternal(maxEval,", "entropy": 0.849609375, "is_bug_line": false, "sus_score": 0.33521, "per_token_entropy": [3.693359375, 2.708984375, 0.2012939453125, 0.107421875, 0.00460052490234375, 0.07879638671875, 0.0006175041198730469, 0.0013856887817382812], "tokens": [351, 442, 22269, 4292, 26, 1449, 14066, 30]}
{"line_number": 423, "line_type": "generated", "code": "\n                                FunctionUtils.toMultivariateDifferentiableVectorFunction(f),\n                                new Target(target),\n                                new Weight(weights),\n                                new InitialGuess(startPoint));\n    }\n\n    /**\n     * Optimize an objective function.\n     * Optimization is considered to", "entropy": 0.056121826171875, "is_bug_line": false, "sus_score": 0.33521, "per_token_entropy": [0.79345703125, 0.310791015625, 0.0009417533874511719, 0.0012216567993164062, 0.01168060302734375, 0.002124786376953125, 5.125999450683594e-06, 0.03765869140625, 5.245208740234375e-06, 0.00016832351684570312, 8.726119995117188e-05, 0.003154754638671875, 0.005725860595703125, 0.0272979736328125, 0.48486328125, 0.1951904296875, 0.0487060546875, 0.019744873046875, 0.0113525390625, 0.01345062255859375, 0.01409912109375, 0.0010862350463867188, 0.0019550323486328125, 0.00017249584197998047, 0.00038170814514160156, 0.0148468017578125, 0.0105438232421875, 0.0005984306335449219, 0.002346038818359375, 2.467632293701172e-05, 0.00014889240264892578, 0.00548553466796875, 0.00016987323760986328, 0.015655517578125, 0.06585693359375, 0.01453399658203125, 0.1505126953125, 0.024566650390625, 0.05078125, 4.9591064453125e-05, 0.1727294921875, 0.0009360313415527344, 0.01097869873046875, 0.00174713134765625, 0.0012111663818359375, 0.0175628662109375, 0.0401611328125, 9.512901306152344e-05, 0.329345703125, 0.00021696090698242188, 0.0016870498657226562, 0.0006284713745117188], "tokens": [1378, 4540, 2755, 32, 452, 11235, 27623, 31187, 1529, 2863, 2447, 26, 88, 471, 1378, 537, 10057, 26, 1977, 471, 1378, 537, 20749, 26, 9582, 471, 1378, 537, 5768, 38015, 26, 1366, 1943, 876, 284, 320, 446, 1022, 275, 319, 13814, 12178, 600, 25110, 667, 32, 275, 319, 41916, 438, 11870, 372]}
{"line_number": 153, "line_type": "original", "code": "    protected void updateJacobian() {", "entropy": 2.02734375, "is_bug_line": false, "sus_score": 0.31759, "per_token_entropy": [5.25, 1.2529296875, 0.126953125, 0.1785888671875, 5.51171875, 0.0019445419311523438, 3.529296875, 0.37158203125], "tokens": [264, 2522, 763, 1974, 60, 30495, 346, 301]}
{"line_number": 153, "line_type": "generated", "code": "\n        final double[] weightedResiduals = computeWeightedResiduals(point);\n        final double cost = computeCost(weightedResiduals);\n        setCost(cost);\n    }\n\n    /**\n     * Computes the weighted residuals array.\n     *\n    ", "entropy": 0.20654296875, "is_bug_line": false, "sus_score": 0.31759, "per_token_entropy": [0.25048828125, 0.64697265625, 0.382080078125, 0.022003173828125, 0.322021484375, 0.005046844482421875, 0.0034656524658203125, 0.0640869140625, 0.0482177734375, 0.04351806640625, 1.3857421875, 0.0002372264862060547, 0.0001894235610961914, 0.004688262939453125, 0.01043701171875, 0.021453857421875, 0.01421356201171875, 0.07269287109375, 1.26171875, 0.06024169921875, 0.3798828125, 0.06805419921875, 0.0496826171875, 0.02105712890625, 0.002803802490234375, 0.2183837890625, 0.004329681396484375, 4.0531158447265625e-05, 0.0013189315795898438, 0.0139007568359375, 0.453369140625, 0.55908203125, 0.026519775390625, 0.001331329345703125, 0.004718780517578125, 0.007633209228515625, 0.55224609375, 0.01013946533203125, 0.059661865234375, 0.0031719207763671875, 0.01104736328125, 7.56978988647461e-05, 0.36083984375, 0.0421142578125, 0.7421875, 0.10302734375, 0.050537109375, 1.8291015625, 0.085205078125, 0.0171966552734375, 2.574920654296875e-05, 0.445068359375], "tokens": [291, 1158, 2064, 1178, 29271, 721, 6392, 101, 280, 7596, 38624, 721, 6392, 101, 26, 1493, 293, 291, 1158, 2064, 7847, 280, 7596, 9375, 26, 26485, 721, 6392, 101, 293, 291, 739, 9375, 26, 8030, 293, 284, 320, 446, 1022, 275, 319, 41932, 322, 29271, 27410, 101, 1417, 32, 275, 319, 275]}
{"line_number": 176, "line_type": "original", "code": "        final int nR = getTarget().length;", "entropy": 1.8525390625, "is_bug_line": false, "sus_score": 0.30136, "per_token_entropy": [3.99609375, 3.02734375, 5.03125, 0.66259765625, 1.7568359375, 0.02838134765625, 3.76171875, 1.94921875, 0.062042236328125, 0.08648681640625, 0.011077880859375], "tokens": [351, 1158, 629, 310, 68, 280, 622, 2922, 922, 1322, 45]}
{"line_number": 176, "line_type": "generated", "code": "\n        return weightMatrixSqrt.operate(r).dotProduct(r);\n    }\n\n    /**\n     * Computes the residuals.\n     *\n     * @param objectiveValue Value of the objective function.\n     * @return the residuals.\n     * @see", "entropy": 0.137451171875, "is_bug_line": false, "sus_score": 0.30136, "per_token_entropy": [0.09149169921875, 0.27685546875, 1.4775390625, 0.1778564453125, 0.495361328125, 0.0428466796875, 0.0285491943359375, 0.0008678436279296875, 0.047149658203125, 0.0203857421875, 0.182373046875, 0.0001285076141357422, 0.00044846534729003906, 0.0184783935546875, 0.0323486328125, 0.08599853515625, 0.0007758140563964844, 0.09246826171875, 0.005229949951171875, 0.004535675048828125, 0.00015687942504882812, 0.3662109375, 0.031646728515625, 0.70703125, 0.007480621337890625, 0.46044921875, 0.044891357421875, 4.0531158447265625e-06, 0.10467529296875, 0.00014698505401611328, 0.004924774169921875, 0.006683349609375, 0.52783203125, 0.181396484375, 0.57177734375, 0.0013875961303710938, 0.00485992431640625, 0.11639404296875, 0.00954437255859375, 0.23388671875, 0.052520751953125, 1.2636184692382812e-05, 0.00540924072265625, 0.0012531280517578125, 0.0216522216796875, 0.0865478515625, 0.0115814208984375, 0.2386474609375, 0.0027484893798828125, 0.0061798095703125, 0.0005846023559570312, 0.25634765625], "tokens": [291, 442, 7533, 4161, 30657, 32, 43078, 26, 100, 547, 4260, 3409, 26, 100, 293, 284, 320, 446, 1022, 275, 319, 41932, 322, 27410, 101, 32, 275, 319, 275, 319, 477, 753, 25110, 882, 3846, 432, 322, 25110, 667, 32, 275, 319, 477, 601, 322, 27410, 101, 32, 275, 319, 477, 2970]}
{"line_number": 132, "line_type": "original", "code": "     */", "entropy": 6.3046875, "is_bug_line": false, "sus_score": 0.27196, "per_token_entropy": [6.078125, 6.53125], "tokens": [262, 569]}
{"line_number": 132, "line_type": "generated", "code": "\n            for (int j = 0; j < nC; ++j) {\n                jacobianData[i][j] = dsValue[i].getPartialDerivative(j);\n            }\n        }\n        return MatrixUtils.createRealMatrix", "entropy": 0.07879638671875, "is_bug_line": false, "sus_score": 0.27196, "per_token_entropy": [0.7568359375, 0.9150390625, 0.0009613037109375, 0.0035915374755859375, 0.071044921875, 0.00037860870361328125, 0.0023517608642578125, 9.226799011230469e-05, 0.001209259033203125, 0.0006246566772460938, 0.0005288124084472656, 0.01047515869140625, 0.0036792755126953125, 0.0003390312194824219, 0.00418853759765625, 0.00023257732391357422, 0.0014934539794921875, 0.0022373199462890625, 0.0806884765625, 0.09674072265625, 3.540515899658203e-05, 0.00018513202667236328, 0.0002713203430175781, 0.0017681121826171875, 0.0001285076141357422, 0.00015807151794433594, 5.829334259033203e-05, 0.0015239715576171875, 0.039581298828125, 0.0008025169372558594, 9.226799011230469e-05, 0.0009813308715820312, 0.00019109249114990234, 0.04486083984375, 0.00891876220703125, 0.0006670951843261719, 0.0033740997314453125, 6.80685043334961e-05, 0.1514892578125, 0.10394287109375, 0.03741455078125, 0.0002448558807373047, 0.107177734375, 0.001171112060546875, 0.455810546875, 0.21484375, 0.96826171875, 0.00013566017150878906, 0.00016605854034423828, 0.00012874603271484375, 0.0009312629699707031, 0.0007042884826660156], "tokens": [324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 310, 53, 45, 3311, 92, 27, 301, 400, 594, 30495, 750, 77, 91, 1674, 92, 79, 280, 10180, 882, 77, 91, 997, 371, 12221, 30970, 1353, 26, 92, 293, 324, 320, 291, 320, 291, 442, 9320, 2755, 32, 1297, 6877, 4161]}
{"line_number": 187, "line_type": "original", "code": "            }", "entropy": 5.2734375, "is_bug_line": false, "sus_score": 0.24259, "per_token_entropy": [6.0390625, 4.51171875], "tokens": [1468, 320]}
{"line_number": 187, "line_type": "generated", "code": "     * @return the square root of the arithmetic mean of the\n     * square of all weighted residuals.\n     */\n    public double getRms() {\n        return FastMath.sqrt(cost / weightedResiduals.length);\n    }\n\n    /**", "entropy": 0.199951171875, "is_bug_line": false, "sus_score": 0.24259, "per_token_entropy": [2.271484375, 0.0927734375, 0.058380126953125, 0.045196533203125, 0.2330322265625, 0.9697265625, 0.006008148193359375, 0.0017910003662109375, 0.005207061767578125, 0.09759521484375, 0.0017080307006835938, 0.11798095703125, 0.20166015625, 0.0767822265625, 0.006771087646484375, 0.36572265625, 0.0012664794921875, 0.334228515625, 0.01509857177734375, 0.0024547576904296875, 0.0002751350402832031, 0.2607421875, 0.0916748046875, 0.541015625, 0.01052093505859375, 0.06982421875, 0.04815673828125, 0.0479736328125, 0.57470703125, 0.09808349609375, 0.0302734375, 0.0011959075927734375, 0.0352783203125, 0.0980224609375, 0.2176513671875, 1.1682510375976562e-05, 7.152557373046875e-06, 0.0004248619079589844, 0.00235748291015625, 1.193359375, 0.20166015625, 1.5126953125, 0.007110595703125, 0.00014770030975341797, 0.0030765533447265625, 0.021759033203125, 0.0003669261932373047, 0.0019254684448242188, 0.1932373046875, 0.0011997222900390625, 0.2149658203125, 0.01168060302734375], "tokens": [262, 319, 477, 601, 322, 14627, 3051, 432, 322, 34461, 5651, 432, 322, 275, 319, 14627, 432, 1169, 29271, 27410, 101, 32, 275, 569, 284, 562, 2064, 622, 68, 874, 346, 301, 291, 442, 15938, 5717, 32, 8663, 26, 8030, 517, 29271, 721, 6392, 101, 32, 1322, 293, 284, 320, 446, 1022]}
