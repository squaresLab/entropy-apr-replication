{"line_number": 432, "line_type": "original", "code": "            k++; // cast out twos.", "entropy": 3.2265625, "is_bug_line": false, "sus_score": 0.54367, "per_token_entropy": [8.5078125, 6.53515625, 2.666015625, 3.013671875, 2.779296875, 0.0179443359375, 1.1015625, 3.409385681152344e-05, 4.4140625], "tokens": [1468, 831, 3334, 434, 9936, 963, 8206, 500, 32]}
{"line_number": 432, "line_type": "generated", "code": "\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float(value", "entropy": 0.03662109375, "is_bug_line": false, "sus_score": 0.54367, "per_token_entropy": [0.71240234375, 0.128662109375, 0.027557373046875, 0.0002493858337402344, 0.2724609375, 0.20263671875, 0.01434326171875, 0.0011806488037109375, 0.00014138221740722656, 0.007114410400390625, 0.0019588470458984375, 0.0011959075927734375, 0.233154296875, 0.01433563232421875, 0.0018463134765625, 0.011474609375, 0.00021338462829589844, 0.0299835205078125, 1.823902130126953e-05, 0.006237030029296875, 0.0009641647338867188, 0.0018091201782226562, 0.00373077392578125, 0.0004124641418457031, 0.00010669231414794922, 1.5616416931152344e-05, 8.058547973632812e-05, 0.01458740234375, 0.00013625621795654297, 0.00026297569274902344, 0.0002911090850830078, 0.0009169578552246094, 0.0010700225830078125, 0.00020635128021240234, 0.0031681060791015625, 0.058380126953125, 0.007022857666015625, 0.002048492431640625, 0.00023746490478515625, 0.00012731552124023438, 0.00501251220703125, 0.0001589059829711914, 0.01055145263671875, 0.0006494522094726562, 0.00145721435546875, 0.0004150867462158203, 0.004718780517578125, 0.005382537841796875, 0.1102294921875, 0.0024547576904296875, 0.0001881122589111328, 0.00015592575073242188], "tokens": [284, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174, 26, 853]}
{"line_number": 446, "line_type": "original", "code": "                t /= 2; // cast out twos", "entropy": 4.1484375, "is_bug_line": false, "sus_score": 0.4305, "per_token_entropy": [8.8125, 13.1328125, 13.7109375, 0.572265625, 0.1142578125, 0.9150390625, 3.6171875, 3.853515625, 0.01123046875, 0.87353515625, 5.710124969482422e-05], "tokens": [2071, 273, 14374, 225, 36, 45, 434, 9936, 963, 8206, 500]}
{"line_number": 446, "line_type": "generated", "code": " if x < 0.\n     * \n     * @param x the value, a double precision number\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double indicator(final double x)", "entropy": 0.107666015625, "is_bug_line": false, "sus_score": 0.4305, "per_token_entropy": [2.1875, 0.0119781494140625, 0.261962890625, 0.002956390380859375, 0.00013017654418945312, 0.04193115234375, 0.302490234375, 0.0041046142578125, 0.0364990234375, 0.0004150867462158203, 0.0086669921875, 0.0020618438720703125, 0.005474090576171875, 0.02734375, 0.00936126708984375, 0.15234375, 0.007595062255859375, 0.102783203125, 0.798828125, 0.99658203125, 0.0137939453125, 0.0002390146255493164, 0.0009937286376953125, 0.0015039443969726562, 0.1219482421875, 0.0032634735107421875, 0.009521484375, 0.0030422210693359375, 0.037628173828125, 0.1453857421875, 0.0009260177612304688, 0.0020885467529296875, 0.0002617835998535156, 0.0482177734375, 0.00402069091796875, 0.0014696121215820312, 0.0030651092529296875, 0.00048279762268066406, 0.0006875991821289062, 0.00423431396484375, 0.0209197998046875, 0.060302734375, 0.02056884765625, 0.0057373046875, 0.0005812644958496094, 0.032562255859375, 0.0086822509765625, 0.005588531494140625, 0.074951171875, 0.00464630126953125, 0.0005445480346679688, 0.0005092620849609375], "tokens": [415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 2064, 12485, 1451, 275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064, 18384, 26, 3220, 2064, 816, 27]}
{"line_number": 431, "line_type": "original", "code": "            v /= 2;", "entropy": 3.982421875, "is_bug_line": false, "sus_score": 0.37882, "per_token_entropy": [8.0625, 7.5625, 7.6796875, 0.314208984375, 0.1336669921875, 0.1339111328125], "tokens": [1468, 354, 14374, 225, 36, 45]}
{"line_number": 431, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float", "entropy": 0.0195465087890625, "is_bug_line": false, "sus_score": 0.37882, "per_token_entropy": [0.133056640625, 0.030975341796875, 0.126953125, 0.0209503173828125, 0.01331329345703125, 0.0006899833679199219, 0.2249755859375, 0.06903076171875, 0.0085601806640625, 0.0005960464477539062, 0.00010919570922851562, 0.005832672119140625, 0.0015239715576171875, 0.0015087127685546875, 0.143798828125, 0.007282257080078125, 0.0015125274658203125, 0.008636474609375, 0.00012803077697753906, 0.01354217529296875, 1.6570091247558594e-05, 0.0034465789794921875, 0.0005602836608886719, 0.0012197494506835938, 0.0026149749755859375, 0.00047516822814941406, 0.00012099742889404297, 1.3232231140136719e-05, 7.82012939453125e-05, 0.0152587890625, 0.00019288063049316406, 5.4836273193359375e-05, 0.00019741058349609375, 0.0007214546203613281, 0.0007977485656738281, 0.0003113746643066406, 0.00310516357421875, 0.06390380859375, 0.005886077880859375, 0.001758575439453125, 0.00014579296112060547, 7.915496826171875e-05, 0.00201416015625, 9.202957153320312e-05, 0.00390625, 0.00040650367736816406, 0.0005583763122558594, 0.00013136863708496094, 0.00583648681640625, 0.004749298095703125, 0.08209228515625, 0.0025348663330078125], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174]}
{"line_number": 430, "line_type": "original", "code": "            u /= 2;", "entropy": 4.91796875, "is_bug_line": false, "sus_score": 0.35414, "per_token_entropy": [7.40625, 10.7578125, 10.8828125, 0.1844482421875, 0.186279296875, 0.0963134765625], "tokens": [1468, 1044, 14374, 225, 36, 45]}
{"line_number": 430, "line_type": "generated", "code": "\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++) {\n            long bits = Double.doubleToLongBits(value", "entropy": 0.0780029296875, "is_bug_line": false, "sus_score": 0.35414, "per_token_entropy": [0.11700439453125, 0.456298828125, 0.00670623779296875, 0.002956390380859375, 0.01165771484375, 0.0013408660888671875, 0.0069122314453125, 0.0213623046875, 0.0379638671875, 0.00197601318359375, 0.0022029876708984375, 0.0009140968322753906, 0.00035262107849121094, 0.006961822509765625, 0.0005679130554199219, 0.290771484375, 0.2412109375, 0.270751953125, 0.00405120849609375, 0.0177764892578125, 0.0684814453125, 0.045379638671875, 0.010833740234375, 0.06671142578125, 0.0022678375244140625, 0.2381591796875, 0.036590576171875, 0.0023479461669921875, 0.150390625, 0.0016498565673828125, 0.2047119140625, 8.749961853027344e-05, 0.0034847259521484375, 0.0039520263671875, 0.0002117156982421875, 0.0009331703186035156, 0.019805908203125, 0.07550048828125, 0.0007719993591308594, 0.0015611648559570312, 0.08685302734375, 0.9912109375, 0.27197265625, 0.00162506103515625, 0.1953125, 0.0003345012664794922, 9.465217590332031e-05, 3.731250762939453e-05, 0.06341552734375, 5.257129669189453e-05, 0.00496673583984375, 0.004596710205078125], "tokens": [291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987, 301, 324, 1946, 7030, 280, 6934, 32, 2627, 705, 3952, 8733, 26, 853]}
{"line_number": 413, "line_type": "original", "code": "            return (Math.abs(u) + Math.abs(v));", "entropy": 1.6015625, "is_bug_line": false, "sus_score": 0.29677, "per_token_entropy": [7.12890625, 4.33984375, 2.638671875, 4.59765625, 0.01103973388671875, 0.259033203125, 0.01214599609375, 0.5703125, 0.059967041015625, 0.1719970703125, 0.410888671875, 0.004062652587890625, 1.3947486877441406e-05, 3.826618194580078e-05, 0.0006375312805175781, 5.41796875], "tokens": [1468, 442, 308, 5717, 32, 3596, 26, 103, 27, 474, 4175, 32, 3596, 26, 104, 876]}
{"line_number": 413, "line_type": "generated", "code": "    /**\n     * <p>\n     * Gets the greatest common divisor of two numbers using the \"binary gcd\"\n     * method which avoids division and modulo operations. See Knuth 4.5.2\n     * algorithm B. This algorithm is due to", "entropy": 0.1575927734375, "is_bug_line": false, "sus_score": 0.29677, "per_token_entropy": [2.19921875, 0.640625, 0.09906005859375, 0.0007987022399902344, 1.134765625, 0.00832366943359375, 0.0018205642700195312, 0.098876953125, 2.2530555725097656e-05, 0.62353515625, 0.00626373291015625, 0.2091064453125, 0.0002894401550292969, 0.00403594970703125, 0.10015869140625, 0.422119140625, 0.0859375, 1.701171875, 0.0189361572265625, 0.442138671875, 0.01534271240234375, 0.163818359375, 0.00312042236328125, 0.0018701553344726562, 1.811981201171875e-05, 0.0011091232299804688, 0.152587890625, 0.0009388923645019531, 0.0004000663757324219, 0.00016701221466064453, 0.0004992485046386719, 0.0027370452880859375, 0.0013294219970703125, 0.01305389404296875, 0.0004887580871582031, -0.0, 0.0048828125, 2.2292137145996094e-05, 1.9073486328125e-06, 1.0728836059570312e-06, 1.7881393432617188e-06, 0.0007371902465820312, 0.001918792724609375, 3.516674041748047e-05, 0.00232696533203125, 0.00037980079650878906, 0.0043487548828125, 0.01384735107421875, 0.007770538330078125, 5.7816505432128906e-05, 0.0007123947143554688, 7.510185241699219e-05], "tokens": [264, 1022, 275, 319, 333, 98, 48, 275, 319, 7124, 322, 48299, 4942, 33482, 432, 3134, 7515, 1471, 322, 313, 7003, 43422, 20, 275, 319, 1411, 1510, 43585, 20654, 461, 41647, 7373, 32, 2802, 44327, 860, 225, 38, 32, 39, 32, 36, 275, 319, 8218, 551, 32, 1348, 8218, 438, 7254, 372]}
