{"line_number": 338, "line_type": "original", "code": "            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {", "entropy": 0.92822265625, "is_bug_line": true, "sus_score": 0.602, "per_token_entropy": [6.1171875, 1.732421875, 0.1607666015625, 2.685546875, 0.0015516281127929688, 1.107421875, 0.01497650146484375, 2.40234375, 0.00846099853515625, 0.09161376953125, 0.2186279296875, 0.041839599609375, 0.018524169921875, 4.203125, 0.0298004150390625, 2.6941299438476562e-05, 0.03533935546875, 1.451171875, 0.0023403167724609375, 0.004215240478515625, 0.01678466796875, 0.08038330078125], "tokens": [1468, 415, 308, 20398, 32, 23908, 26, 3038, 30, 225, 34, 86, 30, 1769, 28522, 1069, 27, 848, 225, 34, 27, 301]}
{"line_number": 338, "line_type": "generated", "code": "\n        return true;\n    }\n\n    /**\n     * Returns the number of artificial variables.\n     * @return the number of artificial variables\n     */\n    int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n\n    /**\n     * Returns", "entropy": 0.1973876953125, "is_bug_line": true, "sus_score": 0.602, "per_token_entropy": [0.2220458984375, 0.341064453125, 0.08489990234375, 0.00356292724609375, 0.1292724609375, 0.0017385482788085938, 0.2464599609375, 0.077880859375, 0.0301361083984375, 0.00014889240264892578, 0.80615234375, 0.71337890625, 2.400390625, 0.00513458251953125, 2.20703125, 0.005794525146484375, 0.008148193359375, 1.12890625, 0.0362548828125, 0.0034580230712890625, 0.03668212890625, 0.0008444786071777344, 0.06195068359375, 0.01233673095703125, 0.00217437744140625, 0.00476837158203125, 0.004657745361328125, 0.004505157470703125, 0.2607421875, 0.00922393798828125, 0.00926971435546875, 0.72509765625, 0.002124786376953125, 0.0005593299865722656, 7.712841033935547e-05, 0.0003027915954589844, 0.000980377197265625, 0.000728607177734375, 0.0802001953125, 0.006473541259765625, 0.08819580078125, 8.475780487060547e-05, 1.0371208190917969e-05, 4.76837158203125e-06, 0.0019435882568359375, 0.0024433135986328125, 0.00011479854583740234, 0.0811767578125, 0.033294677734375, 0.0176544189453125, 0.0005412101745605469, 0.364013671875], "tokens": [291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 1451, 432, 5549, 31251, 4886, 32, 275, 319, 477, 601, 322, 1451, 432, 5549, 31251, 4886, 275, 569, 284, 629, 44929, 5271, 31251, 10165, 346, 301, 291, 442, 1929, 5271, 31251, 10165, 45, 284, 320, 446, 1022, 275, 319, 3759]}
{"line_number": 336, "line_type": "original", "code": "        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {", "entropy": 0.8525390625, "is_bug_line": false, "sus_score": 0.39487, "per_token_entropy": [3.869140625, 4.83984375, 0.01435089111328125, 0.08038330078125, 0.2431640625, 0.006336212158203125, 1.1171875, 0.027587890625, 0.00012695789337158203, 0.087890625, 0.008819580078125, 0.0035533905029296875, 0.25390625, 7.08984375, 0.000732421875, 0.0706787109375, 0.007328033447265625, 0.133544921875, 0.01438140869140625, 0.01015472412109375, 0.0198822021484375], "tokens": [351, 436, 308, 410, 595, 280, 44929, 33312, 10905, 473, 595, 333, 622, 5271, 31251, 3818, 3457, 473, 595, 1987, 301]}
{"line_number": 336, "line_type": "generated", "code": "\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns the optimal value of the problem.\n     * @return the optimal value of the problem\n     * @throws NoFeasibleSolutionException if the problem is not solved\n     */\n    double get", "entropy": 0.329345703125, "is_bug_line": false, "sus_score": 0.39487, "per_token_entropy": [0.4287109375, 0.324462890625, 0.1717529296875, 0.00054168701171875, 0.2261962890625, 0.0364990234375, 0.0217437744140625, 0.003261566162109375, 0.294921875, 0.00156402587890625, 0.2108154296875, 0.0697021484375, 0.0362548828125, 0.00019872188568115234, 0.8525390625, 0.68408203125, 2.517578125, 0.74755859375, 0.54931640625, 0.04522705078125, 0.78173828125, 0.1676025390625, 0.114501953125, 0.0009107589721679688, 0.057830810546875, 0.0103607177734375, 0.06378173828125, 0.1812744140625, 0.041290283203125, 0.438232421875, 0.00942230224609375, 0.05322265625, 0.404296875, 0.60400390625, 0.0135498046875, 0.264404296875, 2.421875, 0.023529052734375, 0.0010652542114257812, 0.02191162109375, 0.000110626220703125, 0.08233642578125, 0.65234375, 0.29736328125, 0.46240234375, 0.7841796875, 0.828125, 0.54541015625, 0.17724609375, 0.0072784423828125, 0.365966796875, 0.0299224853515625], "tokens": [324, 320, 291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 24824, 786, 432, 322, 3708, 32, 275, 319, 477, 601, 322, 24824, 786, 432, 322, 3708, 275, 319, 477, 5117, 3139, 9008, 38294, 13628, 984, 415, 322, 3708, 438, 646, 19479, 275, 569, 284, 2064, 622]}
{"line_number": 337, "line_type": "original", "code": "            final double entry = tableau.getEntry(0, i);", "entropy": 0.81787109375, "is_bug_line": false, "sus_score": 0.38768, "per_token_entropy": [3.923828125, 5.015625, 0.1383056640625, 1.4326171875, 0.23291015625, 0.2490234375, 0.0005917549133300781, 0.0148162841796875, 0.001308441162109375, 0.0035686492919921875, 0.373779296875, 0.00030803680419921875, 0.0269927978515625, 0.036285400390625], "tokens": [1468, 1158, 2064, 3414, 280, 1858, 4452, 32, 48895, 26, 34, 30, 595, 293]}
{"line_number": 337, "line_type": "generated", "code": "\n        }\n        return true;\n    }\n\n    /**\n     * Returns the objective value.\n     * @return the objective value\n     */\n    double getObjectiveValue() {\n        double value = 0d;\n        for (int i = 0; i <", "entropy": 0.210693359375, "is_bug_line": false, "sus_score": 0.38768, "per_token_entropy": [0.25146484375, 0.047149658203125, 0.220703125, 0.050384521484375, 0.034454345703125, 0.001922607421875, 0.07366943359375, 0.00104522705078125, 0.2060546875, 0.081298828125, 0.030792236328125, 0.00017440319061279297, 0.79150390625, 0.75732421875, 2.39453125, 0.43408203125, 1.1552734375, 0.132568359375, 0.0019273757934570312, 0.060760498046875, 0.0172271728515625, 0.0286712646484375, 0.1151123046875, 0.0220489501953125, 0.285888671875, 0.486083984375, 0.012115478515625, 0.3056640625, 0.038299560546875, 0.04931640625, 0.038665771484375, 0.0037631988525390625, 0.0084686279296875, 0.035919189453125, 0.58642578125, 0.71240234375, 0.003108978271484375, 0.11492919921875, 0.0008106231689453125, 0.87646484375, 0.001537322998046875, 0.05108642578125, 0.06939697265625, 0.0013561248779296875, 0.0118255615234375, 0.0572509765625, 0.0010776519775390625, 0.261962890625, 0.020263671875, 0.008026123046875, 0.0009937286376953125, 0.0014019012451171875], "tokens": [291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 25110, 786, 32, 275, 319, 477, 601, 322, 25110, 786, 275, 569, 284, 2064, 622, 33312, 882, 346, 301, 291, 2064, 786, 280, 225, 34, 86, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333]}
{"line_number": 339, "line_type": "original", "code": "                columnsToDrop.add(i);", "entropy": 2.345703125, "is_bug_line": false, "sus_score": 0.29218, "per_token_entropy": [9.21875, 9.171875, 0.1207275390625, 0.018157958984375, 0.064208984375, 0.317626953125, 0.0167388916015625, 1.951171875, 0.226318359375], "tokens": [2071, 6090, 705, 6243, 32, 669, 26, 91, 293]}
{"line_number": 339, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns whether the problem is unbounded.\n     * @return whether the problem is unbounded\n     */\n    boolean isUnbounded() {\n        return!isOptimal() && (getInvertedCoefficientSum(tableau.getColumnVector", "entropy": 0.2880859375, "is_bug_line": false, "sus_score": 0.29218, "per_token_entropy": [0.2159423828125, 0.05181884765625, 0.28955078125, 0.0633544921875, 0.034210205078125, 0.00014579296112060547, 0.841796875, 1.0751953125, 0.19580078125, 0.1737060546875, 0.08636474609375, 1.970703125, 0.007904052734375, 0.11834716796875, 0.0230865478515625, 0.0006532669067382812, 0.051116943359375, 0.00365447998046875, 0.037445068359375, 0.026275634765625, 1.2978515625, 0.024688720703125, 0.01309967041015625, 0.0008392333984375, 0.2130126953125, 0.0171051025390625, 0.0189056396484375, 0.142822265625, 0.0025005340576171875, 0.0015010833740234375, 0.0001633167266845703, 0.0037822723388671875, 0.0011463165283203125, 0.055145263671875, 1.240234375, 1.9677734375, 0.293212890625, 0.31201171875, 0.00016486644744873047, 0.02630615234375, 0.044464111328125, 1.3330078125, 1.2255859375, 0.007312774658203125, 0.11431884765625, 0.0650634765625, 0.0197296142578125, 0.7802734375, 3.6716461181640625e-05, 0.014892578125, 0.37841796875, 0.099609375], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 4946, 322, 3708, 438, 707, 28959, 32, 275, 319, 477, 601, 4946, 322, 3708, 438, 707, 28959, 275, 569, 284, 1905, 438, 1061, 28959, 346, 301, 291, 442, 653, 297, 5482, 2977, 346, 962, 308, 40807, 17445, 8973, 4934, 26, 1274, 4452, 32, 19239, 2863]}
{"line_number": 226, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess", "entropy": 1.4150390625, "is_bug_line": false, "sus_score": 0.26415, "per_token_entropy": [8.8046875, 4.7734375, 0.0106201171875, 0.032257080078125, 0.1697998046875, 0.0040740966796875, 0.88232421875, 0.005725860595703125, 0.267578125, 1.8955078125, 0.0006031990051269531, 0.0004298686981201172, 0.0142822265625, 0.02630615234375, 0.0435791015625, 0.0022411346435546875, 0.488037109375, 2.400390625, 0.0159912109375, 0.00809478759765625, 0.63037109375, 10.65625], "tokens": [2071, 5045, 32, 470, 2711, 26, 643, 30, 622, 31185, 3818, 3457, 346, 474, 28039, 1881, 18326, 429, 35, 293, 434, 35800]}
{"line_number": 226, "line_type": "generated", "code": "\n    /**\n     * Get the offset of the slack variables in the tableau.\n     * @return offset of the slack variables\n     */\n    protected int getSlackVariableOffset() {\n        return numDecisionVariables + numArtificialVariables;\n    }\n\n    /**\n    ", "entropy": 0.23095703125, "is_bug_line": false, "sus_score": 0.26415, "per_token_entropy": [0.75, 0.07110595703125, 0.031494140625, 0.0009722709655761719, 0.311279296875, 0.1148681640625, 1.23046875, 0.8515625, 0.1041259765625, 0.640625, 0.155517578125, 0.67626953125, 0.2064208984375, 0.71826171875, 0.0027904510498046875, 0.267822265625, 0.048797607421875, 0.00762176513671875, 0.04718017578125, 0.002716064453125, 0.93603515625, 0.67578125, 0.47265625, 0.02899169921875, 0.022979736328125, 0.50732421875, 0.0023441314697265625, 0.0073089599609375, 0.31298828125, 1.1845703125, 0.0005464553833007812, 0.0002218484878540039, 4.0650367736816406e-05, 2.86102294921875e-05, 0.0006957054138183594, 0.0008869171142578125, 0.027496337890625, 0.039276123046875, 0.51416015625, 0.0239105224609375, 3.600120544433594e-05, 0.486328125, 0.2607421875, 0.048553466796875, 4.76837158203125e-07, 4.76837158203125e-05, 0.10552978515625, 0.01538848876953125, 0.00017082691192626953, 0.0865478515625, 0.0019779205322265625, 0.0038242340087890625], "tokens": [284, 1022, 275, 319, 1390, 322, 3401, 432, 322, 28039, 4886, 328, 322, 1858, 4452, 32, 275, 319, 477, 601, 3401, 432, 322, 28039, 4886, 275, 569, 284, 2522, 629, 622, 31185, 3818, 3457, 346, 301, 291, 442, 1929, 24453, 10165, 474, 1929, 5271, 31251, 10165, 45, 284, 320, 446, 1022, 275]}
