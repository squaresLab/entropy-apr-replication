{"line_number": 337, "line_type": "original", "code": "                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {", "entropy": 1.2978515625, "is_bug_line": true, "sus_score": 0.40601, "per_token_entropy": [8.859375, 2.482421875, 0.01715087890625, 0.05438232421875, 0.8095703125, 0.01593017578125, 3.30078125, 0.1456298828125, 0.0003724098205566406, 0.50341796875, 0.199951171875, 0.07073974609375, 2.578125, 1.4248046875, 0.00017130374908447266, 0.09820556640625, 0.0267486572265625, 7.70703125, 0.166748046875, 0.0190887451171875, 0.020751953125, 0.041534423828125], "tokens": [2071, 436, 308, 410, 594, 280, 44929, 33312, 10905, 473, 594, 333, 44929, 33312, 10905, 346, 474, 595, 45, 594, 1987, 301]}
{"line_number": 337, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }", "entropy": 0.038238525390625, "is_bug_line": true, "sus_score": 0.40601, "per_token_entropy": [0.51806640625, 0.12548828125, 0.03515625, 2.6702880859375e-05, 0.17578125, 0.01395416259765625, 0.350341796875, 0.00441741943359375, 0.002429962158203125, 0.004276275634765625, 0.00022137165069580078, 0.0286712646484375, 0.0025005340576171875, 4.0411949157714844e-05, 0.00909423828125, 0.0005116462707519531, 0.077880859375, 0.0022220611572265625, 0.0018596649169921875, 0.0023555755615234375, 6.866455078125e-05, 0.005939483642578125, 0.0013217926025390625, 0.0215911865234375, 0.03167724609375, 0.04119873046875, 0.00032901763916015625, 0.0002772808074951172, 0.00028014183044433594, 0.0005407333374023438, 0.0014934539794921875, 0.0173492431640625, 0.0015630722045898438, 0.004791259765625, 8.344650268554688e-07, 4.2438507080078125e-05, 9.584426879882812e-05, 4.291534423828125e-06, 0.00682830810546875, 0.07684326171875, 0.0009870529174804688], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320]}
{"line_number": 338, "line_type": "original", "code": "                    if (tableau.getEntry(basicRow, j) == 1) {", "entropy": 1.5654296875, "is_bug_line": true, "sus_score": 0.40127, "per_token_entropy": [10.8828125, 3.927734375, 0.1312255859375, 2.78125, 0.0015726089477539062, 0.2259521484375, 0.1915283203125, 0.00296783447265625, 3.755859375, 0.245849609375, 0.027587890625, 1.0615234375, 0.05340576171875, 1.71484375, 0.06939697265625, 2.365234375, 0.5888671875, 0.148681640625], "tokens": [4696, 415, 308, 1274, 4452, 32, 48895, 26, 6390, 2352, 30, 594, 27, 610, 225, 35, 27, 301]}
{"line_number": 338, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }", "entropy": 0.050445556640625, "is_bug_line": true, "sus_score": 0.40127, "per_token_entropy": [0.7177734375, 0.131103515625, 0.03607177734375, 4.172325134277344e-05, 0.253173828125, 0.0186004638671875, 0.444091796875, 0.00485992431640625, 0.002109527587890625, 0.00696563720703125, 0.00041222572326660156, 0.034027099609375, 0.0030231475830078125, 0.0005788803100585938, 0.01090240478515625, 0.0008087158203125, 0.083984375, 0.0025634765625, 0.0028705596923828125, 0.0026702880859375, 7.998943328857422e-05, 0.005924224853515625, 0.0025043487548828125, 0.0323486328125, 0.0423583984375, 0.06231689453125, 0.000400543212890625, 0.0007834434509277344, 0.0005354881286621094, 0.0007195472717285156, 0.0024127960205078125, 0.0245208740234375, 0.0020503997802734375, 0.007366180419921875, 5.960464477539062e-07, 8.404254913330078e-05, 0.00016808509826660156, 4.0531158447265625e-06, 0.0066070556640625, 0.1207275390625, 0.0004355907440185547], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320]}
{"line_number": 339, "line_type": "original", "code": "                         coefficients[i] = 0;", "entropy": 3.123046875, "is_bug_line": true, "sus_score": 0.39877, "per_token_entropy": [11.15625, 10.6328125, 1.302734375, 0.2763671875, 0.04339599609375, 0.296875, 3.373046875, 0.66259765625, 0.362060546875], "tokens": [8240, 26370, 77, 91, 79, 280, 225, 34, 45]}
{"line_number": 339, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the entry in the tableau", "entropy": 0.1529541015625, "is_bug_line": true, "sus_score": 0.39877, "per_token_entropy": [1.5361328125, 0.57080078125, 0.06439208984375, 0.00010764598846435547, 0.1275634765625, 0.018096923828125, 0.35546875, 0.004993438720703125, 0.001979827880859375, 0.005153656005859375, 0.00039696693420410156, 0.030242919921875, 0.0126953125, 0.0013179779052734375, 0.01502227783203125, 0.001003265380859375, 0.071044921875, 0.002666473388671875, 0.0023136138916015625, 0.0028171539306640625, 0.00011396408081054688, 0.01206207275390625, 0.00673675537109375, 0.04693603515625, 0.04052734375, 0.048309326171875, 0.0003705024719238281, 0.0014190673828125, 0.00039005279541015625, 0.0003147125244140625, 0.0012578964233398438, 0.03436279296875, 0.0019855499267578125, 0.004642486572265625, 1.6689300537109375e-06, 4.8279762268066406e-05, 0.00012183189392089844, 2.9802322387695312e-06, 0.004184722900390625, 0.037811279296875, 0.00018477439880371094, 0.18701171875, 0.01259613037109375, 0.126953125, 5.8531761169433594e-05, 0.438720703125, 0.6259765625, 2.01953125, 0.806640625, 0.22216796875, 0.43359375, 0.0120391845703125], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 3414, 328, 322, 1858, 4452]}
{"line_number": 328, "line_type": "original", "code": "        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());", "entropy": 1.0283203125, "is_bug_line": false, "sus_score": 0.33805, "per_token_entropy": [3.115234375, 3.939453125, 4.70703125, 0.08270263671875, 0.054656982421875, 7.84375, 2.025390625, 0.81591796875, 0.0168914794921875, 0.050994873046875, 0.95849609375, 0.00992584228515625, 0.08746337890625, 0.59033203125, 0.067138671875, 0.0015401840209960938, 0.0305023193359375, 0.00010156631469726562, 0.0011501312255859375, 0.11968994140625, 0.00409698486328125, 9.655952453613281e-06, 0.0006799697875976562, 0.1529541015625], "tokens": [351, 2064, 4630, 17152, 280, 6550, 2352, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 328, "line_type": "generated", "code": "\n    /**\n     * Scales a row.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   row = multiple * row\n     * </p>\n     * @param row row index\n     * @param multiple", "entropy": 0.1783447265625, "is_bug_line": false, "sus_score": 0.33805, "per_token_entropy": [0.322021484375, 1.6396484375, 0.035125732421875, 0.0005164146423339844, 3.974609375, 0.00016367435455322266, 0.357177734375, 0.0199127197265625, 0.82080078125, 0.0132293701171875, 0.0004622936248779297, 0.281494140625, 0.005542755126953125, 0.0008983612060546875, 0.0074920654296875, 7.748603820800781e-05, 0.0107879638671875, 0.046875, 0.0011835098266601562, 0.0016689300537109375, 0.007843017578125, 0.00479888916015625, 0.002227783203125, 0.003936767578125, 0.00450897216796875, 0.0016956329345703125, 0.005741119384765625, 0.0012378692626953125, 5.435943603515625e-05, 0.11785888671875, 0.08099365234375, 0.31884765625, 0.70947265625, 0.0035228729248046875, 0.0155487060546875, 0.0372314453125, 0.0006451606750488281, 0.0150299072265625, 3.731250762939453e-05, 0.001026153564453125, 0.0014705657958984375, 0.00019943714141845703, 0.034423828125, 0.00014543533325195312, 0.039215087890625, 0.263671875, 0.03662109375, 0.0149993896484375, 0.0015316009521484375, 5.888938903808594e-05, 8.189678192138672e-05, 0.01044464111328125], "tokens": [284, 1022, 275, 319, 30927, 1882, 312, 2698, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 2698, 280, 4609, 319, 2698, 275, 319, 576, 98, 48, 275, 319, 477, 753, 2698, 2698, 1650, 275, 319, 477, 753, 4609]}
