{"line_number": 279, "line_type": "original", "code": "     * @param relationship relationship to count", "entropy": 2.818359375, "is_bug_line": false, "sus_score": 0.33858, "per_token_entropy": [6.65234375, 3.150390625, 1.1396484375, 0.91943359375, 7.53125, 1.4736328125, 0.5419921875, 1.1318359375], "tokens": [262, 319, 477, 753, 12112, 12112, 372, 2385]}
{"line_number": 279, "line_type": "generated", "code": "\n            // No objective function, so no variables to drop\n            return;\n        }\n\n        // Get the objective function\n        final RealVector objective = getObjectiveFunction(0);\n\n        // Add the positive cost non-artificial variables to the objective function\n        for (", "entropy": 0.7578125, "is_bug_line": false, "sus_score": 0.33858, "per_token_entropy": [0.7373046875, 1.2109375, 3.00390625, 1.8828125, 0.417724609375, 1.4462890625, 1.0390625, 1.8056640625, 2.697265625, 0.53271484375, 0.265625, 1.3017578125, 0.0960693359375, 0.006679534912109375, 0.0224151611328125, 0.00098419189453125, 0.51123046875, 0.419921875, 2.94140625, 0.427978515625, 1.7626953125, 0.443603515625, 1.1865234375, 0.85986328125, 0.1304931640625, 0.08953857421875, 0.52783203125, 0.421142578125, 0.48828125, 0.166748046875, 1.2099609375, 1.13671875, 0.5078125, 0.111083984375, 0.58837890625, 0.0635986328125, 3.603515625, 0.712890625, 1.5693359375, 0.333740234375, 0.1806640625, 0.013458251953125, 0.0087432861328125, 0.001689910888671875, 0.033782958984375, 0.376708984375, 0.09222412109375, 0.81005859375, 0.464599609375, 0.10137939453125, 0.62548828125, 0.0014009475708007812], "tokens": [324, 434, 3139, 25110, 667, 30, 1259, 1289, 4886, 372, 6278, 324, 442, 45, 291, 320, 584, 434, 1390, 322, 25110, 667, 291, 1158, 11443, 2863, 25110, 280, 622, 33312, 2447, 26, 34, 293, 584, 434, 2222, 322, 11557, 7847, 2979, 31, 502, 31251, 4886, 372, 322, 25110, 667, 291, 436, 308]}
{"line_number": 344, "line_type": "original", "code": "        for (int i = 0; i < getNumArtificialVariables(); i++) {", "entropy": 0.5986328125, "is_bug_line": false, "sus_score": 0.32949, "per_token_entropy": [3.142578125, 3.7734375, 0.06378173828125, 0.0816650390625, 0.131103515625, 0.00608062744140625, 0.56787109375, 0.04547119140625, 0.026092529296875, 0.001972198486328125, 0.032806396484375, 0.383544921875, 2.9140625, 0.00040149688720703125, 0.0367431640625, 0.0396728515625, 0.0472412109375, 0.007110595703125, 0.07635498046875], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 5271, 31251, 10165, 473, 595, 1987, 301]}
{"line_number": 344, "line_type": "generated", "code": "\n     * @return the current solution\n     */\n    RealVector getSolution() {\n        RealVector solution = new ArrayRealVector(getWidth() - getNumObjectiveFunctions());\n        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1;", "entropy": 0.2337646484375, "is_bug_line": false, "sus_score": 0.32949, "per_token_entropy": [0.63720703125, 0.0267181396484375, 0.1556396484375, 0.08013916015625, 0.31591796875, 0.69677734375, 0.09124755859375, 0.3583984375, 0.59228515625, 0.03936767578125, 1.07421875, 0.00684356689453125, 0.221923828125, 0.09613037109375, 0.0487060546875, 0.026824951171875, 0.192138671875, 1.734375, 0.001865386962890625, 0.452392578125, 0.012176513671875, 0.525390625, 0.0018014907836914062, 0.021270751953125, 1.1324882507324219e-05, 0.005535125732421875, 1.5205078125, 0.56201171875, 0.037628173828125, 0.453369140625, 0.295166015625, 4.935264587402344e-05, 0.492919921875, 0.1776123046875, 0.1617431640625, 0.0011568069458007812, 0.006290435791015625, 0.07989501953125, 0.0009918212890625, 0.234130859375, 0.00012421607971191406, 4.410743713378906e-06, 0.125, 0.0013933181762695312, 0.0006136894226074219, 0.0550537109375, 0.00624847412109375, 0.468994140625, 0.0018548965454101562, 0.05413818359375, 0.0005898475646972656, 0.001194000244140625], "tokens": [275, 319, 477, 601, 322, 1550, 5295, 275, 569, 284, 11443, 2863, 622, 13628, 346, 301, 291, 11443, 2863, 5295, 280, 537, 2629, 6877, 2863, 26, 21422, 346, 429, 44929, 33312, 10905, 1035, 291, 436, 308, 410, 595, 280, 44929, 33312, 10905, 473, 595, 333, 622, 2611, 346, 429, 225, 35, 45]}
{"line_number": 347, "line_type": "original", "code": "            columnsToDrop.add(col);", "entropy": 2.9765625, "is_bug_line": false, "sus_score": 0.29225, "per_token_entropy": [6.84765625, 10.6328125, 1.19921875, 1.37109375, 0.39404296875, 0.1551513671875, 0.0093536376953125, 6.0078125, 0.1650390625], "tokens": [1468, 6090, 705, 6243, 32, 669, 26, 748, 293]}
{"line_number": 347, "line_type": "generated", "code": "\n        return solution;\n    }\n\n    /**\n     * Get the current objective function value.\n     *\n     * @return current objective function value\n     */\n    protected double getObjectiveValue() {\n        return getObjectiveValue(solution.getPointRef());\n    }\n\n   ", "entropy": 0.3251953125, "is_bug_line": false, "sus_score": 0.29225, "per_token_entropy": [0.8984375, 0.69775390625, 1.6513671875, 0.031005859375, 0.02685546875, 0.0014667510986328125, 0.24462890625, 0.07244873046875, 0.052490234375, 6.985664367675781e-05, 1.052734375, 0.06427001953125, 1.169921875, 1.3916015625, 1.2255859375, 0.1561279296875, 0.1348876953125, 0.0252838134765625, 0.0011415481567382812, 0.157470703125, 7.486343383789062e-05, 0.0023479461669921875, 0.0032806396484375, 0.5146484375, 0.1109619140625, 0.02679443359375, 0.00669097900390625, 0.0535888671875, 0.052490234375, 0.009307861328125, 0.255126953125, 0.054534912109375, 0.1400146484375, 0.10528564453125, 0.374267578125, 0.003437042236328125, 0.0038738250732421875, 0.6279296875, 0.2196044921875, 1.06640625, 1.5927734375, 0.31103515625, 0.0374755859375, 0.84033203125, 0.89013671875, 0.056671142578125, 0.0008397102355957031, 0.382080078125, 0.03741455078125, 0.01116943359375, 4.374980926513672e-05, 0.0523681640625], "tokens": [291, 442, 5295, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 1550, 25110, 667, 786, 32, 275, 319, 275, 319, 477, 601, 1550, 25110, 667, 786, 275, 569, 284, 2522, 2064, 622, 33312, 882, 346, 301, 291, 442, 622, 33312, 882, 26, 10957, 32, 371, 1943, 2084, 1035, 284, 320, 446]}
{"line_number": 337, "line_type": "original", "code": "            final double entry = tableau.getEntry(0, i);", "entropy": 0.81787109375, "is_bug_line": false, "sus_score": 0.28568, "per_token_entropy": [3.923828125, 5.015625, 0.1383056640625, 1.4326171875, 0.23291015625, 0.2490234375, 0.0005917549133300781, 0.0148162841796875, 0.001308441162109375, 0.0035686492919921875, 0.373779296875, 0.00030803680419921875, 0.0269927978515625, 0.036285400390625], "tokens": [1468, 1158, 2064, 3414, 280, 1858, 4452, 32, 48895, 26, 34, 30, 595, 293]}
{"line_number": 337, "line_type": "generated", "code": "\n        }\n        return true;\n    }\n\n    /**\n     * Returns the objective value.\n     * @return the objective value\n     * @throws IllegalStateException if the problem is not solved\n     */\n    double getObjectiveValue() {\n        if (isOptimal()) {", "entropy": 0.31005859375, "is_bug_line": false, "sus_score": 0.28568, "per_token_entropy": [0.25146484375, 0.047149658203125, 0.220703125, 0.050384521484375, 0.034454345703125, 0.001922607421875, 0.07366943359375, 0.00104522705078125, 0.2060546875, 0.081298828125, 0.030792236328125, 0.00017440319061279297, 0.79150390625, 0.75732421875, 2.39453125, 0.43408203125, 1.1552734375, 0.132568359375, 0.0019273757934570312, 0.060760498046875, 0.0172271728515625, 0.0286712646484375, 0.1151123046875, 0.0220489501953125, 0.285888671875, 0.955078125, 0.01128387451171875, 0.2452392578125, 1.33203125, 0.0287017822265625, 0.30029296875, 0.90966796875, 0.271240234375, 0.192138671875, 1.09375, 0.320556640625, 0.0721435546875, 0.004787445068359375, 0.422119140625, 0.0261077880859375, 0.038848876953125, 0.046783447265625, 0.0012502670288085938, 0.071533203125, 0.048858642578125, 0.481201171875, 1.0390625, 0.87255859375, 0.10284423828125, 2.7418136596679688e-05, 0.035888671875, 0.0034084320068359375], "tokens": [291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 25110, 786, 32, 275, 319, 477, 601, 322, 25110, 786, 275, 319, 477, 5117, 21665, 415, 322, 3708, 438, 646, 19479, 275, 569, 284, 2064, 622, 33312, 882, 346, 301, 291, 415, 308, 297, 5482, 2977, 1157, 301]}
{"line_number": 362, "line_type": "original", "code": "          columnLabels.remove((int) columnsToDrop.get(i));", "entropy": 2.349609375, "is_bug_line": false, "sus_score": 0.28533, "per_token_entropy": [3.6015625, 10.03125, 0.1795654296875, 0.09942626953125, 2.857421875, 6.9765625, 3.62890625, 0.11114501953125, 6.77734375, 2.109375, 0.1878662109375, 0.236083984375, 0.4306640625, 0.01983642578125, 0.2396240234375, 0.10009765625], "tokens": [2033, 2623, 8718, 32, 2546, 1162, 410, 27, 6090, 705, 6243, 32, 371, 26, 91, 876]}
{"line_number": 362, "line_type": "generated", "code": "\n          // if the basic row is found to be the negative variable row\n          // set the coefficient to -1 -> this case handles infeasible problems\n          // where the negative variable is not basic\n          if (basicRow == null) {\n            coefficients[i", "entropy": 0.61279296875, "is_bug_line": false, "sus_score": 0.28533, "per_token_entropy": [0.9912109375, 2.42578125, 1.3779296875, 0.2880859375, 0.344970703125, 0.07220458984375, 0.25048828125, 0.6923828125, 0.07025146484375, 0.0616455078125, 1.0458984375, 0.4560546875, 0.70556640625, 0.464599609375, 0.266357421875, 0.09796142578125, 0.2408447265625, 0.0280914306640625, 0.0290069580078125, 0.04925537109375, 1.439453125, 0.41650390625, 0.9306640625, 0.084716796875, 0.035491943359375, 0.03204345703125, 2.595703125, 0.268310546875, 0.181396484375, 1.8408203125, 0.449951171875, 1.3583984375, 1.9912109375, 0.57861328125, 1.3828125, 0.425048828125, 0.77294921875, 1.865234375, 1.5380859375, 0.6259765625, 0.6259765625, 0.0484619140625, 0.24755859375, 0.004947662353515625, 0.35546875, 0.43896484375, 0.289306640625, 0.0083770751953125, 0.74560546875, 0.33544921875, 0.0001728534698486328, 0.0010824203491210938], "tokens": [616, 434, 415, 322, 6550, 2698, 438, 2431, 372, 526, 322, 11003, 2677, 2698, 616, 434, 739, 322, 17134, 372, 429, 35, 967, 458, 1135, 13650, 328, 1225, 38294, 9808, 616, 434, 2154, 322, 11003, 2677, 438, 646, 6550, 616, 415, 308, 6390, 2352, 610, 744, 27, 301, 324, 26370, 77, 91]}
