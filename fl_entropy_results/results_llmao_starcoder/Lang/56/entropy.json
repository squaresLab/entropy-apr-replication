{"line_number": 167, "line_type": "original", "code": "        return getInstance(pattern, null, null);", "entropy": 1.986328125, "is_bug_line": false, "sus_score": 0.49896, "per_token_entropy": [3.84375, 5.46484375, 5.52734375, 0.260986328125, 0.441650390625, 0.00982666015625, 3.89453125, 0.01348114013671875, 0.377197265625, 0.0196075439453125], "tokens": [351, 442, 31637, 26, 5607, 30, 744, 30, 744, 293]}
{"line_number": 167, "line_type": "generated", "code": "\n        }\n        return format;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Creates a new formatter using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat}", "entropy": 0.17919921875, "is_bug_line": false, "sus_score": 0.49896, "per_token_entropy": [1.2666015625, 0.493408203125, 0.14404296875, 0.098876953125, 0.033538818359375, 0.00366973876953125, 0.0401611328125, 0.0012025833129882812, 0.269287109375, 0.60107421875, 0.0238189697265625, 0.022491455078125, 0.033599853515625, 0.0131378173828125, 3.993511199951172e-05, 0.302001953125, 5.8531761169433594e-05, 0.0016145706176757812, 1.822265625, 0.021392822265625, 0.59521484375, 0.8388671875, 0.76416015625, 0.016998291015625, 0.12384033203125, 0.08404541015625, 1.025390625, 0.18017578125, 0.044403076171875, 0.1385498046875, 1.823902130126953e-05, 0.01274871826171875, 0.0040130615234375, 0.131103515625, 2.777576446533203e-05, 0.0005502700805664062, 0.002300262451171875, 0.0006093978881835938, 0.043212890625, 5.137920379638672e-05, 0.084228515625, 0.001789093017578125, 0.002384185791015625, 0.0163726806640625, 0.007625579833984375, 7.522106170654297e-05, 0.005100250244140625, 1.2755393981933594e-05, 0.0006275177001953125, 3.814697265625e-06, 0.0004000663757324219, 0.0008120536804199219], "tokens": [291, 320, 291, 442, 2179, 45, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 333, 98, 48, 26001, 312, 537, 14971, 1471, 322, 3191, 5257, 30, 1133, 10790, 275, 319, 461, 11259, 1730, 98, 48, 275, 319, 5384, 319, 477, 753, 5257, 225, 3088, 1204, 1383, 32, 878, 32, 41099, 111]}
{"line_number": 553, "line_type": "original", "code": "            locale = Locale.getDefault();", "entropy": 3.310546875, "is_bug_line": false, "sus_score": 0.41711, "per_token_entropy": [3.654296875, 14.1328125, 2.513671875, 2.6484375, 0.0179290771484375, 0.177978515625, 0.025421142578125], "tokens": [1468, 11259, 280, 23265, 32, 13737, 473]}
{"line_number": 553, "line_type": "generated", "code": "\n            } else if (tokenLen == 1) {\n                int ch = token.charAt(0);\n                switch (ch) {\n                    case 'G':\n                        addRule(rules, new EraRule(this, ERAs));\n                        break;", "entropy": 0.236328125, "is_bug_line": false, "sus_score": 0.41711, "per_token_entropy": [0.201416015625, 0.058441162109375, 0.94873046875, 0.1319580078125, 0.7802734375, 0.06951904296875, 0.07684326171875, 0.1708984375, 0.007415771484375, 0.0078277587890625, 0.00322723388671875, 0.0019207000732421875, 0.161865234375, 1.4228515625, 0.9990234375, 0.0030879974365234375, 0.0005083084106445312, 0.00035452842712402344, 0.00012886524200439453, 3.993511199951172e-05, 0.0030727386474609375, 0.0014638900756835938, 0.485595703125, 0.951171875, 0.1275634765625, 0.0059356689453125, 8.463859558105469e-05, 0.00742340087890625, 0.28564453125, 0.09393310546875, 0.07171630859375, 0.015960693359375, 0.0031108856201171875, 0.8603515625, 1.2470703125, 0.027679443359375, 0.01055908203125, 0.0626220703125, 0.0002281665802001953, 0.317626953125, 0.76904296875, 0.07421875, 0.127197265625, 0.01433563232421875, 0.95556640625, 0.00921630859375, 0.53271484375, 0.001758575439453125, 0.07611083984375, 0.04412841796875, 0.0574951171875, 0.0012216567993164062], "tokens": [324, 320, 813, 415, 308, 1956, 5745, 610, 225, 35, 27, 301, 400, 629, 663, 280, 2404, 32, 15611, 26, 34, 293, 400, 3578, 308, 380, 27, 301, 528, 1135, 330, 57, 950, 715, 1015, 3842, 26, 7004, 30, 537, 516, 1691, 3842, 26, 578, 30, 32376, 1465, 876, 715, 1626, 45]}
{"line_number": 133, "line_type": "original", "code": "    /**", "entropy": 4.66796875, "is_bug_line": false, "sus_score": 0.38199, "per_token_entropy": [3.619140625, 5.71875], "tokens": [264, 1022]}
{"line_number": 133, "line_type": "generated", "code": "\n    }\n\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param", "entropy": 0.05517578125, "is_bug_line": false, "sus_score": 0.38199, "per_token_entropy": [0.1346435546875, 0.0938720703125, 0.2529296875, 0.0310821533203125, 0.006542205810546875, 2.1219253540039062e-05, 0.01171112060546875, 1.3589859008789062e-05, 0.0001895427703857422, 0.007648468017578125, 0.0029754638671875, 0.006435394287109375, 0.00257110595703125, 0.0045166015625, 0.010772705078125, 0.0012722015380859375, 0.01094818115234375, 0.7509765625, 0.1064453125, 0.884765625, 0.0987548828125, 4.5180320739746094e-05, 0.0024662017822265625, 0.00696563720703125, 0.0269317626953125, 2.9087066650390625e-05, 0.0004417896270751953, 0.0036334991455078125, 4.1365623474121094e-05, 0.051971435546875, 3.230571746826172e-05, 0.21435546875, 0.00032210350036621094, 0.00027108192443847656, 0.00283050537109375, 0.0005283355712890625, 7.283687591552734e-05, 0.0009756088256835938, 9.775161743164062e-06, 0.00012445449829101562, 2.47955322265625e-05, 0.00023245811462402344, 0.00028443336486816406, 0.0007734298706054688, 0.0078125, 4.398822784423828e-05, 0.0012063980102539062, 0.0011997222900390625, 0.125732421875, 1.1682510375976562e-05, 0.00010585784912109375, 0.0001277923583984375], "tokens": [284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 312, 14971, 1980, 1471, 322, 3191, 5257, 30, 1133, 10790, 275, 319, 461, 11259, 1730, 98, 48, 275, 319, 5384, 319, 477, 753, 5257, 225, 3088, 1204, 1383, 32, 878, 32, 41099, 111, 13022, 275, 319, 225, 5257, 275, 319, 477, 753]}
{"line_number": 107, "line_type": "original", "code": "    public static final int SHORT = DateFormat.SHORT;", "entropy": 1.55078125, "is_bug_line": false, "sus_score": 0.37398, "per_token_entropy": [4.125, 2.484375, 0.033905029296875, 7.5, 2.669921875, 2.462890625, 0.0026226043701171875, 0.7509765625, 0.07403564453125, 0.00034928321838378906, 0.008636474609375, 0.0005464553833007812, 0.04339599609375], "tokens": [264, 562, 907, 1158, 629, 5312, 2426, 280, 2821, 2207, 32, 15456, 45]}
{"line_number": 107, "line_type": "generated", "code": "\n\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     * \n     * @param pattern  the pattern, not null\n     * @return a date/time formatter\n     */\n    public static Fast", "entropy": 0.0635986328125, "is_bug_line": false, "sus_score": 0.37398, "per_token_entropy": [0.7255859375, 0.17333984375, 0.011474609375, 3.218650817871094e-05, 0.052734375, 1.049041748046875e-05, 0.0002294778823852539, 0.0289764404296875, 0.00482177734375, 0.1676025390625, 0.01253509521484375, 0.0082244873046875, 0.004116058349609375, 0.0231170654296875, 0.07470703125, 0.257568359375, 0.00850677490234375, 0.1431884765625, 1.1205673217773438e-05, 0.07037353515625, 0.0014400482177734375, 0.0287322998046875, 4.017353057861328e-05, 0.0007257461547851562, 0.0064849853515625, 3.0875205993652344e-05, 0.14013671875, 3.0517578125e-05, 0.120361328125, 0.008331298828125, 0.0004813671112060547, 0.010589599609375, 0.06866455078125, 0.01448822021484375, 0.289306640625, 0.053985595703125, 0.04486083984375, 0.06365966796875, 6.794929504394531e-05, 0.007144927978515625, 0.01387786865234375, 0.05462646484375, 0.06951904296875, 0.0016584396362304688, 4.029273986816406e-05, 0.00016760826110839844, 0.0037212371826171875, 0.5107421875, 0.00843048095703125, 0.002262115478515625, 0.00027489662170410156, 0.0166015625], "tokens": [446, 1022, 275, 319, 333, 98, 48, 20931, 312, 14971, 1980, 1471, 322, 3191, 5257, 328, 322, 275, 319, 1244, 11259, 1730, 98, 48, 275, 319, 5384, 319, 477, 753, 5257, 225, 322, 5257, 30, 646, 744, 275, 319, 477, 601, 312, 2340, 33, 1003, 14971, 275, 569, 284, 562, 907, 15938]}
{"line_number": 82, "line_type": "original", "code": "    // taking the value and adding (mathematically) the ASCII value for '0'.", "entropy": 3.576171875, "is_bug_line": false, "sus_score": 0.36082, "per_token_entropy": [2.169921875, 3.1484375, 10.7578125, 2.044921875, 4.6640625, 5.4296875, 3.404296875, 5.3828125, 11.2265625, 1.505859375, 0.1646728515625, 0.07916259765625, 3.4609375, 5.23046875, 1.0009765625, 1.7841796875, 0.99755859375, 2.142578125, 3.333984375], "tokens": [264, 434, 15137, 322, 786, 461, 7165, 308, 1287, 19732, 1247, 27, 322, 26675, 786, 436, 330, 34, 2473]}
{"line_number": 82, "line_type": "generated", "code": "\n    /**\n     * The date format.\n     */\n    private final DateFormat mFormat;\n    /**\n     * The length of the date format.\n     */\n    private final int mFormatLength;\n\n    /**\n     * <p>Constructs a FastDateFormat using", "entropy": 0.337646484375, "is_bug_line": false, "sus_score": 0.36082, "per_token_entropy": [0.45166015625, 0.42626953125, 0.0218505859375, 4.0411949157714844e-05, 0.25634765625, 1.09375, 0.457763671875, 0.06732177734375, 0.0239715576171875, 0.01560211181640625, 0.071044921875, 0.0249481201171875, 0.74853515625, 0.78564453125, 0.00031948089599609375, 0.00897216796875, 0.270751953125, 0.0016241073608398438, 0.74462890625, 0.039459228515625, 0.0141448974609375, 0.0002598762512207031, 0.3330078125, 2.330078125, 0.1380615234375, 0.0711669921875, 1.0048828125, 0.55908203125, 0.274169921875, 0.01122283935546875, 0.01422882080078125, 0.06494140625, 0.010284423828125, 0.2247314453125, 0.0292816162109375, 0.003204345703125, 0.291015625, 0.247802734375, 0.0008149147033691406, 1.251953125, 0.453125, 0.02056884765625, 0.00014400482177734375, 1.880859375, 0.002147674560546875, 0.006771087646484375, 0.1044921875, 0.3994140625, 0.0146942138671875, 0.7763671875, 6.35385513305664e-05, 1.5234375], "tokens": [284, 1022, 275, 319, 886, 2340, 2179, 32, 275, 569, 284, 945, 1158, 2821, 2207, 345, 2207, 45, 284, 1022, 275, 319, 886, 3104, 432, 322, 2340, 2179, 32, 275, 569, 284, 945, 1158, 629, 345, 2207, 2380, 45, 446, 1022, 275, 319, 333, 98, 48, 13614, 101, 312, 15938, 15645, 1471]}
