{"line_number": 1134, "line_type": "original", "code": "            if (zone.useDaylightTime()", "entropy": 1.658203125, "is_bug_line": true, "sus_score": 0.49537, "per_token_entropy": [6.16796875, 1.9775390625, 0.023406982421875, 5.89453125, 0.947265625, 0.27734375, 0.0032062530517578125, 0.00015532970428466797, 0.0007448196411132812, 1.2880859375], "tokens": [1468, 415, 308, 5634, 32, 539, 6280, 2429, 1043, 346]}
{"line_number": 1134, "line_type": "generated", "code": "\n            if (mColon) {\n                buffer.append(':');\n            }\n        }\n    }\n\n    /**\n     * <p>Inner class to output a time zone as an abbreviation.</p>\n     */\n    private static class TimeZoneAbbreviationRule implements", "entropy": 0.14990234375, "is_bug_line": true, "sus_score": 0.49537, "per_token_entropy": [0.9267578125, 0.84765625, 0.0146331787109375, 0.18212890625, 0.00021839141845703125, 0.01361846923828125, 0.00823974609375, 0.034576416015625, 0.1328125, 0.0003364086151123047, 0.0006127357482910156, 0.83837890625, 0.001605987548828125, 0.0499267578125, 0.0004787445068359375, 0.3720703125, 0.0006890296936035156, 0.023284912109375, 0.0013093948364257812, 0.315673828125, 0.123046875, 0.006786346435546875, 0.0003273487091064453, 0.059783935546875, 0.00023472309112548828, 0.0010738372802734375, 0.0518798828125, 0.001071929931640625, 0.033721923828125, 0.1019287109375, 0.356689453125, 0.1336669921875, 0.032501220703125, 0.1290283203125, 1.1728515625, 0.9833984375, 0.01065826416015625, 0.3759765625, 0.00026226043701171875, 0.0004718303680419922, 0.0005016326904296875, 0.0251312255859375, 0.0013952255249023438, 0.013336181640625, 0.0016574859619140625, 0.00864410400390625, 0.001461029052734375, 1.52587890625e-05, 0.2476806640625, 0.1512451171875, 3.8743019104003906e-05, 0.0066375732421875], "tokens": [324, 415, 308, 95, 47792, 27, 301, 400, 3112, 32, 1689, 16487, 895, 324, 320, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 10893, 443, 372, 1688, 312, 1133, 10790, 619, 600, 31838, 17029, 1730, 98, 48, 275, 569, 284, 945, 907, 443, 3717, 6767, 44336, 17029, 3842, 4575]}
{"line_number": 733, "line_type": "original", "code": "                buffer.append((char)(value + '0'));", "entropy": 1.001953125, "is_bug_line": false, "sus_score": 0.45266, "per_token_entropy": [6.0, 1.1630859375, 0.00507354736328125, 0.016265869140625, 0.52001953125, 0.01412200927734375, 0.158447265625, 0.06329345703125, 3.943359375, 0.0570068359375, 0.07684326171875, 0.005435943603515625], "tokens": [2071, 3112, 32, 1689, 1162, 1594, 2502, 853, 474, 330, 34, 4646]}
{"line_number": 733, "line_type": "generated", "code": "\n            }\n        }\n    }\n\n    /**\n     * <p>Inner class to output a two digit year.</p>\n     */\n    private static class TwoDigitYearField implements NumberRule {\n        static final TwoDigitYearField INSTANCE = new TwoDigitYearField", "entropy": 0.09503173828125, "is_bug_line": false, "sus_score": 0.45266, "per_token_entropy": [0.09478759765625, 0.0007557868957519531, 0.0126190185546875, 0.0001233816146850586, 0.050628662109375, 0.0017614364624023438, 0.2010498046875, 0.053741455078125, 0.004764556884765625, 0.0005068778991699219, 0.039581298828125, 0.00046825408935546875, 0.0009360313415527344, 0.02496337890625, 0.0014276504516601562, 0.0144805908203125, 0.0953369140625, 1.044921875, 1.447265625, 0.2763671875, 0.564453125, 0.07525634765625, 0.00014781951904296875, 0.000682830810546875, 0.0012264251708984375, 0.01934814453125, 0.0011186599731445312, 0.01132965087890625, 0.0017480850219726562, 0.022674560546875, 0.016876220703125, 0.0003190040588378906, 0.02325439453125, 0.004177093505859375, 0.0293731689453125, 0.0210418701171875, 0.0003056526184082031, 0.00997161865234375, 0.056549072265625, 0.6513671875, 0.0018796920776367188, 0.011199951171875, 6.67572021484375e-06, 2.288818359375e-05, 0.00011897087097167969, 0.006481170654296875, 0.04486083984375, 0.0006346702575683594, 4.5180320739746094e-05, 5.960464477539062e-07, 8.344650268554688e-07, 7.152557373046875e-07], "tokens": [324, 320, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 10893, 443, 372, 1688, 312, 3134, 16994, 4947, 1730, 98, 48, 275, 569, 284, 945, 907, 443, 16510, 21530, 6617, 1176, 4575, 5104, 3842, 301, 291, 907, 1158, 16510, 21530, 6617, 1176, 40000, 280, 537, 16510, 21530, 6617, 1176]}
{"line_number": 1243, "line_type": "original", "code": "                return", "entropy": 5.97265625, "is_bug_line": false, "sus_score": 0.45159, "per_token_entropy": [8.9375, 3.009765625], "tokens": [2071, 442]}
{"line_number": 1243, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.45159, "per_token_entropy": [], "tokens": []}
{"line_number": 1004, "line_type": "original", "code": "            int value = calendar.get(Calendar.HOUR);", "entropy": 1.2802734375, "is_bug_line": false, "sus_score": 0.40271, "per_token_entropy": [7.4296875, 4.5703125, 1.32421875, 0.055999755859375, 0.10284423828125, 0.003997802734375, 0.005321502685546875, 0.15771484375, 0.00524139404296875, 0.0004448890686035156, 0.057647705078125, 1.64453125], "tokens": [1468, 629, 786, 280, 14461, 32, 371, 26, 9389, 32, 30540, 293]}
{"line_number": 1004, "line_type": "generated", "code": "\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, int value) {\n            mRule.appendTo(buffer, value);\n        }\n    }\n\n    /**\n     * <p>Inner class to output", "entropy": 0.02001953125, "is_bug_line": false, "sus_score": 0.40271, "per_token_entropy": [0.056610107421875, 0.0009965896606445312, 0.01385498046875, 0.0016078948974609375, 0.0007877349853515625, 3.0159950256347656e-05, 0.000560760498046875, 7.045269012451172e-05, 1.2159347534179688e-05, 7.486343383789062e-05, 0.0002397298812866211, 0.00011992454528808594, 0.00028252601623535156, 1.8835067749023438e-05, 9.059906005859375e-05, 0.00010752677917480469, 0.038482666015625, 1.1801719665527344e-05, 1.8477439880371094e-05, 9.655952453613281e-06, 0.00015497207641601562, 0.00011444091796875, 9.417533874511719e-06, 0.00040841102600097656, 0.00046372413635253906, 5.1856040954589844e-05, 0.0006661415100097656, 0.032012939453125, 0.0171051025390625, 9.059906005859375e-06, 4.7087669372558594e-05, 1.4662742614746094e-05, 5.2094459533691406e-05, 4.756450653076172e-05, 2.872943878173828e-05, 0.000640869140625, 0.00482177734375, 0.2222900390625, 0.00019168853759765625, 0.0096282958984375, 0.0005459785461425781, 0.2900390625, 0.059967041015625, 0.0041351318359375, 0.0001875162124633789, 0.042724609375, 0.0003859996795654297, 0.0008935928344726562, 0.036956787109375, 0.001911163330078125, 0.034698486328125, 0.1654052734375], "tokens": [291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 629, 786, 27, 301, 324, 345, 3842, 32, 30716, 26, 2668, 30, 786, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 10893, 443, 372, 1688]}
{"line_number": 1084, "line_type": "original", "code": "            String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);", "entropy": 1.0224609375, "is_bug_line": false, "sus_score": 0.35057, "per_token_entropy": [3.751953125, 2.34375, 3.83203125, 0.2357177734375, 4.52734375, 0.434814453125, 0.10626220703125, 0.0035610198974609375, 0.0076446533203125, 1.220703125, 0.27978515625, 0.00044655799865722656, 0.0889892578125, 0.262939453125, 0.01116180419921875, 0.254638671875, 0.0101165771484375], "tokens": [1468, 892, 9553, 280, 281, 26223, 3933, 2597, 32, 524, 2797, 28772, 26, 678, 30, 786, 293]}
{"line_number": 1084, "line_type": "generated", "code": "\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, int value) {\n            TimeZone timeZone = zone;\n            if (value == 1) {\n                timeZone = zone.getD", "entropy": 0.228515625, "is_bug_line": false, "sus_score": 0.35057, "per_token_entropy": [0.8681640625, 0.006420135498046875, 0.040008544921875, 0.005573272705078125, 0.001674652099609375, 0.00010216236114501953, 0.0081329345703125, 9.775161743164062e-05, 5.3882598876953125e-05, 0.0003120899200439453, 0.00455474853515625, 0.0006961822509765625, 0.002223968505859375, 5.555152893066406e-05, 0.0005235671997070312, 0.0013494491577148438, 0.0019931793212890625, 9.78708267211914e-05, 2.014636993408203e-05, 0.00012373924255371094, 0.0016984939575195312, 0.000560760498046875, 0.000217437744140625, 0.00637054443359375, 0.04486083984375, 0.0004146099090576172, 0.0012359619140625, 0.42138671875, 2.26953125, 8.58306884765625e-06, 1.55859375, 0.0019550323486328125, 0.1881103515625, 0.97900390625, 0.10650634765625, 0.1812744140625, 0.63818359375, 0.0628662109375, 0.14404296875, 0.74267578125, 0.1441650390625, 0.6943359375, 0.01556396484375, 0.00246429443359375, 0.06463623046875, 1.2158203125, 4.410743713378906e-06, 0.0209808349609375, 1.048828125, 0.0034694671630859375, 0.081787109375, 0.297607421875], "tokens": [291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 629, 786, 27, 301, 324, 3717, 6767, 1133, 6767, 280, 10790, 45, 324, 415, 308, 853, 610, 225, 35, 27, 301, 400, 1133, 6767, 280, 10790, 32, 371, 54]}
