{"line_number": 584, "line_type": "original", "code": "        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {", "entropy": 1.3603515625, "is_bug_line": true, "sus_score": 0.50894, "per_token_entropy": [3.259765625, 1.1796875, 0.10614013671875, 6.63671875, 0.00440216064453125, 0.0250701904296875, 0.00920867919921875, 9.5625, 0.431396484375, 5.4765625, 3.2578125, 1.908203125, 0.405029296875, 0.11859130859375, 0.0004372596740722656, 0.00018739700317382812, 0.00054168701171875, 0.00354766845703125, 0.003265380859375, 0.010162353515625, 0.0037364959716796875, 0.00130462646484375, 0.02691650390625, 0.212158203125], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 103, 27, 2511, 225, 35, 1276, 4175, 32, 3596, 26, 104, 27, 2511, 225, 35, 27, 301]}
{"line_number": 584, "line_type": "generated", "code": "\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     * an int\n     */\n    private static int mulAndCheck(int x, int y) {\n        long", "entropy": 0.0872802734375, "is_bug_line": true, "sus_score": 0.50894, "per_token_entropy": [0.37158203125, 0.7783203125, 0.01030731201171875, 0.04803466796875, 0.0257720947265625, 0.054046630859375, 0.304931640625, 0.0509033203125, 0.00020301342010498047, 0.020294189453125, 0.1815185546875, 0.00016224384307861328, 0.00013124942779541016, 4.6253204345703125e-05, 0.0245361328125, 0.1357421875, 0.054840087890625, 0.0018720626831054688, 0.01105499267578125, 0.0099639892578125, 0.00024580955505371094, 0.004528045654296875, 0.0001252889633178711, 0.006961822509765625, 0.08258056640625, 0.02117919921875, 0.031524658203125, 0.0026416778564453125, 0.04058837890625, 0.2457275390625, 0.00013911724090576172, 0.342041015625, 0.66748046875, 0.0154266357421875, 0.11212158203125, 0.0172119140625, 0.087158203125, 0.01030731201171875, 0.0246734619140625, 0.4345703125, 0.0296173095703125, 9.40561294555664e-05, 0.00269317626953125, 0.03668212890625, 0.0002181529998779297, 0.00045371055603027344, 0.00926971435546875, 2.2292137145996094e-05, 0.0008335113525390625, 0.1011962890625, 0.09637451171875, 0.0291290283203125], "tokens": [275, 319, 477, 601, 322, 4054, 333, 687, 48, 106, 28, 107, 377, 687, 48, 275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646, 526, 17718, 619, 275, 319, 600, 629, 275, 569, 284, 945, 907, 629, 17476, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1946]}
{"line_number": 478, "line_type": "original", "code": "        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);", "entropy": 1.111328125, "is_bug_line": false, "sus_score": 0.31483, "per_token_entropy": [5.1015625, 5.92578125, 4.96484375, 0.140869140625, 2.076171875, 0.0015964508056640625, 0.0653076171875, 0.00017178058624267578, 0.0201873779296875, 1.173828125, 0.03802490234375, 0.0002818107604980469, 0.0015897750854492188, 0.0537109375, 0.00556182861328125, 0.0019445419311523438, 0.427734375, 0.006771087646484375], "tokens": [351, 629, 43422, 280, 48299, 5240, 6775, 22306, 26, 5717, 32, 3596, 26, 1516, 11290, 471, 39920, 293]}
{"line_number": 478, "line_type": "generated", "code": "\n     * @return a new fraction instance, with the same numerator but an\n     *         absolute denominator\n     */\n    public Fraction abs() {\n        return (numerator>=0? this : negate());\n    }\n\n    /**\n     * <p>Adds", "entropy": 0.2332763671875, "is_bug_line": false, "sus_score": 0.31483, "per_token_entropy": [0.099609375, 0.171630859375, 0.310302734375, 0.005733489990234375, 0.299560546875, 0.0204925537109375, 0.0301971435546875, 0.05517578125, 0.591796875, 1.2490234375, 0.0262298583984375, 0.3779296875, 0.389892578125, 2.2411346435546875e-05, 0.80322265625, 0.83056640625, 0.13037109375, 0.00015306472778320312, 0.04302978515625, 0.193603515625, 1.1494140625, 0.0538330078125, 0.03814697265625, 0.037750244140625, 0.01502227783203125, 0.0017900466918945312, 0.010528564453125, 0.0037517547607421875, 0.00653076171875, 0.08502197265625, 0.99658203125, 0.347412109375, 0.050567626953125, 1.239776611328125e-05, 1.3994140625, 0.0209808349609375, 0.38671875, 0.00685882568359375, 0.007068634033203125, 0.33984375, 3.2901763916015625e-05, 0.0044708251953125, 0.033905029296875, 5.602836608886719e-05, 0.205078125, 0.1976318359375, 0.00804901123046875, 1.7762184143066406e-05, 0.0421142578125, 5.1856040954589844e-05, 0.0004394054412841797, 1.0576171875], "tokens": [275, 319, 477, 601, 312, 537, 18795, 1980, 30, 623, 322, 2432, 1929, 11290, 1273, 600, 275, 319, 263, 7976, 39920, 275, 569, 284, 562, 40823, 11366, 346, 301, 291, 442, 308, 1516, 11290, 7148, 34, 1018, 458, 499, 7528, 332, 1035, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 34048]}
{"line_number": 479, "line_type": "original", "code": "        if (gcd == 1) {", "entropy": 1.84375, "is_bug_line": false, "sus_score": 0.30225, "per_token_entropy": [2.5234375, 2.2890625, 0.0693359375, 10.2421875, 0.9921875, 0.07318115234375, 0.077880859375, 0.2435302734375, 0.08905029296875], "tokens": [351, 415, 308, 46060, 610, 225, 35, 27, 301]}
{"line_number": 479, "line_type": "generated", "code": "\n        return this;\n    }\n\n    /**\n     * <p>Gets a fraction that is the absolute value of this one.</p>\n     *\n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction", "entropy": 0.111328125, "is_bug_line": false, "sus_score": 0.30225, "per_token_entropy": [1.2724609375, 0.285888671875, 0.55810546875, 0.08551025390625, 0.12091064453125, 0.002567291259765625, 0.308837890625, 0.11151123046875, 0.01543426513671875, 3.0994415283203125e-05, 0.0391845703125, 7.414817810058594e-05, 0.0004191398620605469, 0.43896484375, 0.1943359375, 0.01483154296875, 0.258056640625, 0.0098724365234375, 0.051910400390625, 0.1337890625, 0.135009765625, 0.01076507568359375, 0.000774383544921875, 0.0010957717895507812, 0.0010557174682617188, 6.771087646484375e-05, 0.0002613067626953125, 0.005523681640625, 2.753734588623047e-05, 1.3876953125, 5.543231964111328e-05, 0.0108642578125, 0.00428009033203125, 0.0023555755615234375, 0.00951385498046875, 0.006572723388671875, 0.000621795654296875, 0.0013942718505859375, 0.003757476806640625, 0.0009551048278808594, 0.001438140869140625, 0.00020802021026611328, 0.0006055831909179688, 0.01007843017578125, 0.00014579296112060547, 0.2230224609375, 0.0002865791320800781, 0.005218505859375, 0.0007476806640625, 0.045196533203125, 0.002166748046875, 0.0165252685546875], "tokens": [291, 442, 458, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 312, 18795, 688, 438, 322, 7976, 786, 432, 458, 1591, 1730, 98, 48, 275, 319, 275, 319, 333, 98, 48, 1318, 4717, 18795, 438, 646, 22974, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 312, 537, 18795]}
{"line_number": 475, "line_type": "original", "code": "        if (numerator == 0) {", "entropy": 0.6240234375, "is_bug_line": false, "sus_score": 0.28307, "per_token_entropy": [3.791015625, 1.021484375, 0.047607421875, 0.26171875, 0.0001207590103149414, 0.93115234375, 0.04730224609375, 9.071826934814453e-05, 0.08587646484375, 0.0535888671875], "tokens": [351, 415, 308, 1516, 11290, 610, 225, 34, 27, 301]}
{"line_number": 475, "line_type": "generated", "code": "\n        return this;\n    }", "entropy": 0.361083984375, "is_bug_line": false, "sus_score": 0.28307, "per_token_entropy": [0.95458984375, 0.44921875, 0.350830078125, 0.278076171875, 0.12841796875, 0.00481414794921875], "tokens": [291, 442, 458, 45, 284, 320]}
{"line_number": 230, "line_type": "original", "code": "            numerator = -numerator;", "entropy": 2.45703125, "is_bug_line": false, "sus_score": 0.26707, "per_token_entropy": [5.55078125, 6.62109375, 0.068359375, 1.39453125, 5.015625, 0.475830078125, 0.341796875, 0.1922607421875], "tokens": [1468, 1929, 11290, 280, 429, 1516, 11290, 45]}
{"line_number": 230, "line_type": "generated", "code": "\n        // convergents\n        while (delta1 > delta2 && denom2 <= 10000) {\n            a2 = (int) (a1 * y1 / y2 + a2);\n            x2 = x1 -", "entropy": 0.2454833984375, "is_bug_line": false, "sus_score": 0.26707, "per_token_entropy": [0.392333984375, 1.4951171875, 3.05859375, 0.00930023193359375, 6.318092346191406e-06, 1.1337890625, 0.5400390625, 0.389404296875, 0.22998046875, 0.11968994140625, 0.09405517578125, 0.269775390625, 8.7738037109375e-05, 0.62451171875, 0.074462890625, 0.0169830322265625, 0.173828125, 0.2467041015625, 0.0034732818603515625, 0.00017952919006347656, 0.002872467041015625, 0.00032830238342285156, 0.0017833709716796875, 0.1363525390625, 0.0229644775390625, 0.395751953125, 1.095703125, 0.007099151611328125, 0.002826690673828125, 0.0202484130859375, 0.00360870361328125, 0.07916259765625, 0.01047515869140625, 0.460205078125, 5.960464477539062e-07, 0.296630859375, 0.01953125, 0.0005192756652832031, 0.1907958984375, 0.01824951171875, 1.5497207641601562e-06, 0.482421875, 0.12005615234375, 0.1002197265625, 0.0016422271728515625, 0.096923828125, 0.18505859375, 0.005401611328125, 0.0003864765167236328, 0.135009765625, 2.1457672119140625e-06, 0.0044403076171875], "tokens": [291, 434, 15941, 89, 10704, 291, 2218, 308, 6558, 35, 848, 7715, 36, 962, 24257, 36, 2511, 225, 35, 34, 34, 34, 34, 27, 301, 324, 312, 36, 280, 308, 410, 27, 308, 83, 35, 319, 533, 35, 517, 533, 36, 474, 312, 36, 293, 324, 816, 36, 280, 816, 35, 429]}
