{"line_number": 1780, "line_type": "original", "code": "                if (str.charAt(j) != thisBuf[i + j]) {", "entropy": 1.302734375, "is_bug_line": false, "sus_score": 0.49055, "per_token_entropy": [9.109375, 2.4453125, 0.07080078125, 2.962890625, 1.6083984375, 2.556640625, 0.0108795166015625, 2.30859375, 0.06793212890625, 0.42578125, 1.1572265625, 0.02978515625, 0.0053863525390625, 0.191162109375, 0.29296875, 0.0094451904296875, 0.035858154296875, 0.168212890625], "tokens": [2071, 415, 308, 466, 32, 15611, 26, 92, 27, 863, 458, 7346, 77, 91, 474, 594, 1130, 301]}
{"line_number": 1780, "line_type": "generated", "code": "\n\n    /**\n     * Searches the string builder to find the last reference to the specified character.\n     * \n     * @param ch  the character to find\n     * @return the last index of the character, or -1 if not found\n     */\n   ", "entropy": 0.0819091796875, "is_bug_line": false, "sus_score": 0.49055, "per_token_entropy": [1.3115234375, 0.1298828125, 0.0084381103515625, 7.236003875732422e-05, 0.28466796875, 2.0503997802734375e-05, 9.620189666748047e-05, 0.02203369140625, 0.0216522216796875, 0.0021762847900390625, 0.5068359375, 0.005329132080078125, 0.0059051513671875, 0.2135009765625, 0.451171875, 0.005100250244140625, 0.06378173828125, 0.08795166015625, 0.2176513671875, 0.01125335693359375, 0.00319671630859375, 1.7881393432617188e-05, 0.34814453125, 7.867813110351562e-06, 0.0010137557983398438, 0.0006995201110839844, 0.0026111602783203125, 0.01015472412109375, 0.0133514404296875, 0.050750732421875, 0.0023097991943359375, 0.039825439453125, 0.1153564453125, 5.4836273193359375e-06, 3.337860107421875e-05, 0.0012178421020507812, 0.02398681640625, 0.16943359375, 0.0007066726684570312, 0.0177154541015625, 0.006023406982421875, 0.0052642822265625, 0.007595062255859375, 0.02978515625, 0.004608154296875, 6.878376007080078e-05, 0.0007753372192382812, 0.0018701553344726562, 0.00015687942504882812, 0.00418853759765625, 0.041717529296875, 0.004291534423828125], "tokens": [446, 1022, 275, 319, 358, 1928, 2907, 322, 802, 4906, 372, 2290, 322, 2401, 4121, 372, 322, 3191, 5341, 32, 275, 319, 5384, 319, 477, 753, 663, 225, 322, 5341, 372, 2290, 275, 319, 477, 601, 322, 2401, 1650, 432, 322, 5341, 30, 556, 429, 35, 415, 646, 2431, 275, 569, 284]}
{"line_number": 1772, "line_type": "original", "code": "        if (strLen > size) {", "entropy": 2.45703125, "is_bug_line": false, "sus_score": 0.43632, "per_token_entropy": [3.66015625, 2.595703125, 0.037872314453125, 5.4453125, 1.57421875, 4.01171875, 4.5078125, 0.1787109375, 0.09844970703125], "tokens": [351, 415, 308, 466, 5745, 848, 1334, 27, 301]}
{"line_number": 1772, "line_type": "generated", "code": "\n        int i = startIndex;\n        while (i < len) {\n            if (matcher.isMatch(buf, i, len)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n\n    /**\n     * S", "entropy": 0.180419921875, "is_bug_line": false, "sus_score": 0.43632, "per_token_entropy": [0.58251953125, 1.7822265625, 0.79736328125, 0.09576416015625, 0.31640625, 0.173095703125, 0.1309814453125, 0.68017578125, 0.01110076904296875, 0.348388671875, 0.004993438720703125, 0.024505615234375, 0.08416748046875, 0.02801513671875, 0.1126708984375, 0.95166015625, 0.00537872314453125, 0.0186614990234375, 0.0006875991821289062, 0.044342041015625, 0.004383087158203125, 0.0019254684448242188, 0.007656097412109375, 0.1513671875, 0.02984619140625, 0.85791015625, 0.9453125, 0.286376953125, 0.00913238525390625, 0.01424407958984375, 0.0207061767578125, 0.001995086669921875, 0.0003032684326171875, 0.006031036376953125, 2.0742416381835938e-05, 0.241943359375, 0.0272674560546875, 0.00983428955078125, 0.032257080078125, 8.869171142578125e-05, 0.04595947265625, 0.0015192031860351562, 0.002132415771484375, 0.00015163421630859375, 0.0005059242248535156, 0.0284576416015625, 0.0007457733154296875, 0.181640625, 0.171630859375, 0.007236480712890625, 5.9485435485839844e-05, 0.1036376953125], "tokens": [291, 629, 595, 280, 23529, 45, 291, 2218, 308, 91, 333, 2069, 27, 301, 324, 415, 308, 16937, 32, 297, 3665, 26, 1954, 30, 595, 30, 2069, 490, 301, 400, 442, 595, 45, 324, 320, 324, 595, 3334, 291, 320, 291, 442, 429, 35, 45, 284, 320, 446, 1022, 275, 319, 358]}
{"line_number": 1778, "line_type": "original", "code": "        for (int i = startIndex; i < len; i++) {", "entropy": 0.46142578125, "is_bug_line": false, "sus_score": 0.42723, "per_token_entropy": [3.77734375, 1.9130859375, 0.051055908203125, 0.017059326171875, 0.1839599609375, 0.005649566650390625, 0.419677734375, 0.07818603515625, 0.01235198974609375, 0.07269287109375, 0.31787109375, 0.0166473388671875, 0.008941650390625, 0.00759124755859375, 0.03997802734375], "tokens": [351, 436, 308, 410, 595, 280, 23529, 45, 595, 333, 2069, 45, 595, 1987, 301]}
{"line_number": 1778, "line_type": "generated", "code": "\n        return -1;\n    }\n\n    /**\n     * Searches the string builder to find the last reference to the specified character.\n     * \n     * @param ch  the character to find\n     * @return the last index of the character, or -", "entropy": 0.1129150390625, "is_bug_line": false, "sus_score": 0.42723, "per_token_entropy": [1.34765625, 1.380859375, 0.285400390625, 0.001338958740234375, 0.00609588623046875, 0.1444091796875, 0.0025882720947265625, 0.249755859375, 0.09259033203125, 0.0138702392578125, 8.428096771240234e-05, 0.0682373046875, 3.337860107421875e-06, 0.00011670589447021484, 0.01248931884765625, 0.0189666748046875, 0.0027675628662109375, 0.52880859375, 0.004093170166015625, 0.0041046142578125, 0.1829833984375, 0.23779296875, 0.0037555694580078125, 0.048248291015625, 0.06829833984375, 0.280517578125, 0.00943756103515625, 0.00356292724609375, 1.2874603271484375e-05, 0.375244140625, 6.67572021484375e-06, 0.0010890960693359375, 0.0005693435668945312, 0.0026035308837890625, 0.01239776611328125, 0.01416778564453125, 0.058807373046875, 0.0022373199462890625, 0.036834716796875, 0.129638671875, 4.172325134277344e-06, 3.4928321838378906e-05, 0.0008015632629394531, 0.0238037109375, 0.1466064453125, 0.0006961822509765625, 0.0140228271484375, 0.00650787353515625, 0.006092071533203125, 0.00849151611328125, 0.026275634765625, 0.0033817291259765625], "tokens": [291, 442, 429, 35, 45, 284, 320, 446, 1022, 275, 319, 358, 1928, 2907, 322, 802, 4906, 372, 2290, 322, 2401, 4121, 372, 322, 3191, 5341, 32, 275, 319, 5384, 319, 477, 753, 663, 225, 322, 5341, 372, 2290, 275, 319, 477, 601, 322, 2401, 1650, 432, 322, 5341, 30, 556, 429]}
{"line_number": 1762, "line_type": "original", "code": "        if (str == null || startIndex >= size) {", "entropy": 1.6181640625, "is_bug_line": false, "sus_score": 0.36579, "per_token_entropy": [3.53125, 2.203125, 0.0258331298828125, 4.37109375, 1.3486328125, 0.0074310302734375, 1.28515625, 3.76953125, 1.857421875, 0.403564453125, 0.45458984375, 0.1710205078125], "tokens": [351, 415, 308, 466, 610, 744, 1276, 23529, 2377, 1334, 27, 301]}
{"line_number": 1762, "line_type": "generated", "code": "\n            return -1;\n        }\n        int len = matcher.isMatch(thisBuf, startIndex, size);\n        if (len == 0) {\n            return -1;\n        }\n        return startIndex + len;\n    }\n\n    /**\n     * S", "entropy": 0.1986083984375, "is_bug_line": false, "sus_score": 0.36579, "per_token_entropy": [1.3544921875, 0.03948974609375, 0.031036376953125, 0.00041484832763671875, 0.0030040740966796875, 0.045318603515625, 0.0269012451171875, 0.1064453125, 0.66162109375, 0.54833984375, 0.0120849609375, 1.1083984375, 0.004871368408203125, 0.001605987548828125, 0.4140625, 0.2587890625, 1.39453125, 0.74853515625, 0.015960693359375, 0.2454833984375, 0.1278076171875, 0.60595703125, 0.2305908203125, 0.05084228515625, 0.10455322265625, 0.0007410049438476562, 0.0013675689697265625, 0.48095703125, 0.143310546875, 0.00653839111328125, 0.02984619140625, 0.0012083053588867188, 0.0751953125, 0.03582763671875, 0.54736328125, 0.0003859996795654297, 0.0003833770751953125, 0.0240478515625, 7.295608520507812e-05, 0.037506103515625, 0.18505859375, 0.033599853515625, 0.048248291015625, 0.006084442138671875, 0.006290435791015625, 0.052703857421875, 0.0012979507446289062, 0.1453857421875, 0.2025146484375, 0.00368499755859375, 4.00543212890625e-05, 0.11370849609375], "tokens": [324, 442, 429, 35, 45, 291, 320, 291, 629, 2069, 280, 20638, 32, 297, 3665, 26, 578, 7346, 30, 23529, 30, 1334, 293, 291, 415, 308, 1657, 610, 225, 34, 27, 301, 324, 442, 429, 35, 45, 291, 320, 291, 442, 23529, 474, 2069, 45, 284, 320, 446, 1022, 275, 319, 358]}
{"line_number": 126, "line_type": "original", "code": "            append(str);", "entropy": 4.98828125, "is_bug_line": false, "sus_score": 0.3636, "per_token_entropy": [8.546875, 8.5859375, 1.470703125, 3.814453125, 2.52734375], "tokens": [1468, 5489, 26, 466, 293]}
{"line_number": 126, "line_type": "generated", "code": "\n    /**\n     * Gets the length of the string builder buffer.\n     *\n     * @return the length\n     */\n    public int length() {\n        return size;\n    }\n\n    /**\n     * Gets the current capacity of the builder buffer.\n     *\n     *", "entropy": 0.1485595703125, "is_bug_line": false, "sus_score": 0.3636, "per_token_entropy": [0.70068359375, 0.437744140625, 0.00971221923828125, 4.863739013671875e-05, 1.462890625, 0.011199951171875, 0.4013671875, 0.005519866943359375, 0.0126953125, 0.0484619140625, 0.8193359375, 0.360107421875, 0.035888671875, 0.005542755126953125, 1.2755393981933594e-05, 0.435546875, 1.5020370483398438e-05, 0.0005736351013183594, 0.0004630088806152344, 0.134033203125, 0.07977294921875, 0.71630859375, 0.0382080078125, 0.003734588623046875, 0.1236572265625, 0.0038967132568359375, 0.018798828125, 0.0004093647003173828, 0.00047588348388671875, 0.0139923095703125, 0.0085906982421875, 0.005435943603515625, 0.01125335693359375, 0.0068359375, 0.0001074075698852539, 0.133544921875, 0.07574462890625, 0.0012540817260742188, 1.3828277587890625e-05, 0.59130859375, 0.03082275390625, 0.1279296875, 0.03509521484375, 0.03802490234375, 0.0001804828643798828, 0.2578125, 0.373779296875, 0.00705718994140625, 0.0229339599609375, 2.86102294921875e-06, 0.11279296875, 2.6702880859375e-05], "tokens": [284, 1022, 275, 319, 7124, 322, 3104, 432, 322, 802, 4906, 3112, 32, 275, 319, 275, 319, 477, 601, 322, 3104, 275, 569, 284, 562, 629, 3104, 346, 301, 291, 442, 1334, 45, 284, 320, 446, 1022, 275, 319, 7124, 322, 1550, 13802, 432, 322, 4906, 3112, 32, 275, 319, 275, 319]}
