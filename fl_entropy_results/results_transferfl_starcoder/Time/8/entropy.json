{"line_number": 643, "line_type": "original", "code": "        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);", "entropy": 2.306640625, "is_bug_line": false, "sus_score": 0.5808785557746887, "per_token_entropy": [3.59375, 1.5029296875, 12.921875, 4.71875, 0.1153564453125, 2.876953125, 6.74609375, 3.486328125, 1.6826171875, 3.064453125, 0.0052490234375, 0.0016412734985351562, 0.00513458251953125, 3.494140625, 0.1143798828125, 0.34033203125, 0.114013671875, 0.270263671875, 0.91943359375, 0.152587890625], "tokens": [351, 442, 25298, 410, 27, 3401, 8736, 922, 1793, 828, 2558, 10537, 26, 18317, 547, 2208, 10906, 26, 466, 293]}
{"line_number": 643, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Gets a printer/parser for managing the zone id formatting.\n     * \n     * @return the formatter", "entropy": 0.2052001953125, "is_bug_line": false, "sus_score": 0.5808785557746887, "per_token_entropy": [0.85791015625, 0.04400634765625, 0.533203125, 0.42138671875, 0.0168609619140625, 0.00014340877532958984, 0.595703125, 0.1583251953125, 0.278076171875, 0.024261474609375, 0.0008721351623535156, 0.00786590576171875, 0.0379638671875, 0.023193359375, 1.185546875, 0.64990234375, 0.044342041015625, 0.0103607177734375, 0.0286712646484375, 0.0029659271240234375, 0.05877685546875, 0.0002987384796142578, 0.0005898475646972656, 0.019195556640625, 0.0015745162963867188, 0.333251953125], "tokens": [284, 320, 446, 1022, 275, 319, 7124, 312, 23307, 33, 3922, 436, 26934, 322, 10790, 804, 17948, 32, 275, 319, 5384, 319, 477, 601, 322, 14971]}
{"line_number": 216, "line_type": "original", "code": "            int offset = parseOffset(id);", "entropy": 2.830078125, "is_bug_line": false, "sus_score": 0.5735045075416565, "per_token_entropy": [8.8046875, 6.05078125, 1.7275390625, 0.2978515625, 5.44140625, 0.08575439453125, 0.095703125, 2.404296875, 0.5595703125], "tokens": [1468, 629, 3401, 280, 3185, 3457, 26, 314, 293]}
{"line_number": 216, "line_type": "generated", "code": "\n     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59\n     * @return the DateTimeZone object", "entropy": 0.0570068359375, "is_bug_line": false, "sus_score": 0.5735045075416565, "per_token_entropy": [0.2396240234375, 0.0107269287109375, 1.408203125, 0.1400146484375, 0.0033855438232421875, 0.013397216796875, 0.0102081298828125, 0.0018053054809570312, 0.0924072265625, 0.04425048828125, 0.0207061767578125, 0.022918701171875, 0.0011472702026367188, 0.194091796875, 0.057769775390625, 0.00724029541015625, 0.00565338134765625, 0.0020809173583984375, 0.00127410888671875, 0.01389312744140625, 0.0004105567932128906, 0.00021886825561523438, 0.0287628173828125, 1.7523765563964844e-05, 0.00018966197967529297, 0.01007080078125, 0.01146697998046875, 0.001964569091796875, 0.01393890380859375, 0.00249481201171875, 0.0213470458984375, 0.01094818115234375, 0.017608642578125, 0.06365966796875, 0.11505126953125, 0.03173828125, 0.060943603515625, 0.165283203125, 0.00799560546875, 0.0001342296600341797, 0.0018339157104492188, 0.014862060546875, 0.0036487579345703125, 0.00017249584197998047, 0.06683349609375, 9.524822235107422e-05, 0.0006380081176757812, 0.0078887939453125, 0.0018529891967773438, 0.0098724365234375, 2.014636993408203e-05, 0.0011587142944335938], "tokens": [275, 319, 477, 753, 11632, 3457, 225, 322, 3401, 328, 11632, 645, 17197, 30, 645, 429, 36, 37, 372, 474, 36, 37, 275, 319, 477, 753, 10135, 3457, 225, 322, 3401, 328, 10135, 645, 17197, 30, 645, 429, 39, 43, 372, 474, 39, 43, 275, 319, 477, 601, 322, 6666, 6767, 1300]}
{"line_number": 308, "line_type": "original", "code": "        return fixedOffsetZone(id, millisOffset);", "entropy": 2.001953125, "is_bug_line": false, "sus_score": 0.5729819536209106, "per_token_entropy": [3.771484375, 4.625, 6.953125, 0.48291015625, 0.157470703125, 0.865234375, 1.390625, 0.042633056640625, 3.14453125, 0.143310546875, 0.458251953125], "tokens": [351, 442, 5253, 3457, 6767, 26, 314, 30, 42302, 3457, 293]}
{"line_number": 308, "line_type": "generated", "code": "\n                }\n            }\n        }\n        throw new IllegalArgumentException(\"Zone not found: \" + zone);\n    }\n\n    /**\n     * Gets a time zone instance for the given time zone id.\n     * <p>\n     * The id may be specified as a Java", "entropy": 0.4697265625, "is_bug_line": false, "sus_score": 0.5729819536209106, "per_token_entropy": [0.595703125, 0.0011844635009765625, 0.035797119140625, 0.00021159648895263672, 0.107421875, 0.00040793418884277344, 0.90673828125, 0.406982421875, 0.00893402099609375, 0.02655029296875, 0.03240966796875, 2.490234375, 0.5546875, 0.888671875, 0.03741455078125, 0.0220947265625, 0.002460479736328125, 0.615234375, 0.91015625, 0.04718017578125, 0.00029468536376953125, 0.2442626953125, 0.213623046875, 0.0151519775390625, 0.00010943412780761719, 0.5576171875, 0.390380859375, 0.10760498046875, 0.0026798248291015625, 0.08880615234375, 0.5107421875, 0.78076171875, 1.34765625, 1.283203125, 0.0090179443359375, 0.322998046875, 0.2261962890625, 0.1209716796875, 6.628036499023438e-05, 0.6767578125, 0.0016727447509765625, 0.0008249282836914062, 0.0016889572143554688, 0.00011456012725830078, 2.138671875, 1.0244140625, 1.109375, 0.2210693359375, 1.09765625, 0.8466796875, 1.12890625, 2.2578125], "tokens": [400, 320, 324, 320, 291, 320, 291, 1422, 537, 12137, 440, 6767, 646, 2431, 44, 313, 474, 10790, 293, 284, 320, 446, 1022, 275, 319, 7124, 312, 1133, 10790, 1980, 436, 322, 2702, 1133, 10790, 804, 32, 275, 319, 333, 98, 48, 275, 319, 886, 804, 1631, 526, 3191, 619, 312, 4949]}
{"line_number": 221, "line_type": "original", "code": "                return fixedOffsetZone(id, offset);", "entropy": 2.26953125, "is_bug_line": false, "sus_score": 0.5719997882843018, "per_token_entropy": [7.7890625, 3.3203125, 6.54296875, 0.440185546875, 0.1954345703125, 0.5498046875, 2.505859375, 0.337646484375, 0.60009765625, 0.41845703125], "tokens": [2071, 442, 5253, 3457, 6767, 26, 314, 30, 3401, 293]}
{"line_number": 221, "line_type": "generated", "code": "\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {\n        if (hoursOffset == 0) {\n            if (minutesOffset == 0) {\n                return DateTimeZone.UTC;\n            } else {", "entropy": 0.121337890625, "is_bug_line": false, "sus_score": 0.5719997882843018, "per_token_entropy": [0.5380859375, 0.06494140625, 0.0107421875, 0.0171661376953125, 0.0001360177993774414, 0.0021686553955078125, 1.5497207641601562e-06, 6.61611557006836e-05, 3.3855438232421875e-05, 0.00015628337860107422, 0.0007052421569824219, 0.0023365020751953125, 0.00426483154296875, 0.00025177001953125, 0.0002294778823852539, 0.00032138824462890625, 0.005596160888671875, 0.00022101402282714844, 0.00014710426330566406, 0.0004603862762451172, 0.6259765625, 0.1474609375, 0.76953125, 0.293701171875, 0.31884765625, 0.00017070770263671875, 0.22802734375, 0.0184173583984375, 0.00804901123046875, 0.822265625, 0.0004761219024658203, 0.0199432373046875, 0.1767578125, 0.0208892822265625, 0.0094146728515625, 5.245208740234375e-06, 0.2529296875, 0.00215911865234375, 0.00022327899932861328, 0.012298583984375, 0.0005488395690917969, 0.01050567626953125, 0.00732421875, 0.322021484375, 0.00015103816986083984, 5.078315734863281e-05, 0.000804901123046875, 0.0004520416259765625, 0.018463134765625, 0.00030422210693359375, 0.475341796875, 1.0966796875], "tokens": [275, 569, 284, 562, 907, 6666, 6767, 436, 3457, 14896, 16338, 26, 410, 11632, 3457, 30, 629, 10135, 3457, 27, 301, 291, 415, 308, 14991, 3457, 610, 225, 34, 27, 301, 324, 415, 308, 18461, 3457, 610, 225, 34, 27, 301, 400, 442, 6666, 6767, 32, 15689, 45, 324, 320, 813, 301]}
{"line_number": 290, "line_type": "original", "code": "            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);", "entropy": 1.7509765625, "is_bug_line": false, "sus_score": 0.5690006613731384, "per_token_entropy": [4.38671875, 11.140625, 0.4072265625, 12.03125, 0.0006060600280761719, 0.0024967193603515625, 0.220703125, 2.916015625, 0.0499267578125, 6.0546875, 1.4443359375, 0.0250396728515625, 0.958984375, 0.2208251953125, 0.0018873214721679688, 0.10498046875, 0.0002067089080810547, 4.57763671875e-05, 3.337860107421875e-06, 0.00012886524200439453, 5.507469177246094e-05, 0.280029296875, 0.0499267578125], "tokens": [1468, 3401, 280, 5692, 2755, 32, 4770, 27732, 26, 18461, 3457, 30, 6666, 5229, 32, 63, 13142, 1296, 81, 3687, 81, 47229, 293]}
{"line_number": 290, "line_type": "generated", "code": "\n        }\n        if (dtz == null) {\n            dtz = cProvider.getZone(id);\n        }\n        if (dtz == null) {\n            throw new IllegalArgumentException(\"The zone '\" + id + \"' is not recognised\");\n       ", "entropy": 0.1614990234375, "is_bug_line": false, "sus_score": 0.5690006613731384, "per_token_entropy": [0.308349609375, 0.07373046875, 0.5, 0.123046875, 0.0078887939453125, 0.00469970703125, 1.430511474609375e-05, 0.14111328125, 0.00186920166015625, 0.045623779296875, 0.0009684562683105469, 0.13720703125, 0.1785888671875, 0.0007262229919433594, 0.0002294778823852539, 0.125732421875, 0.0037975311279296875, 0.0010690689086914062, 0.0010690689086914062, 0.002376556396484375, 0.0021877288818359375, 0.01430511474609375, 0.00611114501953125, 0.50048828125, 0.0006780624389648438, 0.2340087890625, 0.0716552734375, 0.00182342529296875, 0.004032135009765625, 4.208087921142578e-05, 0.2080078125, 0.0029392242431640625, 0.032867431640625, 0.00048828125, 0.046630859375, 0.480712890625, 0.01093292236328125, 0.0311279296875, 0.03704833984375, 1.818359375, 1.0810546875, 1.353515625, 0.010498046875, 0.2142333984375, 0.02886962890625, 0.007152557373046875, 0.279052734375, 0.01019287109375, 0.006412506103515625, 2.384185791015625e-06, 0.2105712890625, 0.03326416015625], "tokens": [291, 320, 291, 415, 308, 2632, 108, 610, 744, 27, 301, 324, 8793, 108, 280, 281, 2570, 32, 371, 6767, 26, 314, 293, 291, 320, 291, 415, 308, 2632, 108, 610, 744, 27, 301, 324, 1422, 537, 12137, 440, 1318, 10790, 6113, 474, 804, 474, 5335, 438, 646, 37768, 8593, 724, 291]}
{"line_number": 2375, "line_type": "original", "code": "", "entropy": 0.5927734375, "is_bug_line": false, "sus_score": 0.5654377937316895, "per_token_entropy": [0.5927734375], "tokens": [203]}
{"line_number": 2375, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5654377937316895, "per_token_entropy": [], "tokens": []}
{"line_number": 280, "line_type": "original", "code": "            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);", "entropy": 1.79296875, "is_bug_line": false, "sus_score": 0.5647606253623962, "per_token_entropy": [6.4375, 4.05859375, 0.0274505615234375, 0.03265380859375, 0.10174560546875, 13.890625, 0.1824951171875, 0.0015287399291992188, 0.00720977783203125, 0.05010986328125, 0.01352691650390625, 0.01105499267578125, 1.234375, 0.81494140625, 0.0205230712890625], "tokens": [1468, 1422, 537, 12137, 440, 16338, 963, 432, 2155, 44, 313, 474, 10135, 3457, 293]}
{"line_number": 280, "line_type": "generated", "code": "\n        return fixedOffsetZone(id, offset);\n    }\n\n    /**\n     * Gets a time zone instance from an ID.\n     * <p>\n     * DateTimeZone only accepts a subset of the IDs from TimeZone. The\n     * excluded IDs are the", "entropy": 0.27587890625, "is_bug_line": false, "sus_score": 0.5647606253623962, "per_token_entropy": [0.8916015625, 1.123046875, 1.87890625, 0.055450439453125, 0.003448486328125, 0.0281982421875, 0.61328125, 0.0156402587890625, 0.962890625, 0.468017578125, 0.040252685546875, 0.0004940032958984375, 0.2142333984375, 0.1500244140625, 0.00876617431640625, 0.000171661376953125, 0.42333984375, 0.1875, 0.103759765625, 0.002460479736328125, 0.07476806640625, 1.732421875, 0.5771484375, 0.77099609375, 1.3095703125, 0.1678466796875, 3.0279159545898438e-05, 0.359619140625, 0.0032634735107421875, 0.0003883838653564453, 0.0012722015380859375, 7.104873657226562e-05, 1.6767578125, 0.0003459453582763672, 0.06982421875, 0.010589599609375, 0.07220458984375, 0.0161895751953125, 0.00013780593872070312, 0.017822265625, 0.0322265625, 0.046875, 0.1478271484375, 0.00018453598022460938, 0.00952911376953125, 0.028228759765625, 0.01250457763671875, 1.2159347534179688e-05, 0.01357269287109375, 0.0032253265380859375, 0.001789093017578125, 0.0206298828125], "tokens": [291, 442, 5253, 3457, 6767, 26, 314, 30, 3401, 293, 284, 320, 446, 1022, 275, 319, 7124, 312, 1133, 10790, 1980, 645, 600, 2484, 32, 275, 319, 333, 98, 48, 275, 319, 6666, 6767, 1755, 19201, 312, 17272, 432, 322, 15342, 645, 3717, 6767, 32, 886, 275, 319, 26247, 15342, 884, 322]}
{"line_number": 217, "line_type": "original", "code": "            if (offset == 0L) {", "entropy": 2.201171875, "is_bug_line": false, "sus_score": 0.5639591217041016, "per_token_entropy": [5.6796875, 2.3515625, 0.4404296875, 3.107421875, 1.7431640625, 0.3740234375, 0.02764892578125, 8.078125, 0.10614013671875, 0.10882568359375], "tokens": [1468, 415, 308, 2881, 610, 225, 34, 62, 27, 301]}
{"line_number": 217, "line_type": "generated", "code": "        return forOffsetHoursMinutes(hoursOffset, 0);\n    }\n\n    /**\n     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n     * This method assumes 60 minutes in an hour, and standard length minutes", "entropy": 0.1427001953125, "is_bug_line": false, "sus_score": 0.5639591217041016, "per_token_entropy": [1.6923828125, 0.98583984375, 1.4638671875, 0.05841064453125, 0.1641845703125, 0.12103271484375, 0.0343017578125, 0.034149169921875, 0.011627197265625, 0.01806640625, 0.12005615234375, 0.0010919570922851562, 0.005672454833984375, 0.61767578125, 0.03302001953125, 0.1298828125, 0.246337890625, 0.006191253662109375, 8.678436279296875e-05, 0.1331787109375, 0.01441192626953125, 0.025299072265625, 0.0002663135528564453, 0.01605224609375, 0.03973388671875, 0.013458251953125, 0.003475189208984375, 0.0302734375, 0.003910064697265625, 0.00026726722717285156, 0.04437255859375, 0.0323486328125, 0.030517578125, 0.03350830078125, 0.017181396484375, 0.0026836395263671875, 7.224082946777344e-05, 0.1536865234375, 0.04339599609375, 0.166259765625, 0.40966796875, 0.0364990234375, 0.00037860870361328125, 0.003688812255859375, 0.0022449493408203125, 0.0013399124145507812, 4.839897155761719e-05, 0.23779296875, 0.026611328125, 0.144775390625, 0.0016794204711914062, 0.004459381103515625], "tokens": [351, 442, 436, 3457, 14896, 16338, 26, 14991, 3457, 30, 225, 34, 293, 284, 320, 446, 1022, 275, 319, 7124, 312, 1133, 10790, 1980, 436, 322, 3191, 3401, 372, 17197, 328, 11632, 461, 10135, 32, 275, 319, 1348, 1411, 22416, 225, 40, 34, 10135, 328, 600, 12021, 30, 461, 6216, 3104, 10135]}
{"line_number": 294, "line_type": "original", "code": "        return forOffsetMillis(offset);", "entropy": 2.53515625, "is_bug_line": false, "sus_score": 0.5624368786811829, "per_token_entropy": [3.52734375, 1.3828125, 8.765625, 3.060546875, 0.046417236328125, 0.044891357421875, 2.767578125, 0.6806640625], "tokens": [351, 442, 436, 3457, 10906, 26, 2881, 293]}
{"line_number": 294, "line_type": "generated", "code": "\n        if (dtz == null) {\n            throw new IllegalArgumentException(\"The zone ID '\" + id + \"' is not recognised\");\n        }\n        return dtz;\n    }\n\n    /**\n     * Gets a time zone instance for a Java time zone.\n    ", "entropy": 0.25439453125, "is_bug_line": false, "sus_score": 0.5624368786811829, "per_token_entropy": [0.5595703125, 0.82080078125, 0.004581451416015625, 0.02099609375, 7.784366607666016e-05, 0.1654052734375, 0.006237030029296875, 0.044281005859375, 0.0007352828979492188, 0.0267333984375, 0.54150390625, 0.00940704345703125, 0.0224456787109375, 0.033172607421875, 1.564453125, 0.8916015625, 1.607421875, 0.09332275390625, 0.01471710205078125, 0.1767578125, 0.0262908935546875, 0.00571441650390625, 0.0289764404296875, 0.009765625, 0.001430511474609375, 9.5367431640625e-07, 0.13623046875, 0.01445770263671875, 3.1113624572753906e-05, 0.10089111328125, 0.041534423828125, 0.004367828369140625, 2.2649765014648438e-05, 0.007411956787109375, 0.037841796875, 0.0004801750183105469, 0.271484375, 0.166015625, 0.01084136962890625, 0.00012874603271484375, 0.478271484375, 0.278564453125, 0.1214599609375, 0.003154754638671875, 0.08392333984375, 0.484375, 0.8935546875, 1.435546875, 0.8994140625, 0.02374267578125, 1.0224609375, 0.04229736328125], "tokens": [291, 415, 308, 2632, 108, 610, 744, 27, 301, 324, 1422, 537, 12137, 440, 1318, 10790, 2484, 6113, 474, 804, 474, 5335, 438, 646, 37768, 8593, 724, 291, 320, 291, 442, 8793, 108, 45, 284, 320, 446, 1022, 275, 319, 7124, 312, 1133, 10790, 1980, 436, 312, 4949, 1133, 10790, 32, 275]}
{"line_number": 220, "line_type": "original", "code": "                id = printOffset(offset);", "entropy": 3.6796875, "is_bug_line": false, "sus_score": 0.5570718050003052, "per_token_entropy": [8.0546875, 8.3046875, 0.515625, 9.6640625, 0.01983642578125, 0.11260986328125, 2.3984375, 0.365478515625], "tokens": [2071, 804, 280, 1459, 3457, 26, 2881, 293]}
{"line_number": 220, "line_type": "generated", "code": "\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {\n        if ((hoursOffset < -23) || (hoursOffset > 23)) {\n            throw new IllegalArgumentException(\"The hours offset is out of", "entropy": 0.1807861328125, "is_bug_line": false, "sus_score": 0.5570718050003052, "per_token_entropy": [0.32958984375, 0.111328125, 0.01194000244140625, 0.0205841064453125, 0.0001518726348876953, 0.0015764236450195312, 1.3113021850585938e-06, 7.128715515136719e-05, 2.7298927307128906e-05, 0.00012242794036865234, 0.000797271728515625, 0.003849029541015625, 0.0040435791015625, 0.0003178119659423828, 0.00017249584197998047, 0.0006461143493652344, 0.0048065185546875, 0.0003306865692138672, 0.00014722347259521484, 0.0006847381591796875, 0.9267578125, 0.2393798828125, 0.7265625, 1.64453125, 0.1619873046875, 0.00012493133544921875, 1.7548828125, 0.0740966796875, 0.013885498046875, 0.306396484375, 0.487060546875, 0.0156707763671875, 0.00543975830078125, 0.0177764892578125, 6.198883056640625e-06, 0.01126861572265625, 0.00798797607421875, 0.00024890899658203125, 0.0006380081176757812, 0.16064453125, 0.00431060791015625, 0.059844970703125, 0.03265380859375, 0.005481719970703125, 0.006412506103515625, 0.0916748046875, 0.297607421875, 0.300048828125, 0.5205078125, 0.71728515625, 0.31201171875, 0.0005745887756347656], "tokens": [275, 569, 284, 562, 907, 6666, 6767, 436, 3457, 14896, 16338, 26, 410, 11632, 3457, 30, 629, 10135, 3457, 27, 301, 291, 415, 1833, 14991, 3457, 333, 429, 36, 37, 27, 1276, 308, 14991, 3457, 848, 225, 36, 37, 490, 301, 324, 1422, 537, 12137, 440, 1318, 11632, 3401, 438, 963, 432]}
{"line_number": 279, "line_type": "original", "code": "        if (minutesOffset < 0 || minutesOffset > 59) {", "entropy": 1.376953125, "is_bug_line": true, "sus_score": 0.5569324493408203, "per_token_entropy": [3.90234375, 2.60546875, 0.144775390625, 8.515625, 0.429931640625, 1.599609375, 0.1751708984375, 0.0192413330078125, 4.53125, 0.4443359375, 0.0015811920166015625, 0.1519775390625, 0.2403564453125, 0.57861328125, 0.006954193115234375, 0.053558349609375, 0.01276397705078125], "tokens": [351, 415, 308, 18461, 3457, 333, 225, 34, 1276, 10135, 3457, 848, 225, 39, 43, 27, 301]}
{"line_number": 279, "line_type": "generated", "code": "\n        }\n        String id = zone.getID();\n        if (id.equals(\"GMT\") || id.equals(\"UTC\")) {\n            return DateTimeZone.UTC;\n        }", "entropy": 0.1585693359375, "is_bug_line": true, "sus_score": 0.5569324493408203, "per_token_entropy": [0.369873046875, 0.34716796875, 0.1968994140625, 0.5703125, 0.10504150390625, 0.05999755859375, 0.10931396484375, 0.002323150634765625, 0.0050811767578125, 0.050048828125, 0.133544921875, 0.50732421875, 0.267333984375, 0.20556640625, 0.1434326171875, 0.1859130859375, 0.06646728515625, 0.76416015625, 0.84375, 0.068359375, 0.038330078125, 0.00048089027404785156, 0.06915283203125, 0.0084381103515625, 0.01490020751953125, 0.0872802734375, 0.0017595291137695312, 0.0390625, 0.052886962890625, 0.18603515625, 0.00019407272338867188, 8.511543273925781e-05, 0.001842498779296875, 0.001827239990234375, 0.199951171875, 0.0009908676147460938], "tokens": [291, 320, 291, 892, 804, 280, 10790, 32, 37575, 473, 291, 415, 308, 314, 32, 3574, 440, 31331, 657, 1276, 804, 32, 3574, 440, 15689, 2131, 301, 324, 442, 6666, 6767, 32, 15689, 45, 291, 320]}
{"line_number": 218, "line_type": "original", "code": "                return DateTimeZone.UTC;", "entropy": 2.34375, "is_bug_line": false, "sus_score": 0.5566596388816833, "per_token_entropy": [7.9609375, 2.61328125, 4.3125, 0.020294189453125, 0.0242156982421875, 1.0927734375, 0.375], "tokens": [2071, 442, 6666, 6767, 32, 15689, 45]}
{"line_number": 218, "line_type": "generated", "code": "\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if the offset is too large or too small\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hours", "entropy": 0.05694580078125, "is_bug_line": false, "sus_score": 0.5566596388816833, "per_token_entropy": [0.4423828125, 0.0157623291015625, 0.006496429443359375, 0.03485107421875, 0.00384521484375, 0.01166534423828125, 2.5153160095214844e-05, 0.0029850006103515625, 0.0031719207763671875, 0.00040841102600097656, 0.01416778564453125, 0.07342529296875, 0.006168365478515625, 0.0005865097045898438, 0.001560211181640625, 0.00231170654296875, 0.0004470348358154297, 0.0279693603515625, 0.06158447265625, 0.0174560546875, 0.0126953125, 0.0020427703857421875, 0.01183319091796875, 0.0003809928894042969, 9.047985076904297e-05, 0.1409912109375, 0.125244140625, 0.013763427734375, 0.018646240234375, 0.00010669231414794922, 0.0013093948364257812, 2.6226043701171875e-06, 7.081031799316406e-05, 2.956390380859375e-05, 9.97781753540039e-05, 0.0017194747924804688, 0.005298614501953125, 0.004405975341796875, 0.0005321502685546875, 0.00022792816162109375, 0.0010766983032226562, 0.004810333251953125, 0.0006260871887207031, 0.0003490447998046875, 0.006198883056640625, 0.501953125, 0.0010929107666015625, 0.0076446533203125, 0.09735107421875, 0.73193359375, 0.272705078125, 0.268310546875], "tokens": [275, 319, 477, 601, 322, 6666, 6767, 1300, 436, 322, 3401, 275, 319, 477, 5117, 12137, 415, 322, 3401, 438, 5133, 7622, 556, 5133, 5532, 275, 569, 284, 562, 907, 6666, 6767, 436, 3457, 14896, 16338, 26, 410, 11632, 3457, 30, 629, 10135, 3457, 27, 2571, 12137, 301, 291, 415, 308, 14991]}
{"line_number": 273, "line_type": "original", "code": "        if (hoursOffset == 0 && minutesOffset == 0) {", "entropy": 1.0732421875, "is_bug_line": false, "sus_score": 0.5561627745628357, "per_token_entropy": [1.833984375, 1.1318359375, 0.096923828125, 11.0703125, 0.1705322265625, 1.365234375, 0.0697021484375, 0.046112060546875, 0.51025390625, 0.496337890625, 0.009796142578125, 0.07037353515625, 0.003787994384765625, 0.005313873291015625, 0.257080078125, 0.039947509765625], "tokens": [351, 415, 308, 14991, 3457, 610, 225, 34, 962, 10135, 3457, 610, 225, 34, 27, 301]}
{"line_number": 273, "line_type": "generated", "code": "\n     * @return the DateTimeZone object, never null", "entropy": 0.27197265625, "is_bug_line": false, "sus_score": 0.5561627745628357, "per_token_entropy": [1.02734375, 0.08251953125, 0.0176239013671875, 0.040008544921875, 0.09130859375, 0.183349609375, 0.0004017353057861328, 0.489990234375, 0.93896484375, 0.1102294921875, 0.01055145263671875], "tokens": [275, 319, 477, 601, 322, 6666, 6767, 1300, 30, 7152, 744]}
{"line_number": 700, "line_type": "original", "code": "        return cOffsetFormatter;", "entropy": 3.5859375, "is_bug_line": false, "sus_score": 0.5546426177024841, "per_token_entropy": [6.015625, 1.3515625, 4.92578125, 1.8359375, 0.05999755859375, 7.3203125], "tokens": [351, 442, 281, 3457, 8736, 45]}
{"line_number": 700, "line_type": "generated", "code": "\n     * \n     * @return the short name of this datetime zone\n     */\n    public abstract String getShortName(Locale locale);\n\n    /**\n     * Gets the short name of this datetime zone suitable for display using\n     * the specified locale.\n     * <p>", "entropy": 0.150390625, "is_bug_line": false, "sus_score": 0.5546426177024841, "per_token_entropy": [0.2020263671875, 0.1075439453125, 0.765625, 0.0002300739288330078, 0.0194244384765625, 0.165283203125, 0.1175537109375, 0.156005859375, 0.06439208984375, 0.919921875, 0.1273193359375, 0.09161376953125, 0.002223968505859375, 0.9677734375, 0.10797119140625, 0.038848876953125, 0.306640625, 1.234375, 0.0004801750183105469, 0.08892822265625, 0.004497528076171875, 0.28271484375, 0.467041015625, 0.0225067138671875, 0.0009255409240722656, 0.08648681640625, 0.016754150390625, 0.0021381378173828125, 0.0001379251480102539, 0.03759765625, 0.0236663818359375, 0.42626953125, 0.03656005859375, 0.015869140625, 0.01502227783203125, 0.0106048583984375, 0.0005993843078613281, 0.10089111328125, 0.0003669261932373047, 0.01007843017578125, 0.4287109375, 0.1014404296875, 3.516674041748047e-05, 0.0231475830078125, 0.045684814453125, 0.0036640167236328125, 0.0047149658203125, 0.1055908203125, 0.00011491775512695312, 0.061492919921875, 0.0007276535034179688, 8.7738037109375e-05], "tokens": [275, 319, 5384, 319, 477, 601, 322, 4504, 636, 432, 458, 7138, 10790, 275, 569, 284, 562, 5547, 892, 622, 46691, 26, 9467, 11259, 293, 446, 1022, 275, 319, 7124, 322, 4504, 636, 432, 458, 7138, 10790, 19655, 436, 2503, 1471, 275, 319, 322, 3191, 11259, 32, 275, 319, 333, 98, 48]}
{"line_number": 2337, "line_type": "original", "code": "", "entropy": 0.5927734375, "is_bug_line": false, "sus_score": 0.5518130660057068, "per_token_entropy": [0.5927734375], "tokens": [203]}
{"line_number": 2337, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5518130660057068, "per_token_entropy": [], "tokens": []}
{"line_number": 353, "line_type": "original", "code": "                int offset = parseOffset(convId);", "entropy": 3.048828125, "is_bug_line": false, "sus_score": 0.5517763495445251, "per_token_entropy": [9.875, 6.6796875, 0.82763671875, 1.08203125, 3.234375, 0.118408203125, 0.09930419921875, 8.296875, 0.0239105224609375, 0.2423095703125], "tokens": [2071, 629, 3401, 280, 3185, 3457, 26, 6081, 606, 293]}
{"line_number": 353, "line_type": "generated", "code": "\n    /**\n     * Gets the number of standard/daylight savings time periods in this zone.\n     * \n     * @return the number of transitions\n     */\n    public int getStandardOffset(long instant) {\n        return iStandardOffset;\n    }\n\n   ", "entropy": 0.42529296875, "is_bug_line": false, "sus_score": 0.5517763495445251, "per_token_entropy": [0.423095703125, 0.576171875, 0.030975341796875, 0.00028705596923828125, 1.21484375, 0.398193359375, 3.05859375, 0.0018672943115234375, 1.2470703125, 0.53076171875, 1.2587890625, 0.0019931793212890625, 0.266845703125, 1.430511474609375e-06, 0.646484375, 0.64794921875, 1.9765625, 1.615234375, 0.72802734375, 0.035308837890625, 0.0189361572265625, 0.0086517333984375, 0.291259765625, 5.8770179748535156e-05, 0.005275726318359375, 0.0556640625, 0.05487060546875, 0.40478515625, 0.0070343017578125, 0.55224609375, 0.5595703125, 0.05023193359375, 0.0107574462890625, 0.2220458984375, 0.30078125, 0.245361328125, 0.67578125, 0.06903076171875, 0.1295166015625, 0.357421875, 0.09796142578125, 0.031707763671875, 0.006534576416015625, 0.11370849609375, 1.0078125, 0.9482421875, 0.767578125, 0.062408447265625, 0.1121826171875, 0.062347412109375, 0.0008530616760253906, 0.22509765625], "tokens": [284, 1022, 275, 319, 7124, 322, 1451, 432, 6216, 33, 3368, 2429, 309, 31156, 1133, 34533, 328, 458, 10790, 32, 275, 319, 5384, 319, 477, 601, 322, 1451, 432, 28088, 275, 569, 284, 562, 629, 622, 8090, 3457, 26, 3222, 23564, 27, 301, 291, 442, 595, 8090, 3457, 45, 284, 320, 446]}
{"line_number": 307, "line_type": "original", "code": "        String id = printOffset(millisOffset);", "entropy": 2.65625, "is_bug_line": false, "sus_score": 0.5497543215751648, "per_token_entropy": [7.1953125, 7.22265625, 2.10546875, 0.1871337890625, 8.0390625, 0.0086822509765625, 0.03680419921875, 1.560546875, 0.0226287841796875, 0.1800537109375], "tokens": [351, 892, 804, 280, 1459, 3457, 26, 36916, 3457, 293]}
{"line_number": 307, "line_type": "generated", "code": "\n                    return fixedOffsetZone(id, offset);\n                }\n            }\n        }\n\n        // Support full time zone names\n        if (dtz == null) {\n            dtz = getCachedZone(id);\n            if (dtz == null) {\n               ", "entropy": 0.398193359375, "is_bug_line": false, "sus_score": 0.5497543215751648, "per_token_entropy": [0.21044921875, 0.162353515625, 0.14013671875, 0.00794219970703125, 0.0003502368927001953, 0.029022216796875, 0.270263671875, 0.0081787109375, 0.0887451171875, 0.061004638671875, 0.00821685791015625, 0.0010099411010742188, 0.01065826416015625, 9.691715240478516e-05, 0.09625244140625, 0.0002218484878540039, 0.58154296875, 0.55908203125, 1.37109375, 3.29296875, 1.2939453125, 0.23681640625, 0.64208984375, 0.986328125, 1.048828125, 0.056396484375, 1.1123046875, 3.266334533691406e-05, 0.017852783203125, 0.00019347667694091797, 0.160888671875, 0.0008678436279296875, 0.111328125, 1.1455078125, 0.0003173351287841797, 0.0006194114685058594, 2.1875, 2.326171875, 0.658203125, 0.1207275390625, 0.328369140625, 0.141845703125, 0.3837890625, 0.016326904296875, 0.00389862060546875, 0.00347137451171875, 1.1324882507324219e-05, 0.71044921875, 0.0020694732666015625, 0.0426025390625, 0.0003781318664550781, 0.059356689453125], "tokens": [528, 442, 5253, 3457, 6767, 26, 314, 30, 3401, 293, 400, 320, 324, 320, 291, 320, 584, 434, 6318, 3536, 1133, 10790, 4467, 291, 415, 308, 2632, 108, 610, 744, 27, 301, 324, 8793, 108, 280, 622, 14540, 6767, 26, 314, 293, 324, 415, 308, 2632, 108, 610, 744, 27, 301, 400]}
{"line_number": 304, "line_type": "original", "code": "        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {", "entropy": 0.88134765625, "is_bug_line": false, "sus_score": 0.546035885810852, "per_token_entropy": [5.60546875, 1.83984375, 0.0294189453125, 5.37890625, 0.10693359375, 2.2421875, 0.23828125, 3.353515625, 0.002201080322265625, 0.83837890625, 0.0001825094223022461, 2.7418136596679688e-06, 0.442626953125, 0.10687255859375, 0.0004630088806152344, 0.0197601318359375, 0.004108428955078125, 8.034706115722656e-05, 0.00044918060302734375, 8.940696716308594e-06, 8.463859558105469e-06, 0.0141754150390625, 0.03814697265625], "tokens": [351, 415, 308, 36916, 3457, 333, 429, 3459, 81, 63, 13142, 1296, 1276, 42302, 3457, 848, 7482, 81, 63, 13142, 1296, 27, 301]}
{"line_number": 304, "line_type": "generated", "code": "\n                if (offset == Integer.MIN_VALUE) {\n                    throw new IllegalArgumentException(\"Invalid GMT format: \" + zone.getID());\n                }\n                return forOffsetMillis(offset);\n            }\n        }\n\n        // Support GMT+/-hhmm formats\n        if", "entropy": 0.358154296875, "is_bug_line": false, "sus_score": 0.546035885810852, "per_token_entropy": [0.98095703125, 2.08984375, 0.0391845703125, 0.1905517578125, 0.75341796875, 0.64453125, 8.118152618408203e-05, 0.05023193359375, 0.00013458728790283203, 6.4373016357421875e-06, 0.0687255859375, 0.002559661865234375, 0.12408447265625, 0.591796875, 0.00943756103515625, 0.0264129638671875, 0.11395263671875, 0.40234375, 2.34765625, 0.6025390625, 0.08941650390625, 0.03814697265625, 0.00582122802734375, 0.86328125, 0.11834716796875, 0.00861358642578125, 0.01212310791015625, 0.010101318359375, 3.981590270996094e-05, 0.1334228515625, 0.45849609375, 0.32470703125, 0.01390838623046875, 0.042205810546875, 0.01236724853515625, 0.032073974609375, 0.039703369140625, 0.033416748046875, 9.799003601074219e-05, 0.09271240234375, 0.0002282857894897461, 0.619140625, 0.4853515625, 1.3095703125, 3.134765625, 0.564453125, 0.1790771484375, 0.0499267578125, 0.50439453125, 0.220458984375, 0.1300048828125, 0.0626220703125], "tokens": [400, 415, 308, 2881, 610, 4401, 32, 4683, 81, 5975, 27, 301, 528, 1422, 537, 12137, 440, 3817, 6846, 2179, 44, 313, 474, 10790, 32, 37575, 1035, 400, 320, 400, 442, 436, 3457, 10906, 26, 2881, 293, 324, 320, 291, 320, 584, 434, 6318, 6846, 29, 15913, 10429, 2840, 15477, 291, 415]}
{"line_number": 2444, "line_type": "original", "code": "", "entropy": 0.5927734375, "is_bug_line": false, "sus_score": 0.5421766638755798, "per_token_entropy": [0.5927734375], "tokens": [203]}
{"line_number": 2444, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5421766638755798, "per_token_entropy": [], "tokens": []}
{"line_number": 2453, "line_type": "original", "code": "", "entropy": 0.5927734375, "is_bug_line": false, "sus_score": 0.5398570895195007, "per_token_entropy": [0.5927734375], "tokens": [203]}
{"line_number": 2453, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5398570895195007, "per_token_entropy": [], "tokens": []}
{"line_number": 2456, "line_type": "original", "code": "", "entropy": 0.5927734375, "is_bug_line": false, "sus_score": 0.537076473236084, "per_token_entropy": [0.5927734375], "tokens": [203]}
{"line_number": 2456, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.537076473236084, "per_token_entropy": [], "tokens": []}
