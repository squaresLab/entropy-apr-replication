{"line_number": 266, "line_type": "original", "code": "                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);", "entropy": 1.6796875, "is_bug_line": false, "sus_score": 0.7661077380180359, "per_token_entropy": [7.71484375, 13.0546875, 1.0380859375, 0.1488037109375, 1.751953125, 2.6345252990722656e-05, 0.0003025531768798828, 0.0086822509765625, 1.220703125, 0.01235198974609375, 1.1455078125, 0.1431884765625, 0.026885986328125, 0.005401611328125, 2.16796875, 0.095703125, 0.03021240234375], "tokens": [2071, 10135, 3457, 280, 5692, 2755, 32, 4770, 1103, 26, 14991, 383, 16338, 30, 10135, 3457, 293]}
{"line_number": 266, "line_type": "generated", "code": "\n        if (dtz == null) {\n            dtz = cProvider.getZone(id);\n        }\n        if (dtz == null) {\n            throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");\n       ", "entropy": 0.08453369140625, "is_bug_line": false, "sus_score": 0.7661077380180359, "per_token_entropy": [0.53076171875, 0.3544921875, 0.01073455810546875, 0.0093841552734375, 4.851818084716797e-05, 0.19677734375, 0.0026340484619140625, 0.068603515625, 0.0011911392211914062, 0.08917236328125, 0.361083984375, 0.00036597251892089844, 0.00023865699768066406, 0.304443359375, 0.005100250244140625, 0.0017910003662109375, 0.002605438232421875, 0.00321197509765625, 0.0032176971435546875, 0.0242919921875, 0.006618499755859375, 0.1259765625, 0.00624847412109375, 0.332763671875, 0.10357666015625, 0.0023288726806640625, 0.0029163360595703125, 4.6372413635253906e-05, 0.185791015625, 0.0021381378173828125, 0.0243988037109375, 0.0006113052368164062, 0.044891357421875, 0.398193359375, 0.006866455078125, 0.0135650634765625, 0.0240478515625, 0.14208984375, 0.80810546875, 0.0017614364624023438, 0.0257415771484375, 0.0255126953125, 0.0206298828125, 0.06591796875, 0.016448974609375, 0.0024623870849609375, 0.003650665283203125, 0.001068115234375, 0.0016756057739257812, 5.245208740234375e-06, 0.01122283935546875, 0.018707275390625], "tokens": [291, 415, 308, 2632, 108, 610, 744, 27, 301, 324, 8793, 108, 280, 281, 2570, 32, 371, 6767, 26, 314, 293, 291, 320, 291, 415, 308, 2632, 108, 610, 744, 27, 301, 324, 1422, 537, 12137, 440, 1318, 7138, 10790, 804, 6113, 474, 804, 474, 5335, 438, 646, 37768, 8593, 724, 291]}
{"line_number": 1101, "line_type": "original", "code": "//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {", "entropy": 1.60546875, "is_bug_line": false, "sus_score": 0.7651659846305847, "per_token_entropy": [8.1015625, 4.703125, 4.94921875, 1.23046875, 0.45263671875, 2.9453125, 0.06488037109375, 0.0023555755615234375, 0.11993408203125, 0.67333984375, 5.30859375, 0.0119476318359375, 0.0002129077911376953, 0.0017375946044921875, 0.0004673004150390625, 0.0006580352783203125, 0.3251953125, 0.0198974609375], "tokens": [306, 2071, 32862, 32, 371, 5064, 1419, 20186, 346, 610, 30198, 32, 371, 5064, 1419, 20186, 1157, 301]}
{"line_number": 1101, "line_type": "generated", "code": "\n        } catch (IllegalArgumentException ex) {\n            return true;\n        }\n    }", "entropy": 0.094970703125, "is_bug_line": false, "sus_score": 0.7651659846305847, "per_token_entropy": [0.2313232421875, 0.0254364013671875, 0.0323486328125, 0.003997802734375, 0.030975341796875, 0.03912353515625, 0.0019426345825195312, 0.0018100738525390625, 0.171875, 0.2509765625, 0.0240936279296875, 0.0006933212280273438, 0.478271484375, 0.00025844573974609375, 0.2259521484375, 0.0007791519165039062], "tokens": [291, 320, 2368, 308, 25907, 538, 27, 301, 324, 442, 861, 45, 291, 320, 284, 320]}
{"line_number": 582, "line_type": "original", "code": "            map.put(\"ART\", \"Africa/Cairo\");", "entropy": 1.9755859375, "is_bug_line": false, "sus_score": 0.7639884352684021, "per_token_entropy": [5.70703125, 12.0703125, 0.0154571533203125, 0.0079345703125, 0.035247802734375, 6.20703125, 0.00128936767578125, 0.14599609375, 3.419921875, 0.0071563720703125, 0.0005121231079101562, 0.02947998046875, 5.638599395751953e-05, 0.002643585205078125], "tokens": [1468, 1992, 32, 524, 440, 3004, 392, 313, 51, 33791, 33, 53, 30543, 724]}
{"line_number": 582, "line_type": "generated", "code": "\n        if (offset < 0) {\n            buf.append('-');\n            offset = -offset;\n        } else {\n            buf.append('+');\n        }\n        int hours = offset / 3600000;\n        buf.append", "entropy": 0.15673828125, "is_bug_line": false, "sus_score": 0.7639884352684021, "per_token_entropy": [0.322265625, 0.69775390625, 0.0310211181640625, 0.0780029296875, 0.81787109375, 0.005176544189453125, 0.0024662017822265625, 0.00447845458984375, 0.00390625, 0.0197906494140625, 0.1234130859375, 0.0004642009735107422, 0.00250244140625, 0.1676025390625, 0.004001617431640625, 0.06695556640625, 0.00844573974609375, 0.00406646728515625, 0.014892578125, 0.004878997802734375, 0.00028395652770996094, 0.0081787109375, 0.00033664703369140625, 0.045379638671875, 0.0911865234375, 0.00943756103515625, 0.0064239501953125, 6.175041198730469e-05, 1.4781951904296875e-05, 0.0081634521484375, 1.811981201171875e-05, 0.00421905517578125, 0.00064849853515625, 0.828125, 0.479248046875, 0.462158203125, 0.003570556640625, 0.034027099609375, 0.006786346435546875, 1.8056640625, 0.2015380859375, 0.1700439453125, 4.1365623474121094e-05, 3.2901763916015625e-05, 0.003143310546875, 8.177757263183594e-05, 0.0002276897430419922, 0.00351715087890625, 0.0218658447265625, 1.5732421875, 0.0001112222671508789, 0.00013113021850585938], "tokens": [291, 415, 308, 2881, 333, 225, 34, 27, 301, 324, 4845, 32, 1689, 12605, 895, 324, 3401, 280, 429, 2881, 45, 291, 320, 813, 301, 324, 4845, 32, 1689, 37984, 895, 291, 320, 291, 629, 11632, 280, 3401, 517, 225, 37, 40, 34, 34, 34, 34, 34, 45, 291, 4845, 32, 1689]}
{"line_number": 1098, "line_type": "original", "code": "//        DateTime adjusted = dateTime.plus(offset);", "entropy": 1.78515625, "is_bug_line": false, "sus_score": 0.7449308037757874, "per_token_entropy": [7.68359375, 0.1282958984375, 2.791015625, 4.95703125, 0.03521728515625, 2.0234375, 0.03057861328125, 0.98486328125, 0.515625, 0.353515625, 0.1331787109375], "tokens": [306, 351, 6666, 30198, 280, 32862, 32, 5431, 26, 2881, 293]}
{"line_number": 1098, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7449308037757874, "per_token_entropy": [], "tokens": []}
{"line_number": 1175, "line_type": "original", "code": "        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);", "entropy": 2.296875, "is_bug_line": true, "sus_score": 0.6769024729728699, "per_token_entropy": [4.53125, 1.0498046875, 10.2265625, 1.5234375, 0.0171661376953125, 0.00988006591796875, 0.016845703125, 2.328125, 4.48828125, 1.609375, 3.0859375, 6.05078125, 0.6513671875, 0.0030345916748046875, 4.55859375, 3.1796875, 3.615234375, 0.059967041015625, 0.01041412353515625, 0.017486572265625, 1.1875], "tokens": [351, 442, 4483, 3325, 705, 15689, 26, 1696, 30, 901, 30, 17083, 1527, 31313, 1018, 23564, 5125, 499, 23564, 5658, 293]}
{"line_number": 1175, "line_type": "generated", "code": "\n     * <p>\n     * The comparison is based first on the two time zone IDs, then on the first\n     * transition, then on the second transition.\n     * \n     * @param other  the object to compare to\n     * @return negative if", "entropy": 0.32763671875, "is_bug_line": true, "sus_score": 0.6769024729728699, "per_token_entropy": [0.31591796875, 0.2200927734375, 1.4619140625, 0.0301361083984375, 0.005352020263671875, 0.01171112060546875, 0.0004372596740722656, 0.6083984375, 0.0386962890625, 0.1724853515625, 0.053802490234375, 0.60595703125, 0.0007948875427246094, 0.00467681884765625, 1.6455078125, 0.57958984375, 0.1566162109375, 0.6044921875, 0.2235107421875, 0.1090087890625, 0.109619140625, 0.39697265625, 2.484375, 0.1453857421875, 3.814697265625e-05, 0.1873779296875, 1.849609375, 0.292236328125, 0.134765625, 0.052276611328125, 0.353759765625, 0.0999755859375, 0.53466796875, 0.36376953125, 0.0286712646484375, 0.7802734375, 0.00020170211791992188, 0.006313323974609375, 0.097900390625, 1.2587890625, 0.10736083984375, 0.1961669921875, 0.46533203125, 0.0005002021789550781, 0.0888671875, 0.0155487060546875, 0.076416015625, 0.01507568359375, 0.00020802021026611328, 0.00811767578125, 0.0171661376953125, 0.01580810546875], "tokens": [275, 319, 333, 98, 48, 275, 319, 886, 14828, 438, 4122, 1932, 544, 322, 3134, 1133, 10790, 15342, 30, 1615, 544, 322, 1932, 275, 319, 9094, 30, 1615, 544, 322, 3100, 9094, 32, 275, 319, 5384, 319, 477, 753, 1604, 225, 322, 1300, 372, 8868, 372, 275, 319, 477, 601, 11003, 415]}
{"line_number": 424, "line_type": "original", "code": "            throw new IllegalArgumentException(\"The provider doesn't support UTC\");", "entropy": 1.7783203125, "is_bug_line": false, "sus_score": 0.6724759936332703, "per_token_entropy": [8.015625, 4.49609375, 0.032958984375, 0.2646484375, 0.5458984375, 2.908203125, 0.64794921875, 0.87255859375, 0.0025501251220703125, 3.298828125, 0.153076171875, 0.104736328125], "tokens": [1468, 1422, 537, 12137, 440, 1318, 6887, 4163, 1330, 2193, 17197, 724]}
{"line_number": 424, "line_type": "generated", "code": "\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets a zone for the given ID, which may be a region or a zone\n     * ID. If an invalid ID, an exception is thrown.\n     * \n     * @param zoneId  the time zone id", "entropy": 0.6728515625, "is_bug_line": false, "sus_score": 0.6724759936332703, "per_token_entropy": [0.2105712890625, 0.142822265625, 0.35302734375, 0.29443359375, 0.030059814453125, 0.024017333984375, 0.205078125, 0.015716552734375, 6.222724914550781e-05, 1.5771484375, 1.04296875, 1.7490234375, 2.005859375, 0.58837890625, 0.556640625, 0.72314453125, 1.265625, 2.068359375, 0.1055908203125, 0.1575927734375, 1.083984375, 2.240234375, 1.5419921875, 0.5947265625, 0.54638671875, 1.8984375, 0.00047516822814941406, 2.64453125, 0.2176513671875, 0.85546875, 1.6826171875, 1.34375, 0.253173828125, 0.50732421875, 1.4365234375, 0.06634521484375, 0.118896484375, 0.001216888427734375, 0.032806396484375, 0.3037109375, 0.002735137939453125, 1.142578125, 4.589557647705078e-05, 0.012725830078125, 0.0222625732421875, 1.0615234375, 0.007152557373046875, 0.0760498046875, 0.2100830078125, 1.689453125, 0.038818359375, 0.2431640625], "tokens": [284, 320, 446, 434, 42510, 284, 1022, 275, 319, 7124, 312, 10790, 436, 322, 2702, 2484, 30, 1510, 1631, 526, 312, 6699, 556, 312, 10790, 275, 319, 2484, 32, 1670, 600, 5535, 2484, 30, 600, 3756, 438, 12163, 32, 275, 319, 5384, 319, 477, 753, 10790, 606, 225, 322, 1133, 10790, 804]}
{"line_number": 665, "line_type": "original", "code": "     * Gets a printer/parser for managing the offset id formatting.", "entropy": 4.61328125, "is_bug_line": false, "sus_score": 0.6715794801712036, "per_token_entropy": [2.794921875, 2.890625, 8.21875, 1.8974609375, 9.8828125, 1.8203125, 0.001979827880859375, 0.9189453125, 12.2890625, 1.5751953125, 4.3984375, 8.2109375, 9.140625, 0.54736328125], "tokens": [262, 319, 7124, 312, 23307, 33, 3922, 436, 26934, 322, 3401, 804, 17948, 32]}
{"line_number": 665, "line_type": "generated", "code": "\n     */\n    public String getNameKey(long instant) {\n        return null;\n    }\n\n    /**\n     * Gets the name of this time zone suitable for presentation to the user.\n     *\n     * @param locale  the locale to use, may be null", "entropy": 0.1920166015625, "is_bug_line": false, "sus_score": 0.6715794801712036, "per_token_entropy": [0.50439453125, 0.060302734375, 0.0316162109375, 0.1815185546875, 0.2447509765625, 0.198974609375, 0.000522613525390625, 0.0003788471221923828, 0.0228118896484375, 0.0004930496215820312, 0.0011034011840820312, 0.0013523101806640625, 0.07012939453125, 0.27197265625, 0.27880859375, 0.0002841949462890625, 0.03656005859375, 6.520748138427734e-05, 0.09368896484375, 0.09033203125, 0.0390625, 0.00016772747039794922, 0.92333984375, 0.308349609375, 1.4453125, 0.0284271240234375, 0.1632080078125, 0.58984375, 0.01617431640625, 0.130615234375, 0.00048732757568359375, 0.0164947509765625, 0.00719451904296875, 0.00951385498046875, 0.01303863525390625, 0.08282470703125, 0.1314697265625, 0.00036787986755371094, 1.6396484375, 7.486343383789062e-05, 0.0211181640625, 0.08587646484375, 0.482177734375, 0.194580078125, 0.51806640625, 0.038360595703125, 0.1220703125, 0.1552734375, 0.2064208984375, 0.467529296875, 0.0435791015625, 0.01444244384765625], "tokens": [275, 569, 284, 562, 892, 16407, 953, 26, 3222, 23564, 27, 301, 291, 442, 744, 45, 284, 320, 446, 1022, 275, 319, 7124, 322, 636, 432, 458, 1133, 10790, 19655, 436, 23653, 372, 322, 1256, 32, 275, 319, 275, 319, 477, 753, 11259, 225, 322, 11259, 372, 793, 30, 1631, 526, 744]}
{"line_number": 685, "line_type": "original", "code": "     * ", "entropy": 3.072265625, "is_bug_line": false, "sus_score": 0.6709223985671997, "per_token_entropy": [5.19140625, 0.01309967041015625, 4.015625], "tokens": [262, 319, 225]}
{"line_number": 685, "line_type": "generated", "code": "\n     * <p>\n     * If the name is not available for the locale, then this method returns a\n     * string in the format <code>[+-]hh:mm</code>.\n     * \n     * @param instant  milliseconds from 19", "entropy": 0.01502227783203125, "is_bug_line": false, "sus_score": 0.6709223985671997, "per_token_entropy": [0.050933837890625, 0.00018870830535888672, 0.2406005859375, 0.0033397674560546875, 0.00014960765838623047, 0.010345458984375, 4.661083221435547e-05, 0.019775390625, 0.01132965087890625, 0.021270751953125, 0.0013399124145507812, 0.00044918060302734375, 0.0004703998565673828, 0.002643585205078125, 0.0035915374755859375, 0.034210205078125, 0.0039520263671875, 0.003589630126953125, 0.00677490234375, 0.0005345344543457031, 0.005359649658203125, 0.00824737548828125, 0.004123687744140625, 8.463859558105469e-06, 0.0032596588134765625, 0.0008792877197265625, 0.0004565715789794922, 0.0007314682006835938, 0.00457000732421875, 0.0007228851318359375, 0.0011148452758789062, 5.447864532470703e-05, 0.0001838207244873047, 0.002887725830078125, 0.0009694099426269531, 2.6702880859375e-05, 0.0015773773193359375, 0.0002663135528564453, 0.01105499267578125, 0.07916259765625, 9.715557098388672e-05, 0.10113525390625, 1.5854835510253906e-05, 0.001644134521484375, 0.0013370513916015625, 0.10125732421875, 0.00691986083984375, 0.026641845703125, 0.000766754150390625, 0.00017392635345458984, 2.8133392333984375e-05, 1.1444091796875e-05], "tokens": [275, 319, 333, 98, 48, 275, 319, 1670, 322, 636, 438, 646, 3304, 436, 322, 11259, 30, 1615, 458, 1411, 3217, 312, 275, 319, 802, 328, 322, 2179, 333, 687, 8828, 10873, 79, 10429, 44, 2840, 377, 687, 4503, 275, 319, 5384, 319, 477, 753, 23564, 225, 18574, 645, 225, 35, 43]}
{"line_number": 1167, "line_type": "original", "code": "        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);", "entropy": 0.8662109375, "is_bug_line": true, "sus_score": 0.6704885959625244, "per_token_entropy": [6.25390625, 5.84765625, 2.416015625, 3.6171875, 0.06689453125, 1.341796875, 0.93017578125, 0.005443572998046875, 0.01183319091796875, 0.310546875, 0.3642578125, 0.0477294921875, 0.383056640625, 0.02117919921875, 0.026611328125, 0.0009484291076660156, 0.0002415180206298828, 0.0006313323974609375, 3.337860107421875e-06, 3.5762786865234375e-07, 1.7762184143066406e-05, 1.2040138244628906e-05, 8.344650268554688e-06, 0.001895904541015625, 0.00824737548828125], "tokens": [351, 1946, 23564, 5658, 280, 4483, 15689, 40608, 26, 30241, 429, 225, 37, 319, 6666, 5229, 32, 63, 13142, 1296, 81, 3687, 81, 30540, 293]}
{"line_number": 1167, "line_type": "generated", "code": "\n     * <p>\n     * The returned time zone will always be fixed offset, and will be\n     * a {@link java.util.SimpleTimeZone} if possible.\n     *\n     * @return the time zone, never null\n     * @since ", "entropy": 0.53369140625, "is_bug_line": true, "sus_score": 0.6704885959625244, "per_token_entropy": [0.24169921875, 0.10369873046875, 1.8525390625, 0.0251312255859375, 0.0064239501953125, 0.0218963623046875, 0.0004792213439941406, 1.7763671875, 0.734375, 1.029296875, 0.0108642578125, 0.94873046875, 0.95849609375, 0.1534423828125, 1.0888671875, 0.4052734375, 0.974609375, 1.40625, 0.669921875, 2.1875, 1.0087890625, 7.069110870361328e-05, 1.2744140625, 1.4013671875, 0.0268402099609375, 0.1978759765625, 0.0007367134094238281, 6.783008575439453e-05, 5.602836608886719e-05, 0.0667724609375, 1.33514404296875e-05, 0.5107421875, 0.9208984375, 0.587890625, 0.8447265625, 0.62939453125, 0.001598358154296875, 1.0068359375, 0.00025534629821777344, 0.008331298828125, 0.0516357421875, 0.3994140625, 0.775390625, 0.012969970703125, 1.0947265625, 0.1915283203125, 0.005840301513671875, 0.01654052734375, 1.3359375, 0.0452880859375, 0.73681640625, 0.0007691383361816406], "tokens": [275, 319, 333, 98, 48, 275, 319, 886, 4717, 1133, 10790, 1098, 5182, 526, 5253, 3401, 30, 461, 1098, 526, 275, 319, 312, 3088, 1204, 1383, 32, 1040, 32, 5291, 26223, 111, 415, 4195, 32, 275, 319, 275, 319, 477, 601, 322, 1133, 10790, 30, 7152, 744, 275, 319, 477, 8119, 225]}
{"line_number": 1168, "line_type": "original", "code": "        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);", "entropy": 0.94873046875, "is_bug_line": true, "sus_score": 0.6703378558158875, "per_token_entropy": [3.76171875, 5.88671875, 2.1171875, 5.265625, 0.1229248046875, 2.26953125, 1.2275390625, 0.00554656982421875, 0.01277923583984375, 0.392822265625, 1.162109375, 0.4677734375, 0.8603515625, 0.115234375, 0.032989501953125, 0.0010442733764648438, 0.00027823448181152344, 0.0023670196533203125, 2.682209014892578e-05, 3.5762786865234375e-07, 4.839897155761719e-05, 2.2530555725097656e-05, 1.6570091247558594e-05, 0.00815582275390625, 0.01100921630859375], "tokens": [351, 1946, 23564, 5125, 280, 4483, 15689, 40608, 26, 30241, 474, 225, 37, 319, 6666, 5229, 32, 63, 13142, 1296, 81, 3687, 81, 30540, 293]}
{"line_number": 1168, "line_type": "generated", "code": "\n     */\n    public abstract TimeZone toTimeZone();\n\n    /**\n     * Get the datetime zone as a {@link java.util.Locale}.\n     * \n     * @return the closest matching Locale object\n     */\n    public abstract Locale toLocale();\n\n    /**\n     *", "entropy": 0.150634765625, "is_bug_line": true, "sus_score": 0.6703378558158875, "per_token_entropy": [0.37255859375, 0.1494140625, 0.03125, 0.1470947265625, 0.462890625, 0.122802734375, 3.314018249511719e-05, 0.1290283203125, 0.00036525726318359375, 0.01052093505859375, 0.2015380859375, 0.2093505859375, 0.00689697265625, 0.00015103816986083984, 0.57666015625, 0.06878662109375, 0.63818359375, 0.00769805908203125, 0.040435791015625, 0.2159423828125, 0.06622314453125, 0.011444091796875, 0.6025390625, 3.409385681152344e-05, 0.08367919921875, 1.71661376953125e-05, 0.82861328125, 0.1605224609375, 0.01474761962890625, 0.0003228187561035156, 0.212890625, 0.00010228157043457031, 0.01385498046875, 0.0972900390625, 0.055267333984375, 0.1905517578125, 0.040130615234375, 0.06396484375, 0.30322265625, 0.88671875, 0.1697998046875, 0.038177490234375, 0.01393890380859375, 0.099365234375, 0.01442718505859375, 0.060028076171875, 0.0006399154663085938, 0.0010118484497070312, 0.1329345703125, 0.2734375, 0.00482177734375, 0.00014138221740722656], "tokens": [275, 569, 284, 562, 5547, 3717, 6767, 372, 26223, 473, 446, 1022, 275, 319, 1390, 322, 7138, 10790, 619, 312, 3088, 1204, 1383, 32, 1040, 32, 9467, 4009, 275, 319, 5384, 319, 477, 601, 322, 18122, 9215, 23265, 1300, 275, 569, 284, 562, 5547, 23265, 372, 9467, 473, 446, 1022, 275, 319]}
{"line_number": 1102, "line_type": "original", "code": "//            return true;", "entropy": 1.826171875, "is_bug_line": false, "sus_score": 0.6646043062210083, "per_token_entropy": [7.265625, 0.89013671875, 0.8623046875, 0.111328125, 0.0029468536376953125], "tokens": [306, 1468, 442, 861, 45]}
{"line_number": 1102, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6646043062210083, "per_token_entropy": [], "tokens": []}
{"line_number": 885, "line_type": "original", "code": "        final int offsetAdjusted = getOffset(instantAdjusted);", "entropy": 1.9599609375, "is_bug_line": false, "sus_score": 0.6611669063568115, "per_token_entropy": [5.8359375, 9.828125, 2.185546875, 0.056304931640625, 5.296875, 0.0301361083984375, 0.06549072265625, 0.2032470703125, 0.0037555694580078125, 0.7998046875, 0.0182647705078125, 3.056640625, 0.0011072158813476562, 0.052978515625], "tokens": [351, 1158, 629, 3401, 15051, 318, 280, 622, 3457, 26, 30241, 15051, 318, 293]}
{"line_number": 885, "line_type": "generated", "code": "\n     * local time. This conversion is used after performing a calculation\n     * so that the result can be converted back to a simple UTC zone.\n     *\n     * @param instantLocal  the local instant to convert to UTC\n     * @return the UTC instant", "entropy": 0.14404296875, "is_bug_line": false, "sus_score": 0.6611669063568115, "per_token_entropy": [0.55126953125, 0.00621795654296875, 0.11895751953125, 0.0028171539306640625, 0.0261077880859375, 0.07843017578125, 0.0426025390625, 0.0212249755859375, 0.06610107421875, 1.6240234375, 0.022491455078125, 0.006725311279296875, 0.0289459228515625, 0.053009033203125, 0.0001456737518310547, 0.2059326171875, 0.00485992431640625, 0.042266845703125, 0.53955078125, 0.1650390625, 0.00710296630859375, 0.365478515625, 0.479248046875, 0.04302978515625, 0.8212890625, 0.515625, 0.039398193359375, 0.94775390625, 0.07525634765625, 0.109130859375, 0.0004413127899169922, 0.177734375, 8.189678192138672e-05, 0.024200439453125, 0.0017547607421875, 0.002391815185546875, 0.041961669921875, 0.0360107421875, 0.0019292831420898438, 0.038818359375, 0.0022678375244140625, 0.004871368408203125, 0.006221771240234375, 0.025604248046875, 0.0297698974609375, 0.01303863525390625, 0.0003254413604736328, 0.00018358230590820312, 0.009552001953125, 0.0016384124755859375, 0.0645751953125, 0.0007085800170898438], "tokens": [275, 319, 2196, 1133, 32, 1348, 11741, 438, 1654, 2685, 23400, 312, 17686, 275, 319, 1259, 688, 322, 1056, 883, 526, 12785, 1751, 372, 312, 4281, 17197, 10790, 32, 275, 319, 275, 319, 477, 753, 23564, 3325, 225, 322, 2196, 23564, 372, 4483, 372, 17197, 275, 319, 477, 601, 322, 17197, 23564]}
{"line_number": 882, "line_type": "original", "code": "        final int offsetLocal = getOffset(instantLocal);", "entropy": 1.0712890625, "is_bug_line": false, "sus_score": 0.6609125137329102, "per_token_entropy": [5.6015625, 4.95703125, 0.98388671875, 0.39013671875, 0.314697265625, 0.194091796875, 0.11993408203125, 0.0218963623046875, 0.06829833984375, 0.09967041015625, 0.0859375, 0.0178375244140625], "tokens": [351, 1158, 629, 3401, 3325, 280, 622, 3457, 26, 30241, 3325, 293]}
{"line_number": 882, "line_type": "generated", "code": "\n    /**\n     * Converts a local instant to a standard UTC instant with the same\n     * local time. This conversion is used before performing a calculation\n     * so that the calculation can be done using a simple UTC zone.\n     *\n     * @param instantLocal", "entropy": 0.070556640625, "is_bug_line": false, "sus_score": 0.6609125137329102, "per_token_entropy": [0.9765625, 0.2259521484375, 0.029327392578125, 7.343292236328125e-05, 0.37890625, 0.09716796875, 0.023773193359375, 0.0158538818359375, 0.027374267578125, 0.09039306640625, 0.0355224609375, 0.08563232421875, 0.0015716552734375, 0.2137451171875, 0.002506256103515625, 0.048828125, 0.0133209228515625, 1.4185905456542969e-05, 0.1103515625, 0.0017852783203125, 0.017181396484375, 0.047882080078125, 0.0243377685546875, 0.01380157470703125, 0.0423583984375, 0.1839599609375, 0.03265380859375, 0.011383056640625, 0.02874755859375, 0.00372314453125, 3.933906555175781e-06, 0.036041259765625, 0.00029659271240234375, 0.004894256591796875, 0.019439697265625, 0.0294342041015625, 0.0027675628662109375, 0.006290435791015625, 0.0016241073608398438, 0.045623779296875, 0.0062408447265625, 0.459716796875, 0.0919189453125, 0.00962066650390625, 0.0218658447265625, 0.0005140304565429688, 0.10015869140625, 5.447864532470703e-05, 0.0124053955078125, 0.0009617805480957031, 0.0017023086547851562, 0.031524658203125], "tokens": [284, 1022, 275, 319, 25337, 312, 2196, 23564, 372, 312, 6216, 17197, 23564, 623, 322, 2432, 275, 319, 2196, 1133, 32, 1348, 11741, 438, 1654, 2670, 23400, 312, 17686, 275, 319, 1259, 688, 322, 17686, 883, 526, 3390, 1471, 312, 4281, 17197, 10790, 32, 275, 319, 275, 319, 477, 753, 23564, 3325]}
{"line_number": 1174, "line_type": "original", "code": "        long local = convertUTCToLocal(instant);", "entropy": 1.5078125, "is_bug_line": true, "sus_score": 0.6606529355049133, "per_token_entropy": [4.33984375, 4.40625, 2.283203125, 1.587890625, 0.95263671875, 0.2471923828125, 0.00635528564453125, 0.029571533203125, 1.1484375, 0.07611083984375], "tokens": [351, 1946, 2196, 280, 4483, 15689, 40608, 26, 30241, 293]}
{"line_number": 1174, "line_type": "generated", "code": "\n     * Get the datetime zone as a {@link DateTimeZone}.\n     * \n     * @return the closest matching DateTimeZone object\n     */\n    public abstract DateTimeZone toDateTimeZone();\n\n    /**\n     * Get the id of the datetime zone.\n     * <p", "entropy": 0.285888671875, "is_bug_line": true, "sus_score": 0.6606529355049133, "per_token_entropy": [0.3828125, 0.216552734375, 0.86083984375, 0.099609375, 0.658203125, 0.0095367431640625, 0.0831298828125, 0.139892578125, 0.0882568359375, 0.014801025390625, 2.20703125, 0.0013484954833984375, 0.2222900390625, 0.05810546875, 0.004367828369140625, 0.266357421875, 0.0001499652862548828, 0.0040283203125, 0.07696533203125, 0.04461669921875, 0.2376708984375, 0.007049560546875, 0.06622314453125, 0.0010223388671875, 0.03997802734375, 0.1329345703125, 0.12176513671875, 0.162841796875, 0.08514404296875, 1.3720703125, 0.11529541015625, 0.0009946823120117188, 0.0279541015625, 0.009063720703125, 0.00012004375457763672, 0.016265869140625, 0.29443359375, 0.2391357421875, 0.0560302734375, 8.022785186767578e-05, 0.7470703125, 0.08807373046875, 2.486328125, 0.2032470703125, 0.3857421875, 0.6572265625, 0.007099151611328125, 0.287353515625, 0.033111572265625, 0.004283905029296875, 1.5390625, 0.004917144775390625], "tokens": [275, 319, 1390, 322, 7138, 10790, 619, 312, 3088, 1204, 6666, 6767, 4009, 275, 319, 5384, 319, 477, 601, 322, 18122, 9215, 6666, 6767, 1300, 275, 569, 284, 562, 5547, 6666, 6767, 372, 4852, 6767, 473, 446, 1022, 275, 319, 1390, 322, 804, 432, 322, 7138, 10790, 32, 275, 319, 333, 98]}
{"line_number": 887, "line_type": "original", "code": "        if (offsetLocal != offsetAdjusted) {", "entropy": 1.5, "is_bug_line": false, "sus_score": 0.6577983498573303, "per_token_entropy": [5.29296875, 2.3125, 1.06640625, 1.22265625, 1.103515625, 1.01953125, 0.291748046875, 3.966796875, 0.0179901123046875, 0.052337646484375, 0.1610107421875], "tokens": [351, 415, 308, 2881, 3325, 863, 3401, 15051, 318, 27, 301]}
{"line_number": 887, "line_type": "generated", "code": "\n     * This method uses the same offset as the original instant, which is\n     * not always possible. Use {@link #convertLocalToUTC(long, int)}\n     * if the original instant is not in the same time zone.\n     *\n     *", "entropy": 0.57373046875, "is_bug_line": false, "sus_score": 0.6577983498573303, "per_token_entropy": [0.349609375, 0.00853729248046875, 1.181640625, 0.93505859375, 2.755859375, 0.55712890625, 1.5390625, 0.673828125, 0.7265625, 0.5595703125, 0.220703125, 0.2293701171875, 2.037109375, 1.88671875, 1.779296875, 0.416259765625, 6.103515625e-05, 2.236328125, 0.217529296875, 0.17919921875, 0.44775390625, 1.197265625, 0.133056640625, 0.0021762847900390625, 0.02545166015625, 0.09765625, 0.1007080078125, 0.001216888427734375, 0.0164031982421875, 0.07611083984375, 0.01617431640625, 0.036529541015625, 0.1962890625, 0.012237548828125, 1.0927734375, 5.829334259033203e-05, 0.59423828125, 0.65283203125, 1.2578125, 0.2303466796875, 1.17578125, 1.3935546875, 0.438720703125, 0.32958984375, 0.09832763671875, 0.499267578125, 0.01493072509765625, 0.77392578125, 0.060455322265625, 0.0007615089416503906, 0.38037109375, 3.635883331298828e-05], "tokens": [275, 319, 1348, 1411, 5251, 322, 2432, 3401, 619, 322, 4707, 23564, 30, 1510, 438, 275, 319, 646, 5182, 4195, 32, 4417, 3088, 1204, 588, 5954, 3325, 705, 15689, 26, 3222, 30, 629, 4370, 275, 319, 415, 322, 4707, 23564, 438, 646, 328, 322, 2432, 1133, 10790, 32, 275, 319, 275, 319]}
{"line_number": 496, "line_type": "original", "code": "     * @throws SecurityException if you do not have the permission DateTimeZone.setNameProvider", "entropy": 1.8017578125, "is_bug_line": false, "sus_score": 0.6536098718643188, "per_token_entropy": [7.01953125, 3.74609375, 0.397216796875, 1.1923828125, 4.6015625, 0.0012006759643554688, 0.326171875, 6.6015625, 0.7763671875, 0.004276275634765625, 0.01477813720703125, 1.669921875, 1.048828125, 3.2265625, 0.0037250518798828125, 0.0253143310546875, 1.779296875, 0.00147247314453125], "tokens": [262, 319, 477, 5117, 7337, 984, 415, 844, 745, 646, 1159, 322, 6501, 6666, 6767, 32, 15791, 2570]}
{"line_number": 496, "line_type": "generated", "code": "\n        }\n\n        return nameProvider;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the provider of time zone rules.\n     * <p>\n     * The rule provider is a pluggable instance factory that supplies the\n     * rules for each DateTimeZone.", "entropy": 0.206298828125, "is_bug_line": false, "sus_score": 0.6536098718643188, "per_token_entropy": [0.153076171875, 0.01137542724609375, 0.300537109375, 0.011749267578125, 0.0005183219909667969, -0.0, 0.0003788471221923828, 0.052154541015625, 0.0006704330444335938, 0.4091796875, 0.10833740234375, 0.0185546875, 0.02264404296875, 0.11181640625, 0.00726318359375, 8.308887481689453e-05, 0.6708984375, 0.1829833984375, 1.826171875, 1.0166015625, 0.467041015625, 0.246337890625, 0.744140625, 0.190673828125, 0.01165771484375, 0.00360870361328125, 0.276611328125, 0.00017583370208740234, 0.0001474618911743164, 0.0005512237548828125, 9.894371032714844e-05, 0.10302734375, 1.5009765625, 0.0474853515625, 0.07666015625, 0.031585693359375, 0.0138397216796875, 0.00037932395935058594, 0.07513427734375, 0.0295257568359375, 0.00809478759765625, 0.0828857421875, 4.851818084716797e-05, 0.3271484375, 0.05224609375, 0.00010991096496582031, 0.431640625, 0.253173828125, 0.37353515625, 0.443359375, 0.00016033649444580078, 0.0306854248046875], "tokens": [291, 320, 584, 442, 636, 2570, 45, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 7124, 322, 6887, 432, 1133, 10790, 7019, 32, 275, 319, 333, 98, 48, 275, 319, 886, 5750, 6887, 438, 312, 20527, 15329, 1980, 7763, 688, 11066, 6827, 322, 275, 319, 7019, 436, 2504, 6666, 6767, 32]}
{"line_number": 686, "line_type": "original", "code": "     * @param id  the id to use", "entropy": 1.9609375, "is_bug_line": false, "sus_score": 0.6527066230773926, "per_token_entropy": [4.62890625, 0.095703125, 3.65625, 0.034576416015625, 7.7109375, 0.5439453125, 0.45458984375, 0.861328125, 0.9033203125, 0.71923828125], "tokens": [262, 319, 477, 753, 804, 225, 322, 804, 372, 793]}
{"line_number": 686, "line_type": "generated", "code": "\n     * If the name is not available for the locale, then this method returns a\n     * string in the format <code>[+-]hh:mm</code>.\n     * \n     * @param instant  milliseconds from 1970-01", "entropy": 0.0232086181640625, "is_bug_line": false, "sus_score": 0.6527066230773926, "per_token_entropy": [0.1536865234375, 0.0008716583251953125, 0.4638671875, 0.01194000244140625, 0.0274810791015625, 0.0016536712646484375, 0.0006284713745117188, 0.0008449554443359375, 0.004550933837890625, 0.004344940185546875, 0.039337158203125, 0.00470733642578125, 0.005126953125, 0.0128326416015625, 0.0008225440979003906, 0.00948333740234375, 0.0115509033203125, 0.00853729248046875, 7.176399230957031e-05, 0.00466156005859375, 0.0013599395751953125, 0.0007977485656738281, 0.0013551712036132812, 0.00711822509765625, 0.00086212158203125, 0.0013456344604492188, 6.92605972290039e-05, 0.00032019615173339844, 0.005306243896484375, 0.0016527175903320312, 2.7060508728027344e-05, 0.0020771026611328125, 0.0002930164337158203, 0.0171051025390625, 0.04840087890625, 0.0009326934814453125, 0.130615234375, 2.2292137145996094e-05, 0.002918243408203125, 0.00373077392578125, 0.1824951171875, 0.006622314453125, 0.0235443115234375, 0.0006160736083984375, 0.0001569986343383789, 3.075599670410156e-05, 1.2278556823730469e-05, 6.318092346191406e-06, 1.4781951904296875e-05, 0.0003178119659423828, 7.009506225585938e-05, 2.6464462280273438e-05], "tokens": [275, 319, 1670, 322, 636, 438, 646, 3304, 436, 322, 11259, 30, 1615, 458, 1411, 3217, 312, 275, 319, 802, 328, 322, 2179, 333, 687, 8828, 10873, 79, 10429, 44, 2840, 377, 687, 4503, 275, 319, 5384, 319, 477, 753, 23564, 225, 18574, 645, 225, 35, 43, 41, 34, 31, 34, 35]}
{"line_number": 480, "line_type": "original", "code": "     * The name provider is a pluggable instance factory that supplies the", "entropy": 1.0810546875, "is_bug_line": false, "sus_score": 0.6525073647499084, "per_token_entropy": [6.8828125, 3.138671875, 5.2734375, 0.68017578125, 0.062286376953125, 0.07403564453125, 0.01517486572265625, 0.0036106109619140625, 0.0001341104507446289, 0.0128936767578125, 0.007396697998046875, 0.013946533203125, 0.0265960693359375, 9.775161743164062e-05, 0.022857666015625], "tokens": [262, 319, 886, 636, 6887, 438, 312, 20527, 15329, 1980, 7763, 688, 11066, 6827, 322]}
{"line_number": 480, "line_type": "generated", "code": "\n        return nameProvider;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the provider of time zone rules.\n     * <p>", "entropy": 0.268798828125, "is_bug_line": false, "sus_score": 0.6525073647499084, "per_token_entropy": [0.4619140625, 1.0244140625, 0.09271240234375, 4.589557647705078e-05, 0.032958984375, 0.00984954833984375, 0.0003542900085449219, 0.25634765625, 0.108154296875, 0.00722503662109375, 0.0183868408203125, 0.07611083984375, 0.005634307861328125, 0.00013589859008789062, 0.3603515625, 0.0968017578125, 1.1240234375, 0.80615234375, 0.63330078125, 0.269775390625, 1.359375, 0.185302734375, 0.0096435546875, 0.0011196136474609375, 0.315673828125, 0.00024819374084472656, 0.0007939338684082031], "tokens": [291, 442, 636, 2570, 45, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 7124, 322, 6887, 432, 1133, 10790, 7019, 32, 275, 319, 333, 98, 48]}
{"line_number": 520, "line_type": "original", "code": "    /**", "entropy": 6.15234375, "is_bug_line": false, "sus_score": 0.6516473293304443, "per_token_entropy": [5.5, 6.8046875], "tokens": [264, 1022]}
{"line_number": 520, "line_type": "generated", "code": "\n            cZoneIdConversion = map;\n        }\n        String newId = map.get(id);\n        if (newId == null) {\n            newId = map.get(id.toLowerCase(Locale.ENGLISH));\n        }\n        return", "entropy": 0.1844482421875, "is_bug_line": false, "sus_score": 0.6516473293304443, "per_token_entropy": [0.421630859375, 0.83349609375, 0.0023097991943359375, 9.930133819580078e-05, 0.00037789344787597656, 0.0007147789001464844, 0.019012451171875, 0.0027370452880859375, 0.03741455078125, 6.520748138427734e-05, 0.309326171875, 1.25390625, 0.9755859375, 0.0186920166015625, 0.0030384063720703125, 0.03204345703125, 0.0001825094223022461, 0.00048232078552246094, 0.0004177093505859375, 0.001434326171875, 0.0272979736328125, 0.0254974365234375, 0.416015625, 0.0190582275390625, 0.00856781005859375, 8.821487426757812e-06, 0.40771484375, 0.005859375, 0.1292724609375, 0.0004200935363769531, 0.07684326171875, 1.5439453125, 0.00029540061950683594, 0.00011599063873291016, 0.5859375, 0.0073089599609375, 0.0474853515625, 0.1468505859375, 0.06549072265625, 0.01385498046875, 1.451171875, 0.332763671875, 0.0160675048828125, 0.00013935565948486328, 0.0227508544921875, 4.0531158447265625e-06, 5.7220458984375e-06, 0.007740020751953125, 0.10980224609375, 7.021427154541016e-05, 0.0308837890625, 0.183349609375], "tokens": [324, 281, 6767, 606, 14350, 280, 1992, 45, 291, 320, 291, 892, 537, 606, 280, 1992, 32, 371, 26, 314, 293, 291, 415, 308, 890, 606, 610, 744, 27, 301, 324, 537, 606, 280, 1992, 32, 371, 26, 314, 32, 10493, 26, 9467, 32, 718, 2060, 14139, 876, 291, 320, 291, 442]}
{"line_number": 666, "line_type": "original", "code": "     * ", "entropy": 3.939453125, "is_bug_line": false, "sus_score": 0.6502848267555237, "per_token_entropy": [5.140625, 2.189453125, 4.48828125], "tokens": [262, 319, 225]}
{"line_number": 666, "line_type": "generated", "code": "\n    public String getUniqueName(long instant) {\n        return null;\n    }\n\n    /**\n     * Gets the amount of savings from GMT at the given instant.\n     * \n     * @param instant  milliseconds from 1970-01", "entropy": 0.302978515625, "is_bug_line": false, "sus_score": 0.6502848267555237, "per_token_entropy": [0.62646484375, 0.458251953125, 0.1871337890625, 1.4970703125, 0.60107421875, 0.11962890625, 0.12298583984375, 0.02947998046875, 0.0015048980712890625, 0.00673675537109375, 0.00968170166015625, 0.1275634765625, 0.2447509765625, 0.2303466796875, 0.00099945068359375, 0.03216552734375, 0.0008034706115722656, 0.17236328125, 0.1326904296875, 0.01036834716796875, 0.0001285076141357422, 0.88232421875, 0.32470703125, 2.875, 0.053466796875, 0.3779296875, 0.0024204254150390625, 0.705078125, 2.103515625, 0.69775390625, 0.07855224609375, 0.66552734375, 0.428466796875, 0.287353515625, 0.37255859375, 0.0022430419921875, 0.47216796875, 6.377696990966797e-05, 0.0152740478515625, 0.01020050048828125, 0.05633544921875, 0.1229248046875, 0.591796875, 0.013153076171875, 0.0022335052490234375, 0.00013005733489990234, 0.000492095947265625, 0.00034546852111816406, 0.0003712177276611328, 0.0011548995971679688, 0.0012102127075195312, 9.894371032714844e-06], "tokens": [284, 562, 892, 622, 10189, 558, 26, 3222, 23564, 27, 301, 291, 442, 744, 45, 284, 320, 446, 1022, 275, 319, 7124, 322, 5168, 432, 309, 31156, 645, 6846, 821, 322, 2702, 23564, 32, 275, 319, 5384, 319, 477, 753, 23564, 225, 18574, 645, 225, 35, 43, 41, 34, 31, 34, 35]}
{"line_number": 1169, "line_type": "original", "code": "        if (instantBefore == instantAfter) {", "entropy": 2.28515625, "is_bug_line": true, "sus_score": 0.6501501798629761, "per_token_entropy": [3.94140625, 3.1015625, 0.0936279296875, 8.8046875, 5.2421875, 0.7900390625, 0.383544921875, 0.373291015625, 0.0908203125, 0.040496826171875], "tokens": [351, 415, 308, 30241, 5658, 610, 23564, 5125, 27, 301]}
{"line_number": 1169, "line_type": "generated", "code": "\n    public TimeZone toTimeZone() {\n        return TimeZone.getTimeZone(getID());\n    }\n\n    /**\n     * Get the datetime zone as a {@link java.util.Locale}.\n     * \n     * @return the closest matching Locale object\n     */\n   ", "entropy": 0.197265625, "is_bug_line": true, "sus_score": 0.6501501798629761, "per_token_entropy": [0.79150390625, 0.58251953125, 0.607421875, 9.119510650634766e-05, 0.155029296875, 0.0011663436889648438, 0.03125, 0.016937255859375, 0.155029296875, 0.446533203125, 1.0810546875, 0.0010089874267578125, 0.02313232421875, 0.03778076171875, 0.0003883838653564453, 0.37060546875, 0.1915283203125, 0.0091094970703125, 0.0794677734375, 0.004909515380859375, 0.87255859375, 0.320068359375, 0.00482177734375, 9.262561798095703e-05, 0.63671875, 0.07464599609375, 0.473388671875, 0.006801605224609375, 0.04583740234375, 0.140869140625, 0.04742431640625, 0.0123291015625, 0.469970703125, 1.2993812561035156e-05, 0.05548095703125, 1.7762184143066406e-05, 0.78662109375, 0.1226806640625, 0.0118560791015625, 0.00024116039276123047, 0.225830078125, 8.213520050048828e-05, 0.0124969482421875, 0.0823974609375, 0.047698974609375, 0.1549072265625, 0.0223388671875, 0.0474853515625, 0.184326171875, 0.10687255859375, 0.11126708984375, 0.5966796875], "tokens": [284, 562, 3717, 6767, 372, 26223, 346, 301, 291, 442, 3717, 6767, 32, 11957, 6767, 26, 37575, 1035, 284, 320, 446, 1022, 275, 319, 1390, 322, 7138, 10790, 619, 312, 3088, 1204, 1383, 32, 1040, 32, 9467, 4009, 275, 319, 5384, 319, 477, 601, 322, 18122, 9215, 23265, 1300, 275, 569, 284]}
