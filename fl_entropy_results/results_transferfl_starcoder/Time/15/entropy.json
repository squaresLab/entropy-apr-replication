{"line_number": 140, "line_type": "original", "code": "                return 0L;", "entropy": 3.109375, "is_bug_line": false, "sus_score": 0.6663496494293213, "per_token_entropy": [9.46875, 4.421875, 1.689453125, 0.2039794921875, 2.7578125, 0.11883544921875], "tokens": [2071, 442, 225, 34, 62, 45]}
{"line_number": 140, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6663496494293213, "per_token_entropy": [], "tokens": []}
{"line_number": 138, "line_type": "original", "code": "                return -val1;", "entropy": 4.33984375, "is_bug_line": true, "sus_score": 0.6120589971542358, "per_token_entropy": [8.515625, 3.41796875, 4.234375, 7.59765625, 1.9736328125, 0.300537109375], "tokens": [2071, 442, 429, 695, 35, 45]}
{"line_number": 138, "line_type": "generated", "code": "\n    }\n    \n    /**\n     * Casts to a long throwing an exception if overflow occurs.\n     * \n     * @param value  the value\n     * @return the value as a long\n     * @throws ArithmeticException if the value is too big or too small", "entropy": 0.04150390625, "is_bug_line": true, "sus_score": 0.6120589971542358, "per_token_entropy": [0.234130859375, 0.0124053955078125, 0.81787109375, 0.07281494140625, 0.014373779296875, 2.6702880859375e-05, 0.340576171875, 0.0094451904296875, 0.0169525146484375, 0.257080078125, 0.1748046875, 0.0206451416015625, 0.0002422332763671875, 0.00018107891082763672, 0.00170135498046875, 0.016265869140625, 0.0020771026611328125, 0.00585174560546875, 0.004444122314453125, 5.1975250244140625e-05, 0.021209716796875, 6.985664367675781e-05, 0.0013294219970703125, 0.0007038116455078125, 0.004669189453125, 0.003429412841796875, 0.0025196075439453125, 0.00475311279296875, 0.0105438232421875, 2.205371856689453e-05, 3.218650817871094e-05, 0.0018491744995117188, 0.0008764266967773438, 0.0015716552734375, 0.003082275390625, 0.049102783203125, 0.002719879150390625, 0.00661468505859375, 0.00931549072265625, 0.00022280216217041016, 0.01476287841796875, 0.00045680999755859375, 4.0531158447265625e-06, 0.0011796951293945312, 0.0014934539794921875, 0.002132415771484375, 0.00106048583984375, 0.00014317035675048828, 0.0012025833129882812, 0.00884246826171875, 0.0006775856018066406, 0.00014030933380126953], "tokens": [284, 320, 2170, 1022, 275, 319, 23894, 101, 372, 312, 1946, 34177, 600, 3756, 415, 9973, 12984, 32, 275, 319, 5384, 319, 477, 753, 786, 225, 322, 786, 275, 319, 477, 601, 322, 786, 619, 312, 1946, 275, 319, 477, 5117, 47721, 984, 415, 322, 786, 438, 5133, 6524, 556, 5133, 5532]}
{"line_number": 142, "line_type": "original", "code": "                return val1;", "entropy": 3.775390625, "is_bug_line": false, "sus_score": 0.5644732117652893, "per_token_entropy": [9.3984375, 3.13671875, 3.599609375, 0.050140380859375, 2.689453125], "tokens": [2071, 442, 909, 35, 45]}
{"line_number": 142, "line_type": "generated", "code": "\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     */\n    public static int safeMultiply", "entropy": 0.04052734375, "is_bug_line": false, "sus_score": 0.5644732117652893, "per_token_entropy": [0.333251953125, 0.19873046875, 0.145751953125, 0.0005393028259277344, 0.0078277587890625, 0.006862640380859375, 0.1285400390625, 0.0008511543273925781, 0.0120391845703125, 0.007396697998046875, 0.007038116455078125, 0.01084136962890625, 0.0986328125, 8.52346420288086e-05, 7.510185241699219e-06, 0.00030231475830078125, 0.0006532669067382812, 0.0001690387725830078, 0.0015878677368164062, 0.0002377033233642578, 0.0012054443359375, 0.0022983551025390625, 0.04705810546875, 0.00012886524200439453, 0.0002994537353515625, 0.0338134765625, 0.00795745849609375, 0.1124267578125, 0.0092315673828125, 0.2333984375, 0.0263824462890625, 0.0002646446228027344, 0.014373779296875, 0.001628875732421875, 7.987022399902344e-06, 0.0008339881896972656, 0.0009813308715820312, 0.006145477294921875, 0.0003299713134765625, 0.00031948089599609375, 0.0002694129943847656, 0.0108795166015625, 0.00019812583923339844, 0.00016999244689941406, 0.0193634033203125, 0.40283203125, 0.029205322265625, 0.01351165771484375, 0.0013942718505859375, 0.04095458984375, 0.0228424072265625, 0.10546875], "tokens": [275, 319, 5384, 319, 477, 753, 909, 35, 225, 322, 1932, 786, 275, 319, 477, 753, 909, 36, 225, 322, 3100, 786, 275, 319, 477, 601, 322, 537, 3380, 275, 319, 477, 5117, 47721, 984, 415, 322, 786, 438, 5133, 6524, 556, 5133, 5532, 275, 569, 284, 562, 907, 629, 10061, 27732]}
{"line_number": 136, "line_type": "original", "code": "        switch (val2) {", "entropy": 2.30859375, "is_bug_line": false, "sus_score": 0.5046608448028564, "per_token_entropy": [6.23828125, 5.25390625, 0.2122802734375, 2.375, 1.9736328125, 0.05572509765625, 0.048736572265625], "tokens": [351, 3578, 308, 695, 36, 27, 301]}
{"line_number": 136, "line_type": "generated", "code": "\n        }\n        throw new ArithmeticException(\"The value cannot be cast to int without overflow: \" + value);\n    }\n    \n    /**\n     * Casts to a long throwing an exception if overflow occurs.\n     * \n     * @param value  the value\n     *", "entropy": 0.2166748046875, "is_bug_line": false, "sus_score": 0.5046608448028564, "per_token_entropy": [0.6611328125, 0.85400390625, 0.24609375, 0.45703125, 0.003818511962890625, 0.0017004013061523438, 2.396106719970703e-05, 0.0293426513671875, 1.189453125, 0.46875, 0.88623046875, 0.09234619140625, 0.307861328125, 0.01096343994140625, 1.3388671875, 1.228515625, 1.4599609375, 0.1494140625, 0.0025730133056640625, 0.0028591156005859375, 0.004146575927734375, 0.00310516357421875, 0.0753173828125, 0.0008215904235839844, 0.912109375, 0.0814208984375, 0.0170745849609375, 3.337860107421875e-05, 0.33740234375, 0.00894927978515625, 0.018829345703125, 0.199951171875, 0.1353759765625, 0.013916015625, 0.00023162364959716797, 0.00023603439331054688, 0.0013866424560546875, 0.01052093505859375, 0.002231597900390625, 0.00603485107421875, 0.004016876220703125, 2.8014183044433594e-05, 0.017608642578125, 9.739398956298828e-05, 0.0015001296997070312, 0.0005650520324707031, 0.0035533905029296875, 0.002925872802734375, 0.0019855499267578125, 0.00272369384765625, 0.0092315673828125, 5.316734313964844e-05], "tokens": [291, 320, 291, 1422, 537, 47721, 984, 440, 1318, 786, 4881, 526, 9936, 372, 629, 2876, 9973, 44, 313, 474, 786, 293, 284, 320, 2170, 1022, 275, 319, 23894, 101, 372, 312, 1946, 34177, 600, 3756, 415, 9973, 12984, 32, 275, 319, 5384, 319, 477, 753, 786, 225, 322, 786, 275, 319]}
{"line_number": 144, "line_type": "original", "code": "        long total = val1 * val2;", "entropy": 0.84765625, "is_bug_line": false, "sus_score": 0.4755330979824066, "per_token_entropy": [1.4765625, 4.28515625, 1.9443359375, 0.011810302734375, 0.580078125, 0.005489349365234375, 0.013458251953125, 0.12890625, 0.0012445449829101562, 0.0299072265625], "tokens": [351, 1946, 3380, 280, 909, 35, 319, 909, 36, 45]}
{"line_number": 144, "line_type": "generated", "code": "        * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     */\n    public static int safeMultiplyToInt(int val1, int val2) {\n       ", "entropy": 0.0792236328125, "is_bug_line": false, "sus_score": 0.4755330979824066, "per_token_entropy": [1.4775390625, 0.286865234375, 0.0024547576904296875, 0.003223419189453125, 0.00035452842712402344, 0.0008339881896972656, 0.005382537841796875, 0.0003771781921386719, 0.005077362060546875, 0.0014495849609375, 0.47021484375, 0.0007476806640625, 0.0014352798461914062, 0.018341064453125, 0.01117706298828125, 0.1097412109375, 0.01372528076171875, 0.28564453125, 0.0280914306640625, 0.0003097057342529297, 0.0175933837890625, 0.0011358261108398438, 7.152557373046875e-06, 0.0008821487426757812, 0.0015306472778320312, 0.00759124755859375, 0.0005006790161132812, 0.0003533363342285156, 0.00023925304412841797, 0.0080108642578125, 0.0002536773681640625, 0.00018799304962158203, 0.030548095703125, 0.52392578125, 0.030670166015625, 0.00635528564453125, 0.0010089874267578125, 0.01812744140625, 0.01505279541015625, 0.176025390625, 0.005657196044921875, 0.00104522705078125, 0.353515625, 0.00020575523376464844, 3.2782554626464844e-05, 0.00022363662719726562, 0.10076904296875, 2.0742416381835938e-05, 8.344650268554688e-07, 0.0007548332214355469, 0.0067596435546875, 0.0882568359375], "tokens": [351, 319, 477, 753, 909, 36, 225, 322, 3100, 786, 275, 319, 477, 601, 322, 537, 3380, 275, 319, 477, 5117, 47721, 984, 415, 322, 786, 438, 5133, 6524, 556, 5133, 5532, 275, 569, 284, 562, 907, 629, 10061, 27732, 14150, 26, 410, 909, 35, 30, 629, 909, 36, 27, 301, 291]}
{"line_number": 148, "line_type": "original", "code": "        return total;", "entropy": 3.7890625, "is_bug_line": false, "sus_score": 0.4536433219909668, "per_token_entropy": [5.70703125, 1.1669921875, 8.015625, 0.26806640625], "tokens": [351, 442, 3380, 45]}
{"line_number": 148, "line_type": "generated", "code": "\n    \n    /**\n     * Divide two values to return an int throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws", "entropy": 0.10504150390625, "is_bug_line": false, "sus_score": 0.4536433219909668, "per_token_entropy": [1.7548828125, 0.177490234375, 0.01325225830078125, 0.00036263465881347656, 1.462890625, 0.0203399658203125, 0.048858642578125, 0.10577392578125, 0.501953125, 0.014892578125, 0.1497802734375, 0.021942138671875, 0.059814453125, 0.0013933181762695312, 0.0018529891967773438, 0.00736236572265625, 0.036346435546875, 0.01100921630859375, 0.0149688720703125, 0.005279541015625, 6.973743438720703e-05, 0.036224365234375, 3.9458274841308594e-05, 0.0009064674377441406, 0.00044608116149902344, 0.4404296875, 0.0004668235778808594, 0.004108428955078125, 0.0017833709716796875, 0.1778564453125, 0.007205963134765625, 0.039337158203125, 6.794929504394531e-06, 0.00015544891357421875, 0.0001119375228881836, 0.05096435546875, 8.618831634521484e-05, 0.00023245811462402344, 4.38690185546875e-05, 0.0207366943359375, 0.0004544258117675781, 0.00954437255859375, 2.3484230041503906e-05, 0.0003783702850341797, 0.01214599609375, 0.002349853515625, 0.1915283203125, 0.037200927734375, 0.0087432861328125, 0.004558563232421875, 0.0001214742660522461, 0.0021724700927734375], "tokens": [2170, 1022, 275, 319, 17536, 805, 3134, 2078, 372, 442, 600, 629, 34177, 600, 3756, 415, 9973, 12984, 32, 275, 319, 5384, 319, 477, 753, 909, 35, 225, 322, 1932, 786, 275, 319, 477, 753, 909, 36, 225, 322, 3100, 786, 275, 319, 477, 601, 322, 537, 3380, 275, 319, 477, 5117]}
{"line_number": 145, "line_type": "original", "code": "        if (total / val2 != val1) {", "entropy": 0.634765625, "is_bug_line": false, "sus_score": 0.43731409311294556, "per_token_entropy": [2.126953125, 1.6552734375, 0.124267578125, 2.435546875, 0.70068359375, 0.020050048828125, 0.0294952392578125, 0.016021728515625, 0.00238037109375, 0.0010652542114257812, 0.40771484375, 0.09869384765625], "tokens": [351, 415, 308, 2999, 517, 909, 36, 863, 909, 35, 27, 301]}
{"line_number": 145, "line_type": "generated", "code": "\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 2.1\n     */\n    public static int safeMultiplyToInt(long val1, long val2) {\n        if (", "entropy": 0.1739501953125, "is_bug_line": false, "sus_score": 0.43731409311294556, "per_token_entropy": [0.576171875, 0.1295166015625, 0.00547027587890625, 0.035675048828125, 0.008544921875, 0.11785888671875, 0.015289306640625, 0.436279296875, 0.07342529296875, 0.0008883476257324219, 0.0303192138671875, 0.0015277862548828125, 9.417533874511719e-06, 0.0013647079467773438, 0.002384185791015625, 0.012176513671875, 0.0007367134094238281, 0.0004544258117675781, 0.0003135204315185547, 0.011383056640625, 0.00029277801513671875, 0.00024890899658203125, 0.049224853515625, 0.87158203125, 0.0067291259765625, 0.04949951171875, 0.0027008056640625, 1.6796875, 0.00260162353515625, 1.8427734375, 0.093017578125, 0.00852203369140625, 0.07159423828125, 0.016815185546875, 0.001667022705078125, 0.0301513671875, 0.033782958984375, 0.10467529296875, 0.00855255126953125, 0.001995086669921875, 1.1357421875, 0.0001894235610961914, 2.8014183044433594e-05, 6.985664367675781e-05, 0.2113037109375, 2.5987625122070312e-05, 2.7418136596679688e-06, 0.0006160736083984375, 0.01224517822265625, 0.09466552734375, 1.2119140625, 0.046661376953125], "tokens": [275, 319, 477, 601, 322, 537, 3380, 275, 319, 477, 5117, 47721, 984, 415, 322, 786, 438, 5133, 6524, 556, 5133, 5532, 275, 319, 477, 8119, 225, 36, 32, 35, 275, 569, 284, 562, 907, 629, 10061, 27732, 14150, 26, 3222, 909, 35, 30, 1946, 909, 36, 27, 301, 291, 415, 308]}
