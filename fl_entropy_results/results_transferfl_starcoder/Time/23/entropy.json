{"line_number": 314, "line_type": "original", "code": "            dtz = cProvider.getZone(convId);", "entropy": 1.6826171875, "is_bug_line": false, "sus_score": 0.5675358772277832, "per_token_entropy": [5.3984375, 8.1015625, 0.0498046875, 0.40576171875, 0.91748046875, 0.022613525390625, 0.0028553009033203125, 1.22265625, 0.0132904052734375, 0.0083160400390625, 5.68359375, 0.01454925537109375, 0.03240966796875], "tokens": [1468, 8793, 108, 280, 281, 2570, 32, 371, 6767, 26, 6081, 606, 293]}
{"line_number": 314, "line_type": "generated", "code": "\n        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\n        return zone;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the time zone for the specified time zone id.\n     * \n     * @param id  the", "entropy": 0.212890625, "is_bug_line": false, "sus_score": 0.5675358772277832, "per_token_entropy": [0.1842041015625, 0.63525390625, 0.0021343231201171875, 0.0005884170532226562, 2.2411346435546875e-05, 0.0008344650268554688, 0.0006427764892578125, 0.0003552436828613281, 0.012420654296875, 0.0007772445678710938, 0.007236480712890625, 0.00432586669921875, 6.198883056640625e-06, 0.009521484375, 0.0008168220520019531, 1.2159347534179688e-05, 0.0015726089477539062, 0.01259613037109375, 0.0285491943359375, 0.0254058837890625, 0.025115966796875, 0.00434112548828125, 0.0004036426544189453, 0.005889892578125, 0.00023257732391357422, 0.248779296875, 0.5234375, 0.054046630859375, 0.0194854736328125, 0.08624267578125, 0.006317138671875, 7.748603820800781e-05, 1.255859375, 0.440673828125, 2.19140625, 0.050689697265625, 1.2626953125, 0.59814453125, 0.61669921875, 1.05078125, 0.01517486572265625, 0.160888671875, 0.2130126953125, 0.06878662109375, 0.0004093647003173828, 1.04296875, 4.649162292480469e-05, 0.00685882568359375, 0.0185089111328125, 0.1265869140625, 0.0228729248046875, 0.023834228515625], "tokens": [291, 595, 8222, 3457, 2597, 32, 524, 26, 314, 30, 537, 28424, 3564, 46, 4852, 6767, 1563, 5634, 876, 291, 442, 10790, 45, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 7124, 322, 1133, 10790, 436, 322, 3191, 1133, 10790, 804, 32, 275, 319, 5384, 319, 477, 753, 804, 225, 322]}
{"line_number": 178, "line_type": "original", "code": "        if (zone == null) {", "entropy": 1.5107421875, "is_bug_line": false, "sus_score": 0.5615068674087524, "per_token_entropy": [4.30078125, 2.947265625, 0.08453369140625, 4.05859375, 0.5400390625, 0.0087738037109375, 0.040069580078125, 0.10455322265625], "tokens": [351, 415, 308, 5634, 610, 744, 27, 301]}
{"line_number": 178, "line_type": "generated", "code": "\n     * <p>\n     * The returned time zone is backed by a {@link java.util.SimpleTimeZone}.\n     * \n     * @param offset  the offset to UTC in hours\n     * @return the DateTimeZone object for the offset\n     */\n   ", "entropy": 0.34033203125, "is_bug_line": false, "sus_score": 0.5615068674087524, "per_token_entropy": [0.51904296875, 0.043365478515625, 1.0078125, 0.003948211669921875, 0.0010623931884765625, 0.0372314453125, 0.0001932382583618164, 0.892578125, 2.025390625, 0.38232421875, 0.005138397216796875, 0.6298828125, 2.30859375, 0.007404327392578125, 0.373779296875, 0.78857421875, 0.537109375, 0.99169921875, 4.887580871582031e-05, 0.0008540153503417969, 9.548664093017578e-05, 0.25537109375, 4.887580871582031e-05, 1.099609375, 0.05279541015625, 0.0013580322265625, 0.447509765625, 4.374980926513672e-05, 0.003208160400390625, 0.00980377197265625, 0.69091796875, 0.38525390625, 0.045623779296875, 0.378662109375, 0.4853515625, 0.055450439453125, 0.2237548828125, 0.047882080078125, 0.47119140625, 0.0019025802612304688, 0.0011196136474609375, 0.06768798828125, 0.07086181640625, 0.21044921875, 0.00016820430755615234, 0.05242919921875, 0.2310791015625, 0.0206451416015625, 0.310546875, 0.08160400390625, 1.4296875, 0.010955810546875], "tokens": [275, 319, 333, 98, 48, 275, 319, 886, 4717, 1133, 10790, 438, 43266, 810, 312, 3088, 1204, 1383, 32, 1040, 32, 5291, 26223, 4009, 275, 319, 5384, 319, 477, 753, 3401, 225, 322, 3401, 372, 17197, 328, 11632, 275, 319, 477, 601, 322, 6666, 6767, 1300, 436, 322, 3401, 275, 569, 284]}
{"line_number": 175, "line_type": "original", "code": "        if (sm != null) {", "entropy": 1.201171875, "is_bug_line": false, "sus_score": 0.5511073470115662, "per_token_entropy": [4.57421875, 1.3056640625, 0.055419921875, 3.4453125, 0.2071533203125, 0.000606536865234375, 0.01226043701171875, 0.00890350341796875], "tokens": [351, 415, 308, 1745, 863, 744, 27, 301]}
{"line_number": 175, "line_type": "generated", "code": "\n\n    /**\n     * Gets a time zone instance for the specified time zone.\n     * <p>\n     * If the time zone has an ID, it is preferred to use {@link #forID(String)}.\n     * \n     * @param zone  the", "entropy": 0.368408203125, "is_bug_line": false, "sus_score": 0.5511073470115662, "per_token_entropy": [0.87939453125, 0.935546875, 0.01678466796875, 6.592273712158203e-05, 0.99658203125, 0.264404296875, 0.19384765625, 0.00345611572265625, 0.12646484375, 0.1934814453125, 0.0838623046875, 0.08636474609375, 1.0146484375, 0.00736236572265625, 0.7880859375, 0.01092529296875, 2.6702880859375e-05, 0.4384765625, 0.0004222393035888672, 0.00034880638122558594, 0.0009317398071289062, 4.184246063232422e-05, 1.7734375, 0.39013671875, 0.93017578125, 0.00907135009765625, 2.08203125, 0.73828125, 0.299072265625, 0.70703125, 0.8310546875, 0.7958984375, 1.92578125, 0.340576171875, 0.086181640625, 0.272216796875, 0.0173187255859375, 0.0161590576171875, 0.001552581787109375, 0.0035877227783203125, 0.71728515625, 0.0038318634033203125, 0.31201171875, 0.00799560546875, 0.0002541542053222656, 0.583984375, 1.0251998901367188e-05, 0.002750396728515625, 0.00384521484375, 0.194580078125, 0.0225067138671875, 0.04315185546875], "tokens": [446, 1022, 275, 319, 7124, 312, 1133, 10790, 1980, 436, 322, 3191, 1133, 10790, 32, 275, 319, 333, 98, 48, 275, 319, 1670, 322, 1133, 10790, 1401, 600, 2484, 30, 561, 438, 16312, 372, 793, 3088, 1204, 588, 979, 779, 26, 652, 31842, 275, 319, 5384, 319, 477, 753, 10790, 225, 322]}
{"line_number": 597, "line_type": "original", "code": "        return map.get(id);", "entropy": 3.1796875, "is_bug_line": false, "sus_score": 0.5105258822441101, "per_token_entropy": [3.115234375, 3.568359375, 13.390625, 1.568359375, 0.63916015625, 0.053955078125, 3.0234375, 0.07403564453125], "tokens": [351, 442, 1992, 32, 371, 26, 314, 293]}
{"line_number": 597, "line_type": "generated", "code": "\n        } else {\n            buf.append(':');\n            FormatUtils.appendPaddedInteger(buf, offset / 1000, 2);\n        }", "entropy": 0.100830078125, "is_bug_line": false, "sus_score": 0.5105258822441101, "per_token_entropy": [0.78759765625, 0.0163726806640625, 0.4365234375, 0.1212158203125, 0.1048583984375, 0.238525390625, 9.894371032714844e-05, 0.0006561279296875, 0.069580078125, 0.0011892318725585938, 0.047210693359375, 0.326171875, 2.765655517578125e-05, 0.00017559528350830078, 0.0167388916015625, 0.014801025390625, 5.841255187988281e-06, 0.002826690673828125, 0.0011701583862304688, 0.0016374588012695312, 9.1552734375e-05, 0.046539306640625, 0.30810546875, 0.29736328125, 0.01258087158203125, 0.00028204917907714844, 0.005268096923828125, 0.0157928466796875, 0.0130462646484375, 0.0010671615600585938, 0.24365234375, 0.00646209716796875, 0.28955078125, 0.0012302398681640625], "tokens": [291, 320, 813, 301, 324, 4845, 32, 1689, 16487, 895, 324, 10276, 2755, 32, 1689, 66, 11043, 3061, 26, 1954, 30, 3401, 517, 225, 35, 34, 34, 34, 30, 225, 36, 293, 291, 320]}
{"line_number": 306, "line_type": "original", "code": "        if (id.equals(\"UTC\")) {", "entropy": 1.119140625, "is_bug_line": false, "sus_score": 0.5105071663856506, "per_token_entropy": [3.048828125, 2.18359375, 0.07275390625, 2.01171875, 0.73876953125, 0.72607421875, 0.509765625, 1.7060546875, 0.10784912109375, 0.09295654296875], "tokens": [351, 415, 308, 314, 32, 3574, 440, 15689, 2131, 301]}
{"line_number": 306, "line_type": "generated", "code": "\n        return zone;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the time zone for a specific ID, creating it if it doesn't yet exist.\n     * <p>\n     * This method is thread-safe and ensures only one instance is created for", "entropy": 0.5146484375, "is_bug_line": false, "sus_score": 0.5105071663856506, "per_token_entropy": [0.61083984375, 0.79052734375, 0.65478515625, 0.01172637939453125, 0.02520751953125, 0.0008263587951660156, 0.234130859375, 0.685546875, 0.05389404296875, 0.015594482421875, 0.07373046875, 0.00447845458984375, 7.164478302001953e-05, 1.1728515625, 0.466552734375, 2.05078125, 0.049957275390625, 1.310546875, 1.58203125, 1.140625, 0.425537109375, 1.2841796875, 1.6650390625, 0.05157470703125, 0.1376953125, 0.93212890625, 0.483154296875, 5.6624412536621094e-05, 1.830078125, 0.21435546875, 0.0237274169921875, 0.005218505859375, 0.0006470680236816406, 0.814453125, 0.0035114288330078125, 0.0016021728515625, 0.001522064208984375, 0.0001119375228881836, 0.77734375, 0.0183258056640625, 1.4150390625, 0.241455078125, 0.0276947021484375, 0.00048613548278808594, 1.3935546875, 1.37109375, 0.302734375, 0.06524658203125, 0.34814453125, 1.099609375, 0.052490234375, 0.82958984375], "tokens": [291, 442, 10790, 45, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 7124, 322, 1133, 10790, 436, 312, 2818, 2484, 30, 6892, 561, 415, 561, 4163, 1330, 6305, 2307, 32, 275, 319, 333, 98, 48, 275, 319, 1348, 1411, 438, 3664, 31, 4770, 461, 26091, 1755, 1591, 1980, 438, 3272, 436]}
{"line_number": 312, "line_type": "original", "code": "        String convId = getConvertedId(id);", "entropy": 1.90625, "is_bug_line": false, "sus_score": 0.5078712701797485, "per_token_entropy": [2.572265625, 9.8046875, 1.978515625, 0.0189056396484375, 0.0484619140625, 3.619140625, 2.15625, 0.48193359375, 0.039306640625, 0.082275390625, 0.1729736328125], "tokens": [351, 892, 11492, 606, 280, 622, 48690, 606, 26, 314, 293]}
{"line_number": 312, "line_type": "generated", "code": "\n        }\n        zone = new FixedDateTimeZone(id, offset);\n        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\n        return zone;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the zone for a given", "entropy": 0.235595703125, "is_bug_line": false, "sus_score": 0.5078712701797485, "per_token_entropy": [0.260009765625, 0.040863037109375, 0.580078125, 0.34521484375, 0.0011968612670898438, 0.24267578125, 0.1783447265625, 0.71044921875, 7.748603820800781e-06, 0.004276275634765625, 0.004787445068359375, 0.0046234130859375, 0.125732421875, 0.1534423828125, 0.07537841796875, 0.312255859375, 0.001598358154296875, 0.002498626708984375, 1.430511474609375e-05, 0.000896453857421875, 0.0003554821014404297, 0.00025081634521484375, 0.006511688232421875, 0.0010251998901367188, 0.005176544189453125, 0.00293731689453125, 7.3909759521484375e-06, 0.00815582275390625, 0.0008473396301269531, 3.230571746826172e-05, 0.0017032623291015625, 0.0016918182373046875, 0.029541015625, 0.0806884765625, 0.070556640625, 0.0020198822021484375, 0.0002856254577636719, 0.0726318359375, 0.001758575439453125, 0.3125, 0.5478515625, 0.053497314453125, 0.020843505859375, 0.08929443359375, 0.007640838623046875, 7.87973403930664e-05, 1.3349609375, 0.58349609375, 1.45703125, 1.9140625, 1.1650390625, 1.43359375], "tokens": [291, 320, 291, 10790, 280, 537, 10123, 4852, 6767, 26, 314, 30, 3401, 293, 291, 595, 8222, 3457, 2597, 32, 524, 26, 314, 30, 537, 28424, 3564, 46, 4852, 6767, 1563, 5634, 876, 291, 442, 10790, 45, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 7124, 322, 10790, 436, 312, 2702]}
{"line_number": 305, "line_type": "original", "code": "        final String id = zone.getID();", "entropy": 1.970703125, "is_bug_line": false, "sus_score": 0.4992140531539917, "per_token_entropy": [2.103515625, 5.28125, 2.501953125, 1.9228515625, 0.71875, 3.9140625, 1.212890625, 0.028167724609375, 0.046966552734375], "tokens": [351, 1158, 892, 804, 280, 10790, 32, 37575, 473]}
{"line_number": 305, "line_type": "generated", "code": "\n        SoftReference<DateTimeZone> ref = iFixedOffsetCache.get(id);\n        DateTimeZone zone = (ref == null? null : ref.get());\n        if (zone == null) {\n            zone = new FixedDateTimeZone(id,", "entropy": 0.0775146484375, "is_bug_line": false, "sus_score": 0.4992140531539917, "per_token_entropy": [0.3056640625, 0.5068359375, 7.987022399902344e-06, 0.02923583984375, 0.00037026405334472656, 3.2186508178710938e-06, 0.0002033710479736328, 0.195068359375, 0.006687164306640625, 0.016937255859375, 0.00023543834686279297, 1.1324882507324219e-05, 9.703636169433594e-05, 0.0001850128173828125, 0.003536224365234375, 0.0031986236572265625, 0.0210418701171875, 0.002811431884765625, 0.0247344970703125, 0.05291748046875, 1.823902130126953e-05, 0.69189453125, 0.0555419921875, 0.5751953125, 0.018585205078125, 0.261474609375, 0.00033402442932128906, 0.06573486328125, 0.0025424957275390625, 0.001674652099609375, 0.004169464111328125, 0.0006756782531738281, 1.7404556274414062e-05, 0.0007643699645996094, 0.0401611328125, 0.0027637481689453125, 0.00287628173828125, 0.002849578857421875, 0.11309814453125, 0.00045418739318847656, 0.0247955322265625, 0.0013933181762695312, 0.06280517578125, 0.093017578125, 0.0002636909484863281, 0.08245849609375, 0.1082763671875, 0.638671875, 7.987022399902344e-06, 0.0024261474609375, 0.0045318603515625, 0.0035839080810546875], "tokens": [291, 28424, 3564, 46, 4852, 6767, 48, 2488, 280, 595, 8222, 3457, 2597, 32, 371, 26, 314, 293, 291, 6666, 6767, 10790, 280, 308, 612, 610, 744, 1018, 744, 499, 2488, 32, 371, 1035, 291, 415, 308, 5634, 610, 744, 27, 301, 324, 10790, 280, 537, 10123, 4852, 6767, 26, 314, 30]}
{"line_number": 212, "line_type": "original", "code": "            return zone;", "entropy": 4.125, "is_bug_line": false, "sus_score": 0.49822378158569336, "per_token_entropy": [5.87109375, 2.15234375, 6.26171875, 2.216796875], "tokens": [1468, 442, 10790, 45]}
{"line_number": 212, "line_type": "generated", "code": "\n        } catch (IllegalArgumentException ex) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        if (offset == 0) {\n            return DateTimeZone.UTC;\n        }\n        String id = printOffset(offset);", "entropy": 0.203369140625, "is_bug_line": false, "sus_score": 0.49822378158569336, "per_token_entropy": [0.27587890625, 0.0023975372314453125, 0.1041259765625, 0.0059051513671875, 0.419677734375, 0.19580078125, 0.006221771240234375, 0.001529693603515625, 0.041351318359375, 0.1138916015625, 0.2137451171875, 0.0017805099487304688, 0.2216796875, 1.1005859375, 0.142578125, 0.0017185211181640625, 0.0030078887939453125, 0.015777587890625, 0.00858306884765625, 0.0005564689636230469, 0.008880615234375, 0.00012409687042236328, 0.8955078125, 0.013580322265625, 0.0004100799560546875, 0.040679931640625, 2.091796875, 0.0367431640625, 0.197265625, 0.10009765625, 0.02581787109375, 0.00069427490234375, 1.166015625, 0.00024962425231933594, 0.00614166259765625, 0.079345703125, 0.138671875, 1.3947486877441406e-05, 2.753734588623047e-05, 0.0004622936248779297, 0.00041174888610839844, 0.00452423095703125, 0.00025773048400878906, 1.2978515625, 1.279296875, 0.234130859375, 0.01233673095703125, 0.045989990234375, 0.0005373954772949219, 0.009124755859375, 0.00803375244140625, 0.005161285400390625], "tokens": [291, 320, 2368, 308, 25907, 538, 27, 301, 324, 1422, 537, 12137, 440, 14896, 963, 432, 2155, 44, 313, 474, 11632, 3457, 293, 291, 320, 291, 415, 308, 2881, 610, 225, 34, 27, 301, 324, 442, 6666, 6767, 32, 15689, 45, 291, 320, 291, 892, 804, 280, 1459, 3457, 26, 2881, 293]}
{"line_number": 313, "line_type": "original", "code": "        if (convId != null) {", "entropy": 1.666015625, "is_bug_line": false, "sus_score": 0.4930041432380676, "per_token_entropy": [2.9609375, 2.720703125, 0.05474853515625, 6.98828125, 0.043975830078125, 1.8427734375, 0.21728515625, 0.1300048828125, 0.030059814453125], "tokens": [351, 415, 308, 6081, 606, 863, 744, 27, 301]}
{"line_number": 313, "line_type": "generated", "code": "\n        zone = new FixedOffsetZone(id, offset);\n        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\n        return zone;\n    }", "entropy": 0.10601806640625, "is_bug_line": false, "sus_score": 0.4930041432380676, "per_token_entropy": [0.537109375, 0.402587890625, 0.001728057861328125, 0.233642578125, 0.378173828125, 0.61376953125, 0.418701171875, 0.00897979736328125, 0.01116943359375, 0.01224517822265625, 0.06842041015625, 0.1888427734375, 0.469482421875, 0.2056884765625, 0.0016412734985351562, 0.0021495819091796875, 3.24249267578125e-05, 0.0009832382202148438, 0.0004379749298095703, 0.0003323554992675781, 0.0111083984375, 0.0007266998291015625, 0.0056915283203125, 0.004009246826171875, 6.794929504394531e-06, 0.007335662841796875, 0.0007929801940917969, 1.8835067749023438e-05, 0.0015935897827148438, 0.0023670196533203125, 0.03948974609375, 0.09783935546875, 0.049072265625, 0.004398345947265625, 0.0019083023071289062, 0.1365966796875, 0.0030059814453125], "tokens": [291, 10790, 280, 537, 10123, 3457, 6767, 26, 314, 30, 3401, 293, 291, 595, 8222, 3457, 2597, 32, 524, 26, 314, 30, 537, 28424, 3564, 46, 4852, 6767, 1563, 5634, 876, 291, 442, 10790, 45, 284, 320]}
{"line_number": 302, "line_type": "original", "code": "        if (zone == null) {", "entropy": 1.173828125, "is_bug_line": false, "sus_score": 0.49216532707214355, "per_token_entropy": [3.123046875, 2.2265625, 0.09576416015625, 3.24609375, 0.56201171875, 0.0203094482421875, 0.0150299072265625, 0.1041259765625], "tokens": [351, 415, 308, 5634, 610, 744, 27, 301]}
{"line_number": 302, "line_type": "generated", "code": "\n        return new FixedDateTimeZone(id, offset);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Parses a string to a fixed offset.\n     * \n     * @param str  the string to parse, not null\n     * @return the offset in millis\n    ", "entropy": 0.34765625, "is_bug_line": false, "sus_score": 0.49216532707214355, "per_token_entropy": [0.65625, 0.77294921875, 0.83837890625, 0.5751953125, 0.6982421875, 2.2292137145996094e-05, 0.007038116455078125, 0.02374267578125, 0.0269317626953125, 0.2244873046875, 0.311279296875, 0.0496826171875, 0.0013370513916015625, 0.2685546875, 0.5888671875, 0.038543701171875, 0.0222320556640625, 0.08404541015625, 0.005126953125, 0.00011909008026123047, 1.251953125, 0.94287109375, 1.37890625, 0.421630859375, 1.080078125, 1.50390625, 0.05169677734375, 0.740234375, 0.09747314453125, 0.0015659332275390625, 0.449951171875, 6.687641143798828e-05, 0.003185272216796875, 0.006694793701171875, 0.576171875, 0.06964111328125, 0.0263214111328125, 0.319091796875, 0.343505859375, 0.002777099609375, 1.4990234375, 0.6513671875, 0.0022068023681640625, 0.06781005859375, 0.0002453327178955078, 0.00011408329010009766, 0.017913818359375, 0.024169921875, 0.448974609375, 0.2159423828125, 0.451171875, 0.245361328125], "tokens": [291, 442, 537, 10123, 4852, 6767, 26, 314, 30, 3401, 293, 284, 320, 446, 434, 42510, 284, 1022, 275, 319, 44280, 312, 802, 372, 312, 5253, 3401, 32, 275, 319, 5384, 319, 477, 753, 596, 225, 322, 802, 372, 3185, 30, 646, 744, 275, 319, 477, 601, 322, 3401, 328, 42302, 275]}
{"line_number": 316, "line_type": "original", "code": "        if (dtz == null) {", "entropy": 1.1748046875, "is_bug_line": false, "sus_score": 0.490617573261261, "per_token_entropy": [3.130859375, 2.154296875, 0.0439453125, 4.34765625, 0.033782958984375, 0.77490234375, 0.00972747802734375, 0.055908203125, 0.01611328125], "tokens": [351, 415, 308, 2632, 108, 610, 744, 27, 301]}
{"line_number": 316, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Gets the zone using a fixed offset amount.\n     * \n     * @param id  the zone id\n     * @param offset  the offset in millis\n     * @param dstSavings  the amount of time to add to offset", "entropy": 0.25634765625, "is_bug_line": false, "sus_score": 0.490617573261261, "per_token_entropy": [0.56884765625, 0.44384765625, 0.342529296875, 0.79443359375, 0.0173492431640625, 0.00012481212615966797, 1.0576171875, 0.373291015625, 0.98193359375, 0.43212890625, 0.6826171875, 0.07293701171875, 0.126953125, 0.10382080078125, 0.179931640625, 0.035369873046875, 0.0001614093780517578, 0.1463623046875, 0.00012874603271484375, 0.00125885009765625, 0.0055999755859375, 0.31005859375, 0.00450897216796875, 0.0013227462768554688, 0.00769805908203125, 0.00238037109375, 0.08514404296875, 0.00014150142669677734, 0.0002512931823730469, 0.0286102294921875, 0.60107421875, 0.25341796875, 0.0032138824462890625, 0.038818359375, 0.2264404296875, 0.041229248046875, 0.128662109375, 0.0006246566772460938, 0.000415802001953125, 0.3310546875, 0.60693359375, 0.01099395751953125, 0.00010097026824951172, 0.03582763671875, 0.046417236328125, 0.34619140625, 0.102294921875, 0.97216796875, 0.42626953125, 0.294677734375, 0.1651611328125, 1.88671875], "tokens": [284, 320, 446, 1022, 275, 319, 7124, 322, 10790, 1471, 312, 5253, 3401, 5168, 32, 275, 319, 5384, 319, 477, 753, 804, 225, 322, 10790, 804, 275, 319, 477, 753, 3401, 225, 322, 3401, 328, 42302, 275, 319, 477, 753, 7112, 69, 31156, 225, 322, 5168, 432, 1133, 372, 1015, 372, 3401]}
{"line_number": 319, "line_type": "original", "code": "        if (dtz != null) {", "entropy": 1.318359375, "is_bug_line": false, "sus_score": 0.4905659258365631, "per_token_entropy": [3.380859375, 2.287109375, 0.0830078125, 4.08984375, 0.222412109375, 1.6142578125, 0.057861328125, 0.1134033203125, 0.0179901123046875], "tokens": [351, 415, 308, 2632, 108, 863, 744, 27, 301]}
{"line_number": 319, "line_type": "generated", "code": "\n    /**\n     * Gets the zone using a fixed offset amount.\n     * \n     * @param id  the zone id\n     * @param offset  the offset in millis\n     * @param dstSavings  the amount of savings from daylight savings", "entropy": 0.267333984375, "is_bug_line": false, "sus_score": 0.4905659258365631, "per_token_entropy": [1.39453125, 1.0849609375, 0.0989990234375, 0.0003838539123535156, 1.0087890625, 0.39306640625, 1.0771484375, 0.443359375, 0.63232421875, 0.0687255859375, 0.1041259765625, 0.0953369140625, 0.12237548828125, 0.1048583984375, 0.00170135498046875, 0.1767578125, 0.0001443624496459961, 0.0022735595703125, 0.0194549560546875, 0.24951171875, 0.00485992431640625, 0.0011491775512695312, 0.00875091552734375, 0.0024662017822265625, 0.0804443359375, 0.0008864402770996094, 0.0010957717895507812, 0.040191650390625, 0.798828125, 0.318359375, 0.0037479400634765625, 0.07232666015625, 0.290771484375, 0.04339599609375, 0.1422119140625, 0.001750946044921875, 0.0009026527404785156, 0.487060546875, 0.609375, 0.0150146484375, 0.0001289844512939453, 0.031890869140625, 0.0531005859375, 0.315673828125, 0.1124267578125, 1.0703125, 0.0001423358917236328, 0.736328125, 0.7021484375, 0.0002570152282714844, 0.880859375, 5.245208740234375e-06], "tokens": [284, 1022, 275, 319, 7124, 322, 10790, 1471, 312, 5253, 3401, 5168, 32, 275, 319, 5384, 319, 477, 753, 804, 225, 322, 10790, 804, 275, 319, 477, 753, 3401, 225, 322, 3401, 328, 42302, 275, 319, 477, 753, 7112, 69, 31156, 225, 322, 5168, 432, 309, 31156, 645, 5808, 2429, 309, 31156]}
{"line_number": 560, "line_type": "original", "code": "        if (map == null) {", "entropy": 2.724609375, "is_bug_line": false, "sus_score": 0.4905245304107666, "per_token_entropy": [2.927734375, 9.4140625, 0.123046875, 7.484375, 1.7626953125, 0.042694091796875, 0.0206298828125, 0.0236358642578125], "tokens": [351, 415, 308, 1110, 610, 744, 27, 301]}
{"line_number": 560, "line_type": "generated", "code": "\n        };\n        return OffsetDateTime.parse(str, chrono).getOffset().getSeconds();\n    }", "entropy": 0.305419921875, "is_bug_line": false, "sus_score": 0.4905245304107666, "per_token_entropy": [0.4765625, 0.035736083984375, 0.399169921875, 0.72900390625, 1.1591796875, 1.1044921875, 0.422119140625, 0.00341033935546875, 0.03704833984375, 0.0108795166015625, 0.08856201171875, 0.334716796875, 0.1138916015625, 0.0020351409912109375, 0.0020751953125, 0.1998291015625, 0.47509765625, 0.43408203125, 0.2127685546875, 0.1707763671875, 0.004306793212890625], "tokens": [291, 1472, 291, 442, 12073, 4852, 32, 2208, 26, 466, 30, 45868, 547, 371, 3457, 922, 371, 9023, 473, 284, 320]}
{"line_number": 320, "line_type": "original", "code": "            return dtz;", "entropy": 4.1640625, "is_bug_line": false, "sus_score": 0.4838947653770447, "per_token_entropy": [5.9765625, 0.8017578125, 9.4453125, 0.174072265625, 4.4296875], "tokens": [1468, 442, 8793, 108, 45]}
{"line_number": 320, "line_type": "generated", "code": "\n     * <p>\n     * The IDs returned by this method are those that are recognised by\n     * DateTimeZone.\n     *\n     * @return the unmodifiable set of zone ids (cloned and not modifiable)\n     */\n    public static Set<", "entropy": 0.61474609375, "is_bug_line": false, "sus_score": 0.4838947653770447, "per_token_entropy": [0.91748046875, 0.152099609375, 0.90966796875, 0.0135040283203125, 0.0023212432861328125, 0.0269012451171875, 0.00046563148498535156, 1.2900390625, 1.7041015625, 0.986328125, 0.95751953125, 0.00615692138671875, 0.00789642333984375, 2.296875, 2.091796875, 0.72412109375, 1.0, 0.395751953125, 0.0004839897155761719, 0.0487060546875, 1.1787109375, 0.00013494491577148438, 2.232421875, 0.05810546875, 0.2239990234375, 1.375, 0.035369873046875, 1.4755859375, 0.00018656253814697266, 0.005725860595703125, 0.037109375, 0.496826171875, 0.775390625, 0.07635498046875, 0.335205078125, 0.001949310302734375, 0.72216796875, 0.3857421875, 1.9697265625, 1.9873046875, 0.98681640625, 1.35546875, 1.48046875, 1.3113021850585938e-05, 0.53662109375, 0.013427734375, 0.1163330078125, 0.0207366943359375, 0.08905029296875, 0.01227569580078125, 0.428955078125, 0.02606201171875], "tokens": [275, 319, 333, 98, 48, 275, 319, 886, 15342, 4717, 810, 458, 1411, 884, 5521, 688, 884, 37768, 8593, 810, 275, 319, 6666, 6767, 32, 275, 319, 275, 319, 477, 601, 322, 707, 30411, 739, 432, 10790, 9668, 308, 28438, 461, 646, 2047, 15621, 27, 275, 569, 284, 562, 907, 1756, 46]}
{"line_number": 182, "line_type": "original", "code": "            cDefault = zone;", "entropy": 4.38671875, "is_bug_line": false, "sus_score": 0.46777254343032837, "per_token_entropy": [8.28125, 8.796875, 4.76953125, 0.6572265625, 3.275390625, 0.53271484375], "tokens": [1468, 281, 2044, 280, 10790, 45]}
{"line_number": 182, "line_type": "generated", "code": "\n     * \n     * @param hours  the hours offset from UTC\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if the offset is too large, too small or not an integer\n     */\n    public static DateTimeZone forOffsetHours", "entropy": 0.3671875, "is_bug_line": false, "sus_score": 0.46777254343032837, "per_token_entropy": [0.305908203125, 0.09234619140625, 0.8076171875, 0.0001857280731201172, 0.0180816650390625, 0.01026153564453125, 0.50537109375, 0.80859375, 0.08404541015625, 2.470703125, 2.09765625, 0.2861328125, 0.03216552734375, 0.56298828125, 0.0014820098876953125, 0.0009765625, 0.1302490234375, 0.06964111328125, 0.279296875, 0.00031113624572753906, 0.06640625, 0.29736328125, 0.02227783203125, 0.61767578125, 0.141357421875, 0.266357421875, 0.0009708404541015625, 0.01216888427734375, 0.018096923828125, 0.0030231475830078125, 0.036407470703125, 0.479248046875, 0.1031494140625, 0.908203125, 0.6640625, 2.1015625, 1.59765625, 0.016357421875, 0.125732421875, 1.236328125, 0.951171875, 0.55517578125, 0.07525634765625, 0.157958984375, 0.01181793212890625, 0.05853271484375, 0.00021791458129882812, 0.006084442138671875, 1.7881393432617188e-06, 0.0019702911376953125, 0.0008440017700195312, 0.00019478797912597656], "tokens": [275, 319, 5384, 319, 477, 753, 11632, 225, 322, 11632, 3401, 645, 17197, 275, 319, 477, 601, 322, 6666, 6767, 1300, 436, 322, 3401, 275, 319, 477, 5117, 12137, 415, 322, 3401, 438, 5133, 7622, 30, 5133, 5532, 556, 646, 600, 4991, 275, 569, 284, 562, 907, 6666, 6767, 436, 3457, 14896]}
{"line_number": 149, "line_type": "original", "code": "                            temp = forTimeZone(TimeZone.getDefault());", "entropy": 2.712890625, "is_bug_line": false, "sus_score": 0.46512335538864136, "per_token_entropy": [9.2265625, 8.1796875, 0.12890625, 0.95458984375, 4.44921875, 0.416259765625, 3.013671875, 0.00875091552734375, 0.69873046875, 0.04693603515625], "tokens": [9316, 1779, 280, 436, 26223, 26, 26223, 32, 13737, 1035]}
{"line_number": 149, "line_type": "generated", "code": "\n     * @return the datetime zone\n     * @throws IllegalArgumentException if the id is invalid\n     */\n    public static DateTimeZone forID(String id) {\n        if (id == null) {\n            return getDefault();\n        }\n        if (id.equals(\"", "entropy": 0.1612548828125, "is_bug_line": false, "sus_score": 0.46512335538864136, "per_token_entropy": [0.322265625, 0.031982421875, 0.007122039794921875, 0.032257080078125, 0.17626953125, 0.07342529296875, 0.0038013458251953125, 1.046875, 0.07666015625, 0.0009140968322753906, 0.0189361572265625, 0.0223541259765625, 0.0065155029296875, 0.047821044921875, 1.0888671875, 0.08331298828125, 0.93115234375, 0.3076171875, 0.301025390625, 0.01158905029296875, 0.03814697265625, 0.0003845691680908203, 0.01202392578125, 2.2649765014648438e-06, 0.00027441978454589844, 0.0015544891357421875, 0.0008153915405273438, 0.00453948974609375, 0.0009083747863769531, 0.0010395050048828125, 0.00958251953125, 0.1365966796875, 0.67431640625, 0.03204345703125, 0.01065826416015625, 0.034637451171875, 0.004215240478515625, 0.038482666015625, 0.0015401840209960938, 0.023773193359375, 0.227294921875, 0.0210418701171875, 0.0001442432403564453, 0.0258331298828125, 6.592273712158203e-05, 0.376708984375, 0.95361328125, 0.1856689453125, 0.03936767578125, 0.041839599609375, 0.86767578125, 0.023651123046875], "tokens": [275, 319, 477, 601, 322, 7138, 10790, 275, 319, 477, 5117, 12137, 415, 322, 804, 438, 5535, 275, 569, 284, 562, 907, 6666, 6767, 436, 779, 26, 652, 804, 27, 301, 291, 415, 308, 314, 610, 744, 27, 301, 324, 442, 23937, 473, 291, 320, 291, 415, 308, 314, 32, 3574, 440]}
{"line_number": 317, "line_type": "original", "code": "            dtz = cProvider.getZone(id);", "entropy": 1.306640625, "is_bug_line": false, "sus_score": 0.4575031101703644, "per_token_entropy": [7.48828125, 6.453125, 0.0090789794921875, 0.1044921875, 0.88330078125, 0.01480865478515625, 0.006275177001953125, 0.00890350341796875, 0.005313873291015625, 0.01654052734375, 0.658203125, 0.02777099609375], "tokens": [1468, 8793, 108, 280, 281, 2570, 32, 371, 6767, 26, 314, 293]}
{"line_number": 317, "line_type": "generated", "code": "\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the standard time offset for this zone.\n     * \n     * @return the offset from UTC/GMT in millis\n     */\n    public abstract int getOffset(long instant);\n\n    /**\n     * Gets the standard time offset for", "entropy": 0.3955078125, "is_bug_line": false, "sus_score": 0.4575031101703644, "per_token_entropy": [1.07421875, 0.66650390625, 0.0229644775390625, 0.02325439453125, 0.1207275390625, 0.01258087158203125, 0.0001513957977294922, 1.25, 0.443603515625, 3.171875, 0.98876953125, 1.029296875, 0.76220703125, 1.0341796875, 1.0751953125, 0.2105712890625, 0.10003662109375, 0.006938934326171875, 0.5078125, 4.601478576660156e-05, 0.0030193328857421875, 0.292724609375, 0.253662109375, 0.7626953125, 0.32958984375, 0.04571533203125, 0.6259765625, 0.061859130859375, 0.5068359375, 1.578125, 0.148681640625, 0.0307159423828125, 0.0113372802734375, 0.1273193359375, 0.58544921875, 0.137939453125, 0.0010919570922851562, 0.0269012451171875, 0.0254669189453125, 0.93994140625, 0.046661376953125, 0.08782958984375, 0.07391357421875, 0.16650390625, 0.00148773193359375, 5.733966827392578e-05, 0.3125, 0.025177001953125, 0.7578125, 0.050018310546875, 0.00914764404296875, 0.03936767578125], "tokens": [284, 434, 42510, 284, 1022, 275, 319, 7124, 322, 6216, 1133, 3401, 436, 458, 10790, 32, 275, 319, 5384, 319, 477, 601, 322, 3401, 645, 17197, 33, 31331, 328, 42302, 275, 569, 284, 562, 5547, 629, 622, 3457, 26, 3222, 23564, 293, 446, 1022, 275, 319, 7124, 322, 6216, 1133, 3401, 436]}
{"line_number": 134, "line_type": "original", "code": "        if (zone == null) {", "entropy": 1.30078125, "is_bug_line": false, "sus_score": 0.4511221647262573, "per_token_entropy": [4.953125, 2.388671875, 0.06890869140625, 0.802734375, 0.89794921875, 1.234375, 0.040069580078125, 0.0170745849609375], "tokens": [351, 415, 308, 5634, 610, 744, 27, 301]}
{"line_number": 134, "line_type": "generated", "code": "\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets a time zone by ID, such as {@code \"Europe/London\"}.\n     * <p>\n     * This method will first check the cache and if the zone is not found\n     * in the", "entropy": 0.47314453125, "is_bug_line": false, "sus_score": 0.4511221647262573, "per_token_entropy": [0.156494140625, 0.209716796875, 0.367431640625, 0.312255859375, 0.0114288330078125, 0.019256591796875, 0.024688720703125, 0.00553131103515625, 4.684925079345703e-05, 0.72412109375, 1.2939453125, 0.55419921875, 0.01120758056640625, 1.869140625, 0.256103515625, 0.344970703125, 1.2587890625, 5.054473876953125e-05, 1.33203125, 0.01447296142578125, 0.144287109375, 0.1314697265625, 4.76837158203125e-06, 0.418701171875, 2.7179718017578125e-05, 0.047393798828125, 0.03607177734375, 0.007564544677734375, 6.520748138427734e-05, 0.0694580078125, 0.0005922317504882812, 0.0003266334533691406, 0.0006084442138671875, 2.5987625122070312e-05, 0.61962890625, 0.0299530029296875, 2.61328125, 0.84375, 0.72314453125, 1.1591796875, 1.15625, 0.6171875, 0.63623046875, 0.049957275390625, 1.4765625, 0.45263671875, 0.299560546875, 0.59375, 1.9765625, 2.396106719970703e-05, 1.70703125, 0.0261688232421875], "tokens": [284, 320, 446, 434, 42510, 284, 1022, 275, 319, 7124, 312, 1133, 10790, 810, 2484, 30, 3751, 619, 3088, 687, 313, 31560, 33, 62, 24962, 3612, 32, 275, 319, 333, 98, 48, 275, 319, 1348, 1411, 1098, 1932, 1505, 322, 3320, 461, 415, 322, 10790, 438, 646, 2431, 275, 319, 328, 322]}
{"line_number": 562, "line_type": "original", "code": "            map = new HashMap<String, String>();", "entropy": 1.958984375, "is_bug_line": true, "sus_score": 0.45030152797698975, "per_token_entropy": [4.22265625, 8.4609375, 4.1953125, 1.9853515625, 0.054107666015625, 0.1568603515625, 0.05126953125, 0.00614166259765625, 0.240966796875, 0.2169189453125], "tokens": [1468, 1992, 280, 537, 8322, 46, 652, 30, 892, 2923]}
{"line_number": 562, "line_type": "generated", "code": "\n            }\n            public Chronology withEarliestYear(int earliestYear) {\n                return this;\n            }\n            public Chronology withLatestYear(int latestYear) {\n                return this;\n            }\n        };\n        return OffsetDateTime.", "entropy": 0.18994140625, "is_bug_line": true, "sus_score": 0.45030152797698975, "per_token_entropy": [0.2091064453125, 0.01081085205078125, 0.459716796875, 0.053436279296875, 1.41796875, 0.0001043081283569336, 0.00042629241943359375, 0.0155181884765625, 0.26220703125, 0.10467529296875, 0.456787109375, 1.142578125, 0.0008330345153808594, 0.0017604827880859375, 0.611328125, 3.6835670471191406e-05, 0.0015106201171875, 0.004421234130859375, 0.0006389617919921875, 0.009796142578125, 0.17626953125, 0.027435302734375, 0.000568389892578125, 0.03955078125, 0.0002586841583251953, 0.03680419921875, 0.004810333251953125, 0.044921875, 1.3113021850585938e-06, 0.000652313232421875, 0.0010471343994140625, 0.1763916015625, 0.00027561187744140625, 0.0001958608627319336, 0.0002701282501220703, 0.060638427734375, 0.00015294551849365234, 0.0020275115966796875, 0.00025534629821777344, 0.0008497238159179688, 0.00040912628173828125, 0.0003495216369628906, 0.00019097328186035156, 0.075439453125, 0.0006704330444335938, 1.2734375, 0.00647735595703125, 0.357421875, 0.6748046875, 1.029296875, 0.84765625, 0.27294921875], "tokens": [324, 320, 324, 562, 1884, 2558, 10537, 623, 55, 282, 27186, 6617, 26, 410, 8948, 27186, 6617, 27, 301, 400, 442, 458, 45, 324, 320, 324, 562, 1884, 2558, 10537, 623, 14792, 6617, 26, 410, 6615, 6617, 27, 301, 400, 442, 458, 45, 324, 320, 291, 1472, 291, 442, 12073, 4852, 32]}
{"line_number": 705, "line_type": "original", "code": "        return iID;", "entropy": 1.337890625, "is_bug_line": false, "sus_score": 0.4496724009513855, "per_token_entropy": [4.5625, 0.7900390625, 1.2451171875, 0.05938720703125, 0.034912109375], "tokens": [351, 442, 595, 779, 45]}
{"line_number": 705, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Gets the long name of this datetime zone suitable for display using\n     * the default locale.\n     * <p>\n     * If the name is not available for the locale, then this method returns a\n     * string in the format", "entropy": 0.02410888671875, "is_bug_line": false, "sus_score": 0.4496724009513855, "per_token_entropy": [0.1385498046875, 0.004871368408203125, 0.04144287109375, 0.01302337646484375, 0.0016078948974609375, 4.8041343688964844e-05, 0.028228759765625, 0.0302734375, 0.31689453125, 0.03271484375, 0.005863189697265625, 0.0016803741455078125, 0.006618499755859375, 0.0006742477416992188, 0.00701904296875, 0.00014472007751464844, 0.0018367767333984375, 0.02093505859375, 0.10394287109375, 9.179115295410156e-06, 0.0011529922485351562, 0.07781982421875, 0.0003991127014160156, 0.0023021697998046875, 0.03082275390625, 1.1563301086425781e-05, 0.11993408203125, 0.0004119873046875, 8.499622344970703e-05, 0.000476837158203125, 3.1828880310058594e-05, 0.0097503662109375, 0.0013113021850585938, 0.00861358642578125, 0.00040793418884277344, 0.00025773048400878906, 0.0002703666687011719, 0.0016231536865234375, 0.0019483566284179688, 0.0030517578125, 0.003124237060546875, 0.006153106689453125, 0.01080322265625, 0.0009284019470214844, 0.004817962646484375, 0.15234375, 0.0048980712890625, 7.510185241699219e-06, 0.0263214111328125, 0.0204925537109375, 0.00171661376953125, 0.005588531494140625], "tokens": [284, 320, 446, 1022, 275, 319, 7124, 322, 1946, 636, 432, 458, 7138, 10790, 19655, 436, 2503, 1471, 275, 319, 322, 1244, 11259, 32, 275, 319, 333, 98, 48, 275, 319, 1670, 322, 636, 438, 646, 3304, 436, 322, 11259, 30, 1615, 458, 1411, 3217, 312, 275, 319, 802, 328, 322, 2179]}
{"line_number": 223, "line_type": "original", "code": "        throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");", "entropy": 1.2021484375, "is_bug_line": false, "sus_score": 0.4494806230068207, "per_token_entropy": [6.5078125, 3.87109375, 0.005908966064453125, 0.0182952880859375, 0.0214691162109375, 3.57421875, 3.193359375, 0.006473541259765625, 1.720703125, 3.275390625, 0.015899658203125, 0.08282470703125, 0.025787353515625, 0.00659942626953125, 0.135009765625, 0.2587890625, 0.02752685546875, 7.903575897216797e-05, 0.10357666015625], "tokens": [351, 1422, 537, 12137, 440, 1318, 7138, 10790, 804, 6113, 474, 804, 474, 5335, 438, 646, 37768, 8593, 724]}
{"line_number": 223, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Gets a time zone instance for the specified offset to UTC in milliseconds.\n     * This method assumes standard length hours and minutes.\n     * <p>\n     * This factory is a convenient way of constructing zones with a fixed offset.", "entropy": 0.10784912109375, "is_bug_line": false, "sus_score": 0.4494806230068207, "per_token_entropy": [0.055084228515625, 0.00542449951171875, 0.1015625, 0.1236572265625, 0.002101898193359375, 7.426738739013672e-05, 0.1328125, 0.035247802734375, 0.051666259765625, 0.0003571510314941406, 0.0413818359375, 0.2286376953125, 0.068603515625, 0.030792236328125, 0.291259765625, 0.045135498046875, 0.0009946823120117188, 0.1549072265625, 0.1702880859375, 0.027923583984375, 0.0031261444091796875, 3.993511199951172e-05, 1.177734375, 0.2388916015625, 0.2447509765625, 0.75146484375, 0.017242431640625, 0.88232421875, 0.39306640625, 0.0241546630859375, 0.08758544921875, 0.015899658203125, 2.3484230041503906e-05, 0.135986328125, 0.0002722740173339844, 8.463859558105469e-05, 0.0005254745483398438, 5.7578086853027344e-05, 0.0216064453125, 0.01202392578125, 0.003490447998046875, 0.00860595703125, 0.003597259521484375, 0.00015485286712646484, 3.993511199951172e-05, 0.000484466552734375, 0.0009570121765136719, 0.0013942718505859375, 0.0016069412231445312, 0.0009889602661132812, 0.00684356689453125, 0.005615234375], "tokens": [284, 320, 446, 1022, 275, 319, 7124, 312, 1133, 10790, 1980, 436, 322, 3191, 3401, 372, 17197, 328, 18574, 32, 275, 319, 1348, 1411, 22416, 6216, 3104, 11632, 461, 10135, 32, 275, 319, 333, 98, 48, 275, 319, 1348, 7763, 438, 312, 27388, 3352, 432, 44654, 32019, 623, 312, 5253, 3401, 32]}
