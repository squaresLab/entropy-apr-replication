{"line_number": 609, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.634765625, "is_bug_line": false, "sus_score": 0.8730555176734924, "per_token_entropy": [8.625, 2.021484375, 0.00496673583984375, 0.0050811767578125, 0.399658203125, 0.00986480712890625, 0.0178680419921875, 0.01043701171875, 0.0077667236328125, 0.0004949569702148438, 0.0039825439453125, 0.189453125, 0.043487548828125, 0.003231048583984375, 0.01397705078125, 0.00011706352233886719, 0.0016450881958007812, 0.0643310546875], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 609, "line_type": "generated", "code": "\n        // copy r and (q transpose)*b to preserve input and initialize s.\n        // in particular, save the diagonal elements of r in x.\n        for (int j = 0; j < solvedCols; ++j) {\n            lmDiag", "entropy": 0.13427734375, "is_bug_line": false, "sus_score": 0.8730555176734924, "per_token_entropy": [0.1597900390625, 0.9501953125, 1.59375, 0.416015625, 0.1405029296875, 0.0247344970703125, 0.0004420280456542969, 0.024810791015625, 0.005840301513671875, 0.00044465065002441406, 0.039459228515625, 0.006420135498046875, 0.0770263671875, 0.003681182861328125, 0.0021305084228515625, 0.01262664794921875, 0.50732421875, 0.038238525390625, 0.1441650390625, 0.0067138671875, 0.0302581787109375, 5.805492401123047e-05, 0.0028133392333984375, 0.0016202926635742188, 0.00975799560546875, 0.0054473876953125, 1.3589859008789062e-05, 0.0007219314575195312, 0.097412109375, 0.005706787109375, 0.06005859375, 0.66259765625, 0.6171875, 0.0018939971923828125, 0.0011415481567382812, 0.07061767578125, 0.0023136138916015625, 0.00811004638671875, 0.005706787109375, 0.00577545166015625, 0.00022614002227783203, 0.001598358154296875, 0.242919921875, 0.0765380859375, 0.0012302398681640625, 0.012969970703125, 6.210803985595703e-05, 0.00081634521484375, 0.00545501708984375, 0.023040771484375, 0.802734375, 0.072509765625], "tokens": [291, 434, 1933, 540, 461, 308, 99, 27224, 4586, 84, 372, 24070, 1509, 461, 7379, 309, 32, 291, 434, 328, 8409, 30, 4131, 322, 27601, 4702, 432, 540, 328, 816, 32, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 324, 30780, 26244]}
{"line_number": 618, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.8173828125, "is_bug_line": false, "sus_score": 0.8726562261581421, "per_token_entropy": [3.14453125, 6.2890625, 0.005096435546875, 0.0035648345947265625, 3.513671875, 1.328125, 0.027587890625, 0.0222320556640625, 0.0035381317138671875, 0.0017242431640625, 0.01073455810546875, 0.2548828125, 0.03436279296875, 0.005321502685546875, 0.00962066650390625, 0.0006303787231445312, 0.006649017333984375, 0.052001953125], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 618, "line_type": "generated", "code": "\n            lmDiag[j] = diag[pj];\n            work[j] = qy[pj];\n        }\n\n        // eliminate the diagonal matrix d using a Givens rotation\n        for (int j = 0; j < solvedCols - ", "entropy": 0.12744140625, "is_bug_line": false, "sus_score": 0.8726562261581421, "per_token_entropy": [0.4560546875, 0.71875, 0.08953857421875, 0.0011310577392578125, 0.0171966552734375, 0.0008301734924316406, 0.004131317138671875, 0.2244873046875, 0.33203125, 0.0531005859375, 0.05621337890625, 0.9970703125, 0.208740234375, 0.00917816162109375, 0.0439453125, 0.0005745887756347656, 0.0167236328125, 0.0498046875, 0.0049896240234375, 0.0007719993591308594, 0.04290771484375, 0.0248260498046875, 0.170166015625, 0.0014781951904296875, 0.249267578125, 0.0850830078125, 0.3212890625, 0.0003535747528076172, 0.474365234375, 0.00897979736328125, 0.0071868896484375, 0.0006680488586425781, 0.0006933212280273438, 0.109619140625, 0.00441741943359375, 3.337860107421875e-06, 0.023529052734375, 0.02630615234375, 0.04071044921875, 0.0003666877746582031, 0.00034737586975097656, 0.138671875, 0.0015411376953125, 0.006450653076171875, 0.007511138916015625, 0.0009775161743164062, 0.0016527175903320312, 0.0002930164337158203, 0.01538848876953125, 0.0056915283203125, 1.5673828125, 0.0007457733154296875], "tokens": [324, 30780, 26244, 77, 92, 79, 280, 15534, 77, 25287, 970, 324, 1389, 77, 92, 79, 280, 2678, 107, 77, 25287, 970, 291, 320, 584, 434, 40533, 322, 27601, 5045, 343, 1471, 312, 570, 387, 1229, 11410, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 429, 225]}
{"line_number": 613, "line_type": "original", "code": "                for (int i = j + 1; i < solvedCols; ++i) {", "entropy": 0.70947265625, "is_bug_line": false, "sus_score": 0.8724605441093445, "per_token_entropy": [8.25, 4.21875, 0.004032135009765625, 0.00528717041015625, 0.50439453125, 0.004550933837890625, 0.228515625, 0.54345703125, 0.0026073455810546875, 0.00141143798828125, 0.0038547515869140625, 0.001995086669921875, 0.004547119140625, 0.024871826171875, 0.3681640625, 0.0012102127075195312, 0.005985260009765625, 0.00019490718841552734, 0.0055389404296875, 0.01161956787109375], "tokens": [2071, 436, 308, 410, 595, 280, 594, 474, 225, 35, 45, 595, 333, 19479, 19911, 45, 3311, 91, 27, 301]}
{"line_number": 613, "line_type": "generated", "code": "\n            lmDiag[j] = diag[j];\n            work[j] = qy[j];\n        }\n\n        // eliminate the diagonal matrix d using a Givens rotation\n        for (int j = 0; j < solvedCols; ++", "entropy": 0.0875244140625, "is_bug_line": false, "sus_score": 0.8724605441093445, "per_token_entropy": [0.09027099609375, 0.4052734375, 0.335205078125, 0.0005407333374023438, 0.07232666015625, 0.00035881996154785156, 0.0057220458984375, 0.02239990234375, 0.00302886962890625, 0.55078125, 0.0147552490234375, 0.57958984375, 0.1851806640625, 0.0002968311309814453, 0.00521087646484375, 0.0008473396301269531, 0.057647705078125, 0.0888671875, 0.0001633167266845703, 0.00023245811462402344, 0.044586181640625, 0.0204010009765625, 0.1151123046875, 0.0006084442138671875, 0.1220703125, 0.10662841796875, 0.6298828125, 0.00014495849609375, 0.4267578125, 0.005954742431640625, 0.016754150390625, 0.00026154518127441406, 0.0003981590270996094, 0.1712646484375, 0.003948211669921875, 3.4570693969726562e-06, 0.020263671875, 0.0206756591796875, 0.0269012451171875, 0.00022232532501220703, 0.0003139972686767578, 0.1114501953125, 0.0008921623229980469, 0.002960205078125, 0.00824737548828125, 0.0016164779663085938, 0.0012845993041992188, 0.0003371238708496094, 0.02362060546875, 0.01483154296875, 0.2274169921875, 0.00555419921875], "tokens": [324, 30780, 26244, 77, 92, 79, 280, 15534, 77, 92, 970, 324, 1389, 77, 92, 79, 280, 2678, 107, 77, 92, 970, 291, 320, 584, 434, 40533, 322, 27601, 5045, 343, 1471, 312, 570, 387, 1229, 11410, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311]}
{"line_number": 605, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.50732421875, "is_bug_line": false, "sus_score": 0.8691641092300415, "per_token_entropy": [4.8203125, 3.056640625, 0.0458984375, 0.0169219970703125, 0.3359375, 0.01247406005859375, 0.027984619140625, 0.00838470458984375, 0.0077667236328125, 0.002582550048828125, 0.027099609375, 0.55615234375, 0.06451416015625, 0.0035457611083984375, 0.014434814453125, 0.0003192424774169922, 0.004497528076171875, 0.1256103515625], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 605, "line_type": "generated", "code": "\n     */\n    private void determineLMDirection(final double[] qy,\n                                     final double[] diag,\n                                     final double[] lmDiag,\n                                     final double[] lmDir) {\n\n        // compute the norm of the scaled gradient\n        double sum2 = ", "entropy": 0.2900390625, "is_bug_line": false, "sus_score": 0.8691641092300415, "per_token_entropy": [0.53076171875, 0.36376953125, 0.0175628662109375, 0.215087890625, 0.02679443359375, 0.0198822021484375, 0.003757476806640625, 0.00015544891357421875, 6.890296936035156e-05, 0.00727081298828125, 0.548828125, 0.09210205078125, 0.03582763671875, 0.00128936767578125, 0.00040793418884277344, 0.0006380081176757812, 1.6796875, 0.042205810546875, 0.0009465217590332031, 0.0034351348876953125, 0.0654296875, 0.0011873245239257812, 0.349853515625, 0.054840087890625, 0.0014209747314453125, 0.002685546875, 0.0275726318359375, 0.035736083984375, 0.055084228515625, 0.45263671875, 0.0249481201171875, 0.001789093017578125, 0.0011682510375976562, 0.1697998046875, 0.0030727386474609375, 0.00909423828125, 0.0271453857421875, 0.494140625, 0.5849609375, 2.861328125, 0.30712890625, 0.346923828125, 0.092041015625, 0.6064453125, 1.1396484375, 0.250244140625, 0.03912353515625, 0.1580810546875, 1.8193359375, 1.482421875, 0.0178375244140625, 0.00665283203125], "tokens": [275, 569, 284, 945, 763, 9921, 62, 5108, 2721, 26, 3220, 2064, 1178, 2678, 107, 30, 9474, 1158, 2064, 1178, 15534, 30, 9474, 1158, 2064, 1178, 30780, 26244, 30, 9474, 1158, 2064, 1178, 30780, 2976, 27, 301, 584, 434, 7596, 322, 9807, 432, 322, 23205, 14999, 291, 2064, 3632, 36, 280, 225]}
{"line_number": 530, "line_type": "original", "code": "            for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.36962890625, "is_bug_line": false, "sus_score": 0.86830735206604, "per_token_entropy": [4.78515625, 1.4990234375, 0.00504302978515625, 0.023651123046875, 0.1541748046875, 0.00431060791015625, 0.0237274169921875, 0.002338409423828125, 0.001247406005859375, 0.0005450248718261719, 0.0033435821533203125, 0.1090087890625, 0.018707275390625, 0.002735137939453125, 0.00531768798828125, 0.0001952648162841797, 0.0018596649169921875, 0.0100555419921875], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 530, "line_type": "generated", "code": "\n            double[] work = work2;\n            work = work3;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                work[pj] = sPar * diag[pj", "entropy": 0.29150390625, "is_bug_line": false, "sus_score": 0.86830735206604, "per_token_entropy": [0.361083984375, 1.9150390625, 0.873046875, 1.8203125, 1.3046875, 0.40673828125, 1.3935546875, 0.03125, 0.6748046875, 0.81005859375, 0.383056640625, 0.034698486328125, 1.1611328125, 0.0103759765625, 0.82568359375, 0.6201171875, 0.002735137939453125, 0.00797271728515625, 0.1807861328125, 0.002544403076171875, 0.00974273681640625, 0.002490997314453125, 0.00142669677734375, 0.0006031990051269531, 0.001216888427734375, 0.15625, 0.0225677490234375, 0.00045990943908691406, 0.00640106201171875, 0.00011157989501953125, 0.0009250640869140625, 0.0020084381103515625, 0.0077056884765625, 0.429443359375, 0.003753662109375, 0.0004315376281738281, 0.0012311935424804688, 0.0004878044128417969, 0.000476837158203125, 0.000484466552734375, 0.004669189453125, 0.1756591796875, 0.11944580078125, 0.375, 0.00018346309661865234, 0.0013179779052734375, 0.386962890625, 0.0005102157592773438, 0.0158843994140625, 0.10943603515625, 0.494384765625, 0.0013513565063476562], "tokens": [324, 2064, 1178, 1389, 280, 1389, 36, 45, 324, 1389, 280, 1389, 37, 45, 324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 629, 46704, 280, 38151, 77, 92, 970, 400, 1389, 77, 25287, 79, 280, 309, 926, 319, 15534, 77, 25287]}
{"line_number": 632, "line_type": "original", "code": "            lmPar = Math.max(parl, lmPar + correction);", "entropy": 1.90234375, "is_bug_line": false, "sus_score": 0.8670035600662231, "per_token_entropy": [4.25390625, 1.798828125, 4.69140625, 0.10003662109375, 1.4970703125, 0.002590179443359375, 0.3046875, 0.0037517547607421875, 5.73828125, 0.1492919921875, 0.0712890625, 0.42822265625, 0.08392333984375, 6.2578125, 4.875, 0.1805419921875], "tokens": [1468, 30780, 926, 280, 4175, 32, 1449, 26, 568, 94, 30, 30780, 926, 474, 25683, 293]}
{"line_number": 632, "line_type": "generated", "code": "\n\n            // the transformations to eliminate the row of d modify only a\n            // single element of (q transpose)*b beyond the first n, which\n            // is initially zero.\n            double delta = work[j];\n            for (int k = j; k", "entropy": 0.1416015625, "is_bug_line": false, "sus_score": 0.8670035600662231, "per_token_entropy": [0.7919921875, 0.053802490234375, 1.986328125, 0.00359344482421875, 2.396106719970703e-05, 0.0015287399291992188, 0.00015044212341308594, 0.00582122802734375, 0.0007948875427246094, 0.00027251243591308594, 0.326171875, 0.0019931793212890625, 0.00850677490234375, 0.01230621337890625, 0.0002892017364501953, 0.0038547515869140625, 0.00043511390686035156, 6.842613220214844e-05, 0.040008544921875, 0.063232421875, 0.098876953125, 0.019989013671875, 0.1263427734375, 0.346435546875, 3.647804260253906e-05, 0.00026488304138183594, 7.283687591552734e-05, 0.0095977783203125, 0.1517333984375, 0.1348876953125, 0.0031108856201171875, 2.2649765014648438e-05, 0.0007305145263671875, 0.00858306884765625, 0.01509857177734375, 0.0843505859375, 0.1478271484375, 0.548828125, 0.03424072265625, 0.69580078125, 0.0006704330444335938, 0.01386260986328125, 0.01702880859375, 0.1124267578125, 0.242431640625, 0.0004992485046386719, 0.00032973289489746094, 1.0498046875, 0.0004315376281738281, 0.01074981689453125, 0.18310546875, 0.00555419921875], "tokens": [1064, 434, 322, 34816, 372, 40533, 322, 2698, 432, 343, 5351, 1755, 312, 324, 434, 3982, 1994, 432, 308, 99, 27224, 4586, 84, 21861, 322, 1932, 310, 30, 1510, 324, 434, 438, 26302, 5934, 32, 324, 2064, 7715, 280, 1389, 77, 92, 970, 324, 436, 308, 410, 831, 280, 594, 45, 831]}
{"line_number": 625, "line_type": "original", "code": "            if (fp > 0) {", "entropy": 2.822265625, "is_bug_line": false, "sus_score": 0.8660705089569092, "per_token_entropy": [3.046875, 10.2109375, 0.034027099609375, 11.7109375, 0.352294921875, 0.01412200927734375, 0.0005669593811035156, 0.00881195068359375, 0.02197265625], "tokens": [1468, 415, 308, 4426, 848, 225, 34, 27, 301]}
{"line_number": 625, "line_type": "generated", "code": "\n                double dStar = 0;\n                for (int k = j; k < solvedCols; ++k) {\n                    dStar = Math.hypot(dStar, lmDiag[k]);\n                }", "entropy": 0.2269287109375, "is_bug_line": false, "sus_score": 0.8660705089569092, "per_token_entropy": [0.97509765625, 0.1038818359375, 0.52587890625, 1.673828125, 0.2105712890625, 0.7587890625, 0.0704345703125, 0.1187744140625, 0.357666015625, 0.57080078125, 0.0028362274169921875, 0.005901336669921875, 0.111572265625, 0.0005545616149902344, 0.110595703125, 0.01311492919921875, 0.00848388671875, 0.0029296875, 0.0019073486328125, 0.0121612548828125, 0.0300140380859375, 0.0047607421875, 0.0001302957534790039, 0.0025463104248046875, 0.0189666748046875, 0.0902099609375, 0.288330078125, 0.0009355545043945312, 0.99609375, 0.048614501953125, 0.0014295578002929688, 0.2054443359375, 2.384185791015625e-07, 0.0006623268127441406, 0.0186309814453125, 0.0005564689636230469, 0.00040650367736816406, 2.087890625, 0.45703125, 0.0003170967102050781, 0.055908203125, 0.0198822021484375, 0.018829345703125, 0.0005726814270019531], "tokens": [400, 2064, 343, 9024, 280, 225, 34, 45, 400, 436, 308, 410, 831, 280, 594, 45, 831, 333, 19479, 19911, 45, 3311, 93, 27, 301, 528, 343, 9024, 280, 4175, 32, 90, 19107, 26, 86, 9024, 30, 30780, 26244, 77, 93, 1989, 400, 320]}
{"line_number": 617, "line_type": "original", "code": "            sum2 = 0;", "entropy": 2.767578125, "is_bug_line": false, "sus_score": 0.8643834590911865, "per_token_entropy": [3.2734375, 8.40625, 2.1328125, 2.837890625, 2.41796875, 0.01313018798828125, 0.291259765625], "tokens": [1468, 3632, 36, 280, 225, 34, 45]}
{"line_number": 617, "line_type": "generated", "code": "\n            lmDiag[j] = diag[pj];\n            work[j] = qy[pj];\n        }\n\n        // eliminate the diagonal matrix d using a Givens rotation\n        for (int j = 0; j < solvedCols; ++", "entropy": 0.0792236328125, "is_bug_line": false, "sus_score": 0.8643834590911865, "per_token_entropy": [0.19677734375, 0.1229248046875, 0.59765625, 0.00018584728240966797, 0.38232421875, 0.00041556358337402344, 0.005481719970703125, 0.0252838134765625, 0.0006437301635742188, 0.1064453125, 0.06695556640625, 0.241943359375, 0.350341796875, 0.0008997917175292969, 0.0650634765625, 0.00024437904357910156, 0.0161895751953125, 0.055908203125, 0.00032782554626464844, 0.00015282630920410156, 0.0191497802734375, 0.0284423828125, 0.09283447265625, 0.00018453598022460938, 0.25439453125, 0.1805419921875, 0.329345703125, 0.00025177001953125, 0.38134765625, 0.00640106201171875, 0.0192108154296875, 0.0004131793975830078, 0.0006098747253417969, 0.1470947265625, 0.0044708251953125, 3.337860107421875e-06, 0.0233306884765625, 0.024627685546875, 0.03826904296875, 0.00035309791564941406, 0.00026035308837890625, 0.10272216796875, 0.0011501312255859375, 0.003635406494140625, 0.00799560546875, 0.0006895065307617188, 0.001499176025390625, 0.0002474784851074219, 0.01180267333984375, 0.00423431396484375, 0.1939697265625, 0.0055084228515625], "tokens": [324, 30780, 26244, 77, 92, 79, 280, 15534, 77, 25287, 970, 324, 1389, 77, 92, 79, 280, 2678, 107, 77, 25287, 970, 291, 320, 584, 434, 40533, 322, 27601, 5045, 343, 1471, 312, 570, 387, 1229, 11410, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311]}
{"line_number": 699, "line_type": "original", "code": "                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);", "entropy": 1.1474609375, "is_bug_line": false, "sus_score": 0.8612856864929199, "per_token_entropy": [8.09375, 8.015625, 0.9150390625, 0.1328125, 2.544921875, 2.025390625, 0.62744140625, 0.02398681640625, 0.296875, 1.3505859375, 0.00201416015625, 0.0223846435546875, 0.0259857177734375, 0.1917724609375, 0.0269775390625, 0.0005688667297363281, 0.040985107421875, 4.1015625, 0.09991455078125, 0.055084228515625, 0.06982421875, 0.01035308837890625, 0.0002853870391845703, 0.0005846023559570312, 0.0196075439453125], "tokens": [6797, 9812, 261, 280, 225, 35, 32, 34, 517, 4175, 32, 8663, 26, 35, 32, 34, 474, 281, 366, 278, 319, 281, 366, 278, 293]}
{"line_number": 699, "line_type": "generated", "code": "\n                }\n                work[j] = (work[j] - sum) / lmDiag[j];\n            }\n        }\n\n        // permute the components of z back to components of lmDir\n        for (int j = 0; j < solved", "entropy": 0.0250701904296875, "is_bug_line": false, "sus_score": 0.8612856864929199, "per_token_entropy": [0.06463623046875, 0.0014247894287109375, 0.050567626953125, 0.0258941650390625, 6.520748138427734e-05, 0.0008826255798339844, 0.0005202293395996094, 0.029876708984375, 0.007171630859375, 0.008544921875, 6.711483001708984e-05, 9.059906005859375e-05, 0.0008625984191894531, 0.0011148452758789062, 0.0006260871887207031, 0.0114593505859375, 0.0004954338073730469, 0.00991058349609375, 0.0037364959716796875, 4.839897155761719e-05, 3.1828880310058594e-05, 0.0014057159423828125, 0.46728515625, 0.00018477439880371094, 0.03277587890625, 0.00012362003326416016, 0.1484375, 0.0230255126953125, 0.052276611328125, 5.137920379638672e-05, 0.0002837181091308594, 0.03680419921875, 3.075599670410156e-05, 0.0026950836181640625, 0.01326751708984375, 5.2094459533691406e-05, 0.0027484893798828125, 0.012054443359375, 0.049835205078125, 0.017059326171875, 0.00949859619140625, 0.10052490234375, 0.0019245147705078125, 0.0005178451538085938, 0.00531768798828125, 0.002017974853515625, 0.01137542724609375, 0.00046133995056152344, 0.0005283355712890625, 0.0006918907165527344, 0.00025463104248046875, 0.092041015625], "tokens": [400, 320, 400, 1389, 77, 92, 79, 280, 308, 1007, 77, 92, 79, 429, 3632, 27, 517, 30780, 26244, 77, 92, 970, 324, 320, 291, 320, 584, 434, 18161, 1142, 322, 6339, 432, 1288, 1751, 372, 6339, 432, 30780, 2976, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479]}
{"line_number": 541, "line_type": "original", "code": "                double s = (work1[pj] - sum) / diagR[pj];", "entropy": 1.69921875, "is_bug_line": false, "sus_score": 0.8612856864929199, "per_token_entropy": [4.1015625, 4.72265625, 1.6484375, 2.509765625, 4.62109375, 2.41015625, 0.6259765625, 0.004802703857421875, 0.016937255859375, 0.02081298828125, 1.5771484375, 5.5703125, 0.98388671875, 0.364013671875, 2.068359375, 0.98388671875, 0.002857208251953125, 0.0290374755859375, 0.0234375], "tokens": [2071, 2064, 309, 280, 308, 1007, 35, 77, 25287, 79, 429, 3632, 27, 517, 15534, 68, 77, 25287, 970]}
{"line_number": 541, "line_type": "generated", "code": "\n                dxNorm += s * s;\n            }\n            dxNorm = Math.sqrt(dxNorm);\n            double temp = dxNorm - delta;\n            if (temp <= 0.1 * delta) {\n                return;\n            }\n\n            // if the", "entropy": 0.1627197265625, "is_bug_line": false, "sus_score": 0.8612856864929199, "per_token_entropy": [0.10382080078125, 0.120361328125, 0.00032973289489746094, 0.005138397216796875, 0.0191650390625, 0.0016317367553710938, 0.0017061233520507812, 0.0005016326904296875, 0.0318603515625, 8.249282836914062e-05, 0.055694580078125, 0.1322021484375, 0.0015544891357421875, 7.832050323486328e-05, 0.0008234977722167969, 0.00010633468627929688, 0.0002853870391845703, 5.066394805908203e-05, 0.0010557174682617188, 1.919269561767578e-05, 0.0003972053527832031, 0.035125732421875, 0.016876220703125, 2.28515625, 0.09381103515625, 1.361328125, 0.00020372867584228516, 0.028961181640625, 0.00012671947479248047, 0.00013506412506103516, 0.441650390625, 0.10638427734375, 0.0059051513671875, 1.103515625, 0.21044921875, 9.381771087646484e-05, 5.960464477539062e-07, 0.034393310546875, 0.00146484375, 0.0008335113525390625, 0.0003914833068847656, 0.017791748046875, 0.0032672882080078125, 0.034149169921875, 1.0751953125, 0.0011301040649414062, 0.0044403076171875, 0.0002206563949584961, 0.54833984375, 0.0194854736328125, 0.5478515625, 0.00389862060546875], "tokens": [400, 12211, 14373, 1454, 309, 319, 309, 45, 324, 320, 324, 12211, 14373, 280, 4175, 32, 8663, 26, 4582, 14373, 293, 324, 2064, 1779, 280, 12211, 14373, 429, 7715, 45, 324, 415, 308, 1433, 2511, 225, 34, 32, 35, 319, 7715, 27, 301, 400, 442, 45, 324, 320, 1064, 434, 415, 322]}
{"line_number": 622, "line_type": "original", "code": "            double correction = fp / (delta * sum2);", "entropy": 3.638671875, "is_bug_line": false, "sus_score": 0.8511815071105957, "per_token_entropy": [6.140625, 1.9873046875, 10.359375, 0.1903076171875, 13.3203125, 0.201416015625, 5.421875, 1.3076171875, 0.6748046875, 3.9921875, 0.052459716796875, 0.005741119384765625], "tokens": [1468, 2064, 25683, 280, 11828, 517, 308, 6558, 319, 3632, 36, 293]}
{"line_number": 622, "line_type": "generated", "code": "\n\n        // solve the triangular system for z.  If the system is singular\n        // then obtain a least-squares solution\n        for (int j = solvedCols - 1; j >= 0; --j) {\n            if (lmDiag[", "entropy": 0.17626953125, "is_bug_line": false, "sus_score": 0.8511815071105957, "per_token_entropy": [1.130859375, 0.07763671875, 0.7568359375, 0.30859375, 0.0295867919921875, 0.006015777587890625, 0.00222015380859375, 0.153076171875, 0.0046234130859375, 1.2216796875, 0.7041015625, 0.0250396728515625, 7.426738739013672e-05, 0.008636474609375, 0.00022411346435546875, 0.4072265625, 0.04083251953125, 0.0015974044799804688, 1.4033203125, 0.10888671875, 0.0037403106689453125, 0.023712158203125, 0.10601806640625, 0.024078369140625, 0.002368927001953125, 0.272705078125, 0.6923828125, 0.0011472702026367188, 0.00623321533203125, 0.01849365234375, 0.0017185211181640625, 0.17919921875, 0.0035076141357421875, 0.027435302734375, 0.0026302337646484375, 0.005947113037109375, 0.0025615692138671875, 0.0003552436828613281, 0.00197601318359375, 0.0019969940185546875, 0.001079559326171875, 0.00238800048828125, 0.0102996826171875, 0.0005807876586914062, 0.0011615753173828125, 0.0034637451171875, 0.146240234375, 0.7509765625, 0.0159759521484375, 0.24267578125, 0.2200927734375, 0.000904083251953125], "tokens": [584, 434, 10932, 322, 3934, 5089, 2664, 436, 1288, 32, 225, 1670, 322, 2664, 438, 36134, 291, 434, 1615, 4224, 312, 6225, 31, 41542, 5295, 291, 436, 308, 410, 594, 280, 19479, 19911, 429, 225, 35, 45, 594, 2377, 225, 34, 45, 769, 92, 27, 301, 324, 415, 308, 12750, 26244, 77]}
{"line_number": 611, "line_type": "original", "code": "                work1[pj] /= work2[j];", "entropy": 2.9453125, "is_bug_line": false, "sus_score": 0.8485477566719055, "per_token_entropy": [9.109375, 3.916015625, 2.50390625, 1.080078125, 5.84765625, 0.01337432861328125, 6.0859375, 3.02734375, 1.25, 0.0229644775390625, 2.474609375, 0.0251312255859375], "tokens": [2071, 1389, 35, 77, 25287, 79, 14374, 1389, 36, 77, 92, 970]}
{"line_number": 611, "line_type": "generated", "code": "\n        for (int j = 0; j < solvedCols; ++j) {\n            lmDiag[j] = diag[j];\n            work[j] = qy[j];\n        }\n\n        // eliminate the diagonal matrix d using a G", "entropy": 0.0985107421875, "is_bug_line": false, "sus_score": 0.8485477566719055, "per_token_entropy": [0.142822265625, 0.7490234375, 0.0026416778564453125, 0.0011720657348632812, 0.138427734375, 0.009307861328125, 0.0138092041015625, 0.01093292236328125, 0.004302978515625, 0.00033664703369140625, 0.00264739990234375, 0.1700439453125, 0.1243896484375, 0.0016012191772460938, 0.00708770751953125, 7.37905502319336e-05, 0.0009398460388183594, 0.0059051513671875, 0.043304443359375, 0.93359375, 0.076904296875, 0.00026988983154296875, 0.03717041015625, 0.0001747608184814453, 0.0014934539794921875, 0.01480865478515625, 0.002040863037109375, 0.357177734375, 0.012786865234375, 0.487060546875, 0.384033203125, 0.0006303787231445312, 0.005615234375, 0.0011796951293945312, 0.02020263671875, 0.05670166015625, 0.00018405914306640625, 0.00015246868133544922, 0.0447998046875, 0.012603759765625, 0.0282745361328125, 0.0003085136413574219, 0.1763916015625, 0.162353515625, 0.2822265625, 0.0006093978881835938, 0.454345703125, 0.004405975341796875, 0.013519287109375, 0.00031280517578125, 0.0005679130554199219, 0.1175537109375], "tokens": [291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 324, 30780, 26244, 77, 92, 79, 280, 15534, 77, 92, 970, 324, 1389, 77, 92, 79, 280, 2678, 107, 77, 92, 970, 291, 320, 584, 434, 40533, 322, 27601, 5045, 343, 1471, 312, 570]}
{"line_number": 607, "line_type": "original", "code": "                work1[pj] = work3[pj] * diag[pj] / dxNorm;", "entropy": 1.63671875, "is_bug_line": false, "sus_score": 0.8480215668678284, "per_token_entropy": [8.546875, 5.203125, 1.216796875, 0.181884765625, 3.4453125, 0.0181121826171875, 0.88037109375, 1.91796875, 2.029296875, 0.0031375885009765625, 0.07855224609375, 0.4111328125, 2.3046875, 2.58203125, 0.009124755859375, 0.01375579833984375, 2.990234375, 0.9345703125, 1.5263671875, 0.0027618408203125, 0.07080078125], "tokens": [2071, 1389, 35, 77, 25287, 79, 280, 1389, 37, 77, 25287, 79, 319, 15534, 77, 25287, 79, 517, 12211, 14373, 45]}
{"line_number": 607, "line_type": "generated", "code": "\n    public void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n        // Copy R and Qty to preserve input and initialize s.\n        for (int j = 0; j <", "entropy": 0.243408203125, "is_bug_line": false, "sus_score": 0.8480215668678284, "per_token_entropy": [0.444580078125, 1.748046875, 0.140869140625, 0.06414794921875, 0.01047515869140625, 0.0007414817810058594, 0.00012743473052978516, 0.01329803466796875, 0.84619140625, 0.04425048828125, 0.003490447998046875, 0.0004780292510986328, 0.0007014274597167969, 0.050384521484375, 0.00862884521484375, 0.0316162109375, 0.0007085800170898438, 0.3349609375, 0.00461578369140625, 0.0083160400390625, 0.034912109375, 0.0012216567993164062, 0.1519775390625, 0.0012102127075195312, 0.00864410400390625, 0.0219573974609375, 0.0321044921875, 0.87939453125, 1.0078125, 3.763671875, 0.319580078125, 0.2470703125, 0.091552734375, 0.17529296875, 0.182861328125, 0.0897216796875, 0.2481689453125, 0.005496978759765625, 0.00457000732421875, 0.1402587890625, 0.2391357421875, 0.11883544921875, 1.0009765625, 0.0025177001953125, 0.0005297660827636719, 0.10089111328125, 0.0094146728515625, 0.005252838134765625, 0.00775146484375, 0.006168365478515625, 0.0002961158752441406, 0.002208709716796875], "tokens": [284, 562, 763, 9921, 62, 5108, 2721, 26, 2627, 1178, 2678, 107, 30, 2064, 1178, 15534, 30, 2064, 1178, 30780, 26244, 30, 2064, 1178, 1389, 27, 301, 291, 434, 2389, 559, 461, 1910, 618, 372, 24070, 1509, 461, 7379, 309, 32, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333]}
{"line_number": 426, "line_type": "original", "code": "                    cost = previousCost;", "entropy": 5.2890625, "is_bug_line": false, "sus_score": 0.8445001244544983, "per_token_entropy": [11.3671875, 12.03125, 2.326171875, 5.2578125, 0.176025390625, 0.58349609375], "tokens": [4696, 7847, 280, 4552, 9375, 45]}
{"line_number": 426, "line_type": "generated", "code": "\n     * </ul>\n     * @param jacobian Jacobian matrix\n     * @param delta Step bound\n     * @param x Vector containing the parameters\n     * @param diag Diagonal elements of the Jacobian matrix\n     * @param residuals Residuals", "entropy": 0.362060546875, "is_bug_line": false, "sus_score": 0.8445001244544983, "per_token_entropy": [0.68310546875, 0.0175933837890625, 0.2073974609375, 0.0012159347534179688, 0.01197052001953125, 0.058135986328125, 0.044708251953125, 0.7177734375, 0.0556640625, 1.4794921875, 0.08355712890625, 1.4677734375, 0.003391265869140625, 0.019439697265625, 0.47802734375, 0.002895355224609375, 0.0035839080810546875, 0.023193359375, 2.65234375, 1.2919921875, 0.038726806640625, 0.243896484375, 0.009735107421875, 0.003719329833984375, 0.0665283203125, 2.423828125, 1.052734375, 1.1904296875, 0.060791015625, 0.444091796875, 0.373779296875, 0.0247344970703125, 0.01198577880859375, 0.036224365234375, 0.97021484375, 0.236572265625, 0.0003619194030761719, 0.40478515625, 0.06390380859375, 0.003376007080078125, 0.20068359375, 0.020050048828125, 0.53662109375, 0.0989990234375, 0.0198516845703125, 0.032073974609375, 0.0293426513671875, 0.5927734375, 0.01068878173828125, 0.0943603515625, 0.0003628730773925781, 0.2357177734375], "tokens": [275, 319, 576, 338, 48, 275, 319, 477, 753, 594, 30495, 971, 30495, 5045, 275, 319, 477, 753, 7715, 11533, 5085, 275, 319, 477, 753, 816, 4107, 6621, 322, 3377, 275, 319, 477, 753, 15534, 46013, 11008, 4702, 432, 322, 971, 30495, 5045, 275, 319, 477, 753, 27410, 101, 1936, 6392, 101]}
{"line_number": 532, "line_type": "original", "code": "                work1[pj] *= diag[pj] / dxNorm;", "entropy": 1.9853515625, "is_bug_line": false, "sus_score": 0.8415811061859131, "per_token_entropy": [7.26953125, 0.5234375, 0.39111328125, 0.0002613067626953125, 0.0282135009765625, 0.0007009506225585938, 2.26171875, 9.71875, 0.339111328125, 0.0017595291137695312, 0.12744140625, 1.8720703125, 6.796875, 0.00617218017578125, 0.451416015625], "tokens": [2071, 1389, 35, 77, 25287, 79, 10439, 15534, 77, 25287, 79, 517, 12211, 14373, 45]}
{"line_number": 532, "line_type": "generated", "code": "\n            }\n            double yNorm = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                yNorm += work1[permutation[j]] * work1[permutation[j]];\n            }\n            yNorm", "entropy": 0.143798828125, "is_bug_line": false, "sus_score": 0.8415811061859131, "per_token_entropy": [0.06732177734375, 0.0002243518829345703, 0.09869384765625, 0.310302734375, 2.498046875, 0.31298828125, 0.002288818359375, 0.4462890625, 2.6226043701171875e-05, 0.005878448486328125, 0.0037403106689453125, 0.032135009765625, 0.00019729137420654297, 6.92605972290039e-05, 0.0081024169921875, 0.00024700164794921875, 0.0285797119140625, 0.00010693073272705078, 0.0009794235229492188, 0.0005154609680175781, 0.00033926963806152344, 0.044769287109375, 0.0110015869140625, 0.0001742839813232422, 0.0010881423950195312, 2.288818359375e-05, 0.00013303756713867188, 0.0002351999282836914, 0.00565338134765625, 1.3251953125, 0.0008649826049804688, 0.0015583038330078125, 0.148193359375, 0.55322265625, 4.291534423828125e-05, 0.07177734375, 1.4662742614746094e-05, 7.045269012451172e-05, 0.00046133995056152344, 0.0005650520324707031, 0.76806640625, 0.6376953125, 0.00116729736328125, 0.0004582405090332031, 0.00035572052001953125, 3.361701965332031e-05, 0.0345458984375, 0.00441741943359375, 2.0742416381835938e-05, 0.01471710205078125, 0.034820556640625, 6.258487701416016e-05], "tokens": [324, 320, 324, 2064, 533, 14373, 280, 225, 34, 45, 324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 533, 14373, 1454, 1389, 35, 77, 40237, 77, 92, 3212, 319, 1389, 35, 77, 40237, 77, 92, 19730, 324, 320, 324, 533, 14373]}
{"line_number": 539, "line_type": "original", "code": "                    sum += jacobian[i][pj] * work1[permutation[i]];", "entropy": 1.0791015625, "is_bug_line": false, "sus_score": 0.8335023522377014, "per_token_entropy": [7.1015625, 3.279296875, 0.334228515625, 0.415771484375, 0.0034503936767578125, 0.00469970703125, 0.54638671875, 0.00167083740234375, 0.042694091796875, 0.01104736328125, 0.003192901611328125, 0.6435546875, 2.63671875, 0.003734588623046875, 4.32421875, 0.0007953643798828125, 0.0272216796875, 0.040618896484375], "tokens": [4696, 3632, 1454, 594, 30495, 77, 91, 1674, 25287, 79, 319, 1389, 35, 77, 40237, 77, 91, 19730]}
{"line_number": 539, "line_type": "generated", "code": "\n            }\n            double fPlu = dxNorm - delta;\n\n            if (fPlu <= 0) {\n                // update the function value and the directional derivative\n                fp = fPlu;\n                for (int j = 0; j", "entropy": 0.259521484375, "is_bug_line": false, "sus_score": 0.8335023522377014, "per_token_entropy": [0.362060546875, 0.0008921623229980469, 0.09423828125, 0.90625, 0.92626953125, 2.16015625, 0.54052734375, 0.00450897216796875, 0.024078369140625, 3.802776336669922e-05, 8.475780487060547e-05, 0.0002734661102294922, 0.00011241436004638672, 0.07293701171875, 0.340576171875, 0.0167236328125, 0.07354736328125, 5.4836273193359375e-06, -0.0, 0.384765625, 0.00026297569274902344, 2.384185791015625e-07, 0.0926513671875, 0.00308990478515625, 0.13427734375, 0.90283203125, 0.7421875, 0.300048828125, 0.98046875, 0.02813720703125, 0.0799560546875, 1.9423828125, 0.294189453125, 0.441162109375, 0.00325775146484375, 0.002140045166015625, 0.74658203125, 0.00021839141845703125, 0.035400390625, 4.57763671875e-05, -0.0, 0.0007357597351074219, 0.005176544189453125, 0.83984375, 0.00024700164794921875, 0.00019943714141845703, 0.0090484619140625, 0.0004665851593017578, 0.0002751350402832031, 1.7404556274414062e-05, 5.7816505432128906e-05, 0.0005693435668945312], "tokens": [324, 320, 324, 2064, 296, 1822, 103, 280, 12211, 14373, 429, 7715, 45, 1064, 415, 308, 88, 1822, 103, 2511, 225, 34, 27, 301, 400, 434, 1974, 322, 667, 786, 461, 322, 6983, 279, 27640, 400, 11828, 280, 296, 1822, 103, 45, 400, 436, 308, 410, 594, 280, 225, 34, 45, 594]}
{"line_number": 553, "line_type": "original", "code": "            for (int i = 0; i <= j; ++i) {", "entropy": 1.0244140625, "is_bug_line": false, "sus_score": 0.8310607671737671, "per_token_entropy": [5.30859375, 3.923828125, 0.006542205810546875, 0.01812744140625, 0.93505859375, 0.01300811767578125, 0.0202484130859375, 0.005779266357421875, 0.00243377685546875, 0.001194000244140625, 3.8984375, 2.888671875, 0.341552734375, 0.0157012939453125, 0.0015516281127929688, 0.004711151123046875, 0.032562255859375], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 2511, 594, 45, 3311, 91, 27, 301]}
{"line_number": 553, "line_type": "generated", "code": "\n            // compute the Newton correction\n            double parc = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double s = (work3[pj] -", "entropy": 0.11749267578125, "is_bug_line": false, "sus_score": 0.8310607671737671, "per_token_entropy": [0.51123046875, 0.413330078125, 0.052490234375, 0.00048828125, 0.1072998046875, 5.924701690673828e-05, 0.05035400390625, 0.044677734375, 0.54638671875, 0.83935546875, 0.0007853507995605469, 0.0433349609375, 0.490234375, 0.0016126632690429688, 0.031097412109375, 0.0142822265625, 0.69140625, 0.0003132820129394531, 0.00145721435546875, 0.017059326171875, 0.0012969970703125, 0.0003027915954589844, 8.7738037109375e-05, 0.002796173095703125, 0.0009832382202148438, 0.00042176246643066406, 0.00392913818359375, 0.0022563934326171875, 0.000362396240234375, 0.0024204254150390625, 5.5670738220214844e-05, 0.0005168914794921875, 0.0011949539184570312, 0.00983428955078125, 0.07818603515625, 0.000614166259765625, 0.0003001689910888672, 0.000461578369140625, 4.267692565917969e-05, 0.00011968612670898438, 0.00036716461181640625, 0.004375457763671875, 0.2344970703125, 0.201416015625, 0.101806640625, 0.74755859375, 0.36669921875, 0.35498046875, 5.2094459533691406e-05, 0.0018548965454101562, 0.0008754730224609375, 0.1302490234375], "tokens": [324, 434, 7596, 322, 3136, 937, 25683, 324, 2064, 880, 85, 280, 225, 34, 45, 324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 629, 46704, 280, 38151, 77, 92, 970, 400, 2064, 309, 280, 308, 1007, 37, 77, 25287, 79, 429]}
{"line_number": 568, "line_type": "original", "code": "        lmPar = Math.min(paru, Math.max(lmPar, parl));", "entropy": 0.8427734375, "is_bug_line": false, "sus_score": 0.829275369644165, "per_token_entropy": [3.443359375, 4.32421875, 0.236572265625, 0.377685546875, 1.74609375, 0.00370025634765625, 2.18359375, 0.005672454833984375, 1.0537109375, 0.0096435546875, 0.0012559890747070312, 2.8671875, 0.0009064674377441406, 0.00011479854583740234, 0.0003197193145751953, 0.68994140625, 0.00020706653594970703, 0.0305633544921875, 0.58154296875, 0.0012178421020507812, 0.149658203125], "tokens": [351, 30780, 926, 280, 4175, 32, 887, 26, 568, 103, 30, 4175, 32, 1449, 26, 12750, 926, 30, 880, 94, 876]}
{"line_number": 568, "line_type": "generated", "code": "\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double s = work1[pj];\n                work1[pj] = lmDir[pj] * s;\n                sum", "entropy": 0.1641845703125, "is_bug_line": false, "sus_score": 0.829275369644165, "per_token_entropy": [0.19287109375, 0.2110595703125, 0.0008335113525390625, 0.00044536590576171875, 0.031524658203125, 0.0015125274658203125, 0.0006108283996582031, 0.0012140274047851562, 0.0003502368927001953, 0.000591278076171875, 0.0008478164672851562, 0.004261016845703125, 0.0008654594421386719, 0.001117706298828125, 0.002105712890625, 3.3020973205566406e-05, 0.00028228759765625, 0.0008854866027832031, 0.004055023193359375, 0.1837158203125, 0.0009288787841796875, 0.0001500844955444336, 0.0004031658172607422, 2.2530555725097656e-05, 9.167194366455078e-05, 0.0004673004150390625, 0.0029754638671875, 0.2467041015625, 0.71240234375, 0.0165863037109375, 0.476318359375, 0.039215087890625, 6.890296936035156e-05, 0.00403594970703125, 0.185546875, 0.00749969482421875, 1.263671875, 0.40625, 0.0014362335205078125, 0.00421142578125, 0.0002028942108154297, 0.314453125, 2.3203125, 0.04766845703125, 0.00043845176696777344, 0.0016412734985351562, 0.27783203125, 1.0947265625, 0.30078125, 0.049285888671875, 0.00789642333984375, 0.11590576171875], "tokens": [324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301, 400, 629, 46704, 280, 38151, 77, 92, 970, 400, 2064, 309, 280, 1389, 35, 77, 25287, 970, 400, 1389, 35, 77, 25287, 79, 280, 30780, 2976, 77, 25287, 79, 319, 309, 45, 400, 3632]}
{"line_number": 559, "line_type": "original", "code": "        double gNorm = Math.sqrt(sum2);", "entropy": 1.1728515625, "is_bug_line": false, "sus_score": 0.8291986584663391, "per_token_entropy": [4.0078125, 0.67138671875, 2.54296875, 1.9990234375, 2.12890625, 2.091796875, 0.0014667510986328125, 0.048004150390625, 0.0396728515625, 0.46142578125, 0.06585693359375, 0.0150146484375], "tokens": [351, 2064, 485, 14373, 280, 4175, 32, 8663, 26, 1036, 36, 293]}
{"line_number": 559, "line_type": "generated", "code": "\n            double temp1 = fp / delta;\n            double temp2 = previousFP / delta;\n            double parc = (fp > previousFP)?\n                    temp1 / Math.sqrt(1 + temp1 * temp1 / (temp2 * temp", "entropy": 0.30517578125, "is_bug_line": false, "sus_score": 0.8291986584663391, "per_token_entropy": [0.1478271484375, 0.4267578125, 1.0732421875, 1.2109375, 0.0494384765625, 1.7685546875, 0.003734588623046875, 0.01343536376953125, 0.01299285888671875, 0.014404296875, 0.07049560546875, 0.05194091796875, 0.00787353515625, 0.0006084442138671875, 0.464599609375, 0.00093841552734375, 0.0004425048828125, 0.2705078125, 0.00046324729919433594, 0.1300048828125, 0.08251953125, 0.9150390625, 0.00031566619873046875, 0.0232391357421875, 0.45947265625, 0.274658203125, 0.10284423828125, 0.5224609375, 1.3947486877441406e-05, 0.09710693359375, 0.05145263671875, 0.716796875, 1.162109375, 0.0027637481689453125, 0.008392333984375, 1.1630859375, 0.0004222393035888672, 1.236328125, 0.0020236968994140625, 0.291015625, 0.0357666015625, 0.1466064453125, 0.0003275871276855469, 0.0026836395263671875, 0.00037479400634765625, 0.376953125, 1.8896484375, 0.373046875, 0.214111328125, 3.1828880310058594e-05, 0.0005755424499511719, 0.0008001327514648438], "tokens": [324, 2064, 1779, 35, 280, 11828, 517, 7715, 45, 324, 2064, 1779, 36, 280, 4552, 9531, 517, 7715, 45, 324, 2064, 880, 85, 280, 308, 4426, 848, 4552, 9531, 27, 1018, 528, 1779, 35, 517, 4175, 32, 8663, 26, 35, 474, 1779, 35, 319, 1779, 35, 517, 308, 1433, 36, 319, 1779]}
{"line_number": 550, "line_type": "original", "code": "        for (int j = 0; j < solvedCols; ++j) {", "entropy": 0.890625, "is_bug_line": false, "sus_score": 0.828316330909729, "per_token_entropy": [6.640625, 8.5546875, 0.0093231201171875, 0.01116180419921875, 0.1697998046875, 0.0030498504638671875, 0.01125335693359375, 0.0024623870849609375, 0.0010843276977539062, 0.0081024169921875, 0.369140625, 0.1427001953125, 0.016357421875, 0.00951385498046875, 0.0023937225341796875, 0.00015354156494140625, 0.0038509368896484375, 0.070068359375], "tokens": [351, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 19479, 19911, 45, 3311, 92, 27, 301]}
{"line_number": 550, "line_type": "generated", "code": "\n                (parl == 0 && fp <= previousFP && fp < 0) ||\n                (paru == 0 && fp >= previousFP && fp > 0)) {\n                break;\n            }\n\n            // compute the Newton correction\n            for", "entropy": 0.1766357421875, "is_bug_line": false, "sus_score": 0.828316330909729, "per_token_entropy": [0.356201171875, 0.290771484375, 1.0458984375, 0.0005273818969726562, 0.0012102127075195312, 0.0002455711364746094, 4.76837158203125e-07, 0.09881591796875, 0.048370361328125, 0.001251220703125, 0.0005917549133300781, 0.0008282661437988281, 0.0304107666015625, 1.2392578125, 0.3505859375, 0.00457763671875, 4.76837158203125e-07, 0.162841796875, 0.106201171875, 1.2744140625, 0.013946533203125, 0.01367950439453125, 4.3511390686035156e-05, 0.004886627197265625, 0.107666015625, 0.0025272369384765625, 0.0002505779266357422, 0.01509857177734375, 0.1094970703125, 3.9696693420410156e-05, 4.4345855712890625e-05, 0.0006074905395507812, 0.00027871131896972656, 0.00045561790466308594, 8.046627044677734e-05, 0.0001709461212158203, 0.37255859375, 0.06561279296875, 0.2022705078125, 1.4453125, 0.0012121200561523438, 0.0100555419921875, 0.0003352165222167969, 0.0255126953125, 0.004852294921875, 0.01458740234375, 0.00042057037353515625, 0.1973876953125, 3.62396240234375e-05, 0.055877685546875, 0.05145263671875, 1.4599609375], "tokens": [400, 308, 568, 94, 610, 225, 34, 962, 11828, 2511, 4552, 9531, 962, 11828, 333, 225, 34, 27, 1276, 400, 308, 568, 103, 610, 225, 34, 962, 11828, 2377, 4552, 9531, 962, 11828, 848, 225, 34, 490, 301, 400, 1626, 45, 324, 320, 1064, 434, 7596, 322, 3136, 937, 25683, 324, 436]}
{"line_number": 599, "line_type": "original", "code": "            if ((Math.abs(fp) <= 0.1 * delta) ||", "entropy": 2.208984375, "is_bug_line": false, "sus_score": 0.8229730725288391, "per_token_entropy": [7.7109375, 7.1953125, 5.046875, 6.55859375, 0.003597259521484375, 0.0855712890625, 0.006992340087890625, 8.15625, 0.049957275390625, 1.2255859375, 1.716796875, 0.031707763671875, 0.0836181640625, 0.041717529296875, 1.0673828125, 0.109619140625, 0.228759765625, 0.443359375], "tokens": [1468, 415, 1833, 5717, 32, 3596, 26, 4426, 27, 2511, 225, 34, 32, 35, 319, 7715, 27, 1276]}
{"line_number": 599, "line_type": "generated", "code": "\n     * </ul>\n     * @param a a matrix\n     * @param b right-hand side vector\n     * @param d a diagonal matrix\n     */\n    private void determineLMDirection(final double[] a, final double[] b,\n            final", "entropy": 0.28857421875, "is_bug_line": false, "sus_score": 0.8229730725288391, "per_token_entropy": [0.63232421875, 0.02618408203125, 0.1728515625, 0.0008521080017089844, 0.01812744140625, 0.07635498046875, 0.03973388671875, 0.78125, 0.010406494140625, 0.474365234375, 1.603515625, 0.49951171875, 0.52392578125, 0.0002155303955078125, 0.0010585784912109375, 0.0003380775451660156, 0.578125, 1.1728515625, 0.238037109375, 0.0013275146484375, 0.20068359375, 0.6103515625, 0.053680419921875, 0.00849151611328125, 0.000606536865234375, 0.0026340484619140625, 0.00859832763671875, 1.7958984375, 0.99853515625, 0.00656890869140625, 0.1243896484375, 0.480712890625, 0.0231475830078125, 0.2529296875, 0.03216552734375, 0.880859375, 0.03973388671875, 0.0032329559326171875, 0.00028395652770996094, 0.0123443603515625, 0.60205078125, 0.07916259765625, 0.331787109375, 0.07562255859375, 0.0005774497985839844, 0.5869140625, 0.0004134178161621094, 0.0007529258728027344, 0.0204010009765625, 0.0002703666687011719, 0.87939453125, 0.04437255859375], "tokens": [275, 319, 576, 338, 48, 275, 319, 477, 753, 312, 312, 5045, 275, 319, 477, 753, 323, 2091, 31, 4668, 5209, 4026, 275, 319, 477, 753, 343, 312, 27601, 5045, 275, 569, 284, 945, 763, 9921, 62, 5108, 2721, 26, 3220, 2064, 1178, 312, 30, 1158, 2064, 1178, 323, 30, 324, 1158]}
