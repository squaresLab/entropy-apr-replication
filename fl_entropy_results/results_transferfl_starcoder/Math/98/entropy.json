{"line_number": 994, "line_type": "original", "code": "            for (int i = 0; i < nCols; i++) {", "entropy": 1.3984375, "is_bug_line": false, "sus_score": 0.4582134187221527, "per_token_entropy": [5.21484375, 9.8828125, 0.427734375, 0.262939453125, 1.3779296875, 0.06292724609375, 0.0109100341796875, 0.0032978057861328125, 0.04754638671875, 0.00659942626953125, 0.296875, 4.4453125, 1.4287109375, 0.018218994140625, 0.05181884765625, 0.04608154296875, 0.1744384765625], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 310, 19911, 45, 595, 1987, 301]}
{"line_number": 994, "line_type": "generated", "code": "\n     *\n     * @param b an array of constant vectors\n     * @return a matrix of solution vectors\n     * @throws IllegalArgumentException if the dimensions of the matrix and the\n     *         vectors don't match\n     * @throws NoInverseException if the matrix is", "entropy": 0.46630859375, "is_bug_line": false, "sus_score": 0.4582134187221527, "per_token_entropy": [0.82470703125, 0.0079345703125, 0.923828125, 0.0012569427490234375, 0.0294342041015625, 0.013275146484375, 0.30126953125, 2.208984375, 0.1689453125, 0.255859375, 1.1884765625, 0.352294921875, 0.0970458984375, 0.0004870891571044922, 0.0041046142578125, 0.0194854736328125, 0.8017578125, 0.36279296875, 0.214599609375, 0.69873046875, 0.0022296905517578125, 0.08740234375, 0.006877899169921875, 0.02777099609375, 0.02410888671875, 0.043212890625, 0.1436767578125, 1.1689453125, 2.5625, 0.7919921875, 0.29248046875, 0.986328125, 0.316162109375, 0.1878662109375, 0.16259765625, 0.0003147125244140625, 1.2109375, 0.309814453125, 0.4208984375, 0.006748199462890625, 0.4384765625, 0.80517578125, 0.708984375, 0.023101806640625, 0.055938720703125, 0.91650390625, 1.6279296875, 0.029205322265625, 0.08282470703125, 2.21875, 0.09588623046875, 0.01556396484375], "tokens": [275, 319, 275, 319, 477, 753, 323, 600, 1417, 432, 8082, 16540, 275, 319, 477, 601, 312, 5045, 432, 5295, 16540, 275, 319, 477, 5117, 12137, 415, 322, 13135, 432, 322, 5045, 461, 322, 275, 319, 263, 16540, 2800, 1330, 2530, 275, 319, 477, 5117, 3139, 23173, 984, 415, 322, 5045, 438]}
{"line_number": 783, "line_type": "original", "code": "     *", "entropy": 2.4296875, "is_bug_line": false, "sus_score": 0.45806437730789185, "per_token_entropy": [4.73828125, 0.12091064453125], "tokens": [262, 319]}
{"line_number": 783, "line_type": "generated", "code": "\n     * @param row  row location of entry to be fetched\n     * @param column  column location of entry to be fetched\n     * @return the matrix entry in the specified row and column\n     * @throws MatrixIndexException if the row or column index", "entropy": 0.1524658203125, "is_bug_line": false, "sus_score": 0.45806437730789185, "per_token_entropy": [0.113037109375, 0.004428863525390625, 0.04638671875, 0.003757476806640625, 0.0002646446228027344, 0.84765625, 0.1773681640625, 1.0595703125, 0.003021240234375, 0.244384765625, 0.302001953125, 0.0232696533203125, 0.004436492919921875, 0.015869140625, 3.3974647521972656e-05, 0.00015270709991455078, 0.0001627206802368164, 0.1348876953125, 0.0816650390625, 0.00153350830078125, 0.00327301025390625, 0.0017461776733398438, 0.00048804283142089844, 0.000308990478515625, 0.0003275871276855469, 0.0003592967987060547, 0.0296630859375, 0.0004093647003173828, 0.003604888916015625, 0.0094451904296875, 1.48046875, 0.029876708984375, 0.0199432373046875, 0.85107421875, 0.73388671875, 0.08709716796875, 0.0097808837890625, 0.012725830078125, 0.0002803802490234375, 0.183837890625, 0.00217437744140625, 0.0027751922607421875, 0.07080078125, 0.009063720703125, 0.0016164779663085938, 0.00014483928680419922, 0.1287841796875, 0.1641845703125, 0.2861328125, 0.2000732421875, 0.0287322998046875, 0.50830078125], "tokens": [275, 319, 477, 753, 2698, 225, 2698, 3894, 432, 3414, 372, 526, 27535, 275, 319, 477, 753, 2623, 225, 2623, 3894, 432, 3414, 372, 526, 27535, 275, 319, 477, 601, 322, 5045, 3414, 328, 322, 3191, 2698, 461, 2623, 275, 319, 477, 5117, 9320, 1284, 984, 415, 322, 2698, 556, 2623, 1650]}
{"line_number": 986, "line_type": "original", "code": "        if (v.length != this.getColumnDimension()) {", "entropy": 1.2978515625, "is_bug_line": false, "sus_score": 0.44270265102386475, "per_token_entropy": [4.8984375, 4.09375, 0.231201171875, 3.73046875, 0.77490234375, 0.023834228515625, 0.0188446044921875, 2.076171875, 0.005260467529296875, 0.92822265625, 0.0003235340118408203, 0.042694091796875, 0.053497314453125], "tokens": [351, 415, 308, 104, 32, 1322, 863, 458, 32, 19239, 9883, 1157, 301]}
{"line_number": 986, "line_type": "generated", "code": "\n            out[col] = sum;\n        }\n        return out;\n    }\n    \n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector", "entropy": 0.021514892578125, "is_bug_line": false, "sus_score": 0.44270265102386475, "per_token_entropy": [0.2105712890625, 0.203857421875, 0.001739501953125, 0.06683349609375, 0.00283050537109375, 0.0012292861938476562, 0.004673004150390625, 0.016571044921875, 0.0435791015625, 0.0012445449829101562, 0.053802490234375, 0.0016031265258789062, 0.0006771087646484375, 0.0013980865478515625, 0.036102294921875, 0.0003228187561035156, 0.15380859375, 0.01678466796875, 0.011932373046875, 0.0001310110092163086, 0.035614013671875, 0.00914764404296875, 0.047271728515625, 0.0843505859375, 0.0007786750793457031, 0.0010318756103515625, 0.001678466796875, 0.00044345855712890625, 0.033935546875, 0.0001220703125, 2.396106719970703e-05, 0.01418304443359375, 0.002407073974609375, 0.0009045600891113281, 0.009368896484375, 0.0027103424072265625, 0.0002256631851196289, 0.00011074542999267578, 0.0005731582641601562, 9.85860824584961e-05, 2.5391578674316406e-05, 0.0022144317626953125, 0.0011034011840820312, 4.279613494873047e-05, 0.0067138671875, 0.0003037452697753906, 0.0003330707550048828, 0.00010478496551513672, 0.0015459060668945312, 0.0015277862548828125, 0.0299224853515625, 0.0003788471221923828], "tokens": [324, 963, 77, 748, 79, 280, 3632, 45, 291, 320, 291, 442, 963, 45, 284, 320, 2170, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026]}
{"line_number": 774, "line_type": "original", "code": "        }", "entropy": 4.29296875, "is_bug_line": false, "sus_score": 0.44179388880729675, "per_token_entropy": [4.15625, 4.4296875], "tokens": [351, 320]}
{"line_number": 774, "line_type": "generated", "code": "\n     * Returns the entries in the specified row/column as a one-dimensional\n     * array.\n     * <p>\n     * Row and column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n     * unless", "entropy": 0.1829833984375, "is_bug_line": false, "sus_score": 0.44179388880729675, "per_token_entropy": [0.8623046875, 0.424560546875, 0.80029296875, 0.144775390625, 0.363037109375, 0.227294921875, 0.047760009765625, 0.119873046875, 0.01373291015625, 1.251953125, 0.0007886886596679688, 0.206787109375, 0.05517578125, 0.1572265625, 0.0017910003662109375, 0.0209197998046875, 0.0631103515625, 8.749961853027344e-05, 0.367431640625, 0.2064208984375, 0.435791015625, 0.0004153251647949219, 0.1483154296875, 0.00891876220703125, 0.0019245147705078125, 0.09930419921875, 3.4332275390625e-05, 0.0811767578125, 0.0933837890625, 0.039031982421875, 0.0159149169921875, 0.0006194114685058594, 0.00031757354736328125, 0.0021209716796875, 9.655952453613281e-06, 0.309326171875, 0.084716796875, 0.285888671875, 0.0200347900390625, 0.0007052421569824219, 4.9948692321777344e-05, 0.006374359130859375, 0.0024662017822265625, 9.965896606445312e-05, 0.0006937980651855469, 0.00024008750915527344, 8.428096771240234e-05, 1.0859375, 1.345703125, 0.11187744140625, 6.246566772460938e-05, 0.0003600120544433594], "tokens": [275, 319, 3759, 322, 8036, 328, 322, 3191, 2698, 33, 2592, 619, 312, 1591, 31, 25906, 275, 319, 1417, 32, 275, 319, 333, 98, 48, 275, 319, 5570, 461, 2623, 10193, 1477, 821, 225, 34, 32, 225, 399, 333, 687, 48, 4161, 1284, 984, 377, 687, 48, 438, 12163, 275, 319, 7351]}
{"line_number": 989, "line_type": "original", "code": "        final int nRows = this.getRowDimension();", "entropy": 0.75830078125, "is_bug_line": false, "sus_score": 0.44159355759620667, "per_token_entropy": [5.203125, 1.962890625, 0.09979248046875, 0.0479736328125, 0.97021484375, 0.0033359527587890625, 0.04022216796875, 0.0005521774291992188, 0.00933074951171875, 3.9577484130859375e-05, 0.00360107421875], "tokens": [351, 1158, 629, 310, 7252, 280, 458, 32, 30093, 9883, 473]}
{"line_number": 989, "line_type": "generated", "code": "\n    }\n    \n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector to premultiply by\n     * @return v*this\n     * @", "entropy": 0.05023193359375, "is_bug_line": false, "sus_score": 0.44159355759620667, "per_token_entropy": [0.80810546875, 1.0556640625, 0.3017578125, 0.0209808349609375, 0.0199737548828125, 0.0001239776611328125, 0.052825927734375, 0.0185394287109375, 0.09710693359375, 0.09033203125, 0.0006895065307617188, 0.0011272430419921875, 0.001850128173828125, 0.0002758502960205078, 0.037353515625, 0.00016689300537109375, 2.491474151611328e-05, 0.0281219482421875, 0.00305938720703125, 0.0007967948913574219, 0.018035888671875, 0.003376007080078125, 0.00021755695343017578, 0.0002665519714355469, 0.0008563995361328125, 0.00012803077697753906, 2.110004425048828e-05, 0.0024547576904296875, 0.001186370849609375, 4.601478576660156e-05, 0.00559234619140625, 0.00019097328186035156, 0.00038814544677734375, 8.654594421386719e-05, 0.002933502197265625, 0.0013628005981445312, 0.023101806640625, 0.00034880638122558594, 8.380413055419922e-05, 0.0014276504516601562, 0.00023818016052246094, 0.0005984306335449219, 0.0009617805480957031, 5.245208740234375e-06, 0.0002014636993408203, 0.0012617111206054688, 0.00322723388671875, 0.0007910728454589844, 0.0005474090576171875, 0.0006618499755859375, 0.0008196830749511719, 8.368492126464844e-05], "tokens": [284, 320, 2170, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026, 372, 1406, 20123, 810, 275, 319, 477, 601, 354, 28, 578, 275, 319, 477]}
{"line_number": 995, "line_type": "original", "code": "                sum = sum.add(data[row][i].multiply(v[i]));", "entropy": 1.8310546875, "is_bug_line": false, "sus_score": 0.43904104828834534, "per_token_entropy": [9.015625, 12.0078125, 1.9033203125, 3.23828125, 0.1710205078125, 0.132568359375, 0.033416748046875, 0.66259765625, 0.0099945068359375, 2.220703125, 0.0208587646484375, 2.76171875, 0.146484375, 0.0118255615234375, 0.01424407958984375, 2.107421875, 0.046051025390625, 0.24951171875, 0.039459228515625], "tokens": [2071, 3632, 280, 3632, 32, 669, 26, 605, 77, 643, 1674, 91, 997, 20123, 26, 104, 77, 91, 10674]}
{"line_number": 995, "line_type": "generated", "code": "\n     *\n     * @param b the right-hand-side vectors\n     * @return matrix of solution vectors\n     * @throws IllegalArgumentException if the matrices are not conformable\n     */\n    public BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException {\n        final int", "entropy": 0.36572265625, "is_bug_line": false, "sus_score": 0.43904104828834534, "per_token_entropy": [0.323486328125, 0.100830078125, 0.869140625, 0.0066986083984375, 0.03936767578125, 0.00982666015625, 0.0222625732421875, 1.689453125, 0.58740234375, 0.49365234375, 0.0006260871887207031, 1.259765625, 0.004558563232421875, 1.1484375, 0.3251953125, 0.0004248619079589844, 0.006786346435546875, 0.0226287841796875, 1.837890625, 0.061004638671875, 0.3583984375, 0.001544952392578125, 0.142822265625, 0.0072021484375, 0.0248260498046875, 0.036865234375, 0.0836181640625, 0.096923828125, 1.6025390625, 1.0478515625, 0.336669921875, 0.461181640625, 0.445068359375, 0.342529296875, 0.404052734375, 0.2257080078125, 0.0201568603515625, 0.00789642333984375, 0.05206298828125, 1.896484375, 0.138671875, 0.036590576171875, 0.073974609375, 0.3623046875, 0.1600341796875, 0.001827239990234375, 0.2056884765625, 0.0362548828125, 0.032440185546875, 0.11785888671875, 1.2900390625, 0.1541748046875], "tokens": [275, 319, 275, 319, 477, 753, 323, 322, 2091, 31, 4668, 31, 2671, 16540, 275, 319, 477, 601, 5045, 432, 5295, 16540, 275, 319, 477, 5117, 12137, 415, 322, 23784, 884, 646, 30526, 444, 275, 569, 284, 562, 17280, 1178, 10932, 26, 20827, 1178, 323, 27, 2571, 12137, 301, 291, 1158, 629]}
{"line_number": 775, "line_type": "original", "code": "        return out;", "entropy": 5.7109375, "is_bug_line": false, "sus_score": 0.43659427762031555, "per_token_entropy": [5.1640625, 5.953125, 11.1796875, 0.54833984375], "tokens": [351, 442, 963, 45]}
{"line_number": 775, "line_type": "generated", "code": "\n     * <p>\n     * Row and column indices start at 0.  A <code>MatrixIndexException</code>\n     * is thrown unless <code>0 <= row < rowDimension</code> and\n     * <code>0 <=", "entropy": 0.051788330078125, "is_bug_line": false, "sus_score": 0.43659427762031555, "per_token_entropy": [0.273193359375, 0.052764892578125, 0.2322998046875, 0.005153656005859375, 0.0008826255798339844, 0.09698486328125, 0.0001518726348876953, 0.040130615234375, 0.026611328125, 0.0165252685546875, 0.00334930419921875, 0.0005393028259277344, 0.00022685527801513672, 0.0035457611083984375, 1.0132789611816406e-05, 0.2352294921875, 0.11065673828125, 0.0230712890625, 0.0225982666015625, 0.0005316734313964844, 3.7789344787597656e-05, 0.0014781951904296875, 0.001110076904296875, 0.0001493692398071289, 0.0013246536254882812, 0.0003662109375, 4.6372413635253906e-05, 0.63818359375, 4.220008850097656e-05, 0.0028476715087890625, 0.00939178466796875, 0.0011682510375976562, 0.049041748046875, 0.006927490234375, 0.05926513671875, 0.0404052734375, 0.037506103515625, 0.128173828125, 0.00135040283203125, 0.0020236968994140625, 0.0183868408203125, 0.2210693359375, 9.85860824584961e-05, 0.00015115737915039062, 0.0300750732421875, 0.263916015625, 5.424022674560547e-05, 0.0001913309097290039, 0.00039577484130859375, 1.6927719116210938e-05, 0.01531219482421875, 0.0185089111328125], "tokens": [275, 319, 333, 98, 48, 275, 319, 5570, 461, 2623, 10193, 1477, 821, 225, 34, 32, 225, 399, 333, 687, 48, 4161, 1284, 984, 377, 687, 48, 275, 319, 438, 12163, 7351, 333, 687, 48, 34, 2511, 2698, 333, 2698, 9883, 377, 687, 48, 461, 275, 319, 333, 687, 48, 34, 2511]}
{"line_number": 780, "line_type": "original", "code": "     * <p>", "entropy": 2.703125, "is_bug_line": false, "sus_score": 0.43502509593963623, "per_token_entropy": [4.796875, 0.49609375, 4.34375, 3.7890625, 0.0875244140625], "tokens": [262, 319, 333, 98, 48]}
{"line_number": 780, "line_type": "generated", "code": "\n     * </ul>\n     * A <code>MatrixIndexException</code> is thrown unless the preconditions are met.</p>\n     *\n     * @param row  row of the entry to be fetched\n     * @param column  column of the", "entropy": 0.1336669921875, "is_bug_line": false, "sus_score": 0.43502509593963623, "per_token_entropy": [0.06292724609375, 0.031494140625, 0.0188446044921875, 0.0010309219360351562, 0.08355712890625, 0.09332275390625, 0.003276824951171875, 2.0859375, 0.01258087158203125, 0.0010089874267578125, 0.00015592575073242188, 0.007808685302734375, 0.004352569580078125, 0.0003275871276855469, 0.00502777099609375, 5.507469177246094e-05, 0.00014328956604003906, 0.058441162109375, 0.0189056396484375, 0.369384765625, 0.69384765625, 0.346923828125, 0.0623779296875, 0.378173828125, 0.2447509765625, 0.2191162109375, 0.005382537841796875, 0.0029582977294921875, 0.0628662109375, 0.00193023681640625, 0.1888427734375, 0.00015747547149658203, 0.008026123046875, 0.0024204254150390625, 0.0003216266632080078, 0.7587890625, 0.18603515625, 0.74462890625, 0.0682373046875, 0.0017137527465820312, 0.02020263671875, 0.00887298583984375, 0.0035305023193359375, 0.00595855712890625, 2.0503997802734375e-05, 4.589557647705078e-05, 0.0002002716064453125, 0.056793212890625, 0.0200653076171875, 0.0013637542724609375, 0.0003306865692138672, 0.001125335693359375], "tokens": [275, 319, 576, 338, 48, 275, 319, 399, 333, 687, 48, 4161, 1284, 984, 377, 687, 48, 438, 12163, 7351, 322, 1406, 8425, 884, 3279, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 2698, 225, 2698, 432, 322, 3414, 372, 526, 27535, 275, 319, 477, 753, 2623, 225, 2623, 432, 322]}
{"line_number": 992, "line_type": "original", "code": "        for (int row = 0; row < nRows; row++) {", "entropy": 0.50341796875, "is_bug_line": false, "sus_score": 0.43280717730522156, "per_token_entropy": [3.34765625, 3.521484375, 0.021087646484375, 0.00907135009765625, 1.3154296875, 0.0176239013671875, 0.034576416015625, 0.0005612373352050781, 0.004039764404296875, 0.0024356842041015625, 0.007053375244140625, 0.208740234375, 0.006740570068359375, 0.0026531219482421875, 0.0183563232421875, 0.01158905029296875, 0.0249176025390625], "tokens": [351, 436, 308, 410, 2698, 280, 225, 34, 45, 2698, 333, 310, 7252, 45, 2698, 1987, 301]}
{"line_number": 992, "line_type": "generated", "code": "\n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector to premultiply by\n     * @return v*this\n     * @throws IllegalArgumentException", "entropy": 0.060028076171875, "is_bug_line": false, "sus_score": 0.43280717730522156, "per_token_entropy": [1.7294921875, 0.399658203125, 0.12042236328125, 0.0012540817260742188, 0.2015380859375, 0.092529296875, 0.2142333984375, 0.144287109375, 0.0005035400390625, 0.0016145706176757812, 0.002941131591796875, 0.00046825408935546875, 0.037139892578125, 0.00042438507080078125, 3.516674041748047e-05, 0.0289154052734375, 0.005352020263671875, 0.0021514892578125, 0.036956787109375, 0.01264190673828125, 0.0005278587341308594, 9.298324584960938e-06, 0.0018911361694335938, 0.0003046989440917969, 2.384185791015625e-05, 0.00360107421875, 0.0093231201171875, 0.0006585121154785156, 0.01503753662109375, 9.02414321899414e-05, 0.00044608116149902344, 0.0003535747528076172, 0.00617218017578125, 0.0021266937255859375, 0.0265960693359375, 0.00045871734619140625, 0.00011730194091796875, 0.0018014907836914062, 0.0001970529556274414, 0.000637054443359375, 0.0013742446899414062, 1.4543533325195312e-05, 6.16312026977539e-05, 0.003162384033203125, 0.004291534423828125, 0.0010938644409179688, 0.0006976127624511719, 0.002086639404296875, 0.0011844635009765625, 0.00044536590576171875, 0.0004208087921142578, 0.002529144287109375], "tokens": [284, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026, 372, 1406, 20123, 810, 275, 319, 477, 601, 354, 28, 578, 275, 319, 477, 5117, 12137]}
{"line_number": 776, "line_type": "original", "code": "    }", "entropy": 5.0703125, "is_bug_line": false, "sus_score": 0.42826730012893677, "per_token_entropy": [3.58984375, 6.55078125], "tokens": [264, 320]}
{"line_number": 776, "line_type": "generated", "code": "\n     * Row and column indices start at 0.  A <code>MatrixIndexException</code> is\n     * thrown unless <code>0 <= row < rowDimension</code> and\n     * <code>0 <= column < columnDimension</", "entropy": 0.0924072265625, "is_bug_line": false, "sus_score": 0.42826730012893677, "per_token_entropy": [0.7607421875, 0.0272216796875, 0.52587890625, 0.0665283203125, 0.0277252197265625, 0.00391387939453125, 0.0010833740234375, 0.0001729726791381836, 0.004077911376953125, 1.7523765563964844e-05, 0.224609375, 0.2161865234375, 0.0309600830078125, 0.0350341796875, 0.0007119178771972656, 6.61611557006836e-05, 0.001678466796875, 0.0010499954223632812, 0.0001634359359741211, 0.001651763916015625, 0.0002474784851074219, 7.05718994140625e-05, 0.84375, 0.83837890625, 0.00018012523651123047, 0.00786590576171875, 0.0012989044189453125, 0.038848876953125, 0.021575927734375, 0.1142578125, 0.0311126708984375, 0.0703125, 0.11126708984375, 0.001293182373046875, 0.00264739990234375, 0.0181884765625, 0.314208984375, 0.0001811981201171875, 0.00019216537475585938, 0.0221099853515625, 0.3291015625, 0.0018815994262695312, 0.00046181678771972656, 0.0006823539733886719, 1.7881393432617188e-05, 0.0131378173828125, 0.023345947265625, 0.002399444580078125, 0.00189208984375, 0.00875091552734375, 0.0033512115478515625, 0.05303955078125], "tokens": [275, 319, 5570, 461, 2623, 10193, 1477, 821, 225, 34, 32, 225, 399, 333, 687, 48, 4161, 1284, 984, 377, 687, 48, 438, 275, 319, 12163, 7351, 333, 687, 48, 34, 2511, 2698, 333, 2698, 9883, 377, 687, 48, 461, 275, 319, 333, 687, 48, 34, 2511, 2623, 333, 2623, 9883, 377]}
{"line_number": 154, "line_type": "original", "code": "                if (d[r].length != nCols) {", "entropy": 1.2099609375, "is_bug_line": false, "sus_score": 0.4188343286514282, "per_token_entropy": [7.62890625, 3.07421875, 0.1689453125, 0.78466796875, 0.4091796875, 3.09375, 0.2301025390625, 0.060821533203125, 0.0283355712890625, 0.07476806640625, 0.01082611083984375, 0.021270751953125, 0.141845703125], "tokens": [2071, 415, 308, 86, 77, 100, 997, 1322, 863, 310, 19911, 27, 301]}
{"line_number": 154, "line_type": "generated", "code": "\n    public BigMatrixImpl(String[][] d) {\n        final int nRows = d.length;\n        if (nRows == 0) {\n            throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\"); \n        }\n        final int n", "entropy": 0.04754638671875, "is_bug_line": false, "sus_score": 0.4188343286514282, "per_token_entropy": [0.81201171875, 0.349365234375, 0.01044464111328125, 0.00039505958557128906, 0.0016679763793945312, 0.0115814208984375, 0.048583984375, 0.08673095703125, 0.00897216796875, 0.0218505859375, 0.045440673828125, 0.2310791015625, 0.3564453125, 0.0090484619140625, 0.006877899169921875, 0.001354217529296875, 0.002349853515625, 0.005664825439453125, 0.0008001327514648438, 0.00034332275390625, 0.00179290771484375, 0.0258636474609375, 0.01197052001953125, 0.0005035400390625, 0.0014820098876953125, 0.00011718273162841797, 0.0020542144775390625, 7.18832015991211e-05, 3.981590270996094e-05, 0.0008955001831054688, 0.002506256103515625, 0.0244293212890625, 0.0035495758056640625, 0.00018024444580078125, 0.007205963134765625, 0.2034912109375, 0.083984375, 0.00148773193359375, 0.00562286376953125, 0.0004878044128417969, 0.00013816356658935547, 0.0003409385681152344, 6.914138793945312e-05, 0.00015115737915039062, 0.0006661415100097656, 0.003673553466796875, 0.052154541015625, 0.00024700164794921875, 0.01342010498046875, 0.01100921630859375, 0.0007071495056152344, 0.0004589557647705078], "tokens": [284, 562, 7758, 4161, 3482, 26, 652, 11336, 343, 27, 301, 291, 1158, 629, 310, 7252, 280, 343, 32, 1322, 45, 291, 415, 308, 96, 7252, 610, 225, 34, 27, 301, 324, 1422, 537, 12137, 26, 324, 313, 4161, 2298, 1159, 821, 6225, 1591, 2698, 5368, 4456, 320, 291, 1158, 629, 310]}
{"line_number": 990, "line_type": "original", "code": "        final int nCols = this.getColumnDimension();", "entropy": 1.23828125, "is_bug_line": false, "sus_score": 0.4023262560367584, "per_token_entropy": [5.08984375, 5.859375, 1.0400390625, 0.252685546875, 1.2939453125, 0.003826141357421875, 0.06982421875, 0.0019817352294921875, 0.0010776519775390625, 5.4955482482910156e-05, 0.0027790069580078125], "tokens": [351, 1158, 629, 310, 19911, 280, 458, 32, 19239, 9883, 473]}
{"line_number": 990, "line_type": "generated", "code": "\n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector to premultiply by\n     * @return v*this\n     * @throws IllegalArgumentException", "entropy": 0.0445556640625, "is_bug_line": false, "sus_score": 0.4023262560367584, "per_token_entropy": [1.0927734375, 0.17333984375, 0.05389404296875, 0.00023376941680908203, 0.1920166015625, 0.0841064453125, 0.286376953125, 0.1668701171875, 0.0005869865417480469, 0.002071380615234375, 0.003631591796875, 0.0004687309265136719, 0.08349609375, 0.00038743019104003906, 2.1457672119140625e-05, 0.051971435546875, 0.005176544189453125, 0.0016145706176757812, 0.0452880859375, 0.007781982421875, 0.0003306865692138672, 5.125999450683594e-05, 0.0018100738525390625, 0.00028443336486816406, 2.968311309814453e-05, 0.004852294921875, 0.0018253326416015625, 0.00017976760864257812, 0.006847381591796875, 7.414817810058594e-05, 0.0004107952117919922, 0.00016105175018310547, 0.00446319580078125, 0.0014171600341796875, 0.022857666015625, 0.000385284423828125, 0.0001188516616821289, 0.001483917236328125, 0.00022172927856445312, 0.0005588531494140625, 0.0008306503295898438, 1.5735626220703125e-05, 0.0001685619354248047, 0.003520965576171875, 0.004299163818359375, 0.0013055801391601562, 0.0008502006530761719, 0.0007677078247070312, 0.0016050338745117188, 0.0001270771026611328, 0.0002911090850830078, 0.00170135498046875], "tokens": [284, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026, 372, 1406, 20123, 810, 275, 319, 477, 601, 354, 28, 578, 275, 319, 477, 5117, 12137]}
{"line_number": 779, "line_type": "original", "code": "     * Returns the entries in column number <code>col</code> as an array.", "entropy": 1.3212890625, "is_bug_line": true, "sus_score": 0.3976830840110779, "per_token_entropy": [3.611328125, 0.1453857421875, 14.5546875, 0.05322265625, 2.453125, 0.1356201171875, 2.890625, 0.0234832763671875, 0.0252227783203125, 0.00653076171875, 0.0011472702026367188, 0.09039306640625, 0.007579803466796875, 0.00022161006927490234, 0.0274200439453125, 0.12139892578125, 0.207275390625, 0.0254974365234375, 0.73291015625], "tokens": [262, 319, 3759, 322, 8036, 328, 2623, 1451, 333, 687, 48, 748, 377, 687, 48, 619, 600, 1417, 32]}
{"line_number": 779, "line_type": "generated", "code": "\n     * </ul>\n     * A <code>MatrixIndexException</code> is thrown if either index is invalid.</p>\n     *\n     * @param row  row index of entry to be fetched\n     * @param column  column index of entry", "entropy": 0.171630859375, "is_bug_line": true, "sus_score": 0.3976830840110779, "per_token_entropy": [0.0802001953125, 0.01197052001953125, 0.95068359375, 0.003875732421875, 0.2069091796875, 0.080322265625, 0.006290435791015625, 1.1689453125, 0.00733184814453125, 0.0007266998291015625, 9.393692016601562e-05, 0.004550933837890625, 0.0026836395263671875, 0.00028228759765625, 0.00452423095703125, 8.058547973632812e-05, 9.834766387939453e-05, 0.06585693359375, 0.0162200927734375, 1.3056640625, 0.04718017578125, 0.006954193115234375, 0.051239013671875, 0.470458984375, 1.0927734375, 0.006961822509765625, 0.002223968505859375, 0.047149658203125, 0.00281524658203125, 0.205810546875, 0.00015842914581298828, 0.0091094970703125, 0.00241851806640625, 0.0001800060272216797, 0.84423828125, 0.2325439453125, 1.3193359375, 0.171875, 0.1785888671875, 0.01018524169921875, 0.0029277801513671875, 0.0016660690307617188, 0.017669677734375, 1.5497207641601562e-05, 7.43865966796875e-05, 0.00038313865661621094, 0.245361328125, 0.028472900390625, 0.00112152099609375, 0.0010938644409179688, 0.0020694732666015625, 0.0009007453918457031], "tokens": [275, 319, 576, 338, 48, 275, 319, 399, 333, 687, 48, 4161, 1284, 984, 377, 687, 48, 438, 12163, 415, 3154, 1650, 438, 5535, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 2698, 225, 2698, 1650, 432, 3414, 372, 526, 27535, 275, 319, 477, 753, 2623, 225, 2623, 1650, 432, 3414]}
{"line_number": 991, "line_type": "original", "code": "        final BigDecimal[] out = new BigDecimal[v.length];", "entropy": 1.3525390625, "is_bug_line": true, "sus_score": 0.3972943127155304, "per_token_entropy": [4.65625, 7.69921875, 0.52099609375, 0.7021484375, 0.3056640625, 0.04888916015625, 0.0186767578125, 0.000579833984375, 0.0100555419921875, 3.486328125, 0.0479736328125, 0.0643310546875, 0.01070404052734375], "tokens": [351, 1158, 17280, 1178, 963, 280, 537, 17280, 77, 104, 32, 1322, 970]}
{"line_number": 991, "line_type": "generated", "code": "\n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector to premultiply by\n     * @return v*this\n     * @throws IllegalArgumentException", "entropy": 0.0479736328125, "is_bug_line": true, "sus_score": 0.3972943127155304, "per_token_entropy": [0.9853515625, 0.210205078125, 0.05108642578125, 0.00018393993377685547, 0.2342529296875, 0.11669921875, 0.421142578125, 0.1551513671875, 0.0006084442138671875, 0.003017425537109375, 0.0038604736328125, 0.0004944801330566406, 0.10009765625, 0.00041031837463378906, 2.0265579223632812e-05, 0.06744384765625, 0.00592803955078125, 0.0017261505126953125, 0.04779052734375, 0.0079345703125, 0.0003724098205566406, 8.213520050048828e-05, 0.0018815994262695312, 0.0003809928894042969, 2.3245811462402344e-05, 0.005504608154296875, 0.0016231536865234375, 0.0002262592315673828, 0.0071563720703125, 6.592273712158203e-05, 0.0004639625549316406, 0.0002143383026123047, 0.00698089599609375, 0.0016069412231445312, 0.02716064453125, 0.0004162788391113281, 0.00015044212341308594, 0.0016717910766601562, 0.00021517276763916016, 0.00060272216796875, 0.0008363723754882812, 1.7642974853515625e-05, 0.00020325183868408203, 0.00972747802734375, 0.004764556884765625, 0.00127410888671875, 0.0008416175842285156, 0.0007991790771484375, 0.0017900466918945312, 0.00015103816986083984, 0.0004303455352783203, 0.00231170654296875], "tokens": [284, 1022, 275, 319, 3759, 322, 308, 643, 27, 4026, 1056, 432, 1406, 20123, 299, 458, 810, 322, 4026, 333, 687, 48, 104, 377, 687, 4503, 275, 319, 275, 319, 477, 753, 354, 322, 2698, 4026, 372, 1406, 20123, 810, 275, 319, 477, 601, 354, 28, 578, 275, 319, 477, 5117, 12137]}
{"line_number": 993, "line_type": "original", "code": "            BigDecimal sum = ZERO;", "entropy": 5.796875, "is_bug_line": false, "sus_score": 0.39721712470054626, "per_token_entropy": [7.046875, 13.203125, 14.1328125, 0.2362060546875, 0.1365966796875, 0.032470703125], "tokens": [1468, 17280, 3632, 280, 20024, 45]}
{"line_number": 993, "line_type": "generated", "code": "\n     * this as the coefficient matrix and the vector <code>v</code> as the\n     * right-hand side.\n     *\n     * @param v the right-hand side vector\n     * @return matrix of solution vectors\n     * @throws IllegalArgumentException", "entropy": 0.233642578125, "is_bug_line": false, "sus_score": 0.39721712470054626, "per_token_entropy": [0.59912109375, 0.0029010772705078125, 0.94970703125, 0.62646484375, 0.72607421875, 0.10888671875, 0.023773193359375, 0.5966796875, 0.3203125, 1.3779296875, 0.42626953125, 0.018463134765625, 4.875659942626953e-05, 0.1383056640625, 0.0016546249389648438, 0.0006766319274902344, 0.004413604736328125, 0.0083465576171875, 0.08624267578125, 0.3623046875, 0.0001443624496459961, 0.68994140625, 0.19140625, 9.870529174804688e-05, 0.070556640625, 0.2110595703125, 0.32958984375, 0.001190185546875, 0.453369140625, 0.00021886825561523438, 0.0265045166015625, 0.003505706787109375, 0.051788330078125, 0.72900390625, 0.1405029296875, 0.1859130859375, 0.00014066696166992188, 0.072265625, 0.2344970703125, 0.274658203125, 0.00018393993377685547, 0.005523681640625, 0.0126953125, 1.3623046875, 0.021514892578125, 0.423095703125, 0.003131866455078125, 0.099609375, 0.007415771484375, 0.012969970703125, 0.0160675048828125, 0.137451171875], "tokens": [275, 319, 458, 619, 322, 17134, 5045, 461, 322, 4026, 333, 687, 48, 104, 377, 687, 48, 619, 322, 275, 319, 2091, 31, 4668, 5209, 32, 275, 319, 275, 319, 477, 753, 354, 322, 2091, 31, 4668, 5209, 4026, 275, 319, 477, 601, 5045, 432, 5295, 16540, 275, 319, 477, 5117, 12137]}
{"line_number": 781, "line_type": "original", "code": "     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown", "entropy": 0.76708984375, "is_bug_line": false, "sus_score": 0.39457738399505615, "per_token_entropy": [5.21875, 0.177001953125, 9.6875, 0.43701171875, 0.0753173828125, 0.00157928466796875, 0.004032135009765625, 0.0013027191162109375, 0.54541015625, 0.1572265625, 0.0184478759765625, 0.267578125, 0.0029125213623046875, 0.0008487701416015625, 0.00926971435546875, 0.002040863037109375, 0.0005269050598144531, 0.004856109619140625, 0.0003197193145751953, 0.0005240440368652344, 0.18212890625, 0.07733154296875], "tokens": [262, 319, 7723, 10193, 1477, 821, 225, 34, 32, 225, 399, 333, 687, 48, 4161, 1284, 984, 377, 687, 48, 438, 12163]}
{"line_number": 781, "line_type": "generated", "code": "\n     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n     *\n     * @param row  row of the entry to be fetched\n     * @param column  column of the entry to be fetched\n     * @return the matrix", "entropy": 0.07672119140625, "is_bug_line": false, "sus_score": 0.39457738399505615, "per_token_entropy": [0.1177978515625, 0.0201568603515625, 0.7197265625, 0.1126708984375, 0.05450439453125, 0.00255584716796875, 0.0006031990051269531, 0.0135345458984375, 0.0084228515625, 0.0011577606201171875, 0.007022857666015625, 0.00023734569549560547, 0.003635406494140625, 0.0262451171875, 0.0032558441162109375, 0.334228515625, 0.00997161865234375, 0.0052032470703125, 0.0526123046875, 0.0019006729125976562, 0.1600341796875, 0.00018858909606933594, 0.008026123046875, 0.0023651123046875, 0.00021266937255859375, 0.7626953125, 0.20703125, 0.69091796875, 0.08099365234375, 0.0012531280517578125, 0.0269012451171875, 0.00405120849609375, 0.00399017333984375, 0.00516510009765625, 1.2278556823730469e-05, 4.57763671875e-05, 0.0001024007797241211, 0.08917236328125, 0.0301055908203125, 0.0015926361083984375, 0.0003216266632080078, 0.00104522705078125, 0.00028014183044433594, 0.00017750263214111328, 0.00010538101196289062, 0.0003490447998046875, 0.03204345703125, 0.00019359588623046875, 0.0015716552734375, 0.007038116455078125, 0.325439453125, 0.049560546875], "tokens": [275, 319, 5878, 312, 333, 687, 48, 4161, 1284, 984, 377, 687, 48, 438, 12163, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 2698, 225, 2698, 432, 322, 3414, 372, 526, 27535, 275, 319, 477, 753, 2623, 225, 2623, 432, 322, 3414, 372, 526, 27535, 275, 319, 477, 601, 322, 5045]}
{"line_number": 782, "line_type": "original", "code": "     * unless <code>0 <= column < columnDimension.</code></p>", "entropy": 1.3662109375, "is_bug_line": false, "sus_score": 0.38029083609580994, "per_token_entropy": [5.046875, 0.0897216796875, 15.2890625, 0.5751953125, 0.03662109375, 0.033447265625, 0.36376953125, 0.0209503173828125, 1.5, 0.007175445556640625, 0.0222015380859375, 0.00556182861328125, 0.15234375, 0.000743865966796875, 0.02813720703125, 0.039337158203125, 0.0036296844482421875], "tokens": [262, 319, 7351, 333, 687, 48, 34, 2511, 2623, 333, 2623, 9883, 1730, 687, 855, 98, 48]}
{"line_number": 782, "line_type": "generated", "code": "\n     *\n     * @param row  row of the entry to be fetched\n     * @param column  column of the entry to be fetched\n     * @return the matrix entry at (row, column)\n     * @throws MatrixIndexException if the row or", "entropy": 0.092529296875, "is_bug_line": false, "sus_score": 0.38029083609580994, "per_token_entropy": [0.1263427734375, 0.01125335693359375, 0.431640625, 0.0005698204040527344, 0.007587432861328125, 0.003620147705078125, 0.0002551078796386719, 0.5673828125, 0.1981201171875, 0.8623046875, 0.07659912109375, 0.001354217529296875, 0.0275115966796875, 0.00428009033203125, 0.004245758056640625, 0.005069732666015625, 1.5616416931152344e-05, 4.839897155761719e-05, 0.00015342235565185547, 0.09051513671875, 0.02703857421875, 0.0015325546264648438, 0.00036144256591796875, 0.0011196136474609375, 0.0002675056457519531, 0.00017333030700683594, 0.0001112222671508789, 0.0003838539123535156, 0.048095703125, 0.0003745555877685547, 0.001796722412109375, 0.008056640625, 0.30126953125, 0.047332763671875, 0.007160186767578125, 0.548828125, 0.29248046875, 0.00029754638671875, 0.0010519027709960938, 0.1380615234375, 0.00799560546875, 0.0157012939453125, 0.0019702911376953125, 0.00196075439453125, 0.0650634765625, 0.0086212158203125, 0.0012598037719726562, 0.00015854835510253906, 0.15771484375, 0.1290283203125, 0.4033203125, 0.1767578125], "tokens": [275, 319, 275, 319, 477, 753, 2698, 225, 2698, 432, 322, 3414, 372, 526, 27535, 275, 319, 477, 753, 2623, 225, 2623, 432, 322, 3414, 372, 526, 27535, 275, 319, 477, 601, 322, 5045, 3414, 821, 308, 643, 30, 2623, 27, 275, 319, 477, 5117, 9320, 1284, 984, 415, 322, 2698, 556]}
{"line_number": 784, "line_type": "original", "code": "     * @param col the column to be fetched", "entropy": 2.42578125, "is_bug_line": false, "sus_score": 0.3728910982608795, "per_token_entropy": [4.84375, 0.0537109375, 0.0157012939453125, 0.0153350830078125, 1.755859375, 6.625, 0.01145172119140625, 10.9296875, 0.0029773712158203125, 0.0058746337890625], "tokens": [262, 319, 477, 753, 932, 322, 2623, 372, 526, 27535]}
{"line_number": 784, "line_type": "generated", "code": "\n     * @param column  column location of entry to be fetched\n     * @return matrix entry in row,column\n     * @throws MatrixIndexException if the row or column index is not valid\n     */\n    public BigDecimal getEntry(int row, int column", "entropy": 0.10589599609375, "is_bug_line": false, "sus_score": 0.3728910982608795, "per_token_entropy": [0.09442138671875, 0.0030651092529296875, 0.0046844482421875, 0.01108551025390625, 0.1240234375, 0.162353515625, 0.002193450927734375, 0.0020771026611328125, 0.002307891845703125, 0.0003898143768310547, 0.0007467269897460938, 0.0006971359252929688, 0.00048828125, 0.65966796875, 0.000652313232421875, 0.00717926025390625, 0.018341064453125, 0.386474609375, 0.07794189453125, 0.18798828125, 0.1309814453125, 0.041778564453125, 0.484375, 0.1474609375, 0.0022525787353515625, 0.0012664794921875, 0.08135986328125, 0.007965087890625, 0.0018157958984375, 0.00017571449279785156, 0.14794921875, 0.310546875, 0.35986328125, 0.2880859375, 0.02276611328125, 0.438720703125, 0.061798095703125, 0.79638671875, 0.0037822723388671875, 0.0806884765625, 0.052703857421875, 0.03521728515625, 0.014617919921875, 0.0333251953125, 0.00534820556640625, 0.053955078125, 0.0095062255859375, 0.0516357421875, 6.723403930664062e-05, 0.00091552734375, 0.0919189453125, 0.001682281494140625], "tokens": [275, 319, 477, 753, 2623, 225, 2623, 3894, 432, 3414, 372, 526, 27535, 275, 319, 477, 601, 5045, 3414, 328, 2698, 30, 2592, 275, 319, 477, 5117, 9320, 1284, 984, 415, 322, 2698, 556, 2623, 1650, 438, 646, 2080, 275, 569, 284, 562, 17280, 622, 2711, 26, 410, 2698, 30, 629, 2623]}
{"line_number": 997, "line_type": "original", "code": "            out[row] = sum;", "entropy": 6.1875, "is_bug_line": false, "sus_score": 0.37200745940208435, "per_token_entropy": [4.1640625, 18.140625, 4.04296875, 4.26171875, 0.358642578125, 0.058624267578125, 6.4921875, 11.96875], "tokens": [1468, 963, 77, 643, 79, 280, 3632, 45]}
{"line_number": 997, "line_type": "generated", "code": "\n     * @return  array of solutions\n     * @throws IllegalArgumentException if matrix is not square\n     * @throws NoDataException if b is empty\n     * @throws DimensionMismatchException if b.length!= columnDimension\n     */\n    public BigDecimal[][] solve(BigDecimal[]", "entropy": 0.43505859375, "is_bug_line": false, "sus_score": 0.37200745940208435, "per_token_entropy": [1.2451171875, 0.00894927978515625, 0.129150390625, 0.037811279296875, 2.095703125, 0.74267578125, 0.017242431640625, 1.6181640625, 0.28076171875, 0.024627685546875, 0.0594482421875, 0.0447998046875, 0.20654296875, 0.197509765625, 1.71875, 0.8583984375, 0.7314453125, 0.023895263671875, 1.5791015625, 0.035919189453125, 0.2076416015625, 0.004726409912109375, 1.2919921875, 1.1748046875, 0.52880859375, 1.052734375, 0.277099609375, 0.275390625, 0.1268310546875, 0.0496826171875, 0.005847930908203125, 0.00951385498046875, 0.53515625, 0.0004296302795410156, 1.0371208190917969e-05, 0.1629638671875, 1.044921875, 0.66015625, 0.3017578125, 0.337890625, 0.74755859375, 0.1585693359375, 0.1126708984375, 0.52392578125, 0.0226898193359375, 0.00958251953125, 0.02398681640625, 0.7548828125, 0.0992431640625, 0.02349853515625, 0.09820556640625, 0.34619140625], "tokens": [275, 319, 477, 601, 225, 1417, 432, 16295, 275, 319, 477, 5117, 12137, 415, 5045, 438, 646, 14627, 275, 319, 477, 5117, 3139, 43451, 415, 323, 438, 3502, 275, 319, 477, 5117, 17417, 31102, 984, 415, 323, 32, 1322, 863, 2623, 9883, 275, 569, 284, 562, 17280, 11336, 10932, 26, 20827, 1178]}
{"line_number": 786, "line_type": "original", "code": "     * @throws MatrixIndexException if the specified column index is not valid", "entropy": 0.982421875, "is_bug_line": false, "sus_score": 0.36936649680137634, "per_token_entropy": [5.21875, 1.7890625, 0.0963134765625, 0.0816650390625, 0.0222320556640625, 0.003070831298828125, 0.00019538402557373047, 0.1612548828125, 0.267578125, 1.6513671875, 4.09375, 1.2724609375, 0.057220458984375, 0.0198516845703125, 0.0012302398681640625], "tokens": [262, 319, 477, 5117, 9320, 1284, 984, 415, 322, 3191, 2623, 1650, 438, 646, 2080]}
{"line_number": 786, "line_type": "generated", "code": "\n     * @throws MatrixIndexException if the row or column index is invalid\n     */\n    public BigDecimal getEntry(int row, int column) throws MatrixIndexException {\n        if (!isValidCoordinate( row, column ) ) {\n            throw new MatrixIndex", "entropy": 0.10638427734375, "is_bug_line": false, "sus_score": 0.36936649680137634, "per_token_entropy": [0.095458984375, 0.61181640625, 0.007472991943359375, 0.07696533203125, 0.0141754150390625, 0.0024585723876953125, 0.00016748905181884766, 0.167724609375, 0.3408203125, 0.43505859375, 0.21630859375, 0.025115966796875, 0.486328125, 0.05352783203125, 0.79150390625, 0.1815185546875, 0.044281005859375, 0.0283050537109375, 0.0138702392578125, 0.032440185546875, 0.005687713623046875, 0.0635986328125, 0.01010894775390625, 0.05328369140625, 5.1975250244140625e-05, 0.0007576942443847656, 0.083740234375, 0.0012483596801757812, 0.00762176513671875, 0.64990234375, 0.006229400634765625, 0.0015048980712890625, 9.179115295410156e-06, 0.0447998046875, 0.0628662109375, 0.177001953125, 0.018341064453125, 0.0308685302734375, 0.08111572265625, 0.0012054443359375, 0.0007357597351074219, 0.429443359375, 0.003082275390625, 0.00472259521484375, 0.11376953125, 0.004642486572265625, 0.017181396484375, 0.0224609375, 0.007598876953125, 0.0018968582153320312, 0.0005335807800292969, 0.0005688667297363281], "tokens": [275, 319, 477, 5117, 9320, 1284, 984, 415, 322, 2698, 556, 2623, 1650, 438, 5535, 275, 569, 284, 562, 17280, 622, 2711, 26, 410, 2698, 30, 629, 2623, 27, 2571, 9320, 1284, 984, 301, 291, 415, 308, 653, 13433, 17062, 26, 2698, 30, 2623, 829, 829, 301, 324, 1422, 537, 9320, 1284]}
{"line_number": 158, "line_type": "original", "code": "            data = d;", "entropy": 4.64453125, "is_bug_line": false, "sus_score": 0.35162898898124695, "per_token_entropy": [3.5859375, 10.4296875, 4.3828125, 4.4921875, 0.328125], "tokens": [1468, 706, 280, 343, 45]}
{"line_number": 158, "line_type": "generated", "code": "\n        }\n        final int nCols = d[0].length;\n        if (nCols == 0) {\n            throw new IllegalArgumentException(", "entropy": 0.0299224853515625, "is_bug_line": false, "sus_score": 0.35162898898124695, "per_token_entropy": [0.59375, 0.051727294921875, 0.041656494140625, 0.03985595703125, 0.002780914306640625, 0.0007090568542480469, 9.5367431640625e-05, 0.0005254745483398438, 0.0010480880737304688, 0.00035381317138671875, 0.000247955322265625, 8.7738037109375e-05, 5.257129669189453e-05, 0.0008406639099121094, 0.00959014892578125, 0.0144805908203125, 0.0003104209899902344, 0.0005846023559570312, 6.973743438720703e-05, 0.0004546642303466797, 6.771087646484375e-05, 4.506111145019531e-05, 0.0004661083221435547, 0.002986907958984375, 0.047454833984375, 0.002941131591796875, 0.0002741813659667969, 0.0052337646484375, 0.049102783203125], "tokens": [291, 320, 291, 1158, 629, 310, 19911, 280, 343, 77, 34, 997, 1322, 45, 291, 415, 308, 96, 19911, 610, 225, 34, 27, 301, 324, 1422, 537, 12137, 26]}
