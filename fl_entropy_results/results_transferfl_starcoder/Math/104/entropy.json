{"line_number": 200, "line_type": "original", "code": "        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);", "entropy": 1.72265625, "is_bug_line": false, "sus_score": 0.48435020446777344, "per_token_entropy": [4.4140625, 11.0703125, 8.6875, 0.0174407958984375, 0.0027675628662109375, 1.5146484375, 0.6865234375, 0.2445068359375, 0.00307464599609375, 0.034027099609375, 0.2440185546875, 8.234375, 0.00012040138244628906, 0.0203399658203125, 0.001087188720703125, 0.01523590087890625, 2.693359375, 0.0007381439208984375, 6.759166717529297e-05, 5.805492401123047e-05, 2.014636993408203e-05, 0.0224609375], "tokens": [351, 442, 10605, 1191, 22386, 67, 26, 83, 30, 816, 30, 4040, 81, 18386, 42027, 30, 4401, 32, 3459, 81, 5975, 293]}
{"line_number": 200, "line_type": "generated", "code": "\n            };\n\n            // evaluate continued fraction\n            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\n        }\n\n        return ret;\n    }", "entropy": 0.0999755859375, "is_bug_line": false, "sus_score": 0.48435020446777344, "per_token_entropy": [0.397705078125, 0.004604339599609375, 0.367431640625, 0.9052734375, 0.2213134765625, 0.70947265625, 0.0003070831298828125, 0.2216796875, 0.1558837890625, 0.000293731689453125, 0.1453857421875, 2.8967857360839844e-05, 0.00351715087890625, 1.7762184143066406e-05, 0.01050567626953125, 0.00522613525390625, 4.5299530029296875e-06, 0.01361846923828125, 0.0029506683349609375, 0.0009336471557617188, 0.00870513916015625, 0.0015115737915039062, 0.0126800537109375, 0.00220489501953125, 3.933906555175781e-06, 0.006343841552734375, 0.118896484375, 0.00011134147644042969, 0.056732177734375, 0.0011892318725585938, 0.000225067138671875, 4.5418739318847656e-05, 0.021759033203125, 0.0011472702026367188], "tokens": [324, 1472, 1064, 434, 13396, 45253, 18795, 324, 2152, 280, 225, 35, 32, 34, 517, 16198, 32, 13697, 26, 106, 30, 23477, 30, 1769, 31219, 293, 291, 320, 584, 442, 2152, 45, 284, 320]}
{"line_number": 243, "line_type": "original", "code": "            ContinuedFraction cf = new ContinuedFraction() {", "entropy": 1.3408203125, "is_bug_line": false, "sus_score": 0.46018433570861816, "per_token_entropy": [6.58984375, 8.953125, 0.0004379749298095703, 0.0043182373046875, 0.040679931640625, 0.08892822265625, 0.106689453125, 0.01531219482421875, 1.0013580322265625e-05, 0.00018608570098876953, 0.1260986328125, 0.1737060546875], "tokens": [1468, 29765, 318, 20709, 16198, 280, 537, 29765, 318, 20709, 346, 301]}
{"line_number": 243, "line_type": "generated", "code": "\n\n    private static final long serialVersionUID = 5378525034886164398L;\n\n    /**\n     * Returns the natural logarithm of the gamma function &Gamma;(x).\n     *\n     *", "entropy": 0.233642578125, "is_bug_line": false, "sus_score": 0.46018433570861816, "per_token_entropy": [1.005859375, 1.0830078125, 0.133544921875, 0.300537109375, 0.07281494140625, 0.0013866424560546875, 0.00023674964904785156, 0.429931640625, 0.607421875, 0.1275634765625, 0.01050567626953125, 0.00185394287109375, 0.0018053054809570312, 4.5418739318847656e-05, 0.00078582763671875, 0.0014352798461914062, 0.00046515464782714844, 0.0007476806640625, 0.0005674362182617188, 0.0005278587341308594, 0.0001798868179321289, 0.00032830238342285156, 1.609325408935547e-05, 0.0005373954772949219, 0.00196075439453125, 0.0008959770202636719, 0.01071929931640625, 0.0009584426879882812, 0.010101318359375, 0.368896484375, 1.05859375, 0.130615234375, 2.956390380859375e-05, 1.80859375, 0.08203125, 0.71142578125, 0.019561767578125, 0.009979248046875, 0.00017070770263671875, 0.00341796875, 0.059783935546875, 0.126220703125, 0.06231689453125, 1.591796875, 0.9794921875, 0.004131317138671875, 0.0228271484375, 0.06243896484375, 0.020843505859375, 0.00540924072265625, 1.2109375, 0.00016772747039794922], "tokens": [446, 945, 907, 1158, 1946, 19910, 280, 225, 39, 37, 41, 42, 39, 36, 39, 34, 37, 38, 42, 42, 40, 35, 40, 38, 37, 43, 42, 62, 45, 446, 1022, 275, 319, 3759, 322, 19844, 1245, 31176, 95, 432, 322, 13040, 667, 549, 22386, 31059, 106, 547, 275, 319, 275, 319]}
{"line_number": 120, "line_type": "original", "code": "        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);", "entropy": 1.6630859375, "is_bug_line": false, "sus_score": 0.45146751403808594, "per_token_entropy": [3.90625, 7.27734375, 9.515625, 0.01175689697265625, 0.003940582275390625, 0.205078125, 0.5029296875, 0.03900146484375, 0.0196533203125, 0.0284271240234375, 0.49267578125, 12.0234375, 0.00012373924255371094, 0.007488250732421875, 0.006206512451171875, 0.029998779296875, 2.48046875, 0.0008425712585449219, 3.0517578125e-05, 0.0001850128173828125, 1.9550323486328125e-05, 0.05401611328125], "tokens": [351, 442, 10605, 1191, 22386, 66, 26, 83, 30, 816, 30, 4040, 81, 18386, 42027, 30, 4401, 32, 3459, 81, 5975, 293]}
{"line_number": 120, "line_type": "generated", "code": "\n        }\n\n        return ret;\n    }\n\n    /**\n     * Returns the regularized gamma function Q(a, x).\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @return the regularized gamma function", "entropy": 0.0738525390625, "is_bug_line": false, "sus_score": 0.45146751403808594, "per_token_entropy": [1.7177734375, 0.0115966796875, 0.2802734375, 0.006237030029296875, 0.0004730224609375, 0.00041556358337402344, 0.024627685546875, 0.0008034706115722656, 0.56201171875, 0.01091766357421875, 0.007717132568359375, 7.033348083496094e-06, 0.0227813720703125, 0.0020046234130859375, 0.198974609375, 0.0002493858337402344, 0.004436492919921875, 0.002239227294921875, 0.01824951171875, 0.0008177757263183594, 9.775161743164062e-06, 7.343292236328125e-05, 0.0004630088806152344, 0.63330078125, 0.01702880859375, 0.0001575946807861328, 0.07586669921875, 4.649162292480469e-06, 0.1407470703125, 0.0002741813659667969, 0.00027871131896972656, 0.0045166015625, 0.0028514862060546875, 0.0013570785522460938, 0.0003731250762939453, 0.00041174888610839844, 1.4066696166992188e-05, 7.748603820800781e-06, 3.5762786865234375e-05, 1.3709068298339844e-05, 0.00036716461181640625, 0.01605224609375, 0.00014090538024902344, 0.0010919570922851562, 6.496906280517578e-05, 0.00033354759216308594, 0.039154052734375, 0.0274200439453125, 0.004528045654296875, 8.14199447631836e-05, 8.785724639892578e-05, 0.0005202293395996094], "tokens": [291, 320, 584, 442, 2152, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 10605, 1191, 13040, 667, 1910, 26, 83, 30, 816, 547, 275, 319, 5384, 319, 477, 753, 312, 322, 312, 3395, 32, 275, 319, 477, 753, 816, 322, 786, 32, 275, 319, 477, 601, 322, 10605, 1191, 13040, 667]}
{"line_number": 182, "line_type": "original", "code": "                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;", "entropy": 1.0244140625, "is_bug_line": false, "sus_score": 0.4089091122150421, "per_token_entropy": [8.578125, 1.958984375, 0.014678955078125, 2.408203125, 0.08154296875, 0.007091522216796875, 0.859375, 0.0166473388671875, 0.0093231201171875, 0.75927734375, 0.00038313865661621094, 0.1339111328125, 0.006195068359375, 0.016510009765625, 6.67572021484375e-06, 0.00047516822814941406, 8.881092071533203e-05, 0.0189971923828125, 0.003467559814453125, 0.7958984375, 0.004608154296875, 0.003162384033203125, 0.00032210350036621094, 3.060546875, 0.46630859375, 8.1796875, 0.268798828125], "tokens": [2071, 2152, 280, 4175, 32, 2832, 3736, 106, 474, 308, 83, 319, 4175, 32, 751, 26, 106, 490, 429, 1245, 22386, 26, 83, 490, 319, 3632, 45]}
{"line_number": 182, "line_type": "generated", "code": "\n\n        return ret;\n    }\n    \n    /**\n     * Returns the complemented regularized gamma function P(a, x) = 1 - Q(a, x).\n     * \n     * @param a the a parameter.\n     * @param x the value", "entropy": 0.193115234375, "is_bug_line": false, "sus_score": 0.4089091122150421, "per_token_entropy": [1.6806640625, 0.28857421875, 0.003376007080078125, 0.0014028549194335938, 0.01325225830078125, 0.0008440017700195312, 1.1787109375, 0.09637451171875, 0.0173187255859375, 1.33514404296875e-05, 0.34814453125, 0.0292816162109375, 1.2392578125, 0.08929443359375, 1.5615234375, 0.00043201446533203125, 0.01393890380859375, 0.0272216796875, 0.9970703125, 0.049041748046875, 0.002452850341796875, 0.0655517578125, 0.09002685546875, 0.1341552734375, 0.0330810546875, 0.473388671875, 0.005321502685546875, 0.004093170166015625, 1.158203125, 0.00026535987854003906, 0.001312255859375, 0.00040984153747558594, 0.016754150390625, 0.033660888671875, 0.0084381103515625, 0.0003399848937988281, 0.12054443359375, 2.0623207092285156e-05, 0.2274169921875, 0.0009613037109375, 0.0012350082397460938, 0.008270263671875, 0.0029468536376953125, 0.0018396377563476562, 0.000728607177734375, 0.00028967857360839844, 1.3232231140136719e-05, 0.0003132820129394531, 9.500980377197266e-05, 0.0006561279296875, 0.00047135353088378906, 0.0092926025390625], "tokens": [584, 442, 2152, 45, 284, 320, 2170, 1022, 275, 319, 3759, 322, 31616, 318, 10605, 1191, 13040, 667, 447, 26, 83, 30, 816, 27, 280, 225, 35, 429, 1910, 26, 83, 30, 816, 547, 275, 319, 5384, 319, 477, 753, 312, 322, 312, 3395, 32, 275, 319, 477, 753, 816, 322, 786]}
{"line_number": 173, "line_type": "original", "code": "                n = n + 1.0;", "entropy": 2.17578125, "is_bug_line": false, "sus_score": 0.40714067220687866, "per_token_entropy": [7.43359375, 5.68359375, 0.7236328125, 5.109375, 0.1514892578125, 0.020111083984375, 0.0100250244140625, 2.392578125, 0.01180267333984375, 0.22314453125], "tokens": [2071, 310, 280, 310, 474, 225, 35, 32, 34, 45]}
{"line_number": 173, "line_type": "generated", "code": "\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaQ(double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException\n    {\n        double", "entropy": 0.02593994140625, "is_bug_line": false, "sus_score": 0.40714067220687866, "per_token_entropy": [0.26416015625, 0.18603515625, 0.015960693359375, 0.007320404052734375, 0.0284576416015625, 5.0067901611328125e-06, 0.0060577392578125, 0.0009317398071289062, 0.005771636962890625, 0.00014162063598632812, 4.2438507080078125e-05, 2.5987625122070312e-05, 5.0067901611328125e-06, 0.0103607177734375, 0.12115478515625, 0.030853271484375, 0.027496337890625, 0.0225982666015625, 0.000766754150390625, 0.00153350830078125, 0.0009436607360839844, 7.271766662597656e-06, 5.125999450683594e-06, 0.0006995201110839844, 0.0009036064147949219, 0.0036525726318359375, 4.4465065002441406e-05, 8.130073547363281e-05, 0.07647705078125, 0.0670166015625, 0.00014352798461914062, 2.6941299438476562e-05, 2.9087066650390625e-05, 0.02215576171875, 0.00020813941955566406, 0.0005521774291992188, 9.572505950927734e-05, 6.556510925292969e-05, 0.023284912109375, 0.00017750263214111328, 0.00026297569274902344, 0.0005154609680175781, 3.552436828613281e-05, 0.0009098052978515625, 0.250244140625, 0.00012814998626708984, 0.0008597373962402344, 8.344650268554688e-07, 0.0228271484375, 0.0001385211944580078, 0.0640869140625, 0.08270263671875], "tokens": [275, 319, 477, 5117, 4175, 984, 415, 322, 8218, 8158, 372, 15941, 300, 32, 275, 569, 284, 562, 907, 2064, 10605, 1191, 22386, 67, 26, 2627, 312, 30, 225, 12928, 2064, 816, 30, 225, 12928, 2064, 23477, 30, 225, 12928, 629, 1769, 31219, 27, 4456, 2571, 4175, 984, 284, 301, 291, 2064]}
{"line_number": 179, "line_type": "original", "code": "            if (n >= maxIterations) {", "entropy": 1.84765625, "is_bug_line": false, "sus_score": 0.4054231345653534, "per_token_entropy": [5.98828125, 1.9892578125, 0.09735107421875, 7.26171875, 0.72802734375, 0.1112060546875, 0.012939453125, 0.12408447265625, 0.305419921875], "tokens": [1468, 415, 308, 96, 2377, 1769, 31219, 27, 301]}
{"line_number": 179, "line_type": "generated", "code": "\n        throw new MaxIterationsExceededException(maxIterations);\n    }\n\n    /**\n     * Returns the complemented incomplete beta function I_x(a, b).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     *", "entropy": 0.177978515625, "is_bug_line": false, "sus_score": 0.4054231345653534, "per_token_entropy": [0.36669921875, 0.841796875, 0.00174713134765625, 0.0287933349609375, 6.020069122314453e-05, 2.396106719970703e-05, 8.463859558105469e-06, 0.007080078125, 0.005397796630859375, 0.00016677379608154297, 0.0012378692626953125, 0.1929931640625, 0.013580322265625, 1.6572265625, 0.03826904296875, 0.0202484130859375, 1.5139579772949219e-05, 0.271240234375, 0.0318603515625, 1.580078125, 0.1466064453125, 0.54052734375, 0.298828125, 0.08953857421875, 0.783203125, 0.27783203125, 0.036285400390625, 0.00380706787109375, 0.0007543563842773438, 0.00033283233642578125, 0.304931640625, 0.1444091796875, 0.1551513671875, 0.00020265579223632812, 0.64794921875, 1.1086463928222656e-05, 0.6123046875, 0.01076507568359375, 0.0031642913818359375, 0.0004973411560058594, 0.00662994384765625, 0.0024967193603515625, 0.0026988983154296875, 0.000995635986328125, 0.0087890625, 0.03656005859375, 7.796287536621094e-05, 0.07464599609375, 0.004177093505859375, 0.002529144287109375, 0.003856658935546875, 0.00012159347534179688], "tokens": [291, 1422, 537, 7462, 31219, 28741, 984, 26, 1449, 31219, 293, 284, 320, 446, 1022, 275, 319, 3759, 322, 31616, 318, 26890, 11823, 667, 439, 81, 106, 26, 83, 30, 323, 547, 275, 319, 5384, 319, 886, 4736, 432, 458, 1411, 438, 4122, 544, 44, 275, 319, 333, 338, 48, 275, 319]}
{"line_number": 256, "line_type": "original", "code": "            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);", "entropy": 0.779296875, "is_bug_line": false, "sus_score": 0.40206941962242126, "per_token_entropy": [7.7578125, 2.3046875, 0.01336669921875, 2.1015625, 0.0235443115234375, 0.047271728515625, 0.0006198883056640625, 0.423583984375, 1.9951171875, 0.00022745132446289062, 0.0098876953125, 0.0083770751953125, 0.0026874542236328125, 0.06121826171875, 0.00473785400390625, 0.01209259033203125, 0.0193939208984375, 0.00018870830535888672, 0.0179595947265625], "tokens": [1468, 2152, 280, 225, 35, 32, 34, 517, 16198, 32, 13697, 26, 106, 30, 23477, 30, 1769, 31219, 293]}
{"line_number": 256, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.40206941962242126, "per_token_entropy": [], "tokens": []}
{"line_number": 257, "line_type": "original", "code": "            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;", "entropy": 0.66162109375, "is_bug_line": false, "sus_score": 0.40206941962242126, "per_token_entropy": [8.390625, 3.826171875, 0.012054443359375, 0.6259765625, 0.004016876220703125, 0.006214141845703125, 0.095703125, 0.004657745361328125, 0.003276824951171875, 0.00618743896484375, 0.00024068355560302734, 0.001804351806640625, 0.004344940185546875, 0.0001329183578491211, 7.104873657226562e-05, 0.00017786026000976562, 5.7816505432128906e-05, 0.0034008026123046875, 0.0098724365234375, 0.0246124267578125, 8.118152618408203e-05, 0.000457763671875, 0.00026726722717285156, 0.007617950439453125, 0.018310546875, 4.7734375, 0.03326416015625], "tokens": [1468, 2152, 280, 4175, 32, 2832, 3736, 106, 474, 308, 83, 319, 4175, 32, 751, 26, 106, 490, 429, 1245, 22386, 26, 83, 490, 319, 2152, 45]}
{"line_number": 257, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.40206941962242126, "per_token_entropy": [], "tokens": []}
{"line_number": 177, "line_type": "original", "code": "                sum = sum + an;", "entropy": 4.0546875, "is_bug_line": false, "sus_score": 0.4004199206829071, "per_token_entropy": [6.8359375, 13.2734375, 1.630859375, 5.77734375, 0.50732421875, 0.249267578125, 0.09332275390625], "tokens": [2071, 3632, 280, 3632, 474, 600, 45]}
{"line_number": 177, "line_type": "generated", "code": "\n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException\n    {\n        double ret;\n\n        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.", "entropy": 0.043609619140625, "is_bug_line": false, "sus_score": 0.4004199206829071, "per_token_entropy": [0.450439453125, 0.56689453125, 0.003871917724609375, 0.00470733642578125, 0.07659912109375, 0.0950927734375, 0.020172119140625, 0.0023555755615234375, 5.996227264404297e-05, 0.00324249267578125, 0.289794921875, 0.00026988983154296875, 0.0012388229370117188, 1.0728836059570312e-06, 0.0218658447265625, 0.0039520263671875, 0.1309814453125, 0.1339111328125, 0.0026836395263671875, 0.035736083984375, 0.239990234375, 0.0293121337890625, 0.00771331787109375, 0.0124969482421875, 1.1444091796875e-05, 0.001255035400390625, 3.731250762939453e-05, 0.005855560302734375, 0.00045108795166015625, 0.001605987548828125, 0.003856658935546875, 4.875659942626953e-05, 0.00039267539978027344, 4.4345855712890625e-05, 0.00010275840759277344, 0.0113372802734375, 0.007396697998046875, 0.036529541015625, 0.0033588409423828125, 0.0015592575073242188, 0.00012564659118652344, 1.6808509826660156e-05, 0.01531982421875, 0.00020384788513183594, 0.0150299072265625, 0.003429412841796875, 0.006687164306640625, 0.0001748800277709961, 0.018768310546875, 0.00044226646423339844, 0.0002880096435546875, 0.0007467269897460938], "tokens": [12928, 2064, 23477, 30, 225, 12928, 629, 1769, 31219, 27, 4456, 2571, 4175, 984, 284, 301, 291, 2064, 2152, 45, 584, 415, 308, 4075, 32, 26821, 26, 83, 27, 1276, 6934, 32, 26821, 26, 106, 27, 1276, 308, 83, 2511, 225, 34, 32, 34, 27, 1276, 308, 106, 333, 225, 34, 32]}
{"line_number": 160, "line_type": "original", "code": "        } else if (x == 0.0) {", "entropy": 1.28515625, "is_bug_line": false, "sus_score": 0.3986786901950836, "per_token_entropy": [3.6875, 7.48828125, 0.6494140625, 0.2471923828125, 0.03778076171875, 1.0927734375, 2.345703125, 0.58203125, 0.02288818359375, 0.330078125, 0.0029926300048828125, 0.1904296875, 0.0298309326171875], "tokens": [351, 320, 813, 415, 308, 106, 610, 225, 34, 32, 34, 27, 301]}
{"line_number": 160, "line_type": "generated", "code": "\n     * Regularized Gamma Function</a>, equation (1).</li>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\">\n     * Incomplete Gamma Function</a>,", "entropy": 0.047576904296875, "is_bug_line": false, "sus_score": 0.3986786901950836, "per_token_entropy": [1.1689453125, 0.01206207275390625, 0.262451171875, 0.0005712509155273438, 0.00144195556640625, 0.0006537437438964844, 0.0025959014892578125, 0.0010089874267578125, 0.003810882568359375, 0.0224609375, 0.0014371871948242188, 0.5859375, 0.039215087890625, 0.0003070831298828125, 0.000675201416015625, 0.03955078125, 0.00020003318786621094, 0.0333251953125, 0.0006632804870605469, 0.0007114410400390625, 0.0198822021484375, 6.73532485961914e-05, 0.00034308433532714844, 6.210803985595703e-05, 0.0006914138793945312, 0.0018014907836914062, 0.00034809112548828125, 0.00010478496551513672, 0.042938232421875, 3.719329833984375e-05, 9.775161743164062e-06, 3.552436828613281e-05, 6.4373016357421875e-06, 2.765655517578125e-05, 1.8835067749023438e-05, 3.159046173095703e-05, 5.3882598876953125e-05, 0.0027713775634765625, 0.00044083595275878906, 5.2928924560546875e-05, 5.447864532470703e-05, 8.690357208251953e-05, 0.00028204917907714844, 0.223876953125, 0.0003864765167236328, 0.0008530616760253906, 4.601478576660156e-05, 0.00027942657470703125, 1.4543533325195312e-05, 8.666515350341797e-05, 4.661083221435547e-05, 0.0005192756652832031], "tokens": [275, 319, 33196, 1191, 48264, 4540, 377, 83, 2717, 23032, 308, 35, 20160, 374, 48, 275, 319, 333, 374, 48, 275, 319, 333, 83, 976, 347, 525, 555, 3812, 5860, 32, 105, 362, 43579, 32, 508, 33, 39007, 22386, 2447, 32, 916, 413, 275, 319, 701, 5898, 48264, 4540, 377, 83, 2717]}
{"line_number": 237, "line_type": "original", "code": "        } else if (x < a || a < 1.0) {", "entropy": 1.7568359375, "is_bug_line": false, "sus_score": 0.39866819977760315, "per_token_entropy": [4.8671875, 4.1328125, 2.42578125, 0.892578125, 0.031341552734375, 0.53076171875, 1.642578125, 0.166259765625, 8.3203125, 4.4765625, 0.50830078125, 1.427734375, 0.1295166015625, 0.052276611328125, 0.0014820098876953125, 0.2349853515625, 0.0162200927734375], "tokens": [351, 320, 813, 415, 308, 106, 333, 312, 1276, 312, 333, 225, 35, 32, 34, 27, 301]}
{"line_number": 237, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.39866819977760315, "per_token_entropy": [], "tokens": []}
{"line_number": 235, "line_type": "original", "code": "        } else if (x == 0.0) {", "entropy": 1.22265625, "is_bug_line": false, "sus_score": 0.39571627974510193, "per_token_entropy": [4.7890625, 4.5234375, 1.826171875, 0.78662109375, 0.038299560546875, 0.44921875, 2.306640625, 0.5263671875, 0.1602783203125, 0.2366943359375, 0.034423828125, 0.198486328125, 0.02301025390625], "tokens": [351, 320, 813, 415, 308, 106, 610, 225, 34, 32, 34, 27, 301]}
{"line_number": 235, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.39571627974510193, "per_token_entropy": [], "tokens": []}
{"line_number": 158, "line_type": "original", "code": "        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {", "entropy": 0.50439453125, "is_bug_line": false, "sus_score": 0.3950447142124176, "per_token_entropy": [3.169921875, 4.15234375, 0.08734130859375, 3.3125, 0.00045800209045410156, 0.1561279296875, 0.0003285408020019531, 0.7265625, 0.040679931640625, 0.006504058837890625, 0.05804443359375, 3.3855438232421875e-05, 0.101318359375, 0.0008749961853027344, 0.0012493133544921875, 1.6103515625, 0.04046630859375, 2.1328125, 0.5185546875, 0.0841064453125, 0.00323486328125, 4.9948692321777344e-05, 0.49951171875, 0.0011014938354492188, 0.10784912109375, 0.223876953125, 0.47509765625, 0.001125335693359375, 0.015106201171875, 0.0008172988891601562, 9.179115295410156e-06, 0.0200347900390625, 0.0015888214111328125, 0.0209808349609375, 0.09228515625], "tokens": [351, 415, 308, 4075, 32, 26821, 26, 83, 27, 1276, 6934, 32, 26821, 26, 106, 27, 1276, 308, 83, 2511, 225, 34, 32, 34, 27, 1276, 308, 106, 333, 225, 34, 32, 34, 490, 301]}
{"line_number": 158, "line_type": "generated", "code": "\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\">\n     * Incomplete Gamma Function</a>, equation (6).</li>\n     * <li>\n     * <a", "entropy": 0.0467529296875, "is_bug_line": false, "sus_score": 0.3950447142124176, "per_token_entropy": [0.50927734375, 0.02911376953125, 0.232421875, 0.033538818359375, 0.08026123046875, 0.021270751953125, 9.799003601074219e-05, 0.005580902099609375, 0.004802703857421875, 0.0019092559814453125, 0.0118255615234375, 0.0010824203491210938, 0.00015473365783691406, 0.058837890625, 0.0005984306335449219, 3.6954879760742188e-06, 2.384185791015625e-05, 1.0013580322265625e-05, 4.2438507080078125e-05, 0.0001704692840576172, 2.5987625122070312e-05, 0.00015628337860107422, 0.5869140625, 0.004421234130859375, 0.0001055002212524414, 4.100799560546875e-05, 2.193450927734375e-05, 0.00012183189392089844, 0.00293731689453125, 3.4332275390625e-05, 0.0007233619689941406, 0.00010263919830322266, 0.000598907470703125, 9.882450103759766e-05, 8.702278137207031e-05, 8.45193862915039e-05, 0.004604339599609375, 0.347412109375, 0.00021028518676757812, 0.0723876953125, 0.2481689453125, 0.00011098384857177734, 0.007167816162109375, 0.0312042236328125, 0.0011749267578125, 0.11944580078125, 0.0025081634521484375, 0.005626678466796875, 0.0018463134765625, 1.3947486877441406e-05, 0.0011749267578125, 0.0007090568542480469], "tokens": [275, 319, 333, 374, 48, 275, 319, 333, 83, 976, 347, 525, 555, 3812, 5860, 32, 105, 362, 43579, 32, 508, 33, 39007, 22386, 2447, 32, 916, 413, 275, 319, 701, 5898, 48264, 4540, 377, 83, 2717, 23032, 308, 40, 20160, 374, 48, 275, 319, 333, 374, 48, 275, 319, 333, 83]}
{"line_number": 252, "line_type": "original", "code": "                    return n * (a - n);", "entropy": 2.751953125, "is_bug_line": false, "sus_score": 0.35419976711273193, "per_token_entropy": [9.734375, 3.056640625, 7.078125, 2.17578125, 1.2060546875, 0.8359375, 0.1624755859375, 0.37841796875, 0.1395263671875], "tokens": [4696, 442, 310, 319, 308, 83, 429, 310, 293]}
{"line_number": 252, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.35419976711273193, "per_token_entropy": [], "tokens": []}
{"line_number": 171, "line_type": "original", "code": "            while (Math.abs(an) > epsilon && n < maxIterations) {", "entropy": 0.896484375, "is_bug_line": false, "sus_score": 0.35381150245666504, "per_token_entropy": [4.1484375, 7.83203125, 0.2890625, 0.49267578125, 0.0003955364227294922, 0.0010633468627929688, 0.0173797607421875, 0.2059326171875, 2.23828125, 0.00040268898010253906, 0.0139923095703125, 0.1632080078125, 0.2061767578125, 0.0189361572265625, 0.06890869140625, 0.00658416748046875, 0.068115234375, 0.374755859375], "tokens": [1468, 2218, 308, 5717, 32, 3596, 26, 278, 27, 848, 23477, 962, 310, 333, 1769, 31219, 27, 301]}
{"line_number": 171, "line_type": "generated", "code": "\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return the regularized gamma function Q(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularized", "entropy": 0.0308990478515625, "is_bug_line": false, "sus_score": 0.35381150245666504, "per_token_entropy": [0.52880859375, 0.032958984375, 0.0433349609375, 0.168212890625, 0.00984954833984375, 0.0008664131164550781, 0.00780487060546875, 0.00016748905181884766, 8.940696716308594e-05, 0.0026569366455078125, 0.0001913309097290039, 0.00024628639221191406, 0.00021958351135253906, 0.0006766319274902344, 0.006946563720703125, 0.227294921875, 0.0006422996520996094, 0.0172882080078125, 0.01003265380859375, 0.003368377685546875, 0.0023632049560546875, 0.0001112222671508789, 0.000354766845703125, 0.00047516822814941406, 0.1795654296875, 0.0006132125854492188, 6.747245788574219e-05, 0.0005559921264648438, 0.0006728172302246094, 0.019287109375, 0.0968017578125, 0.002208709716796875, 0.000759124755859375, 0.002071380615234375, 0.01654052734375, 3.2186508178710938e-06, 0.002834320068359375, 0.0008602142333984375, 0.002506256103515625, 7.95125961303711e-05, 2.4080276489257812e-05, 1.33514404296875e-05, 1.71661376953125e-05, 0.004848480224609375, 0.0697021484375, 0.045196533203125, 0.045623779296875, 0.047607421875, 0.00095367431640625, 0.0013799667358398438, 0.0011262893676757812, 8.225440979003906e-06], "tokens": [275, 319, 477, 753, 1769, 31219, 18690, 1451, 432, 313, 22400, 20, 372, 6153, 32, 5384, 319, 477, 601, 322, 10605, 1191, 13040, 667, 1910, 26, 83, 30, 816, 27, 275, 319, 477, 5117, 4175, 984, 415, 322, 8218, 8158, 372, 15941, 300, 32, 275, 569, 284, 562, 907, 2064, 10605, 1191]}
{"line_number": 174, "line_type": "original", "code": "                an = an * (x / (a + n));", "entropy": 1.765625, "is_bug_line": false, "sus_score": 0.35381150245666504, "per_token_entropy": [8.3515625, 8.546875, 0.30615234375, 2.828125, 0.189697265625, 0.196044921875, 2.0, 0.451904296875, 0.0181427001953125, 0.004787445068359375, 0.00833892822265625, 0.0157623291015625, 0.0416259765625], "tokens": [2071, 600, 280, 600, 319, 308, 106, 517, 308, 83, 474, 310, 876]}
{"line_number": 174, "line_type": "generated", "code": "\n     */\n    public static double regularizedGammaQ(double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException\n    {\n        double ret;\n\n        if (Double.isNaN(a) || Double.", "entropy": 0.02587890625, "is_bug_line": false, "sus_score": 0.35381150245666504, "per_token_entropy": [0.337646484375, 0.04180908203125, 0.05126953125, 0.043975830078125, 0.0006966590881347656, 0.0018405914306640625, 0.0010194778442382812, 7.152557373046875e-06, 4.76837158203125e-06, 0.0007662773132324219, 0.0007266998291015625, 0.00301361083984375, 4.4345855712890625e-05, 8.082389831542969e-05, 0.064453125, 0.0546875, 0.0001252889633178711, 2.396106719970703e-05, 2.5987625122070312e-05, 0.01751708984375, 0.0004444122314453125, 0.0005183219909667969, 0.00011539459228515625, 5.6862831115722656e-05, 0.0204925537109375, 0.0003867149353027344, 0.00023889541625976562, 0.000606536865234375, 3.4332275390625e-05, 0.0010089874267578125, 0.2379150390625, 0.000232696533203125, 0.0007710456848144531, 4.76837158203125e-07, 0.024749755859375, 0.0007963180541992188, 0.07623291015625, 0.07635498046875, 0.0027332305908203125, 0.03662109375, 0.2000732421875, 0.0241546630859375, 0.00664520263671875, 0.00689697265625, 8.344650268554688e-06, 0.0009522438049316406, 2.5391578674316406e-05, 0.003143310546875, 0.0004012584686279297, 0.00130462646484375, 0.002246856689453125, 3.2901763916015625e-05], "tokens": [275, 569, 284, 562, 907, 2064, 10605, 1191, 22386, 67, 26, 2627, 312, 30, 225, 12928, 2064, 816, 30, 225, 12928, 2064, 23477, 30, 225, 12928, 629, 1769, 31219, 27, 4456, 2571, 4175, 984, 284, 301, 291, 2064, 2152, 45, 584, 415, 308, 4075, 32, 26821, 26, 83, 27, 1276, 6934, 32]}
{"line_number": 172, "line_type": "original", "code": "                // compute next element in the series", "entropy": 3.84765625, "is_bug_line": false, "sus_score": 0.35254916548728943, "per_token_entropy": [8.0546875, 4.9140625, 5.9609375, 10.796875, 0.09375, 0.3154296875, 0.10302734375, 0.5478515625], "tokens": [2071, 434, 7596, 2354, 1994, 328, 322, 9484]}
{"line_number": 172, "line_type": "generated", "code": "\n     * @return the regularized gamma function Q(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaQ(double a, \n                                           double x, \n                                           double epsilon", "entropy": 0.017425537109375, "is_bug_line": false, "sus_score": 0.35254916548728943, "per_token_entropy": [0.12213134765625, 0.0374755859375, 0.0225982666015625, 0.01526641845703125, 0.00363922119140625, 0.0024623870849609375, 0.00010967254638671875, 0.00035643577575683594, 0.00039649009704589844, 0.1539306640625, 0.0006465911865234375, 5.626678466796875e-05, 0.0005335807800292969, 0.0006117820739746094, 0.01922607421875, 0.12188720703125, 0.0028705596923828125, 0.000904083251953125, 0.00222015380859375, 0.0160980224609375, 2.6226043701171875e-06, 0.0035877227783203125, 0.0008387565612792969, 0.0030269622802734375, 8.64267349243164e-05, 2.6345252990722656e-05, 1.5139579772949219e-05, 6.318092346191406e-06, 0.0061187744140625, 0.06646728515625, 0.035888671875, 0.0316162109375, 0.028961181640625, 0.0006632804870605469, 0.0009937286376953125, 0.0006418228149414062, 5.364418029785156e-06, 2.86102294921875e-06, 0.00028705596923828125, 0.0008764266967773438, 0.00463104248046875, 4.1365623474121094e-05, 8.7738037109375e-05, 0.0892333984375, 0.0838623046875, 0.00014710426330566406, 2.205371856689453e-05, 3.254413604736328e-05, 0.022705078125, 0.0006203651428222656, 0.0007758140563964844, 0.00012993812561035156], "tokens": [275, 319, 477, 601, 322, 10605, 1191, 13040, 667, 1910, 26, 83, 30, 816, 27, 275, 319, 477, 5117, 4175, 984, 415, 322, 8218, 8158, 372, 15941, 300, 32, 275, 569, 284, 562, 907, 2064, 10605, 1191, 22386, 67, 26, 2627, 312, 30, 225, 12928, 2064, 816, 30, 225, 12928, 2064, 23477]}
{"line_number": 233, "line_type": "original", "code": "        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {", "entropy": 0.59619140625, "is_bug_line": false, "sus_score": 0.3493237793445587, "per_token_entropy": [5.109375, 2.154296875, 0.09521484375, 3.189453125, 0.00183868408203125, 0.1573486328125, 0.0011234283447265625, 3.296875, 0.278564453125, 0.01800537109375, 0.343017578125, 8.654594421386719e-05, 0.1798095703125, 0.0004725456237792969, 0.027191162109375, 1.3720703125, 0.06414794921875, 2.400390625, 0.78662109375, 0.266357421875, 0.0020313262939453125, 0.00017702579498291016, 0.259521484375, 0.0015506744384765625, 0.30908203125, 0.1392822265625, 0.1932373046875, 0.010223388671875, 0.0811767578125, 0.0026454925537109375, 0.0001323223114013672, 0.04205322265625, 0.004405975341796875, 0.050628662109375, 0.041168212890625], "tokens": [351, 415, 308, 4075, 32, 26821, 26, 83, 27, 1276, 6934, 32, 26821, 26, 106, 27, 1276, 308, 83, 2511, 225, 34, 32, 34, 27, 1276, 308, 106, 333, 225, 34, 32, 34, 490, 301]}
{"line_number": 233, "line_type": "generated", "code": "\n    \n    /**\n     * Returns the natural logarithm of the gamma function &Gamma;(x).\n     * <p>\n     * For small x (0 < x < 1e-5), the implementation uses the\n     * reflection formula, and for large", "entropy": 0.496337890625, "is_bug_line": false, "sus_score": 0.3493237793445587, "per_token_entropy": [1.7197265625, 0.157958984375, 0.026275634765625, 2.7298927307128906e-05, 0.3671875, 0.04022216796875, 0.7119140625, 0.010223388671875, 0.01032257080078125, 0.0001442432403564453, 0.0025234222412109375, 0.044921875, 0.19287109375, 0.054656982421875, 1.22265625, 1.2138671875, 0.00440216064453125, 0.027435302734375, 0.0516357421875, 0.020233154296875, 0.0024280548095703125, 1.39453125, 0.138671875, 0.01103973388671875, 0.00853729248046875, 1.1801719665527344e-05, 0.06781005859375, 1.5244140625, 1.123046875, 1.3173828125, 0.271240234375, 0.8408203125, 0.00365447998046875, 0.02447509765625, 0.0182342529296875, 0.56591796875, 1.2001953125, 0.0546875, 1.298828125, 0.1722412109375, 0.6298828125, 0.56103515625, 0.62744140625, 0.76171875, 0.94482421875, 3.3736228942871094e-05, 0.6630859375, 0.0015954971313476562, 1.8876953125, 2.068359375, 0.95654296875, 0.79541015625], "tokens": [2170, 1022, 275, 319, 3759, 322, 19844, 1245, 31176, 95, 432, 322, 13040, 667, 549, 22386, 31059, 106, 547, 275, 319, 333, 98, 48, 275, 319, 2616, 5532, 816, 308, 34, 333, 816, 333, 225, 35, 87, 31, 39, 471, 322, 4736, 5251, 322, 275, 319, 26158, 17568, 30, 461, 436, 7622]}
{"line_number": 248, "line_type": "original", "code": "                    return ((2.0 * n) + 1.0) - a + x;", "entropy": 1.8544921875, "is_bug_line": false, "sus_score": 0.34831544756889343, "per_token_entropy": [9.734375, 3.5234375, 7.59375, 5.19921875, 0.568359375, 0.0250396728515625, 0.08154296875, 4.328125, 0.14599609375, 0.432373046875, 0.12481689453125, 0.031097412109375, 0.1939697265625, 0.002285003662109375, 0.23583984375, 1.66015625, 1.3056640625, 0.9921875, 0.41259765625, 0.51025390625], "tokens": [4696, 442, 1833, 36, 32, 34, 319, 310, 27, 474, 225, 35, 32, 34, 27, 429, 312, 474, 816, 45]}
{"line_number": 248, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.34831544756889343, "per_token_entropy": [], "tokens": []}
{"line_number": 102, "line_type": "original", "code": "            ret = ((x + .5) * Math.log(tmp)) - tmp +", "entropy": 2.994140625, "is_bug_line": false, "sus_score": 0.3393259346485138, "per_token_entropy": [6.41796875, 17.453125, 0.57177734375, 7.1015625, 0.46826171875, 5.5078125, 5.6796875, 0.00036835670471191406, 0.036468505859375, 0.00067138671875, 0.0230255126953125, 0.008575439453125, 0.00036525726318359375, 0.00428009033203125, 10.2109375, 2.205078125, 0.03778076171875, 0.314453125, 0.8330078125], "tokens": [1468, 2152, 280, 1833, 106, 474, 638, 39, 27, 319, 4175, 32, 751, 26, 2868, 490, 429, 3691, 474]}
{"line_number": 102, "line_type": "generated", "code": "\n                                           double epsilon,\n                                           int maxIterations)\n        throws MathException\n    {\n        if (Double.isNaN(a) || Double.isNaN(x)) {\n            return Double.NaN;\n        }\n\n        if (a > x) {\n            // use the", "entropy": 0.2109375, "is_bug_line": false, "sus_score": 0.3393259346485138, "per_token_entropy": [0.521484375, 0.11407470703125, 0.00139617919921875, 0.006404876708984375, 1.169921875, 0.00640869140625, 0.05291748046875, 0.0001226663589477539, 0.006687164306640625, 0.350830078125, 0.000270843505859375, 0.00043487548828125, 1.1920928955078125e-06, 0.06396484375, 0.0019245147705078125, 0.1854248046875, 1.6376953125, 0.08428955078125, 0.4404296875, 2.7894973754882812e-05, 0.0021800994873046875, 4.172325134277344e-05, 0.0972900390625, 0.00452423095703125, 0.002716064453125, 0.07666015625, 8.58306884765625e-06, 0.03839111328125, 0.00041747093200683594, 5.173683166503906e-05, 0.423583984375, 0.0060882568359375, 0.00829315185546875, 0.0023326873779296875, 0.00040221214294433594, 1.1920928955078125e-05, 2.9802322387695312e-06, 4.971027374267578e-05, 0.0227203369140625, 0.0004661083221435547, 1.421875, 0.40185546875, 0.056640625, 0.48974609375, 1.3779296875, 0.30078125, 0.040679931640625, 0.00589752197265625, 0.033538818359375, 0.7568359375, 0.485107421875, 0.265869140625], "tokens": [12928, 2064, 23477, 30, 12928, 629, 1769, 31219, 27, 291, 2571, 4175, 984, 284, 301, 291, 415, 308, 4075, 32, 26821, 26, 83, 27, 1276, 6934, 32, 26821, 26, 106, 490, 301, 324, 442, 6934, 32, 11126, 45, 291, 320, 584, 415, 308, 83, 848, 816, 27, 301, 324, 434, 793, 322]}
{"line_number": 95, "line_type": "original", "code": "            double sum = 0.0;", "entropy": 2.515625, "is_bug_line": false, "sus_score": 0.3393259346485138, "per_token_entropy": [3.23828125, 13.515625, 4.64453125, 0.10345458984375, 0.1514892578125, 0.5556640625, 0.386474609375, 0.00036716461181640625, 0.044189453125], "tokens": [1468, 2064, 3632, 280, 225, 34, 32, 34, 45]}
{"line_number": 95, "line_type": "generated", "code": "\n     * @param maxIterations Maximum number of \"iterations\" to complete.\n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularized", "entropy": 0.057342529296875, "is_bug_line": false, "sus_score": 0.3393259346485138, "per_token_entropy": [1.083984375, 0.004360198974609375, 0.2763671875, 0.08294677734375, 0.00939178466796875, 0.0040740966796875, 0.4736328125, 0.004039764404296875, 0.0001728534698486328, 0.081298828125, 0.086181640625, 0.00986480712890625, 0.002532958984375, 0.1923828125, 0.0015649795532226562, 0.07135009765625, 4.3272972106933594e-05, 0.0231475830078125, 0.00682830810546875, 0.031829833984375, 0.00809478759765625, 0.0008211135864257812, 0.0011663436889648438, 0.0019397735595703125, 0.00373077392578125, 0.0002465248107910156, 0.0001081228256225586, 0.0010633468627929688, 0.0013093948364257812, 0.06170654296875, 0.184814453125, 0.0018939971923828125, 0.0019779205322265625, 0.006011962890625, 0.019195556640625, 9.179115295410156e-06, 0.01186370849609375, 0.00536346435546875, 0.00525665283203125, 0.0004856586456298828, 2.0384788513183594e-05, 3.516674041748047e-05, 6.794929504394531e-06, 0.02813720703125, 0.0192718505859375, 0.0916748046875, 0.0222015380859375, 0.052459716796875, 0.000522613525390625, 0.0010557174682617188, 0.004688262939453125, 1.1563301086425781e-05], "tokens": [275, 319, 477, 753, 1769, 31219, 18690, 1451, 432, 313, 22400, 20, 372, 6153, 32, 275, 319, 477, 601, 322, 10605, 1191, 13040, 667, 447, 26, 83, 30, 816, 27, 275, 319, 477, 5117, 4175, 984, 415, 322, 8218, 8158, 372, 15941, 300, 32, 275, 569, 284, 562, 907, 2064, 10605, 1191]}
