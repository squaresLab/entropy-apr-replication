{"line_number": 943, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.59326171875, "is_bug_line": false, "sus_score": 0.5274561643600464, "per_token_entropy": [6.2734375, 3.802734375, 0.00908660888671875, 0.030609130859375, 0.0655517578125, 0.0038909912109375, 0.00740814208984375, 0.0037021636962890625, 0.004032135009765625, 0.0011806488037109375, 0.005096435546875, 0.410888671875, 0.020233154296875, 0.000614166259765625, 0.0037555694580078125, 0.0070037841796875, 0.00359344482421875, 0.024139404296875], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 943, "line_type": "generated", "code": "\n\n        /**\n         * @param isRepairMode Flag indicating whether the objective variables are\n         *        forced into their bounds if defined\n         */\n        public void setRepairMode(boolean isRepairMode) {\n            this.isRepairMode = isRepairMode;\n       ", "entropy": 0.1358642578125, "is_bug_line": false, "sus_score": 0.5274561643600464, "per_token_entropy": [0.990234375, 0.041351318359375, 0.0269775390625, 0.00015735626220703125, 0.178955078125, 0.15966796875, 0.94287109375, 0.285400390625, 0.005481719970703125, 1.369140625, 0.4658203125, 0.03271484375, 0.2352294921875, 0.172607421875, 0.052825927734375, 0.67724609375, 0.03070068359375, 0.00046324729919433594, 0.451416015625, 0.048492431640625, 0.00835418701171875, 0.01467132568359375, 0.003971099853515625, 0.06671142578125, 0.0077667236328125, 0.53466796875, 0.0098419189453125, 0.005733489990234375, 0.0023174285888671875, 0.0009760856628417969, 0.1695556640625, 0.02056884765625, 0.0012722015380859375, 0.0003120899200439453, 0.038726806640625, 0.0015802383422851562, 0.00017309188842773438, 0.0003256797790527344, 0.0005168914794921875, 0.001102447509765625, 0.0039043426513671875, 0.0007147789001464844, 0.00011181831359863281, 0.00021648406982421875, 3.457069396972656e-05, 1.6927719116210938e-05, 0.00028586387634277344, 0.0003752708435058594, 3.933906555175781e-06, 8.344650268554688e-07, 0.00026345252990722656, 0.003711700439453125], "tokens": [584, 1022, 276, 319, 477, 753, 438, 36836, 2101, 18860, 15280, 4946, 322, 25110, 4886, 884, 276, 319, 351, 28571, 1991, 3623, 11615, 415, 3417, 276, 569, 291, 562, 763, 739, 36836, 2101, 26, 4398, 438, 36836, 2101, 27, 301, 324, 458, 32, 297, 36836, 2101, 280, 438, 36836, 2101, 45, 291]}
{"line_number": 958, "line_type": "original", "code": "                value = CMAESOptimizer.this", "entropy": 1.263671875, "is_bug_line": false, "sus_score": 0.5272876620292664, "per_token_entropy": [4.96484375, 3.388671875, 2.11328125, 0.8759765625, 0.00015807151794433594, 0.000247955322265625, 0.0034732818603515625, 0.022674560546875, 0.004619598388671875], "tokens": [2071, 786, 280, 390, 1400, 940, 29248, 32, 578]}
{"line_number": 958, "line_type": "generated", "code": "\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param y Repaired normalized objective variables.\n         * @return the penalty for the constraint violation.\n         */\n        private double penalty(final double", "entropy": 0.215576171875, "is_bug_line": false, "sus_score": 0.5272876620292664, "per_token_entropy": [0.75244140625, 0.035247802734375, 0.060394287109375, 0.00952911376953125, 0.004627227783203125, 2.0265579223632812e-06, 0.0015687942504882812, 0.0498046875, 0.0004596710205078125, 0.241943359375, 0.043975830078125, 0.0122222900390625, 0.00020992755889892578, 0.188720703125, 0.023284912109375, 0.7001953125, 0.38330078125, 0.0005292892456054688, 0.029937744140625, 0.0070648193359375, 0.031768798828125, 0.001949310302734375, 0.001216888427734375, 0.0005092620849609375, 0.18798828125, 1.3701171875, 0.371337890625, 0.005565643310546875, 1.1005859375, 0.01439666748046875, 0.0107269287109375, 0.06414794921875, 0.00799560546875, 0.006320953369140625, 0.002605438232421875, 0.0024738311767578125, 0.300048828125, 0.264404296875, 1.109375, 1.3818359375, 1.7978515625, 0.1907958984375, 0.2108154296875, 0.01507568359375, 0.028900146484375, 0.0029087066650390625, 0.0845947265625, 0.01229095458984375, 0.0016698837280273438, 0.0003314018249511719, 0.083984375, 0.00019884109497070312], "tokens": [324, 320, 324, 442, 316, 41376, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 533, 902, 41376, 17666, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 322, 13118, 36714, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064]}
{"line_number": 570, "line_type": "original", "code": "            lambda = 4 + (int) (3. * Math.log(dimension));", "entropy": 1.16015625, "is_bug_line": false, "sus_score": 0.5215714573860168, "per_token_entropy": [4.84375, 5.76171875, 0.84765625, 1.947265625, 1.833984375, 0.0439453125, 1.578125, 0.44677734375, 0.10595703125, 0.48583984375, 0.0176849365234375, 3.64453125, 0.060577392578125, 0.150146484375, 0.00418853759765625, 0.11773681640625, 0.0018177032470703125, 0.078125, 0.0704345703125], "tokens": [1468, 9254, 280, 225, 38, 474, 308, 410, 27, 308, 37, 32, 319, 4175, 32, 751, 26, 11694, 876]}
{"line_number": 570, "line_type": "generated", "code": "\n        xold = xmean.copy();\n        es = 0.; // evolution path\n        ps = 0.;\n        pc = 0.;\n        B = MatrixUtils.createRealIdentityMatrix(dimension); // B defines the\n                                                             // coordinate system\n       ", "entropy": 0.48681640625, "is_bug_line": false, "sus_score": 0.5215714573860168, "per_token_entropy": [0.5244140625, 1.9228515625, 0.050811767578125, 0.09075927734375, 0.63623046875, 0.0020580291748046875, 0.1798095703125, 0.03765869140625, 0.0008873939514160156, 0.5498046875, 2.337890625, 0.429931640625, 2.07421875, 0.1395263671875, 1.0439453125, 1.0302734375, 1.8115234375, 0.09991455078125, 0.8076171875, 1.5458984375, 0.0037097930908203125, 0.3076171875, 0.023895263671875, 0.05511474609375, 1.19140625, 0.61328125, 0.0037593841552734375, 0.20556640625, 0.006458282470703125, 0.022705078125, 0.240478515625, 0.40869140625, 0.044219970703125, 1.6064453125, 0.0009050369262695312, 0.0006923675537109375, 0.01531982421875, 0.1654052734375, 0.372802734375, 0.00018012523651123047, 0.0006394386291503906, 0.033966064453125, 0.39794921875, 0.6416015625, 1.484375, 0.08404541015625, 0.1669921875, 1.0048828125, 0.0003757476806640625, 0.00881195068359375, 0.316650390625, 0.57275390625], "tokens": [291, 816, 1455, 280, 816, 6009, 32, 2991, 473, 291, 2813, 280, 225, 34, 22373, 434, 34173, 1519, 291, 9661, 280, 225, 34, 22373, 291, 11487, 280, 225, 34, 22373, 291, 551, 280, 9320, 2755, 32, 1297, 6877, 6729, 4161, 26, 11694, 293, 434, 551, 12706, 322, 29898, 434, 12651, 2664, 291]}
{"line_number": 944, "line_type": "original", "code": "                double diff = boundaries[1][i] - boundaries[0][i];", "entropy": 0.74755859375, "is_bug_line": false, "sus_score": 0.5151882171630859, "per_token_entropy": [9.015625, 2.48046875, 0.6875, 0.0296478271484375, 0.197509765625, 0.00568389892578125, 0.01342010498046875, 0.003009796142578125, 0.0207977294921875, 0.0022907257080078125, 0.0204010009765625, 0.220703125, 0.0005941390991210938, 0.0004703998565673828, 0.0013723373413085938, 0.00025081634521484375, 0.00846099853515625], "tokens": [2071, 2064, 5839, 280, 28116, 77, 35, 1674, 91, 79, 429, 28116, 77, 34, 1674, 91, 970]}
{"line_number": 944, "line_type": "generated", "code": "\n        /**\n         * @param point Original objective variables.\n         * @param repaired Repaired objective variables.\n         * @return penalty for violated bounds.\n         */\n        public double penalty(final double[] point, final double[] repaired) {\n           ", "entropy": 0.216552734375, "is_bug_line": false, "sus_score": 0.5151882171630859, "per_token_entropy": [0.26513671875, 0.1248779296875, 0.0355224609375, 0.0002849102020263672, 0.287353515625, 0.1044921875, 0.9833984375, 1.916015625, 0.1339111328125, 0.034393310546875, 0.06390380859375, 0.002796173095703125, 0.0008559226989746094, 0.001216888427734375, 0.054229736328125, 0.18212890625, 0.00016701221466064453, 0.2498779296875, 0.01384735107421875, 1.013671875, 0.020904541015625, 0.15966796875, 0.01293182373046875, 0.007274627685546875, 0.005008697509765625, 0.001415252685546875, 1.3671875, 0.8916015625, 0.97509765625, 0.000644683837890625, 0.105224609375, 0.357666015625, 0.0261077880859375, 0.028045654296875, 0.00395965576171875, 0.861328125, 0.0125274658203125, 0.0011501312255859375, 0.0004100799560546875, 0.417724609375, 0.0005292892456054688, 0.0014390945434570312, 0.0020198822021484375, 0.0002841949462890625, 0.45458984375, 0.0003223419189453125, 0.0005679130554199219, 0.0019073486328125, 7.152557373046875e-07, 0.0013675689697265625, 0.003925323486328125, 0.06573486328125], "tokens": [291, 1022, 276, 319, 477, 753, 2260, 20175, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 25110, 4886, 32, 276, 319, 477, 601, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 562, 2064, 35806, 26, 3220, 2064, 1178, 2260, 30, 1158, 2064, 1178, 316, 41376, 27, 301, 324]}
{"line_number": 918, "line_type": "original", "code": "                double diff = boundaries[1][i] - boundaries[0][i];", "entropy": 0.86962890625, "is_bug_line": false, "sus_score": 0.5151882171630859, "per_token_entropy": [8.59375, 2.45703125, 3.26953125, 0.038299560546875, 0.095947265625, 0.0206451416015625, 0.040802001953125, 0.00563812255859375, 0.038665771484375, 0.0031185150146484375, 0.01556396484375, 0.1917724609375, 0.0008568763732910156, 0.00091552734375, 0.0013179779052734375, 0.0003743171691894531, 0.0060272216796875], "tokens": [2071, 2064, 5839, 280, 28116, 77, 35, 1674, 91, 79, 429, 28116, 77, 34, 1674, 91, 970]}
{"line_number": 918, "line_type": "generated", "code": "\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired normalized objective variables.\n         * @return the penalty for violated bounds.\n         */\n        public double penalty(final double[] x, final double[] repaired", "entropy": 0.228271484375, "is_bug_line": false, "sus_score": 0.5151882171630859, "per_token_entropy": [0.3603515625, 0.12274169921875, 0.05828857421875, 0.0002372264862060547, 0.6640625, 0.06878662109375, 1.3974609375, 0.58935546875, 0.0007786750793457031, 0.09478759765625, 0.0308837890625, 0.09796142578125, 0.00672149658203125, 0.005344390869140625, 0.0009899139404296875, 1.169921875, 0.947265625, 0.0005922317504882812, 0.41796875, 0.0186309814453125, 1.4033203125, 0.06292724609375, 0.037322998046875, 0.1806640625, 0.03814697265625, 0.0087738037109375, 0.012451171875, 0.0022563934326171875, 0.68896484375, 0.2012939453125, 0.417236328125, 1.0830078125, 0.0005345344543457031, 0.1427001953125, 0.22314453125, 0.044921875, 0.01198577880859375, 0.0026340484619140625, 1.0224609375, 0.00936126708984375, 0.0006794929504394531, 0.00029540061950683594, 0.08343505859375, 0.0005326271057128906, 0.0013570785522460938, 0.00785064697265625, 0.0006098747253417969, 0.122802734375, 0.00024044513702392578, 0.0005645751953125, 0.0011959075927734375, 2.0265579223632812e-06], "tokens": [291, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 17666, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 562, 2064, 35806, 26, 3220, 2064, 1178, 816, 30, 1158, 2064, 1178, 316, 41376]}
{"line_number": 1000, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.8095703125, "is_bug_line": false, "sus_score": 0.5151882171630859, "per_token_entropy": [4.328125, 1.8388671875, 0.0023632049560546875, 0.0015106201171875, 3.689453125, 0.007678985595703125, 0.0104522705078125, 0.0016613006591796875, 0.00597381591796875, 0.00201416015625, 0.034088134765625, 4.4765625, 0.06427001953125, 0.043487548828125, 0.015380859375, 0.0173492431640625, 0.00786590576171875, 0.0208740234375], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 1000, "line_type": "generated", "code": "\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = Math.sqrt(m.", "entropy": 0.02337646484375, "is_bug_line": false, "sus_score": 0.5151882171630859, "per_token_entropy": [0.51611328125, 0.3984375, 0.0015926361083984375, 0.001262664794921875, 0.02410888671875, 0.00119781494140625, 0.001018524169921875, 0.0005950927734375, 0.0007166862487792969, 0.0002830028533935547, 0.0035552978515625, 0.00974273681640625, 5.3048133850097656e-05, 0.0010023117065429688, 1.2516975402832031e-05, 0.00031638145446777344, 0.008026123046875, 0.000732421875, 0.00415802001953125, 0.01114654541015625, 0.006671905517578125, 0.00014412403106689453, 0.00040602684020996094, 0.00012505054473876953, 6.61611557006836e-05, 0.00016772747039794922, 3.337860107421875e-05, 0.00011241436004638672, 0.00016999244689941406, 0.0002465248107910156, 0.0002930164337158203, 4.1365623474121094e-05, 8.535385131835938e-05, 2.6226043701171875e-06, 7.426738739013672e-05, 0.0001627206802368164, 0.00019550323486328125, 0.0012636184692382812, 0.01380157470703125, 0.08319091796875, 0.00011456012725830078, 0.0008859634399414062, 0.00012731552124023438, 8.726119995117188e-05, 0.00012683868408203125, 0.0006728172302246094, 0.039642333984375, 0.002399444580078125, 0.016265869140625, 0.0004000663757324219, 0.06414794921875, 6.473064422607422e-05], "tokens": [291, 436, 308, 410, 540, 280, 225, 34, 45, 540, 333, 345, 32, 30093, 9883, 473, 540, 1987, 301, 324, 436, 308, 410, 281, 280, 225, 34, 45, 281, 333, 345, 32, 19239, 9883, 473, 281, 1987, 301, 400, 343, 77, 100, 1674, 85, 79, 280, 4175, 32, 8663, 26, 95, 32]}
{"line_number": 957, "line_type": "original", "code": "                double[] repaired = repair(point);", "entropy": 2.36328125, "is_bug_line": false, "sus_score": 0.5151882171630859, "per_token_entropy": [4.9375, 6.53125, 2.564453125, 2.71875, 0.0098419189453125, 0.484375, 3.5390625, 0.7021484375, 1.90625, 0.242431640625], "tokens": [2071, 2064, 1178, 316, 41376, 280, 38911, 26, 1493, 293]}
{"line_number": 957, "line_type": "generated", "code": "\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return the penalty for the given point.\n         */\n        private double penalty(", "entropy": 0.223388671875, "is_bug_line": false, "sus_score": 0.5151882171630859, "per_token_entropy": [0.07720947265625, 0.002140045166015625, 0.05474853515625, 0.0009617805480957031, 0.05078125, 0.01385498046875, 0.0029964447021484375, 2.7418136596679688e-06, 0.0019092559814453125, 0.0823974609375, 0.000415802001953125, 0.2083740234375, 0.03485107421875, 0.00946807861328125, 0.00015437602996826172, 0.171630859375, 0.01702880859375, 0.802734375, 0.126220703125, 0.0006728172302246094, 0.0152587890625, 0.008148193359375, 0.0188446044921875, 0.0018100738525390625, 0.0014028549194335938, 0.0003292560577392578, 0.49267578125, 0.68310546875, 0.0007090568542480469, 0.26806640625, 0.007389068603515625, 0.75, 0.03570556640625, 0.49462890625, 0.0157470703125, 0.005161285400390625, 0.0036220550537109375, 0.0016565322875976562, 0.26513671875, 0.26904296875, 1.015625, 1.5048828125, 1.853515625, 1.583984375, 0.499755859375, 0.0323486328125, 0.025146484375, 0.00518035888671875, 0.08245849609375, 0.01186370849609375, 0.00130462646484375, 0.0003693103790283203], "tokens": [400, 320, 324, 320, 324, 442, 316, 41376, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 322, 2702, 2260, 32, 276, 569, 291, 945, 2064, 35806, 26]}
{"line_number": 917, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.68896484375, "is_bug_line": false, "sus_score": 0.5136106014251709, "per_token_entropy": [5.91796875, 4.79296875, 0.0254364013671875, 0.02178955078125, 0.051666259765625, 0.012664794921875, 0.04052734375, 0.01123046875, 0.00882720947265625, 0.0027828216552734375, 0.01078033447265625, 1.43359375, 0.017730712890625, 0.0004432201385498047, 0.006191253662109375, 0.01323699951171875, 0.006343841552734375, 0.0235137939453125], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 917, "line_type": "generated", "code": "\n\n        /**\n         * @param point Normalized objective variables.\n         * @param repaired Repaired normalized objective variables.\n         * @return the penalty for violated bounds.\n         */\n        private double penalty(final double[] point, final double[] repaired", "entropy": 0.1768798828125, "is_bug_line": false, "sus_score": 0.5136106014251709, "per_token_entropy": [0.833984375, 0.035675048828125, 0.038818359375, 0.00019180774688720703, 0.58154296875, 0.0809326171875, 0.9111328125, 0.8828125, 0.0007953643798828125, 0.06072998046875, 0.01507568359375, 0.06451416015625, 0.00286102294921875, 0.001132965087890625, 0.0021038055419921875, 0.26318359375, 0.1895751953125, 0.0002760887145996094, 0.3544921875, 0.0160064697265625, 1.3134765625, 0.05865478515625, 0.03570556640625, 0.1688232421875, 0.02685546875, 0.0094757080078125, 0.0107879638671875, 0.0015077590942382812, 0.59814453125, 0.1842041015625, 0.355712890625, 0.5419921875, 0.00036907196044921875, 0.08599853515625, 0.193359375, 0.033233642578125, 0.00980377197265625, 0.0015039443969726562, 0.72705078125, 0.006855010986328125, 0.000316619873046875, 0.00016629695892333984, 0.0947265625, 0.0005249977111816406, 0.0012350082397460938, 0.00302886962890625, 0.0001348257064819336, 0.3955078125, 0.0002751350402832031, 0.0005350112915039062, 0.0019779205322265625, 1.1920928955078125e-06], "tokens": [584, 1022, 276, 319, 477, 753, 2260, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 17666, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064, 1178, 2260, 30, 1158, 2064, 1178, 316, 41376]}
{"line_number": 521, "line_type": "original", "code": "            for (int i = 0; i < lB.length; i++) {", "entropy": 0.787109375, "is_bug_line": false, "sus_score": 0.5115289092063904, "per_token_entropy": [3.1171875, 5.84375, 0.212158203125, 0.11907958984375, 0.226806640625, 0.051483154296875, 0.1103515625, 0.1549072265625, 0.01552581787109375, 0.0251922607421875, 0.0117034912109375, 3.8046875, 0.96142578125, 0.01102447509765625, 0.0026912689208984375, 0.05181884765625, 0.18408203125, 0.01285552978515625, 0.037109375], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 456, 52, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 521, "line_type": "generated", "code": "\n        }\n        // Initialize dynamic (internal) search control parameters and constants.\n        mu = (int) (lambda / 2);\n        weights = new double[mu];\n        mueff = 1;\n        cc = (4 + mueff / dimension", "entropy": 0.337646484375, "is_bug_line": false, "sus_score": 0.5115289092063904, "per_token_entropy": [0.81201171875, 0.1343994140625, 0.77392578125, 1.734375, 1.7783203125, 0.6181640625, 0.1058349609375, 0.2191162109375, 0.037109375, 0.78173828125, 0.72119140625, 0.019287109375, 0.73681640625, 0.568359375, 0.197265625, 0.0816650390625, 0.958984375, 0.06585693359375, 0.436279296875, 0.01165008544921875, 0.018463134765625, 0.288330078125, 0.059844970703125, 0.11944580078125, 0.003368377685546875, 0.000598907470703125, 0.29296875, 0.320556640625, 0.498779296875, 0.08270263671875, 0.10498046875, 0.06756591796875, 0.0097198486328125, 0.16748046875, 0.0160980224609375, 0.0706787109375, 0.77490234375, 6.079673767089844e-06, 0.00118255615234375, 0.1475830078125, 0.45068359375, 2.103515625, 0.4365234375, 0.2420654296875, 0.037841796875, 0.0838623046875, 0.005199432373046875, 0.2734375, 0.07281494140625, -0.0, 0.0083770751953125, 0.01181793212890625], "tokens": [291, 320, 291, 434, 8958, 7094, 308, 3259, 27, 3233, 3498, 3377, 461, 12388, 32, 291, 11768, 280, 308, 410, 27, 308, 5962, 517, 225, 36, 293, 291, 11229, 280, 537, 2064, 77, 6974, 970, 291, 35813, 486, 280, 225, 35, 45, 291, 10639, 280, 308, 38, 474, 35813, 486, 517, 8742]}
{"line_number": 522, "line_type": "original", "code": "                if (Double.isInfinite(lB[i]) ||", "entropy": 1.8115234375, "is_bug_line": false, "sus_score": 0.5115289092063904, "per_token_entropy": [7.0625, 1.373046875, 0.0438232421875, 7.3046875, 0.0019989013671875, 0.3193359375, 0.0007886886596679688, 0.0029048919677734375, 5.31640625, 2.142578125, 0.25341796875, 0.2159423828125, 0.5732421875, 0.748046875], "tokens": [2071, 415, 308, 4075, 32, 28823, 11949, 26, 94, 52, 77, 91, 1130, 1276]}
{"line_number": 522, "line_type": "generated", "code": "\n        if (mu <= 0) {\n            mu = lambda / 2;\n        }", "entropy": 0.2119140625, "is_bug_line": false, "sus_score": 0.5115289092063904, "per_token_entropy": [0.25537109375, 1.05859375, 0.04351806640625, 0.68017578125, 0.392822265625, 0.031036376953125, 0.0146484375, 0.09967041015625, 0.004489898681640625, 0.05853271484375, 0.1055908203125, 0.001636505126953125, 0.6767578125, 0.35791015625, 0.0005855560302734375, 0.0004680156707763672, 0.1474609375, 0.09747314453125, 0.00047969818115234375], "tokens": [291, 415, 308, 6974, 2511, 225, 34, 27, 301, 324, 11768, 280, 9254, 517, 225, 36, 45, 291, 320]}
{"line_number": 1003, "line_type": "original", "code": "                } else if (x[i] > 1.0) {", "entropy": 1.1474609375, "is_bug_line": false, "sus_score": 0.507713794708252, "per_token_entropy": [3.08984375, 5.171875, 5.04296875, 2.291015625, 0.054718017578125, 2.0234375, 0.130859375, 0.071044921875, 0.00916290283203125, 0.17333984375, 0.0467529296875, 0.06396484375, 0.1173095703125, 0.003143310546875, 0.035186767578125, 0.037322998046875], "tokens": [2071, 320, 813, 415, 308, 106, 77, 91, 79, 848, 225, 35, 32, 34, 27, 301]}
{"line_number": 1003, "line_type": "generated", "code": "\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m\n     *            Input matrix\n     * @return Matrix representing the element-wise exponential of m.\n     */\n    private static Real", "entropy": 0.0885009765625, "is_bug_line": false, "sus_score": 0.507713794708252, "per_token_entropy": [0.29296875, 0.007080078125, 0.01415252685546875, 9.85860824584961e-05, 0.0263824462890625, 0.005817413330078125, 0.00275421142578125, 0.00027680397033691406, 1.4662742614746094e-05, 1.0371208190917969e-05, 4.1365623474121094e-05, 1.9073486328125e-06, 6.198883056640625e-06, 0.00014030933380126953, 0.001007080078125, 0.041961669921875, 0.00785064697265625, 0.0005083084106445312, 0.1639404296875, 0.00040340423583984375, 0.242431640625, 0.12091064453125, 0.01503753662109375, 0.00032711029052734375, 0.227294921875, 0.01345062255859375, 0.265625, 0.462890625, 0.00019288063049316406, 0.0182952880859375, 0.073486328125, 0.015411376953125, 0.0966796875, 0.0006833076477050781, 0.0010652542114257812, 0.1676025390625, 0.09832763671875, 0.03692626953125, 0.02874755859375, 0.0697021484375, 0.0022735595703125, 0.0004665851593017578, 1.7587890625, 0.23291015625, 0.0170135498046875, 0.0255584716796875, 0.00473785400390625, 0.00371551513671875, 0.0035266876220703125, 0.01617431640625, 0.0118408203125, 0.0027523040771484375], "tokens": [324, 320, 291, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 275, 319, 1468, 4237, 5045, 275, 319, 477, 601, 9320, 12681, 322, 1994, 31, 3767, 41655, 432, 345, 32, 275, 569, 284, 945, 907, 11443]}
{"line_number": 945, "line_type": "original", "code": "                res[i] = diff * x[i] + boundaries[0][i];", "entropy": 1.365234375, "is_bug_line": false, "sus_score": 0.5073804259300232, "per_token_entropy": [6.75, 9.984375, 0.40673828125, 0.062164306640625, 0.002895355224609375, 0.02801513671875, 3.482421875, 0.78466796875, 1.83984375, 0.0207977294921875, 0.004436492919921875, 0.90087890625, 0.7119140625, 0.87646484375, 0.006381988525390625, 0.0256805419921875, 0.007389068603515625, 0.001224517822265625, 0.036376953125], "tokens": [2071, 736, 77, 91, 79, 280, 5839, 319, 816, 77, 91, 79, 474, 28116, 77, 34, 1674, 91, 970]}
{"line_number": 945, "line_type": "generated", "code": "\n        /**\n         * @param point Original objective variables.\n         * @param repaired Repaired objective variables.\n         * @return the penalty.\n         */\n        private double penalty(final double[] point, final double[] repaired) {\n            double penalty =", "entropy": 0.231201171875, "is_bug_line": false, "sus_score": 0.5073804259300232, "per_token_entropy": [1.1201171875, 0.436279296875, 0.035247802734375, 0.0024852752685546875, 0.2344970703125, 0.17919921875, 1.0966796875, 1.87109375, 0.1380615234375, 0.03216552734375, 0.057281494140625, 0.0031108856201171875, 0.0021610260009765625, 0.0008792877197265625, 0.07342529296875, 0.21240234375, 0.0001742839813232422, 0.274169921875, 0.0142822265625, 0.87158203125, 0.0221405029296875, 0.150146484375, 0.0123443603515625, 0.01486968994140625, 0.004840850830078125, 0.0019073486328125, 0.54833984375, 0.371337890625, 1.2265625, 0.028656005859375, 0.035980224609375, 0.0150909423828125, 0.9423828125, 0.01256561279296875, 0.0015926361083984375, 0.00047278404235839844, 0.394775390625, 0.0004787445068359375, 0.0010433197021484375, 0.0023403167724609375, 0.0002593994140625, 0.491943359375, 0.00032329559326171875, 0.0005788803100585938, 0.00226593017578125, 3.5762786865234375e-07, 0.0008916854858398438, 0.00531768798828125, 0.09796142578125, 0.16650390625, 0.7900390625, 0.0230255126953125], "tokens": [291, 1022, 276, 319, 477, 753, 2260, 20175, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064, 1178, 2260, 30, 1158, 2064, 1178, 316, 41376, 27, 301, 324, 2064, 35806, 280]}
{"line_number": 529, "line_type": "original", "code": "            if (hasInfiniteBounds) {", "entropy": 2.029296875, "is_bug_line": false, "sus_score": 0.5069841742515564, "per_token_entropy": [4.88671875, 3.244140625, 0.1602783203125, 6.29296875, 1.2763671875, 0.100830078125, 0.1990966796875, 0.07855224609375], "tokens": [1468, 415, 308, 2040, 39524, 8285, 27, 301]}
{"line_number": 529, "line_type": "generated", "code": "\n        // initialize mu\n        double[][] mueffArray = new double[1][1];\n        mueffArray[0][0] = 1.0 / (dimension * (dimension + 1.3));\n        RealMatrix inmueff =", "entropy": 0.386474609375, "is_bug_line": false, "sus_score": 0.5069841742515564, "per_token_entropy": [0.306640625, 0.474365234375, 0.89892578125, 1.451171875, 0.3818359375, 0.91357421875, 1.96484375, 1.2158203125, 0.01611328125, 0.5205078125, 0.01922607421875, 0.056243896484375, 0.0018758773803710938, 0.0310821533203125, 1.0302734375, 0.003582000732421875, 0.1536865234375, 0.000728607177734375, 0.054656982421875, 0.2149658203125, 7.975101470947266e-05, 0.016632080078125, 0.002918243408203125, 0.0007758140563964844, 0.01169586181640625, 0.0005693435668945312, 0.0045623779296875, 0.31005859375, 1.5283203125, 0.302001953125, 0.76708984375, 0.1270751953125, 0.37158203125, 1.759765625, 0.85791015625, 0.370849609375, 0.859375, 0.126220703125, 0.0276947021484375, 0.041595458984375, 0.07769775390625, 0.1976318359375, 0.0134124755859375, 0.6455078125, 0.666015625, 0.59521484375, 0.002033233642578125, 0.587890625, 0.08935546875, 0.00010967254638671875, 0.0086669921875, 0.01132965087890625], "tokens": [291, 434, 7379, 11768, 291, 2064, 11336, 35813, 486, 1261, 280, 537, 2064, 77, 35, 1674, 35, 970, 291, 35813, 486, 1261, 77, 34, 1674, 34, 79, 280, 225, 35, 32, 34, 517, 308, 11694, 319, 308, 11694, 474, 225, 35, 32, 37, 876, 291, 11443, 4161, 328, 95, 340, 486, 280]}
{"line_number": 3234, "line_type": "original", "code": "", "entropy": 0.2344970703125, "is_bug_line": false, "sus_score": 0.5065014958381653, "per_token_entropy": [0.2344970703125], "tokens": [203]}
{"line_number": 3234, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5065014958381653, "per_token_entropy": [], "tokens": []}
{"line_number": 767, "line_type": "original", "code": "        updateBD(negccov);", "entropy": 1.75, "is_bug_line": false, "sus_score": 0.5065014958381653, "per_token_entropy": [3.294921875, 4.875, 4.078125, 0.370361328125, 1.3251953125, 0.02239990234375, 0.0017251968383789062, 0.03082275390625], "tokens": [351, 1974, 7644, 26, 8095, 85, 12626, 293]}
{"line_number": 767, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns the index of the maximum element of a vector.\n     *\n     * @param vals Vector.\n     * @return Index of maximum element.\n     */\n    private static int maxIndex(double[] vals) {\n        int idx", "entropy": 0.414306640625, "is_bug_line": false, "sus_score": 0.5065014958381653, "per_token_entropy": [0.35498046875, 0.0099334716796875, 0.34814453125, 0.0797119140625, 0.01241302490234375, 0.00019252300262451172, 2.32421875, 0.5048828125, 2.1875, 0.52587890625, 0.165283203125, 2.033203125, 1.71875, 1.24609375, 0.99609375, 0.8212890625, 0.142333984375, 0.055145263671875, 0.007770538330078125, 0.048675537109375, 0.00030803680419921875, 0.0060577392578125, 0.004726409912109375, 1.5537109375, 0.337158203125, 0.3837890625, 0.00153350830078125, 0.0026912689208984375, 0.1273193359375, 0.05340576171875, 0.423828125, 0.05023193359375, 1.1435546875, 0.42041015625, 0.1630859375, 0.0038700103759765625, 0.00830078125, 0.005809783935546875, 0.0504150390625, 0.1431884765625, 0.006114959716796875, 0.70263671875, 0.529296875, 0.0032901763916015625, 0.08575439453125, 0.0280914306640625, 0.0003783702850341797, 0.0013294219970703125, 0.0021514892578125, 0.006862640380859375, 0.427490234375, 1.2861328125], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 322, 1650, 432, 322, 7091, 1994, 432, 312, 4026, 32, 275, 319, 275, 319, 477, 753, 20200, 4107, 32, 275, 319, 477, 601, 6422, 432, 7091, 1994, 32, 275, 569, 284, 945, 907, 629, 1769, 1284, 26, 2627, 1178, 20200, 27, 301, 291, 629, 5417]}
{"line_number": 535, "line_type": "original", "code": "                boundaries = new double[2][];", "entropy": 2.009765625, "is_bug_line": false, "sus_score": 0.5064889192581177, "per_token_entropy": [7.20703125, 5.52734375, 1.21484375, 0.269775390625, 0.0869140625, 0.763671875, 0.07098388671875, 0.0212860107421875, 2.939453125], "tokens": [2071, 28116, 280, 537, 2064, 77, 36, 1674, 970]}
{"line_number": 535, "line_type": "generated", "code": "\n        if (stopFitness == null) {\n            stopFitness = 1e-11 * max(insigma);\n        }", "entropy": 0.468994140625, "is_bug_line": false, "sus_score": 0.5064889192581177, "per_token_entropy": [0.265380859375, 1.8701171875, 0.07257080078125, 0.92138671875, 1.28125, 0.78564453125, 0.98828125, 0.08319091796875, 0.022918701171875, 0.045196533203125, 0.41748046875, 0.0323486328125, 0.0228424072265625, 1.6669921875, 0.0936279296875, 0.25244140625, 0.126220703125, 0.299560546875, 0.03875732421875, 1.1318359375, 1.65234375, 0.09124755859375, 0.346435546875, 0.0001195669174194336, 0.05224609375, 0.10369873046875, 0.0006213188171386719], "tokens": [291, 415, 308, 4048, 48599, 610, 744, 27, 301, 324, 4719, 48599, 280, 225, 35, 87, 31, 35, 35, 319, 1769, 26, 2372, 30624, 293, 291, 320]}
{"line_number": 536, "line_type": "original", "code": "                boundaries[0] = lB;", "entropy": 2.232421875, "is_bug_line": false, "sus_score": 0.504741370677948, "per_token_entropy": [6.9375, 8.15625, 0.8515625, 0.1568603515625, 0.021148681640625, 0.048309326171875, 3.791015625, 0.002010345458984375, 0.13134765625], "tokens": [2071, 28116, 77, 34, 79, 280, 456, 52, 45]}
{"line_number": 536, "line_type": "generated", "code": "\n        // initialize dynamic (internal) strategy parameters and constants\n        mueff = 1.0 / sigma.transpose().multiply(sigma).getNorm(); // variance-effectiveness of sum w_i x_i\n        cc = (4.0 +", "entropy": 0.339599609375, "is_bug_line": false, "sus_score": 0.504741370677948, "per_token_entropy": [0.336181640625, 1.5654296875, 0.79248046875, 1.3212890625, 0.10516357421875, 0.350830078125, 0.0217132568359375, 0.701171875, 0.09283447265625, 0.007747650146484375, 0.0076904296875, 0.057952880859375, 1.14453125, 2.491474151611328e-05, 0.0364990234375, 0.340576171875, 0.1650390625, 1.1376953125, 0.0269775390625, 0.194580078125, 1.306640625, 0.86865234375, 1.501953125, 0.053375244140625, 0.51171875, 0.004871368408203125, 0.034881591796875, 0.1300048828125, 1.287109375, 0.603515625, 0.058929443359375, 1.1025390625, 0.292236328125, 0.01364898681640625, 0.05596923828125, 0.004589080810546875, 0.0018558502197265625, 0.1966552734375, 0.1646728515625, 0.1248779296875, 0.00775909423828125, 0.0013275146484375, 0.0003349781036376953, 0.0025501251220703125, 0.0828857421875, 0.498779296875, 0.056610107421875, 0.07220458984375, 0.0235595703125, 0.124267578125, 0.041748046875, 0.0227508544921875], "tokens": [291, 434, 7379, 7094, 308, 3259, 27, 13689, 3377, 461, 12388, 291, 35813, 486, 280, 225, 35, 32, 34, 517, 16355, 32, 16547, 922, 20123, 26, 11756, 547, 371, 14373, 473, 434, 25809, 31, 7469, 28597, 432, 3632, 341, 81, 91, 816, 81, 91, 291, 10639, 280, 308, 38, 32, 34, 474]}
{"line_number": 919, "line_type": "original", "code": "                res[i] = (x[i] - boundaries[0][i]) / diff;", "entropy": 1.109375, "is_bug_line": false, "sus_score": 0.5044816136360168, "per_token_entropy": [6.47265625, 9.0859375, 0.51708984375, 0.075927734375, 0.0034885406494140625, 0.0213470458984375, 2.3359375, 1.4580078125, 0.037017822265625, 0.004184722900390625, 0.0193023681640625, 0.46044921875, 0.7001953125, 0.0240936279296875, 0.040252685546875, 0.013031005859375, 0.0019397735595703125, 0.0234375, 0.25732421875, 1.6767578125, 0.07550048828125], "tokens": [2071, 736, 77, 91, 79, 280, 308, 106, 77, 91, 79, 429, 28116, 77, 34, 1674, 91, 1130, 517, 5839, 45]}
{"line_number": 919, "line_type": "generated", "code": "\n         * @param point Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return penalty for violated bounds.\n         */\n        private double penalty(final double[] point, final double[] repaired) {\n            double", "entropy": 0.2059326171875, "is_bug_line": false, "sus_score": 0.5044816136360168, "per_token_entropy": [1.033203125, 0.200927734375, 0.2105712890625, 0.07470703125, 0.80419921875, 1.0859375, 0.0008006095886230469, 0.06475830078125, 0.014404296875, 0.0697021484375, 0.00542449951171875, 0.00482940673828125, 0.0016422271728515625, 0.314208984375, 0.1796875, 0.00025963783264160156, 0.396240234375, 0.0169677734375, 1.470703125, 0.0850830078125, 0.265625, 0.0308837890625, 0.0550537109375, 0.0101776123046875, 0.0027370452880859375, 1.2607421875, 0.453125, 0.62744140625, 0.0004546642303466797, 0.078369140625, 0.419189453125, 0.040985107421875, 0.016204833984375, 0.0100555419921875, 0.69677734375, 0.0077056884765625, 0.0005774497985839844, 0.0002448558807373047, 0.095947265625, 0.0004837512969970703, 0.0012121200561523438, 0.003696441650390625, 0.0002143383026123047, 0.3818359375, 0.00024175643920898438, 0.0005698204040527344, 0.0019931793212890625, 1.0728836059570312e-06, 0.0008797645568847656, 0.0017719268798828125, 0.058319091796875, 0.1539306640625], "tokens": [276, 319, 477, 753, 2260, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 25110, 4886, 32, 276, 319, 477, 601, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064, 1178, 2260, 30, 1158, 2064, 1178, 316, 41376, 27, 301, 324, 2064]}
{"line_number": 537, "line_type": "original", "code": "                boundaries[1] = uB;", "entropy": 2.462890625, "is_bug_line": true, "sus_score": 0.5040295720100403, "per_token_entropy": [7.21875, 8.9140625, 1.9208984375, 0.29833984375, 0.052581787109375, 0.05230712890625, 3.578125, 0.0034923553466796875, 0.1268310546875], "tokens": [2071, 28116, 77, 35, 79, 280, 1044, 52, 45]}
{"line_number": 537, "line_type": "generated", "code": "\n        // initialize dynamic (internal) strategy parameters and constants\n        mueff = 1.0 / sigma.transpose().multiply(sigma).scalarMultiply(dimension).getNorm();\n        cc = (4.0 + mueff / dimension) / (dimension", "entropy": 0.34033203125, "is_bug_line": true, "sus_score": 0.5040295720100403, "per_token_entropy": [1.029296875, 0.300048828125, 0.6875, 1.27734375, 0.09222412109375, 0.17626953125, 0.030792236328125, 0.69384765625, 0.1077880859375, 0.01107025146484375, 0.01195526123046875, 0.10162353515625, 1.1259765625, 2.968311309814453e-05, 0.03399658203125, 0.349853515625, 0.11761474609375, 1.044921875, 0.03839111328125, 0.1463623046875, 1.7265625, 0.44873046875, 1.5859375, 0.048919677734375, 0.479248046875, 0.004520416259765625, 0.040924072265625, 0.1241455078125, 1.0771484375, 0.0209808349609375, 0.0175018310546875, 0.9208984375, 0.27587890625, 0.68798828125, 0.7900390625, 0.0592041015625, 0.5048828125, 0.5380859375, 0.06109619140625, 0.091552734375, 0.0196075439453125, 0.134521484375, 0.041778564453125, 0.016998291015625, 0.0005917549133300781, 1.1920928955078125e-07, 0.00551605224609375, 0.00655364990234375, 0.0037479400634765625, 3.445148468017578e-05, 0.007099151611328125, 0.5888671875], "tokens": [291, 434, 7379, 7094, 308, 3259, 27, 13689, 3377, 461, 12388, 291, 35813, 486, 280, 225, 35, 32, 34, 517, 16355, 32, 16547, 922, 20123, 26, 11756, 547, 13049, 27732, 26, 11694, 547, 371, 14373, 473, 291, 10639, 280, 308, 38, 32, 34, 474, 35813, 486, 517, 8742, 27, 517, 308, 11694]}
{"line_number": 514, "line_type": "original", "code": "                hasFiniteBounds = true;", "entropy": 3.099609375, "is_bug_line": false, "sus_score": 0.5032171607017517, "per_token_entropy": [7.796875, 12.0859375, 0.60009765625, 0.035919189453125, 0.204833984375, 0.91650390625, 0.06201171875], "tokens": [2071, 1401, 40643, 8285, 280, 861, 45]}
{"line_number": 514, "line_type": "generated", "code": "    * Checks whether the initial point is feasible.", "entropy": 1.13671875, "is_bug_line": false, "sus_score": 0.5032171607017517, "per_token_entropy": [2.13671875, 1.46875, 3.171875, 1.244140625, 0.55859375, 1.2333984375, 0.60546875, 0.54296875, 1.091796875, 0.0008740425109863281, 0.456787109375], "tokens": [264, 319, 17279, 4946, 322, 2815, 2260, 438, 5246, 38294, 32]}
{"line_number": 3236, "line_type": "original", "code": "", "entropy": 0.2344970703125, "is_bug_line": false, "sus_score": 0.4973989427089691, "per_token_entropy": [0.2344970703125], "tokens": [203]}
{"line_number": 3236, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.4973989427089691, "per_token_entropy": [], "tokens": []}
