{"line_number": 229, "line_type": "original", "code": "            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),", "entropy": 0.85302734375, "is_bug_line": false, "sus_score": 0.5728874802589417, "per_token_entropy": [7.06640625, 3.02734375, 0.135986328125, 2.77734375, 5.9604644775390625e-05, 0.0003294944763183594, 0.027374267578125, 0.003925323486328125, 0.85302734375, 0.65869140625, 0.337890625, 0.042877197265625, 0.117919921875, 0.003017425537109375, 2.603515625, 3.2109375, 2.1219253540039062e-05, 0.006183624267578125, 0.9248046875, 0.042694091796875, 3.21875, 0.0003216266632080078, 0.321044921875, 0.30029296875, 9.298324584960938e-06, 0.00539398193359375, 0.234619140625, 0.000865936279296875, 0.0064239501953125, 0.455078125, 0.053070068359375], "tokens": [1468, 415, 308, 12200, 5717, 32, 3596, 26, 106, 35, 429, 816, 34, 27, 333, 15938, 5717, 32, 1449, 26, 2051, 362, 319, 15938, 5717, 32, 3596, 26, 106, 35, 471]}
{"line_number": 229, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5728874802589417, "per_token_entropy": [], "tokens": []}
{"line_number": 161, "line_type": "original", "code": "            final double fx = computeObjectiveValue(x);", "entropy": 1.6728515625, "is_bug_line": false, "sus_score": 0.5647656917572021, "per_token_entropy": [4.15234375, 9.4765625, 0.2685546875, 3.8125, 0.180908203125, 0.393310546875, 5.8650970458984375e-05, 0.00012099742889404297, 0.00707244873046875, 0.0297698974609375, 0.07763671875], "tokens": [1468, 1158, 2064, 20670, 280, 7596, 33312, 882, 26, 106, 293]}
{"line_number": 161, "line_type": "generated", "code": "\n                }\n            }\n\n            // If the root lies within the current interval, then we can't\n            // get any closer to the root than we already are.\n            if (x1 <= x0) {\n                switch (allowed) {\n                case ANY_", "entropy": 0.3115234375, "is_bug_line": false, "sus_score": 0.5647656917572021, "per_token_entropy": [0.46435546875, 0.257080078125, 0.161865234375, 0.0025653839111328125, 0.26953125, 0.057403564453125, 0.2222900390625, 0.34521484375, 1.9501953125, 0.705078125, 0.72119140625, 0.1282958984375, 0.93505859375, 0.54052734375, 0.28271484375, 0.7216796875, 0.67236328125, 0.29931640625, 0.19140625, 1.5341796875, 0.006259918212890625, 0.28369140625, 0.06982421875, 0.0130615234375, 0.07330322265625, 0.703125, 0.0777587890625, 0.2164306640625, 0.005008697509765625, 0.05084228515625, 0.003040313720703125, 0.032745361328125, 0.1492919921875, 0.22607421875, 0.365478515625, 1.0927734375, 0.70751953125, 0.79443359375, 0.17138671875, 0.2496337890625, 0.11541748046875, 0.00115966796875, 0.016387939453125, 0.183349609375, 0.001522064208984375, 0.01611328125, 0.00026035308837890625, 0.0003039836883544922, 0.0361328125, 0.0025272369384765625, 0.0743408203125, 1.430511474609375e-06], "tokens": [400, 320, 324, 320, 1064, 434, 1670, 322, 3051, 46138, 4797, 322, 1550, 7898, 30, 1615, 996, 883, 1330, 324, 434, 622, 1346, 30682, 372, 322, 3051, 2784, 996, 3425, 884, 32, 324, 415, 308, 106, 35, 2511, 816, 34, 27, 301, 400, 3578, 308, 11327, 27, 301, 400, 1135, 2964, 81]}
{"line_number": 198, "line_type": "original", "code": "            if (FastMath.abs(f1) <= ftol) {", "entropy": 0.91357421875, "is_bug_line": false, "sus_score": 0.5646928548812866, "per_token_entropy": [6.703125, 2.90625, 0.1207275390625, 1.5205078125, 0.00015807151794433594, 0.0002460479736328125, 0.0233001708984375, 0.0029239654541015625, 1.8623046875, 0.11151123046875, 0.055938720703125, 0.95068359375, 0.27783203125, 0.0010433197021484375, 0.058197021484375, 0.0218353271484375], "tokens": [1468, 415, 308, 12200, 5717, 32, 3596, 26, 88, 35, 27, 2511, 296, 14598, 27, 301]}
{"line_number": 198, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5646928548812866, "per_token_entropy": [], "tokens": []}
{"line_number": 124, "line_type": "original", "code": "        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);", "entropy": 1.1806640625, "is_bug_line": false, "sus_score": 0.5626710057258606, "per_token_entropy": [4.4453125, 7.72265625, 4.5, 1.34375, 0.9033203125, 0.0047454833984375, 0.013641357421875, 0.027618408203125, 0.008636474609375, 0.94482421875, 0.00604248046875, 0.03253173828125, 0.033935546875, 0.9208984375, 0.061981201171875, 2.06640625, 3.568359375, 0.0014743804931640625, 0.002048492431640625, 0.53076171875, 0.0016355514526367188, 0.00021219253540039062, 0.0181732177734375], "tokens": [351, 442, 10932, 26, 1449, 14066, 30, 296, 30, 1847, 30, 1769, 30, 1477, 882, 30, 38886, 13628, 32, 15205, 81, 25590, 293]}
{"line_number": 124, "line_type": "generated", "code": "\n                // If the previous interval was inverted, the new interval is\n                // bracketed by the previous right bound and the current\n                // approximation.\n                if (inverted) {\n                    x1 = x0;\n                    f1 = f0;\n                }\n               ", "entropy": 0.57080078125, "is_bug_line": false, "sus_score": 0.5626710057258606, "per_token_entropy": [1.0380859375, 0.7373046875, 2.30078125, 0.75244140625, 2.36328125, 0.359375, 0.03302001953125, 0.08026123046875, 0.150634765625, 1.6796875, 1.76171875, 0.215576171875, 0.487548828125, 0.56884765625, 0.0007739067077636719, 2.951171875, 0.2073974609375, 1.015625, 0.7451171875, 1.2294921875, 1.6259765625, 0.10845947265625, 0.2041015625, 0.126953125, 0.485107421875, 1.2744140625, 0.0001500844955444336, 0.19873046875, 0.21142578125, 0.63916015625, 0.1270751953125, 0.04022216796875, 0.01410675048828125, 0.00888824462890625, 0.00481414794921875, 0.1392822265625, 0.8623046875, 1.0302734375, 0.005565643310546875, 0.1796875, 1.6484375, 0.01529693603515625, 0.0623779296875, 0.08209228515625, 0.0018310546875, 0.0001373291015625, 0.02587890625, 0.0002872943878173828, 0.0006117820739746094, 1.0009765625, 0.00782012939453125, 0.88330078125], "tokens": [400, 434, 1670, 322, 4552, 7898, 1597, 37592, 30, 322, 537, 7898, 438, 400, 434, 33828, 318, 810, 322, 4552, 2091, 5085, 461, 322, 1550, 400, 434, 39431, 32, 400, 415, 308, 47910, 27, 301, 528, 816, 35, 280, 816, 34, 45, 528, 296, 35, 280, 296, 34, 45, 400, 320, 400]}
{"line_number": 54, "line_type": "original", "code": "", "entropy": 3.013671875, "is_bug_line": false, "sus_score": 0.5599362850189209, "per_token_entropy": [3.013671875], "tokens": [203]}
{"line_number": 54, "line_type": "generated", "code": "\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public AllowedSolution getAllowedSolution() {\n        return allowed;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void setAllowedSolution(final AllowedSolution allowed) {", "entropy": 0.108154296875, "is_bug_line": false, "sus_score": 0.5599362850189209, "per_token_entropy": [0.372314453125, 0.01253509521484375, 0.0721435546875, 1.7523765563964844e-05, 1.787109375, 0.0006041526794433594, 0.0008726119995117188, 0.0098876953125, 0.1407470703125, 0.0127105712890625, 0.7060546875, 0.0018100738525390625, 0.013641357421875, 0.1636962890625, 1.2333984375, 2.9802322387695312e-06, 0.01678466796875, 0.006107330322265625, 2.86102294921875e-05, 0.0059356689453125, 0.0008187294006347656, 0.01534271240234375, 0.007312774658203125, 0.0168609619140625, 0.0005993843078613281, 0.0104522705078125, 0.000415802001953125, 0.32177734375, 0.0010824203491210938, 0.0089874267578125, 2.6702880859375e-05, 0.1829833984375, 0.00011348724365234375, 0.00020134449005126953, 0.0007386207580566406, 0.0479736328125, 0.006984710693359375, 0.0130157470703125, 0.0006861686706542969, 0.00750732421875, 0.020599365234375, 0.01788330078125, 0.006145477294921875, 0.0018587112426757812, 4.887580871582031e-06, 9.85860824584961e-05, 0.310791015625, 0.0004687309265136719, 2.1457672119140625e-06, 0.001781463623046875, 0.06427001953125, 0.0020542144775390625], "tokens": [284, 1022, 275, 319, 3088, 18446, 111, 275, 569, 284, 477, 1788, 284, 562, 38886, 13628, 622, 12759, 13628, 346, 301, 291, 442, 6660, 45, 284, 320, 446, 1022, 275, 319, 3088, 18446, 111, 275, 569, 284, 477, 1788, 284, 562, 763, 739, 12759, 13628, 26, 3220, 38886, 13628, 6660, 27, 301]}
{"line_number": 46, "line_type": "original", "code": " * @version $Id$", "entropy": 3.4765625, "is_bug_line": false, "sus_score": 0.5570233464241028, "per_token_entropy": [8.15625, 2.740234375, 9.2109375, 0.032623291015625, 0.019256591796875, 0.70361328125], "tokens": [319, 477, 1648, 398, 606, 22]}
{"line_number": 46, "line_type": "generated", "code": "\n        this.allowed = AllowedSolution.ANY_SIDE;\n        this.method = method;\n    }\n\n    /**\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n     * @param functionValueAccuracy Maximum function", "entropy": 0.1524658203125, "is_bug_line": false, "sus_score": 0.5570233464241028, "per_token_entropy": [0.92822265625, 0.052154541015625, 0.0006456375122070312, 0.1669921875, 0.0028705596923828125, 0.006252288818359375, 1.0609626770019531e-05, 0.0002073049545288086, 0.00275421142578125, 0.00010371208190917969, 2.2649765014648438e-06, 0.004421234130859375, 0.288330078125, 0.0013599395751953125, 1.0609626770019531e-05, 0.0021762847900390625, 0.0035572052001953125, 0.0007009506225585938, 0.002620697021484375, 0.088134765625, 0.0021457672119140625, 0.179443359375, 0.06268310546875, 0.08197021484375, 2.3365020751953125e-05, 1.732421875, 1.2607421875, 1.8447265625, 0.0016164779663085938, 0.962890625, 0.0014677047729492188, 0.058837890625, 0.00791168212890625, 0.0018377304077148438, 0.00611114501953125, 0.0008516311645507812, 0.002025604248046875, 0.0031490325927734375, 4.267692565917969e-05, 0.015594482421875, 0.0001838207244873047, 0.00010275840759277344, 0.0007123947143554688, 0.005817413330078125, 0.011810302734375, 0.0013723373413085938, 0.0030956268310546875, 0.11346435546875, 0.0005612373352050781, 0.00010311603546142578, 0.013702392578125, 0.0008473396301269531], "tokens": [291, 458, 32, 11327, 280, 38886, 13628, 32, 15205, 81, 25590, 45, 291, 458, 32, 1959, 280, 1411, 45, 284, 320, 446, 1022, 275, 319, 477, 753, 6491, 26201, 18690, 6491, 1048, 32, 275, 319, 477, 753, 7976, 26201, 18690, 7976, 1048, 32, 275, 319, 477, 753, 667, 882, 26201, 18690, 667]}
{"line_number": 195, "line_type": "original", "code": "            // If the function value of the last approximation is too small,", "entropy": 2.14453125, "is_bug_line": false, "sus_score": 0.5552994608879089, "per_token_entropy": [7.30078125, 0.22998046875, 1.2587890625, 0.368408203125, 2.40625, 0.300048828125, 3.123046875, 0.1435546875, 4.40234375, 2.958984375, 1.2041015625, 3.375, 2.529296875, 0.4208984375], "tokens": [1468, 434, 1670, 322, 667, 786, 432, 322, 2401, 39431, 438, 5133, 5532, 30]}
{"line_number": 195, "line_type": "generated", "code": "\n            // If the function value is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(f1) <= FastMath.max(rtol * FastMath.abs(f1),", "entropy": 0.282470703125, "is_bug_line": false, "sus_score": 0.5552994608879089, "per_token_entropy": [0.33544921875, 0.11669921875, 0.60009765625, 0.37060546875, 2.2109375, 0.2578125, 1.2001953125, 2.90625, 0.11907958984375, 0.37060546875, 0.1861572265625, 0.0019855499267578125, 1.0251998901367188e-05, 0.70068359375, 0.80859375, 1.3037109375, 0.00019109249114990234, 0.213134765625, 0.10491943359375, 0.01154327392578125, 0.0090789794921875, 0.0099029541015625, 0.004425048828125, 0.057647705078125, 0.09814453125, 0.042327880859375, 0.03875732421875, 0.0248565673828125, 2.110004425048828e-05, 3.421306610107422e-05, 0.0252685546875, 0.00226593017578125, 0.2366943359375, 0.0044708251953125, 0.0081024169921875, 0.84765625, 0.2149658203125, 1.6689300537109375e-06, 4.2557716369628906e-05, 0.0012836456298828125, 0.0009450912475585938, 0.71240234375, 1.430511474609375e-06, 0.0039825439453125, 0.01039886474609375, 2.6464462280273438e-05, 2.9802322387695312e-05, 0.020477294921875, 0.0001709461212158203, 0.4326171875, 0.055328369140625, 0.00836181640625], "tokens": [324, 434, 1670, 322, 667, 786, 438, 4797, 322, 2702, 21726, 329, 732, 30, 996, 324, 434, 884, 28892, 623, 322, 1550, 39431, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 88, 35, 27, 2511, 15938, 5717, 32, 1449, 26, 2051, 362, 319, 15938, 5717, 32, 3596, 26, 88, 35, 471]}
{"line_number": 296, "line_type": "original", "code": "", "entropy": 0.1978759765625, "is_bug_line": false, "sus_score": 0.5491015315055847, "per_token_entropy": [0.1978759765625], "tokens": [203]}
{"line_number": 296, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5491015315055847, "per_token_entropy": [], "tokens": []}
{"line_number": 166, "line_type": "original", "code": "            if (fx == 0.0) {", "entropy": 1.7197265625, "is_bug_line": false, "sus_score": 0.5442399978637695, "per_token_entropy": [4.87890625, 3.359375, 0.15576171875, 5.1328125, 4.05078125, 0.052734375, 0.0011186599731445312, 1.119140625, 0.00290679931640625, 0.0828857421875, 0.07806396484375], "tokens": [1468, 415, 308, 5185, 610, 225, 34, 32, 34, 27, 301]}
{"line_number": 166, "line_type": "generated", "code": "\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }", "entropy": 0.0888671875, "is_bug_line": false, "sus_score": 0.5442399978637695, "per_token_entropy": [0.767578125, 1.17578125, 0.004505157470703125, 0.052276611328125, 0.0261688232421875, 0.0003781318664550781, 3.838539123535156e-05, 2.7418136596679688e-06, 3.445148468017578e-05, 2.6226043701171875e-06, 0.0010366439819335938, 0.0066680908203125, 0.00164794921875, 0.0006351470947265625, 0.0017518997192382812, 0.0008463859558105469, 0.4111328125, 0.0003414154052734375, 2.110004425048828e-05, 0.0021724700927734375, 0.0007271766662597656, 0.0160064697265625, 0.0010461807250976562, 0.00020384788513183594, 0.0023097991943359375, 7.557868957519531e-05, 0.013336181640625, 0.0010213851928710938], "tokens": [528, 1626, 45, 400, 1135, 399, 3183, 2478, 81, 25590, 44, 528, 415, 308, 88, 35, 2377, 225, 34, 27, 301, 715, 442, 816, 35, 45, 528, 320]}
{"line_number": 72, "line_type": "original", "code": "", "entropy": 4.10546875, "is_bug_line": false, "sus_score": 0.5440678596496582, "per_token_entropy": [4.10546875], "tokens": [203]}
{"line_number": 72, "line_type": "generated", "code": "\n    protected double doSolve()\n        throws MathException {\n\n        // bracketing parameters\n        final double min = getMin();\n        final double max = getMax();\n        final double absoluteAccuracy = getAbsoluteAccuracy();\n        final double functionValueAccuracy = getFunctionValueAccuracy", "entropy": 0.309814453125, "is_bug_line": false, "sus_score": 0.5440678596496582, "per_token_entropy": [0.62255859375, 0.2325439453125, 0.24658203125, 0.0005474090576171875, 0.00048160552978515625, 0.0005183219909667969, 1.189453125, 0.002849578857421875, 0.82666015625, 0.1644287109375, 0.1097412109375, 0.81884765625, 0.361572265625, 3.583984375, 1.1201171875, 1.2724609375, 0.30517578125, 0.74169921875, 0.07672119140625, 1.001953125, 0.1490478515625, 0.09344482421875, 0.0290374755859375, 0.0225982666015625, 0.00445556640625, 0.0880126953125, 0.0004038810729980469, 0.0309295654296875, 0.00047135353088378906, 1.239776611328125e-05, 3.1948089599609375e-05, 0.233642578125, 0.2548828125, 0.0814208984375, 0.9501953125, 0.01351165771484375, 0.007320404052734375, 0.007678985595703125, 0.00070953369140625, 0.00016987323760986328, 0.00103759765625, 0.2783203125, 0.06585693359375, 0.1890869140625, 0.91650390625, 0.00348663330078125, 0.0005340576171875, 0.002178192138671875, 0.00677490234375, 0.00043320655822753906, 7.045269012451172e-05, 7.891654968261719e-05], "tokens": [284, 2522, 2064, 745, 37530, 346, 291, 2571, 4175, 984, 301, 584, 434, 33828, 299, 3377, 291, 1158, 2064, 1847, 280, 622, 2928, 473, 291, 1158, 2064, 1769, 280, 39486, 473, 291, 1158, 2064, 7976, 26201, 280, 622, 12043, 26201, 473, 291, 1158, 2064, 667, 882, 26201, 280, 622, 2447, 882, 26201]}
{"line_number": 36, "line_type": "original", "code": " * based on the following article: M. Dowell and P. Jarratt,", "entropy": 1.287109375, "is_bug_line": false, "sus_score": 0.5425369143486023, "per_token_entropy": [7.40625, 11.5234375, 0.6435546875, 0.6181640625, 2.822265625, 0.1939697265625, 0.057342529296875, 0.7421875, 0.00878143310546875, 0.037353515625, 0.007381439208984375, 0.0008788108825683594, 0.0841064453125, 0.12371826171875, 0.005657196044921875, 0.08489990234375, 0.0070953369140625, 0.0031261444091796875, 0.08148193359375], "tokens": [319, 4122, 544, 322, 2412, 9126, 44, 488, 32, 475, 441, 1030, 461, 447, 32, 971, 846, 3131, 30]}
{"line_number": 36, "line_type": "generated", "code": "        this.allowed = AllowedSolution.ANY_SIDE;", "entropy": 0.06451416015625, "is_bug_line": false, "sus_score": 0.5425369143486023, "per_token_entropy": [0.490966796875, 0.134765625, 0.0036449432373046875, 0.09503173828125, 0.00299072265625, 0.010894775390625, 0.00041985511779785156, 0.00061798095703125, 0.006866455078125, 0.0003643035888671875, 7.033348083496094e-06, 0.0272369384765625], "tokens": [351, 458, 32, 11327, 280, 38886, 13628, 32, 15205, 81, 25590, 45]}
{"line_number": 146, "line_type": "original", "code": "        verifyBracketing(x0, x1);", "entropy": 1.775390625, "is_bug_line": false, "sus_score": 0.5406333208084106, "per_token_entropy": [4.45703125, 9.875, 2.53515625, 0.06982421875, 0.52880859375, 0.5390625, 0.391357421875, 0.020599365234375, 0.1343994140625, 0.36962890625, 0.61767578125], "tokens": [351, 6144, 24086, 299, 26, 106, 34, 30, 816, 35, 293]}
{"line_number": 146, "line_type": "generated", "code": "\n\n            // If the bracketing interval is small enough,", "entropy": 0.62158203125, "is_bug_line": false, "sus_score": 0.5406333208084106, "per_token_entropy": [0.68994140625, 0.043792724609375, 0.3369140625, 0.403076171875, 2.787109375, 0.303466796875, 0.3486328125, 0.568359375, 1.1572265625, 0.044219970703125, 0.153076171875], "tokens": [1064, 434, 1670, 322, 33828, 299, 7898, 438, 5532, 8448, 30]}
{"line_number": 70, "line_type": "original", "code": "        this.method = method;", "entropy": 1.7353515625, "is_bug_line": false, "sus_score": 0.5395537614822388, "per_token_entropy": [4.50390625, 5.1171875, 0.06591796875, 1.7919921875, 0.1903076171875, 0.398681640625, 0.08087158203125], "tokens": [351, 458, 32, 1959, 280, 1411, 45]}
{"line_number": 70, "line_type": "generated", "code": "\n    /**\n     * Compute the next approximation of a root.\n     *\n     * @param x0 previous approximation of the root\n     * @param x1 previous approximation of the root\n     * @param f function\n     * @return the next approximation of a root", "entropy": 0.30859375, "is_bug_line": false, "sus_score": 0.5395537614822388, "per_token_entropy": [1.052734375, 0.32470703125, 0.334228515625, 5.14984130859375e-05, 2.130859375, 0.335205078125, 0.74365234375, 0.25, 0.341552734375, 0.305419921875, 0.342041015625, 0.55517578125, 0.0106201171875, 0.00380706787109375, 0.1763916015625, 0.0001316070556640625, 0.0242767333984375, 0.005573272705078125, 1.71484375, 0.17919921875, 0.37109375, 0.070556640625, 0.190673828125, 0.048095703125, 0.01367950439453125, 0.07647705078125, 4.1484832763671875e-05, 0.0002104043960571289, 0.004070281982421875, 0.029266357421875, 0.006023406982421875, 0.91259765625, 1.70703125, 0.00705718994140625, 0.007053375244140625, 0.1739501953125, 0.16064453125, 0.000774383544921875, 0.001003265380859375, 0.10205078125, 0.282470703125, 0.398681640625, 0.88818359375, 0.0007195472717285156, 0.0025691986083984375, 0.6064453125, 0.775390625, 0.029327392578125, 0.0023784637451171875, 0.03363037109375, 0.318603515625, 0.00106048583984375], "tokens": [284, 1022, 275, 319, 12836, 322, 2354, 39431, 432, 312, 3051, 32, 275, 319, 275, 319, 477, 753, 816, 34, 4552, 39431, 432, 322, 3051, 275, 319, 477, 753, 816, 35, 4552, 39431, 432, 322, 3051, 275, 319, 477, 753, 296, 667, 275, 319, 477, 601, 322, 2354, 39431, 432, 312, 3051]}
{"line_number": 42, "line_type": "original", "code": " * bracketing method, so it is not implemented here. It has a separate", "entropy": 4.01953125, "is_bug_line": false, "sus_score": 0.5340816974639893, "per_token_entropy": [7.08203125, 13.375, 0.380615234375, 3.75390625, 4.20703125, 2.552734375, 3.08984375, 1.7802734375, 1.73828125, 6.02734375, 1.75, 0.576171875, 6.23828125, 4.16015625, 4.12890625, 3.484375], "tokens": [319, 33828, 299, 1411, 30, 1259, 561, 438, 646, 7586, 2442, 32, 2030, 1401, 312, 8111]}
{"line_number": 42, "line_type": "generated", "code": "        this.allowed = AllowedSolution.ANY_SIDE;\n        this.method = method;\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n    ", "entropy": 0.07769775390625, "is_bug_line": false, "sus_score": 0.5340816974639893, "per_token_entropy": [0.5556640625, 0.1258544921875, 0.0029735565185546875, 0.08380126953125, 0.00286102294921875, 0.009002685546875, 0.00035762786865234375, 0.0007801055908203125, 0.00487518310546875, 0.00031256675720214844, 5.602836608886719e-06, 0.028533935546875, 0.5859375, 0.0020542144775390625, 2.0503997802734375e-05, 0.0022449493408203125, 0.01261138916015625, 0.0006551742553710938, 0.00284576416015625, 0.11004638671875, 0.003246307373046875, 0.15234375, 0.04510498046875, 0.07733154296875, 2.014636993408203e-05, 1.46484375, 0.002017974853515625, 0.00010073184967041016, 0.0173187255859375, 0.00345611572265625, 0.001323699951171875, 0.00910186767578125, 0.00015115737915039062, 0.00347900390625, 0.0001798868179321289, 0.42431640625, 0.0022029876708984375, 0.26220703125, 0.0004334449768066406, 0.006999969482421875, 0.005397796630859375, 0.0004177093505859375, 0.00014674663543701172, 0.00017845630645751953, 2.0742416381835938e-05, 0.005802154541015625, 5.316734313964844e-05, 0.0158538818359375, 0.000354766845703125, 6.699562072753906e-05, 0.0009927749633789062, 0.0013818740844726562], "tokens": [351, 458, 32, 11327, 280, 38886, 13628, 32, 15205, 81, 25590, 45, 291, 458, 32, 1959, 280, 1411, 45, 284, 320, 446, 1022, 275, 319, 12968, 312, 17821, 32, 275, 319, 275, 319, 477, 753, 6491, 26201, 18690, 6491, 1048, 32, 275, 319, 477, 753, 7976, 26201, 18690, 7976, 1048, 32, 275]}
{"line_number": 67, "line_type": "original", "code": "    protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {", "entropy": 1.05859375, "is_bug_line": false, "sus_score": 0.5332432389259338, "per_token_entropy": [4.2265625, 5.58984375, 2.134765625, 0.00034928321838378906, 2.9206275939941406e-05, 4.38690185546875e-05, 0.132568359375, 0.079345703125, 0.164306640625, 1.8271484375, 6.568431854248047e-05, 0.11810302734375, 3.537109375, 0.08074951171875, 0.0020236968994140625, 0.0084075927734375, 0.10516357421875], "tokens": [264, 2522, 3772, 3091, 692, 17766, 26, 3220, 2064, 7976, 26201, 30, 1158, 5393, 1411, 27, 301]}
{"line_number": 67, "line_type": "generated", "code": "\n        // check limits\n        verifyInterval(min, max);\n        verifyInterval(min, startValue);\n        verifyInterval(startValue, max);\n\n        // check for degenerate interval\n        if (startValue == min || startValue == max) {\n           ", "entropy": 0.346435546875, "is_bug_line": false, "sus_score": 0.5332432389259338, "per_token_entropy": [0.25390625, 1.1279296875, 1.392578125, 1.1943359375, 0.36865234375, 0.94287109375, 0.1253662109375, 0.00046253204345703125, 0.11285400390625, 3.814697265625e-05, 0.01303863525390625, 0.22900390625, 0.317626953125, 0.828125, 0.98291015625, 0.0299530029296875, 0.483154296875, 0.00597381591796875, 0.0018711090087890625, 0.00011897087097167969, 0.07708740234375, 0.22607421875, 0.1112060546875, 0.00537872314453125, 0.00014901161193847656, 0.1029052734375, 6.0558319091796875e-05, 8.45193862915039e-05, 0.0003609657287597656, 0.01800537109375, 0.73583984375, 0.2156982421875, 1.5751953125, 1.5283203125, 2.517578125, 0.1448974609375, 0.65625, 0.10369873046875, 0.15576171875, 0.040069580078125, 0.84765625, 0.0032901763916015625, 0.0199127197265625, 0.057708740234375, 0.3056640625, 0.086669921875, 7.62939453125e-06, 0.0002732276916503906, 0.0006055831909179688, 0.0149383544921875, 0.0020236968994140625, 0.05181884765625], "tokens": [291, 434, 1505, 17740, 291, 6144, 5757, 26, 887, 30, 1769, 293, 291, 6144, 5757, 26, 887, 30, 1477, 882, 293, 291, 6144, 5757, 26, 1366, 882, 30, 1769, 293, 584, 434, 1505, 436, 409, 5536, 7898, 291, 415, 308, 1366, 882, 610, 1847, 1276, 1477, 882, 610, 1769, 27, 301, 324]}
{"line_number": 150, "line_type": "original", "code": "        final double atol = getAbsoluteAccuracy();", "entropy": 1.830078125, "is_bug_line": false, "sus_score": 0.533083975315094, "per_token_entropy": [4.6953125, 7.1015625, 0.0845947265625, 4.42578125, 0.03582763671875, 0.0826416015625, 0.01300811767578125, 0.0004892349243164062, 0.025970458984375], "tokens": [351, 1158, 2064, 35012, 280, 622, 12043, 26201, 473]}
{"line_number": 150, "line_type": "generated", "code": "\n                    case LEFT_SIDE:\n                        return x0;\n                    case RIGHT_SIDE:\n                        return x1;\n                    case ANY_SIDE:\n                        return inverted? x0 : x1;\n                }\n            }\n\n            // If the relative error between x0 and", "entropy": 0.32568359375, "is_bug_line": false, "sus_score": 0.533083975315094, "per_token_entropy": [0.430908203125, 0.130126953125, 1.3779296875, 0.000888824462890625, 0.004058837890625, 0.058074951171875, 0.185546875, 0.67333984375, 1.650390625, 0.260986328125, 0.0225830078125, 0.244140625, 0.01143646240234375, 0.01025390625, 7.510185241699219e-06, 1.7881393432617188e-06, 0.0007772445678710938, 0.014068603515625, 0.0162506103515625, 0.07513427734375, 0.050445556640625, 0.0002727508544921875, 0.61572265625, 0.39404296875, 1.1513671875, 5.0187110900878906e-05, 0.00028824806213378906, 0.0016775131225585938, 0.269287109375, 0.6337890625, 0.6416015625, 0.0158233642578125, 0.033203125, 1.0546875, 0.002353668212890625, 0.0008320808410644531, 0.0007352828979492188, 0.0014390945434570312, 1.552734375, 0.128173828125, 0.16259765625, 0.00392913818359375, 0.36474609375, 0.04364013671875, 0.211669921875, 0.29541015625, 0.802734375, 1.0546875, 0.5732421875, 0.96044921875, 0.7255859375, 0.0178680419921875], "tokens": [528, 1135, 17789, 81, 25590, 44, 715, 442, 816, 34, 45, 528, 1135, 20169, 81, 25590, 44, 715, 442, 816, 35, 45, 528, 1135, 2964, 81, 25590, 44, 715, 442, 37592, 1018, 816, 34, 499, 816, 35, 45, 400, 320, 324, 320, 1064, 434, 1670, 322, 6491, 1048, 3733, 816, 34, 461]}
{"line_number": 151, "line_type": "original", "code": "        final double rtol = getRelativeAccuracy();", "entropy": 1.90625, "is_bug_line": false, "sus_score": 0.5311875343322754, "per_token_entropy": [4.62109375, 6.625, 0.10577392578125, 7.4296875, 0.0169219970703125, 0.0655517578125, 0.15478515625, 0.01031494140625, 1.990795135498047e-05, 0.03887939453125], "tokens": [351, 1158, 2064, 12190, 362, 280, 622, 11777, 26201, 473]}
{"line_number": 151, "line_type": "generated", "code": "\n                    return x;\n                case LEFT_SIDE:\n                    return inverted? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted? x0 : x1;\n                default:\n                    // Should never happen.\n                }\n            }\n\n            // If", "entropy": 0.1524658203125, "is_bug_line": false, "sus_score": 0.5311875343322754, "per_token_entropy": [0.49755859375, 1.046875, 0.309814453125, 0.3076171875, 0.1182861328125, 0.02154541015625, 0.32568359375, 0.000133514404296875, 0.0011339187622070312, 0.0020618438720703125, 0.29345703125, 0.77880859375, 0.23779296875, 0.0274658203125, 0.5986328125, 0.306396484375, 0.0057220458984375, 0.01227569580078125, 0.1802978515625, 0.0006580352783203125, 0.029449462890625, 0.0364990234375, 0.00690460205078125, 4.172325134277344e-06, 1.5497207641601562e-06, 0.00039505958557128906, 0.01149749755859375, 0.00218963623046875, 0.0020236968994140625, 7.43865966796875e-05, 0.00046515464782714844, 0.0011014938354492188, 0.0012063980102539062, 9.560585021972656e-05, 0.0003688335418701172, 0.00023221969604492188, 0.457275390625, 0.77880859375, 0.0027904510498046875, 0.051788330078125, 0.1993408203125, 0.06982421875, 0.00824737548828125, 0.0049896240234375, 0.06939697265625, 0.6982421875, 0.0006570816040039062, 0.01397705078125, 0.0012903213500976562, 0.1387939453125, 0.041900634765625, 0.22314453125], "tokens": [528, 442, 816, 45, 400, 1135, 17789, 81, 25590, 44, 528, 442, 37592, 1018, 816, 35, 499, 816, 34, 45, 400, 1135, 20169, 81, 25590, 44, 528, 442, 37592, 1018, 816, 34, 499, 816, 35, 45, 400, 1244, 44, 528, 434, 9043, 7152, 7292, 32, 400, 320, 324, 320, 1064, 434, 1670]}
{"line_number": 69, "line_type": "original", "code": "        this.allowed = AllowedSolution.ANY_SIDE;", "entropy": 1.1767578125, "is_bug_line": false, "sus_score": 0.5267227292060852, "per_token_entropy": [4.62109375, 3.255859375, 0.0142059326171875, 3.935546875, 0.0106201171875, 1.9921875, 0.0006489753723144531, 0.0007929801940917969, 0.2220458984375, 0.0007195472717285156, 1.1205673217773438e-05, 0.0606689453125], "tokens": [351, 458, 32, 11327, 280, 38886, 13628, 32, 15205, 81, 25590, 45]}
{"line_number": 69, "line_type": "generated", "code": "\n    /**\n     * Solve for a zero in the given interval, start at {@code startValue}.\n     *\n     * @param maxEval Maximum number of evaluations.\n     * @param f Function to solve.\n     * @param min Lower bound for the", "entropy": 0.1375732421875, "is_bug_line": false, "sus_score": 0.5267227292060852, "per_token_entropy": [0.681640625, 0.207275390625, 0.3388671875, 4.398822784423828e-05, 1.234375, 0.007480621337890625, 0.042236328125, 0.02215576171875, 0.6513671875, 0.0033626556396484375, 0.00701141357421875, 0.014617919921875, 0.53271484375, 0.1121826171875, 0.57958984375, 0.1904296875, 0.0003254413604736328, 0.052703857421875, 0.045135498046875, 0.0215606689453125, 0.01129913330078125, 0.0018520355224609375, 0.385986328125, 0.00010538101196289062, 0.00896453857421875, 0.0043487548828125, 0.367431640625, 0.0112457275390625, 0.1380615234375, 0.01556396484375, 0.00010800361633300781, 0.044036865234375, 7.3909759521484375e-06, 0.01280975341796875, 0.0014066696166992188, 4.887580871582031e-06, 0.00016736984252929688, 0.00019752979278564453, 0.0109100341796875, 0.220947265625, 0.7568359375, 0.1959228515625, 0.0164031982421875, 0.0009975433349609375, 2.0503997802734375e-05, 0.00010609626770019531, 0.0002739429473876953, 0.061126708984375, 0.0299072265625, 0.02423095703125, 0.07891845703125, 0.00606536865234375], "tokens": [284, 1022, 275, 319, 47005, 436, 312, 5934, 328, 322, 2702, 7898, 30, 1477, 821, 3088, 687, 1477, 882, 4009, 275, 319, 275, 319, 477, 753, 1769, 14066, 18690, 1451, 432, 6130, 993, 32, 275, 319, 477, 753, 296, 4540, 372, 10932, 32, 275, 319, 477, 753, 1847, 35245, 5085, 436, 322]}
{"line_number": 3410, "line_type": "original", "code": "", "entropy": 0.1978759765625, "is_bug_line": false, "sus_score": 0.5262542963027954, "per_token_entropy": [0.1978759765625], "tokens": [203]}
{"line_number": 3410, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5262542963027954, "per_token_entropy": [], "tokens": []}
{"line_number": 160, "line_type": "original", "code": "            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));", "entropy": 1.0244140625, "is_bug_line": false, "sus_score": 0.525306761264801, "per_token_entropy": [4.12109375, 10.4765625, 0.12408447265625, 1.734375, 1.2822265625, 0.95947265625, 1.54296875, 0.487060546875, 3.322265625, 1.578125, 0.134765625, 1.2275390625, 0.259033203125, 0.0692138671875, 0.1387939453125, 0.006389617919921875, 0.003940582275390625, 0.0030307769775390625, 0.0670166015625, 0.0049285888671875, 0.0494384765625, 0.0179290771484375, 0.0244293212890625, 0.011962890625, 0.0012731552124023438, 0.0001285076141357422, 0.00859832763671875], "tokens": [1468, 1158, 2064, 816, 280, 816, 35, 429, 1833, 88, 35, 319, 308, 106, 35, 429, 816, 34, 490, 517, 308, 88, 35, 429, 296, 34, 876]}
{"line_number": 160, "line_type": "generated", "code": "\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (!inverted) {\n                        return x1;", "entropy": 0.29833984375, "is_bug_line": false, "sus_score": 0.525306761264801, "per_token_entropy": [0.775390625, 0.12054443359375, 0.340576171875, 0.013885498046875, 0.001605987548828125, 0.6220703125, 1.6044921875, 0.86083984375, 0.030181884765625, 0.00028514862060546875, 0.07696533203125, 0.0009174346923828125, 0.041656494140625, 0.387939453125, 1.513671875, 0.0025730133056640625, 0.05572509765625, 0.0005292892456054688, 0.0187835693359375, 0.03057861328125, 0.318359375, 0.039947509765625, 0.005413055419921875], "tokens": [528, 320, 528, 1626, 45, 400, 1135, 6744, 5875, 81, 25590, 44, 528, 415, 1429, 47910, 27, 301, 715, 442, 816, 35, 45]}
{"line_number": 199, "line_type": "original", "code": "                switch (allowed) {", "entropy": 2.072265625, "is_bug_line": false, "sus_score": 0.523618757724762, "per_token_entropy": [7.8125, 4.25390625, 0.0132293701171875, 0.288330078125, 0.0083465576171875, 0.0596923828125], "tokens": [2071, 3578, 308, 11327, 27, 301]}
{"line_number": 199, "line_type": "generated", "code": "\n    /**\n     * Returns the root of a polynomial with the given coefficients, starting\n     * from the given initial value.\n     * <p>\n     * The coefficients are assumed to be in ascending order, with the constant\n     * term (if any) being", "entropy": 0.5615234375, "is_bug_line": false, "sus_score": 0.523618757724762, "per_token_entropy": [0.90234375, 0.424560546875, 0.170166015625, 0.00016808509826660156, 2.5, 0.4599609375, 2.75, 0.72314453125, 0.77978515625, 0.759765625, 0.1190185546875, 0.98291015625, 0.2132568359375, 0.031158447265625, 0.6494140625, 0.228759765625, 0.0860595703125, 4.8279762268066406e-05, 0.11895751953125, 0.10479736328125, 0.3095703125, 0.1068115234375, 0.81494140625, 0.5224609375, 1.181640625, 0.00279998779296875, 0.71337890625, 0.1383056640625, 0.00562286376953125, 0.0287017822265625, 3.528594970703125e-05, 0.966796875, 0.8056640625, 0.884765625, 1.951171875, 0.0012302398681640625, 0.10321044921875, 0.29736328125, 0.73291015625, 0.009002685546875, 0.1337890625, 2.33984375, 0.442626953125, 0.420654296875, 0.0108184814453125, 2.753734588623047e-05, 0.0297088623046875, 2.85546875, 0.7734375, 0.1966552734375, 0.04559326171875, 0.362060546875], "tokens": [284, 1022, 275, 319, 3759, 322, 3051, 432, 312, 25137, 623, 322, 2702, 26370, 30, 8049, 275, 319, 645, 322, 2702, 2815, 786, 32, 275, 319, 333, 98, 48, 275, 319, 886, 26370, 884, 20968, 372, 526, 328, 28286, 2532, 30, 623, 322, 8082, 275, 319, 5615, 308, 325, 1346, 27, 3998]}
