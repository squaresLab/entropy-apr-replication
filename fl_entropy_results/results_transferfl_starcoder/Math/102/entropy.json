{"line_number": 131, "line_type": "original", "code": "        ", "entropy": 5.1171875, "is_bug_line": false, "sus_score": 0.5315978527069092, "per_token_entropy": [5.1171875], "tokens": [263]}
{"line_number": 131, "line_type": "generated", "code": "\n    }\n\n    /**\n     * @param counts array representation of 2-way table\n     * @param alpha significance level of the test\n     * @return true iff null hypothesis can be rejected with confidence\n     * 1 - alpha\n     * @throws IllegalArgumentException", "entropy": 0.0970458984375, "is_bug_line": false, "sus_score": 0.5315978527069092, "per_token_entropy": [1.4306640625, 0.36181640625, 0.5126953125, 0.056854248046875, 0.0245361328125, 0.0004715919494628906, 1.107421875, 0.01806640625, 0.4921875, 0.07073974609375, 0.01788330078125, 0.0006494522094726562, 0.06658935546875, 0.1307373046875, 0.005107879638671875, 0.0003924369812011719, 0.0027141571044921875, 0.020751953125, 0.0009393692016601562, 0.0020427703857421875, 0.06939697265625, 0.334716796875, 0.0011491775512695312, 0.00012695789337158203, 0.0017976760864257812, 0.003559112548828125, 0.0015401840209960938, 0.0004982948303222656, 0.0178070068359375, 0.0006327629089355469, 0.0016069412231445312, 0.10321044921875, 0.10443115234375, 0.00209808349609375, 0.00782012939453125, 0.00017404556274414062, 0.0006785392761230469, 0.00029015541076660156, 0.0006780624389648438, 0.00243377685546875, 0.0007290840148925781, 0.0037517547607421875, 0.0009050369262695312, 0.00272369384765625, 6.759166717529297e-05, 0.0007390975952148438, 0.00015938282012939453, 0.037139892578125, 0.0160980224609375, 0.0010395050048828125, 0.00153350830078125, 0.0030384063720703125], "tokens": [284, 320, 446, 1022, 275, 319, 477, 753, 15172, 1417, 10293, 432, 225, 36, 31, 3073, 1858, 275, 319, 477, 753, 7377, 41482, 723, 3193, 432, 322, 894, 275, 319, 477, 601, 861, 44778, 744, 40989, 883, 526, 21347, 623, 24462, 275, 319, 225, 35, 429, 7377, 275, 319, 477, 5117, 12137]}
{"line_number": 189, "line_type": "original", "code": "    }", "entropy": 2.248046875, "is_bug_line": false, "sus_score": 0.5082117915153503, "per_token_entropy": [3.669921875, 0.82568359375], "tokens": [264, 320]}
{"line_number": 189, "line_type": "generated", "code": "\n                obs1 = observed1[i] / countSum1;\n                obs2 = observed2[i] / countSum2;\n                dev = obs1 - obs2;\n                if (unequalCounts) {\n                    dev /= weight;\n                }", "entropy": 0.20068359375, "is_bug_line": false, "sus_score": 0.5082117915153503, "per_token_entropy": [0.9658203125, 0.82275390625, 0.00789642333984375, 0.002506256103515625, 1.001953125, 0.0010890960693359375, 0.0011873245239257812, 0.0001951456069946289, 0.8837890625, 1.0751953125, 1.8798828125, 1.1563301086425781e-05, 0.0035572052001953125, 0.0628662109375, 0.046295166015625, 0.080810546875, 0.0030536651611328125, 0.00036835670471191406, 0.131103515625, 0.0021953582763671875, 0.0003769397735595703, 9.655952453613281e-06, 0.004474639892578125, 0.0211181640625, 0.02667236328125, 1.9073486328125e-06, 0.001964569091796875, 0.005817413330078125, 0.1708984375, 0.64208984375, 0.0013761520385742188, 0.76953125, 0.182373046875, 0.0035305023193359375, 0.12384033203125, 9.715557098388672e-05, 0.005023956298828125, 0.1175537109375, 0.16357421875, 0.0250091552734375, 0.063232421875, 7.021427154541016e-05, 0.00013780593872070312, 0.028778076171875, 0.0252838134765625, 0.051727294921875, 0.0225830078125, 0.9140625, 0.007534027099609375, 0.0015382766723632812, 0.08050537109375, 0.0008401870727539062], "tokens": [400, 15337, 35, 280, 19143, 35, 77, 91, 79, 517, 2385, 4934, 35, 45, 400, 15337, 36, 280, 19143, 36, 77, 91, 79, 517, 2385, 4934, 36, 45, 400, 5684, 280, 15337, 35, 429, 15337, 36, 45, 400, 415, 308, 311, 2228, 18330, 27, 301, 528, 5684, 14374, 7533, 45, 400, 320]}
{"line_number": 180, "line_type": "original", "code": "     * @throws IllegalArgumentException if preconditions are not met", "entropy": 1.0712890625, "is_bug_line": false, "sus_score": 0.5076219439506531, "per_token_entropy": [6.03125, 3.654296875, 0.13134765625, 0.8056640625, 0.74267578125, 0.080322265625, 0.26904296875, 0.00495147705078125, 0.043212890625, 0.021697998046875, 0.0006127357482910156], "tokens": [262, 319, 477, 5117, 12137, 415, 1406, 8425, 884, 646, 3279]}
{"line_number": 180, "line_type": "generated", "code": "\n        return sumSq / weight;\n    }\n\n    /**\n     * @param observed1 array of observed frequency counts of the first data set\n     * @param observed2 array of observed frequency counts of the second data set\n     * @param alpha significance level of", "entropy": 0.114990234375, "is_bug_line": false, "sus_score": 0.5076219439506531, "per_token_entropy": [0.53125, 0.3115234375, 1.8115234375, 0.299072265625, 1.2265625, 0.354248046875, 0.01337432861328125, 0.148193359375, 0.0011148452758789062, 0.70361328125, 0.0166015625, 0.0242462158203125, 0.0002541542053222656, 0.177001953125, 0.003490447998046875, 0.09771728515625, 0.00525665283203125, 0.0241241455078125, 0.003604888916015625, 0.003475189208984375, 0.00518035888671875, 0.0010271072387695312, 0.020233154296875, 0.00882720947265625, 0.00266265869140625, 0.01140594482421875, 0.00301361083984375, 0.0033893585205078125, 7.462501525878906e-05, 0.0004343986511230469, 7.677078247070312e-05, 0.005084991455078125, 0.00027942657470703125, 0.0019626617431640625, 5.614757537841797e-05, 0.00015151500701904297, 0.0013628005981445312, 0.00110626220703125, 0.00044226646423339844, 0.00012934207916259766, 0.0007953643798828125, 0.0007677078247070312, 0.0004119873046875, 0.0024356842041015625, 0.00021636486053466797, 0.000812530517578125, 0.06866455078125, 0.021209716796875, 0.004314422607421875, 0.0002777576446533203, 0.001697540283203125, 0.05706787109375], "tokens": [291, 442, 3632, 17509, 517, 7533, 45, 284, 320, 446, 1022, 275, 319, 477, 753, 19143, 35, 1417, 432, 19143, 13472, 15172, 432, 322, 1932, 706, 739, 275, 319, 477, 753, 19143, 36, 1417, 432, 19143, 13472, 15172, 432, 322, 3100, 706, 739, 275, 319, 477, 753, 7377, 41482, 723, 3193, 432]}
{"line_number": 367, "line_type": "original", "code": "        for (int i = 0; i < in.length; i ++) {", "entropy": 0.62060546875, "is_bug_line": false, "sus_score": 0.5049922466278076, "per_token_entropy": [4.4921875, 4.1875, 0.028839111328125, 0.0283355712890625, 0.1600341796875, 0.01462554931640625, 0.0126190185546875, 0.050384521484375, 0.007801055908203125, 0.001605987548828125, 0.0162506103515625, 0.8173828125, 0.3134765625, 0.00717926025390625, 0.01085662841796875, 0.005710601806640625, 0.9921875, 0.0262298583984375], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 328, 32, 1322, 45, 595, 38884, 301]}
{"line_number": 367, "line_type": "generated", "code": "\n    /**\n     * Modify the distribution used to compute inference statistics.\n     * \n     * @param value\n     *            the new distribution\n     * @since 1.2\n     */\n    public void setDistribution(ChiSquaredDistribution value) {\n        distribution = value", "entropy": 0.1392822265625, "is_bug_line": false, "sus_score": 0.5049922466278076, "per_token_entropy": [1.431640625, 0.77734375, 0.0897216796875, 0.0007224082946777344, 1.3203125, 0.057342529296875, 1.125, 0.02886962890625, 0.0046539306640625, 0.0233917236328125, 0.07916259765625, 0.0039520263671875, 0.0312042236328125, 0.02606201171875, 0.0019235610961914062, 0.07794189453125, 0.0005755424499511719, 0.0055084228515625, 0.01485443115234375, 0.2069091796875, 0.04949951171875, 0.00032448768615722656, 0.0039215087890625, 0.0162200927734375, 0.022247314453125, 0.0121307373046875, 0.01934814453125, 0.07452392578125, 0.00305938720703125, 0.1488037109375, 0.0005669593811035156, 0.01290130615234375, 0.0011272430419921875, 0.0184326171875, 0.00417327880859375, 0.0233917236328125, 0.0301666259765625, 0.0377197265625, 0.0104522705078125, 0.006847381591796875, 0.0215911865234375, 0.043212890625, 0.689453125, 0.0020580291748046875, 0.0028820037841796875, 0.1195068359375, 0.02581787109375, 0.01088714599609375, 0.11151123046875, 0.350830078125, 0.0178375244140625, 0.04559326171875], "tokens": [284, 1022, 275, 319, 19927, 322, 7433, 1654, 372, 7596, 22410, 14564, 32, 275, 319, 5384, 319, 477, 753, 786, 275, 319, 1468, 322, 537, 7433, 275, 319, 477, 8119, 225, 35, 32, 36, 275, 569, 284, 562, 763, 739, 16218, 26, 40953, 30455, 16218, 786, 27, 301, 291, 7433, 280, 786]}
{"line_number": 368, "line_type": "original", "code": "            if (in[i] < 0) {", "entropy": 1.33984375, "is_bug_line": false, "sus_score": 0.4986059367656708, "per_token_entropy": [6.6953125, 3.19140625, 0.35693359375, 2.6640625, 0.65283203125, 0.267822265625, 1.4130859375, 0.5625, 0.050384521484375, 0.029266357421875, 0.09039306640625, 0.105224609375], "tokens": [1468, 415, 308, 266, 77, 91, 79, 333, 225, 34, 27, 301]}
{"line_number": 368, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.4986059367656708, "per_token_entropy": [], "tokens": []}
{"line_number": 82, "line_type": "original", "code": "", "entropy": 3.572265625, "is_bug_line": false, "sus_score": 0.4877685606479645, "per_token_entropy": [3.572265625], "tokens": [203]}
{"line_number": 82, "line_type": "generated", "code": "\n        if (counts.length < 2) {\n            throw new IllegalArgumentException(\n                    \"counts must contain at least two rows\");\n        }\n        if (counts.length!= counts[0].length) {\n            throw new IllegalArgumentException(\n                    \"counts must contain", "entropy": 0.25439453125, "is_bug_line": false, "sus_score": 0.4877685606479645, "per_token_entropy": [0.5556640625, 1.642578125, 1.439453125, 0.165771484375, 0.0965576171875, 0.0008158683776855469, 0.42578125, 0.00551605224609375, 0.037750244140625, 0.19482421875, 0.0164642333984375, 0.0677490234375, 0.0129547119140625, 0.00695037841796875, 0.006557464599609375, 0.59375, 0.277099609375, 0.00299835205078125, 0.3056640625, 1.185546875, 0.1016845703125, 0.0299224853515625, 0.00464630126953125, 0.358642578125, 1.17578125, 0.2042236328125, 0.0282440185546875, 0.000347137451171875, 0.280029296875, 0.55859375, 0.48193359375, 0.02203369140625, 1.4072265625, 0.00041604042053222656, 0.1435546875, 0.0044708251953125, 0.0024509429931640625, 0.0005359649658203125, 9.143352508544922e-05, 0.0001201629638671875, 0.00966644287109375, 0.0020847320556640625, 0.0127410888671875, 0.006011962890625, 0.0012235641479492188, 0.0018291473388671875, 0.1168212890625, 0.10638427734375, 0.00029277801513671875, 0.373291015625, 0.1385498046875, 0.609375], "tokens": [291, 415, 308, 10410, 32, 1322, 333, 225, 36, 27, 301, 324, 1422, 537, 12137, 26, 528, 313, 10410, 2298, 4799, 821, 6225, 3134, 5760, 724, 291, 320, 291, 415, 308, 10410, 32, 1322, 863, 15172, 77, 34, 997, 1322, 27, 301, 324, 1422, 537, 12137, 26, 528, 313, 10410, 2298, 4799]}
{"line_number": 160, "line_type": "original", "code": "", "entropy": 3.638671875, "is_bug_line": false, "sus_score": 0.486083447933197, "per_token_entropy": [3.638671875], "tokens": [203]}
{"line_number": 160, "line_type": "generated", "code": "\n        // Compute contingency table\n        long[][] counts = new long[2][2];\n        for (int i = 0; i < observed1.length; i++) {\n            if (observed1[i] == 0 && observed2", "entropy": 0.1861572265625, "is_bug_line": false, "sus_score": 0.486083447933197, "per_token_entropy": [0.353759765625, 0.29248046875, 0.9833984375, 1.708984375, 0.003253936767578125, 0.002880096435546875, 0.08123779296875, 0.744140625, 0.497802734375, 0.08746337890625, 0.403564453125, 0.0098114013671875, 0.366943359375, 0.000659942626953125, 0.0176544189453125, 0.2054443359375, 0.00043892860412597656, 0.005695343017578125, 0.00010573863983154297, 0.050323486328125, 0.88232421875, 0.020050048828125, 0.0034008026123046875, 0.06646728515625, 0.0360107421875, 0.001636505126953125, 0.0007123947143554688, 0.003635406494140625, 0.0006575584411621094, 0.00507354736328125, 0.21484375, 0.00232696533203125, 0.0002130270004272461, 0.00014221668243408203, 0.0024890899658203125, 0.0293426513671875, 0.0213470458984375, 0.005435943603515625, 0.041015625, 0.69189453125, 0.08551025390625, 0.043914794921875, 0.01488494873046875, 0.004169464111328125, 0.00013911724090576172, 0.0021533966064453125, 0.8388671875, 0.1629638671875, 0.00846099853515625, 0.66650390625, 0.0023708343505859375, 0.002166748046875], "tokens": [291, 434, 12836, 712, 299, 2362, 1858, 291, 1946, 11336, 15172, 280, 537, 1946, 77, 36, 1674, 36, 970, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 19143, 35, 32, 1322, 45, 595, 1987, 301, 324, 415, 308, 36764, 35, 77, 91, 79, 610, 225, 34, 962, 19143, 36]}
{"line_number": 158, "line_type": "original", "code": "        return sumSq;", "entropy": 2.87109375, "is_bug_line": false, "sus_score": 0.4846082031726837, "per_token_entropy": [2.158203125, 7.0546875, 4.44140625, 0.348876953125, 0.35302734375], "tokens": [351, 442, 3632, 17509, 45]}
{"line_number": 158, "line_type": "generated", "code": "\n        }\n        \n        // Compute and return ChiSquare statistic\n        return chiSquare(observed1, observed2);\n    }\n\n    /**\n     * @param observed1 array of observed frequency counts of the first data set\n     * @param observed2 array of observed frequency", "entropy": 0.2369384765625, "is_bug_line": false, "sus_score": 0.4846082031726837, "per_token_entropy": [1.046875, 0.057220458984375, 0.73486328125, 0.36181640625, 1.2802734375, 1.9033203125, 0.044158935546875, 1.2490234375, 0.0114593505859375, 1.046875, 0.525390625, 0.09844970703125, 1.7431640625, 0.356201171875, 0.0004963874816894531, 0.50830078125, 0.409912109375, 0.0034961700439453125, 0.00992584228515625, 0.01238250732421875, 0.0010480880737304688, 0.0255126953125, 0.1451416015625, 0.003574371337890625, 0.56884765625, 0.005023956298828125, 0.0072784423828125, 9.393692016601562e-05, 0.095458984375, 0.0012979507446289062, 0.0194244384765625, 0.00312042236328125, 0.0054473876953125, 0.000637054443359375, 0.0015783309936523438, 0.0017995834350585938, 0.0010366439819335938, 0.00966644287109375, 0.0028133392333984375, 0.00174713134765625, 0.004215240478515625, 0.0040283203125, 0.0018463134765625, 3.0279159545898438e-05, 0.0002779960632324219, 6.175041198730469e-05, 0.0036773681640625, 0.0003654956817626953, 0.0011529922485351562, 2.5033950805664062e-05, 0.0002923011779785156, 0.002605438232421875], "tokens": [291, 320, 2746, 434, 12836, 461, 442, 1884, 91, 18374, 33179, 291, 442, 25549, 18374, 26, 36764, 35, 30, 19143, 36, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 19143, 35, 1417, 432, 19143, 13472, 15172, 432, 322, 1932, 706, 739, 275, 319, 477, 753, 19143, 36, 1417, 432, 19143, 13472]}
{"line_number": 372, "line_type": "original", "code": "        return true;", "entropy": 3.150390625, "is_bug_line": false, "sus_score": 0.4835715591907501, "per_token_entropy": [5.53515625, 4.25390625, 2.8046875, 0.007076263427734375], "tokens": [351, 442, 861, 45]}
{"line_number": 372, "line_type": "generated", "code": "\n    //---------------------  Private array methods -- should find a utility home for these\n    \n    /**\n     * Returns true iff input array is rectangular.\n     * \n     * @param in array to be tested\n     * @return true if the array is rectangular\n     *", "entropy": 0.171875, "is_bug_line": false, "sus_score": 0.4835715591907501, "per_token_entropy": [1.7783203125, 0.7109375, 0.63427734375, 0.150634765625, 0.974609375, 2.837890625, 0.1387939453125, 0.27734375, 0.10443115234375, 0.005161285400390625, 0.0027866363525390625, 0.0037841796875, 0.00122833251953125, 0.0025882720947265625, 0.0022754669189453125, 0.55908203125, 0.032928466796875, 0.0178985595703125, 0.0008044242858886719, 0.208984375, 0.09124755859375, 0.00867462158203125, 0.3330078125, 0.015960693359375, 0.00264739990234375, 0.0090179443359375, 7.271766662597656e-06, 0.005962371826171875, 0.002216339111328125, 0.0002288818359375, 0.0068359375, 3.1828880310058594e-05, 0.00029349327087402344, 0.00031280517578125, 0.0015649795532226562, 0.0035457611083984375, 7.081031799316406e-05, 2.8014183044433594e-05, 2.0384788513183594e-05, 0.0005564689636230469, 3.910064697265625e-05, 0.001247406005859375, 0.0007925033569335938, 0.0003705024719238281, 0.00045418739318847656, 0.0005135536193847656, 0.00032329559326171875, 8.535385131835938e-05, 0.0002827644348144531, 2.2530555725097656e-05, 0.0008482933044433594, 0.002681732177734375], "tokens": [284, 434, 45509, 225, 12400, 1417, 4438, 769, 1395, 2290, 312, 15471, 6765, 436, 3282, 2170, 1022, 275, 319, 3759, 861, 44778, 1509, 1417, 438, 7582, 5089, 32, 275, 319, 5384, 319, 477, 753, 328, 1417, 372, 526, 10114, 275, 319, 477, 601, 861, 415, 322, 1417, 438, 7582, 5089, 275, 319]}
{"line_number": 278, "line_type": "original", "code": "            throw new IllegalArgumentException(", "entropy": 2.31640625, "is_bug_line": false, "sus_score": 0.4799731969833374, "per_token_entropy": [3.625, 6.6640625, 0.022003173828125, 0.093994140625, 1.1796875], "tokens": [1468, 1422, 537, 12137, 26]}
{"line_number": 278, "line_type": "generated", "code": "        for (int i = 0; i < in.length; i++) {\n            for (int j = 0; j < in[i].length; j++) {\n                if (in[i][j] < 0) {", "entropy": 0.1529541015625, "is_bug_line": false, "sus_score": 0.4799731969833374, "per_token_entropy": [2.115234375, 1.6875, 0.0537109375, 0.07843017578125, 0.2437744140625, 0.015655517578125, 0.004337310791015625, 0.0972900390625, 0.01229095458984375, 0.003604888916015625, 0.04486083984375, 0.052734375, 0.141357421875, 0.0012960433959960938, 0.047271728515625, 0.0295562744140625, 0.0256195068359375, 0.1474609375, 0.77490234375, 1.1240234375, 0.00235748291015625, 0.0007185935974121094, 0.00241851806640625, 0.0010204315185546875, 0.0026264190673828125, 0.0028285980224609375, 0.0044708251953125, 0.0032100677490234375, 0.00243377685546875, 0.01558685302734375, 0.0086517333984375, 0.07708740234375, 0.00122833251953125, 0.000400543212890625, 0.004375457763671875, 0.0021724700927734375, 0.006603240966796875, 0.039642333984375, 0.3837890625, 0.061309814453125, 0.1361083984375, 0.146728515625, 0.003032684326171875, 0.01239776611328125, 0.037628173828125, 0.0020427703857421875, 0.02374267578125, 0.1336669921875, 0.01171112060546875, 0.001873016357421875, 0.082763671875, 0.037689208984375], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 328, 32, 1322, 45, 595, 1987, 301, 324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 328, 77, 91, 997, 1322, 45, 594, 1987, 301, 400, 415, 308, 266, 77, 91, 1674, 92, 79, 333, 225, 34, 27, 301]}
{"line_number": 186, "line_type": "original", "code": "            throw new IllegalArgumentException(\"bad significance level: \" + alpha);", "entropy": 2.826171875, "is_bug_line": false, "sus_score": 0.47700372338294983, "per_token_entropy": [3.70703125, 7.4765625, 0.00327301025390625, 0.10687255859375, 2.87109375, 6.03125, 12.15625, 0.005023956298828125, 1.431640625, 3.630859375, 1.421875, 0.0904541015625, 0.560546875, 0.08453369140625], "tokens": [1468, 1422, 537, 12137, 440, 3371, 41482, 723, 3193, 44, 313, 474, 7377, 293]}
{"line_number": 186, "line_type": "generated", "code": "\n            }\n            obs1 = observed1[i] * weight;\n            obs2 = observed2[i] / weight;\n            dev = obs1 - obs2;\n            sumSq += (dev * dev) / (obs1 + obs2);", "entropy": 0.13916015625, "is_bug_line": false, "sus_score": 0.47700372338294983, "per_token_entropy": [0.3896484375, 0.006526947021484375, 0.55810546875, 1.0048828125, 0.005504608154296875, 0.001956939697265625, 1.1865234375, 0.0004968643188476562, 0.0008530616760253906, 5.7816505432128906e-05, 1.0234375, 0.484619140625, 0.00555419921875, 0.00977325439453125, 0.0521240234375, 0.1085205078125, 0.0015115737915039062, 0.0003006458282470703, 0.019012451171875, 0.001251220703125, 5.6743621826171875e-05, 8.344650268554688e-07, 0.369384765625, 0.11236572265625, 0.0030002593994140625, 0.0002219676971435547, 0.07574462890625, 0.282958984375, 0.0008082389831542969, 0.1690673828125, 0.0699462890625, 0.004245758056640625, 0.0005216598510742188, 8.58306884765625e-05, 0.0005388259887695312, 0.062469482421875, 0.0772705078125, 2.3484230041503906e-05, 0.007083892822265625, 0.759765625, 0.0098876953125, 0.0199127197265625, 0.0004630088806152344, 0.03533935546875, 0.0006861686706542969, 0.1697998046875, 0.0113067626953125, 0.09442138671875, 0.03399658203125, 0.005664825439453125, 0.00016129016876220703, 0.002307891845703125], "tokens": [324, 320, 324, 15337, 35, 280, 19143, 35, 77, 91, 79, 319, 7533, 45, 324, 15337, 36, 280, 19143, 36, 77, 91, 79, 517, 7533, 45, 324, 5684, 280, 15337, 35, 429, 15337, 36, 45, 324, 3632, 17509, 1454, 308, 1902, 319, 5684, 27, 517, 308, 12133, 35, 474, 15337, 36, 293]}
{"line_number": 74, "line_type": "original", "code": "        double sumSq = 0.0d;", "entropy": 0.88330078125, "is_bug_line": true, "sus_score": 0.47589388489723206, "per_token_entropy": [5.328125, 2.71875, 0.79541015625, 0.09027099609375, 0.14697265625, 0.016754150390625, 0.0019197463989257812, 0.198974609375, 0.0003330707550048828, 0.391845703125, 0.0262298583984375], "tokens": [351, 2064, 3632, 17509, 280, 225, 34, 32, 34, 86, 45]}
{"line_number": 74, "line_type": "generated", "code": "\n\n    /**\n     * Returns the distribution used to compute inference statistics.\n     *\n     * @return distribution used to compute inference statistics\n     */\n    public ChiSquaredDistribution getDistribution() {\n        return distribution;\n    }\n\n    /**\n     * Sets the distribution used to", "entropy": 0.17919921875, "is_bug_line": true, "sus_score": 0.47589388489723206, "per_token_entropy": [1.5234375, 0.036895751953125, 0.041351318359375, 8.440017700195312e-05, 1.171875, 0.458740234375, 0.364013671875, 0.09552001953125, 0.18359375, 0.1322021484375, 0.404296875, 0.0050201416015625, 0.0300140380859375, 0.034393310546875, 0.00283050537109375, 1.607421875, 0.0006508827209472656, 0.00740814208984375, 0.001354217529296875, 0.98779296875, 0.51953125, 0.01174163818359375, 0.0049591064453125, 0.0181732177734375, 0.0038509368896484375, 0.658203125, 0.1651611328125, 0.011199951171875, 0.0303802490234375, 0.00942230224609375, 2.872943878173828e-05, 0.00010657310485839844, 1.633167266845703e-05, 0.0005159378051757812, 0.0012645721435546875, 0.005092620849609375, 0.002246856689453125, 0.0248870849609375, 0.002292633056640625, 0.228271484375, 0.0008521080017089844, 0.004184722900390625, 0.00016319751739501953, 0.1923828125, 0.005306243896484375, 0.006031036376953125, 2.2292137145996094e-05, 0.218017578125, 0.0026302337646484375, 0.038177490234375, 0.060638427734375, 0.00274658203125], "tokens": [446, 1022, 275, 319, 3759, 322, 7433, 1654, 372, 7596, 22410, 14564, 32, 275, 319, 275, 319, 477, 601, 7433, 1654, 372, 7596, 22410, 14564, 275, 569, 284, 562, 1884, 91, 30455, 16218, 622, 16218, 346, 301, 291, 442, 7433, 45, 284, 320, 446, 1022, 275, 319, 9013, 322, 7433, 1654, 372]}
{"line_number": 72, "line_type": "original", "code": "                \"observed counts must be non-negative and expected counts must be postive\");", "entropy": 2.435546875, "is_bug_line": false, "sus_score": 0.4713846743106842, "per_token_entropy": [7.046875, 9.90625, 3.365234375, 4.453125, 1.1103515625, 0.38134765625, 1.05859375, 0.129150390625, 0.00518035888671875, 4.09375, 0.72265625, 0.1944580078125, 0.1724853515625, 0.03485107421875, 7.8984375, 0.22802734375, 0.61083984375], "tokens": [2071, 313, 36764, 15172, 2298, 526, 2979, 31, 15272, 461, 2799, 15172, 2298, 526, 2364, 661, 724]}
{"line_number": 72, "line_type": "generated", "code": "\n        return (chiSquareTest(expected, observed) < alpha);\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary", "entropy": 0.12139892578125, "is_bug_line": false, "sus_score": 0.4713846743106842, "per_token_entropy": [0.38916015625, 0.310791015625, 1.615234375, 0.1051025390625, 0.0002027750015258789, 0.0287322998046875, 0.005985260009765625, 0.01409149169921875, 0.0006608963012695312, 0.0141754150390625, 0.012664794921875, 0.2100830078125, 0.00576019287109375, 0.004032135009765625, 0.123046875, 0.0016508102416992188, 0.292724609375, 0.020721435546875, 0.03106689453125, 2.3365020751953125e-05, 1.5185546875, 0.0009794235229492188, 0.0006070137023925781, 0.006114959716796875, 0.3349609375, 0.36865234375, 0.0024871826171875, 0.153076171875, 0.0033435821533203125, 0.00022900104522705078, 0.0140228271484375, 0.045074462890625, 0.0038204193115234375, 0.00031304359436035156, 0.0006704330444335938, 0.0604248046875, 0.04168701171875, 0.412109375, 0.01151275634765625, 0.0025577545166015625, 0.0360107421875, 1.4901161193847656e-05, 0.005519866943359375, 0.0011463165283203125, 0.00024235248565673828, 0.07305908203125, 0.0020198822021484375, 4.017353057861328e-05, 0.0007724761962890625, 0.021453857421875, 0.004428863525390625, 0.00029468536376953125], "tokens": [291, 442, 308, 15142, 18374, 1006, 26, 3140, 30, 19143, 27, 333, 7377, 293, 284, 320, 446, 1022, 275, 319, 3088, 18446, 111, 275, 319, 333, 98, 772, 2008, 48, 5217, 44, 576, 2008, 48, 2272, 4736, 316, 42613, 322, 5384, 319, 333, 687, 48, 3140, 377, 687, 48, 1417, 415, 7506]}
{"line_number": 101, "line_type": "original", "code": "", "entropy": 3.73046875, "is_bug_line": false, "sus_score": 0.47110170125961304, "per_token_entropy": [3.73046875], "tokens": [203]}
{"line_number": 101, "line_type": "generated", "code": "\n        for (int row = 0; row < nRows; row++) {\n            for (int col = 0; col < nCols; col++) {\n                expected = ((rowSum[row] * colSum[col]) / total);", "entropy": 0.0498046875, "is_bug_line": false, "sus_score": 0.47110170125961304, "per_token_entropy": [0.52783203125, 0.1712646484375, 0.0020008087158203125, 0.0010967254638671875, 0.026611328125, 0.0018711090087890625, 0.00012826919555664062, 7.200241088867188e-05, 0.000579833984375, 0.0003838539123535156, 0.0004184246063232422, 0.0109710693359375, 0.0005102157592773438, 0.0006537437438964844, 0.0020236968994140625, 0.0112762451171875, 0.003208160400390625, 0.024200439453125, 0.01169586181640625, 0.0008687973022460938, 0.0002925395965576172, 0.00030303001403808594, 0.00020301342010498047, 0.0004596710205078125, 2.944469451904297e-05, 0.0002567768096923828, 0.00025177001953125, 0.0003733634948730469, 0.000682830810546875, 0.0005784034729003906, 0.00019407272338867188, 0.00015234947204589844, 0.00212860107421875, 0.002166748046875, 0.07958984375, 0.046478271484375, 0.001129150390625, 1.0908203125, 0.473388671875, 0.0016222000122070312, 0.00019729137420654297, 0.0007748603820800781, 0.017364501953125, 0.01230621337890625, 0.0009369850158691406, 1.5139579772949219e-05, 0.0013551712036132812, 0.0001779794692993164, 0.0284881591796875, 0.0187530517578125, 0.005977630615234375, 0.00548553466796875], "tokens": [291, 436, 308, 410, 2698, 280, 225, 34, 45, 2698, 333, 310, 7252, 45, 2698, 1987, 301, 324, 436, 308, 410, 932, 280, 225, 34, 45, 932, 333, 310, 19911, 45, 932, 1987, 301, 400, 2799, 280, 1833, 643, 4934, 77, 643, 79, 319, 932, 4934, 77, 748, 1130, 517, 3380, 293]}
{"line_number": 66, "line_type": "original", "code": "        if ((expected.length < 2) || (expected.length != observed.length)) {", "entropy": 0.9384765625, "is_bug_line": false, "sus_score": 0.46884769201278687, "per_token_entropy": [5.25390625, 1.9521484375, 2.74609375, 3.576171875, 1.2431640625, 0.004352569580078125, 1.3076171875, 0.005306243896484375, 0.0640869140625, 0.04766845703125, 0.1094970703125, 0.376708984375, 2.443359375, 0.05963134765625, 0.0014581680297851562, 0.026763916015625, 0.08587646484375, 0.004741668701171875, 0.0020999908447265625, 0.236328125, 0.1512451171875], "tokens": [351, 415, 1833, 3140, 32, 1322, 333, 225, 36, 27, 1276, 308, 3140, 32, 1322, 863, 19143, 32, 1322, 490, 301]}
{"line_number": 66, "line_type": "generated", "code": "\n    public boolean chiSquareTest(double[] expected, long[] observed,\n            double alpha) throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom(expected.length - 1.0);\n        return distribution.cumulativeProbability(\n               ", "entropy": 0.1541748046875, "is_bug_line": false, "sus_score": 0.46884769201278687, "per_token_entropy": [0.50537109375, 0.1275634765625, 0.00704193115234375, 0.022613525390625, 0.00018513202667236328, 0.004638671875, 0.004772186279296875, 0.0601806640625, 0.02581787109375, 0.01494598388671875, 0.0012292861938476562, 0.051788330078125, 0.0004248619079589844, 0.0009822845458984375, 0.020477294921875, 2.046875, 0.0190582275390625, 0.00478363037109375, 0.006793975830078125, 0.72412109375, 0.10791015625, 0.01549530029296875, 0.01448822021484375, 3.337860107421875e-06, 0.03509521484375, 0.35107421875, 0.8330078125, 0.00283050537109375, 0.0009217262268066406, 0.004604339599609375, 6.711483001708984e-05, 0.0006089210510253906, 1.7881393432617188e-06, 1.1920928955078125e-07, 0.005767822265625, 0.019989013671875, 0.0013713836669921875, 0.0008563995361328125, 0.005451202392578125, 0.0011386871337890625, 7.855892181396484e-05, 0.0298309326171875, 0.000152587890625, 0.007411956787109375, 0.064208984375, 0.294921875, 0.452392578125, 0.0008759498596191406, 0.288330078125, 5.4717063903808594e-05, 0.001087188720703125, 1.8291015625], "tokens": [284, 562, 1905, 25549, 18374, 1006, 26, 2627, 1178, 2799, 30, 1946, 1178, 19143, 30, 324, 2064, 7377, 27, 2571, 12137, 30, 4175, 984, 301, 291, 7433, 32, 470, 32709, 1419, 56, 18749, 418, 26, 3140, 32, 1322, 429, 225, 35, 32, 34, 293, 291, 442, 7433, 32, 12018, 35567, 26, 400]}
{"line_number": 350, "line_type": "original", "code": "        for (int i = 0; i < in.length; i ++) {", "entropy": 0.7138671875, "is_bug_line": false, "sus_score": 0.4655345678329468, "per_token_entropy": [3.0625, 5.01953125, 0.04168701171875, 0.14111328125, 0.12457275390625, 0.0201873779296875, 0.0246124267578125, 0.0210418701171875, 0.01264190673828125, 0.003032684326171875, 0.0165863037109375, 2.412109375, 0.1505126953125, 0.0230865478515625, 0.0091094970703125, 0.00638580322265625, 1.697265625, 0.064697265625], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 328, 32, 1322, 45, 595, 38884, 301]}
{"line_number": 350, "line_type": "generated", "code": "\n     */\n    public void setDistribution(ChiSquaredDistribution value) {\n        this.distribution = value;\n    }\n    \n    //---------------------  Private class methods ---------------------------------\n    \n    /**\n     * Returns the sum of the values in the given array.\n     * \n     * @", "entropy": 0.5166015625, "is_bug_line": false, "sus_score": 0.4655345678329468, "per_token_entropy": [1.2109375, 0.11956787109375, 0.079345703125, 0.76708984375, 0.07080078125, 0.061492919921875, 0.11358642578125, 0.048431396484375, 0.50830078125, 0.0028553009033203125, 0.0014095306396484375, 0.11529541015625, 0.007289886474609375, 0.0284271240234375, 0.1600341796875, 0.767578125, 0.00885009765625, 0.37841796875, 0.0133819580078125, 0.031951904296875, 0.02679443359375, 0.349365234375, 0.00641632080078125, 1.111328125, 1.4482421875, 0.53515625, 0.1856689453125, 0.9814453125, 3.939453125, 1.2373046875, 0.802734375, 0.302490234375, 0.7880859375, 0.294189453125, 0.048248291015625, 0.0004734992980957031, 1.7265625, 0.7880859375, 2.412109375, 0.1134033203125, 0.69091796875, 1.44140625, 0.17236328125, 0.432861328125, 1.5791015625, 0.1380615234375, 0.2174072265625, 0.2017822265625, 0.013397216796875, 0.366943359375, 0.00029778480529785156, 0.01380157470703125], "tokens": [275, 569, 284, 562, 763, 739, 16218, 26, 40953, 30455, 16218, 786, 27, 301, 291, 458, 32, 13081, 280, 786, 45, 284, 320, 2170, 434, 45509, 225, 12400, 443, 4438, 13182, 31, 2170, 1022, 275, 319, 3759, 322, 3632, 432, 322, 2078, 328, 322, 2702, 1417, 32, 275, 319, 5384, 319, 477]}
{"line_number": 93, "line_type": "original", "code": "     * @throws MathException if an error occurs computing the p-value", "entropy": 1.2490234375, "is_bug_line": false, "sus_score": 0.464469850063324, "per_token_entropy": [5.4609375, 5.36328125, 1.0615234375, 1.4833984375, 1.2119140625, 0.0198822021484375, 0.18359375, 0.34716796875, 0.002902984619140625, 0.003662109375, 0.71142578125, 0.2315673828125, 2.619140625, 0.02435302734375, 0.01535797119140625], "tokens": [262, 319, 477, 5117, 4175, 984, 415, 600, 1048, 12984, 18721, 322, 298, 31, 853]}
{"line_number": 93, "line_type": "generated", "code": "                colSum[col] += (double) counts[row][col];", "entropy": 0.1326904296875, "is_bug_line": false, "sus_score": 0.464469850063324, "per_token_entropy": [1.8271484375, 0.2113037109375, 0.00013267993927001953, 0.0005435943603515625, 0.0023975372314453125, 0.00025653839111328125, 0.0018825531005859375, 0.068359375, 0.0008144378662109375, 0.00015556812286376953, 0.0041046142578125, 0.0009150505065917969, 0.0014142990112304688, 0.0008988380432128906, 0.0005469322204589844, 0.00188446044921875], "tokens": [2071, 932, 4934, 77, 748, 79, 1454, 308, 2627, 27, 15172, 77, 643, 1674, 748, 970]}
{"line_number": 95, "line_type": "original", "code": "    public double chiSquareTest(double[] expected, long[] observed)", "entropy": 0.96728515625, "is_bug_line": false, "sus_score": 0.46384453773498535, "per_token_entropy": [4.125, 5.046875, 0.40625, 0.66064453125, 0.0022144317626953125, 1.9931640625, 0.03271484375, 1.712890625, 0.07318115234375, 0.04888916015625, 0.003475189208984375, 0.1217041015625, 0.0014896392822265625, 0.00920867919921875, 0.27294921875], "tokens": [264, 562, 2064, 25549, 18374, 1006, 26, 2627, 1178, 2799, 30, 1946, 1178, 19143, 27]}
{"line_number": 95, "line_type": "generated", "code": "\n            }\n        }\n        \n        // compute expected counts\n        double[][] expected = new double[nRows][nCols];\n        for (int row = 0; row < nRows; row++) {\n            for (int col = 0; col < n", "entropy": 0.11297607421875, "is_bug_line": false, "sus_score": 0.46384453773498535, "per_token_entropy": [0.6318359375, 0.05859375, 0.07342529296875, 0.0010824203491210938, 0.6923828125, 0.1744384765625, 1.056640625, 1.0166015625, 0.324951171875, 0.42822265625, 0.08795166015625, 0.84521484375, 0.1187744140625, 0.029022216796875, 0.061004638671875, 0.0008258819580078125, 0.0005183219909667969, 0.007717132568359375, 0.0003783702850341797, 8.177757263183594e-05, 0.01348114013671875, 0.0004565715789794922, 4.696846008300781e-05, 0.02886962890625, 0.1112060546875, 0.001018524169921875, 0.0008263587951660156, 0.021697998046875, 0.0011796951293945312, 9.1552734375e-05, 6.282329559326172e-05, 0.00025463104248046875, 0.0006289482116699219, 0.0004639625549316406, 0.004497528076171875, 0.00012767314910888672, 0.0002887248992919922, 0.0012531280517578125, 0.00860595703125, 0.0013055801391601562, 0.0113983154296875, 0.056243896484375, 0.0008487701416015625, 0.00019884109497070312, 0.00021708011627197266, 0.00021767616271972656, 0.00020837783813476562, 1.5854835510253906e-05, 0.00019931793212890625, 0.00025343894958496094, 0.00038361549377441406, 0.0005021095275878906], "tokens": [324, 320, 291, 320, 2746, 434, 7596, 2799, 15172, 291, 2064, 11336, 2799, 280, 537, 2064, 77, 96, 7252, 1674, 96, 19911, 970, 291, 436, 308, 410, 2698, 280, 225, 34, 45, 2698, 333, 310, 7252, 45, 2698, 1987, 301, 324, 436, 308, 410, 932, 280, 225, 34, 45, 932, 333, 310]}
{"line_number": 351, "line_type": "original", "code": "            if (in[i] <= 0) {", "entropy": 1.7373046875, "is_bug_line": false, "sus_score": 0.4618467688560486, "per_token_entropy": [5.99609375, 2.55859375, 0.2396240234375, 4.75390625, 1.2490234375, 0.188720703125, 1.3662109375, 3.98046875, 0.06341552734375, 0.03826904296875, 0.239990234375, 0.176025390625], "tokens": [1468, 415, 308, 266, 77, 91, 79, 2511, 225, 34, 27, 301]}
{"line_number": 351, "line_type": "generated", "code": "\n    public void setDistribution(ChiSquaredDistribution value) {\n        distribution = value;\n    }", "entropy": 0.299560546875, "is_bug_line": false, "sus_score": 0.4618467688560486, "per_token_entropy": [0.93505859375, 1.3369140625, 0.096923828125, 0.06549072265625, 0.130859375, 0.058319091796875, 0.52392578125, 0.00205230712890625, 0.00165557861328125, 0.1868896484375, 0.012664794921875, 0.06719970703125, 0.234375, 1.8369140625, 0.017547607421875, 0.039947509765625, 0.01528167724609375, 0.1259765625, 0.0044708251953125], "tokens": [284, 562, 763, 739, 16218, 26, 40953, 30455, 16218, 786, 27, 301, 291, 7433, 280, 786, 45, 284, 320]}
{"line_number": 96, "line_type": "original", "code": "        throws IllegalArgumentException, MathException {", "entropy": 2.498046875, "is_bug_line": false, "sus_score": 0.4594617486000061, "per_token_entropy": [2.609375, 11.9453125, 0.309814453125, 2.45703125, 0.0419921875, 0.0071563720703125, 0.1138916015625], "tokens": [351, 2571, 12137, 30, 4175, 984, 301]}
{"line_number": 96, "line_type": "generated", "code": "\n        }\n        \n        // rescale expected counts to match observed counts\n        double[] rowScale = new double[nRows];\n        double[] colScale = new double[nCols];\n        for (int row = 0; row < nRows; row++)", "entropy": 0.281494140625, "is_bug_line": false, "sus_score": 0.4594617486000061, "per_token_entropy": [0.5439453125, 0.53271484375, 0.96484375, 0.169677734375, 2.44140625, 0.0518798828125, 1.69921875, 0.2427978515625, 0.66357421875, 1.2080078125, 0.8017578125, 0.4609375, 0.8251953125, 0.7421875, 0.3701171875, 1.513671875, 0.685546875, 0.01061248779296875, 0.09393310546875, 0.0008015632629394531, 0.00054931640625, 0.01001739501953125, 0.0016336441040039062, 0.0010595321655273438, 0.013336181640625, 0.136474609375, 0.0039043426513671875, 0.0009679794311523438, 0.0009908676147460938, 0.0004787445068359375, 0.0002689361572265625, 0.0007076263427734375, 9.21487808227539e-05, 0.00010502338409423828, 0.0024433135986328125, 2.3484230041503906e-05, 0.0421142578125, 0.307861328125, 0.0015573501586914062, 0.0008339881896972656, 0.060516357421875, 0.0011119842529296875, 0.00026988983154296875, 0.00030303001403808594, 0.0007061958312988281, 0.0014934539794921875, 0.00046944618225097656, 0.00811767578125, 0.00019812583923339844, 0.000640869140625, 0.0013227462768554688, 0.00649261474609375], "tokens": [291, 320, 2746, 434, 316, 3804, 2799, 15172, 372, 2530, 19143, 15172, 291, 2064, 1178, 2698, 5234, 280, 537, 2064, 77, 96, 7252, 970, 291, 2064, 1178, 932, 5234, 280, 537, 2064, 77, 96, 19911, 970, 291, 436, 308, 410, 2698, 280, 225, 34, 45, 2698, 333, 310, 7252, 45, 2698, 1987]}
{"line_number": 171, "line_type": "original", "code": "        distribution.setDegreesOfFreedom(df);", "entropy": 1.9404296875, "is_bug_line": false, "sus_score": 0.45829325914382935, "per_token_entropy": [3.04296875, 9.7109375, 0.126708984375, 4.33984375, 1.8828125, 0.0010843276977539062, 0.0003466606140136719, 0.00020325183868408203, 2.6226043701171875e-06, 0.1402587890625, 3.818359375, 0.218994140625], "tokens": [351, 7433, 32, 470, 32709, 1419, 56, 18749, 418, 26, 1479, 293]}
{"line_number": 171, "line_type": "generated", "code": "\n            return 0;\n        }\n        // Compute and compare chi-square\n        double sumSq = 0;\n        for (int i = 0; i < observed1.length; i++) {\n            if (observed1[i]!= observed", "entropy": 0.316650390625, "is_bug_line": false, "sus_score": 0.45829325914382935, "per_token_entropy": [0.71484375, 1.0654296875, 1.3203125, 0.39501953125, 1.201171875, 0.14013671875, 0.0036945343017578125, 0.322265625, 0.48974609375, 1.2431640625, 1.029296875, 0.1138916015625, 1.8349609375, 0.19970703125, 0.06719970703125, 1.1259765625, 0.426025390625, 0.70556640625, 0.1204833984375, 0.0309295654296875, 0.0035800933837890625, 0.00020170211791992188, 1.4921875, 0.031890869140625, 0.364990234375, 0.0017957687377929688, 0.0026187896728515625, 0.016387939453125, 0.0029125213623046875, 0.0005784034729003906, 0.00033926963806152344, 0.0004184246063232422, 0.0023899078369140625, 0.000743865966796875, 0.0083465576171875, 0.0018644332885742188, 0.00016772747039794922, 2.4080276489257812e-05, 0.0012683868408203125, 0.0016326904296875, 0.00458526611328125, 0.0023174285888671875, 0.1265869140625, 1.21875, 0.051513671875, 0.11639404296875, 0.0103912353515625, 0.0032444000244140625, 0.00010216236114501953, 0.0017080307006835938, 0.38623046875, 0.0567626953125], "tokens": [324, 442, 225, 34, 45, 291, 320, 291, 434, 12836, 461, 8868, 25549, 31, 9699, 291, 2064, 3632, 17509, 280, 225, 34, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 19143, 35, 32, 1322, 45, 595, 1987, 301, 324, 415, 308, 36764, 35, 77, 91, 79, 863, 19143]}
