{"line_number": 350, "line_type": "original", "code": "        return factorials[n];", "entropy": 2.201171875, "is_bug_line": false, "sus_score": 0.6834180951118469, "per_token_entropy": [4.33984375, 6.03515625, 6.6015625, 0.004413604736328125, 0.39794921875, 0.078125, 0.031829833984375, 0.1258544921875], "tokens": [351, 442, 10365, 564, 101, 77, 96, 970]}
{"line_number": 350, "line_type": "generated", "code": "\n        }\n        return logSum;\n    }\n\n    /**\n     * Returns the binomial coefficient <code>n choose k</code>\n     * \n     * @param n\n     *            the size of the set\n     * @param k\n     *            the size", "entropy": 0.31640625, "is_bug_line": false, "sus_score": 0.6834180951118469, "per_token_entropy": [0.11962890625, 0.0181884765625, 0.06512451171875, 0.016815185546875, 0.0236968994140625, 0.00018465518951416016, 0.005626678466796875, 0.052978515625, 0.0021419525146484375, 0.8056640625, 0.0838623046875, 0.0924072265625, 0.0003859996795654297, 0.463134765625, 0.62158203125, 1.8681640625, 0.0049285888671875, 0.06683349609375, 0.923828125, 0.10369873046875, 0.130859375, 0.1805419921875, 0.93994140625, 0.049896240234375, 0.0205078125, 0.00042247772216796875, 1.6982421875, 1.1533203125, 0.0034313201904296875, 0.7919921875, 0.0005679130554199219, 0.1624755859375, 0.0250244140625, 0.006244659423828125, 1.40625, 0.00044989585876464844, 0.6904296875, 1.1220703125, 0.8916015625, 0.042572021484375, 0.02984619140625, 0.311279296875, 0.468505859375, 8.499622344970703e-05, 0.0017614364624023438, 0.0006403923034667969, 0.004852294921875, 0.0022106170654296875, 1.5974044799804688e-05, 0.0010385513305664062, 0.10772705078125, 0.8701171875], "tokens": [291, 320, 291, 442, 1245, 4934, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 7395, 12563, 17134, 333, 687, 48, 96, 9173, 831, 377, 687, 48, 275, 319, 5384, 319, 477, 753, 310, 275, 319, 1468, 322, 1334, 432, 322, 739, 275, 319, 477, 753, 831, 275, 319, 1468, 322, 1334]}
{"line_number": 346, "line_type": "original", "code": "        if (result == Long.MAX_VALUE) {", "entropy": 1.8095703125, "is_bug_line": true, "sus_score": 0.6801828742027283, "per_token_entropy": [6.13671875, 3.59765625, 0.1112060546875, 3.2890625, 2.51953125, 5.30859375, 0.0005092620849609375, 0.4775390625, 0.0005741119384765625, 0.000904083251953125, 0.18115234375, 0.09942626953125], "tokens": [351, 415, 308, 1267, 610, 6359, 32, 3459, 81, 5975, 27, 301]}
{"line_number": 346, "line_type": "generated", "code": "\n        }\n        return logGamma(n + 1);\n    }\n\n    /**\n     * Returns the <a href=\"http://mathworld.wolfram.com/GammaFunction.html\">\n     * Gamma function</a> of <code>x", "entropy": 0.275146484375, "is_bug_line": true, "sus_score": 0.6801828742027283, "per_token_entropy": [0.5576171875, 0.56591796875, 0.1842041015625, 0.97314453125, 1.703125, 0.060089111328125, 0.12646484375, 0.019073486328125, 0.03619384765625, 0.0024051666259765625, 0.0016775131225585938, 0.392333984375, 0.09759521484375, 0.005489349365234375, 0.52197265625, 0.1087646484375, 0.1273193359375, 0.00033164024353027344, 0.353271484375, 0.26611328125, 2.482421875, 0.07171630859375, 0.77783203125, 0.0794677734375, 0.003200531005859375, 0.0011148452758789062, 0.019622802734375, 0.00290679931640625, 4.506111145019531e-05, 0.0001533031463623047, 1.4424324035644531e-05, 0.0002665519714355469, 0.00209808349609375, 0.0002722740173339844, 0.00079345703125, 0.2349853515625, 0.003780364990234375, 0.0038509368896484375, 0.00015723705291748047, 0.012481689453125, 0.52734375, 9.02414321899414e-05, 0.51953125, 0.451904296875, 0.0635986328125, 0.0007948875427246094, 0.98486328125, 0.7470703125, 0.74658203125, 0.01324462890625, 0.007686614990234375, 0.439697265625], "tokens": [291, 320, 291, 442, 1245, 22386, 26, 96, 474, 225, 35, 293, 284, 320, 446, 1022, 275, 319, 3759, 322, 333, 83, 976, 347, 525, 555, 3812, 5860, 32, 105, 362, 43579, 32, 508, 33, 22386, 2447, 32, 916, 413, 275, 319, 48264, 667, 377, 83, 48, 432, 333, 687, 48, 106]}
{"line_number": 345, "line_type": "original", "code": "        long result = Math.round(factorialDouble(n));", "entropy": 1.7822265625, "is_bug_line": true, "sus_score": 0.6695547699928284, "per_token_entropy": [5.1875, 8.359375, 0.87939453125, 0.057464599609375, 3.96875, 0.237060546875, 1.1396484375, 0.037445068359375, 2.8046875, 0.001575469970703125, 1.9052734375, 0.0723876953125, 0.08160400390625, 0.2191162109375], "tokens": [351, 1946, 1056, 280, 4175, 32, 1497, 26, 9410, 564, 4075, 26, 96, 876]}
{"line_number": 345, "line_type": "generated", "code": "\n            throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n        }\n        double result = 0;\n        for (int i = 2; i <= n; i++) {\n            result += Math.log(i);\n        }\n        return", "entropy": 0.1253662109375, "is_bug_line": true, "sus_score": 0.6695547699928284, "per_token_entropy": [0.41845703125, 0.06427001953125, 0.0035076141357421875, 0.00930023193359375, 0.08770751953125, 0.05584716796875, 0.002254486083984375, 0.003345489501953125, 0.01027679443359375, 0.0030956268310546875, 0.0011148452758789062, 0.07318115234375, 0.1336669921875, 0.020263671875, 0.1083984375, 0.0009016990661621094, 0.282470703125, 0.9755859375, 0.55615234375, 0.0238037109375, 0.135498046875, 0.003444671630859375, 1.07421875, 0.198974609375, 0.286376953125, 0.06414794921875, 0.033477783203125, 0.10186767578125, 0.00568389892578125, 0.06304931640625, 0.1419677734375, 0.0029277801513671875, 0.003231048583984375, 0.01371002197265625, 0.0017299652099609375, 0.0034694671630859375, 0.87109375, 0.01294708251953125, 0.027862548828125, 0.292724609375, 0.024627685546875, 0.0290985107421875, 0.07666015625, 0.00334930419921875, 0.0001442432403564453, 0.0083770751953125, 0.002361297607421875, 0.0052032470703125, 0.07110595703125, 0.0003101825714111328, 0.1207275390625, 0.0052947998046875], "tokens": [324, 1422, 537, 12137, 440, 12172, 1159, 310, 2377, 225, 34, 436, 310, 9311, 291, 320, 291, 2064, 1056, 280, 225, 34, 45, 291, 436, 308, 410, 595, 280, 225, 36, 45, 595, 2511, 310, 45, 595, 1987, 301, 324, 1056, 1454, 4175, 32, 751, 26, 91, 293, 291, 320, 291, 442]}
{"line_number": 399, "line_type": "original", "code": "            logSum += Math.log((double)i);", "entropy": 2.796875, "is_bug_line": false, "sus_score": 0.5587614178657532, "per_token_entropy": [6.19921875, 11.6015625, 3.62109375, 0.740234375, 1.0771484375, 0.0277099609375, 0.20361328125, 3.037109375, 0.56982421875, 0.0670166015625, 5.91796875, 0.496826171875], "tokens": [1468, 1245, 4934, 1454, 4175, 32, 751, 1162, 2627, 27, 91, 293]}
{"line_number": 399, "line_type": "generated", "code": "\n            // B4/B3: use t for u and (u - t) for v\n            int r = u % v; // u % v non-negative\n            u = v;\n            v = r;\n            // B5/B3", "entropy": 0.2958984375, "is_bug_line": false, "sus_score": 0.5587614178657532, "per_token_entropy": [0.7783203125, 0.50537109375, 0.62060546875, 0.1044921875, 0.01155853271484375, 0.002010345458984375, 0.0662841796875, 0.095458984375, 0.3173828125, 1.3330078125, 0.088134765625, 0.1468505859375, 0.78271484375, 0.1484375, 0.061676025390625, 1.130859375, 0.039520263671875, 0.00025773048400878906, 0.00012600421905517578, 7.49826431274414e-05, 0.01392364501953125, 0.80859375, 1.2333984375, 0.0007104873657226562, 0.2225341796875, 0.1448974609375, 0.006404876708984375, 0.001911163330078125, 0.88623046875, 0.900390625, 0.297119140625, 9.083747863769531e-05, 1.013671875, 0.041290283203125, 0.307861328125, 0.01558685302734375, 0.1370849609375, 6.401538848876953e-05, 0.00017178058624267578, 0.0008244514465332031, 0.2000732421875, 0.0002741813659667969, 3.5762786865234375e-06, 0.004741668701171875, 0.00018990039825439453, 0.51708984375, 0.291748046875, 0.94140625, 0.029632568359375, 0.35107421875, 0.0014400482177734375, 0.78369140625], "tokens": [324, 434, 551, 38, 33, 52, 37, 44, 793, 273, 436, 1044, 461, 308, 103, 429, 273, 27, 436, 354, 324, 629, 540, 280, 1044, 904, 354, 45, 434, 1044, 904, 354, 2979, 31, 15272, 324, 1044, 280, 354, 45, 324, 354, 280, 540, 45, 324, 434, 551, 39, 33, 52, 37]}
{"line_number": 398, "line_type": "original", "code": "        for (int i = 2; i <= n; i++) {", "entropy": 1.5400390625, "is_bug_line": true, "sus_score": 0.5545565485954285, "per_token_entropy": [6.34375, 4.203125, 0.06475830078125, 0.02490234375, 0.009613037109375, 0.04632568359375, 0.1070556640625, 7.40625, 0.4853515625, 0.06903076171875, 0.25244140625, 5.39453125, 0.04986572265625, 0.110107421875, 0.0299835205078125, 0.039764404296875], "tokens": [351, 436, 308, 410, 595, 280, 225, 36, 45, 595, 2511, 310, 45, 595, 1987, 301]}
{"line_number": 398, "line_type": "generated", "code": "\n            t = Math.abs(t);\n            int r = (u % v);\n            while (r!= 0) {\n                /* assert u<0 && v<0 && r<0; */\n                u = v; // |u", "entropy": 0.27783203125, "is_bug_line": true, "sus_score": 0.5545565485954285, "per_token_entropy": [0.53076171875, 1.5791015625, 0.1973876953125, 0.72900390625, 0.0143280029296875, 0.642578125, 0.01027679443359375, 0.282470703125, 0.03778076171875, 0.5732421875, 0.85693359375, 0.265625, 0.0728759765625, 1.2900390625, 0.53369140625, 0.0269927978515625, 0.310791015625, 0.16796875, 0.1611328125, 0.88525390625, 0.0289459228515625, 0.0018138885498046875, 0.001964569091796875, 0.00036525726318359375, 7.987022399902344e-06, 0.001026153564453125, 0.01012420654296875, 0.12274169921875, 1.1865234375, 0.3818359375, 0.345703125, 0.1014404296875, 0.57470703125, 0.01476287841796875, 0.0017004013061523438, 0.0033779144287109375, 0.00010585784912109375, 0.16455078125, 0.299560546875, 0.489501953125, 0.00010514259338378906, 0.01505279541015625, 0.0019216537475585938, 0.0272064208984375, 0.341552734375, 0.0002282857894897461, 0.029205322265625, 0.002681732177734375, 0.8408203125, 0.01032257080078125, 0.001773834228515625], "tokens": [324, 273, 280, 4175, 32, 3596, 26, 102, 293, 324, 629, 540, 280, 308, 103, 904, 354, 293, 324, 2218, 308, 100, 863, 225, 34, 27, 301, 400, 1257, 1201, 1044, 46, 34, 962, 354, 46, 34, 962, 540, 46, 34, 45, 569, 400, 1044, 280, 354, 45, 434, 523, 103]}
{"line_number": 377, "line_type": "original", "code": "        return Math.floor(Math.exp(factorialLog(n)) + 0.5);", "entropy": 2.630859375, "is_bug_line": true, "sus_score": 0.5495339035987854, "per_token_entropy": [3.44921875, 7.140625, 5.31640625, 0.2047119140625, 7.6328125, 1.7685546875, 1.9853515625, 0.01343536376953125, 7.68359375, 0.039215087890625, 6.31640625, 0.00048470497131347656, 0.009429931640625, 0.12127685546875, 6.8359375, 4.66796875, 2.51953125, 0.884765625, 1.1201171875, 0.02435302734375, 0.04266357421875, 0.11181640625], "tokens": [351, 442, 4175, 32, 9121, 26, 5717, 32, 2832, 26, 9410, 564, 1335, 26, 96, 490, 474, 225, 34, 32, 39, 293]}
{"line_number": 377, "line_type": "generated", "code": "\n        } else {", "entropy": 0.1156005859375, "is_bug_line": true, "sus_score": 0.5495339035987854, "per_token_entropy": [0.339599609375, 0.0054473876953125, 0.1044921875, 0.0129241943359375], "tokens": [291, 320, 813, 301]}
{"line_number": 397, "line_type": "original", "code": "        double logSum = 0;", "entropy": 3.046875, "is_bug_line": true, "sus_score": 0.547266960144043, "per_token_entropy": [4.70703125, 9.0859375, 6.78125, 2.294921875, 0.06005859375, 0.6640625, 0.018280029296875, 0.76318359375], "tokens": [351, 2064, 1245, 4934, 280, 225, 34, 45]}
{"line_number": 397, "line_type": "generated", "code": "\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            /* assert t<0; */\n            /* assert (u&1)==1; */\n           ", "entropy": 0.1927490234375, "is_bug_line": true, "sus_score": 0.547266960144043, "per_token_entropy": [0.082275390625, 1.3671875, 0.36279296875, 0.047119140625, 0.0026111602783203125, 0.00017499923706054688, 0.0011892318725585938, 0.0008039474487304688, 0.00042724609375, 0.00212860107421875, 0.030975341796875, 0.00916290283203125, 0.984375, 0.1112060546875, 0.0265045166015625, 3.981590270996094e-05, 3.731250762939453e-05, 0.054840087890625, 0.0657958984375, 0.0150604248046875, 0.2440185546875, 0.6875, 0.088623046875, 0.11676025390625, 0.00431060791015625, 0.0274505615234375, 0.08209228515625, 0.0020599365234375, 0.0005693435668945312, 6.914138793945312e-05, 0.07452392578125, 0.0006580352783203125, 0.044189453125, 1.0380859375, 0.2486572265625, 1.1025390625, 0.787109375, 9.036064147949219e-05, 0.018829345703125, 0.001575469970703125, 0.0301361083984375, 1.0546875, 0.52783203125, 0.386962890625, 0.003421783447265625, 0.0220947265625, 0.0014791488647460938, 0.033355712890625, 0.0919189453125, 0.04473876953125, 0.04473876953125, 0.04595947265625], "tokens": [291, 434, 273, 11557, 44, 1044, 1597, 4444, 30, 354, 438, 17859, 308, 102, 30598, 1044, 27, 291, 745, 301, 324, 1257, 1201, 1044, 46, 34, 962, 354, 46, 34, 45, 569, 324, 1257, 1201, 273, 46, 34, 45, 569, 324, 1257, 1201, 308, 103, 24, 35, 19162, 35, 45, 569, 324]}
{"line_number": 394, "line_type": "original", "code": "        if (n < 0) {", "entropy": 2.515625, "is_bug_line": false, "sus_score": 0.5202816128730774, "per_token_entropy": [2.724609375, 5.234375, 0.2078857421875, 12.5, 1.6669921875, 0.175048828125, 0.032684326171875, 0.040283203125, 0.05743408203125], "tokens": [351, 415, 308, 96, 333, 225, 34, 27, 301]}
{"line_number": 394, "line_type": "generated", "code": "\n        while ((u & 1) == 0) { // while u is even..\n            u /= 2;\n        } // cast out twos\n        // now u is the positive remainder of u\n        // B3.\n        while (true)", "entropy": 0.21728515625, "is_bug_line": false, "sus_score": 0.5202816128730774, "per_token_entropy": [1.283203125, 2.107421875, 0.030242919921875, 0.0002837181091308594, 0.0222320556640625, 7.271766662597656e-06, 3.933906555175781e-06, 8.690357208251953e-05, 1.52587890625e-05, 1.5735626220703125e-05, 1.0728836059570312e-05, 0.0069580078125, 0.02606201171875, 0.0239105224609375, 0.10345458984375, 2.002716064453125e-05, 7.724761962890625e-05, 0.06280517578125, 0.53369140625, 0.008544921875, 0.00334930419921875, 0.0026340484619140625, 3.695487976074219e-05, 4.410743713378906e-06, 0.0003311634063720703, 0.0171051025390625, 0.001544952392578125, 0.1219482421875, 0.212646484375, 0.0014162063598632812, 0.1324462890625, 7.152557373046875e-07, 0.3720703125, 0.47607421875, 1.5380859375, 0.0184478759765625, 0.007415771484375, 0.27197265625, 0.72900390625, 0.2113037109375, 0.01326751708984375, 0.27978515625, 0.19873046875, 0.7666015625, 0.37939453125, 9.036064147949219e-05, 0.08453369140625, 0.9501953125, 0.251220703125, 0.00019502639770507812, 0.044769287109375, 0.00025534629821777344], "tokens": [291, 2218, 1833, 103, 549, 225, 35, 27, 610, 225, 34, 27, 301, 434, 2218, 1044, 438, 4444, 497, 324, 1044, 14374, 225, 36, 45, 291, 320, 434, 9936, 963, 8206, 500, 291, 434, 2464, 1044, 438, 322, 11557, 27103, 432, 1044, 291, 434, 551, 37, 32, 291, 2218, 308, 1508, 27]}
{"line_number": 374, "line_type": "original", "code": "        if (n < 0) {", "entropy": 1.8798828125, "is_bug_line": false, "sus_score": 0.5175910592079163, "per_token_entropy": [4.1171875, 2.224609375, 0.26171875, 9.6875, 0.4130859375, 0.0626220703125, 0.03424072265625, 0.06842041015625, 0.049652099609375], "tokens": [351, 415, 308, 96, 333, 225, 34, 27, 301]}
{"line_number": 374, "line_type": "generated", "code": "\n        // overflowing)\n        int k = 0;\n        while (((u | v) & 1) == 0) { // while u and v are both even\n            u >>= 1;\n            v >>= 1;\n            k++;\n       ", "entropy": 0.257568359375, "is_bug_line": false, "sus_score": 0.5175910592079163, "per_token_entropy": [1.4375, 1.7509765625, 0.11962890625, 0.2393798828125, 0.09149169921875, 0.02801513671875, 0.748046875, 0.88525390625, 0.062164306640625, 0.01207733154296875, 0.33056640625, 0.0006279945373535156, 0.260986328125, 1.8212890625, 0.7763671875, 0.0004413127899169922, 0.517578125, 8.606910705566406e-05, 0.00036787986755371094, 3.123283386230469e-05, 0.0006494522094726562, 0.0008301734924316406, 0.00021851062774658203, 3.814697265625e-06, 4.4465065002441406e-05, 5.245208740234375e-06, 0.0012378692626953125, 0.0095672607421875, 0.161865234375, 0.09228515625, 0.01032257080078125, 0.0035991668701171875, 4.684925079345703e-05, 0.0182037353515625, 1.001953125, 0.032958984375, 1.3447265625, 0.331787109375, 0.26708984375, 0.0011148452758789062, 2.2649765014648438e-05, 0.00029921531677246094, 0.263671875, 0.0005412101745605469, 0.00020444393157958984, 0.00010073184967041016, 6.794929504394531e-06, 0.00010633468627929688, 0.01142120361328125, 0.0237579345703125, 0.160400390625, 0.57568359375], "tokens": [291, 434, 9973, 299, 27, 291, 629, 831, 280, 225, 34, 45, 291, 2218, 8580, 103, 523, 354, 27, 549, 225, 35, 27, 610, 225, 34, 27, 301, 434, 2218, 1044, 461, 354, 884, 4335, 4444, 324, 1044, 23509, 225, 35, 45, 324, 354, 23509, 225, 35, 45, 324, 831, 3334, 291]}
{"line_number": 401, "line_type": "original", "code": "        return logSum;", "entropy": 8.3359375, "is_bug_line": false, "sus_score": 0.5169869661331177, "per_token_entropy": [4.2109375, 13.7421875, 19.265625, 3.787109375, 0.67431640625], "tokens": [351, 442, 1245, 4934, 45]}
{"line_number": 401, "line_type": "generated", "code": "\n            // B5: replace u with quotient, v with remainder.\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            /* assert u<0 && v>=0;", "entropy": 0.1671142578125, "is_bug_line": false, "sus_score": 0.5169869661331177, "per_token_entropy": [0.33740234375, 0.72900390625, 0.01297760009765625, 0.002155303955078125, 0.25927734375, 0.72900390625, 0.0217132568359375, 0.0279693603515625, 1.2138671875, 6.99758529663086e-05, 0.03460693359375, 0.18798828125, 3.314018249511719e-05, 0.013153076171875, 0.00655364990234375, 0.01209259033203125, 0.64208984375, 0.01410675048828125, 0.76220703125, 0.0177764892578125, 1.7523765563964844e-05, 1.6689300537109375e-06, 3.409385681152344e-05, 0.01349639892578125, 0.17138671875, 0.387451171875, 0.0002753734588623047, 0.1826171875, 0.044342041015625, 0.0005536079406738281, 0.207275390625, 0.0099029541015625, 0.1461181640625, 0.035675048828125, 0.028717041015625, 0.01556396484375, 0.00031304359436035156, 0.0016880035400390625, 0.00012445449829101562, 0.02691650390625, 0.017303466796875, 0.0797119140625, 1.16015625, 0.034423828125, 0.0118408203125, 0.0245208740234375, 0.0153350830078125, 0.0014543533325195312, 0.006992340087890625, 1.0419921875, 5.412101745605469e-05, 0.00012314319610595703], "tokens": [324, 434, 551, 39, 44, 7084, 1044, 623, 32785, 1606, 30, 354, 623, 27103, 32, 324, 415, 308, 102, 848, 225, 34, 27, 301, 400, 1044, 280, 429, 102, 45, 324, 320, 813, 301, 400, 354, 280, 273, 45, 324, 320, 324, 1257, 1201, 1044, 46, 34, 962, 354, 7148, 34, 45]}
{"line_number": 316, "line_type": "original", "code": "    private static final long[] factorials = new long[] ", "entropy": 1.5166015625, "is_bug_line": false, "sus_score": 0.46943041682243347, "per_token_entropy": [2.80859375, 6.66015625, 0.0648193359375, 1.34375, 2.298828125, 0.10784912109375, 0.09686279296875, 0.0010061264038085938, 0.00965118408203125, 0.054351806640625, 1.7490234375, 0.1812744140625, 0.37158203125, 5.4921875], "tokens": [264, 945, 907, 1158, 1946, 1178, 10365, 564, 101, 280, 537, 1946, 1178, 225]}
{"line_number": 316, "line_type": "generated", "code": "\n     * </ul>\n     * </p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if n < 0\n     */\n    public static double factorialDouble(final int n", "entropy": 0.035919189453125, "is_bug_line": false, "sus_score": 0.46943041682243347, "per_token_entropy": [0.278076171875, 0.1934814453125, 0.053314208984375, 0.00841522216796875, 0.0031490325927734375, 0.023956298828125, 0.0015888214111328125, 0.0215606689453125, 0.00032138824462890625, 0.002185821533203125, 0.010833740234375, 0.00029778480529785156, 0.0421142578125, 0.00017452239990234375, 0.00542449951171875, 0.003131866455078125, 0.0022220611572265625, 0.0205230712890625, 0.027435302734375, 4.374980926513672e-05, 0.0009236335754394531, 0.002124786376953125, 0.01532745361328125, 0.0006699562072753906, 0.0004508495330810547, 0.0037841796875, 0.001316070556640625, 0.00012683868408203125, 0.0173797607421875, 0.060699462890625, 0.016357421875, 0.007091522216796875, 0.10589599609375, 0.2431640625, 0.00812530517578125, 0.07122802734375, 0.0220489501953125, 0.0012845993041992188, 8.594989776611328e-05, 0.055755615234375, 0.147216796875, 0.055389404296875, 0.048492431640625, 0.0006284713745117188, 0.004482269287109375, 0.0002875328063964844, 3.552436828613281e-05, 0.028106689453125, 0.0008616447448730469, 0.2393798828125, 0.010162353515625, 0.0002942085266113281], "tokens": [275, 319, 576, 338, 48, 275, 319, 576, 98, 48, 275, 319, 5384, 319, 477, 753, 310, 2793, 275, 319, 477, 601, 333, 687, 48, 96, 12975, 687, 48, 275, 319, 477, 5117, 12137, 415, 310, 333, 225, 34, 275, 569, 284, 562, 907, 2064, 10365, 564, 4075, 26, 3220, 629, 310]}
