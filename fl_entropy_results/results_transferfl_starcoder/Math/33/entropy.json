{"line_number": 339, "line_type": "original", "code": "                columnsToDrop.add(i);", "entropy": 2.345703125, "is_bug_line": false, "sus_score": 0.5824349522590637, "per_token_entropy": [9.21875, 9.171875, 0.1207275390625, 0.018157958984375, 0.064208984375, 0.317626953125, 0.0167388916015625, 1.951171875, 0.226318359375], "tokens": [2071, 6090, 705, 6243, 32, 669, 26, 91, 293]}
{"line_number": 339, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns whether the problem is infeasible.\n     * @return whether the model is infeasible\n     */\n    boolean isInfeasible() {\n        for (int i = getNumObjectiveFunctions(); i < getWidth() - ", "entropy": 0.148193359375, "is_bug_line": false, "sus_score": 0.5824349522590637, "per_token_entropy": [0.2159423828125, 0.05181884765625, 0.28955078125, 0.0633544921875, 0.034210205078125, 0.00014579296112060547, 0.841796875, 1.0751953125, 0.19580078125, 0.1737060546875, 0.08636474609375, 1.033203125, 0.046875, 0.0008921623229980469, 0.1287841796875, 0.029144287109375, 0.0010061264038085938, 0.047027587890625, 0.004611968994140625, 0.042999267578125, 0.044281005859375, 0.334228515625, 0.340087890625, 0.04620361328125, 0.002593994140625, 0.0015649795532226562, 0.06549072265625, 0.01538848876953125, 0.014862060546875, 0.1251220703125, 0.32275390625, 0.00011718273162841797, 0.0002834796905517578, 0.0032978057861328125, 0.001911163330078125, 0.08697509765625, 0.796875, 0.0007123947143554688, 0.016845703125, 0.09185791015625, 0.0006732940673828125, 0.74853515625, 0.005237579345703125, 1.0132789611816406e-05, 0.033935546875, 0.00283050537109375, 0.0011615753173828125, 0.07208251953125, 0.043487548828125, 0.10528564453125, 0.0017452239990234375, 0.01422882080078125], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 4946, 322, 3708, 438, 328, 1225, 38294, 32, 275, 319, 477, 601, 4946, 322, 1542, 438, 328, 1225, 38294, 275, 569, 284, 1905, 43349, 1225, 38294, 346, 301, 291, 436, 308, 410, 595, 280, 44929, 33312, 10905, 473, 595, 333, 622, 2611, 346, 429, 225]}
{"line_number": 337, "line_type": "original", "code": "            final double entry = tableau.getEntry(0, i);", "entropy": 0.81787109375, "is_bug_line": false, "sus_score": 0.5633394122123718, "per_token_entropy": [3.923828125, 5.015625, 0.1383056640625, 1.4326171875, 0.23291015625, 0.2490234375, 0.0005917549133300781, 0.0148162841796875, 0.001308441162109375, 0.0035686492919921875, 0.373779296875, 0.00030803680419921875, 0.0269927978515625, 0.036285400390625], "tokens": [1468, 1158, 2064, 3414, 280, 1858, 4452, 32, 48895, 26, 34, 30, 595, 293]}
{"line_number": 337, "line_type": "generated", "code": "\n        }\n        return true;\n    }\n\n    /**\n     * Returns the value of the objective function at the given point.\n     * @param point the point to evaluate\n     * @return the value of the objective function at the given point\n     */\n    double get", "entropy": 0.2705078125, "is_bug_line": false, "sus_score": 0.5633394122123718, "per_token_entropy": [0.25146484375, 0.047149658203125, 0.220703125, 0.050384521484375, 0.034454345703125, 0.001922607421875, 0.07366943359375, 0.00104522705078125, 0.2060546875, 0.081298828125, 0.030792236328125, 0.00017440319061279297, 0.79150390625, 0.75732421875, 1.9716796875, 0.1444091796875, 0.10626220703125, 0.361083984375, 0.11871337890625, 0.841796875, 0.306884765625, 1.099609375, 0.7177734375, 0.1546630859375, 0.05841064453125, 0.0018186569213867188, 0.091552734375, 0.1884765625, 0.66357421875, 0.79296875, 0.12646484375, 1.16796875, 0.53564453125, 0.40771484375, 0.0033397674560546875, 0.0003178119659423828, 0.042572021484375, 0.045989990234375, 0.07330322265625, 0.0039215087890625, 0.0038776397705078125, 0.01343536376953125, 0.01181793212890625, 0.09417724609375, 0.01136016845703125, 0.09393310546875, 0.002277374267578125, 0.2127685546875, 0.367431640625, 0.01104736328125, 0.42822265625, 0.2476806640625], "tokens": [291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 786, 432, 322, 25110, 667, 821, 322, 2702, 2260, 32, 275, 319, 477, 753, 2260, 322, 2260, 372, 13396, 275, 319, 477, 601, 322, 786, 432, 322, 25110, 667, 821, 322, 2702, 2260, 275, 569, 284, 2064, 622]}
{"line_number": 338, "line_type": "original", "code": "            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {", "entropy": 0.92822265625, "is_bug_line": true, "sus_score": 0.5612953901290894, "per_token_entropy": [6.1171875, 1.732421875, 0.1607666015625, 2.685546875, 0.0015516281127929688, 1.107421875, 0.01497650146484375, 2.40234375, 0.00846099853515625, 0.09161376953125, 0.2186279296875, 0.041839599609375, 0.018524169921875, 4.203125, 0.0298004150390625, 2.6941299438476562e-05, 0.03533935546875, 1.451171875, 0.0023403167724609375, 0.004215240478515625, 0.01678466796875, 0.08038330078125], "tokens": [1468, 415, 308, 20398, 32, 23908, 26, 3038, 30, 225, 34, 86, 30, 1769, 28522, 1069, 27, 848, 225, 34, 27, 301]}
{"line_number": 338, "line_type": "generated", "code": "\n        return true;\n    }\n\n    /**\n     * Returns the value of the objective function at the given point.\n     * @param point the point to compute the value at\n     * @return the value of the objective function at the given point\n     */\n    double", "entropy": 0.314697265625, "is_bug_line": true, "sus_score": 0.5612953901290894, "per_token_entropy": [0.2220458984375, 0.341064453125, 0.08489990234375, 0.00356292724609375, 0.1292724609375, 0.0017385482788085938, 0.2464599609375, 0.077880859375, 0.0301361083984375, 0.00014889240264892578, 0.80615234375, 0.71337890625, 1.8701171875, 0.13525390625, 0.1075439453125, 0.36669921875, 0.1024169921875, 0.8896484375, 0.270751953125, 1.1357421875, 0.60791015625, 0.14599609375, 0.053924560546875, 0.0014400482177734375, 0.09027099609375, 0.1910400390625, 0.6630859375, 0.84619140625, 0.1246337890625, 1.201171875, 1.685546875, 0.116455078125, 0.9892578125, 0.72021484375, 0.0352783203125, 0.004024505615234375, 0.0012693405151367188, 0.037933349609375, 0.0433349609375, 0.07666015625, 0.0080108642578125, 0.005062103271484375, 0.017120361328125, 0.0145111083984375, 0.07928466796875, 0.0140533447265625, 0.1273193359375, 0.002628326416015625, 0.12548828125, 0.3349609375, 0.0131072998046875, 0.440673828125], "tokens": [291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 786, 432, 322, 25110, 667, 821, 322, 2702, 2260, 32, 275, 319, 477, 753, 2260, 322, 2260, 372, 7596, 322, 786, 821, 275, 319, 477, 601, 322, 786, 432, 322, 25110, 667, 821, 322, 2702, 2260, 275, 569, 284, 2064]}
{"line_number": 336, "line_type": "original", "code": "        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {", "entropy": 0.8525390625, "is_bug_line": false, "sus_score": 0.5611366033554077, "per_token_entropy": [3.869140625, 4.83984375, 0.01435089111328125, 0.08038330078125, 0.2431640625, 0.006336212158203125, 1.1171875, 0.027587890625, 0.00012695789337158203, 0.087890625, 0.008819580078125, 0.0035533905029296875, 0.25390625, 7.08984375, 0.000732421875, 0.0706787109375, 0.007328033447265625, 0.133544921875, 0.01438140869140625, 0.01015472412109375, 0.0198822021484375], "tokens": [351, 436, 308, 410, 595, 280, 44929, 33312, 10905, 473, 595, 333, 622, 5271, 31251, 3818, 3457, 473, 595, 1987, 301]}
{"line_number": 336, "line_type": "generated", "code": "\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is infeasible.\n     * @return whether the problem is infeasible\n     */\n    boolean isInfeasible() {\n        for (int i = getNumObjectiveFunctions", "entropy": 0.174560546875, "is_bug_line": false, "sus_score": 0.5611366033554077, "per_token_entropy": [0.4287109375, 0.324462890625, 0.1717529296875, 0.00054168701171875, 0.2261962890625, 0.0364990234375, 0.0217437744140625, 0.003261566162109375, 0.294921875, 0.00156402587890625, 0.2108154296875, 0.0697021484375, 0.0362548828125, 0.00019872188568115234, 0.8525390625, 1.02734375, 0.1939697265625, 0.172607421875, 0.087158203125, 1.04296875, 0.05694580078125, 0.0009365081787109375, 0.1214599609375, 0.0306243896484375, 0.0011358261108398438, 0.04010009765625, 0.004734039306640625, 0.04248046875, 0.041351318359375, 1.2431640625, 0.019805908203125, 0.0225982666015625, 0.00039005279541015625, 0.0008769035339355469, 0.11383056640625, 0.01235198974609375, 0.02008056640625, 0.1300048828125, 0.24609375, 0.00010466575622558594, 0.00020420551300048828, 0.003509521484375, 0.0011205673217773438, 0.07281494140625, 0.8212890625, 0.0006508827209472656, 0.0193634033203125, 0.10009765625, 0.000858306884765625, 0.7041015625, 0.00377655029296875, 6.079673767089844e-06], "tokens": [324, 320, 291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 4946, 322, 3708, 438, 328, 1225, 38294, 32, 275, 319, 477, 601, 4946, 322, 3708, 438, 328, 1225, 38294, 275, 569, 284, 1905, 43349, 1225, 38294, 346, 301, 291, 436, 308, 410, 595, 280, 44929, 33312, 10905]}
{"line_number": 261, "line_type": "original", "code": "            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),", "entropy": 2.15625, "is_bug_line": false, "sus_score": 0.5185545086860657, "per_token_entropy": [4.70703125, 1.208984375, 7.46484375, 8.6171875, 3.8515625, 0.348388671875, 2.958984375, 1.576171875, 0.05120849609375, 0.0295257568359375, 0.00717926025390625, 1.73046875, 3.19140625, 0.373779296875, 0.1279296875, 0.0023670196533203125, 0.423828125], "tokens": [1468, 442, 537, 13935, 9012, 26, 12704, 32, 371, 8973, 101, 922, 1110, 27732, 3736, 35, 471]}
{"line_number": 261, "line_type": "generated", "code": "\n        if (col < getSlackVariableOffset()) {\n            return null;\n        }\n        return basicRow[col - getSlackVariableOffset()];\n    }\n\n    /**\n     * Get the number of basic variables in the tableau.\n     * @return the number", "entropy": 0.4560546875, "is_bug_line": false, "sus_score": 0.5185545086860657, "per_token_entropy": [0.3525390625, 1.1884765625, 0.2000732421875, 1.2138671875, 0.703125, 1.3095703125, 1.6298828125, 0.0089874267578125, 0.007579803466796875, 0.2200927734375, 0.0163116455078125, 0.1258544921875, 0.455322265625, 0.99853515625, 0.0007028579711914062, 0.0888671875, 0.0006561279296875, 1.005859375, 1.361328125, 0.2496337890625, 1.5732421875, 0.7958984375, 0.0457763671875, 0.1341552734375, 0.0849609375, 0.004337310791015625, 5.4001808166503906e-05, 2.2172927856445312e-05, 0.055938720703125, 0.30908203125, 0.002361297607421875, 0.159423828125, 0.03497314453125, 0.0277252197265625, 0.00020813941955566406, 1.142578125, 0.25830078125, 2.5078125, 0.00469207763671875, 1.1435546875, 0.254150390625, 1.142578125, 0.9453125, 1.0458984375, 0.007568359375, 0.1505126953125, 0.07098388671875, 0.006237030029296875, 0.0322265625, 0.003421783447265625, 0.62744140625, 0.01291656494140625], "tokens": [291, 415, 308, 748, 333, 622, 31185, 3818, 3457, 1157, 301, 324, 442, 744, 45, 291, 320, 291, 442, 6550, 2352, 77, 748, 429, 622, 31185, 3818, 3457, 22086, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 6550, 4886, 328, 322, 1858, 4452, 32, 275, 319, 477, 601, 322, 1451]}
{"line_number": 226, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess", "entropy": 1.4150390625, "is_bug_line": false, "sus_score": 0.5178564190864563, "per_token_entropy": [8.8046875, 4.7734375, 0.0106201171875, 0.032257080078125, 0.1697998046875, 0.0040740966796875, 0.88232421875, 0.005725860595703125, 0.267578125, 1.8955078125, 0.0006031990051269531, 0.0004298686981201172, 0.0142822265625, 0.02630615234375, 0.0435791015625, 0.0022411346435546875, 0.488037109375, 2.400390625, 0.0159912109375, 0.00809478759765625, 0.63037109375, 10.65625], "tokens": [2071, 5045, 32, 470, 2711, 26, 643, 30, 622, 31185, 3818, 3457, 346, 474, 28039, 1881, 18326, 429, 35, 293, 434, 35800]}
{"line_number": 226, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5178564190864563, "per_token_entropy": [], "tokens": []}
{"line_number": 299, "line_type": "original", "code": "        for (double coefficient : coefficients.toArray()) {", "entropy": 1.7197265625, "is_bug_line": false, "sus_score": 0.5136599540710449, "per_token_entropy": [3.458984375, 4.09765625, 0.016693115234375, 6.08203125, 1.896484375, 0.019134521484375, 1.3046875, 1.91015625, 0.08331298828125, 0.0037899017333984375, 0.048675537109375], "tokens": [351, 436, 308, 2627, 17134, 499, 26370, 32, 14320, 1157, 301]}
{"line_number": 299, "line_type": "generated", "code": "\n        }\n\n        // drop the columns\n        for (final int column : columnsToDrop) {\n            tableau.setColumn(column, null);\n        }\n    }\n\n    /**\n     * Add a constraint to the tableau.\n     * @param constraint constraint", "entropy": 0.4462890625, "is_bug_line": false, "sus_score": 0.5136599540710449, "per_token_entropy": [0.5830078125, 0.72412109375, 0.77392578125, 0.97412109375, 1.46484375, 0.6328125, 0.9423828125, 0.4091796875, 0.73095703125, 0.00670623779296875, 0.97607421875, 0.23583984375, 1.392578125, 0.1285400390625, 0.0093536376953125, 3.3974647521972656e-05, 7.152557373046875e-05, 0.0012426376342773438, 0.0016736984252929688, 0.2069091796875, 0.62451171875, 2.1576881408691406e-05, 0.303466796875, 0.7255859375, 0.00909423828125, 0.01409912109375, 0.265625, 0.0025615692138671875, 0.8388671875, 0.0131988525390625, 0.2724609375, 0.0004248619079589844, 1.044921875, 0.0017576217651367188, 0.15576171875, 0.0298919677734375, 0.03717041015625, 2.574920654296875e-05, 3.7421875, 1.0869140625, 1.4560546875, 0.11309814453125, 0.5625, 0.537109375, 0.008758544921875, 0.201416015625, 0.23779296875, 0.0018749237060546875, 0.2093505859375, 0.001209259033203125, 0.07586669921875, 0.43359375], "tokens": [291, 320, 584, 434, 6278, 322, 6090, 291, 436, 308, 3220, 629, 2623, 499, 6090, 705, 6243, 27, 301, 324, 1858, 4452, 32, 470, 2137, 26, 2592, 30, 744, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 2222, 312, 13118, 372, 322, 1858, 4452, 32, 275, 319, 477, 753, 13118, 13118]}
{"line_number": 215, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() - 1,", "entropy": 1.37890625, "is_bug_line": false, "sus_score": 0.5113018155097961, "per_token_entropy": [6.55859375, 8.2421875, 0.0816650390625, 0.12225341796875, 0.081787109375, 0.0034160614013671875, 0.389404296875, 0.00498199462890625, 0.340087890625, 1.3916015625, 0.0004429817199707031, 0.0007686614990234375, 0.0150604248046875, 6.17578125, 0.028656005859375, 0.00388336181640625, 0.003719329833984375], "tokens": [2071, 5045, 32, 470, 2711, 26, 643, 30, 622, 31185, 3818, 3457, 346, 429, 225, 35, 30]}
{"line_number": 215, "line_type": "generated", "code": "\n        return constraint;\n    }\n\n    /**\n     * Get the sum of the coefficients of the given vector.\n     * @param coefficients vector of coefficients\n     * @return sum of coefficients\n     */\n    private double getInvertedCoefficientSum(final RealVector coefficients)", "entropy": 0.2666015625, "is_bug_line": false, "sus_score": 0.5113018155097961, "per_token_entropy": [0.32373046875, 0.1943359375, 0.031341552734375, 0.02252197265625, 0.06005859375, 0.0019969940185546875, 0.2410888671875, 0.048248291015625, 0.023895263671875, 8.96453857421875e-05, 0.708984375, 0.2017822265625, 1.10546875, 0.023406982421875, 0.162841796875, 0.98681640625, 0.97119140625, 0.56982421875, 1.712890625, 0.54345703125, 1.8544921875, 0.167236328125, 0.002979278564453125, 0.08807373046875, 0.00391387939453125, 0.1866455078125, 0.62548828125, 0.73583984375, 0.0589599609375, 0.08306884765625, 0.0009889602661132812, 0.0005598068237304688, 0.003940582275390625, 0.2490234375, 0.1585693359375, 0.76025390625, 0.126708984375, 0.0116119384765625, 0.005855560302734375, 0.20849609375, 0.08251953125, 0.0011835098266601562, 0.29150390625, 1.6689300537109375e-06, 2.4557113647460938e-05, 8.463859558105469e-06, 0.0005359649658203125, 0.2021484375, 0.0182342529296875, 0.0003833770751953125, 0.0002415180206298828, 0.000759124755859375], "tokens": [291, 442, 13118, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 3632, 432, 322, 26370, 432, 322, 2702, 4026, 32, 275, 319, 477, 753, 26370, 4026, 432, 26370, 275, 319, 477, 601, 3632, 432, 26370, 275, 569, 284, 945, 2064, 622, 383, 17445, 8973, 4934, 26, 3220, 11443, 2863, 26370, 27]}
{"line_number": 347, "line_type": "original", "code": "            columnsToDrop.add(col);", "entropy": 3.00390625, "is_bug_line": false, "sus_score": 0.506749153137207, "per_token_entropy": [6.8046875, 11.125, 1.13671875, 1.3623046875, 0.426025390625, 0.1585693359375, 0.00948333740234375, 5.83984375, 0.1673583984375], "tokens": [1468, 6090, 705, 6243, 32, 669, 26, 748, 293]}
{"line_number": 347, "line_type": "generated", "code": "\n        return new PointValuePair(point, objectiveValue);\n    }\n\n    /**\n     * Get the current solution.\n     *\n     * @return current solution\n     */\n    protected PointValuePair getSolution(final int[] permutation) {", "entropy": 0.5185546875, "is_bug_line": false, "sus_score": 0.506749153137207, "per_token_entropy": [0.81982421875, 0.693359375, 0.88525390625, 0.046051025390625, 0.0017671585083007812, 0.060089111328125, 2.220703125, 0.179443359375, 1.5205078125, 0.42724609375, 0.0638427734375, 0.073486328125, 0.002758026123046875, 0.30810546875, 0.09100341796875, 0.060333251953125, 0.0006160736083984375, 1.2255859375, 0.083984375, 1.244140625, 1.8671875, 0.798828125, 0.04156494140625, 0.004543304443359375, 0.09674072265625, 0.00046706199645996094, 0.004642486572265625, 0.2230224609375, 0.162841796875, 0.04107666015625, 0.0352783203125, 0.066162109375, 0.0281829833984375, 0.60009765625, 0.9912109375, 0.03350830078125, 0.2249755859375, 0.74853515625, 0.3466796875, 0.478759765625, 2.37109375, 0.95556640625, 2.9921875, 0.180419921875, 0.02960205078125], "tokens": [291, 442, 537, 6431, 14782, 26, 1493, 30, 25110, 882, 293, 284, 320, 446, 1022, 275, 319, 1390, 322, 1550, 5295, 32, 275, 319, 275, 319, 477, 601, 1550, 5295, 275, 569, 284, 2522, 6431, 14782, 622, 13628, 26, 3220, 629, 1178, 38151, 27, 301]}
{"line_number": 298, "line_type": "original", "code": "        double sum = 0;", "entropy": 1.8134765625, "is_bug_line": false, "sus_score": 0.5024615526199341, "per_token_entropy": [2.71875, 6.015625, 3.232421875, 0.038970947265625, 0.1727294921875, 0.00260162353515625, 0.51171875], "tokens": [351, 2064, 3632, 280, 225, 34, 45]}
{"line_number": 298, "line_type": "generated", "code": "\n          }\n        }\n\n        // drop the columns\n        for (int column : columnsToDrop) {\n            tableau = tableau.getSubVector(0, column).append(tableau.getSubVector(column + 1, getWidth()));\n        }", "entropy": 0.28857421875, "is_bug_line": false, "sus_score": 0.5024615526199341, "per_token_entropy": [0.6376953125, 0.0036106109619140625, 0.05987548828125, 0.001560211181640625, 0.30126953125, 1.3583984375, 1.4501953125, 0.68798828125, 0.9306640625, 0.38671875, 0.822265625, 0.005588531494140625, 0.2427978515625, 1.9580078125, 0.1876220703125, 0.010223388671875, 9.179115295410156e-06, 8.928775787353516e-05, 0.00189208984375, 0.0027008056640625, 0.2197265625, 0.5791015625, 1.9311904907226562e-05, 0.68798828125, 0.195556640625, 7.510185241699219e-06, 0.0018520355224609375, 0.7998046875, 0.50634765625, 0.039764404296875, 0.161865234375, 0.00033545494079589844, 0.607421875, 0.203369140625, 0.0148162841796875, 0.005084991455078125, 0.153564453125, 1.7881393432617188e-06, 0.008514404296875, 0.00832366943359375, 0.0003237724304199219, 0.00202178955078125, 0.0215911865234375, 0.0252838134765625, 0.0023632049560546875, 0.0007925033569335938, 0.0016002655029296875, 0.3876953125, 0.061065673828125, 0.78759765625, 0.472412109375, 0.0007171630859375], "tokens": [616, 320, 291, 320, 584, 434, 6278, 322, 6090, 291, 436, 308, 410, 2623, 499, 6090, 705, 6243, 27, 301, 324, 1858, 4452, 280, 1858, 4452, 32, 34334, 2863, 26, 34, 30, 2623, 547, 1689, 26, 1274, 4452, 32, 34334, 2863, 26, 2592, 474, 225, 35, 30, 622, 2611, 5073, 291, 320]}
{"line_number": 333, "line_type": "original", "code": "        columnsToDrop.add(0);", "entropy": 2.771484375, "is_bug_line": false, "sus_score": 0.4873667359352112, "per_token_entropy": [3.18359375, 13.421875, 0.1798095703125, 0.050933837890625, 0.04803466796875, 0.038543701171875, 0.006343841552734375, 7.5, 0.501953125], "tokens": [351, 6090, 705, 6243, 32, 669, 26, 34, 293]}
{"line_number": 333, "line_type": "generated", "code": "\n            if (!Precision.equals(tableau.getEntry(0, i), 0d, maxUlps)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns the value of the objective function at the", "entropy": 0.2061767578125, "is_bug_line": false, "sus_score": 0.4873667359352112, "per_token_entropy": [1.2626953125, 0.155029296875, 1.2568359375, 0.650390625, 0.00019240379333496094, 0.007160186767578125, 0.005001068115234375, 0.3203125, 1.5735626220703125e-05, 0.0011453628540039062, 0.0016546249389648438, 0.0002529621124267578, 0.09039306640625, 0.0001659393310546875, 0.005157470703125, 0.0044708251953125, 0.024444580078125, 0.00958251953125, 0.2724609375, 0.03228759765625, 0.061248779296875, 0.00039887428283691406, 1.3113021850585938e-06, 0.0418701171875, 0.0142974853515625, 0.12091064453125, 0.0252685546875, 0.004291534423828125, 9.5367431640625e-05, 0.005603790283203125, 0.00045299530029296875, 0.0550537109375, 0.0002739429473876953, 0.27490234375, 0.05322265625, 0.048797607421875, 0.0005097389221191406, 0.02093505859375, 0.0008935928344726562, 0.2093505859375, 0.07403564453125, 0.0367431640625, 0.0004429817199707031, 0.91552734375, 0.71240234375, 2.091796875, 0.1317138671875, 0.10845947265625, 0.386474609375, 0.13134765625, 0.818359375, 0.273681640625], "tokens": [324, 415, 1429, 20398, 32, 3574, 26, 1274, 4452, 32, 48895, 26, 34, 30, 595, 471, 225, 34, 86, 30, 1769, 28522, 1069, 490, 301, 400, 442, 901, 45, 324, 320, 291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 786, 432, 322, 25110, 667, 821, 322]}
{"line_number": 355, "line_type": "original", "code": "            if (!columnsToDrop.contains(j)) {", "entropy": 2.552734375, "is_bug_line": false, "sus_score": 0.4847034811973572, "per_token_entropy": [6.6640625, 1.580078125, 5.06640625, 5.67578125, 0.1536865234375, 3.232421875, 0.1636962890625, 0.02587890625, 0.01059722900390625, 7.73046875, 0.25537109375, 0.0823974609375], "tokens": [1468, 415, 1429, 6057, 705, 6243, 32, 4752, 26, 92, 490, 301]}
{"line_number": 355, "line_type": "generated", "code": "\n          if (colIndex >= 0) {\n            Integer basicRow = getBasicRow(colIndex);\n            if (basicRow!= null) {\n              coefficients[i] = getEntry(basicRow, getRhsOffset());\n              basicRows.", "entropy": 0.162841796875, "is_bug_line": false, "sus_score": 0.4847034811973572, "per_token_entropy": [0.132568359375, 1.4873046875, 0.06671142578125, 0.06988525390625, 4.982948303222656e-05, 0.98583984375, 0.1439208984375, 0.0042724609375, 0.2431640625, 0.01552581787109375, 0.485107421875, 0.8388671875, 0.403564453125, 0.0266571044921875, 0.00608062744140625, 0.2076416015625, 0.0007357597351074219, 5.0902366638183594e-05, 0.0003399848937988281, 0.002788543701171875, 6.628036499023438e-05, 0.0034637451171875, 0.031707763671875, 0.53369140625, 0.042083740234375, 0.01305389404296875, 0.0029659271240234375, 0.2288818359375, 0.0007600784301757812, 0.115478515625, 0.00188446044921875, 0.1065673828125, 1.50390625, 0.0004856586456298828, 0.01265716552734375, 0.0017604827880859375, 0.00675201416015625, 0.1484375, 0.018707275390625, 0.0006303787231445312, 0.00310516357421875, 2.0384788513183594e-05, 0.0005784034729003906, 0.1380615234375, 0.02410888671875, 1.1920928955078125e-06, 0.00014519691467285156, 0.12384033203125, 0.11651611328125, 0.16845703125, 6.270408630371094e-05, 6.818771362304688e-05], "tokens": [616, 415, 308, 748, 1284, 2377, 225, 34, 27, 301, 324, 4401, 6550, 2352, 280, 622, 7099, 2352, 26, 748, 1284, 293, 324, 415, 308, 6390, 2352, 863, 744, 27, 301, 1090, 26370, 77, 91, 79, 280, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035, 1090, 6550, 7252, 32]}
{"line_number": 224, "line_type": "original", "code": "                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack", "entropy": 1.458984375, "is_bug_line": false, "sus_score": 0.4842516779899597, "per_token_entropy": [8.234375, 10.6640625, 0.15380859375, 0.57275390625, 0.343994140625, 0.00962066650390625, 2.126953125, 0.007171630859375, 0.650390625, 0.55810546875, 0.0002779960632324219, 0.00038623809814453125, 0.011260986328125, 0.057830810546875, 0.027618408203125, 0.0007009506225585938, 0.1539306640625, 3.892578125, 0.019012451171875, 0.0246734619140625, 4.7421875, 0.022613525390625, 1.291015625], "tokens": [2071, 5045, 32, 470, 2711, 26, 643, 30, 622, 31185, 3818, 3457, 346, 474, 28039, 1881, 18326, 225, 35, 293, 225, 434, 28039]}
{"line_number": 224, "line_type": "generated", "code": "    }\n\n    /**\n     * Get the number of slack variables in this tableau.\n     * @return 0 for Phase 1.  1 for Phase 2.\n     */\n    protected final int getNumSlackVariables() {", "entropy": 0.1800537109375, "is_bug_line": false, "sus_score": 0.4842516779899597, "per_token_entropy": [1.369140625, 0.02008056640625, 0.07562255859375, 0.0223236083984375, 0.01419830322265625, 0.0001577138900756836, 0.1553955078125, 0.0648193359375, 1.5908203125, 0.001983642578125, 1.009765625, 0.01456451416015625, 0.38232421875, 0.0400390625, 0.017425537109375, 0.00026535987854003906, 0.03759765625, 0.02734375, 0.00791168212890625, 0.01537322998046875, 0.006237030029296875, 1.2646484375, 0.8291015625, 0.25732421875, 0.0242767333984375, 0.003276824951171875, 0.03466796875, 0.089599609375, 0.410400390625, 0.1356201171875, 0.03375244140625, 0.0035953521728515625, 0.0004851818084716797, 0.0015382766723632812, 0.02667236328125, 0.0164642333984375, 0.001220703125, 0.01029205322265625, 0.11566162109375, 0.101318359375, 0.0004911422729492188, 0.038360595703125, 0.003292083740234375, 0.00021576881408691406, 0.001922607421875, 0.0015192031860351562], "tokens": [264, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 28039, 4886, 328, 458, 1858, 4452, 32, 275, 319, 477, 601, 225, 34, 436, 26159, 225, 35, 32, 261, 35, 436, 26159, 225, 36, 32, 275, 569, 284, 2522, 1158, 629, 44929, 31185, 10165, 346, 301]}
{"line_number": 344, "line_type": "original", "code": "        for (int i = 0; i < getNumArtificialVariables(); i++) {", "entropy": 0.5986328125, "is_bug_line": false, "sus_score": 0.4838219881057739, "per_token_entropy": [3.142578125, 3.7734375, 0.06378173828125, 0.0816650390625, 0.131103515625, 0.00608062744140625, 0.56787109375, 0.04547119140625, 0.026092529296875, 0.001972198486328125, 0.032806396484375, 0.383544921875, 2.9140625, 0.00040149688720703125, 0.0367431640625, 0.0396728515625, 0.0472412109375, 0.007110595703125, 0.07635498046875], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 5271, 31251, 10165, 473, 595, 1987, 301]}
{"line_number": 344, "line_type": "generated", "code": "\n     * @return the current solution\n     * @throws NoFeasibleSolutionException if there is no feasible solution\n     */\n    RealVector getSolution() throws NoFeasibleSolutionException {\n        if (!isOptimal()) {\n            throw new NoFeasible", "entropy": 0.23828125, "is_bug_line": false, "sus_score": 0.4838219881057739, "per_token_entropy": [0.63720703125, 0.0267181396484375, 0.1556396484375, 0.08013916015625, 0.31591796875, 0.69677734375, 0.09124755859375, 0.3583984375, 0.84228515625, 0.1480712890625, 0.107421875, 1.9765625, 0.01052093505859375, 0.0005884170532226562, 0.0173187255859375, 0.0001214742660522461, 0.107177734375, 1.80859375, 0.0679931640625, 0.12420654296875, 0.395751953125, 0.0009002685546875, 0.048553466796875, 0.32568359375, 0.30810546875, 0.0341796875, 1.1298828125, 0.0107879638671875, 0.263427734375, 0.1473388671875, 0.0205078125, 0.599609375, 0.00408172607421875, 3.8623809814453125e-05, 1.0132789611816406e-05, 1.7881393432617188e-06, 7.987022399902344e-06, 0.0151824951171875, 0.25, 0.60107421875, 0.42333984375, 0.0362548828125, 0.0139007568359375, 1.0251998901367188e-05, 0.01262664794921875, 0.0029296875, 0.0911865234375, 0.061309814453125, 0.0185089111328125, 0.0010433197021484375, 1.7523765563964844e-05, 1.1920928955078125e-07], "tokens": [275, 319, 477, 601, 322, 1550, 5295, 275, 319, 477, 5117, 3139, 9008, 38294, 13628, 984, 415, 2017, 438, 1289, 5246, 38294, 5295, 275, 569, 284, 11443, 2863, 622, 13628, 346, 2571, 3139, 9008, 38294, 13628, 984, 301, 291, 415, 1429, 297, 5482, 2977, 1157, 301, 324, 1422, 537, 3139, 9008, 38294]}
{"line_number": 351, "line_type": "original", "code": "        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];", "entropy": 1.337890625, "is_bug_line": false, "sus_score": 0.4833238422870636, "per_token_entropy": [4.6015625, 1.4638671875, 5.96875, 3.416015625, 0.10797119140625, 0.5771484375, 0.0017881393432617188, 0.007167816162109375, 1.1826171875, 0.01041412353515625, 0.3994140625, 0.4521484375, 0.016326904296875, 0.0257568359375, 0.369873046875, 0.278076171875, 0.03619384765625, 11.609375, 0.0618896484375, 0.03753662109375, 0.028778076171875, 0.003917694091796875, 0.12255859375], "tokens": [351, 2064, 11336, 5045, 280, 537, 2064, 77, 22382, 346, 429, 225, 35, 1674, 21422, 346, 429, 6090, 705, 6243, 32, 891, 22086]}
{"line_number": 351, "line_type": "generated", "code": "\n      int positiveVarColumn = columnLabels.indexOf(POSITIVE_VAR_COLUMN_LABEL);\n      Integer positiveVarBasicRow = positiveVarColumn > 0? getBasicRow(positiveVarColumn) : null;\n      double mostPositive = positiveVarBasic", "entropy": 0.10223388671875, "is_bug_line": false, "sus_score": 0.4833238422870636, "per_token_entropy": [0.1656494140625, 2.587890625, 2.150390625, 0.06884765625, 0.02392578125, 0.00632476806640625, 0.035308837890625, 0.00013208389282226562, 0.0002868175506591797, 0.007183074951171875, 0.0017919540405273438, 0.00238037109375, 4.1365623474121094e-05, 0.0012693405151367188, 7.200241088867188e-05, 0.0036029815673828125, 0.00042247772216796875, 0.00024330615997314453, 0.0029144287109375, 0.01239013671875, 0.042938232421875, 0.005329132080078125, 0.0024433135986328125, 0.00927734375, 0.00045990943908691406, 0.0008897781372070312, 0.05438232421875, 4.0411949157714844e-05, 0.0011625289916992188, 0.031494140625, 0.004512786865234375, 0.00128173828125, 0.0036640167236328125, 0.0020694732666015625, 0.00045680999755859375, 3.314018249511719e-05, 8.082389831542969e-05, 0.0017824172973632812, 2.0265579223632812e-06, 1.9788742065429688e-05, 0.0011463165283203125, 0.001007080078125, 0.00128936767578125, 0.00052642822265625, 0.0184478759765625, 0.01534271240234375, 0.010650634765625, 0.00592041015625, 0.00267791748046875, 0.026153564453125, 1.7523765563964844e-05, 0.0016183853149414062], "tokens": [397, 629, 11557, 1881, 2137, 280, 2623, 8718, 32, 7142, 26, 42270, 81, 7416, 81, 16188, 81, 11379, 293, 397, 4401, 11557, 1881, 7099, 2352, 280, 11557, 1881, 2137, 848, 225, 34, 1018, 622, 7099, 2352, 26, 18502, 1881, 2137, 27, 499, 744, 45, 397, 2064, 4630, 17991, 280, 11557, 1881, 7099]}
{"line_number": 526, "line_type": "original", "code": "     * @return number of decision variables", "entropy": 3.234375, "is_bug_line": false, "sus_score": 0.4824408292770386, "per_token_entropy": [5.984375, 6.52734375, 0.83447265625, 1.3408203125, 9.4453125, 0.01263427734375, 1.73046875, 0.005279541015625], "tokens": [262, 319, 477, 601, 1451, 432, 17200, 4886]}
{"line_number": 526, "line_type": "generated", "code": "\n          if (this.tableau.equals(rhs.tableau)) {\n              return true;\n          }\n      }\n\n      return false;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int hashCode() {\n        return 37 * table", "entropy": 0.254638671875, "is_bug_line": false, "sus_score": 0.4824408292770386, "per_token_entropy": [0.744140625, 1.7119140625, 0.27490234375, 2.609375, 0.0157470703125, 1.392578125, 0.0003666877746582031, 0.13818359375, 0.164306640625, 0.0010166168212890625, 0.0096282958984375, 0.004291534423828125, 0.05706787109375, 7.677078247070312e-05, 0.250732421875, 0.06658935546875, 0.233642578125, 0.12744140625, 0.060638427734375, 0.0013723373413085938, 0.0183868408203125, 0.0007982254028320312, 0.25439453125, 0.001468658447265625, 0.2705078125, 0.015869140625, 0.01495361328125, 0.00043463706970214844, 0.193115234375, 0.0011339187622070312, 0.12359619140625, 0.0540771484375, 0.1552734375, 0.0001914501190185547, 0.0037326812744140625, 0.0025177001953125, 0.00934600830078125, 0.01230621337890625, 0.0005850791931152344, 0.0016269683837890625, 0.0031280517578125, 0.0648193359375, 0.0007977485656738281, 0.003940582275390625, 0.0015850067138671875, 0.5068359375, 0.3251953125, 0.99609375, 0.443603515625, 0.88330078125, 0.052032470703125, 0.96533203125], "tokens": [616, 415, 308, 578, 32, 1274, 4452, 32, 3574, 26, 14312, 32, 1274, 4452, 490, 301, 1090, 442, 861, 45, 616, 320, 397, 320, 1687, 442, 901, 45, 284, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 629, 17772, 346, 301, 291, 442, 225, 37, 41, 319, 1858]}
{"line_number": 362, "line_type": "original", "code": "          columnLabels.remove((int) columnsToDrop.get(i));", "entropy": 2.361328125, "is_bug_line": false, "sus_score": 0.4814458191394806, "per_token_entropy": [4.8046875, 10.7265625, 0.08062744140625, 0.1072998046875, 1.4208984375, 7.1171875, 3.291015625, 0.130859375, 7.00390625, 1.9013671875, 0.214111328125, 0.254150390625, 0.357177734375, 0.0238189697265625, 0.239013671875, 0.11053466796875], "tokens": [2033, 2623, 8718, 32, 2546, 1162, 410, 27, 6090, 705, 6243, 32, 371, 26, 91, 876]}
{"line_number": 362, "line_type": "generated", "code": "\n              }\n              coefficients[i] = getEntry(basicRow, getRhsOffset());\n          }\n      }\n      return new PointValuePair(new double[] {mostNegative}, coefficients);\n    }", "entropy": 0.33447265625, "is_bug_line": false, "sus_score": 0.4814458191394806, "per_token_entropy": [0.86767578125, 0.3564453125, 1.126953125, 1.38671875, 0.00020551681518554688, 0.0015583038330078125, 0.00015866756439208984, 0.00437164306640625, 0.442138671875, 0.06414794921875, 0.003025054931640625, 0.258056640625, 0.0008234977722167969, 0.00982666015625, 0.35009765625, 0.044708251953125, 1.5497207641601562e-06, 0.00030231475830078125, 0.42333984375, 0.72265625, 0.025543212890625, 0.67138671875, 0.00797271728515625, 0.99560546875, 0.430419921875, 0.0266571044921875, 0.09552001953125, 0.0009775161743164062, 0.00855255126953125, 0.80908203125, 2.419921875, 0.556640625, 0.07037353515625, 0.6884765625, 0.00013911724090576172, 0.048736572265625, 0.35986328125, 0.007434844970703125, 0.0836181640625, 0.002544403076171875], "tokens": [1090, 320, 1090, 26370, 77, 91, 79, 280, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035, 616, 320, 397, 320, 397, 442, 537, 6431, 14782, 26, 890, 2064, 1178, 301, 7320, 17152, 835, 26370, 293, 284, 320]}
{"line_number": 332, "line_type": "original", "code": "        List<Integer> columnsToDrop = new ArrayList<Integer>();", "entropy": 1.2822265625, "is_bug_line": false, "sus_score": 0.4810344874858856, "per_token_entropy": [3.515625, 8.4140625, 0.033172607421875, 0.509765625, 0.0010919570922851562, 3.333984375, 1.2861328125, 0.1827392578125, 0.00616455078125, 0.05450439453125, 0.0222930908203125, 0.5068359375, 0.0023784637451171875, 0.0836181640625], "tokens": [351, 1682, 46, 3061, 48, 6090, 705, 6243, 280, 537, 5059, 46, 3061, 2923]}
{"line_number": 332, "line_type": "generated", "code": "\n        return optimal;\n    }\n\n    /**\n     * Get the number of iterations needed to solve the problem.\n     * @return the number of iterations needed to solve the problem\n     */\n    int getIterations() {\n        return iterations;\n    }\n\n    /**\n     *", "entropy": 0.329345703125, "is_bug_line": false, "sus_score": 0.4810344874858856, "per_token_entropy": [0.1572265625, 0.6015625, 2.380859375, 0.320556640625, 0.0296173095703125, 0.0005488395690917969, 0.1654052734375, 0.04986572265625, 0.037261962890625, 0.00024890899658203125, 2.06640625, 0.11431884765625, 2.134765625, 0.005580902099609375, 2.14453125, 2.78515625, 0.162109375, 0.26806640625, 0.2318115234375, 0.498046875, 0.1058349609375, 0.048858642578125, 0.0008654594421386719, 0.0987548828125, 0.0016269683837890625, 0.10931396484375, 0.03778076171875, 0.0019273757934570312, 0.0118255615234375, 0.1485595703125, 0.04864501953125, 0.00791168212890625, 0.0134735107421875, 0.016571044921875, 0.51904296875, 0.039276123046875, 0.0059356689453125, 0.4970703125, 0.262451171875, 0.10333251953125, 0.041107177734375, 0.00038170814514160156, 0.39111328125, 0.01053619384765625, 0.1734619140625, 0.0210723876953125, 0.006206512451171875, 0.00015485286712646484, 0.15771484375, 0.05078125, 0.03411865234375, 0.00047516822814941406], "tokens": [291, 442, 24824, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 17576, 5349, 372, 10932, 322, 3708, 32, 275, 319, 477, 601, 322, 1451, 432, 17576, 5349, 372, 10932, 322, 3708, 275, 569, 284, 629, 622, 31219, 346, 301, 291, 442, 17576, 45, 284, 320, 446, 1022, 275, 319]}
{"line_number": 354, "line_type": "original", "code": "          for (int j = 0; j < getWidth(); j++) {", "entropy": 1.02734375, "is_bug_line": false, "sus_score": 0.48065856099128723, "per_token_entropy": [7.15625, 6.515625, 0.0175323486328125, 0.0760498046875, 0.1322021484375, 0.044158935546875, 0.552734375, 0.042205810546875, 0.0139312744140625, 0.007625579833984375, 0.0176544189453125, 1.1015625, 1.4111328125, 0.315673828125, 0.00693511962890625, 0.005603790283203125, 0.05810546875], "tokens": [2033, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 622, 2611, 473, 594, 1987, 301]}
{"line_number": 354, "line_type": "generated", "code": "\n        if (i >= getArtificialVariableOffset()) {\n          int col = i + getArtificialVariableOffset();\n          Integer row = getBasicRow(col);\n          if (row!= null) {\n            basicRows.add(row);\n            coefficients", "entropy": 0.2685546875, "is_bug_line": false, "sus_score": 0.48065856099128723, "per_token_entropy": [0.280029296875, 1.4150390625, 0.2078857421875, 1.23046875, 1.544921875, 0.79638671875, 1.234375, 0.0002218484878540039, 0.0204925537109375, 0.0028209686279296875, 0.315673828125, 0.009246826171875, 0.1202392578125, 1.1357421875, 0.65771484375, 0.032562255859375, 0.1171875, 0.6826171875, 0.12091064453125, 0.1317138671875, 1.5854835510253906e-05, 0.00045871734619140625, 0.0001347064971923828, 0.041961669921875, 0.1485595703125, 0.78125, 0.77734375, 0.007232666015625, 0.1627197265625, 0.00140380859375, 0.00010704994201660156, 0.0002601146697998047, 0.002044677734375, 0.0035877227783203125, 0.030914306640625, 0.238037109375, 0.08367919921875, 0.0279998779296875, 0.1800537109375, 0.0009188652038574219, 0.1776123046875, 0.002079010009765625, 0.041046142578125, 0.8349609375, 3.361701965332031e-05, 8.893013000488281e-05, 0.0009059906005859375, 0.0017642974853515625, 0.00641632080078125, 0.00331878662109375, 0.2337646484375, 0.113525390625], "tokens": [291, 415, 308, 91, 2377, 622, 5271, 31251, 3818, 3457, 1157, 301, 616, 629, 932, 280, 595, 474, 622, 5271, 31251, 3818, 3457, 473, 616, 4401, 2698, 280, 622, 7099, 2352, 26, 748, 293, 616, 415, 308, 643, 863, 744, 27, 301, 324, 6550, 7252, 32, 669, 26, 643, 293, 324, 26370]}
{"line_number": 361, "line_type": "original", "code": "        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {", "entropy": 1.0927734375, "is_bug_line": false, "sus_score": 0.48029953241348267, "per_token_entropy": [4.7109375, 5.6484375, 0.01947021484375, 0.0626220703125, 2.861328125, 0.058441162109375, 9.7890625, 0.80810546875, 0.477783203125, 0.027099609375, 0.0704345703125, 1.3369140625, 0.0360107421875, 0.01036834716796875, 0.003574371337890625, 0.019866943359375, 0.0100860595703125, 0.09735107421875, 0.01499176025390625, 0.006305694580078125, 0.0114593505859375, 0.023468017578125, 0.012847900390625, 0.09423828125], "tokens": [351, 436, 308, 410, 595, 280, 6090, 705, 6243, 32, 891, 346, 429, 225, 35, 45, 595, 2377, 225, 34, 45, 595, 15353, 301]}
{"line_number": 361, "line_type": "generated", "code": "\n            coefficients[i] = getEntry(basicRow, colIndex);\n          } else {\n            coefficients[i] = 0;\n          }\n      }\n\n      double[] objectives = new double[getNumObjectiveFunctions()];\n      for (int i = ", "entropy": 0.2734375, "is_bug_line": false, "sus_score": 0.48029953241348267, "per_token_entropy": [0.6640625, 0.6318359375, 0.001163482666015625, 0.006832122802734375, 0.00040912628173828125, 0.0078887939453125, 0.681640625, 0.11077880859375, 0.005645751953125, 0.79638671875, 0.0021724700927734375, 0.005950927734375, 1.4365234375, 0.00025534629821777344, 0.427734375, 0.60107421875, 0.0018749237060546875, 0.25, 0.10052490234375, 0.170166015625, 0.10723876953125, 0.0002701282501220703, 0.0002636909484863281, 8.797645568847656e-05, 0.0005202293395996094, 0.255859375, 0.0013647079467773438, 0.06085205078125, 0.05206298828125, 0.0009937286376953125, 0.48486328125, 0.0004987716674804688, 0.478271484375, 1.6220703125, 0.595703125, 3.71875, 0.001995086669921875, 0.0166168212890625, 0.1072998046875, 0.0013179779052734375, 0.01032257080078125, 0.3603515625, 0.18896484375, 8.225440979003906e-05, 0.006114959716796875, 0.01580810546875, 0.146728515625, 0.0013570785522460938, 0.001583099365234375, 0.051116943359375, 0.0010709762573242188, 0.024078369140625], "tokens": [324, 26370, 77, 91, 79, 280, 622, 2711, 26, 6390, 2352, 30, 932, 1284, 293, 616, 320, 813, 301, 324, 26370, 77, 91, 79, 280, 225, 34, 45, 616, 320, 397, 320, 1687, 2064, 1178, 1300, 4119, 280, 537, 2064, 77, 15207, 33312, 10905, 22086, 397, 436, 308, 410, 595, 280, 225]}
{"line_number": 352, "line_type": "original", "code": "        for (int i = 1; i < getHeight(); i++) {", "entropy": 0.4765625, "is_bug_line": false, "sus_score": 0.47865378856658936, "per_token_entropy": [4.05859375, 0.5224609375, 0.005126953125, 0.02642822265625, 0.27587890625, 0.004199981689453125, 0.229736328125, 2.5078125, 0.0189361572265625, 0.003620147705078125, 0.0166168212890625, 0.2498779296875, 0.07574462890625, 0.05242919921875, 0.0073394775390625, 0.002712249755859375, 0.040802001953125], "tokens": [351, 436, 308, 410, 595, 280, 225, 35, 45, 595, 333, 622, 3024, 473, 595, 1987, 301]}
{"line_number": 352, "line_type": "generated", "code": "\n        for (int i = 0; i < getHeight(); i++) {\n          if (getBasicRow(i)!= null) {\n            basicRows.add(i);\n          }\n        }\n      }\n\n      double[] solution = new double[", "entropy": 0.1671142578125, "is_bug_line": false, "sus_score": 0.47865378856658936, "per_token_entropy": [0.8623046875, 0.65576171875, 0.004100799560546875, 0.0264434814453125, 0.311279296875, 0.003662109375, 0.2369384765625, 0.07293701171875, 0.0161895751953125, 0.0031871795654296875, 0.01548004150390625, 0.5439453125, 0.38671875, 0.040374755859375, 0.00693511962890625, 0.00237274169921875, 0.00502777099609375, 0.385009765625, 0.55810546875, 0.034576416015625, 0.2333984375, 0.0102081298828125, 0.0019321441650390625, 0.00042700767517089844, 0.1937255859375, 0.2354736328125, 0.07611083984375, 0.0006761550903320312, 0.032135009765625, 0.00997161865234375, 0.035675048828125, 0.0982666015625, 3.254413604736328e-05, 0.00010371208190917969, 0.001819610595703125, 0.00228118896484375, 0.1759033203125, 0.003406524658203125, 0.0245208740234375, 0.00010335445404052734, 0.021453857421875, 0.00026679039001464844, 0.7119140625, 0.0222015380859375, 0.271484375, 0.9365234375, 0.132568359375, 1.0654296875, 0.1923828125, 0.0230712890625, 0.0015087127685546875, 0.0048828125], "tokens": [291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 622, 3024, 473, 595, 1987, 301, 616, 415, 308, 371, 7099, 2352, 26, 91, 27, 863, 744, 27, 301, 324, 6550, 7252, 32, 669, 26, 91, 293, 616, 320, 291, 320, 397, 320, 1687, 2064, 1178, 5295, 280, 537, 2064, 77]}
