{"line_number": 347, "line_type": "original", "code": "            columnsToDrop.add(col);", "entropy": 2.9765625, "is_bug_line": false, "sus_score": 0.5815082788467407, "per_token_entropy": [6.84765625, 10.6328125, 1.19921875, 1.37109375, 0.39404296875, 0.1551513671875, 0.0093536376953125, 6.0078125, 0.1650390625], "tokens": [1468, 6090, 705, 6243, 32, 669, 26, 748, 293]}
{"line_number": 347, "line_type": "generated", "code": "        return new RealPointValuePair(currentSolution.toArray(), getObjectiveValue());\n    }\n\n    /**\n     * Get the current objective value.\n     *\n     * @return current objective value\n     */\n    protected double getObjectiveValue() {\n        double value = ", "entropy": 0.305419921875, "is_bug_line": false, "sus_score": 0.5815082788467407, "per_token_entropy": [2.7578125, 0.6884765625, 0.79931640625, 0.05816650390625, 7.212162017822266e-05, 1.2516975402832031e-05, 0.078857421875, 1.435546875, 0.05908203125, 1.044921875, 0.52099609375, 0.0141754150390625, 1.81640625, 0.471923828125, 0.1590576171875, 0.1259765625, 0.11639404296875, 0.0011548995971679688, 0.2374267578125, 0.05682373046875, 0.0380859375, 7.164478302001953e-05, 0.70751953125, 0.0245208740234375, 1.03515625, 0.60595703125, 0.2132568359375, 0.1048583984375, 0.01715087890625, 0.00249481201171875, 0.1546630859375, 0.00026726722717285156, 0.0015106201171875, 0.0006771087646484375, 0.384033203125, 0.050628662109375, 0.021240234375, 0.037811279296875, 0.022216796875, 0.0099029541015625, 0.217529296875, 0.02032470703125, 0.0038909912109375, 0.0007524490356445312, 0.0001308917999267578, 0.0014438629150390625, 0.003734588623046875, 0.40966796875, 0.44287109375, 0.76708984375, 0.0035400390625, 0.1383056640625], "tokens": [351, 442, 537, 11443, 1943, 14782, 26, 1700, 13628, 32, 14320, 1026, 622, 33312, 882, 1035, 284, 320, 446, 1022, 275, 319, 1390, 322, 1550, 25110, 786, 32, 275, 319, 275, 319, 477, 601, 1550, 25110, 786, 275, 569, 284, 2522, 2064, 622, 33312, 882, 346, 301, 291, 2064, 786, 280, 225]}
{"line_number": 337, "line_type": "original", "code": "            final double entry = tableau.getEntry(0, i);", "entropy": 0.81787109375, "is_bug_line": false, "sus_score": 0.5685623288154602, "per_token_entropy": [3.923828125, 5.015625, 0.1383056640625, 1.4326171875, 0.23291015625, 0.2490234375, 0.0005917549133300781, 0.0148162841796875, 0.001308441162109375, 0.0035686492919921875, 0.373779296875, 0.00030803680419921875, 0.0269927978515625, 0.036285400390625], "tokens": [1468, 1158, 2064, 3414, 280, 1858, 4452, 32, 48895, 26, 34, 30, 595, 293]}
{"line_number": 337, "line_type": "generated", "code": "\n        }\n        return true;\n    }\n\n    /**\n     * Returns whether the problem is at a feasible state.\n     * @return whether the problem is at a feasible state\n     */\n    boolean isFeasible() {\n        for (int i = ", "entropy": 0.18994140625, "is_bug_line": false, "sus_score": 0.5685623288154602, "per_token_entropy": [0.25146484375, 0.047149658203125, 0.220703125, 0.050384521484375, 0.034454345703125, 0.001922607421875, 0.07366943359375, 0.00104522705078125, 0.2060546875, 0.081298828125, 0.030792236328125, 0.00017440319061279297, 0.79150390625, 0.91357421875, 0.1844482421875, 0.177001953125, 0.0849609375, 0.90771484375, 0.7236328125, 0.78076171875, 0.01220703125, 0.02984619140625, 0.03436279296875, 0.021453857421875, 0.0010242462158203125, 0.0282440185546875, 0.0029430389404296875, 0.021453857421875, 0.0259552001953125, 1.546875, 0.048583984375, 0.583984375, 0.02313232421875, 0.0027370452880859375, 0.0007386207580566406, 0.0035610198974609375, 0.36474609375, 0.005382537841796875, 0.01123046875, 0.115966796875, 0.0039825439453125, 0.00714874267578125, 0.0004448890686035156, 0.004673004150390625, 0.001495361328125, 0.086669921875, 0.53857421875, 0.0008807182312011719, 0.01139068603515625, 0.09130859375, 0.0006299018859863281, 0.68408203125], "tokens": [291, 320, 291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 4946, 322, 3708, 438, 821, 312, 5246, 38294, 1603, 32, 275, 319, 477, 601, 4946, 322, 3708, 438, 821, 312, 5246, 38294, 1603, 275, 569, 284, 1905, 438, 9008, 38294, 346, 301, 291, 436, 308, 410, 595, 280, 225]}
{"line_number": 279, "line_type": "original", "code": "     * @param relationship relationship to count", "entropy": 2.818359375, "is_bug_line": false, "sus_score": 0.5680932998657227, "per_token_entropy": [6.65234375, 3.150390625, 1.1396484375, 0.91943359375, 7.53125, 1.4736328125, 0.5419921875, 1.1318359375], "tokens": [262, 319, 477, 753, 12112, 12112, 372, 2385]}
{"line_number": 279, "line_type": "generated", "code": "\n            // No phase 1 objective, nothing to do.\n        } else {\n            // Phase 1 objective, drop it.\n            // Phase 1 objective is the first column of the tableau.\n            setColumn(0, getColumn(0).", "entropy": 0.748046875, "is_bug_line": false, "sus_score": 0.5680932998657227, "per_token_entropy": [0.7373046875, 1.2109375, 3.00390625, 1.1953125, 0.06878662109375, 0.0259552001953125, 0.104248046875, 1.94140625, 1.3408203125, 0.09832763671875, 0.145263671875, 0.90869140625, 1.265625, 0.01212310791015625, 0.05731201171875, 0.1185302734375, 0.315185546875, 0.391845703125, 1.908203125, 0.030792236328125, 0.054473876953125, 0.0640869140625, 1.8017578125, 1.3740234375, 0.5751953125, 0.541015625, 0.30029296875, 2.11328125, 3.6640625, 0.03485107421875, 0.298828125, 0.78857421875, 0.859375, 1.2333984375, 0.625, 1.3447265625, 1.302734375, 0.234130859375, 0.87451171875, 0.05828857421875, 0.41748046875, 0.1829833984375, 2.3984375, 0.74169921875, 0.0655517578125, 0.2783203125, 0.0039520263671875, 1.5439453125, 0.09375, 0.02667236328125, 0.1204833984375, 0.005706787109375], "tokens": [324, 434, 3139, 11225, 225, 35, 25110, 30, 7553, 372, 745, 32, 291, 320, 813, 301, 324, 434, 26159, 225, 35, 25110, 30, 6278, 561, 32, 324, 434, 26159, 225, 35, 25110, 438, 322, 1932, 2623, 432, 322, 1858, 4452, 32, 324, 739, 2137, 26, 34, 30, 622, 2137, 26, 34, 547]}
{"line_number": 344, "line_type": "original", "code": "        for (int i = 0; i < getNumArtificialVariables(); i++) {", "entropy": 0.5986328125, "is_bug_line": false, "sus_score": 0.5673365592956543, "per_token_entropy": [3.142578125, 3.7734375, 0.06378173828125, 0.0816650390625, 0.131103515625, 0.00608062744140625, 0.56787109375, 0.04547119140625, 0.026092529296875, 0.001972198486328125, 0.032806396484375, 0.383544921875, 2.9140625, 0.00040149688720703125, 0.0367431640625, 0.0396728515625, 0.0472412109375, 0.007110595703125, 0.07635498046875], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 5271, 31251, 10165, 473, 595, 1987, 301]}
{"line_number": 344, "line_type": "generated", "code": "\n     * @return the solution\n     */\n    RealVector getSolution() {\n        double[] solution = new double[getNumVariables()];\n        for (int i = 0; i < getNumVariables(); i++) {\n            solution[i] = getEntry(", "entropy": 0.30810546875, "is_bug_line": false, "sus_score": 0.5673365592956543, "per_token_entropy": [0.63720703125, 0.0267181396484375, 0.1556396484375, 0.08013916015625, 0.31591796875, 1.0869140625, 0.53857421875, 0.59619140625, 0.039794921875, 0.962890625, 0.0063018798828125, 0.0755615234375, 0.034027099609375, 0.038665771484375, 0.031402587890625, 0.197265625, 1.703125, 0.0049285888671875, 0.79052734375, 0.04205322265625, 0.025543212890625, 0.0018787384033203125, 0.0023193359375, 1.4912109375, 1.2802734375, 0.023162841796875, 0.138427734375, 0.275634765625, 0.001129150390625, 0.0215606689453125, 0.08831787109375, 0.0012874603271484375, 0.379150390625, 0.0299530029296875, 0.01082611083984375, 0.0019378662109375, 0.0015764236450195312, 0.185546875, 0.5888671875, 0.032440185546875, 0.01006317138671875, 0.0005617141723632812, 0.0007314682006835938, 0.369140625, 0.7666015625, 0.0005793571472167969, 0.005268096923828125, 0.0006475448608398438, 0.000926971435546875, 0.83740234375, 2.068359375, 0.0151824951171875], "tokens": [275, 319, 477, 601, 322, 5295, 275, 569, 284, 11443, 2863, 622, 13628, 346, 301, 291, 2064, 1178, 5295, 280, 537, 2064, 77, 15207, 10165, 22086, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 10165, 473, 595, 1987, 301, 324, 5295, 77, 91, 79, 280, 622, 2711, 26]}
{"line_number": 346, "line_type": "original", "code": "          if (getBasicRow(col) == null) {", "entropy": 1.6611328125, "is_bug_line": false, "sus_score": 0.5643740296363831, "per_token_entropy": [9.140625, 2.69140625, 0.2427978515625, 3.0859375, 1.78515625, 1.30078125, 0.022613525390625, 1.5537109375, 0.051177978515625, 0.6806640625, 0.5283203125, 0.1522216796875, 0.354248046875], "tokens": [2033, 415, 308, 371, 7099, 2352, 26, 748, 27, 610, 744, 27, 301]}
{"line_number": 346, "line_type": "generated", "code": "\n    protected RealVector getSolution() {\n        RealVector solution = new ArrayRealVector(columnLabels.size());\n        for (int i = 0; i < columnLabels.size(); i++) {\n            solution.setEntry(i, getColumn", "entropy": 0.296630859375, "is_bug_line": false, "sus_score": 0.5643740296363831, "per_token_entropy": [0.1697998046875, 2.12109375, 0.7568359375, 0.0126495361328125, 0.37451171875, 0.1168212890625, 0.127197265625, 0.0552978515625, 0.343017578125, 1.8720703125, 0.0029964447021484375, 0.49560546875, 0.0144500732421875, 0.54443359375, 0.002132415771484375, 0.0175323486328125, 1.5616416931152344e-05, 0.0113677978515625, 1.310546875, 0.0082855224609375, 0.037994384765625, 0.05157470703125, 0.67333984375, 0.22802734375, 0.16455078125, 0.00537872314453125, 0.0352783203125, 0.0885009765625, 0.00469970703125, 0.271240234375, 0.0220489501953125, 0.015960693359375, 0.0018663406372070312, 0.0028972625732421875, 1.2900390625, 0.0008754730224609375, 0.00012218952178955078, 0.0005965232849121094, 0.0126495361328125, 0.0299835205078125, 0.001514434814453125, 0.004673004150390625, 0.57373046875, 1.0205078125, 0.00528717041015625, 0.0005688667297363281, 0.0006742477416992188, 0.0018491744995117188, 0.0240325927734375, 0.0012378692626953125, 1.0146484375, 1.490234375], "tokens": [284, 2522, 11443, 2863, 622, 13628, 346, 301, 291, 11443, 2863, 5295, 280, 537, 2629, 6877, 2863, 26, 2592, 8718, 32, 891, 1035, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 2623, 8718, 32, 891, 473, 595, 1987, 301, 324, 5295, 32, 470, 2711, 26, 91, 30, 622, 2137]}
{"line_number": 362, "line_type": "original", "code": "          columnLabels.remove((int) columnsToDrop.get(i));", "entropy": 2.349609375, "is_bug_line": false, "sus_score": 0.5628299713134766, "per_token_entropy": [3.6015625, 10.03125, 0.1795654296875, 0.09942626953125, 2.857421875, 6.9765625, 3.62890625, 0.11114501953125, 6.77734375, 2.109375, 0.1878662109375, 0.236083984375, 0.4306640625, 0.01983642578125, 0.2396240234375, 0.10009765625], "tokens": [2033, 2623, 8718, 32, 2546, 1162, 410, 27, 6090, 705, 6243, 32, 371, 26, 91, 876]}
{"line_number": 362, "line_type": "generated", "code": "\n          coefficients[i] = basicRow == null? 0 : getEntry(basicRow, getRhsOffset());\n          if (basicRow!= null) {\n              basicRows.add(basicRow);\n          }\n      }\n\n      return new RealPoint", "entropy": 0.1932373046875, "is_bug_line": false, "sus_score": 0.5628299713134766, "per_token_entropy": [0.9912109375, 1.47265625, 0.00034499168395996094, 0.00250244140625, 0.0002148151397705078, 0.00812530517578125, 0.92822265625, 0.125244140625, 0.24658203125, 0.0462646484375, 0.11981201171875, 0.40966796875, 0.00914764404296875, 0.11383056640625, 0.12420654296875, 0.0214691162109375, 0.0012388229370117188, 0.01253509521484375, 1.5020370483398438e-05, 0.0007696151733398438, 0.1123046875, 0.0219573974609375, 1.5497207641601562e-06, 0.00018107891082763672, 0.0911865234375, 0.794921875, 0.39990234375, 0.038665771484375, 0.2005615234375, 0.0083770751953125, 0.0714111328125, 0.003269195556640625, 0.0775146484375, 0.01058197021484375, 0.70751953125, 0.0924072265625, 0.000110626220703125, 8.046627044677734e-05, 0.0008120536804199219, 0.0006771087646484375, 0.01537322998046875, 0.00011837482452392578, 0.003406524658203125, 0.04833984375, 0.0004131793975830078, 0.09039306640625, 0.0005431175231933594, 0.4677734375, 1.6806640625, 0.044708251953125, 0.429931640625, 6.937980651855469e-05], "tokens": [616, 26370, 77, 91, 79, 280, 6550, 2352, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035, 616, 415, 308, 6390, 2352, 863, 744, 27, 301, 1090, 6550, 7252, 32, 669, 26, 6390, 2352, 293, 616, 320, 397, 320, 1687, 442, 537, 11443, 1943]}
{"line_number": 351, "line_type": "original", "code": "        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];", "entropy": 1.3623046875, "is_bug_line": false, "sus_score": 0.5620150566101074, "per_token_entropy": [4.63671875, 1.443359375, 6.44140625, 3.560546875, 0.1190185546875, 0.480712890625, 0.00179290771484375, 0.00658416748046875, 1.1708984375, 0.00974273681640625, 0.347412109375, 0.51318359375, 0.0170135498046875, 0.0295257568359375, 0.3994140625, 0.263427734375, 0.033966064453125, 11.6171875, 0.059967041015625, 0.03656005859375, 0.0288848876953125, 0.004150390625, 0.1260986328125], "tokens": [351, 2064, 11336, 5045, 280, 537, 2064, 77, 22382, 346, 429, 225, 35, 1674, 21422, 346, 429, 6090, 705, 6243, 32, 891, 22086]}
{"line_number": 351, "line_type": "generated", "code": "\n      double[] solution = new double[getNumVariables()];\n      for (int i = 0; i < getNumVariables(); i++) {\n        int col = i + getRhsOffset();\n        Integer basicRow = getBasicRow(col);\n        double", "entropy": 0.2607421875, "is_bug_line": false, "sus_score": 0.5620150566101074, "per_token_entropy": [0.167236328125, 1.43359375, 0.07672119140625, 1.0, 0.1102294921875, 0.04083251953125, 0.003040313720703125, 0.006122589111328125, 1.4111328125, 1.4365234375, 0.04730224609375, 0.12469482421875, 0.32177734375, 0.0036907196044921875, 0.0198516845703125, 0.140869140625, 0.0026760101318359375, 0.1365966796875, 0.0919189453125, 0.054290771484375, 0.003665924072265625, 0.005840301513671875, 0.451416015625, 0.449951171875, 0.04119873046875, 0.0214080810546875, 0.002544403076171875, 0.0017004013061523438, 0.1441650390625, 1.3623046875, 0.8837890625, 0.036224365234375, 0.52197265625, 0.1146240234375, 0.2578125, 0.359619140625, 2.2649765014648438e-06, 0.00020706653594970703, 0.039703369140625, 0.033935546875, 0.6025390625, 0.57958984375, 0.005649566650390625, 0.0029163360595703125, 0.05670166015625, 0.0006117820739746094, 7.832050323486328e-05, 0.0001125335693359375, 0.0015201568603515625, 0.001155853271484375, 0.03704833984375, 0.91162109375], "tokens": [397, 2064, 1178, 5295, 280, 537, 2064, 77, 15207, 10165, 22086, 397, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 10165, 473, 595, 1987, 301, 291, 629, 932, 280, 595, 474, 622, 68, 3914, 3457, 473, 291, 4401, 6550, 2352, 280, 622, 7099, 2352, 26, 748, 293, 291, 2064]}
{"line_number": 356, "line_type": "original", "code": "              matrix[i - 1][col++] = tableau.getEntry(i, j);", "entropy": 2.537109375, "is_bug_line": false, "sus_score": 0.5598370432853699, "per_token_entropy": [4.92578125, 9.7578125, 2.71484375, 0.98486328125, 4.6171875, 2.044921875, 0.0174102783203125, 0.358642578125, 1.23828125, 10.046875, 0.01520538330078125, 4.32421875, 0.0006175041198730469, 0.009552001953125, 0.006221771240234375, 0.0048828125, 4.0859375, 0.1832275390625, 5.20703125, 0.196044921875], "tokens": [2850, 5045, 77, 91, 429, 225, 35, 1674, 748, 13419, 280, 1858, 4452, 32, 48895, 26, 91, 30, 594, 293]}
{"line_number": 356, "line_type": "generated", "code": "\n          } else {\n              Integer basicRow = getBasicRow(colIndex);\n              if (basicRow == null) {\n                  coefficients[i] = 0;\n              } else {\n                  coefficients[i] = getEntry(basicRow, getR", "entropy": 0.143310546875, "is_bug_line": false, "sus_score": 0.5598370432853699, "per_token_entropy": [0.47265625, 0.004852294921875, 0.407470703125, 0.0540771484375, 0.83251953125, 0.471923828125, 0.354248046875, 0.029510498046875, 0.006282806396484375, 0.2138671875, 0.0005707740783691406, 1.7881393432617188e-05, 0.0002416372299194336, 0.0026149749755859375, 3.9458274841308594e-05, 0.0017681121826171875, 0.02642822265625, 0.461669921875, 0.03778076171875, 0.0167999267578125, 0.0020771026611328125, 0.6201171875, 0.0033664703369140625, 0.043426513671875, 0.00766754150390625, 0.51123046875, 0.448974609375, 0.0005168914794921875, 0.01261138916015625, 0.0027637481689453125, 0.0006403923034667969, 0.2325439453125, 0.004978179931640625, 0.50830078125, 0.07867431640625, 0.0009250640869140625, 0.006378173828125, 0.28955078125, 0.052276611328125, 0.9775390625, 0.00020170211791992188, 0.0002720355987548828, 6.759166717529297e-05, 0.0014629364013671875, 0.086181640625, 0.0246429443359375, 0.0008177757263183594, 0.0030803680419921875, 1.704692840576172e-05, 0.0006785392761230469, 0.10992431640625, 0.02069091796875], "tokens": [616, 320, 813, 301, 1090, 4401, 6550, 2352, 280, 622, 7099, 2352, 26, 748, 1284, 293, 1090, 415, 308, 6390, 2352, 610, 744, 27, 301, 1750, 26370, 77, 91, 79, 280, 225, 34, 45, 1090, 320, 813, 301, 1750, 26370, 77, 91, 79, 280, 622, 2711, 26, 6390, 2352, 30, 622, 68]}
{"line_number": 525, "line_type": "original", "code": "     * @see #getOriginalNumDecisionVariables()", "entropy": 1.833984375, "is_bug_line": false, "sus_score": 0.5590246915817261, "per_token_entropy": [6.0234375, 4.5546875, 1.552734375, 0.484130859375, 3.126953125, 2.138671875, 2.10546875, 0.11956787109375, 0.0587158203125, 0.000988006591796875, 0.01360321044921875], "tokens": [262, 319, 477, 2970, 588, 371, 11296, 2567, 24453, 10165, 346]}
{"line_number": 525, "line_type": "generated", "code": "\n              (tableau.equals(rhs.tableau));\n      }\n\n      return false;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int hashCode() {\n        return 37 * (37 * (37 * (37", "entropy": 0.26171875, "is_bug_line": false, "sus_score": 0.5590246915817261, "per_token_entropy": [2.0859375, 0.92138671875, 1.681640625, 0.000270843505859375, 0.3056640625, 0.0313720703125, 0.0015649795532226562, 0.0279083251953125, 0.0016984939575195312, 0.032012939453125, 1.9550323486328125e-05, 0.28515625, 0.1552734375, 0.0002906322479248047, 0.38232421875, 0.0179595947265625, 0.011322021484375, 0.00028228759765625, 0.724609375, 0.00128936767578125, 0.0870361328125, 0.03619384765625, 0.1844482421875, 0.00014781951904296875, 0.0034580230712890625, 0.0016126632690429688, 0.0068206787109375, 0.01222991943359375, 0.0006055831909179688, 0.0016355514526367188, 0.00215911865234375, 0.037017822265625, 0.0004229545593261719, 0.0032806396484375, 0.00240325927734375, 0.47412109375, 0.398681640625, 0.73974609375, 0.22412109375, 0.7939453125, 0.037750244140625, 1.220703125, 0.748046875, 0.06256103515625, 0.01611328125, 0.5126953125, 0.432861328125, 0.00943756103515625, 0.013946533203125, 0.343505859375, 0.52099609375, 0.0133209228515625], "tokens": [1090, 308, 1274, 4452, 32, 3574, 26, 14312, 32, 1274, 4452, 876, 397, 320, 1687, 442, 901, 45, 284, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 629, 17772, 346, 301, 291, 442, 225, 37, 41, 319, 308, 37, 41, 319, 308, 37, 41, 319, 308, 37, 41]}
{"line_number": 338, "line_type": "original", "code": "            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {", "entropy": 0.92822265625, "is_bug_line": false, "sus_score": 0.5586380362510681, "per_token_entropy": [6.1171875, 1.732421875, 0.1607666015625, 2.685546875, 0.0015516281127929688, 1.107421875, 0.01497650146484375, 2.40234375, 0.00846099853515625, 0.09161376953125, 0.2186279296875, 0.041839599609375, 0.018524169921875, 4.203125, 0.0298004150390625, 2.6941299438476562e-05, 0.03533935546875, 1.451171875, 0.0023403167724609375, 0.004215240478515625, 0.01678466796875, 0.08038330078125], "tokens": [1468, 415, 308, 20398, 32, 23908, 26, 3038, 30, 225, 34, 86, 30, 1769, 28522, 1069, 27, 848, 225, 34, 27, 301]}
{"line_number": 338, "line_type": "generated", "code": "\n        return true;\n    }\n\n    /**\n     * Returns the objective value of the model.\n     * @return the objective value\n     * @throws MathUserException if the model has not been solved\n     */\n    double getObjectiveValue() {\n        if (!is", "entropy": 0.359130859375, "is_bug_line": false, "sus_score": 0.5586380362510681, "per_token_entropy": [0.2220458984375, 0.341064453125, 0.08489990234375, 0.00356292724609375, 0.1292724609375, 0.0017385482788085938, 0.2464599609375, 0.077880859375, 0.0301361083984375, 0.00014889240264892578, 0.80615234375, 0.71337890625, 2.525390625, 0.468017578125, 1.2490234375, 0.205078125, 2.765625, 0.2423095703125, 0.11846923828125, 0.0013742446899414062, 0.0711669921875, 0.01049041748046875, 0.0303802490234375, 0.138671875, 0.0299224853515625, 1.361328125, 0.826171875, 0.01605224609375, 0.2493896484375, 1.24609375, 0.482177734375, 0.0887451171875, 0.07391357421875, 0.247314453125, 0.333740234375, 0.77099609375, 0.04364013671875, 0.050140380859375, 0.031097412109375, 0.3515625, 0.10028076171875, 0.00513458251953125, 0.4765625, 0.0283355712890625, 0.03302001953125, 0.02508544921875, 0.0012884140014648438, 0.375244140625, 0.0914306640625, 0.375, 0.423583984375, 0.04541015625], "tokens": [291, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 25110, 786, 432, 322, 1542, 32, 275, 319, 477, 601, 322, 25110, 786, 275, 319, 477, 5117, 4175, 1240, 984, 415, 322, 1542, 1401, 646, 2583, 19479, 275, 569, 284, 2064, 622, 33312, 882, 346, 301, 291, 415, 1429, 297]}
{"line_number": 365, "line_type": "original", "code": "        this.tableau = new Array2DRowRealMatrix(matrix);", "entropy": 1.2099609375, "is_bug_line": false, "sus_score": 0.5582321882247925, "per_token_entropy": [5.13671875, 5.30859375, 0.042144775390625, 2.05859375, 0.0025196075439453125, 2.880859375, 1.369140625, 1.052734375, 0.00455474853515625, 0.00034046173095703125, 0.0001386404037475586, 0.0014781951904296875, 0.00019621849060058594, 0.029632568359375, 0.923828125, 0.55078125], "tokens": [351, 458, 32, 1274, 4452, 280, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 4873, 293]}
{"line_number": 365, "line_type": "generated", "code": "\n            coefficients[i] = 0;\n            continue;\n          }\n          basicRows.add(basicRow);\n          coefficients[i] = getEntry(basicRow, getRhsOffset());\n      }\n\n      double[] functionValues = new double[getNum", "entropy": 0.2880859375, "is_bug_line": false, "sus_score": 0.5582321882247925, "per_token_entropy": [2.158203125, 0.295166015625, 0.0010890960693359375, 0.003917694091796875, 0.0006356239318847656, 0.0012826919555664062, 0.05303955078125, 0.002834320068359375, 0.10247802734375, 0.95947265625, 0.0789794921875, 0.0019855499267578125, 0.07562255859375, 0.002346038818359375, 0.251953125, 1.095703125, 0.0001685619354248047, 0.0001176595687866211, 0.000743865966796875, 0.00045490264892578125, 0.01861572265625, 1.0371208190917969e-05, 0.00368499755859375, 0.2252197265625, 0.546875, 0.00012993812561035156, 0.000614166259765625, 0.0002377033233642578, 0.0016164779663085938, 0.27783203125, 0.055633544921875, 0.00579071044921875, 0.01444244384765625, 0.0007510185241699219, 0.00354766845703125, 0.425537109375, 0.050018310546875, 1.430511474609375e-06, 0.0002970695495605469, 0.76123046875, 0.4951171875, 0.0008406639099121094, 0.623046875, 1.7109375, 0.4208984375, 3.466796875, 0.300537109375, 0.019500732421875, 0.221435546875, 0.0019464492797851562, 0.036468505859375, 0.1990966796875], "tokens": [324, 26370, 77, 91, 79, 280, 225, 34, 45, 324, 4036, 45, 616, 320, 616, 6550, 7252, 32, 669, 26, 6390, 2352, 293, 616, 26370, 77, 91, 79, 280, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035, 397, 320, 1687, 2064, 1178, 667, 3354, 280, 537, 2064, 77, 15207]}
{"line_number": 352, "line_type": "original", "code": "        for (int i = 1; i < getHeight(); i++) {", "entropy": 0.490234375, "is_bug_line": false, "sus_score": 0.5577639937400818, "per_token_entropy": [4.23046875, 0.54150390625, 0.0051422119140625, 0.026611328125, 0.279541015625, 0.004230499267578125, 0.2318115234375, 2.537109375, 0.0192108154296875, 0.003787994384765625, 0.016265869140625, 0.259765625, 0.07769775390625, 0.054046630859375, 0.007232666015625, 0.0027942657470703125, 0.034912109375], "tokens": [351, 436, 308, 410, 595, 280, 225, 35, 45, 595, 333, 622, 3024, 473, 595, 1987, 301]}
{"line_number": 352, "line_type": "generated", "code": "\n      for (int i = 0; i < getHeight(); i++) {\n        if (getBasicRow(i)!= null) {\n          basicRows.add(i);\n        }\n      }\n\n      double[] solution = new double[getNumVariables", "entropy": 0.20263671875, "is_bug_line": false, "sus_score": 0.5577639937400818, "per_token_entropy": [0.91015625, 0.5546875, 0.00450897216796875, 0.025634765625, 0.32177734375, 0.0044403076171875, 0.251220703125, 0.0718994140625, 0.01800537109375, 0.0032596588134765625, 0.016754150390625, 0.56201171875, 0.395751953125, 0.039764404296875, 0.00699615478515625, 0.002666473388671875, 0.005039215087890625, 0.09979248046875, 0.5068359375, 0.037353515625, 0.313720703125, 0.01255035400390625, 0.002414703369140625, 0.0004475116729736328, 0.2337646484375, 0.2353515625, 0.080078125, 0.0007290840148925781, 0.034423828125, 0.0103912353515625, 0.047821044921875, 0.123046875, 3.24249267578125e-05, 0.00010895729064941406, 0.002025604248046875, 0.002178192138671875, 0.1473388671875, 0.0032825469970703125, 0.0570068359375, 0.0024623870849609375, 0.0203399658203125, 0.0003120899200439453, 0.87841796875, 0.99755859375, 0.1876220703125, 1.1279296875, 0.15869140625, 0.0279541015625, 0.00197601318359375, 0.005779266357421875, 0.89794921875, 1.0830078125], "tokens": [397, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 622, 3024, 473, 595, 1987, 301, 291, 415, 308, 371, 7099, 2352, 26, 91, 27, 863, 744, 27, 301, 616, 6550, 7252, 32, 669, 26, 91, 293, 291, 320, 397, 320, 1687, 2064, 1178, 5295, 280, 537, 2064, 77, 15207, 10165]}
{"line_number": 354, "line_type": "original", "code": "          for (int j = 0; j < getWidth(); j++) {", "entropy": 1.0322265625, "is_bug_line": false, "sus_score": 0.5577325820922852, "per_token_entropy": [7.3359375, 6.421875, 0.0172119140625, 0.072265625, 0.129150390625, 0.044036865234375, 0.5693359375, 0.045501708984375, 0.01384735107421875, 0.007602691650390625, 0.01629638671875, 1.1025390625, 1.3876953125, 0.315673828125, 0.006961822509765625, 0.005645751953125, 0.055389404296875], "tokens": [2033, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 622, 2611, 473, 594, 1987, 301]}
{"line_number": 354, "line_type": "generated", "code": "\n        int col = i + getRhsOffset();\n        Integer row = getBasicRow(col);\n        coefficients[i] = row == null? 0 : getEntry(row, col);\n        if (row!= null) {\n          basicRows", "entropy": 0.211181640625, "is_bug_line": false, "sus_score": 0.5577325820922852, "per_token_entropy": [0.29541015625, 1.4970703125, 0.79833984375, 0.038421630859375, 0.72021484375, 0.06072998046875, 0.2305908203125, 0.87939453125, 2.7418136596679688e-06, 0.0002046823501586914, 0.057830810546875, 0.0521240234375, 0.67822265625, 0.86962890625, 0.0091552734375, 0.28369140625, 0.0026950836181640625, 0.00019299983978271484, 0.0002999305725097656, 0.0023937225341796875, 0.0019741058349609375, 0.03985595703125, 1.740234375, 0.0004076957702636719, 0.01468658447265625, 0.000579833984375, 0.003520965576171875, 0.49609375, 0.1492919921875, 0.0046234130859375, 0.03466796875, 0.2427978515625, 0.0033168792724609375, 0.1597900390625, 0.1126708984375, 0.015869140625, 0.0006737709045410156, 0.0017185211181640625, 0.00024259090423583984, 0.067626953125, 0.02655029296875, 0.53515625, 0.23291015625, 0.044677734375, 0.32275390625, 0.037811279296875, 0.001110076904296875, 0.07470703125, 0.0110626220703125, 0.0760498046875, 0.054779052734375, 1.3709068298339844e-05], "tokens": [291, 629, 932, 280, 595, 474, 622, 68, 3914, 3457, 473, 291, 4401, 2698, 280, 622, 7099, 2352, 26, 748, 293, 291, 26370, 77, 91, 79, 280, 2698, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 643, 30, 932, 293, 291, 415, 308, 643, 863, 744, 27, 301, 616, 6550, 7252]}
{"line_number": 355, "line_type": "original", "code": "            if (!columnsToDrop.contains(j)) {", "entropy": 2.533203125, "is_bug_line": false, "sus_score": 0.5576480627059937, "per_token_entropy": [6.61328125, 1.5341796875, 5.0078125, 5.6953125, 0.1510009765625, 3.05859375, 0.1572265625, 0.0245208740234375, 0.01093292236328125, 7.80078125, 0.260986328125, 0.085693359375], "tokens": [1468, 415, 1429, 6057, 705, 6243, 32, 4752, 26, 92, 490, 301]}
{"line_number": 355, "line_type": "generated", "code": "\n          Integer basicRow = colIndex > 0? getBasicRow(colIndex) : null;\n          double value = basicRow == null? 0 : getEntry(basicRow, getRhsOffset());\n          coefficients[i] = value;", "entropy": 0.13525390625, "is_bug_line": false, "sus_score": 0.5576480627059937, "per_token_entropy": [0.136962890625, 1.427734375, 0.397705078125, 0.04766845703125, 0.01033782958984375, 0.49560546875, 7.331371307373047e-05, 0.483642578125, 0.01690673828125, 0.0020961761474609375, 0.0288543701171875, 0.00954437255859375, 0.00046253204345703125, 9.298324584960938e-06, 0.0003333091735839844, 0.00417327880859375, 3.6954879760742188e-06, 0.002532958984375, 0.0013132095336914062, 0.0157928466796875, 0.004817962646484375, 0.052154541015625, 1.39453125, 0.86572265625, 0.10955810546875, 0.277099609375, 0.0008435249328613281, 0.049224853515625, 0.001300811767578125, 0.03326416015625, 0.10357666015625, 0.0011463165283203125, 0.06671142578125, 0.039215087890625, 0.006671905517578125, 0.0005021095275878906, 0.0039520263671875, 8.344650268554688e-07, 0.0003063678741455078, 0.047332763671875, 0.01123809814453125, 9.5367431640625e-07, 8.177757263183594e-05, 0.0394287109375, 0.130126953125, 0.55517578125, 0.00030803680419921875, 0.01065826416015625, 0.0010766983032226562, 0.00267791748046875, 0.08258056640625, 0.0621337890625], "tokens": [616, 4401, 6550, 2352, 280, 932, 1284, 848, 225, 34, 1018, 622, 7099, 2352, 26, 748, 1284, 27, 499, 744, 45, 616, 2064, 786, 280, 6550, 2352, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035, 616, 26370, 77, 91, 79, 280, 786, 45]}
{"line_number": 419, "line_type": "original", "code": "              coefficients[i] =", "entropy": 3.263671875, "is_bug_line": false, "sus_score": 0.546265721321106, "per_token_entropy": [8.625, 8.7109375, 1.6904296875, 0.1915283203125, 0.07598876953125, 0.279052734375], "tokens": [2850, 26370, 77, 91, 79, 280]}
{"line_number": 419, "line_type": "generated", "code": "\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the number of original decision variables.\n     * @return number of original decision variables\n     */\n    protected final int getOriginalNumDecisionVariables", "entropy": 0.160888671875, "is_bug_line": false, "sus_score": 0.546265721321106, "per_token_entropy": [0.63037109375, 0.036041259765625, 0.022216796875, 0.06304931640625, 0.08734130859375, 0.000591278076171875, 0.005718231201171875, 0.0021076202392578125, 0.001018524169921875, 0.001018524169921875, 0.0780029296875, 0.0095672607421875, 0.0260772705078125, 6.4373016357421875e-06, 0.0001800060272216797, 0.0013380050659179688, 1.6689300537109375e-05, 0.0263519287109375, 0.2320556640625, 0.0001697540283203125, 0.1697998046875, 0.02825927734375, 0.021087646484375, 2.288818359375e-05, 0.60595703125, 0.43798828125, 1.2685546875, 0.0026702880859375, 2.31640625, 0.28466796875, 0.0033359527587890625, 0.319580078125, 0.19775390625, 0.0006566047668457031, 0.175048828125, 0.0003604888916015625, 0.2034912109375, 0.001651763916015625, 0.116455078125, 0.01357269287109375, 0.001659393310546875, 0.445068359375, 0.0166168212890625, 0.008087158203125, 0.16943359375, 0.2449951171875, 0.0010929107666015625, 0.0841064453125, 0.005680084228515625, 0.0006456375122070312, 0.002475738525390625, 0.00045680999755859375], "tokens": [275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 4707, 17200, 4886, 32, 275, 319, 477, 601, 1451, 432, 4707, 17200, 4886, 275, 569, 284, 2522, 1158, 629, 622, 11296, 2567, 24453, 10165]}
{"line_number": 403, "line_type": "original", "code": "      for (int i = 0; i < coefficients.length; i++) {", "entropy": 1.2646484375, "is_bug_line": false, "sus_score": 0.5445989370346069, "per_token_entropy": [3.884765625, 9.6953125, 0.0088043212890625, 0.0034580230712890625, 2.0703125, 0.00525665283203125, 0.28466796875, 0.0093536376953125, 0.0074310302734375, 0.0015544891357421875, 0.003574371337890625, 6.48046875, 0.13232421875, 0.0203399658203125, 0.041778564453125, 0.026092529296875, 0.0080718994140625, 0.07586669921875], "tokens": [647, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 26370, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 403, "line_type": "generated", "code": "\n            final double multiple) {\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - multiple *", "entropy": 0.089599609375, "is_bug_line": false, "sus_score": 0.5445989370346069, "per_token_entropy": [2.01953125, 0.1212158203125, 0.01186370849609375, 0.00394439697265625, 0.018707275390625, 0.030120849609375, 0.28515625, 0.13525390625, 0.001163482666015625, 0.0006008148193359375, 0.036285400390625, 0.00033926963806152344, 0.01806640625, 0.00040435791015625, 0.0011014938354492188, 0.00021398067474365234, 0.0009813308715820312, 0.04302978515625, 0.00942230224609375, 0.0023345947265625, 0.0019388198852539062, 0.0008425712585449219, 0.003070831298828125, 0.107666015625, 0.11932373046875, 1.1920928955078125e-07, 0.00037026405334472656, 0.038787841796875, 4.1484832763671875e-05, 0.0012903213500976562, 0.06982421875, 7.62939453125e-06, 2.7418136596679688e-06, 2.384185791015625e-07, 0.0005044937133789062, 0.00492095947265625, 0.00024259090423583984, 0.57373046875, 1.1920928955078125e-07, 0.00027060508728027344, 0.00383758544921875, 0.0003848075866699219, 0.0164642333984375, 1.1920928955078125e-06, 1.823902130126953e-05, 7.867813110351562e-06, 0.0002524852752685547, 0.006694793701171875, 0.0006566047668457031, 0.26953125, 0.62841796875, 0.071533203125], "tokens": [324, 1158, 2064, 4609, 27, 301, 291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 622, 2611, 473, 594, 1987, 301, 324, 1858, 4452, 32, 470, 2711, 26, 887, 103, 416, 2352, 30, 594, 30, 1858, 4452, 32, 48895, 26, 887, 103, 416, 2352, 30, 594, 27, 429, 4609, 319]}
{"line_number": 413, "line_type": "original", "code": "          if (basicRows.contains(basicRow)) {", "entropy": 2.13671875, "is_bug_line": true, "sus_score": 0.5442642569541931, "per_token_entropy": [6.171875, 3.498046875, 0.0760498046875, 5.87890625, 0.904296875, 1.974609375, 2.259765625, 0.10003662109375, 4.3203125, 0.1741943359375, 0.12286376953125, 0.15771484375], "tokens": [2033, 415, 308, 6390, 7252, 32, 4752, 26, 6390, 2352, 490, 301]}
{"line_number": 413, "line_type": "generated", "code": "\n        return tableau.getColumnDimension();\n    }\n\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {", "entropy": 0.07464599609375, "is_bug_line": true, "sus_score": 0.5442642569541931, "per_token_entropy": [0.3876953125, 0.09747314453125, 0.62744140625, 2.2172927856445312e-05, 0.0077056884765625, 0.10369873046875, 0.00307464599609375, 0.488037109375, 0.1873779296875, 0.0008687973022460938, 0.06451416015625, 0.01236724853515625, 0.00873565673828125, 1.4901161193847656e-05, 0.1954345703125, 0.0235748291015625, 0.64453125, 0.0034637451171875, 0.00151824951171875, 0.00397491455078125, 0.0003542900085449219, 0.019989013671875, 0.002033233642578125, 4.38690185546875e-05, 0.019927978515625, 0.000286102294921875, 0.06317138671875, 0.0021572113037109375, 0.0027065277099609375, 0.0031986236572265625, 0.0001633167266845703, 0.0042572021484375, 0.0009198188781738281, 0.007049560546875, 0.02294921875, 0.0455322265625, 0.00031828880310058594, 0.0028591156005859375, 0.00060272216796875, 0.00048041343688964844, 0.0003190040588378906], "tokens": [291, 442, 1858, 4452, 32, 19239, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301]}
{"line_number": 409, "line_type": "original", "code": "          Integer basicRow = getBasicRow(colIndex);", "entropy": 1.7734375, "is_bug_line": true, "sus_score": 0.5434301495552063, "per_token_entropy": [6.625, 9.421875, 1.6806640625, 0.0760498046875, 0.09906005859375, 0.239013671875, 0.01192474365234375, 0.0005168914794921875, 0.00780487060546875, 2.78125, 0.333251953125, 0.00942230224609375], "tokens": [2033, 4401, 6550, 2352, 280, 622, 7099, 2352, 26, 748, 1284, 293]}
{"line_number": 409, "line_type": "generated", "code": "\n     * @param basicColumn column index\n     * @return basic row index\n     */\n    protected Integer getBasicRow(final int basicColumn) {\n        if (tableau.getColumnVector(basicColumn).getMaxValue() < 0) {\n            return", "entropy": 0.404541015625, "is_bug_line": true, "sus_score": 0.5434301495552063, "per_token_entropy": [1.150390625, 0.10308837890625, 2.05859375, 0.30224609375, 1.4775390625, 1.2841796875, 1.2802734375, 0.1485595703125, 0.3251953125, 0.10821533203125, 0.007183074951171875, 0.70458984375, 1.2255859375, 0.388671875, 0.3603515625, 0.791015625, 0.10211181640625, 0.034393310546875, 0.57080078125, 0.7666015625, 0.0010614395141601562, 0.0005135536193847656, 0.00021350383758544922, 0.0007581710815429688, 0.1207275390625, 0.0181884765625, 0.00106048583984375, 0.0001049041748046875, 0.0010232925415039062, 0.0033931732177734375, 0.14990234375, 2.810546875, 0.08831787109375, 1.630859375, 7.748603820800781e-06, 0.009796142578125, 0.40185546875, 0.1553955078125, 0.0002288818359375, 0.01461029052734375, 5.125999450683594e-06, 0.00894927978515625, 0.78173828125, 0.07794189453125, 0.06634521484375, 0.7783203125, 0.308837890625, 0.001201629638671875, 0.124267578125, 0.00464630126953125, 0.06494140625, 0.2181396484375], "tokens": [275, 319, 477, 753, 6550, 2137, 2623, 1650, 275, 319, 477, 601, 6550, 2698, 1650, 275, 569, 284, 2522, 4401, 622, 7099, 2352, 26, 3220, 629, 6550, 2137, 27, 301, 291, 415, 308, 1274, 4452, 32, 19239, 2863, 26, 6390, 2137, 547, 23769, 882, 346, 333, 225, 34, 27, 301, 324, 442]}
{"line_number": 404, "line_type": "original", "code": "          int colIndex = columnLabels.indexOf(\"x\" + i);", "entropy": 2.025390625, "is_bug_line": false, "sus_score": 0.5434100031852722, "per_token_entropy": [6.1640625, 3.73046875, 2.533203125, 2.076171875, 0.2420654296875, 5.09375, 0.06292724609375, 0.006229400634765625, 0.1551513671875, 4.75390625, 1.55078125, 0.83935546875, 0.00513458251953125, 3.068359375, 0.10052490234375], "tokens": [2033, 629, 932, 1284, 280, 2623, 8718, 32, 7142, 440, 106, 20, 474, 595, 293]}
{"line_number": 404, "line_type": "generated", "code": "\n        for (int j = 0; j < getWidth(); j++) {\n            tableau.setEntry(minuendRow, j,\n                             tableau.getEntry(minuendRow, j) -\n                             multiple * tableau.getEntry", "entropy": 0.0755615234375, "is_bug_line": false, "sus_score": 0.5434100031852722, "per_token_entropy": [0.28271484375, 0.218017578125, 0.00183868408203125, 0.000965118408203125, 0.07781982421875, 0.0006470680236816406, 0.02276611328125, 0.00043511390686035156, 0.0016632080078125, 0.00018990039825439453, 0.0012378692626953125, 0.05780029296875, 0.0075531005859375, 0.0019254684448242188, 0.002689361572265625, 0.00099945068359375, 0.002532958984375, 0.269775390625, 0.1761474609375, 1.1920928955078125e-07, 0.0007410049438476562, 0.036285400390625, 2.586841583251953e-05, 0.0009355545043945312, 0.1005859375, 1.0967254638671875e-05, 9.5367431640625e-07, 1.3113021850585938e-06, 0.0005283355712890625, 0.0032501220703125, 0.00019097328186035156, 1.8330078125, 0.034149169921875, 8.344650268554688e-07, 0.00020682811737060547, 2.09808349609375e-05, 0.00016117095947265625, 0.00390625, 6.198883056640625e-06, 1.2755393981933594e-05, 4.5299530029296875e-06, 0.00015223026275634766, 0.0019283294677734375, 0.0002765655517578125, 0.10107421875, 0.5732421875, 0.08447265625, 0.0053253173828125, 0.0194854736328125, 2.0265579223632812e-06, 8.165836334228516e-05, 1.4424324035644531e-05], "tokens": [291, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 622, 2611, 473, 594, 1987, 301, 324, 1858, 4452, 32, 470, 2711, 26, 887, 103, 416, 2352, 30, 594, 30, 6035, 1858, 4452, 32, 48895, 26, 887, 103, 416, 2352, 30, 594, 27, 429, 6035, 4609, 319, 1858, 4452, 32, 48895]}
{"line_number": 312, "line_type": "original", "code": "        for (int i = 0; i < getHeight(); i++) {", "entropy": 0.77880859375, "is_bug_line": false, "sus_score": 0.5353737473487854, "per_token_entropy": [5.578125, 2.767578125, 0.01372528076171875, 0.095458984375, 2.373046875, 0.0526123046875, 0.3779296875, 0.1590576171875, 0.0274658203125, 0.0022125244140625, 0.01495361328125, 1.1640625, 0.326416015625, 0.2347412109375, 0.018035888671875, 0.01035308837890625, 0.024383544921875], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 622, 3024, 473, 595, 1987, 301]}
{"line_number": 312, "line_type": "generated", "code": "\n            for (int j = 0; j < getHeight(); j++) {\n                tableau.setEntry(j, columnsToDrop.get(i), matrix[j][i]);\n            }\n        }\n    }\n\n    /**\n     * Adds the", "entropy": 0.21630859375, "is_bug_line": false, "sus_score": 0.5353737473487854, "per_token_entropy": [0.289794921875, 2.61328125, 0.00511932373046875, 0.032745361328125, 0.048797607421875, 0.0015506744384765625, 0.37939453125, 0.11651611328125, 0.0025806427001953125, 0.00135040283203125, 0.0050811767578125, 0.8212890625, 0.032470703125, 0.2398681640625, 0.00789642333984375, 0.0023937225341796875, 0.0043792724609375, 0.234130859375, 0.496337890625, 0.0001380443572998047, 0.004001617431640625, 0.00390625, 0.0004856586456298828, 0.0015726089477539062, 0.025115966796875, 0.0175323486328125, 0.037811279296875, 5.042552947998047e-05, 9.655952453613281e-06, 0.0008869171142578125, 0.005954742431640625, 3.731250762939453e-05, 0.0018491744995117188, 0.020599365234375, 0.173095703125, 0.0003941059112548828, 0.0084991455078125, 0.0012140274047851562, 0.0003669261932373047, 0.005664825439453125, 0.019256591796875, 0.0007376670837402344, 0.42822265625, 0.00624847412109375, 0.81689453125, 0.002536773681640625, 0.172607421875, 0.0401611328125, 0.044525146484375, 2.968311309814453e-05, 3.38671875, 0.68994140625], "tokens": [324, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 622, 3024, 473, 594, 1987, 301, 400, 1858, 4452, 32, 470, 2711, 26, 92, 30, 6090, 705, 6243, 32, 371, 26, 91, 471, 5045, 77, 92, 1674, 91, 1989, 324, 320, 291, 320, 284, 320, 446, 1022, 275, 319, 15450, 322]}
{"line_number": 405, "line_type": "original", "code": "          if (colIndex < 0) {", "entropy": 2.267578125, "is_bug_line": false, "sus_score": 0.535151481628418, "per_token_entropy": [3.7109375, 9.6640625, 0.1602783203125, 4.58984375, 1.236328125, 1.544921875, 1.4169921875, 0.0198516845703125, 0.245361328125, 0.0789794921875], "tokens": [2033, 415, 308, 748, 1284, 333, 225, 34, 27, 301]}
{"line_number": 405, "line_type": "generated", "code": "\n           .subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));\n    }\n\n    /**\n     * Multiplies a row with a multiple of another row.\n     * <p>\n     * After application of this operation, the", "entropy": 0.2161865234375, "is_bug_line": false, "sus_score": 0.535151481628418, "per_token_entropy": [1.4599609375, 0.0843505859375, 0.2587890625, 0.0181427001953125, 0.8095703125, 3.075599670410156e-05, 0.004856109619140625, 0.003086090087890625, 0.0007266998291015625, 0.001796722412109375, 0.041015625, 6.4373016357421875e-06, 1.1920928955078125e-07, 2.6226043701171875e-06, 5.7220458984375e-06, 0.184326171875, 0.100830078125, 0.077880859375, 0.035919189453125, 0.01058197021484375, 0.223388671875, 0.28515625, 0.0009918212890625, 0.115966796875, 0.02911376953125, 0.0222625732421875, 0.0001232624053955078, 3.7421875, 0.0230560302734375, 0.2261962890625, 0.039764404296875, 0.275634765625, 0.01540374755859375, 1.3974609375, 0.1904296875, 1.080078125, 0.1619873046875, 0.10626220703125, 0.0177154541015625, 0.00014984607696533203, 0.111572265625, 0.005092620849609375, 0.0007753372192382812, 0.0025882720947265625, 8.738040924072266e-05, 0.03314208984375, 0.029083251953125, 0.0006647109985351562, 0.0020046234130859375, 0.003063201904296875, 0.00841522216796875, 0.0011425018310546875], "tokens": [324, 638, 25330, 26, 1274, 4452, 32, 30093, 2863, 26, 1113, 359, 2371, 416, 2352, 547, 1110, 27732, 26, 12565, 4236, 284, 320, 446, 1022, 275, 319, 27987, 6827, 312, 2698, 623, 312, 4609, 432, 4674, 2698, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322]}
