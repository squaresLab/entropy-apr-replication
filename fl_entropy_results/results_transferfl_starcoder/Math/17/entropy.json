{"line_number": 1525, "line_type": "original", "code": "                result = newInstance(x);", "entropy": 2.841796875, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [7.75, 0.8037109375, 3.943359375, 3.12109375, 0.8583984375, 0.007129669189453125, 6.078125, 0.1778564453125], "tokens": [2071, 1056, 280, 537, 1810, 26, 106, 293]}
{"line_number": 1525, "line_type": "generated", "code": "\n        result.exp = exp + x.exp + md - mant.length;\n\n        // check for overflow\n        if (result.exp > MAX_EXP) {\n            result.field.setIEEEFlagsBits(DfpField.FLAG_OVER", "entropy": 0.2998046875, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.34326171875, 0.463623046875, 0.032379150390625, 0.1240234375, 0.11065673828125, 0.468994140625, 0.05804443359375, 0.00939178466796875, 6.330013275146484e-05, 0.0002753734588623047, 0.73876953125, 0.294189453125, 0.271484375, 0.40966796875, 0.00024700164794921875, 0.0004639625549316406, 5.245208740234375e-05, 0.56884765625, 0.395263671875, 0.53271484375, 3.8125, 0.1427001953125, 1.201171875, 0.56591796875, 0.86328125, 0.07110595703125, 0.4482421875, 0.0021648406982421875, 0.12371826171875, 0.08551025390625, 0.1932373046875, 0.0008625984191894531, 0.01030731201171875, 0.1278076171875, 0.006069183349609375, 0.04864501953125, 1.46875, 0.20751953125, 1.380859375, 0.00039267539978027344, 0.003387451171875, 0.0026760101318359375, 2.205371856689453e-05, 0.00018131732940673828, 0.00022327899932861328, 0.005771636962890625, 9.5367431640625e-07, 3.552436828613281e-05, 3.6716461181640625e-05, 9.942054748535156e-05, 1.3470649719238281e-05, 0.0010271072387695312], "tokens": [291, 1056, 32, 2832, 280, 2910, 474, 816, 32, 2832, 474, 8735, 429, 345, 692, 32, 1322, 45, 584, 434, 1505, 436, 9973, 291, 415, 308, 1267, 32, 2832, 848, 7482, 81, 12275, 27, 301, 324, 1056, 32, 1495, 32, 470, 29178, 4629, 8733, 26, 54, 4426, 1176, 32, 4694, 81, 9425]}
{"line_number": 1531, "line_type": "original", "code": "                result = newInstance(this);", "entropy": 2.509765625, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [8.2890625, 1.3642578125, 2.740234375, 2.044921875, 0.1357421875, 0.0030536651611328125, 5.4765625, 0.0209503173828125], "tokens": [2071, 1056, 280, 537, 1810, 26, 578, 293]}
{"line_number": 1531, "line_type": "generated", "code": "\n        } else {\n            result.normalize();\n        }\n\n        return result;\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final long x", "entropy": 0.219970703125, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.32275390625, 0.0023670196533203125, 1.4599609375, 0.206298828125, 0.2080078125, 0.7744140625, 0.23681640625, 0.607421875, 0.05389404296875, 0.42626953125, 0.0006694793701171875, 0.115234375, 0.73828125, 0.0858154296875, 0.037200927734375, 0.3212890625, 0.00611114501953125, 0.188720703125, 0.046295166015625, 2.03125, 0.2105712890625, 0.0445556640625, 0.58837890625, 0.6220703125, 0.07550048828125, 0.0004639625549316406, 0.036712646484375, 0.003902435302734375, 0.08123779296875, 0.035064697265625, 2.9206275939941406e-05, 0.0012378692626953125, 0.0195159912109375, 0.006435394287109375, 0.0012760162353515625, 0.1702880859375, 0.052276611328125, 0.0009937286376953125, 0.0033397674560546875, 0.00445556640625, 0.00511932373046875, 0.0266571044921875, 0.04901123046875, 0.009246826171875, 0.024139404296875, 0.0216522216796875, 7.867813110351562e-06, 0.224365234375, 0.37939453125, 0.0972900390625, 0.76904296875, 0.00373077392578125], "tokens": [291, 320, 813, 301, 324, 1056, 32, 12944, 473, 291, 320, 584, 442, 1056, 45, 284, 320, 446, 1022, 44155, 458, 810, 816, 32, 275, 319, 477, 753, 816, 12044, 406, 363, 275, 319, 477, 601, 4054, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 22213, 26, 3220, 1946, 816]}
{"line_number": 1538, "line_type": "original", "code": "                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);", "entropy": 1.1357421875, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [8.296875, 5.42578125, 0.0034084320068359375, 0.05108642578125, 0.0235443115234375, 0.00021541118621826172, 0.005397796630859375, 0.025360107421875, 0.324951171875, 3.5762786865234375e-06, 0.0011730194091796875, 9.524822235107422e-05, 0.0029582977294921875, 4.291534423828125e-05, 3.990234375, 0.0204925537109375], "tokens": [2071, 1600, 32, 470, 29178, 4629, 8733, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 293]}
{"line_number": 1538, "line_type": "generated", "code": "\n        }\n\n        return dotrap(excp, MULTIPLY_TRAP, x, result);\n    }\n\n    /** Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide", "entropy": 0.11822509765625, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.10546875, 0.006305694580078125, 0.322509765625, 1.560546875, 0.20849609375, 0.00022542476654052734, 0.0204925537109375, 0.02496337890625, 5.960464477539062e-07, 0.034881591796875, 0.028472900390625, 5.650520324707031e-05, 1.33514404296875e-05, 0.00031375885009765625, 0.0009484291076660156, 0.0185394287109375, 0.0010318756103515625, 0.003734588623046875, 0.00627899169921875, 0.66650390625, 0.0060882568359375, 0.283447265625, 0.058837890625, 0.8388671875, 0.01030731201171875, 0.10113525390625, 0.0114898681640625, 0.06500244140625, 0.1842041015625, 0.158203125, 0.0005588531494140625, 0.093017578125, 0.0017986297607421875, 0.0167236328125, 0.419189453125, 0.01517486572265625, 0.0015611648559570312, 0.0011386871337890625, 0.01100921630859375, 0.482666015625, 0.0010547637939453125, 0.01102447509765625, 0.01007080078125, 0.2440185546875, 0.00775909423828125, 0.033599853515625, 0.025299072265625, 0.0275726318359375, 0.00959014892578125, 0.0061492919921875, 2.384185791015625e-06, 0.00145721435546875], "tokens": [291, 320, 584, 442, 745, 17770, 26, 327, 2219, 30, 30292, 19413, 81, 47085, 30, 816, 30, 1056, 293, 284, 320, 446, 1022, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910]}
{"line_number": 1539, "line_type": "original", "code": "                result = newInstance(getZero());", "entropy": 2.716796875, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [9.2578125, 1.9482421875, 0.290771484375, 7.88671875, 0.5068359375, 0.006565093994140625, 4.52734375, 0.0023345947265625, 0.0210113525390625], "tokens": [2071, 1056, 280, 537, 1810, 26, 371, 8039, 1035]}
{"line_number": 1539, "line_type": "generated", "code": "\n        if (excp!= 0) {\n            field.setIEEEFlagsBits(excp);\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n    }", "entropy": 0.1165771484375, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.16650390625, 0.88134765625, 0.1246337890625, 0.137451171875, 2.276897430419922e-05, 0.451904296875, 0.1807861328125, 0.0008301734924316406, 0.072998046875, 0.00977325439453125, 0.053863525390625, 0.8603515625, 0.00013136863708496094, 0.00374603271484375, 0.007732391357421875, 2.753734588623047e-05, 0.0005183219909667969, 0.01165008544921875, 0.93310546875, 1.9073486328125e-06, 0.1181640625, 0.1962890625, 0.35400390625, 0.11712646484375, 0.00415802001953125, 2.0265579223632812e-05, 0.0077362060546875, 0.032196044921875, 1.1920928955078125e-06, 0.0050201416015625, 0.0253448486328125, 0.00027108192443847656, 8.225440979003906e-06, 0.00024890899658203125, 0.0007801055908203125, 0.017913818359375, 0.0017261505126953125, 0.0036678314208984375, 0.002758026123046875, 0.06134033203125, 0.00016736984252929688, 0.2425537109375, 0.28955078125, 0.0083770751953125, 0.0086669921875, 0.08026123046875, 0.00396728515625], "tokens": [291, 415, 308, 327, 2219, 863, 225, 34, 27, 301, 324, 1600, 32, 470, 29178, 4629, 8733, 26, 327, 2219, 293, 324, 1056, 280, 745, 17770, 26, 327, 2219, 30, 30292, 19413, 81, 47085, 30, 816, 30, 1056, 293, 291, 320, 584, 442, 1056, 45, 284, 320]}
{"line_number": 1541, "line_type": "original", "code": "                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);", "entropy": 0.7451171875, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [8.5625, 2.431640625, 0.56396484375, 0.1956787109375, 0.00037479400634765625, 0.01560211181640625, 1.59375, 2.1457672119140625e-06, 0.0007758140563964844, 0.00012028217315673828, 0.003406524658203125, 6.377696990966797e-05, 3.6171875, 0.01078033447265625, 0.08441162109375, 0.0002205371856689453, 1.9073486328125e-05, 0.0003802776336669922, 0.00189971923828125, 0.037872314453125, 0.004932403564453125, 0.01519012451171875, 0.006359100341796875], "tokens": [2071, 1056, 280, 745, 17770, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 30, 30292, 19413, 81, 47085, 30, 816, 30, 1056, 293]}
{"line_number": 1541, "line_type": "generated", "code": "\n            return result;\n        }\n\n        return result;\n    }\n\n    /** Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide(final Dfp x) {\n\n        //", "entropy": 0.153564453125, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.818359375, 0.62255859375, 0.5205078125, 0.05157470703125, 0.029052734375, 0.00023663043975830078, 0.2310791015625, 0.70849609375, 0.205078125, 0.10430908203125, 0.12371826171875, 0.007137298583984375, 0.697265625, 0.07611083984375, 1.2724609375, 0.011383056640625, 0.06756591796875, 0.01534271240234375, 0.06072998046875, 0.16748046875, 0.1558837890625, 0.0005922317504882812, 0.078857421875, 0.0016536712646484375, 0.01209259033203125, 0.401611328125, 0.01560211181640625, 0.0014219284057617188, 0.0007104873657226562, 0.00732421875, 0.414306640625, 0.0009355545043945312, 0.0095367431640625, 0.0091094970703125, 0.2373046875, 0.006572723388671875, 0.03173828125, 0.021759033203125, 0.02667236328125, 0.0067901611328125, 0.00502777099609375, 2.384185791015625e-06, 0.0017557144165039062, 0.002498626708984375, 0.025665283203125, 0.0014438629150390625, 4.172325134277344e-06, 0.0003876686096191406, 0.0027828216552734375, 0.01849365234375, 0.349365234375, 0.3447265625], "tokens": [324, 442, 1056, 45, 291, 320, 584, 442, 1056, 45, 284, 320, 446, 1022, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 816, 27, 301, 584, 434]}
{"line_number": 1616, "line_type": "original", "code": "            if (isNaN()) {", "entropy": 2.771484375, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [6.05078125, 3.818359375, 0.10955810546875, 6.28125, 0.2484130859375, 0.119140625], "tokens": [1468, 415, 308, 26821, 1157, 301]}
{"line_number": 1616, "line_type": "generated", "code": "\n        return result;\n    }\n\n    /**\n     * Divide this by another Dfp\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide(final Dfp x) {\n\n        Dfp result =", "entropy": 0.24072265625, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.385498046875, 0.103759765625, 0.0259552001953125, 0.004749298095703125, 0.5341796875, 0.005031585693359375, 0.258544921875, 0.053985595703125, 1.443359375, 0.0005998611450195312, 1.1962890625, 0.0408935546875, 0.290283203125, 0.056976318359375, 0.67578125, 0.132080078125, 0.017974853515625, 1.8583984375, 0.01264190673828125, 0.2388916015625, 0.005832672119140625, 0.6572265625, 0.77490234375, 0.016571044921875, 0.004848480224609375, 0.004314422607421875, 0.0282135009765625, 0.84375, 0.001331329345703125, 0.05841064453125, 0.0518798828125, 0.415283203125, 0.02728271484375, 0.035186767578125, 0.1455078125, 0.0264739990234375, 0.043365478515625, 0.0096282958984375, 2.86102294921875e-06, 0.00678253173828125, 0.003719329833984375, 0.0697021484375, 0.002716064453125, 9.298324584960938e-06, 0.0005478858947753906, 0.002696990966796875, 0.0073699951171875, 1.2216796875, 0.54541015625, 9.047985076904297e-05, 0.1007080078125, 0.0714111328125], "tokens": [291, 442, 1056, 45, 284, 320, 446, 1022, 275, 319, 17536, 805, 458, 810, 4674, 475, 4426, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 816, 27, 301, 584, 475, 4426, 1056, 280]}
{"line_number": 1626, "line_type": "original", "code": "                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);", "entropy": 1.4482421875, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [8.6953125, 7.55859375, 0.09429931640625, 0.31982421875, 0.07598876953125, 0.00040841102600097656, 0.03485107421875, 0.021026611328125, 1.6171875, 0.00022411346435546875, 0.001140594482421875, 0.00023508071899414062, 0.009063720703125, 0.00037479400634765625, 4.65234375, 0.08966064453125], "tokens": [2071, 1600, 32, 470, 29178, 4629, 8733, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 293]}
{"line_number": 1626, "line_type": "generated", "code": "\n        int divisor_sign = divisor.sign;\n        int divisor_exp = divisor.exp;\n        int divisor_mant[] = new int[mant.length];\n        int divisor_mant_len = divisor.mant.length;", "entropy": 0.34814453125, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.31640625, 0.43896484375, 1.4873046875, 1.205078125, 2.0, 0.79736328125, 0.1702880859375, 0.003490447998046875, 0.01788330078125, 0.054107666015625, 0.2734375, 0.21630859375, 0.64697265625, 0.016876220703125, 0.454833984375, 0.2401123046875, 0.01309967041015625, 0.00022971630096435547, 0.0012826919555664062, 0.016204833984375, 0.2047119140625, 0.1544189453125, 0.493896484375, 0.00569915771484375, 0.35498046875, 0.0282440185546875, 0.036529541015625, 0.0039043426513671875, 1.4111328125, 0.004573822021484375, 0.00893402099609375, 0.61181640625, 0.0005640983581542969, 0.0015668869018554688, 0.00024580955505371094, 0.0799560546875, 0.61767578125, 1.3681640625, 1.7294921875, 0.054351806640625, 0.7236328125, 0.035247802734375, 0.278076171875, 0.5224609375, 0.06890869140625, 0.708984375, 0.1905517578125, 0.01522064208984375, 0.0010633468627929688, 0.0004756450653076172, 0.00024318695068359375, 0.02252197265625], "tokens": [291, 629, 33482, 81, 1333, 280, 33482, 32, 1333, 45, 291, 629, 33482, 81, 2832, 280, 33482, 32, 2832, 45, 291, 629, 33482, 81, 95, 692, 1178, 280, 537, 629, 77, 95, 692, 32, 1322, 970, 291, 629, 33482, 81, 95, 692, 81, 1657, 280, 33482, 32, 95, 692, 32, 1322, 45]}
{"line_number": 1627, "line_type": "original", "code": "                result = newInstance(getZero());", "entropy": 1.9423828125, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [9.515625, 6.27734375, 0.276611328125, 0.1419677734375, 0.148681640625, 0.0347900390625, 1.0771484375, 0.0007023811340332031, 0.0162353515625], "tokens": [2071, 1056, 280, 537, 1810, 26, 371, 8039, 1035]}
{"line_number": 1627, "line_type": "generated", "code": "\n        int divisor_length;\n        int dividend_length;\n        int diffexp; // difference in exponents\n        int i;\n        int j;\n        int k;\n        int l;\n        int borrow;\n        int q;\n        int rh;", "entropy": 0.6845703125, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.306396484375, 0.70751953125, 2.3828125, 1.2275390625, 3.302734375, 1.15234375, 0.85986328125, 0.1258544921875, 1.724609375, 0.05938720703125, 0.0007195472717285156, 0.00861358642578125, 0.0227508544921875, 0.05023193359375, 0.1741943359375, 0.1357421875, 1.9541015625, 0.80859375, 0.115234375, 1.15625, 0.51513671875, 0.3583984375, 0.25, 0.1075439453125, 0.49072265625, 0.1392822265625, 2.171875, 0.268798828125, 0.70849609375, 0.206787109375, 1.009765625, 0.040069580078125, 0.1600341796875, 0.1571044921875, 0.58740234375, 0.031646728515625, 0.18896484375, 0.1531982421875, 2.046875, 0.1270751953125, 0.1480712890625, 0.139892578125, 4.0546875, 0.14599609375, 0.359130859375, 0.129638671875, 1.5224609375, 0.93017578125, 0.2470703125, 0.1419677734375, 1.7431640625, 0.0300140380859375], "tokens": [291, 629, 33482, 81, 1322, 45, 291, 629, 4451, 314, 416, 81, 1322, 45, 291, 629, 5839, 2832, 45, 434, 10563, 328, 19715, 101, 291, 629, 595, 45, 291, 629, 594, 45, 291, 629, 831, 45, 291, 629, 456, 45, 291, 629, 33187, 45, 291, 629, 2678, 45, 291, 629, 35949, 45]}
{"line_number": 1629, "line_type": "original", "code": "                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);", "entropy": 1.3125, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [8.9140625, 7.9296875, 0.253662109375, 3.859375, 0.0153350830078125, 0.0200042724609375, 0.269775390625, 0.00012218952178955078, 0.0020847320556640625, 0.0006895065307617188, 0.003017425537109375, 0.00011014938354492188, 0.53466796875, 0.0150299072265625, 4.03515625, 0.0010404586791992188, 0.00027632713317871094, 0.0001842975616455078, 0.009674072265625, 5.91796875, 0.1365966796875, 0.009429931640625, 1.31640625, 0.0050201416015625, 0.056671142578125, 2.123046875, 0.01096343994140625], "tokens": [2071, 1056, 280, 745, 17770, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 30, 30292, 19413, 81, 47085, 30, 537, 1810, 26, 371, 8039, 6182, 1056, 293]}
{"line_number": 1629, "line_type": "generated", "code": "\n        int excp;       // status of the operation\n        int cmp;        // comparison between dividend and divisor", "entropy": 0.63525390625, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.374267578125, 0.44580078125, 2.05078125, 0.03436279296875, 0.097900390625, 0.2379150390625, 0.00018465518951416016, 2.373046875, 0.61962890625, 1.095703125, 0.89208984375, 0.9609375, 0.427734375, 2.22265625, 0.54345703125, 0.08721923828125, 0.0004086494445800781, 1.060546875, 0.98193359375, 0.7041015625, 0.00179290771484375, 0.004024505615234375, 0.0322265625, 0.004222869873046875], "tokens": [291, 629, 538, 2219, 45, 958, 434, 2287, 432, 322, 4212, 291, 629, 13593, 45, 351, 434, 14828, 3733, 4451, 314, 416, 461, 33482]}
{"line_number": 1636, "line_type": "original", "code": "            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);", "entropy": 0.80029296875, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [6.68359375, 4.25, 0.035186767578125, 1.3203125, 0.07464599609375, 0.00022041797637939453, 0.0080108642578125, 0.0264129638671875, 0.1400146484375, 1.4185905456542969e-05, 0.0008511543273925781, 0.00044536590576171875, 0.002368927001953125, 0.0001767873764038086, 0.2318115234375, 0.027069091796875], "tokens": [1468, 1600, 32, 470, 29178, 4629, 8733, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 293]}
{"line_number": 1636, "line_type": "generated", "code": "\n        if (field!= divisor.field) {\n            throw new IllegalArgumentException(\"Dfp precision mismatch\");\n        }\n\n        // handle special cases\n        if (nans!= FINITE || divisor.nans!= FINITE) {\n            if (isNaN()) {\n               ", "entropy": 0.3017578125, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.485595703125, 0.486572265625, 0.33642578125, 1.90625, 0.80078125, 0.002246856689453125, 0.0002830028533935547, 0.0758056640625, 0.0227813720703125, 0.0186309814453125, 0.08282470703125, 0.78662109375, 0.01104736328125, 0.351806640625, 0.10064697265625, 1.80078125, 0.1881103515625, 2.380859375, 0.051177978515625, 0.1131591796875, 0.0147247314453125, 0.0011682510375976562, 0.1087646484375, 0.728515625, 1.810546875, 0.08514404296875, 0.3310546875, 0.251953125, 0.2171630859375, 0.07720947265625, 0.25830078125, 7.665157318115234e-05, 0.09930419921875, 0.007717132568359375, 1.1920928955078125e-07, 0.21533203125, 0.0028781890869140625, 0.00042247772216796875, 0.0019388198852539062, 4.887580871582031e-06, 0.00470733642578125, 0.0032806396484375, 2.384185791015625e-07, 0.0151824951171875, 0.00476837158203125, 0.18408203125, 0.253662109375, 0.046966552734375, 0.1842041015625, 0.75048828125, 0.013092041015625, 0.023834228515625], "tokens": [291, 415, 308, 1495, 863, 33482, 32, 1495, 27, 301, 324, 1422, 537, 12137, 440, 54, 4426, 12485, 22384, 724, 291, 320, 584, 434, 2887, 7456, 6792, 291, 415, 308, 96, 693, 863, 30460, 2345, 1276, 33482, 32, 96, 693, 863, 30460, 2345, 27, 301, 324, 415, 308, 26821, 1157, 301, 400]}
{"line_number": 1637, "line_type": "original", "code": "            result = newInstance(getZero());", "entropy": 1.4443359375, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [6.77734375, 4.15234375, 0.384521484375, 0.77001953125, 0.1580810546875, 0.01233673095703125, 0.73046875, 0.00325775146484375, 0.012542724609375], "tokens": [1468, 1056, 280, 537, 1810, 26, 371, 8039, 1035]}
{"line_number": 1637, "line_type": "generated", "code": "\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, this, newInstance(getZero()));\n        }\n\n        /* handle special cases */\n        if", "entropy": 0.132568359375, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.130859375, 0.90185546875, 0.002002716064453125, 0.00374603271484375, 0.003734588623046875, 2.5391578674316406e-05, 0.0020771026611328125, 0.00710296630859375, 0.007213592529296875, 1.6450881958007812e-05, 0.00010454654693603516, 6.377696990966797e-05, 0.0005936622619628906, 0.00014328956604003906, 0.025848388671875, 0.0210418701171875, 0.2353515625, 0.88232421875, 0.31103515625, 0.0004584789276123047, 0.0013303756713867188, 0.0254669189453125, 9.059906005859375e-06, 8.463859558105469e-05, 0.00010800361633300781, 0.00031304359436035156, 4.9591064453125e-05, 0.00019502639770507812, 0.004718780517578125, 0.04827880859375, 0.00019538402557373047, 0.00031113624572753906, 0.007236480712890625, 0.0013036727905273438, 0.18212890625, 0.0050811767578125, 0.8359375, 0.056549072265625, 0.0098724365234375, 0.35107421875, 0.00782012939453125, 0.0098114013671875, 0.021026611328125, 0.0004143714904785156, 0.06121826171875, 1.71875, 0.59423828125, 0.0267333984375, 0.166259765625, 0.036895751953125, 0.070068359375, 0.1114501953125], "tokens": [324, 1600, 32, 470, 29178, 4629, 8733, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 293, 324, 442, 745, 17770, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 30, 40377, 8455, 81, 47085, 30, 458, 30, 537, 1810, 26, 371, 8039, 5073, 291, 320, 584, 1257, 2887, 7456, 6792, 569, 291, 415]}
{"line_number": 1639, "line_type": "original", "code": "            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);", "entropy": 0.67431640625, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [6.4296875, 2.0859375, 2.76953125, 0.0263519287109375, 0.0007467269897460938, 0.0013580322265625, 0.0546875, 0.00014901161193847656, 0.00025725364685058594, 0.00020587444305419922, 0.0003552436828613281, 0.00010657310485839844, 0.0007081031799316406, 0.0029048919677734375, 2.95703125, 0.0003037452697753906, 0.0001188516616821289, 0.00014770030975341797, 0.0010347366333007812, 1.12109375, 0.00998687744140625, 0.0389404296875, 0.002368927001953125], "tokens": [1468, 1056, 280, 745, 17770, 26, 54, 4426, 1176, 32, 4694, 81, 8606, 30, 30292, 19413, 81, 47085, 30, 1056, 30, 1056, 293]}
{"line_number": 1639, "line_type": "generated", "code": "\n            return result;\n        }\n\n        // handle special cases\n        if (nans!= FINITE || divisor.nans!= FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.nans == INFIN", "entropy": 0.1236572265625, "is_bug_line": false, "sus_score": 0.48797327280044556, "per_token_entropy": [0.0885009765625, 0.145263671875, 0.0309600830078125, 0.0233001708984375, 0.0107574462890625, 0.00046324729919433594, 0.055267333984375, 0.625, 1.68359375, 0.07666015625, 0.3779296875, 0.1856689453125, 0.167236328125, 0.08984375, 0.1617431640625, 3.921985626220703e-05, 0.1268310546875, 0.0072174072265625, 1.1920928955078125e-07, 0.30029296875, 0.002857208251953125, 0.0005593299865722656, 0.0019893646240234375, 6.318092346191406e-06, 0.00568389892578125, 0.00341796875, 2.384185791015625e-07, 0.01535797119140625, 0.004375457763671875, 0.179443359375, 0.21044921875, 0.051177978515625, 0.2418212890625, 0.62646484375, 0.00806427001953125, 0.03387451171875, 0.157958984375, 0.06451416015625, 0.000949859619140625, 0.00519561767578125, 0.0002503395080566406, 0.349609375, 0.0256805419921875, 0.01073455810546875, 0.11285400390625, 0.001049041748046875, 0.00293731689453125, 0.05712890625, 1.0251998901367188e-05, 0.01105499267578125, 0.087890625, 4.887580871582031e-06], "tokens": [324, 442, 1056, 45, 291, 320, 584, 434, 2887, 7456, 6792, 291, 415, 308, 96, 693, 863, 30460, 2345, 1276, 33482, 32, 96, 693, 863, 30460, 2345, 27, 301, 324, 415, 308, 26821, 1157, 301, 400, 442, 458, 45, 324, 320, 1064, 415, 308, 507, 22306, 32, 96, 693, 610, 1236, 12611]}
{"line_number": 1621, "line_type": "original", "code": "                result = newInstance(this);", "entropy": 2.267578125, "is_bug_line": false, "sus_score": 0.48582279682159424, "per_token_entropy": [8.75, 3.34765625, 0.84814453125, 3.75390625, 0.810546875, 0.06060791015625, 0.52587890625, 0.042510986328125], "tokens": [2071, 1056, 280, 537, 1810, 26, 578, 293]}
{"line_number": 1621, "line_type": "generated", "code": "\n     * @return quotient of this and divisor\n     */\n    public Dfp divide(final Dfp divisor) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans!= FINITE) {\n            if", "entropy": 0.1060791015625, "is_bug_line": false, "sus_score": 0.48582279682159424, "per_token_entropy": [0.36328125, 0.240234375, 0.0135498046875, 0.0372314453125, 0.482666015625, 0.0009946823120117188, 0.06878662109375, 0.0296783447265625, 0.29296875, 0.11859130859375, 0.1883544921875, 0.1632080078125, 0.0296478271484375, 0.042633056640625, 0.009521484375, 2.5033950805664062e-06, 0.00612640380859375, 0.00264739990234375, 0.052947998046875, 0.0089874267578125, 1.8477439880371094e-05, 0.0013666152954101562, 0.00548553466796875, 0.00870513916015625, 0.43212890625, 0.775390625, 7.474422454833984e-05, 0.130615234375, 0.05267333984375, 0.043365478515625, 0.06268310546875, 0.01433563232421875, 0.08685302734375, 0.0033283233642578125, 0.2315673828125, 0.297119140625, 0.12408447265625, 0.010040283203125, 0.09552001953125, 0.0179901123046875, 0.0465087890625, 0.06561279296875, 0.06695556640625, 0.326904296875, 1.2516975402832031e-05, 0.0209808349609375, 0.004180908203125, -0.0, 0.365234375, 0.0012426376342773438, 0.0279541015625, 0.046234130859375], "tokens": [275, 319, 477, 601, 32785, 1606, 432, 458, 461, 33482, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 33482, 27, 301, 291, 475, 4426, 1056, 280, 537, 1810, 26, 578, 293, 584, 1257, 2887, 7456, 6792, 569, 291, 415, 308, 96, 693, 863, 30460, 2345, 27, 301, 324, 415]}
{"line_number": 1620, "line_type": "original", "code": "            if (nans == INFINITE && x != 0) {", "entropy": 1.4638671875, "is_bug_line": false, "sus_score": 0.4851573705673218, "per_token_entropy": [6.1875, 3.56640625, 0.62353515625, 2.265625, 0.0252227783203125, 1.046875, 0.986328125, 9.322166442871094e-05, 0.09625244140625, 0.76806640625, 2.2578125, 5.15234375, 0.2215576171875, 0.0017566680908203125, 0.052154541015625, 0.16748046875], "tokens": [1468, 415, 308, 96, 693, 610, 1236, 12611, 2345, 962, 816, 863, 225, 34, 27, 301]}
{"line_number": 1620, "line_type": "generated", "code": "\n     * @param divisor divisor\n     * @return quotient of this and divisor\n     */\n    public Dfp divide(final Dfp divisor) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans!=", "entropy": 0.131103515625, "is_bug_line": false, "sus_score": 0.4851573705673218, "per_token_entropy": [0.6494140625, 0.042510986328125, 0.24853515625, 0.01221466064453125, 0.0281829833984375, 1.0625, 0.2320556640625, 0.0024738311767578125, 0.00214385986328125, 0.03729248046875, 0.50390625, 0.0010042190551757812, 0.059234619140625, 0.0238037109375, 0.2841796875, 0.10394287109375, 0.10968017578125, 0.2022705078125, 0.032257080078125, 0.042572021484375, 0.00865936279296875, 2.7418136596679688e-06, 0.00600433349609375, 0.002925872802734375, 0.052093505859375, 0.00591278076171875, 1.9311904907226562e-05, 0.001209259033203125, 0.0050506591796875, 0.00841522216796875, 0.5361328125, 0.66162109375, 8.094310760498047e-05, 0.1258544921875, 0.07049560546875, 0.0545654296875, 0.0740966796875, 0.01535797119140625, 0.08013916015625, 0.0033092498779296875, 0.2685546875, 0.47412109375, 0.155029296875, 0.01201629638671875, 0.08013916015625, 0.020233154296875, 0.06500244140625, 0.066650390625, 0.044647216796875, 0.2183837890625, 1.2874603271484375e-05, 0.020111083984375], "tokens": [275, 319, 477, 753, 33482, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 33482, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 33482, 27, 301, 291, 475, 4426, 1056, 280, 537, 1810, 26, 578, 293, 584, 1257, 2887, 7456, 6792, 569, 291, 415, 308, 96, 693, 863]}
{"line_number": 1625, "line_type": "original", "code": "            if (nans == INFINITE && x == 0) {", "entropy": 1.62109375, "is_bug_line": false, "sus_score": 0.48496943712234497, "per_token_entropy": [5.16015625, 2.998046875, 0.131591796875, 1.669921875, 0.0011081695556640625, 2.111328125, 0.65869140625, 4.184246063232422e-05, 0.101806640625, 1.232421875, 6.43359375, 3.798828125, 1.5, 0.0074615478515625, 0.05035400390625, 0.07501220703125], "tokens": [1468, 415, 308, 96, 693, 610, 1236, 12611, 2345, 962, 816, 610, 225, 34, 27, 301]}
{"line_number": 1625, "line_type": "generated", "code": "\n        int divisor_mant[] = new int[mant.length]; // divisor mantissa\n        int divisor_exp = divisor.exp;\n        int divisor_sign = divisor.sign;\n\n        if (nans!= FINITE || divisor.", "entropy": 0.418212890625, "is_bug_line": false, "sus_score": 0.48496943712234497, "per_token_entropy": [0.395751953125, 1.1142578125, 0.6357421875, 1.533203125, 0.908203125, 0.345703125, 0.268798828125, 0.0194091796875, 0.68603515625, 0.016357421875, 0.02801513671875, 0.66455078125, 0.0006189346313476562, 0.0011234283447265625, 0.00039458274841308594, 0.4423828125, 0.603515625, 2.037109375, 1.2001953125, 0.031646728515625, 0.00020253658294677734, 0.5263671875, 0.189208984375, 0.5263671875, 0.0159759521484375, 0.1287841796875, 0.271484375, 0.135498046875, 0.0012750625610351562, 0.02392578125, 0.33984375, 0.98876953125, 0.283203125, 1.7412109375, 0.007106781005859375, 0.6005859375, 0.02569580078125, 0.031768798828125, 0.0008344650268554688, 0.0020885467529296875, 0.00897979736328125, 1.228515625, 1.6728515625, 0.0953369140625, 1.1240234375, 0.00019931793212890625, 0.05133056640625, 0.0124664306640625, 1.1920928955078125e-07, 0.75390625, 0.0160675048828125, 0.005702972412109375], "tokens": [291, 629, 33482, 81, 95, 692, 1178, 280, 537, 629, 77, 95, 692, 32, 1322, 970, 434, 33482, 345, 29913, 2496, 291, 629, 33482, 81, 2832, 280, 33482, 32, 2832, 45, 291, 629, 33482, 81, 1333, 280, 33482, 32, 1333, 45, 584, 415, 308, 96, 693, 863, 30460, 2345, 1276, 33482, 32]}
{"line_number": 1530, "line_type": "original", "code": "            if (x.nans == INFINITE && nans == INFINITE) {", "entropy": 1.0224609375, "is_bug_line": false, "sus_score": 0.4842360019683838, "per_token_entropy": [5.1015625, 4.13671875, 0.115478515625, 4.44921875, 0.063720703125, 1.1513671875, 0.140625, 0.33251953125, 0.76708984375, 4.494190216064453e-05, 0.0189056396484375, 1.185546875, 0.1748046875, 0.0003559589385986328, 0.057647705078125, 2.55078125, 4.410743713378906e-06, 0.0001538991928100586, 0.164794921875, 0.043121337890625], "tokens": [1468, 415, 308, 106, 32, 96, 693, 610, 1236, 12611, 2345, 962, 310, 693, 610, 1236, 12611, 2345, 27, 301]}
{"line_number": 1530, "line_type": "generated", "code": "\n            result.exp = 0;\n        }\n\n        return result;\n    }\n\n    /**\n     * Divide this by x.\n     * @param x divisor\n     * @return this / x\n     */\n    public Dfp divide(final Dfp x)", "entropy": 0.246337890625, "is_bug_line": false, "sus_score": 0.4842360019683838, "per_token_entropy": [0.849609375, 0.48828125, 0.062286376953125, 0.186767578125, 0.0166473388671875, 0.06500244140625, 0.0020008087158203125, 0.00809478759765625, 0.49462890625, 0.0028171539306640625, 0.3994140625, 1.8154296875, 0.20703125, 0.1920166015625, 0.47265625, 0.008941650390625, 0.1973876953125, 0.042449951171875, 1.82421875, 0.0008025169372558594, 0.91796875, 0.0477294921875, 0.22998046875, 0.04803466796875, 0.1812744140625, 0.49560546875, 0.403564453125, 0.0022220611572265625, 0.269287109375, 0.0045166015625, 0.043487548828125, 0.67236328125, 0.0161285400390625, 0.0030364990234375, 0.004302978515625, 0.0177459716796875, 1.0537109375, 0.7373046875, 0.00693511962890625, 0.0811767578125, 0.111572265625, 0.022003173828125, 0.01314544677734375, 0.006866455078125, 1.1920928955078125e-06, 0.00402069091796875, 0.002971649169921875, 0.06884765625, 0.0015134811401367188, 2.1457672119140625e-06, 0.0003771781921386719, 0.004474639892578125], "tokens": [324, 1056, 32, 2832, 280, 225, 34, 45, 291, 320, 584, 442, 1056, 45, 284, 320, 446, 1022, 275, 319, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 458, 517, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 816, 27]}
{"line_number": 1532, "line_type": "original", "code": "                result.sign = (byte) (sign * x.sign);", "entropy": 1.2919921875, "is_bug_line": false, "sus_score": 0.48421362042427063, "per_token_entropy": [9.578125, 2.4453125, 0.41748046875, 5.52734375, 0.096435546875, 0.603515625, 0.038482666015625, 0.39599609375, 0.1466064453125, 0.05975341796875, 0.049774169921875, 0.0075531005859375, 0.00058746337890625, 0.00039696693420410156, 0.0030918121337890625], "tokens": [2071, 1056, 32, 1333, 280, 308, 2263, 27, 308, 1333, 319, 816, 32, 1333, 293]}
{"line_number": 1532, "line_type": "generated", "code": "\n        return result;\n\n    }\n\n    /** Divide this by x.\n     * @param x divisor\n     * @return quotient of this and x\n     */\n    public Dfp divide(final Dfp x) {\n\n        // make sure we don't mix", "entropy": 0.107421875, "is_bug_line": false, "sus_score": 0.48421362042427063, "per_token_entropy": [0.462158203125, 0.254638671875, 0.09893798828125, 0.02630615234375, 0.97412109375, 0.004428863525390625, 0.2027587890625, 0.03924560546875, 0.56591796875, 0.006603240966796875, 0.08447265625, 0.012359619140625, 0.07232666015625, 0.187744140625, 0.136474609375, 0.00047326087951660156, 0.078857421875, 0.0013322830200195312, 0.0203094482421875, 0.358154296875, 0.00982666015625, 0.0012187957763671875, 0.0006222724914550781, 0.00983428955078125, 0.63916015625, 0.0014858245849609375, 0.007709503173828125, 0.01218414306640625, 0.2275390625, 0.01020050048828125, 0.0231781005859375, 0.043182373046875, 0.0169219970703125, 0.00896453857421875, 0.004627227783203125, 9.5367431640625e-07, 0.0021114349365234375, 0.002048492431640625, 0.03863525390625, 0.0014028549194335938, 1.7881393432617188e-06, 0.0003368854522705078, 0.0033779144287109375, 0.0201873779296875, 0.290283203125, 0.36328125, 0.2396240234375, 0.0006718635559082031, 0.00341796875, 0.0025997161865234375, 0.013885498046875, 0.0005693435668945312], "tokens": [291, 442, 1056, 45, 446, 320, 446, 1022, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 32785, 1606, 432, 458, 461, 816, 275, 569, 284, 562, 475, 4426, 24910, 26, 3220, 475, 4426, 816, 27, 301, 584, 434, 1930, 3654, 996, 2800, 1330, 11631]}
{"line_number": 1510, "line_type": "original", "code": "            if (isNaN()) {", "entropy": 3.0859375, "is_bug_line": false, "sus_score": 0.482494980096817, "per_token_entropy": [5.95703125, 3.197265625, 0.08380126953125, 9.0078125, 0.222412109375, 0.046844482421875], "tokens": [1468, 415, 308, 26821, 1157, 301]}
{"line_number": 1510, "line_type": "generated", "code": "\n        result.exp = exp + x.exp;\n\n        result.compact();\n        return result;\n\n    }\n\n    /**\n     * Divide this by x.\n     * @param x divisor\n     * @return this divided by x\n     */\n    public Dfp", "entropy": 0.408447265625, "is_bug_line": false, "sus_score": 0.482494980096817, "per_token_entropy": [0.98046875, 1.8115234375, 0.307373046875, 1.365234375, 0.06103515625, 0.2249755859375, 0.036407470703125, 0.00304412841796875, 0.00011026859283447266, 0.00020503997802734375, 0.734375, 1.1611328125, 1.67578125, 0.10955810546875, 1.5712890625, 0.10797119140625, 0.8056640625, 0.564453125, 0.06927490234375, 0.0186767578125, 1.056640625, 0.019927978515625, 0.1767578125, 0.036529541015625, 2.013671875, 0.0008950233459472656, 1.046875, 0.066650390625, 0.1839599609375, 0.041168212890625, 0.18994140625, 0.49609375, 0.408447265625, 0.0016050338745117188, 0.270263671875, 0.0039825439453125, 0.04302978515625, 0.64599609375, 0.01520538330078125, 0.0023040771484375, 0.0034542083740234375, 0.019317626953125, 1.0224609375, 1.5791015625, 0.0011701583862304688, 0.019927978515625, 0.1162109375, 0.1082763671875, 0.0233306884765625, 0.01062774658203125, 0.007221221923828125, 1.0728836059570312e-06], "tokens": [291, 1056, 32, 2832, 280, 2910, 474, 816, 32, 2832, 45, 584, 1056, 32, 16580, 473, 291, 442, 1056, 45, 446, 320, 446, 1022, 275, 319, 17536, 805, 458, 810, 816, 32, 275, 319, 477, 753, 816, 33482, 275, 319, 477, 601, 458, 32235, 810, 816, 275, 569, 284, 562, 475, 4426]}
{"line_number": 1514, "line_type": "original", "code": "            if (x.isNaN()) {", "entropy": 2.87109375, "is_bug_line": false, "sus_score": 0.482494980096817, "per_token_entropy": [4.62890625, 3.837890625, 0.059600830078125, 6.87890625, 0.0770263671875, 6.9609375, 0.395263671875, 0.131591796875], "tokens": [1468, 415, 308, 106, 32, 26821, 1157, 301]}
{"line_number": 1514, "line_type": "generated", "code": "\n                md = i;\n                break;\n            }\n        }\n\n        // normalize the result\n        int shift = md / DIGITS_PER_RADIX;\n        if (shift > 0) {\n            // shift right by shift digits\n            for (int i", "entropy": 0.5458984375, "is_bug_line": false, "sus_score": 0.482494980096817, "per_token_entropy": [0.220458984375, 0.08978271484375, 0.0084686279296875, 0.0018129348754882812, 0.006069183349609375, 0.334716796875, 0.0081329345703125, 0.00101470947265625, 0.0268402099609375, 0.00058746337890625, 0.0157318115234375, 0.00016045570373535156, 0.10345458984375, 0.63427734375, 2.9140625, 1.5947265625, 0.476318359375, 0.61669921875, 0.84521484375, 2.875, 0.09857177734375, 0.63671875, 1.326171875, 2.283203125, 0.0238037109375, 1.0654296875, 0.01482391357421875, 0.0007414817810058594, 1.7626953125, 7.62939453125e-05, 0.06744384765625, 0.27099609375, 1.7431640625, 0.0106964111328125, 0.22265625, 1.0009765625, 0.08575439453125, 0.0384521484375, 0.01995849609375, 0.00823211669921875, 0.115234375, 1.55078125, 0.6923828125, 1.01171875, 1.177734375, 0.875, 0.5546875, 0.1805419921875, 0.7509765625, 0.00868988037109375, 0.0032672882080078125, 0.0226287841796875], "tokens": [400, 8735, 280, 595, 45, 400, 1626, 45, 324, 320, 291, 320, 584, 434, 13316, 322, 1056, 291, 629, 5733, 280, 8735, 517, 35294, 10995, 81, 3687, 81, 18739, 6578, 45, 291, 415, 308, 5494, 848, 225, 34, 27, 301, 324, 434, 5733, 2091, 810, 5733, 16105, 324, 436, 308, 410, 595]}
{"line_number": 1519, "line_type": "original", "code": "                result = newInstance(this);", "entropy": 1.9208984375, "is_bug_line": false, "sus_score": 0.482494980096817, "per_token_entropy": [7.96875, 1.708984375, 2.595703125, 0.2333984375, 0.3193359375, 0.026458740234375, 2.474609375, 0.038055419921875], "tokens": [2071, 1056, 280, 537, 1810, 26, 578, 293]}
{"line_number": 1519, "line_type": "generated", "code": "\n        result.sign = (byte) (sign * x.sign);\n        result.nans = FINITE;\n\n        // Normalize the result\n        if (md < mant.length) {\n            // Denormalized result\n            System.arraycopy(product", "entropy": 0.429443359375, "is_bug_line": false, "sus_score": 0.482494980096817, "per_token_entropy": [0.22998046875, 1.177734375, 0.06597900390625, 0.84228515625, 0.052032470703125, 0.043670654296875, 0.0034732818603515625, 0.043548583984375, 0.0145263671875, 0.015655517578125, 0.014556884765625, 0.0011425018310546875, 3.981590270996094e-05, 0.0003802776336669922, 0.0009388923645019531, 0.6357421875, 0.229736328125, 0.007259368896484375, 0.51416015625, 0.206298828125, 0.015869140625, 0.1177978515625, 1.1920928955078125e-07, 0.0015201568603515625, 1.1552734375, 0.80810546875, 3.158203125, 1.4140625, 0.370361328125, 0.580078125, 1.2705078125, 0.0110931396484375, 0.053741455078125, 1.6708984375, 0.475341796875, 9.012222290039062e-05, 0.0001728534698486328, 2.956390380859375e-05, 0.2275390625, 0.007350921630859375, 0.2239990234375, 1.0654296875, 2.740234375, 0.001956939697265625, 0.2095947265625, 0.1669921875, 0.43310546875, 2.0234375, 0.0012693405151367188, 0.00021922588348388672, 0.0019550323486328125, 0.019317626953125], "tokens": [291, 1056, 32, 1333, 280, 308, 2263, 27, 308, 1333, 319, 816, 32, 1333, 293, 291, 1056, 32, 96, 693, 280, 30460, 2345, 45, 584, 434, 40249, 322, 1056, 291, 415, 308, 954, 333, 345, 692, 32, 1322, 27, 301, 324, 434, 22768, 2088, 1191, 1056, 324, 1171, 32, 40863, 26, 2445]}
{"line_number": 1536, "line_type": "original", "code": "            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||", "entropy": 0.54296875, "is_bug_line": false, "sus_score": 0.48207202553749084, "per_token_entropy": [4.98046875, 1.1396484375, 0.12274169921875, 3.86328125, 3.6015625, 0.01512908935546875, 0.89404296875, 0.004489898681640625, 0.15087890625, 0.83447265625, 1.1801719665527344e-05, 0.0029506683349609375, 0.318359375, 0.248046875, 0.0002378225326538086, 0.06256103515625, 0.03436279296875, 8.344650268554688e-07, 0.58935546875, 0.22314453125, 0.0009899139404296875, 0.0013713836669921875, 0.0103759765625, 0.0001329183578491211, 0.00022912025451660156, 1.537799835205078e-05, 0.0175933837890625, 0.00052642822265625, 0.00870513916015625, 0.63720703125, 0.004150390625, 0.0005364418029785156, 0.09619140625, 0.58740234375], "tokens": [1468, 415, 308, 308, 106, 32, 96, 693, 610, 1236, 12611, 2345, 962, 310, 693, 610, 30460, 2345, 962, 345, 692, 77, 95, 692, 32, 1322, 31, 35, 79, 610, 225, 34, 27, 1276]}
{"line_number": 1536, "line_type": "generated", "code": "\n        } else {\n            excp = result.round(product[md]);\n        }\n\n        if (excp!= 0) {\n            field.setIEEEFlagsBits(excp);\n            result = dotrap(excp, MULTIPLY_TRAP", "entropy": 0.1448974609375, "is_bug_line": false, "sus_score": 0.48207202553749084, "per_token_entropy": [0.78955078125, 0.0283966064453125, 0.2183837890625, 0.0675048828125, 0.08831787109375, 0.0697021484375, 9.5367431640625e-07, 0.0037384033203125, 0.5224609375, 0.00017750263214111328, 0.060089111328125, 0.057159423828125, 0.06390380859375, 0.0028514862060546875, 0.1534423828125, 0.07989501953125, 0.7255859375, 0.002292633056640625, 0.322265625, 0.82470703125, 0.10748291015625, 0.1297607421875, 1.728534698486328e-05, 0.445556640625, 0.0941162109375, 0.0012664794921875, 0.039825439453125, 0.015716552734375, 0.07843017578125, 0.7890625, 7.843971252441406e-05, 0.0032901763916015625, 0.00543975830078125, 1.3113021850585938e-05, 0.00044918060302734375, 0.0102691650390625, 0.7197265625, 1.430511474609375e-06, 0.1124267578125, 0.199462890625, 0.491455078125, 0.09527587890625, 0.03369140625, 3.3855438232421875e-05, 0.01479339599609375, 0.02642822265625, 2.5033950805664062e-06, 0.0034351348876953125, 0.0377197265625, 0.0004124641418457031, 8.821487426757812e-06, 0.0002989768981933594], "tokens": [291, 320, 813, 301, 324, 538, 2219, 280, 1056, 32, 1497, 26, 2445, 77, 954, 1989, 291, 320, 584, 415, 308, 327, 2219, 863, 225, 34, 27, 301, 324, 1600, 32, 470, 29178, 4629, 8733, 26, 327, 2219, 293, 324, 1056, 280, 745, 17770, 26, 327, 2219, 30, 30292, 19413, 81, 47085]}
