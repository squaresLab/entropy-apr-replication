{"line_number": 1135, "line_type": "original", "code": "            int j = 4 * n - 1;", "entropy": 1.7080078125, "is_bug_line": true, "sus_score": 0.83262699842453, "per_token_entropy": [4.97265625, 6.1875, 2.015625, 0.1995849609375, 1.314453125, 2.986328125, 0.08807373046875, 1.8154296875, 0.48095703125, 0.066162109375, 0.2978515625, 0.067626953125], "tokens": [1468, 629, 594, 280, 225, 38, 319, 310, 429, 225, 35, 45]}
{"line_number": 1135, "line_type": "generated", "code": "\n            }\n\n            final double midPoint = 0.5 * (left + right);\n            work[pingPong] = midPoint;\n            dqd(index, n);\n            if (work[pingPong] > 0.0)", "entropy": 0.294921875, "is_bug_line": true, "sus_score": 0.83262699842453, "per_token_entropy": [0.06536865234375, 0.048858642578125, 0.212158203125, 1.0703125, 0.034912109375, 0.7734375, 0.763671875, 0.0302886962890625, 0.322021484375, 0.0017805099487304688, 3.886222839355469e-05, 0.0015926361083984375, 0.002590179443359375, 0.00868988037109375, 0.136962890625, 0.0019283294677734375, 0.0022029876708984375, 0.0018815994262695312, 0.2197265625, 1.9365234375, 0.0228424072265625, 1.310546875, 0.00762939453125, 3.337860107421875e-06, 0.0205841064453125, 0.05181884765625, 0.0811767578125, 7.176399230957031e-05, 0.004978179931640625, 0.3603515625, 0.6748046875, 0.1397705078125, 0.046844482421875, 0.0780029296875, 0.01161956787109375, 0.84033203125, 0.01514434814453125, 0.61376953125, 1.4560546875, 0.1229248046875, 1.43359375, 0.005802154541015625, 0.60986328125, 0.00024962425231933594, 6.031990051269531e-05, 0.060394287109375, 0.76904296875, 0.6484375, 0.010406494140625, 0.276123046875, 0.016265869140625, 0.0103607177734375], "tokens": [324, 320, 1064, 1158, 2064, 11906, 1943, 280, 225, 34, 32, 39, 319, 308, 1873, 474, 2091, 293, 324, 1389, 77, 7075, 66, 788, 79, 280, 11906, 1943, 45, 324, 343, 24103, 26, 1055, 30, 310, 293, 324, 415, 308, 1007, 77, 7075, 66, 788, 79, 848, 225, 34, 32, 34, 27]}
{"line_number": 1136, "line_type": "original", "code": "            for (int i = 0; i < j; i += 4) {", "entropy": 1.0390625, "is_bug_line": false, "sus_score": 0.83262699842453, "per_token_entropy": [4.53125, 1.587890625, 0.0029506683349609375, 0.006755828857421875, 3.1796875, 0.26953125, 0.11956787109375, 0.0156707763671875, 0.006519317626953125, 0.00299835205078125, 0.0016126632690429688, 7.3515625, 0.266357421875, 1.9169921875, 0.167236328125, 0.125732421875, 0.1654052734375, 0.0090179443359375, 0.009857177734375], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 594, 45, 595, 1454, 225, 38, 27, 301]}
{"line_number": 1136, "line_type": "generated", "code": "\n            // compute the matrix-vector product\n            final double[] v = work[2 * main.length + pingPong];\n            for (int k = 0; k < n; ++k) {\n                v[k] = work[4", "entropy": 0.5107421875, "is_bug_line": false, "sus_score": 0.83262699842453, "per_token_entropy": [0.1741943359375, 1.1318359375, 1.6630859375, 1.064453125, 3.640625, 0.4638671875, 0.329833984375, 0.06121826171875, 0.904296875, 1.7275390625, 0.10992431640625, 1.841796875, 2.470703125, 0.134521484375, 0.70458984375, 1.1259765625, 2.150390625, 0.04852294921875, 0.5947265625, 0.0233306884765625, 0.000732421875, 0.3525390625, 0.74365234375, 0.0006527900695800781, 1.3113021850585938e-06, 0.09698486328125, 0.07415771484375, 0.66064453125, 0.00182342529296875, 0.007022857666015625, 0.96826171875, 0.0028591156005859375, 0.132568359375, 0.0190887451171875, 0.01222991943359375, 0.0008878707885742188, 0.0015239715576171875, 0.3466796875, 0.01508331298828125, 0.047088623046875, 0.0016813278198242188, 0.00439453125, 0.006237030029296875, 0.02056884765625, 0.31591796875, 0.007114410400390625, 0.1524658203125, 0.046844482421875, 0.06451416015625, 0.66259765625, 0.021026611328125, 1.3935546875], "tokens": [324, 434, 7596, 322, 5045, 31, 2402, 4054, 324, 1158, 2064, 1178, 354, 280, 1389, 77, 36, 319, 2575, 32, 1322, 474, 17007, 66, 788, 970, 324, 436, 308, 410, 831, 280, 225, 34, 45, 831, 333, 310, 45, 3311, 93, 27, 301, 400, 354, 77, 93, 79, 280, 1389, 77, 38]}
{"line_number": 1137, "line_type": "original", "code": "                for (int k = 0; k < 4; k += step) {", "entropy": 1.2080078125, "is_bug_line": false, "sus_score": 0.8294588923454285, "per_token_entropy": [7.3203125, 4.63671875, 0.004459381103515625, 0.014312744140625, 1.412109375, 0.00885772705078125, 0.25732421875, 0.06005859375, 0.0117645263671875, 0.002910614013671875, 0.0026702880859375, 2.076171875, 0.429931640625, 0.6376953125, 2.7109375, 1.185546875, 2.13671875, 0.03131103515625, 0.0181884765625], "tokens": [2071, 436, 308, 410, 831, 280, 225, 34, 45, 831, 333, 225, 38, 45, 831, 1454, 3111, 27, 301]}
{"line_number": 1137, "line_type": "generated", "code": "\n            // compute the eigenvalue\n            final double lambda = 0.5 * (left + right);\n\n            // update the interval\n            if (Math.abs(lambda - work[4 * (n - 1) + pingPong]) < margin", "entropy": 0.49951171875, "is_bug_line": false, "sus_score": 0.8294588923454285, "per_token_entropy": [0.1463623046875, 0.76904296875, 1.5927734375, 1.1494140625, 2.046875, 0.2021484375, 0.98681640625, 0.69482421875, 0.043853759765625, 2.62890625, 0.1243896484375, 1.1826171875, 0.0033397674560546875, 0.00243377685546875, 0.003875732421875, 0.00437164306640625, 0.01190948486328125, 0.09222412109375, 0.0027942657470703125, 0.003322601318359375, 0.025360107421875, 0.5712890625, 0.05438232421875, 1.2646484375, 1.009765625, 1.451171875, 0.1358642578125, 0.53515625, 0.086181640625, 1.451171875, 0.1292724609375, 0.1329345703125, 0.0019502639770507812, 0.9482421875, 0.43603515625, 1.0107421875, 0.0058441162109375, 1.3115234375, 0.0071563720703125, 1.0068359375, 0.61181640625, 0.0289459228515625, 0.011505126953125, 0.00418853759765625, 0.00305938720703125, 0.009613037109375, 0.327392578125, 0.00012564659118652344, 2.384185791015625e-07, 0.0302734375, 0.6455078125, 1.0361328125], "tokens": [324, 434, 7596, 322, 30880, 853, 324, 1158, 2064, 9254, 280, 225, 34, 32, 39, 319, 308, 1873, 474, 2091, 293, 1064, 434, 1974, 322, 7898, 324, 415, 308, 5717, 32, 3596, 26, 5962, 429, 1389, 77, 38, 319, 308, 96, 429, 225, 35, 27, 474, 17007, 66, 788, 1130, 333, 3295]}
{"line_number": 1203, "line_type": "original", "code": "            if ((range < absoluteTolerance) ||", "entropy": 2.515625, "is_bug_line": false, "sus_score": 0.7623648643493652, "per_token_entropy": [7.48828125, 2.9375, 3.759765625, 7.60546875, 0.10186767578125, 0.73046875, 0.0015745162963867188, 0.00876617431640625, 0.0135040283203125], "tokens": [1468, 415, 1833, 3585, 333, 7976, 26265, 27, 1276]}
{"line_number": 1203, "line_type": "generated", "code": "\n    private void decompose(final double lambda, final int index, final int n) {\n\n        // compute the eigenvalues of T-&lambda;I\n        final double[] eigenvalues = eigenvaluesRange(index, n);\n        final double lower = eigen", "entropy": 0.33935546875, "is_bug_line": false, "sus_score": 0.7623648643493652, "per_token_entropy": [0.1536865234375, 0.08209228515625, 0.0255584716796875, 0.990234375, 0.00450897216796875, 1.123046875, 0.11639404296875, 0.0134735107421875, 0.01393890380859375, 0.01103973388671875, 0.06842041015625, 0.00569915771484375, 0.0035858154296875, 0.0033206939697265625, 0.0265350341796875, 0.0003285408020019531, 0.0005402565002441406, 0.01171112060546875, 0.019775390625, 0.309814453125, 0.42041015625, 2.5, 1.078125, 1.9541015625, 0.0736083984375, 0.84814453125, 1.017578125, 0.50439453125, 0.0009889602661132812, 0.005420684814453125, 0.0134429931640625, 0.475341796875, 1.3154296875, 0.1824951171875, 0.337646484375, 0.77490234375, 0.3037109375, 0.0313720703125, 0.5615234375, 0.007404327392578125, 0.0399169921875, 0.002796173095703125, 0.0201873779296875, 0.0037384033203125, 0.0025615692138671875, 0.00624847412109375, 0.32421875, 0.5791015625, 0.027008056640625, 0.81005859375, 0.364501953125, 0.06854248046875], "tokens": [284, 945, 763, 409, 9307, 26, 3220, 2064, 9254, 30, 1158, 629, 1650, 30, 1158, 629, 310, 27, 301, 584, 434, 7596, 322, 30880, 2810, 432, 394, 18878, 5962, 45, 59, 291, 1158, 2064, 1178, 30880, 2810, 280, 30880, 2810, 3198, 26, 1055, 30, 310, 293, 291, 1158, 2064, 7216, 280, 30880]}
{"line_number": 1534, "line_type": "original", "code": "                final int np = nn - 2 * pingPong;", "entropy": 1.6650390625, "is_bug_line": false, "sus_score": 0.7611052393913269, "per_token_entropy": [6.26171875, 5.43359375, 2.6796875, 4.953125, 0.76416015625, 1.27734375, 0.159912109375, 0.1607666015625, 0.814453125, 0.61962890625, 0.030517578125, 0.00012218952178955078, 2.384185791015625e-07, 0.1552734375], "tokens": [2071, 1158, 629, 2065, 280, 8348, 429, 225, 36, 319, 17007, 66, 788, 45]}
{"line_number": 1534, "line_type": "generated", "code": "\n            // check for termination.\n            if (tau  <=  work[0]) {\n                work[0] = tau;\n                return;\n            }\n\n            // update the trust region bound.\n            double dTau = tau - work[0];\n           ", "entropy": 0.67529296875, "is_bug_line": false, "sus_score": 0.7611052393913269, "per_token_entropy": [0.7216796875, 0.92333984375, 3.59375, 0.9326171875, 2.02734375, 0.349365234375, 0.1253662109375, 0.28466796875, 0.09295654296875, 0.7822265625, 0.947265625, 0.7041015625, 0.1993408203125, 2.638671875, 0.0174407958984375, 1.802734375, 0.2054443359375, 0.061492919921875, 0.1907958984375, 2.072265625, 0.005031585693359375, 0.2476806640625, 0.0037517547607421875, 0.2056884765625, 0.16748046875, 0.006927490234375, 0.26904296875, 1.119140625, 0.007122039794921875, 0.0160675048828125, 0.00141143798828125, 0.57275390625, 0.1104736328125, 1.2392578125, 1.841796875, 1.490234375, 0.1385498046875, 0.65087890625, 0.377197265625, 0.07012939453125, 1.7294921875, 1.634765625, 1.5703125, 0.10736083984375, 0.26416015625, 1.49609375, 0.324462890625, 0.619140625, 0.0009026527404785156, 0.0689697265625, 0.00846099853515625, 0.08154296875], "tokens": [324, 434, 1505, 436, 34704, 32, 324, 415, 308, 20635, 225, 2511, 225, 1389, 77, 34, 1130, 301, 400, 1389, 77, 34, 79, 280, 30225, 45, 400, 442, 45, 324, 320, 1064, 434, 1974, 322, 18074, 6699, 5085, 32, 324, 2064, 343, 70, 4452, 280, 30225, 429, 1389, 77, 34, 970, 324]}
{"line_number": 645, "line_type": "original", "code": "                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);", "entropy": 1.1240234375, "is_bug_line": false, "sus_score": 0.7602578401565552, "per_token_entropy": [8.2734375, 2.640625, 1.029296875, 3.11328125, 0.43505859375, 0.0023937225341796875, 4.47265625, 0.00022780895233154297, 0.374755859375, 0.071044921875, 0.00121307373046875, 0.06060791015625, 0.0014448165893554688, 0.050567626953125, 0.263671875, 6.0546875, 0.1602783203125, 1.583984375, 0.036285400390625, 0.0968017578125, 0.0007719993591308594, 0.437255859375, 0.0628662109375, 0.00041174888610839844, 0.001621246337890625, 0.01404571533203125], "tokens": [2071, 1158, 2064, 1591, 19630, 349, 262, 280, 225, 34, 32, 36, 39, 319, 308, 37, 319, 2155, 77, 34, 79, 474, 2155, 77, 35, 1989]}
{"line_number": 645, "line_type": "generated", "code": "\n        // add 1-by-1 blocks\n        for (int i = 0; i < main.length; ++i) {\n            list.add(i + 1);\n        }\n\n        // add 2-by-2 blocks\n       ", "entropy": 0.295654296875, "is_bug_line": false, "sus_score": 0.7602578401565552, "per_token_entropy": [0.2066650390625, 1.1494140625, 2.427734375, 2.802734375, 0.349365234375, 1.2646484375, 0.74609375, 0.0216217041015625, 0.16552734375, 0.493408203125, 0.36962890625, 0.81884765625, 0.0014314651489257812, 0.01319122314453125, 0.30322265625, 0.011566162109375, 0.0455322265625, 0.0302276611328125, 0.019805908203125, 0.004077911376953125, 0.006744384765625, 0.833984375, 0.036041259765625, 0.00024187564849853516, 0.249755859375, 0.1912841796875, 0.0008673667907714844, 0.001300811767578125, 0.003734588623046875, 0.05596923828125, 0.73095703125, 0.00015807151794433594, 0.0022983551025390625, 0.0009741783142089844, 0.07550048828125, 0.268798828125, 0.0020275115966796875, 0.0015249252319335938, 0.0029659271240234375, 0.0183563232421875, 0.00021839141845703125, 0.56396484375, 0.354736328125, 0.29931640625, 0.10809326171875, 0.09954833984375, 0.00577545166015625, 0.0018815994262695312, 0.0015592575073242188, 0.0087432861328125, 0.019683837890625, 0.1812744140625], "tokens": [291, 434, 1015, 225, 35, 31, 1170, 31, 35, 9058, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 2575, 32, 1322, 45, 3311, 91, 27, 301, 324, 1149, 32, 669, 26, 91, 474, 225, 35, 293, 291, 320, 584, 434, 1015, 225, 36, 31, 1170, 31, 36, 9058, 291]}
{"line_number": 1217, "line_type": "original", "code": "        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));", "entropy": 0.56787109375, "is_bug_line": false, "sus_score": 0.7596237063407898, "per_token_entropy": [2.740234375, 8.203125, 1.1162109375, 2.287109375, 0.00611114501953125, 0.69873046875, 0.006801605224609375, 0.22412109375, 0.02276611328125, 0.298583984375, 0.06549072265625, 0.0226593017578125, 0.01099395751953125, 0.004772186279296875, 0.00311279296875, 0.0113525390625, 0.0770263671875, 0.051910400390625, 7.82012939453125e-05, 0.00287628173828125, 0.0001895427703857422, 0.00516510009765625, 0.0214080810546875, 0.00036072731018066406, 0.004619598388671875, 0.0001004934310913086, 0.01088714599609375, 0.0070953369140625], "tokens": [351, 8342, 280, 4175, 32, 887, 26, 7607, 30, 2091, 474, 225, 35, 34, 34, 319, 4175, 2755, 32, 18386, 42027, 319, 4175, 32, 3596, 26, 990, 876]}
{"line_number": 1217, "line_type": "generated", "code": "\n     * Find a non-negative eigenvalue of a symmetric tridiagonal matrix.\n     * <p>This method is an implementation of algorithm 4.4.5 from Dhillon's\n     * thesis.</p>\n     * @", "entropy": 0.38623046875, "is_bug_line": false, "sus_score": 0.7596237063407898, "per_token_entropy": [0.9189453125, 0.314453125, 1.83203125, 1.6962890625, 2.7890625, 0.2548828125, 0.429931640625, 1.1640625, 0.02301025390625, 0.488525390625, 1.271484375, 0.77880859375, 0.51171875, 0.00037169456481933594, 0.0018863677978515625, 0.0012264251708984375, 0.128173828125, 0.85791015625, 0.036376953125, 0.0017328262329101562, 0.357177734375, 0.004436492919921875, 0.00980377197265625, 1.0029296875, 0.1934814453125, 0.568359375, 0.0784912109375, 0.01483154296875, 0.00421905517578125, 0.7216796875, 0.012054443359375, 0.1727294921875, 0.0005812644958496094, 0.1744384765625, 0.0017910003662109375, 2.0390625, 0.03668212890625, 0.391845703125, 0.0033397674560546875, 3.981590270996094e-05, 0.00025773048400878906, 0.00992584228515625, 0.058441162109375, 1.049041748046875e-05, 0.0137786865234375, 0.0002589225769042969, 0.54638671875, 0.0012073516845703125, 0.0019474029541015625, 0.04290771484375, 0.002532958984375, 0.1055908203125], "tokens": [275, 319, 7477, 312, 2979, 31, 15272, 30880, 853, 432, 312, 37038, 554, 10746, 481, 11008, 5045, 32, 275, 319, 333, 98, 48, 2272, 1411, 438, 600, 4736, 432, 8218, 225, 38, 32, 38, 32, 39, 645, 475, 90, 728, 267, 1182, 275, 319, 322, 17085, 1730, 98, 48, 275, 319, 477]}
{"line_number": 649, "line_type": "original", "code": "                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);", "entropy": 1.90625, "is_bug_line": false, "sus_score": 0.7589433789253235, "per_token_entropy": [6.05859375, 2.126953125, 5.1328125, 3.783203125, 0.168701171875, 4.81640625, 0.001384735107421875, 1.630859375, 7.95703125, 0.82080078125, 0.0008707046508789062, 0.048614501953125, 3.2421875, 1.74609375, 0.32568359375, 0.646484375, 3.1875, 0.49755859375, 3.013671875, 0.32275390625, 1.826171875, 0.00015747547149658203, 0.0001251697540283203, 0.00028228759765625, 0.288330078125], "tokens": [2071, 1158, 1905, 9173, 3679, 261, 280, 308, 658, 19630, 349, 1534, 429, 225, 35, 27, 2377, 308, 96, 429, 8019, 19630, 349, 1534, 293]}
{"line_number": 649, "line_type": "generated", "code": "\n            absDCurrent = Math.abs(secondary[i]);\n            if (absDCurrent < absDPrevious * accuracy) {\n                list.add(i + 1);\n            }\n        }\n\n        // splitting preserving absolute accuracy\n        double absE", "entropy": 0.34521484375, "is_bug_line": false, "sus_score": 0.7589433789253235, "per_token_entropy": [0.10565185546875, 0.44091796875, 0.0014867782592773438, 0.0030651092529296875, 0.298583984375, 0.02813720703125, 0.005527496337890625, 0.369873046875, 0.00313568115234375, 0.56640625, 0.006259918212890625, 0.0291748046875, 0.2181396484375, 0.1434326171875, 0.4208984375, 0.1405029296875, 0.9609375, 0.004276275634765625, 0.2578125, 1.6484375, 1.1201171875, 0.05877685546875, 0.00696563720703125, 0.3466796875, 1.4794921875, 0.36962890625, 0.0223236083984375, 0.09576416015625, 0.1876220703125, 0.00013685226440429688, 0.0006613731384277344, 0.0008225440979003906, 0.03228759765625, 0.5205078125, 0.01103973388671875, 0.053070068359375, 0.001953125, 0.14794921875, 0.0023593902587890625, 0.1771240234375, 0.0006299018859863281, 0.216064453125, 0.2001953125, 0.9404296875, 0.662109375, 0.0005445480346679688, 0.7978515625, 0.0022106170654296875, 0.07135009765625, 1.1298828125, 2.65234375, 0.98779296875], "tokens": [324, 11366, 54, 3059, 280, 4175, 32, 3596, 26, 11234, 77, 91, 1989, 324, 415, 308, 3596, 54, 3059, 333, 11366, 54, 11698, 319, 14222, 27, 301, 400, 1149, 32, 669, 26, 91, 474, 225, 35, 293, 324, 320, 291, 320, 584, 434, 38431, 1406, 21408, 7976, 14222, 291, 2064, 11366, 55]}
{"line_number": 1168, "line_type": "original", "code": "        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));", "entropy": 1.0517578125, "is_bug_line": false, "sus_score": 0.7589142918586731, "per_token_entropy": [5.953125, 3.326171875, 0.05780029296875, 6.62109375, 2.470703125, 0.64501953125, 2.388671875, 0.0755615234375, 0.65380859375, 0.004787445068359375, 0.5771484375, 0.01800537109375, 0.04754638671875, 0.0007929801940917969, 0.2386474609375, 0.0159149169921875, 0.0187225341796875, 5.984306335449219e-05, 0.00286865234375, 6.568431854248047e-05, 0.0017118453979492188, 0.0172882080078125], "tokens": [351, 1158, 2064, 273, 14373, 280, 4175, 32, 1449, 26, 5717, 32, 3596, 26, 5729, 471, 4175, 32, 3596, 26, 7607, 876]}
{"line_number": 1168, "line_type": "generated", "code": "\n\n        return new double[] {lower, upper};\n\n    }\n\n    /**\n     * Count the number of eigenvalues of the current block that are greater than\n     * the given value.\n     * @param value threshold\n     * @param index index of the first row", "entropy": 0.38671875, "is_bug_line": false, "sus_score": 0.7589142918586731, "per_token_entropy": [0.2354736328125, 0.62353515625, 0.0159454345703125, 0.0015993118286132812, 0.052398681640625, 0.00110626220703125, 0.8271484375, 0.003200531005859375, 0.0023403167724609375, 0.00687408447265625, 0.1085205078125, 0.00043272972106933594, 0.0738525390625, 0.023162841796875, 0.0211181640625, 7.081031799316406e-05, 0.53125, 0.50439453125, 0.33544921875, 0.00992584228515625, 0.57666015625, 0.082763671875, 1.28515625, 0.943359375, 1.9521484375, 0.9794921875, 1.6865234375, 0.25048828125, 1.79296875, 1.1171875, 0.16845703125, 0.00017726421356201172, 0.76416015625, 0.30859375, 1.283203125, 0.1021728515625, 0.11273193359375, 0.00933074951171875, 0.060150146484375, 0.0018472671508789062, 0.57373046875, 1.4111328125, 0.9365234375, 0.001216888427734375, 0.00020551681518554688, 0.01519775390625, 0.07794189453125, 0.1563720703125, 0.0169525146484375, 0.0201416015625, 0.0198822021484375, 0.017303466796875], "tokens": [584, 442, 537, 2064, 1178, 301, 5729, 30, 8342, 1255, 446, 320, 446, 1022, 275, 319, 9618, 322, 1451, 432, 30880, 2810, 432, 322, 1550, 2163, 688, 884, 10761, 2784, 275, 319, 322, 2702, 786, 32, 275, 319, 477, 753, 786, 10084, 275, 319, 477, 753, 1650, 1650, 432, 322, 1932, 2698]}
{"line_number": 1232, "line_type": "original", "code": "        int count = (ratio > 0) ? 0 : 1;", "entropy": 1.9287109375, "is_bug_line": false, "sus_score": 0.758176326751709, "per_token_entropy": [5.16796875, 8.6640625, 3.18359375, 0.1463623046875, 3.978515625, 6.25390625, 2.326171875, 0.2958984375, 0.1025390625, 0.148193359375, 0.01099395751953125, 0.30126953125, 1.658203125, 0.0055999755859375, 0.475830078125, 0.045074462890625, 0.01221466064453125], "tokens": [351, 629, 2385, 280, 308, 11368, 848, 225, 34, 27, 1018, 225, 34, 499, 225, 35, 45]}
{"line_number": 1232, "line_type": "generated", "code": "\n                d = work[j4] - tau;\n                work[j4 - 3] = d * d + work[j4 - 2] * work[j4 - 2];\n                if (d < dMin) {\n                   ", "entropy": 0.238525390625, "is_bug_line": false, "sus_score": 0.758176326751709, "per_token_entropy": [0.360107421875, 1.568359375, 0.322509765625, 0.611328125, 0.00032019615173339844, 0.0026798248291015625, 2.9325485229492188e-05, 0.1885986328125, 0.07196044921875, 0.343017578125, 0.49853515625, 0.1583251953125, 0.89013671875, 0.0014629364013671875, 0.001232147216796875, 1.6450881958007812e-05, 0.363037109375, 0.0006737709045410156, 0.38232421875, 0.0009489059448242188, 0.038787841796875, 0.662109375, 0.38525390625, 0.20703125, 1.431640625, 0.08563232421875, 0.0002536773681640625, 0.0003654956817626953, 2.574920654296875e-05, 0.069580078125, 0.0004138946533203125, 0.12274169921875, 0.314697265625, 0.00487518310546875, 0.08831787109375, 6.973743438720703e-05, 0.0009160041809082031, 3.6597251892089844e-05, 0.003326416015625, 0.00028634071350097656, 0.07940673828125, 0.0282440185546875, 0.48779296875, 0.86328125, 0.0298919677734375, 0.388427734375, 0.6884765625, 0.5888671875, 0.0014190673828125, 0.056488037109375, 0.0030460357666015625, 0.0068206787109375], "tokens": [400, 343, 280, 1389, 77, 92, 38, 79, 429, 30225, 45, 400, 1389, 77, 92, 38, 429, 225, 37, 79, 280, 343, 319, 343, 474, 1389, 77, 92, 38, 429, 225, 36, 79, 319, 1389, 77, 92, 38, 429, 225, 36, 970, 400, 415, 308, 86, 333, 343, 2928, 27, 301, 528]}
{"line_number": 1200, "line_type": "original", "code": "        for (int i = 0; i < maxIter; ++i) {", "entropy": 0.75830078125, "is_bug_line": false, "sus_score": 0.758176326751709, "per_token_entropy": [3.39453125, 2.7421875, 0.005035400390625, 0.021148681640625, 0.2130126953125, 0.006473541259765625, 0.07293701171875, 0.04425048828125, 0.0081787109375, 0.002056121826171875, 0.0270538330078125, 6.56640625, 0.366943359375, 0.032196044921875, 0.0211181640625, 0.0008726119995117188, 0.003566741943359375, 0.118408203125], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1769, 3853, 45, 3311, 91, 27, 301]}
{"line_number": 1200, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Decompose the shifted tridiagonal matrix T-&lambda;I as LDL<sup>T</sup>.\n     * <p>A shifted symmetric tridiagonal matrix T can be decomposed as\n     * L", "entropy": 0.1416015625, "is_bug_line": false, "sus_score": 0.758176326751709, "per_token_entropy": [1.609375, 0.288330078125, 0.490478515625, 0.1004638671875, 0.045501708984375, 0.00043702125549316406, 3.021484375, 0.09320068359375, 0.445556640625, 0.37353515625, 0.09881591796875, 0.00010383129119873047, 0.00028705596923828125, 0.0002789497375488281, 0.021026611328125, 0.0701904296875, 0.1597900390625, 0.0028133392333984375, 0.01055145263671875, 0.0019683837890625, 0.04534912109375, 0.2020263671875, 0.0263519287109375, 0.004364013671875, 0.00024700164794921875, 0.00024068355560302734, 0.00036525726318359375, 0.0008044242858886719, 0.00010848045349121094, 0.07342529296875, 0.01364898681640625, 0.00597381591796875, 0.07330322265625, 0.0005297660827636719, 0.0010814666748046875, 0.056396484375, 0.006038665771484375, 0.002178192138671875, 0.001247406005859375, 5.638599395751953e-05, 2.5033950805664062e-05, 3.0517578125e-05, 0.00020074844360351562, 0.002658843994140625, 0.0017223358154296875, 0.00010979175567626953, 0.0007963180541992188, 1.3589859008789062e-05, 0.0017995834350585938, 0.003154754638671875, 2.2292137145996094e-05, 0.00600433349609375], "tokens": [284, 320, 446, 1022, 275, 319, 1513, 9307, 322, 44754, 554, 10746, 481, 11008, 5045, 394, 18878, 5962, 45, 59, 619, 498, 4112, 46, 5540, 48, 70, 377, 5540, 4503, 275, 319, 333, 98, 48, 51, 44754, 37038, 554, 10746, 481, 11008, 5045, 394, 883, 526, 409, 44872, 619, 275, 319, 498]}
{"line_number": 1209, "line_type": "original", "code": "            final double middle = 0.5 * (left + right);", "entropy": 1.8115234375, "is_bug_line": false, "sus_score": 0.7562827467918396, "per_token_entropy": [3.36328125, 1.1328125, 0.00778961181640625, 6.3984375, 0.255126953125, 3.8515625, 0.60693359375, 0.033935546875, 0.24755859375, 0.045440673828125, 0.418212890625, 10.6875, 0.08935546875, 0.0103759765625, 0.016204833984375], "tokens": [1468, 1158, 2064, 11852, 280, 225, 34, 32, 39, 319, 308, 1873, 474, 2091, 293]}
{"line_number": 1209, "line_type": "generated", "code": "\n            work[fourI] = Math.abs(eiM1);\n            work[fourI + 1] = Math.abs(di);\n            work[fourI + 2] = Math.abs(eiM1);\n            work[", "entropy": 0.2188720703125, "is_bug_line": false, "sus_score": 0.7562827467918396, "per_token_entropy": [0.16259765625, 1.138671875, 0.0036220550537109375, 0.259521484375, 1.9073486328125e-05, 0.8623046875, 1.0029296875, 0.46142578125, 0.007808685302734375, 0.442626953125, 0.005672454833984375, 0.3046875, 0.0005154609680175781, 5.7220458984375e-06, 0.1771240234375, 0.278564453125, 0.423828125, 0.001461029052734375, 0.0241851806640625, 2.7418136596679688e-05, 0.223876953125, 0.041473388671875, 0.2939453125, 0.002239227294921875, 0.0226287841796875, 0.468017578125, 0.0023441314697265625, 0.185791015625, 0.0065460205078125, 1.193359375, 0.2462158203125, 0.16162109375, 0.2296142578125, 0.0004527568817138672, 0.005710601806640625, 2.205371856689453e-05, 0.005886077880859375, 0.0010156631469726562, 0.053253173828125, 0.0005517005920410156, 0.0009064674377441406, 0.2724609375, 0.00936126708984375, 0.036956787109375, 0.00582122802734375, 1.568359375, 0.001155853271484375, 0.002201080322265625, 0.410888671875, 0.24169921875, 0.1270751953125, 0.00029397010803222656], "tokens": [324, 1389, 77, 17483, 59, 79, 280, 4175, 32, 3596, 26, 17014, 63, 35, 293, 324, 1389, 77, 17483, 59, 474, 225, 35, 79, 280, 4175, 32, 3596, 26, 1323, 293, 324, 1389, 77, 17483, 59, 474, 225, 36, 79, 280, 4175, 32, 3596, 26, 17014, 63, 35, 293, 324, 1389, 77]}
{"line_number": 647, "line_type": "original", "code": "                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);", "entropy": 1.2587890625, "is_bug_line": false, "sus_score": 0.7562827467918396, "per_token_entropy": [8.1015625, 2.498046875, 0.124267578125, 7.45703125, 0.419189453125, 0.03240966796875, 4.21484375, 0.0004405975341796875, 0.446044921875, 0.328857421875, 0.0003204345703125, 3.572265625, 0.003307342529296875, 0.014495849609375, 0.32373046875, 4.578125, 0.06243896484375, 0.356201171875, 0.0019512176513671875, 0.02691650390625, 1.318359375, 0.07220458984375, 0.0240478515625, 0.01364898681640625, 0.00021827220916748047, 0.0016756057739257812, 0.0124359130859375], "tokens": [2071, 1158, 2064, 8019, 19630, 349, 261, 280, 225, 34, 32, 36, 39, 319, 308, 3585, 77, 34, 79, 474, 225, 37, 319, 2155, 77, 35, 1989]}
{"line_number": 647, "line_type": "generated", "code": "\n        double absECurrent = Math.abs(eVectors[0][0]);\n        double dMax = absDCurrent;\n        double eMax = absECurrent;\n        for (int i = 1; i < main.length; ++i", "entropy": 0.3193359375, "is_bug_line": false, "sus_score": 0.7562827467918396, "per_token_entropy": [0.1484375, 0.473388671875, 0.61376953125, 0.33251953125, 0.1510009765625, 0.01248931884765625, 0.17138671875, 0.0012054443359375, 0.06298828125, 0.0019083023071289062, 1.380859375, 2.556640625, 0.08807373046875, 0.2127685546875, 0.1710205078125, 0.07305908203125, 0.06622314453125, 0.24560546875, 0.5517578125, 2.970703125, 1.861328125, 0.75830078125, 0.305908203125, 0.005016326904296875, 0.0003533363342285156, 0.1363525390625, 0.0269775390625, 0.04339599609375, 0.08837890625, 0.007175445556640625, 0.002964019775390625, 0.0106048583984375, 0.0034084320068359375, 4.4465065002441406e-05, 0.020660400390625, 0.332275390625, 1.2890625, 0.0021305084228515625, 0.0174102783203125, 1.0166015625, 0.00824737548828125, 0.004276275634765625, 0.1085205078125, 0.00804901123046875, 0.0064697265625, 0.002681732177734375, 0.16455078125, 0.00824737548828125, 5.1856040954589844e-05, 0.0245208740234375, 0.055206298828125, 0.00106048583984375], "tokens": [291, 2064, 11366, 55, 3059, 280, 4175, 32, 3596, 26, 87, 27841, 77, 34, 1674, 34, 1989, 291, 2064, 343, 2708, 280, 11366, 54, 3059, 45, 291, 2064, 484, 2708, 280, 11366, 55, 3059, 45, 291, 436, 308, 410, 595, 280, 225, 35, 45, 595, 333, 2575, 32, 1322, 45, 3311, 91]}
{"line_number": 1171, "line_type": "original", "code": "        final int maxIter =", "entropy": 1.6591796875, "is_bug_line": false, "sus_score": 0.7558135390281677, "per_token_entropy": [4.94140625, 1.9755859375, 1.0634765625, 1.689453125, 0.1986083984375, 0.08648681640625], "tokens": [351, 1158, 629, 1769, 3853, 280]}
{"line_number": 1171, "line_type": "generated", "code": "\n        final double[] bounds = new double[2];\n        bounds[0] = lower;\n        bounds[1] = upper;\n        return bounds;", "entropy": 0.3701171875, "is_bug_line": false, "sus_score": 0.7558135390281677, "per_token_entropy": [1.689453125, 1.98046875, 0.3408203125, 1.490234375, 2.69140625, 0.0237579345703125, 0.54541015625, 0.007198333740234375, 0.259033203125, 0.1444091796875, 0.06146240234375, 0.16064453125, 1.0859375, 0.0039043426513671875, 0.03594970703125, 0.0008082389831542969, 0.003643035888671875, 0.4111328125, 0.35693359375, 0.0260162353515625, 0.0053253173828125, 5.0902366638183594e-05, 0.00325775146484375, 5.7697296142578125e-05, 0.0004124641418457031, 0.004154205322265625, 0.00214385986328125, 0.10003662109375, 0.028656005859375, 0.0091705322265625, 0.0023288726806640625], "tokens": [291, 1158, 2064, 1178, 11615, 280, 537, 2064, 77, 36, 970, 291, 11615, 77, 34, 79, 280, 7216, 45, 291, 11615, 77, 35, 79, 280, 8342, 45, 291, 442, 11615, 45]}
{"line_number": 1169, "line_type": "original", "code": "        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);", "entropy": 1.1962890625, "is_bug_line": false, "sus_score": 0.7552984952926636, "per_token_entropy": [4.40234375, 2.83203125, 0.07696533203125, 5.2578125, 0.0654296875, 0.12396240234375, 2.037109375, 0.1895751953125, 1.888671875, 0.01230621337890625, 2.037109375, 0.1446533203125, 0.00021183490753173828, 0.01079559326171875, 0.000141143798828125, 0.06793212890625], "tokens": [351, 1158, 2064, 6491, 26265, 280, 4175, 32, 8663, 26, 5717, 2755, 32, 18386, 42027, 293]}
{"line_number": 1169, "line_type": "generated", "code": "\n        return new double[] { lower, upper };\n\n    }\n\n    /**\n     * Count the number of eigenvalues in the interval {@code [lower, upper]}.\n     * @param lower lower bound\n     * @param index index of the first row of the", "entropy": 0.29638671875, "is_bug_line": false, "sus_score": 0.7552984952926636, "per_token_entropy": [0.580078125, 0.4580078125, 0.03021240234375, 0.0022487640380859375, 0.08782958984375, 0.002437591552734375, 0.6328125, 0.00960540771484375, 0.002208709716796875, 0.017333984375, 0.1729736328125, 0.0006766319274902344, 0.0780029296875, 0.0262603759765625, 0.02337646484375, 0.0001226663589477539, 0.491943359375, 0.56494140625, 0.3779296875, 0.009613037109375, 0.60009765625, 0.08282470703125, 1.3642578125, 0.845703125, 1.1904296875, 1.73046875, 0.07867431640625, 0.611328125, 0.92919921875, 0.026885986328125, 0.1312255859375, 1.0419921875, 0.0027618408203125, 0.0217437744140625, 0.01129150390625, 0.1148681640625, 0.0018815994262695312, 0.47021484375, 0.303955078125, 0.36572265625, 1.462890625, 4.220008850097656e-05, 7.784366607666016e-05, 0.000690460205078125, 0.153076171875, 0.1087646484375, 0.0302276611328125, 0.0322265625, 0.01708984375, 0.0255889892578125, 0.07513427734375, 0.004547119140625], "tokens": [291, 442, 537, 2064, 1178, 301, 7216, 30, 8342, 1472, 446, 320, 446, 1022, 275, 319, 9618, 322, 1451, 432, 30880, 2810, 328, 322, 7898, 3088, 687, 428, 5729, 30, 8342, 79, 4009, 275, 319, 477, 753, 7216, 7216, 5085, 275, 319, 477, 753, 1650, 1650, 432, 322, 1932, 2698, 432, 322]}
{"line_number": 1170, "line_type": "original", "code": "        final double absoluteTolerance = 4 * minPivot;", "entropy": 1.4013671875, "is_bug_line": false, "sus_score": 0.7533925175666809, "per_token_entropy": [4.5078125, 2.357421875, 0.419189453125, 3.748046875, 0.00455474853515625, 0.06207275390625, 0.9248046875, 3.064453125, 0.23095703125, 1.0263671875, 0.0059661865234375, 0.4560546875], "tokens": [351, 1158, 2064, 7976, 26265, 280, 225, 38, 319, 1847, 28267, 45]}
{"line_number": 1170, "line_type": "generated", "code": "\n\n    }\n\n    /**\n     * Count the eigenvalues of the block with the given eigenvalue.\n     * @param eigenvalue the eigenvalue to be tested\n     * @param index index of the first row of the block\n     * @param n number of rows", "entropy": 0.329833984375, "is_bug_line": false, "sus_score": 0.7533925175666809, "per_token_entropy": [0.8525390625, 0.027587890625, 0.1153564453125, 0.0288238525390625, 0.019989013671875, 0.00011646747589111328, 0.51220703125, 0.58984375, 1.521484375, 0.08184814453125, 0.73828125, 0.7431640625, 1.259765625, 2.1328125, 0.84765625, 0.452880859375, 1.0947265625, 0.0106201171875, 0.634765625, 0.0305938720703125, 0.0089111328125, 0.07794189453125, 0.0014934539794921875, 0.467041015625, 0.0650634765625, 0.595703125, 0.274658203125, 0.0028324127197265625, 0.7138671875, 1.548828125, 1.2392578125, 0.0345458984375, 0.00010132789611816406, 0.000888824462890625, 0.00537872314453125, 0.06854248046875, 0.1839599609375, 0.01406097412109375, 0.01055908203125, 0.01557159423828125, 0.013702392578125, 0.03765869140625, 0.00211334228515625, 0.01102447509765625, 0.0311431884765625, 6.008148193359375e-05, 0.00043487548828125, 0.001956939697265625, 0.006988525390625, 0.0174407958984375, 0.0038013458251953125, 0.0060272216796875], "tokens": [446, 320, 446, 1022, 275, 319, 9618, 322, 30880, 2810, 432, 322, 2163, 623, 322, 2702, 30880, 853, 32, 275, 319, 477, 753, 30880, 853, 322, 30880, 853, 372, 526, 10114, 275, 319, 477, 753, 1650, 1650, 432, 322, 1932, 2698, 432, 322, 2163, 275, 319, 477, 753, 310, 1451, 432, 5760]}
{"line_number": 648, "line_type": "original", "code": "                final int threeFourthCount = countEigenValues(threeFourth, begin, n);", "entropy": 1.7236328125, "is_bug_line": false, "sus_score": 0.7533925175666809, "per_token_entropy": [7.81640625, 1.591796875, 4.69921875, 10.4453125, 3.466796875, 0.1439208984375, 0.78564453125, 0.2164306640625, 0.49267578125, 0.00853729248046875, 0.0031642913818359375, 0.0285186767578125, 3.24609375, 0.0034027099609375, 0.00864410400390625, 0.039520263671875, 0.95654296875, 0.31689453125, 0.16455078125, 0.0284576416015625], "tokens": [2071, 1158, 629, 8019, 19630, 349, 1534, 280, 2385, 26595, 3354, 26, 12192, 19630, 349, 30, 4240, 30, 310, 293]}
{"line_number": 648, "line_type": "generated", "code": "\n            absDCurrent = Math.max(absDCurrent, Math.abs(secondary[i]));\n        }\n        double threshold = 0.0;\n        if (absDCurrent > 0) {\n            threshold = Math.max(absD", "entropy": 0.41650390625, "is_bug_line": false, "sus_score": 0.7533925175666809, "per_token_entropy": [0.049530029296875, 0.837890625, 0.0066986083984375, 0.004673004150390625, 0.767578125, 0.0662841796875, 0.012908935546875, 0.2841796875, 0.0007982254028320312, 0.43994140625, 0.0010166168212890625, 7.62939453125e-06, 0.0013580322265625, 0.1510009765625, 0.0020885467529296875, 0.01024627685546875, 0.001178741455078125, 0.267578125, 0.0027446746826171875, 0.02618408203125, 0.6298828125, 0.82470703125, 0.0051727294921875, 0.342041015625, 1.02734375, 2.17578125, 0.074951171875, 2.216796875, 0.62890625, 0.277587890625, 1.318359375, 0.46142578125, 0.1148681640625, 0.93310546875, 0.050628662109375, 1.287109375, 0.008026123046875, 0.00011289119720458984, 1.0693359375, 0.28369140625, 0.045013427734375, 0.65478515625, 0.0045928955078125, 0.0587158203125, 0.12335205078125, 0.0017299652099609375, 0.8798828125, 0.302978515625, 0.31396484375, 0.00806427001953125, 2.591796875, 0.01177215576171875], "tokens": [324, 11366, 54, 3059, 280, 4175, 32, 1449, 26, 3596, 54, 3059, 30, 4175, 32, 3596, 26, 11234, 77, 91, 10674, 291, 320, 291, 2064, 10084, 280, 225, 34, 32, 34, 45, 291, 415, 308, 3596, 54, 3059, 848, 225, 34, 27, 301, 324, 10084, 280, 4175, 32, 1449, 26, 3596, 54]}
{"line_number": 900, "line_type": "original", "code": "                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&", "entropy": 1.4365234375, "is_bug_line": false, "sus_score": 0.7522523403167725, "per_token_entropy": [8.59375, 7.12109375, 0.88623046875, 0.01137542724609375, 0.279541015625, 0.006099700927734375, 1.1943359375, 4.38671875, 0.04486083984375, 0.007007598876953125, 2.5703125, 0.1337890625, 0.379638671875, 0.196044921875, 0.0006089210510253906, 0.00011348724365234375, 6.473064422607422e-05, 0.07855224609375, 0.2078857421875, 0.024993896484375, 4.87890625, 0.1102294921875, 0.44580078125, 2.90625], "tokens": [4696, 308, 1007, 77, 38, 319, 310, 34, 429, 225, 35, 79, 2511, 394, 1752, 527, 6307, 81, 36, 319, 15534, 2708, 27, 962]}
{"line_number": 900, "line_type": "generated", "code": "\n            // apply Li's forward test\n            double eMin = work[4 * n - pingPong - 1];\n            for (int i = 4 * n - pingPong; i < 4 * n - 16; i", "entropy": 0.326904296875, "is_bug_line": false, "sus_score": 0.7522523403167725, "per_token_entropy": [0.93212890625, 0.472412109375, 0.62255859375, 0.09130859375, 0.00547027587890625, 0.0987548828125, 0.0159912109375, 0.0823974609375, 1.556640625, 1.685546875, 1.173828125, 0.1400146484375, 0.5712890625, 0.0100555419921875, 0.05987548828125, 0.0018339157104492188, 0.9326171875, 0.30810546875, 1.4609375, 3.4689903259277344e-05, 1.1920928955078125e-06, 0.2218017578125, 0.0046539306640625, 0.7158203125, 0.021575927734375, 0.01250457763671875, 0.57470703125, 0.0004987716674804688, 0.0005369186401367188, 0.0316162109375, 0.00238037109375, 0.06787109375, 0.1485595703125, 0.0241851806640625, 0.64599609375, 0.08624267578125, 0.76708984375, 1.2993812561035156e-05, 1.7881393432617188e-06, 1.275390625, 0.00403594970703125, 0.29541015625, 0.024383544921875, 0.01244354248046875, 0.0013179779052734375, 0.082275390625, 1.1220703125, 0.2313232421875, 0.2156982421875, 0.0285797119140625, 0.15869140625, 0.001972198486328125], "tokens": [324, 434, 4871, 8092, 1182, 7386, 894, 324, 2064, 484, 2928, 280, 1389, 77, 38, 319, 310, 429, 17007, 66, 788, 429, 225, 35, 970, 324, 436, 308, 410, 595, 280, 225, 38, 319, 310, 429, 17007, 66, 788, 45, 595, 333, 225, 38, 319, 310, 429, 225, 35, 40, 45, 595]}
{"line_number": 1210, "line_type": "original", "code": "            if (countEigenValues(middle, index, n) >= n) {", "entropy": 1.5791015625, "is_bug_line": false, "sus_score": 0.7517053484916687, "per_token_entropy": [3.720703125, 3.072265625, 0.07647705078125, 6.3671875, 0.0728759765625, 0.0038242340087890625, 0.031280517578125, 7.109375, 0.06610107421875, 0.070556640625, 0.0684814453125, 0.0310516357421875, 0.01160430908203125, 0.135986328125, 5.55078125, 0.359130859375, 0.09783935546875], "tokens": [1468, 415, 308, 998, 26595, 3354, 26, 10511, 30, 1650, 30, 310, 27, 2377, 310, 27, 301]}
{"line_number": 1210, "line_type": "generated", "code": "\n            di = main[index + i] - squaredSecondary[index + i - 1] / di - lambda;\n            secondary[index + i - 1] = ratio;\n            work[fourI - 2] = Math.abs(", "entropy": 0.238525390625, "is_bug_line": false, "sus_score": 0.7517053484916687, "per_token_entropy": [0.140380859375, 1.8720703125, 0.362548828125, 0.0762939453125, 0.0031757354736328125, 0.08685302734375, 0.00897979736328125, 0.0941162109375, 0.0008158683776855469, 0.00836944580078125, 2.05078125, 0.0028781890869140625, 0.00039958953857421875, 0.148193359375, 0.0022296905517578125, 0.006988525390625, 0.00893402099609375, 0.0037994384765625, 0.001277923583984375, 0.00814056396484375, 0.0249786376953125, 0.1295166015625, 0.1719970703125, 0.0192413330078125, 0.0029850006103515625, 0.2744140625, 1.7939453125, 0.00323486328125, 0.08612060546875, 0.003803253173828125, 0.0081787109375, 0.11944580078125, 0.0072784423828125, 0.0036602020263671875, 0.0013551712036132812, 0.04400634765625, 0.9375, 0.11492919921875, 0.28662109375, 0.1636962890625, 0.0031299591064453125, 0.08251953125, 3.933906555175781e-06, 1.3173828125, 0.10284423828125, 1.05078125, 0.01019287109375, 0.2120361328125, 0.44384765625, 0.0035915374755859375, 0.09228515625, 0.00023090839385986328], "tokens": [324, 2068, 280, 2575, 77, 1055, 474, 595, 79, 429, 39560, 18095, 77, 1055, 474, 595, 429, 225, 35, 79, 517, 2068, 429, 9254, 45, 324, 15997, 77, 1055, 474, 595, 429, 225, 35, 79, 280, 12488, 45, 324, 1389, 77, 17483, 59, 429, 225, 36, 79, 280, 4175, 32, 3596, 26]}
{"line_number": 840, "line_type": "original", "code": "        flipIfWarranted(n, 2);", "entropy": 4.390625, "is_bug_line": false, "sus_score": 0.7513042092323303, "per_token_entropy": [6.41015625, 12.1484375, 6.25390625, 9.6484375, 8.0546875, 0.05609130859375, 0.57470703125, 0.84716796875, 2.177734375, 2.94140625, 1.9599609375, 1.6025390625], "tokens": [351, 19567, 2797, 73, 846, 8490, 26, 96, 30, 225, 36, 293]}
{"line_number": 840, "line_type": "generated", "code": "\n                    throw new InvalidMatrixException(\"Unable to diagonalize matrix after \" + maxIter + \" iterations\");\n                }\n                // check for a split\n                if (pingPong == 0) {\n                    if (i0 == n0) {\n                        //", "entropy": 0.548828125, "is_bug_line": false, "sus_score": 0.7513042092323303, "per_token_entropy": [0.200927734375, 0.482177734375, 0.051971435546875, 0.01146697998046875, 0.0023193359375, 6.103515625e-05, 1.4609375, 1.296875, 0.0015077590942382812, 0.055023193359375, 0.00377655029296875, 0.76123046875, 0.603515625, 0.1326904296875, 0.7001953125, 1.3583984375, 0.0002834796905517578, 0.06951904296875, 0.1376953125, 0.0672607421875, 0.28271484375, 0.042022705078125, 0.0002053976058959961, 1.3310546875, 1.2490234375, 3.01171875, 0.94775390625, 2.021484375, 1.8515625, 1.142578125, 0.6826171875, 0.12445068359375, 1.521484375, 0.0012769699096679688, 2.384185791015625e-06, 0.296630859375, 0.01250457763671875, 0.3779296875, 0.1541748046875, 0.0019474029541015625, 0.1793212890625, 1.4990234375, 0.10211181640625, 1.6708984375, 0.0036258697509765625, 0.8310546875, 0.2034912109375, 0.025909423828125, 0.2491455078125, 0.0119476318359375, 0.182861328125, 1.1142578125], "tokens": [528, 1422, 537, 8073, 4161, 984, 440, 12014, 372, 27601, 518, 5045, 2685, 313, 474, 1769, 3853, 474, 313, 17576, 724, 400, 320, 400, 434, 1505, 436, 312, 6122, 400, 415, 308, 7075, 66, 788, 610, 225, 34, 27, 301, 528, 415, 308, 91, 34, 610, 310, 34, 27, 301, 715, 434]}
{"line_number": 1233, "line_type": "original", "code": "        for (int i = 1; i < n; ++i) {", "entropy": 0.93212890625, "is_bug_line": false, "sus_score": 0.7508898973464966, "per_token_entropy": [6.296875, 4.81640625, 0.007396697998046875, 0.0156707763671875, 0.91552734375, 0.1571044921875, 0.285888671875, 0.82373046875, 0.00897979736328125, 0.0039520263671875, 0.42236328125, 1.7734375, 0.1807861328125, 0.06427001953125, 0.0012083053588867188, 0.00800323486328125, 0.0631103515625], "tokens": [351, 436, 308, 410, 595, 280, 225, 35, 45, 595, 333, 310, 45, 3311, 91, 27, 301]}
{"line_number": 1233, "line_type": "generated", "code": "\n                if (tmp <= 0) {\n                    work[j4] = work[j4 + 1] - work[j4 - 1] * tmp;\n                } else {\n                    work[j4] = work[j4 +", "entropy": 0.283203125, "is_bug_line": false, "sus_score": 0.7508898973464966, "per_token_entropy": [0.3974609375, 1.455078125, 0.08636474609375, 0.76171875, 0.56884765625, 0.55126953125, 0.430908203125, 0.37841796875, 0.00890350341796875, 0.040069580078125, 1.154296875, 0.0025634765625, 0.0357666015625, 7.212162017822266e-05, 0.68115234375, 0.228271484375, 1.1123046875, 0.0005879402160644531, 0.027435302734375, 2.872943878173828e-05, 0.76416015625, 0.004673004150390625, 0.373046875, 0.701171875, 0.63623046875, 0.8017578125, 0.00018513202667236328, 0.008697509765625, 0.00010085105895996094, 0.035736083984375, 0.00019025802612304688, 0.73974609375, 0.07080078125, 0.0216064453125, 0.1583251953125, 0.10369873046875, 0.483154296875, 0.0005612373352050781, 0.0609130859375, 0.040863037109375, 0.012420654296875, 0.31298828125, 0.0008077621459960938, 0.0008482933044433594, 2.9921531677246094e-05, 0.04541015625, 0.0498046875, 1.2783203125, 0.0016736984252929688, 0.001354217529296875, 1.1920928955078125e-05, 0.09515380859375], "tokens": [400, 415, 308, 2868, 2511, 225, 34, 27, 301, 528, 1389, 77, 92, 38, 79, 280, 1389, 77, 92, 38, 474, 225, 35, 79, 429, 1389, 77, 92, 38, 429, 225, 35, 79, 319, 3691, 45, 400, 320, 813, 301, 528, 1389, 77, 92, 38, 79, 280, 1389, 77, 92, 38, 474]}
