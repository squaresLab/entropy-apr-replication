{"line_number": 430, "line_type": "original", "code": "            u /= 2;", "entropy": 4.91796875, "is_bug_line": false, "sus_score": 0.6895091533660889, "per_token_entropy": [7.40625, 10.7578125, 10.8828125, 0.1844482421875, 0.186279296875, 0.0963134765625], "tokens": [1468, 1044, 14374, 225, 36, 45]}
{"line_number": 430, "line_type": "generated", "code": "\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++) {\n            result = 31 * result + hash(value", "entropy": 0.068115234375, "is_bug_line": false, "sus_score": 0.6895091533660889, "per_token_entropy": [0.11700439453125, 0.456298828125, 0.00670623779296875, 0.002956390380859375, 0.01165771484375, 0.0013408660888671875, 0.0069122314453125, 0.0213623046875, 0.0379638671875, 0.00197601318359375, 0.0022029876708984375, 0.0009140968322753906, 0.00035262107849121094, 0.006961822509765625, 0.0005679130554199219, 0.290771484375, 0.2412109375, 0.270751953125, 0.00405120849609375, 0.0177764892578125, 0.0684814453125, 0.045379638671875, 0.010833740234375, 0.06671142578125, 0.0022678375244140625, 0.2381591796875, 0.036590576171875, 0.0023479461669921875, 0.150390625, 0.0016498565673828125, 0.2047119140625, 8.749961853027344e-05, 0.0034847259521484375, 0.0039520263671875, 0.0002117156982421875, 0.0009331703186035156, 0.019805908203125, 0.07550048828125, 0.0007719993591308594, 0.0015611648559570312, 0.08685302734375, 0.7724609375, 0.0007495880126953125, 0.03558349609375, 0.0015134811401367188, 0.01629638671875, 0.0009717941284179688, 0.00017547607421875, 0.00933074951171875, 0.17822265625, 0.0027179718017578125, 0.0035305023193359375], "tokens": [291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987, 301, 324, 1056, 280, 225, 37, 35, 319, 1056, 474, 3677, 26, 853]}
{"line_number": 431, "line_type": "original", "code": "            v /= 2;", "entropy": 3.982421875, "is_bug_line": false, "sus_score": 0.6884192824363708, "per_token_entropy": [8.0625, 7.5625, 7.6796875, 0.314208984375, 0.1336669921875, 0.1339111328125], "tokens": [1468, 354, 14374, 225, 36, 45]}
{"line_number": 431, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float", "entropy": 0.0195465087890625, "is_bug_line": false, "sus_score": 0.6884192824363708, "per_token_entropy": [0.133056640625, 0.030975341796875, 0.126953125, 0.0209503173828125, 0.01331329345703125, 0.0006899833679199219, 0.2249755859375, 0.06903076171875, 0.0085601806640625, 0.0005960464477539062, 0.00010919570922851562, 0.005832672119140625, 0.0015239715576171875, 0.0015087127685546875, 0.143798828125, 0.007282257080078125, 0.0015125274658203125, 0.008636474609375, 0.00012803077697753906, 0.01354217529296875, 1.6570091247558594e-05, 0.0034465789794921875, 0.0005602836608886719, 0.0012197494506835938, 0.0026149749755859375, 0.00047516822814941406, 0.00012099742889404297, 1.3232231140136719e-05, 7.82012939453125e-05, 0.0152587890625, 0.00019288063049316406, 5.4836273193359375e-05, 0.00019741058349609375, 0.0007214546203613281, 0.0007977485656738281, 0.0003113746643066406, 0.00310516357421875, 0.06390380859375, 0.005886077880859375, 0.001758575439453125, 0.00014579296112060547, 7.915496826171875e-05, 0.00201416015625, 9.202957153320312e-05, 0.00390625, 0.00040650367736816406, 0.0005583763122558594, 0.00013136863708496094, 0.00583648681640625, 0.004749298095703125, 0.08209228515625, 0.0025348663330078125], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174]}
{"line_number": 432, "line_type": "original", "code": "            k++; // cast out twos.", "entropy": 3.2265625, "is_bug_line": false, "sus_score": 0.6849085688591003, "per_token_entropy": [8.5078125, 6.53515625, 2.666015625, 3.013671875, 2.779296875, 0.0179443359375, 1.1015625, 3.409385681152344e-05, 4.4140625], "tokens": [1468, 831, 3334, 434, 9936, 963, 8206, 500, 32]}
{"line_number": 432, "line_type": "generated", "code": "\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float(value", "entropy": 0.03662109375, "is_bug_line": false, "sus_score": 0.6849085688591003, "per_token_entropy": [0.71240234375, 0.128662109375, 0.027557373046875, 0.0002493858337402344, 0.2724609375, 0.20263671875, 0.01434326171875, 0.0011806488037109375, 0.00014138221740722656, 0.007114410400390625, 0.0019588470458984375, 0.0011959075927734375, 0.233154296875, 0.01433563232421875, 0.0018463134765625, 0.011474609375, 0.00021338462829589844, 0.0299835205078125, 1.823902130126953e-05, 0.006237030029296875, 0.0009641647338867188, 0.0018091201782226562, 0.00373077392578125, 0.0004124641418457031, 0.00010669231414794922, 1.5616416931152344e-05, 8.058547973632812e-05, 0.01458740234375, 0.00013625621795654297, 0.00026297569274902344, 0.0002911090850830078, 0.0009169578552246094, 0.0010700225830078125, 0.00020635128021240234, 0.0031681060791015625, 0.058380126953125, 0.007022857666015625, 0.002048492431640625, 0.00023746490478515625, 0.00012731552124023438, 0.00501251220703125, 0.0001589059829711914, 0.01055145263671875, 0.0006494522094726562, 0.00145721435546875, 0.0004150867462158203, 0.004718780517578125, 0.005382537841796875, 0.1102294921875, 0.0024547576904296875, 0.0001881122589111328, 0.00015592575073242188], "tokens": [284, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174, 26, 853]}
{"line_number": 446, "line_type": "original", "code": "                t /= 2; // cast out twos", "entropy": 4.1484375, "is_bug_line": false, "sus_score": 0.6417565941810608, "per_token_entropy": [8.8125, 13.1328125, 13.7109375, 0.572265625, 0.1142578125, 0.9150390625, 3.6171875, 3.853515625, 0.01123046875, 0.87353515625, 5.710124969482422e-05], "tokens": [2071, 273, 14374, 225, 36, 45, 434, 9936, 963, 8206, 500]}
{"line_number": 446, "line_type": "generated", "code": "\n     * -1.0 if x < 0.\n     * \n     * @param x the value, a double precision number\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double", "entropy": 0.090576171875, "is_bug_line": false, "sus_score": 0.6417565941810608, "per_token_entropy": [1.4765625, 0.00972747802734375, 0.057525634765625, 0.0015964508056640625, 0.003116607666015625, 0.00015354156494140625, 0.025970458984375, 0.00154876708984375, 0.00910186767578125, 0.0018815994262695312, 0.0002570152282714844, 0.03851318359375, 0.4755859375, 0.0008802413940429688, 0.04620361328125, 0.0004467964172363281, 0.013092041015625, 0.0019321441650390625, 0.005008697509765625, 0.0298614501953125, 0.01195526123046875, 0.194580078125, 0.006793975830078125, 0.09552001953125, 0.88720703125, 0.87646484375, 0.012542724609375, 0.0002130270004272461, 0.001102447509765625, 0.0012531280517578125, 0.12335205078125, 0.0021457672119140625, 0.00418853759765625, 0.0029544830322265625, 0.0667724609375, 0.0011425018310546875, 0.0005288124084472656, 0.0017642974853515625, 0.0003330707550048828, 0.08929443359375, 0.0028743743896484375, 0.001476287841796875, 0.002895355224609375, 0.000457763671875, 0.0007176399230957031, 0.0037860870361328125, 0.01557159423828125, 0.053375244140625, 0.0174102783203125, 0.005466461181640625, 0.000377655029296875, 0.02850341796875], "tokens": [275, 319, 429, 35, 32, 34, 415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 2064, 12485, 1451, 275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064]}
{"line_number": 450, "line_type": "original", "code": "                u = -t;", "entropy": 4.69140625, "is_bug_line": false, "sus_score": 0.6156045198440552, "per_token_entropy": [7.25, 9.3359375, 0.919921875, 3.6484375, 5.828125, 1.1611328125], "tokens": [2071, 1044, 280, 429, 102, 45]}
{"line_number": 450, "line_type": "generated", "code": "\n     * @return +1.0, -1.0, or NaN\n     */\n    public static double indicator(final double x) {\n        return Double.longBitsToDouble(\n                ((Double.doubleToLongBits(x) & ~SIGN_", "entropy": 0.353759765625, "is_bug_line": false, "sus_score": 0.6156045198440552, "per_token_entropy": [0.46044921875, 0.1348876953125, 0.020263671875, 0.00493621826171875, 0.184326171875, 0.003978729248046875, 0.00959014892578125, 0.0008740425109863281, 1.443359375, 0.01245880126953125, 0.0004734992980957031, 0.002086639404296875, 0.00045609474182128906, 0.266845703125, 0.07525634765625, 1.0693359375, 0.951171875, 0.1309814453125, 0.02398681640625, 0.01200103759765625, 0.0007681846618652344, 0.03045654296875, 0.00902557373046875, 0.00333404541015625, 0.1107177734375, 0.006961822509765625, 0.0008144378662109375, 0.001949310302734375, 0.004726409912109375, 0.09259033203125, 0.272216796875, 1.9169921875, 0.01087188720703125, 0.1937255859375, 0.0001323223114013672, 0.0017566680908203125, 0.7119140625, 2.89453125, 2.34765625, 0.31787109375, 0.001739501953125, 0.00024962425231933594, 2.4318695068359375e-05, 0.611328125, 2.086162567138672e-05, 0.0020122528076171875, 0.01605224609375, 0.0117340087890625, 0.693359375, 1.3349609375, 1.9287109375, 0.04998779296875], "tokens": [275, 319, 477, 601, 474, 35, 32, 34, 30, 429, 35, 32, 34, 30, 556, 21644, 275, 569, 284, 562, 907, 2064, 18384, 26, 3220, 2064, 816, 27, 301, 291, 442, 6934, 32, 3222, 8733, 40609, 26, 400, 1833, 4075, 32, 2627, 705, 3952, 8733, 26, 106, 27, 549, 3165, 9871, 81]}
{"line_number": 413, "line_type": "original", "code": "            return (Math.abs(u) + Math.abs(v));", "entropy": 1.6015625, "is_bug_line": false, "sus_score": 0.5817139148712158, "per_token_entropy": [7.12890625, 4.33984375, 2.638671875, 4.59765625, 0.01103973388671875, 0.259033203125, 0.01214599609375, 0.5703125, 0.059967041015625, 0.1719970703125, 0.410888671875, 0.004062652587890625, 1.3947486877441406e-05, 3.826618194580078e-05, 0.0006375312805175781, 5.41796875], "tokens": [1468, 442, 308, 5717, 32, 3596, 26, 103, 27, 474, 4175, 32, 3596, 26, 104, 876]}
{"line_number": 413, "line_type": "generated", "code": "\n     * <p>\n     * Gets the greatest common divisor of two numbers, using the \"binary gcd\"\n     * method which avoids division and modulo operations. See Knuth 4.5.2\n     * algorithm B. This algorithm is due to Jose", "entropy": 0.1258544921875, "is_bug_line": false, "sus_score": 0.5817139148712158, "per_token_entropy": [1.08203125, 0.2005615234375, 0.99267578125, 0.01508331298828125, 0.0023288726806640625, 0.11468505859375, 4.863739013671875e-05, 0.91064453125, 0.009674072265625, 0.2315673828125, 0.0003299713134765625, 0.005916595458984375, 0.071044921875, 0.533203125, 0.12408447265625, 0.5263671875, 0.042083740234375, 0.0093841552734375, 0.150390625, 0.005733489990234375, 0.43359375, 0.0030879974365234375, 0.0064697265625, 1.8358230590820312e-05, 0.0005507469177246094, 0.031646728515625, 0.0007729530334472656, 0.00020933151245117188, 0.0002636909484863281, 0.00033926963806152344, 0.0031070709228515625, 0.00794219970703125, 0.010650634765625, 0.00037670135498046875, -0.0, 0.004718780517578125, 2.193450927734375e-05, 2.9802322387695312e-06, 5.960464477539062e-07, 7.152557373046875e-07, 0.0003085136413574219, 0.0019664764404296875, 2.5033950805664062e-05, 0.0009741783142089844, 0.00020742416381835938, 0.0047760009765625, 0.01386260986328125, 0.00434112548828125, 4.601478576660156e-05, 0.0006232261657714844, 0.00012791156768798828, 0.98583984375], "tokens": [275, 319, 333, 98, 48, 275, 319, 7124, 322, 48299, 4942, 33482, 432, 3134, 7515, 30, 1471, 322, 313, 7003, 43422, 20, 275, 319, 1411, 1510, 43585, 20654, 461, 41647, 7373, 32, 2802, 44327, 860, 225, 38, 32, 39, 32, 36, 275, 319, 8218, 551, 32, 1348, 8218, 438, 7254, 372, 45400]}
{"line_number": 428, "line_type": "original", "code": "        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are", "entropy": 1.18359375, "is_bug_line": false, "sus_score": 0.5729794502258301, "per_token_entropy": [3.478515625, 7.17578125, 2.607421875, 7.26953125, 0.25732421875, 0.07012939453125, 0.056304931640625, 0.03253173828125, 0.0062103271484375, 0.0081787109375, 0.006870269775390625, 2.849609375, 1.7763671875, 0.1644287109375, 0.007160186767578125, 0.0021800994873046875, 0.0026760101318359375, 0.01192474365234375, 0.001918792724609375, 0.0043792724609375, 0.0005178451538085938, 1.8671875, 3.451171875, 0.90380859375, 2.65625, 0.7998046875, 0.381591796875, 0.11212158203125, 0.1885986328125, 2.6796875, 0.9482421875, 1.1044921875, 0.092529296875, 0.0213775634765625, 0.44482421875], "tokens": [351, 2218, 1833, 103, 549, 225, 35, 27, 610, 225, 34, 962, 308, 104, 549, 225, 35, 27, 610, 225, 34, 962, 831, 333, 225, 37, 35, 27, 301, 434, 2218, 1044, 461, 354, 884]}
{"line_number": 428, "line_type": "generated", "code": "\n    public static int hash(final double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (final double element : value) {\n            result = 31 * result", "entropy": 0.1319580078125, "is_bug_line": false, "sus_score": 0.5729794502258301, "per_token_entropy": [1.05859375, 0.97802734375, 0.00316619873046875, 0.004894256591796875, 0.16552734375, 0.015228271484375, 0.88330078125, 0.0237884521484375, 0.340576171875, 0.038787841796875, 0.0100250244140625, 0.0178985595703125, 0.09381103515625, 0.1815185546875, 0.00930023193359375, 0.0034542083740234375, 0.0142364501953125, 0.0011949539184570312, 0.0074615478515625, 0.017822265625, 0.02703857421875, 0.00627899169921875, 0.003635406494140625, 0.002147674560546875, 0.0005807876586914062, 0.0108642578125, 0.00013172626495361328, 0.31494140625, 0.403564453125, 0.16748046875, 0.00843048095703125, 0.018585205078125, 0.1463623046875, 0.05474853515625, 0.020416259765625, 0.0679931640625, 0.006103515625, 0.98095703125, 0.010772705078125, 0.28955078125, 0.0020599365234375, 0.004154205322265625, 0.0031299591064453125, 0.003269195556640625, 0.04461669921875, 0.332763671875, 0.001461029052734375, 0.032562255859375, 0.0026302337646484375, 0.01873779296875, 0.0027141571044921875, 0.00026679039001464844], "tokens": [284, 562, 907, 629, 3677, 26, 3220, 2064, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 3220, 2064, 1994, 499, 786, 27, 301, 324, 1056, 280, 225, 37, 35, 319, 1056]}
{"line_number": 445, "line_type": "original", "code": "            while ((t & 1) == 0) { // while t is even..", "entropy": 1.8515625, "is_bug_line": false, "sus_score": 0.5596051812171936, "per_token_entropy": [6.890625, 10.84375, 2.265625, 5.40625, 1.3720703125, 0.57568359375, 0.5302734375, 0.096435546875, 0.01340484619140625, 0.01512908935546875, 0.002696990966796875, 0.26171875, 0.1307373046875, 2.62890625, 2.046875, 0.578125, 0.00743865966796875, 0.02423095703125, 1.484375], "tokens": [1468, 2218, 1833, 102, 549, 225, 35, 27, 610, 225, 34, 27, 301, 434, 2218, 273, 438, 4444, 497]}
{"line_number": 445, "line_type": "generated", "code": "\n     * For a short value x, this method returns (byte)(+1) if x >= 0 and\n     * (byte)(-1) if x < 0.\n     * \n     * @param x the value, a short\n     * @", "entropy": 0.076904296875, "is_bug_line": false, "sus_score": 0.5596051812171936, "per_token_entropy": [0.7734375, 0.1275634765625, 0.3310546875, 0.2115478515625, 1.0869140625, 0.006256103515625, 0.0013942718505859375, 0.0004019737243652344, 0.0012798309326171875, 0.00041985511779785156, 0.00043272972106933594, 0.00894927978515625, 1.248046875, 0.00345611572265625, 0.0007147789001464844, 0.0002218484878540039, 0.0006189346313476562, 0.0004925727844238281, 0.003200531005859375, 0.00215911865234375, 0.0011529922485351562, 0.000339508056640625, 0.0035457611083984375, 0.0152740478515625, 5.4955482482910156e-05, 0.003383636474609375, 0.00026106834411621094, 2.8252601623535156e-05, 0.0002332925796508789, 3.1113624572753906e-05, 0.00013875961303710938, 0.0001544952392578125, 0.00032806396484375, 0.00040268898010253906, 0.00011479854583740234, 0.000148773193359375, 0.002506256103515625, 0.036651611328125, 0.0031604766845703125, 0.04071044921875, 0.00012946128845214844, 0.0028095245361328125, 0.0016269683837890625, 0.0012340545654296875, 0.007110595703125, 0.00039577484130859375, 0.0020999908447265625, 0.0050201416015625, 0.058807373046875, 0.00319671630859375, 8.285045623779297e-05, 0.0003161430358886719], "tokens": [275, 319, 2616, 312, 4504, 786, 816, 30, 458, 1411, 3217, 308, 2263, 2502, 29, 35, 27, 415, 816, 2377, 225, 34, 461, 275, 319, 308, 2263, 2502, 31, 35, 27, 415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 4504, 275, 319, 477]}
{"line_number": 427, "line_type": "original", "code": "        int k = 0;", "entropy": 1.970703125, "is_bug_line": false, "sus_score": 0.5564263463020325, "per_token_entropy": [2.7734375, 3.578125, 7.13671875, 0.20263671875, 0.024383544921875, 0.0028400421142578125, 0.07794189453125], "tokens": [351, 629, 831, 280, 225, 34, 45]}
{"line_number": 427, "line_type": "generated", "code": "\n     */\n    public static int hash(double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++)", "entropy": 0.0634765625, "is_bug_line": false, "sus_score": 0.5564263463020325, "per_token_entropy": [0.48486328125, 0.0257110595703125, 0.0165557861328125, 0.01428985595703125, 0.0008082389831542969, 0.00473785400390625, 0.07147216796875, 0.005779266357421875, 0.48388671875, 0.1767578125, 0.0294189453125, 0.0016307830810546875, 0.0027294158935546875, 0.03668212890625, 0.1607666015625, 0.006168365478515625, 0.0036220550537109375, 0.0112457275390625, 0.0006771087646484375, 0.0063018798828125, 0.020965576171875, 0.0174713134765625, 0.005374908447265625, 0.006137847900390625, 0.0026493072509765625, 0.0005950927734375, 0.01003265380859375, 0.00016105175018310547, 0.1654052734375, 0.29443359375, 0.2154541015625, 0.005710601806640625, 0.021942138671875, 0.1156005859375, 0.012237548828125, 0.01139068603515625, 0.041534423828125, 0.0017499923706054688, 0.356201171875, 0.03271484375, 0.00431060791015625, 0.08758544921875, 0.00237274169921875, 0.2142333984375, 0.00012373924255371094, 0.0014963150024414062, 0.0016965866088867188, 0.00026917457580566406, 0.0008940696716308594, 0.031646728515625, 0.07342529296875, 0.0007901191711425781], "tokens": [275, 569, 284, 562, 907, 629, 3677, 26, 2627, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987]}
{"line_number": 459, "line_type": "original", "code": "        return -u * (1 << k); // gcd is u*2^k", "entropy": 1.9306640625, "is_bug_line": false, "sus_score": 0.556391716003418, "per_token_entropy": [6.69921875, 3.548828125, 3.6953125, 1.595703125, 3.39453125, 1.9541015625, 2.681640625, 1.1162109375, 0.63037109375, 0.2152099609375, 2.0625, 1.6494140625, 1.041015625, 3.697265625, 0.67138671875, 0.0019702911376953125, 0.005626678466796875, 0.09136962890625], "tokens": [351, 442, 429, 103, 319, 308, 35, 1264, 831, 293, 434, 43422, 438, 1044, 28, 36, 80, 93]}
{"line_number": 459, "line_type": "generated", "code": "\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x <\n     * 0. Returns <code>NaN</code> if <code>x</code", "entropy": 0.07342529296875, "is_bug_line": false, "sus_score": 0.556391716003418, "per_token_entropy": [0.64208984375, 0.09490966796875, 0.0200042724609375, 0.0002827644348144531, 0.380859375, 0.1610107421875, 0.23828125, 0.048828125, 0.002178192138671875, 0.0005116462707519531, 0.0022296905517578125, 0.0005598068237304688, 0.0006113052368164062, 0.0748291015625, 0.0020236968994140625, 0.10272216796875, 0.0009889602661132812, 0.1768798828125, 0.0005664825439453125, 0.0026702880859375, 0.0172576904296875, 0.00197601318359375, 0.00010001659393310547, 0.037841796875, 0.0849609375, 0.00016117095947265625, 0.0003504753112792969, 0.0001589059829711914, 0.005565643310546875, 0.010162353515625, 0.27392578125, 0.90283203125, 0.23828125, 1.4781951904296875e-05, 0.00044465065002441406, 0.0002199411392211914, 0.0020084381103515625, 0.21240234375, 0.0149688720703125, 0.004619598388671875, 0.0001380443572998047, 0.0172119140625, 0.01715087890625, 7.259845733642578e-05, 0.001110076904296875, 0.0093231201171875, 0.01058197021484375, 0.0001380443572998047, 0.00015914440155029297, 0.000438690185546875, 0.000690460205078125, 2.2172927856445312e-05], "tokens": [284, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 333, 275, 319, 225, 34, 32, 3759, 333, 687, 48, 11126, 377, 687, 48, 415, 333, 687, 48, 106, 377, 687]}
{"line_number": 455, "line_type": "original", "code": "            t = (v - u) / 2;", "entropy": 2.4453125, "is_bug_line": false, "sus_score": 0.5475561022758484, "per_token_entropy": [6.09765625, 7.640625, 0.15087890625, 1.951171875, 5.05078125, 3.880859375, 2.701171875, 0.295166015625, 0.7490234375, 0.284912109375, 0.03515625, 0.513671875], "tokens": [1468, 273, 280, 308, 104, 429, 1044, 27, 517, 225, 36, 45]}
{"line_number": 455, "line_type": "generated", "code": "\n        }\n        return (x >= ZD)? PD : ND;\n    }\n\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x\n     * < ", "entropy": 0.06719970703125, "is_bug_line": false, "sus_score": 0.5475561022758484, "per_token_entropy": [0.1126708984375, 0.052215576171875, 0.390869140625, 0.25048828125, 0.40771484375, 0.0088958740234375, 0.05572509765625, 0.666015625, 0.1046142578125, 0.01448822021484375, 0.0005931854248046875, 0.041412353515625, 0.002605438232421875, 0.005313873291015625, 0.0008678436279296875, 0.072509765625, 0.00035953521728515625, 0.052276611328125, 0.004749298095703125, 0.0038623809814453125, 0.0001595020294189453, 0.025604248046875, 0.055267333984375, 0.11083984375, 0.054107666015625, 0.0015668869018554688, 0.0003368854522705078, 0.0013208389282226562, 0.00047969818115234375, 0.0003914833068847656, 0.048126220703125, 0.0016660690307617188, 0.0908203125, 0.000850677490234375, 0.11651611328125, 0.0005517005920410156, 0.002208709716796875, 0.00751495361328125, 0.0013628005981445312, 0.00013554096221923828, 0.0174407958984375, 0.0849609375, 0.00013208389282226562, 0.0003867149353027344, 0.00024211406707763672, 0.00479888916015625, 0.007045745849609375, 0.25244140625, 0.356201171875, 1.2755393981933594e-05, 0.0024471282958984375, 0.00047898292541503906], "tokens": [291, 320, 291, 442, 308, 106, 2377, 2523, 54, 27, 1018, 30354, 499, 31500, 45, 284, 320, 446, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 275, 319, 333, 225]}
{"line_number": 458, "line_type": "original", "code": "        } while (t != 0);", "entropy": 1.9638671875, "is_bug_line": false, "sus_score": 0.5472264289855957, "per_token_entropy": [6.41796875, 4.2421875, 5.09765625, 0.1116943359375, 1.5419921875, 0.0919189453125, 0.127197265625, 0.0022754669189453125, 0.037109375], "tokens": [351, 320, 2218, 308, 102, 863, 225, 34, 293]}
{"line_number": 458, "line_type": "generated", "code": "\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x\n     * < 0. Returns <code>NaN</code> if <code>x</code", "entropy": 0.05694580078125, "is_bug_line": false, "sus_score": 0.5472264289855957, "per_token_entropy": [0.65283203125, 0.07403564453125, 0.0156707763671875, 0.00023031234741210938, 0.2281494140625, 0.144775390625, 0.208740234375, 0.05078125, 0.00189971923828125, 0.000507354736328125, 0.0017442703247070312, 0.000492095947265625, 0.0006155967712402344, 0.06951904296875, 0.0021610260009765625, 0.1168212890625, 0.0008606910705566406, 0.15087890625, 0.0004906654357910156, 0.002735137939453125, 0.01421356201171875, 0.001750946044921875, 8.20159912109375e-05, 0.0310211181640625, 0.08746337890625, 0.0001417398452758789, 0.00034737586975097656, 0.00012755393981933594, 0.00501251220703125, 0.00820159912109375, 0.25244140625, 0.57373046875, 1.7881393432617188e-05, 0.0028629302978515625, 0.0006923675537109375, 0.0002181529998779297, 0.0020885467529296875, 0.1915283203125, 0.01220703125, 0.003810882568359375, 0.00011682510375976562, 0.01451873779296875, 0.01473236083984375, 6.651878356933594e-05, 0.0010480880737304688, 0.00884246826171875, 0.0089874267578125, 0.00015544891357421875, 0.00012159347534179688, 0.0004489421844482422, 0.0005736351013183594, 7.069110870361328e-05], "tokens": [284, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 275, 319, 333, 225, 34, 32, 3759, 333, 687, 48, 11126, 377, 687, 48, 415, 333, 687, 48, 106, 377, 687]}
{"line_number": 412, "line_type": "original", "code": "        if (u * v == 0) {", "entropy": 1.26171875, "is_bug_line": true, "sus_score": 0.5415396094322205, "per_token_entropy": [3.580078125, 3.078125, 0.07403564453125, 0.791015625, 5.9921875, 0.0643310546875, 0.07391357421875, 0.1689453125, 0.0031070709228515625, 0.00792694091796875, 0.05010986328125], "tokens": [351, 415, 308, 103, 319, 354, 610, 225, 34, 27, 301]}
{"line_number": 412, "line_type": "generated", "code": "\n    /**\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to", "entropy": 0.118408203125, "is_bug_line": true, "sus_score": 0.5415396094322205, "per_token_entropy": [1.1142578125, 0.376708984375, 0.072021484375, 0.0005421638488769531, 2.185546875, 0.064697265625, 0.49951171875, 0.0008578300476074219, 0.012847900390625, 0.0992431640625, 1.0146484375, 0.0670166015625, 0.0238800048828125, 0.0010585784912109375, 0.140380859375, 0.0308990478515625, 0.07958984375, 0.01421356201171875, 0.00010704994201660156, 0.0154571533203125, 0.04510498046875, 0.1832275390625, 0.011138916015625, 0.00012111663818359375, 0.000743865966796875, 0.0011777877807617188, 0.00974273681640625, 0.0016870498657226562, 0.00015151500701904297, 0.0007386207580566406, 0.00045561790466308594, 0.00966644287109375, 5.2928924560546875e-05, 0.0007061958312988281, 0.00457000732421875, 0.0287933349609375, 0.00089263916015625, 7.152557373046875e-07, 0.00296783447265625, 2.5510787963867188e-05, 0.00011408329010009766, 7.510185241699219e-06, 1.3113021850585938e-06, 0.00118255615234375, 0.0005946159362792969, 0.0012350082397460938, 0.0162200927734375, 0.01284027099609375, 0.00742340087890625, 0.0005059242248535156, 0.0008282661437988281, 0.0009179115295410156], "tokens": [284, 1022, 275, 319, 7124, 322, 48299, 4942, 33482, 432, 322, 7976, 786, 432, 3134, 7515, 30, 275, 319, 1471, 322, 313, 7003, 43422, 20, 1411, 1510, 43585, 20654, 461, 41647, 275, 319, 7373, 32, 2802, 44327, 860, 225, 38, 32, 39, 32, 36, 8218, 551, 32, 1348, 8218, 438, 7254, 372]}
{"line_number": 434, "line_type": "original", "code": "        if (k == 31) {", "entropy": 2.072265625, "is_bug_line": false, "sus_score": 0.5355318784713745, "per_token_entropy": [3.474609375, 2.365234375, 0.17822265625, 7.8515625, 0.89208984375, 0.1905517578125, 3.9609375, 1.4423828125, 0.318115234375, 0.049713134765625], "tokens": [351, 415, 308, 93, 610, 225, 37, 35, 27, 301]}
{"line_number": 434, "line_type": "generated", "code": "\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float(value", "entropy": 0.0765380859375, "is_bug_line": false, "sus_score": 0.5355318784713745, "per_token_entropy": [2.248046875, 0.69287109375, 0.056121826171875, 0.00022351741790771484, 0.255126953125, 0.145751953125, 0.0193023681640625, 0.0014705657958984375, 0.0001310110092163086, 0.010772705078125, 0.0020427703857421875, 0.0012226104736328125, 0.1939697265625, 0.007904052734375, 0.0016584396362304688, 0.0157012939453125, 0.0016603469848632812, 0.0596923828125, 7.748603820800781e-05, 0.0122833251953125, 0.0014219284057617188, 0.001987457275390625, 0.0042572021484375, 0.0003910064697265625, 9.441375732421875e-05, 1.990795135498047e-05, 0.00010597705841064453, 0.01294708251953125, 0.00019466876983642578, 0.0002428293228149414, 0.00039768218994140625, 0.0012998580932617188, 0.0013399124145507812, 0.00020956993103027344, 0.003726959228515625, 0.08062744140625, 0.014739990234375, 0.007114410400390625, 0.0005145072937011719, 0.00014579296112060547, 0.00431060791015625, 0.0003609657287597656, 0.01168060302734375, 0.0006890296936035156, 0.0013580322265625, 0.0011653900146484375, 0.0150146484375, 0.005767822265625, 0.07794189453125, 0.002681732177734375, 0.00020611286163330078, 0.00014507770538330078], "tokens": [284, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174, 26, 853]}
{"line_number": 439, "line_type": "original", "code": "        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;", "entropy": 2.68359375, "is_bug_line": false, "sus_score": 0.5047373175621033, "per_token_entropy": [3.69140625, 4.671875, 5.625, 0.202880859375, 3.404296875, 10.84375, 2.72265625, 0.77294921875, 3.931640625, 0.986328125, 2.763671875, 0.04730224609375, 3.064453125, 0.424072265625, 0.047882080078125, 6.96875, 0.1312255859375, 4.46484375, 1.740234375, 1.181640625, 0.03125, 0.01419830322265625, 1.9951171875, 5.609375, 3.271484375, 3.5390625, 0.263427734375], "tokens": [351, 629, 273, 280, 1833, 103, 549, 225, 35, 27, 610, 225, 35, 27, 1018, 354, 499, 25298, 103, 517, 225, 36, 27, 1109, 551, 37, 12822]}
{"line_number": 439, "line_type": "generated", "code": "\n    }\n\n    /**\n     * For a int value x, this method returns (int)(+1) if x >= 0 and\n     * (int)(-1) if x < 0.\n     * \n     * @param x the value, a", "entropy": 0.11846923828125, "is_bug_line": false, "sus_score": 0.5047373175621033, "per_token_entropy": [0.86181640625, 0.252197265625, 0.26318359375, 0.0628662109375, 0.033721923828125, 0.00010824203491210938, 0.72265625, 0.08282470703125, 2.51171875, 0.001964569091796875, 0.0014123916625976562, 0.0004968643188476562, 0.001659393310546875, 0.0009303092956542969, 0.0008187294006347656, 0.273681640625, 0.21923828125, 0.002086639404296875, 0.00109100341796875, 0.00016379356384277344, 0.0015544891357421875, 0.00018894672393798828, 0.0009379386901855469, 0.00238037109375, 0.00038623809814453125, 0.00019061565399169922, 0.0022869110107421875, 0.291015625, 7.18832015991211e-05, 0.0013742446899414062, 0.005016326904296875, 0.00013363361358642578, 0.0002884864807128906, 2.6226043701171875e-05, 5.316734313964844e-05, 9.85860824584961e-05, 0.0003826618194580078, 0.00024080276489257812, 7.224082946777344e-05, 0.00017404556274414062, 0.0016012191772460938, 0.04437255859375, 0.0036411285400390625, 0.0130767822265625, 0.00025582313537597656, 0.0018663406372070312, 0.0009708404541015625, 0.002117156982421875, 0.0032100677490234375, 0.00018703937530517578, 0.0188140869140625, 0.468994140625], "tokens": [284, 320, 446, 1022, 275, 319, 2616, 312, 629, 786, 816, 30, 458, 1411, 3217, 308, 410, 2502, 29, 35, 27, 415, 816, 2377, 225, 34, 461, 275, 319, 308, 410, 2502, 31, 35, 27, 415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312]}
{"line_number": 452, "line_type": "original", "code": "                v = t;", "entropy": 5.140625, "is_bug_line": false, "sus_score": 0.49910423159599304, "per_token_entropy": [9.4765625, 7.72265625, 0.91796875, 6.2734375, 1.318359375], "tokens": [2071, 354, 280, 273, 45]}
{"line_number": 452, "line_type": "generated", "code": "\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x <\n     * 0. Returns <code>NaN</code> if <code>x</code", "entropy": 0.083251953125, "is_bug_line": false, "sus_score": 0.49910423159599304, "per_token_entropy": [0.347900390625, 1.0576171875, 0.02435302734375, 0.00033855438232421875, 0.1390380859375, 0.09918212890625, 0.34521484375, 0.04150390625, 0.0022430419921875, 0.0005640983581542969, 0.001728057861328125, 0.00041222572326660156, 0.0005326271057128906, 0.0694580078125, 0.0016717910766601562, 0.06427001953125, 0.000698089599609375, 0.132080078125, 0.00045490264892578125, 0.003143310546875, 0.01259613037109375, 0.0011501312255859375, 0.00028324127197265625, 0.0192718505859375, 0.08233642578125, 0.00014400482177734375, 0.00028443336486816406, 0.0002027750015258789, 0.0037841796875, 0.006229400634765625, 0.297119140625, 1.1943359375, 0.1524658203125, 1.2755393981933594e-05, 0.0004062652587890625, 8.249282836914062e-05, 0.0019855499267578125, 0.10540771484375, 0.0183563232421875, 0.0038242340087890625, 0.0002474784851074219, 0.0192108154296875, 0.0255279541015625, 0.00019562244415283203, 0.0007839202880859375, 0.041900634765625, 0.007244110107421875, 0.0001556873321533203, 0.00038552284240722656, 0.00037670135498046875, 0.00034117698669433594, 5.3048133850097656e-05], "tokens": [284, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 333, 275, 319, 225, 34, 32, 3759, 333, 687, 48, 11126, 377, 687, 48, 415, 333, 687, 48, 106, 377, 687]}
{"line_number": 421, "line_type": "original", "code": "            u = -u;", "entropy": 2.787109375, "is_bug_line": false, "sus_score": 0.49854597449302673, "per_token_entropy": [8.015625, 6.31640625, 0.469482421875, 0.483154296875, 1.2392578125, 0.201904296875], "tokens": [1468, 1044, 280, 429, 103, 45]}
{"line_number": 421, "line_type": "generated", "code": "\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float(value", "entropy": 0.046600341796875, "is_bug_line": false, "sus_score": 0.49854597449302673, "per_token_entropy": [0.86962890625, 0.22802734375, 0.03216552734375, 0.0002486705780029297, 0.328125, 0.37109375, 0.041656494140625, 0.01023101806640625, 0.0005288124084472656, 0.022216796875, 0.002887725830078125, 0.0031147003173828125, 0.298583984375, 0.0005879402160644531, 0.0099334716796875, 0.01323699951171875, 0.00028896331787109375, 0.029876708984375, 8.893013000488281e-05, 0.0018310546875, 0.0010251998901367188, 0.0027904510498046875, 0.006374359130859375, 0.0009927749633789062, 0.00016415119171142578, 3.0040740966796875e-05, 0.0001347064971923828, 0.0028629302978515625, 0.00011718273162841797, 0.0005235671997070312, 0.0003383159637451172, 0.0015420913696289062, 0.0022373199462890625, 0.0003407001495361328, 0.007114410400390625, 0.054168701171875, 0.01163482666015625, 0.0033626556396484375, 0.00011897087097167969, 0.0002105236053466797, 0.004680633544921875, 0.0003566741943359375, 0.00860595703125, 0.0006580352783203125, 0.0016689300537109375, 0.00079345703125, 0.0045166015625, 0.00603485107421875, 0.031402587890625, 0.003643035888671875, 0.0002605915069580078, 0.0001531839370727539], "tokens": [284, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174, 26, 853]}
{"line_number": 424, "line_type": "original", "code": "            v = -v;", "entropy": 5.09765625, "is_bug_line": false, "sus_score": 0.49736276268959045, "per_token_entropy": [7.15625, 8.984375, 0.82373046875, 7.2421875, 6.2421875, 0.15185546875], "tokens": [1468, 354, 280, 429, 104, 45]}
{"line_number": 424, "line_type": "generated", "code": "\n     * \n     * @param array the array to be hashed\n     * @return the hash code\n     */\n    public static int hash(double[] array) {\n        if (array == null) {\n            return 0;\n        }\n        int hash = ", "entropy": 0.10601806640625, "is_bug_line": false, "sus_score": 0.49736276268959045, "per_token_entropy": [0.42236328125, 0.037506103515625, 0.403076171875, 0.0007624626159667969, 0.03125, 0.006320953369140625, 0.70458984375, 0.0176849365234375, 0.060943603515625, 0.0038890838623046875, 0.0075836181640625, 0.00021338462829589844, 0.01470947265625, 0.0001957416534423828, 0.00033736228942871094, 0.005924224853515625, 0.00200653076171875, 0.005825042724609375, 0.0006170272827148438, 0.039764404296875, 0.207763671875, 0.0197296142578125, 0.013671875, 0.0006909370422363281, 0.0037326812744140625, 0.051971435546875, 0.00618743896484375, 0.28955078125, 0.42431640625, 0.001758575439453125, 0.0025119781494140625, 0.0019369125366210938, 0.0570068359375, 1.16796875, 0.0043792724609375, 0.00438690185546875, 0.07574462890625, 0.0005407333374023438, 0.005718231201171875, 0.022369384765625, 0.0261077880859375, 0.008636474609375, 0.0018777847290039062, 0.0006074905395507812, 0.0002887248992919922, 0.007297515869140625, 0.0006103515625, 0.32421875, 0.1856689453125, 0.7392578125, 0.01189422607421875, 0.07879638671875], "tokens": [275, 319, 5384, 319, 477, 753, 1417, 322, 1417, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 2627, 1178, 1417, 27, 301, 291, 415, 308, 955, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 3677, 280, 225]}
{"line_number": 449, "line_type": "original", "code": "            if (t > 0) {", "entropy": 2.6953125, "is_bug_line": false, "sus_score": 0.49293291568756104, "per_token_entropy": [7.15234375, 4.9453125, 1.25390625, 6.41796875, 2.822265625, 0.5654296875, 0.019134521484375, 0.544921875, 0.53955078125], "tokens": [1468, 415, 308, 102, 848, 225, 34, 27, 301]}
{"line_number": 449, "line_type": "generated", "code": "\n     * @param x the value, a double precision floating point number\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double indicator(final double x) {\n        return (x >=", "entropy": 0.1522216796875, "is_bug_line": false, "sus_score": 0.49293291568756104, "per_token_entropy": [0.295166015625, 0.234375, 0.38623046875, 0.0124053955078125, 0.00814056396484375, 0.1502685546875, 0.024200439453125, 0.301025390625, 0.01873779296875, 0.173828125, 1.2685546875, 2.216796875, 0.243408203125, 0.111572265625, 0.05615234375, 0.00044727325439453125, 0.0032215118408203125, 0.0032482147216796875, 0.185302734375, 0.0022125244140625, 0.0085906982421875, 0.0008525848388671875, 0.30029296875, 0.0013685226440429688, 0.000362396240234375, 0.0009469985961914062, 0.00028705596923828125, 0.147216796875, 0.073974609375, 0.0020809173583984375, 0.006198883056640625, 0.0008835792541503906, 0.001617431640625, 0.041656494140625, 0.1302490234375, 0.170166015625, 0.01502227783203125, 0.00926971435546875, 0.0005307197570800781, 0.03350830078125, 0.00962066650390625, 0.00278472900390625, 0.10736083984375, 0.0084991455078125, 0.000560760498046875, 0.0012664794921875, 0.002880096435546875, 0.024261474609375, 0.25537109375, 0.759765625, 0.053192138671875, 0.047393798828125], "tokens": [275, 319, 477, 753, 816, 322, 786, 30, 312, 2064, 12485, 15394, 2260, 1451, 275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064, 18384, 26, 3220, 2064, 816, 27, 301, 291, 442, 308, 106, 2377]}
{"line_number": 420, "line_type": "original", "code": "        if (u > 0) {", "entropy": 1.99609375, "is_bug_line": false, "sus_score": 0.49197879433631897, "per_token_entropy": [4.79296875, 2.234375, 0.12066650390625, 7.5390625, 2.908203125, 0.17919921875, 0.0213165283203125, 0.1258544921875, 0.044097900390625], "tokens": [351, 415, 308, 103, 848, 225, 34, 27, 301]}
{"line_number": 420, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float", "entropy": 0.04473876953125, "is_bug_line": false, "sus_score": 0.49197879433631897, "per_token_entropy": [0.471923828125, 0.3583984375, 0.3544921875, 0.049224853515625, 0.01727294921875, 0.00011456012725830078, 0.309814453125, 0.275634765625, 0.0267333984375, 0.0096588134765625, 0.00038909912109375, 0.02398681640625, 0.002262115478515625, 0.0037899017333984375, 0.21826171875, 0.0003421306610107422, 0.00909423828125, 0.01309967041015625, 0.00023615360260009766, 0.02581787109375, 5.733966827392578e-05, 0.0014801025390625, 0.000720977783203125, 0.0024318695068359375, 0.005157470703125, 0.0007619857788085938, 0.00016057491302490234, 2.47955322265625e-05, 0.00018990039825439453, 0.0033721923828125, 0.00016069412231445312, 0.0002999305725097656, 0.00025081634521484375, 0.0011386871337890625, 0.002239227294921875, 0.0003440380096435547, 0.005603790283203125, 0.0386962890625, 0.01120758056640625, 0.0018291473388671875, 0.0002646446228027344, 0.0001423358917236328, 0.0029201507568359375, 0.00030422210693359375, 0.007724761962890625, 0.0005445480346679688, 0.0015382766723632812, 0.0011730194091796875, 0.01287078857421875, 0.00811767578125, 0.040679931640625, 0.0031719207763671875], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174]}
{"line_number": 423, "line_type": "original", "code": "        if (v > 0) {", "entropy": 1.51171875, "is_bug_line": false, "sus_score": 0.4891324043273926, "per_token_entropy": [3.4296875, 3.107421875, 0.1944580078125, 3.29296875, 2.5546875, 0.458984375, 0.12054443359375, 0.390869140625, 0.05023193359375], "tokens": [351, 415, 308, 104, 848, 225, 34, 27, 301]}
{"line_number": 423, "line_type": "generated", "code": "\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float(value).hashCode", "entropy": 0.059051513671875, "is_bug_line": false, "sus_score": 0.4891324043273926, "per_token_entropy": [0.7529296875, 0.1099853515625, 0.76318359375, 0.48828125, 0.049774169921875, 0.01837158203125, 0.0006780624389648438, 0.0255584716796875, 0.002777099609375, 0.00445556640625, 0.387939453125, 0.0016880035400390625, 0.00965118408203125, 0.0689697265625, 0.0007028579711914062, 0.1673583984375, 0.0001093149185180664, 0.00737762451171875, 0.0028533935546875, 0.0039215087890625, 0.01059722900390625, 0.0008797645568847656, 0.00015044212341308594, 2.9206275939941406e-05, 0.00016450881958007812, 0.0027980804443359375, 0.00011348724365234375, 0.0009145736694335938, 0.0003924369812011719, 0.0015926361083984375, 0.002315521240234375, 0.0006046295166015625, 0.0097503662109375, 0.07275390625, 0.0254364013671875, 0.00579071044921875, 0.0004551410675048828, 0.00023305416107177734, 0.00453948974609375, 0.0007224082946777344, 0.010772705078125, 0.0007190704345703125, 0.00213623046875, 0.0011186599731445312, 0.0089874267578125, 0.00788116455078125, 0.0253143310546875, 0.006603240966796875, 0.0002803802490234375, 0.00016987323760986328, 0.00012886524200439453, 0.0002532005310058594], "tokens": [275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174, 26, 853, 547, 14948]}
