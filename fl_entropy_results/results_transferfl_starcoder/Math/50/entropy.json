{"line_number": 150, "line_type": "original", "code": "        final double atol = getAbsoluteAccuracy();", "entropy": 1.7158203125, "is_bug_line": false, "sus_score": 0.6714763045310974, "per_token_entropy": [6.78125, 4.328125, 0.044769287109375, 4.1875, 0.01837158203125, 0.058807373046875, 0.001056671142578125, 7.367134094238281e-05, 0.025604248046875], "tokens": [351, 1158, 2064, 35012, 280, 622, 12043, 26201, 473]}
{"line_number": 150, "line_type": "generated", "code": "\n\n            // If the inverted flag is set, then the bracketing interval is\n            // [x1, x0] instead of [x0, x1].\n            if (inverted) {\n                final double tmp = x0;\n                x0 = x", "entropy": 0.350341796875, "is_bug_line": false, "sus_score": 0.6714763045310974, "per_token_entropy": [0.307373046875, 0.06231689453125, 0.935546875, 0.369384765625, 2.908203125, 0.46630859375, 0.1761474609375, 0.342529296875, 0.09259033203125, 1.408203125, 0.796875, 1.7158203125, 0.245849609375, 0.79443359375, 0.9130859375, 0.417236328125, 0.004364013671875, 1.0439453125, 0.007572174072265625, 0.2489013671875, 0.006748199462890625, 0.00910186767578125, 0.01548004150390625, 1.1220703125, 1.0732421875, 0.05615234375, 0.07928466796875, 0.0006604194641113281, 0.0013570785522460938, 0.00039196014404296875, 0.0008368492126464844, 0.0007767677307128906, 0.27978515625, 0.69384765625, 0.0579833984375, 0.01096343994140625, 0.00919342041015625, 0.0108642578125, 0.0006589889526367188, 0.0104522705078125, 0.496826171875, 0.010009765625, 0.6728515625, 0.054718017578125, 0.0032367706298828125, 0.2705078125, 8.869171142578125e-05, 0.0038204193115234375, 0.0011777877807617188, 0.00026702880859375, 0.0027008056640625, 0.00043892860412597656], "tokens": [1064, 434, 1670, 322, 37592, 4655, 438, 739, 30, 1615, 322, 33828, 299, 7898, 438, 324, 434, 428, 106, 35, 30, 816, 34, 79, 4174, 432, 428, 106, 34, 30, 816, 35, 997, 324, 415, 308, 47910, 27, 301, 400, 1158, 2064, 3691, 280, 816, 34, 45, 400, 816, 34, 280, 816]}
{"line_number": 188, "line_type": "original", "code": "                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));", "entropy": 1.0166015625, "is_bug_line": true, "sus_score": 0.6591474413871765, "per_token_entropy": [9.1953125, 5.90234375, 0.78662109375, 0.0479736328125, 4.3984375, 0.0721435546875, 0.873046875, 1.1865234375, 0.0139312744140625, 0.032135009765625, 0.031036376953125, 0.27587890625, 0.0204620361328125, 0.0107269287109375, 0.08489990234375, 3.4296875, 3.853515625, 7.939338684082031e-05, 0.0012664794921875, 1.64453125, 0.0025787353515625, 1.6376953125, 7.271766662597656e-06, 0.0762939453125, 0.01433563232421875, 2.5391578674316406e-05, 5.698204040527344e-05, 0.0167388916015625, 0.0020084381103515625, 0.00849151611328125, 0.2060546875, 0.0204925537109375, 0.69287109375, 0.0272064208984375], "tokens": [6797, 816, 34, 280, 225, 34, 32, 39, 319, 308, 106, 34, 474, 816, 35, 429, 15938, 5717, 32, 1449, 26, 2051, 362, 319, 15938, 5717, 32, 3596, 26, 106, 35, 471, 35012, 876]}
{"line_number": 188, "line_type": "generated", "code": "\n                    case ANY_SIDE:\n                        return x1;\n                    case LEFT_SIDE:\n                        if (inverted) {\n                            return x1;\n                        }\n                        break;\n                    case RIGHT_SIDE:\n                        if (!inverted) {\n                            return x1;\n                        }", "entropy": 0.06976318359375, "is_bug_line": true, "sus_score": 0.6591474413871765, "per_token_entropy": [0.55615234375, 0.65576171875, 0.44287109375, 0.00017762184143066406, 0.00011527538299560547, 0.007305145263671875, 0.268798828125, 0.1605224609375, 0.043792724609375, 0.0997314453125, 0.00081634521484375, 0.28515625, 0.0240325927734375, 0.054229736328125, 1.728534698486328e-05, 3.802776336669922e-05, 0.0006031990051269531, 0.033905029296875, 0.09747314453125, 0.1890869140625, 0.037689208984375, 0.00991058349609375, 0.0008525848388671875, 0.0261688232421875, 0.138427734375, 0.049224853515625, 0.179931640625, 0.001857757568359375, 0.00363922119140625, 0.0003457069396972656, 0.051910400390625, 0.1529541015625, 0.00044083595275878906, 0.0244293212890625, 0.0009503364562988281, 0.0009784698486328125, 3.2186508178710938e-06, 2.7418136596679688e-06, 5.7816505432128906e-05, 0.002758026123046875, 0.001323699951171875, 0.0183868408203125, 0.00016939640045166016, 0.000213623046875, 0.0005192756652832031, 0.001468658447265625, 0.00033664703369140625, 0.00015413761138916016, 0.0006427764892578125, 5.555152893066406e-05, 0.0007791519165039062, 2.288818359375e-05], "tokens": [528, 1135, 2964, 81, 25590, 44, 715, 442, 816, 35, 45, 528, 1135, 17789, 81, 25590, 44, 715, 415, 308, 47910, 27, 301, 1014, 442, 816, 35, 45, 715, 320, 715, 1626, 45, 528, 1135, 20169, 81, 25590, 44, 715, 415, 1429, 47910, 27, 301, 1014, 442, 816, 35, 45, 715, 320]}
{"line_number": 160, "line_type": "original", "code": "            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));", "entropy": 1.103515625, "is_bug_line": false, "sus_score": 0.6507295370101929, "per_token_entropy": [5.08984375, 8.0859375, 0.07891845703125, 1.80859375, 1.6826171875, 0.58544921875, 0.82080078125, 3.025390625, 4.0859375, 1.525390625, 0.325439453125, 1.6494140625, 0.2724609375, 0.06329345703125, 0.415771484375, 0.0065155029296875, 0.006542205810546875, 0.00836181640625, 0.085693359375, 0.005458831787109375, 0.057403564453125, 0.018096923828125, 0.0679931640625, 0.01131439208984375, 0.005130767822265625, 0.00048804283142089844, 0.0110931396484375], "tokens": [1468, 1158, 2064, 816, 280, 816, 35, 429, 1833, 88, 35, 319, 308, 106, 35, 429, 816, 34, 490, 517, 308, 88, 35, 429, 296, 34, 876]}
{"line_number": 160, "line_type": "generated", "code": "\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {", "entropy": 0.1431884765625, "is_bug_line": false, "sus_score": 0.6507295370101929, "per_token_entropy": [0.376708984375, 0.2108154296875, 0.2012939453125, 0.6953125, 0.016082763671875, 0.060455322265625, 0.0013933181762695312, 0.70849609375, 0.7890625, 0.0005617141723632812, 0.002025604248046875, 0.00354766845703125, 0.01959228515625, 3.6954879760742188e-06, 7.152557373046875e-07, 0.00020265579223632812, 0.00189971923828125, 0.0024871826171875, 0.055633544921875, 0.0012769699096679688, 0.0010175704956054688, 0.001873016357421875], "tokens": [715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 1135, 20169, 81, 25590, 44, 528, 415, 1429, 47910, 27, 301]}
{"line_number": 189, "line_type": "original", "code": "                        f0 = computeObjectiveValue(x0);", "entropy": 1.6787109375, "is_bug_line": true, "sus_score": 0.6482424736022949, "per_token_entropy": [8.4296875, 7.95703125, 0.422119140625, 0.380615234375, 1.1611328125, 0.0017213821411132812, 8.165836334228516e-05, 0.00406646728515625, 0.043243408203125, 0.06683349609375, 0.00922393798828125], "tokens": [6797, 296, 34, 280, 7596, 33312, 882, 26, 106, 34, 293]}
{"line_number": 189, "line_type": "generated", "code": "\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BE", "entropy": 0.0504150390625, "is_bug_line": true, "sus_score": 0.6482424736022949, "per_token_entropy": [0.380859375, 0.57275390625, 0.053466796875, 0.08203125, 0.002033233642578125, 0.0278472900390625, 0.0106964111328125, 0.0256500244140625, 5.364418029785156e-06, 1.3589859008789062e-05, 0.0007367134094238281, 0.176513671875, 0.04541015625, 0.18017578125, 0.032440185546875, 0.01666259765625, 0.0015010833740234375, 0.34814453125, 0.22900390625, 0.05621337890625, 0.102294921875, 0.0024261474609375, 0.007083892822265625, 0.0003216266632080078, 0.0975341796875, 0.10845947265625, 0.0006422996520996094, 0.0013933181762695312, 0.0002837181091308594, 0.0004935264587402344, 1.9073486328125e-06, 6.556510925292969e-06, 0.00010466575622558594, 0.00577545166015625, 0.001239776611328125, 0.0115814208984375, 0.00016546249389648438, 0.0002282857894897461, 0.0015192031860351562, 0.0038318634033203125, 0.0005917549133300781, 0.0010633468627929688, 0.0004811286926269531, 3.933906555175781e-05, 0.0008788108825683594, 2.8848648071289062e-05, 0.00501251220703125, 0.0013189315795898438, 9.036064147949219e-05, 0.0020294189453125, 0.0150909423828125, 0.006237030029296875], "tokens": [528, 442, 816, 35, 45, 400, 1135, 17789, 81, 25590, 44, 528, 415, 308, 47910, 27, 301, 715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 1135, 20169, 81, 25590, 44, 528, 415, 1429, 47910, 27, 301, 715, 442, 816, 35, 45, 528, 320, 528, 1626, 45, 400, 1135, 6744]}
{"line_number": 3925, "line_type": "original", "code": "", "entropy": 0.209228515625, "is_bug_line": false, "sus_score": 0.6481689810752869, "per_token_entropy": [0.209228515625], "tokens": [203]}
{"line_number": 3925, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6481689810752869, "per_token_entropy": [], "tokens": []}
{"line_number": 128, "line_type": "original", "code": "    protected final double doSolve() {", "entropy": 2.611328125, "is_bug_line": false, "sus_score": 0.6381711363792419, "per_token_entropy": [4.9296875, 7.84375, 3.21875, 0.6416015625, 4.01171875, 0.003917694091796875, 0.032073974609375, 0.213623046875], "tokens": [264, 2522, 1158, 2064, 745, 37530, 346, 301]}
{"line_number": 128, "line_type": "generated", "code": "\n                // The sign of f1 and fx are different, thus the root must be\n                // between x0 and x1.\n                if (Math.abs(fx) <= Math.abs(f1)) {\n                    // The new point is an over", "entropy": 0.42822265625, "is_bug_line": false, "sus_score": 0.6381711363792419, "per_token_entropy": [0.4033203125, 0.1448974609375, 0.5849609375, 1.642578125, 0.185546875, 0.8330078125, 0.48291015625, 0.125244140625, 0.521484375, 0.95849609375, 0.88427734375, 0.2437744140625, 0.7958984375, 0.70556640625, 1.9365234375, 0.397216796875, 0.2064208984375, 0.26708984375, 0.000629425048828125, 0.84765625, 0.061614990234375, 0.73095703125, 0.00514984130859375, 0.013824462890625, 0.0906982421875, 0.231689453125, 0.7080078125, 0.81640625, 0.2269287109375, 1.1171875, 0.059051513671875, 0.016204833984375, 0.007244110107421875, 0.1632080078125, 0.01177978515625, 0.09814453125, 0.4990234375, 0.0007300376892089844, 0.493896484375, 0.0018110275268554688, 0.00807952880859375, 0.1427001953125, 0.83056640625, 0.033782958984375, 0.1597900390625, 0.162353515625, 0.62158203125, 0.58642578125, 1.138671875, 0.12939453125, 0.568359375, 0.35986328125], "tokens": [400, 434, 886, 2596, 432, 296, 35, 461, 20670, 884, 3449, 30, 14966, 322, 3051, 2298, 526, 400, 434, 3733, 816, 34, 461, 816, 35, 32, 400, 415, 308, 5717, 32, 3596, 26, 5185, 27, 2511, 4175, 32, 3596, 26, 88, 35, 490, 301, 528, 434, 886, 537, 2260, 438, 600, 2288]}
{"line_number": 3929, "line_type": "original", "code": "", "entropy": 0.209228515625, "is_bug_line": false, "sus_score": 0.6357465386390686, "per_token_entropy": [0.209228515625], "tokens": [203]}
{"line_number": 3929, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6357465386390686, "per_token_entropy": [], "tokens": []}
{"line_number": 237, "line_type": "original", "code": "                switch (allowed) {", "entropy": 2.3203125, "is_bug_line": false, "sus_score": 0.5756126642227173, "per_token_entropy": [8.9609375, 4.49609375, 0.0095672607421875, 0.422607421875, 0.00199127197265625, 0.032318115234375], "tokens": [2071, 3578, 308, 11327, 27, 301]}
{"line_number": 237, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5756126642227173, "per_token_entropy": [], "tokens": []}
{"line_number": 204, "line_type": "original", "code": "            if (FastMath.abs(f1) <= ftol) {", "entropy": 1.14453125, "is_bug_line": false, "sus_score": 0.5743009448051453, "per_token_entropy": [7.05859375, 2.64453125, 0.11102294921875, 1.6103515625, 0.00031757354736328125, 0.0002701282501220703, 0.02764892578125, 0.0030918121337890625, 2.001953125, 0.1781005859375, 0.068359375, 0.88134765625, 3.591796875, 0.0634765625, 0.06280517578125, 0.0103302001953125], "tokens": [1468, 415, 308, 12200, 5717, 32, 3596, 26, 88, 35, 27, 2511, 296, 14598, 27, 301]}
{"line_number": 204, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5743009448051453, "per_token_entropy": [], "tokens": []}
{"line_number": 161, "line_type": "original", "code": "            final double fx = computeObjectiveValue(x);", "entropy": 1.7587890625, "is_bug_line": false, "sus_score": 0.5724782347679138, "per_token_entropy": [4.625, 9.84375, 0.197021484375, 3.5390625, 0.3779296875, 0.391845703125, 9.322166442871094e-05, 6.878376007080078e-05, 0.006359100341796875, 0.10565185546875, 0.262451171875], "tokens": [1468, 1158, 2064, 20670, 280, 7596, 33312, 882, 26, 106, 293]}
{"line_number": 161, "line_type": "generated", "code": "\n                    } else {\n                        return x0;\n                    }\n                case RIGHT_SIDE:\n                    if (inverted) {\n                        return x0;", "entropy": 0.058807373046875, "is_bug_line": false, "sus_score": 0.5724782347679138, "per_token_entropy": [0.1109619140625, 0.028961181640625, 0.6123046875, 0.0191192626953125, 0.0615234375, 0.0684814453125, 0.11279296875, 0.07720947265625, 0.002162933349609375, 0.325927734375, 0.002628326416015625, 0.06585693359375, 0.02447509765625, 0.0244903564453125, 6.556510925292969e-06, 1.1920928955078125e-06, 0.0004448890686035156, 0.01256561279296875, 0.01163482666015625, 0.0052032470703125, 0.00015783309936523438, 0.0003180503845214844, 0.0018310546875, 0.059234619140625, 0.0036754608154296875, 0.0011463165283203125, 0.007373809814453125, 0.00574493408203125], "tokens": [528, 320, 813, 301, 715, 442, 816, 34, 45, 528, 320, 400, 1135, 20169, 81, 25590, 44, 528, 415, 308, 47910, 27, 301, 715, 442, 816, 34, 45]}
{"line_number": 124, "line_type": "original", "code": "        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);", "entropy": 1.1806640625, "is_bug_line": false, "sus_score": 0.5712623596191406, "per_token_entropy": [4.4453125, 7.72265625, 4.5, 1.34375, 0.9033203125, 0.0047454833984375, 0.013641357421875, 0.027618408203125, 0.008636474609375, 0.94482421875, 0.00604248046875, 0.03253173828125, 0.033935546875, 0.9208984375, 0.061981201171875, 2.06640625, 3.568359375, 0.0014743804931640625, 0.002048492431640625, 0.53076171875, 0.0016355514526367188, 0.00021219253540039062, 0.0181732177734375], "tokens": [351, 442, 10932, 26, 1449, 14066, 30, 296, 30, 1847, 30, 1769, 30, 1477, 882, 30, 38886, 13628, 32, 15205, 81, 25590, 293]}
{"line_number": 124, "line_type": "generated", "code": "\n            }\n\n            // If the new approximation is within the function value accuracy\n            // of the bounds, return it.\n            if (FastMath.abs(fx) <= ftol) {\n                return x;\n            }\n\n            // If the new approximation is within", "entropy": 0.33203125, "is_bug_line": false, "sus_score": 0.5712623596191406, "per_token_entropy": [0.8505859375, 0.007389068603515625, 0.77001953125, 0.037078857421875, 1.0009765625, 0.376220703125, 1.3056640625, 0.302490234375, 0.1380615234375, 0.9287109375, 0.16064453125, 1.9375, 0.62890625, 0.0167388916015625, 0.4697265625, 0.0013980865478515625, 0.82421875, 0.164794921875, 1.8779296875, 0.076904296875, 0.75439453125, 0.156005859375, 0.09283447265625, 0.63232421875, 0.1998291015625, 0.08782958984375, 0.431396484375, 0.0006422996520996094, 6.580352783203125e-05, 0.005786895751953125, 0.00708770751953125, 0.0838623046875, 0.0253143310546875, 0.0338134765625, 0.1827392578125, 0.00018095970153808594, 0.0982666015625, 0.0014829635620117188, 0.04498291015625, 0.140625, 0.11407470703125, 0.00872039794921875, 0.0021495819091796875, 0.00019466876983642578, 0.044219970703125, 0.025604248046875, 0.457763671875, 0.21875, 0.7587890625, 0.0242156982421875, 0.1142578125, 0.6416015625], "tokens": [324, 320, 1064, 434, 1670, 322, 537, 39431, 438, 4797, 322, 667, 786, 14222, 324, 434, 432, 322, 11615, 30, 442, 561, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 5185, 27, 2511, 296, 14598, 27, 301, 400, 442, 816, 45, 324, 320, 1064, 434, 1670, 322, 537, 39431, 438, 4797]}
{"line_number": 195, "line_type": "original", "code": "                }", "entropy": 3.13671875, "is_bug_line": false, "sus_score": 0.564329206943512, "per_token_entropy": [1.673828125, 4.59765625], "tokens": [2071, 320]}
{"line_number": 195, "line_type": "generated", "code": "\n                case ABOVE_SIDE:", "entropy": 0.1085205078125, "is_bug_line": false, "sus_score": 0.564329206943512, "per_token_entropy": [0.697265625, 0.1688232421875, 0.0011386871337890625, 1.9073486328125e-06, 1.5497207641601562e-06, 1.7642974853515625e-05, 1.800060272216797e-05, 0.0007929801940917969], "tokens": [400, 1135, 399, 3183, 2478, 81, 25590, 44]}
{"line_number": 166, "line_type": "original", "code": "            if (fx == 0.0) {", "entropy": 1.6259765625, "is_bug_line": false, "sus_score": 0.5579738020896912, "per_token_entropy": [5.4375, 6.6875, 0.1551513671875, 4.55859375, 0.5439453125, 0.019378662109375, 0.0010156631469726562, 0.366455078125, 0.00201416015625, 0.045562744140625, 0.0721435546875], "tokens": [1468, 415, 308, 5185, 610, 225, 34, 32, 34, 27, 301]}
{"line_number": 166, "line_type": "generated", "code": "\n                    }\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the interval is too small, we can't get any closer to the\n            // root.\n            if (FastMath.", "entropy": 0.254150390625, "is_bug_line": false, "sus_score": 0.5579738020896912, "per_token_entropy": [0.71142578125, 0.0634765625, 0.35546875, 0.01122283935546875, 0.00498199462890625, 0.128173828125, 0.46337890625, 0.00189208984375, 0.016448974609375, 0.1187744140625, 0.04571533203125, 0.0053253173828125, 0.0026397705078125, 0.030517578125, 0.008514404296875, 0.005107879638671875, 0.0021190643310546875, 0.0048980712890625, 0.0001857280731201172, 0.00016558170318603516, 0.002414703369140625, 0.031463623046875, 0.0008902549743652344, 0.157958984375, 0.0009145736694335938, 0.74072265625, 0.07952880859375, 0.259765625, 0.366455078125, 2.62109375, 0.77294921875, 1.2080078125, 0.0234375, 0.274169921875, 1.251953125, 0.1671142578125, 0.0498046875, 0.079833984375, 0.4560546875, 0.010406494140625, 0.024932861328125, 0.049530029296875, 0.493408203125, 0.0027217864990234375, 0.1326904296875, 0.7158203125, 0.45654296875, 0.196533203125, 0.1468505859375, 0.464599609375, 3.0517578125e-05, 7.236003875732422e-05], "tokens": [528, 320, 528, 1626, 45, 400, 1244, 44, 528, 434, 9043, 7152, 7292, 32, 528, 1422, 537, 4175, 4292, 924, 473, 400, 320, 324, 320, 1064, 434, 1670, 322, 7898, 438, 5133, 5532, 30, 996, 883, 1330, 622, 1346, 30682, 372, 322, 324, 434, 3051, 32, 324, 415, 308, 12200, 5717, 32]}
{"line_number": 70, "line_type": "original", "code": "        this.method = method;", "entropy": 1.7353515625, "is_bug_line": false, "sus_score": 0.5517153739929199, "per_token_entropy": [4.50390625, 5.1171875, 0.06591796875, 1.7919921875, 0.1903076171875, 0.398681640625, 0.08087158203125], "tokens": [351, 458, 32, 1959, 280, 1411, 45]}
{"line_number": 70, "line_type": "generated", "code": "    /**\n     * Solve for a zero inside the given interval with the given start value.\n     *\n     * @param maxEval Maximum number of evaluations.\n     * @param f Function.\n     * @param min Lower bound for the interval.\n     *", "entropy": 0.20849609375, "is_bug_line": false, "sus_score": 0.5517153739929199, "per_token_entropy": [1.318359375, 0.31396484375, 0.3544921875, 0.00041794776916503906, 1.51953125, 0.007312774658203125, 0.061248779296875, 0.0222015380859375, 0.77880859375, 0.042724609375, 0.88720703125, 0.016357421875, 0.86669921875, 0.463134765625, 0.11566162109375, 1.6171875, 0.30810546875, 0.10833740234375, 0.00827789306640625, 0.002696990966796875, 0.211669921875, 0.0001035928726196289, 0.0154571533203125, 0.0034236907958984375, 0.412841796875, 0.0117340087890625, 0.127685546875, 0.01078033447265625, 7.295608520507812e-05, 0.046478271484375, 7.152557373046875e-06, 0.00896453857421875, 0.0014486312866210938, 9.5367431640625e-06, 0.00018906593322753906, 0.00014638900756835938, 0.01267242431640625, 0.359130859375, 0.55615234375, 0.0007786750793457031, 2.5153160095214844e-05, 0.00011336803436279297, 0.00017964839935302734, 0.050872802734375, 0.0224609375, 0.0190887451171875, 0.1317138671875, 0.01666259765625, 0.010498046875, 0.0028533935546875, 0.0006690025329589844, 2.384185791015625e-06], "tokens": [264, 1022, 275, 319, 47005, 436, 312, 5934, 6517, 322, 2702, 7898, 623, 322, 2702, 1477, 786, 32, 275, 319, 275, 319, 477, 753, 1769, 14066, 18690, 1451, 432, 6130, 993, 32, 275, 319, 477, 753, 296, 4540, 32, 275, 319, 477, 753, 1847, 35245, 5085, 436, 322, 7898, 32, 275, 319]}
{"line_number": 43, "line_type": "original", "code": " * implementation.</p>", "entropy": 4.9609375, "is_bug_line": false, "sus_score": 0.5490103363990784, "per_token_entropy": [6.76953125, 10.765625, 6.265625, 0.9228515625, 0.0753173828125], "tokens": [319, 4736, 1730, 98, 48]}
{"line_number": 43, "line_type": "generated", "code": "        this.allowed = AllowedSolution.ANY_SIDE;", "entropy": 0.07244873046875, "is_bug_line": false, "sus_score": 0.5490103363990784, "per_token_entropy": [0.615234375, 0.1107177734375, 0.0017910003662109375, 0.08062744140625, 0.0026340484619140625, 0.00933837890625, 0.0004444122314453125, 0.0006427764892578125, 0.00628662109375, 0.000492095947265625, 5.9604644775390625e-06, 0.041015625], "tokens": [351, 458, 32, 11327, 280, 38886, 13628, 32, 15205, 81, 25590, 45]}
{"line_number": 151, "line_type": "original", "code": "        final double rtol = getRelativeAccuracy();", "entropy": 1.7841796875, "is_bug_line": false, "sus_score": 0.5408200621604919, "per_token_entropy": [5.078125, 6.33203125, 0.1732177734375, 4.55859375, 0.0008459091186523438, 1.3486328125, 0.268798828125, 0.04681396484375, 0.0013799667358398438, 0.0298004150390625], "tokens": [351, 1158, 2064, 12190, 362, 280, 622, 11777, 26201, 473]}
{"line_number": 151, "line_type": "generated", "code": "\n\n            // Check if we have found a solution that satisfies the accuracy\n            // conditions.\n            if (FastMath.abs(x - x1) <= (0.5 * (x1 - x0)) ||\n                (FastMath.abs(f", "entropy": 0.487060546875, "is_bug_line": false, "sus_score": 0.5408200621604919, "per_token_entropy": [0.3134765625, 0.07122802734375, 1.3125, 1.6513671875, 1.4765625, 1.43359375, 0.87158203125, 0.278076171875, 0.59423828125, 0.662109375, 0.9287109375, 0.0059967041015625, 0.669921875, 0.0413818359375, 0.0009102821350097656, 1.8935546875, 0.061614990234375, 0.241455078125, 0.74462890625, 0.16455078125, 1.2841796875, 0.00011181831359863281, 5.984306335449219e-05, 0.055938720703125, 0.0111236572265625, 0.5576171875, 0.5908203125, 0.0706787109375, 0.29833984375, 0.0009508132934570312, 0.280517578125, 1.255859375, 1.09375, 0.00016570091247558594, 0.01020050048828125, 0.003173828125, 0.32275390625, 0.32763671875, 0.01043701171875, 0.0160675048828125, 0.0002593994140625, 0.00030112266540527344, 0.82080078125, 0.84375, 0.783203125, 1.5791015625, 0.830078125, 1.4781951904296875e-05, 0.00012767314910888672, 0.144287109375, 0.008392333984375, 0.71533203125], "tokens": [1064, 434, 3456, 415, 996, 1159, 2431, 312, 5295, 688, 48653, 322, 14222, 324, 434, 5479, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 106, 429, 816, 35, 27, 2511, 308, 34, 32, 39, 319, 308, 106, 35, 429, 816, 34, 490, 1276, 400, 308, 12200, 5717, 32, 3596, 26, 88]}
{"line_number": 3410, "line_type": "original", "code": "", "entropy": 0.209228515625, "is_bug_line": false, "sus_score": 0.5379022359848022, "per_token_entropy": [0.209228515625], "tokens": [203]}
{"line_number": 3410, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5379022359848022, "per_token_entropy": [], "tokens": []}
{"line_number": 149, "line_type": "original", "code": "        final double ftol = getFunctionValueAccuracy();", "entropy": 1.3662109375, "is_bug_line": false, "sus_score": 0.5341132283210754, "per_token_entropy": [6.1171875, 2.771484375, 0.0347900390625, 2.36328125, 2.12890625, 0.0098724365234375, 1.5703125, 0.00044918060302734375, 3.361701965332031e-05, 0.00043582916259765625, 0.0283660888671875], "tokens": [351, 1158, 2064, 296, 14598, 280, 622, 2447, 882, 26201, 473]}
{"line_number": 149, "line_type": "generated", "code": "\n            // If the new interval is bracketed, we can return.\n            if (f0 * fx <= 0) {\n                return newton(maxEval, f, x0, x, x1);\n            }\n\n            // If the maximum number", "entropy": 0.51611328125, "is_bug_line": false, "sus_score": 0.5341132283210754, "per_token_entropy": [0.51513671875, 0.34375, 0.89453125, 0.312744140625, 1.8515625, 0.9990234375, 0.71435546875, 2.22265625, 0.098876953125, 0.457763671875, 1.453125, 1.052734375, 1.07421875, 1.556640625, 0.1551513671875, 0.1568603515625, 0.2152099609375, 0.64453125, 0.436279296875, 0.10980224609375, 0.04132080078125, 0.53857421875, 0.0012407302856445312, 7.510185241699219e-05, 0.154541015625, 0.0016117095947265625, 0.049468994140625, 0.55712890625, 2.154296875, 0.022552490234375, 0.52978515625, 1.67578125, 0.0094146728515625, 0.01739501953125, 0.1610107421875, 0.189208984375, 0.1539306640625, 0.07830810546875, 0.0024776458740234375, 0.01666259765625, 1.4130859375, 0.2191162109375, 0.01270294189453125, 0.71142578125, 0.01435089111328125, 0.0006222724914550781, 0.529296875, 0.06182861328125, 0.477294921875, 0.409912109375, 1.0849609375, 0.29296875], "tokens": [324, 434, 1670, 322, 537, 7898, 438, 33828, 318, 30, 996, 883, 442, 32, 324, 415, 308, 88, 34, 319, 20670, 2511, 225, 34, 27, 301, 400, 442, 537, 937, 26, 1449, 14066, 30, 296, 30, 816, 34, 30, 816, 30, 816, 35, 293, 324, 320, 1064, 434, 1670, 322, 7091, 1451]}
{"line_number": 205, "line_type": "original", "code": "                switch (allowed) {", "entropy": 2.212890625, "is_bug_line": false, "sus_score": 0.53346848487854, "per_token_entropy": [8.390625, 4.5, 0.01276397705078125, 0.3046875, 0.005565643310546875, 0.06536865234375], "tokens": [2071, 3578, 308, 11327, 27, 301]}
{"line_number": 205, "line_type": "generated", "code": "\n    /**\n     * Compute the objective function value.\n     *\n     * @param x Value.\n     * @return the objective function value.\n     */\n    protected abstract double computeObjectiveValue(double x);", "entropy": 0.267822265625, "is_bug_line": false, "sus_score": 0.53346848487854, "per_token_entropy": [0.9052734375, 0.447998046875, 0.1611328125, 0.0002810955047607422, 1.82421875, 0.2103271484375, 0.434326171875, 0.1077880859375, 0.08489990234375, 0.484130859375, 0.2034912109375, 0.0159759521484375, 0.62548828125, 0.00167083740234375, 0.03802490234375, 0.00440216064453125, 0.0703125, 0.7685546875, 0.96923828125, 0.0032596588134765625, 0.0014429092407226562, 0.002685546875, 0.0018949508666992188, 0.8671875, 0.9326171875, 0.0253753662109375, 0.050933837890625, 0.169189453125, 0.0169219970703125, 0.2047119140625, 0.01174163818359375, 0.58984375, 0.5078125, 0.01331329345703125, 0.0007600784301757812, 8.380413055419922e-05, 0.00019288063049316406, 0.0029354095458984375, 0.2122802734375, 0.00020396709442138672, 0.005580902099609375], "tokens": [284, 1022, 275, 319, 12836, 322, 25110, 667, 786, 32, 275, 319, 275, 319, 477, 753, 816, 3846, 32, 275, 319, 477, 601, 322, 25110, 667, 786, 32, 275, 569, 284, 2522, 5547, 2064, 7596, 33312, 882, 26, 2627, 816, 293]}
{"line_number": 146, "line_type": "original", "code": "        verifyBracketing(x0, x1);", "entropy": 2.263671875, "is_bug_line": false, "sus_score": 0.5320019125938416, "per_token_entropy": [6.46484375, 14.359375, 0.6298828125, 0.0156402587890625, 0.261962890625, 0.3447265625, 0.450927734375, 0.006866455078125, 0.444580078125, 0.487060546875, 1.4306640625], "tokens": [351, 6144, 24086, 299, 26, 106, 34, 30, 816, 35, 293]}
{"line_number": 146, "line_type": "generated", "code": "\n            }\n\n            // If the relative accuracy is met or if the maximum number of\n            // evaluations is reached, stop.\n            if (FastMath.abs(x - x1) <= rtol * FastMath.max(FastMath.abs(", "entropy": 0.357666015625, "is_bug_line": false, "sus_score": 0.5320019125938416, "per_token_entropy": [0.55224609375, 0.0280914306640625, 0.1827392578125, 0.1240234375, 1.0556640625, 0.425537109375, 3.142578125, 0.6318359375, 0.88037109375, 0.78759765625, 0.9150390625, 0.96923828125, 0.391845703125, 0.82275390625, 0.09100341796875, 0.0780029296875, 0.06683349609375, 0.0020618438720703125, 0.028411865234375, 7.987022399902344e-06, 0.10784912109375, 1.1689453125, 0.0238800048828125, 1.431640625, 0.1826171875, 0.1697998046875, 0.185546875, 0.426025390625, 0.198486328125, 7.355213165283203e-05, 4.1961669921875e-05, 0.0292205810546875, 0.29052734375, 0.279541015625, 0.291748046875, 0.0241851806640625, 0.1220703125, 0.0005407333374023438, 0.1602783203125, 1.45703125, 1.1920928955078125e-07, 0.0032138824462890625, 0.340087890625, 2.1338462829589844e-05, 0.00031447410583496094, 0.341064453125, 0.0006785392761230469, 0.176513671875, 2.1457672119140625e-06, 0.0004494190216064453, 0.00024962425231933594, 0.00014519691467285156], "tokens": [324, 320, 1064, 434, 1670, 322, 6491, 14222, 438, 3279, 556, 415, 322, 7091, 1451, 432, 324, 434, 6130, 993, 438, 16673, 30, 4719, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 106, 429, 816, 35, 27, 2511, 12190, 362, 319, 15938, 5717, 32, 1449, 26, 12200, 5717, 32, 3596, 26]}
{"line_number": 155, "line_type": "original", "code": "        boolean inverted = false;", "entropy": 3.400390625, "is_bug_line": false, "sus_score": 0.5245555639266968, "per_token_entropy": [5.30859375, 9.40625, 5.04296875, 0.50634765625, 0.1234130859375, 0.0261077880859375], "tokens": [351, 1905, 37592, 280, 901, 45]}
{"line_number": 155, "line_type": "generated", "code": "\n                return x1;\n            }\n\n            // If the new approximation is outside of the interval, then we\n            // bracket the root.\n            if ((x - x0) * (x - x1) > 0) {\n                verifyBracketing(", "entropy": 0.48828125, "is_bug_line": false, "sus_score": 0.5245555639266968, "per_token_entropy": [0.246337890625, 0.783203125, 0.5634765625, 0.490234375, 0.0029163360595703125, 0.026580810546875, 0.0009222030639648438, 0.2423095703125, 0.05902099609375, 0.286376953125, 0.44970703125, 3.251953125, 0.353759765625, 0.1632080078125, 0.98095703125, 0.15576171875, 0.05914306640625, 2.751953125, 0.319091796875, 1.8076171875, 0.7822265625, 0.68212890625, 0.06732177734375, 3.279296875, 0.7236328125, 0.02294921875, 0.50537109375, 0.37109375, 0.298828125, 1.1943359375, 0.5478515625, 2.228515625, 0.006282806396484375, 0.1387939453125, 0.0018949508666992188, 0.004161834716796875, 0.164794921875, 0.0107269287109375, 0.2744140625, 0.00042247772216796875, 0.0016841888427734375, 0.0004229545593261719, 0.0792236328125, 0.0010499954223632812, 8.559226989746094e-05, 0.06561279296875, 0.0029125213623046875, 0.1981201171875, 0.7333984375, 0.0010919570922851562, 3.5762786865234375e-06, 0.0013799667358398438], "tokens": [400, 442, 816, 35, 45, 324, 320, 1064, 434, 1670, 322, 537, 39431, 438, 11127, 432, 322, 7898, 30, 1615, 996, 324, 434, 33828, 322, 3051, 32, 324, 415, 1833, 106, 429, 816, 34, 27, 319, 308, 106, 429, 816, 35, 27, 848, 225, 34, 27, 301, 400, 6144, 24086, 299, 26]}
