{"line_number": 153, "line_type": "original", "code": "    protected void updateJacobian() {", "entropy": 2.02734375, "is_bug_line": false, "sus_score": 0.5037164688110352, "per_token_entropy": [5.25, 1.2529296875, 0.126953125, 0.1785888671875, 5.51171875, 0.0019445419311523438, 3.529296875, 0.37158203125], "tokens": [264, 2522, 763, 1974, 60, 30495, 346, 301]}
{"line_number": 153, "line_type": "generated", "code": "\n        // compute the weighted residuals\n        final double[] weightedResiduals = computeResiduals(point);\n        // compute the cost\n        final double cost = computeCost(weightedResiduals);\n    }\n\n    /**\n     * Compute the residuals vector", "entropy": 0.348876953125, "is_bug_line": false, "sus_score": 0.5037164688110352, "per_token_entropy": [0.25048828125, 2.552734375, 0.64697265625, 0.71484375, 1.4189453125, 0.0711669921875, 0.019378662109375, 0.468505859375, 0.74560546875, 0.52099609375, 0.0166778564453125, 0.251220703125, 0.003124237060546875, 0.00771331787109375, 0.03082275390625, 0.06585693359375, 0.1160888671875, 0.44287109375, 2.4437904357910156e-05, 7.092952728271484e-05, 0.0030956268310546875, 0.0131378173828125, 0.01120758056640625, 0.39404296875, 0.78076171875, 0.84423828125, 0.1793212890625, 0.26513671875, 0.5654296875, 0.85400390625, 0.014923095703125, 0.07977294921875, 0.01299285888671875, 0.0196533203125, 0.024322509765625, 0.00047588348388671875, 0.326171875, 0.0028400421142578125, 1.0251998901367188e-05, 0.0010938644409179688, 0.0107879638671875, 1.4091796875, 0.02825927734375, 0.07806396484375, 0.0039520263671875, 0.01493072509765625, 7.927417755126953e-05, 1.4619140625, 0.059478759765625, 0.66748046875, 0.00980377197265625, 1.6533203125], "tokens": [291, 434, 7596, 322, 29271, 27410, 101, 291, 1158, 2064, 1178, 29271, 721, 6392, 101, 280, 7596, 721, 6392, 101, 26, 1493, 293, 291, 434, 7596, 322, 7847, 291, 1158, 2064, 7847, 280, 7596, 9375, 26, 26485, 721, 6392, 101, 293, 284, 320, 446, 1022, 275, 319, 12836, 322, 27410, 101, 4026]}
{"line_number": 132, "line_type": "original", "code": "     */", "entropy": 6.3046875, "is_bug_line": false, "sus_score": 0.5031787753105164, "per_token_entropy": [6.078125, 6.53125], "tokens": [262, 569]}
{"line_number": 132, "line_type": "generated", "code": "        }\n        return new Array2DRowRealMatrix(jacobianData, false);\n    }\n\n    /**\n     * @return the square root of the weight matrix.\n     */\n    protected RealMatrix getWeightMatrix() {\n        return weightMatrixSqrt;\n   ", "entropy": 0.2568359375, "is_bug_line": false, "sus_score": 0.5031787753105164, "per_token_entropy": [1.7099609375, 0.11407470703125, 0.355224609375, 0.327392578125, 0.78466796875, 0.08837890625, 0.0013523101806640625, 2.110004425048828e-05, 3.7789344787597656e-05, 0.00016105175018310547, 6.67572021484375e-06, 0.00028133392333984375, 0.0178985595703125, 1.1920928955078125e-07, 0.0009136199951171875, 0.607421875, 0.015838623046875, 0.0011453628540039062, 0.03680419921875, 0.0003979206085205078, 0.190673828125, 0.02099609375, 0.05322265625, 4.363059997558594e-05, 2.0078125, 0.94384765625, 0.494873046875, 1.2294921875, 0.93310546875, 0.008575439453125, 0.01470947265625, 0.046234130859375, 0.0709228515625, 0.296142578125, 0.042724609375, 0.5361328125, 0.0031299591064453125, 0.5615234375, 0.00864410400390625, 4.887580871582031e-05, 0.010894775390625, 0.03082275390625, 0.36181640625, 1.216796875, 0.0023784637451171875, 0.0186004638671875, 0.111328125, 0.022735595703125, 0.00023877620697021484, 0.0027217864990234375, 0.047515869140625, 0.006359100341796875], "tokens": [351, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 42517, 2531, 750, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 601, 322, 14627, 3051, 432, 322, 7533, 5045, 32, 275, 569, 284, 2522, 11443, 4161, 622, 7583, 4161, 346, 301, 291, 442, 7533, 4161, 30657, 45, 284]}
{"line_number": 423, "line_type": "original", "code": "        return optimizeInternal(maxEval,", "entropy": 0.849609375, "is_bug_line": false, "sus_score": 0.4849401116371155, "per_token_entropy": [3.693359375, 2.708984375, 0.2012939453125, 0.107421875, 0.00460052490234375, 0.07879638671875, 0.0006175041198730469, 0.0013856887817382812], "tokens": [351, 442, 22269, 4292, 26, 1449, 14066, 30]}
{"line_number": 423, "line_type": "generated", "code": "\n                                FunctionUtils.toMultivariateDifferentiableVectorFunction(f),\n                                new Target(target),\n                                new Weight(weights),\n                                new InitialGuess(startPoint));\n    }\n\n    /**\n     * Optimize an objective function.\n     * Optimization is considered to", "entropy": 0.056121826171875, "is_bug_line": false, "sus_score": 0.4849401116371155, "per_token_entropy": [0.79345703125, 0.310791015625, 0.0009417533874511719, 0.0012216567993164062, 0.01168060302734375, 0.002124786376953125, 5.125999450683594e-06, 0.03765869140625, 5.245208740234375e-06, 0.00016832351684570312, 8.726119995117188e-05, 0.003154754638671875, 0.005725860595703125, 0.0272979736328125, 0.48486328125, 0.1951904296875, 0.0487060546875, 0.019744873046875, 0.0113525390625, 0.01345062255859375, 0.01409912109375, 0.0010862350463867188, 0.0019550323486328125, 0.00017249584197998047, 0.00038170814514160156, 0.0148468017578125, 0.0105438232421875, 0.0005984306335449219, 0.002346038818359375, 2.467632293701172e-05, 0.00014889240264892578, 0.00548553466796875, 0.00016987323760986328, 0.015655517578125, 0.06585693359375, 0.01453399658203125, 0.1505126953125, 0.024566650390625, 0.05078125, 4.9591064453125e-05, 0.1727294921875, 0.0009360313415527344, 0.01097869873046875, 0.00174713134765625, 0.0012111663818359375, 0.0175628662109375, 0.0401611328125, 9.512901306152344e-05, 0.329345703125, 0.00021696090698242188, 0.0016870498657226562, 0.0006284713745117188], "tokens": [1378, 4540, 2755, 32, 452, 11235, 27623, 31187, 1529, 2863, 2447, 26, 88, 471, 1378, 537, 10057, 26, 1977, 471, 1378, 537, 20749, 26, 9582, 471, 1378, 537, 5768, 38015, 26, 1366, 1943, 876, 284, 320, 446, 1022, 275, 319, 13814, 12178, 600, 25110, 667, 32, 275, 319, 41916, 438, 11870, 372]}
{"line_number": 176, "line_type": "original", "code": "        final int nR = getTarget().length;", "entropy": 1.8525390625, "is_bug_line": false, "sus_score": 0.4822521507740021, "per_token_entropy": [3.99609375, 3.02734375, 5.03125, 0.66259765625, 1.7568359375, 0.02838134765625, 3.76171875, 1.94921875, 0.062042236328125, 0.08648681640625, 0.011077880859375], "tokens": [351, 1158, 629, 310, 68, 280, 622, 2922, 922, 1322, 45]}
{"line_number": 176, "line_type": "generated", "code": "\n        return 0.5 * r.dotProduct(r);\n    }\n\n    /**\n     * Computes the residuals.\n     *\n     * @param objectiveValue Value of the objective function.\n     * @return the residuals.\n     * @see #", "entropy": 0.1376953125, "is_bug_line": false, "sus_score": 0.4822521507740021, "per_token_entropy": [0.09149169921875, 0.27685546875, 2.1328125, 0.025634765625, 0.0202484130859375, 0.0002989768981933594, 0.00156402587890625, 0.2802734375, 0.00010800361633300781, 0.0103302001953125, 0.0001068115234375, 0.00010395050048828125, 0.198974609375, 0.0241851806640625, 0.056732177734375, 0.0007481575012207031, 0.087158203125, 0.005016326904296875, 0.00406646728515625, 0.00016248226165771484, 0.343994140625, 0.03143310546875, 0.66650390625, 0.006927490234375, 0.455322265625, 0.044647216796875, 4.172325134277344e-06, 0.10491943359375, 2.956390380859375e-05, 0.00496673583984375, 0.006134033203125, 0.53076171875, 0.1839599609375, 0.552734375, 0.001373291015625, 0.00492095947265625, 0.10870361328125, 0.008636474609375, 0.2232666015625, 0.055908203125, 1.3589859008789062e-05, 0.00566864013671875, 0.0011091232299804688, 0.020904541015625, 0.081787109375, 0.01113128662109375, 0.235107421875, 0.0026569366455078125, 0.0058135986328125, 0.000560760498046875, 0.2337646484375, 0.00983428955078125], "tokens": [291, 442, 225, 34, 32, 39, 319, 540, 32, 4260, 3409, 26, 100, 293, 284, 320, 446, 1022, 275, 319, 41932, 322, 27410, 101, 32, 275, 319, 275, 319, 477, 753, 25110, 882, 3846, 432, 322, 25110, 667, 32, 275, 319, 477, 601, 322, 27410, 101, 32, 275, 319, 477, 2970, 588]}
{"line_number": 177, "line_type": "original", "code": "        if (dsValue.length != nR) {", "entropy": 1.8193359375, "is_bug_line": false, "sus_score": 0.4812699556350708, "per_token_entropy": [4.31640625, 3.82421875, 0.26953125, 8.8671875, 1.9814453125, 0.23095703125, 0.25146484375, 0.0545654296875, 1.68359375, 0.12249755859375, 0.0249786376953125, 0.2086181640625], "tokens": [351, 415, 308, 3210, 882, 32, 1322, 863, 310, 68, 27, 301]}
{"line_number": 177, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Computes the residuals.\n     *\n     * @param objectiveValue Value of the objective function.\n     * @return the residuals.\n     * @see #computeObjectiveValue(double[])\n     * @since 3.1", "entropy": 0.114990234375, "is_bug_line": false, "sus_score": 0.4812699556350708, "per_token_entropy": [0.8359375, 0.26025390625, 0.31005859375, 0.01486968994140625, 0.01078033447265625, 0.00019240379333496094, 0.473388671875, 0.03485107421875, 0.68310546875, 0.007518768310546875, 0.487548828125, 0.04718017578125, 5.364418029785156e-06, 0.1309814453125, 4.374980926513672e-05, 0.00627899169921875, 0.008514404296875, 0.42529296875, 0.220458984375, 0.62744140625, 0.001438140869140625, 0.00460052490234375, 0.112060546875, 0.00820159912109375, 0.23828125, 0.042510986328125, 1.7523765563964844e-05, 0.00539398193359375, 0.0012788772583007812, 0.02276611328125, 0.09521484375, 0.01172637939453125, 0.2435302734375, 0.003971099853515625, 0.00763702392578125, 0.000652313232421875, 0.2744140625, 0.01136016845703125, 0.06585693359375, 0.1630859375, 0.00023472309112548828, 0.0241241455078125, 0.0052947998046875, 0.00921630859375, 0.0017786026000976562, 0.00919342041015625, 0.00043511390686035156, 0.0286712646484375, 7.164478302001953e-05, 0.000873565673828125, 1.4185905456542969e-05, 0.0016870498657226562], "tokens": [284, 320, 446, 1022, 275, 319, 41932, 322, 27410, 101, 32, 275, 319, 275, 319, 477, 753, 25110, 882, 3846, 432, 322, 25110, 667, 32, 275, 319, 477, 601, 322, 27410, 101, 32, 275, 319, 477, 2970, 588, 7924, 33312, 882, 26, 2627, 9795, 275, 319, 477, 8119, 225, 37, 32, 35]}
{"line_number": 187, "line_type": "original", "code": "            }", "entropy": 5.2734375, "is_bug_line": false, "sus_score": 0.4805839955806732, "per_token_entropy": [6.0390625, 4.51171875], "tokens": [1468, 320]}
{"line_number": 187, "line_type": "generated", "code": "\n     * @return the Root Mean Square value\n     * @deprecated As of 3.1. Please use {@link #getRMS()} instead.\n     */\n    @Deprecated\n    public double getRms() {\n        return FastMath.sqrt(cost /", "entropy": 0.212890625, "is_bug_line": false, "sus_score": 0.4805839955806732, "per_token_entropy": [0.6162109375, 0.0579833984375, 0.2060546875, 0.046539306640625, 0.321044921875, 1.185546875, 0.0029582977294921875, 0.00826263427734375, 0.2255859375, 0.68505859375, 0.438232421875, 0.059844970703125, 0.97802734375, 0.200927734375, 0.0006890296936035156, 0.011016845703125, 0.00141143798828125, 7.998943328857422e-05, 0.01364898681640625, 0.04925537109375, 0.09368896484375, 0.004673004150390625, 0.14013671875, 0.0011529922485351562, 0.041351318359375, 1.0224609375, 0.1234130859375, 0.51953125, 0.023712158203125, 0.0093994140625, 0.017425537109375, 0.051361083984375, 0.0225372314453125, 0.0035800933837890625, 0.00453948974609375, 0.00231170654296875, 0.39306640625, 0.0811767578125, 0.023773193359375, 1.20703125, 0.016326904296875, 0.05181884765625, 0.003719329833984375, 0.12408447265625, 0.1680908203125, 0.322509765625, 2.002716064453125e-05, 8.225440979003906e-06, 0.0008902549743652344, 0.0061798095703125, 1.3505859375, 0.127685546875], "tokens": [275, 319, 477, 601, 322, 14741, 27371, 31526, 786, 275, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 32, 5294, 793, 3088, 1204, 588, 43907, 2739, 9741, 4174, 32, 275, 569, 284, 477, 15387, 284, 562, 2064, 622, 68, 874, 346, 301, 291, 442, 15938, 5717, 32, 8663, 26, 8030, 517]}
{"line_number": 109, "line_type": "original", "code": "     * @deprecated As of 3.1. Field to become \"private\" in 4.0.", "entropy": 1.3359375, "is_bug_line": false, "sus_score": 0.4802562892436981, "per_token_entropy": [2.2578125, 0.045989990234375, 1.4423828125, 1.7021484375, 0.086669921875, 0.0003972053527832031, 0.00652313232421875, 0.0005970001220703125, 0.00041222572326660156, 0.01031494140625, 0.1170654296875, 11.265625, 4.42578125, 3.095703125, 5.1875, 0.53173828125, 0.26318359375, 0.149658203125, 0.0606689453125, 0.0083160400390625, 5.7220458984375e-06, 8.440017700195312e-05, 0.07879638671875], "tokens": [262, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 32, 5692, 372, 9555, 313, 2055, 20, 328, 225, 38, 32, 34, 32]}
{"line_number": 109, "line_type": "generated", "code": "\n     * @param point Current point.\n     * @return Weighted Jacobian matrix.\n     * @throws DimensionMismatchException if the Jacobian dimension does not\n     * match problem dimension.\n     * @deprecated As of 3.1. Please use {@", "entropy": 0.196044921875, "is_bug_line": false, "sus_score": 0.4802562892436981, "per_token_entropy": [0.58203125, 0.004405975341796875, 1.2421875, 0.280517578125, 0.3876953125, 0.9375, 0.1431884765625, 0.1767578125, 0.1640625, 0.005222320556640625, 0.01300048828125, 0.1287841796875, 1.1396484375, 0.00685882568359375, 0.386962890625, 0.00026726722717285156, 0.051971435546875, 0.3828125, 0.09539794921875, 0.305419921875, 0.0172576904296875, 0.86328125, 0.06805419921875, 0.0001690387725830078, 1.1920928955078125e-06, 0.0164642333984375, 0.06903076171875, 0.09881591796875, 2.5510787963867188e-05, 0.0081787109375, 0.00289154052734375, 0.003879547119140625, 0.042510986328125, 0.0002598762512207031, 0.0018310546875, 0.052886962890625, 0.00028896331787109375, 0.00714874267578125, 0.08489990234375, 0.69384765625, 0.0205230712890625, 0.448486328125, 0.0748291015625, 0.00025916099548339844, 0.0017147064208984375, 0.0004298686981201172, 1.3113021850585938e-06, 0.01214599609375, 0.046417236328125, 0.724609375, 0.0079345703125, 0.394287109375], "tokens": [275, 319, 477, 753, 2260, 7500, 2260, 32, 275, 319, 477, 601, 20749, 318, 971, 30495, 5045, 32, 275, 319, 477, 5117, 17417, 31102, 984, 415, 322, 971, 30495, 8742, 1957, 646, 275, 319, 2530, 3708, 8742, 32, 275, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 32, 5294, 793, 3088]}
{"line_number": 189, "line_type": "original", "code": "", "entropy": 3.427734375, "is_bug_line": false, "sus_score": 0.4796474575996399, "per_token_entropy": [3.427734375], "tokens": [203]}
{"line_number": 189, "line_type": "generated", "code": "\n    public double getRMS() {\n        return FastMath.sqrt(getChiSquare() / getTarget().length);\n    }\n\n    /**\n     * Get the value of the criterion.\n     * Get the value of the criterion, i.e. the sum", "entropy": 0.322509765625, "is_bug_line": false, "sus_score": 0.4796474575996399, "per_token_entropy": [0.28759765625, 0.432861328125, 0.0706787109375, 0.0238037109375, 0.71240234375, 0.01464080810546875, 0.04315185546875, 0.261474609375, 0.234619140625, 0.1436767578125, 2.086162567138672e-05, 2.765655517578125e-05, 0.0010204315185546875, 0.010772705078125, 1.5556640625, 0.56689453125, 0.65869140625, 0.053558349609375, 0.003509521484375, 0.947265625, 0.71435546875, 0.0038433074951171875, 0.004070281982421875, 0.005451202392578125, 0.09320068359375, 0.005298614501953125, 0.279541015625, 0.0157012939453125, 0.0322265625, 1.239776611328125e-05, 0.2578125, 0.0200347900390625, 2.41015625, 0.003978729248046875, 0.05621337890625, 0.349853515625, 0.80322265625, 0.13427734375, 0.00020372867584228516, 1.03515625, 0.0034427642822265625, 0.118408203125, 0.0013246536254882812, 0.002811431884765625, 0.020477294921875, 1.6826171875, 1.1943359375, 3.2901763916015625e-05, 0.00024247169494628906, 0.011474609375, 0.07757568359375, 1.3984375], "tokens": [284, 562, 2064, 622, 44450, 346, 301, 291, 442, 15938, 5717, 32, 8663, 26, 371, 40953, 18374, 346, 517, 622, 2922, 922, 1322, 293, 284, 320, 446, 1022, 275, 319, 1390, 322, 786, 432, 322, 29502, 32, 275, 319, 1390, 322, 786, 432, 322, 29502, 30, 595, 32, 87, 32, 322, 3632]}
{"line_number": 178, "line_type": "original", "code": "            throw new DimensionMismatchException(dsValue.length, nR);", "entropy": 1.0927734375, "is_bug_line": false, "sus_score": 0.4719446301460266, "per_token_entropy": [7.57421875, 2.68359375, 0.0421142578125, 0.78173828125, 0.000568389892578125, 1.0371208190917969e-05, 0.016021728515625, 3.734375, 0.050506591796875, 0.0545654296875, 0.00290679931640625, 0.01349639892578125, 1.3984375, 0.0265350341796875, 0.00856781005859375], "tokens": [1468, 1422, 537, 17417, 31102, 984, 26, 3210, 882, 32, 1322, 30, 310, 68, 293]}
{"line_number": 178, "line_type": "generated", "code": "    /**\n     * Compute the residuals vector.\n     *\n     * @param objectiveValue Value of the objective function.\n     * @return the residuals.\n     * @see #computeObjectiveValue(double[])\n     * @since 3.1\n    ", "entropy": 0.2259521484375, "is_bug_line": false, "sus_score": 0.4719446301460266, "per_token_entropy": [2.041015625, 0.3291015625, 0.22314453125, 0.0011301040649414062, 2.20703125, 0.200927734375, 0.9296875, 0.022186279296875, 1.5419921875, 0.12469482421875, 0.07781982421875, 3.2782554626464844e-05, 0.352294921875, 6.258487701416016e-05, 0.01163482666015625, 0.01189422607421875, 0.402587890625, 0.2587890625, 0.388427734375, 0.001178741455078125, 0.0047454833984375, 0.12359619140625, 0.009613037109375, 0.287353515625, 0.056915283203125, 2.4318695068359375e-05, 0.00823974609375, 0.0025768280029296875, 0.0771484375, 0.09747314453125, 0.0205841064453125, 1.0390625, 0.007049560546875, 0.020751953125, 0.0011606216430664062, 0.48486328125, 0.014007568359375, 0.1572265625, 0.09765625, 0.00042557716369628906, 0.01541900634765625, 0.00864410400390625, 0.0118865966796875, 0.0019283294677734375, 0.01511383056640625, 0.0007596015930175781, 0.05291748046875, 9.524822235107422e-05, 0.0011425018310546875, 3.528594970703125e-05, 0.0025043487548828125, 0.0010175704956054688], "tokens": [264, 1022, 275, 319, 12836, 322, 27410, 101, 4026, 32, 275, 319, 275, 319, 477, 753, 25110, 882, 3846, 432, 322, 25110, 667, 32, 275, 319, 477, 601, 322, 27410, 101, 32, 275, 319, 477, 2970, 588, 7924, 33312, 882, 26, 2627, 9795, 275, 319, 477, 8119, 225, 37, 32, 35, 275]}
{"line_number": 94, "line_type": "original", "code": "     * @deprecated As of 3.1.", "entropy": 1.0224609375, "is_bug_line": false, "sus_score": 0.46712526679039, "per_token_entropy": [5.63671875, 2.978515625, 0.828125, 1.2412109375, 0.2587890625, 0.0008077621459960938, 0.025146484375, 0.0009870529174804688, 0.00021219253540039062, 0.01198577880859375, 0.26318359375], "tokens": [262, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 32]}
{"line_number": 94, "line_type": "generated", "code": "\n    /**\n     * {@inheritDoc}\n     *\n     * @deprecated As of 3.1 (to be removed in 4.0).\n     */\n    @Deprecated\n    @Override\n    public PointVectorValuePair optimize(int maxEvaluations,\n                                        Multivariate", "entropy": 0.260009765625, "is_bug_line": false, "sus_score": 0.46712526679039, "per_token_entropy": [1.103515625, 0.09906005859375, 0.11627197265625, 9.202957153320312e-05, 2.033203125, 0.00424957275390625, 0.001941680908203125, 0.038116455078125, 0.84375, 1.2607421875, 0.032501220703125, 0.88134765625, 0.340087890625, 0.27783203125, 0.0008339881896972656, 0.0294952392578125, 0.0006895065307617188, 1.2755393981933594e-05, 0.01141357421875, 1.0517578125, 0.0162353515625, 0.00032901763916015625, 0.01092529296875, 0.002429962158203125, 0.01427459716796875, 0.0014715194702148438, 1.4781951904296875e-05, 3.6954879760742188e-06, 0.048492431640625, 0.299560546875, 0.576171875, 0.04327392578125, 0.007663726806640625, 0.032958984375, 0.007747650146484375, 0.58642578125, 0.011138916015625, 0.012969970703125, 0.196533203125, 0.52587890625, 0.005359649658203125, 0.0001304149627685547, 0.03369140625, 0.004802703857421875, 0.6064453125, 0.00691986083984375, 0.53955078125, 4.410743713378906e-06, 0.0013628005981445312, 1.05078125, 0.7529296875, 1.4424324035644531e-05], "tokens": [284, 1022, 275, 319, 3088, 18446, 111, 275, 319, 275, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 308, 452, 526, 6556, 328, 225, 38, 32, 34, 547, 275, 569, 284, 477, 15387, 284, 477, 1788, 284, 562, 6431, 2863, 14782, 22269, 26, 410, 1769, 10491, 993, 30, 2476, 18423, 27623]}
{"line_number": 72, "line_type": "original", "code": "    /**", "entropy": 2.234375, "is_bug_line": false, "sus_score": 0.46676552295684814, "per_token_entropy": [2.654296875, 1.8154296875], "tokens": [264, 1022]}
{"line_number": 72, "line_type": "generated", "code": "\n     * Simple constructor.\n     */\n    public AbstractLeastSquaresOptimizer() {\n        super(DEFAULT_SINGULARITY_THRESHOLD);\n    }\n\n    /**\n     * @param checker Convergence checker.\n     * @param threshold Singularity threshold.\n     *", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.46676552295684814, "per_token_entropy": [0.3974609375, 0.020538330078125, 2.03125, 0.00234222412109375, 0.51953125, 0.1141357421875, 0.8115234375, 0.00864410400390625, 0.779296875, 0.0062713623046875, 1.430511474609375e-06, 1.6689300537109375e-06, 3.5762786865234375e-07, 5.841255187988281e-06, 0.0187530517578125, 0.016571044921875, 0.13330078125, 0.56201171875, 0.348876953125, 1.5009765625, 5.030632019042969e-05, 0.08642578125, 2.2649765014648438e-06, 1.430511474609375e-06, 0.0002416372299194336, 1.800060272216797e-05, 0.0765380859375, 0.1651611328125, 0.0008425712585449219, 0.321044921875, 0.023590087890625, 0.375, 5.1021575927734375e-05, 1.0830078125, 0.595703125, 0.79638671875, 0.01261138916015625, 6.198883056640625e-06, 3.4570693969726562e-06, 0.064453125, 0.0100860595703125, 0.00954437255859375, 0.880859375, 0.0282135009765625, 1.791015625, 0.349853515625, 0.00867462158203125, 0.000820159912109375, 0.0004878044128417969, 0.0462646484375, 0.038299560546875, 0.487060546875], "tokens": [275, 319, 7155, 4374, 32, 275, 569, 284, 562, 7400, 31420, 69, 20301, 29248, 346, 301, 291, 2599, 26, 5807, 81, 11312, 7161, 2917, 81, 29520, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 26664, 1336, 424, 27976, 26664, 32, 275, 319, 477, 753, 10084, 27836, 15849, 10084, 32, 275, 319]}
{"line_number": 63, "line_type": "original", "code": "public abstract class AbstractLeastSquaresOptimizer", "entropy": 2.154296875, "is_bug_line": false, "sus_score": 0.46604371070861816, "per_token_entropy": [6.82421875, 7.68359375, 0.97900390625, 1.724609375, 0.01183319091796875, 0.010101318359375, 6.246566772460938e-05, 0.0023345947265625], "tokens": [923, 5547, 443, 7400, 31420, 69, 20301, 29248]}
{"line_number": 63, "line_type": "generated", "code": "\n    protected double cost;\n    /** Weighted Jacobian matrix.\n     * @deprecated As of 3.1. Field to become \"private\" in 4.0.\n     * Please use {@link #getWeightedJacobian()}.\n     */\n    @", "entropy": 0.15576171875, "is_bug_line": false, "sus_score": 0.46604371070861816, "per_token_entropy": [0.533203125, 0.25439453125, 0.0309600830078125, 0.01202392578125, 0.33935546875, 0.45068359375, 0.0105743408203125, 1.9951171875, 0.281982421875, 0.427978515625, 0.00164794921875, 0.12164306640625, 0.54296875, 0.0595703125, 0.0048828125, 0.15869140625, 0.034149169921875, 0.006526947021484375, 0.0001533031463623047, 0.0011243820190429688, 0.00021159648895263672, 4.9114227294921875e-05, 0.0027256011962890625, 0.0235443115234375, 0.59765625, 0.003742218017578125, 0.0106964111328125, 0.005237579345703125, 0.019195556640625, 0.0007863044738769531, 0.0078125, 0.0012369155883789062, 0.0025005340576171875, 1.2636184692382812e-05, 3.6954879760742188e-06, 0.010772705078125, 0.040252685546875, 0.042510986328125, 0.0157012939453125, 0.006343841552734375, 0.048065185546875, 0.00047707557678222656, 0.006610870361328125, 1.5771484375, 0.00873565673828125, 0.0262603759765625, 0.0004222393035888672, 0.347900390625, 0.006145477294921875, 0.0035572052001953125, 0.0167236328125, 0.0012388229370117188], "tokens": [284, 2522, 2064, 7847, 45, 284, 1022, 20749, 318, 971, 30495, 5045, 32, 275, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 32, 5692, 372, 9555, 313, 2055, 20, 328, 225, 38, 32, 34, 32, 275, 319, 5294, 793, 3088, 1204, 588, 371, 38624, 60, 30495, 41264, 275, 569, 284, 477]}
{"line_number": 75, "line_type": "original", "code": "     * {@link #updateJacobian()}, but may be modified by the solver", "entropy": 3.1875, "is_bug_line": false, "sus_score": 0.46407535672187805, "per_token_entropy": [3.615234375, 0.402587890625, 6.38671875, 0.369384765625, 0.244873046875, 8.8046875, 0.275634765625, 0.0017290115356445312, 1.453125, 7.60546875, 5.6640625, 0.2015380859375, 5.08203125, 0.5048828125, 1.8876953125, 8.515625], "tokens": [262, 319, 3088, 1204, 588, 1877, 60, 30495, 27370, 1273, 1631, 526, 8844, 810, 322, 17821]}
{"line_number": 75, "line_type": "generated", "code": "\n     * @deprecated As of 3.1.\n     */\n    @Deprecated\n    protected AbstractLeastSquaresOptimizer() {\n        super(null);\n        setConvergenceChecker(ConvergenceChecker.defaultVectorChecker());\n        setSingularityThreshold(", "entropy": 0.359619140625, "is_bug_line": false, "sus_score": 0.46407535672187805, "per_token_entropy": [0.168701171875, 0.27783203125, 1.08984375, 0.32177734375, 0.047882080078125, 0.000141143798828125, 0.0054168701171875, 0.0002415180206298828, 7.271766662597656e-06, 0.001697540283203125, 0.6357421875, 0.80322265625, 0.0267333984375, 0.003509521484375, 0.00235748291015625, 0.0002281665802001953, 0.001979827880859375, 0.5400390625, 0.0005650520324707031, 1.0728836059570312e-06, 7.152557373046875e-07, 2.0265579223632812e-06, 2.0265579223632812e-06, 0.0028438568115234375, 0.0020294189453125, 0.0199432373046875, 1.8076171875, 0.072509765625, 1.9951171875, 0.392333984375, 0.43896484375, 0.60498046875, 0.6689453125, 1.537799835205078e-05, 2.2649765014648438e-06, 0.00988006591796875, 0.0005679130554199219, 1.7392578125, 0.00016427040100097656, 0.00010180473327636719, 0.00017249584197998047, 0.0036163330078125, 1.5986328125, 0.349609375, 0.94384765625, 1.4677734375, 1.28515625, 0.7099609375, 0.60009765625, 0.047882080078125, 0.00524139404296875, 0.00311279296875], "tokens": [275, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 32, 275, 569, 284, 477, 15387, 284, 2522, 7400, 31420, 69, 20301, 29248, 346, 301, 291, 2599, 26, 1693, 293, 291, 739, 609, 424, 27976, 14003, 26, 609, 424, 27976, 14003, 32, 1536, 2863, 14003, 1035, 291, 739, 19534, 15849, 10675, 26]}
{"line_number": 182, "line_type": "original", "code": "            int[] orders = new int[nC];", "entropy": 2.705078125, "is_bug_line": false, "sus_score": 0.4630269408226013, "per_token_entropy": [5.23828125, 15.4921875, 6.5078125, 1.0576171875, 0.081298828125, 0.08447265625, 0.004093170166015625, 0.002597808837890625, 1.1123046875, 0.160400390625, 0.01236724853515625], "tokens": [1468, 629, 1178, 17588, 280, 537, 629, 77, 96, 53, 970]}
{"line_number": 182, "line_type": "generated", "code": "\n     * mean of the squares of the residuals.\n     *\n     * @return the Root Mean Square value\n     * @deprecated As of 3.1. Please use {@link #computeRMS(double[])} instead.\n     */\n    @Deprecated\n   ", "entropy": 0.20361328125, "is_bug_line": false, "sus_score": 0.4630269408226013, "per_token_entropy": [0.65869140625, 0.00949859619140625, 0.0084686279296875, 0.12060546875, 0.0219268798828125, 0.416748046875, 0.018585205078125, 0.3720703125, 0.165283203125, 0.0111541748046875, 0.24072265625, 0.06744384765625, 0.00537109375, 0.85302734375, 0.0009069442749023438, 0.0107421875, 0.0286407470703125, 0.192626953125, 0.505859375, 0.00399017333984375, 0.0017414093017578125, 0.0697021484375, 1.193359375, 0.8896484375, 0.05621337890625, 0.68408203125, 0.2164306640625, 0.00079345703125, 0.01035308837890625, 0.0015716552734375, 5.340576171875e-05, 0.018524169921875, 0.0810546875, 0.0794677734375, 0.004344940185546875, 0.1883544921875, 0.0008311271667480469, 0.08563232421875, 0.64306640625, 1.0126953125, 0.86376953125, 0.049468994140625, 0.4970703125, 0.079833984375, 0.09832763671875, 0.0157623291015625, 0.0027313232421875, 0.0196685791015625, 0.004825592041015625, 0.0019817352294921875, 0.0023822784423828125, 0.0009264945983886719], "tokens": [275, 319, 5651, 432, 322, 36535, 432, 322, 27410, 101, 32, 275, 319, 275, 319, 477, 601, 322, 14741, 27371, 31526, 786, 275, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 32, 5294, 793, 3088, 1204, 588, 7924, 44450, 26, 2627, 9795, 111, 4174, 32, 275, 569, 284, 477, 15387, 284]}
{"line_number": 130, "line_type": "original", "code": "    /**", "entropy": 3.58203125, "is_bug_line": false, "sus_score": 0.45960983633995056, "per_token_entropy": [4.35546875, 2.806640625], "tokens": [264, 1022]}
{"line_number": 130, "line_type": "generated", "code": "\n        final double[][] jacobian = new double[nR][nC];\n        for (int i = 0; i < nR; ++i) {\n            final DerivativeStructure dsRes = dsValue[i];\n            for (int", "entropy": 0.1424560546875, "is_bug_line": false, "sus_score": 0.45960983633995056, "per_token_entropy": [0.26416015625, 0.77490234375, 0.73095703125, 0.1885986328125, 0.58349609375, 0.10137939453125, 0.62353515625, 0.06707763671875, 0.0112762451171875, 0.0002524852752685547, 0.04962158203125, 0.18798828125, 0.00037169456481933594, 0.0290374755859375, 0.002285003662109375, 0.0010805130004882812, 0.0784912109375, 0.1702880859375, 0.002529144287109375, 0.00150299072265625, 0.2822265625, 0.006122589111328125, 0.003498077392578125, 0.00015676021575927734, 0.0034503936767578125, 0.0005612373352050781, 0.00048542022705078125, 0.063720703125, 0.1328125, 0.0005249977111816406, 0.10650634765625, 7.402896881103516e-05, 0.0009341239929199219, 0.0007390975952148438, 0.02410888671875, 0.8837890625, 0.16259765625, 6.079673767089844e-06, 1.7523765563964844e-05, 7.152557373046875e-07, 0.271484375, 0.90966796875, 0.389404296875, 0.005950927734375, 0.00033402442932128906, 7.402896881103516e-05, 0.0001251697540283203, 0.0343017578125, 0.012359619140625, 0.23876953125, 0.0004391670227050781, 0.0037288665771484375], "tokens": [291, 1158, 2064, 11336, 594, 30495, 280, 537, 2064, 77, 96, 68, 1674, 96, 53, 970, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 310, 68, 45, 3311, 91, 27, 301, 324, 1158, 15944, 387, 1353, 8634, 10180, 721, 280, 10180, 882, 77, 91, 970, 324, 436, 308, 410]}
{"line_number": 131, "line_type": "original", "code": "     * @param checker Convergence checker.", "entropy": 2.34765625, "is_bug_line": false, "sus_score": 0.45391035079956055, "per_token_entropy": [6.671875, 5.0078125, 0.69775390625, 1.712890625, 8.7265625, 0.3642578125, 0.00019729137420654297, 8.857250213623047e-05, 0.053863525390625, 0.23193359375], "tokens": [262, 319, 477, 753, 26664, 1336, 424, 27976, 26664, 32]}
{"line_number": 131, "line_type": "generated", "code": "\n        return weightMatrixSqrt.multiply(new Array2DRowRealMatrix(jacobianData));\n    }\n\n    /**\n     * Update the residuals array.\n     *\n     * @throws DimensionMismatchException if the residuals dimension does not\n     * match problem", "entropy": 0.2491455078125, "is_bug_line": false, "sus_score": 0.45391035079956055, "per_token_entropy": [0.599609375, 0.9091796875, 2.08984375, 0.004924774169921875, 0.0008087158203125, 0.01513671875, 0.06207275390625, 0.002117156982421875, 0.26953125, 0.04107666015625, 0.003147125244140625, 1.633167266845703e-05, 4.076957702636719e-05, 0.00022935867309570312, 1.52587890625e-05, 0.0004260540008544922, 0.0009965896606445312, 5.960464477539062e-07, 0.00045800209045410156, 0.45263671875, 0.0689697265625, 0.0004527568817138672, 0.3046875, 0.03924560546875, 0.130126953125, 6.127357482910156e-05, 1.84765625, 0.08673095703125, 1.0576171875, 0.045654296875, 1.5859375, 0.0806884765625, 0.05023193359375, 0.04656982421875, 0.408447265625, 0.0003695487976074219, 0.00585174560546875, 1.2158203125, 0.34814453125, 0.0001665353775024414, 1.5139579772949219e-05, 0.0132293701171875, 0.03167724609375, 0.48046875, 0.18798828125, 0.362548828125, 0.01218414306640625, 0.025238037109375, 0.014434814453125, 5.7220458984375e-06, 0.0037021636962890625, 0.04949951171875], "tokens": [291, 442, 7533, 4161, 30657, 32, 20123, 26, 890, 2629, 36, 54, 2352, 6877, 4161, 26, 42517, 2531, 750, 876, 284, 320, 446, 1022, 275, 319, 4000, 322, 27410, 101, 1417, 32, 275, 319, 275, 319, 477, 5117, 17417, 31102, 984, 415, 322, 27410, 101, 8742, 1957, 646, 275, 319, 2530, 3708]}
{"line_number": 64, "line_type": "original", "code": "    extends BaseAbstractMultivariateVectorOptimizer<DifferentiableMultivariateVectorFunction>", "entropy": 1.30078125, "is_bug_line": false, "sus_score": 0.4403734803199768, "per_token_entropy": [0.5029296875, 13.109375, 0.1983642578125, 0.002780914306640625, 0.0008106231689453125, 3.421306610107422e-05, 0.00048160552978515625, 0.00019466876983642578, 2.72265625, 4.08984375, 0.00016558170318603516, 0.00046563148498535156, 2.9087066650390625e-05, 0.00562286376953125, 0.0164031982421875, 0.1636962890625], "tokens": [264, 2026, 3772, 5584, 11235, 27623, 2863, 29248, 46, 31187, 1529, 11235, 27623, 2863, 2447, 48]}
{"line_number": 64, "line_type": "generated", "code": "    /**\n     * Cost value (square root of the sum of the residuals).\n     * @deprecated As of 3.1.\n     */\n    @Deprecated\n    protected double cost;\n    /** Weighted Jacobian matrix.\n     * @deprecated As of", "entropy": 0.29248046875, "is_bug_line": false, "sus_score": 0.4403734803199768, "per_token_entropy": [0.501953125, 0.031341552734375, 1.0712890625, 0.00040984153747558594, 2.73828125, 0.94775390625, 0.302978515625, 0.04010009765625, 0.0010833740234375, 0.00030684471130371094, 0.002254486083984375, 0.005893707275390625, 0.0004544258117675781, 0.00205230712890625, 0.06683349609375, 0.00026607513427734375, 0.1123046875, 0.04046630859375, 0.1630859375, 0.195556640625, 0.337646484375, 0.0080413818359375, 0.00016868114471435547, 0.0030498504638671875, 0.00019562244415283203, 0.0002186298370361328, 0.0037384033203125, 0.049957275390625, 1.7763671875, 0.074462890625, 0.032135009765625, 0.009429931640625, 0.0011644363403320312, 0.01300811767578125, 0.23681640625, 0.1019287109375, 0.8935546875, 0.39111328125, 1.2060546875, 0.0031566619873046875, 2.1796875, 0.377685546875, 0.254150390625, 0.0018711090087890625, 0.099853515625, 0.6064453125, 0.054962158203125, 0.009552001953125, 0.2099609375, 0.038482666015625, 0.004886627197265625, 0.0002262592315673828], "tokens": [264, 1022, 275, 319, 28729, 786, 308, 9699, 3051, 432, 322, 3632, 432, 322, 27410, 101, 547, 275, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 32, 275, 569, 284, 477, 15387, 284, 2522, 2064, 7847, 45, 284, 1022, 20749, 318, 971, 30495, 5045, 32, 275, 319, 477, 15040, 2894, 432]}
{"line_number": 181, "line_type": "original", "code": "        for (int i = 0; i < nR; ++i) {", "entropy": 0.56396484375, "is_bug_line": false, "sus_score": 0.438360333442688, "per_token_entropy": [2.083984375, 4.890625, 0.0472412109375, 0.2320556640625, 0.06939697265625, 0.0048065185546875, 0.006099700927734375, 0.0009794235229492188, 0.019866943359375, 0.001163482666015625, 0.01311492919921875, 1.3623046875, 1.0048828125, 0.004947662353515625, 0.13330078125, 0.0003190040588378906, 0.0029659271240234375, 0.271484375], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 310, 68, 45, 3311, 91, 27, 301]}
{"line_number": 181, "line_type": "generated", "code": "\n     * @return the Root Mean Square value.\n     * @deprecated As of 3.1. Please use {@link #computeRMS(double[])} instead.\n     */\n    @Deprecated\n    protected double getRMS() {\n        return FastMath.sqrt", "entropy": 0.1864013671875, "is_bug_line": false, "sus_score": 0.438360333442688, "per_token_entropy": [0.473876953125, 0.06256103515625, 0.3984375, 0.10809326171875, 0.307373046875, 0.55224609375, 0.00380706787109375, 0.005466461181640625, 0.11474609375, 0.343017578125, 0.11859130859375, 0.587890625, 0.11322021484375, 0.6923828125, 0.1717529296875, 0.0009174346923828125, 0.01212310791015625, 0.0019664764404296875, 3.4332275390625e-05, 0.0217742919921875, 0.1038818359375, 0.0950927734375, 0.00445556640625, 0.19189453125, 0.002105712890625, 0.0916748046875, 0.8466796875, 1.07421875, 0.54052734375, 0.09832763671875, 0.382568359375, 0.0814208984375, 0.11358642578125, 0.0163726806640625, 0.0254669189453125, 0.04815673828125, 0.051422119140625, 0.002346038818359375, 0.003406524658203125, 0.003936767578125, 0.367919921875, 0.052001953125, 0.0518798828125, 0.485107421875, 0.0186004638671875, 0.004184722900390625, 0.07623291015625, 0.294677734375, 0.47314453125, 2.3603439331054688e-05, 1.2755393981933594e-05, 0.0007944107055664062], "tokens": [275, 319, 477, 601, 322, 14741, 27371, 31526, 786, 32, 275, 319, 477, 15040, 2894, 432, 225, 37, 32, 35, 32, 5294, 793, 3088, 1204, 588, 7924, 44450, 26, 2627, 9795, 111, 4174, 32, 275, 569, 284, 477, 15387, 284, 2522, 2064, 622, 44450, 346, 301, 291, 442, 15938, 5717, 32, 8663]}
{"line_number": 180, "line_type": "original", "code": "        final double[][] jacobianData = new double[nR][nC];", "entropy": 0.822265625, "is_bug_line": false, "sus_score": 0.436953604221344, "per_token_entropy": [3.12890625, 3.986328125, 1.3466796875, 3.02734375, 0.640625, 0.127197265625, 0.25732421875, 0.1444091796875, 0.4208984375, 0.0726318359375, 0.001323699951171875, 0.67138671875, 0.1126708984375, 0.0006842613220214844, 0.0253753662109375, 0.01236724853515625, 0.0033779144287109375], "tokens": [351, 1158, 2064, 11336, 594, 30495, 750, 280, 537, 2064, 77, 96, 68, 1674, 96, 53, 970]}
{"line_number": 180, "line_type": "generated", "code": "\n     * Computes the residuals.\n     *\n     * @param objectiveValue Value of the objective function.\n     * @return the residuals.\n     * @see #computeObjectiveValue(double[])\n     * @since 3.1\n     */\n    protected", "entropy": 0.1171875, "is_bug_line": false, "sus_score": 0.436953604221344, "per_token_entropy": [0.7333984375, 0.062744140625, 0.99609375, 0.0440673828125, 0.71533203125, 0.01122283935546875, 0.541015625, 0.06610107421875, 0.00022876262664794922, 0.173095703125, 2.1576881408691406e-05, 0.009246826171875, 0.0133209228515625, 0.467529296875, 0.185546875, 0.62548828125, 0.0015048980712890625, 0.005184173583984375, 0.11328125, 0.0090179443359375, 0.2064208984375, 0.042388916015625, 3.707408905029297e-05, 0.0040740966796875, 0.0025787353515625, 0.025299072265625, 0.08929443359375, 0.008514404296875, 0.27294921875, 0.007122039794921875, 0.00998687744140625, 0.0009016990661621094, 0.312255859375, 0.01142120361328125, 0.096435546875, 0.07855224609375, 0.00036716461181640625, 0.025146484375, 0.006748199462890625, 0.0106658935546875, 0.004367828369140625, 0.0179595947265625, 0.0007491111755371094, 0.029541015625, 0.00014698505401611328, 0.0012292861938476562, 2.4318695068359375e-05, 0.00226593017578125, 0.002269744873046875, 0.01006317138671875, 0.01532745361328125, 0.0265350341796875], "tokens": [275, 319, 41932, 322, 27410, 101, 32, 275, 319, 275, 319, 477, 753, 25110, 882, 3846, 432, 322, 25110, 667, 32, 275, 319, 477, 601, 322, 27410, 101, 32, 275, 319, 477, 2970, 588, 7924, 33312, 882, 26, 2627, 9795, 275, 319, 477, 8119, 225, 37, 32, 35, 275, 569, 284, 2522]}
{"line_number": 158, "line_type": "original", "code": "    /**", "entropy": 3.0625, "is_bug_line": false, "sus_score": 0.42356523871421814, "per_token_entropy": [4.609375, 1.513671875], "tokens": [264, 1022]}
{"line_number": 158, "line_type": "generated", "code": "\n        cost = FastMath.sqrt(VectorialFunctionUtils.dotProduct(res, res));\n    }", "entropy": 0.33251953125, "is_bug_line": false, "sus_score": 0.42356523871421814, "per_token_entropy": [0.263671875, 1.4697265625, 0.0245208740234375, 0.90234375, 0.00036787986755371094, 4.172325134277344e-05, 0.0027942657470703125, 0.0013589859008789062, 1.0615234375, 0.25537109375, 1.044921875, 0.1483154296875, 0.0067291259765625, 0.1353759765625, 0.0035114288330078125, 0.0015287399291992188, 0.2193603515625, 0.0035247802734375, 0.2203369140625, 0.07440185546875, 1.47265625, 0.00426483154296875], "tokens": [291, 7847, 280, 15938, 5717, 32, 8663, 26, 2863, 564, 2447, 2755, 32, 4260, 3409, 26, 575, 30, 736, 876, 284, 320]}
{"line_number": 508, "line_type": "original", "code": "        weightMatrixSqrt = squareRoot(getWeight());", "entropy": 2.009765625, "is_bug_line": false, "sus_score": 0.41549208760261536, "per_token_entropy": [2.556640625, 4.53515625, 0.89453125, 2.08203125, 0.64208984375, 7.16796875, 0.0333251953125, 0.50927734375, 2.158203125, 0.03204345703125, 1.4951171875], "tokens": [351, 7533, 4161, 30657, 280, 14627, 4058, 26, 371, 7583, 1035]}
{"line_number": 508, "line_type": "generated", "code": "\n     * @param weights Weight matrix.\n     * @return the square-root of the weight matrix.\n     * @throws DimensionMismatchException if the weight matrix has a\n     * wrong shape.\n     */\n    private RealMatrix sqrt(final RealMatrix weights)", "entropy": 0.321533203125, "is_bug_line": false, "sus_score": 0.41549208760261536, "per_token_entropy": [0.4609375, 0.1134033203125, 0.59716796875, 0.8271484375, 0.5771484375, 0.59130859375, 0.283203125, 0.1729736328125, 0.12249755859375, 0.017425537109375, 0.028564453125, 0.212158203125, 0.6005859375, 0.01580810546875, 0.08843994140625, 0.0008478164672851562, 0.00997161865234375, 0.0157012939453125, 0.0254058837890625, 0.005283355712890625, 0.0802001953125, 0.020904541015625, 0.07012939453125, 0.00884246826171875, 0.134521484375, 0.68017578125, 0.00077056884765625, 2.0623207092285156e-05, 0.00975799560546875, 0.40380859375, 0.98681640625, 0.09075927734375, 1.3369140625, 0.43798828125, 1.26171875, 4.696846008300781e-05, 0.392578125, 1.275390625, 0.03411865234375, 0.004764556884765625, 0.5234375, 0.0037517547607421875, 0.84521484375, 0.347412109375, 0.0005779266357421875, 1.4072265625, 1.0166015625, 0.294677734375, 0.273681640625, 0.0002181529998779297, 0.01154327392578125, 0.0012302398681640625], "tokens": [275, 319, 477, 753, 11229, 20749, 5045, 32, 275, 319, 477, 601, 322, 14627, 31, 2388, 432, 322, 7533, 5045, 32, 275, 319, 477, 5117, 17417, 31102, 984, 415, 322, 7533, 5045, 1401, 312, 275, 319, 6643, 6024, 32, 275, 569, 284, 945, 11443, 4161, 17058, 26, 3220, 11443, 4161, 11229, 27]}
