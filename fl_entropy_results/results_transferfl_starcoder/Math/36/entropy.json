{"line_number": 732, "line_type": "original", "code": "        float result = numerator.floatValue() / denominator.floatValue();", "entropy": 0.90234375, "is_bug_line": true, "sus_score": 0.7176359295845032, "per_token_entropy": [5.01171875, 8.25, 0.52685546875, 0.255615234375, 0.274169921875, 0.0042266845703125, 0.042572021484375, 0.0295257568359375, 0.0001392364501953125, 0.01177215576171875, 0.007106781005859375, 0.01171112060546875, 0.00817108154296875, 0.0013628005981445312, 0.0002853870391845703, 0.0022430419921875], "tokens": [351, 1897, 1056, 280, 1929, 11290, 32, 1808, 882, 346, 517, 39920, 32, 1808, 882, 473]}
{"line_number": 732, "line_type": "generated", "code": "\n    /**\n     * <p>\n     * Access the numerator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>int</tt>.\n     */\n    public int getNumerator", "entropy": 0.0232086181640625, "is_bug_line": true, "sus_score": 0.7176359295845032, "per_token_entropy": [0.54345703125, 0.07275390625, 0.0224609375, 0.00019156932830810547, 0.02520751953125, 0.0004284381866455078, 0.0002218484878540039, 0.007904052734375, 4.458427429199219e-05, 0.12054443359375, 0.0007863044738769531, 0.006526947021484375, 0.00020051002502441406, 0.0013294219970703125, 0.052978515625, 0.00893402099609375, 0.0202178955078125, 6.29425048828125e-05, 0.16259765625, 0.0010557174682617188, 3.147125244140625e-05, 0.0020885467529296875, 0.034820556640625, 0.0001266002655029297, 0.0008878707885742188, 0.00015616416931152344, 0.0005207061767578125, 0.00426483154296875, 0.0001157522201538086, 0.00876617431640625, 2.014636993408203e-05, 0.0013189315795898438, 0.00033211708068847656, 0.00217437744140625, 0.0013256072998046875, 0.00015056133270263672, 0.0008225440979003906, 0.025421142578125, 0.0031223297119140625, 0.0007867813110351562, 1.0609626770019531e-05, 0.005489349365234375, 0.00021386146545410156, 7.677078247070312e-05, 0.0024261474609375, 0.0070343017578125, 0.0200653076171875, 0.01641845703125, 0.0177764892578125, 0.0017976760864257812, 0.0007405281066894531, 7.641315460205078e-05], "tokens": [284, 1022, 275, 319, 333, 98, 48, 275, 319, 8258, 322, 1929, 11290, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 275, 319, 576, 98, 48, 275, 319, 275, 319, 477, 601, 322, 1929, 11290, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 275, 569, 284, 562, 629, 44929, 11290]}
{"line_number": 735, "line_type": "original", "code": "        return result;", "entropy": 2.78125, "is_bug_line": true, "sus_score": 0.7176359295845032, "per_token_entropy": [4.3125, 0.478759765625, 6.0390625, 0.29638671875], "tokens": [351, 442, 1056, 45]}
{"line_number": 735, "line_type": "generated", "code": "\n     */\n    public int getNumeratorAsInt() {\n        return numerator.intValue();\n    }\n\n    /**\n     * <p>\n     * Access the numerator as a <tt>long</tt>.\n     * </p>\n     *\n     * @", "entropy": 0.043670654296875, "is_bug_line": true, "sus_score": 0.7176359295845032, "per_token_entropy": [0.4287109375, 1.1962890625, 0.0297088623046875, 0.0195465087890625, 0.0037021636962890625, 0.0003008842468261719, 1.9311904907226562e-05, 0.0003268718719482422, 0.0007681846618652344, 0.001861572265625, 0.005615234375, 0.07427978515625, 0.00909423828125, 0.0034313201904296875, 1.609325408935547e-05, 0.002536773681640625, 0.0009360313415527344, 0.0026531219482421875, 0.0274200439453125, 0.00023984909057617188, 0.029876708984375, 0.0025882720947265625, 0.01308441162109375, 3.790855407714844e-05, 0.0022525787353515625, 6.73532485961914e-05, 2.4080276489257812e-05, 0.0007963180541992188, 9.059906005859375e-06, 0.006015777587890625, 7.081031799316406e-05, 0.00226593017578125, 6.437301635742188e-05, 0.0002739429473876953, 0.0025691986083984375, 0.0009870529174804688, 0.0015935897827148438, 2.7179718017578125e-05, 0.0100250244140625, 0.0008358955383300781, 2.276897430419922e-05, 0.0023250579833984375, 0.31640625, 0.00046563148498535156, 0.0007724761962890625, 1.4662742614746094e-05, 0.0007143020629882812, 0.0234222412109375, 0.0002002716064453125, 0.044342041015625, 0.0005636215209960938, 0.0003948211669921875], "tokens": [275, 569, 284, 562, 629, 44929, 11290, 1465, 1428, 346, 301, 291, 442, 1929, 11290, 32, 22802, 473, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 8258, 322, 1929, 11290, 619, 312, 333, 2251, 48, 3222, 377, 2251, 4503, 275, 319, 576, 98, 48, 275, 319, 275, 319, 477]}
{"line_number": 366, "line_type": "original", "code": "        this(BigInteger.valueOf(num), BigInteger.ONE);", "entropy": 1.673828125, "is_bug_line": false, "sus_score": 0.6162247657775879, "per_token_entropy": [4.3125, 4.828125, 0.9599609375, 4.03125, 0.007171630859375, 0.1414794921875, 0.005615234375, 0.269775390625, 0.4326171875, 0.45556640625, 0.0025081634521484375, 6.2265625, 0.09625244140625], "tokens": [351, 458, 26, 21541, 32, 9162, 26, 1516, 471, 21743, 32, 4431, 293]}
{"line_number": 366, "line_type": "generated", "code": "\n     *\n     * @param numerator\n     *            The numerator, for example the three in 'three fifths'. Must not\n     *            be <code>null</code>.\n     * @param denominator\n     *            The denominator, for example", "entropy": 0.155029296875, "is_bug_line": false, "sus_score": 0.6162247657775879, "per_token_entropy": [0.6279296875, 0.290283203125, 0.6435546875, 0.0220947265625, 0.07452392578125, 0.0116119384765625, 0.07208251953125, 0.23046875, 0.18115234375, 0.00022137165069580078, 0.030059814453125, 1.451171875, 0.031890869140625, 0.0002110004425048828, 0.66455078125, 0.46728515625, 0.11492919921875, 0.04571533203125, 0.052337646484375, 0.0005273818969726562, 0.00942230224609375, 0.0099945068359375, 0.72216796875, 0.01226043701171875, 0.0019159317016601562, 0.0401611328125, 0.62841796875, 0.18701171875, 0.70947265625, 1.4424324035644531e-05, 0.02117919921875, 3.6835670471191406e-05, 0.58154296875, 0.0361328125, 0.00010001659393310547, 0.0005574226379394531, 0.0003573894500732422, 6.318092346191406e-06, 0.00994873046875, 0.035675048828125, 0.0005016326904296875, 0.0004534721374511719, 0.00048542022705078125, 0.003719329833984375, 0.0012540817260742188, 4.112720489501953e-05, 0.0002627372741699219, 0.005565643310546875, 0.0141754150390625, 0.010498046875, 0.006114959716796875, 3.528594970703125e-05], "tokens": [275, 319, 275, 319, 477, 753, 1929, 11290, 275, 319, 1468, 886, 1929, 11290, 30, 436, 2280, 322, 8019, 328, 330, 12192, 296, 23305, 101, 2473, 15622, 646, 275, 319, 1468, 526, 333, 687, 48, 1693, 377, 687, 4503, 275, 319, 477, 753, 39920, 275, 319, 1468, 886, 39920, 30, 436, 2280]}
{"line_number": 381, "line_type": "original", "code": "        this(BigInteger.valueOf(num), BigInteger.valueOf(den));", "entropy": 1.2744140625, "is_bug_line": false, "sus_score": 0.6162247657775879, "per_token_entropy": [2.88671875, 8.890625, 0.83203125, 2.078125, 0.2369384765625, 0.00730133056640625, 0.0149688720703125, 0.0830078125, 2.0625, 0.9697265625, 0.005191802978515625, 0.92138671875, 0.0106353759765625, 0.0628662109375, 0.05059814453125], "tokens": [351, 458, 26, 21541, 32, 9162, 26, 1516, 471, 21743, 32, 9162, 26, 5114, 876]}
{"line_number": 381, "line_type": "generated", "code": "\n        final int denominator) {\n        return new BigFraction(numerator, denominator);\n    }\n\n    /**\n     * <p>\n     * Creates a <code>BigFraction</code> instance with the 2 parts of a fraction\n     * Y/Z", "entropy": 0.0897216796875, "is_bug_line": false, "sus_score": 0.6162247657775879, "per_token_entropy": [1.333984375, 0.10858154296875, 0.04168701171875, 0.01242828369140625, 0.00933074951171875, 0.08172607421875, 0.376220703125, 0.865234375, 0.493408203125, 0.00269317626953125, 6.0677528381347656e-05, 0.013519287109375, 0.2607421875, 0.0038661956787109375, 0.031768798828125, 0.01568603515625, 0.07305908203125, 0.03106689453125, 0.000591278076171875, 0.1390380859375, 0.03643798828125, 0.0081024169921875, 3.504753112792969e-05, 0.06085205078125, 0.0001970529556274414, 0.00010132789611816406, 0.0020771026611328125, 1.5497207641601562e-06, 0.361572265625, 0.002376556396484375, 0.1160888671875, 0.00640869140625, 7.367134094238281e-05, 0.0024166107177734375, 2.765655517578125e-05, 0.0007309913635253906, 0.00022673606872558594, 0.0008711814880371094, 0.007015228271484375, 0.01073455810546875, 0.0014638900756835938, 0.1214599609375, 0.003406524658203125, 0.00937652587890625, 0.00018310546875, 0.0002694129943847656, 0.006378173828125, 0.00241851806640625, 2.1576881408691406e-05, 0.0066375732421875, 3.647804260253906e-05, 5.424022674560547e-05], "tokens": [291, 1158, 629, 39920, 27, 301, 291, 442, 537, 7758, 20709, 26, 1516, 11290, 30, 39920, 293, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 9301, 312, 333, 687, 48, 7471, 20709, 377, 687, 48, 1980, 623, 322, 225, 36, 8710, 432, 312, 18795, 275, 319, 1410, 33, 76]}
{"line_number": 685, "line_type": "original", "code": "        double result = numerator.doubleValue() / denominator.doubleValue();", "entropy": 1.4248046875, "is_bug_line": true, "sus_score": 0.5750015377998352, "per_token_entropy": [5.9140625, 7.62890625, 4.38671875, 0.170166015625, 1.55859375, 0.055023193359375, 0.1014404296875, 0.0496826171875, 0.037750244140625, 0.0256500244140625, 0.0187835693359375, 0.003734588623046875, 0.00348663330078125, 0.003643035888671875], "tokens": [351, 2064, 1056, 280, 1929, 11290, 32, 46952, 346, 517, 39920, 32, 46952, 473]}
{"line_number": 685, "line_type": "generated", "code": "\n        return result;\n    }\n\n    /**\n     * <p>\n     * Gets the fraction as a <tt>int</tt>. This returns the whole number part\n     * of the fraction.\n     * </p>\n     *\n     * @return the whole", "entropy": 0.053436279296875, "is_bug_line": true, "sus_score": 0.5750015377998352, "per_token_entropy": [0.416015625, 0.01468658447265625, 0.027435302734375, 0.004180908203125, 0.01232147216796875, 0.00044226646423339844, 0.03448486328125, 0.0246734619140625, 0.00269317626953125, 1.1444091796875e-05, 0.00884246826171875, 2.396106719970703e-05, 9.763240814208984e-05, 0.0038776397705078125, 5.602836608886719e-06, 0.045806884765625, 0.1820068359375, 0.038330078125, 0.0015659332275390625, 0.474609375, 0.00732421875, 0.0139617919921875, 2.956390380859375e-05, 0.08258056640625, 0.0003879070281982422, 0.0005564689636230469, 0.015045166015625, 0.051177978515625, 0.50537109375, 0.00096893310546875, 0.5400390625, 0.02935791015625, 0.06231689453125, 0.07025146484375, 4.0531158447265625e-06, 0.00030684471130371094, 0.0011396408081054688, 0.00943756103515625, 0.024261474609375, 0.002346038818359375, 0.00010466575622558594, 0.0018262863159179688, 2.384185791015625e-05, 0.00020611286163330078, 0.00043129920959472656, 2.658367156982422e-05, 0.0124969482421875, 1.2040138244628906e-05, 0.0024013519287109375, 0.00027823448181152344, 0.0187225341796875, 0.03466796875], "tokens": [291, 442, 1056, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 7124, 322, 18795, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 1348, 3217, 322, 9844, 1451, 1742, 275, 319, 432, 322, 18795, 32, 275, 319, 576, 98, 48, 275, 319, 275, 319, 477, 601, 322, 9844]}
{"line_number": 688, "line_type": "original", "code": "        return result;", "entropy": 2.185546875, "is_bug_line": true, "sus_score": 0.5747572779655457, "per_token_entropy": [5.828125, 1.8408203125, 1.04296875, 0.0328369140625], "tokens": [351, 442, 1056, 45]}
{"line_number": 688, "line_type": "generated", "code": "\n\n    /**\n     * <p>\n     * Gets the fraction as a <tt>int</tt>. This returns the whole number part\n     * of the fraction.\n     * </p>\n     *\n     * @return the whole number fraction part.\n     *", "entropy": 0.087890625, "is_bug_line": true, "sus_score": 0.5747572779655457, "per_token_entropy": [0.79931640625, 0.06451416015625, 0.0140838623046875, 0.00015532970428466797, 0.01873779296875, 7.617473602294922e-05, 0.00023162364959716797, 0.004085540771484375, 8.702278137207031e-06, 0.135009765625, 0.1708984375, 0.07275390625, 0.003543853759765625, 0.53662109375, 0.01267242431640625, 0.0107421875, 4.601478576660156e-05, 0.0733642578125, 0.0006442070007324219, 0.0006823539733886719, 0.0170440673828125, 0.04742431640625, 0.4912109375, 0.000873565673828125, 0.396484375, 0.0233917236328125, 0.061309814453125, 0.068115234375, 4.410743713378906e-06, 0.00037217140197753906, 0.0010805130004882812, 0.01041412353515625, 0.0254974365234375, 0.002666473388671875, 0.00010526180267333984, 0.001922607421875, 2.1457672119140625e-05, 0.00020587444305419922, 0.000518798828125, 5.7578086853027344e-05, 0.015167236328125, 6.198883056640625e-06, 0.00559234619140625, 0.0004987716674804688, 0.0206146240234375, 0.03009033203125, 0.006622314453125, 0.231201171875, 0.11138916015625, 0.89306640625, 0.0006036758422851562, 0.1903076171875], "tokens": [446, 1022, 275, 319, 333, 98, 48, 275, 319, 7124, 322, 18795, 619, 312, 333, 2251, 48, 410, 377, 2251, 4503, 1348, 3217, 322, 9844, 1451, 1742, 275, 319, 432, 322, 18795, 32, 275, 319, 576, 98, 48, 275, 319, 275, 319, 477, 601, 322, 9844, 1451, 18795, 1742, 32, 275, 319]}
{"line_number": 367, "line_type": "original", "code": "    }", "entropy": 2.896484375, "is_bug_line": false, "sus_score": 0.5350140333175659, "per_token_entropy": [2.771484375, 3.021484375], "tokens": [264, 320]}
{"line_number": 367, "line_type": "generated", "code": "\n     * @param numerator\n     *            The numerator, for example the three in 'three sevenths'. Must\n     *            not be {@code null}.\n     * @param denominator\n     *            The denominator, for example the seven in 'three", "entropy": 0.15380859375, "is_bug_line": false, "sus_score": 0.5350140333175659, "per_token_entropy": [0.83154296875, 0.359619140625, 0.4208984375, 0.0250396728515625, 0.0648193359375, 0.2308349609375, 0.2322998046875, 0.00024819374084472656, 0.03680419921875, 1.4228515625, 0.032562255859375, 0.00018894672393798828, 0.5654296875, 0.37109375, 0.10650634765625, 0.0322265625, 0.04364013671875, 0.0005793571472167969, 0.00901031494140625, 0.010040283203125, 0.7041015625, 0.0017480850219726562, 0.000850677490234375, 0.38232421875, 0.493408203125, 0.3818359375, 1.3232231140136719e-05, 0.017059326171875, 0.00757598876953125, 4.8279762268066406e-05, 1.0400390625, 0.0293121337890625, 0.0003151893615722656, 0.0228118896484375, 0.0269622802734375, 0.0006504058837890625, 0.0007505416870117188, 0.0005164146423339844, 0.003665924072265625, 0.0014820098876953125, 4.100799560546875e-05, 0.00028204917907714844, 0.00611114501953125, 0.0115203857421875, 0.01511383056640625, 0.01248931884765625, 3.516674041748047e-05, 0.0007033348083496094, 0.04058837890625, 1.2636184692382812e-05, 2.288818359375e-05, 1.0371208190917969e-05], "tokens": [275, 319, 477, 753, 1929, 11290, 275, 319, 1468, 886, 1929, 11290, 30, 436, 2280, 322, 8019, 328, 330, 12192, 408, 654, 3914, 2473, 15622, 275, 319, 1468, 646, 526, 3088, 687, 744, 4009, 275, 319, 477, 753, 39920, 275, 319, 1468, 886, 39920, 30, 436, 2280, 322, 46213, 328, 330, 12192]}
{"line_number": 382, "line_type": "original", "code": "    }", "entropy": 1.654296875, "is_bug_line": false, "sus_score": 0.5350140333175659, "per_token_entropy": [3.107421875, 0.201171875], "tokens": [264, 320]}
{"line_number": 382, "line_type": "generated", "code": "\n\n    /**\n     * <p>\n     * Creates a <code>BigFraction</code> instance with the 2 parts of a fraction\n     * Y/Z.\n     * </p>\n     *\n     * <p>\n     * Any negative signs are", "entropy": 0.032073974609375, "is_bug_line": false, "sus_score": 0.5350140333175659, "per_token_entropy": [1.068359375, 0.039154052734375, 0.0073699951171875, 3.3020973205566406e-05, 0.06744384765625, 0.00012481212615966797, 9.047985076904297e-05, 0.0015125274658203125, 2.5033950805664062e-06, 0.2330322265625, 0.0018711090087890625, 0.09576416015625, 0.006671905517578125, 4.184246063232422e-05, 0.001983642578125, 2.8967857360839844e-05, 0.0005140304565429688, 1.8835067749023438e-05, 0.0005102157592773438, 0.006374359130859375, 0.00939178466796875, 0.0010166168212890625, 0.055908203125, 0.003082275390625, 0.00641632080078125, 0.00018739700317382812, 0.0002982616424560547, 0.00370025634765625, 0.0018510818481445312, 1.0609626770019531e-05, 0.005535125732421875, 2.09808349609375e-05, 4.3272972106933594e-05, 0.01070404052734375, 0.009124755859375, 1.239776611328125e-05, 0.0005645751953125, 2.658367156982422e-05, 8.249282836914062e-05, 0.0003077983856201172, 5.9604644775390625e-06, 0.003498077392578125, 9.894371032714844e-06, 0.0210723876953125, 0.00014293193817138672, 3.635883331298828e-05, 0.00017845630645751953, 9.298324584960938e-06, 0.003452301025390625, 7.176399230957031e-05, 8.7738037109375e-05, 0.00017786026000976562], "tokens": [446, 1022, 275, 319, 333, 98, 48, 275, 319, 9301, 312, 333, 687, 48, 7471, 20709, 377, 687, 48, 1980, 623, 322, 225, 36, 8710, 432, 312, 18795, 275, 319, 1410, 33, 76, 32, 275, 319, 576, 98, 48, 275, 319, 275, 319, 333, 98, 48, 275, 319, 6204, 11003, 39842, 884]}
{"line_number": 131, "line_type": "original", "code": "            final BigInteger gcd = num.gcd(den);", "entropy": 2.79296875, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [6.625, 2.00390625, 4.1015625, 11.328125, 0.40673828125, 4.640625, 1.18359375, 0.33203125, 0.003299713134765625, 0.0767822265625, 0.0144805908203125], "tokens": [1468, 1158, 21743, 43422, 280, 1929, 32, 46060, 26, 5114, 293]}
{"line_number": 131, "line_type": "generated", "code": "\n        final int  exponent = (int) ((bits & exponentBits) >> shift) - exponentOffset;\n        final long mantissa = bits & mantissaBits;\n\n        // compute the denominator: 2^exponent * m\n        BigInteger den =", "entropy": 0.41357421875, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.275146484375, 0.51171875, 0.59033203125, 0.11767578125, 1.5322265625, 0.009002685546875, 0.62548828125, 0.0193634033203125, 0.5107421875, 0.5234375, 0.0015239715576171875, 0.2423095703125, 1.1044921875, 0.87939453125, 0.342041015625, 0.39111328125, 1.0859375, 0.88232421875, 0.0238494873046875, 0.5380859375, 0.7392578125, 0.036407470703125, 0.1600341796875, 0.1976318359375, 0.015899658203125, 0.024169921875, 0.256103515625, 2.6226043701171875e-06, 0.0026950836181640625, 0.415283203125, 0.0010747909545898438, 0.05181884765625, 0.01271820068359375, 4.76837158203125e-06, 0.03228759765625, 0.0029468536376953125, 0.499755859375, 0.53466796875, 1.0283203125, 0.5234375, 1.44921875, 0.693359375, 0.159423828125, 0.002964019775390625, 0.2135009765625, 0.2373046875, 0.337646484375, 1.201171875, 0.2371826171875, 0.67578125, 1.4970703125, 0.05999755859375], "tokens": [291, 1158, 629, 225, 19715, 280, 308, 410, 27, 1833, 5960, 549, 19715, 8733, 27, 3776, 5733, 27, 429, 19715, 3457, 45, 291, 1158, 1946, 345, 29913, 2496, 280, 7030, 549, 345, 29913, 2496, 8733, 45, 584, 434, 7596, 322, 39920, 44, 225, 36, 80, 28323, 319, 345, 291, 21743, 5537, 280]}
{"line_number": 125, "line_type": "original", "code": "        if (BigInteger.ZERO.equals(num)) {", "entropy": 1.8486328125, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [7.20703125, 1.3583984375, 0.044158935546875, 9.28125, 0.202880859375, 0.18408203125, 0.06732177734375, 0.1676025390625, 0.0081329345703125, 1.21875, 2.25, 0.200927734375], "tokens": [351, 415, 308, 21541, 32, 13977, 32, 3574, 26, 1516, 490, 301]}
{"line_number": 125, "line_type": "generated", "code": "\n        numerator   = BigInteger.ZERO;\n        denominator = BigInteger.ONE;\n    }\n\n    /**\n     * Create a fraction given the double value and maximum error allowed.\n     * <p>\n     * This constructor behaves <em>differently</em>", "entropy": 0.1444091796875, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [1.353515625, 0.478759765625, 0.002933502197265625, 0.1160888671875, 1.0967254638671875e-05, 0.024688720703125, 0.002197265625, 0.023162841796875, 0.0012578964233398438, 0.0018796920776367188, 0.0002548694610595703, 0.0002551078796386719, 0.0013151168823242188, 0.0001666545867919922, 0.0205230712890625, 0.0003917217254638672, 0.11419677734375, 0.00220489501953125, 0.160400390625, 0.01300811767578125, 0.024261474609375, 2.7894973754882812e-05, 0.42431640625, 0.00446319580078125, 0.264892578125, 0.1802978515625, 0.062225341796875, 0.0843505859375, 0.018096923828125, 0.334716796875, 0.050872802734375, 0.0156402587890625, 0.43994140625, 0.0182647705078125, 0.046539306640625, 7.18832015991211e-05, 0.05712890625, 0.0009765625, 0.0009293556213378906, 0.0043182373046875, 1.823902130126953e-05, 0.560546875, 0.1363525390625, 1.7978515625, 0.45263671875, 0.0008716583251953125, 7.903575897216797e-05, 0.2103271484375, 2.9802322387695312e-06, 0.0014629364013671875, 2.2649765014648438e-06, 0.0004584789276123047], "tokens": [291, 1929, 11290, 261, 280, 21743, 32, 13977, 45, 291, 39920, 280, 21743, 32, 4431, 45, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 2702, 322, 2064, 786, 461, 7091, 1048, 6660, 32, 275, 319, 333, 98, 48, 275, 319, 1348, 4374, 44779, 333, 405, 48, 39339, 12636, 377, 405, 48]}
{"line_number": 144, "line_type": "original", "code": "            numerator   = num;", "entropy": 3.072265625, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [6.23828125, 10.3125, 0.004589080810546875, 0.7265625, 0.09356689453125, 1.9541015625, 2.16796875], "tokens": [1468, 1929, 11290, 261, 280, 1929, 45]}
{"line_number": 144, "line_type": "generated", "code": "\n            k = k - 1;\n        }\n\n        // use m and k to compute fraction\n        BigInteger num = BigInteger.valueOf(m);\n        BigInteger den = BigInteger.ONE;\n        if (k > 0) {\n            den = den.shift", "entropy": 0.337158203125, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.064697265625, 0.341552734375, 1.0546875, 0.002155303955078125, 0.28564453125, 0.046051025390625, 2.8967857360839844e-05, 0.0005717277526855469, 0.0194091796875, 0.00030922889709472656, 0.89794921875, 0.22021484375, 3.3359375, 2.052734375, 0.36376953125, 0.01026153564453125, 0.006885528564453125, 0.042755126953125, 0.7216796875, 0.55810546875, 2.169921875, 0.490234375, 0.97509765625, 0.032958984375, 0.004512786865234375, 0.0013551712036132812, 0.00481414794921875, 0.11383056640625, 0.2423095703125, 0.070068359375, 0.370361328125, 0.01096343994140625, 0.044158935546875, 0.044403076171875, 0.022613525390625, 0.1334228515625, 0.5322265625, 0.142578125, 0.331787109375, 0.0675048828125, 0.01256561279296875, 0.99853515625, 0.0010137557983398438, 0.002811431884765625, 0.0011472702026367188, 0.0008816719055175781, 0.051666259765625, 0.28173828125, 0.006435394287109375, 0.303955078125, 0.0068359375, 0.0298919677734375], "tokens": [324, 831, 280, 831, 429, 225, 35, 45, 291, 320, 584, 434, 793, 345, 461, 831, 372, 7596, 18795, 291, 21743, 1929, 280, 21743, 32, 9162, 26, 95, 293, 291, 21743, 5537, 280, 21743, 32, 4431, 45, 291, 415, 308, 93, 848, 225, 34, 27, 301, 324, 5537, 280, 5537, 32, 5494]}
{"line_number": 145, "line_type": "original", "code": "            denominator = den;", "entropy": 4.23046875, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [7.27734375, 9.015625, 0.47265625, 3.2734375, 1.11328125], "tokens": [1468, 39920, 280, 5537, 45]}
{"line_number": 145, "line_type": "generated", "code": "\n        }\n        while (((m & 0x1) == 0) && (k > 0)) {\n            m = m >> 1;\n            --k;\n        }\n        // at this stage, m is a power of 2 and", "entropy": 0.29638671875, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.1668701171875, 0.0021762847900390625, 0.619140625, 1.2587890625, 0.1739501953125, 0.0012378692626953125, 0.0018157958984375, 0.0011653900146484375, 0.0097503662109375, 0.3564453125, 1.693359375, 0.486572265625, 0.073974609375, 0.0001537799835205078, 0.00048232078552246094, 0.191650390625, 0.0093994140625, 0.28515625, 0.07354736328125, 0.153076171875, 0.0858154296875, 0.0865478515625, 0.0050048828125, 0.0009784698486328125, 0.01812744140625, 0.060089111328125, 0.01064300537109375, 0.0012922286987304688, 0.01123046875, 0.0006237030029296875, 5.054473876953125e-05, 0.0001590251922607422, 0.01279449462890625, 0.031707763671875, 0.00011336803436279297, 0.000370025634765625, 0.69970703125, 0.00032973289489746094, 0.463623046875, 1.87890625, 1.146484375, 0.0195770263671875, 0.019439697265625, 0.556640625, 0.75048828125, 0.10546875, 1.4423828125, 1.078125, 0.0122222900390625, 0.391845703125, 0.0002646446228027344, 0.9658203125], "tokens": [291, 320, 291, 2218, 8580, 95, 549, 225, 34, 106, 35, 27, 610, 225, 34, 27, 962, 308, 93, 848, 225, 34, 490, 301, 324, 345, 280, 345, 3776, 225, 35, 45, 324, 769, 93, 45, 291, 320, 291, 434, 821, 458, 10019, 30, 345, 438, 312, 7169, 432, 225, 36, 461]}
{"line_number": 122, "line_type": "original", "code": "        if (BigInteger.ZERO.equals(den)) {", "entropy": 1.8349609375, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [6.1171875, 1.3154296875, 0.12237548828125, 11.046875, 0.43359375, 0.1549072265625, 0.050201416015625, 0.3798828125, 0.0076446533203125, 1.9208984375, 0.0863037109375, 0.38134765625], "tokens": [351, 415, 308, 21541, 32, 13977, 32, 3574, 26, 5114, 490, 301]}
{"line_number": 122, "line_type": "generated", "code": "\n        throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_OR_NAN, value);\n    }\n\n    /**\n     * <p>\n     * Create a fraction given the double value and maximum error allowed.\n     * </p>\n     * <p>", "entropy": 0.15087890625, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.6328125, 0.625, 0.0200347900390625, 0.041168212890625, 0.0072784423828125, 0.0091552734375, 0.021148681640625, 0.09197998046875, 0.0005278587341308594, 0.48583984375, 0.000782012939453125, 2.2172927856445312e-05, 0.0285491943359375, 0.4228515625, 4.0531158447265625e-06, 0.00263214111328125, 0.6064453125, 0.1396484375, 0.0248870849609375, 0.259521484375, 0.007701873779296875, 0.176513671875, 0.00861358642578125, 0.0193023681640625, 6.771087646484375e-05, 1.4970703125, 0.0007891654968261719, 0.0009603500366210938, 0.046844482421875, 1.5497207641601562e-06, 0.10711669921875, 0.00370025634765625, 0.765625, 0.187255859375, 0.0770263671875, 0.044647216796875, 0.02337646484375, 0.25244140625, 0.03472900390625, 0.0217742919921875, 0.36376953125, 0.01490020751953125, 0.248779296875, 0.0001506805419921875, 0.156982421875, 5.1140785217285156e-05, 0.0015306472778320312, 0.0008497238159179688, 3.802776336669922e-05, 0.360595703125, 0.0017995834350585938, 0.0011453628540039062], "tokens": [291, 1422, 537, 4175, 25907, 26, 24225, 19298, 32, 10192, 521, 2345, 81, 758, 81, 30548, 30, 786, 293, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 2648, 312, 18795, 2702, 322, 2064, 786, 461, 7091, 1048, 6660, 32, 275, 319, 576, 98, 48, 275, 319, 333, 98, 48]}
{"line_number": 244, "line_type": "original", "code": "     * </p>", "entropy": 4.2578125, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [5.55859375, 4.921875, 9.6953125, 1.0732421875, 0.051788330078125], "tokens": [262, 319, 576, 98, 48]}
{"line_number": 244, "line_type": "generated", "code": "\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long) FastMath.floor(r1", "entropy": 0.138427734375, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.63623046875, 0.94873046875, 0.047698974609375, 0.0692138671875, 0.00457763671875, 0.560546875, 0.0006136894226074219, 0.30126953125, 1.2353515625, 0.10589599609375, 0.0125274658203125, 0.0164031982421875, 0.00022101402282714844, 0.165771484375, 0.8134765625, 0.005069732666015625, 0.25390625, 0.3994140625, 0.000766754150390625, 7.95125961303711e-05, 0.481689453125, 0.409912109375, 0.021881103515625, 0.005615234375, 0.00998687744140625, 0.0012664794921875, 2.1457672119140625e-06, 0.4111328125, 0.005077362060546875, 0.0027217864990234375, 0.0005474090576171875, 0.16064453125, -0.0, 0.00011932849884033203, 0.0005030632019042969, -0.0, 0.00011789798736572266, 0.067626953125, 0.024261474609375, 0.0003218650817871094, 0.004398345947265625, 0.000885009765625, 0.0007538795471191406, 4.9233436584472656e-05, 0.0004665851593017578, 0.00601959228515625, 4.887580871582031e-06, 1.7642974853515625e-05, 1.919269561767578e-05, 0.0003304481506347656, 0.0010690689086914062, 3.9577484130859375e-05], "tokens": [291, 629, 310, 280, 225, 34, 45, 291, 1905, 4719, 280, 901, 45, 291, 745, 301, 324, 3311, 96, 45, 324, 2064, 540, 35, 280, 225, 35, 32, 34, 517, 308, 100, 34, 429, 312, 34, 293, 324, 1946, 312, 35, 280, 308, 3222, 27, 15938, 5717, 32, 9121, 26, 100, 35]}
{"line_number": 121, "line_type": "original", "code": "        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);", "entropy": 1.2578125, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [5.9765625, 7.19140625, 0.039703369140625, 0.0010623931884765625, 0.81884765625, 0.0013904571533203125, 6.8046875, 0.1571044921875, 0.2261962890625, 0.0015897750854492188, 0.0001888275146484375, 0.000377655029296875, 0.1314697265625, 0.00029206275939941406, 4.0531158447265625e-06, 2.467632293701172e-05, 0.037811279296875], "tokens": [351, 4175, 2755, 32, 42698, 26, 5114, 30, 7089, 1191, 19298, 32, 16043, 65, 4683, 7267, 293]}
{"line_number": 121, "line_type": "generated", "code": "\n    public BigFraction(final double value) {\n        if (Double.isNaN(value) || Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_OR_NAN, value);\n        }\n\n        final long", "entropy": 0.141357421875, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.08380126953125, 0.04620361328125, 0.00321197509765625, 1.9073486328125e-05, 0.0011310577392578125, 0.137939453125, 0.00305938720703125, 0.0016345977783203125, 0.017120361328125, 0.1387939453125, 0.419921875, 1.2216796875, 0.1112060546875, 0.031585693359375, 9.5367431640625e-05, 0.0243988037109375, 9.119510650634766e-05, 0.0004048347473144531, 0.369384765625, 0.0127410888671875, 0.01554107666015625, 1.811981201171875e-05, 0.00017631053924560547, 4.0531158447265625e-06, 0.00037741661071777344, 9.930133819580078e-05, 0.015777587890625, 0.004436492919921875, 0.0478515625, 0.0128173828125, 0.019073486328125, 0.055938720703125, 0.000774383544921875, 0.0028934478759765625, 0.12548828125, 0.1220703125, 0.0003497600555419922, 0.9697265625, 0.0007658004760742188, 2.3603439331054688e-05, 0.0020427703857421875, 0.05224609375, 4.887580871582031e-06, 0.0010519027709960938, 0.294921875, 0.10540771484375, 0.0146026611328125, 0.045257568359375, 0.0017290115356445312, 0.8935546875, 1.306640625, 0.61083984375], "tokens": [284, 562, 7758, 20709, 26, 3220, 2064, 786, 27, 301, 291, 415, 308, 4075, 32, 26821, 26, 853, 27, 1276, 6934, 32, 28823, 11949, 26, 853, 490, 301, 324, 1422, 537, 4175, 25907, 26, 24225, 19298, 32, 10192, 521, 2345, 81, 758, 81, 30548, 30, 786, 293, 291, 320, 584, 1158, 1946]}
{"line_number": 120, "line_type": "original", "code": "        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);", "entropy": 0.90625, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [3.17578125, 3.900390625, 0.193359375, 0.0009150505065917969, 2.51171875, 0.0016422271728515625, 3.94140625, 0.333984375, 0.299560546875, 0.0017881393432617188, 0.0006508827209472656, 0.0023345947265625, 0.122314453125, 0.0006127357482910156, 6.568431854248047e-05, 0.0149993896484375], "tokens": [351, 4175, 2755, 32, 42698, 26, 1516, 30, 7089, 1191, 19298, 32, 5493, 527, 7267, 293]}
{"line_number": 120, "line_type": "generated", "code": "\n     */\n    public BigFraction(final double value) {\n        this(value, 1.0e-15);\n    }\n\n    /**\n     * Create a fraction given the double value and maximum error allowed.\n     * <p>\n     * This", "entropy": 0.1402587890625, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.67626953125, 0.08795166015625, 0.021881103515625, 0.0187835693359375, 0.00264739990234375, 5.9604644775390625e-06, 0.0007672309875488281, 0.1376953125, 0.0018358230590820312, 0.0010671615600585938, 0.01352691650390625, 0.158935546875, 0.552734375, 0.33203125, 0.0187835693359375, 0.36376953125, 0.004016876220703125, 0.61767578125, 0.466064453125, 0.54052734375, 0.0009851455688476562, 0.224609375, 0.0031375885009765625, 0.088623046875, 0.32763671875, 0.2215576171875, 0.070556640625, 0.0008196830749511719, 0.07354736328125, 0.005542755126953125, 0.02679443359375, 6.0558319091796875e-05, 0.32421875, 0.0032215118408203125, 0.08807373046875, 0.11102294921875, 0.053741455078125, 0.0191497802734375, 0.0169830322265625, 0.2274169921875, 0.08648681640625, 0.2568359375, 0.377685546875, 0.0265655517578125, 0.049072265625, 5.793571472167969e-05, 0.0462646484375, 0.0010328292846679688, 0.0007104873657226562, 0.005077362060546875, 1.0609626770019531e-05, 0.53857421875], "tokens": [275, 569, 284, 562, 7758, 20709, 26, 3220, 2064, 786, 27, 301, 291, 458, 26, 853, 30, 225, 35, 32, 34, 87, 31, 35, 39, 293, 284, 320, 446, 1022, 275, 319, 2648, 312, 18795, 2702, 322, 2064, 786, 461, 7091, 1048, 6660, 32, 275, 319, 333, 98, 48, 275, 319, 1348]}
{"line_number": 138, "line_type": "original", "code": "            if (BigInteger.ZERO.compareTo(den) > 0) {", "entropy": 1.49609375, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [5.41796875, 2.1328125, 0.11468505859375, 6.99609375, 0.05438232421875, 2.90625, 0.0225677490234375, 1.599609375, 0.002696990966796875, 2.443359375, 0.2276611328125, 1.810546875, 0.002834320068359375, 0.0016880035400390625, 0.0703125, 0.13671875], "tokens": [1468, 415, 308, 21541, 32, 13977, 32, 23908, 26, 5114, 27, 848, 225, 34, 27, 301]}
{"line_number": 138, "line_type": "generated", "code": "\n        final int k = (int) (exponent >>> 52) - 1075;\n\n        // compute 2^-k\n        long f = 1L;\n        for (int i = 1; i <= k; i", "entropy": 0.301513671875, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [1.0830078125, 1.8544921875, 0.316162109375, 0.427001953125, 0.14892578125, 0.5986328125, 0.041229248046875, 0.1866455078125, 0.6552734375, 0.0029582977294921875, 1.4365234375, 0.003406524658203125, 6.186962127685547e-05, 6.532669067382812e-05, 0.053375244140625, 0.0002474784851074219, 0.0170135498046875, 0.039306640625, 0.000392913818359375, 0.453369140625, 0.0173492431640625, 0.030517578125, 1.0673828125, 0.2205810546875, 0.61572265625, 0.96142578125, 0.002201080322265625, 0.1312255859375, 0.10577392578125, 0.06787109375, 0.04693603515625, 1.0546875, 0.51953125, 0.1318359375, 0.54833984375, 0.1632080078125, 0.42333984375, 0.238525390625, 0.02398681640625, 0.3583984375, 0.0132904052734375, 0.0174713134765625, 0.0024890899658203125, 0.00910186767578125, 0.054412841796875, 0.60693359375, 0.00615692138671875, 0.0018606185913085938, 0.2027587890625, 0.55615234375, 0.0035381317138671875, 0.1580810546875], "tokens": [291, 1158, 629, 831, 280, 308, 410, 27, 308, 28323, 8217, 225, 39, 36, 27, 429, 225, 35, 34, 41, 39, 45, 584, 434, 7596, 225, 36, 80, 31, 93, 291, 1946, 296, 280, 225, 35, 62, 45, 291, 436, 308, 410, 595, 280, 225, 35, 45, 595, 2511, 831, 45, 595]}
{"line_number": 132, "line_type": "original", "code": "            if (BigInteger.ONE.compareTo(gcd) < 0) {", "entropy": 2.12890625, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [5.51953125, 3.677734375, 0.2469482421875, 6.078125, 0.1669921875, 4.5703125, 0.00908660888671875, 2.6953125, 0.00872802734375, 8.40625, 0.51513671875, 2.048828125, 0.00371551513671875, 0.00739288330078125, 0.028106689453125, 0.09356689453125], "tokens": [1468, 415, 308, 21541, 32, 4431, 32, 23908, 26, 46060, 27, 333, 225, 34, 27, 301]}
{"line_number": 132, "line_type": "generated", "code": "\n        final long exponent = ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n        final long mantissa = (bits & 0", "entropy": 0.104736328125, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.64306640625, 0.4150390625, 0.2060546875, 0.07318115234375, 0.0025959014892578125, 1.001953125, 0.0012865066528320312, 0.031951904296875, 0.0255889892578125, 7.510185241699219e-06, 2.2172927856445312e-05, 9.298324584960938e-06, 0.6015625, 0.0002846717834472656, 2.2649765014648438e-06, 4.76837158203125e-07, 1.1920928955078125e-07, 2.9802322387695312e-06, 5.245208740234375e-06, 8.344650268554688e-07, 2.0265579223632812e-06, 1.1920928955078125e-06, 1.1920928955078125e-07, 1.1920928955078125e-07, 3.5762786865234375e-07, 5.841255187988281e-06, 0.002399444580078125, 0.0023345947265625, 0.264892578125, 0.004550933837890625, 0.00014138221740722656, 0.00019657611846923828, 0.050689697265625, 0.006862640380859375, 0.02349853515625, 0.00124359130859375, 7.56978988647461e-05, 0.012359619140625, 0.0025272369384765625, 0.03729248046875, 0.092041015625, 0.06951904296875, 0.00728607177734375, 0.04443359375, 0.0198974609375, 3.0994415283203125e-06, 0.001163482666015625, 1.716796875, 0.0811767578125, 0.0007815361022949219, 0.0016460418701171875, 1.728534698486328e-05], "tokens": [291, 1158, 1946, 19715, 280, 1833, 5960, 549, 225, 34, 106, 41, 486, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 62, 27, 3776, 225, 39, 36, 27, 429, 225, 35, 34, 36, 37, 45, 291, 1158, 1946, 345, 29913, 2496, 280, 308, 5960, 549, 225, 34]}
{"line_number": 126, "line_type": "original", "code": "            numerator   = BigInteger.ZERO;", "entropy": 1.42578125, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [7.40234375, 3.416015625, 0.00543975830078125, 0.6318359375, 0.0004665851593017578, 0.9365234375, 0.00400543212890625, 0.43017578125, 0.00963592529296875], "tokens": [1468, 1929, 11290, 261, 280, 21743, 32, 13977, 45]}
{"line_number": 126, "line_type": "generated", "code": "\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION, value);\n        }\n\n        // get the fractional part of the double value\n        final double f = value - FastMath.rint(value);\n\n        // get the integral part", "entropy": 0.3681640625, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.245849609375, 0.1395263671875, 0.001617431640625, 0.0202789306640625, 0.0020961761474609375, 0.003173828125, 0.0220489501953125, 7.724761962890625e-05, 0.00018274784088134766, 0.0020599365234375, 0.0016450881958007812, 5.841255187988281e-06, 0.0001850128173828125, 0.00457763671875, 0.001041412353515625, 1.2755393981933594e-05, 0.465576171875, 0.266357421875, 0.07794189453125, 0.031982421875, 0.0002410411834716797, 0.57861328125, 0.83447265625, 2.462890625, 0.27197265625, 1.2744140625, 1.73046875, 0.12396240234375, 1.6376953125, 0.06365966796875, 0.361328125, 0.2291259765625, 0.28564453125, 0.31787109375, 0.1253662109375, 1.44921875, 0.315673828125, 1.087890625, 0.11090087890625, 0.41943359375, 0.0005679130554199219, 8.71419906616211e-05, 0.96923828125, 0.0005021095275878906, 0.0009503364562988281, 0.0033435821533203125, 0.175048828125, 0.2001953125, 1.767578125, 0.12298583984375, 0.92236328125, 0.014007568359375], "tokens": [324, 1422, 537, 4175, 25907, 26, 24225, 19298, 32, 10192, 521, 2345, 81, 5975, 81, 42508, 30, 786, 293, 291, 320, 584, 434, 622, 322, 18795, 279, 1742, 432, 322, 2064, 786, 291, 1158, 2064, 296, 280, 786, 429, 15938, 5717, 32, 10744, 26, 853, 293, 584, 434, 622, 322, 30017, 1742]}
{"line_number": 127, "line_type": "original", "code": "            denominator = BigInteger.ONE;", "entropy": 1.8583984375, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [6.23828125, 6.0078125, 0.0728759765625, 0.52880859375, 0.00445556640625, 0.12890625, 0.0253448486328125], "tokens": [1468, 39920, 280, 21743, 32, 4431, 45]}
{"line_number": 127, "line_type": "generated", "code": "\n        }\n\n        // convert the double value to a string\n        final String str = Double.toString(value);\n\n        // remove the exponent\n        final int ePos = str.indexOf('E');\n        if (ePos > 0) {\n            str =", "entropy": 0.41064453125, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.370361328125, 0.038543701171875, 0.77001953125, 0.70458984375, 2.087890625, 0.3486328125, 0.1263427734375, 0.66650390625, 0.345703125, 0.359375, 1.4287109375, 1.4599609375, 0.28173828125, 0.11737060546875, 1.064453125, 0.287841796875, 0.0633544921875, 0.005420684814453125, 0.0083160400390625, 0.0007004737854003906, 0.00496673583984375, 0.0142669677734375, 0.445556640625, 0.05694580078125, 2.87109375, 0.57958984375, 1.1904296875, 0.48291015625, 0.259765625, 0.1446533203125, 0.96484375, 1.03515625, 0.006893157958984375, 0.10443115234375, 3.0517578125e-05, 0.029998779296875, 0.0843505859375, 0.036346435546875, 0.0252838134765625, 0.022064208984375, 0.76220703125, 0.0146026611328125, 0.0018062591552734375, 9.5367431640625e-07, 1.2119140625, 0.1512451171875, 0.001392364501953125, 0.0419921875, 0.0018062591552734375, 0.029449462890625, 0.1429443359375, 0.100341796875], "tokens": [291, 320, 584, 434, 4483, 322, 2064, 786, 372, 312, 802, 291, 1158, 892, 596, 280, 6934, 32, 3108, 26, 853, 293, 584, 434, 3345, 322, 19715, 291, 1158, 629, 484, 2996, 280, 596, 32, 7142, 463, 55, 895, 291, 415, 308, 87, 2996, 848, 225, 34, 27, 301, 324, 596, 280]}
{"line_number": 133, "line_type": "original", "code": "                num = num.divide(gcd);", "entropy": 3.310546875, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [7.9296875, 4.99609375, 3.08203125, 7.69140625, 0.55224609375, 2.904296875, 0.01377105712890625, 2.58984375, 0.0343017578125], "tokens": [2071, 1929, 280, 1929, 32, 23987, 26, 46060, 293]}
{"line_number": 133, "line_type": "generated", "code": "\n        final long mantissa = bits & 0x000fffffffffffffL;\n\n        // compute the denominator: 2^52 + f where f is the binary fractional\n        // part of m * 2^k\n        long f", "entropy": 0.37548828125, "is_bug_line": false, "sus_score": 0.3865332007408142, "per_token_entropy": [0.334716796875, 0.432861328125, 0.09454345703125, 0.0307464599609375, 0.1824951171875, 4.649162292480469e-06, 0.0125579833984375, 0.0535888671875, 0.0007839202880859375, 0.03179931640625, 0.00041174888610839844, 0.006389617919921875, 0.0018587112426757812, 0.00011301040649414062, 0.0005717277526855469, 0.0005788803100585938, 0.00693511962890625, 0.00144195556640625, 0.004703521728515625, 0.72607421875, 0.56005859375, 1.3623046875, 0.951171875, 1.70703125, 1.384765625, 0.2083740234375, 0.00321197509765625, 0.32421875, 1.8701171875, 0.578125, 0.0264129638671875, 1.548828125, 1.2861328125, 0.041229248046875, 0.2183837890625, 0.373046875, 1.1142578125, 0.352783203125, 0.353515625, 0.200439453125, 0.000732421875, 0.002483367919921875, 0.29150390625, 0.3818359375, 0.39501953125, 0.000247955322265625, 3.7670135498046875e-05, 0.00624847412109375, 0.373291015625, 0.27001953125, 0.72412109375, 0.69775390625], "tokens": [291, 1158, 1946, 345, 29913, 2496, 280, 7030, 549, 225, 34, 106, 34, 34, 34, 20629, 35030, 62, 45, 584, 434, 7596, 322, 39920, 44, 225, 36, 80, 39, 36, 474, 296, 2154, 296, 438, 322, 5298, 18795, 279, 291, 434, 1742, 432, 345, 319, 225, 36, 80, 93, 291, 1946, 296]}
