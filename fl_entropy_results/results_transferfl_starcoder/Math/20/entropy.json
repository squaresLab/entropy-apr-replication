{"line_number": 991, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.8095703125, "is_bug_line": false, "sus_score": 0.6591104865074158, "per_token_entropy": [4.328125, 1.8388671875, 0.0023632049560546875, 0.0015106201171875, 3.689453125, 0.007678985595703125, 0.0104522705078125, 0.0016613006591796875, 0.00597381591796875, 0.00201416015625, 0.034088134765625, 4.4765625, 0.06427001953125, 0.043487548828125, 0.015380859375, 0.0173492431640625, 0.00786590576171875, 0.0208740234375], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 991, "line_type": "generated", "code": "\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = Math.sqrt(m.", "entropy": 0.02337646484375, "is_bug_line": false, "sus_score": 0.6591104865074158, "per_token_entropy": [0.51611328125, 0.3984375, 0.0015926361083984375, 0.001262664794921875, 0.02410888671875, 0.00119781494140625, 0.001018524169921875, 0.0005950927734375, 0.0007166862487792969, 0.0002830028533935547, 0.0035552978515625, 0.00974273681640625, 5.3048133850097656e-05, 0.0010023117065429688, 1.2516975402832031e-05, 0.00031638145446777344, 0.008026123046875, 0.000732421875, 0.00415802001953125, 0.01114654541015625, 0.006671905517578125, 0.00014412403106689453, 0.00040602684020996094, 0.00012505054473876953, 6.61611557006836e-05, 0.00016772747039794922, 3.337860107421875e-05, 0.00011241436004638672, 0.00016999244689941406, 0.0002465248107910156, 0.0002930164337158203, 4.1365623474121094e-05, 8.535385131835938e-05, 2.6226043701171875e-06, 7.426738739013672e-05, 0.0001627206802368164, 0.00019550323486328125, 0.0012636184692382812, 0.01380157470703125, 0.08319091796875, 0.00011456012725830078, 0.0008859634399414062, 0.00012731552124023438, 8.726119995117188e-05, 0.00012683868408203125, 0.0006728172302246094, 0.039642333984375, 0.002399444580078125, 0.016265869140625, 0.0004000663757324219, 0.06414794921875, 6.473064422607422e-05], "tokens": [291, 436, 308, 410, 540, 280, 225, 34, 45, 540, 333, 345, 32, 30093, 9883, 473, 540, 1987, 301, 324, 436, 308, 410, 281, 280, 225, 34, 45, 281, 333, 345, 32, 19239, 9883, 473, 281, 1987, 301, 400, 343, 77, 100, 1674, 85, 79, 280, 4175, 32, 8663, 26, 95, 32]}
{"line_number": 909, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.60888671875, "is_bug_line": false, "sus_score": 0.6589455008506775, "per_token_entropy": [4.78515625, 4.63671875, 0.015380859375, 0.018463134765625, 0.0576171875, 0.0101318359375, 0.0257568359375, 0.0086517333984375, 0.007061004638671875, 0.0031414031982421875, 0.01031494140625, 1.314453125, 0.0215911865234375, 0.0006961822509765625, 0.005222320556640625, 0.0162200927734375, 0.006298065185546875, 0.015777587890625], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 909, "line_type": "generated", "code": "\n        /**\n         * @param x Normalized objective variables.\n         * @return penalty for violated bounds.\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0.0;\n            for", "entropy": 0.23779296875, "is_bug_line": false, "sus_score": 0.6589455008506775, "per_token_entropy": [0.53173828125, 0.12548828125, 0.05291748046875, 0.00029850006103515625, 0.57861328125, 0.055694580078125, 1.455078125, 0.7236328125, 0.0008301734924316406, 0.131103515625, 0.0287933349609375, 0.09649658203125, 0.004913330078125, 0.00406646728515625, 0.001659393310546875, 0.51171875, 1.361328125, 0.49267578125, 1.3603515625, 0.0006132125854492188, 0.195556640625, 0.5234375, 0.04791259765625, 0.0102691650390625, 0.00403594970703125, 0.623046875, 0.009918212890625, 0.0009226799011230469, 0.0003731250762939453, 0.114013671875, 0.0008978843688964844, 0.0023899078369140625, 0.05609130859375, 0.04486083984375, 0.17919921875, 0.0004944801330566406, 0.0008788108825683594, 0.260498046875, 0.0003726482391357422, 0.0082244873046875, 0.00250244140625, 0.06561279296875, 0.117431640625, 1.0712890625, 0.01305389404296875, 0.0148468017578125, 0.003509521484375, 0.9736328125, 0.0013065338134765625, 0.00487518310546875, 0.4091796875, 0.08563232421875], "tokens": [291, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 601, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064, 1178, 816, 30, 1158, 2064, 1178, 316, 41376, 27, 301, 324, 2064, 35806, 280, 225, 34, 32, 34, 45, 324, 436]}
{"line_number": 934, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.5830078125, "is_bug_line": false, "sus_score": 0.6575538516044617, "per_token_entropy": [6.23046875, 3.755859375, 0.008575439453125, 0.02740478515625, 0.05902099609375, 0.003276824951171875, 0.006145477294921875, 0.0023479461669921875, 0.003223419189453125, 0.0014429092407226562, 0.0038776397705078125, 0.352294921875, 0.0158843994140625, 0.0006685256958007812, 0.00335693359375, 0.005100250244140625, 0.002910614013671875, 0.01096343994140625], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 934, "line_type": "generated", "code": "\n        /**\n         * @param isRepairMode Sets the repair mode.\n         */\n        public void setRepairMode(boolean isRepairMode) {\n            this.isRepairMode = isRepairMode;\n        }\n\n        /**\n         * @param point Normalized objective", "entropy": 0.1810302734375, "is_bug_line": false, "sus_score": 0.6575538516044617, "per_token_entropy": [0.748046875, 0.0980224609375, 0.032806396484375, 0.00031185150146484375, 0.1812744140625, 0.184326171875, 0.66943359375, 0.1630859375, 0.0079803466796875, 1.509765625, 0.317626953125, 1.025390625, 0.115478515625, 0.203369140625, 0.07574462890625, 0.0347900390625, 0.002948760986328125, 0.0034542083740234375, 0.0008721351623535156, 0.11767578125, 0.0163726806640625, 0.002368927001953125, 0.00029850006103515625, 0.04266357421875, 0.002414703369140625, 0.0005278587341308594, 0.0006456375122070312, 0.0005922317504882812, 0.0011873245239257812, 0.0038776397705078125, 0.0008563995361328125, 0.0003387928009033203, 0.0004925727844238281, 4.9233436584472656e-05, 6.67572021484375e-06, 0.00040268898010253906, 0.0007748603820800781, 8.07046890258789e-05, 5.960464477539062e-07, 0.0003952980041503906, 0.005340576171875, 0.000789642333984375, 0.95654296875, 0.0256805419921875, 0.035675048828125, 0.0005979537963867188, 0.456787109375, 0.2091064453125, 1.06640625, 1.0263671875, 0.0011138916015625, 0.06463623046875], "tokens": [291, 1022, 276, 319, 477, 753, 438, 36836, 2101, 9013, 322, 38911, 2926, 32, 276, 569, 291, 562, 763, 739, 36836, 2101, 26, 4398, 438, 36836, 2101, 27, 301, 324, 458, 32, 297, 36836, 2101, 280, 438, 36836, 2101, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 2260, 13574, 1191, 25110]}
{"line_number": 949, "line_type": "original", "code": "                value = CMAESOptimizer.this", "entropy": 1.2294921875, "is_bug_line": false, "sus_score": 0.6515089869499207, "per_token_entropy": [4.70703125, 3.58984375, 1.7607421875, 0.97314453125, 0.00018513202667236328, 0.000278472900390625, 0.0028934478759765625, 0.02593994140625, 0.005279541015625], "tokens": [2071, 786, 280, 390, 1400, 940, 29248, 32, 578]}
{"line_number": 949, "line_type": "generated", "code": "\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return the penalty for violated bounds.\n         */\n        private double penalty(final double", "entropy": 0.167236328125, "is_bug_line": false, "sus_score": 0.6515089869499207, "per_token_entropy": [0.8173828125, 0.046905517578125, 0.06298828125, 0.0117340087890625, 0.005832672119140625, 3.337860107421875e-06, 0.002346038818359375, 0.0533447265625, 0.0004680156707763672, 0.26953125, 0.044921875, 0.00960540771484375, 0.00022459030151367188, 0.1612548828125, 0.02703857421875, 0.66943359375, 0.433349609375, 0.0004611015319824219, 0.028839111328125, 0.007587432861328125, 0.0258941650390625, 0.0015869140625, 0.0015878677368164062, 0.0010519027709960938, 0.136962890625, 0.6005859375, 0.0004665851593017578, 0.157470703125, 0.004718780517578125, 0.921875, 0.0305328369140625, 0.42431640625, 0.018218994140625, 0.0078582763671875, 0.00594329833984375, 0.0028972625732421875, 0.384521484375, 0.280029296875, 1.068359375, 1.4677734375, 0.0010786056518554688, 0.104736328125, 0.136474609375, 0.0143585205078125, 0.01465606689453125, 0.005084991455078125, 0.0943603515625, 0.01190185546875, 0.001712799072265625, 0.00030231475830078125, 0.115234375, 0.0001888275146484375], "tokens": [324, 320, 324, 442, 316, 41376, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064]}
{"line_number": 995, "line_type": "original", "code": "                    repaired[i] = 1.0;", "entropy": 1.6494140625, "is_bug_line": false, "sus_score": 0.6509433388710022, "per_token_entropy": [7.67578125, 6.59375, 0.01270294189453125, 0.1041259765625, 0.0704345703125, 0.0121002197265625, 0.010986328125, 3.76171875, 1.01171875, 0.32568359375, 0.007106781005859375, 0.213134765625], "tokens": [4696, 316, 41376, 77, 91, 79, 280, 225, 35, 32, 34, 45]}
{"line_number": 995, "line_type": "generated", "code": "\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m\n     *            Input matrix\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix", "entropy": 0.09967041015625, "is_bug_line": false, "sus_score": 0.6509433388710022, "per_token_entropy": [0.2314453125, 0.04095458984375, 0.05242919921875, 0.0069732666015625, 0.006343841552734375, 0.0005178451538085938, 2.777576446533203e-05, 2.205371856689453e-05, 7.462501525878906e-05, 7.152557373046875e-06, 7.867813110351562e-06, 0.0001913309097290039, 0.0019474029541015625, 0.053466796875, 0.01511383056640625, 0.0007109642028808594, 0.10748291015625, 0.00103759765625, 0.2452392578125, 0.13427734375, 0.01788330078125, 0.00023162364959716797, 0.25390625, 0.0166015625, 0.279541015625, 0.466552734375, 0.00020635128021240234, 0.0188751220703125, 0.07940673828125, 0.01544189453125, 0.1038818359375, 0.0006961822509765625, 0.0011663436889648438, 0.175048828125, 0.10198974609375, 0.038421630859375, 0.029632568359375, 0.0692138671875, 0.00220489501953125, 0.0006613731384277344, 1.4345703125, 0.75146484375, 0.0169830322265625, 0.1558837890625, 0.11566162109375, 0.00958251953125, 0.01029205322265625, 0.02471923828125, 0.0240325927734375, 0.028900146484375, 0.03887939453125, 0.0027484893798828125], "tokens": [291, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 275, 319, 1468, 4237, 5045, 275, 319, 477, 601, 9320, 12681, 322, 1994, 31, 3767, 14627, 3051, 432, 345, 32, 275, 569, 284, 945, 907, 11443, 4161]}
{"line_number": 910, "line_type": "original", "code": "                double diff = boundaries[1][i] - boundaries[0][i];", "entropy": 1.033203125, "is_bug_line": false, "sus_score": 0.6503129601478577, "per_token_entropy": [7.19921875, 5.40234375, 3.697265625, 0.128662109375, 0.41259765625, 0.032196044921875, 0.06195068359375, 0.01059722900390625, 0.050628662109375, 0.0048065185546875, 0.037353515625, 0.50732421875, 0.0014677047729492188, 0.001544952392578125, 0.003192901611328125, 0.0005669593811035156, 0.006328582763671875], "tokens": [2071, 2064, 5839, 280, 28116, 77, 35, 1674, 91, 79, 429, 28116, 77, 34, 1674, 91, 970]}
{"line_number": 910, "line_type": "generated", "code": "\n         * @param point Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return the penalty for violated bounds.\n         */\n        private double penalty(final double[] point, final double[] repaired) {\n           ", "entropy": 0.19140625, "is_bug_line": false, "sus_score": 0.6503129601478577, "per_token_entropy": [0.5654296875, 0.0670166015625, 0.306884765625, 0.063232421875, 0.68359375, 1.1396484375, 0.0009665489196777344, 0.07366943359375, 0.014007568359375, 0.06524658203125, 0.006366729736328125, 0.00894927978515625, 0.0013608932495117188, 0.583984375, 0.18798828125, 0.0003514289855957031, 0.35693359375, 0.0196380615234375, 1.5693359375, 0.08935546875, 0.268310546875, 0.03997802734375, 0.035369873046875, 0.01245880126953125, 0.0032863616943359375, 0.7060546875, 0.1864013671875, 0.40625, 0.72314453125, 0.0004892349243164062, 0.0819091796875, 0.205078125, 0.049224853515625, 0.01201629638671875, 0.00446319580078125, 0.91650390625, 0.009307861328125, 0.0008492469787597656, 0.0003018379211425781, 0.0885009765625, 0.0005626678466796875, 0.00151824951171875, 0.003692626953125, 0.0003693103790283203, 0.32763671875, 0.0002942085266113281, 0.0006203651428222656, 0.0028705596923828125, 2.2649765014648438e-06, 0.0008749961853027344, 0.0023441314697265625, 0.056427001953125], "tokens": [276, 319, 477, 753, 2260, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064, 1178, 2260, 30, 1158, 2064, 1178, 316, 41376, 27, 301, 324]}
{"line_number": 992, "line_type": "original", "code": "                if (x[i] < 0) {", "entropy": 1.3408203125, "is_bug_line": false, "sus_score": 0.6491487622261047, "per_token_entropy": [5.3515625, 3.8125, 0.061798095703125, 3.80078125, 1.177734375, 0.9658203125, 0.0194854736328125, 0.6826171875, 0.02374267578125, 0.0197601318359375, 0.12408447265625, 0.050384521484375], "tokens": [2071, 415, 308, 106, 77, 91, 79, 333, 225, 34, 27, 301]}
{"line_number": 992, "line_type": "generated", "code": "\n                d[r][c] = Math.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix\n     * @", "entropy": 0.08013916015625, "is_bug_line": false, "sus_score": 0.6491487622261047, "per_token_entropy": [1.0009765625, 0.1300048828125, 0.0007562637329101562, 0.0093536376953125, 0.033050537109375, 0.00899505615234375, 0.0013494491577148438, 0.005588531494140625, 0.313720703125, 0.004817962646484375, 0.046905517578125, 0.00458526611328125, 0.10565185546875, 0.0010318756103515625, 0.0010471343994140625, 0.0003178119659423828, 0.0032787322998046875, 0.00031685829162597656, 0.005901336669921875, 0.00502777099609375, 0.289306640625, 0.0022735595703125, 0.0223236083984375, 0.005687713623046875, 0.05450439453125, 0.0107269287109375, 0.00347137451171875, 0.00042128562927246094, 2.396106719970703e-05, 8.940696716308594e-06, 5.4836273193359375e-05, 2.7418136596679688e-06, 2.4318695068359375e-05, 0.00018513202667236328, 0.0022373199462890625, 0.043243408203125, 0.007701873779296875, 0.0005807876586914062, 0.0298919677734375, 0.0003948211669921875, 0.17626953125, 0.09735107421875, 0.0116424560546875, 0.0004220008850097656, 0.1964111328125, 0.01377105712890625, 0.2269287109375, 1.0791015625, 0.0226593017578125, 0.186767578125, 0.0007023811340332031, 0.0006966590881347656], "tokens": [400, 343, 77, 100, 1674, 85, 79, 280, 4175, 32, 8663, 26, 95, 32, 48895, 26, 100, 30, 281, 876, 324, 320, 291, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 4237, 5045, 275, 319, 477]}
{"line_number": 935, "line_type": "original", "code": "                double diff = boundaries[1][i] - boundaries[0][i];", "entropy": 0.73486328125, "is_bug_line": false, "sus_score": 0.6486133337020874, "per_token_entropy": [8.8203125, 2.544921875, 0.58447265625, 0.0296630859375, 0.1676025390625, 0.0078582763671875, 0.0153350830078125, 0.003658294677734375, 0.017608642578125, 0.0026035308837890625, 0.0249176025390625, 0.265380859375, 0.0008540153503417969, 0.0006561279296875, 0.002017974853515625, 0.00034737586975097656, 0.007610321044921875], "tokens": [2071, 2064, 5839, 280, 28116, 77, 35, 1674, 91, 79, 429, 28116, 77, 34, 1674, 91, 970]}
{"line_number": 935, "line_type": "generated", "code": "\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return the penalty for violating the bounds.\n         */\n        public double penalty(final double[] x, final double[] repaired", "entropy": 0.244873046875, "is_bug_line": false, "sus_score": 0.6486133337020874, "per_token_entropy": [0.298095703125, 0.1580810546875, 0.08453369140625, 0.00029015541076660156, 0.314697265625, 0.11456298828125, 1.23828125, 0.64990234375, 0.0009679794311523438, 0.053680419921875, 0.018157958984375, 0.056732177734375, 0.006145477294921875, 0.00615692138671875, 0.0174407958984375, 0.619140625, 0.662109375, 0.0004968643188476562, 0.30712890625, 0.02313232421875, 1.4267578125, 0.06494140625, 0.2181396484375, 0.022735595703125, 0.012542724609375, 0.006977081298828125, 0.002941131591796875, 0.68505859375, 0.2484130859375, 0.650390625, 2.291015625, 0.00879669189453125, 0.398681640625, 0.6240234375, 0.1737060546875, 0.0255889892578125, 0.02520751953125, 0.005626678466796875, 0.65771484375, 0.0120391845703125, 0.0012197494506835938, 0.0007925033569335938, 0.309326171875, 0.0004718303680419922, 0.0015668869018554688, 0.008636474609375, 0.0016317367553710938, 0.2197265625, 0.0004513263702392578, 0.000732421875, 0.0020313262939453125, 1.3113021850585938e-06], "tokens": [291, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 27982, 1741, 322, 11615, 32, 276, 569, 291, 562, 2064, 35806, 26, 3220, 2064, 1178, 816, 30, 1158, 2064, 1178, 316, 41376]}
{"line_number": 911, "line_type": "original", "code": "                res[i] = (x[i] - boundaries[0][i]) / diff;", "entropy": 0.9404296875, "is_bug_line": false, "sus_score": 0.6468386650085449, "per_token_entropy": [6.07421875, 6.2421875, 0.58544921875, 0.056976318359375, 0.004497528076171875, 0.0124969482421875, 2.013671875, 0.5400390625, 0.02520751953125, 0.006683349609375, 0.028076171875, 0.399658203125, 0.335205078125, 0.021881103515625, 0.037933349609375, 0.0139007568359375, 0.0019817352294921875, 0.025665283203125, 0.298095703125, 2.939453125, 0.0914306640625], "tokens": [2071, 736, 77, 91, 79, 280, 308, 106, 77, 91, 79, 429, 28116, 77, 34, 1674, 91, 1130, 517, 5839, 45]}
{"line_number": 911, "line_type": "generated", "code": "\n         * @return the penalty for the given point\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0;\n            for (int i = 0; i < x.length; i", "entropy": 0.274658203125, "is_bug_line": false, "sus_score": 0.6468386650085449, "per_token_entropy": [0.61376953125, 0.335693359375, 0.0233612060546875, 0.14453125, 0.56640625, 0.56689453125, 0.478759765625, 1.9443359375, 1.609375, 1.697265625, 1.982421875, 0.060302734375, 0.007411956787109375, 0.7841796875, 0.00921630859375, 0.0017728805541992188, 0.0006937980651855469, 0.105224609375, 0.0010633468627929688, 0.0017757415771484375, 0.053070068359375, 0.10003662109375, 0.1776123046875, 0.0006709098815917969, 0.0010738372802734375, 0.36767578125, 0.0005469322204589844, 0.0127105712890625, 0.0026798248291015625, 0.109375, 0.1983642578125, 0.953125, 0.020660400390625, 0.0169525146484375, 0.0035610198974609375, 0.68505859375, 0.161376953125, 0.294677734375, 0.0017213821411132812, 0.00543212890625, 0.04205322265625, 0.0009541511535644531, 0.00511932373046875, 0.0005736351013183594, 0.002101898193359375, 0.0009756088256835938, 0.0014781951904296875, 0.1060791015625, 8.869171142578125e-05, 2.9087066650390625e-05, 0.004459381103515625, 0.017791748046875], "tokens": [276, 319, 477, 601, 322, 35806, 436, 322, 2702, 2260, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064, 1178, 816, 30, 1158, 2064, 1178, 316, 41376, 27, 301, 324, 2064, 35806, 280, 225, 34, 45, 324, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595]}
{"line_number": 994, "line_type": "original", "code": "                } else if (x[i] > 1.0) {", "entropy": 1.1474609375, "is_bug_line": false, "sus_score": 0.6466432213783264, "per_token_entropy": [3.08984375, 5.171875, 5.04296875, 2.291015625, 0.054718017578125, 2.0234375, 0.130859375, 0.071044921875, 0.00916290283203125, 0.17333984375, 0.0467529296875, 0.06396484375, 0.1173095703125, 0.003143310546875, 0.035186767578125, 0.037322998046875], "tokens": [2071, 320, 813, 415, 308, 106, 77, 91, 79, 848, 225, 35, 32, 34, 27, 301]}
{"line_number": 994, "line_type": "generated", "code": "\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m\n     *            Input matrix\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static", "entropy": 0.0955810546875, "is_bug_line": false, "sus_score": 0.6466432213783264, "per_token_entropy": [0.29296875, 0.007080078125, 0.01415252685546875, 9.85860824584961e-05, 0.0263824462890625, 0.005817413330078125, 0.00275421142578125, 0.00027680397033691406, 1.4662742614746094e-05, 1.0371208190917969e-05, 4.1365623474121094e-05, 1.9073486328125e-06, 6.198883056640625e-06, 0.00014030933380126953, 0.001007080078125, 0.041961669921875, 0.00785064697265625, 0.0005083084106445312, 0.1639404296875, 0.00040340423583984375, 0.242431640625, 0.12091064453125, 0.01503753662109375, 0.00032711029052734375, 0.227294921875, 0.01345062255859375, 0.265625, 0.462890625, 0.00019288063049316406, 0.0182952880859375, 0.073486328125, 0.015411376953125, 0.0966796875, 0.0006833076477050781, 0.0010652542114257812, 0.1676025390625, 0.09832763671875, 0.03692626953125, 0.02874755859375, 0.0697021484375, 0.0022735595703125, 0.0004665851593017578, 1.3837890625, 0.69775390625, 0.0164794921875, 0.144775390625, 0.11578369140625, 0.00902557373046875, 0.008941650390625, 0.0178375244140625, 0.023406982421875, 0.027557373046875], "tokens": [324, 320, 291, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 275, 319, 1468, 4237, 5045, 275, 319, 477, 601, 9320, 12681, 322, 1994, 31, 3767, 14627, 3051, 432, 345, 32, 275, 569, 284, 945, 907]}
{"line_number": 1012, "line_type": "original", "code": "                penalty += diff * valueRange;", "entropy": 3.474609375, "is_bug_line": false, "sus_score": 0.6447421908378601, "per_token_entropy": [8.65625, 9.953125, 0.908203125, 2.82421875, 0.370849609375, 4.73828125, 0.036590576171875, 0.30224609375], "tokens": [2071, 35806, 1454, 5839, 319, 786, 3198, 45]}
{"line_number": 1012, "line_type": "generated", "code": "\n    }", "entropy": 0.173828125, "is_bug_line": false, "sus_score": 0.6447421908378601, "per_token_entropy": [0.29638671875, 0.0511474609375], "tokens": [284, 320]}
{"line_number": 718, "line_type": "original", "code": "                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));", "entropy": 1.9287109375, "is_bug_line": false, "sus_score": 0.6039956212043762, "per_token_entropy": [7.40234375, 2.9609375, 0.0222930908203125, 5.34375, 2.5859375, 0.2117919921875, 3.41796875, 2.345703125, 0.0169219970703125, 2.943359375, 3.171875, 0.021697998046875, 1.0927734375, 0.009918212890625, 1.1162109375, 0.07830810546875, 1.5283203125, 0.43505859375], "tokens": [2071, 11443, 4161, 2099, 7927, 101, 280, 17058, 26, 1036, 7252, 26, 9699, 26, 282, 108, 8095, 4236]}
{"line_number": 718, "line_type": "generated", "code": "\n        B = C.scalarMultiply(1. / (1. - negccov * ccov1 - ccovmu));\n        BD = B.scalarMultiply(diagD);\n    }\n\n    /**\n     * Update of the eigenvector matrix", "entropy": 0.415771484375, "is_bug_line": false, "sus_score": 0.6039956212043762, "per_token_entropy": [0.2059326171875, 2.146484375, 0.0250396728515625, 0.71533203125, 0.1917724609375, 0.6181640625, 0.0013408660888671875, 0.1328125, 0.31591796875, 0.052978515625, 0.184326171875, 0.99267578125, 0.409423828125, 0.0191497802734375, 0.7607421875, 0.1331787109375, 0.0011739730834960938, 0.0007147789001464844, 1.5439453125, 1.05859375, 0.791015625, 0.0091552734375, 1.087890625, 0.419677734375, 0.00154876708984375, 1.1801719665527344e-05, 2.6345252990722656e-05, 0.583984375, 0.1453857421875, 1.3525390625, 0.0045166015625, 0.79833984375, 0.034027099609375, 1.0390625, 0.0050201416015625, 0.02294921875, 0.33984375, 0.2021484375, 0.1993408203125, 0.26025390625, 0.0004191398620605469, 0.1490478515625, 0.069580078125, 0.019622802734375, 0.00020420551300048828, 1.1103515625, 0.822265625, 0.388427734375, 1.6064453125, 0.045989990234375, 0.0009021759033203125, 0.5986328125], "tokens": [291, 551, 280, 390, 32, 13049, 27732, 26, 35, 32, 517, 308, 35, 32, 429, 7528, 85, 12626, 319, 281, 12626, 35, 429, 281, 331, 3149, 103, 876, 291, 47761, 280, 551, 32, 13049, 27732, 26, 13006, 54, 293, 284, 320, 446, 1022, 275, 319, 4000, 432, 322, 38382, 2121, 1108, 5045]}
{"line_number": 1116, "line_type": "original", "code": "        for (int r = 0; r < m.getRowDimension(); r++) {", "entropy": 0.404052734375, "is_bug_line": false, "sus_score": 0.5941675901412964, "per_token_entropy": [1.6328125, 2.341796875, 0.0129852294921875, 0.0075836181640625, 0.31640625, 0.01557159423828125, 0.004161834716796875, 0.000926971435546875, 0.0024433135986328125, 0.0011234283447265625, 0.005401611328125, 0.01294708251953125, 3.2734375, 0.015625, 0.0012493133544921875, 0.002162933349609375, 0.00450897216796875, 0.0042724609375, 0.020294189453125], "tokens": [351, 436, 308, 410, 540, 280, 225, 34, 45, 540, 333, 345, 32, 30093, 9883, 473, 540, 1987, 301]}
{"line_number": 1116, "line_type": "generated", "code": "\n     * @param m2 Destination matrix.", "entropy": 0.254150390625, "is_bug_line": false, "sus_score": 0.5941675901412964, "per_token_entropy": [0.7265625, 0.250244140625, 0.0213165283203125, 0.046478271484375, 0.0330810546875, 0.0018720626831054688, 0.35400390625, 0.0181884765625, 0.83544921875], "tokens": [275, 319, 477, 753, 345, 36, 27584, 5045, 32]}
{"line_number": 1130, "line_type": "original", "code": "        for (int c = 0; c < m.getColumnDimension(); c++) {", "entropy": 0.7734375, "is_bug_line": false, "sus_score": 0.5940295457839966, "per_token_entropy": [2.970703125, 3.943359375, 0.0154571533203125, 0.03240966796875, 2.259765625, 0.0120086669921875, 0.004878997802734375, 0.0024814605712890625, 0.0034656524658203125, 0.00252532958984375, 0.0088653564453125, 0.103759765625, 5.234375, 0.055389404296875, 0.0028247833251953125, 0.003780364990234375, 0.003635406494140625, 0.006134033203125, 0.0293426513671875], "tokens": [351, 436, 308, 410, 281, 280, 225, 34, 45, 281, 333, 345, 32, 19239, 9883, 473, 281, 1987, 301]}
{"line_number": 1130, "line_type": "generated", "code": "\n    private static RealMatrix ones(int n, int m) {\n        double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            for (int c = 0; c", "entropy": 0.06365966796875, "is_bug_line": false, "sus_score": 0.5940295457839966, "per_token_entropy": [0.9228515625, 0.08843994140625, 0.068603515625, 0.022247314453125, 3.6597251892089844e-05, 0.625, 0.02105712890625, 0.3056640625, 0.01450347900390625, 0.00934600830078125, 0.003543853759765625, 0.0009684562683105469, 0.01153564453125, 0.0098724365234375, 0.06365966796875, 0.169189453125, 0.0013551712036132812, 0.04901123046875, 0.0004513263702392578, 0.0030574798583984375, 0.0004467964172363281, 0.00011014938354492188, 0.00655364990234375, 0.00023317337036132812, 0.00455474853515625, 0.0003325939178466797, 0.12060546875, 0.076416015625, 0.004669189453125, 0.003047943115234375, 0.456298828125, 0.00139617919921875, 0.00028443336486816406, 0.00022590160369873047, 0.0012416839599609375, 0.00038313865661621094, 0.0017547607421875, 0.04083251953125, 0.0005664825439453125, 0.0022830963134765625, 0.0012340545654296875, 0.01120758056640625, 0.0650634765625, 0.11749267578125, 0.0007257461547851562, 0.00015974044799804688, 0.00044417381286621094, 0.0001996755599975586, 0.00019276142120361328, 0.00018274784088134766, 0.0009369850158691406, 0.0005059242248535156], "tokens": [284, 945, 907, 11443, 4161, 11668, 26, 410, 310, 30, 629, 345, 27, 301, 291, 2064, 11336, 343, 280, 537, 2064, 77, 96, 1674, 95, 970, 291, 436, 308, 410, 540, 280, 225, 34, 45, 540, 333, 310, 45, 540, 1987, 301, 324, 436, 308, 410, 281, 280, 225, 34, 45, 281]}
{"line_number": 1118, "line_type": "original", "code": "                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;", "entropy": 1.55859375, "is_bug_line": false, "sus_score": 0.5916520357131958, "per_token_entropy": [7.9375, 3.38671875, 0.08544921875, 0.1629638671875, 0.0272674560546875, 0.06512451171875, 0.175537109375, 0.0213775634765625, 6.5703125, 4.66796875, 1.9775390625, 6.25, 4.83984375, 0.172607421875, 0.303955078125, 2.619140625, 0.0184326171875, 0.0028533935546875, 0.02484130859375, 0.0080108642578125, 0.1793212890625, 0.396484375, 0.10321044921875, 0.29345703125, 0.0017099380493164062, 0.246337890625], "tokens": [2071, 343, 77, 100, 1674, 85, 79, 280, 540, 2511, 281, 429, 831, 1018, 345, 32, 48895, 26, 100, 30, 281, 27, 499, 225, 34, 45]}
{"line_number": 1118, "line_type": "generated", "code": "\n     */\n    private static void copyCol(final RealMatrix m1, int col1, final RealMatrix m2, int col2) {\n        for (int r = 0; r < m1.getRowDimension(); r++) {", "entropy": 0.08892822265625, "is_bug_line": false, "sus_score": 0.5916520357131958, "per_token_entropy": [0.484619140625, 0.07415771484375, 0.052886962890625, 0.0380859375, 0.037384033203125, 0.005908966064453125, 0.094482421875, 1.0712890625, 0.073974609375, 0.1624755859375, 0.004852294921875, 0.00015020370483398438, 0.0005993843078613281, 0.0008687973022460938, 6.985664367675781e-05, 0.8857421875, 0.0027179718017578125, 0.0005970001220703125, 0.0002357959747314453, 0.62890625, 0.0015096664428710938, 0.00057220458984375, 0.0006742477416992188, 3.6716461181640625e-05, 0.000270843505859375, 0.152099609375, 0.001194000244140625, 0.0001264810562133789, 0.006244659423828125, 0.01323699951171875, 0.087890625, 0.10595703125, 0.0019378662109375, 0.0003399848937988281, 0.324951171875, 0.0011415481567382812, 0.0017442703247070312, 5.7816505432128906e-05, 0.0016908645629882812, 0.0002275705337524414, 0.0006122589111328125, 0.0014219284057617188, 0.1051025390625, 0.0002503395080566406, 0.00865936279296875, 3.886222839355469e-05, 0.001079559326171875, 0.0028400421142578125, 0.0008544921875, 0.0033473968505859375], "tokens": [275, 569, 284, 945, 907, 763, 1933, 871, 26, 3220, 11443, 4161, 345, 35, 30, 629, 932, 35, 30, 1158, 11443, 4161, 345, 36, 30, 629, 932, 36, 27, 301, 291, 436, 308, 410, 540, 280, 225, 34, 45, 540, 333, 345, 35, 32, 30093, 9883, 473, 540, 1987, 301]}
{"line_number": 1117, "line_type": "original", "code": "            for (int c = 0; c < m.getColumnDimension(); c++) {", "entropy": 0.67822265625, "is_bug_line": false, "sus_score": 0.5915819406509399, "per_token_entropy": [3.44921875, 2.19140625, 0.0207977294921875, 0.00676727294921875, 3.537109375, 0.09722900390625, 0.01256561279296875, 0.001209259033203125, 0.005245208740234375, 0.0026092529296875, 0.0311431884765625, 0.0369873046875, 3.3671875, 0.056365966796875, 0.002475738525390625, 0.010345458984375, 0.019073486328125, 0.0085906982421875, 0.0281982421875], "tokens": [1468, 436, 308, 410, 281, 280, 225, 34, 45, 281, 333, 345, 32, 19239, 9883, 473, 281, 1987, 301]}
{"line_number": 1117, "line_type": "generated", "code": "\n     */\n    private static void copyColumn(final RealMatrix m1, int col1, final RealMatrix m2, int col2) {\n        for (int r = 0; r < m1.getRowDimension(); r++) {\n            m", "entropy": 0.08697509765625, "is_bug_line": false, "sus_score": 0.5915819406509399, "per_token_entropy": [0.50390625, 0.295166015625, 0.01678466796875, 0.038848876953125, 0.040924072265625, 0.006069183349609375, 0.11810302734375, 0.5380859375, 0.0506591796875, 0.10858154296875, 0.005565643310546875, 0.0004279613494873047, 0.0006613731384277344, 0.0013895034790039062, 8.082389831542969e-05, 0.80029296875, 0.0037975311279296875, 0.001251220703125, 0.00041103363037109375, 0.59326171875, 0.0027179718017578125, 0.00269317626953125, 0.001369476318359375, 8.046627044677734e-05, 0.5537109375, 0.068603515625, 0.0134735107421875, 0.0015783309936523438, 0.016204833984375, 0.020050048828125, 0.0643310546875, 0.09771728515625, 0.0024242401123046875, 0.0005006790161132812, 0.290283203125, 0.0014886856079101562, 0.0017490386962890625, 9.083747863769531e-05, 0.002506256103515625, 0.00032782554626464844, 0.0010557174682617188, 0.00115966796875, 0.129150390625, 0.0001989603042602539, 0.00672149658203125, 5.4717063903808594e-05, 0.0012493133544921875, 0.00484466552734375, 0.0017499923706054688, 0.0028095245361328125, 0.0906982421875, 0.016815185546875], "tokens": [275, 569, 284, 945, 907, 763, 1933, 2137, 26, 3220, 11443, 4161, 345, 35, 30, 629, 932, 35, 30, 1158, 11443, 4161, 345, 36, 30, 629, 932, 36, 27, 301, 291, 436, 308, 410, 540, 280, 225, 34, 45, 540, 333, 345, 35, 32, 30093, 9883, 473, 540, 1987, 301, 324, 345]}
{"line_number": 226, "line_type": "original", "code": "", "entropy": 3.158203125, "is_bug_line": false, "sus_score": 0.5912357568740845, "per_token_entropy": [3.158203125], "tokens": [203]}
{"line_number": 226, "line_type": "generated", "code": "\n     */\n    @Deprecated\n    public CMAESOptimizer(int lambda, double[] inputSigma, int maxIterations,\n                          double stopFitness, boolean isActiveCMA, int diagonalOnly,\n                          int checkFeasableCount, RandomGenerator random,\n                          boolean", "entropy": 0.0806884765625, "is_bug_line": false, "sus_score": 0.5912357568740845, "per_token_entropy": [0.51953125, 0.06817626953125, 0.033843994140625, 0.380126953125, 0.01552581787109375, 0.0312347412109375, 0.03851318359375, 0.0014638900756835938, 6.67572021484375e-06, 0.0001424551010131836, 1.2636184692382812e-05, 0.00406646728515625, 0.24267578125, 0.001178741455078125, 0.0024776458740234375, 0.1474609375, 0.0039520263671875, 0.0007047653198242188, 3.5762786865234375e-06, 0.0003466606140136719, 0.36572265625, 0.0011816024780273438, 6.914138793945312e-05, 0.0004687309265136719, 0.71240234375, 0.032440185546875, 0.01050567626953125, 0.00012040138244628906, 9.691715240478516e-05, 0.08258056640625, 0.001247406005859375, 5.841255187988281e-06, 2.110004425048828e-05, 0.00046753883361816406, 1.017578125, 0.0007481575012207031, 2.1219253540039062e-05, 0.00022792816162109375, 0.047271728515625, 0.01105499267578125, 0.00018322467803955078, 1.8358230590820312e-05, 0.0002925395965576172, 1.5497207641601562e-06, 0.00016498565673828125, 0.00046539306640625, 0.1468505859375, 0.10357666015625, 0.0008311271667480469, 0.005657196044921875, 0.1558837890625, 0.005893707275390625], "tokens": [275, 569, 284, 477, 15387, 284, 562, 390, 1400, 940, 29248, 26, 410, 9254, 30, 2064, 1178, 1509, 28326, 30, 629, 1769, 31219, 30, 3775, 2064, 4719, 48599, 30, 1905, 36511, 53, 1400, 30, 629, 27601, 4495, 30, 3775, 629, 1505, 9008, 302, 444, 1534, 30, 9500, 4815, 3995, 30, 3775, 1905]}
{"line_number": 378, "line_type": "original", "code": "                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))", "entropy": 2.24609375, "is_bug_line": false, "sus_score": 0.5907381176948547, "per_token_entropy": [8.015625, 9.8125, 6.078125, 0.325927734375, 0.9443359375, 0.058258056640625, 0.1209716796875, 0.052490234375, 0.010589599609375, 14.2734375, 1.712890625, 0.5185546875, 0.0206146240234375, 2.419921875, 0.038787841796875, 0.99560546875, 0.1939697265625, 0.2437744140625, 0.00250244140625, 0.254150390625, 1.103515625], "tokens": [9316, 2099, 29640, 280, 816, 6009, 32, 669, 26, 7644, 32, 20123, 26, 282, 108, 32, 19239, 4161, 26, 93, 490]}
{"line_number": 378, "line_type": "generated", "code": "\n                if (fitfun.isFeasible(xmean.getColumn(0))) {\n                    if (fitfun.isFeasible(bestArx.getColumn(0))) {\n                        // update distribution path\n                        updateDistributionPath(bestArx.getColumn", "entropy": 0.53857421875, "is_bug_line": false, "sus_score": 0.5907381176948547, "per_token_entropy": [0.272705078125, 0.6787109375, 0.2042236328125, 2.2890625, 0.019500732421875, 0.004398345947265625, 0.66357421875, 0.31982421875, 0.0012235641479492188, 0.01010894775390625, 0.875, 0.020538330078125, 0.1480712890625, 0.008331298828125, 0.01605224609375, 0.00140380859375, 0.425537109375, 0.0584716796875, 0.456787109375, 1.599609375, 0.16015625, 1.6044921875, 0.0107421875, 0.0021820068359375, 0.5322265625, 0.1458740234375, 0.0014781951904296875, 0.0175628662109375, 1.919921875, 0.007678985595703125, 0.00795745849609375, 0.00972747802734375, 0.003589630126953125, 0.007556915283203125, 0.11700439453125, 0.0780029296875, 0.023406982421875, 0.2587890625, 1.9814453125, 3.287109375, 3.744140625, 1.169921875, 0.587890625, 2.083984375, 0.1290283203125, 0.2841796875, 0.15283203125, 0.685546875, 0.039642333984375, 0.285400390625, 0.5791015625, 0.0149993896484375], "tokens": [400, 415, 308, 4698, 6381, 32, 297, 9008, 38294, 26, 106, 6009, 32, 19239, 26, 34, 2610, 301, 528, 415, 308, 4698, 6381, 32, 297, 9008, 38294, 26, 8773, 3421, 106, 32, 19239, 26, 34, 2610, 301, 715, 434, 1974, 7433, 1519, 715, 1974, 16218, 1215, 26, 8773, 3421, 106, 32, 19239]}
{"line_number": 292, "line_type": "original", "code": "     * {@code stopFitness}.", "entropy": 2.81640625, "is_bug_line": false, "sus_score": 0.5903424024581909, "per_token_entropy": [2.857421875, 2.52734375, 5.9609375, 0.20458984375, 6.03125, 0.07598876953125, 2.056640625], "tokens": [262, 319, 3088, 687, 4719, 48599, 4009]}
{"line_number": 292, "line_type": "generated", "code": "\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n        return statisticsDHistory;\n    }\n\n    /**\n     * @return History of C matrix.", "entropy": 0.06842041015625, "is_bug_line": false, "sus_score": 0.5903424024581909, "per_token_entropy": [0.2314453125, 0.052642822265625, 0.0069427490234375, 0.005229949951171875, 0.0016756057739257812, 0.00026488304138183594, 0.026519775390625, 0.0010709762573242188, 0.0004119873046875, 0.0003783702850341797, 0.010650634765625, 0.0987548828125, 0.0439453125, 0.0004935264587402344, 0.00012230873107910156, 0.0029048919677734375, 0.002803802490234375, 0.00330352783203125, 0.0045928955078125, 0.0005674362182617188, 0.0009026527404785156, 0.01177215576171875, 1.704692840576172e-05, 0.03485107421875, 0.0672607421875, 0.0196990966796875, 0.00014698505401611328, 0.1307373046875, 0.03741455078125, 0.2000732421875, 0.002838134765625, 1.2734375, 0.027984619140625, 0.024383544921875], "tokens": [275, 569, 284, 562, 1682, 46, 6877, 4161, 48, 622, 13487, 54, 6705, 346, 301, 291, 442, 14564, 54, 6705, 45, 284, 320, 446, 1022, 275, 319, 477, 601, 19595, 432, 390, 5045, 32]}
{"line_number": 737, "line_type": "original", "code": "                C = C.scalarMultiply(oldFac)", "entropy": 1.734375, "is_bug_line": false, "sus_score": 0.5896890759468079, "per_token_entropy": [4.4765625, 3.490234375, 0.2034912109375, 1.763671875, 0.08575439453125, 1.5234375, 0.0037994384765625, 0.053955078125, 5.8515625, 1.14453125, 0.476318359375], "tokens": [2071, 390, 280, 390, 32, 13049, 27732, 26, 1455, 7774, 27]}
{"line_number": 737, "line_type": "generated", "code": "\n            if (ccov1 + ccovmu > 0) {\n                // update B and D from C\n                RealMatrix BBD = BD.multiply(B).multiply(diagD);\n                BD = BD.multiply(B.transpose()).", "entropy": 0.60107421875, "is_bug_line": false, "sus_score": 0.5896890759468079, "per_token_entropy": [0.892578125, 2.046875, 0.07122802734375, 2.298828125, 0.1531982421875, 0.00626373291015625, 0.1531982421875, 0.2054443359375, 0.0023288726806640625, 7.677078247070312e-05, 0.0003719329833984375, 0.71240234375, 0.00499725341796875, 0.006134033203125, 0.1640625, 0.00925445556640625, 0.11468505859375, 0.974609375, 2.142578125, 1.6220703125, 0.6669921875, 0.04437255859375, 1.958984375, 0.3115234375, 0.8232421875, 2.498046875, 0.00820159912109375, 1.6513671875, 2.58203125, 0.1424560546875, 1.814453125, 0.060211181640625, 0.15625, 0.0017375946044921875, 0.275634765625, 0.5771484375, 0.02484130859375, 0.0011320114135742188, 0.292724609375, 0.46875, 0.0931396484375, 0.07244873046875, 0.75830078125, 0.056121826171875, 0.80615234375, 0.0092926025390625, 0.88037109375, 0.0030078887939453125, 0.85107421875, 1.103515625, 0.168701171875, 0.52392578125], "tokens": [324, 415, 308, 85, 12626, 35, 474, 281, 331, 3149, 103, 848, 225, 34, 27, 301, 400, 434, 1974, 551, 461, 475, 645, 390, 400, 11443, 4161, 551, 7644, 280, 47761, 32, 20123, 26, 52, 547, 20123, 26, 13006, 54, 293, 400, 47761, 280, 47761, 32, 20123, 26, 52, 32, 16547, 4251]}
{"line_number": 702, "line_type": "original", "code": "            // minor correction if hsig==false", "entropy": 1.55078125, "is_bug_line": false, "sus_score": 0.5892564058303833, "per_token_entropy": [5.40234375, 0.482421875, 7.41796875, 0.323486328125, 0.224853515625, 0.04388427734375, 0.00024020671844482422, 0.04754638671875, 0.0153350830078125], "tokens": [1468, 434, 14887, 25683, 415, 420, 4994, 379, 1870]}
{"line_number": 702, "line_type": "generated", "code": "\n                       .add(arpos.scalarMultiply(ccovmu)\n                               .multiply(\n                                        times(repmat(weights, 1, dimension),\n                                                arpos.transpose())));\n            }\n            diagC = getDiagonal(C);\n            if", "entropy": 0.2469482421875, "is_bug_line": false, "sus_score": 0.5892564058303833, "per_token_entropy": [0.249755859375, 1.056640625, 0.0292205810546875, 0.068359375, 0.42626953125, 0.005451202392578125, 0.01016998291015625, 0.0611572265625, 1.2040138244628906e-05, 0.0015783309936523438, 0.06781005859375, 0.0013265609741210938, 2.0265579223632812e-06, 0.0009059906005859375, 0.794921875, 0.08160400390625, 0.02099609375, 0.0011539459228515625, 0.00258636474609375, 1.9775390625, 0.05084228515625, 0.00044798851013183594, 0.032012939453125, 3.898143768310547e-05, 0.00023424625396728516, 0.007732391357421875, 0.0015964508056640625, 0.006580352783203125, 6.437301635742188e-05, 9.131431579589844e-05, 0.0039825439453125, 0.0011119842529296875, 0.0099639892578125, 0.0048980712890625, 0.00041365623474121094, 0.00072479248046875, 0.0004169940948486328, 0.301025390625, 0.56005859375, 0.004367828369140625, 1.451171875, 1.423828125, 0.261962890625, 0.0023040771484375, 1.7978515625, 0.361328125, 0.0223388671875, 0.028106689453125, 0.06658935546875, 0.03594970703125, 0.486328125, 1.060546875], "tokens": [715, 638, 669, 26, 282, 966, 32, 13049, 27732, 26, 85, 331, 3149, 103, 27, 1378, 638, 20123, 26, 2476, 6496, 26, 4315, 1287, 26, 9582, 30, 225, 35, 30, 8742, 471, 4180, 2099, 966, 32, 16547, 25572, 324, 320, 324, 15534, 53, 280, 622, 26244, 11008, 26, 53, 293, 324, 415]}
