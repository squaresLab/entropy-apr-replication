{"line_number": 713, "line_type": "original", "code": "        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));", "entropy": 1.55859375, "is_bug_line": true, "sus_score": 0.7466042041778564, "per_token_entropy": [2.765625, 5.86328125, 3.439453125, 0.0855712890625, 1.388671875, 2.375, 0.162841796875, 0.08056640625, 0.04443359375, 5.22265625, 3.849609375, 0.01056671142578125, 0.1973876953125, 0.62939453125, 4.08984375, 0.646484375, 4.3046875, 0.07415771484375, 0.01428985595703125, 0.3955078125, 0.0703125, 0.0750732421875, 0.052520751953125], "tokens": [351, 629, 456, 4072, 280, 4175, 32, 3596, 26, 8829, 2185, 2140, 26, 83, 517, 43422, 26, 83, 30, 323, 471, 323, 876]}
{"line_number": 713, "line_type": "generated", "code": "\n     */\n    public static long mulAndCheck(long a, long b) {\n        long result = a * b;\n        if (result < Long.MIN_VALUE || result > Long.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow", "entropy": 0.0943603515625, "is_bug_line": true, "sus_score": 0.7466042041778564, "per_token_entropy": [0.6220703125, 0.2822265625, 0.04437255859375, 0.0214080810546875, 0.0009517669677734375, 0.0038471221923828125, 0.0015401840209960938, 0.0256805419921875, 8.90493392944336e-05, 0.0003142356872558594, 0.06842041015625, 0.0025806427001953125, 0.0012865066528320312, 0.00238800048828125, 7.545948028564453e-05, 0.0018529891967773438, 0.0263214111328125, 0.1519775390625, 0.157958984375, 1.2626953125, 0.0041351318359375, 0.00624847412109375, 0.0171966552734375, 0.0008234977722167969, 0.005367279052734375, 0.1016845703125, 0.3037109375, 0.218505859375, 0.25830078125, 0.180419921875, 0.8740234375, 0.0013990402221679688, 1.2993812561035156e-05, 4.673004150390625e-05, 5.519390106201172e-05, 0.0027904510498046875, 0.003055572509765625, 0.0011529922485351562, 0.007282257080078125, 0.0002646446228027344, 8.606910705566406e-05, 1.9669532775878906e-05, 7.3909759521484375e-06, 0.0172882080078125, 0.01111602783203125, 0.04632568359375, 0.029022216796875, 0.0023345947265625, 0.0008716583251953125, 0.00030493736267089844, 0.0106964111328125, 0.122314453125], "tokens": [275, 569, 284, 562, 907, 1946, 17476, 2185, 2140, 26, 3222, 312, 30, 1946, 323, 27, 301, 291, 1946, 1056, 280, 312, 319, 323, 45, 291, 415, 308, 1267, 333, 6359, 32, 4683, 81, 5975, 1276, 1056, 848, 6359, 32, 3459, 81, 5975, 27, 301, 324, 1422, 537, 47721, 984, 440, 9642]}
{"line_number": 710, "line_type": "original", "code": "        if (a==0 || b==0){", "entropy": 1.19921875, "is_bug_line": false, "sus_score": 0.7342032194137573, "per_token_entropy": [2.55859375, 1.884765625, 0.247314453125, 1.2197265625, 1.9541015625, 0.56884765625, 0.77294921875, 0.0291595458984375, 0.054534912109375, 0.0041656494140625, 3.896484375], "tokens": [351, 415, 308, 83, 379, 34, 1276, 323, 379, 34, 1511]}
{"line_number": 710, "line_type": "generated", "code": "\n        return 0;\n    }\n\n    /**\n     * <p>\n     * Returns the greatest common divisor of the absolute value of two numbers,\n     * using the Euclidean algorithm.\n     * </p>\n     * \n     * @param x the first value", "entropy": 0.2509765625, "is_bug_line": false, "sus_score": 0.7342032194137573, "per_token_entropy": [1.5859375, 0.6513671875, 0.4736328125, 0.0287933349609375, 0.2115478515625, 0.1959228515625, 0.0227508544921875, 0.88427734375, 0.10638427734375, 0.11883544921875, 0.0004715919494628906, 1.369140625, 0.00775146484375, 0.0049896240234375, 0.2254638671875, 0.0002071857452392578, 0.39599609375, 0.134521484375, 1.615234375, 0.0165557861328125, 0.004055023193359375, 0.299560546875, 0.1817626953125, 0.058349609375, 0.02618408203125, 0.00018835067749023438, 0.07135009765625, 0.2449951171875, 0.0968017578125, 0.0007987022399902344, 5.543231964111328e-05, 0.01154327392578125, 0.0207672119140625, 1.43359375, 0.2437744140625, 0.004940032958984375, 0.00760650634765625, 0.31640625, 0.00036144256591796875, 0.009002685546875, 3.5881996154785156e-05, 0.002407073974609375, 0.002960205078125, 9.691715240478516e-05, 0.76416015625, 5.710124969482422e-05, 0.0977783203125, 0.0066070556640625, 0.2440185546875, 0.27978515625, 0.046875, 0.51806640625], "tokens": [291, 442, 225, 34, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 3759, 322, 48299, 4942, 33482, 432, 322, 7976, 786, 432, 3134, 7515, 30, 275, 319, 1471, 322, 516, 34986, 8218, 32, 275, 319, 576, 98, 48, 275, 319, 5384, 319, 477, 753, 816, 322, 1932, 786]}
{"line_number": 714, "line_type": "original", "code": "        return lcm;", "entropy": 3.029296875, "is_bug_line": true, "sus_score": 0.714484691619873, "per_token_entropy": [5.01953125, 1.908203125, 4.7109375, 0.806640625, 2.701171875], "tokens": [351, 442, 456, 4072, 45]}
{"line_number": 714, "line_type": "generated", "code": "\n     */\n    public static long mulAndCheck(long a, long b) {\n        long m = a * b;\n        if (m < Long.MIN_VALUE || m > Long.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow", "entropy": 0.06793212890625, "is_bug_line": true, "sus_score": 0.714484691619873, "per_token_entropy": [1.4248046875, 0.06256103515625, 0.0489501953125, 0.0217132568359375, 0.0006737709045410156, 0.00365447998046875, 0.0016622543334960938, 0.0160980224609375, 0.0001239776611328125, 0.0002467632293701172, 0.036865234375, 0.0016813278198242188, 0.0010738372802734375, 0.0016145706176757812, 3.731250762939453e-05, 0.0015287399291992188, 0.0146026611328125, 0.056427001953125, 0.2291259765625, 1.2705078125, 0.0020694732666015625, 0.0196075439453125, 0.00849151611328125, 0.00040030479431152344, 0.0020618438720703125, 0.0177154541015625, 0.01751708984375, 0.0101470947265625, 0.0191192626953125, 0.09698486328125, 0.035736083984375, 0.00029754638671875, 9.5367431640625e-07, 8.58306884765625e-06, 2.372264862060547e-05, 0.0013666152954101562, 0.00632476806640625, 0.0003113746643066406, 0.006805419921875, 9.417533874511719e-05, 7.295608520507812e-05, 6.67572021484375e-06, 7.987022399902344e-06, 0.00531768798828125, 0.00600433349609375, 0.0207977294921875, 0.01207733154296875, 0.0010385513305664062, 0.0007572174072265625, 7.271766662597656e-05, 0.0034999847412109375, 0.04437255859375], "tokens": [275, 569, 284, 562, 907, 1946, 17476, 2185, 2140, 26, 3222, 312, 30, 1946, 323, 27, 301, 291, 1946, 345, 280, 312, 319, 323, 45, 291, 415, 308, 95, 333, 6359, 32, 4683, 81, 5975, 1276, 345, 848, 6359, 32, 3459, 81, 5975, 27, 301, 324, 1422, 537, 47721, 984, 440, 9642]}
{"line_number": 711, "line_type": "original", "code": "            return 0;", "entropy": 3.029296875, "is_bug_line": false, "sus_score": 0.6965466141700745, "per_token_entropy": [6.1171875, 4.234375, 3.87890625, 0.271484375, 0.64794921875], "tokens": [1468, 442, 225, 34, 45]}
{"line_number": 711, "line_type": "generated", "code": "\n     * @throws ArithmeticException if the result can not be represented as a long\n     */\n    public static long mulAndCheck(long a, long b) {\n        long ret = a * b;\n        if (ret / b!= a) {\n           ", "entropy": 0.17041015625, "is_bug_line": false, "sus_score": 0.6965466141700745, "per_token_entropy": [0.6240234375, 0.57861328125, 0.01073455810546875, 0.168212890625, 0.0011529922485351562, 5.233287811279297e-05, 0.09246826171875, 0.0003705024719238281, 0.00412750244140625, 0.06396484375, 0.0017032623291015625, 0.0019092559814453125, 0.002155303955078125, 0.00232696533203125, 0.258544921875, 0.468017578125, 0.1109619140625, 1.3955078125, 0.01824951171875, 0.03167724609375, 0.000782012939453125, 0.0041961669921875, 0.0024509429931640625, 0.032196044921875, 0.00014638900756835938, 0.00035500526428222656, 0.03131103515625, 0.0012788772583007812, 0.0009675025939941406, 0.0016231536865234375, 3.504753112792969e-05, 0.002368927001953125, 0.0185699462890625, 0.0950927734375, 0.1954345703125, 1.525390625, 0.09576416015625, 0.004535675048828125, 0.0158538818359375, 0.0006852149963378906, 0.0037841796875, 0.03680419921875, 0.41943359375, 0.36474609375, 0.2357177734375, 0.9384765625, 0.77392578125, 0.001556396484375, 0.0003085136413574219, 0.050079345703125, 0.0263214111328125, 0.14501953125], "tokens": [275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646, 526, 17718, 619, 312, 1946, 275, 569, 284, 562, 907, 1946, 17476, 2185, 2140, 26, 3222, 312, 30, 1946, 323, 27, 301, 291, 1946, 2152, 280, 312, 319, 323, 45, 291, 415, 308, 2094, 517, 323, 863, 312, 27, 301, 324]}
{"line_number": 749, "line_type": "original", "code": "        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {", "entropy": 0.97900390625, "is_bug_line": false, "sus_score": 0.69472336769104, "per_token_entropy": [5.88671875, 2.732421875, 0.1932373046875, 6.88671875, 3.03125, 0.5927734375, 0.002101898193359375, 0.00878143310546875, 2.2649765014648438e-05, 0.0005726814270019531, 0.059661865234375, 0.02288818359375, 0.0028285980224609375, 0.006641387939453125, 0.0007753372192382812, 0.00033092498779296875, 7.212162017822266e-05, 0.00012922286987304688, 0.06396484375, 0.0816650390625], "tokens": [351, 415, 308, 95, 333, 4401, 32, 4683, 81, 5975, 1276, 345, 848, 4401, 32, 3459, 81, 5975, 27, 301]}
{"line_number": 749, "line_type": "generated", "code": "\n                } else {\n                    throw new ArithmeticException(msg);\n                }\n            } else {\n                // assert a == 0\n                ret = 0;\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Returns the next order of magnitude.", "entropy": 0.220703125, "is_bug_line": false, "sus_score": 0.69472336769104, "per_token_entropy": [0.53662109375, 0.0689697265625, 0.03179931640625, 0.03668212890625, 0.059051513671875, 0.045074462890625, 0.00021159648895263672, 0.0016241073608398438, 8.344650268554688e-06, 0.01568603515625, 0.00018024444580078125, 0.0006947517395019531, 0.07501220703125, 0.0006847381591796875, 0.07659912109375, 0.0012826919555664062, 0.0167083740234375, 0.03436279296875, 0.10858154296875, 0.0931396484375, 0.116455078125, 0.027587890625, 0.0182952880859375, 0.006076812744140625, 5.0067901611328125e-06, 0.040130615234375, 0.1246337890625, 0.0007696151733398438, 0.00279998779296875, 1.3828277587890625e-05, 0.00508880615234375, 0.329345703125, 0.0009493827819824219, 0.0709228515625, 0.0010089874267578125, 0.119873046875, 0.0301971435546875, 0.002880096435546875, 0.0006175041198730469, 0.0374755859375, 0.0011234283447265625, 0.386474609375, 0.052734375, 0.1676025390625, 0.00019252300262451172, 1.359375, 0.18701171875, 3.763671875, 1.3798828125, 0.5908203125, 0.06256103515625, 1.3837890625], "tokens": [400, 320, 813, 301, 528, 1422, 537, 47721, 984, 26, 2076, 293, 400, 320, 324, 320, 813, 301, 400, 434, 1201, 312, 610, 225, 34, 400, 2152, 280, 225, 34, 45, 324, 320, 291, 320, 291, 442, 2152, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 2354, 2532, 432, 28033, 32]}
{"line_number": 562, "line_type": "original", "code": "            k++; // cast out twos.", "entropy": 5.9375, "is_bug_line": false, "sus_score": 0.6665274500846863, "per_token_entropy": [6.6640625, 9.5390625, 7.703125, 3.98828125, 10.8828125, 0.129150390625, 9.7109375, 2.5033950805664062e-06, 4.8046875], "tokens": [1468, 831, 3334, 434, 9936, 963, 8206, 500, 32]}
{"line_number": 562, "line_type": "generated", "code": "\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++) {\n            long bits = Double.doubleToLongBits(value", "entropy": 0.0931396484375, "is_bug_line": false, "sus_score": 0.6665274500846863, "per_token_entropy": [0.55859375, 0.7822265625, 0.007648468017578125, 0.004390716552734375, 0.01171112060546875, 0.00122833251953125, 0.00704193115234375, 0.00905609130859375, 0.0257110595703125, 0.0032558441162109375, 0.0025882720947265625, 0.0010004043579101562, 0.0004482269287109375, 0.005390167236328125, 0.0004019737243652344, 0.236328125, 0.2366943359375, 0.272705078125, 0.002010345458984375, 0.014068603515625, 0.109130859375, 0.033294677734375, 0.00943756103515625, 0.083251953125, 0.002338409423828125, 0.2130126953125, 0.01485443115234375, 0.006412506103515625, 0.145263671875, 0.0013332366943359375, 0.166015625, 0.0001888275146484375, 0.005580902099609375, 0.0174713134765625, 0.0003409385681152344, 0.001201629638671875, 0.06768798828125, 0.2386474609375, 0.002361297607421875, 0.00112152099609375, 0.07403564453125, 0.95703125, 0.246337890625, 0.0013189315795898438, 0.194091796875, 0.0011539459228515625, 8.237361907958984e-05, 5.7220458984375e-05, 0.0555419921875, 6.008148193359375e-05, 0.00323486328125, 0.00972747802734375], "tokens": [291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987, 301, 324, 1946, 7030, 280, 6934, 32, 2627, 705, 3952, 8733, 26, 853]}
{"line_number": 560, "line_type": "original", "code": "            u /= 2;", "entropy": 4.015625, "is_bug_line": false, "sus_score": 0.6512259244918823, "per_token_entropy": [7.5859375, 8.15625, 7.19140625, 0.321533203125, 0.7041015625, 0.1419677734375], "tokens": [1468, 1044, 14374, 225, 36, 45]}
{"line_number": 560, "line_type": "generated", "code": "\n     */\n    public static int hash(final double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i", "entropy": 0.08172607421875, "is_bug_line": false, "sus_score": 0.6512259244918823, "per_token_entropy": [0.5146484375, 0.0180816650390625, 0.027862548828125, 0.00948333740234375, 0.0006041526794433594, 0.0017404556274414062, 0.1260986328125, 0.0018262863159179688, 0.7763671875, 0.010833740234375, 0.308837890625, 0.08612060546875, 0.0021190643310546875, 0.002956390380859375, 0.0560302734375, 0.1639404296875, 0.005035400390625, 0.0026187896728515625, 0.005069732666015625, 0.0007786750793457031, 0.004344940185546875, 0.006198883056640625, 0.020782470703125, 0.00568389892578125, 0.002468109130859375, 0.00119781494140625, 0.00037789344787597656, 0.006114959716796875, 0.0001596212387084961, 0.286865234375, 0.318603515625, 0.214599609375, 0.003448486328125, 0.00757598876953125, 0.13818359375, 0.0222320556640625, 0.0090484619140625, 0.1048583984375, 0.0016775131225585938, 0.419189453125, 0.00965118408203125, 0.006267547607421875, 0.1470947265625, 0.0019063949584960938, 0.2142333984375, 0.00020611286163330078, 0.002346038818359375, 0.004558563232421875, 0.0003204345703125, 0.0009403228759765625, 0.0467529296875, 0.1217041015625], "tokens": [275, 569, 284, 562, 907, 629, 3677, 26, 3220, 2064, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595]}
{"line_number": 561, "line_type": "original", "code": "            v /= 2;", "entropy": 4.15234375, "is_bug_line": false, "sus_score": 0.6453644633293152, "per_token_entropy": [9.0546875, 8.3203125, 7.21484375, 0.1815185546875, 0.06280517578125, 0.06591796875], "tokens": [1468, 354, 14374, 225, 36, 45]}
{"line_number": 561, "line_type": "generated", "code": "\n    public static int hash(double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < value.length; i++) {\n           ", "entropy": 0.07281494140625, "is_bug_line": false, "sus_score": 0.6453644633293152, "per_token_entropy": [0.16162109375, 0.05914306640625, 0.0010938644409179688, 0.0028820037841796875, 0.274658203125, 0.004791259765625, 0.77099609375, 0.293701171875, 0.06829833984375, 0.00685882568359375, 0.00628662109375, 0.06634521484375, 0.197265625, 0.0050506591796875, 0.002105712890625, 0.005458831787109375, 0.0009794235229492188, 0.004978179931640625, 0.01056671142578125, 0.01702880859375, 0.00315093994140625, 0.0015611648559570312, 0.0006837844848632812, 0.0003452301025390625, 0.005084991455078125, 0.00026297569274902344, 0.41259765625, 0.2110595703125, 0.22216796875, 0.002628326416015625, 0.00835418701171875, 0.11737060546875, 0.029998779296875, 0.007289886474609375, 0.051300048828125, 0.002132415771484375, 0.2607421875, 0.012054443359375, 0.005649566650390625, 0.04962158203125, 0.0009098052978515625, 0.170654296875, 0.00016689300537109375, 0.00806427001953125, 0.0020465850830078125, 0.0001533031463623047, 0.0009298324584960938, 0.045257568359375, 0.149169921875, 0.0011577606201171875, 0.0012969970703125, 0.0426025390625], "tokens": [284, 562, 907, 629, 3677, 26, 2627, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 786, 32, 1322, 45, 595, 1987, 301, 324]}
{"line_number": 578, "line_type": "original", "code": "                t /= 2; // cast out twos", "entropy": 4.31640625, "is_bug_line": false, "sus_score": 0.6319649815559387, "per_token_entropy": [9.9296875, 13.703125, 14.25, 0.48876953125, 0.11907958984375, 0.95751953125, 3.544921875, 3.572265625, 0.013519287109375, 0.93359375, 2.956390380859375e-05], "tokens": [2071, 273, 14374, 225, 36, 45, 434, 9936, 963, 8206, 500]}
{"line_number": 578, "line_type": "generated", "code": "\n     * -1.0 if x < 0.\n     * \n     * @param x the value, a double\n     * @return +1.0 or -1.0, depending on the sign of x\n     */\n    public static double indicator(", "entropy": 0.06298828125, "is_bug_line": false, "sus_score": 0.6319649815559387, "per_token_entropy": [1.6328125, 0.00717926025390625, 0.0675048828125, 0.0015764236450195312, 0.003871917724609375, 0.00010943412780761719, 0.023162841796875, 0.0017232894897460938, 0.010589599609375, 0.0017452239990234375, 0.0002453327178955078, 0.040069580078125, 0.319580078125, 0.0002071857452392578, 0.031768798828125, 0.00014853477478027344, 0.0181427001953125, 0.001522064208984375, 0.004032135009765625, 0.047821044921875, 0.00843048095703125, 0.2149658203125, 0.005828857421875, 0.095947265625, 0.3330078125, 9.381771087646484e-05, 0.00046181678771972656, 0.0008893013000488281, 0.12030029296875, 0.0031490325927734375, 0.003963470458984375, 0.00262451171875, 0.068603515625, 0.0009918212890625, 0.00036144256591796875, 0.00174713134765625, 0.0001888275146484375, 0.07293701171875, 0.0010204315185546875, 0.0006928443908691406, 0.0032863616943359375, 0.0003733634948730469, 0.0005865097045898438, 0.0034236907958984375, 0.00812530517578125, 0.07672119140625, 0.009918212890625, 0.0030040740966796875, 0.0002117156982421875, 0.0169525146484375, 0.0022068023681640625, 0.001430511474609375], "tokens": [275, 319, 429, 35, 32, 34, 415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 2064, 275, 319, 477, 601, 474, 35, 32, 34, 556, 429, 35, 32, 34, 30, 14714, 544, 322, 2596, 432, 816, 275, 569, 284, 562, 907, 2064, 18384, 26]}
{"line_number": 543, "line_type": "original", "code": "            return (Math.abs(u) + Math.abs(v));", "entropy": 1.76953125, "is_bug_line": true, "sus_score": 0.5797553062438965, "per_token_entropy": [7.921875, 1.8125, 2.921875, 4.14453125, 0.276611328125, 0.0859375, 0.0110931396484375, 1.3349609375, 0.0382080078125, 3.033203125, 5.61328125, 0.008697509765625, 6.031990051269531e-05, 0.0001251697540283203, 0.0007109642028808594, 1.1044921875], "tokens": [1468, 442, 308, 5717, 32, 3596, 26, 103, 27, 474, 4175, 32, 3596, 26, 104, 876]}
{"line_number": 543, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": true, "sus_score": 0.5797553062438965, "per_token_entropy": [], "tokens": []}
{"line_number": 752, "line_type": "original", "code": "        return (int)m;", "entropy": 2.896484375, "is_bug_line": false, "sus_score": 0.5792962312698364, "per_token_entropy": [4.2109375, 4.80859375, 5.8515625, 1.0869140625, 0.10638427734375, 4.1640625, 0.051177978515625], "tokens": [351, 442, 308, 410, 27, 95, 45]}
{"line_number": 752, "line_type": "generated", "code": "\n            } else {\n                // assert a == 0\n                ret = 0;\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Returns the greatest common divisor of the absolute value of two numbers.\n     * \n     * @param x a", "entropy": 0.2052001953125, "is_bug_line": false, "sus_score": 0.5792962312698364, "per_token_entropy": [0.33447265625, 0.01062774658203125, 0.1597900390625, 0.049652099609375, 0.10357666015625, 0.1346435546875, 0.18798828125, 0.037567138671875, 0.039764404296875, 0.007389068603515625, 6.4373016357421875e-06, 0.043609619140625, 0.07574462890625, 0.0007863044738769531, 0.00293731689453125, 1.621246337890625e-05, 0.0081024169921875, 0.0904541015625, 0.0007572174072265625, 0.0899658203125, 0.000850677490234375, 0.1787109375, 0.030548095703125, 0.0012388229370117188, 0.0009369850158691406, 0.07012939453125, 0.0013494491577148438, 0.53955078125, 0.07366943359375, 0.171630859375, 0.00028896331787109375, 1.31640625, 0.178466796875, 2.251953125, 0.04315185546875, 0.0156402587890625, 0.178955078125, 0.11553955078125, 0.2327880859375, 0.0291290283203125, 0.001110076904296875, 0.66650390625, 0.91162109375, 0.183837890625, 0.07513427734375, 0.0022907257080078125, 1.09375, 9.012222290039062e-05, 0.042724609375, 0.00728607177734375, 0.313720703125, 0.5634765625], "tokens": [324, 320, 813, 301, 400, 434, 1201, 312, 610, 225, 34, 400, 2152, 280, 225, 34, 45, 324, 320, 291, 320, 291, 442, 2152, 45, 284, 320, 446, 1022, 275, 319, 3759, 322, 48299, 4942, 33482, 432, 322, 7976, 786, 432, 3134, 7515, 32, 275, 319, 5384, 319, 477, 753, 816, 312]}
{"line_number": 558, "line_type": "original", "code": "        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are", "entropy": 1.1474609375, "is_bug_line": false, "sus_score": 0.5780388712882996, "per_token_entropy": [2.498046875, 7.50390625, 2.5703125, 7.48828125, 0.47021484375, 0.0914306640625, 0.05029296875, 0.03167724609375, 0.00493621826171875, 0.005321502685546875, 0.005367279052734375, 3.08984375, 2.39453125, 0.1673583984375, 0.0108184814453125, 0.0020198822021484375, 0.00197601318359375, 0.0097503662109375, 0.00177764892578125, 0.0041656494140625, 0.0012264251708984375, 1.9609375, 2.09765625, 0.75341796875, 1.64453125, 0.5048828125, 0.349853515625, 0.10479736328125, 0.1650390625, 2.91015625, 1.3291015625, 1.6220703125, 0.1265869140625, 0.0163116455078125, 0.181640625], "tokens": [351, 2218, 1833, 103, 549, 225, 35, 27, 610, 225, 34, 962, 308, 104, 549, 225, 35, 27, 610, 225, 34, 962, 831, 333, 225, 37, 35, 27, 301, 434, 2218, 1044, 461, 354, 884]}
{"line_number": 558, "line_type": "generated", "code": "\n     * @return the hash code\n     */\n    public static int hash(double[] value) {\n        if (value == null) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i", "entropy": 0.09027099609375, "is_bug_line": false, "sus_score": 0.5780388712882996, "per_token_entropy": [0.84423828125, 0.326904296875, 0.0537109375, 0.00788116455078125, 0.0025463104248046875, 0.0006785392761230469, 0.00039696693420410156, 0.11834716796875, 0.1934814453125, 0.028289794921875, 0.00946044921875, 0.000705718994140625, 0.0025577545166015625, 0.034637451171875, 0.0042724609375, 0.576171875, 0.205322265625, 0.044891357421875, 0.005970001220703125, 0.0045928955078125, 0.069091796875, 0.1719970703125, 0.009613037109375, 0.003116607666015625, 0.007381439208984375, 0.0008707046508789062, 0.005889892578125, 0.011505126953125, 0.0237274169921875, 0.007244110107421875, 0.004039764404296875, 0.0017414093017578125, 0.0005536079406738281, 0.007724761962890625, 0.0013952255249023438, 0.371826171875, 0.314208984375, 0.273681640625, 0.0031280517578125, 0.0188446044921875, 0.1529541015625, 0.012664794921875, 0.0169830322265625, 0.06317138671875, 0.00231170654296875, 0.377685546875, 0.01258087158203125, 0.01244354248046875, 0.1392822265625, 0.0024471282958984375, 0.131103515625, 0.00023758411407470703], "tokens": [275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 2627, 1178, 786, 27, 301, 291, 415, 308, 853, 610, 744, 27, 301, 324, 442, 225, 34, 45, 291, 320, 291, 629, 1056, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595]}
{"line_number": 748, "line_type": "original", "code": "        long m = ((long)x) * ((long)y);", "entropy": 1.462890625, "is_bug_line": false, "sus_score": 0.5771613121032715, "per_token_entropy": [6.16796875, 4.80078125, 0.69775390625, 0.0697021484375, 5.37109375, 0.2626953125, 0.0149383544921875, 3.16015625, 0.283203125, 0.04608154296875, 1.0234375, 0.0025920867919921875, 0.0010833740234375, 0.019134521484375, 0.0215911865234375], "tokens": [351, 1946, 345, 280, 1833, 3222, 27, 106, 27, 319, 1833, 3222, 27, 107, 293]}
{"line_number": 748, "line_type": "generated", "code": "\n                    ret = a * b;\n                } else {\n                    throw new ArithmeticException(msg);\n                }\n            } else {\n                // assert a == 0\n                ret = 0;\n            }\n        }\n        return ret;\n    }\n\n    /**\n     *", "entropy": 0.0469970703125, "is_bug_line": false, "sus_score": 0.5771613121032715, "per_token_entropy": [0.13037109375, 0.045623779296875, 0.00403594970703125, 0.0090179443359375, 0.01479339599609375, 0.0006079673767089844, 0.00455474853515625, 0.109619140625, 0.001773834228515625, 0.00812530517578125, 0.01316070556640625, 0.0281829833984375, 0.022979736328125, 0.00023508071899414062, 0.0016317367553710938, 2.7418136596679688e-05, 0.00858306884765625, 0.0002065896987915039, 0.00047516822814941406, 0.046722412109375, 0.0006990432739257812, 0.08807373046875, 0.0004856586456298828, 0.0109100341796875, 0.03582763671875, 0.16943359375, 0.1107177734375, 0.1649169921875, 0.0269775390625, 0.01751708984375, 0.007404327392578125, 5.125999450683594e-06, 0.045166015625, 0.1513671875, 0.0010585784912109375, 0.0031452178955078125, 1.5974044799804688e-05, 0.00701141357421875, 0.0682373046875, 0.00226593017578125, 0.0455322265625, 0.0003974437713623047, 0.131103515625, 0.0665283203125, 0.0074615478515625, 0.0007562637329101562, 0.038177490234375, 0.0011663436889648438, 0.57177734375, 0.07928466796875, 0.1385498046875, 0.0002092123031616211], "tokens": [528, 2152, 280, 312, 319, 323, 45, 400, 320, 813, 301, 528, 1422, 537, 47721, 984, 26, 2076, 293, 400, 320, 324, 320, 813, 301, 400, 434, 1201, 312, 610, 225, 34, 400, 2152, 280, 225, 34, 45, 324, 320, 291, 320, 291, 442, 2152, 45, 284, 320, 446, 1022, 275, 319]}
{"line_number": 577, "line_type": "original", "code": "            while ((t & 1) == 0) { // while t is even..", "entropy": 1.84375, "is_bug_line": false, "sus_score": 0.568212628364563, "per_token_entropy": [7.0625, 10.703125, 2.115234375, 5.26171875, 1.19140625, 0.47802734375, 0.59130859375, 0.0960693359375, 0.0168914794921875, 0.01459503173828125, 0.003147125244140625, 0.289306640625, 0.156982421875, 2.529296875, 2.06640625, 0.65771484375, 0.00390625, 0.03216552734375, 1.76953125], "tokens": [1468, 2218, 1833, 102, 549, 225, 35, 27, 610, 225, 34, 27, 301, 434, 2218, 273, 438, 4444, 497]}
{"line_number": 577, "line_type": "generated", "code": "\n     * For a char value x, this method returns (char)(+1) if x >= 0 and\n     * (char)(-1) if x < 0.\n     * \n     * @param x the value, a char\n     * @", "entropy": 0.048126220703125, "is_bug_line": false, "sus_score": 0.568212628364563, "per_token_entropy": [0.489501953125, 0.051727294921875, 0.305419921875, 0.1484375, 1.0556640625, 0.0029296875, 0.0032291412353515625, 0.0008988380432128906, 0.003810882568359375, 0.00040793418884277344, 0.0007367134094238281, 0.06768798828125, 0.148681640625, 0.0093536376953125, 0.0007529258728027344, 8.678436279296875e-05, 0.0006818771362304688, 0.00046753883361816406, 0.005146026611328125, 0.004329681396484375, 0.00371551513671875, 0.00048732757568359375, 0.003612518310546875, 0.0133209228515625, 5.984306335449219e-05, 0.0017576217651367188, 0.0142669677734375, 0.00014126300811767578, 0.0003445148468017578, 4.398822784423828e-05, 9.572505950927734e-05, 0.0001233816146850586, 0.0004665851593017578, 0.0005459785461425781, 0.00019824504852294922, 0.00017452239990234375, 0.00482177734375, 0.051422119140625, 0.0025424957275390625, 0.032012939453125, 3.409385681152344e-05, 0.003582000732421875, 0.001102447509765625, 0.0022792816162109375, 0.0126495361328125, 0.00040841102600097656, 0.004108428955078125, 0.0013265609741210938, 0.04351806640625, 0.0018682479858398438, 4.8279762268066406e-05, 0.00018131732940673828], "tokens": [275, 319, 2616, 312, 1351, 786, 816, 30, 458, 1411, 3217, 308, 1594, 2502, 29, 35, 27, 415, 816, 2377, 225, 34, 461, 275, 319, 308, 1594, 2502, 31, 35, 27, 415, 816, 333, 225, 34, 32, 275, 319, 5384, 319, 477, 753, 816, 322, 786, 30, 312, 1351, 275, 319, 477]}
{"line_number": 557, "line_type": "original", "code": "        int k = 0;", "entropy": 2.328125, "is_bug_line": false, "sus_score": 0.5666300654411316, "per_token_entropy": [4.640625, 3.8203125, 7.140625, 0.1927490234375, 0.378662109375, 0.0443115234375, 0.08209228515625], "tokens": [351, 629, 831, 280, 225, 34, 45]}
{"line_number": 557, "line_type": "generated", "code": "\n     * @param array the array to be hashed\n     * @return the hash code\n     */\n    public static int hash(double[] array) {\n        int hash = 1;\n        for (int i = 0; i < array.length;", "entropy": 0.1309814453125, "is_bug_line": false, "sus_score": 0.5666300654411316, "per_token_entropy": [0.27880859375, 0.05517578125, 1.1533203125, 0.007503509521484375, 0.927734375, 0.021697998046875, 0.0106201171875, 0.0016222000122070312, 0.0176239013671875, 0.00026607513427734375, 0.0081634521484375, 0.00012814998626708984, 0.0007352828979492188, 0.007244110107421875, 0.0013856887817382812, 0.0036106109619140625, 0.0005221366882324219, 0.04132080078125, 0.29345703125, 0.01551055908203125, 0.00838470458984375, 0.0006666183471679688, 0.0030670166015625, 0.0762939453125, 0.0015134811401367188, 0.376953125, 0.8291015625, 0.0039520263671875, 0.007793426513671875, 0.002696990966796875, 0.041351318359375, 0.85888671875, 0.482666015625, 0.004665374755859375, 0.0684814453125, 0.293212890625, 0.05877685546875, 0.0274810791015625, 0.203857421875, 0.007099151611328125, 0.291748046875, 0.010040283203125, 0.01490020751953125, 0.09063720703125, 0.00521087646484375, 0.1195068359375, 0.0015096664428710938, 0.0107574462890625, 0.00421142578125, 0.00034689903259277344, 0.0011892318725585938, 0.060150146484375], "tokens": [275, 319, 477, 753, 1417, 322, 1417, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 2627, 1178, 1417, 27, 301, 291, 629, 3677, 280, 225, 35, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1417, 32, 1322, 45]}
{"line_number": 590, "line_type": "original", "code": "        } while (t != 0);", "entropy": 1.892578125, "is_bug_line": false, "sus_score": 0.564471423625946, "per_token_entropy": [6.6328125, 4.265625, 4.21484375, 0.11383056640625, 1.654296875, 0.038848876953125, 0.08428955078125, 0.0005960464477539062, 0.0199432373046875], "tokens": [351, 320, 2218, 308, 102, 863, 225, 34, 293]}
{"line_number": 590, "line_type": "generated", "code": "\n\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x\n     * < 0. Returns <code>NaN</code> if <code>x</code", "entropy": 0.061004638671875, "is_bug_line": false, "sus_score": 0.564471423625946, "per_token_entropy": [1.2880859375, 0.0277557373046875, 0.007358551025390625, 5.340576171875e-05, 0.11602783203125, 0.0909423828125, 0.07611083984375, 0.031097412109375, 0.0012083053588867188, 0.00035953521728515625, 0.002475738525390625, 0.000400543212890625, 0.0004024505615234375, 0.058746337890625, 0.0014896392822265625, 0.11505126953125, 0.00020968914031982422, 0.1065673828125, 0.0003750324249267578, 0.002788543701171875, 0.01499176025390625, 0.0012159347534179688, 3.4689903259277344e-05, 0.021881103515625, 0.09271240234375, 0.00012755393981933594, 0.0002351999282836914, 6.008148193359375e-05, 0.00495147705078125, 0.0088043212890625, 0.289306640625, 0.5029296875, 1.5139579772949219e-05, 0.0026912689208984375, 0.00045108795166015625, 5.352497100830078e-05, 0.00200653076171875, 0.249267578125, 0.011688232421875, 0.0036602020263671875, 8.726119995117188e-05, 0.01160430908203125, 0.0113677978515625, 3.147125244140625e-05, 0.0006618499755859375, 0.003765106201171875, 0.00806427001953125, 0.0001863241195678711, 0.0004780292510986328, 0.00037384033203125, 0.0003933906555175781, 8.654594421386719e-05], "tokens": [446, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 275, 319, 333, 225, 34, 32, 3759, 333, 687, 48, 11126, 377, 687, 48, 415, 333, 687, 48, 106, 377, 687]}
{"line_number": 571, "line_type": "original", "code": "        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;", "entropy": 2.603515625, "is_bug_line": false, "sus_score": 0.556797444820404, "per_token_entropy": [4.796875, 5.0546875, 5.515625, 0.1749267578125, 3.220703125, 9.65625, 2.71875, 0.912109375, 3.66015625, 0.927734375, 2.955078125, 0.05499267578125, 3.2421875, 0.42333984375, 0.06787109375, 6.515625, 0.1397705078125, 4.2421875, 1.5146484375, 0.69677734375, 0.028839111328125, 0.01100921630859375, 1.94140625, 6.3828125, 2.140625, 2.970703125, 0.316162109375], "tokens": [351, 629, 273, 280, 1833, 103, 549, 225, 35, 27, 610, 225, 35, 27, 1018, 354, 499, 25298, 103, 517, 225, 36, 27, 1109, 551, 37, 12822]}
{"line_number": 571, "line_type": "generated", "code": "\n     */\n    public static byte signum(final byte x) {\n        return (byte) (x >> 7 & 1 | (x >> 6 & 1) - 1);\n    }\n\n    /**\n     * For a short value x", "entropy": 0.216796875, "is_bug_line": false, "sus_score": 0.556797444820404, "per_token_entropy": [0.634765625, 0.2291259765625, 0.032470703125, 0.051239013671875, 0.0023250579833984375, 0.0212860107421875, 0.06695556640625, 0.352294921875, 0.01348876953125, 0.8642578125, 0.0052947998046875, 0.0028400421142578125, 0.0037288665771484375, 0.00849151611328125, 0.087890625, 0.290283203125, 0.1650390625, 0.273193359375, 0.03240966796875, 1.08203125, 0.446533203125, 0.1820068359375, 0.114013671875, 0.01080322265625, 1.4970703125, 0.05584716796875, 0.08074951171875, 1.0205078125, 0.9599609375, 0.0238189697265625, 0.830078125, 0.0030994415283203125, 0.034698486328125, 0.1243896484375, 0.0037708282470703125, 0.09844970703125, 0.003726959228515625, 0.2445068359375, 0.06640625, 0.0005621910095214844, 0.01035308837890625, 0.1763916015625, 0.0017919540405273438, 0.0555419921875, 0.003520965576171875, 0.008148193359375, 7.402896881103516e-05, 0.057861328125, 0.027984619140625, 0.91162109375, 0.001552581787109375, 0.0004260540008544922], "tokens": [275, 569, 284, 562, 907, 3432, 2596, 378, 26, 3220, 3432, 816, 27, 301, 291, 442, 308, 2263, 27, 308, 106, 3776, 225, 41, 549, 225, 35, 523, 308, 106, 3776, 225, 40, 549, 225, 35, 27, 429, 225, 35, 293, 284, 320, 446, 1022, 275, 319, 2616, 312, 4504, 786, 816]}
{"line_number": 542, "line_type": "original", "code": "        if ((u == 0) || (v == 0)) {", "entropy": 0.9609375, "is_bug_line": true, "sus_score": 0.5541630983352661, "per_token_entropy": [5.7734375, 3.314453125, 2.54296875, 0.654296875, 1.4189453125, 0.40673828125, 0.017059326171875, 0.10369873046875, 1.080078125, 0.00295257568359375, 0.0037689208984375, 0.002685546875, 0.0006918907165527344, 0.00016641616821289062, 0.0175323486328125, 0.031982421875], "tokens": [351, 415, 1833, 103, 610, 225, 34, 27, 1276, 308, 104, 610, 225, 34, 490, 301]}
{"line_number": 542, "line_type": "generated", "code": "\n    }\n\n    /**\n     * <p>\n     * Gets the greatest common divisor of an array of numbers, using the\n     * \"binary gcd\" method which avoids division and modulo operations. See\n     * Knuth 4.5.2 algorithm B.", "entropy": 0.073486328125, "is_bug_line": true, "sus_score": 0.5541630983352661, "per_token_entropy": [0.6015625, 0.07122802734375, 0.4375, 0.10009765625, 0.031402587890625, 0.00017189979553222656, 0.66943359375, 0.0022373199462890625, 0.0010833740234375, 0.036163330078125, 1.4901161193847656e-05, 0.65576171875, 0.0062408447265625, 0.1619873046875, 0.00034546852111816406, 0.0016279220581054688, 0.07550048828125, 0.347900390625, 0.0005269050598144531, 0.0003407001495361328, 0.11505126953125, 0.2083740234375, 0.0086669921875, 0.001983642578125, 0.1541748046875, 1.3232231140136719e-05, 0.004314422607421875, 0.0030422210693359375, 0.00039839744567871094, 0.00115203857421875, 0.0037708282470703125, 0.00476837158203125, 0.002643585205078125, 7.832050323486328e-05, 6.389617919921875e-05, 0.0004105567932128906, 0.01126861572265625, 0.0026035308837890625, 0.030670166015625, 0.061553955078125, 0.000759124755859375, 0.0010328292846679688, -0.0, 0.0016355514526367188, 5.9604644775390625e-06, 3.5762786865234375e-07, 1.1920928955078125e-06, 8.344650268554688e-07, 2.2649765014648438e-06, 0.00011730194091796875, 0.0004134178161621094, 0.0009016990661621094], "tokens": [284, 320, 446, 1022, 275, 319, 333, 98, 48, 275, 319, 7124, 322, 48299, 4942, 33482, 432, 600, 1417, 432, 7515, 30, 1471, 322, 275, 319, 313, 7003, 43422, 20, 1411, 1510, 43585, 20654, 461, 41647, 7373, 32, 2802, 275, 319, 44327, 860, 225, 38, 32, 39, 32, 36, 8218, 551, 32]}
{"line_number": 591, "line_type": "original", "code": "        return -u * (1 << k); // gcd is u*2^k", "entropy": 1.5947265625, "is_bug_line": false, "sus_score": 0.5513433218002319, "per_token_entropy": [6.6953125, 3.21875, 3.6953125, 1.2392578125, 2.689453125, 1.8115234375, 1.59765625, 0.91064453125, 0.459716796875, 0.09747314453125, 1.7509765625, 1.15625, 1.4814453125, 1.4970703125, 0.28662109375, 0.0009412765502929688, 0.00237274169921875, 0.1077880859375], "tokens": [351, 442, 429, 103, 319, 308, 35, 1264, 831, 293, 434, 43422, 438, 1044, 28, 36, 80, 93]}
{"line_number": 591, "line_type": "generated", "code": "\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x <\n     * 0. Returns <code>NaN</code> if <code>x</code", "entropy": 0.06573486328125, "is_bug_line": false, "sus_score": 0.5513433218002319, "per_token_entropy": [0.73779296875, 0.059967041015625, 0.0199432373046875, 7.152557373046875e-05, 0.322021484375, 0.1199951171875, 0.1378173828125, 0.0299224853515625, 0.0015392303466796875, 0.0004513263702392578, 0.002689361572265625, 0.0004532337188720703, 0.0005197525024414062, 0.06768798828125, 0.0017576217651367188, 0.10968017578125, 0.00022339820861816406, 0.13330078125, 0.0004119873046875, 0.0028400421142578125, 0.0175323486328125, 0.0013189315795898438, 4.184246063232422e-05, 0.024871826171875, 0.09564208984375, 0.00013899803161621094, 0.00023555755615234375, 5.817413330078125e-05, 0.005458831787109375, 0.00844573974609375, 0.2454833984375, 0.71533203125, 0.2327880859375, 1.239776611328125e-05, 0.0003490447998046875, 3.635883331298828e-05, 0.0020427703857421875, 0.257568359375, 0.018890380859375, 0.0036220550537109375, 9.608268737792969e-05, 0.01165771484375, 0.0107574462890625, 3.910064697265625e-05, 0.0007281303405761719, 0.003925323486328125, 0.01004791259765625, 0.00021708011627197266, 0.0006437301635742188, 0.0004096031188964844, 0.0005064010620117188, 2.968311309814453e-05], "tokens": [284, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 333, 275, 319, 225, 34, 32, 3759, 333, 687, 48, 11126, 377, 687, 48, 415, 333, 687, 48, 106, 377, 687]}
{"line_number": 587, "line_type": "original", "code": "            t = (v - u) / 2;", "entropy": 2.546875, "is_bug_line": false, "sus_score": 0.5505703091621399, "per_token_entropy": [6.2265625, 7.9296875, 0.1414794921875, 2.115234375, 5.21484375, 4.13671875, 3.07421875, 0.3251953125, 0.6689453125, 0.253173828125, 0.019622802734375, 0.464111328125], "tokens": [1468, 273, 280, 308, 104, 429, 1044, 27, 517, 225, 36, 45]}
{"line_number": 587, "line_type": "generated", "code": "\n        }\n        return (x >= ZD)? PD : ND;\n    }\n\n    /**\n     * For a float value x, this method returns +1.0f if x >= 0 and -1.0f if x\n     * < ", "entropy": 0.0633544921875, "is_bug_line": false, "sus_score": 0.5505703091621399, "per_token_entropy": [0.1033935546875, 0.046417236328125, 0.36669921875, 0.28271484375, 0.416748046875, 0.00792694091796875, 0.046905517578125, 0.55419921875, 0.06634521484375, 0.010955810546875, 0.00022971630096435547, 0.03900146484375, 0.0017786026000976562, 0.005321502685546875, 0.0008745193481445312, 0.0771484375, 0.00038552284240722656, 0.049224853515625, 0.0026493072509765625, 0.002414703369140625, 0.00022983551025390625, 0.0247650146484375, 0.041259765625, 0.0704345703125, 0.0347900390625, 0.0010213851928710938, 0.0003123283386230469, 0.0014925003051757812, 0.0004343986511230469, 0.00035071372985839844, 0.04058837890625, 0.00103759765625, 0.0821533203125, 0.0002448558807373047, 0.0787353515625, 0.0003914833068847656, 0.0025463104248046875, 0.007549285888671875, 0.0007996559143066406, 6.830692291259766e-05, 0.01265716552734375, 0.1011962890625, 0.00010943412780761719, 0.0002887248992919922, 6.580352783203125e-05, 0.00472259521484375, 0.00864410400390625, 0.3134765625, 0.380126953125, 1.3947486877441406e-05, 0.0022144317626953125, 0.0002980232238769531], "tokens": [291, 320, 291, 442, 308, 106, 2377, 2523, 54, 27, 1018, 30354, 499, 31500, 45, 284, 320, 446, 1022, 275, 319, 2616, 312, 1897, 786, 816, 30, 458, 1411, 3217, 474, 35, 32, 34, 88, 415, 816, 2377, 225, 34, 461, 429, 35, 32, 34, 88, 415, 816, 275, 319, 333, 225]}
{"line_number": 564, "line_type": "original", "code": "        if (k == 31) {", "entropy": 1.869140625, "is_bug_line": false, "sus_score": 0.5389451384544373, "per_token_entropy": [5.28125, 1.8076171875, 0.145263671875, 6.8203125, 0.9658203125, 0.2474365234375, 2.66015625, 0.446533203125, 0.239013671875, 0.06805419921875], "tokens": [351, 415, 308, 93, 610, 225, 37, 35, 27, 301]}
{"line_number": 564, "line_type": "generated", "code": "\n\n    /**\n     * Returns an integer hash code representing the given float value.\n     * \n     * @param value the value to be hashed\n     * @return the hash code\n     */\n    public static int hash(float value) {\n        return new Float(value", "entropy": 0.04229736328125, "is_bug_line": false, "sus_score": 0.5389451384544373, "per_token_entropy": [1.2451171875, 0.1571044921875, 0.01546478271484375, 0.00013327598571777344, 0.1776123046875, 0.14306640625, 0.01236724853515625, 0.0007886886596679688, 0.0001366138458251953, 0.00948333740234375, 0.0033721923828125, 0.0021209716796875, 0.2178955078125, 0.011444091796875, 0.0013427734375, 0.006092071533203125, 0.0002918243408203125, 0.0146636962890625, 1.0728836059570312e-05, 0.003345489501953125, 0.0005450248718261719, 0.0013895034790039062, 0.002567291259765625, 0.00046372413635253906, 0.00010657310485839844, 2.276897430419922e-05, 6.35385513305664e-05, 0.00569915771484375, 9.584426879882812e-05, 0.0003848075866699219, 0.000274658203125, 0.00043964385986328125, 0.0007386207580566406, 0.0003120899200439453, 0.002437591552734375, 0.056640625, 0.004032135009765625, 0.0009684562683105469, 0.00013589859008789062, 7.832050323486328e-05, 0.0032196044921875, 8.738040924072266e-05, 0.01027679443359375, 0.0008091926574707031, 0.0013303756713867188, 0.00023555755615234375, 0.0020885467529296875, 0.004627227783203125, 0.07720947265625, 0.0007228851318359375, 0.00020802021026611328, 0.0001220703125], "tokens": [446, 1022, 275, 319, 3759, 600, 4991, 3677, 1340, 12681, 322, 2702, 1897, 786, 32, 275, 319, 5384, 319, 477, 753, 786, 322, 786, 372, 526, 38425, 275, 319, 477, 601, 322, 3677, 1340, 275, 569, 284, 562, 907, 629, 3677, 26, 1808, 786, 27, 301, 291, 442, 537, 8174, 26, 853]}
