{"line_number": 193, "line_type": "original", "code": "                setResult(x1, i);", "entropy": 1.4326171875, "is_bug_line": false, "sus_score": 0.6099695563316345, "per_token_entropy": [6.9921875, 4.62890625, 0.07098388671875, 0.0169525146484375, 0.0235443115234375, 0.055145263671875, 0.99365234375, 0.049835205078125, 0.06158447265625], "tokens": [2071, 739, 1394, 26, 106, 35, 30, 595, 293]}
{"line_number": 193, "line_type": "generated", "code": "\n            i++;\n        }\n        throw new MaxIterationsExceededException();\n    }", "entropy": 0.26806640625, "is_bug_line": false, "sus_score": 0.6099695563316345, "per_token_entropy": [0.27685546875, 2.064453125, 0.1617431640625, 0.11444091796875, 0.0013170242309570312, 0.72265625, 0.15625, 0.00995635986328125, 0.0203704833984375, 0.0018186569213867188, 6.031990051269531e-05, 8.475780487060547e-05, 0.412109375, 0.07379150390625, 0.003437042236328125], "tokens": [324, 595, 3334, 291, 320, 291, 1422, 537, 7462, 31219, 28741, 984, 473, 284, 320]}
{"line_number": 138, "line_type": "original", "code": "        if (sign >= 0) {", "entropy": 1.91015625, "is_bug_line": true, "sus_score": 0.565337061882019, "per_token_entropy": [4.94921875, 3.9453125, 0.1246337890625, 3.6953125, 4.171875, 0.00255584716796875, 0.0032501220703125, 0.2384033203125, 0.0589599609375], "tokens": [351, 415, 308, 1333, 2377, 225, 34, 27, 301]}
{"line_number": 138, "line_type": "generated", "code": "\n            }\n\n            // compute the new approximation\n            double xm = x2 - y2 * (x2 - x1) / (y2 - y1);\n            double ym = f.value(xm);\n\n            if (Math.abs(", "entropy": 0.30615234375, "is_bug_line": true, "sus_score": 0.565337061882019, "per_token_entropy": [0.45458984375, 0.697265625, 0.689453125, 0.4462890625, 2.1796875, 0.2071533203125, 0.7021484375, 0.39013671875, 0.78857421875, 0.51318359375, 1.6826171875, 0.47021484375, 0.0439453125, 0.6689453125, 1.166015625, 0.274658203125, 0.76318359375, 0.013427734375, 0.1064453125, 0.0640869140625, 0.01258087158203125, 0.1329345703125, 0.01393890380859375, 0.001216888427734375, 0.2254638671875, 0.02191162109375, 0.0014247894287109375, 0.006603240966796875, 0.0011339187622070312, 0.0024089813232421875, 0.0009512901306152344, 0.0008378028869628906, 2.8014183044433594e-05, 0.0033855438232421875, 0.56298828125, 0.21875, 0.0926513671875, 0.0014734268188476562, 0.003658294677734375, 0.007511138916015625, 0.00010693073272705078, 0.0003998279571533203, 0.00030303001403808594, 0.0014219284057617188, 0.0006327629089355469, 0.40234375, 1.583984375, 0.08123779296875, 0.19873046875, 0.0014705657958984375, 0.012908935546875, 0.00247955322265625], "tokens": [324, 320, 1064, 434, 7596, 322, 537, 39431, 324, 2064, 816, 95, 280, 816, 36, 429, 533, 36, 319, 308, 106, 36, 429, 816, 35, 27, 517, 308, 107, 36, 429, 533, 35, 293, 324, 2064, 533, 95, 280, 296, 32, 853, 26, 18974, 293, 1064, 415, 308, 5717, 32, 3596, 26]}
{"line_number": 169, "line_type": "original", "code": "     */", "entropy": 7.96875, "is_bug_line": false, "sus_score": 0.5568426847457886, "per_token_entropy": [6.609375, 9.328125], "tokens": [262, 569]}
{"line_number": 169, "line_type": "generated", "code": "\n                } else {\n                    // Inverse quadratic interpolation\n                    double q = (x1 - x0) / (x2 - x0);\n                    double r2 = y2 / y0;\n                    double r = r2 / r3;\n                   ", "entropy": 0.289306640625, "is_bug_line": false, "sus_score": 0.5568426847457886, "per_token_entropy": [0.338623046875, 0.0032100677490234375, 0.015625, 0.015594482421875, 0.06622314453125, 0.2452392578125, 0.084716796875, 0.12396240234375, 0.0012502670288085938, 8.785724639892578e-05, 0.0012922286987304688, 0.80224609375, 0.89453125, 0.1875, 0.192626953125, 0.8408203125, 0.408203125, 0.3662109375, 0.0039043426513671875, 0.00112152099609375, 0.1826171875, 0.0019168853759765625, 0.359375, 0.14892578125, 0.425048828125, 0.05712890625, 0.00030350685119628906, 0.00112152099609375, 0.03472900390625, 0.006969451904296875, 0.0196990966796875, 0.186767578125, 0.280517578125, 1.6708984375, 0.0095367431640625, 0.3115234375, 1.0390625, 0.01465606689453125, 0.00885772705078125, 0.4921875, 0.004261016845703125, 0.02520751953125, 0.84521484375, 1.0322265625, 0.869140625, 0.83740234375, 0.61572265625, 0.61669921875, 0.1846923828125, 0.01331329345703125, 0.11541748046875, 0.034637451171875], "tokens": [400, 320, 813, 301, 528, 434, 701, 3565, 28624, 689, 23334, 528, 2064, 2678, 280, 308, 106, 35, 429, 816, 34, 27, 517, 308, 106, 36, 429, 816, 34, 293, 528, 2064, 540, 36, 280, 533, 36, 517, 533, 34, 45, 528, 2064, 540, 280, 540, 36, 517, 540, 37, 45, 528]}
{"line_number": 194, "line_type": "original", "code": "                return result;", "entropy": 4.53515625, "is_bug_line": false, "sus_score": 0.5454678535461426, "per_token_entropy": [6.38671875, 9.40625, 2.34765625, 0.0072021484375], "tokens": [2071, 442, 1056, 45]}
{"line_number": 194, "line_type": "generated", "code": "\n            // Compute new X1, Y1\n            x1 += delta;\n            y1 = function.value(x1);\n            i++;\n        }\n        throw new MaxIterationsExceededException(maximalIterationCount);\n    }\n\n    /**\n     * Set the", "entropy": 0.297607421875, "is_bug_line": false, "sus_score": 0.5454678535461426, "per_token_entropy": [0.58056640625, 0.58642578125, 0.73388671875, 0.234375, 0.1732177734375, 0.69580078125, 0.7724609375, 0.04791259765625, 0.0009775161743164062, 0.9189453125, 0.51708984375, 0.45654296875, 0.62451171875, 0.0017480850219726562, 0.00086212158203125, 0.1796875, 0.45849609375, 0.0038318634033203125, 0.00769805908203125, 1.599609375, 0.12445068359375, 0.0946044921875, 0.0097503662109375, 0.0113525390625, 0.002979278564453125, 0.0231781005859375, 0.307373046875, 0.7705078125, 0.1331787109375, 0.25634765625, 0.0021152496337890625, 0.5107421875, 0.1708984375, 0.007320404052734375, 0.0203857421875, 0.0021915435791015625, 7.712841033935547e-05, 6.92605972290039e-05, 1.458984375, 0.17236328125, 0.0005879402160644531, 0.00021028518676757812, 0.00022363662719726562, 0.0304107666015625, 0.09759521484375, 0.002925872802734375, 1.4140625, 0.155517578125, 0.1094970703125, 0.0001633167266845703, 0.90869140625, 0.0836181640625], "tokens": [324, 434, 12836, 537, 1593, 35, 30, 1410, 35, 324, 816, 35, 1454, 7715, 45, 324, 533, 35, 280, 667, 32, 853, 26, 106, 35, 293, 324, 595, 3334, 291, 320, 291, 1422, 537, 7462, 31219, 28741, 984, 26, 1449, 2977, 21863, 1534, 293, 284, 320, 446, 1022, 275, 319, 1756, 322]}
{"line_number": 134, "line_type": "original", "code": "        double yMax = f.value(max);", "entropy": 1.96875, "is_bug_line": false, "sus_score": 0.5399137735366821, "per_token_entropy": [6.40625, 5.65234375, 0.53173828125, 6.234375, 0.0582275390625, 1.701171875, 0.0025177001953125, 0.0054168701171875, 0.0012350082397460938, 1.060546875, 0.00849151611328125], "tokens": [351, 2064, 533, 2708, 280, 296, 32, 853, 26, 1449, 293]}
{"line_number": 134, "line_type": "generated", "code": "\n                y0 = y1;\n                y1 = y2;\n            }\n\n            double delta2 = 2 * delta;\n            double delta3 = 3 * delta;\n            double a = delta3 - x1 * delta2 + x0 *", "entropy": 0.2822265625, "is_bug_line": false, "sus_score": 0.5399137735366821, "per_token_entropy": [0.26611328125, 0.435546875, 0.02801513671875, 0.0008029937744140625, 0.0015859603881835938, 0.002330780029296875, 0.0002818107604980469, 0.025054931640625, 0.01049041748046875, 0.004283905029296875, 0.00027489662170410156, 0.0013866424560546875, 0.0004553794860839844, 0.00028061866760253906, 0.6015625, 0.0006699562072753906, 0.5791015625, 1.6533203125, 1.501953125, 0.2225341796875, 0.03131103515625, 0.67431640625, 0.033447265625, 0.2335205078125, 0.497314453125, 0.0011892318725585938, 0.386474609375, 0.4169921875, 1.443359375, 0.011871337890625, 0.01265716552734375, 0.5400390625, 0.292236328125, 0.004058837890625, 0.00017392635345458984, 0.0007510185241699219, 0.98828125, 0.171142578125, 0.89453125, 0.07696533203125, 1.3349609375, 0.1087646484375, 0.11676025390625, 0.1356201171875, 0.446044921875, 0.051116943359375, 0.1396484375, 5.4836273193359375e-05, 0.000110626220703125, 0.006561279296875, 0.0021228790283203125, 0.27978515625], "tokens": [400, 533, 34, 280, 533, 35, 45, 400, 533, 35, 280, 533, 36, 45, 324, 320, 1064, 2064, 7715, 36, 280, 225, 36, 319, 7715, 45, 324, 2064, 7715, 37, 280, 225, 37, 319, 7715, 45, 324, 2064, 312, 280, 7715, 37, 429, 816, 35, 319, 7715, 36, 474, 816, 34, 319]}
{"line_number": 133, "line_type": "original", "code": "        double yMin = f.value(min);", "entropy": 1.6806640625, "is_bug_line": false, "sus_score": 0.5372810959815979, "per_token_entropy": [4.41796875, 3.587890625, 0.218505859375, 5.96875, 0.0269622802734375, 2.556640625, 0.007236480712890625, 0.0035610198974609375, 0.0008945465087890625, 1.697265625, 0.00377655029296875], "tokens": [351, 2064, 533, 2928, 280, 296, 32, 853, 26, 887, 293]}
{"line_number": 133, "line_type": "generated", "code": "\n                y0 = y1;\n                x2 = x1;\n                y2 = y1;\n            }\n            // calculate a new approximation\n            double xm = x2 - y2 * (x2 - x1) / (y2 -", "entropy": 0.359619140625, "is_bug_line": false, "sus_score": 0.5372810959815979, "per_token_entropy": [0.310791015625, 0.31689453125, 0.00716400146484375, 0.0017080307006835938, 0.0026702880859375, 0.005138397216796875, 0.004352569580078125, 0.69287109375, 0.1868896484375, 0.66259765625, 0.001445770263671875, 0.0034542083740234375, 0.0202178955078125, 0.0113525390625, 0.32373046875, 0.0396728515625, 0.0009927749633789062, 0.00020325183868408203, 0.00112152099609375, 0.0019102096557617188, 0.0007185935974121094, 0.31982421875, 0.00091552734375, 1.724609375, 0.85498046875, 2.541015625, 1.509765625, 0.4296875, 0.4482421875, 1.1640625, 0.7822265625, 1.892578125, 1.05078125, 0.046844482421875, 0.607421875, 0.94970703125, 0.1658935546875, 0.7275390625, 0.0027446746826171875, 0.103759765625, 0.06317138671875, 0.00980377197265625, 0.087646484375, 0.01483917236328125, 0.00115203857421875, 0.576171875, 0.02252197265625, 0.0011281967163085938, 0.00566864013671875, 0.0009870529174804688, 0.001850128173828125, 0.0010747909545898438], "tokens": [400, 533, 34, 280, 533, 35, 45, 400, 816, 36, 280, 816, 35, 45, 400, 533, 36, 280, 533, 35, 45, 324, 320, 324, 434, 9169, 312, 537, 39431, 324, 2064, 816, 95, 280, 816, 36, 429, 533, 36, 319, 308, 106, 36, 429, 816, 35, 27, 517, 308, 107, 36, 429]}
{"line_number": 179, "line_type": "original", "code": "        while (i < maximalIterationCount) {", "entropy": 2.14453125, "is_bug_line": false, "sus_score": 0.5371119379997253, "per_token_entropy": [5.8359375, 9.9453125, 0.274658203125, 4.76171875, 0.36865234375, 0.81396484375, 0.97314453125, 0.2239990234375, 0.0057220458984375, 0.26953125, 0.125244140625], "tokens": [351, 2218, 308, 91, 333, 1769, 2977, 21863, 1534, 27, 301]}
{"line_number": 179, "line_type": "generated", "code": "\n                }\n                p = Math.abs(p);\n                double min1 = 3.0 * tolerance * Math.abs(x1);\n                double min2 = 0.1 * tolerance * Math.abs(x1);\n                if ((", "entropy": 0.17236328125, "is_bug_line": false, "sus_score": 0.5371119379997253, "per_token_entropy": [0.70458984375, 0.048248291015625, 0.137451171875, 0.72216796875, 0.501953125, 0.1639404296875, 0.00010466575622558594, 0.353271484375, 0.00026702880859375, 0.0013332366943359375, 0.0201568603515625, 0.051300048828125, 0.132080078125, 1.6171875, 0.03521728515625, 0.011932373046875, 0.02197265625, 0.032073974609375, 0.01678466796875, 0.0003247261047363281, 0.0016870498657226562, 0.82470703125, 0.095947265625, 0.197265625, 6.854534149169922e-05, 0.006122589111328125, 0.0003573894500732422, 0.367919921875, 0.01617431640625, 0.09881591796875, 0.0212554931640625, 0.03973388671875, 0.016815185546875, 0.00616455078125, 0.0030307769775390625, 0.0260009765625, 0.01666259765625, 8.463859558105469e-05, 0.197265625, 0.00093841552734375, 0.44091796875, 0.1944580078125, 0.456298828125, 9.560585021972656e-05, 0.01250457763671875, 0.0008640289306640625, 0.393798828125, 0.0836181640625, 0.31982421875, 0.1519775390625, 0.1868896484375, 0.214111328125], "tokens": [400, 320, 400, 298, 280, 4175, 32, 3596, 26, 98, 293, 400, 2064, 1847, 35, 280, 225, 37, 32, 34, 319, 26434, 319, 4175, 32, 3596, 26, 106, 35, 293, 400, 2064, 1847, 36, 280, 225, 34, 32, 35, 319, 26434, 319, 4175, 32, 3596, 26, 106, 35, 293, 400, 415, 1833]}
{"line_number": 186, "line_type": "original", "code": "                y1 = y2;", "entropy": 2.572265625, "is_bug_line": false, "sus_score": 0.5369553565979004, "per_token_entropy": [7.40625, 8.3984375, 1.501953125, 0.0208740234375, 0.09619140625, 0.5693359375, 0.01172637939453125], "tokens": [2071, 533, 35, 280, 533, 36, 45]}
{"line_number": 186, "line_type": "generated", "code": "\n                    delta = 0.5 * dx;\n                    oldDelta = delta;\n                } else {\n                    // Quadratic interpolation.\n                    double dx1 = 0.5 * dx;\n                    double dx2 = p / p1;\n                    double x", "entropy": 0.19189453125, "is_bug_line": false, "sus_score": 0.5369553565979004, "per_token_entropy": [0.061553955078125, 0.117919921875, 0.0025634765625, 0.004497528076171875, 0.00013184547424316406, 3.2067298889160156e-05, 0.00013697147369384766, 0.0027217864990234375, 0.00330352783203125, 0.0005927085876464844, 0.0283660888671875, 0.0133819580078125, 0.0005974769592285156, 0.0026302337646484375, 0.00556182861328125, 0.00026607513427734375, 0.034271240234375, 0.00015783309936523438, 0.011322021484375, 0.042266845703125, 0.022003173828125, 0.2064208984375, 1.884765625, 7.605552673339844e-05, 0.0007300376892089844, 0.0251312255859375, 0.498046875, 0.0269317626953125, 0.79150390625, 0.73095703125, 0.2841796875, 0.007122039794921875, 0.6513671875, 0.31591796875, 0.0026149749755859375, 0.485595703125, 0.0014467239379882812, 0.380859375, 0.1279296875, 0.00717926025390625, 0.30224609375, 0.1295166015625, 0.0094757080078125, 0.003055572509765625, 0.154541015625, 0.0018215179443359375, 0.0286865234375, 4.172325134277344e-06, 0.003498077392578125, 0.0253143310546875, 1.11328125, 1.419921875], "tokens": [528, 7715, 280, 225, 34, 32, 39, 319, 12211, 45, 528, 3610, 9189, 280, 7715, 45, 400, 320, 813, 301, 528, 434, 5599, 14128, 689, 23334, 32, 528, 2064, 12211, 35, 280, 225, 34, 32, 39, 319, 12211, 45, 528, 2064, 12211, 36, 280, 298, 517, 298, 35, 45, 528, 2064, 816]}
{"line_number": 182, "line_type": "original", "code": "                x0 = x1;", "entropy": 3.275390625, "is_bug_line": false, "sus_score": 0.535141110420227, "per_token_entropy": [6.07421875, 5.28125, 1.001953125, 10.078125, 0.03753662109375, 0.444091796875, 0.00704193115234375], "tokens": [2071, 816, 34, 280, 816, 35, 45]}
{"line_number": 182, "line_type": "generated", "code": "\n                        p >= Math.abs(0.5 * p1)) {\n                    // Inverse quadratic interpolation failed,\n                    // use bisection.\n                    delta = 0.5 * dx;\n                    oldDelta = delta;\n                } else if (", "entropy": 0.11590576171875, "is_bug_line": false, "sus_score": 0.535141110420227, "per_token_entropy": [0.634765625, 0.59130859375, 0.346923828125, 0.253662109375, 5.424022674560547e-05, 0.0014581680297851562, 0.004230499267578125, 0.06878662109375, 4.0531158447265625e-06, 0.0004248619079589844, 0.04339599609375, 0.34033203125, 0.0029621124267578125, 0.0885009765625, 0.04852294921875, 0.0277252197265625, 0.103759765625, 0.62890625, 0.0158843994140625, 0.0004405975341796875, 0.0001817941665649414, 0.004550933837890625, 0.480224609375, 0.25439453125, 0.3056640625, 0.001682281494140625, 0.1309814453125, 0.01297760009765625, 0.0003008842468261719, 3.2186508178710938e-06, 0.48779296875, 0.01666259765625, 0.0765380859375, 0.0015497207641601562, 0.004131317138671875, 0.00010609626770019531, 1.7762184143066406e-05, 6.35385513305664e-05, 0.0011844635009765625, 0.00324249267578125, 0.00022280216217041016, 0.01448822021484375, 0.01076507568359375, 0.000514984130859375, 0.001728057861328125, 0.004878997802734375, 0.0002338886260986328, 0.0113372802734375, 0.00010502338409423828, 0.0172882080078125, 0.90966796875, 0.0732421875], "tokens": [715, 298, 2377, 4175, 32, 3596, 26, 34, 32, 39, 319, 298, 35, 490, 301, 528, 434, 701, 3565, 28624, 689, 23334, 3803, 30, 528, 434, 793, 323, 1125, 382, 32, 528, 7715, 280, 225, 34, 32, 39, 319, 12211, 45, 528, 3610, 9189, 280, 7715, 45, 400, 320, 813, 415, 308]}
{"line_number": 185, "line_type": "original", "code": "                y0 = y1;", "entropy": 2.56640625, "is_bug_line": false, "sus_score": 0.5274901390075684, "per_token_entropy": [7.5703125, 7.21484375, 1.91796875, 0.11944580078125, 0.0364990234375, 1.0986328125, 0.0182647705078125], "tokens": [2071, 533, 34, 280, 533, 35, 45]}
{"line_number": 185, "line_type": "generated", "code": "\n                    delta = 0.5 * dx;\n                    oldDelta = delta;\n                } else {\n                    double dx1 = 0.5 * dx;\n                    double dx2 = p / p1;\n                    double dx3 = dx1;\n                    if", "entropy": 0.19970703125, "is_bug_line": false, "sus_score": 0.5274901390075684, "per_token_entropy": [0.0628662109375, 0.395263671875, 0.01110076904296875, 0.1898193359375, 0.0004611015319824219, 4.7087669372558594e-05, 0.0003597736358642578, 0.0016956329345703125, 0.0904541015625, 0.0036258697509765625, 0.0230712890625, 0.01488494873046875, 0.0003151893615722656, 0.0018987655639648438, 0.006580352783203125, 0.0003783702850341797, 0.026763916015625, 0.0004215240478515625, 0.0183258056640625, 0.0887451171875, 0.02978515625, 1.779296875, 1.0087890625, 0.371826171875, 0.020965576171875, 1.0283203125, 0.2139892578125, 0.007541656494140625, 0.289794921875, 0.0029125213623046875, 0.460693359375, 0.220703125, 0.01296234130859375, 0.265869140625, 0.335205078125, 0.009735107421875, 0.01296234130859375, 0.19091796875, 0.0025157928466796875, 0.0193328857421875, 4.887580871582031e-06, 0.0029926300048828125, 0.0455322265625, 1.18359375, 0.5537109375, 0.1802978515625, 0.0892333984375, 0.544921875, 0.1226806640625, 0.018768310546875, 0.043426513671875, 0.376708984375], "tokens": [528, 7715, 280, 225, 34, 32, 39, 319, 12211, 45, 528, 3610, 9189, 280, 7715, 45, 400, 320, 813, 301, 528, 2064, 12211, 35, 280, 225, 34, 32, 39, 319, 12211, 45, 528, 2064, 12211, 36, 280, 298, 517, 298, 35, 45, 528, 2064, 12211, 37, 280, 12211, 35, 45, 528, 415]}
{"line_number": 295, "line_type": "original", "code": "", "entropy": 0.306884765625, "is_bug_line": false, "sus_score": 0.5228505730628967, "per_token_entropy": [0.306884765625], "tokens": [203]}
{"line_number": 295, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5228505730628967, "per_token_entropy": [], "tokens": []}
{"line_number": 187, "line_type": "original", "code": "                y2 = y0;", "entropy": 2.572265625, "is_bug_line": false, "sus_score": 0.5214257836341858, "per_token_entropy": [6.65234375, 7.62890625, 1.3701171875, 0.013427734375, 0.67041015625, 1.6357421875, 0.0241546630859375], "tokens": [2071, 533, 36, 280, 533, 34, 45]}
{"line_number": 187, "line_type": "generated", "code": "\n                } else {\n                    // inverse quadratic interpolation\n                    // is on track, update delta\n                    delta = p / p1;\n                    oldDelta = delta;\n                    if (x0 == x1) {\n                        // if we overestimated delta, we may", "entropy": 0.49755859375, "is_bug_line": false, "sus_score": 0.5214257836341858, "per_token_entropy": [0.167236328125, 0.0009160041809082031, 0.0305023193359375, 0.04754638671875, 0.0167694091796875, 0.1953125, 1.0224609375, 0.00093841552734375, 0.00022363662719726562, 0.0032749176025390625, 0.280517578125, 0.5732421875, 0.0955810546875, 1.1904296875, 0.402587890625, 0.37890625, 2.775390625, 0.82958984375, 0.62060546875, 0.322021484375, 0.0223846435546875, 0.06201171875, 0.01141357421875, 0.003131866455078125, 2.2649765014648438e-06, 0.0020465850830078125, 0.161865234375, 0.59375, 0.0008940696716308594, 0.0011224746704101562, 0.00897979736328125, 0.0005135536193847656, 0.939453125, 1.064453125, 0.024627685546875, 0.88427734375, 1.11328125, 0.2335205078125, 0.00036716461181640625, 1.5634765625, 0.0745849609375, 0.0057373046875, 0.0238189697265625, 0.30712890625, 2.203125, 0.78369140625, 1.52734375, 0.720703125, 0.1490478515625, 0.6357421875, 0.8642578125, 2.935546875], "tokens": [400, 320, 813, 301, 528, 434, 19385, 28624, 689, 23334, 528, 434, 438, 544, 4562, 30, 1974, 7715, 528, 7715, 280, 298, 517, 298, 35, 45, 528, 3610, 9189, 280, 7715, 45, 528, 415, 308, 106, 34, 610, 816, 35, 27, 301, 715, 434, 415, 996, 2288, 42303, 7715, 30, 996, 1631]}
{"line_number": 184, "line_type": "original", "code": "                x2 = x0;", "entropy": 2.16015625, "is_bug_line": false, "sus_score": 0.5196205973625183, "per_token_entropy": [7.11328125, 6.19921875, 0.88818359375, 0.036865234375, 0.14892578125, 0.70703125, 0.02783203125], "tokens": [2071, 816, 36, 280, 816, 34, 45]}
{"line_number": 184, "line_type": "generated", "code": "\n                    // closer to x1 than bisection.\n                    delta = p / p1;\n                    oldDelta = delta;\n                } else {\n                    // Bisection.\n                    oldDelta = delta;\n                    delta = 0.5 * dx;\n               ", "entropy": 0.1673583984375, "is_bug_line": false, "sus_score": 0.5196205973625183, "per_token_entropy": [0.1463623046875, 0.088134765625, 1.3388671875, 0.016571044921875, 0.60498046875, 0.7373046875, 0.92138671875, 0.2073974609375, 0.0016164779663085938, 3.707408905029297e-05, 0.20751953125, 0.491943359375, 0.360107421875, 0.0034809112548828125, 0.650390625, 0.007549285888671875, 0.002452850341796875, 5.841255187988281e-06, 0.0032711029052734375, 0.0870361328125, 0.030792236328125, 0.0004744529724121094, 0.0009350776672363281, 0.022125244140625, 0.0006237030029296875, 0.0204925537109375, 0.00046753883361816406, 0.0119781494140625, 0.00972747802734375, 0.0360107421875, 0.1883544921875, 0.39990234375, 0.0092926025390625, 2.110004425048828e-05, 0.2286376953125, 0.019012451171875, 1.4697265625, 0.000247955322265625, 0.001617431640625, 0.21875, 0.004428863525390625, 0.01320648193359375, 0.0072479248046875, 0.0171356201171875, 0.0771484375, 0.0002846717834472656, 8.940696716308594e-06, 4.208087921142578e-05, 0.0009560585021972656, 0.01146697998046875, 0.00020647048950195312, 0.02813720703125], "tokens": [528, 434, 30682, 372, 816, 35, 2784, 323, 1125, 382, 32, 528, 7715, 280, 298, 517, 298, 35, 45, 528, 3610, 9189, 280, 7715, 45, 400, 320, 813, 301, 528, 434, 551, 1125, 382, 32, 528, 3610, 9189, 280, 7715, 45, 528, 7715, 280, 225, 34, 32, 39, 319, 12211, 45, 400]}
{"line_number": 183, "line_type": "original", "code": "                x1 = x2;", "entropy": 2.41015625, "is_bug_line": false, "sus_score": 0.5129407644271851, "per_token_entropy": [7.01953125, 5.1015625, 1.77734375, 0.55078125, 0.05865478515625, 2.248046875, 0.114501953125], "tokens": [2071, 816, 35, 280, 816, 36, 45]}
{"line_number": 183, "line_type": "generated", "code": "\n                    // Inverse quadratic interpolation failed,\n                    // use bisection.\n                    delta = 0.5 * dx;\n                    oldDelta = delta;\n                } else {\n                    // Quadratic interpolation.\n                    delta = p / p1;\n                   ", "entropy": 0.165283203125, "is_bug_line": false, "sus_score": 0.5129407644271851, "per_token_entropy": [0.08087158203125, 0.238525390625, 1.3134765625, 0.03472900390625, 0.0011692047119140625, 0.00019919872283935547, 0.0027179718017578125, 0.572265625, 0.228759765625, 0.304931640625, 0.0026397705078125, 0.19580078125, 0.01214599609375, 0.0003578662872314453, 3.5762786865234375e-06, 0.55126953125, 0.01367950439453125, 0.095703125, 0.0017337799072265625, 0.004467010498046875, 0.0001049041748046875, 1.3113021850585938e-05, 7.021427154541016e-05, 0.0015401840209960938, 0.00312042236328125, 0.0002562999725341797, 0.017059326171875, 0.01067352294921875, 0.0004811286926269531, 0.002262115478515625, 0.0035533905029296875, 0.00020587444305419922, 0.018524169921875, 0.00037860870361328125, 0.0205841064453125, 0.130126953125, 0.032379150390625, 0.339599609375, 1.8701171875, 7.236003875732422e-05, 0.000713348388671875, 0.018463134765625, 1.060546875, 0.01416015625, 1.091796875, 0.006778717041015625, 0.10400390625, 0.1619873046875, 0.0048065185546875, 3.4570693969726562e-06, 0.001842498779296875, 0.019683837890625], "tokens": [528, 434, 701, 3565, 28624, 689, 23334, 3803, 30, 528, 434, 793, 323, 1125, 382, 32, 528, 7715, 280, 225, 34, 32, 39, 319, 12211, 45, 528, 3610, 9189, 280, 7715, 45, 400, 320, 813, 301, 528, 434, 5599, 14128, 689, 23334, 32, 528, 7715, 280, 298, 517, 298, 35, 45, 528]}
{"line_number": 140, "line_type": "original", "code": "                // neither value is close to zero and min and max do not bracket root.", "entropy": 2.90234375, "is_bug_line": false, "sus_score": 0.505301833152771, "per_token_entropy": [4.15234375, 1.21484375, 9.0, 3.853515625, 0.2413330078125, 1.345703125, 0.1884765625, 0.42626953125, 5.44140625, 7.99609375, 3.37890625, 0.16650390625, 5.0859375, 0.058258056640625, 0.01483917236328125, 2.56640625, 4.2265625], "tokens": [2071, 434, 25209, 786, 438, 4230, 372, 5934, 461, 1847, 461, 1769, 745, 646, 33828, 3051, 32]}
{"line_number": 140, "line_type": "generated", "code": "\n                setResult(y1, x1);\n                return x1;\n            }\n            if (Math.abs(delta) < functionValueAccuracy) {\n                // use linear interpolation if the bracket point is close\n                // to the previous approximation", "entropy": 0.412841796875, "is_bug_line": false, "sus_score": 0.505301833152771, "per_token_entropy": [0.2445068359375, 0.7548828125, 0.004730224609375, 0.004329681396484375, 0.6630859375, 0.013214111328125, 0.002231597900390625, 0.697265625, 0.004512786865234375, 0.0225982666015625, 0.0712890625, 0.1505126953125, 0.82275390625, 0.003078460693359375, 0.0004949569702148438, 0.11614990234375, 0.0011606216430664062, 0.78857421875, 0.4736328125, 0.0849609375, 0.11773681640625, 0.00019299983978271484, 0.0031528472900390625, 0.0013093948364257812, 0.27783203125, 0.0107574462890625, 0.7216796875, 1.083984375, 0.1556396484375, 0.00013387203216552734, 0.1339111328125, 0.004650115966796875, 0.56494140625, 0.287841796875, 2.259765625, 0.2763671875, 0.02978515625, 0.2197265625, 1.3916015625, 1.083984375, 0.47705078125, 0.6669921875, 0.98876953125, 0.7958984375, 0.2056884765625, 0.50830078125, 0.3779296875, 2.193359375, 0.46923828125], "tokens": [400, 739, 1394, 26, 107, 35, 30, 816, 35, 293, 400, 442, 816, 35, 45, 324, 320, 324, 415, 308, 5717, 32, 3596, 26, 6558, 27, 333, 667, 882, 26201, 27, 301, 400, 434, 793, 10081, 23334, 415, 322, 33828, 2260, 438, 4230, 400, 434, 372, 322, 4552, 39431]}
{"line_number": 89, "line_type": "original", "code": "            return solve(min, yMin, initial, yInitial, min, yMin);", "entropy": 1.2734375, "is_bug_line": false, "sus_score": 0.4967510998249054, "per_token_entropy": [5.234375, 2.716796875, 4.19140625, 0.0643310546875, 0.10693359375, 0.00634765625, 0.391357421875, 0.0015697479248046875, 0.0013580322265625, 6.765625, 0.2161865234375, 0.214111328125, 0.08770751953125, 0.8271484375, 3.162109375, 0.07171630859375, 0.05474853515625, 0.019927978515625, 0.0479736328125], "tokens": [1468, 442, 10932, 26, 887, 30, 533, 2928, 30, 2815, 30, 533, 4678, 30, 1847, 30, 533, 2928, 293]}
{"line_number": 89, "line_type": "generated", "code": "\n        }\n        \n        double initial = min;\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(yMin, 0);\n            return result;\n        }\n        if (Math.abs(yMax) <= function", "entropy": 0.218017578125, "is_bug_line": false, "sus_score": 0.4967510998249054, "per_token_entropy": [0.274169921875, 0.00441741943359375, 0.5361328125, 1.728515625, 1.5341796875, 0.2022705078125, 0.984375, 0.4755859375, 0.35107421875, 0.9326171875, 0.04998779296875, 0.50927734375, 0.0006322860717773438, 0.002960205078125, 0.00058746337890625, 0.07513427734375, 0.0298004150390625, 0.005947113037109375, 0.841796875, 0.08441162109375, 0.0013456344604492188, 0.0002830028533935547, 0.06365966796875, 0.00341033935546875, 0.0899658203125, 0.58935546875, 0.0018396377563476562, 0.0014247894287109375, 0.0933837890625, 0.006072998046875, 0.005268096923828125, 0.0419921875, 0.005931854248046875, 0.003826141357421875, 0.0885009765625, 0.148193359375, 0.05615234375, 0.01352691650390625, 0.0155487060546875, 0.00020754337310791016, 1.08984375, 0.347412109375, 0.004665374755859375, 0.026763916015625, 0.00028443336486816406, 0.00019276142120361328, 0.0001342296600341797, 0.0009541511535644531, 0.0065155029296875, 0.00020253658294677734, 0.00551605224609375, 0.0003955364227294922], "tokens": [291, 320, 2746, 2064, 2815, 280, 1847, 45, 291, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301, 324, 739, 1394, 26, 107, 2928, 30, 225, 34, 293, 324, 442, 1056, 45, 291, 320, 291, 415, 308, 5717, 32, 3596, 26, 107, 2708, 27, 2511, 667]}
{"line_number": 141, "line_type": "original", "code": "                throw new IllegalArgumentException", "entropy": 4.0625, "is_bug_line": true, "sus_score": 0.49515947699546814, "per_token_entropy": [3.86328125, 5.19921875, 0.047607421875, 7.14453125], "tokens": [2071, 1422, 537, 12137]}
{"line_number": 141, "line_type": "generated", "code": "\n                // that the root is very close to x1.\n                setResult(x1, i);\n                return result;\n            }\n            if (Math.abs(delta) < convergenceCriteria) {\n                // check for convergence\n                setResult(x1", "entropy": 0.45751953125, "is_bug_line": true, "sus_score": 0.49515947699546814, "per_token_entropy": [0.323974609375, 1.0439453125, 1.5595703125, 1.126953125, 1.263671875, 0.252685546875, 1.8994140625, 0.07684326171875, 0.06256103515625, 0.7890625, 0.1961669921875, 0.7666015625, 0.300048828125, 0.350341796875, 0.001811981201171875, 0.00649261474609375, 0.2427978515625, 0.004619598388671875, 0.00875091552734375, 1.04296875, 0.06561279296875, 0.0455322265625, 0.11248779296875, 0.1600341796875, 0.343994140625, 0.0240020751953125, 0.00019359588623046875, 0.7763671875, 0.60693359375, 0.082763671875, 0.08624267578125, 0.0001823902130126953, 0.0030727386474609375, 0.0029430389404296875, 0.269287109375, 0.01123046875, 0.8046875, 2.119140625, 1.6611328125, 0.0755615234375, 0.0047454833984375, 0.1326904296875, 0.483642578125, 2.201171875, 1.4208984375, 0.25341796875, 0.52490234375, 0.1712646484375, 0.0004718303680419922, 0.01392364501953125, 0.01033782958984375, 0.00634765625], "tokens": [400, 434, 688, 322, 3051, 438, 5029, 4230, 372, 816, 35, 32, 400, 739, 1394, 26, 106, 35, 30, 595, 293, 400, 442, 1056, 45, 324, 320, 324, 415, 308, 5717, 32, 3596, 26, 6558, 27, 333, 47454, 11807, 27, 301, 400, 434, 1505, 436, 47454, 400, 739, 1394, 26, 106, 35]}
{"line_number": 189, "line_type": "original", "code": "            if (Math.abs(y1) <= functionValueAccuracy) {", "entropy": 1.4736328125, "is_bug_line": false, "sus_score": 0.48695099353790283, "per_token_entropy": [8.0234375, 4.6796875, 0.1629638671875, 1.2158203125, 0.008758544921875, 0.00395965576171875, 0.00757598876953125, 2.111328125, 0.29052734375, 0.088623046875, 1.447265625, 5.20703125, 0.10601806640625, 0.0029964447021484375, 0.07647705078125, 0.1466064453125], "tokens": [1468, 415, 308, 5717, 32, 3596, 26, 107, 35, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 189, "line_type": "generated", "code": "\n                    // Quadratic interpolation.\n                    delta = p / p1;\n                    oldDelta = delta;\n                    if (Math.abs(delta) < tolerance) {\n                        // Ensure that the change in x takes the sign\n                        // of the step.\n                       ", "entropy": 0.38916015625, "is_bug_line": false, "sus_score": 0.48695099353790283, "per_token_entropy": [0.216796875, 0.212646484375, 2.521484375, 6.42538070678711e-05, 0.0005650520324707031, 0.041473388671875, 0.52587890625, 0.0340576171875, 0.69091796875, 0.00530242919921875, 0.19091796875, 0.1434326171875, 0.0100860595703125, 3.933906555175781e-06, 0.005908966064453125, 0.036834716796875, 1.1357421875, 0.0006685256958007812, 0.00115966796875, 0.0300140380859375, 0.0010318756103515625, 0.4345703125, 0.64892578125, 0.0340576171875, 1.068359375, 0.0002434253692626953, 0.002399444580078125, 0.00035452842712402344, 0.09942626953125, 0.0259857177734375, 0.66943359375, 0.0465087890625, 0.086181640625, 0.007572174072265625, 0.049774169921875, 0.7763671875, 2.69921875, 1.17578125, 0.315673828125, 1.541015625, 0.458251953125, 0.294677734375, 1.6171875, 0.619140625, 0.1715087890625, 0.36181640625, 0.0039043426513671875, 0.0023975372314453125, 0.0029735565185546875, 0.798828125, 0.36181640625, 0.056732177734375], "tokens": [528, 434, 5599, 14128, 689, 23334, 32, 528, 7715, 280, 298, 517, 298, 35, 45, 528, 3610, 9189, 280, 7715, 45, 528, 415, 308, 5717, 32, 3596, 26, 6558, 27, 333, 26434, 27, 301, 715, 434, 15545, 688, 322, 1539, 328, 816, 8727, 322, 2596, 715, 434, 432, 322, 3111, 32, 715]}
{"line_number": 180, "line_type": "original", "code": "            if (Math.abs(y2) < Math.abs(y1)) {", "entropy": 1.23828125, "is_bug_line": false, "sus_score": 0.48449158668518066, "per_token_entropy": [5.953125, 5.01953125, 0.2225341796875, 3.568359375, 0.0012979507446289062, 0.009490966796875, 0.0028076171875, 4.92578125, 1.59375, 0.1041259765625, 1.0341796875, 0.0771484375, 0.0012540817260742188, 0.0034961700439453125, 0.00036263465881347656, 0.002941131591796875, 0.9375, 0.0201568603515625, 0.045684814453125], "tokens": [1468, 415, 308, 5717, 32, 3596, 26, 107, 36, 27, 333, 4175, 32, 3596, 26, 107, 35, 490, 301]}
{"line_number": 180, "line_type": "generated", "code": "\n                }\n                p1 = -p1;\n                double dx1 = (2.0 * p * p1 - (p1 - p2) * (p1 + p2)) / (2.0 * p1 - p2);", "entropy": 0.298095703125, "is_bug_line": false, "sus_score": 0.48449158668518066, "per_token_entropy": [0.201416015625, 0.03076171875, 0.09246826171875, 1.15234375, 1.0859375, 0.142333984375, 0.7177734375, 0.06585693359375, 0.0186920166015625, 0.03045654296875, 0.1646728515625, 0.6962890625, 1.3046875, 0.295166015625, 0.03076171875, 1.6416015625, 0.85107421875, 0.035736083984375, 0.0018415451049804688, 0.004787445068359375, 0.0020046234130859375, 0.0662841796875, 0.006988525390625, 0.0299072265625, 1.205078125, 0.61376953125, 0.6669921875, 0.1231689453125, 1.09765625, 0.1365966796875, 0.038421630859375, 0.00665283203125, 0.0020465850830078125, 0.05682373046875, 0.423095703125, 0.00428009033203125, 0.055877685546875, 0.005641937255859375, 0.00220489501953125, 0.08013916015625, 0.158203125, 0.80126953125, 0.223388671875, 0.0017156600952148438, 0.00203704833984375, 0.004688262939453125, 0.521484375, 0.025604248046875, 0.412841796875, 0.1239013671875, 0.0003974437713623047, 0.0374755859375], "tokens": [400, 320, 400, 298, 35, 280, 429, 98, 35, 45, 400, 2064, 12211, 35, 280, 308, 36, 32, 34, 319, 298, 319, 298, 35, 429, 308, 98, 35, 429, 298, 36, 27, 319, 308, 98, 35, 474, 298, 36, 490, 517, 308, 36, 32, 34, 319, 298, 35, 429, 298, 36, 293]}
{"line_number": 147, "line_type": "original", "code": "            ret = solve(min, yMin, max, yMax, min, yMin);", "entropy": 1.2568359375, "is_bug_line": true, "sus_score": 0.4842498302459717, "per_token_entropy": [3.53515625, 5.64453125, 0.03955078125, 4.55078125, 1.2138671875, 3.501953125, 0.036834716796875, 0.337890625, 0.0074920654296875, 0.00872802734375, 0.035888671875, 0.0026874542236328125, 0.0033588409423828125, 0.0004253387451171875, 0.101318359375, 5.953125, 0.097900390625, 0.03350830078125, 0.01099395751953125, 0.031280517578125], "tokens": [1468, 2152, 280, 10932, 26, 887, 30, 533, 2928, 30, 1769, 30, 533, 2708, 30, 1847, 30, 533, 2928, 293]}
{"line_number": 147, "line_type": "generated", "code": "\n            // compute the new approximation\n            double xm = x1 - (y1 * dx / (y2 - y1));\n\n            // compute the new function value\n            double ym = f.value(xm);\n\n            // update the bracket point\n           ", "entropy": 0.537109375, "is_bug_line": true, "sus_score": 0.4842498302459717, "per_token_entropy": [0.4560546875, 0.759765625, 2.947265625, 0.955078125, 0.83154296875, 0.755859375, 1.2001953125, 0.828125, 1.4541015625, 0.74560546875, 0.03546142578125, 0.4326171875, 0.52392578125, 0.6240234375, 1.5751953125, 0.5615234375, 0.051300048828125, 0.202880859375, 0.634765625, 0.237548828125, 0.06512451171875, 0.02679443359375, 0.6484375, 0.0193023681640625, 0.00849151611328125, 0.0015420913696289062, 0.0265350341796875, 1.296875, 0.53759765625, 2.17578125, 0.254150390625, 0.92626953125, 0.1859130859375, 0.007770538330078125, 0.1722412109375, 0.2607421875, 0.1263427734375, 0.011871337890625, 0.00926971435546875, 0.0153961181640625, 0.0005350112915039062, 0.0008883476257324219, 0.0007677078247070312, 0.004520416259765625, 0.0014276504516601562, 0.33935546875, 0.472412109375, 1.294921875, 0.7275390625, 0.64404296875, 0.93896484375, 0.9189453125], "tokens": [324, 434, 7596, 322, 537, 39431, 324, 2064, 816, 95, 280, 816, 35, 429, 308, 107, 35, 319, 12211, 517, 308, 107, 36, 429, 533, 35, 876, 1064, 434, 7596, 322, 537, 667, 786, 324, 2064, 533, 95, 280, 296, 32, 853, 26, 18974, 293, 1064, 434, 1974, 322, 33828, 2260, 324]}
{"line_number": 176, "line_type": "original", "code": "        double oldDelta = delta;", "entropy": 2.30078125, "is_bug_line": false, "sus_score": 0.48093050718307495, "per_token_entropy": [5.5078125, 4.1484375, 4.76953125, 1.4453125, 0.1480712890625, 0.09100341796875, 0.00382232666015625], "tokens": [351, 2064, 3610, 9189, 280, 7715, 45]}
{"line_number": 176, "line_type": "generated", "code": "\n                if (p1 == 0.0) {\n                    // Avoid division by zero.\n                    delta = 0.5 * dx;\n                    oldDelta = delta;\n                } else {\n                    // In the original Brent's method, the following line", "entropy": 0.36279296875, "is_bug_line": false, "sus_score": 0.48093050718307495, "per_token_entropy": [0.342041015625, 0.458984375, 0.032928466796875, 0.288818359375, 1.6845703125, 0.55322265625, 0.00124359130859375, 6.532669067382812e-05, 0.312255859375, 0.00013077259063720703, 0.014556884765625, 0.008209228515625, 0.0228424072265625, 0.1531982421875, 3.375, 0.02288818359375, 0.00852203369140625, 0.07696533203125, 0.338134765625, 0.349853515625, 0.68994140625, 0.0069732666015625, 0.453857421875, 0.00556182861328125, 0.0013141632080078125, 0.00823211669921875, 0.004291534423828125, 0.04974365234375, 0.0010986328125, 0.271484375, 0.127197265625, 0.0007505416870117188, 0.0008678436279296875, 0.00975799560546875, 0.0003285408020019531, 0.016021728515625, 0.0003917217254638672, 0.0192413330078125, 0.04913330078125, 0.0601806640625, 0.77783203125, 1.896484375, 0.6064453125, 0.450439453125, 0.58740234375, 0.0005636215209960938, 0.0333251953125, 0.046905517578125, 1.6484375, 1.099609375, 1.4423828125, 0.45654296875], "tokens": [400, 415, 308, 98, 35, 610, 225, 34, 32, 34, 27, 301, 528, 434, 30653, 20654, 810, 5934, 32, 528, 7715, 280, 225, 34, 32, 39, 319, 12211, 45, 528, 3610, 9189, 280, 7715, 45, 400, 320, 813, 301, 528, 434, 701, 322, 4707, 551, 16502, 1182, 1411, 30, 322, 2412, 1628]}
