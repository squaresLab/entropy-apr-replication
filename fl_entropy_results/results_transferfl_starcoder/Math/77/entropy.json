{"line_number": 214, "line_type": "original", "code": "        final int l1 = v1.getDimension();", "entropy": 1.0419921875, "is_bug_line": false, "sus_score": 0.5412113666534424, "per_token_entropy": [4.2578125, 3.15625, 1.1484375, 0.99609375, 1.966796875, 0.00392913818359375, 0.40673828125, 0.026702880859375, 0.00249481201171875, 0.5322265625, 0.0019292831420898438, 0.00984954833984375], "tokens": [351, 1158, 629, 456, 35, 280, 354, 35, 32, 371, 9883, 473]}
{"line_number": 214, "line_type": "generated", "code": "\n        return new ArrayRealVector(this);\n    }\n\n    /**\n     * Get a deep copy of the internal data array.\n     * @return deep copy of the internal data array\n     */\n    public double[] getDataRef() {\n        return data.clone();", "entropy": 0.1759033203125, "is_bug_line": false, "sus_score": 0.5412113666534424, "per_token_entropy": [0.083984375, 0.1778564453125, 0.08636474609375, 0.0112762451171875, 0.0016145706176757812, 9.5367431640625e-07, 0.00650787353515625, 0.33251953125, 0.4384765625, 0.044097900390625, 0.00260162353515625, 0.1529541015625, 0.0307159423828125, 0.64013671875, 3.0040740966796875e-05, 1.61328125, 0.190185546875, 0.841796875, 0.0006351470947265625, 0.028717041015625, 0.36376953125, 0.71533203125, 0.400146484375, 0.283203125, 0.0231475830078125, 0.019683837890625, 0.0029296875, 0.260986328125, 0.0012502670288085938, 0.405517578125, 0.0009212493896484375, 0.0010957717895507812, 0.1434326171875, 0.2095947265625, 0.0283660888671875, 0.0284271240234375, 0.06396484375, 0.0240325927734375, 0.0039520263671875, 0.06634521484375, 0.0106048583984375, 0.0079193115234375, 0.0714111328125, 1.095703125, 0.008514404296875, 0.0039825439453125, 0.08050537109375, 0.02362060546875, 0.092529296875, 0.0207977294921875, 0.0002562999725341797, 0.0006403923034667969], "tokens": [291, 442, 537, 2629, 6877, 2863, 26, 578, 293, 284, 320, 446, 1022, 275, 319, 1390, 312, 11086, 1933, 432, 322, 3568, 706, 1417, 32, 275, 319, 477, 601, 11086, 1933, 432, 322, 3568, 706, 1417, 275, 569, 284, 562, 2064, 1178, 22938, 2084, 346, 301, 291, 442, 706, 32, 6358, 473]}
{"line_number": 500, "line_type": "original", "code": "            data[i] = 1.0 / data[i];", "entropy": 1.32421875, "is_bug_line": true, "sus_score": 0.5400393605232239, "per_token_entropy": [7.6875, 2.22265625, 0.030487060546875, 0.05828857421875, 0.01204681396484375, 0.057830810546875, 4.55859375, 2.1015625, 0.92578125, 0.067626953125, 1.7724609375, 0.328857421875, 0.000949859619140625, 0.0007672309875488281, 0.03582763671875], "tokens": [1468, 706, 77, 91, 79, 280, 225, 35, 32, 34, 517, 706, 77, 91, 970]}
{"line_number": 500, "line_type": "generated", "code": "\n        return this;\n    }\n\n    /** {@inheritDoc} */\n    public RealVector mapSignToSelf() {\n        for (int i = 0; i < data.length; i++) {\n            data[i] = Math.signum(data", "entropy": 0.045867919921875, "is_bug_line": true, "sus_score": 0.5400393605232239, "per_token_entropy": [0.060791015625, 0.01934814453125, 0.0012865066528320312, 0.0007104873657226562, 0.011810302734375, 0.0003170967102050781, 0.1971435546875, 0.01708984375, 0.042938232421875, 8.213520050048828e-05, 0.00012624263763427734, 0.0010232925415039062, 0.00824737548828125, 0.0128021240234375, 0.0194244384765625, 0.009552001953125, 0.0203094482421875, 0.0247650146484375, 1.2685546875, 3.123283386230469e-05, 0.00029015541076660156, 0.003200531005859375, 0.0133209228515625, 0.01548004150390625, 9.012222290039062e-05, 6.92605972290039e-05, 4.3392181396484375e-05, 4.7326087951660156e-05, 3.5643577575683594e-05, 2.288818359375e-05, 0.00017714500427246094, 2.5987625122070312e-05, 9.85860824584961e-05, 0.00039887428283691406, 1.2636184692382812e-05, 1.919269561767578e-05, 8.046627044677734e-05, 0.0015916824340820312, 0.00032901763916015625, 0.0006771087646484375, 0.1072998046875, 0.10992431640625, 1.2755393981933594e-05, 4.208087921142578e-05, 0.00011420249938964844, 0.006244659423828125, 0.389404296875, 0.002643585205078125, 0.0164642333984375, 0.000644683837890625, 0.00020456314086914062, 0.000324249267578125], "tokens": [291, 442, 458, 45, 284, 320, 446, 1022, 3088, 18446, 111, 569, 284, 562, 11443, 2863, 1992, 3388, 705, 8171, 346, 301, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 706, 32, 1322, 45, 595, 1987, 301, 324, 706, 77, 91, 79, 280, 4175, 32, 1333, 378, 26, 605]}
{"line_number": 226, "line_type": "original", "code": "     * @param v2 second vector (will be put at back of the new vector)", "entropy": 1.0087890625, "is_bug_line": false, "sus_score": 0.529771625995636, "per_token_entropy": [5.85546875, 2.369140625, 0.400634765625, 0.336669921875, 0.07373046875, 5.09375, 1.0625, 0.0163116455078125, 2.080078125, 1.5146484375, 0.0070953369140625, 0.245361328125, 0.05206298828125, 0.01209259033203125, 0.00894927978515625, 0.0128021240234375, 0.00925445556640625, 0.007038116455078125, 0.0167388916015625], "tokens": [262, 319, 477, 753, 354, 36, 3100, 4026, 308, 11104, 526, 4162, 821, 1751, 432, 322, 537, 4026, 27]}
{"line_number": 226, "line_type": "generated", "code": "\n            while (it.hasNext()) {\n                Entry e = it.next();\n                out[e.getIndex()] += e.getValue();\n            }\n            return new ArrayRealVector(out, false);\n        }\n    }\n\n    /**\n     * Returns a new", "entropy": 0.092041015625, "is_bug_line": false, "sus_score": 0.529771625995636, "per_token_entropy": [0.47314453125, 0.1387939453125, 0.0132598876953125, 0.0028972625732421875, 0.0012416839599609375, 0.0023059844970703125, 0.004215240478515625, 0.01922607421875, 0.0538330078125, 0.10028076171875, 0.060028076171875, 0.004909515380859375, 0.0821533203125, 0.00015270709991455078, 0.001651763916015625, 0.05828857421875, 0.0570068359375, 0.33837890625, 0.01114654541015625, 0.044281005859375, 0.000270843505859375, 0.022430419921875, 0.0223236083984375, 0.00478363037109375, 0.0028438568115234375, 0.00014209747314453125, 0.0017604827880859375, 0.015625, 0.02972412109375, 0.00035190582275390625, 0.2626953125, 0.0056610107421875, 0.0887451171875, 0.001148223876953125, 6.508827209472656e-05, 5.960464477539062e-07, 0.00011074542999267578, 0.006237030029296875, 0.07342529296875, 0.046875, 0.001842498779296875, 0.027191162109375, 0.0002968311309814453, 0.0208740234375, 0.0003361701965332031, 0.102783203125, 0.01556396484375, 0.4697265625, 8.368492126464844e-05, 1.423828125, 0.2001953125, 0.469482421875], "tokens": [324, 2218, 308, 283, 32, 16421, 1157, 301, 400, 13925, 484, 280, 561, 32, 1978, 473, 400, 963, 77, 87, 32, 27829, 7662, 1454, 484, 32, 6682, 473, 324, 320, 324, 442, 537, 2629, 6877, 2863, 26, 541, 30, 901, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 3759, 312, 537]}
{"line_number": 719, "line_type": "original", "code": "        double max = 0;", "entropy": 1.8984375, "is_bug_line": false, "sus_score": 0.5277096629142761, "per_token_entropy": [6.01953125, 0.9794921875, 6.05859375, 0.11126708984375, 0.07745361328125, 0.0011606216430664062, 0.041046142578125], "tokens": [351, 2064, 1769, 280, 225, 34, 45]}
{"line_number": 719, "line_type": "generated", "code": "\n        double sum = 0;\n        for (int i = 0; i < data.length; ++i) {\n            final double delta = data[i] - v.data[i];\n            sum += delta * delta;\n        }\n       ", "entropy": 0.04638671875, "is_bug_line": false, "sus_score": 0.5277096629142761, "per_token_entropy": [0.049560546875, 1.294921875, 0.09271240234375, 0.0025424957275390625, 0.0022258758544921875, 3.981590270996094e-05, 0.007183074951171875, 0.0308380126953125, 0.0565185546875, 0.0011730194091796875, 0.0013246536254882812, 0.0027828216552734375, 0.00091552734375, 0.0005774497985839844, 8.356571197509766e-05, 0.00437164306640625, 0.0008406639099121094, 0.00397491455078125, 0.0293121337890625, 0.00013768672943115234, 0.0005240440368652344, 0.00083160400390625, 0.1990966796875, 0.0001246929168701172, 0.0009984970092773438, 0.007061004638671875, 0.025970458984375, 0.162109375, 0.0009465217590332031, 0.0134735107421875, 0.0007109642028808594, 0.01044464111328125, 9.930133819580078e-05, 0.00013244152069091797, 0.0007014274597167969, 0.00033473968505859375, 0.0011234283447265625, 0.00344085693359375, 0.355224609375, 0.0002791881561279297, 0.00011467933654785156, 0.0002522468566894531, 0.01983642578125, 0.0026302337646484375, 0.0014295578002929688, 0.0025768280029296875, 0.0005445480346679688, 0.00011265277862548828, 0.00045180320739746094, 0.006351470947265625, 0.0003635883331298828, 0.0123443603515625], "tokens": [291, 2064, 3632, 280, 225, 34, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 706, 32, 1322, 45, 3311, 91, 27, 301, 324, 1158, 2064, 7715, 280, 706, 77, 91, 79, 429, 354, 32, 605, 77, 91, 970, 324, 3632, 1454, 7715, 319, 7715, 45, 291, 320, 291]}
{"line_number": 222, "line_type": "original", "code": "", "entropy": 3.96875, "is_bug_line": false, "sus_score": 0.5270711779594421, "per_token_entropy": [3.96875], "tokens": [203]}
{"line_number": 222, "line_type": "generated", "code": "\n        } else if (v instanceof SparseRealVector) {\n            return add((SparseRealVector) v);", "entropy": 0.1260986328125, "is_bug_line": false, "sus_score": 0.5270711779594421, "per_token_entropy": [0.400634765625, 0.04571533203125, 0.137939453125, 0.46435546875, 0.0035037994384765625, 0.01358795166015625, 0.0286865234375, 0.77978515625, 0.05657958984375, 4.0411949157714844e-05, 0.040771484375, 0.0008606910705566406, 0.01319122314453125, 0.032623291015625, 0.71240234375, 0.0305328369140625, 0.000385284423828125, 0.00023734569549560547, 1.4424324035644531e-05, 0.0003292560577392578, 0.0019702911376953125, 0.0094757080078125], "tokens": [291, 320, 813, 415, 308, 104, 5113, 35797, 6877, 2863, 27, 301, 324, 442, 1015, 1162, 19763, 6877, 2863, 27, 354, 293]}
{"line_number": 211, "line_type": "original", "code": "     * @param v2 second vector (will be put at back of the new vector)", "entropy": 0.69921875, "is_bug_line": false, "sus_score": 0.5262175798416138, "per_token_entropy": [5.68359375, 1.0625, 1.4912109375, 0.210205078125, 0.281005859375, 3.900390625, 0.341796875, 0.0089569091796875, 0.1129150390625, 0.00534820556640625, 0.000942230224609375, 0.04248046875, 0.0171966552734375, 0.01678466796875, 0.0206451416015625, 0.0215911865234375, 0.0218658447265625, 0.01471710205078125, 0.0355224609375], "tokens": [262, 319, 477, 753, 354, 36, 3100, 4026, 308, 11104, 526, 4162, 821, 1751, 432, 322, 537, 4026, 27]}
{"line_number": 211, "line_type": "generated", "code": "\n    /**\n     * Construct a vector by appending one vector to another vector.\n     * @param v1 first vector (will be put in front of the new vector)\n     * @param v2 second vector (will be put at back of the new", "entropy": 0.0457763671875, "is_bug_line": false, "sus_score": 0.5262175798416138, "per_token_entropy": [1.052734375, 0.138427734375, 0.0592041015625, 0.00012373924255371094, 0.339111328125, 0.0406494140625, 0.0185394287109375, 0.3203125, 0.08087158203125, 0.0007195472717285156, 0.044586181640625, 0.0029277801513671875, 0.01158905029296875, 0.00428009033203125, 0.0006551742553710938, 0.009307861328125, 0.0152587890625, 0.0012264251708984375, 0.029052734375, 0.00044274330139160156, 0.011474609375, 0.027801513671875, 0.00777435302734375, 0.00039887428283691406, 0.0026721954345703125, 0.0002484321594238281, 6.949901580810547e-05, 0.00012969970703125, 0.0184478759765625, 0.0007443428039550781, 0.00010275840759277344, 2.7179718017578125e-05, 9.036064147949219e-05, 0.00012195110321044922, 0.0027828216552734375, 0.1068115234375, 0.0012264251708984375, 0.00020074844360351562, 0.00013911724090576172, 0.0173187255859375, 0.00014472007751464844, 0.0007071495056152344, 5.1021575927734375e-05, 0.0008330345153808594, 0.00022780895233154297, 0.0002142190933227539, 0.0005259513854980469, 0.008209228515625, 0.0003783702850341797, 4.2438507080078125e-05, 5.507469177246094e-05, 3.4928321838378906e-05], "tokens": [284, 1022, 275, 319, 12968, 312, 4026, 810, 1123, 4013, 1591, 4026, 372, 4674, 4026, 32, 275, 319, 477, 753, 354, 35, 1932, 4026, 308, 11104, 526, 4162, 328, 8432, 432, 322, 537, 4026, 27, 275, 319, 477, 753, 354, 36, 3100, 4026, 308, 11104, 526, 4162, 821, 1751, 432, 322, 537]}
{"line_number": 223, "line_type": "original", "code": "    /**", "entropy": 5.0546875, "is_bug_line": false, "sus_score": 0.5246700048446655, "per_token_entropy": [5.55078125, 4.5546875], "tokens": [264, 1022]}
{"line_number": 223, "line_type": "generated", "code": "\n            double[] newData = new double[data.length];\n            for (int i = 0; i < data.length; ++i) {\n                newData[i] = data[i] + v.getEntry(i);\n            }\n            return", "entropy": 0.09503173828125, "is_bug_line": false, "sus_score": 0.5246700048446655, "per_token_entropy": [0.203857421875, 2.357421875, 0.032806396484375, 0.6357421875, 0.00873565673828125, 0.390380859375, 0.0018243789672851562, 0.0022754669189453125, 0.2088623046875, 0.002716064453125, 0.00029587745666503906, 0.0035114288330078125, 0.0892333984375, 0.3515625, 0.0177154541015625, 0.00037932395935058594, 0.0036678314208984375, 0.0026874542236328125, 0.0318603515625, 1.3470649719238281e-05, 0.01119232177734375, 0.0005955696105957031, 0.00226593017578125, 0.1617431640625, 9.846687316894531e-05, 0.00019407272338867188, 0.000774383544921875, 0.1348876953125, 0.0004992485046386719, 0.0024623870849609375, 0.01215362548828125, 0.0145721435546875, 0.00395965576171875, 0.00013387203216552734, 8.308887481689453e-05, 9.703636169433594e-05, 0.0032291412353515625, 0.042510986328125, 0.00012600421905517578, 8.952617645263672e-05, 0.013763427734375, 0.0027866363525390625, 0.0031185150146484375, 0.0005650520324707031, 0.0017986297607421875, 5.2928924560546875e-05, 0.0005674362182617188, 0.0012617111206054688, 0.005924224853515625, 0.00010728836059570312, 0.163818359375, 0.0120697021484375], "tokens": [324, 2064, 1178, 42649, 280, 537, 2064, 77, 605, 32, 1322, 970, 324, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 706, 32, 1322, 45, 3311, 91, 27, 301, 400, 42649, 77, 91, 79, 280, 706, 77, 91, 79, 474, 354, 32, 48895, 26, 91, 293, 324, 320, 324, 442]}
{"line_number": 709, "line_type": "original", "code": "        double sum = 0;", "entropy": 0.83642578125, "is_bug_line": false, "sus_score": 0.5240791440010071, "per_token_entropy": [3.693359375, 1.5498046875, 0.58984375, 0.00839996337890625, 0.0048370361328125, 6.401538848876953e-05, 0.0083770751953125], "tokens": [351, 2064, 3632, 280, 225, 34, 45]}
{"line_number": 709, "line_type": "generated", "code": "\n     * @param v vector to compute distance to\n     * @return distance between two vectors\n     * @exception IllegalArgumentException if v is not the same size as this\n     */\n    public double getDistance(ArrayRealVector v)\n        throws IllegalArgumentException {\n        return get", "entropy": 0.161865234375, "is_bug_line": false, "sus_score": 0.5240791440010071, "per_token_entropy": [0.239990234375, 0.0601806640625, 0.20654296875, 0.00714111328125, 0.0030498504638671875, 0.306884765625, 1.5654296875, 1.14453125, 0.103271484375, 0.37109375, 0.9541015625, 0.0017910003662109375, 0.0009670257568359375, 0.012176513671875, 0.474365234375, 0.0037555694580078125, 1.125, 0.0689697265625, 0.1666259765625, 0.0169830322265625, 0.0021877288818359375, 0.251708984375, 0.1502685546875, 0.0124359130859375, 0.1016845703125, 0.0012311935424804688, 0.04412841796875, 0.024078369140625, 0.0003101825714111328, 0.00547027587890625, 0.04412841796875, 0.0657958984375, 0.1268310546875, 0.245361328125, 0.03399658203125, 0.01302337646484375, 0.0028820037841796875, 0.011993408203125, 0.0010166168212890625, 0.0007615089416503906, 0.00885772705078125, 4.3392181396484375e-05, 4.76837158203125e-07, 0.00015997886657714844, 0.0017652511596679688, 0.057769775390625, 0.0002008676528930664, 0.0016317367553710938, 0.00873565673828125, 0.08258056640625, 0.1688232421875, 0.11376953125], "tokens": [275, 319, 477, 753, 354, 4026, 372, 7596, 7291, 372, 275, 319, 477, 601, 7291, 3733, 3134, 16540, 275, 319, 477, 3893, 12137, 415, 354, 438, 646, 322, 2432, 1334, 619, 458, 275, 569, 284, 562, 2064, 622, 8457, 26, 1261, 6877, 2863, 354, 27, 291, 2571, 12137, 301, 291, 442, 622]}
{"line_number": 210, "line_type": "original", "code": "     * @param v1 first vector (will be put in front of the new vector)", "entropy": 0.525390625, "is_bug_line": false, "sus_score": 0.5224263072013855, "per_token_entropy": [5.765625, 2.865234375, 0.4794921875, 0.07000732421875, 0.16796875, 0.42626953125, 0.08935546875, 0.00795745849609375, 0.033203125, 0.0008645057678222656, 0.00067901611328125, 0.002559661865234375, 0.0180511474609375, 0.01070404052734375, 0.013702392578125, 0.01282501220703125, 0.005001068115234375, 0.00464630126953125, 0.0084381103515625], "tokens": [262, 319, 477, 753, 354, 35, 1932, 4026, 308, 11104, 526, 4162, 328, 8432, 432, 322, 537, 4026, 27]}
{"line_number": 210, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Construct a vector by appending one vector to another vector.\n     * @param v1 first vector (will be put in front of the new vector)\n     * @param v2 second vector (will be put at back of", "entropy": 0.03411865234375, "is_bug_line": false, "sus_score": 0.5224263072013855, "per_token_entropy": [0.5556640625, 0.034576416015625, 0.271484375, 0.03826904296875, 0.044281005859375, 2.3245811462402344e-05, 0.12890625, 0.02587890625, 0.01462554931640625, 0.24853515625, 0.045440673828125, 0.00033974647521972656, 0.06390380859375, 0.0023899078369140625, 0.009490966796875, 0.00794219970703125, 0.0007481575012207031, 0.01055908203125, 0.1065673828125, 0.0003299713134765625, 0.0168304443359375, 0.0001976490020751953, 0.02374267578125, 0.06024169921875, 0.00540924072265625, 0.00029730796813964844, 0.003093719482421875, 0.00025534629821777344, 9.143352508544922e-05, 0.00016820430755615234, 0.0165252685546875, 0.001140594482421875, 0.00011086463928222656, 2.2292137145996094e-05, 6.711483001708984e-05, 8.034706115722656e-05, 0.0009484291076660156, 0.007717132568359375, 0.0010738372802734375, 0.00023651123046875, 2.0503997802734375e-05, 0.0107879638671875, 0.00016999244689941406, 0.0008220672607421875, 5.340576171875e-05, 0.0019130706787109375, 0.0003387928009033203, 5.0902366638183594e-05, 0.0008440017700195312, 0.0101470947265625, 0.0005564689636230469, 4.9591064453125e-05], "tokens": [284, 320, 446, 1022, 275, 319, 12968, 312, 4026, 810, 1123, 4013, 1591, 4026, 372, 4674, 4026, 32, 275, 319, 477, 753, 354, 35, 1932, 4026, 308, 11104, 526, 4162, 328, 8432, 432, 322, 537, 4026, 27, 275, 319, 477, 753, 354, 36, 3100, 4026, 308, 11104, 526, 4162, 821, 1751, 432]}
{"line_number": 721, "line_type": "original", "code": "            max += Math.max(max, Math.abs(a));", "entropy": 2.001953125, "is_bug_line": true, "sus_score": 0.5215679407119751, "per_token_entropy": [8.1171875, 3.35546875, 4.8203125, 0.147705078125, 0.00930023193359375, 4.55859375, 0.006443023681640625, 7.58984375, 0.03912353515625, 0.242431640625, 0.01345062255859375, 0.002269744873046875, 0.004764556884765625, 0.9296875, 0.188232421875], "tokens": [1468, 1769, 1454, 4175, 32, 1449, 26, 1449, 30, 4175, 32, 3596, 26, 83, 876]}
{"line_number": 721, "line_type": "generated", "code": "\n\n    /**\n     * Compute the L<sub>1</sub> (Manhattan) distance between two vectors.\n     * @param v vector to which distance is requested\n     * @return the distance between two vectors\n     * @exception IllegalArgumentException if v", "entropy": 0.165771484375, "is_bug_line": true, "sus_score": 0.5215679407119751, "per_token_entropy": [1.0009765625, 0.04278564453125, 0.35546875, 2.467632293701172e-05, 1.830078125, 0.042388916015625, 0.798828125, 0.01226806640625, 0.0005412101745605469, 0.18701171875, 0.0206451416015625, 0.0002868175506591797, 8.678436279296875e-05, 0.0014638900756835938, 0.1287841796875, 1.01171875, 0.0007038116455078125, 9.21487808227539e-05, 9.5367431640625e-07, 0.00391387939453125, 0.10052490234375, 0.08160400390625, 0.3505859375, 0.1785888671875, 0.004253387451171875, 0.0026149749755859375, 8.511543273925781e-05, 0.60302734375, 0.002620697021484375, 0.0005297660827636719, 0.0692138671875, 0.0338134765625, 0.00507354736328125, 0.011993408203125, 0.005817413330078125, 0.0002741813659667969, 0.005039215087890625, 2.86102294921875e-05, 0.0007829666137695312, 0.0038852691650390625, 0.173095703125, 0.3291015625, 0.006134033203125, 0.2354736328125, 0.046173095703125, 0.7080078125, 0.015350341796875, 0.0025691986083984375, 0.049407958984375, 0.1385498046875, 0.00688934326171875, 0.011566162109375], "tokens": [446, 1022, 275, 319, 12836, 322, 498, 46, 1113, 48, 35, 377, 1113, 48, 308, 1254, 90, 3131, 278, 27, 7291, 3733, 3134, 16540, 32, 275, 319, 477, 753, 354, 4026, 372, 1510, 7291, 438, 8843, 275, 319, 477, 601, 322, 7291, 3733, 3134, 16540, 275, 319, 477, 3893, 12137, 415, 354]}
{"line_number": 711, "line_type": "original", "code": "            sum += Math.abs(a);", "entropy": 2.580078125, "is_bug_line": false, "sus_score": 0.5215048789978027, "per_token_entropy": [6.3828125, 4.3671875, 0.07952880859375, 3.6640625, 0.010833740234375, 0.1446533203125, 0.0213165283203125, 3.060546875, 5.4921875], "tokens": [1468, 3632, 1454, 4175, 32, 3596, 26, 83, 293]}
{"line_number": 711, "line_type": "generated", "code": "\n     * @exception IllegalArgumentException if v is not the same size as this\n     */\n    public double getDistance(ArrayRealVector v)\n        throws IllegalArgumentException {\n        return Math.sqrt(getDistance(v.data));\n    }\n\n    /** {@inheritDoc} */", "entropy": 0.1282958984375, "is_bug_line": false, "sus_score": 0.5215048789978027, "per_token_entropy": [0.48291015625, 1.0986328125, 0.0224456787109375, 0.143310546875, 0.1414794921875, 0.0187835693359375, 0.0997314453125, 0.0012416839599609375, 0.041717529296875, 0.0228424072265625, 0.00030422210693359375, 0.00753021240234375, 0.0240020751953125, 0.03887939453125, 0.370849609375, 0.1273193359375, 0.0252838134765625, 0.01403045654296875, 0.003467559814453125, 0.01580810546875, 0.0015277862548828125, 0.0006914138793945312, 0.007965087890625, 7.605552673339844e-05, 4.76837158203125e-07, 0.00018918514251708984, 0.001911163330078125, 0.06402587890625, 0.00021541118621826172, 0.0014705657958984375, 0.00908660888671875, 0.0745849609375, 0.275390625, 1.6435546875, 0.00225067138671875, 0.0010251998901367188, 0.0042724609375, 0.385986328125, 0.0230865478515625, 0.342041015625, 0.00264739990234375, 0.0115203857421875, 0.0080718994140625, 0.008453369140625, 0.0290985107421875, 0.0005917549133300781, 0.294189453125, 0.029510498046875, 0.7431640625, 0.00015425682067871094, 0.0007762908935546875, 0.002597808837890625], "tokens": [275, 319, 477, 3893, 12137, 415, 354, 438, 646, 322, 2432, 1334, 619, 458, 275, 569, 284, 562, 2064, 622, 8457, 26, 1261, 6877, 2863, 354, 27, 291, 2571, 12137, 301, 291, 442, 4175, 32, 8663, 26, 371, 8457, 26, 104, 32, 605, 876, 284, 320, 446, 1022, 3088, 18446, 111, 569]}
{"line_number": 501, "line_type": "original", "code": "        }", "entropy": 4.640625, "is_bug_line": true, "sus_score": 0.5207933187484741, "per_token_entropy": [5.609375, 3.67578125], "tokens": [351, 320]}
{"line_number": 501, "line_type": "generated", "code": "\n    /** {@inheritDoc} */\n    public RealVector mapSignumToSelf() {\n        for (int i = 0; i < data.length; i++) {\n            data[i] = Math.signum(data[i]);\n        }", "entropy": 0.0848388671875, "is_bug_line": true, "sus_score": 0.5207933187484741, "per_token_entropy": [1.0888671875, 1.0810546875, 0.414306640625, 0.00032591819763183594, 0.00034546852111816406, 0.0023441314697265625, 0.012237548828125, 0.07586669921875, 0.058746337890625, 0.059600830078125, 0.15283203125, 0.043182373046875, 0.69384765625, 0.00014507770538330078, 1.1444091796875e-05, 0.002162933349609375, 0.00269317626953125, 0.0104217529296875, 0.0266265869140625, 0.0005259513854980469, 0.0002275705337524414, 9.799003601074219e-05, 7.152557373046875e-05, 5.066394805908203e-05, 3.4332275390625e-05, 0.0003414154052734375, 6.508827209472656e-05, 0.00015211105346679688, 0.0009756088256835938, 2.4318695068359375e-05, 1.728534698486328e-05, 8.33272933959961e-05, 0.00518035888671875, 0.0005540847778320312, 0.0006976127624511719, 0.0163726806640625, 0.209228515625, 1.6689300537109375e-05, 4.112720489501953e-05, 0.00013971328735351562, 0.0014486312866210938, 0.406494140625, 0.0029926300048828125, 0.0218658447265625, 2.9802322387695312e-06, 0.00030541419982910156, 0.0004138946533203125, 1.621246337890625e-05, 2.753734588623047e-05, 0.00035572052001953125, 0.01515960693359375, 0.0003714561462402344], "tokens": [284, 1022, 3088, 18446, 111, 569, 284, 562, 11443, 2863, 1992, 3388, 378, 705, 8171, 346, 301, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 706, 32, 1322, 45, 595, 1987, 301, 324, 706, 77, 91, 79, 280, 4175, 32, 1333, 378, 26, 605, 77, 91, 1989, 291, 320]}
{"line_number": 503, "line_type": "original", "code": "    }", "entropy": 3.92578125, "is_bug_line": true, "sus_score": 0.5205570459365845, "per_token_entropy": [3.298828125, 4.5546875], "tokens": [264, 320]}
{"line_number": 503, "line_type": "generated", "code": "\n\n    /** {@inheritDoc} */\n    public RealVector mapSignToSelf() {\n        for (int i = 0; i < data.length; i++) {\n            data[i] = Math.signum(data[i]);\n        }\n       ", "entropy": 0.052032470703125, "is_bug_line": true, "sus_score": 0.5205570459365845, "per_token_entropy": [0.56494140625, 0.038116455078125, 0.1624755859375, 0.000263214111328125, 0.00026035308837890625, 0.0012598037719726562, 0.0096282958984375, 0.0966796875, 0.0804443359375, 0.07177734375, 0.2467041015625, 0.1976318359375, 0.4404296875, 3.790855407714844e-05, 0.0006833076477050781, 0.00372314453125, 0.006000518798828125, 0.043426513671875, 0.00025272369384765625, 0.00018990039825439453, 0.00011301040649414062, 7.843971252441406e-05, 4.839897155761719e-05, 6.449222564697266e-05, 0.0004260540008544922, 4.6133995056152344e-05, 7.367134094238281e-05, 0.0011320114135742188, 2.3603439331054688e-05, 1.0728836059570312e-05, 8.869171142578125e-05, 0.00787353515625, 0.00033354759216308594, 0.0005154609680175781, 0.00766754150390625, 0.1993408203125, 1.2040138244628906e-05, 2.586841583251953e-05, 0.00018715858459472656, 0.00780487060546875, 0.462890625, 0.0073394775390625, 0.035400390625, 0.0004799365997314453, 0.00015282630920410156, 0.00048613548278808594, 8.225440979003906e-06, 1.3589859008789062e-05, 0.0005121231079101562, 0.0032024383544921875, 2.4199485778808594e-05, 0.002895355224609375], "tokens": [446, 1022, 3088, 18446, 111, 569, 284, 562, 11443, 2863, 1992, 3388, 705, 8171, 346, 301, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 706, 32, 1322, 45, 595, 1987, 301, 324, 706, 77, 91, 79, 280, 4175, 32, 1333, 378, 26, 605, 77, 91, 1989, 291, 320, 291]}
{"line_number": 217, "line_type": "original", "code": "        for (int i = 0; i < l1; ++i) {", "entropy": 0.685546875, "is_bug_line": false, "sus_score": 0.5170628428459167, "per_token_entropy": [4.40625, 4.171875, 0.02349853515625, 0.04437255859375, 0.031280517578125, 0.0082855224609375, 0.13232421875, 0.007904052734375, 0.06396484375, 0.0017480850219726562, 0.0166015625, 1.787109375, 1.26171875, 0.170166015625, 0.05108642578125, 0.0011072158813476562, 0.00449371337890625, 0.15771484375], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 456, 35, 45, 3311, 91, 27, 301]}
{"line_number": 217, "line_type": "generated", "code": "\n\n    /**\n     * Get a reference to the underlying data array.\n     * <p>This method returns a reference to the underlying data array,\n     * not a copy, so any modification of the returned array will\n     * be reflected in the vector.\n    ", "entropy": 0.42724609375, "is_bug_line": false, "sus_score": 0.5170628428459167, "per_token_entropy": [1.6240234375, 0.06005859375, 0.5498046875, 8.046627044677734e-05, 1.345703125, 0.275390625, 1.0615234375, 0.006580352783203125, 0.049163818359375, 0.93408203125, 0.0703125, 0.05462646484375, 0.0188446044921875, 0.1112060546875, 0.0028858184814453125, 1.552734375, 0.0972900390625, 0.00151824951171875, 1.650390625, 0.019561767578125, 1.6875, 0.268310546875, 0.027923583984375, 0.0008931159973144531, 0.305419921875, 0.06787109375, 0.12200927734375, 0.0023651123046875, 0.98779296875, 0.1331787109375, 0.00015306472778320312, 0.395263671875, 0.00872039794921875, 0.00408935546875, 0.86279296875, 0.341796875, 2.576171875, 0.50537109375, 0.5029296875, 0.46875, 0.13037109375, 0.00408935546875, 0.81982421875, 0.0704345703125, 0.00017595291137695312, 0.984375, 0.009246826171875, 0.148193359375, 0.005519866943359375, 0.06787109375, 0.6279296875, 0.5986328125], "tokens": [446, 1022, 275, 319, 1390, 312, 4121, 372, 322, 13266, 706, 1417, 32, 275, 319, 333, 98, 48, 2272, 1411, 3217, 312, 4121, 372, 322, 13266, 706, 1417, 30, 275, 319, 646, 312, 1933, 30, 1259, 1346, 11401, 432, 322, 4717, 1417, 1098, 275, 319, 526, 43338, 328, 322, 4026, 32, 275]}
{"line_number": 502, "line_type": "original", "code": "        return this;", "entropy": 2.205078125, "is_bug_line": true, "sus_score": 0.5163350105285645, "per_token_entropy": [7.23046875, 1.3759765625, 0.2056884765625, 0.00742340087890625], "tokens": [351, 442, 458, 45]}
{"line_number": 502, "line_type": "generated", "code": "\n    /** {@inheritDoc} */\n    public RealVector mapSignToSelf() {\n        for (int i = 0; i < data.length; i++) {\n            data[i] = Math.signum(data[i]);\n        }\n       ", "entropy": 0.0692138671875, "is_bug_line": true, "sus_score": 0.5163350105285645, "per_token_entropy": [1.4228515625, 0.1964111328125, 0.28759765625, 0.00024318695068359375, 0.00025081634521484375, 0.0014505386352539062, 0.01117706298828125, 0.05242919921875, 0.0462646484375, 0.035125732421875, 0.119140625, 0.048828125, 0.6552734375, 2.5391578674316406e-05, 0.0006899833679199219, 0.005157470703125, 0.010772705078125, 0.041046142578125, 0.0004868507385253906, 0.00018596649169921875, 0.00011324882507324219, 8.96453857421875e-05, 4.780292510986328e-05, 6.902217864990234e-05, 0.0004856586456298828, 6.520748138427734e-05, 0.00013971328735351562, 0.001129150390625, 3.0040740966796875e-05, 1.5854835510253906e-05, 0.00011336803436279297, 0.00891876220703125, 0.0005526542663574219, 0.0007119178771972656, 0.01213836669921875, 0.166748046875, 1.4781951904296875e-05, 3.0279159545898438e-05, 0.0001976490020751953, 0.00437164306640625, 0.41064453125, 0.003040313720703125, 0.0197296142578125, 0.000659942626953125, 0.0002808570861816406, 0.0005788803100585938, 2.1576881408691406e-05, 1.8477439880371094e-05, 0.0006017684936523438, 0.004734039306640625, 8.7738037109375e-05, 0.02783203125], "tokens": [284, 1022, 3088, 18446, 111, 569, 284, 562, 11443, 2863, 1992, 3388, 705, 8171, 346, 301, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 706, 32, 1322, 45, 595, 1987, 301, 324, 706, 77, 91, 79, 280, 4175, 32, 1333, 378, 26, 605, 77, 91, 1989, 291, 320, 291]}
{"line_number": 225, "line_type": "original", "code": "     * @param v1 first vector (will be put in front of the new vector)", "entropy": 0.744140625, "is_bug_line": false, "sus_score": 0.5159530639648438, "per_token_entropy": [5.3359375, 3.748046875, 0.25439453125, 0.2373046875, 0.070556640625, 4.046875, 0.18798828125, 0.031280517578125, 0.1297607421875, 0.01033782958984375, 0.0012874603271484375, 0.0075836181640625, 0.0106964111328125, 0.00656890869140625, 0.023162841796875, 0.0136566162109375, 0.00882720947265625, 0.00807952880859375, 0.0092315673828125], "tokens": [262, 319, 477, 753, 354, 35, 1932, 4026, 308, 11104, 526, 4162, 328, 8432, 432, 322, 537, 4026, 27]}
{"line_number": 225, "line_type": "generated", "code": "\n            return new ArrayRealVector(out, false);\n        }\n    }\n\n    /**\n     * Returns a new vector instance with the adequate data.\n     * @param v vector to add\n     * @return {@code this + v}\n     *", "entropy": 0.2939453125, "is_bug_line": false, "sus_score": 0.5159530639648438, "per_token_entropy": [0.343505859375, 0.14892578125, 0.06549072265625, 0.00211334228515625, 0.0003275871276855469, 8.344650268554688e-07, 0.00045609474182128906, 0.0093231201171875, 0.1751708984375, 0.0325927734375, 0.001964569091796875, 0.028564453125, 0.00012791156768798828, 0.0215911865234375, 0.0002980232238769531, 0.07647705078125, 0.0225067138671875, 0.449951171875, 0.00010061264038085938, 1.466796875, 0.1734619140625, 0.56591796875, 0.33056640625, 0.2998046875, 1.845703125, 1.0869140625, 0.47119140625, 1.7939453125, 0.06005859375, 0.0010623931884765625, 1.2041015625, 0.346435546875, 0.1199951171875, 0.0130462646484375, 0.20361328125, 0.0156097412109375, 0.0086822509765625, 0.459716796875, 0.032379150390625, 0.7080078125, 0.240478515625, 0.01419830322265625, 0.0013895034790039062, 0.024627685546875, 0.93408203125, 0.2890625, 0.05194091796875, 0.373291015625, 0.00144195556640625, 0.02044677734375, 0.0122222900390625, 0.73291015625], "tokens": [324, 442, 537, 2629, 6877, 2863, 26, 541, 30, 901, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 3759, 312, 537, 4026, 1980, 623, 322, 312, 286, 448, 332, 706, 32, 275, 319, 477, 753, 354, 4026, 372, 1015, 275, 319, 477, 601, 3088, 687, 458, 474, 354, 111, 275, 319]}
{"line_number": 499, "line_type": "original", "code": "        for (int i = 0; i < data.length; i++) {", "entropy": 0.62548828125, "is_bug_line": true, "sus_score": 0.5153819918632507, "per_token_entropy": [4.90234375, 6.14453125, 0.0090789794921875, 0.01473236083984375, 0.0535888671875, 0.0032329559326171875, 0.0156707763671875, 0.0015459060668945312, 0.00485992431640625, 0.0006918907165527344, 0.005191802978515625, 0.045684814453125, 0.003993988037109375, 0.0008268356323242188, 0.0031890869140625, 0.004180908203125, 0.0019626617431640625, 0.040496826171875], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 706, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 499, "line_type": "generated", "code": "\n        }\n        return this;\n    }\n\n    /** {@inheritDoc} */\n    public RealVector mapSignumToSelf() {\n        for (int i = 0; i < data.length; i++) {\n            data[i] = Math.sign", "entropy": 0.0311737060546875, "is_bug_line": true, "sus_score": 0.5153819918632507, "per_token_entropy": [0.13671875, 0.215576171875, 0.048797607421875, 0.0026874542236328125, 0.0007214546203613281, 0.0012941360473632812, 0.03302001953125, 0.000759124755859375, 0.2158203125, 0.0150146484375, 0.0487060546875, 0.00012981891632080078, 0.00012505054473876953, 0.001110076904296875, 0.005283355712890625, 0.01446533203125, 0.0240325927734375, 0.0159454345703125, 0.0206756591796875, 0.0248260498046875, 0.367919921875, 0.0001252889633178711, 1.1801719665527344e-05, 0.0009179115295410156, 0.00146484375, 0.028228759765625, 0.00864410400390625, 0.00019037723541259766, 0.00010466575622558594, 4.565715789794922e-05, 5.1856040954589844e-05, 3.504753112792969e-05, 1.5735626220703125e-05, 0.0002065896987915039, 4.124641418457031e-05, 0.00013387203216552734, 0.00045990943908691406, 1.823902130126953e-05, 3.695487976074219e-05, 5.3763389587402344e-05, 0.0018024444580078125, 0.00026226043701171875, 0.0008945465087890625, 0.02764892578125, 0.08990478515625, 1.728534698486328e-05, 4.279613494873047e-05, 9.334087371826172e-05, 0.0009684562683105469, 0.2427978515625, 0.0023651123046875, 0.0196990966796875], "tokens": [291, 320, 291, 442, 458, 45, 284, 320, 446, 1022, 3088, 18446, 111, 569, 284, 562, 11443, 2863, 1992, 3388, 378, 705, 8171, 346, 301, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 706, 32, 1322, 45, 595, 1987, 301, 324, 706, 77, 91, 79, 280, 4175, 32, 1333]}
{"line_number": 213, "line_type": "original", "code": "    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {", "entropy": 0.7373046875, "is_bug_line": false, "sus_score": 0.5119065642356873, "per_token_entropy": [4.23828125, 0.6396484375, 1.1337890625, 0.0017337799072265625, 2.6106834411621094e-05, 0.188720703125, 2.408203125, 0.050689697265625, 0.035400390625, 1.2080078125, 0.045135498046875, 3.08203125, 0.00033020973205566406, 2.1576881408691406e-05, 0.0004851818084716797, 0.0004916191101074219, 0.158203125, 0.08148193359375], "tokens": [264, 562, 2629, 6877, 2863, 26, 6877, 2863, 354, 35, 30, 2629, 6877, 2863, 354, 36, 27, 301]}
{"line_number": 213, "line_type": "generated", "code": "\n    public RealVector append(RealVector v) {\n        return new ArrayRealVector(this, v);\n    }\n\n    /** {@inheritDoc} */", "entropy": 0.1649169921875, "is_bug_line": false, "sus_score": 0.5119065642356873, "per_token_entropy": [0.1136474609375, 0.462890625, 0.56005859375, 0.042449951171875, 0.79150390625, 0.0034084320068359375, 0.437744140625, 0.0002415180206298828, 0.0250701904296875, 0.006000518798828125, 0.0158233642578125, 0.07379150390625, 0.67138671875, 0.435546875, 0.004444122314453125, 0.00286102294921875, 5.960464477539062e-07, 0.0012521743774414062, 0.1881103515625, 0.04803466796875, 0.09014892578125, 0.0909423828125, 0.02496337890625, 0.0007128715515136719, 0.372314453125, 0.015838623046875, 0.4677734375, 3.9458274841308594e-05, 0.00035643577575683594, 0.0027332305908203125], "tokens": [284, 562, 11443, 2863, 5489, 26, 6877, 2863, 354, 27, 301, 291, 442, 537, 2629, 6877, 2863, 26, 578, 30, 354, 293, 284, 320, 446, 1022, 3088, 18446, 111, 569]}
{"line_number": 720, "line_type": "original", "code": "        for (double a : data) {", "entropy": 1.25, "is_bug_line": false, "sus_score": 0.5098388195037842, "per_token_entropy": [4.640625, 3.49609375, 0.0124359130859375, 2.349609375, 0.122314453125, 0.062744140625, 0.47998046875, 0.005767822265625, 0.08111572265625], "tokens": [351, 436, 308, 2627, 312, 499, 706, 27, 301]}
{"line_number": 720, "line_type": "generated", "code": "\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public double getL1Distance(RealVector v)\n        throws IllegalArgumentException {\n        if (v instanceof ArrayRealVector) {\n            return getL1Distance((ArrayRealVector) v);\n        }", "entropy": 0.091064453125, "is_bug_line": false, "sus_score": 0.5098388195037842, "per_token_entropy": [0.67333984375, 0.5361328125, 0.48046875, 0.0183258056640625, 1.01171875, 0.00010442733764648438, 0.000637054443359375, 0.0023555755615234375, 0.01413726806640625, 0.68798828125, 0.001617431640625, 0.007236480712890625, 0.01367950439453125, 0.37451171875, 0.010009765625, 0.00609588623046875, 0.0042877197265625, 1.239776611328125e-05, 0.00012409687042236328, 0.62841796875, 3.337860107421875e-06, 0.0065460205078125, 0.0010776519775390625, 0.0794677734375, 0.00012552738189697266, 0.005340576171875, 0.00447845458984375, 0.0180206298828125, 0.0972900390625, 0.0027027130126953125, 0.0004608631134033203, 0.00786590576171875, 0.0018873214721679688, 1.3470649719238281e-05, 5.960464477539062e-07, 0.0012235641479492188, 0.0007476806640625, 0.0082550048828125, 0.0030994415283203125, 0.00341033935546875, 0.0032958984375, 7.867813110351562e-05, 8.893013000488281e-05, 0.0016908645629882812, 0.00015223026275634766, 3.6954879760742188e-06, 2.384185791015625e-06, 0.00011658668518066406, 0.006221771240234375, 0.0003476142883300781, 0.006740570068359375, 0.0017957687377929688], "tokens": [284, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 2064, 622, 62, 35, 8457, 26, 6877, 2863, 354, 27, 291, 2571, 12137, 301, 291, 415, 308, 104, 5113, 2629, 6877, 2863, 27, 301, 324, 442, 622, 62, 35, 8457, 1162, 1261, 6877, 2863, 27, 354, 293, 291, 320]}
{"line_number": 215, "line_type": "original", "code": "        final int l2 = v2.data.length;", "entropy": 1.427734375, "is_bug_line": false, "sus_score": 0.5089723467826843, "per_token_entropy": [4.15625, 4.203125, 1.39453125, 0.802734375, 2.54296875, 0.0111236572265625, 0.144775390625, 0.025299072265625, 0.0025634765625, 5.26171875, 0.00565338134765625, 0.001068115234375, 0.0113677978515625], "tokens": [351, 1158, 629, 456, 36, 280, 354, 36, 32, 605, 32, 1322, 45]}
{"line_number": 215, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Check if instance and specified object are the same type.\n     * @param object the object to check\n     * @return true if the objects are the same type\n     */\n    private boolean sameType(Object object) {\n        return", "entropy": 0.238037109375, "is_bug_line": false, "sus_score": 0.5089723467826843, "per_token_entropy": [0.154052734375, 0.3125, 0.3564453125, 0.0284881591796875, 0.57861328125, 3.9458274841308594e-05, 1.5341796875, 0.363525390625, 0.1373291015625, 0.0755615234375, 0.380615234375, 0.66650390625, 0.330810546875, 0.59423828125, 0.00624847412109375, 0.2841796875, 0.6513671875, 0.0469970703125, 0.0014867782592773438, 0.09136962890625, 0.003910064697265625, 0.49365234375, 1.1650390625, 0.00429534912109375, 0.0021038055419921875, 0.2138671875, 0.457275390625, 0.0027790069580078125, 0.0026187896728515625, 0.042510986328125, 0.342529296875, 0.032928466796875, 0.308349609375, 0.39404296875, 0.002593994140625, 0.01203155517578125, 0.000400543212890625, 0.0039825439453125, 0.272705078125, 0.0411376953125, 0.0149383544921875, 0.93994140625, 0.0150299072265625, 0.421875, 0.040008544921875, 0.1387939453125, 0.251220703125, 0.00032067298889160156, 0.0179290771484375, 0.0032444000244140625, 0.06951904296875, 0.070068359375], "tokens": [284, 320, 446, 1022, 275, 319, 3456, 415, 1980, 461, 3191, 1300, 884, 322, 2432, 827, 32, 275, 319, 477, 753, 1300, 322, 1300, 372, 1505, 275, 319, 477, 601, 861, 415, 322, 4684, 884, 322, 2432, 827, 275, 569, 284, 945, 1905, 2432, 620, 26, 959, 1300, 27, 301, 291, 442]}
{"line_number": 713, "line_type": "original", "code": "        return sum;", "entropy": 3.96875, "is_bug_line": false, "sus_score": 0.5083480477333069, "per_token_entropy": [5.296875, 1.5673828125, 8.8046875, 0.2093505859375], "tokens": [351, 442, 3632, 45]}
{"line_number": 713, "line_type": "generated", "code": "\n     */\n    public double getDistance(ArrayRealVector v)\n        throws IllegalArgumentException {\n        return getDistance(v.data);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public RealVector unitVector() {\n        return mapDivide(data,", "entropy": 0.1771240234375, "is_bug_line": false, "sus_score": 0.5083480477333069, "per_token_entropy": [1.310546875, 0.140380859375, 0.04150390625, 0.036834716796875, 0.005382537841796875, 0.04443359375, 0.006832122802734375, 0.001216888427734375, 0.006732940673828125, 0.0001251697540283203, 4.76837158203125e-07, 0.00019502639770507812, 0.0014905929565429688, 0.059722900390625, 0.0002932548522949219, 0.0019502639770507812, 0.011077880859375, 0.07147216796875, 0.39208984375, 0.28173828125, 0.0016412734985351562, 0.0019741058349609375, 0.0009918212890625, 0.0005426406860351562, 0.00646209716796875, 0.0016231536865234375, 0.041046142578125, 0.0010957717895507812, 0.36572265625, 0.0306549072265625, 0.83740234375, 0.00021886825561523438, 0.0007333755493164062, 0.00423431396484375, 0.02117919921875, 0.476806640625, 0.0012683868408203125, 0.015594482421875, 0.034515380859375, 0.495361328125, 0.01428985595703125, 0.59326171875, 0.08831787109375, 0.00850677490234375, 0.469970703125, 0.06475830078125, 1.6337890625, 0.80517578125, 0.04742431640625, 0.16259765625, 0.5400390625, 0.03253173828125], "tokens": [275, 569, 284, 562, 2064, 622, 8457, 26, 1261, 6877, 2863, 354, 27, 291, 2571, 12137, 301, 291, 442, 622, 8457, 26, 104, 32, 605, 293, 284, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 11443, 2863, 4201, 2863, 346, 301, 291, 442, 1992, 38518, 26, 605, 30]}
