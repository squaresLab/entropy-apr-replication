{"line_number": 1391, "line_type": "original", "code": "        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2", "entropy": 1.17578125, "is_bug_line": false, "sus_score": 0.7057057023048401, "per_token_entropy": [6.11328125, 7.484375, 0.0496826171875, 5.76171875, 0.69091796875, 0.0043182373046875, 0.049652099609375, 0.0256500244140625, 0.0010395050048828125, 0.58544921875, 0.46728515625, 0.0008635520935058594, 0.007724761962890625, 0.006153106689453125, 0.003326416015625, 0.54052734375, 1.4970703125, 0.007717132568359375, 0.1363525390625, 0.02252197265625, 0.006557464599609375, 5.69921875, 0.0008635520935058594, 1.8564453125, 2.755859375, 0.09326171875, 1.2080078125, 0.187744140625, 0.0038585662841796875, 0.00066375732421875], "tokens": [351, 1015, 26, 2868, 35, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 293, 423, 434, 816, 80, 36, 474, 533, 80, 36]}
{"line_number": 1391, "line_type": "generated", "code": "\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset", "entropy": 0.01392364501953125, "is_bug_line": false, "sus_score": 0.7057057023048401, "per_token_entropy": [0.160400390625, 0.0111846923828125, 0.080078125, 0.0082244873046875, 0.0684814453125, 0.0168609619140625, 0.0003132820129394531, 0.00792694091796875, 0.001949310302734375, 0.0012664794921875, 0.003078460693359375, 6.508827209472656e-05, 0.0001558065414428711, 1.1563301086425781e-05, 0.00024008750915527344, 0.0013027191162109375, 3.814697265625e-05, 0.0017671585083007812, 2.3603439331054688e-05, 0.00023925304412841797, 6.020069122314453e-05, 0.001010894775390625, 0.02099609375, 0.0001024007797241211, 0.02362060546875, 0.002071380615234375, 0.0992431640625, 0.1322021484375, 0.0003046989440917969, 1.1920928955078125e-06, 0.0635986328125, 4.303455352783203e-05, 0.0016393661499023438, 0.0015230178833007812, 0.0006155967712402344, 0.0004208087921142578, 0.0015859603881835938, 0.001171112060546875, 2.7298927307128906e-05, 0.00525665283203125, 1.0013580322265625e-05, 0.0007405281066894531, 0.0002663135528564453, 0.000637054443359375, 0.0002269744873046875, 0.0014390945434570312, 0.00021135807037353516, 7.867813110351562e-05, 5.424022674560547e-05, 8.702278137207031e-06, 0.0013895034790039062, 0.00010764598846435547], "tokens": [291, 320, 584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293, 446, 320, 446, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457]}
{"line_number": 757, "line_type": "original", "code": "", "entropy": 3.662109375, "is_bug_line": false, "sus_score": 0.7047131061553955, "per_token_entropy": [3.662109375], "tokens": [203]}
{"line_number": 757, "line_type": "generated", "code": "\n                     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void remainder(final double[] lhs, final int lhsOffset,\n                          final double[] rhs, final int rhsOffset,\n                          final double", "entropy": 0.079345703125, "is_bug_line": false, "sus_score": 0.7047131061553955, "per_token_entropy": [1.9580078125, 0.7080078125, 0.156005859375, 0.002704620361328125, 0.00039577484130859375, 0.003147125244140625, 0.003871917724609375, 0.06549072265625, 0.1610107421875, 0.0016775131225585938, 0.00037288665771484375, 7.975101470947266e-05, 0.00015354156494140625, 6.103515625e-05, 0.0001081228256225586, 7.402896881103516e-05, 4.398822784423828e-05, 0.0009512901306152344, 0.00015783309936523438, 0.00013947486877441406, 0.00010466575622558594, 0.044647216796875, 0.04486083984375, 0.034515380859375, 0.0024280548095703125, 0.0023632049560546875, 0.0026073455810546875, 0.0011157989501953125, 0.00269317626953125, 0.0016508102416992188, 0.0005578994750976562, 0.0006389617919921875, 3.695487976074219e-05, 0.0069732666015625, 3.4809112548828125e-05, 5.161762237548828e-05, 3.4332275390625e-05, 2.849102020263672e-05, 0.9013671875, 0.00018489360809326172, 0.00028133392333984375, 0.0002624988555908203, 3.4809112548828125e-05, 1.2159347534179688e-05, 0.0007920265197753906, 4.887580871582031e-05, 3.3020973205566406e-05, 4.410743713378906e-06, 5.805492401123047e-05, 0.0097198486328125, 0.0028438568115234375, 0.0004887580871582031], "tokens": [3486, 319, 1591, 432, 322, 1509, 12051, 27, 275, 319, 477, 753, 1056, 3457, 3401, 432, 322, 1056, 328, 2819, 1417, 275, 569, 284, 562, 763, 27103, 26, 3220, 2064, 1178, 16020, 30, 1158, 629, 16020, 3457, 30, 3775, 1158, 2064, 1178, 9322, 30, 1158, 629, 9322, 3457, 30, 3775, 1158, 2064]}
{"line_number": 1399, "line_type": "original", "code": "            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))", "entropy": 1.259765625, "is_bug_line": false, "sus_score": 0.7030153274536133, "per_token_entropy": [8.3828125, 10.0, 1.083984375, 9.0, 0.252685546875, 0.134033203125, 0.07806396484375, 0.0024814605712890625, 0.00202178955078125, 0.0418701171875, 0.0614013671875, 0.0022907257080078125, 0.0018978118896484375, 0.00264739990234375, 0.01033782958984375, 1.1171875, 0.0058135986328125, 0.02899169921875, 0.024993896484375, 0.187255859375, 0.00972747802734375, 0.0088958740234375, 0.007411956787109375, 2.28125, 0.0010528564453125, 0.007110595703125], "tokens": [1468, 43191, 26, 2868, 35, 30, 225, 34, 30, 3691, 36, 30, 225, 34, 293, 6022, 434, 43191, 26, 107, 517, 308, 100, 474, 816, 490]}
{"line_number": 1399, "line_type": "generated", "code": "\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic sine the result array <em>cannot</em>", "entropy": 0.01049041748046875, "is_bug_line": false, "sus_score": 0.7030153274536133, "per_token_entropy": [0.2445068359375, 0.0054473876953125, 0.0175628662109375, 0.001102447509765625, 0.006805419921875, 0.001972198486328125, 0.0015096664428710938, 0.00074005126953125, 0.003997802734375, 0.0660400390625, 0.00018203258514404297, 0.00034928321838378906, 6.794929504394531e-05, 0.004619598388671875, 0.00017964839935302734, 0.00018143653869628906, 7.355213165283203e-05, 7.76052474975586e-05, 0.0003802776336669922, 7.331371307373047e-05, 0.0004203319549560547, 0.0002741813659667969, 0.051361083984375, 0.00028634071350097656, 0.0008873939514160156, 0.0012617111206054688, 0.0003986358642578125, 0.0003178119659423828, 7.49826431274414e-05, 0.0008797645568847656, 0.0001367330551147461, 0.00014662742614746094, 0.00014078617095947266, 0.004730224609375, 0.00046563148498535156, 0.01953125, 8.594989776611328e-05, 0.00409698486328125, 0.0003190040588378906, 1.5497207641601562e-06, 0.09893798828125, 4.315376281738281e-05, 0.0014219284057617188, 0.00021696090698242188, 0.0003070831298828125, 0.0022678375244140625, 3.933906555175781e-06, 7.259845733642578e-05, 0.00030922889709472656, 0.0002313852310180664, 3.6597251892089844e-05, 2.3126602172851562e-05], "tokens": [275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84, 2073, 309, 482, 322, 1056, 1417, 333, 405, 48, 18506, 377, 405, 48]}
{"line_number": 1392, "line_type": "original", "code": "        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)", "entropy": 1.8046875, "is_bug_line": false, "sus_score": 0.701424241065979, "per_token_entropy": [7.30078125, 12.7578125, 1.0986328125, 1.0224609375, 6.609375, 2.306640625, 0.0592041015625, 0.85302734375, 0.055999755859375, 0.0272979736328125, 3.275390625, 1.6123046875, 1.2119140625, 3.15234375, 0.489501953125, 0.138671875, 0.03472900390625, 0.0246124267578125, 0.55078125, 5.9609375, 0.0006136894226074219, 5.82421875, 0.51806640625, 0.419189453125, 0.03765869140625, 0.8017578125, 0.6552734375, 0.0008263587951660156, 0.46142578125, 2.26171875, 0.0016527175903320312, 0.0003771781921386719, 0.052215576171875], "tokens": [351, 3051, 64, 26, 2868, 36, 30, 225, 34, 30, 225, 36, 30, 3691, 35, 30, 225, 34, 293, 6022, 434, 540, 280, 17058, 26, 106, 80, 36, 474, 533, 80, 36, 27]}
{"line_number": 1392, "line_type": "generated", "code": "\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of", "entropy": 0.0117645263671875, "is_bug_line": false, "sus_score": 0.701424241065979, "per_token_entropy": [0.08172607421875, 0.046661376953125, 0.09326171875, 0.021392822265625, 0.0003731250762939453, 0.0105743408203125, 0.003192901611328125, 0.0022792816162109375, 0.0033054351806640625, 7.95125961303711e-05, 0.00017309188842773438, 1.537799835205078e-05, 0.0002357959747314453, 0.0016832351684570312, 4.208087921142578e-05, 0.00182342529296875, 2.5391578674316406e-05, 0.00025963783264160156, 7.43865966796875e-05, 0.0011320114135742188, 0.0196075439453125, 0.00010514259338378906, 0.024322509765625, 0.0021305084228515625, 0.09564208984375, 0.1195068359375, 0.000278472900390625, 1.3113021850585938e-06, 0.06463623046875, 4.076957702636719e-05, 0.0016584396362304688, 0.0014781951904296875, 0.000659942626953125, 0.0003886222839355469, 0.00156402587890625, 0.0011615753173828125, 1.9073486328125e-05, 0.0048065185546875, 1.0728836059570312e-05, 0.0007748603820800781, 0.0002524852752685547, 0.0006175041198730469, 0.00023365020751953125, 0.00151824951171875, 0.0002027750015258789, 8.07046890258789e-05, 6.651878356933594e-05, 5.245208740234375e-06, 0.001377105712890625, 0.00010371208190917969, 0.00010061264038085938, 1.3828277587890625e-05], "tokens": [584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293, 446, 320, 446, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432]}
{"line_number": 1387, "line_type": "original", "code": "        double[] tmp1 = new double[getSize()];", "entropy": 1.3603515625, "is_bug_line": false, "sus_score": 0.7013265490531921, "per_token_entropy": [5.7890625, 3.271484375, 1.2900390625, 2.236328125, 1.4580078125, 0.0748291015625, 0.03369140625, 0.0006241798400878906, 0.0031452178955078125, 0.81005859375, 0.003154754638671875], "tokens": [351, 2064, 1178, 3691, 35, 280, 537, 2064, 77, 24619, 22086]}
{"line_number": 1387, "line_type": "generated", "code": "\n            for (int i = 1; i <= order; ++i) {\n                function[i] = operand[operandOffset + i];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, result", "entropy": 0.1668701171875, "is_bug_line": false, "sus_score": 0.7013265490531921, "per_token_entropy": [0.06927490234375, 2.041015625, 0.0018968582153320312, 0.00194549560546875, 0.79248046875, 0.0009694099426269531, 0.041595458984375, 0.92822265625, 0.01165771484375, 0.0010385513305664062, 0.2056884765625, 0.020721435546875, 0.03411865234375, 0.057586669921875, 0.0007047653198242188, 0.0021381378173828125, 0.001407623291015625, 0.02642822265625, 0.184814453125, 0.0014314651489257812, 0.0201416015625, 0.0033054351806640625, 0.0039215087890625, 2.75, 0.0110015869140625, 0.01210784912109375, 7.152557373046875e-05, 0.031494140625, 0.1483154296875, 0.70654296875, 0.0616455078125, 0.0005578994750976562, 0.1400146484375, 0.00046133995056152344, 0.07403564453125, 0.01488494873046875, 0.15478515625, 0.015350341796875, 0.00039505958557128906, 0.017333984375, 0.00406646728515625, 0.003429412841796875, 0.072021484375, 0.0002512931823730469, 0.0002720355987548828, 1.621246337890625e-05, 0.0008563995361328125, 0.0025119781494140625, 9.28640365600586e-05, 0.00428009033203125, 2.4437904357910156e-05, 0.00028586387634277344], "tokens": [324, 436, 308, 410, 595, 280, 225, 35, 45, 595, 2511, 2532, 45, 3311, 91, 27, 301, 400, 667, 77, 91, 79, 280, 19236, 77, 14065, 3457, 474, 595, 970, 324, 320, 291, 320, 584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056]}
{"line_number": 1389, "line_type": "original", "code": "        double[] tmp2 = new double[getSize()];", "entropy": 1.9814453125, "is_bug_line": false, "sus_score": 0.7011052966117859, "per_token_entropy": [6.5703125, 5.4453125, 2.8984375, 1.03515625, 4.2109375, 0.0950927734375, 0.16796875, 0.0014657974243164062, 0.0080413818359375, 1.3544921875, 0.0026397705078125], "tokens": [351, 2064, 1178, 3691, 36, 280, 537, 2064, 77, 24619, 22086]}
{"line_number": 1389, "line_type": "generated", "code": "\n                function[i] = function[i - 1] * (i - 1) * function[1] / i;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);", "entropy": 0.108154296875, "is_bug_line": false, "sus_score": 0.7011052966117859, "per_token_entropy": [0.0640869140625, 0.31787109375, 0.0005307197570800781, 0.00702667236328125, 0.003910064697265625, 0.006519317626953125, 0.93359375, 0.003002166748046875, 0.028656005859375, 0.04766845703125, 0.00038170814514160156, 0.3349609375, 0.043304443359375, 0.00972747802734375, 1.1826171875, 0.309326171875, 0.0169830322265625, 0.0008993148803710938, 0.00284576416015625, 0.1600341796875, 0.734375, 0.59326171875, 0.0011320114135742188, 0.023193359375, 0.1522216796875, 0.07781982421875, 0.155517578125, 0.190185546875, 0.08575439453125, 0.00011527538299560547, 0.031585693359375, 0.00010073184967041016, 0.0281524658203125, 0.003971099853515625, 0.042938232421875, 0.01363372802734375, 0.0002524852752685547, 0.005863189697265625, 0.0018835067749023438, 0.001064300537109375, 0.002208709716796875, 8.738040924072266e-05, 0.00016236305236816406, 1.1920928955078125e-05, 0.00022530555725097656, 0.0010509490966796875, 4.112720489501953e-05, 0.0012998580932617188, 2.586841583251953e-05, 0.00017642974853515625, 5.9723854064941406e-05, 0.000736236572265625], "tokens": [400, 667, 77, 91, 79, 280, 667, 77, 91, 429, 225, 35, 79, 319, 308, 91, 429, 225, 35, 27, 319, 667, 77, 35, 79, 517, 595, 45, 324, 320, 291, 320, 584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293]}
{"line_number": 1398, "line_type": "original", "code": "            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)", "entropy": 0.8564453125, "is_bug_line": false, "sus_score": 0.7010979056358337, "per_token_entropy": [8.453125, 9.9375, 0.1082763671875, 2.298828125, 0.0222930908203125, 0.0433349609375, 0.001087188720703125, 0.003154754638671875, 0.2353515625, 0.2276611328125, 0.0012226104736328125, 0.005008697509765625, 0.002391815185546875, 0.001934051513671875, 0.0438232421875, 0.02276611328125, 0.0014753341674804688, 0.0013103485107421875, 0.00029277801513671875, 0.00589752197265625, 0.22998046875, 0.0021648406982421875, 0.016998291015625, 0.006908416748046875, 0.06610107421875, 0.0088348388671875, 3.080078125, 0.005016326904296875, 0.0118560791015625], "tokens": [1468, 24910, 26, 107, 30, 533, 3457, 30, 3691, 36, 30, 225, 34, 30, 3691, 35, 30, 225, 34, 293, 958, 434, 533, 517, 26, 100, 474, 816, 27]}
{"line_number": 1398, "line_type": "generated", "code": "\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperb", "entropy": 0.0477294921875, "is_bug_line": false, "sus_score": 0.7010979056358337, "per_token_entropy": [1.8125, 0.030975341796875, 0.1690673828125, 0.3046875, 0.0003216266632080078, 2.9802322387695312e-06, 0.122802734375, 8.559226989746094e-05, 0.002735137939453125, 0.003509521484375, 0.0021648406982421875, 0.0006284713745117188, 0.0030651092529296875, 0.00350189208984375, 2.8967857360839844e-05, 0.00788116455078125, 2.4199485778808594e-05, 0.0012493133544921875, 0.00028586387634277344, 0.0007200241088867188, 0.0003814697265625, 0.0015058517456054688, 0.0002551078796386719, 7.104873657226562e-05, 3.993511199951172e-05, 1.2993812561035156e-05, 0.00180816650390625, 0.00010120868682861328, 8.809566497802734e-05, 5.364418029785156e-05, 6.079673767089844e-06, 0.00018107891082763672, 5.459785461425781e-05, 0.00023806095123291016, 6.127357482910156e-05, 0.00015652179718017578, 8.726119995117188e-05, 0.0002665519714355469, 0.0002301931381225586, 9.632110595703125e-05, 0.0001163482666015625, 2.6106834411621094e-05, 0.00033974647521972656, 7.045269012451172e-05, 6.35385513305664e-05, 8.320808410644531e-05, 0.0026378631591796875, 0.0002593994140625, 0.004550933837890625, 0.0001342296600341797, 0.0017948150634765625, 0.0002522468566894531], "tokens": [446, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84]}
{"line_number": 758, "line_type": "original", "code": "    /** Perform multiplication of two derivative structures.", "entropy": 1.86328125, "is_bug_line": false, "sus_score": 0.6984038949012756, "per_token_entropy": [4.80859375, 5.24609375, 0.7578125, 3.951171875, 0.389404296875, 1.1875, 0.07220458984375, 0.08709716796875, 0.271728515625], "tokens": [264, 1022, 19665, 38373, 432, 3134, 27640, 16495, 32]}
{"line_number": 758, "line_type": "generated", "code": "\n     * @param resultOffset offset of the result in its array\n     */\n    public void remainder(final double[] lhs, final int lhsOffset,\n                         final double[] rhs, final int rhsOffset,\n                         final double[] result, final int resultOffset)", "entropy": 0.014984130859375, "is_bug_line": false, "sus_score": 0.6984038949012756, "per_token_entropy": [0.07403564453125, 0.2109375, 0.004924774169921875, 0.006443023681640625, 0.0018558502197265625, 0.0009064674377441406, 0.0002677440643310547, 0.00014412403106689453, 5.2809715270996094e-05, 0.0024318695068359375, 0.0002727508544921875, 0.0002281665802001953, 0.0001424551010131836, 0.06451416015625, 0.02606201171875, 0.035736083984375, 0.0026416778564453125, 0.00328826904296875, 0.0026836395263671875, 0.0011510848999023438, 0.003452301025390625, 0.0020046234130859375, 0.0004949569702148438, 0.0010433197021484375, 7.045269012451172e-05, 0.005748748779296875, 4.6372413635253906e-05, 7.176399230957031e-05, 3.1948089599609375e-05, 2.6106834411621094e-05, 0.296142578125, 0.00045752525329589844, 0.00036978721618652344, 0.000576019287109375, 4.279613494873047e-05, 2.193450927734375e-05, 0.001255035400390625, 5.257129669189453e-05, 2.8133392333984375e-05, 4.291534423828125e-06, 0.00010943412780761719, 0.0186920166015625, 0.0033893585205078125, 0.0009055137634277344, 0.0004639625549316406, 0.0001589059829711914, 0.00022470951080322266, 0.0029087066650390625, 2.0384788513183594e-05, 4.363059997558594e-05, 1.7762184143066406e-05, 0.0019283294677734375], "tokens": [275, 319, 477, 753, 1056, 3457, 3401, 432, 322, 1056, 328, 2819, 1417, 275, 569, 284, 562, 763, 27103, 26, 3220, 2064, 1178, 16020, 30, 1158, 629, 16020, 3457, 30, 656, 1158, 2064, 1178, 9322, 30, 1158, 629, 9322, 3457, 30, 656, 1158, 2064, 1178, 1056, 30, 1158, 629, 1056, 3457, 27]}
{"line_number": 1397, "line_type": "original", "code": "            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x", "entropy": 1.0126953125, "is_bug_line": false, "sus_score": 0.688772439956665, "per_token_entropy": [8.0859375, 5.78515625, 0.11566162109375, 1.4111328125, 0.437255859375, 0.0036468505859375, 0.01971435546875, 0.01313018798828125, 0.0012416839599609375, 2.154296875, 0.03009033203125, 0.024993896484375, 0.0006957054138183594, 0.001857757568359375, 0.0950927734375, 0.65673828125, 0.0009336471557617188, 0.01227569580078125, 0.0023937225341796875, 0.004268646240234375, 5.0234375, 0.01708984375, 1.17578125, 0.25048828125, 0.01149749755859375], "tokens": [1468, 1015, 26, 2868, 35, 30, 225, 34, 30, 816, 30, 816, 3457, 30, 3691, 36, 30, 225, 34, 293, 2033, 434, 540, 474, 816]}
{"line_number": 1397, "line_type": "generated", "code": "\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperb", "entropy": 0.024200439453125, "is_bug_line": false, "sus_score": 0.688772439956665, "per_token_entropy": [0.64453125, 0.036224365234375, 0.148681640625, 0.240966796875, 0.0003292560577392578, 3.2186508178710938e-06, 0.1446533203125, 7.295608520507812e-05, 0.002719879150390625, 0.0031375885009765625, 0.0022716522216796875, 0.0006451606750488281, 0.003040313720703125, 0.004764556884765625, 6.520748138427734e-05, 0.00875091552734375, 3.886222839355469e-05, 0.0012445449829101562, 0.00031948089599609375, 0.0007452964782714844, 0.0002982616424560547, 0.0014429092407226562, 0.0002722740173339844, 5.8770179748535156e-05, 0.00023126602172851562, 3.0994415283203125e-06, 0.001811981201171875, 9.930133819580078e-05, 8.881092071533203e-05, 4.9233436584472656e-05, 6.794929504394531e-06, 0.00018537044525146484, 5.5789947509765625e-05, 0.00022411346435546875, 5.4836273193359375e-05, 0.00017547607421875, 7.128715515136719e-05, 0.00020825862884521484, 0.0002503395080566406, 0.00011396408081054688, 0.00010728836059570312, 2.288818359375e-05, 0.0003139972686767578, 6.413459777832031e-05, 0.00013828277587890625, 9.369850158691406e-05, 0.0026454925537109375, 0.00026607513427734375, 0.0035381317138671875, 0.00012695789337158203, 0.0019245147705078125, 0.00028777122497558594], "tokens": [284, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84]}
{"line_number": 1390, "line_type": "original", "code": "        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2", "entropy": 1.2431640625, "is_bug_line": false, "sus_score": 0.6871591210365295, "per_token_entropy": [4.29296875, 9.5703125, 0.041473388671875, 5.44140625, 0.0872802734375, 0.1270751953125, 0.0016050338745117188, 0.0100250244140625, 2.17578125, 0.0155181884765625, 0.01206207275390625, 0.0004286766052246094, 0.004917144775390625, 0.6396484375, 2.390625, 0.007381439208984375, 0.043182373046875, 0.0033283233642578125, 0.00734710693359375, 2.38671875, 0.003154754638671875, 0.60107421875, 1.5693359375, 0.396728515625], "tokens": [351, 22213, 26, 107, 30, 533, 3457, 30, 533, 30, 533, 3457, 30, 3691, 36, 30, 225, 34, 293, 647, 434, 533, 80, 36]}
{"line_number": 1390, "line_type": "generated", "code": "\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param", "entropy": 0.0129241943359375, "is_bug_line": false, "sus_score": 0.6871591210365295, "per_token_entropy": [0.11956787109375, 0.00032258033752441406, 0.0712890625, 0.00011014938354492188, 0.0289154052734375, 0.00399017333984375, 0.052978515625, 0.016632080078125, 0.0002846717834472656, 0.00689697265625, 0.0018558502197265625, 0.0011768341064453125, 0.0029125213623046875, 7.545948028564453e-05, 0.0001647472381591797, 1.0967254638671875e-05, 0.00023555755615234375, 0.0014781951904296875, 3.802776336669922e-05, 0.0017366409301757812, 2.6702880859375e-05, 0.00021386146545410156, 6.103515625e-05, 0.0007648468017578125, 0.01351165771484375, 7.736682891845703e-05, 0.021942138671875, 0.00223541259765625, 0.10107421875, 0.1385498046875, 0.00030517578125, 1.3113021850585938e-06, 0.0660400390625, 4.076957702636719e-05, 0.001781463623046875, 0.0016736984252929688, 0.0006885528564453125, 0.0004467964172363281, 0.0016431808471679688, 0.00116729736328125, 2.2649765014648438e-05, 0.004787445068359375, 9.417533874511719e-06, 0.0008606910705566406, 0.0002613067626953125, 0.000637054443359375, 0.0002772808074951172, 0.0015134811401367188, 0.00020694732666015625, 9.262561798095703e-05, 5.1021575927734375e-05, 2.8967857360839844e-05], "tokens": [324, 320, 291, 320, 584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293, 446, 320, 446, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753]}
{"line_number": 1400, "line_type": "original", "code": "            for (int i = 0; i < tmp2.length; ++i) {", "entropy": 0.9326171875, "is_bug_line": false, "sus_score": 0.6860960125923157, "per_token_entropy": [6.13671875, 6.5078125, 0.381103515625, 0.0161590576171875, 0.32763671875, 0.005817413330078125, 0.1873779296875, 0.036102294921875, 0.032958984375, 0.003406524658203125, 0.040618896484375, 3.431640625, 1.34765625, 0.0175018310546875, 0.006877899169921875, 0.016204833984375, 0.035308837890625, 0.0016193389892578125, 0.0036334991455078125, 0.1204833984375], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 3691, 36, 32, 1322, 45, 3311, 91, 27, 301]}
{"line_number": 1400, "line_type": "generated", "code": "\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic sine the result array <em>cannot</em> be the input\n     * array)\n     *", "entropy": 0.020721435546875, "is_bug_line": false, "sus_score": 0.6860960125923157, "per_token_entropy": [0.426513671875, 0.0264434814453125, 0.002685546875, 0.0007953643798828125, 0.0701904296875, 0.001377105712890625, 0.0008568763732910156, 0.0001785755157470703, 0.00015914440155029297, 0.0015201568603515625, 0.0010652542114257812, 0.0006918907165527344, 0.0004940032958984375, 0.254150390625, 0.0005450248718261719, 0.0007119178771972656, 0.0011720657348632812, 0.0008082389831542969, 0.00045943260192871094, 9.703636169433594e-05, 0.0012216567993164062, 0.00018906593322753906, 9.059906005859375e-06, 0.0001577138900756836, 0.00807952880859375, 0.0005688667297363281, 0.0159912109375, 5.91278076171875e-05, 0.0038814544677734375, 0.0003666877746582031, 6.198883056640625e-06, 0.09222412109375, 3.5881996154785156e-05, 0.001316070556640625, 0.00022304058074951172, 0.0003199577331542969, 0.0029201507568359375, 3.5762786865234375e-06, 7.140636444091797e-05, 0.0003743171691894531, 0.00028896331787109375, 6.318092346191406e-05, 8.0108642578125e-05, 0.00809478759765625, 0.0030612945556640625, 0.00921630859375, 0.07061767578125, 1.7523765563964844e-05, 0.0009307861328125, 0.0024280548095703125, 0.0626220703125, 0.0010251998901367188], "tokens": [275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 19236, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 15223, 84, 2073, 309, 482, 322, 1056, 1417, 333, 405, 48, 18506, 377, 405, 48, 526, 322, 1509, 275, 319, 1417, 27, 275, 319]}
{"line_number": 1388, "line_type": "original", "code": "        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2", "entropy": 1.205078125, "is_bug_line": false, "sus_score": 0.6853147745132446, "per_token_entropy": [4.50390625, 8.1484375, 0.00988006591796875, 6.9921875, 0.03662109375, 0.220458984375, 0.00189208984375, 0.0045318603515625, 3.26953125, 0.010498046875, 0.010955810546875, 0.00028014183044433594, 0.00244903564453125, 1.5322265625, 0.78955078125, 0.00868988037109375, 0.04345703125, 0.0026092529296875, 0.003582000732421875, 2.390625, 0.0010881423950195312, 0.2255859375, 0.666015625, 0.044677734375], "tokens": [351, 22213, 26, 106, 30, 816, 3457, 30, 816, 30, 816, 3457, 30, 3691, 35, 30, 225, 34, 293, 647, 434, 816, 80, 36]}
{"line_number": 1388, "line_type": "generated", "code": "\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset", "entropy": 0.0266265869140625, "is_bug_line": false, "sus_score": 0.6853147745132446, "per_token_entropy": [0.74609375, 0.0025959014892578125, 0.1981201171875, 0.0094146728515625, 0.062744140625, 0.01232147216796875, 0.00029969215393066406, 0.0068817138671875, 0.0021724700927734375, 0.0013647079467773438, 0.00531768798828125, 7.009506225585938e-05, 0.00017333030700683594, 1.1205673217773438e-05, 0.00042891502380371094, 0.0012693405151367188, 4.100799560546875e-05, 0.0018205642700195312, 2.7179718017578125e-05, 0.00023984909057617188, 7.641315460205078e-05, 0.0008001327514648438, 0.01229095458984375, 0.00010859966278076172, 0.0187225341796875, 0.0017004013061523438, 0.091796875, 0.1314697265625, 0.0002720355987548828, 1.1920928955078125e-06, 0.060333251953125, 4.374980926513672e-05, 0.0016889572143554688, 0.0015716552734375, 0.0005717277526855469, 0.0004076957702636719, 0.0014705657958984375, 0.0009860992431640625, 3.981590270996094e-05, 0.004558563232421875, 9.059906005859375e-06, 0.0006542205810546875, 0.00023627281188964844, 0.0004506111145019531, 0.00025153160095214844, 0.00139617919921875, 0.00019931793212890625, 8.356571197509766e-05, 6.341934204101562e-05, 2.1457672119140625e-05, 0.0012350082397460938, 9.059906005859375e-05], "tokens": [291, 320, 584, 434, 4871, 667, 25652, 291, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293, 446, 320, 446, 1022, 12836, 15223, 84, 2073, 309, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 322, 19236, 275, 319, 477, 753, 19236, 3457]}
{"line_number": 759, "line_type": "original", "code": "     * @param lhs array holding left hand side of multiplication", "entropy": 1.5810546875, "is_bug_line": false, "sus_score": 0.6773901581764221, "per_token_entropy": [4.1484375, 3.638671875, 0.1788330078125, 0.62548828125, 4.83984375, 1.3525390625, 0.043182373046875, 0.0237884521484375, 0.0019254684448242188, 0.0052947998046875, 0.0225067138671875, 4.08984375], "tokens": [262, 319, 477, 753, 16020, 1417, 21843, 2841, 4091, 5209, 432, 38373]}
{"line_number": 759, "line_type": "generated", "code": "\n     */\n    public void remainder(final double[] lhs, final int lhsOffset,\n                         final double[] rhs, final int rhsOffset,\n                         final double[] result, final int resultOffset) {\n        for (int i = 0; i < get", "entropy": 0.02362060546875, "is_bug_line": false, "sus_score": 0.6773901581764221, "per_token_entropy": [0.156982421875, 0.044708251953125, 0.00400543212890625, 0.005893707275390625, 0.004184722900390625, 0.0019292831420898438, 0.0014095306396484375, 0.003574371337890625, 0.003200531005859375, 0.000885009765625, 0.000782012939453125, 6.473064422607422e-05, 0.006755828857421875, 8.022785186767578e-05, 9.85860824584961e-05, 4.3272972106933594e-05, 7.62939453125e-06, 0.2061767578125, 0.0003674030303955078, 0.0004968643188476562, 0.00048041343688964844, 4.3511390686035156e-05, 1.9431114196777344e-05, 0.0011796951293945312, 5.2809715270996094e-05, 3.147125244140625e-05, 4.5299530029296875e-06, 2.8848648071289062e-05, 0.0009965896606445312, 0.0018243789672851562, 0.0008134841918945312, 0.000492095947265625, 0.0002789497375488281, 0.00012159347534179688, 0.0017786026000976562, 2.9802322387695312e-05, 6.091594696044922e-05, 2.6106834411621094e-05, 0.0012264251708984375, 0.0038127899169921875, 0.1280517578125, 0.45458984375, 0.00042319297790527344, 0.0009074211120605469, 0.00518035888671875, 0.0003533363342285156, 0.002227783203125, 0.0006475448608398438, 0.0011377334594726562, 0.00029397010803222656, 0.00024580955505371094, 0.179443359375], "tokens": [275, 569, 284, 562, 763, 27103, 26, 3220, 2064, 1178, 16020, 30, 1158, 629, 16020, 3457, 30, 656, 1158, 2064, 1178, 9322, 30, 1158, 629, 9322, 3457, 30, 656, 1158, 2064, 1178, 1056, 30, 1158, 629, 1056, 3457, 27, 301, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 622]}
{"line_number": 1329, "line_type": "original", "code": "        function[0] = FastMath.atan(x);", "entropy": 2.904296875, "is_bug_line": false, "sus_score": 0.675171434879303, "per_token_entropy": [5.23828125, 16.234375, 1.8837890625, 1.650390625, 0.13623046875, 0.2578125, 3.5, 0.00017464160919189453, 0.0007390975952148438, 0.03216552734375, 3.92578125, 1.283203125, 3.609375], "tokens": [351, 667, 77, 34, 79, 280, 15938, 5717, 32, 7708, 26, 106, 293]}
{"line_number": 1329, "line_type": "generated", "code": "\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                     final double[] x, final int xOffset,\n                     final double", "entropy": 0.04425048828125, "is_bug_line": false, "sus_score": 0.675171434879303, "per_token_entropy": [0.98486328125, 0.0706787109375, 0.0269927978515625, 0.0024852752685546875, 0.04705810546875, 0.08746337890625, 0.02020263671875, 0.01308441162109375, 0.0098114013671875, 0.0002453327178955078, 0.00023472309112548828, 0.0005888938903808594, 0.0001951456069946289, 0.0005145072937011719, 0.0002849102020263672, 8.499622344970703e-05, 0.0032329559326171875, 0.0010051727294921875, 0.00042319297790527344, 0.00023794174194335938, 0.00572967529296875, 0.0343017578125, 0.0140228271484375, 0.0039520263671875, 0.0011920928955078125, 0.0250244140625, 0.0010271072387695312, 0.0003190040588378906, 0.0034275054931640625, 0.0011644363403320312, 0.0036525726318359375, 0.02679443359375, 0.00037479400634765625, 0.059326171875, 0.00014412403106689453, 0.0005254745483398438, 4.9591064453125e-05, 0.00018453598022460938, 0.8037109375, 0.00218963623046875, 0.0001957416534423828, 0.0003986358642578125, 0.0002428293228149414, 8.893013000488281e-05, 0.020782470703125, 0.0001131296157836914, 0.0001722574234008789, 6.0558319091796875e-05, 0.00042557716369628906, 0.0131378173828125, 0.00754547119140625, 0.00011241436004638672], "tokens": [275, 319, 526, 322, 1509, 1417, 27, 275, 319, 477, 753, 1056, 3457, 3401, 432, 322, 1056, 328, 2819, 1417, 275, 569, 284, 562, 763, 43191, 36, 26, 3220, 2064, 1178, 533, 30, 1158, 629, 533, 3457, 30, 3486, 1158, 2064, 1178, 816, 30, 1158, 629, 816, 3457, 30, 3486, 1158, 2064]}
{"line_number": 1349, "line_type": "original", "code": "                for (int k = n - 1; k >= 0; k -= 2) {", "entropy": 1.0859375, "is_bug_line": false, "sus_score": 0.6744167804718018, "per_token_entropy": [5.1640625, 5.92578125, 0.0220947265625, 0.032073974609375, 2.3046875, 0.00782012939453125, 4.20703125, 0.544921875, 0.038726806640625, 0.05230712890625, 0.0205841064453125, 0.01351165771484375, 0.0999755859375, 0.04180908203125, 0.1041259765625, 0.0132904052734375, 2.318359375, 2.779296875, 0.00485992431640625, 0.08416748046875, 0.003604888916015625, 0.10223388671875], "tokens": [2071, 436, 308, 410, 831, 280, 310, 429, 225, 35, 45, 831, 2377, 225, 34, 45, 831, 5912, 225, 36, 27, 301]}
{"line_number": 1349, "line_type": "generated", "code": "\n            atan(tmp1, 0, result, resultOffset);       // atan(y / (r + x))\n            multiply(result, resultOffset, TWO, 0, result, resultOffset);\n\n        } else {\n\n            // compute atan2", "entropy": 0.1746826171875, "is_bug_line": false, "sus_score": 0.6744167804718018, "per_token_entropy": [0.42919921875, 0.256103515625, 0.00820159912109375, 0.0090789794921875, 0.00279998779296875, 0.003742218017578125, 0.00946807861328125, 8.726119995117188e-05, 0.0007596015930175781, 1.01953125, 0.0002777576446533203, 0.004913330078125, 4.589557647705078e-05, 0.002399444580078125, 1.681640625, 0.001739501953125, 1.0263671875, 0.21142578125, 0.06341552734375, 0.06256103515625, 0.03314208984375, 0.0023441314697265625, 0.0030670166015625, 0.0006976127624511719, 0.029144287109375, 0.658203125, 0.26318359375, 0.0043182373046875, 0.143798828125, 0.0010709762573242188, 0.0080413818359375, 0.0001285076141357422, 0.00025725364685058594, 1.474609375, 0.18017578125, 0.032012939453125, 0.00154876708984375, 0.0044708251953125, 0.235595703125, 0.00018966197967529297, 0.005992889404296875, 3.2782554626464844e-05, 0.0018815994262695312, 0.9521484375, 0.0008325576782226562, 0.004184722900390625, 0.1282958984375, 0.033233642578125, 0.0215301513671875, 0.043548583984375, 0.012054443359375, 0.00913238525390625], "tokens": [324, 43191, 26, 2868, 35, 30, 225, 34, 30, 1056, 30, 1056, 3457, 293, 958, 434, 43191, 26, 107, 517, 308, 100, 474, 816, 490, 324, 22213, 26, 1267, 30, 1056, 3457, 30, 42352, 30, 225, 34, 30, 1056, 30, 1056, 3457, 293, 584, 320, 813, 301, 1064, 434, 7596, 43191, 36]}
{"line_number": 1368, "line_type": "original", "code": "        compose(operand, operandOffset, function, result, resultOffset);", "entropy": 2.048828125, "is_bug_line": false, "sus_score": 0.6650947332382202, "per_token_entropy": [7.9296875, 11.1328125, 0.1275634765625, 4.5546875, 1.5439453125, 0.265625, 0.01189422607421875, 0.034149169921875, 2.861328125, 0.05047607421875, 1.953125, 0.1494140625, 0.0185546875, 0.0011138916015625, 0.08660888671875], "tokens": [351, 20075, 26, 14065, 30, 19236, 3457, 30, 667, 30, 1056, 30, 1056, 3457, 293]}
{"line_number": 1368, "line_type": "generated", "code": "\n\n    }\n\n    /** Compute the hyperbolic arc cosine of a derivative structure.\n     * @param operand array holding a derivative structure\n     * @param operandOffset offset of the derivative structure in its array\n     * @param result array where result must be stored", "entropy": 0.1885986328125, "is_bug_line": false, "sus_score": 0.6650947332382202, "per_token_entropy": [0.06817626953125, 0.0006380081176757812, 0.309814453125, 0.023193359375, 0.85693359375, 1.5595703125, 1.6171875, 0.0007772445678710938, 1.3232231140136719e-05, 0.75, 0.451904296875, 0.03216552734375, 0.0643310546875, 0.211669921875, 0.145751953125, 0.0103302001953125, 0.01561737060546875, 0.0123443603515625, 0.00012803077697753906, 0.061859130859375, 0.00010180473327636719, 0.29248046875, 0.037139892578125, 0.0355224609375, 0.5849609375, 0.9111328125, 0.0081787109375, 0.1773681640625, 6.663799285888672e-05, 0.015594482421875, 0.0015935897827148438, 0.1488037109375, 0.0009031295776367188, 0.0012044906616210938, 0.00647735595703125, 0.0162200927734375, 1.15234375, 0.002056121826171875, 0.0214691162109375, 0.04473876953125, 0.0902099609375, 0.0009479522705078125, 0.0014209747314453125, 0.001087188720703125, 0.036529541015625, 0.007801055908203125, 0.00318145751953125, 0.00025391578674316406, 0.01525115966796875, 0.0005698204040527344, 5.316734313964844e-05, 0.0001004934310913086], "tokens": [446, 320, 446, 1022, 12836, 322, 15223, 84, 2073, 20507, 10712, 482, 432, 312, 27640, 5193, 32, 275, 319, 477, 753, 19236, 1417, 21843, 312, 27640, 5193, 275, 319, 477, 753, 19236, 3457, 3401, 432, 322, 27640, 5193, 328, 2819, 1417, 275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107]}
{"line_number": 1353, "line_type": "original", "code": "                    } else if (k == 2) {", "entropy": 2.974609375, "is_bug_line": false, "sus_score": 0.664372444152832, "per_token_entropy": [9.5078125, 3.662109375, 0.63037109375, 3.9375, 0.0255279541015625, 11.9921875, 0.447021484375, 0.18994140625, 2.08984375, 0.188720703125, 0.03497314453125], "tokens": [4696, 320, 813, 415, 308, 93, 610, 225, 36, 27, 301]}
{"line_number": 1353, "line_type": "generated", "code": "\n\n        } else {\n\n            // compute atan2(y, x) = -2 atan(y / (r - x)) - pi\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r -", "entropy": 0.095458984375, "is_bug_line": false, "sus_score": 0.664372444152832, "per_token_entropy": [0.26171875, 0.00031948089599609375, 0.00634002685546875, 0.0919189453125, 0.0231475830078125, 0.011322021484375, 0.036468505859375, 0.011077880859375, 0.009429931640625, 0.004909515380859375, 0.0034999847412109375, 0.0008983612060546875, 0.00804901123046875, 0.0004069805145263672, 0.01338958740234375, 1.8408203125, 0.1019287109375, 0.005016326904296875, 0.0034122467041015625, 0.234130859375, 0.0007348060607910156, 0.014739990234375, 0.064453125, 0.0015163421630859375, 0.0011816024780273438, 0.006015777587890625, 1.01953125, 0.158203125, 0.0858154296875, 0.397216796875, 0.0008749961853027344, 0.006923675537109375, 0.004581451416015625, 3.123283386230469e-05, 0.00066375732421875, 2.8848648071289062e-05, 0.0002110004425048828, 0.0007414817810058594, 9.739398956298828e-05, 0.0003712177276611328, 3.921985626220703e-05, 0.0001875162124633789, 0.0029163360595703125, 0.01366424560546875, 0.00012230873107910156, 0.0002841949462890625, 3.528594970703125e-05, 0.00014162063598632812, 0.50341796875, 7.3909759521484375e-06, 0.00489044189453125, 0.00543212890625], "tokens": [584, 320, 813, 301, 1064, 434, 7596, 43191, 36, 26, 107, 30, 816, 27, 280, 429, 36, 43191, 26, 107, 517, 308, 100, 429, 816, 490, 429, 8316, 324, 27799, 26, 2868, 35, 30, 225, 34, 30, 816, 30, 816, 3457, 30, 3691, 36, 30, 225, 34, 293, 262, 434, 540, 429]}
{"line_number": 1351, "line_type": "original", "code": "                    if (k > 2) {", "entropy": 3.21875, "is_bug_line": false, "sus_score": 0.6627809405326843, "per_token_entropy": [8.7265625, 5.75, 0.11444091796875, 7.65234375, 2.865234375, 0.151611328125, 3.28125, 0.284912109375, 0.136474609375], "tokens": [4696, 415, 308, 93, 848, 225, 36, 27, 301]}
{"line_number": 1351, "line_type": "generated", "code": "\n                result[resultOffset + i] = 2 * tmp2[i];\n            }\n\n        } else {\n\n            // compute atan2(y, x) = 2 atan(y / (r - x)) + pi\n            subtract(tmp1", "entropy": 0.0848388671875, "is_bug_line": false, "sus_score": 0.6627809405326843, "per_token_entropy": [0.061920166015625, 0.2464599609375, 0.0024585723876953125, 0.2122802734375, 0.00020825862884521484, 0.115234375, 0.00585174560546875, 0.0025157928466796875, 0.02618408203125, 1.0615234375, 0.01427459716796875, 0.033538818359375, 0.00579071044921875, 0.0004208087921142578, 0.0004029273986816406, 0.00835418701171875, 0.00432586669921875, 0.15185546875, 0.00830841064453125, 0.1434326171875, 0.0003402233123779297, 0.00333404541015625, 0.12091064453125, 0.023773193359375, 0.0145111083984375, 0.035186767578125, 0.01165008544921875, 0.009735107421875, 0.004352569580078125, 0.00289154052734375, 0.00086212158203125, 0.0091094970703125, 0.0004258155822753906, 0.0131072998046875, 0.34814453125, 0.0056610107421875, 0.03466796875, 0.0043487548828125, 0.00864410400390625, 0.0014858245849609375, 0.0088043212890625, 0.038665771484375, 0.0013933181762695312, 0.0013227462768554688, 0.01116943359375, 1.017578125, 0.136474609375, 0.08062744140625, 0.346923828125, 0.000843048095703125, 0.00516510009765625, 0.0037384033203125], "tokens": [400, 1056, 77, 1267, 3457, 474, 595, 79, 280, 225, 36, 319, 3691, 36, 77, 91, 970, 324, 320, 584, 320, 813, 301, 1064, 434, 7596, 43191, 36, 26, 107, 30, 816, 27, 280, 225, 36, 43191, 26, 107, 517, 308, 100, 429, 816, 490, 474, 8316, 324, 27799, 26, 2868, 35]}
{"line_number": 756, "line_type": "original", "code": "    }", "entropy": 5.19140625, "is_bug_line": false, "sus_score": 0.6624253392219543, "per_token_entropy": [3.939453125, 6.4453125], "tokens": [264, 320]}
{"line_number": 756, "line_type": "generated", "code": "\n     * @param result array where result must be stored (for\n     * division the result array <em>cannot</em> be one of\n     * the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public", "entropy": 0.037994384765625, "is_bug_line": false, "sus_score": 0.6624253392219543, "per_token_entropy": [0.45361328125, 0.3232421875, 0.004207611083984375, 0.017120361328125, 0.007610321044921875, 0.0016460418701171875, 0.0002269744873046875, 0.0017337799072265625, 0.00106048583984375, 3.0159950256347656e-05, 0.00010347366333007812, 0.023468017578125, 0.203857421875, 0.0164947509765625, 0.0004093647003173828, 0.67919921875, 0.0008625984191894531, 0.0008749961853027344, 0.0003056526184082031, 0.0031681060791015625, 0.0002224445343017578, 1.9311904907226562e-05, 0.0011987686157226562, 0.00020241737365722656, 6.341934204101562e-05, 1.049041748046875e-05, 0.000194549560546875, 0.0010347366333007812, 0.00017178058624267578, 0.0036869049072265625, 0.0004138946533203125, 0.0002353191375732422, 0.00024580955505371094, 0.0009007453918457031, 0.004573822021484375, 0.023895263671875, 0.001560211181640625, 0.00020587444305419922, 4.9233436584472656e-05, 0.00023937225341796875, 8.094310760498047e-05, 7.772445678710938e-05, 1.4066696166992188e-05, 4.2319297790527344e-05, 0.0005059242248535156, 9.179115295410156e-05, 9.679794311523438e-05, 0.00017058849334716797, 0.11395263671875, 0.02362060546875, 0.0548095703125, 0.00400543212890625], "tokens": [275, 319, 477, 753, 1056, 1417, 2154, 1056, 2298, 526, 7107, 308, 979, 275, 319, 20654, 322, 1056, 1417, 333, 405, 48, 18506, 377, 405, 48, 526, 1591, 432, 275, 319, 322, 1509, 12051, 27, 275, 319, 477, 753, 1056, 3457, 3401, 432, 322, 1056, 328, 2819, 1417, 275, 569, 284, 562]}
{"line_number": 2423, "line_type": "original", "code": "", "entropy": 0.26513671875, "is_bug_line": false, "sus_score": 0.6616148352622986, "per_token_entropy": [0.26513671875], "tokens": [203]}
{"line_number": 2423, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6616148352622986, "per_token_entropy": [], "tokens": []}
{"line_number": 1344, "line_type": "original", "code": "            for (int n = 2; n <= order; ++n) {", "entropy": 1.2109375, "is_bug_line": false, "sus_score": 0.6540384888648987, "per_token_entropy": [6.46875, 7.609375, 0.04095458984375, 0.072509765625, 1.048828125, 0.0386962890625, 0.169921875, 2.2890625, 0.04266357421875, 0.045257568359375, 0.69970703125, 0.377197265625, 0.1455078125, 1.5029296875, 0.0021762847900390625, 0.005535125732421875, 0.022003173828125], "tokens": [1468, 436, 308, 410, 310, 280, 225, 36, 45, 310, 2511, 2532, 45, 3311, 96, 27, 301]}
{"line_number": 1344, "line_type": "generated", "code": "\n\n        // compute atan(y/x)\n        atan(tmp1, 0, tmp1, 0);\n\n        // compute atan2(y, x)\n        if (x[xOffset] >= 0) {\n            if (y[", "entropy": 0.311279296875, "is_bug_line": false, "sus_score": 0.6540384888648987, "per_token_entropy": [0.7421875, 0.1226806640625, 0.34326171875, 1.7919921875, 0.50927734375, 0.0693359375, 0.1622314453125, 0.0152587890625, 0.0677490234375, 0.370849609375, 1.2197265625, 0.015533447265625, 0.095703125, 0.0714111328125, 0.0004930496215820312, 0.0179290771484375, 0.002437591552734375, 0.0004930496215820312, 0.2186279296875, 0.7412109375, 0.00027823448181152344, 0.004230499267578125, 0.0019130706787109375, 0.0005559921264648438, 1.5546875, 0.068359375, 0.736328125, 0.521484375, 0.61572265625, 0.108642578125, 0.00844573974609375, 0.970703125, 0.595703125, 0.02227783203125, 0.45556640625, 0.890625, 0.06231689453125, 0.97021484375, 0.09283447265625, 0.022918701171875, 0.0017862319946289062, 0.2017822265625, 0.892578125, 0.002422332763671875, 5.6743621826171875e-05, 0.08740234375, 0.0013065338134765625, 0.04620361328125, 0.61865234375, 0.01454925537109375, 0.044219970703125, 0.0002727508544921875], "tokens": [584, 434, 7596, 43191, 26, 107, 33, 106, 27, 291, 43191, 26, 2868, 35, 30, 225, 34, 30, 3691, 35, 30, 225, 34, 293, 584, 434, 7596, 43191, 36, 26, 107, 30, 816, 27, 291, 415, 308, 106, 77, 106, 3457, 79, 2377, 225, 34, 27, 301, 324, 415, 308, 107, 77]}
