{"line_number": 514, "line_type": "original", "code": "                hasFiniteBounds = true;", "entropy": 2.419921875, "is_bug_line": false, "sus_score": 0.6179466843605042, "per_token_entropy": [4.125, 11.0390625, 0.7958984375, 0.089599609375, 0.22705078125, 0.6455078125, 0.016845703125], "tokens": [2071, 1401, 40643, 8285, 280, 861, 45]}
{"line_number": 514, "line_type": "generated", "code": "\n                if (Double.isNaN(inputSigma[i])) {\n                    throw new NumberIsNaNException(inputSigma[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Converts a point from the internal encoding to the user specified\n     * encoding", "entropy": 0.390625, "is_bug_line": false, "sus_score": 0.6179466843605042, "per_token_entropy": [0.88623046875, 0.5859375, 0.2073974609375, 1.427734375, 0.0002510547637939453, 0.63427734375, 0.0004229545593261719, 0.06683349609375, 4.2557716369628906e-05, 0.0011920928955078125, 0.0021820068359375, 0.80224609375, 0.0161895751953125, 0.1103515625, 0.2318115234375, 0.0078582763671875, 0.6025390625, 4.589557647705078e-05, 0.01470947265625, 0.00031256675720214844, 0.283447265625, 0.24267578125, 4.172325134277344e-06, 0.002277374267578125, 7.355213165283203e-05, 0.09222412109375, 0.01351165771484375, 0.0019683837890625, 0.7001953125, 0.005138397216796875, 0.165771484375, 0.0015153884887695312, 0.79052734375, 0.0021839141845703125, 0.380615234375, 0.1295166015625, 0.055877685546875, 6.54458999633789e-05, 3.462890625, 1.755859375, 0.348876953125, 0.5791015625, 0.306640625, 1.2255859375, 0.99658203125, 0.3486328125, 0.442138671875, 0.70849609375, 0.95361328125, 0.513671875, 4.553794860839844e-05, 0.201904296875], "tokens": [400, 415, 308, 4075, 32, 26821, 26, 1131, 28326, 77, 91, 5259, 301, 528, 1422, 537, 5104, 1622, 11126, 984, 26, 1131, 28326, 77, 91, 1989, 400, 320, 324, 320, 291, 320, 284, 320, 446, 1022, 275, 319, 25337, 312, 2260, 645, 322, 3568, 7328, 372, 322, 1256, 3191, 275, 319, 7328]}
{"line_number": 1035, "line_type": "original", "code": "                double diff = Math.abs(x[i] - repaired[i]);", "entropy": 1.4658203125, "is_bug_line": false, "sus_score": 0.5452830195426941, "per_token_entropy": [7.45703125, 4.2734375, 6.03515625, 0.09747314453125, 1.7998046875, 0.0175933837890625, 0.560546875, 0.030731201171875, 3.90625, 0.44970703125, 0.57666015625, 0.12335205078125, 0.0283966064453125, 0.931640625, 0.000789642333984375, 0.009796142578125, 0.003887176513671875, 0.0823974609375], "tokens": [2071, 2064, 5839, 280, 4175, 32, 3596, 26, 106, 77, 91, 79, 429, 316, 41376, 77, 91, 1989]}
{"line_number": 1035, "line_type": "generated", "code": "\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix\n     * @param value\n     *            Value to be added to the diagonal of the matrix.\n     * @return Matrix representing the matrix", "entropy": 0.39208984375, "is_bug_line": false, "sus_score": 0.5452830195426941, "per_token_entropy": [0.13525390625, 0.04541015625, 0.0307159423828125, 0.0036106109619140625, 0.00010013580322265625, 3.6597251892089844e-05, 4.184246063232422e-05, 2.1457672119140625e-05, 3.933906555175781e-06, 0.0009698867797851562, 0.003948211669921875, 0.029052734375, 0.01256561279296875, 0.0013399124145507812, 0.06463623046875, 0.004039764404296875, 0.340087890625, 0.187744140625, 0.0119781494140625, 0.00027680397033691406, 0.1634521484375, 0.007232666015625, 0.2353515625, 0.47998046875, 0.019256591796875, 0.061004638671875, 0.0004429817199707031, 0.0003440380096435547, 1.576171875, 2.994140625, 1.728515625, 0.0004382133483886719, 0.15625, 0.86328125, 0.339111328125, 1.19921875, 0.70947265625, 0.414794921875, 1.6748046875, 1.2373046875, 0.8701171875, 0.6083984375, 0.464111328125, 0.537109375, 0.12188720703125, 0.00896453857421875, 0.005313873291015625, 0.005916595458984375, 0.313232421875, 0.99267578125, 0.46826171875, 1.2568359375], "tokens": [291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 4237, 5045, 275, 319, 477, 753, 786, 275, 319, 1468, 3846, 372, 526, 3640, 372, 322, 27601, 432, 322, 5045, 32, 275, 319, 477, 601, 9320, 12681, 322, 5045]}
{"line_number": 3519, "line_type": "original", "code": "", "entropy": 0.2344970703125, "is_bug_line": false, "sus_score": 0.5416304469108582, "per_token_entropy": [0.2344970703125], "tokens": [203]}
{"line_number": 3519, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5416304469108582, "per_token_entropy": [], "tokens": []}
{"line_number": 971, "line_type": "original", "code": "                value = CMAESOptimizer.this", "entropy": 1.8701171875, "is_bug_line": false, "sus_score": 0.5385916233062744, "per_token_entropy": [6.17578125, 8.625, 0.89990234375, 1.091796875, 0.00028228759765625, 0.0002435445785522461, 0.0038204193115234375, 0.0264129638671875, 0.005954742431640625], "tokens": [2071, 786, 280, 390, 1400, 940, 29248, 32, 578]}
{"line_number": 971, "line_type": "generated", "code": "\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return the penalty for violated bounds.\n         */\n        private double penalty(", "entropy": 0.1746826171875, "is_bug_line": false, "sus_score": 0.5385916233062744, "per_token_entropy": [1.3486328125, 0.01027679443359375, 0.0224609375, 0.0010271072387695312, 0.02520751953125, 0.006977081298828125, 0.0021610260009765625, 5.960464477539062e-07, 0.0004458427429199219, 0.00934600830078125, 0.0002529621124267578, 0.13525390625, 0.0399169921875, 0.0109710693359375, 0.0003113746643066406, 0.1904296875, 0.021240234375, 0.6875, 0.383056640625, 0.0005602836608886719, 0.031829833984375, 0.0085601806640625, 0.031829833984375, 0.0019893646240234375, 0.0011072158813476562, 0.0004992485046386719, 0.1629638671875, 0.697265625, 0.0004875659942626953, 0.2220458984375, 0.00475311279296875, 0.9716796875, 0.03607177734375, 0.438232421875, 0.01800537109375, 0.00727081298828125, 0.00508880615234375, 0.0018053054809570312, 0.356201171875, 0.29248046875, 1.0810546875, 1.4609375, 0.001117706298828125, 0.1031494140625, 0.136962890625, 0.014129638671875, 0.01534271240234375, 0.002681732177734375, 0.0670166015625, 0.0135650634765625, 0.0014982223510742188, 0.0002570152282714844], "tokens": [400, 320, 324, 320, 324, 442, 316, 41376, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26]}
{"line_number": 975, "line_type": "original", "code": "                value = CMAESOptimizer.this", "entropy": 1.4345703125, "is_bug_line": false, "sus_score": 0.5376487970352173, "per_token_entropy": [6.1640625, 4.50390625, 1.6201171875, 0.59423828125, 0.0002243518829345703, 0.0001983642578125, 0.002338409423828125, 0.0218048095703125, 0.00638580322265625], "tokens": [2071, 786, 280, 390, 1400, 940, 29248, 32, 578]}
{"line_number": 975, "line_type": "generated", "code": "\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired normalized objective variables.\n         * @return the penalty for violating bounds.\n         */\n        private double penalty(final double[] x, final double[]", "entropy": 0.1796875, "is_bug_line": false, "sus_score": 0.5376487970352173, "per_token_entropy": [0.2386474609375, 0.024566650390625, 0.1614990234375, 0.046142578125, 0.00627899169921875, 0.00031948089599609375, 0.1934814453125, 0.0142059326171875, 0.56005859375, 0.26708984375, 0.0006766319274902344, 0.037750244140625, 0.00811004638671875, 0.03228759765625, 0.0019063949584960938, 0.0006303787231445312, 0.0012416839599609375, 0.11651611328125, 0.4560546875, 0.0003495216369628906, 0.2381591796875, 0.003856658935546875, 1.3798828125, 0.057098388671875, 0.0184326171875, 0.09686279296875, 0.01165008544921875, 0.003444671630859375, 0.007274627685546875, 0.0012388229370117188, 0.345458984375, 0.306884765625, 1.0625, 1.98046875, 0.010894775390625, 1.0986328125, 0.15771484375, 0.024932861328125, 0.013153076171875, 0.004673004150390625, 0.06549072265625, 0.0076904296875, 0.0011444091796875, 0.0002359151840209961, 0.061004638671875, 0.0001590251922607422, 0.0004830360412597656, 0.004058837890625, 0.0002791881561279297, 0.2127685546875, 0.00019061565399169922, 0.00035452842712402344], "tokens": [291, 320, 584, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 17666, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 27982, 1741, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064, 1178, 816, 30, 1158, 2064, 1178]}
{"line_number": 970, "line_type": "original", "code": "                double[] repaired = repair(point);", "entropy": 2.267578125, "is_bug_line": false, "sus_score": 0.5354958176612854, "per_token_entropy": [4.65625, 6.48046875, 2.1796875, 2.484375, 0.007244110107421875, 0.3125, 3.779296875, 0.4833984375, 1.998046875, 0.288818359375], "tokens": [2071, 2064, 1178, 316, 41376, 280, 38911, 26, 1493, 293]}
{"line_number": 970, "line_type": "generated", "code": "\n                } else {\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return the penalty for violated bounds.\n         */\n       ", "entropy": 0.12408447265625, "is_bug_line": false, "sus_score": 0.5354958176612854, "per_token_entropy": [0.0777587890625, 0.0011081695556640625, 0.07281494140625, 0.05120849609375, 0.059417724609375, 0.0252685546875, 3.4570693969726562e-06, 0.0004355907440185547, 5.710124969482422e-05, 0.00012195110321044922, 0.0003314018249511719, 0.0093231201171875, 0.00010800361633300781, 0.00025534629821777344, 0.006778717041015625, 0.1287841796875, 0.0004930496215820312, 0.10150146484375, 0.0010976791381835938, 0.061798095703125, 0.0115509033203125, 0.0024394989013671875, 1.3113021850585938e-06, 0.0010595321655273438, 0.0908203125, 0.0003409385681152344, 0.178466796875, 0.0369873046875, 0.0084075927734375, 0.00017511844635009766, 0.1768798828125, 0.016998291015625, 0.8095703125, 0.136962890625, 0.0007929801940917969, 0.01641845703125, 0.00954437255859375, 0.0187225341796875, 0.0017547607421875, 0.001422882080078125, 0.0005092620849609375, 0.984375, 0.245361328125, 0.389404296875, 0.9658203125, 1.408203125, 0.001621246337890625, 0.11566162109375, 0.182373046875, 0.01947021484375, 0.014892578125, 0.0064849853515625], "tokens": [400, 320, 813, 301, 528, 316, 41376, 77, 91, 79, 280, 816, 77, 91, 970, 400, 320, 324, 320, 324, 442, 316, 41376, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291]}
{"line_number": 1018, "line_type": "original", "code": "                } else if (x[i] > 1.0) {", "entropy": 1.14453125, "is_bug_line": false, "sus_score": 0.5353341698646545, "per_token_entropy": [2.951171875, 5.15234375, 5.23828125, 2.234375, 0.057525634765625, 2.017578125, 0.1483154296875, 0.0732421875, 0.009002685546875, 0.1583251953125, 0.047271728515625, 0.052947998046875, 0.108642578125, 0.0025482177734375, 0.033782958984375, 0.031341552734375], "tokens": [2071, 320, 813, 415, 308, 106, 77, 91, 79, 848, 225, 35, 32, 34, 27, 301]}
{"line_number": 1018, "line_type": "generated", "code": "\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m\n     *            Input matrix\n     * @return Matrix representing the element-wise exponential of m.\n     */\n    private static Real", "entropy": 0.0897216796875, "is_bug_line": false, "sus_score": 0.5353341698646545, "per_token_entropy": [0.309814453125, 0.0081634521484375, 0.016265869140625, 0.00013256072998046875, 0.0298919677734375, 0.004974365234375, 0.00269317626953125, 0.00026106834411621094, 1.52587890625e-05, 1.1444091796875e-05, 4.303455352783203e-05, 1.7881393432617188e-06, 6.318092346191406e-06, 0.00015914440155029297, 0.001018524169921875, 0.04071044921875, 0.00811004638671875, 0.0004963874816894531, 0.1629638671875, 0.00048828125, 0.261962890625, 0.1507568359375, 0.0157928466796875, 0.00027441978454589844, 0.2373046875, 0.01444244384765625, 0.264404296875, 0.470458984375, 0.00018799304962158203, 0.020172119140625, 0.07568359375, 0.01535797119140625, 0.0965576171875, 0.0007171630859375, 0.0012464523315429688, 0.162841796875, 0.099853515625, 0.035614013671875, 0.0287933349609375, 0.06561279296875, 0.0022983551025390625, 0.0005002021789550781, 1.767578125, 0.204833984375, 0.0165863037109375, 0.02459716796875, 0.0045928955078125, 0.0033321380615234375, 0.003864288330078125, 0.0152587890625, 0.0138092041015625, 0.002716064453125], "tokens": [324, 320, 291, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 275, 319, 1468, 4237, 5045, 275, 319, 477, 601, 9320, 12681, 322, 1994, 31, 3767, 41655, 432, 345, 32, 275, 569, 284, 945, 907, 11443]}
{"line_number": 1016, "line_type": "original", "code": "                if (x[i] < 0) {", "entropy": 1.30078125, "is_bug_line": false, "sus_score": 0.5328159332275391, "per_token_entropy": [5.0859375, 3.8515625, 0.06524658203125, 3.759765625, 1.1162109375, 0.82470703125, 0.0169219970703125, 0.67138671875, 0.0248260498046875, 0.0200653076171875, 0.11578369140625, 0.05828857421875], "tokens": [2071, 415, 308, 106, 77, 91, 79, 333, 225, 34, 27, 301]}
{"line_number": 1016, "line_type": "generated", "code": "\n                d[r][c] = Math.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m\n     *            Input matrix", "entropy": 0.06884765625, "is_bug_line": false, "sus_score": 0.5328159332275391, "per_token_entropy": [1.0703125, 0.1259765625, 0.0006999969482421875, 0.0077972412109375, 0.035675048828125, 0.0100860595703125, 0.001476287841796875, 0.005279541015625, 0.278564453125, 0.00421142578125, 0.048797607421875, 0.00450897216796875, 0.1083984375, 0.000705718994140625, 0.0010204315185546875, 0.0003514289855957031, 0.003276824951171875, 0.0003261566162109375, 0.0078887939453125, 0.00591278076171875, 0.284423828125, 0.0024776458740234375, 0.0256805419921875, 0.005939483642578125, 0.07623291015625, 0.01174163818359375, 0.0036258697509765625, 0.0004949569702148438, 2.4199485778808594e-05, 1.0609626770019531e-05, 6.079673767089844e-05, 2.6226043701171875e-06, 2.0503997802734375e-05, 0.00020265579223632812, 0.0024967193603515625, 0.045989990234375, 0.0083160400390625, 0.0006260871887207031, 0.0335693359375, 0.0002987384796142578, 0.20458984375, 0.109375, 0.01264190673828125, 0.0004076957702636719, 0.201171875, 0.01258087158203125, 0.2359619140625, 0.476806640625, 0.0001850128173828125, 0.0169219970703125, 0.07177734375, 0.01477813720703125], "tokens": [400, 343, 77, 100, 1674, 85, 79, 280, 4175, 32, 8663, 26, 95, 32, 48895, 26, 100, 30, 281, 876, 324, 320, 291, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 275, 319, 1468, 4237, 5045]}
{"line_number": 482, "line_type": "original", "code": "                    sigma = sigma * Math.exp(0.2+cs/damps);", "entropy": 1.2109375, "is_bug_line": false, "sus_score": 0.5294577479362488, "per_token_entropy": [5.9296875, 10.859375, 0.50732421875, 3.45703125, 1.0556640625, 0.6357421875, 0.003932952880859375, 0.267822265625, 0.033294677734375, 0.06842041015625, 0.002269744873046875, 0.062286376953125, 0.0799560546875, 0.0283660888671875, 0.0083465576171875, 0.00473785400390625, 3.921985626220703e-05, 0.0006976127624511719, 0.004947662353515625], "tokens": [4696, 16355, 280, 16355, 319, 4175, 32, 2832, 26, 34, 32, 36, 29, 1729, 33, 86, 757, 101, 293]}
{"line_number": 482, "line_type": "generated", "code": "\n            }\n        }\n        else {\n            // If there is no finite bound, all must be infinite.", "entropy": 0.43798828125, "is_bug_line": false, "sus_score": 0.5294577479362488, "per_token_entropy": [0.884765625, 0.006259918212890625, 0.417236328125, 0.00502777099609375, 1.212890625, 1.2265625, 0.10662841796875, 0.19091796875, 0.2247314453125, 0.5224609375, 0.396240234375, 0.916015625, 0.139892578125, 0.14404296875, 0.08087158203125, 0.17236328125, 1.166015625, 0.9560546875, 0.005741119384765625, 0.0174560546875, 0.403076171875], "tokens": [324, 320, 291, 320, 291, 813, 301, 324, 434, 1670, 2017, 438, 1289, 32916, 5085, 30, 1169, 2298, 526, 20280, 32]}
{"line_number": 3514, "line_type": "original", "code": "", "entropy": 0.2344970703125, "is_bug_line": false, "sus_score": 0.5293521881103516, "per_token_entropy": [0.2344970703125], "tokens": [203]}
{"line_number": 3514, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5293521881103516, "per_token_entropy": [], "tokens": []}
{"line_number": 930, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.68896484375, "is_bug_line": false, "sus_score": 0.5289431810379028, "per_token_entropy": [5.91796875, 4.79296875, 0.0254364013671875, 0.02178955078125, 0.051666259765625, 0.012664794921875, 0.04052734375, 0.01123046875, 0.00882720947265625, 0.0027828216552734375, 0.01078033447265625, 1.43359375, 0.017730712890625, 0.0004432201385498047, 0.006191253662109375, 0.01323699951171875, 0.006343841552734375, 0.0235137939453125], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 930, "line_type": "generated", "code": "\n        /**\n         * @param x Normalized objective variables.\n         * @return the penalty for out of bounds variables.\n         */\n        public double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0.0;", "entropy": 0.302978515625, "is_bug_line": false, "sus_score": 0.5289431810379028, "per_token_entropy": [1.130859375, 0.1268310546875, 0.03955078125, 0.00023937225341796875, 0.4794921875, 0.0645751953125, 1.40234375, 0.54345703125, 0.0006275177001953125, 0.0869140625, 0.02874755859375, 0.094970703125, 0.00559234619140625, 0.003810882568359375, 0.0016412734985351562, 0.435302734375, 0.59033203125, 0.6494140625, 0.395263671875, 2.591796875, 0.46484375, 0.6884765625, 1.478515625, 0.314208984375, 0.0765380859375, 0.0135650634765625, 0.0033512115478515625, 1.083984375, 0.0113372802734375, 0.0013799667358398438, 0.00036454200744628906, 0.08233642578125, 0.0008563995361328125, 0.002033233642578125, 0.035552978515625, 0.0892333984375, 0.1148681640625, 0.0004756450653076172, 0.0006632804870605469, 0.401123046875, 0.0003936290740966797, 0.01511383056640625, 0.0017681121826171875, 0.06597900390625, 0.10986328125, 1.078125, 0.011749267578125, 0.01409912109375, 0.003143310546875, 0.9091796875, 0.0013980865478515625, 0.00514984130859375], "tokens": [291, 1022, 276, 319, 477, 753, 816, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 963, 432, 11615, 4886, 32, 276, 569, 291, 562, 2064, 35806, 26, 3220, 2064, 1178, 816, 30, 1158, 2064, 1178, 316, 41376, 27, 301, 324, 2064, 35806, 280, 225, 34, 32, 34, 45]}
{"line_number": 1038, "line_type": "original", "code": "            return isMinimize ? penalty : -penalty;", "entropy": 2.806640625, "is_bug_line": false, "sus_score": 0.5273256897926331, "per_token_entropy": [7.98046875, 3.173828125, 7.44140625, 4.53515625, 2.0390625, 1.314453125, 4.05859375, 0.2449951171875, 0.03936767578125, 0.037200927734375, 0.0142669677734375], "tokens": [1468, 442, 438, 2928, 12178, 1018, 35806, 499, 429, 35931, 45]}
{"line_number": 1038, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5273256897926331, "per_token_entropy": [], "tokens": []}
{"line_number": 1034, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.56787109375, "is_bug_line": false, "sus_score": 0.5264612436294556, "per_token_entropy": [4.13671875, 2.185546875, 0.014434814453125, 0.01763916015625, 1.5341796875, 0.0185089111328125, 0.027587890625, 0.0164642333984375, 0.005359649658203125, 0.003719329833984375, 0.00890350341796875, 2.08203125, 0.08734130859375, 0.01280975341796875, 0.01244354248046875, 0.00791168212890625, 0.00788116455078125, 0.03643798828125], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 1034, "line_type": "generated", "code": "\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise reciprocal of m.\n     */\n    private static RealMatrix re", "entropy": 0.11968994140625, "is_bug_line": false, "sus_score": 0.5264612436294556, "per_token_entropy": [0.2139892578125, 0.1982421875, 0.1829833984375, 0.01058197021484375, 0.00893402099609375, 0.0011720657348632812, 4.374980926513672e-05, 2.1696090698242188e-05, 7.486343383789062e-05, 8.702278137207031e-06, 4.0531158447265625e-06, 0.000324249267578125, 0.0033702850341796875, 0.01517486572265625, 0.00677490234375, 0.0007576942443847656, 0.11834716796875, 0.01318359375, 0.4111328125, 0.202392578125, 0.0145721435546875, 0.00031256675720214844, 0.18798828125, 0.008697509765625, 0.2646484375, 0.490234375, 0.0202484130859375, 0.066162109375, 0.000522613525390625, 0.0003986358642578125, 0.2420654296875, 0.160400390625, 0.02215576171875, 0.027008056640625, 0.09375, 0.0029048919677734375, 0.00092315673828125, 2.626953125, 0.0006146430969238281, 0.0026073455810546875, 0.0030117034912109375, 0.345947265625, 0.01806640625, 0.06817626953125, 0.019317626953125, 0.006847381591796875, 0.00336456298828125, 0.01340484619140625, 0.00811004638671875, 0.0010080337524414062, 2.7298927307128906e-05, 0.11358642578125], "tokens": [291, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 4237, 5045, 275, 319, 477, 601, 9320, 12681, 322, 1994, 31, 3767, 316, 1871, 510, 1282, 432, 345, 32, 275, 569, 284, 945, 907, 11443, 4161, 316]}
{"line_number": 956, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.6884765625, "is_bug_line": false, "sus_score": 0.5262575149536133, "per_token_entropy": [4.44140625, 6.65625, 0.0103912353515625, 0.0826416015625, 0.03912353515625, 0.002735137939453125, 0.004009246826171875, 0.01007843017578125, 0.0041961669921875, 0.0013380050659179688, 0.009796142578125, 1.0439453125, 0.0189208984375, 0.00171661376953125, 0.003261566162109375, 0.0075531005859375, 0.0033512115478515625, 0.047576904296875], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 956, "line_type": "generated", "code": "\n            this.valueRange = valueRange;\n        }\n\n        /**\n         * @param isMinimize {@code true} if the problem is to be minimized.\n         */\n        public void setMinimize(boolean isMinimize) {\n            this.is", "entropy": 0.192138671875, "is_bug_line": false, "sus_score": 0.5262575149536133, "per_token_entropy": [0.1624755859375, 0.1575927734375, 0.0002760887145996094, 0.0024242401123046875, 0.00019741058349609375, 0.006988525390625, 0.04608154296875, 6.020069122314453e-05, 0.01123809814453125, 0.08062744140625, 0.00439453125, 0.0728759765625, 0.0190887451171875, 0.01084136962890625, 0.0006256103515625, 0.106201171875, 0.26416015625, 0.368896484375, 1.2626953125, 0.004413604736328125, 1.6650390625, 0.0013799667358398438, 0.018951416015625, 0.0147857666015625, 0.91748046875, 0.77783203125, 1.53125, 0.486572265625, 0.6513671875, 0.1488037109375, 0.08441162109375, 0.00879669189453125, 0.135498046875, 0.00605010986328125, 0.04510498046875, 0.0022869110107421875, 0.004703521728515625, 0.0011701583862304688, 0.229248046875, 0.01629638671875, 0.056854248046875, 0.002635955810546875, 0.093505859375, 0.0006113052368164062, 7.474422454833984e-05, 7.474422454833984e-05, 0.0006618499755859375, 0.0005044937133789062, 0.477783203125, 0.0264892578125, 0.0002601146697998047, 0.00025343894958496094], "tokens": [324, 458, 32, 853, 3198, 280, 786, 3198, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 438, 2928, 12178, 3088, 687, 861, 111, 415, 322, 3708, 438, 372, 526, 18206, 1191, 32, 276, 569, 291, 562, 763, 739, 2928, 12178, 26, 4398, 438, 2928, 12178, 27, 301, 324, 458, 32, 297]}
{"line_number": 3520, "line_type": "original", "code": "", "entropy": 0.2344970703125, "is_bug_line": false, "sus_score": 0.5261052846908569, "per_token_entropy": [0.2344970703125], "tokens": [203]}
{"line_number": 3520, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5261052846908569, "per_token_entropy": [], "tokens": []}
{"line_number": 1033, "line_type": "original", "code": "            double penalty = 0;", "entropy": 2.61328125, "is_bug_line": false, "sus_score": 0.5254714488983154, "per_token_entropy": [2.62890625, 9.25, 4.7578125, 0.087890625, 0.81201171875, 0.1358642578125, 0.6318359375], "tokens": [1468, 2064, 35806, 280, 225, 34, 45]}
{"line_number": 1033, "line_type": "generated", "code": "\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise reciprocal of m.\n     */\n    private static Real", "entropy": 0.1068115234375, "is_bug_line": false, "sus_score": 0.5254714488983154, "per_token_entropy": [0.1907958984375, 0.0009260177612304688, 0.00951385498046875, 0.0002903938293457031, 0.0209808349609375, 0.00217437744140625, 0.0017576217651367188, 0.0002808570861816406, 1.5020370483398438e-05, 5.7220458984375e-06, 4.4465065002441406e-05, 2.7418136596679688e-06, 6.9141387939453125e-06, 0.00011718273162841797, 0.0009317398071289062, 0.0095062255859375, 0.003448486328125, 0.0004010200500488281, 0.07513427734375, 0.003948211669921875, 0.346923828125, 0.1837158203125, 0.01314544677734375, 0.0004916191101074219, 0.185791015625, 0.00787353515625, 0.2489013671875, 0.49658203125, 0.019439697265625, 0.06451416015625, 0.000461578369140625, 0.0003685951232910156, 0.23876953125, 0.1639404296875, 0.021331787109375, 0.028900146484375, 0.090087890625, 0.0029392242431640625, 0.0008358955383300781, 2.63671875, 0.0005564689636230469, 0.002590179443359375, 0.00206756591796875, 0.345458984375, 0.0178680419921875, 0.06756591796875, 0.018524169921875, 0.007282257080078125, 0.003261566162109375, 0.010498046875, 0.0074310302734375, 0.0009341239929199219], "tokens": [324, 320, 291, 320, 291, 442, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 86, 30, 901, 293, 284, 320, 446, 1022, 275, 319, 477, 753, 345, 4237, 5045, 275, 319, 477, 601, 9320, 12681, 322, 1994, 31, 3767, 316, 1871, 510, 1282, 432, 345, 32, 275, 569, 284, 945, 907, 11443]}
{"line_number": 1015, "line_type": "original", "code": "            for (int i = 0; i < x.length; i++) {", "entropy": 0.79736328125, "is_bug_line": false, "sus_score": 0.523108720779419, "per_token_entropy": [4.25, 1.544921875, 0.0023651123046875, 0.001434326171875, 3.826171875, 0.00823974609375, 0.0087127685546875, 0.0016088485717773438, 0.005126953125, 0.0020542144775390625, 0.02508544921875, 4.51171875, 0.059539794921875, 0.044158935546875, 0.0155181884765625, 0.0159759521484375, 0.0078125, 0.021026611328125], "tokens": [1468, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 816, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 1015, "line_type": "generated", "code": "\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = Math.sqrt(m.", "entropy": 0.022216796875, "is_bug_line": false, "sus_score": 0.523108720779419, "per_token_entropy": [0.517578125, 0.34814453125, 0.0018157958984375, 0.0012378692626953125, 0.0219879150390625, 0.0011949539184570312, 0.0008459091186523438, 0.0005679130554199219, 0.0006127357482910156, 0.00032210350036621094, 0.0026397705078125, 0.00946807861328125, 4.6372413635253906e-05, 0.0009469985961914062, 1.5735626220703125e-05, 0.00033545494079589844, 0.006801605224609375, 0.0007615089416503906, 0.004520416259765625, 0.01151275634765625, 0.006504058837890625, 0.00022208690643310547, 0.000713348388671875, 0.00012409687042236328, 7.617473602294922e-05, 0.00015914440155029297, 3.612041473388672e-05, 0.00010824203491210938, 0.00020265579223632812, 0.0002448558807373047, 0.0002865791320800781, 3.6716461181640625e-05, 9.59634780883789e-05, 4.0531158447265625e-06, 0.0001010894775390625, 0.00017344951629638672, 0.0002384185791015625, 0.0014095306396484375, 0.01520538330078125, 0.084228515625, 0.00011467933654785156, 0.0008864402770996094, 0.00013947486877441406, 8.7738037109375e-05, 0.0001844167709350586, 0.0006527900695800781, 0.032257080078125, 0.0021457672119140625, 0.016021728515625, 0.0003733634948730469, 0.061248779296875, 4.76837158203125e-05], "tokens": [291, 436, 308, 410, 540, 280, 225, 34, 45, 540, 333, 345, 32, 30093, 9883, 473, 540, 1987, 301, 324, 436, 308, 410, 281, 280, 225, 34, 45, 281, 333, 345, 32, 19239, 9883, 473, 281, 1987, 301, 400, 343, 77, 100, 1674, 85, 79, 280, 4175, 32, 8663, 26, 95, 32]}
{"line_number": 3523, "line_type": "original", "code": "", "entropy": 0.2344970703125, "is_bug_line": false, "sus_score": 0.5192607045173645, "per_token_entropy": [0.2344970703125], "tokens": [203]}
{"line_number": 3523, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5192607045173645, "per_token_entropy": [], "tokens": []}
{"line_number": 931, "line_type": "original", "code": "                double diff = boundaries[1][i] - boundaries[0][i];", "entropy": 0.86962890625, "is_bug_line": false, "sus_score": 0.5142792463302612, "per_token_entropy": [8.59375, 2.45703125, 3.26953125, 0.038299560546875, 0.095947265625, 0.0206451416015625, 0.040802001953125, 0.00563812255859375, 0.038665771484375, 0.0031185150146484375, 0.01556396484375, 0.1917724609375, 0.0008568763732910156, 0.00091552734375, 0.0013179779052734375, 0.0003743171691894531, 0.0060272216796875], "tokens": [2071, 2064, 5839, 280, 28116, 77, 35, 1674, 91, 79, 429, 28116, 77, 34, 1674, 91, 970]}
{"line_number": 931, "line_type": "generated", "code": "\n        /**\n         * @param point Normalized objective variables.\n         * @param repaired Repaired normalized objective variables.\n         * @return the penalty for violated bounds.\n         */\n        private double penalty(final double[] point, final double[] repaired", "entropy": 0.17529296875, "is_bug_line": false, "sus_score": 0.5142792463302612, "per_token_entropy": [0.3603515625, 0.12274169921875, 0.05828857421875, 0.0002372264862060547, 0.6640625, 0.06878662109375, 0.88232421875, 1.1005859375, 0.0009174346923828125, 0.08203125, 0.0158233642578125, 0.06646728515625, 0.0038280487060546875, 0.0014810562133789062, 0.00176239013671875, 0.256103515625, 0.1854248046875, 0.0002715587615966797, 0.355224609375, 0.0163726806640625, 1.2763671875, 0.0531005859375, 0.0350341796875, 0.162109375, 0.02728271484375, 0.0100860595703125, 0.01142120361328125, 0.0016918182373046875, 0.611328125, 0.185302734375, 0.361083984375, 0.6494140625, 0.0003981590270996094, 0.09698486328125, 0.1962890625, 0.038665771484375, 0.0104217529296875, 0.00261688232421875, 0.55908203125, 0.00913238525390625, 0.0004978179931640625, 0.00025177001953125, 0.12005615234375, 0.0006880760192871094, 0.0014362335205078125, 0.003475189208984375, 0.0004703998565673828, 0.445068359375, 0.00025177001953125, 0.0006017684936523438, 0.0022563934326171875, 1.5497207641601562e-06], "tokens": [291, 1022, 276, 319, 477, 753, 2260, 13574, 1191, 25110, 4886, 32, 276, 319, 477, 753, 316, 41376, 902, 41376, 17666, 25110, 4886, 32, 276, 319, 477, 601, 322, 35806, 436, 8943, 23723, 11615, 32, 276, 569, 291, 945, 2064, 35806, 26, 3220, 2064, 1178, 2260, 30, 1158, 2064, 1178, 316, 41376]}
{"line_number": 540, "line_type": "original", "code": "                for (int i = 0; i < lB.length; i++) {", "entropy": 1.2568359375, "is_bug_line": false, "sus_score": 0.5115399360656738, "per_token_entropy": [5.07421875, 6.8515625, 0.0447998046875, 0.05755615234375, 4.8515625, 0.062225341796875, 0.01137542724609375, 0.01461029052734375, 0.00743865966796875, 0.0023517608642578125, 0.004215240478515625, 6.3203125, 0.410888671875, 0.0124664306640625, 0.005764007568359375, 0.0222320556640625, 0.0926513671875, 0.007659912109375, 0.025970458984375], "tokens": [2071, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 456, 52, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 540, "line_type": "generated", "code": "\n        }\n        // initialize mu\n        double mu = (mu == 0)? (lambda / 2.0) : mu;\n        // initialize weights\n        double[] weights = new double[lambda];\n        for (int i = 0; i", "entropy": 0.4609375, "is_bug_line": false, "sus_score": 0.5115399360656738, "per_token_entropy": [1.0283203125, 0.10504150390625, 0.314208984375, 1.517578125, 0.78564453125, 1.2470703125, 0.3056640625, 1.205078125, 0.86669921875, 0.410400390625, 1.7685546875, 1.1611328125, 1.1142578125, 0.69189453125, 0.01348876953125, 0.1937255859375, 0.0136260986328125, 1.201171875, 0.7880859375, 0.149169921875, 0.04327392578125, 0.0007033348083496094, 1.650390625, 0.0679931640625, 0.0164794921875, 0.0170745849609375, 0.254638671875, 0.006282806396484375, 0.3388671875, 1.328125, 0.494384765625, 1.6357421875, 0.10650634765625, 0.4775390625, 1.2099609375, 0.25390625, 0.06268310546875, 0.102783203125, 0.0011310577392578125, 0.007259368896484375, 0.2352294921875, 0.01318359375, 0.03759765625, 0.5869140625, 0.0010528564453125, 0.0013179779052734375, 0.075439453125, 0.0009603500366210938, 0.04107666015625, 0.0033588409423828125, 0.001728057861328125, 0.00991058349609375], "tokens": [291, 320, 291, 434, 7379, 11768, 291, 2064, 11768, 280, 308, 6974, 610, 225, 34, 27, 1018, 308, 5962, 517, 225, 36, 32, 34, 27, 499, 11768, 45, 291, 434, 7379, 11229, 291, 2064, 1178, 11229, 280, 537, 2064, 77, 5962, 970, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595]}
{"line_number": 957, "line_type": "original", "code": "                double diff = boundaries[1][i] - boundaries[0][i];", "entropy": 0.720703125, "is_bug_line": false, "sus_score": 0.5113556981086731, "per_token_entropy": [6.70703125, 3.6328125, 0.72802734375, 0.04205322265625, 0.76611328125, 0.005176544189453125, 0.00991058349609375, 0.018341064453125, 0.11370849609375, 0.0052642822265625, 0.0271148681640625, 0.17919921875, 0.0007953643798828125, 0.001312255859375, 0.0027942657470703125, 0.000667572021484375, 0.0110931396484375], "tokens": [2071, 2064, 5839, 280, 28116, 77, 35, 1674, 91, 79, 429, 28116, 77, 34, 1674, 91, 970]}
{"line_number": 957, "line_type": "generated", "code": "\n        }\n\n        /**\n         * @return the value range.\n         */\n        public double getValueRange() {\n            return valueRange;\n        }\n\n        /**\n         * @param isRepairMode the isRepairMode to set\n         */\n        public void setRepairMode(", "entropy": 0.1707763671875, "is_bug_line": false, "sus_score": 0.5113556981086731, "per_token_entropy": [0.256591796875, 0.0092620849609375, 0.1044921875, 0.0225830078125, 0.00977325439453125, 0.0003390312194824219, 0.1488037109375, 1.419921875, 0.353759765625, 0.7529296875, 0.740234375, 0.55419921875, 0.009857177734375, 0.0196685791015625, 0.0053863525390625, 0.0159149169921875, 0.0035037994384765625, 0.0007777214050292969, 0.00022900104522705078, 0.00045800209045410156, 0.00033354759216308594, 0.045745849609375, 0.0013828277587890625, 0.0265350341796875, 1.5735626220703125e-05, 0.0016918182373046875, 0.11175537109375, 0.00016772747039794922, 0.07049560546875, 0.01169586181640625, 0.0071258544921875, 0.0003459453582763672, 0.2147216796875, 0.26123046875, 0.51318359375, 0.475341796875, 0.00323486328125, 2.05078125, 0.436767578125, 0.08782958984375, 0.0015478134155273438, 0.004993438720703125, 0.0007891654968261719, 0.0124664306640625, 0.003017425537109375, 0.00441741943359375, 0.00200653076171875, 0.0015630722045898438, 0.085693359375, 0.01369476318359375, 0.0008425712585449219, 0.0004792213439941406], "tokens": [291, 320, 584, 1022, 276, 319, 477, 601, 322, 786, 2155, 32, 276, 569, 291, 562, 2064, 21536, 3198, 346, 301, 324, 442, 786, 3198, 45, 291, 320, 584, 1022, 276, 319, 477, 753, 438, 36836, 2101, 322, 438, 36836, 2101, 372, 739, 276, 569, 291, 562, 763, 739, 36836, 2101, 26]}
