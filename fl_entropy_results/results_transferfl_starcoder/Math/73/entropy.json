{"line_number": 196, "line_type": "original", "code": "            }", "entropy": 4.859375, "is_bug_line": false, "sus_score": 0.8426533937454224, "per_token_entropy": [4.5859375, 5.12890625], "tokens": [1468, 320]}
{"line_number": 196, "line_type": "generated", "code": "\n            // compute the new approximation for the root\n            double a = x0 * y2 - x2 * y0;\n            double b = x1 * y2 - x2 * y1;\n            double c = x1 * y0 - x", "entropy": 0.35546875, "is_bug_line": false, "sus_score": 0.8426533937454224, "per_token_entropy": [0.771484375, 0.970703125, 1.7099609375, 0.51171875, 0.3359375, 0.48779296875, 0.91650390625, 0.044525146484375, 0.02642822265625, 0.227294921875, 1.4365234375, 3.130859375, 0.1279296875, 1.6875, 0.35693359375, 1.734375, 0.13037109375, 0.336669921875, 0.70751953125, 0.0814208984375, 0.061248779296875, 0.0008640289306640625, 0.0003466606140136719, 0.0021343231201171875, 0.01309967041015625, 0.0105743408203125, 0.024627685546875, 0.00608062744140625, 0.0004093647003173828, 0.2032470703125, 0.414794921875, 0.006839752197265625, 0.006267547607421875, 0.76904296875, 0.0005364418029785156, 0.0013675689697265625, 0.0017900466918945312, 0.0001283884048461914, 0.00012922286987304688, 0.0002658367156982422, 0.0004711151123046875, 0.05255126953125, 0.13525390625, 0.2342529296875, 0.006938934326171875, 0.06231689453125, 0.58447265625, 0.0037403106689453125, 0.06488037109375, 0.08514404296875, 0.000247955322265625, 0.0016937255859375], "tokens": [324, 434, 7596, 322, 537, 39431, 436, 322, 3051, 324, 2064, 312, 280, 816, 34, 319, 533, 36, 429, 816, 36, 319, 533, 34, 45, 324, 2064, 323, 280, 816, 35, 319, 533, 36, 429, 816, 36, 319, 533, 35, 45, 324, 2064, 281, 280, 816, 35, 319, 533, 34, 429, 816]}
{"line_number": 209, "line_type": "original", "code": "     * for the root", "entropy": 5.0234375, "is_bug_line": false, "sus_score": 0.7118008136749268, "per_token_entropy": [6.22265625, 2.88671875, 6.87890625, 2.19921875, 6.92578125], "tokens": [262, 319, 436, 322, 3051]}
{"line_number": 209, "line_type": "generated", "code": "            }\n            double xm = x1 + delta;\n            double ym = f.value(xm);\n            if (ym == 0.0) {\n                // Found exact root.\n                setResult(xm, i);\n                return result;", "entropy": 0.258544921875, "is_bug_line": false, "sus_score": 0.7118008136749268, "per_token_entropy": [1.98046875, 0.416259765625, 0.625, 0.798828125, 0.5908203125, 0.310302734375, 0.01385498046875, 0.0307464599609375, 0.08648681640625, 0.035430908203125, 0.024749755859375, 0.002605438232421875, 0.1461181640625, 0.239501953125, 0.456787109375, 0.00199127197265625, 0.0157623291015625, 0.00589752197265625, 8.0108642578125e-05, 0.0002779960632324219, 0.00013434886932373047, 0.0012969970703125, 0.000644683837890625, 0.371337890625, 0.642578125, 0.2000732421875, 0.439208984375, 0.60546875, 0.0975341796875, 6.92605972290039e-05, 0.487060546875, 0.00051116943359375, 0.050537109375, 0.0017023086547851562, 0.031097412109375, 1.541015625, 1.884765625, 0.1658935546875, 0.325927734375, 0.471923828125, 0.10174560546875, 0.04302978515625, 0.00011360645294189453, 0.0006055831909179688, 0.01476287841796875, 0.0014123916625976562, 0.00341033935546875, 0.06903076171875, 0.0034465789794921875, 0.00749969482421875, 0.09808349609375, 0.0014486312866210938], "tokens": [1468, 320, 324, 2064, 816, 95, 280, 816, 35, 474, 7715, 45, 324, 2064, 533, 95, 280, 296, 32, 853, 26, 18974, 293, 324, 415, 308, 2209, 610, 225, 34, 32, 34, 27, 301, 400, 434, 5422, 7153, 3051, 32, 400, 739, 1394, 26, 18974, 30, 595, 293, 400, 442, 1056, 45]}
{"line_number": 184, "line_type": "original", "code": "                throw MathRuntimeException.createIllegalArgumentException(", "entropy": 1.9521484375, "is_bug_line": false, "sus_score": 0.7045552134513855, "per_token_entropy": [4.4296875, 8.0, 1.7509765625, 0.546875, 0.01300811767578125, 0.01187896728515625, 0.806640625, 0.058502197265625], "tokens": [2071, 1422, 4175, 19304, 32, 1297, 25907, 26]}
{"line_number": 184, "line_type": "generated", "code": "\n                x2 = x0 + (x1 - x0) * y2 / (y1 - y2);", "entropy": 0.240478515625, "is_bug_line": false, "sus_score": 0.7045552134513855, "per_token_entropy": [0.1029052734375, 0.84619140625, 0.00827789306640625, 0.0224151611328125, 0.1865234375, 0.1304931640625, 0.55712890625, 1.12109375, 0.368408203125, 0.38671875, 0.022430419921875, 0.00171661376953125, 0.0062255859375, 0.03387451171875, 0.1439208984375, 1.4814453125, 0.2103271484375, 0.0296630859375, 0.007091522216796875, 0.0020961761474609375, 0.326416015625, 0.0012912750244140625, 0.001026153564453125, 0.0125732421875, 0.0021800994873046875], "tokens": [400, 816, 36, 280, 816, 34, 474, 308, 106, 35, 429, 816, 34, 27, 319, 533, 36, 517, 308, 107, 35, 429, 533, 36, 293]}
{"line_number": 176, "line_type": "original", "code": "            if (Math.abs(yMin) <= functionValueAccuracy) {", "entropy": 1.3896484375, "is_bug_line": false, "sus_score": 0.7022044062614441, "per_token_entropy": [5.91796875, 1.4384765625, 0.0777587890625, 0.282958984375, 0.002307891845703125, 0.0107879638671875, 0.0009379386901855469, 1.833984375, 12.0078125, 0.12274169921875, 0.07354736328125, 0.045135498046875, 0.00086212158203125, 0.0001709461212158203, 0.357666015625, 0.0587158203125], "tokens": [1468, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 176, "line_type": "generated", "code": "\n        double t = x0;\n        double d = 0;\n        double e = 0;\n        double m = 0;\n        double ym = 0;\n        double ys = 0;\n        double yd = 0;\n       ", "entropy": 0.425537109375, "is_bug_line": false, "sus_score": 0.7022044062614441, "per_token_entropy": [0.310546875, 1.46875, 3.17578125, 0.55126953125, 0.6689453125, 0.814453125, 0.1917724609375, 0.4345703125, 0.375, 2.3515625, 0.325927734375, 1.0703125, 0.0176544189453125, 0.479248046875, 0.609375, 0.60205078125, 0.79248046875, 0.00809478759765625, 0.06793212890625, 0.0009093284606933594, 0.00276947021484375, 0.50390625, 0.283935546875, 0.4072265625, 0.2120361328125, 0.00994873046875, 0.00102996826171875, 0.004314422607421875, 0.2138671875, 0.156494140625, 0.86474609375, 0.300048828125, 0.06268310546875, 0.1827392578125, 0.0013189315795898438, 0.00311279296875, 0.27294921875, 0.14208984375, 1.7314453125, 0.00466156005859375, 0.023956298828125, 0.0004417896270751953, 0.0012416839599609375, 0.218017578125, 0.1287841796875, 0.63818359375, 1.1044921875, 0.003589630126953125, 0.00653076171875, 0.0003027915954589844, 0.000469207763671875, 0.324462890625], "tokens": [291, 2064, 273, 280, 816, 34, 45, 291, 2064, 343, 280, 225, 34, 45, 291, 2064, 484, 280, 225, 34, 45, 291, 2064, 345, 280, 225, 34, 45, 291, 2064, 533, 95, 280, 225, 34, 45, 291, 2064, 22720, 280, 225, 34, 45, 291, 2064, 533, 86, 280, 225, 34, 45, 291]}
{"line_number": 286, "line_type": "original", "code": "                    delta = 0.5 * dx;", "entropy": 1.6201171875, "is_bug_line": false, "sus_score": 0.6969336271286011, "per_token_entropy": [9.3359375, 5.37109375, 0.0423583984375, 1.2119140625, 0.01256561279296875, 0.0183868408203125, 0.063720703125, 0.005092620849609375, 0.07342529296875, 0.06829833984375], "tokens": [4696, 7715, 280, 225, 34, 32, 39, 319, 12211, 45]}
{"line_number": 286, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6969336271286011, "per_token_entropy": [], "tokens": []}
{"line_number": 179, "line_type": "original", "code": "            } else if (Math.abs(yMax) <= functionValueAccuracy) {", "entropy": 1.16796875, "is_bug_line": false, "sus_score": 0.6954612135887146, "per_token_entropy": [6.62109375, 5.84375, 1.3486328125, 1.154296875, 0.10693359375, 1.4384765625, 0.01495361328125, 0.02105712890625, 0.004268646240234375, 0.69189453125, 2.921875, 0.09954833984375, 0.369873046875, 0.10675048828125, 0.0028438568115234375, 0.00042939186096191406, 0.2039794921875, 0.07916259765625], "tokens": [1468, 320, 813, 415, 308, 5717, 32, 3596, 26, 107, 2708, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 179, "line_type": "generated", "code": "\n        while (true) {\n            ++i;\n            if (i > maximalIterationCount) {\n                throw new MaxIterationsExceededException(maximalIterationCount);\n            }\n\n            // Use the secant method to find the next point\n            final double y", "entropy": 0.466552734375, "is_bug_line": false, "sus_score": 0.6954612135887146, "per_token_entropy": [0.33544921875, 0.50732421875, 0.40625, 2.16796875, 0.041717529296875, 0.07452392578125, 0.4609375, 1.30859375, 0.01145172119140625, 0.00046253204345703125, 0.66943359375, 1.15625, 0.0653076171875, 0.2427978515625, 0.173828125, 0.62841796875, 1.0927734375, 0.1258544921875, 0.0016889572143554688, 0.052642822265625, 0.00847625732421875, 0.037200927734375, 0.079833984375, 0.11236572265625, 0.0258636474609375, 0.0004496574401855469, 8.702278137207031e-06, 0.0001468658447265625, 0.255615234375, 0.2296142578125, 0.00017881393432617188, 0.0007233619689941406, 6.449222564697266e-05, 0.078369140625, 0.008544921875, 0.0004489421844482422, 0.324951171875, 0.56640625, 3.232421875, 0.60302734375, 1.130859375, 0.0015020370483398438, 0.1954345703125, 0.271728515625, 0.28515625, 0.40966796875, 0.032562255859375, 0.60009765625, 1.0068359375, 1.5986328125, 0.021331787109375, 3.62109375], "tokens": [291, 2218, 308, 1508, 27, 301, 324, 3311, 91, 45, 324, 415, 308, 91, 848, 1769, 2977, 21863, 1534, 27, 301, 400, 1422, 537, 7462, 31219, 28741, 984, 26, 1449, 2977, 21863, 1534, 293, 324, 320, 1064, 434, 4417, 322, 8382, 692, 1411, 372, 2290, 322, 2354, 2260, 324, 1158, 2064, 533]}
{"line_number": 120, "line_type": "original", "code": "        if (yInitial * yMin < 0) {", "entropy": 1.1220703125, "is_bug_line": false, "sus_score": 0.693701446056366, "per_token_entropy": [4.36328125, 1.05859375, 0.043121337890625, 1.1455078125, 6.0546875, 0.32275390625, 0.01084136962890625, 0.86279296875, 0.5498046875, 0.001800537109375, 0.00046324729919433594, 0.07489013671875, 0.0977783203125], "tokens": [351, 415, 308, 107, 4678, 319, 533, 2928, 333, 225, 34, 27, 301]}
{"line_number": 120, "line_type": "generated", "code": "\n            // check for a zero at the lower bound\n            if (Math.abs(yMin) <= functionValueAccuracy) {\n                setResult(yMin, 0);\n                return result;\n            }\n\n            // check for sign change between min and max", "entropy": 0.369384765625, "is_bug_line": false, "sus_score": 0.693701446056366, "per_token_entropy": [0.89404296875, 2.27734375, 2.330078125, 0.67919921875, 3.306640625, 1.76171875, 0.193115234375, 0.8134765625, 0.12451171875, 0.116455078125, 0.1614990234375, 0.10308837890625, 0.0169525146484375, 0.10888671875, 0.0007572174072265625, 0.0005483627319335938, 0.0001291036605834961, 0.003597259521484375, 0.0009546279907226562, 0.0029697418212890625, 0.04339599609375, 0.015655517578125, 0.003387451171875, 0.00012803077697753906, 0.0128021240234375, 0.005931854248046875, 0.03533935546875, 0.33837890625, 0.0005540847778320312, 0.0019235610961914062, 0.1151123046875, 0.0016355514526367188, 0.005126953125, 0.01336669921875, 0.0009899139404296875, 0.007762908935546875, 0.05633544921875, 0.075439453125, 0.0367431640625, 0.002899169921875, 0.0325927734375, 0.0013713836669921875, 0.259765625, 0.2607421875, 0.256103515625, 0.18017578125, 1.8701171875, 0.1307373046875, 1.5078125, 0.703125, 0.00850677490234375, 0.32958984375], "tokens": [324, 434, 1505, 436, 312, 5934, 821, 322, 7216, 5085, 324, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301, 400, 739, 1394, 26, 107, 2928, 30, 225, 34, 293, 400, 442, 1056, 45, 324, 320, 1064, 434, 1505, 436, 2596, 1539, 3733, 1847, 461, 1769]}
{"line_number": 103, "line_type": "original", "code": "        verifySequence(min, initial, max);", "entropy": 2.375, "is_bug_line": false, "sus_score": 0.6908342242240906, "per_token_entropy": [3.041015625, 9.7734375, 4.4296875, 0.08056640625, 1.5546875, 0.0078582763671875, 4.4296875, 0.016448974609375, 0.0946044921875, 0.321533203125], "tokens": [351, 6144, 5897, 26, 887, 30, 2815, 30, 1769, 293]}
{"line_number": 103, "line_type": "generated", "code": "\n     * @throws MaxIterationsExceededException if the maximum iteration count is\n     * exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if the values of the function at the\n     * endpoints have the same", "entropy": 0.156982421875, "is_bug_line": false, "sus_score": 0.6908342242240906, "per_token_entropy": [0.5322265625, 0.1475830078125, 0.007198333740234375, 0.03363037109375, 0.062103271484375, 4.494190216064453e-05, 8.52346420288086e-05, 6.16312026977539e-05, 0.927734375, 0.04180908203125, 0.034088134765625, 0.29443359375, 0.056640625, 0.77978515625, 0.7705078125, 5.7697296142578125e-05, 0.0009050369262695312, 0.275146484375, 0.01470184326171875, 0.0007548332214355469, 0.0023822784423828125, 0.005939483642578125, 0.00014519691467285156, 0.00031280517578125, 0.01262664794921875, 0.1248779296875, 0.0019063949584960938, 0.004131317138671875, 0.0665283203125, 0.541015625, 0.0225372314453125, 7.891654968261719e-05, 0.021331787109375, 0.0894775390625, 0.34423828125, 0.0023021697998046875, 0.029937744140625, 0.03887939453125, 0.0157470703125, 0.5810546875, 1.0361328125, 0.184814453125, 0.051239013671875, 0.02734375, 0.0411376953125, 0.10498046875, 0.0250244140625, 6.520748138427734e-05, 0.1888427734375, 0.52734375, 0.09027099609375, 0.0010843276977539062], "tokens": [275, 319, 477, 5117, 7462, 31219, 28741, 984, 415, 322, 7091, 13330, 2385, 438, 275, 319, 31793, 275, 319, 477, 5117, 4540, 19637, 984, 415, 600, 1048, 12984, 38680, 322, 275, 319, 667, 275, 319, 477, 5117, 12137, 415, 322, 2078, 432, 322, 667, 821, 322, 275, 319, 17532, 1159, 322, 2432]}
{"line_number": 113, "line_type": "original", "code": "        double yMin = f.value(min);", "entropy": 0.86376953125, "is_bug_line": false, "sus_score": 0.6908342242240906, "per_token_entropy": [4.796875, 3.193359375, 1.0009765625, 0.348388671875, 0.04974365234375, 0.0950927734375, 0.00446319580078125, 0.0016527175903320312, 0.00025653839111328125, 0.00485992431640625, 0.0037403106689453125], "tokens": [351, 2064, 533, 2928, 280, 296, 32, 853, 26, 887, 293]}
{"line_number": 113, "line_type": "generated", "code": "\n        return solve(f, min, max, min);\n    }\n\n    /**\n     * Find a zero in the given interval with a known root.\n     * <p>\n     * This method is used to find a zero near the root, the result of", "entropy": 0.529296875, "is_bug_line": false, "sus_score": 0.6908342242240906, "per_token_entropy": [0.2034912109375, 0.919921875, 0.0162506103515625, 0.00463104248046875, 0.007602691650390625, 0.0008325576782226562, 0.0064239501953125, 0.0006923675537109375, 0.20166015625, 0.0115966796875, 0.501953125, 0.036285400390625, 0.45947265625, 0.0023441314697265625, 0.446533203125, 0.08880615234375, 0.06243896484375, 3.921985626220703e-05, 0.91552734375, 0.07806396484375, 0.0182342529296875, 0.396484375, 0.1160888671875, 0.13232421875, 0.00913238525390625, 1.658203125, 1.087890625, 1.8076171875, 0.474853515625, 0.64306640625, 0.05560302734375, 0.0005130767822265625, 0.176025390625, 0.0034427642822265625, 0.00321197509765625, 0.1746826171875, 3.445148468017578e-05, 1.4619140625, 0.1331787109375, 1.25390625, 1.7294921875, 0.9267578125, 0.64501953125, 0.68798828125, 0.53857421875, 0.1708984375, 0.98876953125, 1.224609375, 1.30859375, 2.37890625, 2.609375, 0.7314453125], "tokens": [291, 442, 10932, 26, 88, 30, 1847, 30, 1769, 30, 1847, 293, 284, 320, 446, 1022, 275, 319, 7477, 312, 5934, 328, 322, 2702, 7898, 623, 312, 8967, 3051, 32, 275, 319, 333, 98, 48, 275, 319, 1348, 1411, 438, 1654, 372, 2290, 312, 5934, 12398, 322, 3051, 30, 322, 1056, 432]}
{"line_number": 114, "line_type": "original", "code": "        if (Math.abs(yMin) <= functionValueAccuracy) {", "entropy": 0.8251953125, "is_bug_line": false, "sus_score": 0.6876685619354248, "per_token_entropy": [4.11328125, 2.41796875, 0.0955810546875, 2.56640625, 0.00875091552734375, 1.4375, 0.0029697418212890625, 1.6005859375, 0.517578125, 0.042510986328125, 0.168212890625, 0.06903076171875, 0.007720947265625, 0.0005178451538085938, 0.10186767578125, 0.05340576171875], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 114, "line_type": "generated", "code": "\n        return solve(f, min, max, min);\n    }\n\n    /**\n     * Find a zero in the given interval.\n     * <p>\n     * The function is assumed to have one root in the given interval.\n     * If the function has", "entropy": 0.4111328125, "is_bug_line": false, "sus_score": 0.6876685619354248, "per_token_entropy": [0.75, 1.2451171875, 0.0538330078125, 0.0120849609375, 0.018402099609375, 0.0031909942626953125, 0.016815185546875, 0.0025386810302734375, 0.379638671875, 0.03375244140625, 0.350341796875, 0.0452880859375, 0.58251953125, 0.0018796920776367188, 0.423095703125, 0.0963134765625, 0.06280517578125, 3.993511199951172e-05, 0.89599609375, 0.075439453125, 0.0205230712890625, 0.4560546875, 0.11474609375, 0.1322021484375, 0.00815582275390625, 0.9677734375, 0.083251953125, 0.00011539459228515625, 0.159912109375, 0.0036373138427734375, 0.00330352783203125, 0.14501953125, 2.2292137145996094e-05, 1.8544921875, 1.2509765625, 0.65673828125, 1.001953125, 0.0207977294921875, 1.0126953125, 0.6875, 0.193359375, 1.1484375, 0.04193115234375, 0.82568359375, 0.017791748046875, 0.853515625, 0.92529296875, 0.00293731689453125, 2.109375, 0.9248046875, 0.391845703125, 0.31005859375], "tokens": [291, 442, 10932, 26, 88, 30, 1847, 30, 1769, 30, 1847, 293, 284, 320, 446, 1022, 275, 319, 7477, 312, 5934, 328, 322, 2702, 7898, 32, 275, 319, 333, 98, 48, 275, 319, 886, 667, 438, 20968, 372, 1159, 1591, 3051, 328, 322, 2702, 7898, 32, 275, 319, 1670, 322, 667, 1401]}
{"line_number": 125, "line_type": "original", "code": "        double yMax = f.value(max);", "entropy": 1.8291015625, "is_bug_line": false, "sus_score": 0.685533344745636, "per_token_entropy": [4.71875, 6.98046875, 2.541015625, 3.365234375, 1.3798828125, 0.8330078125, 0.01009368896484375, 0.006153106689453125, 0.004581451416015625, 0.263427734375, 0.0284271240234375], "tokens": [351, 2064, 533, 2708, 280, 296, 32, 853, 26, 1449, 293]}
{"line_number": 125, "line_type": "generated", "code": "\n            throw new NoBracketingException(min, yMin, max, yMax);\n        }\n\n        // Check if one of the bounds is the exact root\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            ret = min", "entropy": 0.288818359375, "is_bug_line": false, "sus_score": 0.685533344745636, "per_token_entropy": [0.23486328125, 0.1651611328125, 0.087890625, 0.8232421875, 0.00171661376953125, 0.01229095458984375, 8.690357208251953e-05, 0.1142578125, 0.41015625, 0.0034656524658203125, 0.75341796875, 0.00542449951171875, 0.0016231536865234375, 0.08319091796875, 0.0018701553344726562, 0.0036907196044921875, 0.00045037269592285156, 0.41357421875, 0.09832763671875, 0.0006580352783203125, 0.23779296875, 0.484130859375, 2.923828125, 1.2197265625, 0.98193359375, 0.06744384765625, 0.0228424072265625, 0.705078125, 0.47998046875, 1.564453125, 0.6904296875, 0.226318359375, 0.58056640625, 0.243408203125, 0.03387451171875, 0.1317138671875, 0.0019216537475585938, 0.0009784698486328125, 0.0002636909484863281, 0.1552734375, 0.045135498046875, 0.0025615692138671875, 0.03741455078125, 0.0169219970703125, 0.0006661415100097656, 0.0002613067626953125, 0.048858642578125, 0.0021839141845703125, 0.07879638671875, 0.79150390625, 0.0012331008911132812, 0.0269622802734375], "tokens": [324, 1422, 537, 3139, 24086, 299, 984, 26, 887, 30, 533, 2928, 30, 1769, 30, 533, 2708, 293, 291, 320, 584, 434, 3456, 415, 1591, 432, 322, 11615, 438, 322, 7153, 3051, 291, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301, 324, 2152, 280, 1847]}
{"line_number": 126, "line_type": "original", "code": "        if (Math.abs(yMax) <= functionValueAccuracy) {", "entropy": 0.7626953125, "is_bug_line": false, "sus_score": 0.685043215751648, "per_token_entropy": [5.31640625, 2.630859375, 0.136962890625, 0.1964111328125, 0.002902984619140625, 0.02264404296875, 0.0028705596923828125, 0.09979248046875, 2.875, 0.01348114013671875, 0.09979248046875, 0.07720947265625, 0.004848480224609375, 0.0010080337524414062, 0.62841796875, 0.09295654296875], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 107, 2708, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 126, "line_type": "generated", "code": "\n                throw new NoBracketingException(min, max, yMin, yMax,\n                    functionValueAccuracy);\n        }\n\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(yMin, 0);\n           ", "entropy": 0.2646484375, "is_bug_line": false, "sus_score": 0.685043215751648, "per_token_entropy": [0.96728515625, 1.0361328125, 0.073974609375, 0.314697265625, 0.0021800994873046875, 0.015167236328125, 8.928775787353516e-05, 0.12188720703125, 0.430908203125, 0.0030345916748046875, 1.02734375, 0.04461669921875, 0.2440185546875, 0.01458740234375, 0.01454925537109375, 0.0279083251953125, 0.0014257431030273438, 1.1806640625, 3.0703125, 0.4755859375, 0.007541656494140625, 0.0008320808410644531, 0.10443115234375, 0.92041015625, 0.0037746429443359375, 0.2861328125, 1.630859375, 0.052581787109375, 0.489990234375, 0.0011501312255859375, 0.009002685546875, 0.0005407333374023438, 0.19189453125, 0.07452392578125, 0.005298614501953125, 0.157958984375, 0.03228759765625, 0.0006718635559082031, 0.00014793872833251953, 0.07958984375, 0.0020809173583984375, 0.039093017578125, 0.453125, 0.0008344650268554688, 0.0012750625610351562, 0.074951171875, 0.006664276123046875, 0.0032138824462890625, 0.01557159423828125, 0.0014562606811523438, 0.00754547119140625, 0.04254150390625], "tokens": [400, 1422, 537, 3139, 24086, 299, 984, 26, 887, 30, 1769, 30, 533, 2928, 30, 533, 2708, 30, 528, 667, 882, 26201, 293, 291, 320, 584, 415, 308, 5717, 32, 3596, 26, 107, 2928, 27, 2511, 667, 882, 26201, 27, 301, 324, 739, 1394, 26, 107, 2928, 30, 225, 34, 293, 324]}
{"line_number": 107, "line_type": "original", "code": "        if (Math.abs(yInitial) <= functionValueAccuracy) {", "entropy": 1.126953125, "is_bug_line": false, "sus_score": 0.6836965680122375, "per_token_entropy": [2.689453125, 6.453125, 2.830078125, 1.7236328125, 0.0022106170654296875, 0.86962890625, 0.004581451416015625, 0.5771484375, 2.3671875, 0.01837158203125, 0.1392822265625, 0.0892333984375, 0.0174407958984375, 0.0010595321655273438, 0.08416748046875, 0.16162109375], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 107, 4678, 27, 2511, 667, 882, 26201, 27, 301]}
{"line_number": 107, "line_type": "generated", "code": "            function values at the endpoints do not have opposite signs", "entropy": 0.58740234375, "is_bug_line": false, "sus_score": 0.6836965680122375, "per_token_entropy": [2.4453125, 0.68896484375, 0.39794921875, 0.2454833984375, 0.09368896484375, 0.5283203125, 1.19921875, 0.02471923828125, 0.269775390625, 0.5, 0.066162109375], "tokens": [1468, 667, 2078, 821, 322, 17532, 745, 646, 1159, 30519, 39842]}
{"line_number": 132, "line_type": "original", "code": "        if (yInitial * yMax < 0) {", "entropy": 1.328125, "is_bug_line": false, "sus_score": 0.6771073937416077, "per_token_entropy": [4.171875, 4.26953125, 0.064697265625, 3.533203125, 1.9462890625, 0.1650390625, 0.02117919921875, 2.87890625, 0.095458984375, 0.0021839141845703125, 0.0005517005920410156, 0.08984375, 0.02606201171875], "tokens": [351, 415, 308, 107, 4678, 319, 533, 2708, 333, 225, 34, 27, 301]}
{"line_number": 132, "line_type": "generated", "code": "\n            } else {\n                // neither value is close to zero\n                throw new NoBracketingException(min, max, yMin, yMax);\n            }\n        } else {\n            // bracketing is OK\n            ret = solve(f, min, y", "entropy": 0.302734375, "is_bug_line": false, "sus_score": 0.6771073937416077, "per_token_entropy": [0.387939453125, 0.186767578125, 0.21142578125, 0.246337890625, 0.1351318359375, 0.806640625, 2.626953125, 0.5634765625, 0.1552734375, 0.2418212890625, 0.1287841796875, 0.51318359375, 0.9404296875, 0.61669921875, 0.02935791015625, 0.3466796875, 0.002498626708984375, 0.0066070556640625, 7.87973403930664e-05, 0.0648193359375, 0.321044921875, 0.0017023086547851562, 1.0205078125, 0.01430511474609375, 0.1837158203125, 0.0074615478515625, 0.0164947509765625, 0.022308349609375, 0.00031113624572753906, 0.232421875, 0.09375, 0.0012941360473632812, 0.1817626953125, 0.004673004150390625, 0.13427734375, 0.399658203125, 0.1435546875, 0.298095703125, 1.9013671875, 0.43310546875, 0.1610107421875, 0.31396484375, 0.6689453125, 0.427001953125, 0.0007238388061523438, 0.046539306640625, 0.00818634033203125, 0.0007767677307128906, 0.00015997886657714844, 0.0027599334716796875, 6.35385513305664e-05, 0.48828125], "tokens": [324, 320, 813, 301, 400, 434, 25209, 786, 438, 4230, 372, 5934, 400, 1422, 537, 3139, 24086, 299, 984, 26, 887, 30, 1769, 30, 533, 2928, 30, 533, 2708, 293, 324, 320, 291, 320, 813, 301, 324, 434, 33828, 299, 438, 9199, 324, 2152, 280, 10932, 26, 88, 30, 1847, 30, 533]}
{"line_number": 106, "line_type": "original", "code": "        double yInitial = f.value(initial);", "entropy": 1.2119140625, "is_bug_line": false, "sus_score": 0.6675572395324707, "per_token_entropy": [3.494140625, 4.32421875, 1.38671875, 3.845703125, 0.036224365234375, 0.1483154296875, 0.00835418701171875, 0.00665283203125, 0.003421783447265625, 0.0665283203125, 0.0128326416015625], "tokens": [351, 2064, 533, 4678, 280, 296, 32, 853, 26, 4332, 293]}
{"line_number": 106, "line_type": "generated", "code": "\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifyBracket(min, max);\n\n        // return the first endpoint", "entropy": 0.140380859375, "is_bug_line": false, "sus_score": 0.6675572395324707, "per_token_entropy": [0.416748046875, 0.3779296875, 0.036376953125, 0.12066650390625, 0.006488800048828125, 0.0008907318115234375, 0.0008382797241210938, 0.1990966796875, 0.0036449432373046875, 7.152557373046875e-07, 4.553794860839844e-05, 4.100799560546875e-05, 0.0005826950073242188, 0.00025177001953125, 0.5302734375, 0.03485107421875, 0.0002651214599609375, 0.0007948875427246094, 4.780292510986328e-05, 0.0110321044921875, 9.09566879272461e-05, 0.00022423267364501953, 0.0009102821350097656, 0.035247802734375, 0.0001227855682373047, 0.0081787109375, 3.933906555175781e-06, 5.9604644775390625e-06, 5.4836273193359375e-06, 0.0013132095336914062, 0.0187835693359375, 7.355213165283203e-05, 4.649162292480469e-06, 0.0182342529296875, 0.24755859375, 0.61083984375, 0.00027108192443847656, 0.00018203258514404297, 0.1937255859375, 0.099609375, 1.2080078125, 0.451904296875, 0.3515625, 0.0009984970092773438, 0.033905029296875, 0.2017822265625, 0.300048828125, 0.431396484375, 0.888671875, 0.07574462890625, 0.361572265625, 0.01444244384765625], "tokens": [275, 569, 284, 562, 2064, 10932, 26, 3220, 1683, 27623, 6877, 2447, 296, 30, 715, 1158, 2064, 1847, 30, 1158, 2064, 1769, 27, 291, 2571, 7462, 31219, 28741, 984, 30, 4540, 19637, 984, 301, 584, 4233, 1394, 473, 291, 6144, 24086, 26, 887, 30, 1769, 293, 584, 434, 442, 322, 1932, 6998]}
{"line_number": 250, "line_type": "original", "code": "                setResult(x1, i);", "entropy": 1.91796875, "is_bug_line": false, "sus_score": 0.6613504886627197, "per_token_entropy": [4.39453125, 7.203125, 0.03466796875, 0.01465606689453125, 0.060455322265625, 0.128662109375, 5.33203125, 0.031524658203125, 0.07098388671875], "tokens": [2071, 739, 1394, 26, 106, 35, 30, 595, 293]}
{"line_number": 250, "line_type": "generated", "code": "\n                x1 = x1 + tolerance;\n            } else {\n                x1 = x1 - tolerance;\n            }\n            y1 = f.value(x1);\n            i++;\n        }\n\n        throw new MaxIterationsExceededException();\n\n    }", "entropy": 0.1419677734375, "is_bug_line": false, "sus_score": 0.6613504886627197, "per_token_entropy": [0.30322265625, 0.12939453125, 0.0017595291137695312, 0.1949462890625, 0.058319091796875, 0.03582763671875, 0.032135009765625, 0.192626953125, 0.0016765594482421875, 0.036407470703125, 0.00070953369140625, 0.003307342529296875, 0.044921875, 0.78076171875, 0.01346588134765625, 0.0003650188446044922, 0.0005083084106445312, 0.00060272216796875, 0.0005807876586914062, 0.0021514892578125, 0.0003905296325683594, 0.0007638931274414062, 0.0226287841796875, 0.0017299652099609375, 0.1536865234375, 0.6259765625, 0.006622314453125, 0.0031719207763671875, 0.09930419921875, 0.001041412353515625, 0.00632476806640625, 0.0010061264038085938, 0.0018148422241210938, 0.0004291534423828125, 0.002582550048828125, 0.2161865234375, 1.0908203125, 0.31103515625, 0.2174072265625, 0.00078582763671875, 1.171875, 0.2060546875, 0.00946044921875, 0.0181121826171875, 0.0005254745483398438, 2.491474151611328e-05, 6.604194641113281e-05, 0.55859375, 0.533203125, 0.004058837890625], "tokens": [400, 816, 35, 280, 816, 35, 474, 26434, 45, 324, 320, 813, 301, 400, 816, 35, 280, 816, 35, 429, 26434, 45, 324, 320, 324, 533, 35, 280, 296, 32, 853, 26, 106, 35, 293, 324, 595, 3334, 291, 320, 584, 1422, 537, 7462, 31219, 28741, 984, 473, 446, 320]}
{"line_number": 138, "line_type": "original", "code": "        return solve(f, min, yMin, max, yMax, initial, yInitial);", "entropy": 0.9384765625, "is_bug_line": true, "sus_score": 0.6411014795303345, "per_token_entropy": [3.8125, 7.5625, 2.73046875, 0.0263214111328125, 0.0067596435546875, 0.0021495819091796875, 0.065673828125, 0.002532958984375, 0.66943359375, 0.0018901824951171875, 0.004177093505859375, 0.0214996337890625, 0.00232696533203125, 0.0020313262939453125, 0.0007605552673339844, 1.310546875, 3.263671875, 0.07806396484375, 0.09527587890625, 0.0303192138671875, 0.01094818115234375], "tokens": [351, 442, 10932, 26, 88, 30, 1847, 30, 533, 2928, 30, 1769, 30, 533, 2708, 30, 2815, 30, 533, 4678, 293]}
{"line_number": 138, "line_type": "generated", "code": "\n        } else {\n            // min and max must be identical\n            setResult(min, 0);\n            ret = min;\n        }\n\n        return ret;\n\n    }\n\n    /**\n     * Verify that the endpoints specify an interval.\n     *\n     * @param", "entropy": 0.322509765625, "is_bug_line": true, "sus_score": 0.6411014795303345, "per_token_entropy": [0.2034912109375, 0.005413055419921875, 0.41162109375, 0.1636962890625, 0.12841796875, 0.1962890625, 1.5498046875, 0.53466796875, 0.006816864013671875, 2.08203125, 0.1546630859375, 1.7578125, 0.57470703125, 0.85498046875, 0.0004792213439941406, 0.00811767578125, 0.5966796875, 0.001087188720703125, 0.0164794921875, 0.0009741783142089844, 0.00119781494140625, 0.0112457275390625, 0.00811004638671875, 0.0008478164672851562, 0.00495147705078125, 0.00011098384857177734, 0.01149749755859375, 0.0004134178161621094, 0.180419921875, 0.166259765625, 0.09356689453125, 0.0018301010131835938, 1.2431640625, 0.0021419525146484375, 0.587890625, 0.06561279296875, 0.054931640625, 4.839897155761719e-05, 2.517578125, 0.233154296875, 0.60009765625, 0.42431640625, 0.0540771484375, 0.0007987022399902344, 0.006866455078125, 0.5390625, 0.04180908203125, 0.0007185935974121094, 0.65625, 8.118152618408203e-05, 0.005825042724609375, 0.002101898193359375], "tokens": [291, 320, 813, 301, 324, 434, 1847, 461, 1769, 2298, 526, 21036, 324, 739, 1394, 26, 887, 30, 225, 34, 293, 324, 2152, 280, 1847, 45, 291, 320, 584, 442, 2152, 45, 446, 320, 446, 1022, 275, 319, 12072, 688, 322, 17532, 6377, 600, 7898, 32, 275, 319, 275, 319, 477, 753]}
{"line_number": 102, "line_type": "original", "code": "        clearResult();", "entropy": 3.982421875, "is_bug_line": false, "sus_score": 0.6371239423751831, "per_token_entropy": [2.6796875, 12.9296875, 0.3076171875, 0.00942230224609375], "tokens": [351, 4233, 1394, 473]}
{"line_number": 102, "line_type": "generated", "code": "\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if the values", "entropy": 0.0767822265625, "is_bug_line": false, "sus_score": 0.6371239423751831, "per_token_entropy": [0.26171875, 0.03704833984375, 0.014434814453125, 0.124755859375, 0.1302490234375, 0.06256103515625, 0.005523681640625, 0.0106201171875, 0.004547119140625, 0.0007529258728027344, 0.0012302398681640625, 0.22509765625, 0.01085662841796875, 0.003326416015625, 0.021270751953125, 0.051239013671875, 4.5299530029296875e-05, 8.177757263183594e-05, 4.2438507080078125e-05, 0.491943359375, 0.0012111663818359375, 0.00801849365234375, 0.01129913330078125, 0.1824951171875, 7.283687591552734e-05, 0.02996826171875, 0.0001856088638305664, 0.026336669921875, 0.00502777099609375, 0.00022721290588378906, 0.00112152099609375, 0.00380706787109375, 5.507469177246094e-05, 0.00014853477478027344, 0.0091400146484375, 0.02215576171875, 0.0002913475036621094, 0.00160980224609375, 0.017120361328125, 0.02838134765625, 4.887580871582031e-05, 0.27880859375, 0.0002913475036621094, 0.0006055831909179688, 0.0258941650390625, 0.266357421875, 0.0017518997192382812, 0.02056884765625, 0.0243377685546875, 0.00998687744140625, 0.6025390625, 0.95751953125], "tokens": [275, 319, 477, 601, 322, 786, 2154, 322, 667, 438, 5934, 275, 319, 477, 5117, 7462, 31219, 28741, 984, 322, 7091, 13330, 2385, 275, 319, 438, 31793, 275, 319, 477, 5117, 4540, 19637, 984, 415, 600, 1048, 12984, 38680, 275, 319, 225, 322, 667, 275, 319, 477, 5117, 12137, 415, 322, 2078]}
{"line_number": 247, "line_type": "original", "code": "            double tolerance =", "entropy": 4.86328125, "is_bug_line": false, "sus_score": 0.6342006921768188, "per_token_entropy": [7.1875, 2.6640625, 8.7109375, 0.8857421875], "tokens": [1468, 2064, 26434, 280]}
{"line_number": 247, "line_type": "generated", "code": "\n            x1 += delta;\n            y1 = f.value(x1);\n            i += 1;\n        }\n        throw new MaxIterationsExceededException();\n    }", "entropy": 0.2076416015625, "is_bug_line": false, "sus_score": 0.6342006921768188, "per_token_entropy": [0.5556640625, 0.6787109375, 0.034698486328125, 0.350830078125, 0.006175994873046875, 0.0022258758544921875, 0.1715087890625, 0.356689453125, 0.0026607513427734375, 0.003665924072265625, 0.04510498046875, 0.0014476776123046875, 0.00787353515625, 0.0018768310546875, 0.0029621124267578125, 0.0012292861938476562, 0.0043182373046875, 0.302978515625, 1.1435546875, 1.7294921875, 0.0042266845703125, 0.0237274169921875, 0.0014066696166992188, 0.2015380859375, 0.002132415771484375, 0.78515625, 0.1563720703125, 0.009613037109375, 0.0225067138671875, 0.000621795654296875, 2.8252601623535156e-05, 8.654594421386719e-05, 0.5205078125, 0.1353759765625, 0.00397491455078125], "tokens": [324, 816, 35, 1454, 7715, 45, 324, 533, 35, 280, 296, 32, 853, 26, 106, 35, 293, 324, 595, 1454, 225, 35, 45, 291, 320, 291, 1422, 537, 7462, 31219, 28741, 984, 473, 284, 320]}
{"line_number": 299, "line_type": "original", "code": "            } else if (dx > 0.0) {", "entropy": 1.416015625, "is_bug_line": false, "sus_score": 0.6330085396766663, "per_token_entropy": [6.62109375, 2.353515625, 3.482421875, 1.892578125, 0.08343505859375, 0.51416015625, 2.9375, 0.0258636474609375, 0.00586700439453125, 0.41357421875, 0.002655029296875, 0.0258026123046875, 0.051788330078125], "tokens": [1468, 320, 813, 415, 308, 4582, 848, 225, 34, 32, 34, 27, 301]}
{"line_number": 299, "line_type": "generated", "code": "\n    /**\n     * Get the root approximation.\n     *\n     * @return the root approximation\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     * the function\n     * @throws NoBracketingException if no bracketing interval can be found\n     */", "entropy": 0.416259765625, "is_bug_line": false, "sus_score": 0.6330085396766663, "per_token_entropy": [0.96435546875, 0.78515625, 0.2042236328125, 0.00019788742065429688, 2.91015625, 0.296630859375, 2.484375, 1.19140625, 0.5263671875, 0.033966064453125, 0.0037078857421875, 0.55029296875, 0.00042748451232910156, 0.0129852294921875, 0.036376953125, 0.1944580078125, 0.337158203125, 0.0198974609375, 0.1807861328125, 1.4306640625, 0.06549072265625, 0.083251953125, 1.2392578125, 0.002071380615234375, 0.0008826255798339844, 0.0186004638671875, 0.90625, 0.0011491775512695312, 0.0367431640625, 0.442626953125, 0.08935546875, 0.00017726421356201172, 0.0069427490234375, 0.0295562744140625, 0.13232421875, 1.2568359375, 0.0124053955078125, 0.04248046875, 0.7431640625, 0.03729248046875, 0.004741668701171875, 0.00010502338409423828, 0.0146026611328125, 1.94140625, 0.1904296875, 0.0249481201171875, 0.379638671875, 1.13671875, 0.01097869873046875, 0.168701171875, 0.1053466796875, 0.348876953125], "tokens": [284, 1022, 275, 319, 1390, 322, 3051, 39431, 32, 275, 319, 275, 319, 477, 601, 322, 3051, 39431, 275, 319, 477, 5117, 4540, 19637, 984, 415, 600, 1048, 12984, 38680, 275, 319, 322, 667, 275, 319, 477, 5117, 3139, 24086, 299, 984, 415, 1289, 33828, 299, 7898, 883, 526, 2431, 275, 569]}
{"line_number": 287, "line_type": "original", "code": "                    oldDelta = delta;", "entropy": 3.0625, "is_bug_line": false, "sus_score": 0.630042314529419, "per_token_entropy": [9.265625, 8.8671875, 0.1241455078125, 0.01537322998046875, 0.0721435546875, 0.0299530029296875], "tokens": [4696, 3610, 9189, 280, 7715, 45]}
{"line_number": 287, "line_type": "generated", "code": "\n    /**\n     * Check for NaN values.\n     *\n     * @param x Value to be checked.\n     * @param msg Message to be added to the exception.\n     * @throws FunctionEvaluationException if {@code x} is NaN.\n     */\n   ", "entropy": 0.5087890625, "is_bug_line": false, "sus_score": 0.630042314529419, "per_token_entropy": [1.15625, 0.365478515625, 0.1708984375, 0.00019097328186035156, 2.93359375, 2.111328125, 2.671875, 0.83154296875, 1.0751953125, 0.14404296875, 0.042083740234375, 1.037109375, 0.0007805824279785156, 0.0184783935546875, 0.054931640625, 0.68701171875, 0.85498046875, 0.51318359375, 0.289306640625, 0.169921875, 0.19384765625, 0.0037899017333984375, 0.10345458984375, 0.034454345703125, 1.162109375, 1.81640625, 0.1756591796875, 0.421630859375, 0.69482421875, 1.1845703125, 0.327392578125, 0.53173828125, 0.2449951171875, 0.4892578125, 0.006267547607421875, 0.051788330078125, 0.072265625, 0.3134765625, 0.6298828125, 0.0189056396484375, 0.0004992485046386719, 0.058349609375, 1.00390625, 0.0016946792602539062, 0.08807373046875, 0.01186370849609375, 0.12371826171875, 0.97216796875, 0.45947265625, 0.003742218017578125, 0.10675048828125, 0.015777587890625], "tokens": [284, 1022, 275, 319, 3456, 436, 21644, 2078, 32, 275, 319, 275, 319, 477, 753, 816, 3846, 372, 526, 8137, 32, 275, 319, 477, 753, 3124, 4578, 372, 526, 3640, 372, 322, 3756, 32, 275, 319, 477, 5117, 4540, 19637, 984, 415, 3088, 687, 816, 111, 438, 21644, 32, 275, 569, 284]}
