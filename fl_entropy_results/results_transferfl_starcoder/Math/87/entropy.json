{"line_number": 328, "line_type": "original", "code": "        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());", "entropy": 1.05078125, "is_bug_line": false, "sus_score": 0.8695369362831116, "per_token_entropy": [5.62109375, 3.8671875, 1.623046875, 0.01666259765625, 0.10662841796875, 9.9921875, 1.390625, 0.55078125, 0.01111602783203125, 0.051666259765625, 0.9443359375, 0.0036144256591796875, 0.08447265625, 0.58251953125, 0.1077880859375, 0.0014638900756835938, 0.029754638671875, 0.00015211105346679688, 0.0014028549194335938, 0.11297607421875, 0.005565643310546875, 1.0848045349121094e-05, 0.0003809928894042969, 0.11419677734375], "tokens": [351, 2064, 4630, 17152, 280, 6550, 2352, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 328, "line_type": "generated", "code": "\n    /**\n     * Subtracts a multiple of one row from another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   minuendRow = minuendRow - multiple * subtrahendRow", "entropy": 0.1002197265625, "is_bug_line": false, "sus_score": 0.8695369362831116, "per_token_entropy": [0.60205078125, 0.1949462890625, 0.034332275390625, 3.4689903259277344e-05, 3.572265625, 0.1248779296875, 0.1746826171875, 0.007801055908203125, 0.0024871826171875, 0.0188140869140625, 0.1380615234375, 0.005992889404296875, 0.017669677734375, 0.1607666015625, 0.01251983642578125, 0.0003364086151123047, 0.011138916015625, 0.0012807846069335938, 0.00026869773864746094, 0.0011854171752929688, 2.086162567138672e-05, 0.020111083984375, 0.0008530616760253906, 0.00014269351959228516, 0.0001361370086669922, 0.0001806020736694336, 0.00040602684020996094, 0.0003960132598876953, 0.00041794776916503906, 0.0002942085266113281, 0.00019979476928710938, 0.0008993148803710938, 0.0006051063537597656, 7.56978988647461e-05, 0.01236724853515625, 0.037353515625, 0.00016391277313232422, 8.666515350341797e-05, 0.0081634521484375, 0.01102447509765625, 0.003803253173828125, 0.00013589859008789062, 9.739398956298828e-05, 5.602836608886719e-06, 0.01230621337890625, 0.0015115737915039062, 0.001010894775390625, 0.00765228271484375, 6.151199340820312e-05, 7.033348083496094e-06, 0.00013053417205810547, 0.010528564453125], "tokens": [284, 1022, 275, 319, 48588, 101, 312, 4609, 432, 1591, 2698, 645, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 1847, 103, 416, 2352, 280, 1847, 103, 416, 2352, 429, 4609, 319, 1361, 359, 2371, 416, 2352]}
{"line_number": 261, "line_type": "original", "code": "        for (double coefficient : coefficients.getData()) {", "entropy": 2.1796875, "is_bug_line": false, "sus_score": 0.8108181953430176, "per_token_entropy": [2.30859375, 2.953125, 0.0562744140625, 5.7734375, 4.47265625, 0.04241943359375, 2.42578125, 2.427734375, 3.412109375, 0.02484130859375, 0.08441162109375], "tokens": [351, 436, 308, 2627, 17134, 499, 26370, 32, 11576, 1157, 301]}
{"line_number": 261, "line_type": "generated", "code": "\n     * @param srcPos the source position\n     * @param length the number of elements to copy\n     */\n    private static void copy(final double[] src, final double[] dest, final int destPos, final int srcPos, final int length)", "entropy": 0.173583984375, "is_bug_line": false, "sus_score": 0.8108181953430176, "per_token_entropy": [1.0498046875, 0.896484375, 0.140625, 0.11700439453125, 0.61376953125, 0.01904296875, 0.033721923828125, 0.060272216796875, 0.0177001953125, 0.3330078125, 0.035003662109375, 0.0027217864990234375, 0.006458282470703125, 0.11279296875, 0.0543212890625, 0.326904296875, 0.013214111328125, 0.248291015625, 0.0421142578125, 0.302978515625, 0.443603515625, 0.035614013671875, 0.040283203125, 0.333740234375, 0.849609375, 0.0240325927734375, 0.33544921875, 0.277587890625, 0.1300048828125, 0.0533447265625, 0.09893798828125, 0.004192352294921875, 0.0002467632293701172, 0.1136474609375, 0.01763916015625, 0.0027179718017578125, 0.0011949539184570312, 0.00014209747314453125, 0.56787109375, 0.001255035400390625, 0.04833984375, 0.00016689300537109375, 0.0011434555053710938, 0.86767578125, 0.003154754638671875, 0.004550933837890625, 0.0001990795135498047, 0.0006842613220214844, 0.322265625, 0.00255584716796875, 0.0018768310546875, 0.0115966796875], "tokens": [275, 319, 477, 753, 1561, 2996, 322, 1914, 2747, 275, 319, 477, 753, 3104, 322, 1451, 432, 4702, 372, 1933, 275, 569, 284, 945, 907, 763, 1933, 26, 3220, 2064, 1178, 1561, 30, 1158, 2064, 1178, 3466, 30, 1158, 629, 3466, 2996, 30, 1158, 629, 1561, 2996, 30, 1158, 629, 3104, 27]}
{"line_number": 161, "line_type": "original", "code": "                        matrix[row][getSlackVariableOffset() - 1] =", "entropy": 1.8603515625, "is_bug_line": false, "sus_score": 0.806242823600769, "per_token_entropy": [9.0234375, 9.7421875, 0.1719970703125, 0.25341796875, 0.026275634765625, 1.96875, 0.72216796875, 0.00070953369140625, 0.0011005401611328125, 0.048553466796875, 5.74609375, 0.0290069580078125, 0.00330352783203125, 0.039276123046875, 0.12359619140625], "tokens": [6797, 5045, 77, 643, 1674, 371, 31185, 3818, 3457, 346, 429, 225, 35, 79, 280]}
{"line_number": 161, "line_type": "generated", "code": "\n        if (constraint.getRelationship() == Relationship.LEQ) {\n            return constraint;\n        } else if (constraint.getRelationship() == Relationship.GEQ) {\n            return new LinearConstraint(constraint.getCoefficients(), Relationship.LEQ", "entropy": 0.1627197265625, "is_bug_line": false, "sus_score": 0.806242823600769, "per_token_entropy": [0.78955078125, 1.3974609375, 0.0889892578125, 0.133544921875, 0.007152557373046875, 0.321533203125, 0.007747650146484375, 0.021270751953125, 0.09698486328125, 0.007083892822265625, 0.0005474090576171875, 0.587890625, 9.393692016601562e-05, 0.07843017578125, 0.0141754150390625, 0.1640625, 0.209716796875, 0.32177734375, 0.06475830078125, 0.0865478515625, 0.0008387565612792969, 0.6005859375, 0.296142578125, 0.0145416259765625, 0.0197601318359375, 0.0006251335144042969, 0.00246429443359375, 0.0007448196411132812, 0.0012712478637695312, 0.0024051666259765625, 0.0009174346923828125, 7.367134094238281e-05, 0.17578125, 2.396106719970703e-05, 0.006927490234375, 0.0015583038330078125, 0.242919921875, 0.392578125, 0.337158203125, 0.026214599609375, 0.003414154052734375, 0.069580078125, 0.284912109375, 0.09259033203125, 0.089111328125, 0.060272216796875, 0.00029659271240234375, 0.10595703125, 1.2255859375, 0.0003814697265625, 0.0083465576171875, 9.059906005859375e-06], "tokens": [291, 415, 308, 12704, 32, 371, 13175, 346, 610, 38246, 32, 815, 67, 27, 301, 324, 442, 13118, 45, 291, 320, 813, 415, 308, 12704, 32, 371, 13175, 346, 610, 38246, 32, 57, 2697, 27, 301, 324, 442, 537, 13935, 9012, 26, 12704, 32, 371, 8973, 101, 1026, 38246, 32, 815, 67]}
{"line_number": 260, "line_type": "original", "code": "        double sum = 0;", "entropy": 1.1005859375, "is_bug_line": false, "sus_score": 0.8061192035675049, "per_token_entropy": [1.150390625, 3.865234375, 1.890625, 0.11810302734375, 0.15234375, 0.00498199462890625, 0.52099609375], "tokens": [351, 2064, 3632, 280, 225, 34, 45]}
{"line_number": 260, "line_type": "generated", "code": "        for (int i = 0; i < src.length; i++) {\n            dest[i] = src[i];\n        }\n     */\n    private void copy(final double[] src, final double[] dest) {", "entropy": 0.1571044921875, "is_bug_line": false, "sus_score": 0.8061192035675049, "per_token_entropy": [1.150390625, 0.51953125, 0.016326904296875, 0.00965118408203125, 0.073486328125, 0.0163726806640625, 0.08203125, 0.006328582763671875, 0.0256500244140625, 0.0020771026611328125, 0.03204345703125, 0.31591796875, 0.006984710693359375, 0.0168304443359375, 0.0185089111328125, 0.1781005859375, 0.010498046875, 0.037109375, 0.240478515625, 0.11480712890625, 0.006221771240234375, 0.0293426513671875, 0.035919189453125, 0.023040771484375, 0.1412353515625, 0.0035228729248046875, 0.030181884765625, 0.1510009765625, 0.06634521484375, 0.0025997161865234375, 1.140625, 0.2166748046875, 0.423828125, 0.64013671875, 0.368896484375, 0.2421875, 0.81396484375, 0.057830810546875, 0.136474609375, 0.0640869140625, 0.00537109375, 0.00020873546600341797, 0.018798828125, 0.0193328857421875, 0.005176544189453125, 0.0016813278198242188, 0.0027637481689453125, 0.019622802734375], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 1561, 32, 1322, 45, 595, 1987, 301, 324, 3466, 77, 91, 79, 280, 1561, 77, 91, 970, 291, 320, 275, 569, 284, 945, 763, 1933, 26, 3220, 2064, 1178, 1561, 30, 1158, 2064, 1178, 3466, 27, 301]}
{"line_number": 70, "line_type": "original", "code": "", "entropy": 4.24609375, "is_bug_line": false, "sus_score": 0.7526319622993469, "per_token_entropy": [4.24609375], "tokens": [203]}
{"line_number": 70, "line_type": "generated", "code": "\n     * @param maximize whether the problem should be maximized\n     * @return tableau\n     */\n    private double[][] createTableau(final boolean maximize) {\n\n        // build tableau\n        int m = getNumRows();\n        int n = getNum", "entropy": 0.45849609375, "is_bug_line": false, "sus_score": 0.7526319622993469, "per_token_entropy": [0.26806640625, 0.05230712890625, 0.283203125, 0.1212158203125, 0.84228515625, 0.1602783203125, 1.2998046875, 1.236328125, 1.0009765625, 1.1142578125, 0.029083251953125, 0.1990966796875, 0.01338958740234375, 0.32421875, 0.0176544189453125, 0.00537109375, 0.0018129348754882812, 1.291015625, 0.00206756591796875, 0.9560546875, 0.10968017578125, 0.015380859375, 0.5205078125, 0.282958984375, 0.0248870849609375, 0.0021114349365234375, 0.0003108978271484375, 4.76837158203125e-07, 0.0001461505889892578, 0.487060546875, 0.0012836456298828125, 0.0016679763793945312, 1.6689300537109375e-06, 0.003307342529296875, 0.0048675537109375, 0.75634765625, 0.303955078125, 1.90625, 2.05078125, 0.0770263671875, 0.6796875, 2.0390625, 2.63671875, 0.21142578125, 1.068359375, 0.9501953125, 0.2481689453125, 0.06878662109375, 0.0421142578125, 0.0176544189453125, 0.002452850341796875, 0.10638427734375], "tokens": [275, 319, 477, 753, 1769, 12178, 4946, 322, 3708, 1395, 526, 35048, 1191, 275, 319, 477, 601, 1858, 4452, 275, 569, 284, 945, 2064, 11336, 1487, 1599, 4452, 26, 3220, 1905, 1769, 12178, 27, 301, 584, 434, 1968, 1858, 4452, 291, 629, 345, 280, 44929, 7252, 473, 291, 629, 310, 280, 44929]}
{"line_number": 886, "line_type": "original", "code": "", "entropy": 0.27294921875, "is_bug_line": false, "sus_score": 0.7495705485343933, "per_token_entropy": [0.27294921875], "tokens": [203]}
{"line_number": 886, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7495705485343933, "per_token_entropy": [], "tokens": []}
{"line_number": 149, "line_type": "original", "code": "                // initialize the constraint rows", "entropy": 3.580078125, "is_bug_line": false, "sus_score": 0.7479696273803711, "per_token_entropy": [6.37109375, 3.689453125, 4.375, 1.025390625, 2.82421875, 3.19921875], "tokens": [2071, 434, 7379, 322, 13118, 5760]}
{"line_number": 149, "line_type": "generated", "code": "\n        for (LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == Relationship.LEQ) {\n                normalized.add(constraint);\n            } else if (constraint.getRelationship() == Relationship.GEQ) {\n                normalized.", "entropy": 0.1405029296875, "is_bug_line": false, "sus_score": 0.7479696273803711, "per_token_entropy": [0.316650390625, 0.1666259765625, 0.005893707275390625, 0.305908203125, 0.00035381317138671875, 0.227783203125, 0.03265380859375, 0.061431884765625, 0.0016527175903320312, 0.004238128662109375, 0.06903076171875, 0.89697265625, 0.11273193359375, 0.497314453125, 0.00472259521484375, 0.96923828125, 0.0147857666015625, 0.0277862548828125, 0.245849609375, 0.00409698486328125, 0.00014841556549072266, 0.908203125, 1.52587890625e-05, 0.162841796875, 0.004669189453125, 0.04620361328125, 0.379638671875, 0.0007390975952148438, 0.0018777847290039062, 0.0030517578125, 0.60595703125, 0.59130859375, 0.07281494140625, 0.0013904571533203125, 0.045440673828125, 0.11102294921875, 0.024139404296875, 0.0112152099609375, 0.00043010711669921875, 0.003559112548828125, 0.00030159950256347656, 0.0005497932434082031, 0.004947662353515625, 0.0007228851318359375, 1.800060272216797e-05, 0.106689453125, 8.58306884765625e-06, 0.01055145263671875, 0.0007319450378417969, 0.0208587646484375, 0.2227783203125, 0.0009784698486328125], "tokens": [291, 436, 308, 9420, 9012, 13118, 499, 13383, 27, 301, 324, 415, 308, 12704, 32, 371, 13175, 346, 610, 38246, 32, 815, 67, 27, 301, 400, 17666, 32, 669, 26, 12704, 293, 324, 320, 813, 415, 308, 12704, 32, 371, 13175, 346, 610, 38246, 32, 57, 2697, 27, 301, 400, 17666, 32]}
{"line_number": 146, "line_type": "original", "code": "                        getInvertedCoeffiecientSum(objectiveCoefficients);", "entropy": 2.185546875, "is_bug_line": false, "sus_score": 0.7439283728599548, "per_token_entropy": [9.1875, 5.77734375, 2.935546875, 0.0128173828125, 0.431396484375, 0.001300811767578125, 0.003398895263671875, 0.00518798828125, 0.54296875, 7.890625, 0.5654296875, 0.01123046875, 1.0380859375], "tokens": [6797, 622, 383, 17445, 34345, 32372, 1606, 4934, 26, 29904, 8973, 101, 293]}
{"line_number": 146, "line_type": "generated", "code": "\n     */\n    protected List<LinearConstraint> getNormalizedConstraints() {\n        List<LinearConstraint> normalizedConstraints = new ArrayList<LinearConstraint>();\n        for (LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() == Relationship.LEQ", "entropy": 0.1693115234375, "is_bug_line": false, "sus_score": 0.7439283728599548, "per_token_entropy": [0.619140625, 0.0521240234375, 0.014862060546875, 0.64794921875, 0.0165863037109375, 0.0009784698486328125, 0.0012760162353515625, 0.0006775856018066406, 0.00019621849060058594, 0.0032501220703125, 0.003948211669921875, 0.0002734661102294922, 0.0019140243530273438, 0.0019464492797851562, 0.25244140625, 0.30908203125, 0.0009279251098632812, 0.0013561248779296875, 0.00032782554626464844, 4.553794860839844e-05, 0.93408203125, 0.27978515625, 0.010955810546875, 0.255615234375, 0.0172271728515625, 0.14794921875, 0.0017366409301757812, 0.0006327629089355469, 0.353271484375, 0.1383056640625, 0.08026123046875, 0.004878997802734375, 0.2099609375, 0.00030350685119628906, 0.2259521484375, 0.01861572265625, 0.05438232421875, 0.001373291015625, 0.0029754638671875, 0.05413818359375, 0.90625, 0.08734130859375, 0.6220703125, 0.00379180908203125, 1.1962890625, 0.0184326171875, 0.0311279296875, 0.26318359375, 0.0033817291259765625, 3.075599670410156e-05, 0.947265625, 1.2993812561035156e-05], "tokens": [275, 569, 284, 2522, 1682, 46, 9420, 9012, 48, 622, 29814, 9183, 346, 301, 291, 1682, 46, 9420, 9012, 48, 17666, 9183, 280, 537, 5059, 46, 9420, 9012, 2923, 291, 436, 308, 9420, 9012, 13118, 499, 13383, 27, 301, 324, 415, 308, 12704, 32, 371, 13175, 346, 610, 38246, 32, 815, 67]}
{"line_number": 189, "line_type": "original", "code": "    public int getNumVariables() {", "entropy": 1.7392578125, "is_bug_line": false, "sus_score": 0.7424803376197815, "per_token_entropy": [4.21875, 5.01171875, 0.65087890625, 0.50390625, 1.66015625, 0.045196533203125, 0.0850830078125], "tokens": [264, 562, 629, 44929, 10165, 346, 301]}
{"line_number": 189, "line_type": "generated", "code": "\n        return count;\n    }\n\n    /**\n     * Get the offset of the slack variables.\n     * @return offset of the slack variables\n     */\n    protected int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + getConstraintTypeCounts(Relationship.", "entropy": 0.27099609375, "is_bug_line": false, "sus_score": 0.7424803376197815, "per_token_entropy": [0.58349609375, 0.8271484375, 1.0595703125, 0.0643310546875, 0.050140380859375, 0.000507354736328125, 0.17626953125, 0.038848876953125, 0.12493896484375, 0.0004794597625732422, 0.1956787109375, 0.5166015625, 1.5908203125, 1.083984375, 0.1317138671875, 0.53759765625, 0.38330078125, 1.052734375, 0.098388671875, 0.004425048828125, 0.056182861328125, 0.003692626953125, 0.6826171875, 0.28125, 0.39501953125, 0.0223846435546875, 0.0262908935546875, 0.155029296875, 0.00341033935546875, 0.0428466796875, 0.80712890625, 0.93505859375, 0.0006999969482421875, 0.0005288124084472656, 0.0004546642303466797, 0.00014269351959228516, 0.0010251998901367188, 0.001232147216796875, 0.1590576171875, 0.12322998046875, 0.87548828125, 0.1571044921875, 0.0004544258117675781, 0.31103515625, 0.1986083984375, 0.28759765625, 0.029205322265625, 0.001556396484375, 0.0007429122924804688, 0.0006618499755859375, 0.0109710693359375, 0.00033164024353027344], "tokens": [291, 442, 2385, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 3401, 432, 322, 28039, 4886, 32, 275, 319, 477, 601, 3401, 432, 322, 28039, 4886, 275, 569, 284, 2522, 629, 622, 31185, 3818, 3457, 346, 301, 291, 442, 44929, 33312, 10905, 346, 474, 622, 9012, 620, 18330, 26, 13175, 32]}
{"line_number": 192, "line_type": "original", "code": "", "entropy": 3.087890625, "is_bug_line": false, "sus_score": 0.7406033873558044, "per_token_entropy": [3.087890625], "tokens": [203]}
{"line_number": 192, "line_type": "generated", "code": "\n    /**\n     * Get the index of the first slack variable in the constraint matrix.\n     * @return index of the first slack variable\n     */\n    protected int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + getConstraintTypeCounts(Relationship.", "entropy": 0.276611328125, "is_bug_line": false, "sus_score": 0.7406033873558044, "per_token_entropy": [0.273193359375, 0.051910400390625, 0.1513671875, 0.00026297569274902344, 0.1973876953125, 0.391357421875, 2.27734375, 0.34912109375, 0.16162109375, 1.4599609375, 0.5517578125, 0.0966796875, 1.18359375, 0.24658203125, 1.697265625, 0.258056640625, 0.06695556640625, 0.04254150390625, 0.0064239501953125, 0.1173095703125, 0.004215240478515625, 0.4482421875, 0.1397705078125, 0.45849609375, 0.042144775390625, 0.00885009765625, 0.0195465087890625, 0.6064453125, 0.0059661865234375, 0.006572723388671875, 0.8349609375, 0.5927734375, 0.0017042160034179688, 0.00920867919921875, 0.0008664131164550781, 0.00067138671875, 0.0020008087158203125, 0.0011587142944335938, 0.023590087890625, 0.2252197265625, 0.361083984375, 0.1473388671875, 0.0003688335418701172, 0.341064453125, 0.2110595703125, 0.28857421875, 0.0082855224609375, 0.0006961822509765625, 0.00023436546325683594, 0.00021946430206298828, 0.013031005859375, 0.00014662742614746094], "tokens": [284, 1022, 275, 319, 1390, 322, 1650, 432, 322, 1932, 28039, 2677, 328, 322, 13118, 5045, 32, 275, 319, 477, 601, 1650, 432, 322, 1932, 28039, 2677, 275, 569, 284, 2522, 629, 622, 31185, 3818, 3457, 346, 301, 291, 442, 44929, 33312, 10905, 346, 474, 622, 9012, 620, 18330, 26, 13175, 32]}
{"line_number": 458, "line_type": "original", "code": "        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;", "entropy": 2.3984375, "is_bug_line": false, "sus_score": 0.7336494326591492, "per_token_entropy": [6.10546875, 3.66015625, 9.1484375, 0.01407623291015625, 0.017791748046875, 0.0020809173583984375, 6.8203125, 5.6875, 0.6044921875, 0.006855010986328125, 4.8671875, 3.017578125, 0.24609375, 0.0006046295166015625, 1.720703125, 0.0572509765625, 0.00160980224609375, 1.203125], "tokens": [351, 442, 21432, 705, 3910, 17152, 1018, 1929, 24453, 10165, 499, 1929, 24453, 10165, 429, 225, 35, 45]}
{"line_number": 458, "line_type": "generated", "code": "\n\n      } catch (ClassCastException cce) {\n          return false;\n      }\n\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int hashCode() {\n        return 31 * f.hashCode() + 31 * constraints.hashCode()", "entropy": 0.2298583984375, "is_bug_line": false, "sus_score": 0.7336494326591492, "per_token_entropy": [0.763671875, 0.00689697265625, 0.09161376953125, 0.04150390625, 0.08160400390625, 0.000331878662109375, 0.87451171875, 0.00839996337890625, 0.0031948089599609375, 0.0009503364562988281, 0.429931640625, 0.06756591796875, 0.00127410888671875, 0.0001780986785888672, 0.01666259765625, 0.0002872943878173828, 0.67529296875, 0.0007867813110351562, 0.12445068359375, 0.036834716796875, 0.195068359375, 0.0002911090850830078, 0.0044403076171875, 0.0004115104675292969, 0.009918212890625, 0.01367950439453125, 0.00031828880310058594, 0.0021076202392578125, 0.0037784576416015625, 0.0767822265625, 0.0009026527404785156, 0.004535675048828125, 0.0014200210571289062, 0.61865234375, 0.5107421875, 1.4150390625, 0.33154296875, 0.61572265625, 0.0758056640625, 1.1865234375, 0.005023956298828125, 0.0018167495727539062, 0.025543212890625, 0.416748046875, 1.7119140625, 0.366943359375, 0.798828125, 0.01102447509765625, 0.1260986328125, 0.00036597251892089844, 0.0005478858947753906, 0.1910400390625], "tokens": [1687, 320, 2368, 308, 1339, 36932, 281, 369, 27, 301, 616, 442, 901, 45, 397, 320, 446, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 629, 17772, 346, 301, 291, 442, 225, 37, 35, 319, 296, 32, 14948, 346, 474, 225, 37, 35, 319, 13383, 32, 14948, 346]}
{"line_number": 329, "line_type": "original", "code": "        Set<Integer> basicRows = new HashSet<Integer>();", "entropy": 1.068359375, "is_bug_line": false, "sus_score": 0.7291395664215088, "per_token_entropy": [4.91015625, 7.98828125, 0.0870361328125, 0.0303497314453125, 0.0008969306945800781, 0.2568359375, 0.01178741455078125, 0.0245361328125, 0.08856201171875, 0.166259765625, 0.201904296875, 0.0025730133056640625, 0.11602783203125], "tokens": [351, 1756, 46, 3061, 48, 6550, 7252, 280, 537, 14260, 46, 3061, 2923]}
{"line_number": 329, "line_type": "generated", "code": "\n    /**\n     * Adds a multiple of one row to another.\n     * <p>\n     * After application of this operation, the following will hold:\n     *   sum = sum + multiple * row\n     * </p>\n     * @param sum row", "entropy": 0.187744140625, "is_bug_line": false, "sus_score": 0.7291395664215088, "per_token_entropy": [0.499267578125, 0.201904296875, 0.025726318359375, 1.2516975402832031e-05, 2.71484375, 0.324951171875, 0.00185394287109375, 0.00746917724609375, 0.00927734375, 0.003520965576171875, 0.019989013671875, 0.0021381378173828125, 0.049163818359375, 0.00872802734375, 0.00016200542449951172, 0.035797119140625, 0.002902984619140625, 0.0004825592041015625, 0.002483367919921875, 2.8967857360839844e-05, 0.01323699951171875, 0.00858306884765625, 0.00018799304962158203, 0.00047850608825683594, 0.0012645721435546875, 0.0027446746826171875, 0.0003960132598876953, 0.0006985664367675781, 0.001148223876953125, 0.0004305839538574219, 0.001720428466796875, 0.0011053085327148438, 1.2516975402832031e-05, 0.0494384765625, 0.458251953125, 1.896484375, 0.427001953125, 0.039825439453125, 0.01503753662109375, 0.00490570068359375, 2.150390625, 0.1954345703125, 9.870529174804688e-05, 0.01390838623046875, 2.09808349609375e-05, 0.0011444091796875, 0.0014295578002929688, 0.0002028942108154297, 0.049652099609375, 0.00022292137145996094, 0.1988525390625, 0.32373046875], "tokens": [284, 1022, 275, 319, 15450, 312, 4609, 432, 1591, 2698, 372, 4674, 32, 275, 319, 333, 98, 48, 275, 319, 9723, 3022, 432, 458, 4212, 30, 322, 2412, 1098, 7629, 44, 275, 319, 261, 3632, 280, 3632, 474, 4609, 319, 2698, 275, 319, 576, 98, 48, 275, 319, 477, 753, 3632, 2698]}
{"line_number": 1287, "line_type": "original", "code": "", "entropy": 0.27294921875, "is_bug_line": false, "sus_score": 0.7265585064888, "per_token_entropy": [0.27294921875], "tokens": [203]}
{"line_number": 1287, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7265585064888, "per_token_entropy": [], "tokens": []}
{"line_number": 332, "line_type": "original", "code": "            if (basicRows.contains(basicRow)) {", "entropy": 1.7841796875, "is_bug_line": false, "sus_score": 0.7156285643577576, "per_token_entropy": [5.1171875, 2.537109375, 0.38671875, 4.66015625, 1.4111328125, 1.1591796875, 2.2109375, 0.0213165283203125, 3.453125, 0.0207366943359375, 0.1666259765625, 0.2587890625], "tokens": [1468, 415, 308, 6390, 7252, 32, 4752, 26, 6390, 2352, 490, 301]}
{"line_number": 332, "line_type": "generated", "code": "\n     */\n    protected int getWidth() {\n        return tableau.getColumnDimension() + 1;\n    }\n\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau", "entropy": 0.11871337890625, "is_bug_line": false, "sus_score": 0.7156285643577576, "per_token_entropy": [1.017578125, 0.090087890625, 0.020294189453125, 0.370361328125, 0.0267181396484375, 0.0015649795532226562, 0.01186370849609375, 0.0025310516357421875, 0.00270843505859375, 0.14453125, 0.046600341796875, 0.29345703125, 3.337860107421875e-06, 0.00553131103515625, 0.017486572265625, 0.0007967948913574219, 0.6552734375, 0.74853515625, 0.85400390625, 0.032257080078125, 0.0772705078125, 0.262939453125, 0.0006270408630371094, 0.1107177734375, 0.00940704345703125, 0.0114288330078125, 2.002716064453125e-05, 0.06396484375, 0.00786590576171875, 0.1820068359375, 0.004024505615234375, 0.0031223297119140625, 0.0037994384765625, 0.00017273426055908203, 0.0321044921875, 0.0135955810546875, 1.4543533325195312e-05, 0.0091552734375, 0.00037980079650878906, 0.076904296875, 0.003570556640625, 0.0027446746826171875, 0.0027675628662109375, 8.416175842285156e-05], "tokens": [275, 569, 284, 2522, 629, 622, 2611, 346, 301, 291, 442, 1858, 4452, 32, 19239, 9883, 346, 474, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452]}
{"line_number": 885, "line_type": "original", "code": "", "entropy": 0.27294921875, "is_bug_line": false, "sus_score": 0.7041139602661133, "per_token_entropy": [0.27294921875], "tokens": [203]}
{"line_number": 885, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7041139602661133, "per_token_entropy": [], "tokens": []}
{"line_number": 188, "line_type": "original", "code": "     */", "entropy": 6.53125, "is_bug_line": false, "sus_score": 0.6986261010169983, "per_token_entropy": [5.203125, 7.85546875], "tokens": [262, 569]}
{"line_number": 188, "line_type": "generated", "code": "\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of slack variables.\n     * @return number of slack variables\n     */\n    public int getNumSlackVariables() {\n        return getConstraintTypeCounts(Relationship.LEQ) +", "entropy": 0.14453125, "is_bug_line": false, "sus_score": 0.6986261010169983, "per_token_entropy": [1.0078125, 0.034637451171875, 0.04644775390625, 0.0008635520935058594, 0.057464599609375, 0.00374603271484375, 0.001720428466796875, 0.001277923583984375, 0.05706787109375, 0.0004684925079345703, 0.133056640625, 0.035736083984375, 0.15380859375, 0.0005326271057128906, 0.1810302734375, 0.44873046875, 1.0078125, 0.0029430389404296875, 0.62451171875, 0.06597900390625, 1.119140625, 0.07733154296875, 0.004459381103515625, 0.0275726318359375, 0.006404876708984375, 0.205810546875, 0.002185821533203125, 0.0189056396484375, 0.00792694091796875, 0.2088623046875, 0.0070037841796875, 0.00885772705078125, 0.86083984375, 0.036956787109375, 0.08953857421875, 0.073486328125, 0.007740020751953125, 0.0073699951171875, 0.0012874603271484375, 0.06695556640625, 0.10400390625, 0.41650390625, 0.01715087890625, 9.524822235107422e-05, 0.00010013580322265625, 0.00020051002502441406, 0.0129852294921875, 8.33272933959961e-05, 0.12060546875, 2.3126602172851562e-05, 0.016693115234375, 0.1243896484375], "tokens": [324, 320, 291, 320, 291, 442, 2385, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 28039, 4886, 32, 275, 319, 477, 601, 1451, 432, 28039, 4886, 275, 569, 284, 562, 629, 44929, 31185, 10165, 346, 301, 291, 442, 622, 9012, 620, 18330, 26, 13175, 32, 815, 67, 27, 474]}
{"line_number": 92, "line_type": "original", "code": "    /**", "entropy": 4.3515625, "is_bug_line": false, "sus_score": 0.696819543838501, "per_token_entropy": [3.28125, 5.41796875], "tokens": [264, 1022]}
{"line_number": 92, "line_type": "generated", "code": "\n\n        // initialize the constraint rows\n        for (int i = 0; i < constraints.size(); i++) {\n            LinearConstraint constraint = constraints.get(i);\n            RealVector coefficients = constraint.getCoefficients();\n            Relationship relationship = constraint.", "entropy": 0.201416015625, "is_bug_line": false, "sus_score": 0.696819543838501, "per_token_entropy": [1.7041015625, 0.0367431640625, 0.3154296875, 0.1888427734375, 0.40234375, 0.169189453125, 0.076171875, 0.9775390625, 0.0019197463989257812, 0.01605224609375, 0.2164306640625, 0.0009446144104003906, 0.0238189697265625, 0.003032684326171875, 0.033538818359375, 0.00125885009765625, 0.00936126708984375, 0.1146240234375, 0.00017011165618896484, 4.017353057861328e-05, 0.0013875961303710938, 0.335205078125, 0.00841522216796875, 0.0025424957275390625, 0.1224365234375, 0.81201171875, 0.00954437255859375, 0.1644287109375, 0.0180206298828125, 0.0233001708984375, 0.00024211406707763672, 0.00011169910430908203, 9.524822235107422e-05, 0.00015497207641601562, 0.00039958953857421875, 0.09100341796875, 1.49609375, 0.09405517578125, 0.40673828125, 0.040802001953125, 0.11688232421875, 0.00018513202667236328, 0.03851318359375, 0.0027828216552734375, 0.00019490718841552734, 0.046661376953125, 0.058685302734375, 1.69921875, 0.546875, 0.017364501953125, 0.030914306640625, 0.00012600421905517578], "tokens": [584, 434, 7379, 322, 13118, 5760, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 13383, 32, 891, 473, 595, 1987, 301, 324, 13935, 9012, 13118, 280, 13383, 32, 371, 26, 91, 293, 324, 11443, 2863, 26370, 280, 13118, 32, 371, 8973, 101, 473, 324, 38246, 12112, 280, 13118, 32]}
{"line_number": 884, "line_type": "original", "code": "", "entropy": 0.27294921875, "is_bug_line": false, "sus_score": 0.6902307271957397, "per_token_entropy": [0.27294921875], "tokens": [203]}
{"line_number": 884, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6902307271957397, "per_token_entropy": [], "tokens": []}
{"line_number": 337, "line_type": "original", "code": "                basicRows.add(basicRow);", "entropy": 2.166015625, "is_bug_line": false, "sus_score": 0.6899741291999817, "per_token_entropy": [9.9609375, 9.3359375, 0.10284423828125, 0.0145721435546875, 0.043426513671875, 0.003185272216796875, 0.036651611328125, 0.00021898746490478516, 0.005535125732421875], "tokens": [2071, 6550, 7252, 32, 669, 26, 6390, 2352, 293]}
{"line_number": 337, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the entry in the tableau", "entropy": 0.13330078125, "is_bug_line": false, "sus_score": 0.6899741291999817, "per_token_entropy": [0.4423828125, 0.1346435546875, 0.030029296875, 2.5033950805664062e-05, 0.2376708984375, 0.023193359375, 0.426513671875, 0.004573822021484375, 0.002758026123046875, 0.005359649658203125, 0.00026035308837890625, 0.03558349609375, 0.003849029541015625, 0.0004246234893798828, 0.01393890380859375, 0.0007433891296386719, 0.07342529296875, 0.0024700164794921875, 0.0028400421142578125, 0.002529144287109375, 8.869171142578125e-05, 0.006023406982421875, 0.0016031265258789062, 0.0175628662109375, 0.035888671875, 0.048553466796875, 0.0002598762512207031, 0.00030159950256347656, 0.00027441978454589844, 0.0003848075866699219, 0.0009832382202148438, 0.01026153564453125, 0.0020999908447265625, 0.0062408447265625, 4.76837158203125e-07, 4.9591064453125e-05, 9.381771087646484e-05, 2.7418136596679688e-06, 0.009033203125, 0.0247802734375, 0.00016307830810546875, 0.41845703125, 0.02081298828125, 0.007106781005859375, 7.128715515136719e-05, 0.478515625, 0.60107421875, 2.17578125, 0.77734375, 0.18505859375, 0.6455078125, 0.016571044921875], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 3414, 328, 322, 1858, 4452]}
{"line_number": 291, "line_type": "original", "code": "            return;", "entropy": 6.30859375, "is_bug_line": false, "sus_score": 0.6891754865646362, "per_token_entropy": [2.3046875, 10.15625, 6.45703125], "tokens": [1468, 442, 45]}
{"line_number": 291, "line_type": "generated", "code": "\n            }\n        }\n        return new RealPointValuePair(coefficients, mostNegative);\n    }\n\n    /**\n     * Gets the tableau as a {@link RealMatrix}.\n     * @return the tableau as a {@link RealMatrix}\n     */\n    protected", "entropy": 0.322509765625, "is_bug_line": false, "sus_score": 0.6891754865646362, "per_token_entropy": [0.55029296875, 0.00571441650390625, 0.036529541015625, 0.0012874603271484375, 0.24072265625, 0.373291015625, 0.02783203125, 0.104248046875, 0.00033974647521972656, 4.601478576660156e-05, 0.0116424560546875, 0.5361328125, 0.00432586669921875, 0.0193328857421875, 0.6552734375, 0.0001722574234008789, 0.049163818359375, 0.05859375, 0.0035381317138671875, 0.410888671875, 0.09063720703125, 0.055938720703125, 1.2636184692382812e-05, 2.87890625, 0.1275634765625, 3.572265625, 0.0095367431640625, 1.99609375, 0.206787109375, 1.2734375, 0.04058837890625, 0.36474609375, 0.00565338134765625, 0.20947265625, 0.12744140625, 0.004619598388671875, 0.40673828125, 0.0081787109375, 0.435546875, 0.08612060546875, 0.0008754730224609375, 0.55712890625, 0.00426483154296875, 0.045440673828125, 0.00313568115234375, 0.00030541419982910156, 9.02414321899414e-05, 0.3505859375, 0.01324462890625, 0.03582763671875, 0.01331329345703125, 0.75439453125], "tokens": [324, 320, 291, 320, 291, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 4630, 17152, 293, 284, 320, 446, 1022, 275, 319, 7124, 322, 1858, 4452, 619, 312, 3088, 1204, 11443, 4161, 4009, 275, 319, 477, 601, 322, 1858, 4452, 619, 312, 3088, 1204, 11443, 4161, 111, 275, 569, 284, 2522]}
{"line_number": 889, "line_type": "original", "code": "", "entropy": 0.27294921875, "is_bug_line": false, "sus_score": 0.6780496835708618, "per_token_entropy": [0.27294921875], "tokens": [203]}
{"line_number": 889, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6780496835708618, "per_token_entropy": [], "tokens": []}
