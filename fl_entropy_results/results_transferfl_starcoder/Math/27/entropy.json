{"line_number": 597, "line_type": "original", "code": "        return multiply(100).doubleValue();", "entropy": 2.71484375, "is_bug_line": true, "sus_score": 0.49274903535842896, "per_token_entropy": [3.91015625, 0.994140625, 9.984375, 0.2213134765625, 0.34130859375, 1.3720703125, 0.0809326171875, 0.158203125, 5.76953125, 4.328125], "tokens": [351, 442, 22213, 26, 35, 34, 34, 547, 46952, 473]}
{"line_number": 597, "line_type": "generated", "code": "\n    }\n\n    /**\n     * <p>Gets the fraction as a <tt>double</tt>.</p>\n     *\n     * <p>This calculates the fraction as the numerator divided by denominator.</p>\n     *\n     * @return the fraction", "entropy": 0.15869140625, "is_bug_line": true, "sus_score": 0.49274903535842896, "per_token_entropy": [1.15625, 0.1993408203125, 0.36376953125, 0.10491943359375, 0.0380859375, 2.205371856689453e-05, 0.22607421875, 0.00032782554626464844, 0.0008792877197265625, 1.8466796875, 0.373046875, 0.6083984375, 0.1607666015625, 0.07806396484375, 0.156005859375, 0.10552978515625, 0.0024929046630859375, 0.303955078125, 0.0027980804443359375, 1.8358230590820312e-05, 0.58984375, 8.618831634521484e-05, 0.0012054443359375, 0.00360870361328125, 0.0004394054412841797, 0.046783447265625, 3.123283386230469e-05, 0.6533203125, 0.00318145751953125, 0.0094757080078125, 0.299072265625, 0.1734619140625, 0.0016832351684570312, 0.002841949462890625, 0.05133056640625, 0.00012385845184326172, 0.00037288665771484375, 5.4001808166503906e-05, 0.0009765625, 0.07427978515625, 0.31982421875, 0.118408203125, 0.0002906322479248047, 0.0005502700805664062, 0.00435638427734375, 0.00031495094299316406, 0.019866943359375, 8.463859558105469e-05, 0.055511474609375, 0.0039825439453125, 0.043060302734375, 0.047119140625], "tokens": [284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 2251, 48, 2627, 377, 2251, 12689, 98, 48, 275, 319, 275, 319, 333, 98, 48, 2272, 38057, 322, 18795, 619, 322, 1929, 11290, 32235, 810, 39920, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 322, 18795]}
{"line_number": 555, "line_type": "original", "code": "        return new Fraction(numerator * i, denominator);", "entropy": 1.8994140625, "is_bug_line": false, "sus_score": 0.48902979493141174, "per_token_entropy": [4.3046875, 2.185546875, 0.424072265625, 0.014068603515625, 0.201416015625, 1.30078125, 0.443603515625, 3.033203125, 9.1015625, 0.07550048828125, 0.57568359375, 1.14453125], "tokens": [351, 442, 537, 40823, 26, 1516, 11290, 319, 595, 30, 39920, 293]}
{"line_number": 555, "line_type": "generated", "code": "\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a {@code Fraction", "entropy": 0.074951171875, "is_bug_line": false, "sus_score": 0.48902979493141174, "per_token_entropy": [0.451416015625, 0.308349609375, 0.8779296875, 0.0012054443359375, 0.197265625, 0.006023406982421875, 0.02716064453125, 0.12432861328125, 0.08404541015625, 0.00760650634765625, 0.01006317138671875, 1.8477439880371094e-05, 0.1253662109375, 0.01947021484375, 0.00292205810546875, 0.0158843994140625, 0.06463623046875, 1.8835067749023438e-05, 0.0005478858947753906, 0.03338623046875, 0.320068359375, 0.003147125244140625, 0.0004982948303222656, 0.0006098747253417969, 0.0013914108276367188, 5.507469177246094e-05, 9.131431579589844e-05, 0.0002522468566894531, 0.0014801025390625, 0.01690673828125, 3.445148468017578e-05, 0.002574920654296875, 0.01325225830078125, 0.0014591217041015625, 8.738040924072266e-05, 0.0004239082336425781, 0.01497650146484375, 1.2516975402832031e-05, 0.03167724609375, 1.3470649719238281e-05, 0.09625244140625, 2.8252601623535156e-05, 1.0728836059570312e-06, 0.001522064208984375, 0.0303192138671875, 0.0008697509765625, 0.00125885009765625, 0.0276336669921875, 0.08697509765625, 0.86962890625, 0.01441192626953125, 0.0004973411560058594], "tokens": [275, 319, 275, 319, 477, 753, 1929, 11290, 225, 322, 1929, 11290, 30, 436, 2280, 322, 8019, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 753, 39920, 225, 322, 39920, 30, 436, 2280, 322, 46213, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 601, 312, 3088, 687, 40823]}
{"line_number": 319, "line_type": "original", "code": "        return (double)numerator / (double)denominator;", "entropy": 1.1123046875, "is_bug_line": false, "sus_score": 0.4704502820968628, "per_token_entropy": [4.91015625, 0.33984375, 3.076171875, 5.47265625, 0.157470703125, 0.42626953125, 0.002025604248046875, 0.337890625, 0.79443359375, 0.00678253173828125, 0.0017728805541992188, 0.019439697265625, 4.470348358154297e-05, 0.0281219482421875], "tokens": [351, 442, 308, 2627, 27, 1516, 11290, 517, 308, 2627, 27, 29805, 9693, 45]}
{"line_number": 319, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Gets a hashCode for the fraction.\n     * @return a hash code value for this object.\n     */\n    @Override\n    public int hashCode() {\n        // it doesn't matter what we return as long as it is constant.", "entropy": 0.11273193359375, "is_bug_line": false, "sus_score": 0.4704502820968628, "per_token_entropy": [0.1446533203125, 0.0009059906005859375, 0.048675537109375, 0.035614013671875, 0.004169464111328125, 4.9948692321777344e-05, 0.310791015625, 0.0699462890625, 0.114990234375, 0.0010404586791992188, 0.039215087890625, 0.006549835205078125, 0.0061492919921875, 0.016510009765625, 0.0006814002990722656, 0.0067138671875, 0.0007033348083496094, 0.0303955078125, 0.011505126953125, 0.02593994140625, 0.0033550262451171875, 0.0008301734924316406, 0.0030651092529296875, 0.0006766319274902344, 0.0352783203125, 0.0008616447448730469, 0.0206298828125, 0.005664825439453125, 0.004547119140625, 4.76837158203125e-05, 0.0027866363525390625, 0.0006504058837890625, 0.0008668899536132812, 8.821487426757812e-06, 0.0029468536376953125, 0.0013103485107421875, 0.07928466796875, 1.2861328125, 0.765625, 0.66064453125, 0.0005517005920410156, 0.399169921875, 0.2099609375, 0.262451171875, 0.607421875, 0.005588531494140625, 0.0404052734375, 0.0003337860107421875, 0.034637451171875, 0.2083740234375, 0.1947021484375, 0.1474609375], "tokens": [284, 320, 446, 1022, 275, 319, 7124, 312, 17772, 436, 322, 18795, 32, 275, 319, 477, 601, 312, 3677, 1340, 786, 436, 458, 1300, 32, 275, 569, 284, 477, 1788, 284, 562, 629, 17772, 346, 301, 291, 434, 561, 4163, 1330, 15236, 2769, 996, 442, 619, 1946, 619, 561, 438, 8082, 32]}
{"line_number": 282, "line_type": "original", "code": "        this.numerator   = num;", "entropy": 2.451171875, "is_bug_line": false, "sus_score": 0.3629421591758728, "per_token_entropy": [4.9375, 5.97265625, 0.039642333984375, 0.53662109375, 0.004985809326171875, 4.5703125, 1.640625, 2.560546875, 1.8056640625], "tokens": [351, 458, 32, 1516, 11290, 261, 280, 1929, 45]}
{"line_number": 282, "line_type": "generated", "code": "\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other instanceof Fraction) {\n            Fraction rhs = (Fraction) other;\n            return (numerator == rhs.numerator) &&", "entropy": 0.098388671875, "is_bug_line": false, "sus_score": 0.3629421591758728, "per_token_entropy": [0.139404296875, 0.0253448486328125, 0.0034122467041015625, 0.0002593994140625, 0.00970458984375, 0.07666015625, 0.07611083984375, 0.009979248046875, 0.035491943359375, 0.1077880859375, 0.07080078125, 0.017333984375, 0.01078033447265625, 0.0036373138427734375, 0.0003256797790527344, 0.0160369873046875, 0.005340576171875, 0.0168609619140625, 0.01284027099609375, 0.002956390380859375, 0.0002644062042236328, 0.0030689239501953125, 7.49826431274414e-05, 0.27734375, 0.004398345947265625, 0.0199127197265625, 0.0137786865234375, 0.68994140625, 0.002666473388671875, 0.372802734375, 0.0022373199462890625, 0.056060791015625, 0.1688232421875, 0.083740234375, 0.0006093978881835938, 0.004276275634765625, 0.00020003318786621094, 0.0030460357666015625, 0.1234130859375, 0.0005545616149902344, 0.1043701171875, 0.6591796875, 1.2041015625, 0.308837890625, 0.00017559528350830078, 0.020965576171875, 0.0005640983581542969, 7.49826431274414e-05, 0.00891876220703125, 0.00015926361083984375, 0.2646484375, 0.07696533203125], "tokens": [284, 562, 1905, 12423, 26, 959, 1604, 27, 301, 291, 415, 308, 578, 610, 1604, 27, 301, 324, 442, 861, 45, 291, 320, 291, 415, 308, 2455, 5113, 40823, 27, 301, 324, 40823, 9322, 280, 308, 20709, 27, 1604, 45, 324, 442, 308, 1516, 11290, 610, 9322, 32, 1516, 11290, 27, 962]}
{"line_number": 400, "line_type": "original", "code": "", "entropy": 3.4296875, "is_bug_line": false, "sus_score": 0.31288132071495056, "per_token_entropy": [3.4296875], "tokens": [203]}
{"line_number": 400, "line_type": "generated", "code": "\n     * @throws MathArithmeticException if the resulting numerator or denominator exceeds\n     *  {@code Integer.MAX_VALUE}\n     */\n    public Fraction subtract(Fraction fraction) {\n        return addSub(fraction, false /* subtract */);\n    }\n\n   ", "entropy": 0.05084228515625, "is_bug_line": false, "sus_score": 0.31288132071495056, "per_token_entropy": [0.1339111328125, 0.48095703125, 0.007564544677734375, 0.07989501953125, 0.01430511474609375, 0.0008540153503417969, 6.794929504394531e-06, 0.01216888427734375, 0.006053924560546875, 0.019775390625, 0.0008702278137207031, 6.258487701416016e-05, 0.1295166015625, 0.006103515625, 0.76513671875, 0.036102294921875, 7.76052474975586e-05, 0.0125885009765625, 0.00434112548828125, 0.0056915283203125, 0.0006875991821289062, 0.00013184547424316406, 0.0004622936248779297, 8.71419906616211e-05, 9.131431579589844e-05, 0.0064697265625, 0.4697265625, 0.0240020751953125, 0.026275634765625, 0.0019626617431640625, 0.0005784034729003906, 0.001434326171875, 0.0001722574234008789, 0.0892333984375, 0.00019407272338867188, 0.0030078887939453125, 0.002857208251953125, 0.03289794921875, 0.038421630859375, 0.0009093284606933594, 0.012115478515625, 0.00014698505401611328, 0.00028061866760253906, 0.00083160400390625, 0.006969451904296875, 0.032470703125, 0.01486968994140625, 0.0014181137084960938, 0.00173187255859375, 0.0129241943359375, 0.0003962516784667969, 0.145263671875], "tokens": [275, 319, 477, 5117, 4175, 37375, 984, 415, 322, 14302, 1929, 11290, 556, 39920, 35308, 275, 319, 225, 3088, 687, 4401, 32, 3459, 81, 5975, 111, 275, 569, 284, 562, 40823, 27799, 26, 20709, 18795, 27, 301, 291, 442, 1015, 1721, 26, 21284, 30, 901, 1257, 27799, 569, 293, 284, 320, 446]}
{"line_number": 426, "line_type": "original", "code": "     * @throws NullArgumentException if the fraction is {@code null}", "entropy": 0.91650390625, "is_bug_line": false, "sus_score": 0.3018478751182556, "per_token_entropy": [5.5, 3.28125, 0.52099609375, 0.80859375, 2.447265625, 0.00017404556274414062, 0.03851318359375, 0.0229339599609375, 0.053314208984375, 0.00418853759765625, 0.1378173828125, 0.00025582313537597656, 0.00234222412109375, 0.0108642578125], "tokens": [262, 319, 477, 5117, 9282, 8308, 415, 322, 18795, 438, 3088, 687, 744, 111]}
{"line_number": 426, "line_type": "generated", "code": "\n    private Fraction addSub(Fraction fraction, boolean isAdd) {\n        if (fraction == null) {\n            throw new NullArgumentException(LocalizedFormats.FRACTION);\n        }\n\n        // zero is identity for addition\n        if (numerator == 0)", "entropy": 0.150634765625, "is_bug_line": false, "sus_score": 0.3018478751182556, "per_token_entropy": [0.307861328125, 0.27099609375, 0.01438140869140625, 0.0007786750793457031, 0.00010061264038085938, 0.0017213821411132812, 0.1229248046875, 0.0032596588134765625, 0.0014133453369140625, 0.1527099609375, 0.00017309188842773438, 0.000209808349609375, 0.00720977783203125, 0.0806884765625, 0.51025390625, 0.6787109375, 0.0318603515625, 0.01371002197265625, 0.266845703125, 0.041839599609375, 0.0121917724609375, 0.0064239501953125, 0.038818359375, 0.01413726806640625, 0.0081024169921875, 0.004756927490234375, 4.9591064453125e-05, 0.85205078125, 0.0142822265625, 0.0276336669921875, 0.00010561943054199219, 0.0251312255859375, 5.841255187988281e-06, 0.1761474609375, 0.044403076171875, 0.0005764961242675781, 0.71142578125, 1.201171875, 0.41796875, 0.37646484375, 0.3671875, 0.0004353523254394531, 0.018463134765625, 0.1707763671875, 0.0031719207763671875, 0.017730712890625, 0.58154296875, 0.000316619873046875, 0.213134765625, 0.0006518363952636719, 6.4373016357421875e-06, 0.017364501953125], "tokens": [284, 945, 40823, 1015, 1721, 26, 20709, 18795, 30, 1905, 438, 1103, 27, 301, 291, 415, 308, 21284, 610, 744, 27, 301, 324, 1422, 537, 9282, 8308, 26, 24225, 19298, 32, 4002, 8750, 293, 291, 320, 584, 434, 5934, 438, 10625, 436, 10879, 291, 415, 308, 1516, 11290, 610, 225, 34, 27]}
{"line_number": 387, "line_type": "original", "code": "    public int intValue() {", "entropy": 1.9267578125, "is_bug_line": false, "sus_score": 0.29971030354499817, "per_token_entropy": [4.4765625, 3.083984375, 3.32421875, 2.306640625, 0.004901885986328125, 0.06695556640625, 0.2208251953125], "tokens": [264, 562, 629, 629, 882, 346, 301]}
{"line_number": 387, "line_type": "generated", "code": "\n     */\n    public void add(int i) {\n        if (i==Integer.MIN_VALUE) {\n            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);\n        }\n        if (i", "entropy": 0.11651611328125, "is_bug_line": false, "sus_score": 0.29971030354499817, "per_token_entropy": [0.307861328125, 0.99658203125, 0.060638427734375, 0.056243896484375, 0.432861328125, 0.01141357421875, 0.0153656005859375, 0.0229339599609375, 0.003726959228515625, 0.0007958412170410156, 0.022369384765625, 0.08966064453125, 0.228515625, 0.099853515625, 0.32177734375, 0.42578125, 0.751953125, 0.0002512931823730469, 0.00360870361328125, 6.318092346191406e-06, 2.0742416381835938e-05, 0.032623291015625, 0.001567840576171875, 0.03851318359375, 0.154052734375, 0.0026569366455078125, 0.00675201416015625, 0.0005846023559570312, 8.702278137207031e-06, 0.008331298828125, 0.009185791015625, 0.0001081228256225586, 3.0875205993652344e-05, 0.003978729248046875, 7.62939453125e-06, 0.0028171539306640625, 0.0001646280288696289, 0.00012290477752685547, 0.06280517578125, 1.1086463928222656e-05, 0.01546478271484375, 0.259765625, 2.6464462280273438e-05, 0.053863525390625, 0.00859832763671875, 0.032470703125, 0.0103759765625, 6.711483001708984e-05, 0.1507568359375, 0.62646484375, 0.0860595703125, 0.63671875], "tokens": [275, 569, 284, 562, 763, 1015, 26, 410, 595, 27, 301, 291, 415, 308, 91, 379, 3061, 32, 4683, 81, 5975, 27, 301, 324, 1422, 537, 4175, 37375, 984, 26, 24225, 19298, 32, 9425, 18118, 81, 521, 81, 4002, 8750, 30, 1929, 11290, 30, 39920, 293, 291, 320, 291, 415, 308, 91]}
{"line_number": 438, "line_type": "original", "code": "     */", "entropy": 7.63671875, "is_bug_line": false, "sus_score": 0.2945595681667328, "per_token_entropy": [7.1484375, 8.125], "tokens": [262, 569]}
{"line_number": 438, "line_type": "generated", "code": "\n        long d1 = denominator;\n        long d2 = fraction.denominator;\n        long n1 = numerator;\n        long n2 = fraction.numerator;\n        if (d1 == d2) {\n            if (n1 == n", "entropy": 0.15576171875, "is_bug_line": false, "sus_score": 0.2945595681667328, "per_token_entropy": [0.249267578125, 1.7880859375, 0.1627197265625, 0.0078582763671875, 0.017852783203125, 1.0556640625, 0.07464599609375, 0.027435302734375, 0.01465606689453125, 0.025238037109375, 0.0007104873657226562, 0.0002593994140625, 0.00014066696166992188, 9.799003601074219e-05, 0.05096435546875, 1.1920928955078125e-07, 0.0012035369873046875, 0.16943359375, 0.418212890625, 0.1551513671875, 8.225440979003906e-06, 0.0003714561462402344, 0.0017137527465820312, 1.0728836059570312e-06, 0.00727081298828125, 0.006191253662109375, 0.0031490325927734375, 0.0672607421875, 1.4781951904296875e-05, 9.775161743164062e-05, 0.00012290477752685547, 3.3974647521972656e-05, 0.0010204315185546875, 4.172325134277344e-06, 0.005825042724609375, 0.72021484375, 0.8662109375, 0.01230621337890625, 0.1214599609375, 0.0002739429473876953, 0.213134765625, 8.869171142578125e-05, 3.5762786865234375e-07, 0.0032367706298828125, 0.0035495758056640625, 0.07623291015625, 0.79443359375, 0.0304412841796875, 0.90673828125, 0.00428009033203125, 0.012298583984375, 0.021514892578125], "tokens": [291, 1946, 343, 35, 280, 39920, 45, 291, 1946, 343, 36, 280, 18795, 32, 29805, 9693, 45, 291, 1946, 310, 35, 280, 1929, 11290, 45, 291, 1946, 310, 36, 280, 18795, 32, 1516, 11290, 45, 291, 415, 308, 86, 35, 610, 343, 36, 27, 301, 324, 415, 308, 96, 35, 610, 310]}
{"line_number": 413, "line_type": "original", "code": "     * Return the multiplicative inverse of this fraction.", "entropy": 1.3017578125, "is_bug_line": false, "sus_score": 0.29067450761795044, "per_token_entropy": [6.046875, 2.658203125, 6.48046875, 0.1300048828125, 0.11309814453125, 0.0010442733764648438, 0.00197601318359375, 0.0072021484375, 0.0111083984375, 0.038726806640625, 0.1219482421875, 0.01507568359375], "tokens": [262, 319, 2744, 322, 12044, 406, 1353, 19385, 432, 458, 18795, 32]}
{"line_number": 413, "line_type": "generated", "code": "\n        return new Fraction(numerator - i * denominator, denominator);\n    }\n\n    /**\n     * <p>Multiply the value of this fraction by another, returning the\n     * result in reduced form.  The algorithm follows Knuth, 4.5", "entropy": 0.111328125, "is_bug_line": false, "sus_score": 0.29067450761795044, "per_token_entropy": [0.2022705078125, 0.2254638671875, 0.1312255859375, 0.0006184577941894531, 0.007171630859375, 0.01319122314453125, 2.5033950805664062e-05, 0.00868988037109375, 0.009521484375, 0.0150909423828125, 0.0006375312805175781, 0.007843017578125, 0.0044403076171875, 0.0016841888427734375, 0.0791015625, 0.00145721435546875, 0.09283447265625, 0.044708251953125, 0.046051025390625, 4.029273986816406e-05, 1.1123046875, 0.0005369186401367188, 0.0020503997802734375, 1.4560546875, 0.0318603515625, 0.01422882080078125, 1.919269561767578e-05, 0.0009684562683105469, 0.0018548965454101562, 0.0011043548583984375, 0.00844573974609375, 0.0054779052734375, 0.003963470458984375, 4.661083221435547e-05, 1.31640625, 2.1457672119140625e-06, 0.0008649826049804688, 0.00023937225341796875, 0.0011539459228515625, 8.821487426757812e-06, 0.544921875, 0.1778564453125, 0.10418701171875, 0.0360107421875, 0.05645751953125, 0.0011844635009765625, -0.0, 0.0031147003173828125, 0.0016584396362304688, 0.0020771026611328125, 7.748603820800781e-06, 0.0136566162109375], "tokens": [291, 442, 537, 40823, 26, 1516, 11290, 429, 595, 319, 39920, 30, 39920, 293, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 27732, 322, 786, 432, 458, 18795, 810, 4674, 30, 14116, 322, 275, 319, 1056, 328, 22974, 2234, 32, 225, 886, 8218, 11588, 44327, 860, 30, 225, 38, 32, 39]}
{"line_number": 406, "line_type": "original", "code": "        if (numerator==Integer.MIN_VALUE) {", "entropy": 1.3525390625, "is_bug_line": false, "sus_score": 0.28960171341896057, "per_token_entropy": [5.66015625, 2.046875, 0.2001953125, 2.005859375, 0.2152099609375, 4.61328125, 1.1484375, 0.0006051063537597656, 0.082763671875, 1.9073486328125e-05, 1.5497207641601562e-05, 1.59765625, 0.0093536376953125], "tokens": [351, 415, 308, 1516, 11290, 379, 3061, 32, 4683, 81, 5975, 27, 301]}
{"line_number": 406, "line_type": "generated", "code": "\n    /**\n     * Subtract an integer from the fraction.\n     * @param i the <tt>integer</tt> to subtract.\n     * @return this - i\n     */\n    public Fraction subtract(final int i) {\n        return new Fraction(num", "entropy": 0.060333251953125, "is_bug_line": false, "sus_score": 0.28960171341896057, "per_token_entropy": [1.1298828125, 0.4609375, 0.038177490234375, 7.56978988647461e-05, 0.501953125, 0.135986328125, 0.0267333984375, 0.07196044921875, 0.0251617431640625, 0.0122833251953125, 0.01413726806640625, 0.01004791259765625, 0.0002675056457519531, 0.015625, 0.0005884170532226562, 0.0029659271240234375, 0.0124053955078125, 0.148193359375, 0.0009675025939941406, 6.973743438720703e-05, 0.00753021240234375, 0.0011472702026367188, 1.7762184143066406e-05, 0.00014138221740722656, 0.00026607513427734375, 0.1343994140625, 0.0247344970703125, 0.001209259033203125, 0.0004241466522216797, 0.0004215240478515625, 0.0003726482391357422, 0.01023101806640625, 0.0540771484375, 0.005859375, 0.0170745849609375, 0.07672119140625, 0.0083770751953125, 0.0032024383544921875, 0.0005245208740234375, 0.0005445480346679688, 0.0002319812774658203, 0.0706787109375, 0.0018320083618164062, 0.0005784034729003906, 0.00037980079650878906, 0.0008878707885742188, 0.01629638671875, 0.02099609375, 0.064208984375, 0.00014960765838623047, 0.002658843994140625, 0.00301361083984375], "tokens": [284, 1022, 275, 319, 48588, 600, 4991, 645, 322, 18795, 32, 275, 319, 477, 753, 595, 322, 333, 2251, 48, 5823, 377, 2251, 48, 372, 27799, 32, 275, 319, 477, 601, 458, 429, 595, 275, 569, 284, 562, 40823, 27799, 26, 3220, 629, 595, 27, 301, 291, 442, 537, 40823, 26, 1516]}
{"line_number": 402, "line_type": "original", "code": "     * Return the additive inverse of this fraction.", "entropy": 2.099609375, "is_bug_line": false, "sus_score": 0.28814998269081116, "per_token_entropy": [3.509765625, 2.9453125, 11.078125, 0.1507568359375, 5.078125, 0.0007491111755371094, 0.01398468017578125, 0.00585174560546875, 0.056396484375, 0.06781005859375, 0.1883544921875], "tokens": [262, 319, 2744, 322, 1015, 4823, 19385, 432, 458, 18795, 32]}
{"line_number": 402, "line_type": "generated", "code": "\n     */\n    public Fraction subtract(Fraction fraction) {\n        return addSub(fraction, false /* subtract */);\n    }\n\n    /**\n     * Subtract an integer from the fraction.\n     * @param i the <tt>integer</tt> to subtract.", "entropy": 0.0236663818359375, "is_bug_line": false, "sus_score": 0.28814998269081116, "per_token_entropy": [0.21142578125, 0.04119873046875, 0.0079193115234375, 0.00270843505859375, 0.0003483295440673828, 0.0020427703857421875, 0.0001575946807861328, 0.068115234375, 0.000102996826171875, 0.00223541259765625, 0.00276947021484375, 0.01763916015625, 0.04046630859375, 0.0008287429809570312, 0.00499725341796875, 0.00014388561248779297, 0.00019180774688720703, 0.00125885009765625, 0.006237030029296875, 0.039031982421875, 0.01386260986328125, 0.0015659332275390625, 0.0014247894287109375, 0.01410675048828125, 0.0001430511474609375, 0.050323486328125, 0.01534271240234375, 0.039520263671875, 8.225440979003906e-05, 0.09796142578125, 0.056915283203125, 0.02362060546875, 0.072998046875, 0.01971435546875, 0.0180816650390625, 0.01276397705078125, 0.0290985107421875, 6.532669067382812e-05, 0.00988006591796875, 0.00030994415283203125, 0.0016469955444335938, 0.010711669921875, 0.149658203125, 0.0010890960693359375, 5.2809715270996094e-05, 0.009429931640625, 0.0012845993041992188, 4.398822784423828e-05, 9.226799011230469e-05, 0.00021147727966308594, 0.09619140625, 0.03216552734375], "tokens": [275, 569, 284, 562, 40823, 27799, 26, 20709, 18795, 27, 301, 291, 442, 1015, 1721, 26, 21284, 30, 901, 1257, 27799, 569, 293, 284, 320, 446, 1022, 275, 319, 48588, 600, 4991, 645, 322, 18795, 32, 275, 319, 477, 753, 595, 322, 333, 2251, 48, 5823, 377, 2251, 48, 372, 27799, 32]}
{"line_number": 257, "line_type": "original", "code": "        if (den == 0) {", "entropy": 1.8525390625, "is_bug_line": false, "sus_score": 0.28622785210609436, "per_token_entropy": [5.13671875, 1.6142578125, 0.11865234375, 6.3515625, 0.93408203125, 1.8583984375, 0.10675048828125, 0.47900390625, 0.0711669921875], "tokens": [351, 415, 308, 5114, 610, 225, 34, 27, 301]}
{"line_number": 257, "line_type": "generated", "code": "\n        // which fraction has the smaller denominator?\n        if (this.getDenominator() < object.getDenominator()) {\n            return -1;\n        }\n        if (this.getDenominator() > object.getDenominator()) {\n            return", "entropy": 0.257568359375, "is_bug_line": false, "sus_score": 0.28622785210609436, "per_token_entropy": [0.5625, 2.046875, 3.701171875, 1.107421875, 0.368896484375, 0.787109375, 0.6494140625, 0.15185546875, 0.030426025390625, 0.09271240234375, 0.6142578125, 0.019073486328125, 0.6953125, 0.0059967041015625, 0.89111328125, 0.00482940673828125, 9.059906005859375e-06, 0.007503509521484375, 0.60986328125, 0.01227569580078125, 0.00020325183868408203, 0.0018520355224609375, 0.0001722574234008789, 5.245208740234375e-06, 0.007305145263671875, 0.0135955810546875, 0.020294189453125, 0.288818359375, 0.02032470703125, 0.006908416748046875, 0.0014104843139648438, 0.0165557861328125, 4.363059997558594e-05, 0.61181640625, 0.0126190185546875, 0.00022113323211669922, 0.01233673095703125, 0.00016677379608154297, 0.0051116943359375, 4.124641418457031e-05, 1.1920928955078125e-06, 0.00012242794036865234, 0.0006690025329589844, 0.0005383491516113281, 2.5510787963867188e-05, 4.589557647705078e-05, 0.000576019287109375, 8.463859558105469e-06, 0.0015621185302734375, 0.0008568763732910156, 0.004680633544921875, 0.00018155574798583984], "tokens": [291, 434, 1510, 18795, 1401, 322, 14763, 39920, 49, 291, 415, 308, 578, 32, 371, 43484, 9693, 346, 333, 1300, 32, 371, 43484, 9693, 1157, 301, 324, 442, 429, 35, 45, 291, 320, 291, 415, 308, 578, 32, 371, 43484, 9693, 346, 848, 1300, 32, 371, 43484, 9693, 1157, 301, 324, 442]}
{"line_number": 419, "line_type": "original", "code": "", "entropy": 3.12890625, "is_bug_line": false, "sus_score": 0.28552621603012085, "per_token_entropy": [3.12890625], "tokens": [203]}
{"line_number": 419, "line_type": "generated", "code": "\n     * @param fraction  the fraction to add or subtract, must not be {@code null}\n     * @param isAddition  {@code true} to add, {@code false} to subtract\n     * @return a {@code Fraction} instance with the", "entropy": 0.13134765625, "is_bug_line": false, "sus_score": 0.28552621603012085, "per_token_entropy": [0.333251953125, 0.1319580078125, 0.1728515625, 0.002323150634765625, 0.0150299072265625, 0.84521484375, 0.0479736328125, 0.2125244140625, 0.004451751708984375, 0.93701171875, 0.98779296875, 0.00029778480529785156, 0.0247039794921875, 0.0016107559204101562, 0.003772735595703125, 2.491474151611328e-05, 0.0213623046875, 7.867813110351562e-06, 0.00013256072998046875, 0.001983642578125, 0.0030422210693359375, 0.00012552738189697266, 0.00024366378784179688, 0.0013532638549804688, 0.07733154296875, 1.1005859375, 0.62841796875, 0.3427734375, 6.330013275146484e-05, 0.0011205673217773438, 0.00016558170318603516, 0.68701171875, 0.00589752197265625, 0.0256500244140625, 0.007678985595703125, 0.00022017955780029297, 0.0004811286926269531, 0.005153656005859375, 0.0009484291076660156, 3.707408905029297e-05, 0.0024471282958984375, 0.0007834434509277344, 0.00030112266540527344, 0.000980377197265625, 0.1551513671875, 0.0271759033203125, 0.0004725456237792969, 0.0010404586791992188, 0.00032782554626464844, 0.005218505859375, 8.690357208251953e-05, 9.846687316894531e-05], "tokens": [275, 319, 477, 753, 18795, 225, 322, 18795, 372, 1015, 556, 27799, 30, 2298, 646, 526, 3088, 687, 744, 111, 275, 319, 477, 753, 438, 48613, 225, 3088, 687, 861, 111, 372, 1015, 30, 3088, 687, 901, 111, 372, 27799, 275, 319, 477, 601, 312, 3088, 687, 40823, 111, 1980, 623, 322]}
{"line_number": 399, "line_type": "original", "code": "    }", "entropy": 3.556640625, "is_bug_line": false, "sus_score": 0.2824805974960327, "per_token_entropy": [3.67578125, 3.4375], "tokens": [264, 320]}
{"line_number": 399, "line_type": "generated", "code": "\n     * @throws NullArgumentException if the fraction is {@code null}\n     * @throws MathArithmeticException if the resulting numerator or denominator\n     *  exceeds {@code Integer.MAX_VALUE}\n     */\n    public Fraction subtract(Fraction fraction) {\n       ", "entropy": 0.06927490234375, "is_bug_line": false, "sus_score": 0.2824805974960327, "per_token_entropy": [0.3603515625, 0.493408203125, 0.006134033203125, 0.023345947265625, 0.10382080078125, 0.00011146068572998047, 0.004711151123046875, 0.0007295608520507812, 0.0135345458984375, 0.0006771087646484375, 0.0158233642578125, 0.0005817413330078125, 0.00010943412780761719, 0.0010786056518554688, 0.06854248046875, 0.058380126953125, 0.0008573532104492188, 0.0088043212890625, 0.004596710205078125, 0.0004544258117675781, 7.62939453125e-06, 0.006175994873046875, 0.0026988983154296875, 0.0113677978515625, 0.0005064010620117188, 5.996227264404297e-05, 0.060760498046875, 0.0021915435791015625, 0.80615234375, 0.002689361572265625, 0.517578125, 0.56884765625, 0.1240234375, 0.00310516357421875, 0.0005741119384765625, 0.00035381317138671875, 0.0002415180206298828, 0.000152587890625, 0.0004107952117919922, 0.00759124755859375, 0.17138671875, 0.036407470703125, 0.00870513916015625, 0.0016326904296875, 0.0003809928894042969, 0.0015954971313476562, 0.00017452239990234375, 0.06707763671875, 0.00021183490753173828, 0.0025882720947265625, 0.002567291259765625, 0.0264892578125], "tokens": [275, 319, 477, 5117, 9282, 8308, 415, 322, 18795, 438, 3088, 687, 744, 111, 275, 319, 477, 5117, 4175, 37375, 984, 415, 322, 14302, 1929, 11290, 556, 39920, 275, 319, 225, 35308, 3088, 687, 4401, 32, 3459, 81, 5975, 111, 275, 569, 284, 562, 40823, 27799, 26, 20709, 18795, 27, 301, 291]}
{"line_number": 429, "line_type": "original", "code": "     */", "entropy": 4.79296875, "is_bug_line": false, "sus_score": 0.2822396159172058, "per_token_entropy": [6.12109375, 3.46484375], "tokens": [262, 569]}
{"line_number": 429, "line_type": "generated", "code": "\n        }\n\n        // zero is identity for addition\n        if (numerator == 0) {\n            return isAdd? fraction : fraction.negate();\n        }\n        if (fraction.numerator == 0) {\n            return this;\n        }\n\n       ", "entropy": 0.1243896484375, "is_bug_line": false, "sus_score": 0.2822396159172058, "per_token_entropy": [0.369140625, 0.8486328125, 0.56298828125, 1.0927734375, 0.39990234375, 0.38037109375, 0.4736328125, 0.0004906654357910156, 0.017486572265625, 0.1761474609375, 0.003101348876953125, 0.0139007568359375, 0.78369140625, 0.00038123130798339844, 0.1385498046875, 0.0006356239318847656, 7.748603820800781e-06, 0.0196990966796875, 0.002101898193359375, 0.01194000244140625, 0.126220703125, 0.267578125, 0.0008168220520019531, 0.0166015625, 0.0019330978393554688, 0.01367950439453125, 0.0005130767822265625, 6.35385513305664e-05, 0.0012569427490234375, 8.702278137207031e-06, 0.0006537437438964844, 0.1822509765625, 4.839897155761719e-05, 0.2371826171875, 0.0206451416015625, 0.0007338523864746094, 0.003131866455078125, 0.004108428955078125, 0.00534820556640625, 2.384185791015625e-06, 0.002269744873046875, 0.00022339820861816406, 7.152557373046875e-07, 0.0021915435791015625, 0.0006952285766601562, 0.00887298583984375, 0.00606536865234375, 0.0007419586181640625, 6.80685043334961e-05, 0.1773681640625, 5.3048133850097656e-05, 0.09234619140625], "tokens": [291, 320, 584, 434, 5934, 438, 10625, 436, 10879, 291, 415, 308, 1516, 11290, 610, 225, 34, 27, 301, 324, 442, 438, 1103, 1018, 18795, 499, 18795, 32, 8095, 332, 473, 291, 320, 291, 415, 308, 21284, 32, 1516, 11290, 610, 225, 34, 27, 301, 324, 442, 458, 45, 291, 320, 584]}
{"line_number": 425, "line_type": "original", "code": "     * @return a {@code Fraction} instance with the resulting values", "entropy": 0.99951171875, "is_bug_line": false, "sus_score": 0.28147459030151367, "per_token_entropy": [4.8359375, 3.90234375, 0.77587890625, 2.830078125, 1.24609375, 0.170654296875, 0.01090240478515625, 0.0093231201171875, 0.00131988525390625, 0.018707275390625, 0.00600433349609375, 0.004100799560546875, 0.0692138671875, 0.10772705078125], "tokens": [262, 319, 477, 601, 312, 3088, 687, 40823, 111, 1980, 623, 322, 14302, 2078]}
{"line_number": 425, "line_type": "generated", "code": "\n     */\n    private Fraction addSub(Fraction fraction, boolean isAdd) {\n\n        // zero is a special case\n        if (numerator == 0) {\n            if (isAdd) {\n                return fraction;\n            } else {\n                return fraction.", "entropy": 0.1544189453125, "is_bug_line": false, "sus_score": 0.28147459030151367, "per_token_entropy": [0.125244140625, 0.021881103515625, 0.0060882568359375, 0.05194091796875, 0.0027332305908203125, 0.0001404285430908203, 7.3909759521484375e-06, 0.0001882314682006836, 0.0482177734375, 0.00017786026000976562, 0.00035119056701660156, 0.258056640625, 7.605552673339844e-05, 5.412101745605469e-05, 0.0052337646484375, 0.046173095703125, 0.74560546875, 0.81005859375, 1.099609375, 0.2078857421875, 1.228515625, 0.049835205078125, 0.00025272369384765625, 0.437255859375, 0.00801849365234375, 0.0240936279296875, 0.425537109375, 7.092952728271484e-05, 0.386962890625, 0.0012521743774414062, 1.0371208190917969e-05, 0.0308074951171875, 0.0028514862060546875, 0.0103912353515625, 0.74658203125, 0.042266845703125, 0.1385498046875, 0.0001519918441772461, 0.00942230224609375, 0.002002716064453125, 0.0201263427734375, 0.0634765625, 0.01284027099609375, 0.09283447265625, 0.0113983154296875, 8.511543273925781e-05, 0.370361328125, 0.006671905517578125, 0.03369140625, 0.438232421875, 0.00949859619140625, 0.00017344951629638672], "tokens": [275, 569, 284, 945, 40823, 1015, 1721, 26, 20709, 18795, 30, 1905, 438, 1103, 27, 301, 584, 434, 5934, 438, 312, 7456, 1135, 291, 415, 308, 1516, 11290, 610, 225, 34, 27, 301, 324, 415, 308, 297, 1103, 27, 301, 400, 442, 18795, 45, 324, 320, 813, 301, 400, 442, 18795, 32]}
{"line_number": 407, "line_type": "original", "code": "            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);", "entropy": 1.0615234375, "is_bug_line": false, "sus_score": 0.2811228036880493, "per_token_entropy": [7.3515625, 3.41796875, 0.27734375, 0.1763916015625, 0.0296783447265625, 1.3113021850585938e-06, 0.6435546875, 0.2166748046875, 0.019561767578125, 0.0011663436889648438, 0.76220703125, 0.000385284423828125, 0.57177734375, 0.00342559814453125, 0.004016876220703125, 0.10418701171875, 7.987022399902344e-06, 5.9453125, 2.86328125, 0.0533447265625, 0.1339111328125, 1.3837890625, 0.459228515625], "tokens": [1468, 1422, 537, 4175, 37375, 984, 26, 24225, 19298, 32, 9425, 18118, 81, 521, 81, 4002, 8750, 30, 1929, 11290, 30, 39920, 293]}
{"line_number": 407, "line_type": "generated", "code": "\n    /**\n     * Subtract an integer from the fraction.\n     * @param i the <tt>integer</tt> to subtract.\n     * @return this - i\n     */\n    public Fraction subtract(final int i) {\n        return new Fraction(num", "entropy": 0.057952880859375, "is_bug_line": false, "sus_score": 0.2811228036880493, "per_token_entropy": [0.8583984375, 0.265625, 0.04510498046875, 8.368492126464844e-05, 0.85986328125, 0.1754150390625, 0.032867431640625, 0.06396484375, 0.0265960693359375, 0.012054443359375, 0.0172882080078125, 0.01186370849609375, 0.0004458427429199219, 0.01513671875, 0.0008578300476074219, 0.0038471221923828125, 0.01418304443359375, 0.1474609375, 0.00083160400390625, 7.605552673339844e-05, 0.007778167724609375, 0.001178741455078125, 1.5020370483398438e-05, 0.0001823902130126953, 0.00032067298889160156, 0.144287109375, 0.0234527587890625, 0.0010204315185546875, 0.0006632804870605469, 0.0005440711975097656, 0.00018858909606933594, 0.01025390625, 0.0543212890625, 0.005527496337890625, 0.0205078125, 0.022247314453125, 0.01050567626953125, 0.00339508056640625, 0.0005679130554199219, 0.0007042884826660156, 0.00040984153747558594, 0.06671142578125, 0.0014553070068359375, 0.0006246566772460938, 0.0003647804260253906, 0.00128173828125, 0.0111541748046875, 0.0195465087890625, 0.046783447265625, 0.00015664100646972656, 0.0027179718017578125, 0.0035457611083984375], "tokens": [284, 1022, 275, 319, 48588, 600, 4991, 645, 322, 18795, 32, 275, 319, 477, 753, 595, 322, 333, 2251, 48, 5823, 377, 2251, 48, 372, 27799, 32, 275, 319, 477, 601, 458, 429, 595, 275, 569, 284, 562, 40823, 27799, 26, 3220, 629, 595, 27, 301, 291, 442, 537, 40823, 26, 1516]}
{"line_number": 435, "line_type": "original", "code": "     * Add an integer to the fraction.", "entropy": 2.513671875, "is_bug_line": false, "sus_score": 0.2781065106391907, "per_token_entropy": [6.24609375, 2.5703125, 7.5703125, 3.779296875, 0.6669921875, 0.31591796875, 1.1171875, 0.07659912109375, 0.2890625], "tokens": [262, 319, 2222, 600, 4991, 372, 322, 18795, 32]}
{"line_number": 435, "line_type": "generated", "code": "\n            return this;\n        }\n\n        // use Euclid's algorithm\n        final int a = MathUtils.abs(numerator);\n        final int b = MathUtils.abs(fraction.numerator);\n        final int c = MathUtils.abs", "entropy": 0.2415771484375, "is_bug_line": false, "sus_score": 0.2781065106391907, "per_token_entropy": [0.1845703125, 0.05145263671875, 0.0145111083984375, 0.01171875, 0.0926513671875, 0.002117156982421875, 0.6142578125, 0.7587890625, 1.1767578125, 3.587890625, 0.011810302734375, 2.2649765014648438e-06, 6.4849853515625e-05, 0.00457763671875, 0.39306640625, 0.361572265625, 0.8564453125, 0.55517578125, 1.91796875, 0.0587158203125, 0.7060546875, 0.417236328125, 6.902217864990234e-05, 0.276611328125, 0.001155853271484375, 0.055450439453125, 6.783008575439453e-05, 0.0169525146484375, 0.0010919570922851562, 0.00214385986328125, 0.0005335807800292969, 1.8715858459472656e-05, 7.2479248046875e-05, 0.00041174888610839844, 0.0016908645629882812, 7.855892181396484e-05, 9.417533874511719e-06, 5.543231964111328e-05, 0.1197509765625, 4.0650367736816406e-05, 0.00197601318359375, 1.5497207641601562e-06, 0.0006656646728515625, 0.035797119140625, 0.026885986328125, 0.0006470680236816406, 0.025909423828125, 5.459785461425781e-05, 0.0107574462890625, 0.004322052001953125, 0.0001456737518310547, 0.2044677734375], "tokens": [324, 442, 458, 45, 291, 320, 584, 434, 793, 516, 103, 573, 314, 1182, 8218, 291, 1158, 629, 312, 280, 4175, 2755, 32, 3596, 26, 1516, 11290, 293, 291, 1158, 629, 323, 280, 4175, 2755, 32, 3596, 26, 21284, 32, 1516, 11290, 293, 291, 1158, 629, 281, 280, 4175, 2755, 32, 3596]}
{"line_number": 439, "line_type": "original", "code": "    public Fraction add(final int i) {", "entropy": 1.7998046875, "is_bug_line": false, "sus_score": 0.26878058910369873, "per_token_entropy": [5.87890625, 9.0234375, 0.55810546875, 0.409912109375, 0.137939453125, 1.7353515625, 0.128173828125, 0.0077667236328125, 0.0044097900390625, 0.1204833984375], "tokens": [264, 562, 40823, 1015, 26, 3220, 629, 595, 27, 301]}
{"line_number": 439, "line_type": "generated", "code": "\n        long d1 = Math.multiplyExact(numerator, fraction.denominator);\n        long d2 = Math.multiplyExact(fraction.numerator, denominator);\n        long num;\n        if (isAdd) {\n            num = Math.add", "entropy": 0.18505859375, "is_bug_line": false, "sus_score": 0.26878058910369873, "per_token_entropy": [0.1119384765625, 1.244140625, 0.10968017578125, 0.01119232177734375, 0.0079345703125, 1.984375, 0.80419921875, 0.423095703125, 0.305419921875, 0.02362060546875, 0.08349609375, 9.107589721679688e-05, 0.0049896240234375, 0.03399658203125, 0.0003192424774169922, 9.119510650634766e-05, -0.0, 0.0184173583984375, 0.08489990234375, 0.0400390625, 0.004489898681640625, 8.368492126464844e-05, 0.0003306865692138672, 0.00039076805114746094, 0.0032482147216796875, 2.7418136596679688e-06, 5.125999450683594e-05, 0.00010800361633300781, 0.0380859375, 1.1682510375976562e-05, 7.522106170654297e-05, 2.3603439331054688e-05, 0.000782012939453125, 0.00437164306640625, 0.000522613525390625, 0.533203125, 1.291015625, 1.2041015625, 0.36181640625, 0.040283203125, 0.4375, 0.012420654296875, 0.051849365234375, 0.00016641616821289062, 0.00548553466796875, 0.0024566650390625, 0.041229248046875, 0.01412200927734375, 0.0003502368927001953, 0.279541015625, 0.003459930419921875, 0.00031566619873046875], "tokens": [291, 1946, 343, 35, 280, 4175, 32, 20123, 16085, 26, 1516, 11290, 30, 18795, 32, 29805, 9693, 293, 291, 1946, 343, 36, 280, 4175, 32, 20123, 16085, 26, 21284, 32, 1516, 11290, 30, 39920, 293, 291, 1946, 1929, 45, 291, 415, 308, 297, 1103, 27, 301, 324, 1929, 280, 4175, 32, 669]}
{"line_number": 271, "line_type": "original", "code": "        final int d = ArithmeticUtils.gcd(num, den);", "entropy": 1.8603515625, "is_bug_line": false, "sus_score": 0.21573852002620697, "per_token_entropy": [6.52734375, 5.68359375, 1.638671875, 2.046875, 0.1214599609375, 4.578125, 0.0033969879150390625, 0.0016870498657226562, 0.004261016845703125, 0.01506805419921875, 0.15380859375, 5.2109375, 0.048919677734375, 0.00836944580078125], "tokens": [351, 1158, 629, 343, 280, 47721, 2755, 32, 46060, 26, 1516, 30, 5537, 293]}
{"line_number": 271, "line_type": "generated", "code": "\n    /**\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * @return the fraction as a <tt>float</tt>\n     */\n    @Override\n    public", "entropy": 0.031707763671875, "is_bug_line": false, "sus_score": 0.21573852002620697, "per_token_entropy": [0.5947265625, 0.12322998046875, 0.0256500244140625, 6.258487701416016e-05, 0.4638671875, 0.00363922119140625, 0.04205322265625, 0.0012712478637695312, 0.01448822021484375, 0.025634765625, 0.004001617431640625, 0.00014090538024902344, 0.01513671875, 0.0034427642822265625, 7.104873657226562e-05, 0.0021572113037109375, 0.0177459716796875, 0.0031299591064453125, 0.0005898475646972656, 0.003055572509765625, 0.0014791488647460938, 0.048828125, 8.58306884765625e-06, 0.0003826618194580078, 0.0002799034118652344, 0.0002582073211669922, 3.826618194580078e-05, 8.58306884765625e-05, 0.0032062530517578125, 0.007625579833984375, 0.03155517578125, 0.00021600723266601562, 0.023468017578125, 0.0005879402160644531, 0.0017938613891601562, 0.0028743743896484375, 8.356571197509766e-05, 0.0004012584686279297, 0.002620697021484375, 3.0159950256347656e-05, 4.673004150390625e-05, 0.007343292236328125, 0.001953125, 1.0371208190917969e-05, 0.031646728515625, 0.00109100341796875, 0.0112457275390625, 0.01039886474609375, 0.111572265625, 0.0006246566772460938, 0.0028896331787109375, 0.0007605552673339844], "tokens": [284, 1022, 275, 319, 7124, 322, 18795, 619, 312, 333, 2251, 48, 1808, 377, 2251, 4503, 1348, 38057, 322, 18795, 619, 275, 319, 322, 1929, 11290, 32235, 810, 39920, 32, 275, 319, 477, 601, 322, 18795, 619, 312, 333, 2251, 48, 1808, 377, 2251, 48, 275, 569, 284, 477, 1788, 284, 562]}
{"line_number": 385, "line_type": "original", "code": "     */", "entropy": 2.75390625, "is_bug_line": false, "sus_score": 0.21573852002620697, "per_token_entropy": [3.34765625, 2.16015625], "tokens": [262, 569]}
{"line_number": 385, "line_type": "generated", "code": "\n     * <p>Subtracts the value of another fraction from the value of this one, returning the result\n     * in reduced form. The algorithm follows Knuth, 4.5.1.</p>\n     *\n     * @param fraction  the", "entropy": 0.100341796875, "is_bug_line": false, "sus_score": 0.21573852002620697, "per_token_entropy": [0.488525390625, 0.09307861328125, 0.22412109375, 0.0004742145538330078, 0.0018949508666992188, 0.51416015625, 0.0033168792724609375, 0.053741455078125, 0.00315093994140625, 4.1604042053222656e-05, 0.294189453125, 0.0181427001953125, 0.00028228759765625, 0.09765625, 0.00012493133544921875, 0.0015106201171875, 0.00400543212890625, 0.10089111328125, 0.0044403076171875, 0.92724609375, 0.174560546875, 0.3671875, 0.39501953125, 1.8358230590820312e-05, 0.004886627197265625, 0.01056671142578125, 2.5391578674316406e-05, 0.2091064453125, 1.0029296875, 0.010345458984375, 0.01131439208984375, 0.0002567768096923828, 2.384185791015625e-07, 0.0008540153503417969, 0.0280914306640625, 3.5762786865234375e-07, 0.00011241436004638672, 1.6689300537109375e-06, 1.3113021850585938e-05, 0.002941131591796875, 0.0101776123046875, 0.00011777877807617188, 0.0018062591552734375, 0.062347412109375, 0.00018393993377685547, 0.07318115234375, 6.67572021484375e-06, 0.012908935546875, 0.00015842914581298828, 0.0003161430358886719, 0.00920867919921875, 0.0005478858947753906], "tokens": [275, 319, 333, 98, 48, 34460, 101, 322, 786, 432, 4674, 18795, 645, 322, 786, 432, 458, 1591, 30, 14116, 322, 1056, 275, 319, 328, 22974, 2234, 32, 886, 8218, 11588, 44327, 860, 30, 225, 38, 32, 39, 32, 35, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 18795, 225, 322]}
