{"line_number": 36, "line_type": "original", "code": " * <p>Implementation of the {@link PegasusSolver <em>Pegasus</em>} method is", "entropy": 1.3193359375, "is_bug_line": false, "sus_score": 0.47009992599487305, "per_token_entropy": [8.0703125, 4.98828125, 6.7734375, 0.0526123046875, 4.8984375, 2.099609375, 0.0693359375, 0.1650390625, 0.004528045654296875, 5.265625, 0.0011444091796875, 0.0034809112548828125, 0.0013980865478515625, 0.0007243156433105469, 0.494873046875, 0.0069427490234375, 0.008575439453125, 0.0316162109375, 0.0007643699645996094, 0.006740570068359375, 0.0005369186401367188, 0.0089263916015625, 0.00021827220916748047, 0.082275390625, 1.0576171875, 0.2188720703125], "tokens": [319, 333, 98, 48, 14634, 432, 322, 3088, 1204, 447, 4192, 302, 352, 17766, 333, 405, 48, 66, 4192, 302, 352, 377, 405, 14649, 1411, 438]}
{"line_number": 36, "line_type": "generated", "code": "\n        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);", "entropy": 0.07470703125, "is_bug_line": false, "sus_score": 0.47009992599487305, "per_token_entropy": [0.55126953125, 0.1744384765625, 0.0038738250732421875, 0.00785064697265625, 1.7523765563964844e-05, 0.000934600830078125, 0.02667236328125, 8.58306884765625e-06, 0.07928466796875, 0.12115478515625, 1.0728836059570312e-05, 2.384185791015625e-06, 0.005771636962890625], "tokens": [291, 2599, 26, 9535, 26201, 30, 7976, 26201, 30, 667, 882, 26201, 293]}
{"line_number": 42, "line_type": "original", "code": " * <p>The {@link SecantSolver <em>Secant</em>} method is <em>not</em> a", "entropy": 1.5615234375, "is_bug_line": false, "sus_score": 0.3914981484413147, "per_token_entropy": [8.0859375, 4.76953125, 7.55859375, 0.06396484375, 2.052734375, 3.7890625, 0.89892578125, 2.716796875, 0.0016775131225585938, 0.01549530029296875, 1.59375, 0.0268402099609375, 0.001956939697265625, 0.036895751953125, 0.000881195068359375, 0.018341064453125, 0.00013756752014160156, 0.343994140625, 0.81103515625, 1.3974609375, 5.109375, 0.4208984375, 0.0032749176025390625, 1.62109375, 0.10296630859375, 0.0005846023559570312, 0.053131103515625, 2.228515625], "tokens": [319, 333, 98, 48, 1318, 3088, 1204, 5534, 692, 17766, 333, 405, 48, 3091, 692, 377, 405, 14649, 1411, 438, 333, 405, 48, 1206, 377, 405, 48, 312]}
{"line_number": 42, "line_type": "generated", "code": "\n        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);", "entropy": 0.07623291015625, "is_bug_line": false, "sus_score": 0.3914981484413147, "per_token_entropy": [0.529296875, 0.19580078125, 0.00457763671875, 0.00833892822265625, 2.086162567138672e-05, 0.0010900497436523438, 0.026092529296875, 8.344650268554688e-06, 0.09075927734375, 0.129150390625, 1.0967254638671875e-05, 2.384185791015625e-06, 0.00559234619140625], "tokens": [291, 2599, 26, 9535, 26201, 30, 7976, 26201, 30, 667, 882, 26201, 293]}
{"line_number": 3410, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.3849678635597229, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 3410, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.3849678635597229, "per_token_entropy": [], "tokens": []}
{"line_number": 375, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.3710550367832184, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 375, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.3710550367832184, "per_token_entropy": [], "tokens": []}
{"line_number": 371, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.3708760440349579, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 371, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.3708760440349579, "per_token_entropy": [], "tokens": []}
{"line_number": 367, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.3563936948776245, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 367, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.3563936948776245, "per_token_entropy": [], "tokens": []}
{"line_number": 2334, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.35016152262687683, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 2334, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.35016152262687683, "per_token_entropy": [], "tokens": []}
{"line_number": 43, "line_type": "original", "code": " * bracketing method, so it is not implemented here. It has a separate", "entropy": 3.720703125, "is_bug_line": false, "sus_score": 0.3105822503566742, "per_token_entropy": [7.70703125, 13.703125, 0.273681640625, 3.224609375, 3.59375, 2.390625, 2.70703125, 1.384765625, 0.9853515625, 3.92578125, 1.599609375, 0.46142578125, 5.8828125, 4.15234375, 3.978515625, 3.55859375], "tokens": [319, 33828, 299, 1411, 30, 1259, 561, 438, 646, 7586, 2442, 32, 2030, 1401, 312, 8111]}
{"line_number": 43, "line_type": "generated", "code": "        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);", "entropy": 0.1466064453125, "is_bug_line": false, "sus_score": 0.3105822503566742, "per_token_entropy": [1.1845703125, 0.10693359375, 0.00594329833984375, 0.010009765625, 2.7894973754882812e-05, 0.0021724700927734375, 0.10638427734375, 5.4001808166503906e-05, 0.12066650390625, 0.361328125, 0.0001442432403564453, 2.872943878173828e-05, 0.0080108642578125], "tokens": [351, 2599, 26, 9535, 26201, 30, 7976, 26201, 30, 667, 882, 26201, 293]}
{"line_number": 3925, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.3009994328022003, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 3925, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.3009994328022003, "per_token_entropy": [], "tokens": []}
{"line_number": 3928, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.29837536811828613, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 3928, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.29837536811828613, "per_token_entropy": [], "tokens": []}
{"line_number": 3929, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.286084920167923, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 3929, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.286084920167923, "per_token_entropy": [], "tokens": []}
{"line_number": 296, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 296, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [], "tokens": []}
{"line_number": 54, "line_type": "original", "code": "    protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;", "entropy": 0.869140625, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [1.8095703125, 5.98828125, 6.421875, 0.94091796875, 0.6552734375, 1.3740234375, 5.2094459533691406e-05, 0.6435546875, 0.00044536590576171875, 6.175041198730469e-05, 0.00043773651123046875, 0.08203125, 2.384185791015625e-05, 3.933906555175781e-06, 0.020965576171875, 0.1199951171875, 0.0012712478637695312, 0.05047607421875, 0.0014362335205078125, 0.090087890625, 0.0469970703125], "tokens": [264, 2522, 907, 1158, 2064, 4040, 81, 1319, 18634, 9315, 81, 1186, 7516, 32220, 280, 225, 35, 87, 31, 40, 45]}
{"line_number": 54, "line_type": "generated", "code": "\n    /**\n     * Get the <em>Secant</em>-based root-finding method to use.\n     *\n     * @return the <em>Secant</em>-based root-finding method to use.\n     */\n    public Method getMethod", "entropy": 0.1922607421875, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [0.372314453125, 1.5283203125, 0.07281494140625, 0.0001392364501953125, 1.7275390625, 0.0275726318359375, 1.9775390625, 0.0103759765625, 0.0001016855239868164, 0.0380859375, 0.0004458427429199219, 0.003086090087890625, 1.0013580322265625e-05, 0.0221405029296875, 0.0022220611572265625, 0.06646728515625, 0.0021038055419921875, 0.0001016855239868164, 0.055389404296875, 0.465576171875, 0.003353118896484375, 0.006343841552734375, 0.00675201416015625, 0.0008931159973144531, 0.203125, 0.00015687942504882812, 0.0005564689636230469, 0.00030303001403808594, 0.640625, 0.494873046875, 0.002239227294921875, 1.633167266845703e-05, 0.0029697418212890625, 0.00010728836059570312, 0.0005316734313964844, 5.960464477539062e-07, 0.0031280517578125, 0.00029730796813964844, 0.01349639892578125, 0.0005135536193847656, 0.00011658668518066406, 0.00205230712890625, 0.08343505859375, 0.0004940032958984375, 1.640625, 0.006305694580078125, 0.05413818359375, 0.0083770751953125, 0.264892578125, 0.129638671875, 0.0002980232238769531, 0.053985595703125], "tokens": [284, 1022, 275, 319, 1390, 322, 333, 405, 48, 3091, 692, 377, 405, 13119, 7873, 3051, 31, 32129, 1411, 372, 793, 32, 275, 319, 275, 319, 477, 601, 322, 333, 405, 48, 3091, 692, 377, 405, 13119, 7873, 3051, 31, 32129, 1411, 372, 793, 32, 275, 569, 284, 562, 5393, 622, 1868]}
{"line_number": 295, "line_type": "original", "code": "", "entropy": 0.2108154296875, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [0.2108154296875], "tokens": [203]}
{"line_number": 295, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [], "tokens": []}
{"line_number": 67, "line_type": "original", "code": "     */", "entropy": 5.6171875, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [6.0625, 5.17578125], "tokens": [262, 569]}
{"line_number": 67, "line_type": "generated", "code": "\n        // Verify arguments.\n        verifyInterval(min, max);\n        verifySequence(min, startValue, max);\n        verifyAllowedSolution(allowedSolution);\n\n        // Reset.\n        iterations = 0;\n\n        // Save the function and bracketing interval.", "entropy": 0.46875, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [1.0029296875, 0.8173828125, 2.640625, 0.931640625, 0.11236572265625, 0.057403564453125, 0.642578125, 0.10101318359375, 0.0010156631469726562, 0.0251312255859375, 4.363059997558594e-05, 0.00933074951171875, 0.285400390625, 0.09759521484375, 0.1439208984375, 1.3955078125, 0.0017919540405273438, 0.07794189453125, 6.663799285888672e-05, 0.392822265625, 0.00021326541900634766, 0.00022304058074951172, 0.000957489013671875, 0.296875, 0.291015625, 0.453369140625, 0.1029052734375, 0.0007066726684570312, 2.6226043701171875e-05, 0.0020961761474609375, 0.003368377685546875, 0.19873046875, 0.53955078125, 0.1937255859375, 1.13671875, 0.56591796875, 0.02728271484375, 2.25390625, 0.256103515625, 0.0017290115356445312, 0.0186767578125, 9.906291961669922e-05, 0.560546875, 0.2025146484375, 3.373046875, 0.176025390625, 1.8466796875, 1.4248046875, 0.67529296875, 0.1668701171875, 0.76171875, 0.10382080078125], "tokens": [291, 434, 12072, 4209, 32, 291, 6144, 5757, 26, 887, 30, 1769, 293, 291, 6144, 5897, 26, 887, 30, 1477, 882, 30, 1769, 293, 291, 6144, 12759, 13628, 26, 11327, 13628, 293, 584, 434, 10059, 32, 291, 17576, 280, 225, 34, 45, 584, 434, 9875, 322, 667, 461, 33828, 299, 7898, 32]}
{"line_number": 46, "line_type": "original", "code": " * @since 3.0", "entropy": 2.478515625, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [8.78125, 0.9580078125, 4.1640625, 0.232421875, 1.03125, 8.273124694824219e-05, 2.173828125], "tokens": [319, 477, 8119, 225, 37, 32, 34]}
{"line_number": 46, "line_type": "generated", "code": "\n        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);\n        this.allowed = AllowedSolution.ANY_SIDE;\n        this.method = method;\n    }\n\n    /**\n     * Get the solution type the solver should attempt.\n     *\n     * @", "entropy": 0.21484375, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [0.49853515625, 0.244140625, 0.004436492919921875, 0.00799560546875, 1.7762184143066406e-05, 0.0009403228759765625, 0.027008056640625, 8.463859558105469e-06, 0.07464599609375, 0.1148681640625, 1.0728836059570312e-05, 2.5033950805664062e-06, 0.0049591064453125, 0.748046875, 0.0201568603515625, 7.104873657226562e-05, 0.0244598388671875, 0.0018711090087890625, 0.0014638900756835938, 4.410743713378906e-06, 4.3511390686035156e-05, 0.002471923828125, 4.649162292480469e-05, 1.6689300537109375e-06, 0.0013675689697265625, 0.05413818359375, 0.0009074211120605469, 1.1086463928222656e-05, 0.0009188652038574219, 0.00115203857421875, 0.0005331039428710938, 0.0017223358154296875, 0.12298583984375, 0.003204345703125, 0.16796875, 0.04638671875, 0.078125, 2.2172927856445312e-05, 1.7939453125, 0.0160675048828125, 3.1953125, 0.6669921875, 0.4228515625, 0.156005859375, 0.7646484375, 0.81005859375, 0.84521484375, 0.062744140625, 0.00040411949157714844, 0.1788330078125, 0.00010848045349121094, 0.00614166259765625], "tokens": [291, 2599, 26, 9535, 26201, 30, 7976, 26201, 30, 667, 882, 26201, 293, 291, 458, 32, 11327, 280, 38886, 13628, 32, 15205, 81, 25590, 45, 291, 458, 32, 1959, 280, 1411, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 5295, 827, 322, 17821, 1395, 11549, 32, 275, 319, 275, 319, 477]}
{"line_number": 150, "line_type": "original", "code": "        final double ftol = getFunctionValueAccuracy();", "entropy": 1.51953125, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [4.45703125, 4.53125, 0.118896484375, 3.330078125, 3.08984375, 0.0160980224609375, 1.1162109375, 0.0003025531768798828, 6.854534149169922e-05, 0.0005831718444824219, 0.0654296875], "tokens": [351, 1158, 2064, 296, 14598, 280, 622, 2447, 882, 26201, 473]}
{"line_number": 150, "line_type": "generated", "code": "\n            if (FastMath.abs(fx) <= atol) {\n                return x;\n            }\n\n            // If the relative error is small enough, return the current\n            // approximation.\n            if (FastMath.abs(x - x0) <= (", "entropy": 0.33740234375, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [0.1134033203125, 0.280029296875, 0.1339111328125, 0.416015625, 0.0006837844848632812, 0.00015282630920410156, 0.01308441162109375, 0.006988525390625, 1.1484375, 0.00791168212890625, 0.111572265625, 1.0107421875, 0.415283203125, 0.025482177734375, 0.16455078125, 1.08984375, 0.638671875, 0.142333984375, 0.0280303955078125, 0.0005159378051757812, 0.494384765625, 0.076171875, 0.42138671875, 0.312255859375, 1.52734375, 0.446533203125, 1.3544921875, 0.035552978515625, 0.2073974609375, 0.1373291015625, 0.63818359375, 0.275146484375, 0.141845703125, 0.217041015625, 0.0004935264587402344, 0.004108428955078125, 0.33251953125, 0.85791015625, 0.52783203125, 0.170654296875, 0.2255859375, 1.4424324035644531e-05, 2.2172927856445312e-05, 0.0100555419921875, 0.40966796875, 0.49267578125, 1.2958984375, 0.0535888671875, 0.1676025390625, 0.0005860328674316406, 0.07598876953125, 0.89404296875], "tokens": [324, 415, 308, 12200, 5717, 32, 3596, 26, 5185, 27, 2511, 35012, 27, 301, 400, 442, 816, 45, 324, 320, 1064, 434, 1670, 322, 6491, 1048, 438, 5532, 8448, 30, 442, 322, 1550, 324, 434, 39431, 32, 324, 415, 308, 12200, 5717, 32, 3596, 26, 106, 429, 816, 34, 27, 2511, 308]}
{"line_number": 151, "line_type": "original", "code": "        final double atol = getAbsoluteAccuracy();", "entropy": 1.79296875, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [2.953125, 5.5625, 0.0340576171875, 6.87890625, 0.043975830078125, 0.529296875, 0.031951904296875, 0.00025153160095214844, 0.10980224609375], "tokens": [351, 1158, 2064, 35012, 280, 622, 12043, 26201, 473]}
{"line_number": 151, "line_type": "generated", "code": "\n            if (FastMath.abs(f1) <= ftol) {\n                return x1;\n            }", "entropy": 0.236572265625, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [0.390625, 0.33056640625, 0.12371826171875, 0.58154296875, 0.0005660057067871094, 0.00016796588897705078, 0.009429931640625, 0.007221221923828125, 0.4375, 0.0203857421875, 0.01076507568359375, 0.2261962890625, 0.0655517578125, 0.00024056434631347656, 0.10675048828125, 0.031280517578125, 0.23974609375, 1.5185546875, 0.787109375, 0.495849609375, 0.004024505615234375, 0.05218505859375, 0.0005574226379394531], "tokens": [324, 415, 308, 12200, 5717, 32, 3596, 26, 88, 35, 27, 2511, 296, 14598, 27, 301, 400, 442, 816, 35, 45, 324, 320]}
{"line_number": 152, "line_type": "original", "code": "        final double rtol = getRelativeAccuracy();", "entropy": 1.8046875, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [5.3359375, 4.87109375, 0.105712890625, 6.65625, 0.0014743804931640625, 0.0771484375, 0.8359375, 0.034912109375, 6.783008575439453e-05, 0.1258544921875], "tokens": [351, 1158, 2064, 12190, 362, 280, 622, 11777, 26201, 473]}
{"line_number": 152, "line_type": "generated", "code": "\n\n            // If the maximum number of evaluations has been exceeded, then\n            // either the bracketing is wrong or we have hit machine precision.\n            // In either case, we can't get any closer to the root and must\n            // return the current approximation", "entropy": 0.53857421875, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [0.587890625, 0.07281494140625, 0.426513671875, 0.41015625, 1.7470703125, 0.357177734375, 0.00201416015625, 0.345947265625, 1.919269561767578e-05, 0.642578125, 0.01092529296875, 0.08343505859375, 0.06439208984375, 0.64453125, 0.6943359375, 0.0042572021484375, 0.54931640625, 0.66552734375, 1.984375, 0.09326171875, 0.5107421875, 0.77392578125, 0.1292724609375, 1.0888671875, 1.2353515625, 3.02734375, 1.1875, 0.019073486328125, 0.1163330078125, 0.12225341796875, 0.2822265625, 0.52001953125, 0.71142578125, 0.01244354248046875, 0.051849365234375, 0.65966796875, 0.476318359375, 0.0231170654296875, 0.9814453125, 0.404541015625, 0.10540771484375, 0.0938720703125, 0.046905517578125, 0.12017822265625, 2.1640625, 1.8583984375, 0.05450439453125, 0.0020198822021484375, 0.6064453125, 0.994140625, 0.1585693359375, 0.0794677734375], "tokens": [1064, 434, 1670, 322, 7091, 1451, 432, 6130, 993, 1401, 2583, 31793, 30, 1615, 324, 434, 3154, 322, 33828, 299, 438, 6643, 556, 996, 1159, 8977, 6652, 12485, 32, 324, 434, 701, 3154, 1135, 30, 996, 883, 1330, 622, 1346, 30682, 372, 322, 3051, 461, 2298, 324, 434, 442, 322, 1550, 39431]}
{"line_number": 154, "line_type": "original", "code": "        // Keep track of inverted intervals, meaning that the left bound is", "entropy": 2.86328125, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [4.2734375, 1.5478515625, 6.2734375, 5.72265625, 0.09454345703125, 2.671875, 2.330078125, 2.861328125, 7.25390625, 0.79443359375, 1.3388671875, 3.55859375, 0.6044921875, 0.7568359375], "tokens": [351, 434, 19114, 4562, 432, 37592, 26374, 30, 14269, 688, 322, 2841, 5085, 438]}
{"line_number": 154, "line_type": "generated", "code": "\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    return inverted? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted? x0 : x1;", "entropy": 0.187255859375, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [1.1005859375, 0.279541015625, 1.486328125, 0.0008616447448730469, 0.0025959014892578125, 0.0238189697265625, 0.2293701171875, 0.80859375, 0.2283935546875, 0.33837890625, 0.7705078125, 0.0679931640625, 0.744140625, 0.0001615285873413086, 0.000942230224609375, 0.002986907958984375, 0.0745849609375, 0.42138671875, 0.1842041015625, 0.0198974609375, 0.50634765625, 0.3056640625, 0.007045745849609375, 0.00618743896484375, 0.0950927734375, 0.0005617141723632812, 0.0841064453125, 0.056732177734375, 0.00506591796875, 6.198883056640625e-06, 2.2649765014648438e-06, 0.0006022453308105469, 0.00507354736328125, 0.0026702880859375, 0.002445220947265625, 5.936622619628906e-05, 0.0004494190216064453, 0.0011892318725585938, 0.0012454986572265625, 0.00010180473327636719, 0.0003662109375, 0.0005574226379394531], "tokens": [400, 1135, 2964, 81, 25590, 44, 528, 442, 816, 45, 400, 1135, 17789, 81, 25590, 44, 528, 442, 37592, 1018, 816, 35, 499, 816, 34, 45, 400, 1135, 20169, 81, 25590, 44, 528, 442, 37592, 1018, 816, 34, 499, 816, 35, 45]}
{"line_number": 155, "line_type": "original", "code": "        // larger than the right bound.", "entropy": 3.94140625, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [5.05859375, 1.931640625, 13.765625, 1.240234375, 1.37109375, 5.83203125, 0.41455078125, 1.91796875], "tokens": [351, 434, 14324, 2784, 322, 2091, 5085, 32]}
{"line_number": 155, "line_type": "generated", "code": "\n                    return x;\n                case LEFT_SIDE:\n                    return x0;\n                case RIGHT_SIDE:\n                    return x1;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the maximum number", "entropy": 0.1900634765625, "is_bug_line": false, "sus_score": 0.23465596139431, "per_token_entropy": [0.24609375, 0.56689453125, 0.322509765625, 0.35986328125, 0.1536865234375, 0.014678955078125, 0.53662109375, 0.00021600723266601562, 0.00148773193359375, 0.001804351806640625, 0.59912109375, 0.54150390625, 1.7802734375, 0.334228515625, 0.00997161865234375, 0.0116119384765625, 0.0230560302734375, 0.01224517822265625, 6.079673767089844e-06, 2.384185791015625e-06, 0.0004153251647949219, 0.0565185546875, 0.01180267333984375, 0.0308685302734375, 0.01202392578125, 9.810924530029297e-05, 0.01129913330078125, 0.315185546875, 0.0014219284057617188, 0.0233917236328125, 0.07879638671875, 0.0452880859375, 0.004291534423828125, 0.00203704833984375, 0.02490234375, 0.0028972625732421875, 0.00438690185546875, 0.00539398193359375, 0.003978729248046875, 0.00014472007751464844, 0.0004870891571044922, 0.0007033348083496094, 0.0028629302978515625, 0.0003006458282470703, 0.00865936279296875, 0.0002827644348144531, 0.084228515625, 0.061431884765625, 0.46142578125, 0.331787109375, 2.234375, 0.54150390625], "tokens": [528, 442, 816, 45, 400, 1135, 17789, 81, 25590, 44, 528, 442, 816, 34, 45, 400, 1135, 20169, 81, 25590, 44, 528, 442, 816, 35, 45, 400, 1244, 44, 528, 434, 9043, 7152, 7292, 32, 528, 1422, 537, 4175, 4292, 924, 473, 400, 320, 324, 320, 1064, 434, 1670, 322, 7091, 1451]}
