{"line_number": 363, "line_type": "original", "code": "        return createComplex(real * rhs.real - imaginary * rhs.imaginary,", "entropy": 1.5654296875, "is_bug_line": false, "sus_score": 0.5356244444847107, "per_token_entropy": [4.0546875, 10.734375, 3.787109375, 0.017974853515625, 0.0963134765625, 3.517578125, 1.8076171875, 2.703125, 0.01641845703125, 0.29443359375, 2.556640625, 0.01446533203125, 0.00037741661071777344, 0.0284271240234375, 0.05010986328125, 0.00023746490478515625, 0.0010900497436523438, 0.000308990478515625, 0.06939697265625], "tokens": [351, 442, 1487, 12267, 26, 4543, 319, 9322, 32, 4543, 429, 17463, 3172, 319, 9322, 32, 17792, 3172, 30]}
{"line_number": 363, "line_type": "generated", "code": "Inverse Cosine</a>\n     * of this complex number.\n     * \n     * @return the <a href=\"http://mathworld.wolfram.com/InverseCosine.html\"\n     * TARGET=\"_top\">Inverse Cosine</a", "entropy": 0.1866455078125, "is_bug_line": false, "sus_score": 0.5356244444847107, "per_token_entropy": [0.76025390625, 0.3251953125, 0.006084442138671875, 0.12408447265625, 0.01305389404296875, 0.02178955078125, 1.3916015625, 0.099365234375, 0.0804443359375, 0.0311737060546875, 0.0270233154296875, 0.00122833251953125, 0.05218505859375, 0.1219482421875, 0.0014257431030273438, 1.986328125, 5.5789947509765625e-05, 0.1953125, 0.004047393798828125, 0.4072265625, 1.6640625, 0.2496337890625, 0.04315185546875, 0.09423828125, 0.0008330345153808594, 0.0009407997131347656, 0.001163482666015625, 2.2172927856445312e-05, 2.6464462280273438e-05, 9.524822235107422e-05, 6.198883056640625e-06, 1.3470649719238281e-05, 0.000926971435546875, 0.00010347366333007812, 0.0013427734375, 0.0010013580322265625, 0.0283203125, 6.0558319091796875e-05, 0.0013885498046875, 0.00011789798736572266, 0.0036258697509765625, 0.7646484375, 0.01043701171875, 0.25634765625, 0.0005331039428710938, 0.0011138916015625, 0.025421142578125, 0.8798828125, 0.01554107666015625, 0.0002727508544921875, 0.00872802734375, 0.0003337860107421875], "tokens": [23173, 7109, 482, 377, 83, 48, 275, 319, 432, 458, 8640, 1451, 32, 275, 319, 5384, 319, 477, 601, 322, 333, 83, 976, 347, 525, 555, 3812, 5860, 32, 105, 362, 43579, 32, 508, 33, 23173, 18015, 482, 32, 916, 20, 275, 319, 21207, 5617, 1393, 413, 23173, 7109, 482, 377, 83]}
{"line_number": 258, "line_type": "original", "code": "                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ", "entropy": 0.71484375, "is_bug_line": true, "sus_score": 0.5167667269706726, "per_token_entropy": [8.921875, 8.0, 0.1920166015625, 1.0830078125, 1.7119140625, 0.000911712646484375, 1.35546875, 0.0007271766662597656, 1.806640625, 0.005786895751953125, 3.814697265625e-05, 0.032989501953125, 0.76318359375, 0.03399658203125, 0.8955078125, 0.5380859375, 0.00609588623046875, 0.0252532958984375, 3.5881996154785156e-05, 0.1614990234375, 0.0005087852478027344, 4.0531158447265625e-05, 0.0073394775390625, 6.0625, 0.0526123046875, 1.9697265625, 0.0033416748046875, 0.29150390625, 0.447998046875, 0.9921875, 0.00926971435546875, 0.0003707408905029297, 0.0001888275146484375, 0.00011074542999267578, 0.005474090576171875, 0.00019609928131103516, 2.9206275939941406e-05, 0.001483917236328125, 0.00632476806640625, 0.00022792816162109375, 0.00386810302734375, 0.00868988037109375, 0.012054443359375, 0.0016193389892578125, 0.0003135204315185547, 2.574920654296875e-05, 9.942054748535156e-05, 7.474422454833984e-05, 0.00011134147644042969, 0.0010995864868164062, 0.019073486328125, 0.00017154216766357422, 0.007740020751953125, 0.0007925033569335938, 4.374980926513672e-05, 0.10882568359375, 5.20703125], "tokens": [4696, 2152, 280, 308, 4075, 32, 2627, 705, 6189, 3952, 8733, 26, 4543, 27, 610, 6934, 32, 2627, 705, 6189, 3952, 8733, 26, 14312, 32, 371, 6877, 5156, 962, 308, 4075, 32, 2627, 705, 6189, 3952, 8733, 26, 17792, 3172, 27, 610, 6934, 32, 2627, 705, 6189, 3952, 8733, 26, 14312, 32, 371, 42364, 3172, 5073, 225]}
{"line_number": 258, "line_type": "generated", "code": "\n     */\n    public boolean isNaN() {\n        return Double.isNaN(real) || Double.isNaN(imaginary);\n    }\n    \n    /**\n     * Get a string representation of this complex number.\n     * <p>\n     * The format is:\n    ", "entropy": 0.255126953125, "is_bug_line": true, "sus_score": 0.5167667269706726, "per_token_entropy": [0.591796875, 0.06536865234375, 0.046295166015625, 0.021148681640625, 0.01062774658203125, 0.0005779266357421875, 0.0001004934310913086, 0.036163330078125, 0.0134735107421875, 0.2435302734375, 0.08355712890625, 1.2724609375, 0.00039196014404296875, 0.0246734619140625, 0.0004172325134277344, 0.2059326171875, 0.004993438720703125, 0.028411865234375, 0.0052642822265625, 0.00030803680419921875, 0.00211334228515625, 0.0004451274871826172, 0.0013360977172851562, 3.3855438232421875e-05, 0.0034389495849609375, 0.141845703125, 0.002349853515625, 0.66552734375, 0.031707763671875, 0.05694580078125, 0.00025081634521484375, 2.30078125, 0.317626953125, 0.44677734375, 0.1939697265625, 0.03857421875, 0.6474609375, 0.345947265625, 0.02044677734375, 0.038177490234375, 0.0261993408203125, 0.00141143798828125, 1.146484375, 0.00643157958984375, 0.0026397705078125, 0.05364990234375, 7.677078247070312e-05, 0.255859375, 0.393310546875, 0.22216796875, 2.919921875, 0.32373046875], "tokens": [275, 569, 284, 562, 1905, 438, 11126, 346, 301, 291, 442, 6934, 32, 26821, 26, 4543, 27, 1276, 6934, 32, 26821, 26, 17792, 3172, 293, 284, 320, 2170, 1022, 275, 319, 1390, 312, 802, 10293, 432, 458, 8640, 1451, 32, 275, 319, 333, 98, 48, 275, 319, 886, 2179, 438, 44, 275]}
{"line_number": 280, "line_type": "original", "code": "        return 37 * (17 * MathUtils.hash(imaginary) + ", "entropy": 2.244140625, "is_bug_line": false, "sus_score": 0.4670711159706116, "per_token_entropy": [3.59375, 1.8310546875, 4.58203125, 8.71875, 4.8671875, 2.421875, 1.8779296875, 3.6796875, 2.005859375, 0.30126953125, 4.02734375, 1.2822265625, 0.0008006095886230469, 0.814453125, 0.032012939453125, 2.2734375, 0.0023365020751953125, 0.20068359375, 0.263427734375, 2.087890625], "tokens": [351, 442, 225, 37, 41, 319, 308, 35, 41, 319, 4175, 2755, 32, 2888, 26, 17792, 3172, 27, 474, 225]}
{"line_number": 280, "line_type": "generated", "code": "\n     * @param c number to multiply by\n     * @return product of this and c\n     */\n    public Complex multiply(Complex c) {\n        return new Complex(real * c.real - imaginary * c.imaginary, real * c.", "entropy": 0.229248046875, "is_bug_line": false, "sus_score": 0.4670711159706116, "per_token_entropy": [0.389892578125, 0.03857421875, 1.0634765625, 0.021881103515625, 0.87939453125, 1.4833984375, 0.033355712890625, 0.399169921875, 0.127685546875, 0.1763916015625, 0.0008635520935058594, 0.01511383056640625, 0.00727081298828125, 1.25390625, 0.2353515625, 0.01324462890625, 0.38134765625, 0.323974609375, 0.08428955078125, 0.640625, 0.03546142578125, 0.0091094970703125, 0.015899658203125, 0.1546630859375, 0.00212860107421875, 0.0809326171875, 0.0028972625732421875, 0.015777587890625, 0.01580810546875, 0.19189453125, 0.70654296875, 0.289306640625, 0.0054473876953125, 0.0300750732421875, 0.275146484375, 0.058349609375, 0.0083465576171875, 0.00034427642822265625, 0.7041015625, 0.0099945068359375, 0.006336212158203125, 5.424022674560547e-05, 0.00341033935546875, 0.0029621124267578125, 0.00011992454528808594, 0.003200531005859375, 5.245208740234375e-06, 0.00800323486328125, 1.705078125, 0.004383087158203125, 0.00394439697265625, 0.00011992454528808594], "tokens": [275, 319, 477, 753, 281, 1451, 372, 22213, 810, 275, 319, 477, 601, 4054, 432, 458, 461, 281, 275, 569, 284, 562, 19915, 22213, 26, 12267, 281, 27, 301, 291, 442, 537, 19915, 26, 4543, 319, 281, 32, 4543, 429, 17463, 3172, 319, 281, 32, 17792, 3172, 30, 4011, 319, 281, 32]}
{"line_number": 277, "line_type": "original", "code": "        if (isNaN()) {", "entropy": 1.7734375, "is_bug_line": false, "sus_score": 0.46492764353752136, "per_token_entropy": [3.849609375, 3.9453125, 0.1824951171875, 2.333984375, 0.289794921875, 0.036407470703125], "tokens": [351, 415, 308, 26821, 1157, 301]}
{"line_number": 277, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.46492764353752136, "per_token_entropy": [], "tokens": []}
{"line_number": 248, "line_type": "original", "code": "        if (this == other) { ", "entropy": 2.765625, "is_bug_line": false, "sus_score": 0.4497206509113312, "per_token_entropy": [5.0703125, 4.078125, 0.1531982421875, 2.640625, 0.99609375, 4.57421875, 0.08251953125, 0.0278167724609375, 7.265625], "tokens": [351, 415, 308, 578, 610, 1604, 27, 301, 225]}
{"line_number": 248, "line_type": "generated", "code": "\n    public double getReal() {\n        return real;\n    }\n\n    /**\n     * Return true if either real or imaginary parts of the\n     * complex number is <code>Double.NaN</code>.\n     *\n     * @return <code>true", "entropy": 0.297119140625, "is_bug_line": false, "sus_score": 0.4497206509113312, "per_token_entropy": [0.39697265625, 0.2393798828125, 0.043212890625, 0.0024433135986328125, 0.0106658935546875, 0.01059722900390625, 0.016387939453125, 0.11505126953125, 0.0021953582763671875, 0.00499725341796875, 0.0007719993591308594, 0.0151824951171875, 0.0012617111206054688, 0.97021484375, 0.01558685302734375, 0.0272216796875, 0.0006837844848632812, 2.203125, 1.671875, 0.319580078125, 0.287109375, 0.25048828125, 0.0207977294921875, 0.000774383544921875, 9.691715240478516e-05, 1.44140625, 1.2900390625, 0.322021484375, 0.6650390625, 7.62939453125e-06, 0.488037109375, 0.007354736328125, 0.591796875, 1.2001953125, 0.03759765625, 0.0016736984252929688, 0.358154296875, 0.0001227855682373047, 0.09619140625, 0.0223236083984375, 0.00036644935607910156, 0.55029296875, 0.05084228515625, 0.0009560585021972656, 0.33349609375, 0.0003457069396972656, 0.004241943359375, 0.0017528533935546875, 1.3408203125, 0.0099029541015625, 0.001079559326171875, 0.00955963134765625], "tokens": [284, 562, 2064, 622, 6877, 346, 301, 291, 442, 4011, 45, 284, 320, 446, 1022, 275, 319, 2744, 861, 415, 3154, 4011, 556, 17463, 3172, 8710, 432, 322, 275, 319, 8640, 1451, 438, 333, 687, 48, 4075, 32, 11126, 377, 687, 4503, 275, 319, 275, 319, 477, 601, 333, 687, 48, 1508]}
{"line_number": 358, "line_type": "original", "code": "        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||", "entropy": 0.39404296875, "is_bug_line": false, "sus_score": 0.44340234994888306, "per_token_entropy": [3.970703125, 1.03515625, 0.08154296875, 0.90771484375, 0.00060272216796875, 0.2132568359375, 0.00014269351959228516, 0.0021114349365234375, 0.27294921875, 0.0555419921875, 0.1383056640625, 0.338623046875, 0.00015664100646972656, 0.005878448486328125, 2.0623207092285156e-05, 0.004241943359375, 0.2279052734375, 0.00011420249938964844, 0.37255859375, 0.254638671875], "tokens": [351, 415, 308, 4075, 32, 28823, 11949, 26, 4543, 27, 1276, 6934, 32, 28823, 11949, 26, 17792, 3172, 27, 1276]}
{"line_number": 358, "line_type": "generated", "code": "\n    /**\n     * Returns a {@code Complex} whose value is\n     * <code>(this + increment)</code>.\n     * <p>\n     * Uses the definitional formula \n     * <pre>\n     * (a + bi) + (u +", "entropy": 0.263916015625, "is_bug_line": false, "sus_score": 0.44340234994888306, "per_token_entropy": [0.46728515625, 0.94140625, 0.049102783203125, 0.00018107891082763672, 1.26171875, 0.56640625, 0.63232421875, 1.10546875, 0.50390625, 0.0247650146484375, 0.043365478515625, 0.003108978271484375, 0.00138092041015625, 0.353271484375, 0.000270843505859375, 0.049072265625, 0.1424560546875, 0.01312255859375, 0.029937744140625, 0.63427734375, 2.0703125, 0.005558013916015625, 0.00011515617370605469, 0.005260467529296875, 0.085693359375, 0.0008211135864257812, 0.53955078125, 0.0023708343505859375, 0.002471923828125, 0.0146331787109375, 1.823902130126953e-05, 1.078125, 0.00139617919921875, 0.07098388671875, 0.001674652099609375, 0.00611114501953125, 0.60546875, 0.0003108978271484375, 0.0192108154296875, 0.0099029541015625, 0.03851318359375, 0.01123809814453125, 0.0004448890686035156, 0.5771484375, 7.200241088867188e-05, 0.0304107666015625, 0.0008206367492675781, 8.90493392944336e-05, 0.0228424072265625, 0.057098388671875, 1.6396484375, 0.0013551712036132812], "tokens": [284, 1022, 275, 319, 3759, 312, 3088, 687, 19915, 111, 13696, 786, 438, 275, 319, 333, 687, 1563, 578, 474, 11885, 2874, 687, 4503, 275, 319, 333, 98, 48, 275, 319, 26079, 322, 5644, 279, 17568, 5384, 319, 333, 1001, 48, 275, 319, 308, 83, 474, 10789, 27, 474, 308, 103, 474]}
{"line_number": 266, "line_type": "original", "code": "        return ret;", "entropy": 5.9375, "is_bug_line": false, "sus_score": 0.42034122347831726, "per_token_entropy": [2.97265625, 12.7578125, 7.9140625, 0.1085205078125], "tokens": [351, 442, 2152, 45]}
{"line_number": 266, "line_type": "generated", "code": "\n     * <code>Double.NEGATIVE_INFINITY</code>) and neither is <code>NaN</code>;\n     * false otherwise\n     *\n     * @return  true if either the real or imaginary part of this complex number\n     * takes an infinite", "entropy": 0.1549072265625, "is_bug_line": false, "sus_score": 0.42034122347831726, "per_token_entropy": [0.90087890625, 0.009857177734375, 0.0635986328125, 0.01406097412109375, 0.0008063316345214844, 0.0017604827880859375, 0.0007138252258300781, 0.0178985595703125, 0.0003979206085205078, 0.00023746490478515625, 0.0204925537109375, 0.0006604194641113281, 1.5693359375, 0.192626953125, 0.35595703125, 0.60546875, 0.77490234375, 0.0190582275390625, 0.00041604042053222656, 0.37939453125, 0.00968170166015625, 0.0007357597351074219, 1.0810546875, 0.4365234375, 0.00023806095123291016, 0.08587646484375, 0.023681640625, 0.4521484375, 0.0267486572265625, 0.2470703125, 0.0003085136413574219, 0.005817413330078125, 0.0031681060791015625, 0.332763671875, 0.042938232421875, 0.002735137939453125, 0.04693603515625, 0.0718994140625, 0.00040984153747558594, 0.0027828216552734375, 0.00038623809814453125, 9.238719940185547e-05, 0.004016876220703125, 0.0179290771484375, 0.00522613525390625, 0.033355712890625, 0.10101318359375, 0.03228759765625, 0.0008115768432617188, 0.05230712890625, 0.0018157958984375, 0.0001518726348876953], "tokens": [275, 319, 333, 687, 48, 4075, 32, 43518, 81, 36069, 377, 687, 5103, 461, 25209, 438, 333, 687, 48, 11126, 377, 687, 4812, 275, 319, 901, 5878, 275, 319, 275, 319, 477, 601, 225, 861, 415, 3154, 322, 4011, 556, 17463, 3172, 1742, 432, 458, 8640, 1451, 275, 319, 8727, 600, 20280]}
{"line_number": 355, "line_type": "original", "code": "        if (isNaN() || rhs.isNaN()) {", "entropy": 1.2568359375, "is_bug_line": false, "sus_score": 0.41898760199546814, "per_token_entropy": [5.6640625, 2.2421875, 0.053192138671875, 5.4609375, 0.20263671875, 0.0277099609375, 0.10552978515625, 0.0022144317626953125, 0.00930023193359375, 0.0301971435546875, 0.0189208984375], "tokens": [351, 415, 308, 26821, 346, 1276, 9322, 32, 26821, 1157, 301]}
{"line_number": 355, "line_type": "generated", "code": "\n            return NaN;\n        }\n        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n            Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {\n            // we don't", "entropy": 0.0467529296875, "is_bug_line": false, "sus_score": 0.41898760199546814, "per_token_entropy": [0.311767578125, 0.0289459228515625, 0.11944580078125, 0.002696990966796875, 0.040130615234375, 0.005218505859375, 0.2587890625, 0.556640625, 0.0217437744140625, 0.1693115234375, 3.981590270996094e-05, 0.0039825439453125, 1.8477439880371094e-05, 0.00016236305236816406, 0.004627227783203125, 0.003021240234375, 0.01313018798828125, 0.004680633544921875, 2.467632293701172e-05, 0.00072479248046875, 1.4185905456542969e-05, 0.00014197826385498047, 0.05706787109375, 1.52587890625e-05, 0.0372314453125, 0.00992584228515625, 0.05291748046875, 0.0002543926239013672, 3.814697265625e-06, 0.0004119873046875, 2.4318695068359375e-05, 0.00019884109497070312, 0.00130462646484375, 0.0001049041748046875, 0.0065155029296875, 0.58251953125, 0.00153350830078125, 2.3603439331054688e-05, 0.0005488395690917969, 2.86102294921875e-06, 0.00024437904357910156, 0.0004887580871582031, 0.0001977682113647461, 0.0001329183578491211, 2.7060508728027344e-05, 0.00504302978515625, 0.003093719482421875, 0.027587890625, 0.08404541015625, 0.01482391357421875, 0.0007219314575195312, 8.940696716308594e-05], "tokens": [324, 442, 21644, 45, 291, 320, 291, 415, 308, 4075, 32, 28823, 11949, 26, 4543, 27, 1276, 6934, 32, 28823, 11949, 26, 17792, 3172, 27, 1276, 324, 6934, 32, 28823, 11949, 26, 14312, 32, 4543, 44411, 6934, 32, 28823, 11949, 26, 14312, 32, 17792, 3172, 490, 301, 324, 434, 996, 2800, 1330]}
{"line_number": 310, "line_type": "original", "code": "        return Double.isNaN(real) || Double.isNaN(imaginary);        ", "entropy": 1.9853515625, "is_bug_line": false, "sus_score": 0.40773940086364746, "per_token_entropy": [3.298828125, 5.94921875, 6.0546875, 0.0112457275390625, 3.578125, 0.00597381591796875, 0.214599609375, 0.55224609375, 0.1917724609375, 0.086181640625, 0.00033211708068847656, 0.11328125, 0.0009937286376953125, 0.0212249755859375, 0.00014221668243408203, 8.234375, 5.4453125], "tokens": [351, 442, 6934, 32, 26821, 26, 4543, 27, 1276, 6934, 32, 26821, 26, 17792, 3172, 293, 263]}
{"line_number": 310, "line_type": "generated", "code": "\n        }\n        \n        return new Complex(real * rhs.real - imaginary * rhs.imaginary,\n                          real * rhs.imaginary + imaginary * rhs.real);\n    }\n    \n    /**\n     * Returns a {@link Complex} whose value is\n    ", "entropy": 0.1883544921875, "is_bug_line": false, "sus_score": 0.40773940086364746, "per_token_entropy": [0.3779296875, 0.038543701171875, 1.154296875, 1.6669921875, 0.10296630859375, 0.00372314453125, 0.047637939453125, 0.30517578125, 0.052978515625, 0.002277374267578125, 0.0003845691680908203, 0.050872802734375, 0.010162353515625, 0.0027217864990234375, 1.8477439880371094e-05, 0.0017375946044921875, 0.00640106201171875, 6.854534149169922e-05, 0.0004253387451171875, 1.0013580322265625e-05, 0.0028972625732421875, 1.525390625, 0.1632080078125, 0.0008907318115234375, 0.0008606910705566406, 2.181529998779297e-05, 0.0003418922424316406, 0.00013530254364013672, 0.00218963623046875, 0.0164794921875, 6.4373016357421875e-06, 0.001506805419921875, 0.00418853759765625, 0.00014483928680419922, 0.00033211708068847656, 0.0185394287109375, 0.08209228515625, 0.0015668869018554688, 0.47216796875, 0.01399993896484375, 0.0218505859375, 3.3736228942871094e-05, 1.7900390625, 0.7587890625, 0.12255859375, 0.26611328125, 0.1324462890625, 0.143798828125, 0.032806396484375, 0.0037136077880859375, 0.0011873245239257812, 0.3935546875], "tokens": [291, 320, 2746, 442, 537, 19915, 26, 4543, 319, 9322, 32, 4543, 429, 17463, 3172, 319, 9322, 32, 17792, 3172, 30, 3775, 4011, 319, 9322, 32, 17792, 3172, 474, 17463, 3172, 319, 9322, 32, 4543, 293, 284, 320, 2170, 1022, 275, 319, 3759, 312, 3088, 1204, 19915, 111, 13696, 786, 438, 275]}
{"line_number": 872, "line_type": "original", "code": "        return new Complex(real, imaginary);", "entropy": 0.7314453125, "is_bug_line": false, "sus_score": 0.37698909640312195, "per_token_entropy": [5.29296875, 0.389404296875, 0.343017578125, 1.0341796875, 0.1953125, 0.005710601806640625, 0.0028018951416015625, 0.005992889404296875, 8.33272933959961e-05, 0.048736572265625], "tokens": [351, 442, 537, 19915, 26, 4543, 30, 17463, 3172, 293]}
{"line_number": 872, "line_type": "generated", "code": "\n\n    /**\n     * Create a complex number given the modulus and argument.\n     *\n     * @param modulus the modulus of the value to create\n     * @param phase the argument of the value to create\n     * @return a new complex number instance", "entropy": 0.1893310546875, "is_bug_line": false, "sus_score": 0.37698909640312195, "per_token_entropy": [1.607421875, 0.060821533203125, 0.048736572265625, 4.4465065002441406e-05, 1.0927734375, 0.0584716796875, 0.074951171875, 0.02593994140625, 0.06353759765625, 0.058349609375, 1.4365234375, 1.239776611328125e-05, 0.043731689453125, 0.087890625, 0.4345703125, 0.01548004150390625, 0.0004398822784423828, 0.303955078125, 7.557868957519531e-05, 0.00665283203125, 0.0004968643188476562, 0.01302337646484375, 0.00014019012451171875, 0.04351806640625, 0.00301361083984375, 1.609325408935547e-05, 0.5771484375, 0.00299835205078125, 0.6796875, 1.142578125, 0.5, 0.126953125, 8.702278137207031e-06, 0.000553131103515625, 0.00017762184143066406, 0.7646484375, 0.020660400390625, 0.0506591796875, 0.1297607421875, 0.0003104209899902344, 0.0010623931884765625, 0.0005402565002441406, 0.0007700920104980469, 0.11370849609375, 0.0008082389831542969, 0.00241851806640625, 0.0174407958984375, 0.107177734375, 0.055877685546875, 0.03570556640625, 0.005794525146484375, 0.024261474609375], "tokens": [446, 1022, 275, 319, 2648, 312, 8640, 1451, 2702, 322, 2047, 16103, 461, 2793, 32, 275, 319, 275, 319, 477, 753, 2047, 16103, 322, 2047, 16103, 432, 322, 786, 372, 1487, 275, 319, 477, 753, 11225, 322, 2793, 432, 322, 786, 372, 1487, 275, 319, 477, 601, 312, 537, 8640, 1451, 1980]}
{"line_number": 255, "line_type": "original", "code": "                if (rhs.isNaN()) {", "entropy": 2.626953125, "is_bug_line": false, "sus_score": 0.3523990213871002, "per_token_entropy": [7.33203125, 4.34765625, 0.81640625, 7.2578125, 0.66796875, 0.359619140625, 0.160400390625, 0.08087158203125], "tokens": [2071, 415, 308, 14312, 32, 26821, 1157, 301]}
{"line_number": 255, "line_type": "generated", "code": "\n     */\n    public boolean isNaN() {\n        return Double.isNaN(real) || Double.isNaN(imaginary);\n    }\n    \n    /**\n     * Returns true if neither the real nor imaginary parts of this\n     * complex number is NaN; false otherwise", "entropy": 0.179931640625, "is_bug_line": false, "sus_score": 0.3523990213871002, "per_token_entropy": [0.381103515625, 0.53759765625, 0.02685546875, 0.0252532958984375, 0.01058197021484375, 0.0004761219024658203, 0.000301361083984375, 0.04974365234375, 0.00952911376953125, 0.118408203125, 0.0709228515625, 1.2568359375, 0.00021696090698242188, 0.00772857666015625, 0.00020968914031982422, 0.1260986328125, 0.00533294677734375, 0.01493072509765625, 0.005260467529296875, 0.0003218650817871094, 0.0014944076538085938, 0.0003178119659423828, 0.001224517822265625, 5.030632019042969e-05, 0.00327301025390625, 0.05548095703125, 0.002544403076171875, 0.755859375, 0.036651611328125, 0.05120849609375, 0.0002435445785522461, 0.89306640625, 0.55859375, 0.04345703125, 1.2724609375, 1.013671875, 0.005870819091796875, 0.0191192626953125, 0.11083984375, 0.00011289119720458984, 0.2279052734375, 0.093994140625, 0.28369140625, 0.8115234375, 0.0002493858337402344, 0.288330078125, 0.0025959014892578125, 0.03900146484375, 0.021148681640625, 0.099853515625, 0.00537872314453125, 0.01526641845703125], "tokens": [275, 569, 284, 562, 1905, 438, 11126, 346, 301, 291, 442, 6934, 32, 26821, 26, 4543, 27, 1276, 6934, 32, 26821, 26, 17792, 3172, 293, 284, 320, 2170, 1022, 275, 319, 3759, 861, 415, 25209, 322, 4011, 12356, 17463, 3172, 8710, 432, 458, 275, 319, 8640, 1451, 438, 21644, 45, 901, 5878]}
{"line_number": 263, "line_type": "original", "code": "            }", "entropy": 5.92578125, "is_bug_line": false, "sus_score": 0.3523990213871002, "per_token_entropy": [7.0703125, 4.78125], "tokens": [1468, 320]}
{"line_number": 263, "line_type": "generated", "code": "    /**\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param real Real part\n     * @param imaginary Imaginary part\n     * @return a new Complex instance\n     */\n    public static Complex createComplex(", "entropy": 0.239013671875, "is_bug_line": false, "sus_score": 0.3523990213871002, "per_token_entropy": [1.806640625, 0.205810546875, 0.166015625, 0.0015497207641601562, 2.33984375, 0.0458984375, 1.2470703125, 0.2349853515625, 0.06719970703125, 0.059783935546875, 0.014251708984375, 0.40283203125, 0.003681182861328125, 1.9669532775878906e-05, 0.08392333984375, 0.03814697265625, 0.0206146240234375, 0.004169464111328125, 0.64013671875, 0.0002849102020263672, 0.0208282470703125, 0.0030059814453125, 0.0616455078125, 2.080078125, 0.03570556640625, 0.31884765625, 3.552436828613281e-05, 0.0002422332763671875, 0.0007262229919433594, 0.00530242919921875, 0.0257720947265625, 0.0108795166015625, 0.00022399425506591797, 0.0003581047058105469, 0.006587982177734375, 0.01148223876953125, 0.0386962890625, 0.0188751220703125, 0.0300140380859375, 0.477294921875, 0.1156005859375, 0.52734375, 0.381591796875, 0.210205078125, 0.255859375, 0.05877685546875, 0.1209716796875, 0.059844970703125, 0.033416748046875, 0.12408447265625, 0.0007467269897460938, 0.01030731201171875], "tokens": [264, 1022, 275, 319, 2648, 312, 8640, 1451, 2702, 322, 4011, 461, 17463, 3172, 8710, 32, 275, 319, 275, 319, 477, 753, 4011, 11443, 1742, 275, 319, 477, 753, 17463, 3172, 7585, 481, 3172, 1742, 275, 319, 477, 601, 312, 537, 19915, 1980, 275, 569, 284, 562, 907, 19915, 1487, 12267, 26]}
{"line_number": 254, "line_type": "original", "code": "                Complex rhs = (Complex)other;", "entropy": 3.044921875, "is_bug_line": false, "sus_score": 0.3410601019859314, "per_token_entropy": [8.09375, 8.171875, 7.375, 0.393798828125, 0.0765380859375, 0.00308990478515625, 0.0121612548828125, 3.24609375, 0.029632568359375], "tokens": [2071, 19915, 9322, 280, 308, 12267, 27, 2455, 45]}
{"line_number": 254, "line_type": "generated", "code": "\n     *\n     * @return {@code true} if either or both parts of this complex number is NaN\n     */\n    public boolean isNaN() {\n        return Double.isNaN(real) || Double.isNaN(imaginary);\n    }\n    \n    /**\n     *", "entropy": 0.18603515625, "is_bug_line": false, "sus_score": 0.3410601019859314, "per_token_entropy": [0.374267578125, 0.075439453125, 2.908203125, 0.004032135009765625, 0.02288818359375, 0.0094146728515625, 1.1162109375, 0.00473785400390625, 0.004093170166015625, 0.0009055137634277344, 0.042938232421875, 0.0675048828125, 0.505859375, 0.002384185791015625, 0.059814453125, 0.01081085205078125, 0.03125, 0.12548828125, 0.0726318359375, 0.33740234375, 0.53857421875, 0.76220703125, 0.09765625, 0.028900146484375, 0.01348876953125, 0.0084686279296875, 0.0006642341613769531, 0.0002124309539794922, 0.0213775634765625, 0.007232666015625, 0.1771240234375, 0.059417724609375, 1.2099609375, 0.00019025802612304688, 0.0089111328125, 0.0002218484878540039, 0.08258056640625, 0.005084991455078125, 0.0108795166015625, 0.0037994384765625, 0.0003325939178466797, 0.0013914108276367188, 0.0003650188446044922, 0.0011119842529296875, 4.673004150390625e-05, 0.002593994140625, 0.042266845703125, 0.0009412765502929688, 0.74658203125, 0.0190277099609375, 0.040435791015625, 0.00037598609924316406], "tokens": [275, 319, 275, 319, 477, 601, 3088, 687, 861, 111, 415, 3154, 556, 4335, 8710, 432, 458, 8640, 1451, 438, 21644, 275, 569, 284, 562, 1905, 438, 11126, 346, 301, 291, 442, 6934, 32, 26821, 26, 4543, 27, 1276, 6934, 32, 26821, 26, 17792, 3172, 293, 284, 320, 2170, 1022, 275, 319]}
{"line_number": 250, "line_type": "original", "code": "        } else if (other == null) {", "entropy": 2.01953125, "is_bug_line": false, "sus_score": 0.3378632068634033, "per_token_entropy": [3.248046875, 4.66796875, 5.0390625, 1.4599609375, 0.1588134765625, 2.955078125, 1.35546875, 1.0390625, 0.2314453125, 0.030609130859375], "tokens": [351, 320, 813, 415, 308, 2455, 610, 744, 27, 301]}
{"line_number": 250, "line_type": "generated", "code": "\n    /**\n     * Get a String representation of this complex number.\n     *\n     * @return a string representation of the form \"x +/- y i\"\n     */\n    public String toString() {\n        if (isNaN()) {\n            return \"NaN\";\n       ", "entropy": 0.338134765625, "is_bug_line": false, "sus_score": 0.3378632068634033, "per_token_entropy": [0.46630859375, 1.615234375, 0.06634521484375, 0.0006999969482421875, 1.599609375, 0.6318359375, 1.775390625, 0.024505615234375, 0.0241546630859375, 0.828125, 0.810546875, 0.0258636474609375, 0.020751953125, 0.0275115966796875, 0.0012102127075195312, 1.2958984375, 0.00023448467254638672, 0.12158203125, 0.01331329345703125, 0.165283203125, 0.07403564453125, 0.0238037109375, 0.0400390625, 1.26171875, 0.5009765625, 0.1859130859375, 1.2412109375, 0.09796142578125, 0.275390625, 0.05902099609375, 1.626953125, 0.0167236328125, 0.156005859375, 0.07806396484375, 0.03350830078125, 0.156005859375, 0.007232666015625, 0.002986907958984375, 0.0284271240234375, 0.01210784912109375, 0.1412353515625, 1.166015625, 0.0310211181640625, 0.2042236328125, 0.0032939910888671875, 0.01235198974609375, 0.03277587890625, 0.00550079345703125, 0.2427978515625, 0.0222320556640625, 0.296142578125, 0.0205535888671875], "tokens": [284, 1022, 275, 319, 1390, 312, 892, 10293, 432, 458, 8640, 1451, 32, 275, 319, 275, 319, 477, 601, 312, 802, 10293, 432, 322, 2234, 313, 106, 474, 15913, 533, 595, 20, 275, 569, 284, 562, 892, 11345, 346, 301, 291, 415, 308, 26821, 1157, 301, 324, 442, 313, 11126, 866, 291]}
{"line_number": 77, "line_type": "original", "code": "        this.real = real;", "entropy": 2.359375, "is_bug_line": false, "sus_score": 0.2878093719482422, "per_token_entropy": [4.30078125, 7.66015625, 0.34765625, 0.8642578125, 0.73828125, 1.330078125, 1.27734375], "tokens": [351, 458, 32, 4543, 280, 4011, 45]}
{"line_number": 77, "line_type": "generated", "code": "\n     * @param rhs the value to add\n     * @return <code>this + rhs</code>\n     */\n    public Complex add(Complex rhs) {\n        if (isNaN() || rhs.isNaN()) {\n            return NaN;\n        }\n        \n        if", "entropy": 0.172607421875, "is_bug_line": false, "sus_score": 0.2878093719482422, "per_token_entropy": [0.282470703125, 0.04632568359375, 0.74755859375, 0.007358551025390625, 0.03240966796875, 0.5947265625, 1.802734375, 0.00018405914306640625, 0.966796875, 0.492919921875, 0.00030541419982910156, 0.0011196136474609375, 0.0005583763122558594, 1.16015625, 0.00342559814453125, 0.041351318359375, 0.00023865699768066406, 0.01947021484375, 0.01416778564453125, 0.0007715225219726562, 3.039836883544922e-05, 0.0089111328125, 0.010284423828125, 0.33935546875, 0.0287933349609375, 0.010528564453125, 0.004589080810546875, 0.01247406005859375, 0.0008211135864257812, 0.04400634765625, 0.0006165504455566406, 0.005992889404296875, 0.0103912353515625, 0.238037109375, 0.71875, 0.032684326171875, 0.373291015625, 0.038818359375, 0.0030422210693359375, 0.0158843994140625, 0.01117706298828125, 0.00041365623474121094, 0.00533294677734375, 0.00380706787109375, 0.01387786865234375, 0.0196685791015625, 0.058929443359375, 0.0003457069396972656, 0.0139007568359375, 0.001689910888671875, 0.47119140625, 0.265380859375], "tokens": [275, 319, 477, 753, 9322, 322, 786, 372, 1015, 275, 319, 477, 601, 333, 687, 48, 578, 474, 9322, 377, 687, 48, 275, 569, 284, 562, 19915, 1015, 26, 12267, 9322, 27, 301, 291, 415, 308, 26821, 346, 1276, 9322, 32, 26821, 1157, 301, 324, 442, 21644, 45, 291, 320, 2746, 415]}
{"line_number": 78, "line_type": "original", "code": "        this.imaginary = imaginary;", "entropy": 2.2734375, "is_bug_line": false, "sus_score": 0.2794656753540039, "per_token_entropy": [4.12890625, 8.46875, 0.6767578125, 4.15234375, 0.0006966590881347656, 1.5185546875, 1.345703125, 0.00473785400390625, 0.1761474609375], "tokens": [351, 458, 32, 17792, 3172, 280, 17463, 3172, 45]}
{"line_number": 78, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.2794656753540039, "per_token_entropy": [], "tokens": []}
{"line_number": 299, "line_type": "original", "code": "        return real;", "entropy": 3.763671875, "is_bug_line": false, "sus_score": 0.24915683269500732, "per_token_entropy": [3.642578125, 1.4248046875, 7.25, 2.73828125], "tokens": [351, 442, 4011, 45]}
{"line_number": 299, "line_type": "generated", "code": "\n     * @param rhs  the complex number to multiply with\n     * @return  <code>this * rhs</code>\n     */\n    public Complex multiply(Complex rhs) {\n        double real = this.real * rhs.real - this.imag", "entropy": 0.273681640625, "is_bug_line": false, "sus_score": 0.24915683269500732, "per_token_entropy": [0.62548828125, 0.32763671875, 0.323974609375, 0.01178741455078125, 0.321044921875, 0.9736328125, 0.70654296875, 0.986328125, 0.005283355712890625, 0.095947265625, 0.11199951171875, 0.2357177734375, 0.285400390625, 0.00020384788513183594, 0.0018463134765625, 0.0025787353515625, 1.103515625, 0.475830078125, 0.03662109375, 0.047149658203125, 0.00266265869140625, 0.02679443359375, 0.0251007080078125, 0.0007853507995605469, 3.147125244140625e-05, 0.0101318359375, 0.01861572265625, 1.064453125, 0.04388427734375, 0.0181732177734375, 0.038299560546875, 0.09539794921875, 0.001190185546875, 0.2091064453125, 0.0007953643798828125, 0.01374053955078125, 0.016815185546875, 0.263916015625, 1.431640625, 1.3125, 0.7802734375, 0.7646484375, 0.004268646240234375, 0.4453125, 0.3056640625, 0.0035552978515625, 0.00013113021850585938, 0.53076171875, 0.04766845703125, 0.0706787109375, 3.2067298889160156e-05, 0.0002739429473876953], "tokens": [275, 319, 477, 753, 9322, 225, 322, 8640, 1451, 372, 22213, 623, 275, 319, 477, 601, 225, 333, 687, 48, 578, 319, 9322, 377, 687, 48, 275, 569, 284, 562, 19915, 22213, 26, 12267, 9322, 27, 301, 291, 2064, 4011, 280, 458, 32, 4543, 319, 9322, 32, 4543, 429, 458, 32, 17792]}
{"line_number": 76, "line_type": "original", "code": "        super();", "entropy": 7.875, "is_bug_line": false, "sus_score": 0.21573852002620697, "per_token_entropy": [3.59375, 10.8046875, 9.21875], "tokens": [351, 2599, 473]}
{"line_number": 76, "line_type": "generated", "code": "    {@link java.lang.Double} arithmetic.\n     * </p>\n     * \n     * @param rhs the addend\n     * @return <code>this + rhs</code>\n     */\n    public Complex add(Complex rhs) {\n        if", "entropy": 0.1842041015625, "is_bug_line": false, "sus_score": 0.21573852002620697, "per_token_entropy": [2.5234375, 0.478759765625, 0.0029087066650390625, 0.169189453125, 3.2067298889160156e-05, 0.0004799365997314453, 0.0004603862762451172, 0.0010614395141601562, 0.051300048828125, 0.01282501220703125, 0.875, 0.357177734375, 0.0309906005859375, 0.4423828125, 0.0452880859375, 0.002765655517578125, 0.059356689453125, 0.00021374225616455078, 1.1455078125, 8.189678192138672e-05, 0.0105743408203125, 0.0018863677978515625, 0.057525634765625, 0.62841796875, 0.6494140625, 0.00026988983154296875, 0.034027099609375, 9.894371032714844e-05, 0.000873565673828125, 0.00030541419982910156, 0.72900390625, 0.00409698486328125, 0.0263519287109375, 0.00025081634521484375, 0.00730133056640625, 0.0035152435302734375, 0.0005621910095214844, 2.8848648071289062e-05, 0.004909515380859375, 0.0071258544921875, 0.40234375, 0.0166473388671875, 0.004741668701171875, 0.0019140243530273438, 0.01340484619140625, 0.0010833740234375, 0.032470703125, 0.00019872188568115234, 0.0039825439453125, 0.00951385498046875, 0.282470703125, 0.44482421875], "tokens": [264, 3088, 1204, 1383, 32, 1581, 32, 4075, 111, 34461, 32, 275, 319, 576, 98, 48, 275, 319, 5384, 319, 477, 753, 9322, 322, 1015, 416, 275, 319, 477, 601, 333, 687, 48, 578, 474, 9322, 377, 687, 48, 275, 569, 284, 562, 19915, 1015, 26, 12267, 9322, 27, 301, 291, 415]}
{"line_number": 45, "line_type": "original", "code": "    public static final Complex I = new Complex(0.0, 1.0);", "entropy": 1.099609375, "is_bug_line": false, "sus_score": 0.15602460503578186, "per_token_entropy": [4.109375, 8.59375, 4.38671875, 0.8505859375, 0.57373046875, 1.6708984375, 0.31689453125, 0.076171875, 0.0012798309326171875, 0.085693359375, 0.0308990478515625, 0.137451171875, 0.00013196468353271484, 0.0033512115478515625, 0.04248046875, 0.00021851062774658203, 0.001430511474609375, 8.821487426757812e-06, 0.007747650146484375], "tokens": [264, 562, 907, 1158, 19915, 439, 280, 537, 19915, 26, 34, 32, 34, 30, 225, 35, 32, 34, 293]}
{"line_number": 45, "line_type": "generated", "code": "\n        } else if (Math.abs(imaginary) < Math.abs(real)) {\n            double tmp = real / imaginary;\n            return imaginary / (tmp * tmp) * Math.abs(real);\n        } else { // Math", "entropy": 0.2471923828125, "is_bug_line": false, "sus_score": 0.15602460503578186, "per_token_entropy": [1.4248046875, 0.042266845703125, 0.18359375, 0.434814453125, 0.004268646240234375, 0.476318359375, 0.0005445480346679688, 0.0002899169921875, 2.682209014892578e-05, 0.252197265625, 4.2557716369628906e-05, 0.003803253173828125, 0.431396484375, 0.01296234130859375, 0.0001176595687866211, 5.638599395751953e-05, 0.0001825094223022461, 0.0013628005981445312, 0.0184173583984375, 0.0288238525390625, 1.0703125, 0.85693359375, 1.447265625, 0.021240234375, 0.1181640625, 0.0897216796875, 0.0023212432861328125, 3.7550926208496094e-05, 0.00986480712890625, 0.0750732421875, 0.006977081298828125, 0.477783203125, 2.0503997802734375e-05, 0.6328125, 0.32177734375, 0.023590087890625, 0.03662109375, 0.0003192424774169922, 0.81591796875, 0.4931640625, 0.1361083984375, 0.0101470947265625, 0.1231689453125, 9.143352508544922e-05, 0.0208587646484375, 0.0019178390502929688, 0.13623046875, 0.0004963874816894531, 0.2421875, 0.05877685546875, 0.8232421875, 1.478515625], "tokens": [291, 320, 813, 415, 308, 5717, 32, 3596, 26, 17792, 3172, 27, 333, 4175, 32, 3596, 26, 4543, 490, 301, 324, 2064, 3691, 280, 4011, 517, 17463, 3172, 45, 324, 442, 17463, 3172, 517, 308, 2868, 319, 3691, 27, 319, 4175, 32, 3596, 26, 4543, 293, 291, 320, 813, 301, 434, 4175]}
{"line_number": 48, "line_type": "original", "code": "    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);", "entropy": 1.287109375, "is_bug_line": false, "sus_score": 0.15602460503578186, "per_token_entropy": [4.265625, 8.4140625, 4.203125, 0.5732421875, 0.54248046875, 5.0078125, 0.0379638671875, 0.029388427734375, 0.0008816719055175781, 0.01202392578125, 0.0149383544921875, 0.0006804466247558594, 0.0019817352294921875, 0.007755279541015625, 0.05364990234375, 0.0011243820190429688, 0.0004782676696777344, 0.01241302490234375], "tokens": [264, 562, 907, 1158, 19915, 21644, 280, 537, 19915, 26, 4075, 32, 11126, 30, 6934, 32, 11126, 293]}
{"line_number": 48, "line_type": "generated", "code": "\n            return imaginary / real;\n        } else {\n            double q = real / imaginary;\n            return real * Math.abs(q);\n        }\n    }\n\n    /**\n     * Add {@code c} to this complex number.\n     * <p", "entropy": 0.188232421875, "is_bug_line": false, "sus_score": 0.15602460503578186, "per_token_entropy": [0.58544921875, 0.67919921875, 1.021484375, 5.9604644775390625e-06, 0.04156494140625, 0.0184478759765625, 0.051727294921875, 0.2176513671875, 0.0016183853149414062, 0.1597900390625, 0.10784912109375, 0.31005859375, 0.50048828125, 0.84130859375, 0.00249481201171875, 0.0022220611572265625, 0.0004138946533203125, 0.0004878044128417969, 7.426738739013672e-05, 0.004047393798828125, 0.064453125, 0.00203704833984375, 0.01502227783203125, 0.015167236328125, 0.01201629638671875, 0.035919189453125, 0.137451171875, 4.601478576660156e-05, 0.0001571178436279297, 0.1163330078125, 0.072998046875, 0.000732421875, 0.1820068359375, 0.0004661083221435547, 0.373779296875, 0.0082855224609375, 0.0230560302734375, 3.886222839355469e-05, 0.81396484375, 1.1162109375, 0.0053558349609375, 0.6474609375, 0.1402587890625, 0.000705718994140625, 0.0172271728515625, 0.216552734375, 0.0005879402160644531, 0.152099609375, 0.019012451171875, 7.414817810058594e-05, 1.0458984375, 0.005672454833984375], "tokens": [324, 442, 17463, 3172, 517, 4011, 45, 291, 320, 813, 301, 324, 2064, 2678, 280, 4011, 517, 17463, 3172, 45, 324, 442, 4011, 319, 4175, 32, 3596, 26, 99, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 2222, 3088, 687, 281, 111, 372, 458, 8640, 1451, 32, 275, 319, 333, 98]}
{"line_number": 51, "line_type": "original", "code": "    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "entropy": 1.29296875, "is_bug_line": false, "sus_score": 0.15602460503578186, "per_token_entropy": [4.109375, 8.1640625, 4.16015625, 0.53271484375, 0.75634765625, 7.98828125, 0.128173828125, 0.021759033203125, 0.00109100341796875, 0.023529052734375, 0.11944580078125, 0.004055023193359375, 0.01384735107421875, 0.0004570484161376953, 0.00012385845184326172, 0.010040283203125, 1.9873046875, 0.0024356842041015625, 0.398193359375, 0.00022280216217041016, 5.710124969482422e-05, 0.00902557373046875], "tokens": [264, 562, 907, 1158, 19915, 47257, 280, 537, 19915, 26, 4075, 32, 42270, 81, 36069, 30, 6934, 32, 42270, 81, 36069, 293]}
{"line_number": 51, "line_type": "generated", "code": "\n            return Math.abs(imaginary / real);\n        } else {\n            double q = real / imaginary;\n            return Math.abs(real * q);\n        }\n    }\n\n    /**\n     * Add {@code c} to this complex number.", "entropy": 0.216064453125, "is_bug_line": false, "sus_score": 0.15602460503578186, "per_token_entropy": [0.69873046875, 0.66796875, 0.4990234375, 0.0145263671875, 0.179443359375, 0.0003304481506347656, 0.1556396484375, 6.198883056640625e-06, 0.1336669921875, 0.0211639404296875, 0.2012939453125, 0.2193603515625, 0.0017538070678710938, 0.1602783203125, 0.18310546875, 0.390380859375, 0.469970703125, 0.70263671875, 0.0025081634521484375, 0.0196533203125, 0.0006275177001953125, 0.0078277587890625, 8.14199447631836e-05, 0.00363922119140625, 0.10308837890625, 0.004154205322265625, 0.0257415771484375, 0.0021152496337890625, 0.0005426406860351562, 0.001010894775390625, 0.060028076171875, 0.8994140625, 1.1162109375, 0.4873046875, 0.06292724609375, 0.0006656646728515625, 0.17578125, 0.0005350112915039062, 0.3505859375, 0.0077667236328125, 0.0231170654296875, 4.220008850097656e-05, 0.83447265625, 1.0908203125, 0.00472259521484375, 0.689453125, 0.135986328125, 0.0006308555603027344, 0.01450347900390625, 0.263671875, 0.00054168701171875, 0.14306640625], "tokens": [324, 442, 4175, 32, 3596, 26, 17792, 3172, 517, 4011, 293, 291, 320, 813, 301, 324, 2064, 2678, 280, 4011, 517, 17463, 3172, 45, 324, 442, 4175, 32, 3596, 26, 4543, 319, 2678, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 2222, 3088, 687, 281, 111, 372, 458, 8640, 1451, 32]}
