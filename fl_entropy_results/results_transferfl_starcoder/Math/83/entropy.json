{"line_number": 344, "line_type": "original", "code": "      for (int i = 0; i < coefficients.length; i++) {", "entropy": 0.93505859375, "is_bug_line": false, "sus_score": 0.6351512670516968, "per_token_entropy": [3.4765625, 4.69140625, 0.0135498046875, 0.0650634765625, 0.477783203125, 0.01174163818359375, 0.403076171875, 0.063232421875, 0.0262298583984375, 0.0026760101318359375, 0.028656005859375, 7.22265625, 0.07012939453125, 0.012603759765625, 0.09075927734375, 0.0968017578125, 0.0092620849609375, 0.06829833984375], "tokens": [647, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 26370, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 344, "line_type": "generated", "code": "\n    /**\n     * Creates a new {@link SimplexSolver} instance.\n     *\n     * @param objectiveFunction the objective function\n     * @param constraints the constraints\n     * @param initialSolution the initial solution\n     * @param optimalityTolerance optimality tolerance", "entropy": 0.568359375, "is_bug_line": false, "sus_score": 0.6351512670516968, "per_token_entropy": [1.8603515625, 0.44970703125, 0.05670166015625, 0.0002703666687011719, 3.98046875, 0.69580078125, 1.205078125, 2.251953125, 0.050384521484375, 1.0048828125, 2.6941299438476562e-05, 0.263671875, 0.359130859375, 1.0703125, 0.591796875, 0.216064453125, 0.533203125, 1.46484375, 0.0233306884765625, 0.026580810546875, 0.34814453125, 2.326171875, 0.54541015625, 0.76171875, 0.6044921875, 0.01393890380859375, 0.77880859375, 0.0955810546875, 0.003398895263671875, 0.049407958984375, 0.89892578125, 0.2049560546875, 0.19970703125, 0.0810546875, 0.11517333984375, 0.006183624267578125, 0.0970458984375, 1.6904296875, 0.2061767578125, 0.2244873046875, 0.0626220703125, 0.103759765625, 0.1724853515625, 0.1131591796875, 0.004688262939453125, 0.1331787109375, 2.501953125, 0.10296630859375, 0.68505859375, 0.25439453125, 5.817413330078125e-05, 0.06524658203125], "tokens": [284, 1022, 275, 319, 9301, 312, 537, 3088, 1204, 28421, 1909, 17766, 111, 1980, 32, 275, 319, 275, 319, 477, 753, 25110, 2447, 322, 25110, 667, 275, 319, 477, 753, 13383, 322, 13383, 275, 319, 477, 753, 2815, 13628, 322, 2815, 5295, 275, 319, 477, 753, 24824, 543, 26265, 24824, 543, 26434]}
{"line_number": 345, "line_type": "original", "code": "          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);", "entropy": 2.30078125, "is_bug_line": true, "sus_score": 0.6319454312324524, "per_token_entropy": [7.765625, 9.65625, 6.77734375, 0.29248046875, 0.10791015625, 0.2276611328125, 0.01152801513671875, 0.002246856689453125, 0.0185546875, 7.62890625, 0.6689453125, 0.0012102127075195312, 1.720703125, 0.283935546875, 1.59375, 0.063720703125], "tokens": [2033, 4401, 6550, 2352, 280, 622, 7099, 2352, 26, 15207, 33312, 10905, 346, 474, 595, 293]}
{"line_number": 345, "line_type": "generated", "code": "\n     * @return width of the tableau\n     */\n    protected int getWidth() {\n        return tableau.getColumnDimension() - 1;\n    }\n\n    /**\n     * Get the height of the tableau.", "entropy": 0.1512451171875, "is_bug_line": true, "sus_score": 0.6319454312324524, "per_token_entropy": [0.2437744140625, 0.0288848876953125, 0.62646484375, 0.0017337799072265625, 0.69921875, 0.2164306640625, 0.0293426513671875, 0.0167694091796875, 0.000629425048828125, 0.18115234375, 0.0252685546875, 0.0193634033203125, 0.441162109375, 0.022674560546875, 0.0024204254150390625, 0.012451171875, 0.0027790069580078125, 0.0026264190673828125, 0.2176513671875, 0.04498291015625, 0.87841796875, 3.0994415283203125e-06, 0.004878997802734375, 0.00771331787109375, 0.0006985664367675781, 0.67822265625, 0.6201171875, 0.91845703125, 0.0282440185546875, 0.10247802734375, 0.1395263671875, 0.0004944801330566406, 0.105224609375, 0.01068878173828125, 0.0177001953125, 2.1696090698242188e-05, 0.06640625, 0.007221221923828125, 0.1690673828125, 0.0055389404296875, 0.0028858184814453125, 0.0043182373046875, 0.00017261505126953125, 0.050689697265625], "tokens": [275, 319, 477, 601, 1861, 432, 322, 1858, 4452, 275, 569, 284, 2522, 629, 622, 2611, 346, 301, 291, 442, 1858, 4452, 32, 19239, 9883, 346, 429, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32]}
{"line_number": 349, "line_type": "original", "code": "              coefficients[i] = 0;", "entropy": 3.001953125, "is_bug_line": false, "sus_score": 0.5754181146621704, "per_token_entropy": [9.9453125, 11.6875, 0.26123046875, 0.05596923828125, 0.0087890625, 0.0219879150390625, 4.19921875, 0.274169921875, 0.55712890625], "tokens": [2850, 26370, 77, 91, 79, 280, 225, 34, 45]}
{"line_number": 349, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the entry in the", "entropy": 0.11260986328125, "is_bug_line": false, "sus_score": 0.5754181146621704, "per_token_entropy": [0.1597900390625, 0.057281494140625, 0.0950927734375, 0.007720947265625, 0.0055084228515625, 1.3232231140136719e-05, 0.055908203125, 0.006038665771484375, 0.154541015625, 0.004261016845703125, 0.0027103424072265625, 0.0030574798583984375, 0.00016438961029052734, 0.0293426513671875, 0.00257110595703125, 2.5391578674316406e-05, 0.0245361328125, 0.00018739700317382812, 0.07562255859375, 0.0031185150146484375, 0.0031757354736328125, 0.0022029876708984375, 0.00010251998901367188, 0.006763458251953125, 0.0008139610290527344, 0.00492095947265625, 0.012359619140625, 0.0268402099609375, 0.0004355907440185547, 0.00021219253540039062, 0.0001266002655029297, 0.00041484832763671875, 0.0003719329833984375, 0.0296173095703125, 0.0016717910766601562, 0.0029430389404296875, 2.384185791015625e-07, 4.124641418457031e-05, 9.274482727050781e-05, 1.0728836059570312e-06, 0.00890350341796875, 0.85009765625, 0.0014314651489257812, 0.128662109375, 0.02264404296875, 0.00859832763671875, 5.805492401123047e-05, 0.482666015625, 0.4794921875, 1.96484375, 0.8603515625, 0.267578125], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 3414, 328, 322]}
{"line_number": 297, "line_type": "original", "code": "                return null;", "entropy": 2.234375, "is_bug_line": false, "sus_score": 0.5556726455688477, "per_token_entropy": [4.8359375, 3.951171875, 0.13916015625, 0.00873565673828125], "tokens": [2071, 442, 744, 45]}
{"line_number": 297, "line_type": "generated", "code": "\n              } else {\n                  basicRows.add(basicRow);\n                  coefficients[i] = getEntry(basicRow, getRhsOffset()) - mostNegative;\n              }\n          }\n      }\n      return new RealPointValuePair(new ArrayRealVector(", "entropy": 0.214599609375, "is_bug_line": false, "sus_score": 0.5556726455688477, "per_token_entropy": [1.2705078125, 0.366455078125, 1.0556640625, 0.384521484375, 0.263671875, 0.81982421875, 0.00476837158203125, 0.0004527568817138672, 0.003021240234375, 0.00043845176696777344, 0.00270843505859375, 3.504753112792969e-05, 0.0009326934814453125, 0.2998046875, 0.6259765625, 0.0006861686706542969, 0.0268707275390625, 0.0013284683227539062, 0.0103912353515625, 0.9599609375, 0.1883544921875, 0.00878143310546875, 0.0199127197265625, 0.0019168853759765625, 0.004177093505859375, 0.08038330078125, 0.07763671875, 1.0728836059570312e-06, 8.320808410644531e-05, 0.728515625, 0.08837890625, 0.024871826171875, 6.902217864990234e-05, 0.004833221435546875, 0.0811767578125, 0.0004324913024902344, 0.147705078125, 0.002414703369140625, 0.478515625, 0.96533203125, 0.179443359375, 0.363525390625, 0.0241241455078125, 0.190673828125, 0.00012481212615966797, 2.872943878173828e-05, 0.004184722900390625, 1.361328125, 0.0224456787109375, 0.007965087890625, 0.0009984970092773438, 0.00048065185546875], "tokens": [1090, 320, 813, 301, 1750, 6550, 7252, 32, 669, 26, 6390, 2352, 293, 1750, 26370, 77, 91, 79, 280, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1157, 429, 4630, 17152, 45, 1090, 320, 616, 320, 397, 320, 397, 442, 537, 11443, 1943, 14782, 26, 890, 2629, 6877, 2863, 26]}
{"line_number": 132, "line_type": "original", "code": "        // initialize the objective function rows", "entropy": 2.462890625, "is_bug_line": false, "sus_score": 0.5438534617424011, "per_token_entropy": [6.46875, 1.6220703125, 2.375, 0.404052734375, 2.853515625, 0.467041015625, 3.05078125], "tokens": [351, 434, 7379, 322, 25110, 667, 5760]}
{"line_number": 132, "line_type": "generated", "code": "\n\n                // artificial variable coefficients\n                for (int i = 0; i < getNumArtificialVariables(); i++) {\n                    matrix[0][getArtificialVariableOffset() + i] = -1;\n                }\n                return matrix;\n            }\n\n           ", "entropy": 0.319091796875, "is_bug_line": false, "sus_score": 0.5438534617424011, "per_token_entropy": [2.048828125, 0.50390625, 2.298828125, 0.00930023193359375, 0.8115234375, 1.4072265625, 0.203369140625, 0.68212890625, 0.005855560302734375, 0.01678466796875, 0.2034912109375, 0.0033206939697265625, 0.06793212890625, 0.0284271240234375, 0.0160980224609375, 0.0031337738037109375, 0.004364013671875, 1.251953125, 0.96728515625, 0.001953125, 0.045135498046875, 0.01538848876953125, 0.046142578125, 0.003387451171875, 0.0035648345947265625, 0.0220184326171875, 0.2744140625, 0.0007624626159667969, 0.09686279296875, 0.000885009765625, 0.07525634765625, 0.00873565673828125, 0.0001100301742553711, 0.00435638427734375, 0.0007991790771484375, 0.0014657974243164062, 0.0068206787109375, 0.005218505859375, 0.0019197463989257812, 0.0127716064453125, 1.3232421875, 0.029022216796875, 0.0455322265625, 0.442138671875, 0.0009021759033203125, 2.1328125, 0.5244140625, 0.0146331787109375, 0.0016679763793945312, 0.591796875, 0.008270263671875, 0.31640625], "tokens": [2110, 434, 5549, 31251, 2677, 26370, 400, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 44929, 5271, 31251, 10165, 473, 595, 1987, 301, 528, 5045, 77, 34, 1674, 371, 5271, 31251, 3818, 3457, 346, 474, 595, 79, 280, 429, 35, 45, 400, 320, 400, 442, 5045, 45, 324, 320, 1064]}
{"line_number": 351, "line_type": "original", "code": "              basicRows.add(basicRow);", "entropy": 2.4765625, "is_bug_line": false, "sus_score": 0.5391925573348999, "per_token_entropy": [11.0703125, 11.0, 0.048919677734375, 0.01279449462890625, 0.026824951171875, 0.002483367919921875, 0.13427734375, 0.0003528594970703125, 0.007091522216796875], "tokens": [2850, 6550, 7252, 32, 669, 26, 6390, 2352, 293]}
{"line_number": 351, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get a specific entry of the table", "entropy": 0.1229248046875, "is_bug_line": false, "sus_score": 0.5391925573348999, "per_token_entropy": [0.55517578125, 0.1517333984375, 0.026123046875, 4.088878631591797e-05, 0.355224609375, 0.028289794921875, 0.377197265625, 0.00484466552734375, 0.0029888153076171875, 0.00518798828125, 0.0002391338348388672, 0.039093017578125, 0.00467681884765625, 0.00067138671875, 0.036651611328125, 0.0007314682006835938, 0.09527587890625, 0.0029315948486328125, 0.003204345703125, 0.0023899078369140625, 8.726119995117188e-05, 0.00670623779296875, 0.0013904571533203125, 0.01690673828125, 0.0341796875, 0.051666259765625, 0.0003223419189453125, 0.0002684593200683594, 0.0002651214599609375, 0.0005817413330078125, 0.0011005401611328125, 0.0279388427734375, 0.002223968505859375, 0.007663726806640625, 2.384185791015625e-07, 5.9604644775390625e-05, 8.26120376586914e-05, 9.5367431640625e-07, 0.0093994140625, 0.023101806640625, 0.00017178058624267578, 0.379150390625, 0.02593994140625, 0.007160186767578125, 0.00014030933380126953, 0.5556640625, 1.376953125, 1.1943359375, 0.2225341796875, 0.6748046875, 0.029449462890625, 0.04931640625], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 312, 2818, 3414, 432, 322, 1858]}
{"line_number": 310, "line_type": "original", "code": "        int width = getWidth() - numArtificialVariables - 1;", "entropy": 1.017578125, "is_bug_line": false, "sus_score": 0.5370509624481201, "per_token_entropy": [4.6171875, 3.16015625, 2.83203125, 0.050201416015625, 0.399658203125, 0.05499267578125, 0.408447265625, 0.050079345703125, 2.400390625, 0.01456451416015625, 0.00030803680419921875, 0.00298309326171875, 2.10546875, 0.1165771484375, 0.023590087890625, 0.05010986328125], "tokens": [351, 629, 1861, 280, 622, 2611, 346, 429, 1929, 5271, 31251, 10165, 429, 225, 35, 45]}
{"line_number": 310, "line_type": "generated", "code": "\n    /**\n     * Get the current solution.\n     * \n     * @return current solution\n     */\n    protected RealPointValuePair getSolutionForSolution() {\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = get", "entropy": 0.141845703125, "is_bug_line": false, "sus_score": 0.5370509624481201, "per_token_entropy": [0.67822265625, 0.3232421875, 0.06390380859375, 0.00010228157043457031, 1.5947265625, 0.12298583984375, 1.021484375, 0.27978515625, 0.314453125, 0.02935791015625, 0.002399444580078125, 0.292236328125, 0.00011551380157470703, 0.0048675537109375, 0.04986572265625, 0.02734375, 0.0024166107177734375, 0.007129669189453125, 0.0196075439453125, 0.0175323486328125, 0.11077880859375, 0.1397705078125, 0.004413604736328125, 0.0005183219909667969, 0.01641845703125, 0.0911865234375, 0.261474609375, 0.198486328125, 0.11492919921875, 0.0020198822021484375, 0.501953125, 0.0343017578125, 0.0013742446899414062, 0.0137481689453125, 0.0021152496337890625, 0.026214599609375, 0.0002703666687011719, 0.0003712177276611328, 0.3955078125, 0.0201873779296875, 0.003032684326171875, 0.0095367431640625, 2.1696090698242188e-05, 0.01776123046875, 0.0328369140625, 0.490966796875, 0.00852203369140625, 0.0026092529296875, 0.0028533935546875, 0.00014269351959228516, 0.00844573974609375, 0.008758544921875], "tokens": [284, 1022, 275, 319, 1390, 322, 1550, 5295, 32, 275, 319, 5384, 319, 477, 601, 1550, 5295, 275, 569, 284, 2522, 11443, 1943, 14782, 622, 13628, 1562, 13628, 346, 301, 397, 2064, 1178, 26370, 280, 537, 2064, 77, 371, 11296, 2567, 24453, 10165, 22086, 397, 4401, 11003, 1881, 7099, 2352, 280, 622]}
{"line_number": 319, "line_type": "original", "code": "        this.tableau = new Array2DRowRealMatrix(matrix);", "entropy": 1.4326171875, "is_bug_line": false, "sus_score": 0.5366582870483398, "per_token_entropy": [4.4296875, 4.4765625, 0.006977081298828125, 1.8544921875, 0.0234375, 3.69921875, 2.9296875, 3.521484375, 0.009063720703125, 0.0004527568817138672, 9.85860824584961e-05, 0.0012645721435546875, 0.00018322467803955078, 0.01506805419921875, 1.697265625, 0.261962890625], "tokens": [351, 458, 32, 1274, 4452, 280, 537, 2629, 36, 54, 2352, 6877, 4161, 26, 4873, 293]}
{"line_number": 319, "line_type": "generated", "code": "\n    private void rowOp(final int dividendRow, final double divisor) {\n        double multiple = -1 * divisor;\n        for (int i = 0; i < getWidth(); i++) {\n            double value = multiple * getEntry", "entropy": 0.336181640625, "is_bug_line": false, "sus_score": 0.5366582870483398, "per_token_entropy": [0.41259765625, 0.35693359375, 0.01910400390625, 1.37890625, 1.171875, 0.349609375, 0.26513671875, 0.0267181396484375, 0.08514404296875, 0.0007252693176269531, 0.0001938343048095703, 0.0025157928466796875, 0.0024776458740234375, 0.0897216796875, 0.09814453125, 0.0036487579345703125, 0.02239990234375, 0.0166778564453125, 0.1387939453125, 1.3095703125, 1.7783203125, 0.011260986328125, 0.81591796875, 0.68408203125, 1.0458984375, 0.0097808837890625, 0.763671875, 0.057830810546875, 0.55419921875, 0.00536346435546875, 0.0027713775634765625, 0.55126953125, 0.0034389495849609375, 0.2261962890625, 0.0182952880859375, 0.008758544921875, 0.0012149810791015625, 0.021942138671875, 0.37548828125, 0.1529541015625, 0.0938720703125, 0.0102386474609375, 0.004642486572265625, 0.00279998779296875, 0.06341552734375, 1.2216796875, 2.0546875, 0.0161285400390625, 1.16796875, 0.002872467041015625, 0.00635528564453125, 0.00197601318359375], "tokens": [284, 945, 763, 2698, 3397, 26, 3220, 629, 4451, 314, 416, 2352, 30, 1158, 2064, 33482, 27, 301, 291, 2064, 4609, 280, 429, 35, 319, 33482, 45, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 622, 2611, 473, 595, 1987, 301, 324, 2064, 786, 280, 4609, 319, 622, 2711]}
{"line_number": 149, "line_type": "original", "code": "                // initialize the constraint rows", "entropy": 3.611328125, "is_bug_line": false, "sus_score": 0.5347338318824768, "per_token_entropy": [6.3359375, 3.76171875, 4.45703125, 1.0390625, 2.84765625, 3.232421875], "tokens": [2071, 434, 7379, 322, 13118, 5760]}
{"line_number": 149, "line_type": "generated", "code": "\n        for (LinearConstraint constraint : constraints) {\n            double rhs = constraint.getValue();\n            if (rhs < 0) {\n                normalized.add(new LinearConstraint(constraint.getCoefficients(),\n                                                    -1 * rhs,\n                                                    constraint.get", "entropy": 0.25830078125, "is_bug_line": false, "sus_score": 0.5347338318824768, "per_token_entropy": [0.303955078125, 0.16552734375, 0.0059051513671875, 0.270751953125, 0.0003094673156738281, 0.212646484375, 0.0367431640625, 0.05780029296875, 0.0015878677368164062, 0.004337310791015625, 0.06805419921875, 1.384765625, 0.75927734375, 0.0457763671875, 0.144287109375, 7.200241088867188e-05, 0.0282135009765625, 0.01456451416015625, 0.09765625, 0.2003173828125, 0.07086181640625, 0.5771484375, 0.787109375, 0.08905029296875, 0.0010061264038085938, 0.08502197265625, 0.00368499755859375, 0.05157470703125, 1.4599609375, 0.0013074874877929688, 0.002071380615234375, 0.00455474853515625, 0.89599609375, 0.037322998046875, 0.005859375, 0.1915283203125, 0.32568359375, 0.1259765625, 0.0072784423828125, 0.04547119140625, 7.843971252441406e-05, 0.441162109375, 1.8994140625, 0.8359375, 0.51611328125, 0.1014404296875, 0.097900390625, 0.004150390625, 0.86181640625, 0.09283447265625, 0.0002865791320800781, 0.004241943359375], "tokens": [291, 436, 308, 9420, 9012, 13118, 499, 13383, 27, 301, 324, 2064, 9322, 280, 13118, 32, 6682, 473, 324, 415, 308, 14312, 333, 225, 34, 27, 301, 400, 17666, 32, 669, 26, 890, 13935, 9012, 26, 12704, 32, 371, 8973, 101, 1026, 5593, 429, 35, 319, 9322, 30, 5593, 13118, 32, 371]}
{"line_number": 352, "line_type": "original", "code": "              coefficients[i] =", "entropy": 4.05078125, "is_bug_line": false, "sus_score": 0.5345748662948608, "per_token_entropy": [10.0390625, 12.1015625, 1.248046875, 0.6259765625, 0.050872802734375, 0.2420654296875], "tokens": [2850, 26370, 77, 91, 79, 280]}
{"line_number": 352, "line_type": "generated", "code": "\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the entry in the tableau at the", "entropy": 0.1436767578125, "is_bug_line": false, "sus_score": 0.5345748662948608, "per_token_entropy": [0.47900390625, 0.032318115234375, 0.138671875, 0.0182647705078125, 0.27099609375, 0.005046844482421875, 0.0036373138427734375, 0.00653076171875, 0.0002884864807128906, 0.058380126953125, 0.06207275390625, 0.00251007080078125, 0.05621337890625, 0.002399444580078125, 0.08636474609375, 0.0031261444091796875, 0.0025043487548828125, 0.0027866363525390625, 0.00017583370208740234, 0.0308380126953125, 0.00408172607421875, 0.03497314453125, 0.0323486328125, 0.047393798828125, 0.0003037452697753906, 0.00041556358337402344, 0.000514984130859375, 0.0004978179931640625, 0.0006241798400878906, 0.0311126708984375, 0.0025463104248046875, 0.007541656494140625, 5.960464477539062e-07, 5.0902366638183594e-05, 9.202957153320312e-05, 8.344650268554688e-07, 0.011627197265625, 0.021087646484375, 0.00016164779663085938, 0.1650390625, 0.02685546875, 0.1331787109375, 8.392333984375e-05, 0.5390625, 0.5078125, 2.03515625, 0.93798828125, 0.2548828125, 0.69189453125, 0.0190277099609375, 0.3798828125, 0.322265625], "tokens": [275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 3414, 328, 322, 1858, 4452, 821, 322]}
{"line_number": 346, "line_type": "original", "code": "          if (basicRows.contains(basicRow)) {", "entropy": 1.9375, "is_bug_line": false, "sus_score": 0.5343154668807983, "per_token_entropy": [6.4375, 3.255859375, 0.21630859375, 4.9921875, 1.3388671875, 0.98828125, 2.1796875, 0.0244140625, 3.423828125, 0.0160369873046875, 0.1485595703125, 0.2232666015625], "tokens": [2033, 415, 308, 6390, 7252, 32, 4752, 26, 6390, 2352, 490, 301]}
{"line_number": 346, "line_type": "generated", "code": "\n     */\n    protected int getWidth() {\n        return tableau.getColumnDimension() - 1;\n    }\n\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau", "entropy": 0.1260986328125, "is_bug_line": false, "sus_score": 0.5343154668807983, "per_token_entropy": [1.3466796875, 0.1002197265625, 0.023590087890625, 0.4619140625, 0.026397705078125, 0.0020351409912109375, 0.00917816162109375, 0.004467010498046875, 0.003215789794921875, 0.215576171875, 0.04071044921875, 0.492919921875, 2.384185791015625e-06, 0.0041046142578125, 0.00798797607421875, 0.0007529258728027344, 0.63330078125, 0.5908203125, 0.61376953125, 0.023834228515625, 0.08343505859375, 0.27880859375, 0.0007677078247070312, 0.1209716796875, 0.0093841552734375, 0.01543426513671875, 3.2067298889160156e-05, 0.06640625, 0.007099151611328125, 0.1510009765625, 0.005252838134765625, 0.0027751922607421875, 0.0042724609375, 0.00017154216766357422, 0.042083740234375, 0.02496337890625, 1.609325408935547e-05, 0.03955078125, 0.00029158592224121094, 0.0863037109375, 0.00359344482421875, 0.002948760986328125, 0.0024738311767578125, 0.0001043081283569336], "tokens": [275, 569, 284, 2522, 629, 622, 2611, 346, 301, 291, 442, 1858, 4452, 32, 19239, 9883, 346, 429, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452]}
{"line_number": 885, "line_type": "original", "code": "", "entropy": 0.27294921875, "is_bug_line": false, "sus_score": 0.531222939491272, "per_token_entropy": [0.27294921875], "tokens": [203]}
{"line_number": 885, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.531222939491272, "per_token_entropy": [], "tokens": []}
{"line_number": 311, "line_type": "original", "code": "        int height = getHeight() - 1;", "entropy": 1.4541015625, "is_bug_line": false, "sus_score": 0.5299084782600403, "per_token_entropy": [3.162109375, 4.4765625, 4.81640625, 0.1004638671875, 0.84423828125, 0.09735107421875, 1.6064453125, 0.05059814453125, 0.6748046875, 0.0156402587890625, 0.151123046875], "tokens": [351, 629, 2384, 280, 622, 3024, 346, 429, 225, 35, 45]}
{"line_number": 311, "line_type": "generated", "code": "    * @return a new {@link SimplexTableau} instance\n     */\n    private SimplexTableau createNewTableau() {\n        return new SimplexTableau(tableau, f, epsilon, restrictToNonNegative);\n    }\n\n    /**", "entropy": 0.59033203125, "is_bug_line": false, "sus_score": 0.5299084782600403, "per_token_entropy": [1.775390625, 1.5, 1.5283203125, 0.7841796875, 2.37890625, 2.75, 1.236328125, 0.09942626953125, 0.67041015625, 2.586841583251953e-05, 0.67822265625, 0.00688934326171875, 0.2489013671875, 1.216796875, 1.916015625, 0.08953857421875, 0.045989990234375, 1.6376953125, 0.046875, 3.5762786865234375e-07, 0.0020847320556640625, 0.0017614364624023438, 1.35546875, 0.90087890625, 0.254638671875, 0.0008063316345214844, 0.23046875, 0.005573272705078125, 0.1541748046875, 0.56982421875, 0.0753173828125, 0.047607421875, 1.1920928955078125e-07, 4.792213439941406e-05, 1.5616416931152344e-05, 0.07427978515625, 1.466796875, 0.00011301040649414062, 0.8408203125, 1.8525390625, 0.262939453125, 1.5458984375, 0.177978515625, 1.119140625, 0.0005688667297363281, 0.0001773834228515625, 3.170967102050781e-05, 0.393310546875, 0.05078125, 0.0015354156494140625, 0.51806640625, 0.1778564453125], "tokens": [264, 319, 477, 601, 312, 537, 3088, 1204, 28421, 1909, 1599, 4452, 111, 1980, 275, 569, 284, 945, 28421, 1909, 1599, 4452, 1487, 1812, 1599, 4452, 346, 301, 291, 442, 537, 28421, 1909, 1599, 4452, 26, 1274, 4452, 30, 296, 30, 23477, 30, 21432, 705, 3910, 17152, 293, 284, 320, 446, 1022]}
{"line_number": 886, "line_type": "original", "code": "", "entropy": 0.27294921875, "is_bug_line": false, "sus_score": 0.5291856527328491, "per_token_entropy": [0.27294921875], "tokens": [203]}
{"line_number": 886, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5291856527328491, "per_token_entropy": [], "tokens": []}
{"line_number": 317, "line_type": "original", "code": "            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());", "entropy": 1.3125, "is_bug_line": false, "sus_score": 0.5291764736175537, "per_token_entropy": [5.28125, 6.9453125, 1.619140625, 2.353515625, 0.411376953125, 5.73046875, 0.58837890625, 0.12109375, 0.0235595703125, 0.1197509765625, 1.1162109375, 2.150390625, 0.020263671875, 0.0034656524658203125, 0.2227783203125, 1.0419921875, 0.07855224609375, 0.0016336441040039062, 0.0016651153564453125, 2.42578125, 0.8525390625, 9.930133819580078e-05, 0.006290435791015625, 0.385498046875], "tokens": [1468, 5045, 77, 91, 1674, 1644, 429, 225, 35, 79, 280, 622, 2711, 26, 91, 474, 225, 35, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 317, "line_type": "generated", "code": "\n     * @param divisorRow index of the row\n     * @param multiple the multiple\n     */\n    protected void subtractRowMultipleTimesRow(final int dividendRow,\n                                             final int divisorRow,\n                                             final double multiple) {\n        double[] divid", "entropy": 0.29345703125, "is_bug_line": false, "sus_score": 0.5291764736175537, "per_token_entropy": [0.72412109375, 0.0775146484375, 0.0193023681640625, 0.0006456375122070312, 0.444091796875, 0.07275390625, 0.036651611328125, 0.0016422271728515625, 0.0132293701171875, 0.1480712890625, 0.97705078125, 0.02935791015625, 0.0017566680908203125, 0.0023555755615234375, 0.090087890625, 0.88427734375, 0.25390625, 0.609375, 0.153564453125, 0.031402587890625, 1.310546875, 0.01204681396484375, 0.55810546875, 0.79052734375, 1.09765625, 1.2939453125, 0.0780029296875, 0.0200958251953125, 0.2159423828125, 0.007625579833984375, 0.06207275390625, 0.00012791156768798828, 8.678436279296875e-05, 0.0006017684936523438, 0.001468658447265625, 1.9521484375, 0.00949859619140625, 0.0022487640380859375, 0.004756927490234375, 0.00011992454528808594, 0.0003311634063720703, 0.3232421875, 0.0114288330078125, 0.0120849609375, 0.001148223876953125, 0.00647735595703125, 0.0103607177734375, 0.199951171875, 1.3173828125, 0.2822265625, 1.0859375, 0.0189056396484375], "tokens": [275, 319, 477, 753, 33482, 2352, 1650, 432, 322, 2698, 275, 319, 477, 753, 4609, 322, 4609, 275, 569, 284, 2522, 763, 27799, 2352, 11726, 9695, 2352, 26, 3220, 629, 4451, 314, 416, 2352, 30, 13687, 1158, 629, 33482, 2352, 30, 13687, 1158, 2064, 4609, 27, 301, 291, 2064, 1178, 4451, 314]}
{"line_number": 357, "line_type": "original", "code": "        return new RealPointValuePair(coefficients, f.getValue(coefficients));", "entropy": 2.041015625, "is_bug_line": false, "sus_score": 0.5248475074768066, "per_token_entropy": [5.91796875, 2.060546875, 6.671875, 4.68359375, 0.341552734375, 0.0289459228515625, 0.09222412109375, 2.904296875, 0.004306793212890625, 0.0880126953125, 4.77734375, 3.603515625, 1.6103515625, 1.7119140625, 0.089599609375, 0.00033164024353027344, 0.09417724609375], "tokens": [351, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 296, 32, 6682, 26, 34036, 101, 876]}
{"line_number": 357, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the number of artificial variables.\n     * @return the number of artificial variables\n     */\n    protected final int getNumArtificialVariables() {\n        return numArtificialVariables;\n    }\n\n    /**\n     * Get the number", "entropy": 0.1881103515625, "is_bug_line": false, "sus_score": 0.5248475074768066, "per_token_entropy": [0.1849365234375, 0.03619384765625, 0.16748046875, 0.0240936279296875, 0.01114654541015625, 1.3709068298339844e-05, 0.5546875, 0.478271484375, 1.7568359375, 0.004230499267578125, 2.443359375, 0.00235748291015625, 0.0135345458984375, 0.42529296875, 0.0097808837890625, 0.0005850791931152344, 0.2003173828125, 0.0005598068237304688, 1.4208984375, 0.0124359130859375, 0.002044677734375, 0.006328582763671875, 0.0021514892578125, 0.005184173583984375, 0.0521240234375, 0.011627197265625, 0.00594329833984375, 0.1544189453125, 0.2305908203125, 0.001667022705078125, 0.064697265625, 0.00220489501953125, 0.00039315223693847656, 0.0085296630859375, 0.001617431640625, 0.0007953643798828125, 0.07366943359375, 0.00537109375, 0.017730712890625, 8.106231689453125e-05, 2.872943878173828e-05, 3.6954879760742188e-06, 0.004680633544921875, 0.1929931640625, 0.00033020973205566406, 0.0882568359375, 0.01021575927734375, 0.00860595703125, 4.1604042053222656e-05, 0.272216796875, 0.174560546875, 0.6357421875], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 5549, 31251, 4886, 32, 275, 319, 477, 601, 322, 1451, 432, 5549, 31251, 4886, 275, 569, 284, 2522, 1158, 629, 44929, 5271, 31251, 10165, 346, 301, 291, 442, 1929, 5271, 31251, 10165, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451]}
{"line_number": 146, "line_type": "original", "code": "                        getInvertedCoeffiecientSum(objectiveCoefficients);", "entropy": 2.1640625, "is_bug_line": false, "sus_score": 0.52455073595047, "per_token_entropy": [9.1484375, 5.625, 2.91796875, 0.0108489990234375, 0.393310546875, 0.0013971328735351562, 0.0034503936767578125, 0.0051727294921875, 0.5341796875, 7.8515625, 0.5751953125, 0.01157379150390625, 1.056640625], "tokens": [6797, 622, 383, 17445, 34345, 32372, 1606, 4934, 26, 29904, 8973, 101, 293]}
{"line_number": 146, "line_type": "generated", "code": "\n     */\n    protected List<LinearConstraint> getNormalizedConstraints() {\n        List<LinearConstraint> normalizedConstraints = new ArrayList<LinearConstraint>();\n        for (LinearConstraint constraint : constraints) {\n            if (constraint.getValue() > 0) {\n               ", "entropy": 0.158447265625, "is_bug_line": false, "sus_score": 0.52455073595047, "per_token_entropy": [0.62841796875, 0.051361083984375, 0.01419830322265625, 0.66552734375, 0.0166778564453125, 0.000881195068359375, 0.001148223876953125, 0.0005822181701660156, 0.00016772747039794922, 0.0030498504638671875, 0.004161834716796875, 0.00027680397033691406, 0.0019216537475585938, 0.001758575439453125, 0.253173828125, 0.287841796875, 0.0009670257568359375, 0.0011739730834960938, 0.0002987384796142578, 4.398822784423828e-05, 0.94189453125, 0.276123046875, 0.01096343994140625, 0.2498779296875, 0.016448974609375, 0.1678466796875, 0.0019216537475585938, 0.0004551410675048828, 0.33935546875, 0.14208984375, 0.08331298828125, 0.004901885986328125, 0.206298828125, 0.00028014183044433594, 0.21826171875, 0.0194549560546875, 0.05059814453125, 0.001373291015625, 0.0029468536376953125, 0.054412841796875, 0.9296875, 0.0858154296875, 0.60302734375, 0.00356292724609375, 0.39892578125, 0.001628875732421875, 1.1982421875, 0.177734375, 0.0006427764892578125, 0.0794677734375, 0.0027675628662109375, 0.040191650390625], "tokens": [275, 569, 284, 2522, 1682, 46, 9420, 9012, 48, 622, 29814, 9183, 346, 301, 291, 1682, 46, 9420, 9012, 48, 17666, 9183, 280, 537, 5059, 46, 9420, 9012, 2923, 291, 436, 308, 9420, 9012, 13118, 499, 13383, 27, 301, 324, 415, 308, 12704, 32, 6682, 346, 848, 225, 34, 27, 301, 400]}
{"line_number": 188, "line_type": "original", "code": "     */", "entropy": 6.53125, "is_bug_line": false, "sus_score": 0.524030327796936, "per_token_entropy": [5.203125, 7.85546875], "tokens": [262, 569]}
{"line_number": 188, "line_type": "generated", "code": "        }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of slack variables.\n     * @return number of slack variables\n     */\n    private int getNumSlackVariables() {\n        return getConstraintTypeCounts(Relationship.LEQ) +", "entropy": 0.17724609375, "is_bug_line": false, "sus_score": 0.524030327796936, "per_token_entropy": [1.3828125, 0.08331298828125, 0.154052734375, 0.75732421875, 0.0511474609375, 0.003795623779296875, 0.0014467239379882812, 0.0012311935424804688, 0.06866455078125, 0.0004489421844482422, 0.129150390625, 0.03369140625, 0.153076171875, 0.0005192756652832031, 0.1805419921875, 0.457275390625, 0.98095703125, 0.0028781890869140625, 0.650390625, 0.06610107421875, 1.1220703125, 0.07904052734375, 0.00432586669921875, 0.027679443359375, 0.006763458251953125, 0.2061767578125, 0.0022258758544921875, 0.019073486328125, 0.00792694091796875, 0.209716796875, 0.006893157958984375, 0.0088348388671875, 1.0966796875, 0.031494140625, 0.37060546875, 0.09454345703125, 0.00628662109375, 0.0124359130859375, 0.001049041748046875, 0.043487548828125, 0.12841796875, 0.285400390625, 0.0093841552734375, 6.008148193359375e-05, 5.91278076171875e-05, 0.00016987323760986328, 0.0106658935546875, 6.508827209472656e-05, 0.133056640625, 1.5020370483398438e-05, 0.01039886474609375, 0.1212158203125], "tokens": [351, 320, 291, 320, 291, 442, 2385, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 1451, 432, 28039, 4886, 32, 275, 319, 477, 601, 1451, 432, 28039, 4886, 275, 569, 284, 945, 629, 44929, 31185, 10165, 346, 301, 291, 442, 622, 9012, 620, 18330, 26, 13175, 32, 815, 67, 27, 474]}
{"line_number": 92, "line_type": "original", "code": "    /**", "entropy": 4.3984375, "is_bug_line": false, "sus_score": 0.5221499800682068, "per_token_entropy": [3.296875, 5.50390625], "tokens": [264, 1022]}
{"line_number": 92, "line_type": "generated", "code": "0.0;\n\n        // initialize the constraint rows\n        for (int i = 0; i < constraints.size(); ++i) {\n            LinearConstraint constraint = constraints.get(i);\n            RealVector coefficients = constraint.getCoefficients();\n           ", "entropy": 0.26708984375, "is_bug_line": false, "sus_score": 0.5221499800682068, "per_token_entropy": [3.38671875, 1.7138671875, 0.0270843505859375, 0.55517578125, 0.6708984375, 0.03533935546875, 0.32763671875, 0.18115234375, 0.422119140625, 0.1671142578125, 0.0736083984375, 1.0478515625, 0.0019445419311523438, 0.017059326171875, 0.202392578125, 0.0009059906005859375, 0.0186767578125, 0.0035877227783203125, 0.0306549072265625, 0.00113677978515625, 0.007213592529296875, 0.10406494140625, 0.00011897087097167969, 3.3020973205566406e-05, 0.001499176025390625, 1.291015625, 0.0011568069458007812, 0.001895904541015625, 0.002140045166015625, 0.11602783203125, 0.84326171875, 0.0097503662109375, 0.1510009765625, 0.018402099609375, 0.0175933837890625, 0.00018143653869628906, 7.450580596923828e-05, 8.237361907958984e-05, 0.00015652179718017578, 0.0004525184631347656, 0.08984375, 1.4521484375, 0.07086181640625, 0.47509765625, 0.0355224609375, 0.14892578125, 0.00018858909606933594, 0.038848876953125, 0.002811431884765625, 0.00018656253814697266, 0.05999755859375, 0.0556640625], "tokens": [34, 32, 34, 45, 584, 434, 7379, 322, 13118, 5760, 291, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 13383, 32, 891, 473, 3311, 91, 27, 301, 324, 13935, 9012, 13118, 280, 13383, 32, 371, 26, 91, 293, 324, 11443, 2863, 26370, 280, 13118, 32, 371, 8973, 101, 473, 324]}
{"line_number": 189, "line_type": "original", "code": "    public int getNumVariables() {", "entropy": 1.7392578125, "is_bug_line": false, "sus_score": 0.5185550451278687, "per_token_entropy": [4.21875, 5.01171875, 0.65087890625, 0.50390625, 1.66015625, 0.045196533203125, 0.0850830078125], "tokens": [264, 562, 629, 44929, 10165, 346, 301]}
{"line_number": 189, "line_type": "generated", "code": "\n        }\n        return count;\n    }\n\n    /**\n     * Get the offset of the slack variables in the objective function.\n     * @return offset of the slack variables\n     */\n    protected final int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() -", "entropy": 0.34814453125, "is_bug_line": false, "sus_score": 0.5185550451278687, "per_token_entropy": [0.58349609375, 0.7646484375, 0.131103515625, 0.0156097412109375, 0.0533447265625, 0.0204620361328125, 0.04742431640625, 0.00047659873962402344, 0.217041015625, 0.042236328125, 0.1322021484375, 0.00037169456481933594, 0.20947265625, 0.467041015625, 1.6201171875, 1.1044921875, 0.1337890625, 0.52587890625, 0.374267578125, 0.849609375, 0.18408203125, 3.23046875, 0.2235107421875, 1.2373046875, 0.053436279296875, 0.00470733642578125, 0.09625244140625, 0.00513458251953125, 0.7607421875, 0.34814453125, 0.404052734375, 0.031982421875, 0.036651611328125, 0.6884765625, 0.00586700439453125, 0.0413818359375, 0.84033203125, 0.54638671875, 0.0014085769653320312, 0.002197265625, 0.002246856689453125, 0.0015010833740234375, 0.00046944618225097656, 0.0008978843688964844, 0.0012063980102539062, 0.13232421875, 0.1036376953125, 0.73681640625, 0.052398681640625, 0.0009369850158691406, 0.391357421875, 0.6484375], "tokens": [291, 320, 291, 442, 2385, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 3401, 432, 322, 28039, 4886, 328, 322, 25110, 667, 32, 275, 319, 477, 601, 3401, 432, 322, 28039, 4886, 275, 569, 284, 2522, 1158, 629, 622, 31185, 3818, 3457, 346, 301, 291, 442, 44929, 33312, 10905, 346, 429]}
{"line_number": 313, "line_type": "original", "code": "        for (int i = 0; i < height; i++) {", "entropy": 0.859375, "is_bug_line": false, "sus_score": 0.5171235799789429, "per_token_entropy": [3.68359375, 3.943359375, 0.094482421875, 0.0379638671875, 1.0361328125, 0.0094146728515625, 0.27734375, 0.01435089111328125, 0.00743865966796875, 0.0014123916625976562, 0.038421630859375, 4.3515625, 0.032684326171875, 0.053558349609375, 0.007366180419921875, 0.1630859375], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 2384, 45, 595, 1987, 301]}
{"line_number": 313, "line_type": "generated", "code": "\n     * @param row1 the row to subtract from\n     * @param row2 the row to subtract\n     * @param multiple the multiple\n     */\n    private void subtractRowMultipleFromRow(final int row1, final int row2,\n                                           final double", "entropy": 0.270263671875, "is_bug_line": false, "sus_score": 0.5171235799789429, "per_token_entropy": [0.413330078125, 0.048858642578125, 0.55712890625, 0.002071380615234375, 1.3837890625, 1.2314453125, 0.55615234375, 0.94140625, 0.1571044921875, 0.1988525390625, 0.048309326171875, 0.16845703125, 0.00018405914306640625, 0.0001933574676513672, 0.00014793872833251953, 0.08306884765625, 0.0012426376342773438, 0.014556884765625, 0.003894805908203125, 0.01352691650390625, 0.1700439453125, 0.027008056640625, 0.020660400390625, 0.004833221435546875, 0.00589752197265625, 1.5546875, 0.08868408203125, 0.0675048828125, 0.9033203125, 0.2386474609375, 0.0153656005859375, 0.3125, 0.006343841552734375, 0.19970703125, 0.90478515625, 1.1875, 1.228515625, 0.06787109375, 0.001560211181640625, 0.0848388671875, 0.086181640625, 0.00754547119140625, 0.0011911392211914062, 0.00023686885833740234, 0.2464599609375, 0.0031223297119140625, 0.0001399517059326172, 2.586841583251953e-05, 0.00018668174743652344, 0.77685546875, 0.00830841064453125, 0.0126800537109375], "tokens": [275, 319, 477, 753, 2698, 35, 322, 2698, 372, 27799, 645, 275, 319, 477, 753, 2698, 36, 322, 2698, 372, 27799, 275, 319, 477, 753, 4609, 322, 4609, 275, 569, 284, 945, 763, 27799, 2352, 11726, 1792, 2352, 26, 3220, 629, 2698, 35, 30, 1158, 629, 2698, 36, 30, 12928, 1158, 2064]}
