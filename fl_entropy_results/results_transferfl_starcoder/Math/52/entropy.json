{"line_number": 343, "line_type": "original", "code": "  double c       = k.dotProduct(u3);", "entropy": 2.56640625, "is_bug_line": false, "sus_score": 0.7511975765228271, "per_token_entropy": [3.5546875, 10.8515625, 3.072265625, 6.43359375, 0.22412109375, 5.69140625, 0.1715087890625, 1.0126953125, 0.00023663043975830078, 0.003665924072265625, 0.12646484375, 2.12890625, 0.10382080078125], "tokens": [225, 2064, 281, 958, 280, 831, 32, 4260, 3409, 26, 103, 37, 293]}
{"line_number": 343, "line_type": "generated", "code": "\n   * <p>Except for possible scale factors, if the instance were applied to\n   * u it will produce v.</p>\n\n   * <p>The axis of the rotation is the one that is orthogonal to the two\n   * vectors and their", "entropy": 0.31982421875, "is_bug_line": false, "sus_score": 0.7511975765228271, "per_token_entropy": [0.83203125, 0.0250091552734375, 0.382080078125, 0.005115509033203125, 0.0027370452880859375, 0.74658203125, 0.003910064697265625, 0.022613525390625, 0.003940582275390625, 0.0186614990234375, 0.0085601806640625, 0.004669189453125, 0.01690673828125, 0.034515380859375, 0.0172271728515625, 0.006023406982421875, 0.00479888916015625, 0.022735595703125, 0.00015211105346679688, 1.755859375, 0.630859375, 0.0109405517578125, 0.01873779296875, 0.04693603515625, 0.1600341796875, 0.00041985511779785156, 0.0017948150634765625, 0.4755859375, 0.0026645660400390625, 0.52001953125, 0.002044677734375, 0.002056121826171875, 1.37109375, 1.0283203125, 0.1773681640625, 0.09564208984375, 0.019775390625, 0.55029296875, 0.56005859375, 1.626953125, 0.478515625, 0.1380615234375, 1.1904296875, 0.0005755424499511719, 0.00951385498046875, 0.8837890625, 0.0633544921875, 0.037139892578125, 0.00015795230865478516, 0.0380859375, 0.97216796875, 1.599609375], "tokens": [664, 319, 333, 98, 48, 32925, 436, 4195, 5247, 23851, 30, 415, 322, 1980, 4528, 9547, 372, 664, 319, 1044, 561, 1098, 13882, 354, 1730, 98, 48, 3017, 319, 333, 98, 48, 1318, 6013, 432, 322, 11410, 438, 322, 1591, 688, 438, 556, 44802, 372, 322, 3134, 664, 319, 16540, 461, 3623]}
{"line_number": 344, "line_type": "original", "code": "  if (c == 0) {", "entropy": 1.6748046875, "is_bug_line": true, "sus_score": 0.7304292321205139, "per_token_entropy": [2.552734375, 4.78125, 2.43359375, 4.65625, 0.2763671875, 0.032806396484375, 0.0215911865234375, 0.079833984375, 0.236572265625], "tokens": [225, 415, 308, 85, 610, 225, 34, 27, 301]}
{"line_number": 344, "line_type": "generated", "code": "\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the vector u it will produce the vector v.</p>\n\n   * <p>If the angular separation between u and v is not 0, then a corrected", "entropy": 0.165771484375, "is_bug_line": true, "sus_score": 0.7304292321205139, "per_token_entropy": [1.4453125, 0.0413818359375, 0.80419921875, 0.007099151611328125, 0.004047393798828125, 0.7685546875, 0.003963470458984375, 0.0172119140625, 0.003978729248046875, 0.01605224609375, 0.007289886474609375, 0.00461578369140625, 0.012237548828125, 0.0297698974609375, 0.0147705078125, 0.00620269775390625, 0.004116058349609375, 0.031280517578125, 0.00011789798736572266, 0.41943359375, 0.2076416015625, 0.06378173828125, 0.2098388671875, 0.0101318359375, 0.01406097412109375, 0.027862548828125, 0.005008697509765625, 0.00713348388671875, 0.11444091796875, 0.0005578994750976562, 0.002117156982421875, 0.293701171875, 0.002010345458984375, 0.4658203125, 0.0018405914306640625, 0.0016021728515625, 0.478515625, 0.11151123046875, 0.58984375, 0.0021305084228515625, 0.0015802383422851562, 0.0099334716796875, 0.0271453857421875, 0.0167694091796875, 0.004261016845703125, 0.09124755859375, 0.59326171875, 0.3154296875, 0.373779296875, 0.34619140625, 0.37939453125, 0.2066650390625], "tokens": [664, 319, 333, 98, 48, 32925, 436, 4195, 5247, 23851, 30, 415, 322, 1980, 4528, 9547, 372, 664, 319, 322, 4026, 1044, 561, 1098, 13882, 322, 4026, 354, 1730, 98, 48, 3017, 319, 333, 98, 48, 2797, 322, 14760, 43751, 3733, 1044, 461, 354, 438, 646, 225, 34, 30, 1615, 312, 35477]}
{"line_number": 316, "line_type": "original", "code": "  double u1u1 = u1.getNormSq();", "entropy": 1.1015625, "is_bug_line": false, "sus_score": 0.6540358662605286, "per_token_entropy": [4.2421875, 5.8984375, 2.494140625, 0.29833984375, 0.4345703125, 0.2042236328125, 0.53662109375, 0.08935546875, 0.01514434814453125, 0.0129852294921875, 0.2578125, 0.0018968582153320312, 0.9287109375, 0.004680633544921875], "tokens": [225, 2064, 1044, 35, 103, 35, 280, 1044, 35, 32, 371, 14373, 17509, 473]}
{"line_number": 316, "line_type": "generated", "code": "\n        return;\n      }\n\n      // we use (u2, u3) as the reference vector for the rotation\n      uRef  = u2;\n      vRef  = v2;\n      v1Su1 = v2.subtract(u1", "entropy": 0.335693359375, "is_bug_line": false, "sus_score": 0.6540358662605286, "per_token_entropy": [0.98046875, 0.1444091796875, 0.0136260986328125, 0.07122802734375, 0.0006957054138183594, 0.85791015625, 0.2705078125, 1.2099609375, 1.2119140625, 0.5634765625, 0.12109375, 0.042449951171875, 0.01027679443359375, 0.01273345947265625, 0.0019369125366210938, 0.043121337890625, 1.2548828125, 1.07421875, 0.80615234375, 1.271484375, 1.892578125, 0.60498046875, 1.748046875, 0.114013671875, 0.465576171875, 0.035919189453125, 0.378173828125, 7.748603820800781e-06, 0.021942138671875, 0.01125335693359375, 0.004222869873046875, 0.0016574859619140625, 0.00543212890625, 0.005558013916015625, 0.0022830963134765625, 5.960464477539062e-07, 0.3134765625, 0.08404541015625, 0.0075836181640625, 0.0306243896484375, 0.044891357421875, 0.1195068359375, 0.007602691650390625, 0.001583099365234375, 0.0003218650817871094, 0.014495849609375, 0.045745849609375, 0.548828125, 0.00691986083984375, 0.00015366077423095703, 0.0006537437438964844, 0.97607421875], "tokens": [291, 442, 45, 397, 320, 1687, 434, 996, 793, 308, 103, 36, 30, 1044, 37, 27, 619, 322, 4121, 4026, 436, 322, 11410, 397, 1044, 2084, 225, 280, 1044, 36, 45, 397, 354, 2084, 225, 280, 354, 36, 45, 397, 354, 35, 21462, 35, 280, 354, 36, 32, 25330, 26, 103, 35]}
{"line_number": 340, "line_type": "original", "code": "  Vector3D v2Su2 = v2.subtract(u2);", "entropy": 0.7275390625, "is_bug_line": false, "sus_score": 0.653804361820221, "per_token_entropy": [3.169921875, 4.80859375, 0.0024700164794921875, 0.00022327899932861328, 1.3857421875, 1.658203125, 0.5390625, 0.681640625, 0.06640625, 0.025665283203125, 0.005657196044921875, 0.004848480224609375, 0.001766204833984375, 0.00012624263763427734, 0.0033512115478515625, 0.00384521484375, 0.00983428955078125], "tokens": [225, 4107, 37, 54, 354, 36, 21462, 36, 280, 354, 36, 32, 25330, 26, 103, 36, 293]}
{"line_number": 340, "line_type": "generated", "code": "\n  // compute the vectorial part\n  k = new Vector3D(u1.getY() * q3 - u1.getZ() * q2,\n                   u1.getZ() * q1 - u1.getX() * q3,", "entropy": 0.2017822265625, "is_bug_line": false, "sus_score": 0.653804361820221, "per_token_entropy": [0.486572265625, 0.6201171875, 1.5400390625, 0.360107421875, 1.91015625, 0.28955078125, 0.0048980712890625, 0.346435546875, 1.560546875, 0.092041015625, 0.62548828125, 0.0006103515625, 9.453296661376953e-05, 5.817413330078125e-05, 0.02471923828125, 0.53662109375, 1.0390625, 0.217529296875, 0.24658203125, 0.002185821533203125, 0.0203704833984375, 0.3515625, 0.096435546875, 0.01396942138671875, 0.0033702850341796875, 0.01367950439453125, 0.0002646446228027344, 0.000225067138671875, 0.0006613731384277344, 0.0004630088806152344, 0.0002903938293457031, 0.00031280517578125, 0.0013837814331054688, 0.08282470703125, 0.0007243156433105469, 0.0009732246398925781, 0.0004982948303222656, 0.0006933212280273438, 0.00011074542999267578, 3.8504600524902344e-05, 8.845329284667969e-05, 0.0001819133758544922, 0.00015676021575927734, 0.0002970695495605469, 0.0003790855407714844, 1.895427703857422e-05, 6.794929504394531e-05, 0.0001074075698852539, 4.410743713378906e-06, 0.00015842914581298828, 2.7298927307128906e-05, 0.00016701221466064453], "tokens": [334, 434, 7596, 322, 4026, 564, 1742, 334, 831, 280, 537, 4107, 37, 54, 26, 103, 35, 32, 20431, 346, 319, 2678, 37, 429, 1044, 35, 32, 40542, 346, 319, 2678, 36, 30, 4511, 1044, 35, 32, 40542, 346, 319, 2678, 35, 429, 1044, 35, 32, 18817, 346, 319, 2678, 37, 30]}
{"line_number": 319, "line_type": "original", "code": "  double v2v2 = v2.getNormSq();", "entropy": 1.1533203125, "is_bug_line": false, "sus_score": 0.6536637544631958, "per_token_entropy": [3.80078125, 4.15234375, 4.22265625, 0.51123046875, 0.75927734375, 2.08203125, 0.359619140625, 0.0859375, 0.006103515625, 0.00859832763671875, 0.126953125, 0.004619598388671875, 0.023284912109375, 0.004581451416015625], "tokens": [225, 2064, 354, 36, 104, 36, 280, 354, 36, 32, 371, 14373, 17509, 473]}
{"line_number": 319, "line_type": "generated", "code": "\n      // the (q1, q2, q3) vector is almost aligned with (u2, u3)\n      // we try (u1, u2) and (v1, v2)\n      k = v1Su1.", "entropy": 0.2452392578125, "is_bug_line": false, "sus_score": 0.6536637544631958, "per_token_entropy": [0.51953125, 0.74267578125, 1.013671875, 0.239990234375, 0.045654296875, 0.059112548828125, 0.0012025833129882812, 0.0032711029052734375, 0.0088043212890625, 0.00555419921875, 0.0032329559326171875, 0.001140594482421875, 0.0004470348358154297, 0.00635528564453125, 0.139404296875, 1.234375, 0.09930419921875, 0.01568603515625, 0.57861328125, 0.08428955078125, 0.1329345703125, 0.0045166015625, 0.00988006591796875, 0.00342559814453125, 0.28564453125, 0.09051513671875, 0.73974609375, 0.54248046875, 1.203125, 0.72802734375, 0.300048828125, 0.78173828125, 0.005725860595703125, 0.0203399658203125, 0.397216796875, 0.08514404296875, 0.08795166015625, 0.01558685302734375, 0.054107666015625, 0.092041015625, 0.0016546249389648438, 0.00550079345703125, 0.1912841796875, 0.006534576416015625, 0.347900390625, 1.4814453125, 0.05712890625, 0.180908203125, 0.0821533203125, 0.01123809814453125, 0.000453948974609375, 0.0009946823120117188], "tokens": [397, 434, 322, 308, 99, 35, 30, 2678, 36, 30, 2678, 37, 27, 4026, 438, 17396, 19643, 623, 308, 103, 36, 30, 1044, 37, 27, 397, 434, 996, 1596, 308, 103, 35, 30, 1044, 36, 27, 461, 308, 104, 35, 30, 354, 36, 27, 397, 831, 280, 354, 35, 21462, 35, 32]}
{"line_number": 339, "line_type": "original", "code": "  Vector3D v1Su1 = v1.subtract(u1);", "entropy": 0.8671875, "is_bug_line": false, "sus_score": 0.6534774899482727, "per_token_entropy": [4.3671875, 5.703125, 0.0028667449951171875, 0.0005307197570800781, 1.451171875, 1.28125, 0.55810546875, 1.1240234375, 0.148681640625, 0.07366943359375, 0.00882720947265625, 0.007053375244140625, 0.00273895263671875, 0.00011074542999267578, 0.000576019287109375, 0.005176544189453125, 0.01052093505859375], "tokens": [225, 4107, 37, 54, 354, 35, 21462, 35, 280, 354, 35, 32, 25330, 26, 103, 35, 293]}
{"line_number": 339, "line_type": "generated", "code": "\n  // the correction of v2 is needed if the angular separation between\n  // u1 and u2 is not the same as the angular separation between v1 and v2\n  if (q0 < 0.0) {\n    // we use the", "entropy": 0.64306640625, "is_bug_line": false, "sus_score": 0.6534774899482727, "per_token_entropy": [1.3720703125, 1.2802734375, 3.140625, 2.85546875, 2.064453125, 0.74267578125, 0.0849609375, 0.66796875, 1.52734375, 2.009765625, 0.371826171875, 2.23046875, 0.1304931640625, 0.06591796875, 1.1328125, 0.0013446807861328125, 0.43701171875, 0.10894775390625, 0.02349853515625, 0.0889892578125, 0.07598876953125, 0.218505859375, 0.5986328125, 0.099365234375, 0.0081329345703125, 0.0187835693359375, 0.1380615234375, 0.086669921875, 0.0037784576416015625, 0.004611968994140625, 0.7177734375, 0.00926971435546875, 0.337890625, 0.041229248046875, 0.002960205078125, 0.08648681640625, 2.103515625, 0.253173828125, 2.048828125, 0.29296875, 0.448486328125, 0.02862548828125, 0.006076812744140625, 1.623046875, 0.1387939453125, 0.0152435302734375, 0.0088043212890625, 0.166748046875, 0.658203125, 0.81201171875, 1.61328125, 0.430908203125], "tokens": [334, 434, 322, 25683, 432, 354, 36, 438, 5349, 415, 322, 14760, 43751, 3733, 334, 434, 1044, 35, 461, 1044, 36, 438, 646, 322, 2432, 619, 322, 14760, 43751, 3733, 354, 35, 461, 354, 36, 334, 415, 308, 99, 34, 333, 225, 34, 32, 34, 27, 301, 284, 434, 996, 793, 322]}
{"line_number": 334, "line_type": "original", "code": "  v2 = new Vector3D(alpha, v1, beta, v2);", "entropy": 1.046875, "is_bug_line": false, "sus_score": 0.6534489989280701, "per_token_entropy": [3.240234375, 5.921875, 1.859375, 1.0693359375, 2.078125, 0.00740814208984375, 0.0004570484161376953, 0.0001882314682006836, 0.053558349609375, 0.6181640625, 0.3603515625, 1.6259765625, 0.9189453125, 1.2333984375, 0.446533203125, 0.017364501953125, 0.06256103515625, 0.278076171875, 0.10076904296875], "tokens": [225, 354, 36, 280, 537, 4107, 37, 54, 26, 4893, 30, 354, 35, 30, 11823, 30, 354, 36, 293]}
{"line_number": 334, "line_type": "generated", "code": "\n\n  // compute the scalar part\n  double s = uRef.dotProduct(vRef);\n  double c = uRef.dotProduct(uRef);\n  double t = vRef.dotProduct(vRef);\n  double sc = s / c", "entropy": 0.338623046875, "is_bug_line": false, "sus_score": 0.6534489989280701, "per_token_entropy": [0.521484375, 0.1412353515625, 0.70458984375, 0.06695556640625, 0.07672119140625, 0.01009368896484375, 0.157958984375, 0.56591796875, 1.1748046875, 0.423583984375, 1.3203125, 0.1702880859375, 0.0003223419189453125, 0.327880859375, 1.4185905456542969e-05, 0.0011806488037109375, 0.050811767578125, 0.025238037109375, 0.256103515625, 0.16650390625, 0.943359375, 0.98291015625, 0.65478515625, 0.853515625, 0.91259765625, 6.651878356933594e-05, 0.188232421875, 5.0902366638183594e-05, 0.0019369125366210938, 0.298095703125, 0.95556640625, 0.287841796875, 0.0745849609375, 0.2081298828125, 1.1806640625, 0.00823211669921875, 0.057830810546875, 0.0011959075927734375, 0.00031304359436035156, 0.0015516281127929688, 9.059906005859375e-06, 4.1484832763671875e-05, 0.0007128715515136719, 0.0005431175231933594, 0.00841522216796875, 0.264404296875, 0.35986328125, 1.7587890625, 0.1341552734375, 0.34619140625, 0.728515625, 0.227294921875], "tokens": [719, 434, 7596, 322, 13145, 1742, 334, 2064, 309, 280, 1044, 2084, 32, 4260, 3409, 26, 104, 2084, 293, 334, 2064, 281, 280, 1044, 2084, 32, 4260, 3409, 26, 103, 2084, 293, 334, 2064, 273, 280, 354, 2084, 32, 4260, 3409, 26, 104, 2084, 293, 334, 2064, 2197, 280, 309, 517, 281]}
{"line_number": 317, "line_type": "original", "code": "  double u2u2 = u2.getNormSq();", "entropy": 1.232421875, "is_bug_line": false, "sus_score": 0.6533712148666382, "per_token_entropy": [4.64453125, 5.8203125, 2.541015625, 2.0625, 0.59423828125, 0.7666015625, 0.5927734375, 0.048553466796875, 0.00972747802734375, 0.00464630126953125, 0.11663818359375, 0.0069732666015625, 0.03692626953125, 0.003940582275390625], "tokens": [225, 2064, 1044, 36, 103, 36, 280, 1044, 36, 32, 371, 14373, 17509, 473]}
{"line_number": 317, "line_type": "generated", "code": "\n      } else {\n        // the (q1, q2, q3) vector is almost aligned with u2,\n        // we use the vector u2' = u2 + u3 to complete the computation\n        uRef  = u2;", "entropy": 0.494873046875, "is_bug_line": false, "sus_score": 0.6533712148666382, "per_token_entropy": [0.145751953125, 0.009246826171875, 0.736328125, 0.034027099609375, 0.060577392578125, 0.15185546875, 0.73779296875, 0.1419677734375, 0.0230712890625, 0.038726806640625, 0.0012998580932617188, 0.0028057098388671875, 0.003871917724609375, 0.004680633544921875, 0.0027370452880859375, 0.005710601806640625, 0.00047278404235839844, 0.005992889404296875, 0.09613037109375, 1.3974609375, 0.08172607421875, 0.0193939208984375, 1.8818359375, 0.2388916015625, 1.8486328125, 0.89990234375, 0.0046234130859375, 0.39599609375, 0.92041015625, 1.4619140625, 0.966796875, 0.912109375, 0.5126953125, 0.87109375, 0.50390625, 0.4248046875, 0.12115478515625, 1.4091796875, 0.9609375, 0.4140625, 2.05078125, 2.671875, 0.046966552734375, 1.1044921875, 0.05841064453125, 0.59130859375, 0.1107177734375, 0.483154296875, 6.771087646484375e-05, 0.022918701171875, 0.019500732421875, 0.11962890625], "tokens": [397, 320, 813, 301, 291, 434, 322, 308, 99, 35, 30, 2678, 36, 30, 2678, 37, 27, 4026, 438, 17396, 19643, 623, 1044, 36, 30, 291, 434, 996, 793, 322, 4026, 1044, 36, 25, 280, 1044, 36, 474, 1044, 37, 372, 6153, 322, 19578, 291, 1044, 2084, 225, 280, 1044, 36, 45]}
{"line_number": 385, "line_type": "original", "code": "   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,", "entropy": 1.0517578125, "is_bug_line": false, "sus_score": 0.6533707976341248, "per_token_entropy": [6.6328125, 11.09375, 0.7333984375, 1.87109375, 0.295166015625, 0.00582122802734375, 0.0001518726348876953, 0.1317138671875, 2.134765625, 1.408203125, 0.236328125, 1.4326171875, 0.052520751953125, 0.022308349609375, 0.2822265625, 0.400390625, 0.29541015625, 0.0170440673828125, 0.0007066726684570312, 0.00018703937530517578, 0.0028514862060546875, 0.001422882080078125, 0.0038242340087890625, 0.0019445419311523438, 0.27001953125, 0.0200042724609375], "tokens": [261, 831, 280, 537, 4107, 37, 54, 26, 103, 2084, 32, 20431, 346, 319, 2678, 37, 429, 1044, 2084, 32, 40542, 346, 319, 2678, 36, 30]}
{"line_number": 385, "line_type": "generated", "code": "\n  /** Build a rotation from the matrix.\n\n   * @param m matrix to build the rotation from\n   */\n  public Rotation(final RealMatrix m) {\n\n    // we use the properties of quaternions\n    // q = cos(a/2)", "entropy": 0.607421875, "is_bug_line": false, "sus_score": 0.6533707976341248, "per_token_entropy": [0.79638671875, 0.0706787109375, 0.5771484375, 0.490966796875, 0.0989990234375, 0.3388671875, 1.1904296875, 1.634765625, 1.2998046875, 0.417236328125, 0.01435089111328125, 1.1279296875, 0.0264434814453125, 0.54248046875, 1.4443359375, 1.150390625, 1.4267578125, 0.261474609375, 0.006298065185546875, 0.0027179718017578125, 0.31591796875, 1.34765625, 0.0184173583984375, 0.0184478759765625, 0.003025054931640625, 0.01428985595703125, 0.837890625, 0.10443115234375, 0.0034694671630859375, 0.0021648406982421875, 0.006519317626953125, 0.06719970703125, 0.86962890625, 0.8046875, 2.806640625, 0.70556640625, 0.3837890625, 2.30859375, 0.296875, 1.955078125, 0.0005946159362792969, 4.100799560546875e-05, 1.6435546875, 0.298828125, 1.3974609375, 0.364501953125, 0.82373046875, 0.304931640625, 0.81005859375, 0.01317596435546875, 0.0001271963119506836, 0.1522216796875], "tokens": [334, 1022, 5238, 312, 11410, 645, 322, 5045, 32, 3017, 319, 477, 753, 345, 5045, 372, 1968, 322, 11410, 645, 664, 569, 334, 562, 33211, 26, 3220, 11443, 4161, 345, 27, 301, 446, 434, 996, 793, 322, 4308, 432, 2063, 12716, 1785, 284, 434, 2678, 280, 10712, 26, 83, 33, 36, 27]}
{"line_number": 318, "line_type": "original", "code": "  double v1v1 = v1.getNormSq();", "entropy": 1.2783203125, "is_bug_line": false, "sus_score": 0.65335613489151, "per_token_entropy": [4.0625, 4.49609375, 4.14453125, 1.6123046875, 0.80859375, 1.7275390625, 0.2457275390625, 0.12274169921875, 0.06317138671875, 0.0236053466796875, 0.2330322265625, 0.0021152496337890625, 0.34228515625, 0.004638671875], "tokens": [225, 2064, 354, 35, 104, 35, 280, 354, 35, 32, 371, 14373, 17509, 473]}
{"line_number": 318, "line_type": "generated", "code": "\n      // we now use the (q1, q2, q3) vector that is orthogonal to (u2, u3)\n      // and in the (u1, u2) plane\n      vRef = v2;\n      v1", "entropy": 0.59716796875, "is_bug_line": false, "sus_score": 0.65335613489151, "per_token_entropy": [0.71826171875, 0.74267578125, 1.552734375, 3.171875, 1.8447265625, 1.1826171875, 0.8759765625, 1.439453125, 0.333984375, 0.004486083984375, 0.02099609375, 0.104736328125, 0.012237548828125, 0.04486083984375, 0.004680633544921875, 0.002727508544921875, 0.274169921875, 3.06640625, 0.1883544921875, 1.6328125, 0.00589752197265625, 0.06744384765625, 0.71435546875, 0.060516357421875, 0.484375, 0.006435394287109375, 0.0102081298828125, 0.006908416748046875, 0.06573486328125, 0.258056640625, 1.3623046875, 1.033203125, 1.6748046875, 0.06549072265625, 0.235107421875, 0.263671875, 0.1739501953125, 0.01073455810546875, 0.03875732421875, 0.1383056640625, 0.038726806640625, 0.060943603515625, 0.416748046875, 2.001953125, 0.56201171875, 0.77001953125, 0.13720703125, 0.244873046875, 0.037750244140625, 0.387939453125, 1.669921875, 0.8359375], "tokens": [397, 434, 996, 2464, 793, 322, 308, 99, 35, 30, 2678, 36, 30, 2678, 37, 27, 4026, 688, 438, 556, 44802, 372, 308, 103, 36, 30, 1044, 37, 27, 397, 434, 461, 328, 322, 308, 103, 35, 30, 1044, 36, 27, 14442, 397, 354, 2084, 280, 354, 36, 45, 397, 354, 35]}
{"line_number": 325, "line_type": "original", "code": "  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);", "entropy": 1.130859375, "is_bug_line": false, "sus_score": 0.6526158452033997, "per_token_entropy": [3.9609375, 4.9140625, 1.2685546875, 1.8173828125, 2.64453125, 0.0229644775390625, 0.0007781982421875, 0.0002853870391845703, 0.1016845703125, 5.359375, 6.4849853515625e-05, 0.0006542205810546875, 0.25390625, 0.6796875, 1.6728515625, 0.552734375, 0.068115234375, 0.363037109375, 1.8994140625, 1.935546875, 0.301025390625, 0.1519775390625, 0.03985595703125, 0.26513671875, 1.0849609375, 0.5908203125, 0.58642578125], "tokens": [225, 354, 35, 280, 537, 4107, 37, 54, 26, 12200, 5717, 32, 8663, 26, 103, 35, 103, 35, 517, 354, 35, 104, 35, 471, 354, 35, 293]}
{"line_number": 325, "line_type": "generated", "code": "\n  }\n\n  // compute the scalar part\n  double s = vRef.dotProduct(uRef) + c;\n\n  // compute the vector part\n  double inv = 0.5 / FastMath.sqrt(s * s + 2 * c", "entropy": 0.40966796875, "is_bug_line": false, "sus_score": 0.6526158452033997, "per_token_entropy": [1.453125, 0.064453125, 0.3720703125, 0.2354736328125, 1.3681640625, 0.403076171875, 0.5, 0.1561279296875, 0.55078125, 0.365234375, 0.6435546875, 0.1746826171875, 2.421875, 0.5166015625, 0.0002770423889160156, 0.4091796875, 9.298324584960938e-06, 0.0016412734985351562, 0.2890625, 0.50537109375, 1.66796875, 0.453369140625, 0.2120361328125, 0.0262451171875, 0.9951171875, 0.1209716796875, 0.916015625, 0.17138671875, 0.1654052734375, 0.37646484375, 0.12109375, 0.85791015625, 0.529296875, 0.6533203125, 0.046661376953125, 0.325927734375, 0.0004954338073730469, 0.115234375, 0.016998291015625, 0.10467529296875, 5.0067901611328125e-06, 3.0875205993652344e-05, 0.0014371871948242188, 0.0040435791015625, 0.1064453125, 0.4052734375, 0.311279296875, 0.192138671875, 0.90185546875, 0.88134765625, 0.1697998046875, 0.01171875], "tokens": [334, 320, 719, 434, 7596, 322, 13145, 1742, 334, 2064, 309, 280, 354, 2084, 32, 4260, 3409, 26, 103, 2084, 27, 474, 281, 45, 719, 434, 7596, 322, 4026, 1742, 334, 2064, 4691, 280, 225, 34, 32, 39, 517, 15938, 5717, 32, 8663, 26, 101, 319, 309, 474, 225, 36, 319, 281]}
{"line_number": 342, "line_type": "original", "code": "  Vector3D u3    = u1.crossProduct(u2);", "entropy": 1.0703125, "is_bug_line": false, "sus_score": 0.6524780988693237, "per_token_entropy": [4.05078125, 5.43359375, 0.007434844970703125, 4.8279762268066406e-05, 1.251953125, 1.4091796875, 4.51953125, 0.0006074905395507812, 0.68994140625, 0.72998046875, 0.0243072509765625, 0.0259552001953125, 6.341934204101562e-05, 0.00023055076599121094, 0.01493072509765625, 0.00563812255859375, 0.02691650390625], "tokens": [225, 4107, 37, 54, 1044, 37, 264, 280, 1044, 35, 32, 10495, 3409, 26, 103, 36, 293]}
{"line_number": 342, "line_type": "generated", "code": "\n  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub", "entropy": 0.0635986328125, "is_bug_line": false, "sus_score": 0.6524780988693237, "per_token_entropy": [0.41650390625, 0.59912109375, 0.2239990234375, 0.640625, 0.06988525390625, 0.053924560546875, 0.11907958984375, 0.2196044921875, 0.414306640625, 0.00534820556640625, 0.1689453125, 0.016204833984375, 0.01027679443359375, 0.01168060302734375, 0.048614501953125, 0.050201416015625, 0.0014362335205078125, 0.037384033203125, 0.0003821849822998047, 0.0005884170532226562, 0.09136962890625, 0.0006213188171386719, 0.006137847900390625, 0.0005040168762207031, 0.0003056526184082031, 0.0009832382202148438, 0.0011949539184570312, 0.0004220008850097656, 0.0017118453979492188, 0.0016355514526367188, 0.0012454986572265625, 0.0017843246459960938, 0.00409698486328125, 6.0439109802246094e-05, 0.0008196830749511719, 0.0030364990234375, 0.0027370452880859375, 0.0025005340576171875, 0.061676025390625, 8.738040924072266e-05, 0.00012981891632080078, 0.01184844970703125, 0.0002486705780029297, 6.54458999633789e-05, 0.000499725341796875, 0.0005741119384765625, 0.0002911090850830078, 2.765655517578125e-05, 6.29425048828125e-05, 0.0010042190551757812, 0.00026416778564453125, 4.8279762268066406e-05], "tokens": [334, 1022, 5238, 322, 11410, 688, 19570, 312, 6092, 432, 4026, 1991, 4674, 6092, 32, 3017, 319, 333, 98, 48, 32925, 436, 4195, 5247, 23851, 30, 415, 322, 1980, 4528, 9547, 372, 664, 319, 322, 6092, 308, 103, 46, 1113, 48, 35, 377, 1113, 2717, 1044, 46, 1113, 48, 36, 377, 1113]}
{"line_number": 341, "line_type": "original", "code": "  Vector3D k     = v1Su1.crossProduct(v2Su2);", "entropy": 0.8505859375, "is_bug_line": false, "sus_score": 0.652169942855835, "per_token_entropy": [3.689453125, 5.359375, 0.005397796630859375, 1.8596649169921875e-05, 1.3349609375, 4.56640625, 0.002193450927734375, 1.6884765625, 0.2225341796875, 0.0765380859375, 0.0010995864868164062, 0.003971099853515625, 0.007171630859375, 2.4557113647460938e-05, 0.0003838539123535156, 0.021942138671875, 0.0192718505859375, 0.0008320808410644531, 0.0010709762573242188, 0.012237548828125], "tokens": [225, 4107, 37, 54, 831, 262, 280, 354, 35, 21462, 35, 32, 10495, 3409, 26, 104, 36, 21462, 36, 293]}
{"line_number": 341, "line_type": "generated", "code": "\n\n  /** Build a rotation from the matrix.\n\n   * <p>Decompose the matrix to get the canonical matrix Q with\n   * Q<sup>T</sup> Q = I, and then compute the corresponding\n   * quaternion (q0, q", "entropy": 0.6552734375, "is_bug_line": false, "sus_score": 0.652169942855835, "per_token_entropy": [1.025390625, 0.124755859375, 0.61767578125, 0.61279296875, 0.1917724609375, 0.47119140625, 1.521484375, 1.4599609375, 0.8408203125, 0.355712890625, 0.007762908935546875, 0.66455078125, 0.0025634765625, 0.0027446746826171875, 2.236328125, 0.6005859375, 0.1383056640625, 0.62548828125, 1.15625, 1.97265625, 0.49755859375, 1.11328125, 2.15234375, 1.1298828125, 0.884765625, 0.224853515625, 0.0002830028533935547, 0.55126953125, 0.491455078125, 0.0621337890625, 0.005977630615234375, 0.189208984375, 0.00011801719665527344, 0.00021922588348388672, 0.01235198974609375, 0.56396484375, 0.0030269622802734375, 0.1939697265625, 1.6552734375, 0.81201171875, 0.68603515625, 1.240234375, 0.75927734375, 1.4482421875, 0.7412109375, 0.00015294551849365234, 1.1474609375, 1.8798828125, 0.732421875, 0.2078857421875, 0.0175018310546875, 0.01953125], "tokens": [719, 1022, 5238, 312, 11410, 645, 322, 5045, 32, 3017, 319, 333, 98, 48, 685, 9307, 322, 5045, 372, 622, 322, 21982, 5045, 1910, 623, 664, 319, 1910, 46, 5540, 48, 70, 377, 5540, 48, 1910, 280, 439, 30, 461, 1615, 7596, 322, 8435, 664, 319, 47039, 308, 99, 34, 30, 2678]}
{"line_number": 378, "line_type": "original", "code": "  c = FastMath.sqrt(c);", "entropy": 2.51953125, "is_bug_line": false, "sus_score": 0.6443457007408142, "per_token_entropy": [4.3828125, 8.0390625, 0.64453125, 4.0859375, 0.00013709068298339844, 0.0008802413940429688, 0.10943603515625, 0.1881103515625, 6.8359375, 0.92041015625], "tokens": [225, 281, 280, 15938, 5717, 32, 8663, 26, 85, 293]}
{"line_number": 378, "line_type": "generated", "code": "\n      q1 = coeff * q.getX();\n      q2 = coeff * q.getY();\n      q3 = coeff * q.getZ();\n    }\n\n  }\n\n  /** Build a rotation from a matrix.\n\n   * @param m rotation matrix\n   *", "entropy": 0.1705322265625, "is_bug_line": false, "sus_score": 0.6443457007408142, "per_token_entropy": [0.1658935546875, 0.09039306640625, 0.1802978515625, 0.003692626953125, 0.054107666015625, 0.0030117034912109375, 0.2135009765625, 0.0006427764892578125, 0.00891876220703125, 0.002895355224609375, 0.005733489990234375, 0.00012028217315673828, 0.0008535385131835938, 8.654594421386719e-05, 0.00044655799865722656, 2.586841583251953e-05, 0.00022709369659423828, 6.198883056640625e-06, 0.0004761219024658203, 0.0001055002212524414, 0.0006394386291503906, 6.473064422607422e-05, 0.00016820430755615234, 3.8743019104003906e-05, 4.088878631591797e-05, 5.602836608886719e-06, 0.0002014636993408203, 3.5762786865234375e-06, 0.00016510486602783203, 0.0008330345153808594, 0.23291015625, 0.003894805908203125, 0.250244140625, 0.00531768798828125, 0.1910400390625, 0.046478271484375, 0.55224609375, 0.41796875, 0.06634521484375, 0.3251953125, 1.3408203125, 1.6044921875, 0.1590576171875, 0.251220703125, 0.007617950439453125, 1.1943359375, 0.017181396484375, 0.46875, 0.424072265625, 0.00214385986328125, 0.06390380859375, 0.5048828125], "tokens": [397, 2678, 35, 280, 35139, 319, 2678, 32, 18817, 473, 397, 2678, 36, 280, 35139, 319, 2678, 32, 20431, 473, 397, 2678, 37, 280, 35139, 319, 2678, 32, 40542, 473, 284, 320, 719, 320, 719, 1022, 5238, 312, 11410, 645, 312, 5045, 32, 3017, 319, 477, 753, 345, 11410, 5045, 664, 319]}
{"line_number": 388, "line_type": "original", "code": "  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());", "entropy": 3.091796875, "is_bug_line": false, "sus_score": 0.6418118476867676, "per_token_entropy": [3.580078125, 12.8671875, 2.140625, 4.69921875, 8.5078125, 11.5078125, 1.078125, 2.203125, 0.027587890625, 0.00864410400390625, 5.59765625, 0.7255859375, 3.31640625, 1.2392578125, 2.7578125, 0.42529296875, 3.091796875, 0.08624267578125, 0.46435546875, 0.0017919540405273438, 2.935546875, 0.7119140625], "tokens": [225, 2678, 34, 280, 354, 2084, 32, 4260, 3409, 26, 93, 27, 517, 308, 36, 319, 831, 32, 371, 14373, 17509, 1035]}
{"line_number": 388, "line_type": "generated", "code": " axes. They can be seen as rotations around", "entropy": 1.0703125, "is_bug_line": false, "sus_score": 0.6418118476867676, "per_token_entropy": [2.1328125, 2.47265625, 0.8798828125, 1.9541015625, 0.1240234375, 1.4951171875, 0.00411224365234375, 1.55859375, 0.021575927734375, 0.06048583984375], "tokens": [17478, 32, 11228, 883, 526, 10925, 619, 5028, 993, 6835]}
{"line_number": 332, "line_type": "original", "code": "  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));", "entropy": 0.7783203125, "is_bug_line": false, "sus_score": 0.6407499313354492, "per_token_entropy": [3.205078125, 1.7998046875, 2.259765625, 3.640625, 0.0001957416534423828, 3.18359375, 6.23464584350586e-05, 0.00014472007751464844, 0.0838623046875, 2.41796875, 1.294921875, 2.3046875, 0.5224609375, 0.005992889404296875, 0.0902099609375, 0.833984375, 0.12353515625, 0.0014190673828125, 0.17724609375, 0.216064453125, 1.88671875, 0.1497802734375, 0.1370849609375, 0.5908203125, 0.82568359375, 2.58203125, 0.323486328125, 0.1051025390625, 1.811981201171875e-05, 0.10455322265625, 0.560546875, 0.008056640625, 0.0016880035400390625, 0.0005278587341308594, 0.00789642333984375, 0.009185791015625, 0.049468994140625, 0.06817626953125], "tokens": [225, 2064, 11823, 261, 280, 15938, 5717, 32, 8663, 1162, 103, 36, 103, 36, 429, 1044, 35, 103, 36, 319, 35139, 71, 27, 517, 308, 104, 36, 104, 36, 429, 354, 35, 104, 36, 319, 35139, 72, 876]}
{"line_number": 332, "line_type": "generated", "code": "\n  q3 = inv * k.getZ();\n  double s = uRef.dotProduct(vRef);\n  double c = uRef.dotProduct(uRef);\n  double k = vRef.dotProduct(vRef);\n  double alpha", "entropy": 0.357666015625, "is_bug_line": false, "sus_score": 0.6407499313354492, "per_token_entropy": [0.172607421875, 0.2366943359375, 0.0972900390625, 0.003997802734375, 0.041534423828125, 0.0012712478637695312, 0.0225677490234375, 0.0003101825714111328, 0.0011606216430664062, 0.002841949462890625, 1.5498046875, 0.9541015625, 1.0263671875, 0.4541015625, 0.79638671875, 0.29248046875, 0.00019371509552001953, 0.44189453125, 1.6927719116210938e-05, 0.0020084381103515625, 0.07244873046875, 0.04266357421875, 0.0931396484375, 0.213134765625, 0.9697265625, 0.5390625, 1.380859375, 0.57177734375, 0.73095703125, 8.785724639892578e-05, 0.357177734375, 7.021427154541016e-05, 0.0009298324584960938, 0.66259765625, 0.69580078125, 0.1553955078125, 0.12005615234375, 0.30078125, 2.3359375, 0.344482421875, 0.351318359375, 0.00616455078125, 0.0003800392150878906, 0.0030231475830078125, 1.9669532775878906e-05, 7.104873657226562e-05, 0.0112762451171875, 0.0005879402160644531, 0.005298614501953125, 0.223388671875, 0.396484375, 1.90625], "tokens": [334, 2678, 37, 280, 4691, 319, 831, 32, 40542, 473, 334, 2064, 309, 280, 1044, 2084, 32, 4260, 3409, 26, 104, 2084, 293, 334, 2064, 281, 280, 1044, 2084, 32, 4260, 3409, 26, 103, 2084, 293, 334, 2064, 831, 280, 354, 2084, 32, 4260, 3409, 26, 104, 2084, 293, 334, 2064, 7377]}
{"line_number": 137, "line_type": "original", "code": "      // normalization preprocessing", "entropy": 3.998046875, "is_bug_line": false, "sus_score": 0.6391788125038147, "per_token_entropy": [8.1640625, 0.98779296875, 3.044921875, 3.794921875], "tokens": [647, 434, 32360, 39820]}
{"line_number": 137, "line_type": "generated", "code": "\n  }\n\n  /** Build a rotation from a matrix.\n   * <p>Build the rotation instance that transforms vectors as\n   * {@link #applyTo(Vector3D) applying} the rotation to them will\n   * result in the corresponding vectors transformed by", "entropy": 0.4736328125, "is_bug_line": false, "sus_score": 0.6391788125038147, "per_token_entropy": [0.55712890625, 0.005077362060546875, 0.07977294921875, 0.00827789306640625, 0.171875, 0.11602783203125, 0.03143310546875, 0.05059814453125, 1.017578125, 1.1025390625, 0.04510498046875, 0.02105712890625, 0.0006880760192871094, 0.260009765625, 0.000965118408203125, 0.003078460693359375, 1.1787109375, 1.4599609375, 0.1715087890625, 1.4521484375, 0.8212890625, 1.4287109375, 0.7568359375, 1.0703125, 1.23828125, 9.834766387939453e-05, 1.6689453125, 0.305419921875, 0.78662109375, 0.00949859619140625, 0.002986907958984375, 0.0006194114685058594, 0.0010013580322265625, 0.0015621185302734375, 3.814697265625e-06, 0.0364990234375, 2.078125, 0.039306640625, 0.036468505859375, 0.299560546875, 0.19873046875, 0.50537109375, 1.1689453125, 0.64111328125, 4.935264587402344e-05, 0.5576171875, 0.0267333984375, 0.72607421875, 0.386474609375, 0.054443359375, 1.9189453125, 0.128173828125], "tokens": [334, 320, 719, 1022, 5238, 312, 11410, 645, 312, 5045, 32, 664, 319, 333, 98, 48, 3313, 322, 11410, 1980, 688, 19570, 16540, 619, 664, 319, 3088, 1204, 588, 4699, 705, 26, 2863, 37, 54, 27, 23242, 111, 322, 11410, 372, 3026, 1098, 664, 319, 1056, 328, 322, 8435, 16540, 21634, 810]}
{"line_number": 438, "line_type": "original", "code": "   * canonical axes X, Y and Z, each axis being used once. There are", "entropy": 3.322265625, "is_bug_line": false, "sus_score": 0.6330381631851196, "per_token_entropy": [4.98828125, 6.8125, 14.9296875, 3.98046875, 0.2269287109375, 0.0187530517578125, 0.01255035400390625, 0.07769775390625, 0.0011796951293945312, 1.1279296875, 10.0625, 2.4375, 0.98876953125, 5.51171875, 1.4970703125, 2.109375, 4.8125, 0.2200927734375], "tokens": [261, 319, 21982, 17478, 1593, 30, 1410, 461, 2523, 30, 2504, 6013, 3998, 1654, 5049, 32, 5802, 884]}
{"line_number": 438, "line_type": "generated", "code": "\n    return q1;\n  }\n\n  /** Get the second coordinate of the vectorial part of the quaternion.\n   * @return second coordinate of the vectorial part of the quaternion\n   */\n  public double getQ2() {", "entropy": 0.020721435546875, "is_bug_line": false, "sus_score": 0.6330381631851196, "per_token_entropy": [0.65087890625, 0.01552581787109375, 0.042236328125, 0.0248565673828125, 0.01030731201171875, 0.11114501953125, 0.0023059844970703125, 0.029449462890625, 0.0016145706176757812, 0.0018768310546875, 0.0004496574401855469, 0.007282257080078125, 0.003353118896484375, 0.0001690387725830078, 0.00023949146270751953, 0.0003082752227783203, 0.0018854141235351562, 9.1552734375e-05, 0.0006551742553710938, 0.00043654441833496094, 0.0029811859130859375, 0.00557708740234375, 0.004421234130859375, 0.00012171268463134766, 0.005130767822265625, 0.00019419193267822266, 0.01555633544921875, 0.0009026527404785156, 0.00024020671844482422, 8.952617645263672e-05, 0.00024056434631347656, 0.00018739700317382812, 1.8358230590820312e-05, 5.173683166503906e-05, 4.851818084716797e-05, 0.0021038055419921875, 0.0016279220581054688, 0.0011301040649414062, 0.003997802734375, 0.001171112060546875, 0.0001614093780517578, 6.389617919921875e-05, 1.3589859008789062e-05, 1.9073486328125e-05, 7.784366607666016e-05, 0.0019550323486328125], "tokens": [284, 442, 2678, 35, 45, 334, 320, 719, 1022, 1390, 322, 3100, 12651, 432, 322, 4026, 564, 1742, 432, 322, 47039, 32, 664, 319, 477, 601, 3100, 12651, 432, 322, 4026, 564, 1742, 432, 322, 47039, 664, 569, 334, 562, 2064, 622, 67, 36, 346, 301]}
{"line_number": 262, "line_type": "original", "code": "      q3 = inv * (ort[0][1] - ort[1][0]);", "entropy": 0.97509765625, "is_bug_line": false, "sus_score": 0.6257942318916321, "per_token_entropy": [6.1953125, 8.609375, 3.099609375, 0.2298583984375, 0.91796875, 0.018707275390625, 0.00920867919921875, 0.160888671875, 0.006816864013671875, 0.1881103515625, 0.0010728836059570312, 0.0149078369140625, 0.0011157989501953125, 0.029571533203125, 0.00379180908203125, 0.00010371208190917969, 0.00034499168395996094, 0.00011408329010009766, 0.0005507469177246094, 0.004848480224609375], "tokens": [647, 2678, 37, 280, 4691, 319, 308, 373, 77, 34, 1674, 35, 79, 429, 46512, 77, 35, 1674, 34, 1989]}
{"line_number": 262, "line_type": "generated", "code": "\n\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2)\n    throws IllegalArgumentException {\n\n    // compute the angle between the two vectors\n    final double a = u1.angle", "entropy": 0.286376953125, "is_bug_line": false, "sus_score": 0.6257942318916321, "per_token_entropy": [1.3359375, 0.09405517578125, 0.0284423828125, 0.02752685546875, 0.0343017578125, 0.01751708984375, 1.0078125, 0.53466796875, 0.003284454345703125, 0.0017223358154296875, 8.320808410644531e-05, 0.000598907470703125, 0.003971099853515625, 5.328655242919922e-05, 4.7326087951660156e-05, 0.0012693405151367188, 3.6954879760742188e-06, 0.00041985511779785156, 0.06182861328125, 0.0001322031021118164, 0.00015282630920410156, 0.00030732154846191406, 5.829334259033203e-05, 0.0007185935974121094, 0.007228851318359375, 3.695487976074219e-05, 8.165836334228516e-05, 0.0002727508544921875, 2.0623207092285156e-05, 0.0085296630859375, 0.82470703125, 0.0037860870361328125, 0.1746826171875, 0.027679443359375, 0.56982421875, 0.2125244140625, 0.7333984375, 0.6103515625, 3.51171875, 0.06103515625, 0.62939453125, 0.2418212890625, 0.25732421875, 0.2037353515625, 0.76904296875, 0.0384521484375, 1.955078125, 0.33837890625, 0.4091796875, 0.0010519027709960938, 0.0009860992431640625, 0.1441650390625], "tokens": [3017, 569, 334, 562, 33211, 26, 2863, 37, 54, 1044, 35, 30, 4107, 37, 54, 1044, 36, 30, 4107, 37, 54, 354, 35, 30, 4107, 37, 54, 354, 36, 27, 284, 2571, 12137, 301, 446, 434, 7596, 322, 8775, 3733, 322, 3134, 16540, 284, 1158, 2064, 312, 280, 1044, 35, 32, 3695]}
{"line_number": 382, "line_type": "original", "code": "  q3 = inv * k.getZ();", "entropy": 2.2734375, "is_bug_line": false, "sus_score": 0.624828040599823, "per_token_entropy": [4.11328125, 5.19140625, 3.736328125, 0.07366943359375, 8.4921875, 0.10308837890625, 0.324462890625, 0.00685882568359375, 0.6923828125, 0.007526397705078125], "tokens": [225, 2678, 37, 280, 4691, 319, 831, 32, 40542, 473]}
{"line_number": 382, "line_type": "generated", "code": "\n  }\n\n  /** Build a rotation from the matrix.\n\n   * <p>The rotation matrix must be orthogonal and have a positive determinant,\n   * otherwise a MathRuntimeException will be thrown.</p>\n\n   * @param m rotation matrix\n   * @", "entropy": 0.41845703125, "is_bug_line": false, "sus_score": 0.624828040599823, "per_token_entropy": [0.93359375, 0.0298309326171875, 0.289794921875, 0.04052734375, 0.54638671875, 0.4365234375, 0.0689697265625, 0.3310546875, 1.28125, 1.73046875, 0.927734375, 0.33935546875, 0.00982666015625, 0.484130859375, 0.00199127197265625, 0.0018558502197265625, 0.8515625, 1.943359375, 1.080078125, 1.0693359375, 0.321533203125, 0.10400390625, 0.0015697479248046875, 1.509765625, 0.173828125, 0.337646484375, 0.0811767578125, 0.4580078125, 6.496906280517578e-05, 1.037109375, 0.07373046875, 0.0003342628479003906, 0.151611328125, 1.0400390625, 1.3154296875, 0.05181884765625, 0.8369140625, 0.0003039836883544922, 0.128173828125, 0.4716796875, 0.00035858154296875, 0.0008187294006347656, 0.1158447265625, 0.002162933349609375, 0.128662109375, 0.0053863525390625, 0.642578125, 0.1910400390625, 0.0008993148803710938, 0.029815673828125, 0.160400390625, 0.0027713775634765625], "tokens": [334, 320, 719, 1022, 5238, 312, 11410, 645, 322, 5045, 32, 3017, 319, 333, 98, 48, 1318, 11410, 5045, 2298, 526, 556, 44802, 461, 1159, 312, 11557, 8086, 692, 30, 664, 319, 5878, 312, 4175, 19304, 1098, 526, 12163, 1730, 98, 48, 3017, 319, 477, 753, 345, 11410, 5045, 664, 319, 477]}
{"line_number": 381, "line_type": "original", "code": "  q2 = inv * k.getY();", "entropy": 1.650390625, "is_bug_line": false, "sus_score": 0.623332142829895, "per_token_entropy": [3.861328125, 2.015625, 2.716796875, 0.05267333984375, 6.5, 0.061920166015625, 0.2210693359375, 0.00513458251953125, 1.06640625, 0.004444122314453125], "tokens": [225, 2678, 36, 280, 4691, 319, 831, 32, 20431, 473]}
{"line_number": 381, "line_type": "generated", "code": "\n    }\n\n  }\n\n  /** Build one of the rotations that transform one vector into another one.\n\n   * <p>Except for a possible scale factor, if the instance were\n   * applied to the vector u it will produce the vector v. There is", "entropy": 0.07720947265625, "is_bug_line": false, "sus_score": 0.623332142829895, "per_token_entropy": [0.30078125, 0.007465362548828125, 0.262939453125, 0.004871368408203125, 0.23828125, 0.044189453125, 0.5634765625, 1.552734375, 0.007785797119140625, 0.0008873939514160156, 0.058258056640625, 0.0007152557373046875, 0.07379150390625, 0.0450439453125, 0.145263671875, 0.1292724609375, 0.004703521728515625, 0.02587890625, 0.006252288818359375, 0.07598876953125, 0.08367919921875, 0.0022106170654296875, 0.050506591796875, 0.00035691261291503906, 0.00115966796875, 0.165283203125, 0.0004665851593017578, 0.0009703636169433594, 0.0008373260498046875, 0.0021610260009765625, 0.00013315677642822266, 0.002300262451171875, 0.0012054443359375, 0.0002911090850830078, 0.00453948974609375, 0.0014286041259765625, 0.0201263427734375, 6.306171417236328e-05, 0.00029015541076660156, 0.0003249645233154297, 0.0008039474487304688, 0.005153656005859375, 0.007678985595703125, 0.0099639892578125, 0.0005640983581542969, 0.0006494522094726562, 0.00020074844360351562, 0.0006279945373535156, 0.0009965896606445312, 0.036376953125, 0.052032470703125, 0.0123138427734375], "tokens": [284, 320, 719, 320, 719, 1022, 5238, 1591, 432, 322, 5028, 993, 688, 4522, 1591, 4026, 1991, 4674, 1591, 32, 3017, 319, 333, 98, 48, 32925, 436, 312, 4195, 5247, 10365, 30, 415, 322, 1980, 4528, 664, 319, 9547, 372, 322, 4026, 1044, 561, 1098, 13882, 322, 4026, 354, 32, 5802, 438]}
