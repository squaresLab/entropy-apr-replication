{"line_number": 337, "line_type": "original", "code": "                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {", "entropy": 1.2978515625, "is_bug_line": true, "sus_score": 0.8112542033195496, "per_token_entropy": [8.859375, 2.482421875, 0.01715087890625, 0.05438232421875, 0.8095703125, 0.01593017578125, 3.30078125, 0.1456298828125, 0.0003724098205566406, 0.50341796875, 0.199951171875, 0.07073974609375, 2.578125, 1.4248046875, 0.00017130374908447266, 0.09820556640625, 0.0267486572265625, 7.70703125, 0.166748046875, 0.0190887451171875, 0.020751953125, 0.041534423828125], "tokens": [2071, 436, 308, 410, 594, 280, 44929, 33312, 10905, 473, 594, 333, 44929, 33312, 10905, 346, 474, 595, 45, 594, 1987, 301]}
{"line_number": 337, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }", "entropy": 0.038238525390625, "is_bug_line": true, "sus_score": 0.8112542033195496, "per_token_entropy": [0.51806640625, 0.12548828125, 0.03515625, 2.6702880859375e-05, 0.17578125, 0.01395416259765625, 0.350341796875, 0.00441741943359375, 0.002429962158203125, 0.004276275634765625, 0.00022137165069580078, 0.0286712646484375, 0.0025005340576171875, 4.0411949157714844e-05, 0.00909423828125, 0.0005116462707519531, 0.077880859375, 0.0022220611572265625, 0.0018596649169921875, 0.0023555755615234375, 6.866455078125e-05, 0.005939483642578125, 0.0013217926025390625, 0.0215911865234375, 0.03167724609375, 0.04119873046875, 0.00032901763916015625, 0.0002772808074951172, 0.00028014183044433594, 0.0005407333374023438, 0.0014934539794921875, 0.0173492431640625, 0.0015630722045898438, 0.004791259765625, 8.344650268554688e-07, 4.2438507080078125e-05, 9.584426879882812e-05, 4.291534423828125e-06, 0.00682830810546875, 0.07684326171875, 0.0009870529174804688], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320]}
{"line_number": 338, "line_type": "original", "code": "                    if (tableau.getEntry(basicRow, j) == 1) {", "entropy": 1.5654296875, "is_bug_line": true, "sus_score": 0.8024746775627136, "per_token_entropy": [10.8828125, 3.927734375, 0.1312255859375, 2.78125, 0.0015726089477539062, 0.2259521484375, 0.1915283203125, 0.00296783447265625, 3.755859375, 0.245849609375, 0.027587890625, 1.0615234375, 0.05340576171875, 1.71484375, 0.06939697265625, 2.365234375, 0.5888671875, 0.148681640625], "tokens": [4696, 415, 308, 1274, 4452, 32, 48895, 26, 6390, 2352, 30, 594, 27, 610, 225, 35, 27, 301]}
{"line_number": 338, "line_type": "generated", "code": "\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get the specified entry of the table", "entropy": 0.15966796875, "is_bug_line": true, "sus_score": 0.8024746775627136, "per_token_entropy": [0.7255859375, 0.1312255859375, 0.036163330078125, 4.2319297790527344e-05, 0.25341796875, 0.0185699462890625, 0.444580078125, 0.004711151123046875, 0.002109527587890625, 0.0070648193359375, 0.00041222572326660156, 0.034027099609375, 0.003078460693359375, 0.0005788803100585938, 0.010894775390625, 0.0008087158203125, 0.08331298828125, 0.0025653839111328125, 0.0028228759765625, 0.00266265869140625, 7.95125961303711e-05, 0.0059356689453125, 0.002544403076171875, 0.032745361328125, 0.04254150390625, 0.063232421875, 0.00040030479431152344, 0.0007910728454589844, 0.000537872314453125, 0.0007109642028808594, 0.0024471282958984375, 0.024505615234375, 0.00205230712890625, 0.0074005126953125, 5.960464477539062e-07, 8.404254913330078e-05, 0.00016617774963378906, 4.172325134277344e-06, 0.006610870361328125, 0.12066650390625, 0.00043582916259765625, 0.90966796875, 0.017425537109375, 0.00875091552734375, 1.5735626220703125e-05, 0.45458984375, 0.634765625, 3.302734375, 0.3623046875, 0.441162109375, 0.01294708251953125, 0.08319091796875], "tokens": [284, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 322, 3191, 3414, 432, 322, 1858]}
{"line_number": 339, "line_type": "original", "code": "                         coefficients[i] = 0;", "entropy": 3.123046875, "is_bug_line": true, "sus_score": 0.7970555424690247, "per_token_entropy": [11.15625, 10.6328125, 1.302734375, 0.2763671875, 0.04339599609375, 0.296875, 3.373046875, 0.66259765625, 0.362060546875], "tokens": [8240, 26370, 77, 91, 79, 280, 225, 34, 45]}
{"line_number": 339, "line_type": "generated", "code": "\n     * Get the height of the tableau.\n     * @return height of the tableau\n     */\n    protected final int getHeight() {\n        return tableau.getRowDimension();\n    }\n\n    /**\n     * Get a specific entry of the tableau.", "entropy": 0.126220703125, "is_bug_line": true, "sus_score": 0.7970555424690247, "per_token_entropy": [1.1689453125, 0.2861328125, 0.258056640625, 0.026031494140625, 0.37353515625, 0.005046844482421875, 0.0023326873779296875, 0.005878448486328125, 0.0004105567932128906, 0.040435791015625, 0.0406494140625, 0.0015773773193359375, 0.019805908203125, 0.0016632080078125, 0.07208251953125, 0.0026531219482421875, 0.0022068023681640625, 0.0027523040771484375, 0.0001461505889892578, 0.029571533203125, 0.005489349365234375, 0.0400390625, 0.0380859375, 0.040985107421875, 0.0003707408905029297, 0.0013456344604492188, 0.0004916191101074219, 0.00029468536376953125, 0.000644683837890625, 0.02984619140625, 0.0020580291748046875, 0.00467681884765625, 1.430511474609375e-06, 4.303455352783203e-05, 0.00012242794036865234, 2.9802322387695312e-06, 0.00504302978515625, 0.02734375, 0.000110626220703125, 0.1431884765625, 0.01361846923828125, 0.14306640625, 4.00543212890625e-05, 0.429931640625, 1.279296875, 1.076171875, 0.2059326171875, 0.623046875, 0.0097198486328125, 0.061126708984375, 0.0011682510375976562, 0.040618896484375], "tokens": [275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452, 275, 569, 284, 2522, 1158, 629, 622, 3024, 346, 301, 291, 442, 1858, 4452, 32, 30093, 9883, 473, 284, 320, 446, 1022, 275, 319, 1390, 312, 2818, 3414, 432, 322, 1858, 4452, 32]}
{"line_number": 70, "line_type": "original", "code": "", "entropy": 4.24609375, "is_bug_line": false, "sus_score": 0.6945320963859558, "per_token_entropy": [4.24609375], "tokens": [203]}
{"line_number": 70, "line_type": "generated", "code": "\n     * @param maximize whether to maximize or minimize\n     * @return tableau\n     */\n    private double[][] createTableau(boolean maximize) {\n\n        // Build the tableau\n        double[][] tableau = new double[getNumRows()][", "entropy": 0.372314453125, "is_bug_line": false, "sus_score": 0.6945320963859558, "per_token_entropy": [0.26806640625, 0.05230712890625, 0.283203125, 0.1212158203125, 0.84228515625, 0.1602783203125, 1.2998046875, 0.533203125, 0.0751953125, 0.003162384033203125, 0.8642578125, 0.17626953125, 0.344970703125, 0.018768310546875, 0.005672454833984375, 0.0016012191772460938, 1.08203125, 0.0019817352294921875, 0.8388671875, 0.10809326171875, 0.0149993896484375, 0.51611328125, 0.30615234375, 0.0256500244140625, 0.0019273757934570312, 0.00033545494079589844, 5.960464477539062e-07, 0.00014674663543701172, 0.97509765625, 0.0005536079406738281, 4.887580871582031e-06, 0.007564544677734375, 0.008758544921875, 0.884765625, 0.4013671875, 2.62109375, 0.5341796875, 1.2626953125, 0.028594970703125, 1.30078125, 1.3369140625, 0.065185546875, 0.345458984375, 0.01099395751953125, 0.18798828125, 0.370361328125, 0.003505706787109375, 0.007568359375, 0.6767578125, 0.2978515625, 0.00682830810546875, 0.07989501953125], "tokens": [275, 319, 477, 753, 1769, 12178, 4946, 372, 1769, 12178, 556, 32758, 275, 319, 477, 601, 1858, 4452, 275, 569, 284, 945, 2064, 11336, 1487, 1599, 4452, 26, 4398, 1769, 12178, 27, 301, 584, 434, 5238, 322, 1858, 4452, 291, 2064, 11336, 1858, 4452, 280, 537, 2064, 77, 15207, 7252, 346, 1674]}
{"line_number": 333, "line_type": "original", "code": "                coefficients[i] =", "entropy": 3.322265625, "is_bug_line": true, "sus_score": 0.6782548427581787, "per_token_entropy": [6.4453125, 10.34375, 2.65625, 0.246826171875, 0.10687255859375, 0.13720703125], "tokens": [2071, 26370, 77, 91, 79, 280]}
{"line_number": 333, "line_type": "generated", "code": "\n     */\n    protected int getWidth() {\n        return tableau.getColumnDimension() + 1;\n    }\n\n    /**\n     * Get the height of the tableau.\n     * @return height of the tableau", "entropy": 0.114501953125, "is_bug_line": true, "sus_score": 0.6782548427581787, "per_token_entropy": [0.71484375, 0.07037353515625, 0.026885986328125, 0.384521484375, 0.025299072265625, 0.0017061233520507812, 0.00899505615234375, 0.003047943115234375, 0.00344085693359375, 0.18408203125, 0.039825439453125, 0.32373046875, 3.814697265625e-06, 0.00621795654296875, 0.027740478515625, 0.0007991790771484375, 0.6484375, 0.96435546875, 0.73095703125, 0.0288848876953125, 0.07281494140625, 0.280029296875, 0.0004801750183105469, 0.09716796875, 0.00777435302734375, 0.0116424560546875, 1.823902130126953e-05, 0.05438232421875, 0.006755828857421875, 0.1644287109375, 0.00408172607421875, 0.0032444000244140625, 0.00408172607421875, 0.00017118453979492188, 0.0296630859375, 0.01230621337890625, 1.5616416931152344e-05, 0.00959014892578125, 0.0003910064697265625, 0.078125, 0.003589630126953125, 0.002971649169921875, 0.002727508544921875, 7.331371307373047e-05], "tokens": [275, 569, 284, 2522, 629, 622, 2611, 346, 301, 291, 442, 1858, 4452, 32, 19239, 9883, 346, 474, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 2384, 432, 322, 1858, 4452, 32, 275, 319, 477, 601, 2384, 432, 322, 1858, 4452]}
{"line_number": 328, "line_type": "original", "code": "        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());", "entropy": 1.0283203125, "is_bug_line": false, "sus_score": 0.674627423286438, "per_token_entropy": [3.115234375, 3.939453125, 4.70703125, 0.08270263671875, 0.054656982421875, 7.84375, 2.025390625, 0.81591796875, 0.0168914794921875, 0.050994873046875, 0.95849609375, 0.00992584228515625, 0.08746337890625, 0.59033203125, 0.067138671875, 0.0015401840209960938, 0.0305023193359375, 0.00010156631469726562, 0.0011501312255859375, 0.11968994140625, 0.00409698486328125, 9.655952453613281e-06, 0.0006799697875976562, 0.1529541015625], "tokens": [351, 2064, 4630, 17152, 280, 6550, 2352, 610, 744, 1018, 225, 34, 499, 622, 2711, 26, 6390, 2352, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 328, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Solves the tableau.\n     *\n     * @return true if a solution was found\n     * @throws NoFeasibleSolutionException if no solution can be found\n     */\n    protected boolean solve() {\n        // check if the", "entropy": 0.54345703125, "is_bug_line": false, "sus_score": 0.674627423286438, "per_token_entropy": [0.322021484375, 0.2802734375, 0.218994140625, 0.0287017822265625, 0.0277252197265625, 7.11679458618164e-05, 3.41796875, 0.00039458274841308594, 0.306396484375, 1.880859375, 0.00901031494140625, 1.46875, 0.05242919921875, 0.1234130859375, 1.994140625, 0.01328277587890625, 0.09539794921875, 0.484619140625, 1.1494140625, 0.09637451171875, 1.08984375, 0.52099609375, 1.138671875, 0.0194549560546875, 0.56396484375, 1.0234375, 0.08062744140625, 0.1104736328125, 1.0537109375, 0.005954742431640625, 0.0005702972412109375, 0.007289886474609375, 0.00014770030975341797, 0.10650634765625, 0.6640625, 0.69189453125, 1.3857421875, 0.0152740478515625, 0.049224853515625, 0.247802734375, 0.160400390625, 0.0275115966796875, 0.310546875, 0.05108642578125, 0.0227813720703125, 0.08416748046875, 0.59326171875, 0.286376953125, 1.48828125, 2.564453125, 0.77490234375, 1.1328125], "tokens": [284, 320, 446, 1022, 275, 319, 18729, 4954, 322, 1858, 4452, 32, 275, 319, 275, 319, 477, 601, 861, 415, 312, 5295, 1597, 2431, 275, 319, 477, 5117, 3139, 9008, 38294, 13628, 984, 415, 1289, 5295, 883, 526, 2431, 275, 569, 284, 2522, 1905, 10932, 346, 301, 291, 434, 1505, 415, 322]}
{"line_number": 329, "line_type": "original", "code": "        for (int i = 0; i < coefficients.length; i++) {", "entropy": 0.8310546875, "is_bug_line": true, "sus_score": 0.6741787791252136, "per_token_entropy": [5.07421875, 2.732421875, 0.00960540771484375, 0.035064697265625, 0.7333984375, 0.00984954833984375, 0.578125, 0.076171875, 0.0148162841796875, 0.002864837646484375, 0.0149688720703125, 5.359375, 0.07366943359375, 0.00884246826171875, 0.08428955078125, 0.1092529296875, 0.01015472412109375, 0.036651611328125], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 26370, 32, 1322, 45, 595, 1987, 301]}
{"line_number": 329, "line_type": "generated", "code": "\n\n    /**\n     * Get the index of the basic variable for the specified column.\n     * @param column the column\n     * @return the index of the basic variable for the specified column\n     */\n    protected Integer getBasicColumn(final int column) {\n       ", "entropy": 0.35205078125, "is_bug_line": true, "sus_score": 0.6741787791252136, "per_token_entropy": [1.173828125, 0.08282470703125, 0.03314208984375, 1.1205673217773438e-05, 2.9921875, 0.15380859375, 1.9580078125, 0.037750244140625, 0.08172607421875, 0.2093505859375, 0.0660400390625, 0.939453125, 0.556640625, 0.60302734375, 1.32421875, 0.47021484375, 0.032073974609375, 0.000446319580078125, 0.67041015625, 0.00650787353515625, 0.3837890625, 1.171875, 0.2705078125, 0.798828125, 0.0005726814270019531, 0.0012378692626953125, 0.00724029541015625, 0.368408203125, 0.43408203125, 0.06634521484375, 0.036407470703125, 0.039764404296875, 0.01849365234375, 0.95703125, 0.053131103515625, 0.05078125, 0.00836181640625, 0.63232421875, 0.23193359375, 0.00934600830078125, 0.3837890625, 0.51171875, 0.001689910888671875, 0.00946807861328125, 0.2144775390625, 0.007167816162109375, 0.199951171875, 0.006092071533203125, 0.0007243156433105469, 0.0008392333984375, 0.0020961761474609375, 0.04876708984375], "tokens": [446, 1022, 275, 319, 1390, 322, 1650, 432, 322, 6550, 2677, 436, 322, 3191, 2623, 32, 275, 319, 477, 753, 2623, 322, 2623, 275, 319, 477, 601, 322, 1650, 432, 322, 6550, 2677, 436, 322, 3191, 2623, 275, 569, 284, 2522, 4401, 622, 7099, 2137, 26, 3220, 629, 2623, 27, 301, 291]}
{"line_number": 886, "line_type": "original", "code": "", "entropy": 0.27294921875, "is_bug_line": false, "sus_score": 0.6721373796463013, "per_token_entropy": [0.27294921875], "tokens": [203]}
{"line_number": 886, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6721373796463013, "per_token_entropy": [], "tokens": []}
{"line_number": 279, "line_type": "original", "code": "                    return null;", "entropy": 3.70703125, "is_bug_line": false, "sus_score": 0.6715584993362427, "per_token_entropy": [8.078125, 3.779296875, 2.955078125, 0.01172637939453125], "tokens": [4696, 442, 744, 45]}
{"line_number": 279, "line_type": "generated", "code": "\n        return new RealPointValuePair(coefficients, mostNegative);\n    }\n\n    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p", "entropy": 0.1640625, "is_bug_line": false, "sus_score": 0.6715584993362427, "per_token_entropy": [0.373779296875, 0.63720703125, 0.03076171875, 0.06695556640625, 0.000255584716796875, 3.266334533691406e-05, 0.01097869873046875, 1.404296875, 0.003688812255859375, 0.01434326171875, 0.157470703125, 0.000274658203125, 0.05047607421875, 0.03326416015625, 0.0014314651489257812, 0.3271484375, 0.0599365234375, 0.044189453125, 0.0002090930938720703, 1.029296875, 0.1627197265625, 1.873046875, 1.224609375, 0.72412109375, 0.036590576171875, 0.0006513595581054688, 0.129638671875, 0.0007839202880859375, 0.0005626678466796875, 0.0015001296997070312, 0.00027680397033691406, 0.060302734375, 0.00032711029052734375, 0.0014781951904296875, 0.003570556640625, 0.0185089111328125, 0.010955810546875, 0.0009093284606933594, 0.0005097389221191406, 0.0009579658508300781, 0.002666473388671875, 0.0012044906616210938, 0.0006442070007324219, 0.00047659873962402344, 0.002445220947265625, 0.00786590576171875, 0.00016510486602783203, 0.0030269622802734375, 0.0010976791381835938, 0.00018548965454101562, 0.01065826416015625, 8.940696716308594e-06], "tokens": [291, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 4630, 17152, 293, 284, 320, 446, 1022, 275, 319, 1390, 322, 1550, 5295, 32, 275, 319, 333, 98, 48, 275, 319, 3088, 1204, 588, 19596, 111, 1395, 526, 3823, 1932, 436, 458, 372, 526, 322, 24824, 5295, 32, 275, 319, 576, 98]}
{"line_number": 344, "line_type": "original", "code": "        return new RealPointValuePair(coefficients, f.getValue(coefficients));", "entropy": 2.109375, "is_bug_line": false, "sus_score": 0.6651862263679504, "per_token_entropy": [5.73046875, 2.197265625, 7.30859375, 4.1328125, 1.0537109375, 0.1259765625, 0.12176513671875, 3.24609375, 0.004459381103515625, 0.1011962890625, 4.82421875, 3.8125, 1.615234375, 1.4033203125, 0.08135986328125, 0.0003237724304199219, 0.09320068359375], "tokens": [351, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 296, 32, 6682, 26, 34036, 101, 876]}
{"line_number": 344, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Get the entry in the specified row and column.\n     * @param row row index\n     * @param column column index\n     * @return entry at (row, column)\n     */\n    protected final double getEntry(final int", "entropy": 0.209716796875, "is_bug_line": false, "sus_score": 0.6651862263679504, "per_token_entropy": [0.183349609375, 0.0399169921875, 0.188232421875, 0.0185546875, 0.01561737060546875, 3.075599670410156e-05, 0.50830078125, 0.56591796875, 1.8349609375, 0.7900390625, 0.2135009765625, 1.9599609375, 0.09967041015625, 0.035491943359375, 0.0031909942626953125, 0.15771484375, 0.00720977783203125, 0.00011324882507324219, 0.11474609375, 0.0019207000732421875, 0.1259765625, 0.469970703125, 0.124267578125, 0.12213134765625, 2.5033950805664062e-06, 8.916854858398438e-05, 0.0016584396362304688, 0.08587646484375, 0.0205230712890625, 0.00168609619140625, 0.0054168701171875, 0.0009446144104003906, 0.0011272430419921875, 0.00043654441833496094, 0.99609375, 1.2548828125, 0.533203125, 0.01149749755859375, 0.0037517547607421875, 0.038909912109375, 0.0035839080810546875, 0.08001708984375, 0.03070068359375, 0.004817962646484375, 0.0284423828125, 0.2020263671875, 0.0022144317626953125, 0.0001093149185180664, 5.459785461425781e-05, 0.000476837158203125, 0.0191497802734375, 0.00035953521728515625], "tokens": [284, 320, 446, 1022, 275, 319, 1390, 322, 3414, 328, 322, 3191, 2698, 461, 2623, 32, 275, 319, 477, 753, 2698, 2698, 1650, 275, 319, 477, 753, 2623, 2623, 1650, 275, 319, 477, 601, 3414, 821, 308, 643, 30, 2623, 27, 275, 569, 284, 2522, 1158, 2064, 622, 2711, 26, 3220, 629]}
{"line_number": 149, "line_type": "original", "code": "                // initialize the constraint rows", "entropy": 3.580078125, "is_bug_line": false, "sus_score": 0.6635172367095947, "per_token_entropy": [6.37109375, 3.689453125, 4.375, 1.025390625, 2.82421875, 3.19921875], "tokens": [2071, 434, 7379, 322, 13118, 5760]}
{"line_number": 149, "line_type": "generated", "code": "\n        for (LinearConstraint constraint : constraints) {\n            double rhs = constraint.getValue();\n            if (rhs < 0) {\n                if (constraint.getRelationship() == Relationship.LEQ) {\n                    constraint = new LinearConstraint(constraint.get", "entropy": 0.2052001953125, "is_bug_line": false, "sus_score": 0.6635172367095947, "per_token_entropy": [0.316650390625, 0.1666259765625, 0.005893707275390625, 0.305908203125, 0.00035381317138671875, 0.227783203125, 0.03265380859375, 0.061431884765625, 0.0016527175903320312, 0.004238128662109375, 0.06903076171875, 1.4912109375, 0.7275390625, 0.045867919921875, 0.1422119140625, 7.62939453125e-05, 0.03399658203125, 0.013580322265625, 0.1011962890625, 0.1864013671875, 0.0740966796875, 0.61767578125, 0.8154296875, 0.095703125, 0.0009975433349609375, 0.0921630859375, 0.0034084320068359375, 0.0517578125, 2.107421875, 0.06378173828125, 0.1572265625, 0.06378173828125, 0.0174713134765625, 0.0018405914306640625, 0.02044677734375, 0.046173095703125, 0.003925323486328125, 0.0001157522201538086, 0.414306640625, 1.6689300537109375e-06, 0.0055389404296875, 0.007251739501953125, 0.0231781005859375, 1.0048828125, 0.004627227783203125, 0.595703125, 0.0132293701171875, 0.0111236572265625, 0.114501953125, 0.2342529296875, 0.062164306640625, 0.0116729736328125], "tokens": [291, 436, 308, 9420, 9012, 13118, 499, 13383, 27, 301, 324, 2064, 9322, 280, 13118, 32, 6682, 473, 324, 415, 308, 14312, 333, 225, 34, 27, 301, 400, 415, 308, 12704, 32, 371, 13175, 346, 610, 38246, 32, 815, 67, 27, 301, 528, 13118, 280, 537, 13935, 9012, 26, 12704, 32, 371]}
{"line_number": 132, "line_type": "original", "code": "        // initialize the objective function rows", "entropy": 2.45703125, "is_bug_line": false, "sus_score": 0.6628478765487671, "per_token_entropy": [6.41796875, 1.595703125, 2.39453125, 0.402099609375, 2.78125, 0.493408203125, 3.125], "tokens": [351, 434, 7379, 322, 25110, 667, 5760]}
{"line_number": 132, "line_type": "generated", "code": "\n\n        return matrix;\n    }\n\n    /**\n     * Initialize the tableau.\n     */\n    protected void initialize() {\n        // find the initial basic feasible solution\n        RealVector b = findInitialBasicFeasibleSolution();\n\n        // update the tableau with the", "entropy": 0.5576171875, "is_bug_line": false, "sus_score": 0.6628478765487671, "per_token_entropy": [1.44140625, 0.68994140625, 0.00958251953125, 0.0005335807800292969, 0.339599609375, 0.00113677978515625, 0.379150390625, 0.07830810546875, 0.09228515625, 0.00022220611572265625, 1.322265625, 0.453857421875, 0.9052734375, 0.0016241073608398438, 1.0283203125, 0.23388671875, 0.1427001953125, 0.005207061767578125, 0.278564453125, 0.0244293212890625, 0.0006256103515625, 0.0015087127685546875, 0.004852294921875, 0.4521484375, 1.0380859375, 2.76171875, 0.828125, 1.1689453125, 0.6396484375, 0.40185546875, 0.0003948211669921875, 0.04290771484375, 0.44189453125, 3.2109375, 0.40185546875, 1.2705078125, 0.537109375, 1.6640625, 0.87158203125, 0.196044921875, 0.046600341796875, 0.00027680397033691406, 0.018035888671875, 0.048980712890625, 0.611328125, 0.0709228515625, 3.099609375, 0.1478271484375, 0.322265625, 0.003612518310546875, 1.0302734375, 0.228515625], "tokens": [584, 442, 5045, 45, 284, 320, 446, 1022, 275, 319, 8958, 322, 1858, 4452, 32, 275, 569, 284, 2522, 763, 7379, 346, 301, 291, 434, 2290, 322, 2815, 6550, 5246, 38294, 5295, 291, 11443, 2863, 323, 280, 2290, 4678, 7099, 9008, 38294, 13628, 473, 584, 434, 1974, 322, 1858, 4452, 623, 322]}
{"line_number": 146, "line_type": "original", "code": "                        getInvertedCoeffiecientSum(objectiveCoefficients);", "entropy": 2.185546875, "is_bug_line": false, "sus_score": 0.6628146171569824, "per_token_entropy": [9.1875, 5.77734375, 2.935546875, 0.0128173828125, 0.431396484375, 0.001300811767578125, 0.003398895263671875, 0.00518798828125, 0.54296875, 7.890625, 0.5654296875, 0.01123046875, 1.0380859375], "tokens": [6797, 622, 383, 17445, 34345, 32372, 1606, 4934, 26, 29904, 8973, 101, 293]}
{"line_number": 146, "line_type": "generated", "code": "\n     */\n    protected List<LinearConstraint> getNormalizedConstraints() {\n        List<LinearConstraint> newConstraints = new ArrayList<LinearConstraint>(constraints.size());\n        for (LinearConstraint constraint : constraints) {\n            if (constraint.getRelationship() ==", "entropy": 0.1712646484375, "is_bug_line": false, "sus_score": 0.6628146171569824, "per_token_entropy": [0.619140625, 0.0521240234375, 0.014862060546875, 0.64794921875, 0.0165863037109375, 0.0009784698486328125, 0.0012760162353515625, 0.0006775856018066406, 0.00019621849060058594, 0.0032501220703125, 0.003948211669921875, 0.0002734661102294922, 0.0019140243530273438, 0.0019464492797851562, 0.25244140625, 0.30908203125, 0.0009279251098632812, 0.0013561248779296875, 0.00032782554626464844, 4.553794860839844e-05, 1.3251953125, 0.0230255126953125, 0.006671905517578125, 0.13818359375, 0.01372528076171875, 0.11578369140625, 0.0013380050659179688, 0.0005407333374023438, 1.1630859375, 0.0560302734375, 0.12042236328125, 0.00037026405334472656, 0.0035724639892578125, 0.10986328125, 0.08612060546875, 0.006969451904296875, 0.294677734375, 0.00032782554626464844, 0.2486572265625, 0.016143798828125, 0.01313018798828125, 0.00104522705078125, 0.0028514862060546875, 0.052490234375, 0.96630859375, 0.07562255859375, 0.515625, 0.0036602020263671875, 1.3056640625, 0.017791748046875, 0.0297698974609375, 0.259765625], "tokens": [275, 569, 284, 2522, 1682, 46, 9420, 9012, 48, 622, 29814, 9183, 346, 301, 291, 1682, 46, 9420, 9012, 48, 537, 9183, 280, 537, 5059, 46, 9420, 9012, 1563, 15106, 32, 891, 1035, 291, 436, 308, 9420, 9012, 13118, 499, 13383, 27, 301, 324, 415, 308, 12704, 32, 371, 13175, 346, 610]}
{"line_number": 192, "line_type": "original", "code": "", "entropy": 3.087890625, "is_bug_line": false, "sus_score": 0.6580145359039307, "per_token_entropy": [3.087890625], "tokens": [203]}
{"line_number": 192, "line_type": "generated", "code": "\n    /**\n     * Get the number of slack variables.\n     * @return number of slack variables\n     */\n    public int getNumSlackVariables() {\n        return getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);", "entropy": 0.1456298828125, "is_bug_line": false, "sus_score": 0.6580145359039307, "per_token_entropy": [0.273193359375, 0.051910400390625, 0.1513671875, 0.00026297569274902344, 0.1973876953125, 0.391357421875, 1.5283203125, 0.003559112548828125, 0.56396484375, 0.065673828125, 1.1162109375, 0.09466552734375, 0.004108428955078125, 0.035400390625, 0.005077362060546875, 0.20654296875, 0.0022411346435546875, 0.0197601318359375, 0.00855255126953125, 0.125244140625, 0.004581451416015625, 0.00580596923828125, 0.90234375, 0.036956787109375, 0.10992431640625, 0.0645751953125, 0.008514404296875, 0.00531005859375, 0.0014324188232421875, 0.0158843994140625, 0.1414794921875, 0.51806640625, 0.025177001953125, 0.00013446807861328125, 0.00013566017150878906, 0.00022304058074951172, 0.0168304443359375, 0.00015079975128173828, 0.115478515625, 2.5510787963867188e-05, 0.0180816650390625, 0.100341796875, 0.59228515625, 0.0004887580871582031, 3.4928321838378906e-05, 7.11679458618164e-05, 0.00014317035675048828, 0.0128021240234375, 0.0004258155822753906, 0.016204833984375, 1.1920928955078125e-06, 0.01323699951171875], "tokens": [284, 1022, 275, 319, 1390, 322, 1451, 432, 28039, 4886, 32, 275, 319, 477, 601, 1451, 432, 28039, 4886, 275, 569, 284, 562, 629, 44929, 31185, 10165, 346, 301, 291, 442, 622, 9012, 620, 18330, 26, 13175, 32, 815, 67, 27, 474, 622, 9012, 620, 18330, 26, 13175, 32, 57, 2697, 293]}
{"line_number": 293, "line_type": "original", "code": "        int width = getWidth() - numArtificialVariables - 1;", "entropy": 1.34375, "is_bug_line": false, "sus_score": 0.6553982496261597, "per_token_entropy": [3.474609375, 6.42578125, 4.2109375, 0.0134735107421875, 0.52685546875, 0.0726318359375, 0.9599609375, 0.025787353515625, 3.748046875, 0.0272369384765625, 0.0002522468566894531, 0.00411224365234375, 1.890625, 0.0687255859375, 0.03192138671875, 0.018890380859375], "tokens": [351, 629, 1861, 280, 622, 2611, 346, 429, 1929, 5271, 31251, 10165, 429, 225, 35, 45]}
{"line_number": 293, "line_type": "generated", "code": "\n        return new RealPointValuePair(coefficients, mostNegative);\n    }\n\n    /**\n     * Solve the given LP.\n     * @return the solution\n     * @throws MathUserException if the problem is unbounded or unfeasible\n     */\n    public Real", "entropy": 0.4677734375, "is_bug_line": false, "sus_score": 0.6553982496261597, "per_token_entropy": [0.255859375, 1.2236328125, 0.055328369140625, 0.10791015625, 0.0004436969757080078, 0.00010263919830322266, 0.01495361328125, 0.9853515625, 0.006439208984375, 0.035308837890625, 0.467529296875, 0.00020802021026611328, 0.04510498046875, 0.061187744140625, 0.001834869384765625, 0.5068359375, 0.0924072265625, 0.05242919921875, 3.612041473388672e-05, 2.64453125, 0.2303466796875, 2.802734375, 1.0615234375, 0.78515625, 0.09417724609375, 0.1290283203125, 0.650390625, 0.497802734375, 1.1533203125, 0.457763671875, 0.74267578125, 0.423583984375, 0.01318359375, 0.0975341796875, 1.732421875, 0.41064453125, 0.034515380859375, 0.098876953125, 0.43359375, 1.1552734375, 0.254638671875, 0.82666015625, 0.01360321044921875, 0.90380859375, 1.564453125, 0.376220703125, 0.0034427642822265625, 0.0931396484375, 0.204345703125, 0.0202484130859375, 0.46826171875, 0.03192138671875], "tokens": [291, 442, 537, 11443, 1943, 14782, 26, 34036, 101, 30, 4630, 17152, 293, 284, 320, 446, 1022, 275, 319, 47005, 322, 2702, 15717, 32, 275, 319, 477, 601, 322, 5295, 275, 319, 477, 5117, 4175, 1240, 984, 415, 322, 3708, 438, 707, 28959, 556, 707, 1225, 38294, 275, 569, 284, 562, 11443]}
{"line_number": 459, "line_type": "original", "code": "        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;", "entropy": 2.3984375, "is_bug_line": false, "sus_score": 0.6547695398330688, "per_token_entropy": [6.10546875, 3.66015625, 9.1484375, 0.01407623291015625, 0.017791748046875, 0.0020809173583984375, 6.8203125, 5.6875, 0.6044921875, 0.006855010986328125, 4.8671875, 3.017578125, 0.24609375, 0.0006046295166015625, 1.720703125, 0.0572509765625, 0.00160980224609375, 1.203125], "tokens": [351, 442, 21432, 705, 3910, 17152, 1018, 1929, 24453, 10165, 499, 1929, 24453, 10165, 429, 225, 35, 45]}
{"line_number": 459, "line_type": "generated", "code": "\n\n      } catch (ClassCastException e) {\n          return false;\n      }\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int hashCode() {\n        return 31 * (31 * (31 * (31 * (3", "entropy": 0.1739501953125, "is_bug_line": false, "sus_score": 0.6547695398330688, "per_token_entropy": [0.763671875, 0.00689697265625, 0.09161376953125, 0.04150390625, 0.08160400390625, 0.000331878662109375, 1.015625, 0.002582550048828125, 0.0011548995971679688, 0.44580078125, 0.067626953125, 0.00212860107421875, 0.00016939640045166016, 0.0170440673828125, 0.00021445751190185547, 0.93115234375, 0.0007181167602539062, 0.15625, 0.04937744140625, 0.205322265625, 0.0003032684326171875, 0.00431060791015625, 0.0004146099090576172, 0.00949859619140625, 0.01262664794921875, 0.00033593177795410156, 0.002162933349609375, 0.00426483154296875, 0.08935546875, 0.0008602142333984375, 0.00452423095703125, 0.0014696121215820312, 0.51513671875, 0.497802734375, 1.3466796875, 0.30126953125, 0.62158203125, 0.0760498046875, 1.11328125, 0.2099609375, 0.0035114288330078125, 0.0247650146484375, 0.05670166015625, 0.045257568359375, 0.0006051063537597656, 0.025238037109375, 0.05743408203125, 0.03692626953125, 0.0006709098815917969, 0.0192718505859375, 0.04254150390625, 0.04034423828125], "tokens": [1687, 320, 2368, 308, 1339, 36932, 484, 27, 301, 616, 442, 901, 45, 397, 320, 284, 320, 446, 1022, 3088, 18446, 111, 569, 284, 477, 1788, 284, 562, 629, 17772, 346, 301, 291, 442, 225, 37, 35, 319, 308, 37, 35, 319, 308, 37, 35, 319, 308, 37, 35, 319, 308, 37]}
{"line_number": 300, "line_type": "original", "code": "            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());", "entropy": 1.5283203125, "is_bug_line": false, "sus_score": 0.6494929194450378, "per_token_entropy": [5.46875, 5.2265625, 1.12109375, 3.5859375, 0.59033203125, 8.421875, 0.798828125, 0.07513427734375, 0.017730712890625, 0.06622314453125, 1.5283203125, 4.06640625, 0.281982421875, 0.0027294158935546875, 0.09033203125, 1.7236328125, 0.05511474609375, 0.0009012222290039062, 0.0012559890747070312, 1.6943359375, 1.0595703125, 7.796287536621094e-05, 0.004734039306640625, 0.80078125], "tokens": [1468, 5045, 77, 91, 1674, 1644, 429, 225, 35, 79, 280, 622, 2711, 26, 91, 474, 225, 35, 30, 622, 68, 3914, 3457, 1035]}
{"line_number": 300, "line_type": "generated", "code": "\n     * </p>\n     * @param multiple multiple to subtract\n     * @param row row to subtract from\n     * @param rowMultiple row multiple\n     */\n    private void subtractRow(final double multiple, final int row, final double rowMultiple) {", "entropy": 0.255859375, "is_bug_line": false, "sus_score": 0.6494929194450378, "per_token_entropy": [0.7158203125, 0.028533935546875, 0.822265625, 0.004756927490234375, 0.015838623046875, 0.035797119140625, 0.0012350082397460938, 0.1402587890625, 0.0005869865417480469, 1.7568359375, 1.21484375, 0.7109375, 0.39013671875, 0.1436767578125, 7.867813110351562e-05, 0.0005021095275878906, 9.34600830078125e-05, 1.1025390625, 0.66455078125, 0.0426025390625, 0.0799560546875, 0.1461181640625, 0.018829345703125, 0.001911163330078125, 0.0006556510925292969, 0.0009794235229492188, 1.0546875, 0.465576171875, 0.78369140625, 0.3837890625, 0.38525390625, 0.1448974609375, 0.0164947509765625, 0.66552734375, 0.0048828125, 0.0229949951171875, 0.0701904296875, 0.1011962890625, 0.057861328125, 0.0557861328125, 0.00116729736328125, 4.947185516357422e-05, 0.3134765625, 0.0247650146484375, 0.001689910888671875, 0.0010004043579101562, 0.7001953125, 0.003082275390625, 0.0024471282958984375, 7.390975952148438e-05, 0.0012874603271484375, 0.0015096664428710938], "tokens": [275, 319, 576, 98, 48, 275, 319, 477, 753, 4609, 4609, 372, 27799, 275, 319, 477, 753, 2698, 2698, 372, 27799, 645, 275, 319, 477, 753, 2698, 11726, 2698, 4609, 275, 569, 284, 945, 763, 27799, 2352, 26, 3220, 2064, 4609, 30, 1158, 629, 2698, 30, 1158, 2064, 2698, 11726, 27, 301]}
{"line_number": 296, "line_type": "original", "code": "        for (int i = 0; i < height; i++) {", "entropy": 0.83544921875, "is_bug_line": false, "sus_score": 0.6485286951065063, "per_token_entropy": [4.765625, 2.5625, 0.01214599609375, 0.04888916015625, 0.4853515625, 0.00391387939453125, 0.249267578125, 0.0308380126953125, 0.01522064208984375, 0.0030307769775390625, 0.009185791015625, 4.88671875, 0.2301025390625, 0.03631591796875, 0.00516510009765625, 0.0248260498046875], "tokens": [351, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 2384, 45, 595, 1987, 301]}
{"line_number": 296, "line_type": "generated", "code": "\n\n    /**\n     * Get the pivot row for the given column.\n     * @param col column to find a pivot for\n     * @return the pivot row for the given column\n     */\n    private int getPivotRow(final int col) {\n        double min", "entropy": 0.42529296875, "is_bug_line": false, "sus_score": 0.6485286951065063, "per_token_entropy": [1.4384765625, 0.097900390625, 0.06561279296875, 6.341934204101562e-05, 1.197265625, 0.1512451171875, 3.5234375, 0.92822265625, 1.7509765625, 0.208740234375, 0.56201171875, 0.525390625, 0.35400390625, 0.1881103515625, 0.00030875205993652344, 0.38720703125, 0.0025577545166015625, 0.2900390625, 0.701171875, 0.67041015625, 1.0947265625, 0.98974609375, 0.2034912109375, 1.09375, 0.0305938720703125, 0.0012769699096679688, 0.0008187294006347656, 0.1259765625, 0.52001953125, 0.568359375, 0.009765625, 0.5234375, 0.0138702392578125, 0.060394287109375, 0.003509521484375, 0.36279296875, 0.1722412109375, 0.01427459716796875, 0.339599609375, 0.5048828125, 0.1549072265625, 0.01427459716796875, 0.011993408203125, 0.0173187255859375, 0.12396240234375, 0.00423431396484375, 0.00110626220703125, 0.0028781890869140625, 0.002025604248046875, 0.09136962890625, 0.7001953125, 1.3125], "tokens": [446, 1022, 275, 319, 1390, 322, 20991, 2698, 436, 322, 2702, 2623, 32, 275, 319, 477, 753, 932, 2623, 372, 2290, 312, 20991, 436, 275, 319, 477, 601, 322, 20991, 2698, 436, 322, 2702, 2623, 275, 569, 284, 945, 629, 622, 28267, 2352, 26, 3220, 629, 932, 27, 301, 291, 2064, 1847]}
{"line_number": 297, "line_type": "original", "code": "            for (int j = 0; j < width - 1; j++) {", "entropy": 1.0126953125, "is_bug_line": false, "sus_score": 0.6475475430488586, "per_token_entropy": [6.1953125, 2.822265625, 0.0149993896484375, 0.063232421875, 1.505859375, 0.005008697509765625, 1.6533203125, 0.03253173828125, 0.0202178955078125, 0.0108642578125, 0.02191162109375, 3.92578125, 2.53515625, 0.30029296875, 0.0343017578125, 0.02117919921875, 0.024871826171875, 0.0075836181640625, 0.03662109375], "tokens": [1468, 436, 308, 410, 594, 280, 225, 34, 45, 594, 333, 1861, 429, 225, 35, 45, 594, 1987, 301]}
{"line_number": 297, "line_type": "generated", "code": "    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair get", "entropy": 0.145263671875, "is_bug_line": false, "sus_score": 0.6475475430488586, "per_token_entropy": [2.2265625, 0.25341796875, 0.305419921875, 0.0010509490966796875, 1.2236328125, 0.1400146484375, 1.908203125, 0.449462890625, 0.32958984375, 0.0227813720703125, 0.001163482666015625, 0.0899658203125, 0.0019817352294921875, 0.0007243156433105469, 0.002445220947265625, 0.0004646778106689453, 0.04718017578125, 0.00104522705078125, 0.005054473876953125, 0.007076263427734375, 0.0303192138671875, 0.01061248779296875, 0.0006971359252929688, 0.0005779266357421875, 0.0008602142333984375, 0.0026531219482421875, 0.0007724761962890625, 0.0004868507385253906, 0.0002803802490234375, 0.0012178421020507812, 0.0046234130859375, 0.00017940998077392578, 0.0025806427001953125, 0.001552581787109375, 0.00046372413635253906, 0.00757598876953125, 3.635883331298828e-05, 0.00264739990234375, 0.01427459716796875, 0.0006022453308105469, 0.0179290771484375, 0.05633544921875, 0.031402587890625, 0.002880096435546875, 0.01190185546875, 0.01357269287109375, 0.043182373046875, 0.126708984375, 0.1156005859375, 0.0205078125, 0.0014142990112304688, 0.0135498046875], "tokens": [264, 1022, 275, 319, 1390, 322, 1550, 5295, 32, 275, 319, 333, 98, 48, 275, 319, 3088, 1204, 588, 19596, 111, 1395, 526, 3823, 1932, 436, 458, 372, 526, 322, 24824, 5295, 32, 275, 319, 576, 98, 48, 275, 319, 477, 601, 1550, 5295, 275, 569, 284, 2522, 11443, 1943, 14782, 622]}
{"line_number": 302, "line_type": "original", "code": "        this.tableau = new RealMatrixImpl(matrix);", "entropy": 1.451171875, "is_bug_line": false, "sus_score": 0.6467024087905884, "per_token_entropy": [2.91796875, 6.12109375, 0.11077880859375, 1.1318359375, 0.0005059242248535156, 2.2890625, 1.51171875, 3.279296875, 0.0030231475830078125, 0.0721435546875, 0.01464080810546875, 1.1806640625, 0.2318115234375], "tokens": [351, 458, 32, 1274, 4452, 280, 537, 11443, 4161, 3482, 26, 4873, 293]}
{"line_number": 302, "line_type": "generated", "code": "\n     * </p>\n     * @param minuendRow the row to subtract from\n     * @param subtrahendRow the row to subtract\n     * @param multiple the multiple to subtract\n     */\n    protected void subtract(final int minuend", "entropy": 0.171630859375, "is_bug_line": false, "sus_score": 0.6467024087905884, "per_token_entropy": [0.44091796875, 0.032440185546875, 0.30712890625, 0.003326416015625, 0.01250457763671875, 0.049346923828125, 0.0006723403930664062, 0.2587890625, 0.0005545616149902344, 0.1634521484375, 0.0002474784851074219, 0.00021708011627197266, 0.032684326171875, 0.386474609375, 0.3251953125, 0.14501953125, 0.279541015625, 0.06793212890625, 0.1646728515625, 0.00011217594146728516, 0.00016379356384277344, 0.00013267993927001953, 0.55419921875, 0.002300262451171875, 1.71661376953125e-05, 0.00011587142944335938, 0.00286865234375, 0.01374053955078125, 0.00574493408203125, 0.015289306640625, 0.0152435302734375, 0.072998046875, 0.004497528076171875, 0.0002892017364501953, 0.0005092620849609375, 0.007221221923828125, 0.076416015625, 0.1817626953125, 0.88427734375, 0.25, 0.77001953125, 0.153564453125, 0.0162811279296875, 0.85107421875, 0.0251007080078125, 0.263671875, 1.8798828125, 0.0540771484375, 0.10382080078125, 0.045562744140625, 2.4437904357910156e-05, 1.5020370483398438e-05], "tokens": [275, 319, 576, 98, 48, 275, 319, 477, 753, 1847, 103, 416, 2352, 322, 2698, 372, 27799, 645, 275, 319, 477, 753, 1361, 359, 2371, 416, 2352, 322, 2698, 372, 27799, 275, 319, 477, 753, 4609, 322, 4609, 372, 27799, 275, 569, 284, 2522, 763, 27799, 26, 3220, 629, 1847, 103, 416]}
{"line_number": 189, "line_type": "original", "code": "    public int getNumVariables() {", "entropy": 1.7392578125, "is_bug_line": false, "sus_score": 0.6448713541030884, "per_token_entropy": [4.21875, 5.01171875, 0.65087890625, 0.50390625, 1.66015625, 0.045196533203125, 0.0850830078125], "tokens": [264, 562, 629, 44929, 10165, 346, 301]}
{"line_number": 189, "line_type": "generated", "code": "\n        return 0;\n    }\n\n    /**\n     * Get the offset into the variable array where the slack variables are stored.\n     * @return offset\n     */\n    protected int getSlackVariableOffset() {\n        return getNumObjectiveFunctions() + getConstraintTypeCounts", "entropy": 0.39990234375, "is_bug_line": false, "sus_score": 0.6448713541030884, "per_token_entropy": [0.58349609375, 0.8271484375, 1.3564453125, 0.222412109375, 0.007114410400390625, 0.077880859375, 0.0005478858947753906, 0.166015625, 0.040618896484375, 0.132568359375, 0.0004558563232421875, 0.1976318359375, 0.492919921875, 1.626953125, 1.4814453125, 0.188232421875, 1.8935546875, 1.0185546875, 1.4375, 0.423828125, 0.3203125, 0.1759033203125, 1.279296875, 0.66064453125, 0.057220458984375, 0.021575927734375, 0.00550079345703125, 0.09027099609375, 0.004119873046875, 0.70263671875, 1.109375, 0.00341033935546875, 0.059051513671875, 0.80224609375, 0.82568359375, 0.0014209747314453125, 0.0012617111206054688, 0.0008683204650878906, 0.000263214111328125, 0.0011777877807617188, 0.0012989044189453125, 0.2139892578125, 0.115478515625, 0.78955078125, 0.1593017578125, 0.00033926963806152344, 0.33251953125, 0.223876953125, 0.62353515625, 0.03912353515625, 0.0019989013671875, 0.0011310577392578125], "tokens": [291, 442, 225, 34, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 3401, 1991, 322, 2677, 1417, 2154, 322, 28039, 4886, 884, 7107, 32, 275, 319, 477, 601, 3401, 275, 569, 284, 2522, 629, 622, 31185, 3818, 3457, 346, 301, 291, 442, 44929, 33312, 10905, 346, 474, 622, 9012, 620, 18330]}
