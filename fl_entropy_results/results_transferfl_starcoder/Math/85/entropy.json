{"line_number": 51, "line_type": "original", "code": "    public static double solve(UnivariateRealFunction f, double x0, double x1)", "entropy": 1.16015625, "is_bug_line": false, "sus_score": 0.7291510701179504, "per_token_entropy": [4.6640625, 9.578125, 0.0289306640625, 0.71337890625, 3.041015625, 0.0191497802734375, 0.06488037109375, 0.00013065338134765625, 0.0004322528839111328, 0.001087188720703125, 0.03680419921875, 0.01361083984375, 0.5078125, 3.478515625, 0.03564453125, 0.022216796875, 0.069580078125, 0.032623291015625, 0.00928497314453125, 0.88916015625], "tokens": [264, 562, 907, 2064, 10932, 26, 1061, 27623, 6877, 2447, 296, 30, 2064, 816, 34, 30, 2064, 816, 35, 27]}
{"line_number": 51, "line_type": "generated", "code": "\n     * </ul>\n     * <p>\n     * \n     * @param f the function\n     * @param lowerBound lower bound of the search interval\n     * @param upperBound upper bound of the search interval\n     * @param initial an initial value near", "entropy": 0.2763671875, "is_bug_line": false, "sus_score": 0.7291510701179504, "per_token_entropy": [0.2271728515625, 0.019256591796875, 0.2347412109375, 0.0030651092529296875, 0.1827392578125, 0.2293701171875, 0.0010738372802734375, 2.189453125, 0.0311737060546875, 0.006450653076171875, 0.1011962890625, 0.00027680397033691406, 1.6357421875, 0.0004756450653076172, 0.1265869140625, 0.00952911376953125, 0.2091064453125, 0.2529296875, 0.11883544921875, 0.9833984375, 0.0001226663589477539, 0.0004723072052001953, 0.0038967132568359375, 0.306884765625, 0.8525390625, 0.62841796875, 0.24853515625, 0.77490234375, 0.028839111328125, 0.217529296875, 0.0060577392578125, 0.1217041015625, 1.0132789611816406e-05, 0.0009722709655761719, 0.00027370452880859375, 0.03887939453125, 0.0035915374755859375, 0.00919342041015625, 0.0023479461669921875, 0.001712799072265625, 0.0006155967712402344, 0.0038604736328125, 0.000606536865234375, 0.02239990234375, 8.118152618408203e-05, 0.0006222724914550781, 0.007366180419921875, 0.00897216796875, 1.724609375, 0.007717132568359375, 0.9990234375, 1.7861328125], "tokens": [275, 319, 576, 338, 48, 275, 319, 333, 98, 48, 275, 319, 5384, 319, 477, 753, 296, 322, 667, 275, 319, 477, 753, 7216, 4716, 7216, 5085, 432, 322, 3233, 7898, 275, 319, 477, 753, 8342, 4716, 8342, 5085, 432, 322, 3233, 7898, 275, 319, 477, 753, 2815, 600, 2815, 786, 12398]}
{"line_number": 199, "line_type": "original", "code": "            throw new ConvergenceException(", "entropy": 1.9033203125, "is_bug_line": false, "sus_score": 0.6728124618530273, "per_token_entropy": [7.88671875, 4.41015625, 0.97900390625, 1.42578125, 0.0017480850219726562, 0.0009775161743164062, 0.0016717910766601562, 0.5224609375], "tokens": [1468, 1422, 537, 1336, 424, 27976, 984, 26]}
{"line_number": 199, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6728124618530273, "per_token_entropy": [], "tokens": []}
{"line_number": 104, "line_type": "original", "code": "     * <code>Integer.MAX_VALUE</code> iterations to throw a ", "entropy": 1.8125, "is_bug_line": false, "sus_score": 0.6696341037750244, "per_token_entropy": [2.080078125, 0.016357421875, 5.765625, 0.74169921875, 0.021087646484375, 2.345703125, 0.0224761962890625, 0.0235443115234375, 0.0010271072387695312, 0.0010223388671875, 0.1375732421875, 0.002902984619140625, 0.05926513671875, 0.1251220703125, 8.2734375, 8.28125, 1.0068359375, 3.720703125], "tokens": [262, 319, 333, 687, 48, 3061, 32, 3459, 81, 5975, 377, 687, 48, 17576, 372, 1422, 312, 225]}
{"line_number": 104, "line_type": "generated", "code": "\n     * @param upperBound upper bound (b never is greater than this\n     * value)\n     * @param maximumIterations maximum number of iterations to perform\n     * @return a two element array holding {a, b}\n     * @throws Convergence", "entropy": 0.0489501953125, "is_bug_line": false, "sus_score": 0.6696341037750244, "per_token_entropy": [0.401611328125, 0.0016431808471679688, 0.017425537109375, 0.0033435821533203125, 0.006954193115234375, 0.0016918182373046875, 0.0008935928344726562, 0.0003705024719238281, 0.00127410888671875, 0.002590179443359375, 0.00726318359375, 0.00487518310546875, 0.0007925033569335938, 0.0012359619140625, 0.002071380615234375, 0.07720947265625, 0.0003345012664794922, 0.00785064697265625, 0.006885528564453125, 0.19384765625, 0.00021445751190185547, 0.0028514862060546875, 0.01617431640625, 0.00433349609375, 0.0021495819091796875, 0.26220703125, 0.008514404296875, 0.00160980224609375, 0.1287841796875, 0.4658203125, 0.63525390625, 0.130615234375, 0.0001881122589111328, 0.02935791015625, 0.003910064697265625, 0.01090240478515625, 0.0033168792724609375, 0.0037708282470703125, 0.0018367767333984375, 0.00560760498046875, 0.00472259521484375, 0.0017023086547851562, 0.00020933151245117188, 0.0034427642822265625, 0.0098114013671875, 0.053985595703125, 0.00016033649444580078, 0.0029697418212890625, 0.0011720657348632812, 0.00989532470703125, 1.7881393432617188e-06, 7.152557373046875e-07], "tokens": [275, 319, 477, 753, 8342, 4716, 8342, 5085, 308, 84, 7152, 438, 10761, 2784, 458, 275, 319, 786, 27, 275, 319, 477, 753, 7091, 31219, 7091, 1451, 432, 17576, 372, 4436, 275, 319, 477, 601, 312, 3134, 1994, 1417, 21843, 301, 83, 30, 323, 111, 275, 319, 477, 5117, 1336, 424, 27976]}
{"line_number": 120, "line_type": "original", "code": "     * function", "entropy": 5.46484375, "is_bug_line": false, "sus_score": 0.6631174087524414, "per_token_entropy": [3.923828125, 5.9453125, 6.51953125], "tokens": [262, 319, 667]}
{"line_number": 120, "line_type": "generated", "code": "\n        return new double[] {a, b};\n    }\n\n    /**\n     * This method uses the Brent algorithm to find a zero of the\n     * univariate real function <code>f</code> in the interval\n     * <code>[lower,", "entropy": 0.370849609375, "is_bug_line": false, "sus_score": 0.6631174087524414, "per_token_entropy": [1.103515625, 2.15234375, 0.94775390625, 0.0313720703125, 0.246337890625, 0.0157318115234375, 0.387451171875, 0.0148773193359375, 0.2049560546875, 0.061553955078125, 0.10455322265625, 0.0025119781494140625, 0.76611328125, 0.1290283203125, 0.059478759765625, 0.00026154518127441406, 0.896484375, 0.1533203125, 2.65625, 0.36083984375, 0.55126953125, 0.043426513671875, 0.908203125, 0.046722412109375, 0.04766845703125, 0.0174102783203125, 0.464111328125, 0.169189453125, 0.16015625, 0.48046875, 0.00010037422180175781, 1.1796875, 2.002716064453125e-05, 0.210693359375, 0.0025386810302734375, 0.454345703125, 0.02020263671875, 0.0002620220184326172, 0.40869140625, 0.1588134765625, 0.0005650520324707031, 0.650390625, 0.397705078125, 0.006744384765625, 0.300048828125, 0.38525390625, 4.8279762268066406e-05, 0.020111083984375, 0.0027923583984375, 0.278076171875, 1.5380859375, 0.07989501953125], "tokens": [291, 442, 537, 2064, 1178, 301, 83, 30, 323, 1255, 284, 320, 446, 1022, 275, 319, 1348, 1411, 5251, 322, 551, 16502, 8218, 372, 2290, 312, 5934, 432, 322, 275, 319, 707, 27623, 4011, 667, 333, 687, 48, 88, 377, 687, 48, 328, 322, 7898, 275, 319, 333, 687, 8828, 5729, 30]}
{"line_number": 60, "line_type": "original", "code": "     * ", "entropy": 3.712890625, "is_bug_line": false, "sus_score": 0.6304726600646973, "per_token_entropy": [4.6875, 0.263671875, 6.19140625], "tokens": [262, 319, 225]}
{"line_number": 60, "line_type": "generated", "code": "\n     * @param f the function to check\n     * @param lowerBound the lower bound\n     * @param upperBound the upper bound\n     * @param initial the initial value to use to start the search\n     * @return two values <code>a</", "entropy": 0.30078125, "is_bug_line": false, "sus_score": 0.6304726600646973, "per_token_entropy": [0.1396484375, 0.0006313323974609375, 0.1993408203125, 0.00762939453125, 0.0367431640625, 0.16845703125, 0.05718994140625, 1.1357421875, 1.2197265625, 0.662109375, 6.091594696044922e-05, 0.0004050731658935547, 0.0008749961853027344, 0.132080078125, 0.18896484375, 0.66015625, 0.137451171875, 0.06317138671875, 1.744140625, 2.276897430419922e-05, 7.891654968261719e-05, 0.00011336803436279297, 0.0797119140625, 0.0016183853149414062, 0.003047943115234375, 0.016571044921875, 0.0026187896728515625, 0.0139923095703125, 7.510185241699219e-05, 0.0005559921264648438, 0.004215240478515625, 0.006591796875, 0.9873046875, 0.3115234375, 0.429931640625, 0.658203125, 0.2164306640625, 1.09375, 0.021820068359375, 0.489013671875, 0.10699462890625, 0.34423828125, 0.00016927719116210938, 0.00957489013671875, 0.08013916015625, 1.740234375, 0.058837890625, 2.181640625, 0.031890869140625, 0.1455078125, 0.0247802734375, 0.0239715576171875], "tokens": [275, 319, 477, 753, 296, 322, 667, 372, 1505, 275, 319, 477, 753, 7216, 4716, 322, 7216, 5085, 275, 319, 477, 753, 8342, 4716, 322, 8342, 5085, 275, 319, 477, 753, 2815, 322, 2815, 786, 372, 793, 372, 1477, 322, 3233, 275, 319, 477, 601, 3134, 2078, 333, 687, 48, 83, 377]}
{"line_number": 198, "line_type": "original", "code": "        if (fa * fb >= 0.0 ) {", "entropy": 1.6396484375, "is_bug_line": true, "sus_score": 0.6263667345046997, "per_token_entropy": [4.4921875, 3.43359375, 0.128662109375, 3.205078125, 0.6728515625, 0.07989501953125, 2.771484375, 0.005702972412109375, 0.0015316009521484375, 0.83154296875, 0.0011377334594726562, 5.56640625, 0.1253662109375], "tokens": [351, 415, 308, 1919, 319, 22254, 2377, 225, 34, 32, 34, 829, 301]}
{"line_number": 198, "line_type": "generated", "code": "\n    /**\n     * Get the default implementation of the factory.\n     * @return the default solver factory\n     */\n    public static UnivariateRealSolverFactory newInstance() {\n        return LazyHolder.FACTORY;\n    }", "entropy": 0.245849609375, "is_bug_line": true, "sus_score": 0.6263667345046997, "per_token_entropy": [1.240234375, 0.259521484375, 0.36474609375, 0.0003025531768798828, 1.0078125, 0.5048828125, 0.2041015625, 0.9150390625, 0.53515625, 0.61181640625, 0.861328125, 0.1337890625, 0.03912353515625, 0.0005817413330078125, 0.5283203125, 0.0022792816162109375, 1.2275390625, 0.181884765625, 1.021484375, 0.046966552734375, 0.1304931640625, 0.030853271484375, 0.01219940185546875, 0.0069732666015625, 0.0048828125, 0.0048675537109375, 1.2516975402832031e-05, 6.985664367675781e-05, 0.00018680095672607422, 0.00039267539978027344, 0.454345703125, 0.0640869140625, 0.020904541015625, 0.01275634765625, 0.061767578125, 0.010406494140625, 0.031402587890625, 2.86102294921875e-06, 0.00012969970703125, 0.0005354881286621094, 0.0091552734375, 0.0214996337890625, 0.003253936767578125], "tokens": [284, 1022, 275, 319, 1390, 322, 1244, 4736, 432, 322, 7763, 32, 275, 319, 477, 601, 322, 1244, 17821, 7763, 275, 569, 284, 562, 907, 1683, 27623, 6877, 17766, 2214, 537, 1810, 346, 301, 291, 442, 23998, 6760, 32, 24845, 45, 284, 320]}
{"line_number": 119, "line_type": "original", "code": "     * @throws FunctionEvaluationException if an error occurs evaluating the", "entropy": 1.1181640625, "is_bug_line": false, "sus_score": 0.6245604157447815, "per_token_entropy": [4.79296875, 5.390625, 0.2376708984375, 0.362548828125, 2.33203125, 0.00299835205078125, 0.0023651123046875, 0.314208984375, 0.255615234375, 0.0102386474609375, 0.12548828125, 0.66162109375, 0.04339599609375], "tokens": [262, 319, 477, 5117, 4540, 19637, 984, 415, 600, 1048, 12984, 38680, 322]}
{"line_number": 119, "line_type": "generated", "code": "\n        if (function == null) {\n            throw new IllegalArgumentException(\"function is null\");\n        }\n        if (maximumIterations <= 0) {\n            throw new IllegalArgumentException(\"maximum iterations must be \" +\n                    \"positive\");\n        }\n        if (lowerBound >", "entropy": 0.211181640625, "is_bug_line": false, "sus_score": 0.6245604157447815, "per_token_entropy": [0.5654296875, 1.2001953125, 0.07550048828125, 0.64404296875, 0.025604248046875, 0.00370025634765625, 0.06365966796875, 0.040191650390625, 0.053009033203125, 0.01343536376953125, 0.40478515625, 0.441650390625, 0.2462158203125, 0.2073974609375, 0.3828125, 0.0036296844482421875, 0.02301025390625, 0.0165252685546875, 0.0006852149963378906, 0.2039794921875, 0.09930419921875, 0.039825439453125, 0.54736328125, 0.00010836124420166016, 0.30419921875, 0.006710052490234375, 0.003063201904296875, 0.01367950439453125, 0.007167816162109375, 0.0212249755859375, 0.0027103424072265625, 0.031524658203125, 0.0328369140625, 0.56201171875, 0.053924560546875, 1.58984375, 0.48388671875, 0.029632568359375, 0.52294921875, 0.09112548828125, 0.55908203125, 0.0025577545166015625, 0.080810546875, 0.1448974609375, 0.0145416259765625, 0.0008082389831542969, 0.07086181640625, 0.09808349609375, 0.3125, 0.414794921875, 8.022785186767578e-05, 0.224365234375], "tokens": [291, 415, 308, 1126, 610, 744, 27, 301, 324, 1422, 537, 12137, 440, 1126, 438, 744, 724, 291, 320, 291, 415, 308, 16537, 31219, 2511, 225, 34, 27, 301, 324, 1422, 537, 12137, 440, 16537, 17576, 2298, 526, 313, 474, 528, 313, 18502, 724, 291, 320, 291, 415, 308, 5729, 4716, 848]}
{"line_number": 224, "line_type": "original", "code": "     * @throws IllegalArgumentException if f is null", "entropy": 2.203125, "is_bug_line": false, "sus_score": 0.6160879731178284, "per_token_entropy": [3.767578125, 5.9765625, 1.798828125, 4.64453125, 1.8642578125, 0.0859375, 1.642578125, 0.018524169921875, 0.0308837890625], "tokens": [262, 319, 477, 5117, 12137, 415, 296, 438, 744]}
{"line_number": 224, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6160879731178284, "per_token_entropy": [], "tokens": []}
{"line_number": 166, "line_type": "original", "code": "            double initial, double lowerBound, double upperBound, ", "entropy": 1.9306640625, "is_bug_line": false, "sus_score": 0.6139505505561829, "per_token_entropy": [6.82421875, 5.04296875, 7.453125, 0.469482421875, 0.22998046875, 0.061798095703125, 0.023468017578125, 0.00830078125, 0.1556396484375, 0.005596160888671875, 0.0025615692138671875, 1.3232421875, 3.490234375], "tokens": [1468, 2064, 2815, 30, 2064, 7216, 4716, 30, 2064, 8342, 4716, 30, 225]}
{"line_number": 166, "line_type": "generated", "code": "\n     */\n    public static double midpoint(double a, double b) {\n        return 0.5 * (a + b);\n    }\n\n    /**\n     * This method is a utility for finding bracketing triples of a root.\n     * <", "entropy": 0.40380859375, "is_bug_line": false, "sus_score": 0.6139505505561829, "per_token_entropy": [0.462158203125, 0.0997314453125, 0.04107666015625, 0.47119140625, 0.01432037353515625, 0.0135498046875, 0.059356689453125, 0.0191497802734375, 0.0047760009765625, 0.1273193359375, 0.00196075439453125, 0.0027866363525390625, 0.0099029541015625, 0.0005059242248535156, 0.0240478515625, 0.0645751953125, 0.1873779296875, 0.06927490234375, 0.8388671875, 0.00689697265625, 0.003963470458984375, 0.003307342529296875, 0.0196075439453125, 0.0027923583984375, 0.01259613037109375, 0.01300811767578125, 0.0011987686157226562, 0.0838623046875, 0.2198486328125, 0.0025806427001953125, 1.0517578125, 0.0277099609375, 0.043304443359375, 4.947185516357422e-05, 1.970703125, 0.525390625, 2.361328125, 1.119140625, 0.135009765625, 0.775390625, 2.041015625, 0.72265625, 0.1680908203125, 1.7783203125, 0.1737060546875, 1.15625, 1.025390625, 1.0126953125, 0.36328125, 0.368408203125, 0.0016527175903320312, 1.298828125], "tokens": [275, 569, 284, 562, 907, 2064, 11906, 1493, 26, 2627, 312, 30, 2064, 323, 27, 301, 291, 442, 225, 34, 32, 39, 319, 308, 83, 474, 323, 293, 284, 320, 446, 1022, 275, 319, 1348, 1411, 438, 312, 15471, 436, 17340, 33828, 299, 19337, 1882, 432, 312, 3051, 32, 275, 319, 333]}
{"line_number": 108, "line_type": "original", "code": "     * {@link #bracket(UnivariateRealFunction, double, double, double, int)}, ", "entropy": 1.4111328125, "is_bug_line": false, "sus_score": 0.6115673184394836, "per_token_entropy": [3.94921875, 0.0887451171875, 10.484375, 0.48388671875, 2.982421875, 0.0506591796875, 0.048004150390625, 0.132080078125, 5.424022674560547e-05, 0.0008192062377929688, 0.0009589195251464844, 0.0323486328125, 0.404541015625, 0.008392333984375, 0.097900390625, 0.168701171875, 0.0478515625, 1.794921875, 0.0902099609375, 4.37109375, 4.390625], "tokens": [262, 319, 3088, 1204, 588, 32180, 26, 1061, 27623, 6877, 2447, 30, 2064, 30, 2064, 30, 2064, 30, 629, 11918, 225]}
{"line_number": 108, "line_type": "generated", "code": "\n     * @throws ConvergenceException if a root can not be bracketted\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if function is null, maximumIterations\n     * is not positive, or initial", "entropy": 0.019195556640625, "is_bug_line": false, "sus_score": 0.6115673184394836, "per_token_entropy": [0.421142578125, 0.0132904052734375, 0.0255279541015625, 0.005039215087890625, 0.0100860595703125, 3.2186508178710938e-06, 7.510185241699219e-06, 5.555152893066406e-05, 0.01329803466796875, 0.03570556640625, 0.00238800048828125, 0.01175689697265625, 0.0006279945373535156, 0.0003745555877685547, 0.00039577484130859375, 0.0084991455078125, 0.1380615234375, 0.0008916854858398438, 0.0144500732421875, 0.0003192424774169922, 0.0027008056640625, 2.562999725341797e-05, 0.0003368854522705078, 0.004055023193359375, 0.0018033981323242188, 0.00012755393981933594, 0.0005159378051757812, 0.007656097412109375, 0.00708770751953125, 0.01213836669921875, 0.00010073184967041016, 0.00372314453125, 0.0162200927734375, 0.0011281967163085938, 0.0006341934204101562, 0.0005941390991210938, 0.006317138671875, 0.0036182403564453125, 0.027587890625, 0.00566864013671875, 0.0012722015380859375, 0.0250701904296875, 0.1259765625, 0.0007114410400390625, 0.016845703125, 1.3709068298339844e-05, 0.0027141571044921875, 0.0034961700439453125, 0.0004901885986328125, 0.005199432373046875, 0.0066680908203125, 0.0054473876953125], "tokens": [275, 319, 477, 5117, 1336, 424, 27976, 984, 415, 312, 3051, 883, 646, 526, 33828, 3251, 275, 319, 477, 5117, 4540, 19637, 984, 415, 600, 1048, 12984, 38680, 322, 275, 319, 667, 275, 319, 477, 5117, 12137, 415, 667, 438, 744, 30, 7091, 31219, 275, 319, 438, 646, 11557, 30, 556, 2815]}
{"line_number": 223, "line_type": "original", "code": "     * @param f  input function", "entropy": 3.203125, "is_bug_line": false, "sus_score": 0.6083552241325378, "per_token_entropy": [3.529296875, 4.9375, 1.685546875, 2.3125, 1.2578125, 3.439453125, 8.0078125, 0.46240234375], "tokens": [262, 319, 477, 753, 296, 225, 1509, 667]}
{"line_number": 223, "line_type": "generated", "code": "\n    /**\n     * Get the default instance.\n     * <p>\n     * The default solver is a <a\n     * href=\"http://math.nist.gov/javanumerics/jama/\">JAMA</a> based\n     * implementation", "entropy": 0.287109375, "is_bug_line": false, "sus_score": 0.6083552241325378, "per_token_entropy": [1.587890625, 0.2364501953125, 0.396728515625, 0.00023865699768066406, 0.89697265625, 0.437744140625, 0.2030029296875, 2.037109375, 0.478271484375, 0.07391357421875, 0.0010433197021484375, 1.5869140625, 0.005405426025390625, 0.0011997222900390625, 0.308837890625, 0.0001087188720703125, 0.55126953125, 0.01088714599609375, 0.1412353515625, 0.5830078125, 0.15576171875, 1.5458984375, 0.21240234375, 0.3564453125, 0.0005249977111816406, 0.0017881393432617188, 0.06781005859375, 0.006778717041015625, 0.0037097930908203125, 0.152099609375, 0.1396484375, 0.0048980712890625, 6.794929504394531e-06, 6.771087646484375e-05, 0.0002834796905517578, 0.37841796875, 0.0003445148468017578, 0.00025177001953125, 0.0008044242858886719, 0.0001596212387084961, 0.001209259033203125, 0.0081634521484375, 0.023040771484375, 0.11920166015625, 2.2292137145996094e-05, 0.0167236328125, 0.004138946533203125, 0.2156982421875, 0.62841796875, 0.73046875, 0.00011539459228515625, 0.61962890625], "tokens": [284, 1022, 275, 319, 1390, 322, 1244, 1980, 32, 275, 319, 333, 98, 48, 275, 319, 886, 1244, 17821, 438, 312, 333, 83, 275, 319, 976, 347, 525, 555, 3812, 32, 33706, 32, 7182, 33, 11739, 278, 378, 40940, 33, 92, 4478, 9076, 28954, 1400, 377, 83, 48, 4122, 275, 319, 4736]}
{"line_number": 193, "line_type": "original", "code": "            fb = function.value(b);", "entropy": 1.9267578125, "is_bug_line": false, "sus_score": 0.6039917469024658, "per_token_entropy": [8.671875, 8.5390625, 0.033233642578125, 0.07366943359375, 0.002414703369140625, 0.003124237060546875, 0.0012645721435546875, 0.005069732666015625, 0.0193634033203125], "tokens": [1468, 22254, 280, 667, 32, 853, 26, 84, 293]}
{"line_number": 193, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6039917469024658, "per_token_entropy": [], "tokens": []}
{"line_number": 184, "line_type": "original", "code": "        double fa;", "entropy": 4.97265625, "is_bug_line": false, "sus_score": 0.6038300395011902, "per_token_entropy": [6.45703125, 8.2421875, 4.0078125, 1.18359375], "tokens": [351, 2064, 2093, 45]}
{"line_number": 184, "line_type": "generated", "code": "\n     */\n    private static class BracketingSolverFactory {\n        /** Cached instance. */\n        private static BracketingSolver instance = null;\n\n        /** Get the default instance.\n         * @return default instance\n         */\n        public static BracketingSolver getInstance", "entropy": 0.387939453125, "is_bug_line": false, "sus_score": 0.6038300395011902, "per_token_entropy": [0.46630859375, 0.1419677734375, 0.08465576171875, 0.044158935546875, 0.01275634765625, 0.045379638671875, 1.4912109375, 0.0003979206085205078, 0.33349609375, 0.748046875, 0.15673828125, 1.3134765625, 0.7822265625, 0.36962890625, 1.0078125, 1.3896484375, 0.2452392578125, 0.057525634765625, 0.0382080078125, 0.071044921875, 0.01424407958984375, 0.349365234375, 0.00012135505676269531, 0.0051422119140625, 0.045501708984375, 1.111328125, 0.0919189453125, 1.064453125, 0.06951904296875, 1.140625, 0.0188751220703125, 1.3662109375, 0.15576171875, 2.154296875, 0.615234375, 0.1514892578125, 0.2047119140625, 0.0089111328125, 0.2398681640625, 0.01120758056640625, 1.404296875, 0.0628662109375, 0.0631103515625, 0.04376220703125, 0.01247406005859375, 0.162109375, 0.036376953125, 0.344970703125, 9.5367431640625e-07, 6.699562072753906e-05, 0.00016379356384277344, 0.419921875], "tokens": [275, 569, 284, 945, 907, 443, 10349, 3357, 299, 17766, 2214, 301, 291, 1022, 34341, 1980, 32, 569, 291, 945, 907, 10349, 3357, 299, 17766, 1980, 280, 744, 45, 584, 1022, 1390, 322, 1244, 1980, 32, 276, 319, 477, 601, 1244, 1980, 276, 569, 291, 562, 907, 10349, 3357, 299, 17766, 31637]}
{"line_number": 206, "line_type": "original", "code": "        ", "entropy": 6.4921875, "is_bug_line": false, "sus_score": 0.5964792370796204, "per_token_entropy": [6.4921875], "tokens": [263]}
{"line_number": 206, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5964792370796204, "per_token_entropy": [], "tokens": []}
{"line_number": 229, "line_type": "original", "code": "        }", "entropy": 4.203125, "is_bug_line": false, "sus_score": 0.5940956473350525, "per_token_entropy": [4.94921875, 3.4609375], "tokens": [351, 320]}
{"line_number": 229, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5940956473350525, "per_token_entropy": [], "tokens": []}
{"line_number": 203, "line_type": "original", "code": "                      numIterations, maximumIterations, initial,", "entropy": 2.599609375, "is_bug_line": false, "sus_score": 0.5926861763000488, "per_token_entropy": [12.234375, 9.1015625, 0.1240234375, 0.66845703125, 0.211669921875, 0.00431060791015625, 0.1910400390625, 0.806640625, 0.04931640625], "tokens": [7188, 1929, 31219, 30, 7091, 31219, 30, 2815, 30]}
{"line_number": 203, "line_type": "generated", "code": "\n    /**\n     * Get the default implementation of the factory.\n     *\n     * @return a default implementation of the factory\n     */\n    public static UnivariateRealSolverFactory newInstance() {\n        return LazyHolder.FACTORY;\n    }", "entropy": 0.296142578125, "is_bug_line": false, "sus_score": 0.5926861763000488, "per_token_entropy": [1.72265625, 0.272705078125, 0.38525390625, 0.00026106834411621094, 1.001953125, 0.52392578125, 0.1861572265625, 0.91357421875, 0.525390625, 0.54345703125, 0.82080078125, 0.14111328125, 0.0369873046875, 0.00048160552978515625, 2.001953125, 0.001628875732421875, 0.0078125, 0.0019292831420898438, 1.2783203125, 1.5224609375, 0.81005859375, 0.0809326171875, 0.07470703125, 0.2130126953125, 0.26416015625, 0.0841064453125, 0.01416015625, 0.00786590576171875, 0.005374908447265625, 0.005359649658203125, 7.152557373046875e-06, 8.928775787353516e-05, 0.00022780895233154297, 0.0005946159362792969, 0.2169189453125, 0.0770263671875, 0.020355224609375, 0.0138702392578125, 0.06134033203125, 0.01094818115234375, 0.03363037109375, 2.1457672119140625e-06, 0.0001838207244873047, 0.0004978179931640625, 0.00955963134765625, 0.024200439453125, 0.0035228729248046875], "tokens": [284, 1022, 275, 319, 1390, 322, 1244, 4736, 432, 322, 7763, 32, 275, 319, 275, 319, 477, 601, 312, 1244, 4736, 432, 322, 7763, 275, 569, 284, 562, 907, 1683, 27623, 6877, 17766, 2214, 537, 1810, 346, 301, 291, 442, 23998, 6760, 32, 24845, 45, 284, 320]}
{"line_number": 106, "line_type": "original", "code": "     * is a root between <code>lowerBound</code> and <code>upperBound</code>", "entropy": 1.556640625, "is_bug_line": false, "sus_score": 0.5888497233390808, "per_token_entropy": [2.328125, 0.0124664306640625, 12.9765625, 4.6953125, 2.70703125, 5.140625, 2.1796875, 0.0164794921875, 0.0039825439453125, 0.2041015625, 0.52294921875, 0.01849365234375, 0.0011587142944335938, 0.0058135986328125, 0.40087890625, 3.314453125, 0.0249176025390625, 0.0084686279296875, 0.327880859375, 0.0277862548828125, 0.053131103515625, 0.002117156982421875, 0.84814453125], "tokens": [262, 319, 438, 312, 3051, 3733, 333, 687, 48, 5729, 4716, 377, 687, 48, 461, 333, 687, 48, 7607, 4716, 377, 687, 48]}
{"line_number": 106, "line_type": "generated", "code": "\n     * @param maximumIterations maximum number of iterations to perform\n     * @return a two element array holding {a, b}\n     * @throws ConvergenceException if a root can not be bracketted\n     * @throws FunctionEvaluationException if an error", "entropy": 0.052032470703125, "is_bug_line": false, "sus_score": 0.5888497233390808, "per_token_entropy": [0.44970703125, 0.0011339187622070312, 0.01427459716796875, 0.053375244140625, 0.005481719970703125, 0.002410888671875, 0.32373046875, 0.00606536865234375, 0.0014553070068359375, 0.105224609375, 0.46630859375, 0.7880859375, 0.2032470703125, 0.0002486705780029297, 0.022674560546875, 0.0046844482421875, 0.00989532470703125, 0.004039764404296875, 0.003833770751953125, 0.0020351409912109375, 0.00511932373046875, 0.003753662109375, 0.0015096664428710938, 0.0002359151840209961, 0.003475189208984375, 0.00901031494140625, 0.061492919921875, 0.00030922889709472656, 0.0032329559326171875, 0.0014333724975585938, 0.009552001953125, 2.7418136596679688e-06, 1.9073486328125e-06, 4.863739013671875e-05, 0.00482940673828125, 0.024200439453125, 0.0022335052490234375, 0.004909515380859375, 0.0004954338073730469, 0.000209808349609375, 0.0004329681396484375, 0.006046295166015625, 0.07598876953125, 0.0004398822784423828, 0.010833740234375, 0.0002918243408203125, 0.002605438232421875, 2.1219253540039062e-05, 0.00036835670471191406, 0.0029506683349609375, 0.0011224746704101562, 9.143352508544922e-05], "tokens": [275, 319, 477, 753, 7091, 31219, 7091, 1451, 432, 17576, 372, 4436, 275, 319, 477, 601, 312, 3134, 1994, 1417, 21843, 301, 83, 30, 323, 111, 275, 319, 477, 5117, 1336, 424, 27976, 984, 415, 312, 3051, 883, 646, 526, 33828, 3251, 275, 319, 477, 5117, 4540, 19637, 984, 415, 600, 1048]}
{"line_number": 131, "line_type": "original", "code": "     /**", "entropy": 5.0859375, "is_bug_line": false, "sus_score": 0.5853134393692017, "per_token_entropy": [5.125, 5.046875], "tokens": [262, 1022]}
{"line_number": 131, "line_type": "generated", "code": "\n        }\n        \n        double fa = function.value(lowerBound);\n        double fb = function.value(upperBound);\n        double fc, f;\n        double a = lowerBound;\n        double b = upperBound;\n        double c = initial;\n        int", "entropy": 0.327880859375, "is_bug_line": false, "sus_score": 0.5853134393692017, "per_token_entropy": [0.5400390625, 0.7080078125, 1.0693359375, 0.5810546875, 0.75341796875, 0.07049560546875, 0.06591796875, 0.0022525787353515625, 0.005908966064453125, 0.001880645751953125, 0.6904296875, 0.0004165172576904297, 0.2379150390625, 0.041168212890625, 0.10845947265625, 0.059783935546875, 0.0006661415100097656, 0.0008668899536132812, 1.2993812561035156e-05, 0.00030612945556640625, 5.3882598876953125e-05, 0.01142120361328125, 1.8835067749023438e-05, 0.0008630752563476562, 0.67236328125, 0.69677734375, 0.80908203125, 1.64453125, 0.8310546875, 1.1748046875, 0.405517578125, 0.9248046875, 1.171875, 0.135498046875, 0.270263671875, 1.4781951904296875e-05, 0.031646728515625, 0.0229339599609375, 0.008636474609375, 0.01004791259765625, 0.0011205673217773438, 0.0305633544921875, 3.337860107421875e-06, 0.0006208419799804688, 0.390380859375, 0.5322265625, 0.038787841796875, 0.276123046875, 0.195556640625, 0.001430511474609375, 0.63720703125, 1.17578125], "tokens": [291, 320, 2746, 2064, 2093, 280, 667, 32, 853, 26, 5729, 4716, 293, 291, 2064, 22254, 280, 667, 32, 853, 26, 7607, 4716, 293, 291, 2064, 17728, 30, 296, 45, 291, 2064, 312, 280, 7216, 4716, 45, 291, 2064, 323, 280, 8342, 4716, 45, 291, 2064, 281, 280, 2815, 45, 291, 629]}
{"line_number": 200, "line_type": "original", "code": "                      \"number of iterations={0}, maximum iterations={1}, \" +", "entropy": 2.0234375, "is_bug_line": false, "sus_score": 0.5848860144615173, "per_token_entropy": [11.9453125, 7.34375, 7.33203125, 0.0721435546875, 0.48974609375, 0.3583984375, 0.2010498046875, 0.411376953125, 0.443115234375, 0.23583984375, 0.1004638671875, 0.0201568603515625, 0.63232421875, 0.71435546875, 0.06268310546875], "tokens": [7188, 313, 2171, 432, 17576, 1279, 34, 835, 7091, 17576, 1279, 35, 835, 313, 474]}
{"line_number": 200, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5848860144615173, "per_token_entropy": [], "tokens": []}
{"line_number": 221, "line_type": "original", "code": "    /**", "entropy": 2.46875, "is_bug_line": false, "sus_score": 0.5779038071632385, "per_token_entropy": [4.76953125, 0.167236328125], "tokens": [264, 1022]}
{"line_number": 221, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5779038071632385, "per_token_entropy": [], "tokens": []}
{"line_number": 159, "line_type": "original", "code": "     * satisfying the desired conditions", "entropy": 4.50390625, "is_bug_line": false, "sus_score": 0.5775089263916016, "per_token_entropy": [3.564453125, 4.81640625, 17.0, 0.0018177032470703125, 1.2666015625, 4.01171875, 0.86669921875], "tokens": [262, 319, 14703, 20438, 322, 10848, 5479]}
{"line_number": 159, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5775089263916016, "per_token_entropy": [], "tokens": []}
