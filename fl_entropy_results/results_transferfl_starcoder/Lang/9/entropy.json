{"line_number": 328, "line_type": "original", "code": "            case '.':", "entropy": 4.25390625, "is_bug_line": false, "sus_score": 0.7947700023651123, "per_token_entropy": [3.869140625, 2.197265625, 10.8515625, 0.09368896484375], "tokens": [1468, 1135, 5608, 950]}
{"line_number": 328, "line_type": "generated", "code": "\n                String[] eras = new String[1];\n                eras[0] = symbols.getEras()[0];\n                fieldKeyValues = new KeyValue[eras.length];\n                for(int i=0; i<eras.length", "entropy": 0.286865234375, "is_bug_line": false, "sus_score": 0.7947700023651123, "per_token_entropy": [0.39892578125, 1.7177734375, 0.09710693359375, 0.469970703125, 0.0017328262329101562, 1.6455078125, 1.521484375, 0.00946044921875, 0.4326171875, 2.296875, 0.130126953125, 0.1412353515625, 0.383544921875, 1.239776611328125e-05, 0.011566162109375, 0.00521087646484375, 0.4892578125, 0.00650787353515625, 0.75, 0.001220703125, 0.016876220703125, 0.040069580078125, 0.06011962890625, 0.01348876953125, 0.1630859375, 0.1810302734375, 0.2164306640625, 0.50048828125, 0.00185394287109375, 2.1338462829589844e-05, 1.0244140625, 0.1944580078125, 0.0118255615234375, 2.6106834411621094e-05, 0.2274169921875, 0.143310546875, 0.001956939697265625, 0.00020372867584228516, 0.05224609375, 0.025360107421875, 0.0545654296875, 0.3349609375, 0.0029430389404296875, 0.01971435546875, 0.0823974609375, 0.315673828125, 0.02215576171875, 0.04193115234375, 0.01788330078125, 0.64111328125, 0.0001195669174194336, 4.649162292480469e-05], "tokens": [400, 892, 1178, 5097, 302, 280, 537, 892, 77, 35, 970, 400, 5097, 302, 77, 34, 79, 280, 15455, 32, 371, 55, 12792, 8532, 34, 970, 400, 1600, 953, 3354, 280, 537, 3891, 882, 77, 11646, 32, 1322, 970, 400, 436, 26, 410, 595, 47, 34, 45, 595, 46, 11646, 32, 1322]}
{"line_number": 285, "line_type": "original", "code": "        for(int i=0; i<strategies.length;) {", "entropy": 1.3642578125, "is_bug_line": false, "sus_score": 0.7678858637809753, "per_token_entropy": [6.21484375, 5.3125, 0.08026123046875, 1.1806640625, 0.05078125, 0.015380859375, 2.400390625, 0.07867431640625, 0.08599853515625, 0.037261962890625, 0.35546875, 0.0013370513916015625, 0.0080718994140625, 0.0010700225830078125, 5.99609375, 0.0151519775390625], "tokens": [351, 436, 26, 410, 595, 47, 34, 45, 595, 46, 466, 21412, 32, 1322, 21288, 301]}
{"line_number": 285, "line_type": "generated", "code": "\n    private static class Strategy {\n        private final String regex;\n        private final int field;\n        private final String value;\n        private final boolean inverted;\n        private final String mask;\n\n        private Strategy(String regex, int field, String value, boolean inverted,", "entropy": 0.56689453125, "is_bug_line": false, "sus_score": 0.7678858637809753, "per_token_entropy": [0.69140625, 1.572265625, 0.251708984375, 1.2822265625, 0.06378173828125, 0.1519775390625, 0.4375, 0.5703125, 0.7080078125, 0.64697265625, 1.1103515625, 0.046173095703125, 0.11041259765625, 0.03509521484375, 0.05328369140625, 0.8857421875, 1.529296875, 0.0411376953125, 0.237060546875, 0.047943115234375, 0.07513427734375, 2.025390625, 1.1201171875, 0.03271484375, 0.363037109375, 0.0687255859375, 0.12371826171875, 1.0615234375, 2.78125, 0.002178192138671875, 0.9375, 0.1500244140625, 0.2392578125, 2.328125, 3.076171875, 0.07159423828125, 0.7216796875, 2.056640625, 0.65576171875, 0.007137298583984375, 0.278076171875, 0.166259765625, 0.00824737548828125, 0.1361083984375, 0.00994873046875, 0.0201873779296875, 0.032806396484375, 0.036407470703125, 0.06903076171875, 0.1881103515625, 0.00771331787109375, 0.1439208984375], "tokens": [284, 945, 907, 443, 39243, 301, 291, 945, 1158, 892, 9667, 45, 291, 945, 1158, 629, 1600, 45, 291, 945, 1158, 892, 786, 45, 291, 945, 1158, 1905, 37592, 45, 291, 945, 1158, 892, 5941, 45, 584, 945, 39243, 26, 652, 9667, 30, 629, 1600, 30, 892, 786, 30, 1905, 37592, 30]}
{"line_number": 732, "line_type": "original", "code": "            cal.set(field, modify(Integer.parseInt(value)));", "entropy": 1.7529296875, "is_bug_line": false, "sus_score": 0.7657018899917603, "per_token_entropy": [3.720703125, 8.5546875, 0.007678985595703125, 0.03387451171875, 0.35302734375, 1.935546875, 0.0054473876953125, 5.34375, 0.05194091796875, 4.91796875, 0.0015878677368164062, 0.044921875, 0.00521087646484375, 1.181640625, 0.134033203125], "tokens": [1468, 2182, 32, 470, 26, 1495, 30, 5351, 26, 3061, 32, 11831, 26, 853, 4236]}
{"line_number": 732, "line_type": "generated", "code": "\n                }\n            }\n            StringBuilder validChars= new StringBuilder();\n            for(int i=0; i<128; ++i) {\n                char ch= (char)i;\n                if(Character.isLetterOrDigit(ch)) {", "entropy": 0.267333984375, "is_bug_line": false, "sus_score": 0.7657018899917603, "per_token_entropy": [0.1749267578125, 0.0008745193481445312, 0.06585693359375, 0.0003819465637207031, 0.142822265625, 1.0380859375, 1.677734375, 0.56640625, 0.171630859375, 0.0127105712890625, 0.00015747547149658203, 0.331298828125, 0.032623291015625, 0.434814453125, 0.039886474609375, 1.8857421875, 0.046600341796875, 0.0229339599609375, 1.1728515625, 0.0228424072265625, 0.1845703125, 0.47998046875, 0.7353515625, 0.023529052734375, 0.0711669921875, 0.0019779205322265625, 0.7001953125, 0.00034308433532714844, 0.003513336181640625, 0.0008368492126464844, 0.040985107421875, 0.6318359375, 0.7724609375, 0.024810791015625, 0.0020084381103515625, 4.0650367736816406e-05, 0.006275177001953125, 0.53759765625, 3.635883331298828e-05, 0.02569580078125, 0.0684814453125, 0.07861328125, 0.371337890625, 1.7404556274414062e-05, 0.005168914794921875, 0.0015802383422851562, 0.05010986328125, 0.0012788772583007812, 1.5020370483398438e-05, 0.00021576881408691406, 1.232421875, 0.0010461807250976562], "tokens": [400, 320, 324, 320, 324, 9706, 2080, 16364, 47, 537, 9706, 473, 324, 436, 26, 410, 595, 47, 34, 45, 595, 46, 35, 36, 42, 45, 3311, 91, 27, 301, 400, 1351, 663, 47, 308, 1594, 27, 91, 45, 400, 415, 26, 6881, 32, 297, 17663, 1527, 21530, 26, 380, 490, 301]}
{"line_number": 250, "line_type": "original", "code": "        Date date= parse(source, new ParsePosition(0));", "entropy": 1.9052734375, "is_bug_line": false, "sus_score": 0.7648049592971802, "per_token_entropy": [3.353515625, 6.88671875, 5.1171875, 0.281982421875, 2.896484375, 1.00390625, 2.896484375, 1.2392578125, 2.765625, 0.060546875, 1.7881393432617188e-05, 0.0027008056640625, 0.135986328125, 0.0296630859375], "tokens": [351, 2821, 2340, 47, 3185, 26, 1855, 30, 537, 8661, 2731, 26, 34, 876]}
{"line_number": 250, "line_type": "generated", "code": "\n     */\n    private void regexQuote(StringBuilder regex, String value) {\n        for(int i=0; i<value.length(); i++) {\n            char c= value.charAt(i);\n            if(c=='[' || c==']", "entropy": 0.3017578125, "is_bug_line": false, "sus_score": 0.7648049592971802, "per_token_entropy": [0.399658203125, 0.1180419921875, 0.019378662109375, 0.34423828125, 0.474365234375, 2.455078125, 1.9482421875, 0.275146484375, 0.2451171875, 0.0036411285400390625, 0.0011434555053710938, 0.50537109375, 0.005298614501953125, 0.0355224609375, 0.006076812744140625, 0.042755126953125, 1.1591796875, 0.266357421875, 0.07427978515625, 0.04644775390625, 0.005462646484375, 0.114501953125, 0.043731689453125, 0.142578125, 0.027862548828125, 0.0186309814453125, 0.00010669231414794922, 0.00015103816986083984, 0.004253387451171875, 0.5712890625, 0.0258941650390625, 0.0017385482788085938, 0.016510009765625, 0.03863525390625, 1.3642578125, 0.046234130859375, 0.07281494140625, 5.53131103515625e-05, 4.5299530029296875e-05, 7.069110870361328e-05, 0.00013566017150878906, 0.0005803108215332031, 0.046478271484375, 0.81005859375, 0.283447265625, 0.13916015625, 0.448486328125, 2.177734375, 0.039581298828125, 0.0953369140625, 0.480712890625, 0.252685546875], "tokens": [275, 569, 284, 945, 763, 9667, 17138, 26, 20884, 9667, 30, 892, 786, 27, 301, 291, 436, 26, 410, 595, 47, 34, 45, 595, 46, 853, 32, 1322, 473, 595, 1987, 301, 324, 1351, 281, 47, 786, 32, 15611, 26, 91, 293, 324, 415, 26, 85, 10844, 710, 1276, 281, 379, 785]}
{"line_number": 282, "line_type": "original", "code": "        Calendar cal= Calendar.getInstance(timeZone, locale);", "entropy": 1.685546875, "is_bug_line": false, "sus_score": 0.762935221195221, "per_token_entropy": [3.3203125, 10.8359375, 0.85546875, 0.30126953125, 0.474853515625, 0.007198333740234375, 0.0060272216796875, 0.3984375, 5.35546875, 0.018096923828125, 0.2958984375, 0.02569580078125, 0.008270263671875], "tokens": [351, 16600, 2182, 47, 16600, 32, 7426, 26, 1003, 6767, 30, 11259, 293]}
{"line_number": 282, "line_type": "generated", "code": "\n        }\n        return regex;\n    }\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @param unquote If true, replace two success quotes ('') with single", "entropy": 0.148193359375, "is_bug_line": false, "sus_score": 0.762935221195221, "per_token_entropy": [0.2110595703125, 0.6728515625, 0.09246826171875, 0.01154327392578125, 0.0004911422729492188, 0.0021915435791015625, 0.04638671875, 0.0017423629760742188, 0.277099609375, 0.278564453125, 0.014984130859375, 6.151199340820312e-05, 2.20703125, 0.0301666259765625, 0.32177734375, 0.07916259765625, 0.09625244140625, 0.751953125, 0.0172119140625, 0.145751953125, 0.0007104873657226562, 0.0291900634765625, 0.0028247833251953125, 0.355712890625, 0.0173492431640625, 0.06597900390625, 0.01438140869140625, 0.01473236083984375, 0.00039887428283691406, 0.0019369125366210938, 0.0156402587890625, 0.30712890625, 0.007354736328125, 0.013458251953125, 0.033966064453125, 0.01055908203125, 0.00189208984375, 0.002166748046875, 1.1806640625, 0.320556640625, 0.01009368896484375, 0.01320648193359375, 0.0006966590881347656, 0.0007185935974121094, 0.004886627197265625, 0.00955963134765625, 0.0006189346313476562, 0.0009665489196777344, 0.00769805908203125, 0.0003478527069091797, 0.00031828880310058594, 0.0013055801391601562], "tokens": [291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829, 1991, 10605, 6101, 275, 319, 477, 753, 9667, 886, 8050, 9667, 275, 319, 477, 753, 786, 886, 1914, 1600, 275, 319, 477, 753, 707, 7345, 1670, 861, 30, 7084, 3134, 3117, 22002, 2726, 683, 623, 3982]}
{"line_number": 286, "line_type": "original", "code": "            Strategy strategy= strategies[i++];", "entropy": 2.3515625, "is_bug_line": false, "sus_score": 0.762935221195221, "per_token_entropy": [8.3125, 6.2421875, 0.262451171875, 0.6953125, 0.411865234375, 0.03143310546875, 0.385986328125, 2.46875], "tokens": [1468, 39243, 13689, 47, 35678, 77, 91, 31783]}
{"line_number": 286, "line_type": "generated", "code": "\n    /**\n     * A strategy for parsing a specific field of a date.\n     */\n    private static class Strategy {\n\n        /**\n         * The calendar field.\n         */\n        private final int calendarField;\n\n        /**\n         * The regular expression.\n         */\n        private", "entropy": 0.486572265625, "is_bug_line": false, "sus_score": 0.762935221195221, "per_token_entropy": [0.7646484375, 0.55078125, 0.045379638671875, 0.0001360177993774414, 2.5234375, 0.314208984375, 0.8017578125, 0.1724853515625, 0.72802734375, 1.84765625, 0.70947265625, 1.263671875, 0.451416015625, 0.253662109375, 1.0849609375, 0.06353759765625, 0.423583984375, 0.0211334228515625, 0.54541015625, 0.22119140625, 0.40966796875, 0.1448974609375, 0.220703125, 0.943359375, 0.310546875, 0.62255859375, 7.987022399902344e-05, 1.1982421875, 1.6357421875, 0.212158203125, 1.0185546875, 0.014312744140625, 0.0014448165893554688, 0.0217132568359375, 0.1148681640625, 0.250244140625, 0.024444580078125, 0.179443359375, 0.002552032470703125, 0.005237579345703125, 0.230712890625, 0.01322174072265625, 0.004482269287109375, 0.0004811286926269531, 0.2396240234375, 3.345703125, 0.01258087158203125, 1.2978515625, 0.007549285888671875, 0.0018205642700195312, 0.001811981201171875, 0.0159912109375], "tokens": [284, 1022, 275, 319, 399, 13689, 436, 11708, 312, 2818, 1600, 432, 312, 2340, 32, 275, 569, 284, 945, 907, 443, 39243, 301, 584, 1022, 276, 319, 886, 14461, 1600, 32, 276, 569, 291, 945, 1158, 629, 14461, 1176, 45, 584, 1022, 276, 319, 886, 10605, 6101, 32, 276, 569, 291, 945]}
{"line_number": 290, "line_type": "original", "code": "        return cal.getTime();", "entropy": 3.6484375, "is_bug_line": false, "sus_score": 0.7587965130805969, "per_token_entropy": [3.841796875, 10.375, 6.859375, 0.7626953125, 0.0273590087890625, 0.0230560302734375], "tokens": [351, 442, 2182, 32, 11957, 473]}
{"line_number": 290, "line_type": "generated", "code": "\n    }\n\n    /**\n     * A strategy interface to be used by the parser\n     */\n    private static interface Strategy {\n\n        /**\n         * Set the field on the calendar\n         * @param parser The parser\n         * @param calendar The calendar\n         * @param value", "entropy": 0.4814453125, "is_bug_line": false, "sus_score": 0.7587965130805969, "per_token_entropy": [0.87353515625, 0.01421356201171875, 0.365478515625, 0.138427734375, 0.01397705078125, 0.001033782958984375, 0.80908203125, 0.8076171875, 2.3125, 1.62109375, 2.93359375, 0.98974609375, 0.763671875, 0.71044921875, 0.85888671875, 0.456298828125, 0.04718017578125, 0.004512786865234375, 0.14013671875, 0.454345703125, 0.11541748046875, 0.0012302398681640625, 0.05084228515625, 1.4560546875, 0.223388671875, 0.0139923095703125, 7.2479248046875e-05, 0.90771484375, 0.283935546875, 2.716796875, 0.7783203125, 0.01136016845703125, 0.3466796875, 0.85302734375, 0.0203094482421875, 0.054840087890625, 0.000560760498046875, 0.1688232421875, 0.36328125, 0.375244140625, 0.447021484375, 0.00021135807037353516, 6.592273712158203e-05, 5.996227264404297e-05, 0.38916015625, 0.048919677734375, 0.10784912109375, 0.464599609375, 0.004779815673828125, 0.000492095947265625, 0.0010776519775390625, 0.505859375], "tokens": [284, 320, 446, 1022, 275, 319, 399, 13689, 2568, 372, 526, 1654, 810, 322, 4118, 275, 569, 284, 945, 907, 2568, 39243, 301, 584, 1022, 276, 319, 1756, 322, 1600, 544, 322, 14461, 276, 319, 477, 753, 4118, 886, 4118, 276, 319, 477, 753, 14461, 886, 14461, 276, 319, 477, 753, 786]}
{"line_number": 537, "line_type": "original", "code": "            if(formatField.length()>2) {", "entropy": 1.9677734375, "is_bug_line": false, "sus_score": 0.7585267424583435, "per_token_entropy": [5.30078125, 8.265625, 0.206787109375, 3.689453125, 0.061309814453125, 0.0214080810546875, 0.814453125, 1.1884765625, 1.60546875, 0.38525390625, 0.10662841796875], "tokens": [1468, 415, 26, 1643, 1176, 32, 1322, 15365, 36, 27, 301]}
{"line_number": 537, "line_type": "generated", "code": "\n                return inCache;\n            }\n        }\n        return tzs;\n    }\n\n    /**\n     * A Strategy for parsing quoted text\n     */\n    private static class CopyQuotedStrategy implements Strategy {\n        private final String value;\n        CopyQuotedStrategy(String value)", "entropy": 0.318603515625, "is_bug_line": false, "sus_score": 0.7585267424583435, "per_token_entropy": [0.54443359375, 1.3857421875, 0.1337890625, 9.107589721679688e-05, 0.0175018310546875, 0.05889892578125, 0.0016765594482421875, 0.08319091796875, 0.004802703857421875, 0.2108154296875, 0.029083251953125, 0.004405975341796875, 0.00012505054473876953, 0.006244659423828125, 0.040618896484375, 0.005062103271484375, 0.2325439453125, 0.14111328125, 0.01433563232421875, 0.00039005279541015625, 1.2705078125, 1.5439453125, 1.435546875, 0.71923828125, 2.14453125, 0.72802734375, 0.720703125, 0.03485107421875, 0.004100799560546875, 0.12017822265625, 0.142578125, 0.316650390625, 0.0029773712158203125, 9.655952453613281e-06, 6.079673767089844e-06, 0.052947998046875, 0.0007715225219726562, 0.027435302734375, 0.10186767578125, 0.58154296875, 0.237548828125, 0.08782958984375, 2.23828125, 0.00988006591796875, 0.6708984375, 0.339111328125, 8.344650268554688e-06, 3.5762786865234375e-07, 0.0022125244140625, 0.0235137939453125, 0.08380126953125, 0.012359619140625], "tokens": [400, 442, 328, 2597, 45, 324, 320, 291, 320, 291, 442, 273, 23986, 45, 284, 320, 446, 1022, 275, 319, 399, 39243, 436, 11708, 34210, 1344, 275, 569, 284, 945, 907, 443, 2389, 42160, 8089, 4575, 39243, 301, 291, 945, 1158, 892, 786, 45, 291, 2389, 42160, 8089, 26, 652, 786, 27]}
{"line_number": 538, "line_type": "original", "code": "                formatField= formatField.substring(1, formatField.length()-1);", "entropy": 0.9375, "is_bug_line": false, "sus_score": 0.7580758333206177, "per_token_entropy": [4.6171875, 7.37890625, 0.1483154296875, 1.8916015625, 0.88671875, 0.0184326171875, 0.03973388671875, 0.469482421875, 0.0024242401123046875, 0.297119140625, 0.61376953125, 0.1944580078125, 0.00040268898010253906, 0.0013380050659179688, 0.01100921630859375, 0.1712646484375, 0.007595062255859375, 0.12060546875], "tokens": [2071, 2179, 1176, 47, 2179, 1176, 32, 8723, 26, 35, 30, 2179, 1176, 32, 1322, 17662, 35, 293]}
{"line_number": 538, "line_type": "generated", "code": "\n            }\n        }\n        return tzs;\n    }\n\n    /**\n     * A Strategy for parsing a quoted string literal\n     */\n    private static class CopyQuotedStrategy implements Strategy {\n        private final String formatField;\n        CopyQuotedStrategy(String formatField) {", "entropy": 0.2919921875, "is_bug_line": false, "sus_score": 0.7580758333206177, "per_token_entropy": [0.1490478515625, 0.01556396484375, 0.07366943359375, 0.00431060791015625, 0.057952880859375, 0.0389404296875, 0.00972747802734375, 0.0003211498260498047, 0.01128387451171875, 0.058563232421875, 0.002346038818359375, 0.26513671875, 0.152587890625, 0.01393890380859375, 0.0004248619079589844, 1.2724609375, 1.658203125, 1.373046875, 0.6923828125, 1.2041015625, 0.390869140625, 2.15234375, 0.89306640625, 0.5, 0.03936767578125, 0.0034999847412109375, 0.158935546875, 0.11578369140625, 0.3603515625, 0.00228118896484375, 1.2278556823730469e-05, 1.9788742065429688e-05, 0.046844482421875, 0.0007200241088867188, 0.0242462158203125, 0.0889892578125, 0.5283203125, 0.1932373046875, 0.1337890625, 1.40234375, 0.030426025390625, 0.0044708251953125, 0.5, 0.464599609375, 4.76837158203125e-06, 2.384185791015625e-07, 0.0019407272338867188, 0.0238037109375, 0.0506591796875, 0.0031719207763671875, 0.01108551025390625, 0.0008139610290527344], "tokens": [324, 320, 291, 320, 291, 442, 273, 23986, 45, 284, 320, 446, 1022, 275, 319, 399, 39243, 436, 11708, 312, 34210, 802, 10652, 275, 569, 284, 945, 907, 443, 2389, 42160, 8089, 4575, 39243, 301, 291, 945, 1158, 892, 2179, 1176, 45, 291, 2389, 42160, 8089, 26, 652, 2179, 1176, 27, 301]}
{"line_number": 283, "line_type": "original", "code": "        cal.clear();", "entropy": 2.85546875, "is_bug_line": false, "sus_score": 0.7568575143814087, "per_token_entropy": [4.37890625, 7.265625, 0.15673828125, 2.470703125, 0.01311492919921875], "tokens": [351, 2182, 32, 3815, 473]}
{"line_number": 283, "line_type": "generated", "code": "\n        return regex;\n    }\n\n    /**\n     * Create a strategy for a single field\n     * @param field The field\n     * @param pattern The pattern\n     * @return The strategy\n     */\n    private static Strategy createStrategy(int field, String pattern)", "entropy": 0.490478515625, "is_bug_line": false, "sus_score": 0.7568575143814087, "per_token_entropy": [0.4091796875, 0.0556640625, 0.00152587890625, 0.00350189208984375, 0.011962890625, 0.001346588134765625, 0.255615234375, 0.296630859375, 0.01349639892578125, 6.556510925292969e-05, 3.333984375, 0.35888671875, 1.9140625, 1.4658203125, 1.236328125, 2.51953125, 0.89990234375, 0.88134765625, 0.00812530517578125, 0.044830322265625, 0.01540374755859375, 1.25390625, 0.472412109375, 0.360107421875, 1.5302734375, 0.0056915283203125, 0.0003643035888671875, 0.408935546875, 2.013671875, 0.12078857421875, 0.77197265625, 0.5205078125, 0.00411224365234375, 0.0009431838989257812, 0.681640625, 0.158935546875, 0.325439453125, 0.0672607421875, 0.1163330078125, 0.0045928955078125, 0.2166748046875, 0.96533203125, 0.054107666015625, 0.2325439453125, 0.040557861328125, 0.007213592529296875, 1.2880859375, 0.00475311279296875, 0.0009565353393554688, 0.0975341796875, 0.01175689697265625, 0.0280303955078125], "tokens": [291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 2648, 312, 13689, 436, 312, 3982, 1600, 275, 319, 477, 753, 1600, 886, 1600, 275, 319, 477, 753, 5257, 886, 5257, 275, 319, 477, 601, 886, 13689, 275, 569, 284, 945, 907, 39243, 1487, 8089, 26, 410, 1600, 30, 892, 5257, 27]}
{"line_number": 278, "line_type": "original", "code": "        if(!matcher.lookingAt()) {", "entropy": 2.529296875, "is_bug_line": false, "sus_score": 0.7560177445411682, "per_token_entropy": [5.92578125, 4.734375, 3.5546875, 5.67578125, 0.037689208984375, 2.58203125, 0.00015354156494140625, 0.1365966796875, 0.1146240234375], "tokens": [351, 415, 3836, 16937, 32, 44535, 1076, 1157, 301]}
{"line_number": 278, "line_type": "generated", "code": "\n            }\n        }\n        return regex.append(value);\n    }\n\n    /**\n     * Add a strategy\n     * @param strategy The strategy to add\n     * @return This\n     */\n    private DateParser addStrategy(Strategy strategy) {\n        strategies= Arrays", "entropy": 0.40625, "is_bug_line": false, "sus_score": 0.7560177445411682, "per_token_entropy": [0.95068359375, 0.3447265625, 0.80029296875, 0.01081085205078125, 0.1103515625, 0.296875, 0.0213623046875, 0.48779296875, 0.0011425018310546875, 0.00901031494140625, 0.181884765625, 0.025177001953125, 0.0321044921875, 0.0010709762573242188, 0.22509765625, 0.2213134765625, 0.012237548828125, 7.140636444091797e-05, 3.0234375, 0.6318359375, 0.88134765625, 1.8623046875, 0.006687164306640625, 0.04656982421875, 0.0061798095703125, 0.44921875, 0.2374267578125, 0.1893310546875, 0.6962890625, 0.05474853515625, 0.0843505859375, 0.88916015625, 0.0012912750244140625, 0.383056640625, 1.2666015625, 0.91162109375, 0.03265380859375, 0.003078460693359375, 1.1767578125, 0.72412109375, 0.443115234375, 0.32177734375, 0.0011091232299804688, 0.00252532958984375, 0.0237274169921875, 0.01326751708984375, 0.0052947998046875, 0.0035915374755859375, 0.07257080078125, 1.2451171875, 1.142578125, 0.560546875], "tokens": [324, 320, 291, 320, 291, 442, 9667, 32, 1689, 26, 853, 293, 284, 320, 446, 1022, 275, 319, 2222, 312, 13689, 275, 319, 477, 753, 13689, 886, 13689, 372, 1015, 275, 319, 477, 601, 1348, 275, 569, 284, 945, 2821, 2825, 1015, 8089, 26, 8089, 13689, 27, 301, 291, 35678, 47, 14473]}
{"line_number": 289, "line_type": "original", "code": "        pos.setIndex(offset+matcher.end());", "entropy": 2.259765625, "is_bug_line": false, "sus_score": 0.7534293532371521, "per_token_entropy": [6.8984375, 16.125, 1.41015625, 0.06396484375, 9.071826934814453e-05, 0.005641937255859375, 0.77978515625, 0.6767578125, 0.9951171875, 0.00594329833984375, 0.050018310546875, 0.11749267578125], "tokens": [351, 3400, 32, 470, 1284, 26, 2881, 29, 16937, 32, 416, 1035]}
{"line_number": 289, "line_type": "generated", "code": "\n    private static class Strategy {\n        /** The field name */\n        private String fieldName;\n        /** The field value */\n        private String fieldValue;\n        /** The compiled regex */\n        private Pattern pattern;\n        /** The compiled regex */\n        private Matcher matcher;\n\n       ", "entropy": 0.48193359375, "is_bug_line": false, "sus_score": 0.7534293532371521, "per_token_entropy": [0.2352294921875, 0.51416015625, 0.10211181640625, 0.193603515625, 1.1201171875, 0.2880859375, 0.43212890625, 1.240234375, 0.5732421875, 2.169921875, 1.203125, 0.294921875, 0.0156402587890625, 0.137939453125, 0.77734375, 0.6416015625, 0.11712646484375, 0.10760498046875, 0.004978179931640625, 0.060699462890625, 1.216796875, 0.77099609375, 0.162353515625, 0.0019989013671875, 0.0050048828125, 0.1612548828125, 0.125244140625, 0.05828857421875, 0.005825042724609375, 0.515625, 0.0221710205078125, 0.1776123046875, 3.373046875, 0.88525390625, 0.329833984375, 0.0066986083984375, 0.007488250732421875, 0.107421875, 1.2314453125, 0.0191497802734375, 0.74755859375, 0.01558685302734375, 0.210693359375, 1.171875, 0.7939453125, 0.8388671875, 0.0281524658203125, 0.005863189697265625, 1.1826171875, 0.0748291015625, 0.0268096923828125, 0.5595703125], "tokens": [284, 945, 907, 443, 39243, 301, 291, 1022, 886, 1600, 636, 569, 291, 945, 892, 22779, 45, 291, 1022, 886, 1600, 786, 569, 291, 945, 892, 1600, 882, 45, 291, 1022, 886, 13831, 9667, 569, 291, 945, 13409, 5257, 45, 291, 1022, 886, 13831, 9667, 569, 291, 945, 33128, 20638, 45, 584]}
{"line_number": 260, "line_type": "original", "code": "        return date;", "entropy": 5.33203125, "is_bug_line": false, "sus_score": 0.7524558901786804, "per_token_entropy": [4.953125, 2.783203125, 11.9765625, 1.6103515625], "tokens": [351, 442, 2340, 45]}
{"line_number": 260, "line_type": "generated", "code": "\n                    }\n                    if(value.charAt(i)!='\\'') {\n                        regex.append(c);\n                    }\n                } else {\n                    regex.append(c);\n                }\n                break;\n            default:\n                regex.append(c);\n                break", "entropy": 0.1866455078125, "is_bug_line": false, "sus_score": 0.7524558901786804, "per_token_entropy": [0.57666015625, 0.0302276611328125, 0.19091796875, 0.44287109375, 0.016998291015625, 0.02935791015625, 4.100799560546875e-05, 5.996227264404297e-05, 0.00017571449279785156, 0.0002014636993408203, 0.391357421875, 0.82568359375, 0.01067352294921875, 0.0032024383544921875, 0.0084381103515625, 0.59423828125, 0.97314453125, 0.0005002021789550781, 0.004322052001953125, 1.2138671875, 0.063232421875, 0.01021575927734375, 0.2093505859375, 0.0020999908447265625, 0.2164306640625, 0.0010061264038085938, 0.4169921875, 0.0092620849609375, 0.131591796875, 0.004909515380859375, 0.0001926422119140625, 7.808208465576172e-05, 0.7275390625, 0.048553466796875, 0.0027408599853515625, 0.0104522705078125, 0.0018377304077148438, 0.0325927734375, 0.0117034912109375, 0.00032329559326171875, 0.04052734375, 1.478515625, 0.0167999267578125, 0.0102081298828125, 0.01175689697265625, 0.0003478527069091797, 1.8358230590820312e-05, 0.0028095245361328125, 0.006290435791015625, 0.0008707046508789062, 0.92041015625, 0.0016956329345703125], "tokens": [528, 320, 528, 415, 26, 853, 32, 15611, 26, 91, 27, 28057, 6945, 683, 301, 715, 9667, 32, 1689, 26, 85, 293, 528, 320, 400, 320, 813, 301, 528, 9667, 32, 1689, 26, 85, 293, 400, 320, 400, 1626, 45, 324, 1244, 44, 400, 9667, 32, 1689, 26, 85, 293, 400, 1626]}
{"line_number": 251, "line_type": "original", "code": "        if(date==null) {", "entropy": 2.306640625, "is_bug_line": false, "sus_score": 0.748365044593811, "per_token_entropy": [3.0859375, 2.17578125, 0.9736328125, 7.0, 4.17578125, 0.59423828125, 0.33056640625, 0.123046875], "tokens": [351, 415, 26, 770, 379, 1693, 27, 301]}
{"line_number": 251, "line_type": "generated", "code": "\n     */\n    private static void escape(StringBuilder regex, String value, boolean unquote) {\n        int len= value.length();\n        int offset= 0;\n        while(offset < len) {\n            int slash= value.indexOf('\\\\', offset", "entropy": 0.301513671875, "is_bug_line": false, "sus_score": 0.748365044593811, "per_token_entropy": [0.4814453125, 0.1900634765625, 0.018951416015625, 0.36181640625, 0.98974609375, 0.04779052734375, 1.560546875, 0.96826171875, 0.15576171875, 0.0026454925537109375, 0.0008378028869628906, 0.1942138671875, 0.0032405853271484375, 0.00940704345703125, 0.0298919677734375, 0.007129669189453125, 0.00370025634765625, 0.01708984375, 0.00652313232421875, 0.06573486328125, 0.927734375, 1.5439453125, 0.061553955078125, 0.062225341796875, 0.0034923553466796875, 0.0003046989440917969, 0.004688262939453125, 0.05596923828125, 2.017578125, 1.7568359375, 0.07806396484375, 0.302734375, 0.0228271484375, 0.007312774658203125, 0.1397705078125, 0.98388671875, 0.1400146484375, 0.164794921875, 0.4384765625, 0.01708984375, 0.1981201171875, 0.0019330978393554688, 0.023101806640625, 0.2313232421875, 0.9345703125, 0.09820556640625, 0.07421875, 2.0503997802734375e-05, 0.00292205810546875, 0.2357177734375, 0.0003325939178466797, 0.038299560546875], "tokens": [275, 569, 284, 945, 907, 763, 15820, 26, 20884, 9667, 30, 892, 786, 30, 1905, 707, 7345, 27, 301, 291, 629, 2069, 47, 786, 32, 1322, 473, 291, 629, 3401, 47, 225, 34, 45, 291, 2218, 26, 2881, 333, 2069, 27, 301, 324, 629, 29659, 47, 786, 32, 7142, 40348, 370, 3401]}
{"line_number": 359, "line_type": "original", "code": "        public int compare(KeyValue left, KeyValue right) {", "entropy": 1.689453125, "is_bug_line": false, "sus_score": 0.7455647587776184, "per_token_entropy": [2.9140625, 11.7734375, 2.138671875, 1.7978515625, 1.7099609375, 1.017578125, 0.525390625, 0.0013742446899414062, 0.0119781494140625, 0.00015175342559814453, 0.0015840530395507812, 0.01175689697265625, 0.0660400390625], "tokens": [351, 562, 629, 8868, 26, 22015, 2841, 30, 3891, 882, 2091, 27, 301]}
{"line_number": 359, "line_type": "generated", "code": "\n            eras[idx]= me.getKey();\n        }\n        return eras;\n    }\n\n    /**\n     * Create a sorted array of key / value pairs\n     * @param longNames The long names\n     * @param shortNames The short names\n     *", "entropy": 0.247802734375, "is_bug_line": false, "sus_score": 0.7455647587776184, "per_token_entropy": [0.44140625, 0.258056640625, 0.00012743473052978516, 0.00371551513671875, 0.006282806396484375, 0.57373046875, 0.1810302734375, 0.0012521743774414062, 0.00853729248046875, 0.005649566650390625, 0.09393310546875, 0.0028839111328125, 0.03662109375, 0.0124664306640625, 0.0036716461181640625, 2.5033950805664062e-06, 0.0006546974182128906, 0.0167388916015625, 0.0011053085327148438, 0.14404296875, 1.0087890625, 0.01456451416015625, 0.0004906654357910156, 0.68701171875, 0.99462890625, 1.048828125, 0.173583984375, 0.04559326171875, 1.0498046875, 0.5615234375, 0.07183837890625, 0.06903076171875, 0.59423828125, 0.01377105712890625, 0.04791259765625, 0.0012350082397460938, 0.221435546875, 1.1025390625, 0.74755859375, 0.3017578125, 0.449462890625, 0.64111328125, 3.135204315185547e-05, 0.0001035928726196289, 0.001323699951171875, 0.00318145751953125, 0.003082275390625, 0.07110595703125, 0.10003662109375, 0.011871337890625, 1.0458984375, 0.005584716796875], "tokens": [324, 5097, 302, 77, 2875, 7770, 597, 32, 11728, 473, 291, 320, 291, 442, 5097, 302, 45, 284, 320, 446, 1022, 275, 319, 2648, 312, 8594, 1417, 432, 1202, 517, 786, 11847, 275, 319, 477, 753, 1946, 4109, 886, 1946, 4467, 275, 319, 477, 753, 4504, 4109, 886, 4504, 4467, 275, 319]}
{"line_number": 472, "line_type": "original", "code": "    int adjustYear(int twoDigitYear) {", "entropy": 1.6123046875, "is_bug_line": false, "sus_score": 0.736469566822052, "per_token_entropy": [3.853515625, 6.3515625, 2.810546875, 1.14453125, 0.189453125, 0.1553955078125, 2.78125, 0.0006923675537109375, 0.0010547637939453125, 0.402587890625, 0.04638671875], "tokens": [264, 629, 10891, 6617, 26, 410, 3134, 21530, 6617, 27, 301]}
{"line_number": 472, "line_type": "generated", "code": "\n    private static class NumberStrategy implements Strategy {\n        private int field;\n        NumberStrategy(int field) {\n            this.field= field;\n        }\n        public boolean isNumber() {\n            return true;\n        }\n        public void setCalendar(FastDate", "entropy": 0.203857421875, "is_bug_line": false, "sus_score": 0.736469566822052, "per_token_entropy": [0.5712890625, 1.0068359375, 0.466064453125, 0.685546875, 0.75048828125, 0.0014495849609375, 0.058868408203125, 0.0005893707275390625, 0.0261688232421875, 0.1597900390625, 0.826171875, 2.060546875, 0.43212890625, 0.301513671875, 0.5673828125, 1.443359375, 0.00010097026824951172, 0.00753021240234375, 0.0205841064453125, 0.01392364501953125, 0.0423583984375, 0.0009450912475585938, 0.0272979736328125, 0.0379638671875, 0.00020325183868408203, 0.00015842914581298828, 0.052642822265625, 0.01364898681640625, 0.0030841827392578125, 0.004505157470703125, 0.0004372596740722656, 0.1612548828125, 0.58251953125, 0.0921630859375, 0.0277099609375, 0.0004417896270751953, 0.00621795654296875, 0.0011453628540039062, 0.033447265625, 0.0018768310546875, 0.00569915771484375, 0.00010919570922851562, 0.001605987548828125, 0.0006113052368164062, 0.0301971435546875, 0.032318115234375, 0.0192108154296875, 0.0013580322265625, 0.00016391277313232422, 0.00025272369384765625, 0.009796142578125, 0.0131378173828125], "tokens": [284, 945, 907, 443, 5104, 8089, 4575, 39243, 301, 291, 945, 629, 1600, 45, 291, 5104, 8089, 26, 410, 1600, 27, 301, 324, 458, 32, 1495, 47, 1600, 45, 291, 320, 291, 562, 1905, 438, 1918, 346, 301, 324, 442, 861, 45, 291, 320, 291, 562, 763, 739, 9389, 26, 12200, 1547]}
{"line_number": 145, "line_type": "original", "code": "            collector.add(currentStrategy);", "entropy": 2.09765625, "is_bug_line": false, "sus_score": 0.7353236675262451, "per_token_entropy": [4.57421875, 12.0859375, 0.044403076171875, 0.053436279296875, 0.006542205810546875, 0.01338958740234375, 0.002597808837890625, 0.00397491455078125], "tokens": [1468, 26013, 32, 669, 26, 1700, 8089, 293]}
{"line_number": 145, "line_type": "generated", "code": "\n        }\n        FastDateParser other = (FastDateParser) obj;\n        if (this.pattern == null) {\n            if (other.pattern!= null) {\n                return false;\n            }\n        } else if (!this.pattern.equals(", "entropy": 0.11920166015625, "is_bug_line": false, "sus_score": 0.7353236675262451, "per_token_entropy": [0.1868896484375, 0.276123046875, 0.10845947265625, 0.040985107421875, 0.0014867782592773438, 0.0010623931884765625, 0.06915283203125, 0.302001953125, 0.004146575927734375, 0.00324249267578125, 0.00024700164794921875, 4.220008850097656e-05, 0.00020742416381835938, 0.0237579345703125, 0.0019989013671875, 0.1961669921875, 0.5244140625, 0.6748046875, 1.55078125, 0.15380859375, 0.264404296875, 0.96826171875, 0.141357421875, 0.0980224609375, 0.0015344619750976562, 0.025726318359375, 0.0169219970703125, 0.008056640625, 0.00457000732421875, 0.0003464221954345703, 0.01322174072265625, 0.0067138671875, 0.0008692741394042969, 0.002368927001953125, 0.0113677978515625, 0.11676025390625, 0.0006632804870605469, 0.0007414817810058594, 0.0013284683227539062, 0.23583984375, 0.00028824806213378906, 0.03057861328125, 0.0003108978271484375, 0.022705078125, 0.016265869140625, 0.00969696044921875, 0.0794677734375, 4.172325134277344e-05, 0.0004813671112060547, 0.00047278404235839844, 1.6570091247558594e-05, 0.0005335807800292969], "tokens": [291, 320, 291, 15938, 1547, 2825, 1604, 280, 308, 12200, 1547, 2825, 27, 2830, 45, 291, 415, 308, 578, 32, 5607, 610, 744, 27, 301, 324, 415, 308, 2455, 32, 5607, 863, 744, 27, 301, 400, 442, 901, 45, 324, 320, 291, 320, 813, 415, 1429, 578, 32, 5607, 32, 3574, 26]}
{"line_number": 741, "line_type": "original", "code": "            return iValue;", "entropy": 3.044921875, "is_bug_line": false, "sus_score": 0.7351240515708923, "per_token_entropy": [6.16796875, 4.515625, 4.171875, 0.2568359375, 0.1168212890625], "tokens": [1468, 442, 595, 882, 45]}
{"line_number": 741, "line_type": "generated", "code": "\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean isNumber() {\n            return false;\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex", "entropy": 0.04437255859375, "is_bug_line": false, "sus_score": 0.7351240515708923, "per_token_entropy": [0.10400390625, 0.0014829635620117188, 0.07257080078125, 0.06964111328125, 0.0046539306640625, 0.00011789798736572266, 0.1976318359375, 0.0003619194030761719, 0.00020074844360351562, 0.0007600784301757812, 0.0014905929565429688, 0.0012683868408203125, 0.01517486572265625, 0.00014126300811767578, 0.00102996826171875, 0.0018024444580078125, 0.043609619140625, 0.33984375, 1.216796875, 0.0020084381103515625, 0.00011909008026123047, 0.015655517578125, 0.0026721954345703125, 0.07598876953125, 0.00018799304962158203, 0.00820159912109375, 0.00042700767517089844, 0.0186614990234375, 0.00933074951171875, 0.001983642578125, 8.094310760498047e-05, 0.0274810791015625, 0.00016427040100097656, 0.00021255016326904297, 0.0002123117446899414, 0.0012769699096679688, 0.00046515464782714844, 0.0018377304077148438, 2.5510787963867188e-05, 0.0004546642303466797, 0.0036945343017578125, 0.01727294921875, 0.03509521484375, 0.0003914833068847656, 7.963180541992188e-05, 0.00130462646484375, 0.0017061233520507812, 0.0004699230194091797, 0.0006160736083984375, 8.893013000488281e-05, 0.0012731552124023438, 0.00412750244140625], "tokens": [291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 1905, 438, 1918, 346, 301, 324, 442, 901, 45, 291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 1905, 1015, 10851, 26, 12200, 1547, 2825, 4118, 30, 9706, 9667]}
{"line_number": 324, "line_type": "original", "code": "            case '*':", "entropy": 5.2890625, "is_bug_line": false, "sus_score": 0.7343272566795349, "per_token_entropy": [3.21875, 7.69140625, 10.2265625, 0.0143890380859375], "tokens": [1468, 1135, 13838, 950]}
{"line_number": 324, "line_type": "generated", "code": "\n        }\n        return fieldKeyValues;\n    }\n\n    /**\n     * Get the short and long values displayed for a field\n     * @param field The field of interest\n     * @param length The length of the array to create\n     * @return A sorted array", "entropy": 0.322509765625, "is_bug_line": false, "sus_score": 0.7343272566795349, "per_token_entropy": [1.8583984375, 0.034881591796875, 0.076171875, 0.09307861328125, 0.1126708984375, 0.0010280609130859375, 9.5367431640625e-07, 0.03765869140625, 0.0160675048828125, 0.001087188720703125, 0.323974609375, 0.18359375, 0.009429931640625, 0.0003991127014160156, 1.111328125, 0.210693359375, 1.65234375, 0.294921875, 0.00392913818359375, 0.0771484375, 0.2227783203125, 0.00705718994140625, 0.064697265625, 0.1046142578125, 0.10443115234375, 0.0017824172973632812, 0.01230621337890625, 0.0234832763671875, 0.1605224609375, 0.0350341796875, 0.014495849609375, 0.0128326416015625, 6.23464584350586e-05, 0.01509857177734375, 0.0026149749755859375, 0.000396728515625, 1.0849609375, 2.630859375, 0.33447265625, 0.38037109375, 0.287841796875, 0.1497802734375, 1.73046875, 0.62548828125, 1.9404296875, 0.34326171875, 0.003528594970703125, 0.001094818115234375, 0.09649658203125, 0.229248046875, 0.047119140625, 0.0025653839111328125], "tokens": [291, 320, 291, 442, 1600, 953, 3354, 45, 284, 320, 446, 1022, 275, 319, 1390, 322, 4504, 461, 1946, 2078, 11067, 436, 312, 1600, 275, 319, 477, 753, 1600, 886, 1600, 432, 10219, 275, 319, 477, 753, 3104, 886, 3104, 432, 322, 1417, 372, 1487, 275, 319, 477, 601, 399, 8594, 1417]}
{"line_number": 276, "line_type": "original", "code": "        int offset= pos.getIndex();", "entropy": 3.478515625, "is_bug_line": false, "sus_score": 0.7341611981391907, "per_token_entropy": [5.4375, 8.6953125, 4.61328125, 0.1488037109375, 7.2734375, 1.3125, 0.12359619140625, 0.219482421875], "tokens": [351, 629, 3401, 47, 3400, 32, 27829, 473]}
{"line_number": 276, "line_type": "generated", "code": "\n                break;\n            default:\n                if(c<32) {\n                    return regex;\n                }\n                break;\n            }\n            regex.append('\\\\');\n        }\n        return regex.append(value);\n    }\n\n    /**\n     * Escape constant fields", "entropy": 0.3173828125, "is_bug_line": false, "sus_score": 0.7341611981391907, "per_token_entropy": [0.7587890625, 0.6044921875, 0.0010662078857421875, 0.040679931640625, 1.0087890625, 0.00885772705078125, 0.09210205078125, 2.07421875, 0.142578125, 0.65625, 1.013671875, 1.15234375, 0.06561279296875, 0.266845703125, 0.0031948089599609375, 0.134033203125, 1.408203125, 0.05279541015625, 0.0167083740234375, 0.0218353271484375, 0.0006823539733886719, 0.9619140625, 0.288818359375, 0.0009469985961914062, 0.015716552734375, 0.003078460693359375, 0.07196044921875, 0.0185089111328125, 0.0019168853759765625, 0.00025153160095214844, 1.01953125, 0.1649169921875, 0.40576171875, 0.0004963874816894531, 0.029266357421875, 0.448486328125, 0.0013113021850585938, 0.37744140625, 0.00018858909606933594, 0.001873016357421875, 0.00873565673828125, 0.01332855224609375, 0.02374267578125, 0.000797271728515625, 0.20263671875, 0.2032470703125, 0.01169586181640625, 8.14199447631836e-05, 2.23046875, 0.0396728515625, 0.3662109375, 0.05975341796875], "tokens": [400, 1626, 45, 324, 1244, 44, 400, 415, 26, 85, 46, 37, 36, 27, 301, 528, 442, 9667, 45, 400, 320, 400, 1626, 45, 324, 320, 324, 9667, 32, 1689, 40348, 895, 291, 320, 291, 442, 9667, 32, 1689, 26, 853, 293, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829]}
{"line_number": 305, "line_type": "original", "code": "            char c= value.charAt(i);", "entropy": 1.787109375, "is_bug_line": false, "sus_score": 0.7291261553764343, "per_token_entropy": [7.4375, 8.0, 0.583984375, 0.533203125, 0.9169921875, 0.0239105224609375, 0.0016260147094726562, 0.00562286376953125, 0.2666015625, 0.09869384765625], "tokens": [1468, 1351, 281, 47, 786, 32, 15611, 26, 91, 293]}
{"line_number": 305, "line_type": "generated", "code": "\n     * A strategy is a set of rules for parsing a specific part of the date.\n     * <p>\n     * The strategy contains a regular expression and a set of rules.\n     * The rules are used to assign values to the calendar.\n     *", "entropy": 0.83935546875, "is_bug_line": false, "sus_score": 0.7291261553764343, "per_token_entropy": [0.72607421875, 0.1475830078125, 1.0888671875, 0.521484375, 2.013671875, 1.169921875, 1.7451171875, 0.00989532470703125, 1.064453125, 0.82568359375, 0.8818359375, 0.460693359375, 0.88525390625, 2.19921875, 0.05023193359375, 1.2412109375, 0.1739501953125, 1.5146484375, 0.154296875, 0.285400390625, 1.3115234375, 0.031829833984375, 0.020782470703125, 0.08685302734375, 0.0005841255187988281, 1.4267578125, 1.2001953125, 1.775390625, 0.75244140625, 3.056640625, 0.005199432373046875, 1.365234375, 0.509765625, 0.8623046875, 0.0098419189453125, 1.8740234375, 1.267578125, 0.3984375, 0.038421630859375, 0.82275390625, 0.357177734375, 1.4462890625, 2.181640625, 0.2354736328125, 1.6650390625, 0.81787109375, 0.1807861328125, 0.468017578125, 1.166015625, 0.87890625, 0.1143798828125, 0.1802978515625], "tokens": [275, 319, 399, 13689, 438, 312, 739, 432, 7019, 436, 11708, 312, 2818, 1742, 432, 322, 2340, 32, 275, 319, 333, 98, 48, 275, 319, 886, 13689, 4304, 312, 10605, 6101, 461, 312, 739, 432, 7019, 32, 275, 319, 886, 7019, 884, 1654, 372, 5313, 2078, 372, 322, 14461, 32, 275, 319]}
