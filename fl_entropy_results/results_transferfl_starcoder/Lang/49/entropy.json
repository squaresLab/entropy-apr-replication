{"line_number": 146, "line_type": "original", "code": "            if (numerator==Integer.MIN_VALUE ||", "entropy": 1.45703125, "is_bug_line": false, "sus_score": 0.6163195371627808, "per_token_entropy": [5.63671875, 3.119140625, 0.1531982421875, 1.2265625, 0.01934814453125, 3.091796875, 0.904296875, 0.001720428466796875, 0.0114898681640625, 0.00014793872833251953, 0.00013554096221923828, 3.322265625], "tokens": [1468, 415, 308, 1516, 11290, 379, 3061, 32, 4683, 81, 5975, 1276]}
{"line_number": 146, "line_type": "generated", "code": "\n    /**\n     * <p>Gets the fraction as a <code>double</code>.</p>\n     *\n     * <p>This calculates the fraction as the numerator divided by denominator.</p>\n     *\n     * @return this fraction as a", "entropy": 0.10833740234375, "is_bug_line": false, "sus_score": 0.6163195371627808, "per_token_entropy": [1.5517578125, 0.33935546875, 0.07830810546875, 0.0001550912857055664, 0.1436767578125, 0.0008955001831054688, 0.00225067138671875, 0.492919921875, 0.0185089111328125, 0.29443359375, 0.0227508544921875, 0.151611328125, 0.00960540771484375, 0.003261566162109375, 0.0014181137084960938, 0.33203125, 0.000621795654296875, 0.00021910667419433594, 0.464111328125, 8.034706115722656e-05, 0.0019741058349609375, 0.0072174072265625, 0.0007076263427734375, 0.105224609375, 0.00012111663818359375, 0.35205078125, 0.005153656005859375, 0.06732177734375, 0.0938720703125, 0.14208984375, 0.0003628730773925781, 0.005199432373046875, 0.0186614990234375, 0.032958984375, 0.0263214111328125, 4.1961669921875e-05, 0.01352691650390625, 0.175048828125, 0.1475830078125, 0.047760009765625, 0.00023925304412841797, 0.0006232261657714844, 0.00954437255859375, 0.0007576942443847656, 0.05181884765625, 0.0002560615539550781, 0.04974365234375, 0.0042724609375, 0.3310546875, 0.030914306640625, 0.002002716064453125, 0.0012454986572265625], "tokens": [284, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 687, 48, 2627, 377, 687, 12689, 98, 48, 275, 319, 275, 319, 333, 98, 48, 2272, 38057, 322, 18795, 619, 322, 1929, 11290, 32235, 810, 39920, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 458, 18795, 619, 312]}
{"line_number": 470, "line_type": "original", "code": "        return Fraction.getFraction(numerator / gcd, denominator / gcd);", "entropy": 1.5205078125, "is_bug_line": false, "sus_score": 0.6146706938743591, "per_token_entropy": [6.9453125, 0.759765625, 6.87890625, 0.039093017578125, 1.9921875, 0.071533203125, 0.114501953125, 0.62109375, 0.0005154609680175781, 5.69140625, 1.0390625, 0.0169830322265625, 0.092041015625, 0.042938232421875, 0.0094451904296875, 0.016693115234375], "tokens": [351, 442, 40823, 32, 371, 20709, 26, 1516, 11290, 517, 43422, 30, 39920, 517, 43422, 293]}
{"line_number": 470, "line_type": "generated", "code": "\n\n    /**\n     * <p>Gets a fraction that is the absolute value of this one.</p>\n     *\n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction instance with the absolute value of", "entropy": 0.1080322265625, "is_bug_line": false, "sus_score": 0.6146706938743591, "per_token_entropy": [0.4697265625, 0.393310546875, 0.01293182373046875, 4.982948303222656e-05, 0.0219573974609375, 5.638599395751953e-05, 0.00038123130798339844, 0.3701171875, 0.196533203125, 0.008514404296875, 0.11126708984375, 0.00577545166015625, 0.024017333984375, 0.158203125, 0.185546875, 0.0165863037109375, 0.0006918907165527344, 0.0013036727905273438, 0.000553131103515625, 5.555152893066406e-05, 0.0002300739288330078, 0.0079803466796875, 2.4437904357910156e-05, 1.375, 1.4543533325195312e-05, 0.0151214599609375, 0.002071380615234375, 0.0016326904296875, 0.0098876953125, 0.00746917724609375, 0.000659942626953125, 0.0016994476318359375, 0.003192901611328125, 0.0007863044738769531, 0.00131988525390625, 0.0001366138458251953, 0.00026679039001464844, 0.001956939697265625, 3.731250762939453e-05, 0.044342041015625, 0.0003082752227783203, 0.0033817291259765625, 0.00095367431640625, 0.317138671875, 0.017242431640625, 0.0760498046875, 0.01873779296875, 0.062103271484375, 0.409912109375, 0.30126953125, 0.478515625, 0.478271484375], "tokens": [446, 1022, 275, 319, 333, 98, 48, 20931, 312, 18795, 688, 438, 322, 7976, 786, 432, 458, 1591, 1730, 98, 48, 275, 319, 275, 319, 333, 98, 48, 1318, 4717, 18795, 438, 646, 22974, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 312, 537, 18795, 1980, 623, 322, 7976, 786, 432]}
{"line_number": 150, "line_type": "original", "code": "            numerator = -numerator;", "entropy": 5.1328125, "is_bug_line": false, "sus_score": 0.6146570444107056, "per_token_entropy": [7.5078125, 5.75390625, 7.510185241699219e-05, 7.328125, 7.51953125, 11.984375, 0.00881195068359375, 0.9521484375], "tokens": [1468, 1929, 11290, 280, 429, 1516, 11290, 45]}
{"line_number": 150, "line_type": "generated", "code": "\n     * instance will represent 1/2.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three", "entropy": 0.06939697265625, "is_bug_line": false, "sus_score": 0.6146570444107056, "per_token_entropy": [0.978515625, 0.0115203857421875, 0.366943359375, 0.50439453125, 0.98828125, 0.05810546875, 2.86102294921875e-06, 0.00018405914306640625, 7.987022399902344e-05, 0.09051513671875, 0.00022411346435546875, 0.0021495819091796875, 0.016876220703125, 0.0019397735595703125, 0.0494384765625, 7.092952728271484e-05, 0.459716796875, 0.00080108642578125, 0.0008044242858886719, 5.245208740234375e-05, 0.00341033935546875, 0.0019207000732421875, 0.0007948875427246094, 1.728534698486328e-05, 0.027252197265625, 0.0018777847290039062, 1.5616416931152344e-05, 0.0006885528564453125, 0.005580902099609375, 0.00036454200744628906, 0.0006003379821777344, 0.00118255615234375, 0.02325439453125, 1.0728836059570312e-06, 2.5033950805664062e-06, 0.00014328956604003906, 0.0012083053588867188, 1.537799835205078e-05, 6.747245788574219e-05, 0.00011241436004638672, 0.0001938343048095703, 0.003772735595703125, 0.00012159347534179688, 0.0002536773681640625, 0.00013339519500732422, 0.0002073049545288086, 9.441375732421875e-05, 7.998943328857422e-05, 0.0016717910766601562, 6.4373016357421875e-06, 0.0018548965454101562, 3.910064697265625e-05], "tokens": [275, 319, 1980, 1098, 4042, 225, 35, 33, 36, 1730, 98, 48, 275, 319, 275, 319, 477, 753, 1929, 11290, 225, 322, 1929, 11290, 30, 436, 2280, 322, 8019, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 753, 39920, 225, 322, 39920, 30, 436, 2280, 322, 46213, 328, 330, 12192]}
{"line_number": 466, "line_type": "original", "code": "        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);", "entropy": 1.0322265625, "is_bug_line": true, "sus_score": 0.6143859028816223, "per_token_entropy": [3.693359375, 5.30078125, 5.1953125, 0.167236328125, 2.400390625, 0.00127410888671875, 0.09332275390625, 0.0001304149627685547, 0.016510009765625, 1.2548828125, 0.0271148681640625, 0.0002307891845703125, 0.0009469985961914062, 0.054290771484375, 0.00490570068359375, 0.0014629364013671875, 0.36669921875, 0.00583648681640625], "tokens": [351, 629, 43422, 280, 48299, 5240, 6775, 22306, 26, 5717, 32, 3596, 26, 1516, 11290, 471, 39920, 293]}
{"line_number": 466, "line_type": "generated", "code": "\n     * @return a new fraction instance with the same value as this one, but\n     *         always positive\n     */\n    public Fraction abs() {\n        if (numerator>=0) {\n            return this;\n        } else {\n            return negate();", "entropy": 0.22119140625, "is_bug_line": true, "sus_score": 0.6143859028816223, "per_token_entropy": [0.193603515625, 0.27978515625, 0.278076171875, 0.00518035888671875, 0.3193359375, 0.018341064453125, 0.0285797119140625, 0.061309814453125, 1.0068359375, 0.0904541015625, 0.033294677734375, 1.9287109375, 0.7431640625, 0.0087890625, 1.470703125, 0.1722412109375, 0.3017578125, 0.027313232421875, 6.365776062011719e-05, 0.12841796875, 0.93359375, 0.103271484375, 0.525390625, 0.025970458984375, 0.033721923828125, 0.006927490234375, 0.0019550323486328125, 0.01146697998046875, 0.0042877197265625, 0.00994110107421875, 0.1346435546875, 0.564453125, 0.006984710693359375, 0.0272216796875, 1.2993812561035156e-05, 1.3486328125, 0.0133056640625, 0.0158233642578125, 0.0010595321655273438, 0.006610870361328125, 0.00264739990234375, 0.0155029296875, 0.0001474618911743164, 0.0104522705078125, 0.00015425682067871094, 0.1485595703125, 0.016448974609375, 0.007778167724609375, 0.04779052734375, 0.375, 1.4781951904296875e-05, 0.0006651878356933594], "tokens": [275, 319, 477, 601, 312, 537, 18795, 1980, 623, 322, 2432, 786, 619, 458, 1591, 30, 1273, 275, 319, 263, 5182, 11557, 275, 569, 284, 562, 40823, 11366, 346, 301, 291, 415, 308, 1516, 11290, 7148, 34, 27, 301, 324, 442, 458, 45, 291, 320, 813, 301, 324, 442, 7528, 332, 473]}
{"line_number": 467, "line_type": "original", "code": "        if (gcd == 1) {", "entropy": 1.78125, "is_bug_line": false, "sus_score": 0.6078065633773804, "per_token_entropy": [2.482421875, 1.9638671875, 0.050079345703125, 9.9296875, 1.068359375, 0.0924072265625, 0.13671875, 0.214111328125, 0.08990478515625], "tokens": [351, 415, 308, 46060, 610, 225, 35, 27, 301]}
{"line_number": 467, "line_type": "generated", "code": "\n    }\n\n    /**\n     * <p>Gets a fraction that is the absolute value of this one.</p>\n     * <p>More precisely: <code>(fraction >= 0? fraction : -fraction)</code></p>\n     *\n    ", "entropy": 0.1561279296875, "is_bug_line": false, "sus_score": 0.6078065633773804, "per_token_entropy": [2.39453125, 1.0771484375, 0.37939453125, 0.148193359375, 0.0160064697265625, 3.504753112792969e-05, 0.036285400390625, 8.428096771240234e-05, 0.0006556510925292969, 0.424560546875, 0.26318359375, 0.01715087890625, 0.2490234375, 0.0091400146484375, 0.048004150390625, 0.17578125, 0.11041259765625, 0.01145172119140625, 0.0007882118225097656, 0.0011892318725585938, 0.0011739730834960938, 7.522106170654297e-05, 0.0002503395080566406, 0.00635528564453125, 3.3855438232421875e-05, 0.755859375, 0.0040283203125, 0.003398895263671875, 0.0675048828125, 0.0006208419799804688, 3.170967102050781e-05, 0.035919189453125, 0.0178375244140625, 0.0005731582641601562, 0.0018558502197265625, 0.0037555694580078125, 0.20263671875, 0.0010137557983398438, 0.0007023811340332031, 0.0026111602783203125, 1.5009765625, 0.00018262863159179688, 0.0001894235610961914, 0.0002503395080566406, 0.0015163421630859375, 0.0001977682113647461, 0.00426483154296875, 2.4318695068359375e-05, 0.0005764961242675781, 0.0028247833251953125, 2.7298927307128906e-05, 0.1385498046875], "tokens": [284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 312, 18795, 688, 438, 322, 7976, 786, 432, 458, 1591, 1730, 98, 48, 275, 319, 333, 98, 48, 8892, 27447, 631, 44, 333, 687, 1563, 21284, 2377, 225, 34, 1018, 18795, 499, 429, 21284, 2874, 687, 855, 98, 48, 275, 319, 275]}
{"line_number": 151, "line_type": "original", "code": "            denominator = -denominator;", "entropy": 3.83984375, "is_bug_line": false, "sus_score": 0.6045650243759155, "per_token_entropy": [7.6015625, 9.0078125, 1.111328125, 6.17578125, 2.857421875, 0.00046062469482421875, 0.12225341796875], "tokens": [1468, 39920, 280, 429, 29805, 9693, 45]}
{"line_number": 151, "line_type": "generated", "code": "\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance, or", "entropy": 0.046112060546875, "is_bug_line": false, "sus_score": 0.6045650243759155, "per_token_entropy": [0.373779296875, 0.281982421875, 0.64111328125, 0.0068511962890625, 0.001556396484375, 8.90493392944336e-05, 0.00568389892578125, 0.00211334228515625, 0.0010080337524414062, 1.609325408935547e-05, 0.040435791015625, 0.004177093505859375, 1.0848045349121094e-05, 0.0028438568115234375, 0.00591278076171875, 0.0002760887145996094, 0.0002751350402832031, 0.0018682479858398438, 0.03472900390625, 1.1920928955078125e-06, 1.6689300537109375e-06, 0.00010144710540771484, 0.001979827880859375, 1.6570091247558594e-05, 0.00010609626770019531, 0.00019025802612304688, 0.00028967857360839844, 0.003253936767578125, 7.62939453125e-05, 0.00023472309112548828, 0.00012302398681640625, 0.0002046823501586914, 8.320808410644531e-05, 7.557868957519531e-05, 0.001354217529296875, 4.649162292480469e-06, 0.0008492469787597656, 2.491474151611328e-05, 0.00029397010803222656, 6.914138793945312e-05, 1.3828277587890625e-05, 0.0007305145263671875, 0.01273345947265625, 0.007381439208984375, 0.0007791519165039062, 0.0195465087890625, 0.0052337646484375, 0.03765869140625, 0.05938720703125, 0.01215362548828125, 0.44970703125, 0.37841796875], "tokens": [275, 319, 477, 753, 1929, 11290, 225, 322, 1929, 11290, 30, 436, 2280, 322, 8019, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 753, 39920, 225, 322, 39920, 30, 436, 2280, 322, 46213, 328, 330, 12192, 408, 654, 3914, 25, 275, 319, 477, 601, 312, 537, 18795, 1980, 30, 556]}
{"line_number": 468, "line_type": "original", "code": "            return this;", "entropy": 4.62890625, "is_bug_line": false, "sus_score": 0.5928579568862915, "per_token_entropy": [5.74609375, 7.72265625, 2.34375, 2.708984375], "tokens": [1468, 442, 458, 45]}
{"line_number": 468, "line_type": "generated", "code": "\n     */\n    public Fraction abs() {\n        return (numerator >= 0? this : negate());\n    }\n\n    /**\n     * <p>Gets a fraction whose value is the <code>numerator/denominator</code>\n     * reduced", "entropy": 0.26318359375, "is_bug_line": false, "sus_score": 0.5928579568862915, "per_token_entropy": [0.488525390625, 0.07470703125, 0.0172576904296875, 0.00641632080078125, 0.001529693603515625, 0.0181732177734375, 0.003932952880859375, 0.0117034912109375, 0.157470703125, 1.0302734375, 0.0916748046875, 0.0209808349609375, 6.4373016357421875e-06, 0.3251953125, 0.0045166015625, 9.417533874511719e-06, 0.09771728515625, 0.004352569580078125, 0.007091522216796875, 0.76953125, 4.0531158447265625e-05, 0.00457763671875, 0.0236663818359375, 3.6716461181640625e-05, 0.11871337890625, 0.19140625, 0.0084228515625, 2.0503997802734375e-05, 0.040069580078125, 4.6253204345703125e-05, 0.0005092620849609375, 0.67822265625, 0.202880859375, 0.00980377197265625, 1.068359375, 0.1793212890625, 8.702278137207031e-05, 0.11370849609375, 1.6767578125, 0.358642578125, 0.2734375, 2.462890625, 0.0004639625549316406, 0.609375, 0.002780914306640625, 3.5643577575683594e-05, 0.001468658447265625, 0.00019919872283935547, 0.09149169921875, 0.161865234375, 0.00012969970703125, 2.279296875], "tokens": [275, 569, 284, 562, 40823, 11366, 346, 301, 291, 442, 308, 1516, 11290, 2377, 225, 34, 1018, 458, 499, 7528, 332, 1035, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 312, 18795, 13696, 786, 438, 322, 333, 687, 48, 1516, 11290, 33, 29805, 9693, 377, 687, 48, 275, 319, 22974]}
{"line_number": 590, "line_type": "original", "code": "        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;", "entropy": 2.23046875, "is_bug_line": false, "sus_score": 0.5564338564872742, "per_token_entropy": [4.96484375, 5.203125, 6.25, 0.1563720703125, 4.06640625, 3.8515625, 0.3642578125, 4.20703125, 3.095703125, 0.66015625, 1.0771484375, 0.01244354248046875, 1.0283203125, 0.1405029296875, 3.25, 0.99365234375, 0.45166015625, 0.04449462890625, 1.7724609375, 3.775390625, 2.2890625, 3.01171875, 0.64404296875], "tokens": [351, 629, 273, 280, 1833, 103, 24, 35, 19162, 35, 27, 1018, 354, 499, 25298, 103, 33, 36, 27, 1109, 52, 37, 35202]}
{"line_number": 590, "line_type": "generated", "code": "\n     * @throws ArithmeticException if the result can not be represented as\n     *                             an int\n     */\n    private static int mulPosAndCheck(int x, int y) {\n        long m = ((long)x)*((long)y);\n       ", "entropy": 0.0980224609375, "is_bug_line": false, "sus_score": 0.5564338564872742, "per_token_entropy": [0.2088623046875, 0.845703125, 0.0081787109375, 0.033294677734375, 0.0401611328125, 0.00016045570373535156, 0.01503753662109375, 0.0021915435791015625, 0.005603790283203125, 0.03839111328125, 0.0021381378173828125, 0.0025615692138671875, 0.0014600753784179688, 0.029327392578125, 0.039520263671875, 0.0013055801391601562, 0.193359375, 0.403564453125, 0.0487060546875, 0.2186279296875, 0.048187255859375, 0.027252197265625, 0.0665283203125, 0.0131072998046875, 0.156982421875, 0.00800323486328125, 0.2890625, 0.0005016326904296875, 7.998943328857422e-05, 0.0004525184631347656, 0.01678466796875, 0.004146575927734375, 0.0008893013000488281, 0.00254058837890625, 8.678436279296875e-05, 0.003215789794921875, 0.01416778564453125, 0.049072265625, 2.041015625, 0.023406982421875, 0.0008602142333984375, 0.1680908203125, 0.001705169677734375, 0.0004782676696777344, 0.0033740997314453125, 0.0019388198852539062, 0.0036716461181640625, 3.7789344787597656e-05, 0.00026988983154296875, 0.0001285076141357422, 0.00012099742889404297, 0.01456451416015625], "tokens": [275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646, 526, 17718, 619, 275, 319, 11347, 600, 629, 275, 569, 284, 945, 907, 629, 17476, 2996, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1946, 345, 280, 1833, 3222, 27, 106, 4586, 1162, 3222, 27, 107, 293, 291]}
{"line_number": 571, "line_type": "original", "code": "        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {", "entropy": 1.33984375, "is_bug_line": false, "sus_score": 0.5531389117240906, "per_token_entropy": [2.978515625, 0.93505859375, 0.12646484375, 6.3515625, 0.0019407272338867188, 0.0270843505859375, 0.015869140625, 9.9765625, 0.3837890625, 5.484375, 3.509765625, 1.7216796875, 0.392578125, 0.12188720703125, 0.00046324729919433594, 0.00023925304412841797, 0.0005173683166503906, 0.004016876220703125, 0.0030803680419921875, 0.01062774658203125, 0.00466156005859375, 0.0012025833129882812, 0.0254974365234375, 0.0909423828125], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 103, 27, 2511, 225, 35, 1276, 4175, 32, 3596, 26, 104, 27, 2511, 225, 35, 27, 301]}
{"line_number": 571, "line_type": "generated", "code": "\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     * an int\n     */\n    private static int mulAndCheck(int x, int y) {\n        long", "entropy": 0.09368896484375, "is_bug_line": false, "sus_score": 0.5531389117240906, "per_token_entropy": [0.433837890625, 0.9111328125, 0.012969970703125, 0.0469970703125, 0.036224365234375, 0.0501708984375, 0.234130859375, 0.062744140625, 0.000286102294921875, 0.020263671875, 0.095458984375, 0.0001519918441772461, 0.00014317035675048828, 6.318092346191406e-05, 0.0372314453125, 0.1602783203125, 0.054046630859375, 0.0019063949584960938, 0.01319122314453125, 0.01061248779296875, 0.0002613067626953125, 0.007904052734375, 0.00017404556274414062, 0.010406494140625, 0.102294921875, 0.0240631103515625, 0.0345458984375, 0.003040313720703125, 0.04022216796875, 0.2685546875, 0.0002167224884033203, 0.41015625, 0.8125, 0.016571044921875, 0.11224365234375, 0.0185546875, 0.08306884765625, 0.0088043212890625, 0.031951904296875, 0.439453125, 0.031707763671875, 9.953975677490234e-05, 0.0021190643310546875, 0.032623291015625, 0.00022423267364501953, 0.0004820823669433594, 0.0112762451171875, 2.9087066650390625e-05, 0.0006937980651855469, 0.0777587890625, 0.07684326171875, 0.0301055908203125], "tokens": [275, 319, 477, 601, 322, 4054, 333, 687, 48, 106, 28, 107, 377, 687, 48, 275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646, 526, 17718, 619, 275, 319, 600, 629, 275, 569, 284, 945, 907, 629, 17476, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1946]}
{"line_number": 606, "line_type": "original", "code": "            t = (v - u)/2;", "entropy": 3.275390625, "is_bug_line": false, "sus_score": 0.5513301491737366, "per_token_entropy": [6.546875, 8.90625, 1.041015625, 1.6162109375, 7.609375, 3.26171875, 0.72607421875, 2.767578125, 0.0300750732421875, 0.2413330078125], "tokens": [1468, 273, 280, 308, 104, 429, 1044, 4165, 36, 45]}
{"line_number": 606, "line_type": "generated", "code": "\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     *                             an int\n     */\n    private static int addAndCheck(", "entropy": 0.0357666015625, "is_bug_line": false, "sus_score": 0.5513301491737366, "per_token_entropy": [0.33740234375, 0.0266876220703125, 0.0196380615234375, 0.012054443359375, 0.002368927001953125, 0.006771087646484375, 0.00038623809814453125, 0.0006117820739746094, 0.556640625, 0.0007987022399902344, 0.0016832351684570312, 0.0034503936767578125, 0.0009241104125976562, 0.0594482421875, 0.006587982177734375, 0.002483367919921875, 0.00016570091247558594, 0.0009164810180664062, 0.0008702278137207031, 0.00024580955505371094, 0.00033545494079589844, 5.066394805908203e-05, 0.0020904541015625, 0.048126220703125, 0.004802703857421875, 0.0006399154663085938, 0.00472259521484375, 0.0028476715087890625, 5.936622619628906e-05, 0.0019073486328125, 0.0002536773681640625, 0.0003314018249511719, 0.002460479736328125, 0.00013971328735351562, 0.0004432201385498047, 0.00025391578674316406, 0.01007080078125, 0.0274505615234375, 0.0013790130615234375, 0.60107421875, 0.0132904052734375, 0.0014400482177734375, 0.03369140625, 0.020721435546875, 0.020355224609375, 0.011810302734375, 0.00302886962890625, 0.0008759498596191406, 0.004718780517578125, 0.0003974437713623047, 7.295608520507812e-05, 9.167194366455078e-05], "tokens": [275, 319, 477, 753, 533, 600, 1015, 416, 275, 319, 477, 601, 322, 3632, 333, 687, 48, 106, 29, 107, 377, 687, 48, 275, 319, 477, 5117, 47721, 984, 415, 322, 1056, 883, 646, 526, 17718, 619, 275, 319, 11347, 600, 629, 275, 569, 284, 945, 907, 629, 1015, 2185, 2140, 26]}
{"line_number": 581, "line_type": "original", "code": "        int k=0;", "entropy": 3.78125, "is_bug_line": false, "sus_score": 0.5509442687034607, "per_token_entropy": [5.40234375, 5.53125, 7.796875, 3.11328125, 0.74267578125, 0.1068115234375], "tokens": [351, 629, 831, 47, 34, 45]}
{"line_number": 581, "line_type": "generated", "code": "\n        return (int)m;\n    }\n\n    /**\n     * Add two integers, checking for overflow.\n     *\n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</", "entropy": 0.090576171875, "is_bug_line": false, "sus_score": 0.5509442687034607, "per_token_entropy": [0.043426513671875, 0.01309967041015625, 0.058135986328125, 0.0014982223510742188, 0.007366180419921875, 0.2357177734375, 0.02691650390625, 0.0537109375, 0.0006346702575683594, 0.1944580078125, 0.0390625, 0.383544921875, 0.00010192394256591797, 2.130859375, 0.0157470703125, 0.046875, 0.002971649169921875, 0.00135040283203125, 0.00010395050048828125, 0.0003330707550048828, 0.00159454345703125, 0.02008056640625, 0.0003066062927246094, 1.3662109375, 0.00021839141845703125, 0.00032067298889160156, 0.0007305145263671875, 0.00638580322265625, 0.027435302734375, 0.0007100105285644531, 0.004405975341796875, 0.0016298294067382812, 4.0531158447265625e-06, 1.52587890625e-05, 4.4465065002441406e-05, 0.00019371509552001953, 0.0031337738037109375, 3.731250762939453e-05, 0.000274658203125, 0.0012063980102539062, 4.887580871582031e-05, 0.0020236968994140625, 0.0007824897766113281, 0.0003097057342529297, 0.0106353759765625, 0.0024471282958984375, 0.0006031990051269531, 3.063678741455078e-05, 0.0004584789276123047, 0.0011539459228515625, 0.00011515617370605469, 9.28640365600586e-05], "tokens": [291, 442, 308, 410, 27, 95, 45, 284, 320, 446, 1022, 275, 319, 2222, 3134, 18670, 30, 11056, 436, 9973, 32, 275, 319, 275, 319, 477, 753, 816, 600, 1015, 416, 275, 319, 477, 753, 533, 600, 1015, 416, 275, 319, 477, 601, 322, 3632, 333, 687, 48, 106, 29, 107, 377]}
{"line_number": 582, "line_type": "original", "code": "        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...", "entropy": 0.91357421875, "is_bug_line": false, "sus_score": 0.548366367816925, "per_token_entropy": [4.37890625, 5.0, 2.009765625, 3.17578125, 0.85888671875, 0.06085205078125, 0.0738525390625, 0.0236053466796875, 2.708984375, 1.0576171875, 0.0200653076171875, 0.0062408447265625, 0.00146484375, 0.007152557373046875, 0.0037364959716796875, 1.857421875, 0.356201171875, 1.4921875, 0.10333251953125, 0.03741455078125, 0.04449462890625, 0.0303497314453125, 0.8056640625, 0.368408203125, 0.0849609375, 0.3076171875, 0.024322509765625, 0.11639404296875, 2.30078125, 0.013427734375, 1.0009765625], "tokens": [351, 2218, 1833, 103, 24, 35, 19162, 34, 962, 308, 104, 24, 35, 19162, 34, 962, 831, 46, 37, 35, 27, 301, 434, 2218, 1044, 461, 354, 884, 4335, 4444, 1179]}
{"line_number": 582, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Returns a fraction whose value is\n     * <code>(this&times;val)</code>.\n     *\n     * @param val value to be multiplied by this fraction\n     * @return <code>this * val</code", "entropy": 0.31396484375, "is_bug_line": false, "sus_score": 0.548366367816925, "per_token_entropy": [0.2467041015625, 0.1883544921875, 0.32275390625, 0.05108642578125, 0.332763671875, 0.00010406970977783203, 1.8623046875, 0.994140625, 1.1484375, 0.68603515625, 0.020233154296875, 0.00010025501251220703, 0.386474609375, 0.0006580352783203125, 0.24560546875, 0.1878662109375, 0.017303466796875, 0.0015382766723632812, 0.962890625, 0.70166015625, 0.0811767578125, 1.828125, 0.62744140625, 9.000301361083984e-05, 0.923828125, 0.55224609375, 0.0023193359375, 0.51171875, 0.0001709461212158203, 0.001125335693359375, 0.0011186599731445312, 0.03265380859375, 0.412353515625, 0.0775146484375, 0.22314453125, 0.0007014274597167969, 3.719329833984375e-05, 0.12646484375, 0.783203125, 0.004154205322265625, 0.07135009765625, 0.0013103485107421875, 0.0006237030029296875, 0.01056671142578125, 0.187744140625, 0.0013408660888671875, 0.00548553466796875, 0.01519012451171875, 1.48828125, 0.0012073516845703125, 0.00045371055603027344, 3.5881996154785156e-05], "tokens": [284, 320, 446, 1022, 275, 319, 3759, 312, 18795, 13696, 786, 438, 275, 319, 333, 687, 1563, 578, 24, 5571, 45, 695, 2874, 687, 4503, 275, 319, 275, 319, 477, 753, 909, 786, 372, 526, 12044, 3032, 810, 458, 18795, 275, 319, 477, 601, 333, 687, 48, 578, 319, 909, 377, 687]}
{"line_number": 153, "line_type": "original", "code": "        return new Fraction(numerator, denominator);", "entropy": 1.357421875, "is_bug_line": false, "sus_score": 0.5393239259719849, "per_token_entropy": [6.53125, 3.244140625, 0.44287109375, 0.0105743408203125, 0.019439697265625, 0.088623046875, 0.003734588623046875, 1.689453125, 1.513671875, 0.0251617431640625], "tokens": [351, 442, 537, 40823, 26, 1516, 11290, 30, 39920, 293]}
{"line_number": 153, "line_type": "generated", "code": "\n    }\n\n    /**\n     * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p>\n     *\n     * <p>This constructor handles numbers like <code>0.3</code", "entropy": 0.23828125, "is_bug_line": false, "sus_score": 0.5393239259719849, "per_token_entropy": [0.580078125, 0.1697998046875, 0.2120361328125, 0.1357421875, 0.01155853271484375, 2.8967857360839844e-05, 0.040130615234375, 7.486343383789062e-05, 0.0002715587615966797, 0.62255859375, 0.019256591796875, 0.400390625, 0.003154754638671875, 0.00026702880859375, 0.0018892288208007812, 0.003444671630859375, 3.540515899658203e-05, 0.0003993511199951172, 0.02789306640625, 1.115234375, 0.0290985107421875, 0.0067901611328125, 0.00020515918731689453, 0.0002911090850830078, 0.490478515625, 0.0015821456909179688, 0.0001518726348876953, 0.357177734375, 0.147705078125, 0.048858642578125, 0.0003418922424316406, 0.005664825439453125, 0.0157012939453125, 0.00014829635620117188, 0.07379150390625, 0.00011408329010009766, 0.1353759765625, 0.00246429443359375, 0.01004791259765625, 0.84814453125, 0.37353515625, 1.1435546875, 2.634765625, 1.263671875, 0.76025390625, 0.0227508544921875, 0.05841064453125, 0.61572265625, 0.0011873245239257812, 0.00020694732666015625, 0.0007805824279785156, 6.318092346191406e-06], "tokens": [284, 320, 446, 1022, 275, 319, 333, 98, 48, 26001, 312, 333, 687, 48, 20709, 377, 687, 48, 1980, 645, 312, 333, 687, 48, 2627, 377, 687, 48, 786, 1730, 98, 48, 275, 319, 275, 319, 333, 98, 48, 2272, 4374, 13650, 7515, 2124, 333, 687, 48, 34, 32, 37, 377, 687]}
{"line_number": 145, "line_type": "original", "code": "        if (denominator < 0) {", "entropy": 0.9775390625, "is_bug_line": false, "sus_score": 0.5388942360877991, "per_token_entropy": [4.203125, 1.2021484375, 0.035980224609375, 2.591796875, 0.0014791488647460938, 1.685546875, 0.0171356201171875, 0.0011968612670898438, 0.0195465087890625, 0.0117340087890625], "tokens": [351, 415, 308, 29805, 9693, 333, 225, 34, 27, 301]}
{"line_number": 145, "line_type": "generated", "code": "\n    /**\n     * <p>Gets the fraction as a <code>double</code>.</p>\n     *\n     * <p>This calculates the fraction as the numerator divided by denominator.</p>\n     *\n     * @return the fraction as a", "entropy": 0.104248046875, "is_bug_line": false, "sus_score": 0.5388942360877991, "per_token_entropy": [0.6064453125, 0.1043701171875, 0.032379150390625, 8.499622344970703e-05, 0.1005859375, 0.0004138946533203125, 0.0012874603271484375, 0.47705078125, 0.017578125, 0.248046875, 0.0323486328125, 0.155517578125, 0.0083465576171875, 0.0025310516357421875, 0.00131988525390625, 0.31201171875, 0.000621795654296875, 0.0001423358917236328, 0.373291015625, 5.2928924560546875e-05, 0.002002716064453125, 0.00554656982421875, 0.0003478527069091797, 0.0902099609375, 7.426738739013672e-05, 0.333251953125, 0.005451202392578125, 0.08251953125, 0.0989990234375, 0.1395263671875, 0.0003662109375, 0.005367279052734375, 0.021514892578125, 0.03558349609375, 0.0261993408203125, 2.9802322387695312e-05, 0.016693115234375, 0.1702880859375, 0.160888671875, 0.04974365234375, 0.000171661376953125, 0.0006947517395019531, 0.01079559326171875, 0.00040721893310546875, 0.041748046875, 0.0001844167709350586, 0.0389404296875, 0.0027980804443359375, 1.5, 0.08502197265625, 0.005428314208984375, 0.0153350830078125], "tokens": [284, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 687, 48, 2627, 377, 687, 12689, 98, 48, 275, 319, 275, 319, 333, 98, 48, 2272, 38057, 322, 18795, 619, 322, 1929, 11290, 32235, 810, 39920, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 322, 18795, 619, 312]}
{"line_number": 585, "line_type": "original", "code": "        if (k==31) {", "entropy": 2.404296875, "is_bug_line": false, "sus_score": 0.5296764373779297, "per_token_entropy": [3.572265625, 2.736328125, 0.22412109375, 6.546875, 1.4638671875, 6.29296875, 0.42431640625, 0.307861328125, 0.0665283203125], "tokens": [351, 415, 308, 93, 379, 37, 35, 27, 301]}
{"line_number": 585, "line_type": "generated", "code": "\n     * Returns the product of the absolute value of two numbers.\n     * @param x a number\n     * @param y a number\n     * @return the product <code>abs(x) * abs(y)</code>\n     * @throws Arithmetic", "entropy": 0.2435302734375, "is_bug_line": false, "sus_score": 0.5296764373779297, "per_token_entropy": [1.12890625, 0.347900390625, 1.1875, 0.52392578125, 0.91943359375, 0.1932373046875, 0.39794921875, 0.736328125, 0.25927734375, 0.0005941390991210938, 1.0810546875, 0.13232421875, 0.0577392578125, 0.1514892578125, 0.013275146484375, 1.9736328125, 0.0210418701171875, 0.039825439453125, 0.289794921875, 0.12384033203125, 0.09613037109375, 3.981590270996094e-05, 8.702278137207031e-05, 0.0007243156433105469, 0.0005345344543457031, 0.0256500244140625, 0.0037384033203125, 0.0217132568359375, 0.00753021240234375, 0.006610870361328125, 0.01013946533203125, 0.235595703125, 0.33544921875, 0.45263671875, 0.003200531005859375, 0.233154296875, 0.00624847412109375, 0.0002301931381225586, 9.453296661376953e-05, 0.8564453125, 0.00039458274841308594, 0.00012814998626708984, 3.5762786865234375e-05, 0.0003974437713623047, 0.00034618377685546875, 0.00026702880859375, 0.00800323486328125, 0.0169677734375, 0.55615234375, 0.0121917724609375, 0.167236328125, 0.0269775390625], "tokens": [275, 319, 3759, 322, 4054, 432, 322, 7976, 786, 432, 3134, 7515, 32, 275, 319, 477, 753, 816, 312, 1451, 275, 319, 477, 753, 533, 312, 1451, 275, 319, 477, 601, 322, 4054, 333, 687, 48, 3596, 26, 106, 27, 319, 11366, 26, 107, 2874, 687, 48, 275, 319, 477, 5117, 47721]}
{"line_number": 368, "line_type": "original", "code": "        return numerator;", "entropy": 2.296875, "is_bug_line": false, "sus_score": 0.507981538772583, "per_token_entropy": [4.1953125, 1.6171875, 1.455078125, 0.0007586479187011719, 4.21875], "tokens": [351, 442, 1929, 11290, 45]}
{"line_number": 368, "line_type": "generated", "code": "\n     */\n    @Override\n    public int intValue() {\n        return numerator / denominator;\n    }\n\n    /**\n     * <p>Gets the fraction as a <code>long</code>. This returns the whole number\n     * part of the fraction.</", "entropy": 0.05792236328125, "is_bug_line": false, "sus_score": 0.507981538772583, "per_token_entropy": [0.88037109375, 0.06591796875, 0.04901123046875, 0.86279296875, 0.00537872314453125, 0.0199127197265625, 0.00955963134765625, 0.00467681884765625, 0.0006389617919921875, 3.0875205993652344e-05, 0.006847381591796875, 0.00461578369140625, 0.406982421875, 0.07080078125, 0.33740234375, 6.35385513305664e-05, 0.0098419189453125, 0.010650634765625, 0.005847930908203125, 0.038299560546875, 0.00017440319061279297, 0.049224853515625, 0.00795745849609375, 0.004726409912109375, 0.0006704330444335938, 0.005184173583984375, 9.5367431640625e-06, 3.1113624572753906e-05, 0.00203704833984375, 0.00048732757568359375, 0.0005693435668945312, 0.0002129077911376953, 0.0176239013671875, 0.0006122589111328125, 1.4662742614746094e-05, 2.2411346435546875e-05, 0.01103973388671875, 0.0023899078369140625, 2.110004425048828e-05, 0.0244293212890625, 0.0157928466796875, 0.001598358154296875, 0.00018787384033203125, 0.0238800048828125, 0.0097198486328125, 0.0210113525390625, 2.467632293701172e-05, 0.0009303092956542969, 0.0006351470947265625, 0.0002512931823730469, 0.0005145072937011719, 0.0191650390625], "tokens": [275, 569, 284, 477, 1788, 284, 562, 629, 629, 882, 346, 301, 291, 442, 1929, 11290, 517, 39920, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 687, 48, 3222, 377, 687, 4503, 1348, 3217, 322, 9844, 1451, 275, 319, 1742, 432, 322, 18795, 1730]}
{"line_number": 377, "line_type": "original", "code": "        return denominator;", "entropy": 3.236328125, "is_bug_line": false, "sus_score": 0.5078836679458618, "per_token_entropy": [3.443359375, 0.56689453125, 6.87109375, 2.060546875], "tokens": [351, 442, 39920, 45]}
{"line_number": 377, "line_type": "generated", "code": "\n     * @return the whole number fraction part\n     */\n    public long longValue() {\n        return (long) numerator / denominator;\n    }\n\n    /**\n     * <p>Gets the fraction as a <code>float</code>. This calculates the", "entropy": 0.07952880859375, "is_bug_line": false, "sus_score": 0.5078836679458618, "per_token_entropy": [0.64453125, 0.837890625, 0.08477783203125, 0.013671875, 0.00275421142578125, 0.04144287109375, 0.000637054443359375, 0.00147247314453125, 0.004913330078125, 0.0965576171875, 0.08282470703125, 0.0278778076171875, 0.0116424560546875, 0.00047516822814941406, 4.1604042053222656e-05, 8.857250213623047e-05, 0.0009655952453613281, 0.0023746490478515625, 0.150634765625, 0.0265045166015625, 0.90966796875, 0.046539306640625, 0.007904052734375, 0.24853515625, 0.0001081228256225586, 0.0020351409912109375, 0.4306640625, 0.0019664764404296875, 0.0291900634765625, 9.620189666748047e-05, 0.08685302734375, 0.0140533447265625, 0.003017425537109375, 0.00033783912658691406, 0.00930023193359375, 1.4662742614746094e-05, 0.0001214742660522461, 0.0022678375244140625, 0.0005311965942382812, 0.0014181137084960938, 0.0006680488586425781, 0.0006861686706542969, 0.0009379386901855469, 0.0001519918441772461, 4.851818084716797e-05, 0.0146636962890625, 0.0005998611450195312, 5.173683166503906e-05, 0.11273193359375, 0.042083740234375, 0.128662109375, 0.00949859619140625], "tokens": [275, 319, 477, 601, 322, 9844, 1451, 18795, 1742, 275, 569, 284, 562, 1946, 1946, 882, 346, 301, 291, 442, 308, 3222, 27, 1929, 11290, 517, 39920, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 687, 48, 1808, 377, 687, 4503, 1348, 38057, 322]}
{"line_number": 142, "line_type": "original", "code": "        if (denominator == 0) {", "entropy": 1.6689453125, "is_bug_line": false, "sus_score": 0.4987470507621765, "per_token_entropy": [5.8671875, 2.708984375, 0.0283660888671875, 1.7421875, 7.700920104980469e-05, 3.697265625, 0.57080078125, 1.9921875, 0.020050048828125, 0.05316162109375], "tokens": [351, 415, 308, 29805, 9693, 610, 225, 34, 27, 301]}
{"line_number": 142, "line_type": "generated", "code": "\n        return new Fraction((int)numeratorValue, denominator);\n    }\n\n    /**\n     * <p>Creates a <code>Fraction</code> instance with the 3 parts\n     * of a fraction X Y/Z.</p>\n     *\n    ", "entropy": 0.132568359375, "is_bug_line": false, "sus_score": 0.4987470507621765, "per_token_entropy": [0.673828125, 0.450927734375, 0.06011962890625, 0.0006866455078125, 0.55712890625, 0.0004699230194091797, 0.001300811767578125, 0.67138671875, 4.1604042053222656e-05, 0.002166748046875, 0.0101776123046875, 0.0137176513671875, 0.0037384033203125, 0.0736083984375, 0.0016613006591796875, 0.38623046875, 0.1514892578125, 0.01165008544921875, 6.67572021484375e-05, 0.0755615234375, 0.00016570091247558594, 0.0005640983581542969, 0.7919921875, 0.00414276123046875, 0.03167724609375, 0.00010788440704345703, 4.00543212890625e-05, 0.00043964385986328125, 0.0016345977783203125, 3.4570693969726562e-06, 0.0002453327178955078, 0.011474609375, 0.84716796875, 0.1312255859375, 1.072265625, 0.48095703125, 0.001132965087890625, 0.00691986083984375, 1.704692840576172e-05, 0.0017242431640625, 0.0033740997314453125, 0.001445770263671875, 0.067138671875, 0.218017578125, 0.01995849609375, 0.006549835205078125, 0.032562255859375, 1.5020370483398438e-05, 0.00032258033752441406, 0.0013570785522460938, 0.00011992454528808594, 0.0113372802734375], "tokens": [291, 442, 537, 40823, 1162, 410, 27, 1516, 11290, 882, 30, 39920, 293, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 26001, 312, 333, 687, 48, 20709, 377, 687, 48, 1980, 623, 322, 225, 37, 8710, 275, 319, 432, 312, 18795, 1593, 1410, 33, 76, 1730, 98, 48, 275, 319, 275]}
{"line_number": 572, "line_type": "original", "code": "            return 1;", "entropy": 3.62109375, "is_bug_line": false, "sus_score": 0.4979514181613922, "per_token_entropy": [7.10546875, 4.015625, 2.8671875, 3.478515625, 0.646484375], "tokens": [1468, 442, 225, 35, 45]}
{"line_number": 572, "line_type": "generated", "code": "\n     */\n    private static int mulAndCheck(int x, int y) {\n        long m = (long)x * (long)y;\n        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {\n           ", "entropy": 0.0662841796875, "is_bug_line": false, "sus_score": 0.4979514181613922, "per_token_entropy": [0.416748046875, 0.1754150390625, 0.019073486328125, 0.09954833984375, 0.007312774658203125, 0.1007080078125, 0.70166015625, 0.03436279296875, 8.296966552734375e-05, 0.0024433135986328125, 0.028961181640625, 0.00032138824462890625, 0.000453948974609375, 0.0082855224609375, 5.793571472167969e-05, 0.0005946159362792969, 0.051513671875, 0.1317138671875, 0.031890869140625, 0.006320953369140625, 0.0019292831420898438, 0.25830078125, 0.0011587142944335938, 0.0009388923645019531, 0.4921875, 0.021484375, 0.367431640625, 0.0002282857894897461, 0.00012111663818359375, 0.0028514862060546875, 0.0009126663208007812, 0.048980712890625, 0.003559112548828125, 0.020355224609375, 0.003925323486328125, 0.1439208984375, 0.0789794921875, 0.00013530254364013672, 2.2649765014648438e-06, 9.5367431640625e-07, 1.3470649719238281e-05, 0.001087188720703125, 0.0208282470703125, 0.0005974769592285156, 0.0006394386291503906, 1.5854835510253906e-05, 5.4836273193359375e-06, 3.814697265625e-06, 1.9431114196777344e-05, 0.0015268325805664062, 0.0078277587890625, 0.147705078125], "tokens": [275, 569, 284, 945, 907, 629, 17476, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1946, 345, 280, 308, 3222, 27, 106, 319, 308, 3222, 27, 107, 45, 291, 415, 308, 95, 333, 4401, 32, 4683, 81, 5975, 1276, 345, 848, 4401, 32, 3459, 81, 5975, 27, 301, 324]}
{"line_number": 610, "line_type": "original", "code": "        return -u*(1<<k); // gcd is u*2^k", "entropy": 3.38671875, "is_bug_line": false, "sus_score": 0.4974629282951355, "per_token_entropy": [4.4765625, 3.47265625, 8.984375, 7.1171875, 6.81640625, 1.998046875, 1.7294921875, 2.44921875, 0.791015625, 2.283203125, 6.1640625, 1.4453125, 6.09765625, 3.63671875, 0.00832366943359375, 0.02349853515625, 0.0633544921875], "tokens": [351, 442, 429, 103, 8088, 35, 3571, 93, 293, 434, 43422, 438, 1044, 28, 36, 80, 93]}
{"line_number": 610, "line_type": "generated", "code": "\n     */\n    private static int addAndCheck(int x, int y) {\n        long s = (long)x + (long)y;\n        if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE) {", "entropy": 0.040863037109375, "is_bug_line": false, "sus_score": 0.4974629282951355, "per_token_entropy": [0.48974609375, 0.03515625, 0.023681640625, 0.0261993408203125, 0.003376007080078125, 0.0015859603881835938, 0.004726409912109375, 0.0008292198181152344, 0.000202178955078125, 6.830692291259766e-05, 0.002452850341796875, 0.0004355907440185547, 0.00011157989501953125, 0.0011386871337890625, 2.014636993408203e-05, 0.00039649009704589844, 0.00722503662109375, 0.018310546875, 0.006511688232421875, 0.09710693359375, 0.00118255615234375, 0.830078125, 0.06256103515625, 0.001399993896484375, 0.00823974609375, 0.1627197265625, 0.017730712890625, 6.783008575439453e-05, 4.458427429199219e-05, 0.0013723373413085938, 0.00018274784088134766, 0.008758544921875, 0.002227783203125, 0.0005559921264648438, 0.0015611648559570312, 0.057647705078125, 0.0006513595581054688, 1.3828277587890625e-05, 1.1920928955078125e-06, 8.344650268554688e-07, 1.3828277587890625e-05, 0.0007586479187011719, 0.24267578125, 3.504753112792969e-05, 0.0006384849548339844, 0.00010704994201660156, 1.1205673217773438e-05, 8.58306884765625e-06, 1.1920928955078125e-06, 1.3470649719238281e-05, 0.0011968612670898438, 0.0030727386474609375], "tokens": [275, 569, 284, 945, 907, 629, 1015, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1946, 309, 280, 308, 3222, 27, 106, 474, 308, 3222, 27, 107, 45, 291, 415, 308, 101, 333, 4401, 32, 4683, 81, 5975, 1276, 324, 309, 848, 4401, 32, 3459, 81, 5975, 27, 301]}
{"line_number": 609, "line_type": "original", "code": "        } while (t!=0);", "entropy": 3.115234375, "is_bug_line": false, "sus_score": 0.47189176082611084, "per_token_entropy": [4.05078125, 6.29296875, 7.28125, 0.25439453125, 3.8671875, 2.685546875, 0.2181396484375, 0.27587890625], "tokens": [351, 320, 2218, 308, 102, 6901, 34, 293]}
{"line_number": 609, "line_type": "generated", "code": "\n     */\n    private static int addAndCheck(int x, int y) {\n        long s = ((long)x)+((long)y);\n        if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE) {", "entropy": 0.0253753662109375, "is_bug_line": false, "sus_score": 0.47189176082611084, "per_token_entropy": [0.3955078125, 0.0131378173828125, 0.0169830322265625, 0.01178741455078125, 0.001323699951171875, 0.006195068359375, 0.0042266845703125, 0.0004544258117675781, 9.655952453613281e-05, 5.9485435485839844e-05, 0.0017528533935546875, 0.0004146099090576172, 8.797645568847656e-05, 0.0010051727294921875, 1.9788742065429688e-05, 0.0002868175506591797, 0.006244659423828125, 0.0130767822265625, 0.0027103424072265625, 0.05670166015625, 0.0007433891296386719, 0.56591796875, 0.00029730796813964844, 8.893013000488281e-05, 0.005084991455078125, 0.0124053955078125, 0.00384521484375, 1.3113021850585938e-05, 1.5735626220703125e-05, 0.000141143798828125, 2.777576446533203e-05, 0.0083770751953125, 0.0022029876708984375, 0.0006494522094726562, 0.0021076202392578125, 0.032470703125, 0.0007004737854003906, 5.042552947998047e-05, 9.5367431640625e-07, 2.5033950805664062e-06, 2.1696090698242188e-05, 0.0007867813110351562, 0.146240234375, 4.601478576660156e-05, 0.00045800209045410156, 0.0001709461212158203, 1.2993812561035156e-05, 1.0132789611816406e-05, 7.987022399902344e-06, 8.225440979003906e-06, 0.00087738037109375, 0.0035495758056640625], "tokens": [275, 569, 284, 945, 907, 629, 1015, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1946, 309, 280, 1833, 3222, 27, 106, 7283, 1162, 3222, 27, 107, 293, 291, 415, 308, 101, 333, 4401, 32, 4683, 81, 5975, 1276, 324, 309, 848, 4401, 32, 3459, 81, 5975, 27, 301]}
