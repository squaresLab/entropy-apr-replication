{"line_number": 584, "line_type": "original", "code": "        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {", "entropy": 1.3603515625, "is_bug_line": true, "sus_score": 0.5804797410964966, "per_token_entropy": [3.259765625, 1.1796875, 0.10614013671875, 6.63671875, 0.00440216064453125, 0.0250701904296875, 0.00920867919921875, 9.5625, 0.431396484375, 5.4765625, 3.2578125, 1.908203125, 0.405029296875, 0.11859130859375, 0.0004372596740722656, 0.00018739700317382812, 0.00054168701171875, 0.00354766845703125, 0.003265380859375, 0.010162353515625, 0.0037364959716796875, 0.00130462646484375, 0.02691650390625, 0.212158203125], "tokens": [351, 415, 308, 5717, 32, 3596, 26, 103, 27, 2511, 225, 35, 1276, 4175, 32, 3596, 26, 104, 27, 2511, 225, 35, 27, 301]}
{"line_number": 584, "line_type": "generated", "code": "\n     */\n    private static int mulAndCheck(int x, int y) {\n        long m = (long) x * (long) y;\n        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {\n           ", "entropy": 0.07464599609375, "is_bug_line": true, "sus_score": 0.5804797410964966, "per_token_entropy": [0.37158203125, 0.6220703125, 0.024139404296875, 0.080810546875, 0.0111846923828125, 0.207763671875, 0.57861328125, 0.0242156982421875, 6.604194641113281e-05, 0.0029697418212890625, 0.0335693359375, 0.00033402442932128906, 0.000732421875, 0.00881195068359375, 5.5670738220214844e-05, 0.0007781982421875, 0.1077880859375, 0.1121826171875, 0.043701171875, 0.00437164306640625, 0.0016069412231445312, 0.309814453125, 0.001682281494140625, 0.0009274482727050781, 0.701171875, 0.0038242340087890625, 0.33935546875, 0.00045990943908691406, 2.372264862060547e-05, 0.0031890869140625, 0.0012454986572265625, 0.034271240234375, 0.004131317138671875, 0.02288818359375, 0.0048828125, 0.06591796875, 0.038665771484375, 0.00019276142120361328, 2.7418136596679688e-06, 1.3113021850585938e-06, 1.1920928955078125e-05, 0.0012874603271484375, 0.054443359375, 0.0004143714904785156, 0.0005631446838378906, 2.968311309814453e-05, 5.7220458984375e-06, 2.86102294921875e-06, 1.800060272216797e-05, 0.00146484375, 0.0085601806640625, 0.04339599609375], "tokens": [275, 569, 284, 945, 907, 629, 17476, 2185, 2140, 26, 410, 816, 30, 629, 533, 27, 301, 291, 1946, 345, 280, 308, 3222, 27, 816, 319, 308, 3222, 27, 533, 45, 291, 415, 308, 95, 333, 4401, 32, 4683, 81, 5975, 1276, 345, 848, 4401, 32, 3459, 81, 5975, 27, 301, 324]}
{"line_number": 478, "line_type": "original", "code": "        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);", "entropy": 1.111328125, "is_bug_line": false, "sus_score": 0.5417049527168274, "per_token_entropy": [5.1015625, 5.92578125, 4.96484375, 0.140869140625, 2.076171875, 0.0015964508056640625, 0.0653076171875, 0.00017178058624267578, 0.0201873779296875, 1.173828125, 0.03802490234375, 0.0002818107604980469, 0.0015897750854492188, 0.0537109375, 0.00556182861328125, 0.0019445419311523438, 0.427734375, 0.006771087646484375], "tokens": [351, 629, 43422, 280, 48299, 5240, 6775, 22306, 26, 5717, 32, 3596, 26, 1516, 11290, 471, 39920, 293]}
{"line_number": 478, "line_type": "generated", "code": "\n     * @return a new fraction instance, negative if negative\n     */\n    public Fraction abs() {\n        return (numerator>=0? this : negate());\n    }\n\n    /**\n     * <p>Gets a fraction that is the greatest common divisor (", "entropy": 0.23388671875, "is_bug_line": false, "sus_score": 0.5417049527168274, "per_token_entropy": [0.099609375, 0.171630859375, 0.310302734375, 0.005733489990234375, 0.299560546875, 0.0204925537109375, 0.0301971435546875, 0.05517578125, 0.591796875, 1.2177734375, 0.05377197265625, 0.57177734375, 1.078125, 0.0271759033203125, 0.0265960693359375, 0.011932373046875, 0.0022125244140625, 0.0166168212890625, 0.003856658935546875, 0.00786590576171875, 0.08612060546875, 0.73046875, 0.30810546875, 0.035247802734375, 1.71661376953125e-05, 1.1416015625, 0.0213165283203125, 0.324462890625, 0.004734039306640625, 0.00679779052734375, 0.245361328125, 4.0650367736816406e-05, 0.00431060791015625, 0.034149169921875, 7.355213165283203e-05, 0.200439453125, 0.1976318359375, 0.0081939697265625, 1.9788742065429688e-05, 0.04296875, 6.270408630371094e-05, 0.00042891502380371094, 0.650390625, 0.2027587890625, 0.01490020751953125, 0.55029296875, 0.01256561279296875, 0.12457275390625, 2.3125, 0.0021610260009765625, 0.0168914794921875, 0.281494140625], "tokens": [275, 319, 477, 601, 312, 537, 18795, 1980, 30, 11003, 415, 11003, 275, 569, 284, 562, 40823, 11366, 346, 301, 291, 442, 308, 1516, 11290, 7148, 34, 1018, 458, 499, 7528, 332, 1035, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 312, 18795, 688, 438, 322, 48299, 4942, 33482, 308]}
{"line_number": 479, "line_type": "original", "code": "        if (gcd == 1) {", "entropy": 1.84375, "is_bug_line": false, "sus_score": 0.5280620455741882, "per_token_entropy": [2.5234375, 2.2890625, 0.0693359375, 10.2421875, 0.9921875, 0.07318115234375, 0.077880859375, 0.2435302734375, 0.08905029296875], "tokens": [351, 415, 308, 46060, 610, 225, 35, 27, 301]}
{"line_number": 479, "line_type": "generated", "code": "\n     * @return a new fraction instance with the same numerator, but\n     *         an absolute value of the denominator\n     */\n    public Fraction abs() {\n        if (numerator >= 0) {\n            return this;\n        } else {\n            return", "entropy": 0.1856689453125, "is_bug_line": false, "sus_score": 0.5280620455741882, "per_token_entropy": [1.3037109375, 0.4296875, 0.107177734375, 0.00856781005859375, 0.3330078125, 0.0181427001953125, 0.0312347412109375, 0.0689697265625, 1.0302734375, 0.0928955078125, 0.0254974365234375, 0.302001953125, 3.123283386230469e-05, 0.25927734375, 0.59228515625, 0.442626953125, 0.00061798095703125, 0.11956787109375, 0.403076171875, 0.0904541015625, 0.50146484375, 1.11328125, 0.300537109375, 0.03875732421875, 0.055816650390625, 0.07586669921875, 0.04437255859375, 0.0132598876953125, 0.0015115737915039062, 0.01165008544921875, 0.0035953521728515625, 0.01294708251953125, 0.131591796875, 0.6962890625, 0.007465362548828125, 0.03173828125, 4.291534423828125e-06, 0.2357177734375, 0.001506805419921875, 9.775161743164062e-06, 0.00981903076171875, 0.0007548332214355469, 0.008819580078125, 0.006061553955078125, 0.030181884765625, 0.000331878662109375, 0.016204833984375, 8.368492126464844e-05, 0.449951171875, 0.05950927734375, 0.0165557861328125, 0.1180419921875], "tokens": [275, 319, 477, 601, 312, 537, 18795, 1980, 623, 322, 2432, 1929, 11290, 30, 1273, 275, 319, 263, 600, 7976, 786, 432, 322, 39920, 275, 569, 284, 562, 40823, 11366, 346, 301, 291, 415, 308, 1516, 11290, 2377, 225, 34, 27, 301, 324, 442, 458, 45, 291, 320, 813, 301, 324, 442]}
{"line_number": 475, "line_type": "original", "code": "        if (numerator == 0) {", "entropy": 0.6240234375, "is_bug_line": false, "sus_score": 0.5249089002609253, "per_token_entropy": [3.791015625, 1.021484375, 0.047607421875, 0.26171875, 0.0001207590103149414, 0.93115234375, 0.04730224609375, 9.071826934814453e-05, 0.08587646484375, 0.0535888671875], "tokens": [351, 415, 308, 1516, 11290, 610, 225, 34, 27, 301]}
{"line_number": 475, "line_type": "generated", "code": "\n     * \n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction instance with the same numerator, but\n     *         an absolute value of the denominator\n     */\n    public Fraction abs() {\n        return", "entropy": 0.17138671875, "is_bug_line": false, "sus_score": 0.5249089002609253, "per_token_entropy": [1.1220703125, 0.03558349609375, 1.3955078125, 0.0003638267517089844, 0.0504150390625, 0.017486572265625, 0.00736236572265625, 0.260009765625, 0.017120361328125, 0.0015106201171875, 0.005130767822265625, 0.0157318115234375, 0.00986480712890625, 0.00571441650390625, 0.0005273818969726562, 0.0016460418701171875, 0.04608154296875, 0.0009441375732421875, 0.10284423828125, 0.00015735626220703125, 0.0028743743896484375, 0.00655364990234375, 0.529296875, 0.00576019287109375, 0.0136871337890625, 0.0147705078125, 0.3798828125, 0.12176513671875, 0.051849365234375, 0.068115234375, 1.3589859008789062e-05, 0.1256103515625, 0.2763671875, 0.505859375, 9.40561294555664e-05, 0.212890625, 0.295166015625, 0.156494140625, 0.85302734375, 0.53466796875, 0.402099609375, 0.0133514404296875, 0.046783447265625, 0.0732421875, 0.038848876953125, 0.0116424560546875, 0.0014352798461914062, 0.012969970703125, 0.005382537841796875, 0.017486572265625, 0.12841796875, 0.91162109375], "tokens": [275, 319, 5384, 319, 333, 98, 48, 1318, 4717, 18795, 438, 646, 22974, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 312, 537, 18795, 1980, 623, 322, 2432, 1929, 11290, 30, 1273, 275, 319, 263, 600, 7976, 786, 432, 322, 39920, 275, 569, 284, 562, 40823, 11366, 346, 301, 291, 442]}
{"line_number": 228, "line_type": "original", "code": "                throw new ArithmeticException(\"overflow: can't negate\");", "entropy": 2.66796875, "is_bug_line": false, "sus_score": 0.5248773097991943, "per_token_entropy": [7.2578125, 5.49609375, 0.005764007568359375, 0.1015625, 0.00017118453979492188, 0.32568359375, 10.5, 5.32421875, 0.8173828125, 0.08209228515625, 4.078125, 0.001567840576171875, 0.68408203125], "tokens": [2071, 1422, 537, 47721, 984, 440, 9642, 44, 883, 1330, 7528, 332, 724]}
{"line_number": 228, "line_type": "generated", "code": "\n        // check for special cases\n        if (a1 == 0) {\n            return new Fraction(sign * numer1, denom1);\n        }\n        if (a1 == Integer.MIN_VALUE) {\n            // note that the limit 1", "entropy": 0.367431640625, "is_bug_line": false, "sus_score": 0.5248773097991943, "per_token_entropy": [0.64892578125, 1.5966796875, 0.9736328125, 0.0037841796875, 1.0986328125, 0.35400390625, 0.91796875, 0.08819580078125, 0.037689208984375, 1.0673828125, 0.0033855438232421875, 0.271240234375, 0.10662841796875, 0.0009832382202148438, 0.0287933349609375, 0.017059326171875, 0.1083984375, 0.92431640625, 0.23388671875, 0.0003483295440673828, 0.050537109375, 0.91064453125, 0.1722412109375, 0.185302734375, 1.0185546875, 0.02685546875, 0.0211029052734375, 0.00084686279296875, 0.1907958984375, 0.040008544921875, 0.0005502700805664062, 0.27099609375, 0.60888671875, 0.0158538818359375, 0.6494140625, 0.11114501953125, 0.0254058837890625, 0.09368896484375, 8.58306884765625e-06, 0.273681640625, 4.172325134277344e-06, 7.62939453125e-06, 0.07086181640625, 0.01166534423828125, 0.1634521484375, 1.4697265625, 1.5634765625, 0.1622314453125, 0.61328125, 0.921875, 0.7431640625, 0.2393798828125], "tokens": [291, 434, 1505, 436, 7456, 6792, 291, 415, 308, 83, 35, 610, 225, 34, 27, 301, 324, 442, 537, 40823, 26, 1333, 319, 37538, 35, 30, 24257, 35, 293, 291, 320, 291, 415, 308, 83, 35, 610, 4401, 32, 4683, 81, 5975, 27, 301, 324, 434, 5997, 688, 322, 2723, 225, 35]}
{"line_number": 230, "line_type": "original", "code": "            numerator = -numerator;", "entropy": 2.45703125, "is_bug_line": false, "sus_score": 0.5220296382904053, "per_token_entropy": [5.55078125, 6.62109375, 0.068359375, 1.39453125, 5.015625, 0.475830078125, 0.341796875, 0.1922607421875], "tokens": [1468, 1929, 11290, 280, 429, 1516, 11290, 45]}
{"line_number": 230, "line_type": "generated", "code": "\n        // check for special cases first\n        if (a1 == 0) {\n            if (y1 > 0) {\n                throw new ArithmeticException(\"The fraction can not be greater than 1\");\n            }\n            return new Fraction(sign *", "entropy": 0.37451171875, "is_bug_line": false, "sus_score": 0.5220296382904053, "per_token_entropy": [0.392333984375, 1.4951171875, 1.3251953125, 0.008819580078125, 0.9775390625, 0.349365234375, 1.38671875, 0.35546875, 0.143798828125, 0.039459228515625, 0.9453125, 0.0024013519287109375, 0.2548828125, 0.0819091796875, 0.0010995864868164062, 0.02728271484375, 0.0193328857421875, 0.1356201171875, 1.296875, 0.018768310546875, 1.6328125, 0.0096588134765625, 0.41455078125, 0.0270233154296875, 0.006092071533203125, 0.159912109375, 0.0188751220703125, 0.06072998046875, 0.2364501953125, 0.0040740966796875, 0.07391357421875, 1.2993812561035156e-05, 0.215087890625, 1.5517578125, 0.9833984375, 1.1298828125, 0.147705078125, 0.11944580078125, 0.9853515625, 0.0046844482421875, 0.003948211669921875, 0.0003523826599121094, 0.123291015625, 0.01505279541015625, 8.463859558105469e-05, 0.61474609375, 0.7880859375, 0.11444091796875, 0.00023412704467773438, 0.0584716796875, 0.56396484375, 0.1544189453125], "tokens": [291, 434, 1505, 436, 7456, 6792, 1932, 291, 415, 308, 83, 35, 610, 225, 34, 27, 301, 324, 415, 308, 107, 35, 848, 225, 34, 27, 301, 400, 1422, 537, 47721, 984, 440, 1318, 18795, 883, 646, 526, 10761, 2784, 225, 35, 724, 324, 320, 324, 442, 537, 40823, 26, 1333, 319]}
{"line_number": 216, "line_type": "original", "code": "            throw new ArithmeticException(\"The denominator must not be zero\");", "entropy": 1.52734375, "is_bug_line": false, "sus_score": 0.5214531421661377, "per_token_entropy": [4.5546875, 8.2421875, 0.006160736083984375, 0.26025390625, 0.0001672506332397461, 0.359619140625, 2.068359375, 4.3046875, 0.014404296875, 0.01123046875, 0.0026092529296875, 0.0134735107421875, 0.0218658447265625], "tokens": [1468, 1422, 537, 47721, 984, 440, 1318, 39920, 2298, 646, 526, 5934, 724]}
{"line_number": 216, "line_type": "generated", "code": "\n        int numer1 = 1;  // the previous\n        int denom1 = 0;  // the previous\n        int numer2 = 1;  // the current numerator, an intermediate value\n        int denom2 = 1;  //", "entropy": 0.1512451171875, "is_bug_line": false, "sus_score": 0.5214531421661377, "per_token_entropy": [0.484375, 0.4033203125, 0.0723876953125, 0.00901031494140625, 0.00762176513671875, 0.059112548828125, 0.0025615692138671875, 0.00010764598846435547, 0.192138671875, 0.00044345855712890625, 0.005687713623046875, 0.0204925537109375, 0.0171966552734375, 0.0025615692138671875, 0.0012845993041992188, 0.00013899803161621094, 0.0011301040649414062, 0.0008039474487304688, 0.003780364990234375, 1.609325408935547e-05, 0.01165771484375, 0.01177215576171875, 0.0002849102020263672, 0.002017974853515625, 0.259033203125, 0.2286376953125, 0.47314453125, 0.040130615234375, 0.00666046142578125, 0.1187744140625, 0.165771484375, 5.602836608886719e-05, 0.35107421875, 0.005260467529296875, 0.0028820037841796875, 0.07623291015625, 0.252685546875, 7.867813110351562e-06, 0.26318359375, 1.830078125, 2.150390625, 0.27978515625, 0.020782470703125, 0.005649566650390625, 0.0009794235229492188, 1.7762184143066406e-05, 0.01303863525390625, 4.589557647705078e-05, 0.00875091552734375, 1.6808509826660156e-05, 0.002246856689453125, 0.0005865097045898438], "tokens": [291, 629, 37538, 35, 280, 225, 35, 45, 225, 434, 322, 4552, 291, 629, 24257, 35, 280, 225, 34, 45, 225, 434, 322, 4552, 291, 629, 37538, 36, 280, 225, 35, 45, 225, 434, 322, 1550, 1929, 11290, 30, 600, 23124, 786, 291, 629, 24257, 36, 280, 225, 35, 45, 225, 434]}
{"line_number": 223, "line_type": "original", "code": "            numerator/=2; denominator/=2;", "entropy": 2.845703125, "is_bug_line": false, "sus_score": 0.5168642997741699, "per_token_entropy": [4.90625, 6.5859375, 0.0421142578125, 7.296875, 2.37109375, 0.08062744140625, 5.4140625, 1.7373046875, 0.00264739990234375, 0.01812744140625], "tokens": [1468, 1929, 11290, 44603, 36, 45, 39920, 44603, 36, 45]}
{"line_number": 223, "line_type": "generated", "code": "\n        // setup first convergent\n        numer2 = 1;\n        denom2 = a1;\n        double x2 = (double) a1;\n        // setup second convergent\n        double valueSquared = value * value;\n        a2 = (int", "entropy": 0.39453125, "is_bug_line": false, "sus_score": 0.5168642997741699, "per_token_entropy": [0.442138671875, 2.07421875, 2.091796875, 1.8798828125, 0.286376953125, 0.00835418701171875, 0.0146484375, 1.0625, 0.0487060546875, 0.020904541015625, 0.0726318359375, 0.0015239715576171875, 0.0004868507385253906, 0.026763916015625, 0.427490234375, 8.702278137207031e-06, 0.0010366439819335938, 0.2108154296875, 0.0007920265197753906, 0.0233001708984375, 0.167236328125, 1.208984375, 0.67236328125, 0.00771331787109375, 0.0306243896484375, 1.654296875, 0.07470703125, 0.0055694580078125, 0.40234375, 0.64013671875, 0.2376708984375, 0.271484375, 1.37890625, 0.2061767578125, 0.00708770751953125, 0.0009899139404296875, 0.0018825531005859375, 0.174560546875, 1.2939453125, 1.837890625, 0.74609375, 0.008941650390625, 0.013397216796875, 0.028778076171875, 0.001995086669921875, 0.0006322860717773438, 0.03509521484375, 0.1141357421875, 0.58984375, 0.0029697418212890625, 0.00801849365234375, 0.00047206878662109375], "tokens": [291, 434, 4705, 1932, 15941, 23201, 291, 37538, 36, 280, 225, 35, 45, 291, 24257, 36, 280, 312, 35, 45, 291, 2064, 816, 36, 280, 308, 2627, 27, 312, 35, 45, 291, 434, 4705, 3100, 15941, 23201, 291, 2064, 786, 30455, 280, 786, 319, 786, 45, 291, 312, 36, 280, 308, 410]}
{"line_number": 231, "line_type": "original", "code": "            denominator = -denominator;", "entropy": 3.703125, "is_bug_line": false, "sus_score": 0.5163605213165283, "per_token_entropy": [4.9765625, 8.640625, 4.125, 6.76953125, 0.79931640625, 0.1151123046875, 0.4912109375], "tokens": [1468, 39920, 280, 429, 29805, 9693, 45]}
{"line_number": 231, "line_type": "generated", "code": "\n            // setup for the next pass\n            a2 = (int) (x1 / y1);\n            x2 = y1;\n            y2 = x1 - a2 * y1;\n            delta2 = delta1;\n            delta1 =", "entropy": 0.1534423828125, "is_bug_line": false, "sus_score": 0.5163605213165283, "per_token_entropy": [0.41259765625, 0.94482421875, 0.30224609375, 0.457275390625, 0.9873046875, 0.2366943359375, 0.68115234375, 0.196044921875, 0.62353515625, 0.0176239013671875, 0.005340576171875, 0.0140533447265625, 0.00888824462890625, 0.05950927734375, 0.0181732177734375, 0.93359375, 0.1326904296875, 0.037841796875, 0.005405426025390625, 0.00040459632873535156, 0.00795745849609375, 0.06231689453125, 0.26025390625, 7.450580596923828e-05, 0.0003838539123535156, 0.00716400146484375, 1.4781951904296875e-05, 0.0006413459777832031, 0.006343841552734375, 0.00022912025451660156, 0.0001074075698852539, 0.0007228851318359375, 0.016387939453125, 3.5762786865234375e-07, 0.0010099411010742188, 0.036468505859375, 0.0055694580078125, 0.0115814208984375, 0.00045299530029296875, 1.4185905456542969e-05, 0.00030684471130371094, 0.234619140625, 1.052734375, 0.1746826171875, 0.0007929801940917969, 0.0019512176513671875, 7.152557373046875e-07, 5.3048133850097656e-05, 0.0185546875, 0.0026378631591796875, 6.532669067382812e-05, 0.00014328956604003906], "tokens": [324, 434, 4705, 436, 322, 2354, 3097, 324, 312, 36, 280, 308, 410, 27, 308, 106, 35, 517, 533, 35, 293, 324, 816, 36, 280, 533, 35, 45, 324, 533, 36, 280, 816, 35, 429, 312, 36, 319, 533, 35, 45, 324, 7715, 36, 280, 7715, 35, 45, 324, 7715, 35, 280]}
{"line_number": 482, "line_type": "original", "code": "        return Fraction.getFraction(numerator / gcd, denominator / gcd);", "entropy": 1.5546875, "is_bug_line": false, "sus_score": 0.5117141008377075, "per_token_entropy": [6.9375, 0.81884765625, 7.15625, 0.034149169921875, 2.3828125, 0.1790771484375, 0.10113525390625, 0.58837890625, 0.000461578369140625, 5.51953125, 0.96484375, 0.022613525390625, 0.09637451171875, 0.045745849609375, 0.00861358642578125, 0.0192413330078125], "tokens": [351, 442, 40823, 32, 371, 20709, 26, 1516, 11290, 517, 43422, 30, 39920, 517, 43422, 293]}
{"line_number": 482, "line_type": "generated", "code": "\n    /**\n     * <p>Gets a fraction that is the absolute value of this one.</p>\n     * \n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction instance with the absolute value of", "entropy": 0.139892578125, "is_bug_line": false, "sus_score": 0.5117141008377075, "per_token_entropy": [1.5185546875, 0.88525390625, 0.0170440673828125, 0.0001531839370727539, 0.042327880859375, 0.00015592575073242188, 0.0008492469787597656, 0.4580078125, 0.174072265625, 0.0104827880859375, 0.0936279296875, 0.0083465576171875, 0.0311279296875, 0.144775390625, 0.2298583984375, 0.0179595947265625, 0.0010395050048828125, 0.001712799072265625, 0.0007109642028808594, 7.87973403930664e-05, 0.000244140625, 0.007049560546875, 3.540515899658203e-05, 1.34765625, 6.830692291259766e-05, 0.007061004638671875, 0.007610321044921875, 0.00522613525390625, 0.0267486572265625, 0.026153564453125, 0.0013246536254882812, 0.00548553466796875, 0.006008148193359375, 0.003002166748046875, 0.0025806427001953125, 0.00024199485778808594, 0.0003533363342285156, 0.0032196044921875, 6.747245788574219e-05, 0.1226806640625, 7.867813110351562e-05, 0.004444122314453125, 0.0008373260498046875, 0.248291015625, 0.013916015625, 0.072509765625, 0.0267333984375, 0.1090087890625, 0.371826171875, 0.404052734375, 0.39794921875, 0.415283203125], "tokens": [284, 1022, 275, 319, 333, 98, 48, 20931, 312, 18795, 688, 438, 322, 7976, 786, 432, 458, 1591, 1730, 98, 48, 275, 319, 5384, 319, 333, 98, 48, 1318, 4717, 18795, 438, 646, 22974, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 312, 537, 18795, 1980, 623, 322, 7976, 786, 432]}
{"line_number": 476, "line_type": "original", "code": "            return equals(ZERO) ? this : ZERO;", "entropy": 2.9140625, "is_bug_line": false, "sus_score": 0.5112509727478027, "per_token_entropy": [6.7734375, 1.6396484375, 8.875, 0.06591796875, 0.60205078125, 0.076904296875, 0.06982421875, 0.400146484375, 0.037200927734375, 11.0625, 2.453125], "tokens": [1468, 442, 12423, 26, 13977, 27, 1018, 458, 499, 20024, 45]}
{"line_number": 476, "line_type": "generated", "code": "\n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction instance, negative if negative\n     */\n    public Fraction abs() {\n        return (numerator >= 0? this : negate());\n    }", "entropy": 0.1602783203125, "is_bug_line": false, "sus_score": 0.5112509727478027, "per_token_entropy": [0.50390625, 0.275146484375, 1.1123046875, 0.00748443603515625, 0.0113983154296875, 0.0278167724609375, 0.001338958740234375, 0.001071929931640625, 0.0009341239929199219, 0.00957489013671875, 0.005889892578125, 0.0031490325927734375, 0.00034236907958984375, 0.0011243820190429688, 0.0297698974609375, 0.0008535385131835938, 0.21630859375, 0.00011551380157470703, 0.0036487579345703125, 0.00428009033203125, 0.309814453125, 0.0151214599609375, 0.02703857421875, 0.023162841796875, 0.498291015625, 1.0693359375, 0.06671142578125, 0.65673828125, 1.4501953125, 0.017913818359375, 0.022064208984375, 0.0108642578125, 0.0012340545654296875, 0.0269317626953125, 0.002895355224609375, 0.011138916015625, 0.13134765625, 0.8564453125, 0.0640869140625, 0.0195770263671875, 6.198883056640625e-06, 0.353271484375, 0.002864837646484375, 1.3947486877441406e-05, 0.0692138671875, 0.0015745162963867188, 0.004791259765625, 0.386962890625, 3.1828880310058594e-05, 0.0031414031982421875, 0.01395416259765625, 5.9485435485839844e-05], "tokens": [275, 319, 333, 98, 48, 1318, 4717, 18795, 438, 646, 22974, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 312, 537, 18795, 1980, 30, 11003, 415, 11003, 275, 569, 284, 562, 40823, 11366, 346, 301, 291, 442, 308, 1516, 11290, 2377, 225, 34, 1018, 458, 499, 7528, 332, 1035, 284, 320]}
{"line_number": 226, "line_type": "original", "code": "            if (numerator==Integer.MIN_VALUE ||", "entropy": 1.9140625, "is_bug_line": false, "sus_score": 0.50919109582901, "per_token_entropy": [4.51953125, 2.349609375, 0.14013671875, 4.578125, 5.70703125, 1.9111328125, 1.552734375, 0.0006775856018066406, 0.0369873046875, 4.696846008300781e-05, 0.0003426074981689453, 2.16796875], "tokens": [1468, 415, 308, 1516, 11290, 379, 3061, 32, 4683, 81, 5975, 1276]}
{"line_number": 226, "line_type": "generated", "code": "\n        while (true) {\n            a2 = (int) (x1 / y1);\n            numer2 = a1 * denom1 + numer1 * a2;\n            denom2 = denom1 * a2;\n            if (numer2", "entropy": 0.1881103515625, "is_bug_line": false, "sus_score": 0.50919109582901, "per_token_entropy": [0.410400390625, 1.8603515625, 0.1654052734375, 0.78857421875, 0.00426483154296875, 0.0217132568359375, 0.1455078125, 0.99951171875, 0.0175018310546875, 0.0028820037841796875, 0.017669677734375, 0.004398345947265625, 0.08038330078125, 0.024383544921875, 0.5107421875, 0.039215087890625, 0.033172607421875, 0.004608154296875, 0.00011241436004638672, 0.0058135986328125, 0.0537109375, 1.5537109375, 0.0006804466247558594, 0.007045745849609375, 0.1068115234375, 0.0131072998046875, 0.08392333984375, 0.23486328125, 0.000385284423828125, 0.004512786865234375, 0.0020084381103515625, 0.10321044921875, 0.6943359375, 0.0131683349609375, -0.0, 0.0008420944213867188, 0.00962066650390625, 0.0290374755859375, 1.9073486328125e-05, 0.0003230571746826172, 0.0214385986328125, 1.3589859008789062e-05, 0.00311279296875, 0.00017774105072021484, 7.152557373046875e-07, 0.1756591796875, 0.28173828125, 0.332763671875, 0.386962890625, 0.48828125, 0.0013895034790039062, 0.040740966796875], "tokens": [291, 2218, 308, 1508, 27, 301, 324, 312, 36, 280, 308, 410, 27, 308, 106, 35, 517, 533, 35, 293, 324, 37538, 36, 280, 312, 35, 319, 24257, 35, 474, 37538, 35, 319, 312, 36, 45, 324, 24257, 36, 280, 24257, 35, 319, 312, 36, 45, 324, 415, 308, 1516, 265, 36]}
{"line_number": 480, "line_type": "original", "code": "            return this;", "entropy": 4.390625, "is_bug_line": false, "sus_score": 0.4965250492095947, "per_token_entropy": [5.7890625, 7.26171875, 2.33203125, 2.1796875], "tokens": [1468, 442, 458, 45]}
{"line_number": 480, "line_type": "generated", "code": "\n     */\n    public Fraction abs() {\n        if (numerator >= 0) {\n            return this;\n        } else {\n            return negate();\n        }\n    }\n\n    /**\n     * <p>Adds the value of this fraction to another, returning", "entropy": 0.117919921875, "is_bug_line": false, "sus_score": 0.4965250492095947, "per_token_entropy": [0.470458984375, 0.0816650390625, 0.0184783935546875, 0.01229095458984375, 0.0022411346435546875, 0.0164031982421875, 0.0032100677490234375, 0.0137176513671875, 0.1627197265625, 0.92041015625, 0.01143646240234375, 0.0555419921875, 1.6808509826660156e-05, 0.5576171875, 0.002613067626953125, 1.3709068298339844e-05, 0.01032257080078125, 0.002780914306640625, 0.186279296875, 0.00421905517578125, 0.0308380126953125, 0.0008378028869628906, 0.1453857421875, 0.0001806020736694336, 0.37939453125, 0.04547119140625, 0.2127685546875, 0.1253662109375, 0.321044921875, 5.1856040954589844e-05, 0.000881195068359375, 0.029815673828125, 0.00022721290588378906, 0.03387451171875, 8.988380432128906e-05, 0.11651611328125, 0.184814453125, 0.010040283203125, 1.9431114196777344e-05, 0.06353759765625, 7.975101470947266e-05, 0.0004849433898925781, 1.04296875, 0.297607421875, 0.0261077880859375, 0.0002181529998779297, 0.3408203125, 0.003520965576171875, 0.013702392578125, 0.10845947265625, 0.0007524490356445312, 0.0653076171875], "tokens": [275, 569, 284, 562, 40823, 11366, 346, 301, 291, 415, 308, 1516, 11290, 2377, 225, 34, 27, 301, 324, 442, 458, 45, 291, 320, 813, 301, 324, 442, 7528, 332, 473, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 34048, 322, 786, 432, 458, 18795, 372, 4674, 30, 14116]}
{"line_number": 851, "line_type": "original", "code": "        return (getNumerator() == other.getNumerator() &&", "entropy": 1.099609375, "is_bug_line": false, "sus_score": 0.47585824131965637, "per_token_entropy": [4.203125, 2.9296875, 2.9375, 2.228515625, 0.0003349781036376953, 0.03607177734375, 1.158203125, 0.406005859375, 0.00455474853515625, 0.004283905029296875, 0.00013053417205810547, 0.1414794921875, 0.2354736328125], "tokens": [351, 442, 308, 15207, 11290, 346, 610, 1604, 32, 15207, 11290, 346, 962]}
{"line_number": 851, "line_type": "generated", "code": "\n    /**\n     * <p>Gets the fraction as a <code>String</code>, using the specified format.</p>\n     *\n     * <p>The format must be one of\n     * <code>FractionFormat.DECIMAL_FRACTION</", "entropy": 0.305419921875, "is_bug_line": false, "sus_score": 0.47585824131965637, "per_token_entropy": [0.6484375, 0.25537109375, 0.055511474609375, 0.0001291036605834961, 0.0304412841796875, 0.00026345252990722656, 0.0024261474609375, 0.253662109375, 0.114013671875, 0.16943359375, 0.00595855712890625, 0.055389404296875, 0.005290985107421875, 0.0005545616149902344, 0.0005145072937011719, 1.1064453125, 0.0007848739624023438, 0.00012171268463134766, 0.83837890625, 1.259765625, 0.2100830078125, 1.978515625, 0.76220703125, 0.347412109375, 4.1604042053222656e-05, 0.055511474609375, 0.00836944580078125, 0.0002256631851196289, 0.05462646484375, 7.534027099609375e-05, 0.1951904296875, 0.0260772705078125, 0.01253509521484375, 0.62890625, 0.09881591796875, 0.35888671875, 0.0281982421875, 0.44482421875, 0.0298919677734375, 0.9111328125, 0.0001494884490966797, 0.361328125, 0.139892578125, 0.06097412109375, 0.1280517578125, 0.016693115234375, 0.06878662109375, 1.712890625, 0.98095703125, 1.2275390625, 0.0006504058837890625, 0.234130859375], "tokens": [284, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 687, 48, 652, 377, 687, 2717, 1471, 322, 3191, 2179, 1730, 98, 48, 275, 319, 275, 319, 333, 98, 48, 1318, 2179, 2298, 526, 1591, 432, 275, 319, 333, 687, 48, 20709, 2207, 32, 37607, 81, 4002, 8750, 377]}
{"line_number": 847, "line_type": "original", "code": "        if (obj instanceof Fraction == false) {", "entropy": 2.228515625, "is_bug_line": false, "sus_score": 0.46839264035224915, "per_token_entropy": [5.0390625, 4.9765625, 0.09881591796875, 7.0625, 0.59619140625, 1.013671875, 3.357421875, 0.006526947021484375, 0.033050537109375, 0.08978271484375], "tokens": [351, 415, 308, 2067, 5113, 40823, 610, 901, 27, 301]}
{"line_number": 847, "line_type": "generated", "code": "\n            return 1;\n        }\n    }\n\n    /**\n     * <p>Gets the fraction as a <code>double</code>.</p>\n     *\n     * <p>This calculates the fraction as the numerator divided by denominator.</p>\n    ", "entropy": 0.054962158203125, "is_bug_line": false, "sus_score": 0.46839264035224915, "per_token_entropy": [0.08642578125, 0.0131072998046875, 0.11834716796875, 0.003452301025390625, 0.0022182464599609375, 0.038330078125, 0.002384185791015625, 0.07269287109375, 0.0011873245239257812, 0.13134765625, 0.17041015625, 0.00635528564453125, 2.753734588623047e-05, 0.009735107421875, 8.058547973632812e-05, 0.0004911422729492188, 0.169189453125, 0.12548828125, 0.172119140625, 0.00396728515625, 0.02593994140625, 0.004878997802734375, 0.0002925395965576172, 0.00029158592224121094, 0.513671875, 0.0019273757934570312, 0.00012159347534179688, 0.244873046875, 5.829334259033203e-05, 0.0305633544921875, 0.0014019012451171875, 0.0002753734588623047, 0.013916015625, 7.045269012451172e-05, 0.30029296875, 0.0009069442749023438, 0.0171356201171875, 0.08038330078125, 0.097900390625, 9.036064147949219e-05, 0.02630615234375, 0.057647705078125, 0.00437164306640625, 0.047943115234375, 1.4781951904296875e-05, 0.0100860595703125, 0.047149658203125, 0.120849609375, 0.06719970703125, 0.00023293495178222656, 0.010955810546875, 0.002513885498046875], "tokens": [324, 442, 225, 35, 45, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 687, 48, 2627, 377, 687, 12689, 98, 48, 275, 319, 275, 319, 333, 98, 48, 2272, 38057, 322, 18795, 619, 322, 1929, 11290, 32235, 810, 39920, 1730, 98, 48, 275]}
{"line_number": 844, "line_type": "original", "code": "        if (obj == this) {", "entropy": 2.55859375, "is_bug_line": false, "sus_score": 0.46649476885795593, "per_token_entropy": [4.5078125, 4.828125, 0.07073974609375, 6.69140625, 2.19140625, 2.072265625, 0.006862640380859375, 0.10369873046875], "tokens": [351, 415, 308, 2067, 610, 458, 27, 301]}
{"line_number": 844, "line_type": "generated", "code": "\n        }\n        return first < second? -1 : 1;\n    }\n\n    /**\n     * <p>Gets the fraction as a <code>String</code>.</p>\n     *\n     * <p>The format used is <code>'num", "entropy": 0.1610107421875, "is_bug_line": false, "sus_score": 0.46649476885795593, "per_token_entropy": [0.1640625, 0.0660400390625, 0.412109375, 0.765625, 0.301513671875, 0.09661865234375, 0.0023326873779296875, 0.01261138916015625, 0.0004749298095703125, 0.00018799304962158203, 0.0038204193115234375, 0.031585693359375, 2.467632293701172e-05, 0.0164031982421875, 0.1741943359375, 0.0027942657470703125, 0.11407470703125, 0.157958984375, 0.006412506103515625, 3.325939178466797e-05, 0.009735107421875, 9.191036224365234e-05, 0.0004749298095703125, 0.142333984375, 0.1278076171875, 0.2481689453125, 0.005046844482421875, 0.0255584716796875, 0.0054473876953125, 0.0003879070281982422, 0.00025272369384765625, 1.0361328125, 0.0007114410400390625, 0.00019478797912597656, 0.483154296875, 3.2067298889160156e-05, 0.044708251953125, 0.0013217926025390625, 0.00037360191345214844, 0.01541900634765625, 9.131431579589844e-05, 0.1419677734375, 0.0014133453369140625, 0.01131439208984375, 0.04901123046875, 0.00667572021484375, 0.4541015625, 0.11029052734375, 1.2451171875, 0.57080078125, 0.2239990234375, 1.087890625], "tokens": [291, 320, 291, 442, 1932, 333, 3100, 1018, 429, 35, 499, 225, 35, 45, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 687, 48, 652, 377, 687, 12689, 98, 48, 275, 319, 275, 319, 333, 98, 48, 1318, 2179, 1654, 438, 333, 687, 6457, 1516]}
{"line_number": 594, "line_type": "original", "code": "        int k=0;", "entropy": 3.728515625, "is_bug_line": false, "sus_score": 0.46588337421417236, "per_token_entropy": [5.29296875, 5.484375, 7.59375, 3.154296875, 0.7421875, 0.1065673828125], "tokens": [351, 629, 831, 47, 34, 45]}
{"line_number": 594, "line_type": "generated", "code": "\n        return (int)m;\n    }\n\n    /**\n     * Multiply a number by a fraction.\n     * \n     * @param v  a number (represented as a {@link BigInteger})\n     * @param f  a fraction\n     * @return <", "entropy": 0.291748046875, "is_bug_line": false, "sus_score": 0.46588337421417236, "per_token_entropy": [0.043731689453125, 0.0133514404296875, 0.059051513671875, 0.00152587890625, 0.00782012939453125, 0.23583984375, 0.0280303955078125, 0.052215576171875, 0.00072479248046875, 0.1976318359375, 0.041107177734375, 0.401611328125, 6.771087646484375e-05, 1.517578125, 1.16796875, 0.076904296875, 0.02325439453125, 0.08465576171875, 0.1982421875, 0.0277557373046875, 0.08050537109375, 0.005588531494140625, 0.82080078125, 7.30752944946289e-05, 0.0033664703369140625, 0.002132415771484375, 1.4384765625, 1.4482421875, 0.3134765625, 0.097900390625, 1.3154296875, 2.38671875, 0.0011043548583984375, 0.04949951171875, 0.045196533203125, 1.4580078125, 0.0190887451171875, 0.48974609375, 0.0889892578125, 0.0223236083984375, 1.7762184143066406e-05, 0.0011472702026367188, 0.004039764404296875, 0.006336212158203125, 0.0027790069580078125, 0.04229736328125, 0.00896453857421875, 0.058258056640625, 0.005157470703125, 0.0002639293670654297, 0.00952911376953125, 0.76611328125], "tokens": [291, 442, 308, 410, 27, 95, 45, 284, 320, 446, 1022, 275, 319, 44155, 312, 1451, 810, 312, 18795, 32, 275, 319, 5384, 319, 477, 753, 354, 225, 312, 1451, 308, 27877, 318, 619, 312, 3088, 1204, 21743, 1748, 275, 319, 477, 753, 296, 225, 312, 18795, 275, 319, 477, 601, 333]}
{"line_number": 603, "line_type": "original", "code": "        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;", "entropy": 2.263671875, "is_bug_line": false, "sus_score": 0.46318355202674866, "per_token_entropy": [5.0546875, 5.45703125, 6.1640625, 0.15771484375, 4.125, 3.806640625, 0.396240234375, 4.1015625, 2.939453125, 0.70654296875, 1.107421875, 0.01316070556640625, 1.150390625, 0.138671875, 3.37890625, 1.009765625, 0.48046875, 0.045379638671875, 1.7763671875, 3.869140625, 2.447265625, 2.98046875, 0.75634765625], "tokens": [351, 629, 273, 280, 1833, 103, 24, 35, 19162, 35, 27, 1018, 354, 499, 25298, 103, 33, 36, 27, 1109, 52, 37, 35202]}
{"line_number": 603, "line_type": "generated", "code": "\n     */\n    private static long mulAndCheckNonnegative(long x, long y) {\n        long m = x*y;\n        if (m < 0) {\n            throw new ArithmeticException(\"overflow: mul\");\n        }\n        return m;", "entropy": 0.1236572265625, "is_bug_line": false, "sus_score": 0.46318355202674866, "per_token_entropy": [0.204833984375, 0.55078125, 0.033294677734375, 0.0706787109375, 0.0192413330078125, 0.52587890625, 0.00421905517578125, 0.94775390625, 0.0010356903076171875, 0.1207275390625, 1.201171875, 0.0027904510498046875, 1.1142578125, 0.0012378692626953125, 0.0004546642303466797, 0.0265655517578125, 0.0001443624496459961, 0.005008697509765625, 0.00951385498046875, 0.038330078125, 0.295654296875, 0.039031982421875, 0.00286102294921875, 0.036590576171875, 0.2371826171875, 0.00045037269592285156, 0.0008568763732910156, 0.02154541015625, 0.0206146240234375, 0.003093719482421875, 0.01222991943359375, 0.1280517578125, 0.0323486328125, 0.00011479854583740234, 0.130126953125, 0.0154876708984375, 0.05841064453125, 0.037139892578125, 0.0004799365997314453, 0.0036525726318359375, 3.063678741455078e-05, 0.00441741943359375, 0.3447265625, 0.007053375244140625, 0.0016202926635742188, 0.09307861328125, 0.004428863525390625, 0.0021209716796875, 0.00905609130859375, 0.0026264190673828125, 0.005397796630859375, 0.0009026527404785156], "tokens": [275, 569, 284, 945, 907, 1946, 17476, 2185, 2140, 3910, 15272, 26, 3222, 816, 30, 1946, 533, 27, 301, 291, 1946, 345, 280, 816, 28, 107, 45, 291, 415, 308, 95, 333, 225, 34, 27, 301, 324, 1422, 537, 47721, 984, 440, 9642, 44, 17476, 724, 291, 320, 291, 442, 345, 45]}
{"line_number": 595, "line_type": "original", "code": "        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...", "entropy": 0.9130859375, "is_bug_line": false, "sus_score": 0.4572300910949707, "per_token_entropy": [4.375, 4.93359375, 1.9921875, 3.19921875, 0.96533203125, 0.0814208984375, 0.08197021484375, 0.03167724609375, 2.478515625, 0.88037109375, 0.0258026123046875, 0.006725311279296875, 0.0016107559204101562, 0.0080108642578125, 0.0035686492919921875, 1.7783203125, 0.39453125, 1.6318359375, 0.12030029296875, 0.04327392578125, 0.04400634765625, 0.030364990234375, 0.794921875, 0.5126953125, 0.11883544921875, 0.2064208984375, 0.0250396728515625, 0.1796875, 2.4609375, 0.01145172119140625, 0.89208984375], "tokens": [351, 2218, 1833, 103, 24, 35, 19162, 34, 962, 308, 104, 24, 35, 19162, 34, 962, 831, 46, 37, 35, 27, 301, 434, 2218, 1044, 461, 354, 884, 4335, 4444, 1179]}
{"line_number": 595, "line_type": "generated", "code": "\n    }\n\n    /**\n     * Multiply two long integers, checking for overflow.\n     *\n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException", "entropy": 0.12457275390625, "is_bug_line": false, "sus_score": 0.4572300910949707, "per_token_entropy": [0.24072265625, 0.1689453125, 0.3125, 0.056304931640625, 0.365234375, 7.641315460205078e-05, 1.810546875, 0.6787109375, 0.267578125, 0.413818359375, 0.004566192626953125, 0.0005245208740234375, 8.368492126464844e-05, 0.0006418228149414062, 0.037933349609375, 0.0199432373046875, 0.0015497207641601562, 1.8671875, 0.00021600723266601562, 0.002178192138671875, 0.0015048980712890625, 0.036376953125, 0.05084228515625, 0.036376953125, 0.01031494140625, 5.9604644775390625e-06, 5.7220458984375e-05, 5.066394805908203e-05, 0.00042366981506347656, 0.0013494491577148438, 0.000980377197265625, 0.0026454925537109375, 0.00031876564025878906, 0.001453399658203125, 0.0054779052734375, 0.0016794204711914062, 0.0006155967712402344, 0.02178955078125, 0.002079010009765625, 0.0003528594970703125, 0.0007538795471191406, 0.0261383056640625, 0.0002448558807373047, 0.00023734569549560547, 0.0006003379821777344, 0.00556182861328125, 0.00463104248046875, 0.009033203125, 0.0007610321044921875, 0.0027256011962890625, 0.0010776519775390625, 6.0558319091796875e-05], "tokens": [284, 320, 446, 1022, 275, 319, 44155, 3134, 1946, 18670, 30, 11056, 436, 9973, 32, 275, 319, 275, 319, 477, 753, 816, 312, 10365, 275, 319, 477, 753, 533, 312, 10365, 275, 319, 477, 601, 322, 4054, 333, 687, 48, 106, 28, 107, 377, 687, 48, 275, 319, 477, 5117, 47721, 984]}
{"line_number": 619, "line_type": "original", "code": "            t = (v - u)/2;", "entropy": 3.25390625, "is_bug_line": false, "sus_score": 0.4568597376346588, "per_token_entropy": [6.66015625, 8.828125, 0.966796875, 1.470703125, 7.39453125, 3.28515625, 0.650390625, 3.009765625, 0.036712646484375, 0.2421875], "tokens": [1468, 273, 280, 308, 104, 429, 1044, 4165, 36, 45]}
{"line_number": 619, "line_type": "generated", "code": "\n     * @param y an addend", "entropy": 0.048858642578125, "is_bug_line": false, "sus_score": 0.4568597376346588, "per_token_entropy": [0.320556640625, 0.02801513671875, 0.0203399658203125, 0.0125732421875, 0.0024471282958984375, 0.00616455078125, 0.0003566741943359375, 0.0005326271057128906], "tokens": [275, 319, 477, 753, 533, 600, 1015, 416]}
{"line_number": 850, "line_type": "original", "code": "        Fraction other = (Fraction) obj;", "entropy": 1.8505859375, "is_bug_line": false, "sus_score": 0.45445331931114197, "per_token_entropy": [6.17578125, 7.4609375, 2.884765625, 0.0128326416015625, 0.0032672882080078125, 0.0002894401550292969, 0.0033130645751953125, 0.06475830078125, 0.044891357421875], "tokens": [351, 40823, 1604, 280, 308, 20709, 27, 2830, 45]}
{"line_number": 850, "line_type": "generated", "code": "\n    /**\n     * <p>Gets the fraction as a <code>String</code>.</p>\n     *\n     * <p>The format used is 'numerator/denominator'.</p>\n     *\n     * @return a string representation of", "entropy": 0.11956787109375, "is_bug_line": false, "sus_score": 0.45445331931114197, "per_token_entropy": [0.77685546875, 0.2349853515625, 0.0355224609375, 0.0001342296600341797, 0.0207977294921875, 0.0002219676971435547, 0.0015649795532226562, 0.1986083984375, 0.1031494140625, 0.160400390625, 0.004749298095703125, 0.041046142578125, 0.00586700439453125, 0.0004553794860839844, 0.00045013427734375, 0.9501953125, 0.0007038116455078125, 9.524822235107422e-05, 0.5703125, 4.4345855712890625e-05, 0.044189453125, 0.0020275115966796875, 0.0004031658172607422, 0.0196380615234375, 9.357929229736328e-05, 0.1806640625, 0.0019550323486328125, 0.0141448974609375, 0.060150146484375, 0.00763702392578125, 0.3349609375, 0.1273193359375, 0.9453125, 0.5048828125, 0.05487060546875, 0.156005859375, 0.00016748905181884766, 1.430511474609375e-06, 0.0855712890625, 0.277587890625, 0.00015747547149658203, 0.0091552734375, 0.002788543701171875, 0.0008745193481445312, 0.006595611572265625, 0.000263214111328125, 0.005825042724609375, 0.0004696846008300781, 0.0250701904296875, 0.130859375, 0.1134033203125, 0.00047397613525390625], "tokens": [284, 1022, 275, 319, 333, 98, 48, 20931, 322, 18795, 619, 312, 333, 687, 48, 652, 377, 687, 12689, 98, 48, 275, 319, 275, 319, 333, 98, 48, 1318, 2179, 1654, 438, 330, 1516, 11290, 33, 29805, 9693, 25, 1730, 98, 48, 275, 319, 275, 319, 477, 601, 312, 802, 10293, 432]}
