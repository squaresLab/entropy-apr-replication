{"line_number": 686, "line_type": "original", "code": "            int idx= Arrays.binarySearch(textKeyValues, new KeyValue(value, -1), IGNORE_CASE_COMPARATOR);", "entropy": 1.111328125, "is_bug_line": false, "sus_score": 0.8330670595169067, "per_token_entropy": [6.78515625, 3.46875, 1.529296875, 0.1966552734375, 3.033203125, 0.005901336669921875, 0.0005726814270019531, 3.600120544433594e-05, 0.01110076904296875, 3.11328125, 0.1063232421875, 0.00711822509765625, 0.01078033447265625, 2.4453125, 0.0791015625, 0.0013799667358398438, 0.12274169921875, 0.496337890625, 0.10546875, 1.2119140625, 0.035736083984375, 2.30078125, 8.5078125, 0.156494140625, 0.00215911865234375, 0.0024871826171875, 0.0714111328125, 0.595703125, 0.0015668869018554688, 0.025238037109375, 0.007049560546875], "tokens": [1468, 629, 5417, 47, 14473, 32, 7003, 3192, 26, 878, 953, 3354, 30, 537, 3891, 882, 26, 853, 30, 429, 35, 471, 30365, 19377, 81, 11252, 81, 5762, 783, 7267, 293]}
{"line_number": 686, "line_type": "generated", "code": "\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            int iValue= Integer.parseInt(value);\n            cal.set(field, iValue);\n       ", "entropy": 0.142333984375, "is_bug_line": false, "sus_score": 0.8330670595169067, "per_token_entropy": [0.276123046875, 0.05853271484375, 0.01073455810546875, 0.00015175342559814453, 0.0293731689453125, 0.00016224384307861328, 0.00012743473052978516, 0.0016050338745117188, 0.00841522216796875, 0.006011962890625, 0.005859375, 0.0009469985961914062, 0.002094268798828125, 0.002704620361328125, 0.00977325439453125, 0.0016355514526367188, 0.00020241737365722656, 0.0008444786071777344, 0.0016012191772460938, 2.586841583251953e-05, 9.179115295410156e-05, 0.0004477500915527344, 8.893013000488281e-05, 0.0018987655639648438, 0.0015459060668945312, 0.00010502338409423828, 0.0036373138427734375, 0.0243377685546875, 0.00438690185546875, 0.046417236328125, 0.13134765625, 0.9501953125, 2.330078125, 1.5595703125, 0.204833984375, 0.60595703125, 0.0006632804870605469, 0.006870269775390625, 0.0012712478637695312, 0.013702392578125, 0.146728515625, 0.452880859375, 0.34033203125, 0.00030612945556640625, 0.0027942657470703125, 0.0016889572143554688, 0.007434844970703125, 0.0002925395965576172, 0.0345458984375, 3.337860107421875e-05, 0.003631591796875, 0.10565185546875], "tokens": [291, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 739, 9389, 26, 12200, 1547, 2825, 4118, 30, 16600, 2182, 30, 892, 786, 27, 301, 324, 629, 595, 882, 47, 4401, 32, 11831, 26, 853, 293, 324, 2182, 32, 470, 26, 1495, 30, 595, 882, 293, 291]}
{"line_number": 251, "line_type": "original", "code": "        if(date==null) {", "entropy": 2.306640625, "is_bug_line": false, "sus_score": 0.8124257922172546, "per_token_entropy": [3.0859375, 2.17578125, 0.9736328125, 7.0, 4.17578125, 0.59423828125, 0.33056640625, 0.123046875], "tokens": [351, 415, 26, 770, 379, 1693, 27, 301]}
{"line_number": 251, "line_type": "generated", "code": "\n     */\n    private void escape(StringBuilder regex, String value, boolean unquote) {\n        int offset= 0;\n        int length= value.length();\n        while(offset<length) {\n            int slash= value.indexOf('\\\\', offset);", "entropy": 0.253173828125, "is_bug_line": false, "sus_score": 0.8124257922172546, "per_token_entropy": [0.4814453125, 0.1900634765625, 0.018951416015625, 0.36181640625, 0.52099609375, 1.4814453125, 0.85546875, 0.1943359375, 0.002613067626953125, 0.0009107589721679688, 0.236083984375, 0.0033817291259765625, 0.014862060546875, 0.0184478759765625, 0.006862640380859375, 0.004180908203125, 0.01568603515625, 0.00630950927734375, 0.064697265625, 0.943359375, 2.78125, 0.08087158203125, 0.394775390625, 0.0139923095703125, 0.035369873046875, 0.09185791015625, 0.64990234375, 0.80419921875, 0.01490020751953125, 0.0146331787109375, 0.0022106170654296875, 0.0007138252258300781, 0.00580596923828125, 0.1832275390625, 0.5859375, 0.109130859375, 0.08795166015625, 0.55419921875, 0.0049591064453125, 0.07415771484375, 0.0019006729125976562, 0.02606201171875, 0.1561279296875, 0.57861328125, 0.06817626953125, 0.093017578125, 2.467632293701172e-05, 0.0023345947265625, 0.271484375, 0.0003025531768798828, 0.052642822265625, 0.00453948974609375], "tokens": [275, 569, 284, 945, 763, 15820, 26, 20884, 9667, 30, 892, 786, 30, 1905, 707, 7345, 27, 301, 291, 629, 3401, 47, 225, 34, 45, 291, 629, 3104, 47, 786, 32, 1322, 473, 291, 2218, 26, 2881, 46, 1322, 27, 301, 324, 629, 29659, 47, 786, 32, 7142, 40348, 370, 3401, 293]}
{"line_number": 250, "line_type": "original", "code": "        Date date= parse(source, new ParsePosition(0));", "entropy": 1.9052734375, "is_bug_line": false, "sus_score": 0.8119001984596252, "per_token_entropy": [3.353515625, 6.88671875, 5.1171875, 0.281982421875, 2.896484375, 1.00390625, 2.896484375, 1.2392578125, 2.765625, 0.060546875, 1.7881393432617188e-05, 0.0027008056640625, 0.135986328125, 0.0296630859375], "tokens": [351, 2821, 2340, 47, 3185, 26, 1855, 30, 537, 8661, 2731, 26, 34, 876]}
{"line_number": 250, "line_type": "generated", "code": "\n     */\n    private void appendEscaped(StringBuilder regex, String value) {\n        int len= value.length();\n        for(int i=0; i<len; i++) {\n            char ch= value.charAt(i);\n            switch(", "entropy": 0.206787109375, "is_bug_line": false, "sus_score": 0.8119001984596252, "per_token_entropy": [0.399658203125, 0.1180419921875, 0.019378662109375, 0.34423828125, 0.474365234375, 1.1728515625, 1.7451171875, 0.0002601146697998047, 0.037200927734375, 0.11871337890625, 0.0051116943359375, 0.0008754730224609375, 0.448486328125, 0.004955291748046875, 0.034698486328125, 0.006107330322265625, 0.03619384765625, 1.0283203125, 1.7841796875, 0.07196044921875, 0.1348876953125, 0.0013103485107421875, 0.00035071372985839844, 0.00353240966796875, 0.043975830078125, 0.17578125, 0.1346435546875, 0.00585174560546875, 0.0119781494140625, 0.003993988037109375, 0.111328125, 0.007038116455078125, 0.12213134765625, 0.03509521484375, 0.016387939453125, 0.16015625, 0.88525390625, 0.01983642578125, 0.0015869140625, 0.0149383544921875, 0.0177001953125, 0.25244140625, 0.0180511474609375, 0.028289794921875, 4.7206878662109375e-05, 2.658367156982422e-05, 7.593631744384766e-05, 0.00021135807037353516, 0.0005407333374023438, 0.04278564453125, 0.56494140625, 0.0816650390625], "tokens": [275, 569, 284, 945, 763, 5489, 24866, 26695, 26, 20884, 9667, 30, 892, 786, 27, 301, 291, 629, 2069, 47, 786, 32, 1322, 473, 291, 436, 26, 410, 595, 47, 34, 45, 595, 46, 1657, 45, 595, 1987, 301, 324, 1351, 663, 47, 786, 32, 15611, 26, 91, 293, 324, 3578, 26]}
{"line_number": 687, "line_type": "original", "code": "            if(idx<0) {", "entropy": 2.185546875, "is_bug_line": false, "sus_score": 0.8111987709999084, "per_token_entropy": [3.818359375, 3.69140625, 0.233154296875, 5.2890625, 3.818359375, 0.448974609375, 0.143310546875, 0.049102783203125], "tokens": [1468, 415, 26, 2875, 46, 34, 27, 301]}
{"line_number": 687, "line_type": "generated", "code": "\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            try {\n                cal.set(field, Integer.parseInt(value));\n            }\n            catch(NumberFormatException ex", "entropy": 0.1160888671875, "is_bug_line": false, "sus_score": 0.8111987709999084, "per_token_entropy": [0.74072265625, 0.07440185546875, 0.0428466796875, 0.0004792213439941406, 0.0002429485321044922, 0.0159149169921875, 0.00844573974609375, 0.0196075439453125, 0.0047607421875, 0.0006418228149414062, 0.004238128662109375, 0.0034122467041015625, 0.00682830810546875, 0.001674652099609375, 0.00013971328735351562, 0.0007543563842773438, 0.0021343231201171875, 1.4901161193847656e-05, 7.82012939453125e-05, 0.0004379749298095703, 8.45193862915039e-05, 0.00208282470703125, 0.001857757568359375, 9.310245513916016e-05, 0.002750396728515625, 0.01416015625, 0.0022525787353515625, 0.07720947265625, 0.2203369140625, 1.99609375, 0.0221710205078125, 0.1282958984375, 0.53515625, 0.000152587890625, 0.0024127960205078125, 0.0008158683776855469, 0.0061187744140625, 0.0002853870391845703, 0.372802734375, 0.00036787986755371094, 0.005680084228515625, 0.0005102157592773438, 0.00977325439453125, 0.05572509765625, 0.04034423828125, 0.0002636909484863281, 0.419189453125, 0.0019893646240234375, 0.25927734375, 0.0537109375, 1.7762184143066406e-05, 0.875], "tokens": [276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 739, 9389, 26, 12200, 1547, 2825, 4118, 30, 16600, 2182, 30, 892, 786, 27, 301, 324, 1596, 301, 400, 2182, 32, 470, 26, 1495, 30, 4401, 32, 11831, 26, 853, 876, 324, 320, 324, 2368, 26, 1918, 25944, 538]}
{"line_number": 282, "line_type": "original", "code": "        Calendar cal= Calendar.getInstance(timeZone, locale);", "entropy": 2.275390625, "is_bug_line": false, "sus_score": 0.8086616396903992, "per_token_entropy": [5.9375, 12.75, 3.36328125, 0.230224609375, 0.5634765625, 0.0042572021484375, 0.00891876220703125, 0.425537109375, 5.8671875, 0.027618408203125, 0.353271484375, 0.038665771484375, 0.01190948486328125], "tokens": [351, 16600, 2182, 47, 16600, 32, 7426, 26, 1003, 6767, 30, 11259, 293]}
{"line_number": 282, "line_type": "generated", "code": "\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @return The <code>", "entropy": 0.133056640625, "is_bug_line": false, "sus_score": 0.8086616396903992, "per_token_entropy": [0.81982421875, 0.3740234375, 0.037841796875, 0.01010894775390625, 0.00020563602447509766, 1.9073486328125e-05, 0.029541015625, 0.004810333251953125, 0.0010461807250976562, 0.012054443359375, 0.00040078163146972656, 0.0216064453125, 0.0211029052734375, 0.0003075599670410156, 0.00205230712890625, 0.00804901123046875, 0.0009622573852539062, 0.2252197265625, 0.2366943359375, 0.01247406005859375, 4.3272972106933594e-05, 2.193359375, 0.036590576171875, 0.393310546875, 0.07464599609375, 0.0888671875, 0.75390625, 0.0166473388671875, 0.15869140625, 0.0007886886596679688, 0.028106689453125, 0.0031414031982421875, 0.320068359375, 0.01739501953125, 0.0701904296875, 0.01479339599609375, 0.0174102783203125, 0.0005440711975097656, 0.0017652511596679688, 0.0176849365234375, 0.370361328125, 0.0091705322265625, 0.0144805908203125, 0.046875, 0.0113372802734375, 0.002460479736328125, 0.0019741058349609375, 0.392578125, 0.00591278076171875, 0.040130615234375, 0.0004355907440185547, 7.724761962890625e-05], "tokens": [324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 516, 10946, 8082, 3829, 1991, 10605, 6101, 275, 319, 477, 753, 9667, 886, 8050, 9667, 275, 319, 477, 753, 786, 886, 1914, 1600, 275, 319, 477, 601, 886, 333, 687, 48]}
{"line_number": 685, "line_type": "original", "code": "            KeyValue[] textKeyValues= parser.getDisplayNames(field);", "entropy": 1.0146484375, "is_bug_line": false, "sus_score": 0.8079556822776794, "per_token_entropy": [6.890625, 6.16015625, 0.014495849609375, 0.56689453125, 1.046875, 0.019134521484375, 0.000659942626953125, 0.318603515625, 0.07000732421875, 0.0029087066650390625, 0.1103515625, 0.0003666877746582031, 0.0032749176025390625, 0.007366180419921875, 0.004177093505859375], "tokens": [1468, 3891, 882, 1178, 1344, 953, 3354, 47, 4118, 32, 47104, 4109, 26, 1495, 293]}
{"line_number": 685, "line_type": "generated", "code": "\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            int valueLength= value.length();\n            int fieldWidth= parser.getFieldWidth();\n            if(", "entropy": 0.1888427734375, "is_bug_line": false, "sus_score": 0.8079556822776794, "per_token_entropy": [0.29345703125, 0.03704833984375, 0.0102081298828125, 0.00017130374908447266, 0.02667236328125, 0.0001270771026611328, 0.00012743473052978516, 0.0012426376342773438, 0.00853729248046875, 0.004085540771484375, 0.0035457611083984375, 0.0005908012390136719, 0.001434326171875, 0.001712799072265625, 0.00782012939453125, 0.0012187957763671875, 8.285045623779297e-05, 0.0004897117614746094, 0.0009236335754394531, 3.802776336669922e-05, 7.236003875732422e-05, 0.000301361083984375, 6.520748138427734e-05, 0.0012826919555664062, 0.0010480880737304688, 6.80685043334961e-05, 0.0017023086547851562, 0.016143798828125, 0.001434326171875, 0.056671142578125, 0.484619140625, 1.0087890625, 1.73046875, 2.583984375, 0.06976318359375, 0.04815673828125, 0.006198883056640625, 0.004695892333984375, 0.0084228515625, 0.13427734375, 0.7060546875, 1.34765625, 0.237548828125, 0.032806396484375, 0.049591064453125, 9.655952453613281e-05, 0.0029354095458984375, 0.00015032291412353516, 0.006153106689453125, 0.152587890625, 0.65869140625, 0.066650390625], "tokens": [291, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 739, 9389, 26, 12200, 1547, 2825, 4118, 30, 16600, 2182, 30, 892, 786, 27, 301, 324, 629, 786, 2380, 47, 786, 32, 1322, 473, 324, 629, 1600, 2611, 47, 4118, 32, 18269, 2611, 473, 324, 415, 26]}
{"line_number": 277, "line_type": "original", "code": "        Matcher matcher= parsePattern.matcher(source.substring(offset));", "entropy": 2.181640625, "is_bug_line": false, "sus_score": 0.80250084400177, "per_token_entropy": [5.5546875, 12.2265625, 1.853515625, 0.28076171875, 4.75, 0.146728515625, 0.0259552001953125, 0.0007166862487792969, 0.08935546875, 3.5234375, 3.1640625, 0.2081298828125, 0.0025806427001953125, 0.60986328125, 0.28564453125], "tokens": [351, 33128, 20638, 47, 3185, 5516, 32, 16937, 26, 1855, 32, 8723, 26, 2881, 876]}
{"line_number": 277, "line_type": "generated", "code": "\n            }\n            regex.append(c);\n        }\n        return regex;\n    }\n\n    /**\n     * A strategy is a way to parse a date element.\n     *\n     * @since 2.4\n     */\n    private static interface Strategy {\n        /**", "entropy": 0.50341796875, "is_bug_line": false, "sus_score": 0.80250084400177, "per_token_entropy": [0.74462890625, 0.462646484375, 0.034088134765625, 0.0178070068359375, 0.00018596649169921875, 1.6808509826660156e-05, 0.028228759765625, 0.0095977783203125, 0.0016603469848632812, 0.01065826416015625, 0.000331878662109375, 0.0232391357421875, 0.0227203369140625, 0.00032401084899902344, 0.001995086669921875, 0.00795745849609375, 0.0008640289306640625, 0.1983642578125, 0.2196044921875, 0.01088714599609375, 5.8650970458984375e-05, 2.9296875, 0.37890625, 1.9443359375, 0.9072265625, 1.83984375, 0.56787109375, 1.439453125, 0.27978515625, 2.703125, 2.40625, 1.3369140625, 0.18017578125, 0.65478515625, 1.1142578125, 0.07196044921875, 0.1966552734375, 0.8818359375, 0.01049041748046875, 0.474853515625, 0.00021696090698242188, 1.119140625, 0.0221710205078125, 0.10028076171875, 0.00617218017578125, 0.44482421875, 0.55029296875, 0.75927734375, 0.0006151199340820312, 0.1314697265625, 0.61767578125, 0.30908203125], "tokens": [324, 320, 324, 9667, 32, 1689, 26, 85, 293, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 399, 13689, 438, 312, 3352, 372, 3185, 312, 2340, 1994, 32, 275, 319, 275, 319, 477, 8119, 225, 36, 32, 38, 275, 569, 284, 945, 907, 2568, 39243, 301, 291, 1022]}
{"line_number": 696, "line_type": "original", "code": "            cal.set(field, textKeyValues[idx].value);", "entropy": 2.021484375, "is_bug_line": false, "sus_score": 0.7922181487083435, "per_token_entropy": [6.328125, 7.19921875, 0.0192108154296875, 0.0635986328125, 0.0148162841796875, 0.0277252197265625, 0.0017986297607421875, 9.328125, 6.66015625, 0.1478271484375, 0.1796875, 0.2156982421875, 0.04449462890625, 0.032012939453125, 0.0548095703125], "tokens": [1468, 2182, 32, 470, 26, 1495, 30, 1344, 953, 3354, 77, 2875, 997, 853, 293]}
{"line_number": 696, "line_type": "generated", "code": "\n         * @param value The parsed integer\n         * @return The modified integer\n         */\n        protected int modify(int value) {\n            return value;\n        }\n    }\n\n    /**\n     * A strategy that handles a quoted text field in the parsing pattern\n     */", "entropy": 0.171875, "is_bug_line": false, "sus_score": 0.7922181487083435, "per_token_entropy": [0.46044921875, 0.2489013671875, 0.095458984375, 0.006336212158203125, 0.48779296875, 0.2332763671875, 0.326416015625, 0.419189453125, 0.206787109375, 0.0255279541015625, 0.00038051605224609375, 0.0012569427490234375, 0.1690673828125, 0.399658203125, 0.91552734375, 0.153076171875, 0.01043701171875, 0.0174713134765625, 0.3173828125, 0.019012451171875, 0.00042510032653808594, 0.00020420551300048828, 0.01415252685546875, 0.0003826618194580078, 0.0022983551025390625, 0.006908416748046875, 0.09979248046875, 0.00470733642578125, 0.0025806427001953125, 0.00435638427734375, 0.01488494873046875, 0.0005817413330078125, 0.1414794921875, 0.0011653900146484375, 0.2454833984375, 0.10101318359375, 0.009613037109375, 0.00010526180267333984, 0.2401123046875, 0.1715087890625, 0.04248046875, 0.09454345703125, 0.25439453125, 1.9541015625, 0.83984375, 0.020843505859375, 0.0614013671875, 0.002819061279296875, 0.005645751953125, 0.00472259521484375, 0.052520751953125, 0.0255584716796875], "tokens": [276, 319, 477, 753, 786, 886, 8436, 4991, 276, 319, 477, 601, 886, 8844, 4991, 276, 569, 291, 2522, 629, 5351, 26, 410, 786, 27, 301, 324, 442, 786, 45, 291, 320, 284, 320, 446, 1022, 275, 319, 399, 13689, 688, 13650, 312, 34210, 1344, 1600, 328, 322, 11708, 5257, 275, 569]}
{"line_number": 382, "line_type": "original", "code": "            DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);", "entropy": 1.1474609375, "is_bug_line": false, "sus_score": 0.7881650924682617, "per_token_entropy": [4.90234375, 7.11328125, 0.021636962890625, 0.052978515625, 1.3369140625, 1.857421875, 0.65771484375, 4.0531158447265625e-05, 0.0673828125, 0.0056915283203125, 0.0031280517578125, 0.0268096923828125, 0.01837158203125, 0.005115509033203125], "tokens": [1468, 2821, 2207, 19898, 15455, 47, 2821, 2207, 19898, 32, 7426, 26, 6921, 293]}
{"line_number": 382, "line_type": "generated", "code": "\n    }\n\n    private KeyValue[] createKeyValues(String[] longValues, String[] shortValues) {\n        if(shortValues==null || shortValues.length==0) {\n            shortValues= longValues;\n        }\n        if(longValues", "entropy": 0.2064208984375, "is_bug_line": false, "sus_score": 0.7881650924682617, "per_token_entropy": [1.6611328125, 0.828125, 0.2705078125, 0.320556640625, 0.326904296875, 0.0001150369644165039, 0.0012722015380859375, 0.003864288330078125, 0.0028533935546875, 0.00016188621520996094, 0.0064849853515625, 0.049102783203125, 0.005771636962890625, 0.004138946533203125, 0.00711822509765625, 0.0005512237548828125, 0.016021728515625, 0.002330780029296875, 0.00121307373046875, 0.0006985664367675781, 0.005523681640625, 0.002658843994140625, 0.04083251953125, 1.5947265625, 0.1990966796875, 0.6962890625, 5.555152893066406e-05, 0.383544921875, 0.00743865966796875, 1.330078125, 0.05426025390625, 0.0002484321594238281, 0.007537841796875, 0.0012388229370117188, 0.62451171875, 0.0041961669921875, 0.0428466796875, 0.00354766845703125, 0.03326416015625, 0.08380126953125, 0.0002129077911376953, 0.2423095703125, 0.485107421875, 0.0001289844512939453, 0.0208892822265625, 0.044189453125, 0.00032210350036621094, 0.0911865234375, 0.99658203125, 0.04595947265625, 0.18212890625, 8.273124694824219e-05], "tokens": [284, 320, 446, 945, 3891, 882, 1178, 1487, 953, 3354, 26, 652, 1178, 1946, 3354, 30, 892, 1178, 4504, 3354, 27, 301, 291, 415, 26, 4021, 3354, 379, 1693, 1276, 4504, 3354, 32, 1322, 379, 34, 27, 301, 324, 4504, 3354, 47, 1946, 3354, 45, 291, 320, 291, 415, 26, 3222, 3354]}
{"line_number": 379, "line_type": "original", "code": "        Integer fieldInt = Integer.valueOf(field);", "entropy": 1.978515625, "is_bug_line": false, "sus_score": 0.7856505513191223, "per_token_entropy": [1.921875, 9.9140625, 4.796875, 2.787109375, 0.5068359375, 1.7412109375, 0.00806427001953125, 0.006450653076171875, 0.00650787353515625, 0.044464111328125, 0.025604248046875], "tokens": [351, 4401, 1600, 1428, 280, 4401, 32, 9162, 26, 1495, 293]}
{"line_number": 379, "line_type": "generated", "code": "\n     * @param keys The keys\n     * @param shortKeys The short keys\n     * @return The key / value pairs\n     */\n    private KeyValue[] createKeyValues(String[] keys, String[] shortKeys) {\n        KeyValue[] fieldKey", "entropy": 0.1690673828125, "is_bug_line": false, "sus_score": 0.7856505513191223, "per_token_entropy": [0.5908203125, 0.2030029296875, 0.094482421875, 0.00616455078125, 0.334228515625, 0.414306640625, 0.303955078125, 0.47412109375, 0.003154754638671875, 0.000865936279296875, 0.07135009765625, 0.1190185546875, 0.37744140625, 0.1912841796875, 0.2415771484375, 0.152587890625, 0.7587890625, 0.01763916015625, 0.00751495361328125, 0.003871917724609375, 0.55419921875, 0.362548828125, 0.40185546875, 0.0350341796875, 0.0888671875, 0.129638671875, 0.0161285400390625, 0.0182952880859375, 0.2215576171875, 0.16455078125, 5.364418029785156e-06, 0.0006880760192871094, 0.0013151168823242188, 0.00016760826110839844, 2.3603439331054688e-05, 0.00583648681640625, 0.0193634033203125, 0.0032482147216796875, 0.01038360595703125, 0.0003337860107421875, 0.006317138671875, 0.0024814605712890625, 0.0008082389831542969, 0.0018644332885742188, 0.004299163818359375, 0.0018396377563476562, 0.043548583984375, 0.927734375, 5.0902366638183594e-05, 0.00946807861328125, 1.34765625, 0.04058837890625], "tokens": [275, 319, 477, 753, 5036, 886, 5036, 275, 319, 477, 753, 4504, 5037, 886, 4504, 5036, 275, 319, 477, 601, 886, 1202, 517, 786, 11847, 275, 569, 284, 945, 3891, 882, 1178, 1487, 953, 3354, 26, 652, 1178, 5036, 30, 892, 1178, 4504, 5037, 27, 301, 291, 3891, 882, 1178, 1600, 953]}
{"line_number": 395, "line_type": "original", "code": "                fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());", "entropy": 0.92822265625, "is_bug_line": false, "sus_score": 0.7830135822296143, "per_token_entropy": [8.4140625, 7.078125, 0.1551513671875, 0.0017251968383789062, 0.52392578125, 1.1552734375, 0.0075836181640625, 0.00018715858459472656, 0.0191192626953125, 0.274169921875, 0.00832366943359375, 0.52978515625, 2.146484375, 0.0010423660278320312, 0.005611419677734375, 0.094482421875, 0.0013818740844726562, 0.00016355514526367188, 0.0002372264862060547, 0.00021922588348388672, 1.71661376953125e-05, 0.00366973876953125], "tokens": [2071, 1600, 953, 3354, 47, 1487, 953, 3354, 26, 19111, 32, 371, 11070, 6124, 1026, 15455, 32, 371, 6872, 11070, 6124, 1035]}
{"line_number": 395, "line_type": "generated", "code": "\n\n    /**\n     * Copy values from one array to another\n     * @param dest The destination array\n     * @param destOffset The offset in the destination array to start copying\n     * @param src The source array\n     * @return The number of values copied\n    ", "entropy": 0.36865234375, "is_bug_line": false, "sus_score": 0.7830135822296143, "per_token_entropy": [1.1787109375, 0.351806640625, 0.0081329345703125, 0.0009436607360839844, 0.1141357421875, 1.7939453125, 0.86279296875, 0.93310546875, 0.0792236328125, 0.293701171875, 0.0970458984375, 0.51171875, 0.0023193359375, 0.0172576904296875, 0.0004374980926513672, 1.3583984375, 0.1033935546875, 0.1864013671875, 0.1573486328125, 0.4716796875, 3.802776336669922e-05, 0.0002415180206298828, 0.0009741783142089844, 0.544921875, 0.9091796875, 0.07183837890625, 0.5908203125, 1.091796875, 0.1253662109375, 0.0304718017578125, 0.097412109375, 0.98193359375, 0.498779296875, 0.369384765625, 0.9091796875, 7.164478302001953e-05, 0.0027370452880859375, 0.0006022453308105469, 0.4853515625, 0.0384521484375, 0.1402587890625, 0.10394287109375, 0.89892578125, 0.0009813308715820312, 0.0009484291076660156, 0.1966552734375, 0.09100341796875, 1.248046875, 0.00421905517578125, 0.7197265625, 0.2027587890625, 0.291748046875], "tokens": [446, 1022, 275, 319, 2389, 2078, 645, 1591, 1417, 372, 4674, 275, 319, 477, 753, 3466, 886, 8050, 1417, 275, 319, 477, 753, 3466, 3457, 886, 3401, 328, 322, 8050, 1417, 372, 1477, 19402, 275, 319, 477, 753, 1561, 886, 1914, 1417, 275, 319, 477, 601, 886, 1451, 432, 2078, 14668, 275]}
{"line_number": 290, "line_type": "original", "code": "        return cal.getTime();", "entropy": 3.775390625, "is_bug_line": false, "sus_score": 0.7828272581100464, "per_token_entropy": [2.791015625, 4.76953125, 13.1015625, 1.861328125, 0.050872802734375, 0.07666015625], "tokens": [351, 442, 2182, 32, 11957, 473]}
{"line_number": 290, "line_type": "generated", "code": "\n        }\n        return regex;\n    }\n\n    /**\n     * Represents a strategy for parsing a field.\n     */\n    private static interface Strategy {\n        /**\n         * Sets the calendar field based on the parsed value.\n         * @param parser The parser\n         * @", "entropy": 0.4755859375, "is_bug_line": false, "sus_score": 0.7828272581100464, "per_token_entropy": [0.74462890625, 0.1661376953125, 0.06976318359375, 0.0426025390625, 0.000640869140625, 0.004589080810546875, 0.0200347900390625, 0.0015344619750976562, 0.4384765625, 0.3671875, 0.0143280029296875, 7.05718994140625e-05, 4.24609375, 0.2064208984375, 0.92822265625, 0.6328125, 0.344482421875, 0.36669921875, 1.072265625, 1.1572265625, 0.080322265625, 0.51708984375, 0.00939178466796875, 0.498291015625, 0.439453125, 1.1455078125, 0.0007109642028808594, 0.053802490234375, 0.410400390625, 0.427734375, 0.0168609619140625, 5.435943603515625e-05, 1.4228515625, 0.1488037109375, 0.62890625, 1.125, 2.44140625, 0.0316162109375, 0.240478515625, 1.0771484375, 0.86669921875, 0.1455078125, 0.00921630859375, 0.004146575927734375, 0.2802734375, 0.0006389617919921875, 0.1629638671875, 0.60302734375, 0.398193359375, 0.7236328125, 0.0001665353775024414, 7.05718994140625e-05], "tokens": [291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 23148, 312, 13689, 436, 11708, 312, 1600, 32, 275, 569, 284, 945, 907, 2568, 39243, 301, 291, 1022, 276, 319, 9013, 322, 14461, 1600, 4122, 544, 322, 8436, 786, 32, 276, 319, 477, 753, 4118, 886, 4118, 276, 319, 477]}
{"line_number": 435, "line_type": "original", "code": "        copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);", "entropy": 1.2119140625, "is_bug_line": false, "sus_score": 0.7797699570655823, "per_token_entropy": [3.60546875, 14.6640625, 0.20556640625, 0.2958984375, 0.057830810546875, 0.0028285980224609375, 0.0280609130859375, 2.16015625, 0.012451171875, 0.1337890625, 0.0237274169921875, 7.927417755126953e-05, 0.022735595703125, 0.8544921875, 0.09259033203125, 0.005298614501953125, 2.943359375, 1.2392578125, 0.12042236328125, 0.1605224609375, 0.0022735595703125, 0.042572021484375], "tokens": [351, 1933, 26, 1495, 953, 3354, 30, 1933, 26, 1495, 953, 3354, 30, 225, 34, 30, 1946, 3354, 471, 4504, 3354, 293]}
{"line_number": 435, "line_type": "generated", "code": "\n        }\n        return trial-100;\n    }\n\n    /**\n     * Create a key / value pair for the given field\n     * @param field The field to create a key / value pair for\n     * @param value The value of the field\n    ", "entropy": 0.474853515625, "is_bug_line": false, "sus_score": 0.7797699570655823, "per_token_entropy": [0.1064453125, 0.020172119140625, 0.5537109375, 0.58203125, 0.250244140625, 0.70703125, 0.10150146484375, 0.007354736328125, 0.0004978179931640625, 0.0181732177734375, 0.120849609375, 0.0025577545166015625, 0.40478515625, 0.26123046875, 0.0166015625, 0.0006570816040039062, 2.875, 0.342041015625, 3.216796875, 0.4326171875, 0.0266265869140625, 0.53369140625, 1.5703125, 1.0595703125, 1.0693359375, 1.5888671875, 1.2314453125, 0.0196380615234375, 0.00984954833984375, 0.006603240966796875, 0.4267578125, 0.232421875, 0.2235107421875, 1.0087890625, 0.501953125, 0.450927734375, 0.267822265625, 0.395751953125, 0.0054779052734375, 0.16650390625, 0.037689208984375, 0.1351318359375, 0.004573822021484375, 0.0003323554992675781, 0.492919921875, 1.0947265625, 0.051300048828125, 0.26806640625, 1.3720703125, 0.030059814453125, 0.13671875, 0.2415771484375], "tokens": [291, 320, 291, 442, 22152, 31, 35, 34, 34, 45, 284, 320, 446, 1022, 275, 319, 2648, 312, 1202, 517, 786, 6092, 436, 322, 2702, 1600, 275, 319, 477, 753, 1600, 886, 1600, 372, 1487, 312, 1202, 517, 786, 6092, 436, 275, 319, 477, 753, 786, 886, 786, 432, 322, 1600, 275]}
{"line_number": 673, "line_type": "original", "code": "            for(KeyValue textKeyValue : parser.getDisplayNames(field)) {", "entropy": 1.07421875, "is_bug_line": false, "sus_score": 0.777216374874115, "per_token_entropy": [3.716796875, 6.16796875, 0.162109375, 2.501953125, 2.50390625, 0.0242156982421875, 0.031829833984375, 0.76708984375, 0.0098114013671875, 0.1019287109375, 0.0015230178833007812, 0.00695037841796875, 0.0177001953125, 0.036163330078125, 0.0548095703125], "tokens": [1468, 436, 26, 22015, 1344, 22015, 499, 4118, 32, 47104, 4109, 26, 1495, 490, 301]}
{"line_number": 673, "line_type": "generated", "code": "\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            regex.append('(');", "entropy": 0.13330078125, "is_bug_line": false, "sus_score": 0.777216374874115, "per_token_entropy": [1.9736328125, 0.7470703125, 0.04559326171875, 0.00039649009704589844, 0.052093505859375, 0.0004239082336425781, 0.00026106834411621094, 0.00919342041015625, 0.01371002197265625, 0.0135498046875, 0.00958251953125, 0.0005064010620117188, 0.00445556640625, 0.002117156982421875, 0.031646728515625, 0.0026187896728515625, 0.00035190582275390625, 9.715557098388672e-05, 0.0013332366943359375, 0.0019626617431640625, 0.0003170967102050781, 0.0010175704956054688, 0.00023365020751953125, 0.0024356842041015625, 0.0006775856018066406, 0.0006608963012695312, 0.006427764892578125, 0.2412109375, 0.87744140625, 0.0013523101806640625, 0.002803802490234375, 0.34423828125, 0.031646728515625, 0.11065673828125], "tokens": [291, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 1905, 1015, 10851, 26, 12200, 1547, 2825, 4118, 30, 9706, 9667, 27, 301, 324, 9667, 32, 1689, 463, 463, 293]}
{"line_number": 676, "line_type": "original", "code": "            regex.setCharAt(regex.length()-1, ')');", "entropy": 1.138671875, "is_bug_line": false, "sus_score": 0.7771463394165039, "per_token_entropy": [4.94921875, 6.69921875, 0.021331787109375, 4.31640625, 0.32080078125, 4.494190216064453e-05, 0.00363922119140625, 0.33251953125, 0.006565093994140625, 0.0012998580932617188, 0.2467041015625, 0.01457977294921875, 0.00344085693359375, 0.10614013671875, 0.051055908203125], "tokens": [1468, 9667, 32, 470, 2659, 1076, 26, 7920, 32, 1322, 17662, 35, 30, 11134, 895]}
{"line_number": 676, "line_type": "generated", "code": "\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            return false;\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n           ", "entropy": 0.05352783203125, "is_bug_line": false, "sus_score": 0.7771463394165039, "per_token_entropy": [0.299072265625, 0.0523681640625, 0.253662109375, 0.0038204193115234375, 0.0009746551513671875, 0.00024580955505371094, 0.005462646484375, 0.0040283203125, 0.0007586479187011719, 0.006526947021484375, 0.0007009506225585938, 0.0032749176025390625, 0.00179290771484375, 0.0023365020751953125, 0.019287109375, 0.2347412109375, 0.64599609375, 0.344482421875, 0.002529144287109375, 0.044769287109375, 0.0012302398681640625, 0.1605224609375, 0.01253509521484375, 0.00324249267578125, 0.0009679794311523438, 0.0223846435546875, 0.0002570152282714844, 0.00013768672943115234, 0.0034618377685546875, 0.00368499755859375, 0.057952880859375, 0.011383056640625, 0.0004916191101074219, 0.329833984375, 0.004131317138671875, 0.0129852294921875, 0.0016603469848632812, 0.00015532970428466797, 0.000934600830078125, 0.0013275146484375, 7.033348083496094e-06, 3.337860107421875e-05, 0.003719329833984375, 8.893013000488281e-05, 0.0015697479248046875, 0.0023021697998046875, 8.356571197509766e-05, 0.002758026123046875, 0.0093994140625, 0.0018663406372070312, 0.0133209228515625, 0.192626953125], "tokens": [291, 562, 1905, 1015, 10851, 26, 12200, 1547, 2825, 4118, 30, 9706, 9667, 27, 301, 324, 442, 901, 45, 291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 739, 9389, 26, 12200, 1547, 2825, 4118, 30, 16600, 2182, 30, 892, 786, 27, 301, 324]}
{"line_number": 555, "line_type": "original", "code": "            return DAY_OF_WEEK_STRATEGY;", "entropy": 1.5615234375, "is_bug_line": false, "sus_score": 0.7766177654266357, "per_token_entropy": [8.5078125, 3.5703125, 5.41796875, 0.01248931884765625, 0.0252838134765625, 0.0001571178436279297, 0.77880859375, 0.0029392242431640625, 0.3681640625, 0.0020160675048828125, 5.125999450683594e-06, 0.0423583984375], "tokens": [1468, 442, 37959, 81, 2109, 81, 39636, 81, 2378, 1757, 15052, 45]}
{"line_number": 555, "line_type": "generated", "code": "\n\n    /**\n     * A strategy that parses a numeric field\n     */\n    private static class NumberStrategy implements Strategy {\n        /**\n         * Parse the field into a <code>Calendar</code>\n         * @param parser The parser calling this strategy\n         * @param", "entropy": 0.347900390625, "is_bug_line": false, "sus_score": 0.7766177654266357, "per_token_entropy": [1.0869140625, 0.11956787109375, 0.00989532470703125, 0.00019168853759765625, 0.1697998046875, 0.333740234375, 0.28369140625, 0.289306640625, 0.7861328125, 2.228515625, 0.2489013671875, 1.17578125, 0.041717529296875, 0.25, 0.0276336669921875, 0.270751953125, 0.65966796875, 0.174560546875, 0.0285186767578125, 0.168212890625, 0.0006132125854492188, 0.03558349609375, 0.11004638671875, 0.5146484375, 0.71142578125, 0.00024962425231933594, 2.74609375, 0.74658203125, 0.92431640625, 1.34375, 1.041015625, 0.66162109375, 0.0018987655639648438, 0.0004074573516845703, 0.05853271484375, 0.0035572052001953125, 2.47955322265625e-05, 0.10284423828125, 0.255126953125, 0.07110595703125, 0.020263671875, 0.00714111328125, 0.023712158203125, 0.070556640625, 0.13330078125, 0.06268310546875, 0.008087158203125, 0.0767822265625, 0.0038127899169921875, 0.00018012523651123047, 0.0006055831909179688, 0.00029277801513671875], "tokens": [446, 1022, 275, 319, 399, 13689, 688, 35228, 312, 12738, 1600, 275, 569, 284, 945, 907, 443, 5104, 8089, 4575, 39243, 301, 291, 1022, 276, 319, 8661, 322, 1600, 1991, 312, 333, 687, 48, 9389, 377, 687, 48, 276, 319, 477, 753, 4118, 886, 4118, 8276, 458, 13689, 276, 319, 477, 753]}
{"line_number": 468, "line_type": "original", "code": "                if(value.length()>0) {", "entropy": 1.71875, "is_bug_line": false, "sus_score": 0.7764157056808472, "per_token_entropy": [5.6875, 2.75, 0.728515625, 3.751953125, 2.87890625, 0.13720703125, 0.81787109375, 0.2318115234375, 0.11669921875, 0.09197998046875], "tokens": [2071, 415, 26, 853, 32, 1322, 15365, 34, 27, 301]}
{"line_number": 468, "line_type": "generated", "code": "        */\n        void set(DateTimeParser parser, Calendar cal);\n    }\n\n    /**\n     * A strategy to parse a single number field from the parsing pattern\n     */\n    private static class NumberStrategy implements Strategy {\n        private final int field;\n        private final int", "entropy": 0.351806640625, "is_bug_line": false, "sus_score": 0.7764157056808472, "per_token_entropy": [1.630859375, 0.439697265625, 0.054656982421875, 0.0175933837890625, 0.10040283203125, 0.337158203125, 1.9580078125, 0.1085205078125, 0.0234222412109375, 0.0010557174682617188, 0.0173187255859375, 0.0008840560913085938, 0.044342041015625, 0.54052734375, 0.01480865478515625, 0.1878662109375, 0.1329345703125, 0.02142333984375, 0.0002982616424560547, 0.51318359375, 0.3291015625, 0.83251953125, 0.1298828125, 0.209228515625, 0.88330078125, 2.01171875, 0.214111328125, 0.42724609375, 0.059814453125, 0.0158843994140625, 0.005680084228515625, 0.08935546875, 0.05926513671875, 0.003543853759765625, 0.0298004150390625, 0.7734375, 0.2939453125, 0.0312042236328125, 0.0248870849609375, 0.058013916015625, 0.0007185935974121094, 0.0340576171875, 0.1617431640625, 1.013671875, 0.61279296875, 0.57568359375, 0.8115234375, 0.41748046875, 0.48974609375, 0.77685546875, 0.29931640625, 0.472412109375], "tokens": [351, 569, 291, 763, 739, 26, 4852, 2825, 4118, 30, 16600, 2182, 293, 284, 320, 446, 1022, 275, 319, 399, 13689, 372, 3185, 312, 3982, 1451, 1600, 645, 322, 11708, 5257, 275, 569, 284, 945, 907, 443, 5104, 8089, 4575, 39243, 301, 291, 945, 1158, 629, 1600, 45, 291, 945, 1158, 629]}
{"line_number": 674, "line_type": "original", "code": "                escapeRegex(regex, textKeyValue.key, false).append('|');", "entropy": 2.31640625, "is_bug_line": false, "sus_score": 0.7759304642677307, "per_token_entropy": [6.87109375, 9.5859375, 0.265380859375, 0.030975341796875, 0.0731201171875, 0.01166534423828125, 3.98828125, 6.84765625, 0.056060791015625, 0.06976318359375, 0.54345703125, 0.437255859375, 7.3984375, 0.047271728515625, 0.736328125, 0.1099853515625], "tokens": [2071, 15820, 10851, 26, 7920, 30, 1344, 22015, 32, 678, 30, 901, 547, 1689, 44868, 895]}
{"line_number": 674, "line_type": "generated", "code": "\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            return false;\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal,", "entropy": 0.07318115234375, "is_bug_line": false, "sus_score": 0.7759304642677307, "per_token_entropy": [0.88818359375, 0.046844482421875, 0.041229248046875, 0.0162200927734375, 0.0008816719055175781, 0.00762176513671875, 0.0029296875, 0.06170654296875, 0.003101348876953125, 0.0003871917724609375, 0.0001404285430908203, 0.00197601318359375, 0.0019025802612304688, 0.00031447410583496094, 0.0008120536804199219, 0.0002416372299194336, 0.0027065277099609375, 0.0011234283447265625, 0.0006961822509765625, 0.004367828369140625, 0.256103515625, 1.5732421875, 0.54248046875, 0.0008511543273925781, 0.0218505859375, 0.0005655288696289062, 0.10498046875, 0.0093994140625, 0.004550933837890625, 0.0006847381591796875, 0.032440185546875, 0.00036144256591796875, 0.0001283884048461914, 0.136962890625, 0.006855010986328125, 0.011322021484375, 0.0014190673828125, 6.759166717529297e-05, 0.0005016326904296875, 0.001674652099609375, 0.00867462158203125, 0.0009617805480957031, 9.083747863769531e-05, 0.0005588531494140625, 0.0007510185241699219, 2.7418136596679688e-06, 1.0728836059570312e-05, 0.0033779144287109375, 5.626678466796875e-05, 0.0010366439819335938, 0.0018367767333984375, 7.152557373046875e-05], "tokens": [276, 569, 291, 477, 1788, 291, 562, 1905, 1015, 10851, 26, 12200, 1547, 2825, 4118, 30, 9706, 9667, 27, 301, 324, 442, 901, 45, 291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 739, 9389, 26, 12200, 1547, 2825, 4118, 30, 16600, 2182, 30]}
{"line_number": 380, "line_type": "original", "code": "        KeyValue[] fieldKeyValues= nameValues.get(fieldInt);", "entropy": 1.1103515625, "is_bug_line": false, "sus_score": 0.7759228944778442, "per_token_entropy": [0.8271484375, 6.078125, 0.031463623046875, 0.0197601318359375, 2.12109375, 0.0226593017578125, 0.001483917236328125, 0.90380859375, 7.20703125, 0.00565338134765625, 0.0039005279541015625, 0.06671142578125, 0.005069732666015625, 0.07763671875, 0.3818359375, 0.006847381591796875], "tokens": [351, 3891, 882, 1178, 1600, 953, 3354, 47, 636, 3354, 32, 371, 26, 1495, 1428, 293]}
{"line_number": 380, "line_type": "generated", "code": "        if(longValues==null) {\n            throw new IllegalArgumentException(\"No long values for field \"+field);\n        }\n        int len = longValues.length;\n        if(len==0) {\n            throw new IllegalArgumentException(\"No long values for field \"+", "entropy": 0.372314453125, "is_bug_line": false, "sus_score": 0.7759228944778442, "per_token_entropy": [0.82958984375, 1.111328125, 0.1534423828125, 0.20458984375, 0.0106048583984375, 0.55078125, 0.01023101806640625, 0.150390625, 0.09820556640625, 0.443603515625, 1.3076171875, 0.0010061264038085938, 0.2117919921875, 0.312255859375, 2.162109375, 0.266845703125, 0.407470703125, 0.94189453125, 0.5068359375, 0.32861328125, 0.031707763671875, 0.032318115234375, 0.09844970703125, 0.006969451904296875, 0.6865234375, 2.5546875, 1.6787109375, 0.8701171875, 0.1280517578125, 0.0004911422729492188, 0.0010547637939453125, 0.01395416259765625, 0.005542755126953125, 0.27490234375, 0.77001953125, 0.1298828125, 0.51953125, 0.61474609375, 0.00959014892578125, 0.035369873046875, 0.0036220550537109375, 0.0360107421875, 0.0765380859375, 0.0002551078796386719, 0.0020999908447265625, 0.01336669921875, 0.401123046875, 0.327392578125, 0.01505279541015625, 0.00748443603515625, 0.0034122467041015625, 0.005096435546875], "tokens": [351, 415, 26, 3222, 3354, 379, 1693, 27, 301, 324, 1422, 537, 12137, 440, 2023, 1946, 2078, 436, 1600, 6757, 1495, 293, 291, 320, 291, 629, 2069, 280, 1946, 3354, 32, 1322, 45, 291, 415, 26, 1657, 379, 34, 27, 301, 324, 1422, 537, 12137, 440, 2023, 1946, 2078, 436, 1600, 6757]}
{"line_number": 383, "line_type": "original", "code": "            switch(field) {", "entropy": 2.318359375, "is_bug_line": false, "sus_score": 0.7751395106315613, "per_token_entropy": [6.22265625, 6.94921875, 0.54833984375, 0.11279296875, 0.040069580078125, 0.03753662109375], "tokens": [1468, 3578, 26, 1495, 27, 301]}
{"line_number": 383, "line_type": "generated", "code": "\n    private KeyValue[] createKeyValues(String[] longValues, String[] shortValues) {\n        KeyValue[] keyValues = new KeyValue[longValues.length];\n        for(int i=0; i<longValues.length; i", "entropy": 0.119873046875, "is_bug_line": false, "sus_score": 0.7751395106315613, "per_token_entropy": [0.196044921875, 0.2061767578125, 0.166259765625, 1.621246337890625e-05, 0.0007410049438476562, 0.00189971923828125, 0.0012063980102539062, 0.00012826919555664062, 0.00725555419921875, 0.044952392578125, 0.007518768310546875, 0.002605438232421875, 0.0019464492797851562, 0.00051116943359375, 0.016632080078125, 0.0027942657470703125, 0.0009307861328125, 0.0005464553833007812, 0.006473541259765625, 0.004871368408203125, 0.08746337890625, 1.236328125, 5.2928924560546875e-05, 0.0149688720703125, 1.2392578125, 0.02911376953125, 0.92529296875, 0.0201263427734375, 0.001964569091796875, 0.0110626220703125, 0.0022029876708984375, 0.0091705322265625, 2.384185791015625e-05, 0.0009660720825195312, 4.017353057861328e-05, 0.005420684814453125, 0.023162841796875, 0.2205810546875, 0.343994140625, 0.0037479400634765625, 0.08892822265625, 0.20556640625, 0.029541015625, 0.037689208984375, 0.6484375, 0.06512451171875, 0.2020263671875, 6.580352783203125e-05, 3.6597251892089844e-05, 3.6597251892089844e-05, 0.0033435821533203125, 0.1092529296875], "tokens": [284, 945, 3891, 882, 1178, 1487, 953, 3354, 26, 652, 1178, 1946, 3354, 30, 892, 1178, 4504, 3354, 27, 301, 291, 3891, 882, 1178, 1202, 3354, 280, 537, 3891, 882, 77, 3222, 3354, 32, 1322, 970, 291, 436, 26, 410, 595, 47, 34, 45, 595, 46, 3222, 3354, 32, 1322, 45, 595]}
{"line_number": 285, "line_type": "original", "code": "        for(int i=0; i<strategies.length;) {", "entropy": 1.923828125, "is_bug_line": false, "sus_score": 0.7728561162948608, "per_token_entropy": [6.97265625, 8.859375, 0.185302734375, 0.98828125, 3.443359375, 0.150634765625, 2.41796875, 0.053131103515625, 0.1322021484375, 0.08538818359375, 1.73046875, 0.016876220703125, 0.01374053955078125, 0.003360748291015625, 5.68359375, 0.050262451171875], "tokens": [351, 436, 26, 410, 595, 47, 34, 45, 595, 46, 466, 21412, 32, 1322, 21288, 301]}
{"line_number": 285, "line_type": "generated", "code": "\n                break;\n            default:\n                continue;\n            }\n            regex.append('\\\\');\n        }\n        return regex;\n    }\n\n    /**\n     * Strategy interface.\n     */\n    private interface Strategy {\n        void setCalendar(ImpDateParser parser, Calendar calendar,", "entropy": 0.35205078125, "is_bug_line": false, "sus_score": 0.7728561162948608, "per_token_entropy": [0.67626953125, 0.892578125, 0.00131988525390625, 0.03924560546875, 1.1484375, 0.006561279296875, 0.09527587890625, 1.6494140625, 0.000728607177734375, 0.017913818359375, 0.005207061767578125, 0.0271148681640625, 0.019561767578125, 0.0002053976058959961, 8.857250213623047e-05, 0.341552734375, 0.17626953125, 0.1502685546875, 0.0016202926635742188, 0.0220489501953125, 0.01971435546875, 0.00029206275939941406, 0.0019683837890625, 0.00965118408203125, 0.0011768341064453125, 0.303466796875, 0.285400390625, 0.0153656005859375, 4.887580871582031e-05, 3.2421875, 1.111328125, 0.880859375, 0.070068359375, 0.28515625, 0.003559112548828125, 0.416015625, 0.72705078125, 0.0036182403564453125, 0.044097900390625, 0.438232421875, 1.0654296875, 0.0142364501953125, 0.0007786750793457031, 0.0011129379272460938, 2.505859375, 0.68505859375, 0.01514434814453125, 0.34912109375, 0.0005974769592285156, 0.005901336669921875, 0.53564453125, 0.0012969970703125], "tokens": [400, 1626, 45, 324, 1244, 44, 400, 4036, 45, 324, 320, 324, 9667, 32, 1689, 40348, 895, 291, 320, 291, 442, 9667, 45, 284, 320, 446, 1022, 275, 319, 39243, 2568, 32, 275, 569, 284, 945, 2568, 39243, 301, 291, 763, 739, 9389, 26, 1899, 1547, 2825, 4118, 30, 16600, 14461, 30]}
