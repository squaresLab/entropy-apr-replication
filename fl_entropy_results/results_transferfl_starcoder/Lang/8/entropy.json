{"line_number": 1004, "line_type": "original", "code": "            int value = calendar.get(Calendar.HOUR);", "entropy": 1.2802734375, "is_bug_line": false, "sus_score": 0.708856463432312, "per_token_entropy": [7.4296875, 4.5703125, 1.32421875, 0.055999755859375, 0.10284423828125, 0.003997802734375, 0.005321502685546875, 0.15771484375, 0.00524139404296875, 0.0004448890686035156, 0.057647705078125, 1.64453125], "tokens": [1468, 629, 786, 280, 14461, 32, 371, 26, 9389, 32, 30540, 293]}
{"line_number": 1004, "line_type": "generated", "code": "\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, int value) {\n            mRule.appendTo(buffer, value);\n        }\n    }\n\n    /**\n     * <p>Inner class to output", "entropy": 0.02001953125, "is_bug_line": false, "sus_score": 0.708856463432312, "per_token_entropy": [0.056610107421875, 0.0009965896606445312, 0.01385498046875, 0.0016078948974609375, 0.0007877349853515625, 3.0159950256347656e-05, 0.000560760498046875, 7.045269012451172e-05, 1.2159347534179688e-05, 7.486343383789062e-05, 0.0002397298812866211, 0.00011992454528808594, 0.00028252601623535156, 1.8835067749023438e-05, 9.059906005859375e-05, 0.00010752677917480469, 0.038482666015625, 1.1801719665527344e-05, 1.8477439880371094e-05, 9.655952453613281e-06, 0.00015497207641601562, 0.00011444091796875, 9.417533874511719e-06, 0.00040841102600097656, 0.00046372413635253906, 5.1856040954589844e-05, 0.0006661415100097656, 0.032012939453125, 0.0171051025390625, 9.059906005859375e-06, 4.7087669372558594e-05, 1.4662742614746094e-05, 5.2094459533691406e-05, 4.756450653076172e-05, 2.872943878173828e-05, 0.000640869140625, 0.00482177734375, 0.2222900390625, 0.00019168853759765625, 0.0096282958984375, 0.0005459785461425781, 0.2900390625, 0.059967041015625, 0.0041351318359375, 0.0001875162124633789, 0.042724609375, 0.0003859996795654297, 0.0008935928344726562, 0.036956787109375, 0.001911163330078125, 0.034698486328125, 0.1654052734375], "tokens": [291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 629, 786, 27, 301, 324, 345, 3842, 32, 30716, 26, 2668, 30, 786, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 10893, 443, 372, 1688]}
{"line_number": 1134, "line_type": "original", "code": "            if (zone.useDaylightTime()", "entropy": 1.658203125, "is_bug_line": true, "sus_score": 0.7071877717971802, "per_token_entropy": [6.16796875, 1.9775390625, 0.023406982421875, 5.89453125, 0.947265625, 0.27734375, 0.0032062530517578125, 0.00015532970428466797, 0.0007448196411132812, 1.2880859375], "tokens": [1468, 415, 308, 5634, 32, 539, 6280, 2429, 1043, 346]}
{"line_number": 1134, "line_type": "generated", "code": "\n                buffer.append(Integer.toString(offset / (60 * 60 * 1000)));\n                if (mColon) {\n                    buffer.append(':');\n                }\n                buffer.append(Integer.toString((offset / (", "entropy": 0.1524658203125, "is_bug_line": true, "sus_score": 0.7071877717971802, "per_token_entropy": [2.255859375, 0.88818359375, 0.0013408660888671875, 0.0019388198852539062, 0.330810546875, 1.1650390625, 0.0018739700317382812, 0.006931304931640625, 0.1221923828125, 0.02020263671875, 0.033966064453125, 0.25732421875, 0.038726806640625, 0.0003559589385986328, 0.022735595703125, 0.0034084320068359375, 0.111328125, 4.3272972106933594e-05, 0.209716796875, 0.0017690658569335938, 4.661083221435547e-05, 8.952617645263672e-05, 0.00011563301086425781, 0.0012693405151367188, 0.007122039794921875, 0.5673828125, 0.78759765625, 0.00690460205078125, 0.01079559326171875, 3.600120544433594e-05, 0.00478363037109375, 0.00543212890625, 0.028472900390625, 0.01031494140625, 5.8531761169433594e-05, 7.87973403930664e-05, 0.019134521484375, 0.0016317367553710938, 0.10260009765625, 0.00022101402282714844, 0.273681640625, 0.275634765625, 0.0001405477523803711, 7.963180541992188e-05, 0.005985260009765625, 0.02130126953125, 0.00046944618225097656, 0.00035953521728515625, 0.2259521484375, 0.0006442070007324219, 0.06475830078125, 0.0313720703125], "tokens": [400, 3112, 32, 1689, 26, 3061, 32, 3108, 26, 2881, 517, 308, 40, 34, 319, 225, 40, 34, 319, 225, 35, 34, 34, 34, 4236, 400, 415, 308, 95, 47792, 27, 301, 528, 3112, 32, 1689, 16487, 895, 400, 320, 400, 3112, 32, 1689, 26, 3061, 32, 3108, 1162, 2881, 517, 308]}
{"line_number": 1243, "line_type": "original", "code": "                return", "entropy": 5.97265625, "is_bug_line": false, "sus_score": 0.7037444114685059, "per_token_entropy": [8.9375, 3.009765625], "tokens": [2071, 442]}
{"line_number": 1243, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7037444114685059, "per_token_entropy": [], "tokens": []}
{"line_number": 733, "line_type": "original", "code": "                buffer.append((char)(value + '0'));", "entropy": 1.001953125, "is_bug_line": false, "sus_score": 0.6989322304725647, "per_token_entropy": [6.0, 1.1630859375, 0.00507354736328125, 0.016265869140625, 0.52001953125, 0.01412200927734375, 0.158447265625, 0.06329345703125, 3.943359375, 0.0570068359375, 0.07684326171875, 0.005435943603515625], "tokens": [2071, 3112, 32, 1689, 1162, 1594, 2502, 853, 474, 330, 34, 4646]}
{"line_number": 733, "line_type": "generated", "code": "\n            }\n        }\n    }\n\n    /**\n     * <p>Inner class to output a two digit year.</p>\n     */\n    private static class TwoDigitYearField implements NumberRule {\n        static final TwoDigitYearField INSTANCE = new TwoDigitYearField", "entropy": 0.09503173828125, "is_bug_line": false, "sus_score": 0.6989322304725647, "per_token_entropy": [0.09478759765625, 0.0007557868957519531, 0.0126190185546875, 0.0001233816146850586, 0.050628662109375, 0.0017614364624023438, 0.2010498046875, 0.053741455078125, 0.004764556884765625, 0.0005068778991699219, 0.039581298828125, 0.00046825408935546875, 0.0009360313415527344, 0.02496337890625, 0.0014276504516601562, 0.0144805908203125, 0.0953369140625, 1.044921875, 1.447265625, 0.2763671875, 0.564453125, 0.07525634765625, 0.00014781951904296875, 0.000682830810546875, 0.0012264251708984375, 0.01934814453125, 0.0011186599731445312, 0.01132965087890625, 0.0017480850219726562, 0.022674560546875, 0.016876220703125, 0.0003190040588378906, 0.02325439453125, 0.004177093505859375, 0.0293731689453125, 0.0210418701171875, 0.0003056526184082031, 0.00997161865234375, 0.056549072265625, 0.6513671875, 0.0018796920776367188, 0.011199951171875, 6.67572021484375e-06, 2.288818359375e-05, 0.00011897087097167969, 0.006481170654296875, 0.04486083984375, 0.0006346702575683594, 4.5180320739746094e-05, 5.960464477539062e-07, 8.344650268554688e-07, 7.152557373046875e-07], "tokens": [324, 320, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 10893, 443, 372, 1688, 312, 3134, 16994, 4947, 1730, 98, 48, 275, 569, 284, 945, 907, 443, 16510, 21530, 6617, 1176, 4575, 5104, 3842, 301, 291, 907, 1158, 16510, 21530, 6617, 1176, 40000, 280, 537, 16510, 21530, 6617, 1176]}
{"line_number": 1080, "line_type": "original", "code": "        String value = cTimeZoneDisplayCache.get(key);", "entropy": 1.4912109375, "is_bug_line": false, "sus_score": 0.6941733360290527, "per_token_entropy": [1.8427734375, 6.5859375, 3.037109375, 0.390625, 5.875, 0.339111328125, 0.72607421875, 0.00421905517578125, 0.0037174224853515625, 0.00531005859375, 0.00855255126953125, 0.5751953125, 0.004486083984375], "tokens": [351, 892, 786, 280, 281, 26223, 3933, 2597, 32, 371, 26, 678, 293]}
{"line_number": 1080, "line_type": "generated", "code": "        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            TimeZone zone = calendar.getTimeZone();\n            String value = null;\n            if (calendar.get(Calendar.DST_OFFSET) == 0) {\n                value", "entropy": 0.18017578125, "is_bug_line": false, "sus_score": 0.6941733360290527, "per_token_entropy": [1.8427734375, 0.9306640625, 0.01136016845703125, 0.04376220703125, 0.01297760009765625, 0.0226287841796875, 0.0025177001953125, 0.0008716583251953125, 0.0037441253662109375, 0.0267181396484375, 0.007625579833984375, 0.0005278587341308594, 0.024932861328125, 0.00865936279296875, 0.0044708251953125, 0.007343292236328125, 0.08636474609375, 0.68798828125, 2.9087066650390625e-05, 0.24267578125, 0.0858154296875, 0.01556396484375, 0.0016946792602539062, 0.000545501708984375, 0.00011420249938964844, 0.0006132125854492188, 0.2239990234375, 1.6142578125, 0.68994140625, 0.45458984375, 1.1552734375, 0.001659393310546875, 0.1656494140625, 0.1875, 0.0272674560546875, 0.281494140625, 0.0006513595581054688, 0.08782958984375, 0.002506256103515625, 0.004459381103515625, 0.0007047653198242188, 0.0057220458984375, 5.960464477539062e-07, 0.01479339599609375, 0.00019502639770507812, 0.09075927734375, 0.002674102783203125, 0.00011181831359863281, 0.1700439453125, 0.001468658447265625, 0.045379638671875, 0.06463623046875], "tokens": [351, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 16600, 14461, 27, 301, 324, 3717, 6767, 10790, 280, 14461, 32, 11957, 6767, 473, 324, 892, 786, 280, 744, 45, 324, 415, 308, 10542, 32, 371, 26, 9389, 32, 28635, 81, 10158, 27, 610, 225, 34, 27, 301, 400, 786]}
{"line_number": 1084, "line_type": "original", "code": "            String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);", "entropy": 1.0224609375, "is_bug_line": false, "sus_score": 0.6931343674659729, "per_token_entropy": [3.751953125, 2.34375, 3.83203125, 0.2357177734375, 4.52734375, 0.434814453125, 0.10626220703125, 0.0035610198974609375, 0.0076446533203125, 1.220703125, 0.27978515625, 0.00044655799865722656, 0.0889892578125, 0.262939453125, 0.01116180419921875, 0.254638671875, 0.0101165771484375], "tokens": [1468, 892, 9553, 280, 281, 26223, 3933, 2597, 32, 524, 2797, 28772, 26, 678, 30, 786, 293]}
{"line_number": 1084, "line_type": "generated", "code": "\n            String zoneName = mDaylight;\n            if (calendar.get(Calendar.DST_OFFSET) == 0) {\n                zoneName = mStandard;\n            }\n            buffer.append(zoneName);\n        }\n\n        /**\n         * {@inheritDoc", "entropy": 0.2469482421875, "is_bug_line": false, "sus_score": 0.6931343674659729, "per_token_entropy": [1.0712890625, 2.021484375, 2.630859375, 1.017578125, 0.453369140625, 2.341796875, 0.83203125, 3.9577484130859375e-05, 0.05682373046875, 0.1334228515625, 0.31689453125, 0.28515625, 0.1636962890625, 0.2578125, 0.12261962890625, 0.00377655029296875, 0.0084686279296875, 0.0015125274658203125, 0.01377105712890625, 2.5033950805664062e-06, 0.0113525390625, 0.001194000244140625, 0.005687713623046875, 0.0029964447021484375, 0.0002338886260986328, 0.0882568359375, 0.00494384765625, 0.049102783203125, 0.037689208984375, 0.000560760498046875, 0.00783538818359375, 0.002155303955078125, 0.0013570785522460938, 0.00057220458984375, 0.08624267578125, 0.0012226104736328125, 0.4794921875, 0.08465576171875, 0.00013387203216552734, 0.0005440711975097656, 0.00208282470703125, 0.00848388671875, 0.00586700439453125, 0.006988525390625, 0.041229248046875, 0.00013506412506103516, 0.1610107421875, 0.013916015625, 0.0014886856079101562, 9.882450103759766e-05, 0.007068634033203125, 0.00011110305786132812], "tokens": [324, 892, 10790, 558, 280, 345, 6280, 2429, 45, 324, 415, 308, 10542, 32, 371, 26, 9389, 32, 28635, 81, 10158, 27, 610, 225, 34, 27, 301, 400, 10790, 558, 280, 345, 8090, 45, 324, 320, 324, 3112, 32, 1689, 26, 5634, 558, 293, 291, 320, 584, 1022, 276, 319, 3088, 18446]}
{"line_number": 1138, "line_type": "original", "code": "                buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));", "entropy": 1.0185546875, "is_bug_line": false, "sus_score": 0.6924964189529419, "per_token_entropy": [7.421875, 0.91943359375, 0.00279998779296875, 0.0015802383422851562, 2.408203125, 4.609375, 0.131103515625, 0.52734375, 0.0187225341796875, 0.132080078125, 0.0038166046142578125, 2.662109375, 0.01409149169921875, 0.4150390625, 0.012298583984375, 0.005573272705078125, 0.0279388427734375, 0.0017843246459960938, 0.0227508544921875], "tokens": [2071, 3112, 32, 1689, 26, 11957, 6767, 3933, 26, 5634, 30, 901, 30, 345, 2275, 30, 345, 9467, 876]}
{"line_number": 1138, "line_type": "generated", "code": "\n        }\n    }", "entropy": 0.1268310546875, "is_bug_line": false, "sus_score": 0.6924964189529419, "per_token_entropy": [0.4755859375, 0.0016050338745117188, 0.0286102294921875, 0.0016574859619140625], "tokens": [291, 320, 284, 320]}
{"line_number": 1079, "line_type": "original", "code": "        TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);", "entropy": 0.85009765625, "is_bug_line": false, "sus_score": 0.6887823343276978, "per_token_entropy": [2.0546875, 6.828125, 0.0030269622802734375, 2.5390625, 0.0031414031982421875, 0.154541015625, 0.057373046875, 0.145751953125, 0.00177764892578125, 1.1563301086425781e-05, 0.00022351741790771484, 2.849102020263672e-05, 0.0230712890625, 5.08203125, 0.0621337890625, 1.1357421875, 0.0023517608642578125, 0.10076904296875, 0.31884765625, 0.11041259765625, 0.05548095703125, 0.0212249755859375], "tokens": [351, 3717, 6767, 3933, 953, 1202, 280, 537, 3717, 6767, 3933, 953, 26, 10185, 30, 5808, 2429, 30, 1418, 30, 11259, 293]}
{"line_number": 1079, "line_type": "generated", "code": "\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            TimeZone zone = calendar.getTimeZone();\n            boolean daylight = calendar.get(Calendar.DST_OFFSET)!= ", "entropy": 0.11041259765625, "is_bug_line": false, "sus_score": 0.6887823343276978, "per_token_entropy": [0.33935546875, 0.1448974609375, 0.01025390625, 0.0004494190216064453, 0.06622314453125, 0.00011920928955078125, 0.00018894672393798828, 0.0023956298828125, 0.029815673828125, 0.00608062744140625, 0.01031494140625, 0.0002906322479248047, 0.00157928466796875, 0.0038928985595703125, 0.004024505615234375, 0.0005035400390625, 0.0004024505615234375, 0.000904083251953125, 0.01416778564453125, 0.009368896484375, 0.00022590160369873047, 0.031280517578125, 0.007213592529296875, 0.0010042190551757812, 0.0026073455810546875, 0.102783203125, 0.802734375, 8.678436279296875e-05, 0.394287109375, 0.1002197265625, 0.0246734619140625, 0.0011463165283203125, 0.0005917549133300781, 9.894371032714844e-05, 0.00030803680419921875, 0.1868896484375, 1.5302734375, 1.1494140625, 0.0011425018310546875, 0.00738525390625, 0.22705078125, 0.0008845329284667969, 0.093994140625, 0.0016698837280273438, 0.003864288330078125, 0.0002970695495605469, 0.002834320068359375, 9.5367431640625e-07, 0.0065155029296875, 0.00023055076599121094, 0.15283203125, 0.2607421875], "tokens": [291, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 16600, 14461, 27, 301, 324, 3717, 6767, 10790, 280, 14461, 32, 11957, 6767, 473, 324, 1905, 5808, 2429, 280, 14461, 32, 371, 26, 9389, 32, 28635, 81, 10158, 27, 863, 225]}
{"line_number": 1008, "line_type": "original", "code": "            mRule.appendTo(buffer, value);", "entropy": 0.67724609375, "is_bug_line": false, "sus_score": 0.6864053010940552, "per_token_entropy": [4.4921875, 2.1015625, 0.0104827880859375, 0.006435394287109375, 0.0094757080078125, 0.0024967193603515625, 0.00791168212890625, 0.0010051727294921875, 0.01224517822265625, 0.1309814453125], "tokens": [1468, 345, 3842, 32, 30716, 26, 2668, 30, 786, 293]}
{"line_number": 1008, "line_type": "generated", "code": "\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, int value) {\n            mRule.appendTo(buffer, value);\n        }\n    }\n\n    /**\n     * <p>Inner class to output", "entropy": 0.04364013671875, "is_bug_line": false, "sus_score": 0.6864053010940552, "per_token_entropy": [0.6640625, 0.55810546875, 0.261474609375, 0.0080108642578125, 0.00516510009765625, 0.0005793571472167969, 0.0032978057861328125, 0.00032806396484375, 9.02414321899414e-05, 0.041290283203125, 0.0018291473388671875, 0.006656646728515625, 0.0013647079467773438, 5.602836608886719e-05, 0.0018377304077148438, 0.00040650367736816406, 0.04144287109375, 4.5299530029296875e-05, 2.944469451904297e-05, 3.8504600524902344e-05, 0.00021636486053466797, 0.00014209747314453125, 1.1086463928222656e-05, 0.0006289482116699219, 0.00044536590576171875, 5.1021575927734375e-05, 0.0008196830749511719, 0.045867919921875, 0.012481689453125, 1.2636184692382812e-05, 3.516674041748047e-05, 2.396106719970703e-05, 2.288818359375e-05, 7.426738739013672e-05, 3.981590270996094e-05, 0.0005297660827636719, 0.00658416748046875, 0.0164031982421875, 0.00011014938354492188, 0.0157623291015625, 0.0004992485046386719, 0.28857421875, 0.0482177734375, 0.004940032958984375, 0.0003509521484375, 0.03338623046875, 0.0003859996795654297, 0.00102996826171875, 0.039276123046875, 0.0018024444580078125, 0.0304412841796875, 0.123779296875], "tokens": [291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 629, 786, 27, 301, 324, 345, 3842, 32, 30716, 26, 2668, 30, 786, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 10893, 443, 372, 1688]}
{"line_number": 1241, "line_type": "original", "code": "            if (obj instanceof TimeZoneDisplayKey) {", "entropy": 1.4775390625, "is_bug_line": false, "sus_score": 0.6848160624504089, "per_token_entropy": [7.3125, 3.462890625, 0.1226806640625, 3.669921875, 0.619140625, 0.496826171875, 0.0038700103759765625, 0.43310546875, 0.01120758056640625, 0.01837158203125, 0.09552001953125], "tokens": [1468, 415, 308, 2067, 5113, 3717, 6767, 3933, 953, 27, 301]}
{"line_number": 1241, "line_type": "generated", "code": "\n\n    // ----------------------------------------------------------------------\n    /**\n     * <p>Inner class that represents a rule for a single time zone offset.</p>\n     */\n    private static class TimeZoneDisplayRule {\n        private final int mRawOffset;\n        private final String mFormat;\n\n       ", "entropy": 0.493408203125, "is_bug_line": false, "sus_score": 0.6848160624504089, "per_token_entropy": [1.525390625, 0.6015625, 0.32666015625, 0.04248046875, 0.143310546875, 0.007091522216796875, 0.0001888275146484375, 0.15869140625, 0.00030040740966796875, 0.0037708282470703125, 0.44482421875, 0.004993438720703125, 0.2137451171875, 1.4521484375, 0.414306640625, 2.15234375, 0.93017578125, 1.591796875, 1.767578125, 1.6083984375, 0.67919921875, 1.5625, 0.6865234375, 0.0003771781921386719, 0.0017194747924804688, 0.001373291015625, 0.492431640625, 0.0038356781005859375, 0.10791015625, 0.03021240234375, 0.043609619140625, 0.6552734375, 0.0018911361694335938, 1.83203125, 0.04119873046875, 0.95166015625, 0.05291748046875, 0.254150390625, 0.0958251953125, 0.77099609375, 0.01238250732421875, 0.9619140625, 0.0053863525390625, 0.0223541259765625, 0.073974609375, 0.007083892822265625, 0.0196533203125, 1.0673828125, 0.04364013671875, 1.115234375, 0.016693115234375, 0.65625], "tokens": [446, 434, 34918, 284, 1022, 275, 319, 333, 98, 48, 10893, 443, 688, 10666, 312, 5750, 436, 312, 3982, 1133, 10790, 3401, 1730, 98, 48, 275, 569, 284, 945, 907, 443, 3717, 6767, 3933, 3842, 301, 291, 945, 1158, 629, 345, 6189, 3457, 45, 291, 945, 1158, 892, 345, 2207, 45, 584]}
{"line_number": 1218, "line_type": "original", "code": "            if (daylight) {", "entropy": 1.591796875, "is_bug_line": false, "sus_score": 0.6844831109046936, "per_token_entropy": [6.671875, 2.15625, 0.1492919921875, 2.02734375, 0.0006394386291503906, 0.069091796875, 0.069580078125], "tokens": [1468, 415, 308, 3368, 2429, 27, 301]}
{"line_number": 1218, "line_type": "generated", "code": "\n    /**\n     * <p>Inner class that represents a rule for the time zone display names.</p>\n     */\n    private static class TimeZoneDisplayRule implements Rule {\n        private final String mStandard;\n        private final String mDaylight;\n        private", "entropy": 0.4443359375, "is_bug_line": false, "sus_score": 0.6844831109046936, "per_token_entropy": [0.99560546875, 1.04296875, 0.0273895263671875, 0.0002903938293457031, 0.39501953125, 0.0004343986511230469, 0.004730224609375, 0.26025390625, 0.0056610107421875, 0.2135009765625, 1.5927734375, 0.4423828125, 2.150390625, 0.83056640625, 2.189453125, 2.095703125, 0.2242431640625, 0.62353515625, 2.259765625, 0.2470703125, 0.0004432201385498047, 0.0012311935424804688, 0.0016965866088867188, 0.28515625, 0.00807952880859375, 0.04998779296875, 0.05157470703125, 0.051910400390625, 0.03167724609375, 0.0008645057678222656, 0.8037109375, 0.0229644775390625, 0.705078125, 0.6474609375, 0.060516357421875, 0.1007080078125, 0.26611328125, 0.102783203125, 1.310546875, 0.080322265625, 1.44140625, 0.6669921875, 0.006076812744140625, 0.0011358261108398438, 0.0011110305786132812, 0.004108428955078125, 0.000457763671875, 0.00841522216796875, 0.0009813308715820312, 0.00225830078125, 0.783203125, 0.0143585205078125], "tokens": [284, 1022, 275, 319, 333, 98, 48, 10893, 443, 688, 10666, 312, 5750, 436, 322, 1133, 10790, 2503, 4467, 1730, 98, 48, 275, 569, 284, 945, 907, 443, 3717, 6767, 3933, 3842, 4575, 13708, 301, 291, 945, 1158, 892, 345, 8090, 45, 291, 945, 1158, 892, 345, 6280, 2429, 45, 291, 945]}
{"line_number": 1230, "line_type": "original", "code": "            return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();", "entropy": 1.451171875, "is_bug_line": false, "sus_score": 0.6798087358474731, "per_token_entropy": [7.6875, 2.94140625, 3.7734375, 3.046875, 1.6806640625, 8.0625, 0.026611328125, 0.095458984375, 0.1802978515625, 0.2308349609375, 0.1302490234375, 0.56396484375, 0.01328277587890625, 0.004703521728515625, 4.33203125, 4.4765625, 0.10345458984375, 0.0138092041015625, 0.045166015625, 0.0232696533203125, 0.0288848876953125, 0.06005859375, 0.06146240234375, 0.0092926025390625, 0.0264434814453125, 0.08807373046875], "tokens": [1468, 442, 308, 95, 2275, 319, 225, 37, 35, 474, 345, 9467, 32, 14948, 346, 829, 319, 225, 37, 35, 474, 345, 26223, 32, 14948, 473]}
{"line_number": 1230, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6798087358474731, "per_token_entropy": [], "tokens": []}
{"line_number": 1238, "line_type": "original", "code": "            if (this == obj) {", "entropy": 2.064453125, "is_bug_line": false, "sus_score": 0.6772994995117188, "per_token_entropy": [6.9453125, 3.123046875, 0.11212158203125, 5.625, 0.3408203125, 0.1572265625, 0.02001953125, 0.19970703125], "tokens": [1468, 415, 308, 578, 610, 2830, 27, 301]}
{"line_number": 1238, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6772994995117188, "per_token_entropy": [], "tokens": []}
{"line_number": 1115, "line_type": "original", "code": "            mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);", "entropy": 1.123046875, "is_bug_line": false, "sus_score": 0.6705626249313354, "per_token_entropy": [5.65234375, 8.234375, 2.54296875, 0.0022754669189453125, 0.41015625, 0.465087890625, 0.0156402587890625, 0.0169677734375, 0.008331298828125, 2.275390625, 0.000858306884765625, 0.0017614364624023438, 0.167724609375, 0.004085540771484375, 0.348388671875, 0.00299835205078125, 0.035400390625, 0.0310516357421875], "tokens": [1468, 345, 6280, 2429, 280, 622, 26223, 3933, 26, 1003, 6767, 30, 861, 30, 1418, 30, 11259, 293]}
{"line_number": 1115, "line_type": "generated", "code": "\n        @Override\n        public int estimateLength() {\n            return 6;\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            int offset = calendar.get(Calendar.", "entropy": 0.0640869140625, "is_bug_line": false, "sus_score": 0.6705626249313354, "per_token_entropy": [0.4189453125, 0.70556640625, 0.0010833740234375, 0.019195556640625, 0.00867462158203125, 0.1629638671875, 0.0013437271118164062, 0.0008492469787597656, 0.0011129379272460938, 0.00513458251953125, 0.11474609375, 0.216064453125, 0.2244873046875, 0.232666015625, 0.05584716796875, 0.132568359375, 0.00043582916259765625, 0.061859130859375, 0.0117645263671875, 0.0028018951416015625, 0.00017523765563964844, 0.0100250244140625, 0.00015020370483398438, 0.0001347064971923828, 0.0012350082397460938, 0.00421905517578125, 0.1885986328125, 0.0035991668701171875, 0.00027251243591308594, 0.004150390625, 0.0048828125, 0.0009551048278808594, 0.00031948089599609375, 6.377696990966797e-05, 0.00034928321838378906, 0.0088958740234375, 0.007404327392578125, 7.212162017822266e-05, 0.001392364501953125, 0.003093719482421875, 8.618831634521484e-05, 0.00144195556640625, 0.09893798828125, 0.1436767578125, 0.1390380859375, 0.01351165771484375, 0.301513671875, 0.0005025863647460938, 0.006099700927734375, 0.00025534629821777344, 0.005672454833984375, 0.004917144775390625], "tokens": [291, 477, 1788, 291, 562, 629, 20772, 2380, 346, 301, 324, 442, 225, 40, 45, 291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 16600, 14461, 27, 301, 324, 629, 3401, 280, 14461, 32, 371, 26, 9389, 32]}
{"line_number": 262, "line_type": "original", "code": "                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);", "entropy": 1.24609375, "is_bug_line": false, "sus_score": 0.6700586676597595, "per_token_entropy": [5.484375, 10.921875, 0.27197265625, 0.45947265625, 2.2265625, 2.40234375, 0.162841796875, 0.0015583038330078125, 0.01436614990234375, 0.12237548828125, 0.0251007080078125, 0.008453369140625, 0.0233306884765625, 0.0001481771469116211, 0.062164306640625, 0.1982421875, 0.0005545616149902344, 0.002185821533203125, 2.513671875, 0.01328277587890625], "tokens": [4696, 5750, 280, 537, 3717, 6767, 558, 3842, 26, 95, 26223, 30, 345, 9467, 30, 3717, 6767, 32, 15456, 293]}
{"line_number": 262, "line_type": "generated", "code": "\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This will identify token type\n            String type = pattern.substring(i, i + 1);\n            i++;\n\n            if (type.equals(\"G\")) {\n                //", "entropy": 0.377685546875, "is_bug_line": false, "sus_score": 0.6700586676597595, "per_token_entropy": [1.2255859375, 0.005779266357421875, 0.130615234375, 0.260009765625, 0.042205810546875, 0.010284423828125, 0.0004394054412841797, 0.006259918212890625, 0.0028324127197265625, 0.471435546875, 0.0014629364013671875, 0.42529296875, 0.0017995834350585938, 0.034210205078125, 0.0374755859375, 0.1102294921875, 0.1429443359375, 0.392822265625, 1.23828125, 0.17529296875, 0.07928466796875, 1.904296875, 1.3994140625, 2.16796875, 1.447265625, 0.17236328125, 1.314453125, 0.0174407958984375, 9.59634780883789e-05, 0.0002779960632324219, 0.016357421875, 0.03082275390625, 0.10638427734375, 0.034576416015625, 0.00791168212890625, 0.0032558441162109375, 0.0027027130126953125, 0.8974609375, 2.056640625, 0.1519775390625, 0.2939453125, 0.9736328125, 0.1192626953125, 0.08544921875, 0.0018434524536132812, 0.19970703125, 0.09051513671875, 0.62451171875, 0.038787841796875, 0.0014801025390625, 0.177001953125, 0.5029296875], "tokens": [400, 320, 813, 301, 528, 1626, 45, 400, 320, 324, 320, 291, 320, 813, 301, 324, 434, 1348, 1098, 12411, 2404, 827, 324, 892, 827, 280, 5257, 32, 8723, 26, 91, 30, 595, 474, 225, 35, 293, 324, 595, 3334, 1064, 415, 308, 681, 32, 3574, 440, 57, 2131, 301, 400, 434]}
{"line_number": 1126, "line_type": "original", "code": "            return Math.max(mStandard.length(), mDaylight.length());", "entropy": 1.99609375, "is_bug_line": false, "sus_score": 0.6666826009750366, "per_token_entropy": [6.39453125, 6.83203125, 6.2265625, 0.033843994140625, 5.12890625, 0.055206298828125, 5.58984375, 2.216796875, 1.306640625, 0.04766845703125, 0.01800537109375, 0.040374755859375, 0.012237548828125, 0.00019288063049316406, 0.002658843994140625, 0.0005197525024414062, 0.028778076171875], "tokens": [1468, 442, 4175, 32, 1449, 26, 95, 8090, 32, 1322, 1026, 345, 6280, 2429, 32, 1322, 1035]}
{"line_number": 1126, "line_type": "generated", "code": "\n        }\n    }\n\n    /**\n     * <p>Inner class to output a time zone as a short name.</p>\n     */\n    private static class TimeZoneShortRule implements Rule {\n        private final Locale mLocale;\n        private final int mStyle;", "entropy": 0.1629638671875, "is_bug_line": false, "sus_score": 0.6666826009750366, "per_token_entropy": [0.212890625, 0.0002918243408203125, 0.0496826171875, 0.0018377304077148438, 0.320068359375, 0.1365966796875, 0.00820159912109375, 0.0004546642303466797, 0.08282470703125, 0.0003275871276855469, 0.0015630722045898438, 0.06793212890625, 0.0010156631469726562, 0.0361328125, 0.1153564453125, 0.301513671875, 0.1942138671875, 0.0208282470703125, 0.1688232421875, 0.407470703125, 1.705078125, 1.4345703125, 0.2171630859375, 0.0003688335418701172, 0.0004565715789794922, 0.0010805130004882812, 0.038665771484375, 0.0022907257080078125, 0.01708984375, 0.001682281494140625, 0.00945281982421875, 0.0070953369140625, 6.198883056640625e-05, 0.2303466796875, 0.0208282470703125, 0.03704833984375, 0.002735137939453125, 0.0132293701171875, 0.053070068359375, 0.304931640625, 0.0626220703125, 0.210693359375, 0.0416259765625, 0.00012350082397460938, 0.0012636184692382812, 0.480224609375, 0.0302734375, 0.02374267578125, 1.3876953125, 0.00302886962890625, 0.0072784423828125, 0.0011730194091796875], "tokens": [291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 10893, 443, 372, 1688, 312, 1133, 10790, 619, 312, 4504, 636, 1730, 98, 48, 275, 569, 284, 945, 907, 443, 3717, 6767, 6872, 3842, 4575, 13708, 301, 291, 945, 1158, 23265, 345, 9467, 45, 291, 945, 1158, 629, 345, 2275, 45]}
{"line_number": 446, "line_type": "original", "code": "     * specified calendar.</p>", "entropy": 4.49609375, "is_bug_line": false, "sus_score": 0.6631614565849304, "per_token_entropy": [6.2890625, 2.126953125, 11.578125, 4.4375, 6.953125, 0.08819580078125, 0.01068878173828125], "tokens": [262, 319, 3191, 14461, 1730, 98, 48]}
{"line_number": 446, "line_type": "generated", "code": "    }", "entropy": 0.51708984375, "is_bug_line": false, "sus_score": 0.6631614565849304, "per_token_entropy": [1.001953125, 0.03216552734375], "tokens": [264, 320]}
{"line_number": 1083, "line_type": "original", "code": "            value = tz.getDisplayName(daylight, style, locale);", "entropy": 1.681640625, "is_bug_line": false, "sus_score": 0.6619943380355835, "per_token_entropy": [5.52734375, 10.0, 0.1065673828125, 7.53515625, 0.0711669921875, 0.224609375, 0.1182861328125, 0.0270843505859375, 1.029296875, 0.002017974853515625, 0.0160675048828125, 0.35986328125, 0.00460052490234375, 0.17138671875, 0.0235137939453125], "tokens": [1468, 786, 280, 25932, 32, 371, 12566, 26, 3368, 2429, 30, 1418, 30, 11259, 293]}
{"line_number": 1083, "line_type": "generated", "code": "\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            if (calendar == null) {\n                calendar = new GregorianCalendar(zone);\n            }\n            int offset = calendar.get(Calendar.ZONE_OFFSET);\n            int dst = calendar", "entropy": 0.244384765625, "is_bug_line": false, "sus_score": 0.6619943380355835, "per_token_entropy": [0.1846923828125, 0.035858154296875, 0.01261138916015625, 0.00356292724609375, 0.000640869140625, 0.003261566162109375, 0.0190887451171875, 0.024200439453125, 0.0024547576904296875, 0.0938720703125, 0.01047515869140625, 0.0027103424072265625, 0.0210113525390625, 0.124755859375, 1.822265625, 0.04656982421875, 0.1146240234375, 1.28515625, 0.0004496574401855469, 0.0263824462890625, 0.0090484619140625, 0.1436767578125, 1.6767578125, 0.02532958984375, 1.2822265625, 0.037261962890625, 0.003955841064453125, 1.7881393432617188e-05, 0.259765625, 0.2076416015625, 0.64892578125, 0.12939453125, 0.00015044212341308594, 0.416015625, 0.93603515625, 0.92822265625, 0.048828125, 0.367431640625, 0.00038695335388183594, 0.003742218017578125, 0.0005207061767578125, 0.01136016845703125, 0.00433349609375, 0.285400390625, 1.430511474609375e-06, 0.0009775161743164062, 0.580078125, 0.057464599609375, 0.41162109375, 0.1839599609375, 0.2020263671875, 0.014801025390625], "tokens": [291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 16600, 14461, 27, 301, 324, 415, 308, 10542, 610, 744, 27, 301, 400, 14461, 280, 537, 570, 33857, 9389, 26, 5634, 293, 324, 320, 324, 629, 3401, 280, 14461, 32, 371, 26, 9389, 32, 27368, 81, 10158, 293, 324, 629, 7112, 280, 14461]}
{"line_number": 1114, "line_type": "original", "code": "            mStandard = getTimeZoneDisplay(timeZone, false, style, locale);", "entropy": 0.99365234375, "is_bug_line": false, "sus_score": 0.6608179211616516, "per_token_entropy": [5.515625, 5.75, 2.20703125, 0.256103515625, 0.974609375, 0.076171875, 0.17822265625, 0.00875091552734375, 1.294921875, 0.0002493858337402344, 0.0013980865478515625, 0.05322265625, 0.006313323974609375, 0.486328125, 0.007221221923828125, 0.0390625, 0.0416259765625], "tokens": [1468, 345, 8090, 280, 622, 26223, 3933, 26, 1003, 6767, 30, 901, 30, 1418, 30, 11259, 293]}
{"line_number": 1114, "line_type": "generated", "code": "\n         */\n        @Override\n        public int estimateLength() {\n            return 6;\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            int offset = calendar.get(", "entropy": 0.042327880859375, "is_bug_line": false, "sus_score": 0.6608179211616516, "per_token_entropy": [0.2041015625, 0.0304107666015625, 0.024871826171875, 0.0187835693359375, 0.0006031990051269531, 0.006885528564453125, 0.0015106201171875, 0.05657958984375, 0.0003917217254638672, 0.0004363059997558594, 0.0003962516784667969, 0.0006170272827148438, 0.0672607421875, 0.22119140625, 0.2431640625, 0.205810546875, 0.0694580078125, 0.1173095703125, 9.953975677490234e-05, 0.029998779296875, 0.006771087646484375, 0.017974853515625, 0.0007052421569824219, 0.01165771484375, 0.00015795230865478516, 0.00012171268463134766, 0.255126953125, 0.00824737548828125, 0.00885009765625, 0.001644134521484375, 0.00012552738189697266, 0.0014553070068359375, 0.002933502197265625, 0.0006313323974609375, 0.00011861324310302734, 3.707408905029297e-05, 0.00020945072174072266, 0.00865936279296875, 0.00714111328125, 4.9114227294921875e-05, 0.0010786056518554688, 0.0027713775634765625, 6.818771362304688e-05, 0.0007748603820800781, 0.059844970703125, 0.12890625, 0.1304931640625, 0.01227569580078125, 0.2261962890625, 0.0003609657287597656, 0.00565338134765625, 0.00025081634521484375], "tokens": [276, 569, 291, 477, 1788, 291, 562, 629, 20772, 2380, 346, 301, 324, 442, 225, 40, 45, 291, 320, 584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 16600, 14461, 27, 301, 324, 629, 3401, 280, 14461, 32, 371, 26]}
{"line_number": 220, "line_type": "original", "code": "                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));", "entropy": 1.306640625, "is_bug_line": false, "sus_score": 0.6600748896598816, "per_token_entropy": [4.9296875, 5.57421875, 0.302001953125, 0.8603515625, 11.359375, 0.7412109375, 9.5367431640625e-06, 0.002044677734375, 0.164306640625, 0.05621337890625, 2.251953125, 0.002349853515625, 0.0003147125244140625, 0.005054473876953125, 0.004802703857421875, 0.00038504600524902344, 0.00064849853515625, 0.2227783203125, 0.03997802734375, 0.002567291259765625, 0.91064453125], "tokens": [2071, 5750, 280, 537, 12038, 342, 587, 14415, 1176, 26, 1613, 1918, 3842, 26, 9389, 32, 30540, 30, 2404, 5745, 876]}
{"line_number": 220, "line_type": "generated", "code": "\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            mRules.add(rule);\n        }\n    }\n\n    private Rule selectNumberRule(int field, int padding) {\n        if (", "entropy": 0.1678466796875, "is_bug_line": false, "sus_score": 0.6600748896598816, "per_token_entropy": [0.10137939453125, 0.0012645721435546875, 0.01036834716796875, 0.0017538070678710938, 0.0010843276977539062, 0.057769775390625, 0.76708984375, 0.001556396484375, 0.14599609375, 0.348388671875, 0.0209808349609375, 0.11798095703125, 0.023773193359375, 0.0310516357421875, 0.0028553009033203125, 0.0048828125, 0.0016841888427734375, 0.0182952880859375, 0.00974273681640625, 0.3857421875, 0.01273345947265625, 0.0631103515625, 0.001949310302734375, 0.15283203125, 1.5830078125, 0.2431640625, 0.029541015625, 0.07257080078125, 0.0269317626953125, 0.03173828125, 0.0031528472900390625, 0.25, 0.001453399658203125, 0.76220703125, 0.00441741943359375, 0.5205078125, 0.921875, 0.51318359375, 0.0162811279296875, 0.0003604888916015625, 2.6226043701171875e-06, 0.0003666877746582031, 0.057098388671875, 0.0146026611328125, 0.0007829666137695312, 0.006439208984375, 0.60498046875, 0.0110015869140625, 0.01885986328125, 0.09429931640625, 0.64794921875, 0.007595062255859375], "tokens": [400, 320, 400, 1626, 45, 324, 1244, 44, 400, 1422, 537, 12137, 440, 15095, 5257, 2577, 44, 313, 474, 2404, 293, 324, 320, 1064, 345, 9154, 32, 669, 26, 5275, 293, 291, 320, 284, 320, 446, 945, 13708, 2192, 1918, 3842, 26, 410, 1600, 30, 629, 3714, 27, 301, 291, 415, 308]}
{"line_number": 1005, "line_type": "original", "code": "            if (value == 0) {", "entropy": 0.86376953125, "is_bug_line": false, "sus_score": 0.6600421071052551, "per_token_entropy": [4.12109375, 2.875, 0.049774169921875, 0.39501953125, 0.197021484375, 0.0184783935546875, 0.033905029296875, 0.0205230712890625, 0.064208984375], "tokens": [1468, 415, 308, 853, 610, 225, 34, 27, 301]}
{"line_number": 1005, "line_type": "generated", "code": "\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, int value) {\n            mRule.appendTo(buffer, value);\n        }\n    }\n\n    /**\n     * <p>Inner class to output the year", "entropy": 0.08648681640625, "is_bug_line": false, "sus_score": 0.6600421071052551, "per_token_entropy": [1.44140625, 0.041015625, 0.00328826904296875, 0.0001761913299560547, 0.0036525726318359375, 7.37905502319336e-05, 3.409385681152344e-05, 0.0002378225326538086, 0.0007948875427246094, 0.004489898681640625, 0.0009822845458984375, 4.5299530029296875e-05, 0.001079559326171875, 0.0004177093505859375, 0.071533203125, 0.00011682510375976562, 6.961822509765625e-05, 4.744529724121094e-05, 0.00025916099548339844, 0.0001691579818725586, 2.5272369384765625e-05, 0.0017757415771484375, 0.0006880760192871094, 6.961822509765625e-05, 0.001186370849609375, 0.029052734375, 0.060546875, 1.704692840576172e-05, 4.935264587402344e-05, 3.504753112792969e-05, 0.00010788440704345703, 0.00010752677917480469, 4.208087921142578e-05, 0.001651763916015625, 0.02203369140625, 0.00795745849609375, 0.0001608133316040039, 0.030609130859375, 0.0010709762573242188, 0.322021484375, 0.046875, 0.0031757354736328125, 0.00019025802612304688, 0.0308074951171875, 0.00027823448181152344, 0.000743865966796875, 0.0264129638671875, 0.0015163421630859375, 0.0186004638671875, 0.08135986328125, 0.055755615234375, 2.181640625], "tokens": [584, 1022, 276, 319, 3088, 18446, 111, 276, 569, 291, 477, 1788, 291, 562, 763, 5489, 705, 26, 35322, 3112, 30, 629, 786, 27, 301, 324, 345, 3842, 32, 30716, 26, 2668, 30, 786, 293, 291, 320, 284, 320, 446, 1022, 275, 319, 333, 98, 48, 10893, 443, 372, 1688, 322, 4947]}
