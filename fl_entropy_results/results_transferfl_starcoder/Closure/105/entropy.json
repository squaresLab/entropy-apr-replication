{"line_number": 1328, "line_type": "original", "code": "        if (Token.NUMBER != right.getType()) {", "entropy": 1.1708984375, "is_bug_line": false, "sus_score": 0.6263137459754944, "per_token_entropy": [5.12109375, 2.83984375, 0.24560546875, 1.275390625, 0.00382232666015625, 3.248046875, 0.8369140625, 0.1357421875, 0.002201080322265625, 0.0006036758422851562, 0.1005859375, 0.2413330078125], "tokens": [351, 415, 308, 1763, 32, 10463, 863, 2091, 32, 10272, 1157, 301]}
{"line_number": 1328, "line_type": "generated", "code": "\n          return;  // Only eval if they are the same type\n        }\n        double lv = left.getDouble();\n        double rv = right.getDouble();\n\n        switch (op) {\n          case Token.EQ: result = lv == rv; break;\n         ", "entropy": 0.07757568359375, "is_bug_line": false, "sus_score": 0.6263137459754944, "per_token_entropy": [0.818359375, 0.2291259765625, 0.0078887939453125, 0.2130126953125, 0.0005164146423339844, 0.208984375, 0.006359100341796875, 0.0034999847412109375, 0.017913818359375, 0.0036678314208984375, 0.00467681884765625, 0.0002655982971191406, 0.041412353515625, 0.0870361328125, 0.056915283203125, 0.2081298828125, 1.51953125, 0.138916015625, 0.00708770751953125, 0.095703125, 0.01207733154296875, 0.1776123046875, 0.00579833984375, 0.003055572509765625, 0.00325775146484375, 0.00013065338134765625, 0.00027108192443847656, 0.0023059844970703125, 0.0011243820190429688, 0.0019006729125976562, 0.0006475448608398438, 0.061187744140625, 0.006641387939453125, 0.0011587142944335938, 0.0004563331604003906, 0.0001233816146850586, 0.00439453125, 0.00870513916015625, 0.0014352798461914062, 0.00037384033203125, 2.3365020751953125e-05, 0.025970458984375, 0.0002913475036621094, 0.0248565673828125, 0.00013446807861328125, 0.0186767578125, 0.00023472309112548828, 0.0001322031021118164, 0.00036644935607910156, 0.0023174285888671875, 3.0517578125e-05, 0.0015497207641601562], "tokens": [616, 442, 45, 225, 434, 9287, 9967, 415, 2953, 884, 322, 2432, 827, 291, 320, 291, 2064, 16965, 280, 2841, 32, 37792, 473, 291, 2064, 13675, 280, 2091, 32, 37792, 473, 584, 3578, 308, 520, 27, 301, 616, 1135, 6512, 32, 2697, 44, 1056, 280, 16965, 610, 13675, 45, 1626, 45, 616]}
{"line_number": 1329, "line_type": "original", "code": "          return;  // Only eval if they are the same type", "entropy": 1.3974609375, "is_bug_line": false, "sus_score": 0.6077468991279602, "per_token_entropy": [8.2734375, 3.021484375, 0.026336669921875, 1.11328125, 0.0013399124145507812, 4.6953125, 0.50048828125, 0.2000732421875, 0.14111328125, 0.01306915283203125, 0.023193359375, 0.0020427703857421875, 0.1600341796875], "tokens": [2033, 442, 45, 225, 434, 9287, 9967, 415, 2953, 884, 322, 2432, 827]}
{"line_number": 1329, "line_type": "generated", "code": "\n        break;\n\n      case Token.TRUE:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.TRUE!= right.getType()) {\n          return;  // Only eval if they are the same type\n       ", "entropy": 0.1494140625, "is_bug_line": false, "sus_score": 0.6077468991279602, "per_token_entropy": [1.1650390625, 0.7607421875, 0.0017366409301757812, 0.195556640625, 0.73974609375, 0.0009636878967285156, 0.00018417835235595703, 0.93701171875, 0.0015134811401367188, 0.5126953125, 0.48095703125, 0.1937255859375, 0.48876953125, 0.00412750244140625, 0.04486083984375, 0.040283203125, 0.01325225830078125, 0.11688232421875, 0.0002777576446533203, 0.033233642578125, 0.00016188621520996094, 0.01531982421875, 0.0012578964233398438, 0.00010752677917480469, 0.0014820098876953125, 0.0001621246337890625, 0.084716796875, 0.31103515625, 0.0584716796875, 0.300537109375, 5.53131103515625e-05, 0.048187255859375, 0.051544189453125, 0.0006690025329589844, 0.0001976490020751953, 4.1484832763671875e-05, 0.170166015625, 0.057159423828125, 0.10064697265625, 0.0235595703125, 0.0015783309936523438, 0.393798828125, 0.0004858970642089844, 0.333984375, 0.020751953125, 0.00760650634765625, 0.032012939453125, 0.0027618408203125, 0.00475311279296875, 0.0008578300476074219, 0.00555419921875, 0.006969451904296875], "tokens": [291, 1626, 45, 1687, 1135, 6512, 32, 6373, 44, 291, 415, 308, 6376, 4046, 27, 301, 616, 1056, 280, 901, 45, 616, 1626, 45, 291, 320, 291, 415, 308, 1763, 32, 6373, 863, 2091, 32, 10272, 1157, 301, 616, 442, 45, 225, 434, 9287, 9967, 415, 2953, 884, 322, 2432, 827, 291]}
{"line_number": 1008, "line_type": "original", "code": "   * tryFoldAdd() won't fold it -- tryFoldLeftChildAdd() will (for Strings).", "entropy": 3.400390625, "is_bug_line": false, "sus_score": 0.6053272485733032, "per_token_entropy": [7.65234375, 5.10546875, 8.09375, 0.06878662109375, 1.8974609375, 3.8203125, 6.69921875, 0.0008358955383300781, 3.38671875, 4.87890625, 7.37109375, 3.751953125, 0.018218994140625, 1.44140625, 0.04443359375, 0.059051513671875, 0.1563720703125, 0.92578125, 6.7734375, 4.125, 7.4453125, 1.080078125], "tokens": [261, 319, 1596, 15483, 1103, 346, 7606, 1330, 11426, 561, 769, 1596, 15483, 3679, 2931, 1103, 346, 1098, 308, 979, 29036, 547]}
{"line_number": 1008, "line_type": "generated", "code": "\n        t.getCompiler().reportCodeChange();\n      }\n    } else if (NodeUtil.isLiteralValue(left) &&\n               NodeUtil.isLiteralValue(right)) {\n\n      // Add numbers.\n      double leftNumber = NodeUtil.getDouble", "entropy": 0.1807861328125, "is_bug_line": false, "sus_score": 0.6053272485733032, "per_token_entropy": [0.65478515625, 0.07427978515625, 9.560585021972656e-05, 0.0008368492126464844, 6.258487701416016e-05, 0.0007185935974121094, 8.225440979003906e-05, 0.0015125274658203125, 5.9604644775390625e-05, 0.0014801025390625, 0.304931640625, 7.390975952148438e-05, 0.640625, 0.00047087669372558594, 0.47119140625, 0.408935546875, 0.104736328125, 0.9697265625, 0.0005283355712890625, 9.417533874511719e-06, 0.244384765625, 0.48876953125, 0.0228118896484375, 0.000209808349609375, 0.1280517578125, 0.1595458984375, 0.118408203125, 0.302001953125, 0.05303955078125, 6.67572021484375e-05, 3.3736228942871094e-05, 0.00439453125, 0.0101470947265625, 0.0005617141723632812, 0.00011074542999267578, 0.00017011165618896484, 0.1038818359375, 0.0007810592651367188, 0.576171875, 0.187255859375, 0.37255859375, 0.274169921875, 0.3984375, 0.0478515625, 0.7080078125, 0.2685546875, 0.9453125, 0.01224517822265625, 0.1959228515625, 0.0007939338684082031, 7.3909759521484375e-06, 0.1378173828125], "tokens": [291, 273, 32, 371, 8115, 922, 3734, 1227, 1791, 473, 397, 320, 284, 320, 813, 415, 308, 1212, 1733, 32, 297, 8208, 882, 26, 1873, 27, 962, 3083, 4004, 1733, 32, 297, 8208, 882, 26, 990, 490, 301, 1687, 434, 2222, 7515, 32, 397, 2064, 2841, 1918, 280, 4004, 1733, 32, 37792]}
{"line_number": 981, "line_type": "original", "code": "          result = left;", "entropy": 3.697265625, "is_bug_line": false, "sus_score": 0.590606689453125, "per_token_entropy": [6.4375, 9.796875, 0.017059326171875, 2.181640625, 0.044189453125], "tokens": [2033, 1056, 280, 2841, 45]}
{"line_number": 981, "line_type": "generated", "code": "\n    }\n  }", "entropy": 0.6171875, "is_bug_line": false, "sus_score": 0.590606689453125, "per_token_entropy": [2.376953125, 0.00679779052734375, 0.08349609375, 0.0006012916564941406], "tokens": [284, 320, 334, 320]}
{"line_number": 1508, "line_type": "original", "code": "    int originalSize = InlineCostEstimator.getCost(n);", "entropy": 0.94091796875, "is_bug_line": false, "sus_score": 0.5864707827568054, "per_token_entropy": [5.5703125, 1.271484375, 5.44921875, 0.08984375, 0.01415252685546875, 0.42919921875, 0.0003447532653808594, 0.00022137165069580078, 0.0061187744140625, 0.0207672119140625, 0.00176239013671875, 0.00524139404296875, 0.280029296875, 0.0308380126953125], "tokens": [264, 629, 4707, 1250, 280, 29662, 9375, 38469, 32, 371, 9375, 26, 96, 293]}
{"line_number": 1508, "line_type": "generated", "code": "\n      int index = -1;\n      try {\n        index = Integer.parseInt(right.getString());\n      } catch (NumberFormatException e) {\n        // The index is not an integer literal.\n        return;\n      }\n\n      if (index < 0", "entropy": 0.33056640625, "is_bug_line": false, "sus_score": 0.5864707827568054, "per_token_entropy": [0.0684814453125, 0.82763671875, 0.395263671875, 0.109130859375, 1.6796875, 0.005458831787109375, 0.0023593902587890625, 0.09954833984375, 0.95166015625, 0.0017299652099609375, 0.00893402099609375, 0.058319091796875, 0.00019109249114990234, 0.083984375, 0.0002865791320800781, 0.1119384765625, 0.007659912109375, 1.0068359375, 0.002071380615234375, 0.040985107421875, 0.067138671875, 0.061279296875, 0.00012445449829101562, 0.004886627197265625, 0.01256561279296875, 0.024505615234375, 2.09808349609375e-05, 0.167236328125, 0.0017795562744140625, 0.0201568603515625, 0.05548095703125, 1.03125, 2.8828125, 0.44970703125, 0.6982421875, 0.1522216796875, 1.591796875, 0.0882568359375, 1.5234375, 0.455078125, 0.31103515625, 0.09002685546875, 0.0026798248291015625, 0.0011491775512695312, 7.343292236328125e-05, 0.462646484375, 1.07421875, 0.109375, 0.07806396484375, 0.294189453125, 0.00971221923828125, 0.00040912628173828125], "tokens": [397, 629, 1650, 280, 429, 35, 45, 397, 1596, 301, 291, 1650, 280, 4401, 32, 11831, 26, 990, 32, 7069, 1035, 397, 320, 2368, 308, 1918, 25944, 484, 27, 301, 291, 434, 886, 1650, 438, 646, 600, 4991, 10652, 32, 291, 442, 45, 397, 320, 1687, 415, 308, 1055, 333, 225, 34]}
{"line_number": 1475, "line_type": "original", "code": "    String joinString = NodeUtil.getStringValue(right);", "entropy": 2.056640625, "is_bug_line": false, "sus_score": 0.5862225890159607, "per_token_entropy": [6.53515625, 9.5546875, 9.7578125, 0.0648193359375, 0.351806640625, 0.251953125, 0.00966644287109375, 0.0018711090087890625, 0.0172271728515625, 0.0013179779052734375, 0.00960540771484375, 0.156005859375, 0.0148162841796875], "tokens": [264, 892, 7140, 652, 280, 4004, 1733, 32, 7069, 882, 26, 990, 293]}
{"line_number": 1475, "line_type": "generated", "code": "\n              foldedStringNode,\n              Node.newString(\"\"));\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // If the joined array literal is larger than", "entropy": 0.359130859375, "is_bug_line": false, "sus_score": 0.5862225890159607, "per_token_entropy": [0.488525390625, 0.93212890625, 7.152557373046875e-07, 0.00060272216796875, 0.00042366981506347656, 0.0751953125, 0.1904296875, 0.55908203125, 0.03485107421875, 0.00023162364959716797, 0.0035076141357421875, 0.130615234375, 0.025909423828125, 0.27294921875, 0.8349609375, 8.344650268554688e-07, 0.00266265869140625, 0.00014340877532958984, 0.34423828125, 0.0526123046875, 0.0157012939453125, 0.10687255859375, 2.944469451904297e-05, 0.09869384765625, 0.313720703125, 0.0001283884048461914, 0.0007586479187011719, 3.254413604736328e-05, 0.0003502368927001953, 0.0260467529296875, 0.00018143653869628906, 0.005985260009765625, 4.76837158203125e-07, 2.6702880859375e-05, 2.3245811462402344e-05, 0.01971435546875, 0.033416748046875, 0.116943359375, 0.00034308433532714844, 0.256103515625, 0.07366943359375, 0.0007061958312988281, 0.06884765625, 1.720703125, 1.8154296875, 0.456298828125, 3.240234375, 2.068359375, 2.5078125, 0.51953125, 1.1494140625, 0.10943603515625], "tokens": [1090, 14801, 981, 652, 1212, 30, 1090, 4004, 32, 890, 652, 440, 2974, 616, 14801, 981, 652, 1212, 280, 15909, 45, 291, 320, 291, 2935, 32, 3227, 2931, 26, 96, 30, 14801, 981, 652, 1212, 293, 291, 1626, 45, 1687, 1244, 44, 291, 434, 1670, 322, 27033, 1417, 10652, 438, 14324, 2784]}
{"line_number": 1516, "line_type": "original", "code": "        Node foldedStringNode = arrayFoldedChildren.remove(0);", "entropy": 1.8701171875, "is_bug_line": false, "sus_score": 0.5809987187385559, "per_token_entropy": [7.26953125, 4.3125, 3.517578125, 4.279613494873047e-05, 1.6552734375, 0.058319091796875, 0.11669921875, 4.6875, 2.373046875, 0.0003046989440917969, 0.005535125732421875, 0.08758544921875, 0.0184326171875, 4.31640625, 0.041351318359375, 3.31640625, 0.0215301513671875], "tokens": [351, 4004, 14801, 981, 652, 1212, 280, 1417, 56, 362, 981, 7640, 32, 2546, 26, 34, 293]}
{"line_number": 1516, "line_type": "generated", "code": "\n      if (index!= intIndex) {\n        return;\n      }\n\n      if (intIndex < 0) {\n        intIndex = left.getChildCount() + intIndex;\n      }\n      if (intIndex < 0 || intIndex >= left", "entropy": 0.208984375, "is_bug_line": false, "sus_score": 0.5809987187385559, "per_token_entropy": [0.113037109375, 0.248046875, 0.23681640625, 0.6689453125, 0.26123046875, 0.0450439453125, 2.6464462280273438e-05, 0.1673583984375, 0.0024013519287109375, 0.01291656494140625, 0.474853515625, 0.0015506744384765625, 0.01458740234375, 0.00024437904357910156, 0.52978515625, 1.3837890625, 0.23486328125, 0.60107421875, 8.630752563476562e-05, 0.383056640625, 0.03814697265625, 0.0004749298095703125, 0.65771484375, 0.0011777877807617188, 0.0129241943359375, 0.9892578125, 0.2451171875, 0.6015625, 0.2313232421875, 6.318092346191406e-05, 0.005584716796875, 0.00150299072265625, 0.0006761550903320312, 0.0232391357421875, 0.01219940185546875, 1.1086463928222656e-05, 0.0013341903686523438, 0.2178955078125, 0.00021517276763916016, 1.578125, 0.2005615234375, 0.1702880859375, 0.0288543701171875, 6.318092346191406e-06, 0.305419921875, 0.0335693359375, 0.0001424551010131836, 0.0694580078125, 0.0181427001953125, 5.328655242919922e-05, 0.037567138671875, 0.00505828857421875], "tokens": [397, 415, 308, 1055, 863, 629, 1284, 27, 301, 291, 442, 45, 397, 320, 1687, 415, 308, 410, 1284, 333, 225, 34, 27, 301, 291, 629, 1284, 280, 2841, 32, 24213, 1534, 346, 474, 629, 1284, 45, 397, 320, 397, 415, 308, 410, 1284, 333, 225, 34, 1276, 629, 1284, 2377, 2841]}
{"line_number": 1479, "line_type": "original", "code": "    Node elem = arrayNode.getFirstChild();", "entropy": 1.466796875, "is_bug_line": false, "sus_score": 0.5800216794013977, "per_token_entropy": [3.703125, 5.5234375, 4.18359375, 0.10198974609375, 0.662109375, 0.384033203125, 0.0226593017578125, 0.0684814453125, 0.0004591941833496094, 0.01110076904296875], "tokens": [264, 4004, 10313, 280, 1417, 1212, 32, 25657, 2931, 473]}
{"line_number": 1479, "line_type": "generated", "code": "\n        break;", "entropy": 0.340087890625, "is_bug_line": false, "sus_score": 0.5800216794013977, "per_token_entropy": [0.642578125, 0.37353515625, 0.004062652587890625], "tokens": [291, 1626, 45]}
{"line_number": 1528, "line_type": "original", "code": "        parent.replaceChild(n, foldedStringNode);", "entropy": 1.666015625, "is_bug_line": false, "sus_score": 0.5774036049842834, "per_token_entropy": [7.1484375, 5.34375, 0.0064239501953125, 0.08935546875, 0.000904083251953125, 0.0014677047729492188, 0.091796875, 0.00043964385986328125, 6.3046875, 0.0002803802490234375, 2.470703125, 0.179931640625, 0.0120086669921875], "tokens": [351, 2935, 32, 3227, 2931, 26, 96, 30, 14801, 981, 652, 1212, 293]}
{"line_number": 1528, "line_type": "generated", "code": "\n    }\n  }\n\n  /**\n   * Try to fold array-element. e.g [1, 2, 3][10];\n   */\n  void tryFoldGetElem(NodeTraversal t, Node n, Node left, Node right,", "entropy": 0.17919921875, "is_bug_line": false, "sus_score": 0.5774036049842834, "per_token_entropy": [0.303955078125, 0.007366180419921875, 0.31591796875, 0.0017423629760742188, 0.8876953125, 0.2266845703125, 0.045928955078125, 0.00041031837463378906, 0.3212890625, 0.0128326416015625, 0.0732421875, 0.806640625, 0.31591796875, 1.689453125, 0.215087890625, 0.03778076171875, 0.0004017353057861328, 0.0001538991928100586, 0.4130859375, 0.02001953125, 0.01558685302734375, 0.025726318359375, 0.000682830810546875, 0.0171966552734375, 0.005542755126953125, 0.0009064674377441406, 0.6650390625, 0.14208984375, 0.022552490234375, 0.12164306640625, 0.01074981689453125, 0.043792724609375, 0.00787353515625, 0.0253448486328125, 0.007526397705078125, 0.0117645263671875, 0.482666015625, 0.6572265625, 0.66357421875, 0.010650634765625, 0.03814697265625, 0.0018377304077148438, 0.00022876262664794922, 0.0256500244140625, 0.044464111328125, 0.015167236328125, 0.0239105224609375, 0.176513671875, 0.0258026123046875, 0.0814208984375, 0.058135986328125, 0.1915283203125], "tokens": [284, 320, 334, 320, 719, 1022, 664, 319, 8959, 372, 11426, 1417, 31, 2543, 32, 484, 32, 89, 428, 35, 30, 225, 36, 30, 225, 37, 1674, 35, 34, 970, 664, 569, 334, 763, 1596, 15483, 936, 10797, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2841, 30, 4004, 2091, 30]}
{"line_number": 1524, "line_type": "original", "code": "          Node replacement = new Node(Token.ADD,", "entropy": 2.896484375, "is_bug_line": false, "sus_score": 0.5770529508590698, "per_token_entropy": [4.7109375, 4.46484375, 16.078125, 0.1112060546875, 2.470703125, 0.1824951171875, 0.006561279296875, 0.07025146484375, 0.00011920928955078125, 3.57421875, 0.1837158203125], "tokens": [2033, 4004, 15909, 280, 537, 4004, 26, 1763, 32, 5363, 30]}
{"line_number": 1524, "line_type": "generated", "code": "));\n        return;\n      }\n\n      Node arrayNode = left;\n      Node elem = arrayNode.getFirstChild();\n      int i = 0;\n      while (elem!= null) {\n        if (i == intIndex) {\n          if (NodeUtil", "entropy": 0.206787109375, "is_bug_line": false, "sus_score": 0.5770529508590698, "per_token_entropy": [1.2763671875, 0.1552734375, 0.0115966796875, 0.0005254745483398438, 0.00942230224609375, 5.829334259033203e-05, 0.1202392578125, 0.58203125, 1.06640625, 1.0224609375, 0.007598876953125, 0.07086181640625, 0.033966064453125, 0.1798095703125, 0.75048828125, 0.2301025390625, 0.141845703125, 0.190185546875, 0.005962371826171875, 0.0006570816040039062, 0.06854248046875, 5.173683166503906e-05, 0.005023956298828125, 0.1695556640625, 0.794921875, 0.86279296875, 0.02276611328125, 0.0103302001953125, 0.00508880615234375, 0.0009603500366210938, 0.095703125, 0.11572265625, 0.01220703125, 0.347412109375, 0.0007963180541992188, 0.0003991127014160156, 0.1917724609375, 0.0001863241195678711, 0.025726318359375, 0.132568359375, 0.016754150390625, 0.1614990234375, 0.043060302734375, 0.0103607177734375, 1.6689300537109375e-06, 0.00978851318359375, 0.00045418739318847656, 0.06463623046875, 1.1787109375, 0.0987548828125, 0.44775390625, 0.0008893013000488281], "tokens": [876, 291, 442, 45, 397, 320, 1687, 4004, 1417, 1212, 280, 2841, 45, 397, 4004, 10313, 280, 1417, 1212, 32, 25657, 2931, 473, 397, 629, 595, 280, 225, 34, 45, 397, 2218, 308, 7613, 863, 744, 27, 301, 291, 415, 308, 91, 610, 629, 1284, 27, 301, 616, 415, 308, 1212, 1733]}
{"line_number": 1521, "line_type": "original", "code": "        if (foldedStringNode.getType() != Token.STRING) {", "entropy": 1.7021484375, "is_bug_line": false, "sus_score": 0.5760498642921448, "per_token_entropy": [5.703125, 1.0439453125, 0.1572265625, 9.3671875, 0.0012617111206054688, 5.3515625, 0.27587890625, 1.595703125, 2.580078125, 0.005046844482421875, 0.91845703125, 0.0207366943359375, 0.0003142356872558594, 0.023406982421875, 0.1744384765625, 0.010528564453125], "tokens": [351, 415, 308, 8025, 981, 652, 1212, 32, 10272, 346, 863, 6512, 32, 5203, 27, 301]}
{"line_number": 1521, "line_type": "generated", "code": "\n      // TODO(johnlenz): handle negative indices.\n      if (intIndex < 0 || intIndex >= left.getChildCount()) {\n        t.getCompiler().report(JSError.make(t, right,\n            INVALID_GETELEM", "entropy": 0.280029296875, "is_bug_line": false, "sus_score": 0.5760498642921448, "per_token_entropy": [0.66552734375, 1.7197265625, 2.865234375, 0.04290771484375, 0.344970703125, 0.005168914794921875, 0.00157928466796875, 0.08740234375, 2.580078125, 0.984375, 0.83544921875, 0.7509765625, 0.2041015625, 0.79736328125, 0.050079345703125, 0.279296875, 0.00013148784637451172, 0.529296875, 0.048583984375, 0.0008058547973632812, 0.5126953125, 0.10321044921875, 1.895427703857422e-05, 0.048736572265625, 0.1260986328125, 0.0002218484878540039, 0.0033168792724609375, 0.00011074542999267578, 0.0177001953125, 0.0019893646240234375, 0.024200439453125, 0.431396484375, 4.303455352783203e-05, 0.0013589859008789062, 5.4717063903808594e-05, 0.00017070770263671875, 0.0005269050598144531, 0.0016870498657226562, 0.0178985595703125, 0.00040531158447265625, 4.76837158203125e-06, 0.0001842975616455078, 8.237361907958984e-05, 0.0239715576171875, 2.8014183044433594e-05, 0.0204620361328125, 0.00016009807586669922, 0.152099609375, 0.27734375, 4.458427429199219e-05, 0.00534820556640625, 0.0004508495330810547], "tokens": [397, 434, 4296, 26, 25172, 1657, 108, 711, 2887, 11003, 10193, 32, 397, 415, 308, 410, 1284, 333, 225, 34, 1276, 629, 1284, 2377, 2841, 32, 24213, 1534, 1157, 301, 291, 273, 32, 371, 8115, 922, 3734, 26, 60, 21887, 32, 2682, 26, 102, 30, 2091, 30, 324, 22855, 81, 2788, 32313]}
{"line_number": 1477, "line_type": "original", "code": "    StringBuilder sb = new StringBuilder();", "entropy": 2.17578125, "is_bug_line": true, "sus_score": 0.5759442448616028, "per_token_entropy": [5.25, 9.609375, 0.1962890625, 0.06500244140625, 0.04388427734375, 0.002227783203125, 0.0631103515625], "tokens": [264, 9706, 6115, 280, 537, 9706, 473]}
{"line_number": 1477, "line_type": "generated", "code": "\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node child : arrayF", "entropy": 0.11029052734375, "is_bug_line": true, "sus_score": 0.5759442448616028, "per_token_entropy": [0.12646484375, 0.00377655029296875, 0.134033203125, 0.42822265625, 0.00015163421630859375, 0.0007863044738769531, 3.135204315185547e-05, 0.00017547607421875, 0.0226593017578125, 0.00015401840209960938, 0.00579833984375, 3.5762786865234375e-07, 6.663799285888672e-05, 2.6345252990722656e-05, 0.01317596435546875, 0.133056640625, 0.1318359375, 0.00196075439453125, 0.59130859375, 0.0570068359375, 0.0018548965454101562, 0.1163330078125, 0.51904296875, 0.0310211181640625, 0.1031494140625, 5.960464477539062e-07, 0.0006103515625, 0.12646484375, 0.00991058349609375, 1.728534698486328e-05, 0.0145416259765625, 0.0014057159423828125, 0.0158538818359375, 0.0205841064453125, 0.0005917549133300781, 0.037933349609375, 1.704692840576172e-05, 0.17919921875, 0.7216796875, 0.011749267578125, 0.0009775161743164062, 0.10919189453125, 0.00013267993927001953, 0.0002617835998535156, 0.083740234375, 0.7314453125, 0.0035953521728515625, 0.040008544921875, 1.1328125, 0.0653076171875, 0.004947662353515625, 0.0003516674041748047], "tokens": [291, 320, 291, 2935, 32, 3227, 2931, 26, 96, 30, 14801, 981, 652, 1212, 293, 291, 1626, 45, 1687, 1244, 44, 291, 415, 308, 8025, 981, 1250, 848, 4707, 1250, 27, 301, 616, 442, 45, 291, 320, 291, 1417, 1212, 32, 18723, 7640, 473, 291, 436, 308, 1212, 2838, 499, 1417, 56]}
{"line_number": 926, "line_type": "original", "code": "   * Does the expression contain an operator with lower precedence than", "entropy": 3.09375, "is_bug_line": false, "sus_score": 0.5757121443748474, "per_token_entropy": [6.578125, 3.962890625, 10.5546875, 0.6787109375, 1.099609375, 0.50048828125, 4.66796875, 4.12109375, 1.435546875, 1.2626953125, 0.98974609375, 1.279296875], "tokens": [261, 319, 12894, 322, 6101, 4799, 600, 4134, 623, 7216, 32787, 2784]}
{"line_number": 926, "line_type": "generated", "code": "\n        // (x || TRUE) => TRUE\n        // (x && FALSE) => FALSE\n        if (rval && type == Token.OR ||\n           !rval && type == Token.AND) {\n          result = right;\n        }\n      }\n   ", "entropy": 0.10150146484375, "is_bug_line": false, "sus_score": 0.5757121443748474, "per_token_entropy": [0.376953125, 0.2049560546875, 0.59423828125, 0.141357421875, 0.3759765625, 0.393798828125, 0.01079559326171875, 0.04302978515625, 0.16650390625, 0.46923828125, 0.0738525390625, 0.0435791015625, 0.01383209228515625, 0.0750732421875, 0.0063323974609375, 0.0011348724365234375, 0.001827239990234375, 0.0164642333984375, 0.0633544921875, 0.43798828125, 0.248291015625, 0.46923828125, -0.0, 0.0703125, 0.0094757080078125, 0.0015268325805664062, 0.001308441162109375, 6.67572021484375e-06, 0.1181640625, 0.06207275390625, 0.053680419921875, 0.0070037841796875, 0.0003275871276855469, 1.1920928955078125e-07, 0.0004520416259765625, 0.0005803108215332031, 9.644031524658203e-05, 0.00023818016052246094, 8.344650268554688e-07, 2.5391578674316406e-05, 0.0066986083984375, 0.0015506744384765625, 0.0223388671875, 0.03228759765625, 7.176399230957031e-05, 0.034393310546875, 0.0009870529174804688, 0.154052734375, 0.00125885009765625, 0.2861328125, 0.0008902549743652344, 0.182373046875], "tokens": [291, 434, 308, 106, 1276, 7793, 27, 532, 7793, 291, 434, 308, 106, 962, 7446, 27, 532, 7446, 291, 415, 308, 100, 695, 962, 827, 610, 6512, 32, 758, 1276, 324, 653, 100, 695, 962, 827, 610, 6512, 32, 3349, 27, 301, 616, 1056, 280, 2091, 45, 291, 320, 397, 320, 284]}
{"line_number": 1506, "line_type": "original", "code": "    foldedSize += arrayFoldedChildren.size() - 1;", "entropy": 1.349609375, "is_bug_line": false, "sus_score": 0.5748459100723267, "per_token_entropy": [6.2109375, 7.94921875, 0.0016374588012695312, 0.206787109375, 0.2958984375, 4.9453125, 1.556640625, 3.814697265625e-05, 0.00011396408081054688, 0.0235137939453125, 0.0187225341796875, 0.05828857421875, 0.859375, 0.62744140625, 0.0276336669921875, 0.06414794921875, 0.09869384765625], "tokens": [264, 14801, 981, 1250, 1454, 1417, 56, 362, 981, 7640, 32, 891, 346, 429, 225, 35, 45]}
{"line_number": 1506, "line_type": "generated", "code": "\n\n    if (!NodeUtil.isGetElem(left)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node indexNode = right;\n\n    if (arrayNode.getType()!= Token.ARRAYLIT) {\n      return", "entropy": 0.20703125, "is_bug_line": false, "sus_score": 0.5748459100723267, "per_token_entropy": [1.1064453125, 1.197265625, 0.8974609375, 0.1361083984375, 0.0001609325408935547, 2.0503997802734375e-05, 0.0740966796875, 0.0418701171875, 0.1795654296875, 0.0025272369384765625, 0.12127685546875, 0.54736328125, 0.0030002593994140625, 0.006465911865234375, 0.01425933837890625, 0.0020542144775390625, 0.0010652542114257812, 5.984306335449219e-05, 0.3037109375, 0.294189453125, 0.2479248046875, 0.07623291015625, 0.0023212432861328125, 0.0147552490234375, 0.004528045654296875, 0.0072021484375, 0.0006456375122070312, 0.006031036376953125, 0.133056640625, 0.184814453125, 0.489013671875, 0.1436767578125, 0.004146575927734375, 0.74169921875, 0.5625, 0.449951171875, 0.59130859375, 0.75048828125, 0.919921875, 0.0010433197021484375, 0.0246734619140625, 0.036712646484375, 0.00058746337890625, 0.02850341796875, 0.00047135353088378906, 4.649162292480469e-06, 0.0013027191162109375, 5.710124969482422e-05, 0.3603515625, 0.0016527175903320312, 0.005191802978515625, 0.0487060546875], "tokens": [446, 415, 1429, 1212, 1733, 32, 297, 936, 10797, 26, 1873, 490, 301, 397, 442, 45, 284, 320, 446, 4004, 1417, 1212, 280, 2841, 32, 25657, 2931, 473, 284, 4004, 1650, 1212, 280, 2091, 45, 446, 415, 308, 955, 1212, 32, 10272, 346, 863, 6512, 32, 9487, 22532, 27, 301, 397, 442]}
{"line_number": 1520, "line_type": "original", "code": "        arrayNode.detachChildren();", "entropy": 2.275390625, "is_bug_line": false, "sus_score": 0.5747628808021545, "per_token_entropy": [4.703125, 8.5703125, 0.8427734375, 0.30224609375, 1.470703125, 0.02490234375, 0.01424407958984375], "tokens": [351, 1417, 1212, 32, 18723, 7640, 473]}
{"line_number": 1520, "line_type": "generated", "code": "\n      }\n\n      int elemCount = left.getChildCount();\n      if (intIndex < 0 || intIndex >= elemCount) {\n        t.getCompiler().report(JSError.make(t, right,\n            INVALID_GETELEM_INDEX", "entropy": 0.166748046875, "is_bug_line": false, "sus_score": 0.5747628808021545, "per_token_entropy": [0.127685546875, 0.039703369140625, 0.390869140625, 1.53125, 2.96875, 0.12548828125, 0.0033550262451171875, 0.258056640625, 6.306171417236328e-05, 0.0030651092529296875, 5.602836608886719e-05, 0.038238525390625, 0.123291015625, 0.19873046875, 0.08056640625, 0.247314453125, 3.123283386230469e-05, 0.37939453125, 0.0732421875, 0.00016248226165771484, 0.52880859375, 0.0753173828125, 1.6689300537109375e-06, 0.019500732421875, 0.001678466796875, 2.9802322387695312e-06, 0.0038928985595703125, 0.0006341934204101562, 0.0341796875, 0.3779296875, 2.1696090698242188e-05, 0.0006012916564941406, 0.00012886524200439453, 0.00018739700317382812, 0.0005960464477539062, 0.00213623046875, 0.018157958984375, 0.00034689903259277344, 4.5299530029296875e-06, 0.00014603137969970703, 6.759166717529297e-05, 0.0247650146484375, 2.6464462280273438e-05, 0.0202484130859375, 0.00012826919555664062, 0.180419921875, 0.6630859375, 6.079673767089844e-06, 0.007537841796875, 0.0005221366882324219, 6.151199340820312e-05, 0.12322998046875], "tokens": [397, 320, 1687, 629, 10313, 1534, 280, 2841, 32, 24213, 1534, 473, 397, 415, 308, 410, 1284, 333, 225, 34, 1276, 629, 1284, 2377, 10313, 1534, 27, 301, 291, 273, 32, 371, 8115, 922, 3734, 26, 60, 21887, 32, 2682, 26, 102, 30, 2091, 30, 324, 22855, 81, 2788, 32313, 81, 9193]}
{"line_number": 1482, "line_type": "original", "code": "      if (NodeUtil.isImmutableValue(elem)) {", "entropy": 1.6728515625, "is_bug_line": false, "sus_score": 0.5744947791099548, "per_token_entropy": [5.87890625, 0.86669921875, 0.072021484375, 5.8359375, 0.042877197265625, 0.0002899169921875, 1.419921875, 2.15625, 0.08416748046875, 0.00383758544921875, 5.140625, 0.221435546875, 0.024200439453125], "tokens": [647, 415, 308, 1212, 1733, 32, 297, 15027, 882, 26, 7613, 490, 301]}
{"line_number": 1482, "line_type": "generated", "code": "\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node child : arrayFoldedChildren) {\n          arrayNode.addChildToBack(child);\n        }\n        break;\n   ", "entropy": 0.12396240234375, "is_bug_line": false, "sus_score": 0.5744947791099548, "per_token_entropy": [0.473876953125, 1.001953125, 0.06292724609375, 0.2152099609375, 8.344650268554688e-07, 0.0018568038940429688, 0.23193359375, 0.015350341796875, 7.43865966796875e-05, 0.0196533203125, 0.0019102096557617188, 0.00803375244140625, 0.03338623046875, 0.0009102821350097656, 0.0022106170654296875, 9.298324584960938e-05, 0.11785888671875, 0.69775390625, 0.006542205810546875, 0.0012521743774414062, 0.048858642578125, 0.00018155574798583984, 0.0003192424774169922, 0.03326416015625, 0.59619140625, 0.0034885406494140625, 0.03759765625, 1.1826171875, 0.0809326171875, 0.0081787109375, 0.00091552734375, -0.0, 1.7881393432617188e-06, 0.00017762184143066406, 0.00109100341796875, 0.0005993843078613281, 0.013946533203125, 0.2900390625, 0.0002219676971435547, 4.184246063232422e-05, 0.002384185791015625, 0.004253387451171875, 0.04315185546875, 0.0006866455078125, 0.031890869140625, 0.022308349609375, 0.1663818359375, 4.6253204345703125e-05, 0.12054443359375, 0.7158203125, 0.004619598388671875, 0.140380859375], "tokens": [291, 415, 308, 8025, 981, 1250, 848, 4707, 1250, 27, 301, 616, 442, 45, 291, 320, 291, 1417, 1212, 32, 18723, 7640, 473, 291, 436, 308, 1212, 2838, 499, 1417, 56, 362, 981, 7640, 27, 301, 616, 1417, 1212, 32, 21545, 705, 2495, 26, 2661, 293, 291, 320, 291, 1626, 45, 284]}
{"line_number": 1769, "line_type": "original", "code": "      if (0 == (nSlashes & 1)) { return true; }", "entropy": 2.521484375, "is_bug_line": false, "sus_score": 0.5744693875312805, "per_token_entropy": [6.16015625, 2.892578125, 0.21044921875, 5.84765625, 0.68798828125, 2.67578125, 0.95458984375, 18.4375, 0.006374359130859375, 0.166015625, 0.009033203125, 0.0219573974609375, 0.06854248046875, 0.130615234375, 3.970703125, 3.087890625, 0.0128021240234375, 0.0199737548828125], "tokens": [647, 415, 308, 34, 610, 308, 96, 6139, 16670, 549, 225, 35, 490, 301, 442, 861, 45, 320]}
{"line_number": 1769, "line_type": "generated", "code": "\n    NodeUtil.removeChild(parent, n);\n    t.getCompiler().reportCodeChange();\n  }\n\n  /**\n   * Removes IFs that always evaluate to true.\n   */\n  void tryFoldIf(NodeTraversal t, Node n, Node parent", "entropy": 0.15869140625, "is_bug_line": false, "sus_score": 0.5744693875312805, "per_token_entropy": [0.78857421875, 0.73388671875, 0.34814453125, 0.0006976127624511719, 1.2744140625, 0.0018253326416015625, 0.01462554931640625, 0.00021719932556152344, 0.0024471282958984375, 0.009246826171875, 0.09918212890625, 0.039031982421875, 2.6106834411621094e-05, 0.001209259033203125, 0.0001310110092163086, 0.00010085105895996094, 4.267692565917969e-05, 0.0004601478576660156, 2.682209014892578e-05, 0.0002582073211669922, 0.02099609375, 0.0007848739624023438, 0.2379150390625, 0.1575927734375, 0.033905029296875, 0.0005116462707519531, 1.1171875, 0.398193359375, 0.049591064453125, 0.11419677734375, 0.1329345703125, 0.0499267578125, 0.00887298583984375, 1.302734375, 0.82666015625, 0.2498779296875, 0.1448974609375, 0.00562286376953125, 0.008087158203125, 0.0009636878967285156, 0.0033473968505859375, 0.023529052734375, 0.022857666015625, 0.00473785400390625, 0.0011997222900390625, 0.0009984970092773438, 1.2516975402832031e-05, 0.0004730224609375, 0.00677490234375, 0.006744384765625, 0.0005621910095214844, 0.00600433349609375], "tokens": [284, 4004, 1733, 32, 28878, 26, 2544, 30, 310, 293, 284, 273, 32, 371, 8115, 922, 3734, 1227, 1791, 473, 334, 320, 719, 1022, 664, 319, 24992, 5503, 101, 688, 5182, 13396, 372, 861, 32, 664, 569, 334, 763, 1596, 15483, 2797, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935]}
{"line_number": 1476, "line_type": "original", "code": "    List<Node> arrayFoldedChildren = Lists.newLinkedList();", "entropy": 1.791015625, "is_bug_line": false, "sus_score": 0.5740882158279419, "per_token_entropy": [5.7578125, 10.3984375, 0.011566162109375, 0.052154541015625, 0.0003933906555175781, 6.265625, 1.9169921875, 0.00013339519500732422, 9.489059448242188e-05, 0.2052001953125, 0.2484130859375, 1.333984375, 0.004291534423828125, 2.4375, 0.0012331008911132812, 0.022247314453125], "tokens": [264, 1682, 46, 1212, 48, 1417, 56, 362, 981, 7640, 280, 25163, 32, 890, 20555, 473]}
{"line_number": 1476, "line_type": "generated", "code": "\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();", "entropy": 0.12939453125, "is_bug_line": false, "sus_score": 0.5740882158279419, "per_token_entropy": [0.1279296875, 2.294921875, 2.4318695068359375e-05, 0.058197021484375, 0.0011005401611328125, 0.1854248046875, 0.2091064453125, 0.0198516845703125, 0.166748046875, 0.00021183490753173828, 0.1676025390625, 0.254638671875, 0.00014853477478027344, 0.0007023811340332031, 3.2782554626464844e-05, 0.00015652179718017578, 0.0170745849609375, 0.0001442432403564453, 0.005634307861328125, 1.1920928955078125e-07, 3.0517578125e-05, 4.112720489501953e-05, 0.00940704345703125, 0.049468994140625, 0.11920166015625, 0.0008883476257324219, 0.4130859375, 0.1083984375, 0.001186370849609375, 0.07855224609375, 0.54931640625, 0.030364990234375, 0.190185546875, 1.1920928955078125e-07, 0.0015773773193359375, 0.161376953125, 0.012542724609375, 1.4066696166992188e-05, 0.0188140869140625, 0.0010251998901367188, 0.00644683837890625, 0.037109375, 0.0004892349243164062, 0.001811981201171875, 1.2993812561035156e-05, 0.1748046875, 1.1669921875, 0.021392822265625, 0.001190185546875, 0.06646728515625, 0.00019478797912597656, 0.0002913475036621094], "tokens": [616, 14801, 981, 652, 1212, 280, 15909, 45, 291, 320, 291, 2935, 32, 3227, 2931, 26, 96, 30, 14801, 981, 652, 1212, 293, 291, 1626, 45, 1687, 1244, 44, 291, 415, 308, 8025, 981, 1250, 848, 4707, 1250, 27, 301, 616, 442, 45, 291, 320, 291, 1417, 1212, 32, 18723, 7640, 473]}
{"line_number": 814, "line_type": "original", "code": "      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();", "entropy": 1.4873046875, "is_bug_line": false, "sus_score": 0.5730190277099609, "per_token_entropy": [5.76953125, 4.64453125, 3.23828125, 6.34765625, 0.100341796875, 0.342529296875, 0.1751708984375, 0.09503173828125, 0.00860595703125, 0.0478515625, 0.059906005859375, 1.3984375, 0.07012939453125, 0.004398345947265625, 0.014007568359375], "tokens": [647, 4004, 1615, 9079, 280, 622, 2227, 3487, 26, 3356, 10094, 547, 25657, 2931, 473]}
{"line_number": 814, "line_type": "generated", "code": "\n    }\n\n    Node thenBlock = n.getLastChild();\n    Node elseBlock = n.getNext();\n    if (thenBlock == null || elseBlock == null) {\n      // This can happen if the if statement has no else or if\n      // block", "entropy": 0.54638671875, "is_bug_line": false, "sus_score": 0.5730190277099609, "per_token_entropy": [0.1314697265625, 0.0823974609375, 0.184326171875, 0.318603515625, 0.39794921875, 0.7607421875, 0.01739501953125, 0.4794921875, 0.000118255615234375, 0.342041015625, 0.0004432201385498047, 0.08294677734375, 0.0877685546875, 0.431396484375, 0.099609375, 0.006069183349609375, 0.0169677734375, 0.298095703125, 0.004482269287109375, 1.2978515625, 0.1033935546875, 0.85498046875, 0.17822265625, 0.5283203125, 0.51318359375, 0.000110626220703125, 0.4267578125, 0.533203125, 0.13720703125, 0.1741943359375, 9.5367431640625e-06, 0.00234222412109375, 0.0001926422119140625, 0.262451171875, 0.002735137939453125, 0.0156707763671875, 0.7939453125, 2.458984375, 1.8134765625, 0.13623046875, 0.58984375, 0.75244140625, 1.9521484375, 1.37109375, 1.125, 0.68505859375, 1.5107421875, 2.4296875, 1.3310546875, 0.85791015625, 0.0029888153076171875, 1.84375], "tokens": [284, 320, 446, 4004, 1615, 2227, 280, 310, 32, 20197, 2931, 473, 284, 4004, 813, 2227, 280, 310, 32, 23017, 473, 284, 415, 308, 3356, 2227, 610, 744, 1276, 813, 2227, 610, 744, 27, 301, 397, 434, 1348, 883, 7292, 415, 322, 415, 7603, 1401, 1289, 813, 556, 415, 397, 434, 2163]}
{"line_number": 1421, "line_type": "original", "code": "    Node lstringNode = left.getFirstChild();", "entropy": 3.162109375, "is_bug_line": false, "sus_score": 0.5727300047874451, "per_token_entropy": [5.18359375, 6.359375, 16.734375, 0.113525390625, 0.044281005859375, 0.367919921875, 4.0078125, 0.024566650390625, 1.037109375, 0.0084228515625, 0.91259765625], "tokens": [264, 4004, 456, 800, 1212, 280, 2841, 32, 25657, 2931, 473]}
{"line_number": 1421, "line_type": "generated", "code": "\n        (!functionName.getString().equals(\"join\"))) {\n      return;\n    }\n\n    Node firstArg = right;\n    String separator = NodeUtil.getStringValue(firstArg);\n    if (separator == null) {\n      return;\n    }\n\n    StringBuilder", "entropy": 0.202880859375, "is_bug_line": false, "sus_score": 0.5727300047874451, "per_token_entropy": [0.1829833984375, 0.2548828125, 0.0187225341796875, 4.267692565917969e-05, 0.0005612373352050781, 0.004184722900390625, 0.00017070770263671875, 0.001827239990234375, 0.0013275146484375, 0.000537872314453125, 0.455810546875, 0.0037689208984375, 0.0230560302734375, 0.0042724609375, 0.0007839202880859375, 0.006168365478515625, 0.0001537799835205078, 0.181884765625, 1.76171875, 1.5341796875, 0.06719970703125, 0.004566192626953125, 0.01317596435546875, 0.04736328125, 0.1856689453125, 0.619140625, 0.69482421875, 0.090087890625, 0.407470703125, 0.0006313323974609375, 2.3245811462402344e-05, 0.021575927734375, 0.0002224445343017578, 0.0006127357482910156, 0.0171966552734375, 7.987022399902344e-06, 0.00824737548828125, 0.2186279296875, 0.9296875, 0.05706787109375, 0.030609130859375, 0.0241851806640625, 0.00033092498779296875, 0.056488037109375, 0.0068817138671875, 0.049896240234375, 0.251953125, 0.0012025833129882812, 0.072998046875, 0.0004112720489501953, 0.42626953125, 1.8076171875], "tokens": [291, 1429, 1126, 558, 32, 7069, 922, 3574, 440, 2524, 14036, 301, 397, 442, 45, 284, 320, 446, 4004, 1932, 1765, 280, 2091, 45, 284, 892, 17584, 280, 4004, 1733, 32, 7069, 882, 26, 2232, 1765, 293, 284, 415, 308, 12637, 610, 744, 27, 301, 397, 442, 45, 284, 320, 446, 9706]}
{"line_number": 1768, "line_type": "original", "code": "      // unicode literal.", "entropy": 6.0234375, "is_bug_line": false, "sus_score": 0.57259202003479, "per_token_entropy": [4.76953125, 1.3046875, 15.1015625, 4.41015625, 4.5390625], "tokens": [647, 434, 15390, 10652, 32]}
{"line_number": 1768, "line_type": "generated", "code": "\n    }\n\n    // This is a do-while loop\n    Node body = n.getLastChild();\n    Preconditions.checkState(body.getType() == Token.BLOCK);\n    NodeUtil.redeclareVarsInsideBranch(body);\n    NodeUtil.replace", "entropy": 0.4287109375, "is_bug_line": false, "sus_score": 0.57259202003479, "per_token_entropy": [0.12939453125, 0.040618896484375, 0.5283203125, 1.1728515625, 3.5703125, 1.2841796875, 0.81787109375, 0.8505859375, 0.55078125, 0.00968170166015625, 0.708984375, 1.763671875, 0.6005859375, 1.2958984375, 0.038116455078125, 0.10455322265625, 0.00014257431030273438, 0.0128173828125, 0.0005564689636230469, 0.279296875, 0.1795654296875, 1.9013671875, 5.5789947509765625e-05, 0.00279998779296875, 0.330810546875, 0.0015506744384765625, 0.04241943359375, 0.00862884521484375, 0.041290283203125, 0.0003428459167480469, 0.01062774658203125, 0.00042724609375, 2.5987625122070312e-05, 0.57861328125, 0.04254150390625, 0.63330078125, 0.83251953125, 0.285400390625, 0.00011491775512695312, 0.199951171875, 0.0002053976058959961, 0.00033164024353027344, 0.00537872314453125, 0.0016918182373046875, 0.002063751220703125, 0.45849609375, 0.056549072265625, 0.411376953125, 0.92822265625, 0.1270751953125, 6.210803985595703e-05, 1.453125], "tokens": [284, 320, 446, 434, 1348, 438, 312, 745, 31, 5525, 5258, 284, 4004, 3361, 280, 310, 32, 20197, 2931, 473, 284, 40596, 32, 1553, 1078, 26, 1548, 32, 10272, 346, 610, 6512, 32, 10322, 293, 284, 4004, 1733, 32, 268, 8238, 12034, 22694, 10094, 26, 1548, 293, 284, 4004, 1733, 32, 3227]}
