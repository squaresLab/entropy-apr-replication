{"line_number": 220, "line_type": "original", "code": "   * When converting arrays to string using Array.prototype.toString or", "entropy": 2.91015625, "is_bug_line": false, "sus_score": 0.7642130851745605, "per_token_entropy": [6.703125, 1.8935546875, 4.26953125, 2.900390625, 7.328125, 0.85791015625, 3.462890625, 4.875, 2.283203125, 0.01480865478515625, 0.1170654296875, 0.018890380859375, 2.794921875, 3.240234375], "tokens": [261, 319, 5076, 24582, 12051, 372, 802, 1471, 2629, 32, 3889, 32, 3108, 556]}
{"line_number": 220, "line_type": "generated", "code": "\n        return Double.NaN;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child!= TernaryValue.UNKNOWN) {\n          return child.toBoolean(true)? 0", "entropy": 0.1080322265625, "is_bug_line": false, "sus_score": 0.7642130851745605, "per_token_entropy": [1.0087890625, 0.16845703125, 0.740234375, 0.00043129920959472656, 0.0305938720703125, 0.003368377685546875, 0.2357177734375, 0.028167724609375, 4.410743713378906e-05, 1.9073486328125e-05, 0.87158203125, 2.8967857360839844e-05, 0.091064453125, 0.46826171875, 1.7762184143066406e-05, 6.92605972290039e-05, 0.1197509765625, 0.0867919921875, 0.00824737548828125, 0.00829315185546875, 3.3974647521972656e-05, 0.00019693374633789062, 0.0005917549133300781, 0.00206756591796875, 0.00115966796875, 0.003475189208984375, 0.00016617774963378906, 0.0016078948974609375, 0.00627899169921875, 0.1671142578125, 0.0015573501586914062, 0.001384735107421875, 0.078125, 0.0268402099609375, 2.6226043701171875e-06, 4.971027374267578e-05, 1.2278556823730469e-05, 0.0098114013671875, 0.0090789794921875, 0.000732421875, 0.006649017333984375, 0.06988525390625, 0.10491943359375, 0.005420684814453125, 0.05120849609375, 0.69091796875, 0.0204010009765625, 0.436279296875, 0.00818634033203125, 0.0022869110107421875, 0.02099609375, 0.0202789306640625], "tokens": [291, 442, 6934, 32, 11126, 45, 1687, 1135, 6512, 32, 3908, 44, 291, 394, 48584, 882, 2838, 280, 622, 24278, 4709, 882, 26, 96, 32, 25657, 2931, 1035, 291, 415, 308, 2661, 863, 394, 48584, 882, 32, 14174, 27, 301, 616, 442, 2838, 32, 452, 4709, 26, 1508, 27, 1018, 225, 34]}
{"line_number": 225, "line_type": "original", "code": "   * @return The string representation.", "entropy": 3.71484375, "is_bug_line": false, "sus_score": 0.7596322894096375, "per_token_entropy": [7.07421875, 7.21875, 3.025390625, 1.701171875, 1.2783203125, 3.603515625, 1.70703125, 4.10546875], "tokens": [261, 319, 477, 601, 886, 802, 10293, 32]}
{"line_number": 225, "line_type": "generated", "code": "\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child!= TernaryValue.UNKNOWN) {\n          return child.toBoolean(true)? 0.0 : 1.", "entropy": 0.0963134765625, "is_bug_line": false, "sus_score": 0.7596322894096375, "per_token_entropy": [0.86083984375, 0.0909423828125, 0.0004036426544189453, 1.3947486877441406e-05, 0.71435546875, 0.00014674663543701172, 0.1138916015625, 0.52734375, 2.4199485778808594e-05, 5.555152893066406e-05, 0.1602783203125, 0.1165771484375, 0.006145477294921875, 0.00579833984375, 5.161762237548828e-05, 0.0002760887145996094, 0.00048470497131347656, 0.0034389495849609375, 0.0011081695556640625, 0.004657745361328125, 5.9485435485839844e-05, 0.0013704299926757812, 0.0065460205078125, 0.157958984375, 0.0030536651611328125, 0.0016450881958007812, 0.14013671875, 0.048431396484375, 2.2649765014648438e-06, 4.3272972106933594e-05, 1.4781951904296875e-05, 0.00704193115234375, 0.01861572265625, 0.0004353523254394531, 0.004367828369140625, 0.08880615234375, 0.1400146484375, 0.00543212890625, 0.08294677734375, 1.021484375, 0.021240234375, 0.462646484375, 0.0139007568359375, 0.0035610198974609375, 0.040191650390625, 0.0255889892578125, 0.09539794921875, 0.00170135498046875, 0.00209808349609375, 0.0036830902099609375, 0.00018835067749023438, 0.0011348724365234375], "tokens": [397, 1135, 6512, 32, 3908, 44, 291, 394, 48584, 882, 2838, 280, 622, 24278, 4709, 882, 26, 96, 32, 25657, 2931, 1035, 291, 415, 308, 2661, 863, 394, 48584, 882, 32, 14174, 27, 301, 616, 442, 2838, 32, 452, 4709, 26, 1508, 27, 1018, 225, 34, 32, 34, 499, 225, 35, 32]}
{"line_number": 1002, "line_type": "original", "code": "    return nodeTypeMayHaveSideEffects(n, null);", "entropy": 1.36328125, "is_bug_line": false, "sus_score": 0.7567926645278931, "per_token_entropy": [4.37890625, 2.82421875, 5.83984375, 1.0849609375, 0.0380859375, 0.01922607421875, 0.0022411346435546875, 0.00014984607696533203, 0.005687713623046875, 0.006717681884765625, 2.525390625, 0.87109375, 0.1290283203125], "tokens": [264, 442, 1541, 620, 12911, 9037, 7427, 20126, 26, 96, 30, 744, 293]}
{"line_number": 1002, "line_type": "generated", "code": "\n        return false;\n      case Token.GETPROP:\n        // TODO(johnlenz): This is a quick fix for dealing with goog.scope\n        // and goog.provide.  This should be more complete.\n        return!n.isAssign();", "entropy": 1.03515625, "is_bug_line": false, "sus_score": 0.7567926645278931, "per_token_entropy": [0.91796875, 0.6435546875, 1.15625, 0.0016508102416992188, 0.10015869140625, 0.251220703125, 0.0006136894226074219, 0.00028252601623535156, 0.73388671875, 0.1846923828125, 0.003696441650390625, 0.77978515625, 0.8232421875, 2.650390625, 0.0184783935546875, 0.057586669921875, 0.0007872581481933594, 0.0004513263702392578, 0.012237548828125, 3.009765625, 1.2841796875, 1.40625, 2.7734375, 1.267578125, 1.1806640625, 4.62109375, 0.0247802734375, 3.541015625, 0.032806396484375, 1.8125, 0.95458984375, 0.05975341796875, 2.630859375, 1.6728515625, 0.0104827880859375, 0.92333984375, 0.8515625, 0.84814453125, 2.53515625, 1.16796875, 0.4228515625, 2.923828125, 2.806640625, 0.416015625, 0.1402587890625, 1.240234375, 0.7392578125, 1.2158203125, 0.0011234283447265625, 1.154296875, 1.138671875, 0.68798828125], "tokens": [291, 442, 901, 45, 397, 1135, 6512, 32, 2788, 15262, 44, 291, 434, 4296, 26, 25172, 1657, 108, 711, 1348, 438, 312, 8271, 2421, 436, 31377, 623, 47917, 32, 3473, 291, 434, 461, 47917, 32, 15720, 32, 225, 1348, 1395, 526, 1829, 6153, 32, 291, 442, 653, 96, 32, 297, 9079, 473]}
{"line_number": 1017, "line_type": "original", "code": "        return NodeUtil.functionCallHasSideEffects(n, compiler);", "entropy": 1.5791015625, "is_bug_line": false, "sus_score": 0.7560489177703857, "per_token_entropy": [7.7578125, 0.427001953125, 2.939453125, 0.01226043701171875, 0.00167083740234375, 5.625, 3.208984375, 0.442626953125, 0.0313720703125, 0.01849365234375, 0.0097503662109375, 0.0275115966796875, 1.3818359375, 1.7568359375, 0.051666259765625], "tokens": [351, 442, 4004, 1733, 32, 1126, 1853, 3993, 7427, 20126, 26, 96, 30, 8980, 293]}
{"line_number": 1017, "line_type": "generated", "code": "\n    return false;\n  }\n\n  /**\n   * @return Whether the given NAME node is a constant name.\n   */\n  static boolean isConstantName(Node n) {\n    Preconditions.checkState(n.getType() == Token.NAME);\n    return", "entropy": 0.261474609375, "is_bug_line": false, "sus_score": 0.7560489177703857, "per_token_entropy": [0.414794921875, 0.228515625, 0.312744140625, 0.0004832744598388672, 0.0181732177734375, 0.0007867813110351562, 0.314697265625, 0.38720703125, 0.037933349609375, 0.00028586387634277344, 0.7734375, 0.16748046875, 0.1051025390625, 0.333251953125, 2.369140625, 1.96484375, 0.484130859375, 0.5400390625, 0.580078125, 0.5205078125, 1.2353515625, 0.35205078125, 0.039794921875, 0.0789794921875, 0.001659393310546875, 0.32421875, 0.0111846923828125, 0.00041604042053222656, 0.00099945068359375, 0.00060272216796875, 0.0014171600341796875, 0.0087738037109375, 0.0963134765625, 0.0009584426879882812, 0.0003039836883544922, 0.0167236328125, 0.74609375, 5.424022674560547e-05, 0.00122833251953125, 0.236083984375, 0.0006976127624511719, 0.0242156982421875, 0.004047393798828125, 0.03973388671875, 0.0001881122589111328, 0.00028443336486816406, 0.0007543563842773438, 1.7881393432617188e-06, 0.0006737709045410156, 0.060882568359375, 0.1104736328125, 0.64892578125], "tokens": [284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 2702, 8912, 1541, 438, 312, 8082, 636, 32, 664, 569, 334, 907, 1905, 438, 5465, 558, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 1078, 26, 96, 32, 10272, 346, 610, 6512, 32, 2474, 293, 284, 442]}
{"line_number": 1010, "line_type": "original", "code": "    switch(n.getType()) {", "entropy": 2.248046875, "is_bug_line": false, "sus_score": 0.7552894353866577, "per_token_entropy": [6.16015625, 8.2265625, 3.517578125, 0.040802001953125, 0.003055572509765625, 0.005878448486328125, 0.002719879150390625, 0.01983642578125], "tokens": [264, 3578, 26, 96, 32, 10272, 1157, 301]}
{"line_number": 1010, "line_type": "generated", "code": "\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.GET_REF:\n        // A reference to a variable.\n        return n.hasChildren();", "entropy": 0.403564453125, "is_bug_line": false, "sus_score": 0.7552894353866577, "per_token_entropy": [0.33154296875, 0.16796875, 0.0008454322814941406, 0.0005288124084472656, 1.0546875, 0.00414276123046875, 0.0005030632019042969, 0.1107177734375, 0.001674652099609375, 0.00010216236114501953, 7.975101470947266e-05, 0.298095703125, 0.0010175704956054688, 0.007732391357421875, 0.00022590160369873047, 0.0004143714904785156, 3.814697265625e-05, 0.007320404052734375, 6.42538070678711e-05, 0.09381103515625, 0.0030841827392578125, 0.001384735107421875, 6.580352783203125e-05, 0.448486328125, 6.258487701416016e-05, 0.115234375, 0.06829833984375, 0.003253936767578125, 0.0001798868179321289, 0.46044921875, 0.70556640625, 0.0017604827880859375, 0.0012302398681640625, 3.16796875, 0.322998046875, 0.3662109375, 0.0286712646484375, 0.70068359375, 1.19140625, 2.4765625, 1.9150390625, 0.75634765625, 0.384521484375, 1.5771484375, 1.7890625, 0.3134765625, 0.2169189453125, 1.3994140625, 0.0014781951904296875, 0.43994140625, 5.424022674560547e-05, 0.053375244140625], "tokens": [397, 1135, 6512, 32, 17024, 15262, 44, 397, 1135, 6512, 32, 14221, 44, 397, 1135, 6512, 32, 16177, 44, 397, 1135, 6512, 32, 24400, 44, 291, 442, 861, 45, 397, 1135, 6512, 32, 2788, 81, 4182, 44, 291, 434, 399, 4121, 372, 312, 2677, 32, 291, 442, 310, 32, 2040, 7640, 473]}
{"line_number": 224, "line_type": "original", "code": "   * @param n A node that is a member of an Array.", "entropy": 2.130859375, "is_bug_line": false, "sus_score": 0.7540189027786255, "per_token_entropy": [7.21484375, 3.193359375, 0.865234375, 1.3681640625, 0.411376953125, 2.671875, 0.65478515625, 2.435546875, 1.587890625, 1.248046875, 4.35546875, 0.077880859375, 1.0810546875, 3.13671875, 1.66015625], "tokens": [261, 319, 477, 753, 310, 399, 1541, 688, 438, 312, 5809, 432, 600, 2629, 32]}
{"line_number": 224, "line_type": "generated", "code": "\n        }\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child!= TernaryValue.UNKNOWN) {\n          return child.toNumber(0.0);\n        }\n        break;", "entropy": 0.129638671875, "is_bug_line": false, "sus_score": 0.7540189027786255, "per_token_entropy": [0.3310546875, 0.00910186767578125, 0.296142578125, 0.04541015625, 0.00010085105895996094, 1.8596649169921875e-05, 0.5361328125, 3.731250762939453e-05, 0.055694580078125, 0.51220703125, 1.4066696166992188e-05, 4.4345855712890625e-05, 0.1124267578125, 0.10540771484375, 0.00569915771484375, 0.005802154541015625, 4.8041343688964844e-05, 0.0003287792205810547, 0.0003554821014404297, 0.00191497802734375, 0.0011196136474609375, 0.003269195556640625, 2.1457672119140625e-05, 0.0010366439819335938, 0.004558563232421875, 0.1297607421875, 0.002780914306640625, 0.0016870498657226562, 0.11761474609375, 0.045318603515625, 2.2649765014648438e-06, 4.3272972106933594e-05, 1.0013580322265625e-05, 0.009368896484375, 0.01409912109375, 0.00038433074951171875, 0.00493621826171875, 0.07110595703125, 0.1331787109375, 0.004268646240234375, 0.07879638671875, 0.42529296875, 0.07403564453125, 1.99609375, 0.183837890625, 0.0022106170654296875, 0.21875, 0.447265625, 4.947185516357422e-05, 0.494384765625, 0.25537109375, 0.00043272972106933594], "tokens": [291, 320, 1687, 1135, 6512, 32, 3908, 44, 291, 394, 48584, 882, 2838, 280, 622, 24278, 4709, 882, 26, 96, 32, 25657, 2931, 1035, 291, 415, 308, 2661, 863, 394, 48584, 882, 32, 14174, 27, 301, 616, 442, 2838, 32, 452, 1918, 26, 34, 32, 34, 293, 291, 320, 291, 1626, 45]}
{"line_number": 2304, "line_type": "original", "code": "   */", "entropy": 5.40234375, "is_bug_line": false, "sus_score": 0.7515871524810791, "per_token_entropy": [8.0546875, 2.75], "tokens": [261, 569]}
{"line_number": 2304, "line_type": "generated", "code": "\n  public static Node getRootOfQualifiedName(Node n) {\n    if (n.getType() == Token.NAME) {\n      return n;\n    } else if (n.getType() == Token.THIS) {\n      return n;\n    } else", "entropy": 0.110595703125, "is_bug_line": false, "sus_score": 0.7515871524810791, "per_token_entropy": [0.146484375, 0.74267578125, 0.00360107421875, 0.0147705078125, 0.04241943359375, 0.17236328125, 0.00807952880859375, 0.025360107421875, 0.0159454345703125, 0.01971435546875, 0.393798828125, 0.004669189453125, 0.0014314651489257812, 0.0128936767578125, 1.548828125, 0.03741455078125, 0.125244140625, 0.0992431640625, 0.2005615234375, 0.0019512176513671875, 0.10498046875, 0.0005679130554199219, 6.4373016357421875e-06, 0.044708251953125, 0.429443359375, 0.0101470947265625, 0.0172271728515625, 0.020843505859375, 0.006977081298828125, 0.00850677490234375, 0.00902557373046875, 8.344650268554688e-05, 0.57568359375, 0.24658203125, 0.00858306884765625, 0.025543212890625, 0.00023734569549560547, 0.042144775390625, 0.00021219253540039062, 0.08642578125, 0.0002524852752685547, 7.033348083496094e-05, 0.126708984375, 0.0191650390625, 0.00025963783264160156, 0.00504302978515625, 0.0506591796875, 0.05096435546875, 0.0176544189453125, 0.0103912353515625, 1.8715858459472656e-05, 0.2152099609375], "tokens": [334, 562, 907, 4004, 622, 4058, 1419, 41340, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 10272, 346, 610, 6512, 32, 2474, 27, 301, 397, 442, 310, 45, 284, 320, 813, 415, 308, 96, 32, 10272, 346, 610, 6512, 32, 25339, 27, 301, 397, 442, 310, 45, 284, 320, 813]}
{"line_number": 859, "line_type": "original", "code": "    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {", "entropy": 0.7626953125, "is_bug_line": false, "sus_score": 0.7486096620559692, "per_token_entropy": [5.703125, 4.59765625, 0.0092926025390625, 2.19140625, 1.40625, 0.201171875, 1.486328125, 0.3408203125, 0.163330078125, 0.00359344482421875, 0.08935546875, 0.058441162109375, 0.01313018798828125, 0.01004791259765625, 0.00885009765625, 0.419677734375, 0.004364013671875, 0.01386260986328125, 0.0019140243530273438, 0.00039768218994140625, 0.0046234130859375, 0.0565185546875], "tokens": [264, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301]}
{"line_number": 859, "line_type": "generated", "code": "\n  private static final Set<String> ARRAY_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"toLocaleString\", \"concat\", \"join\", \"pop\",\n          \"push\", \"reverse\", \"shift\",", "entropy": 0.1705322265625, "is_bug_line": false, "sus_score": 0.7486096620559692, "per_token_entropy": [0.64306640625, 0.72900390625, 0.00785064697265625, 0.1080322265625, 0.06549072265625, 0.0087890625, 0.003387451171875, 0.00019919872283935547, 2.16015625, 0.0139312744140625, 0.2939453125, 2.4080276489257812e-05, 0.33154296875, 0.0175628662109375, 0.0003669261932373047, 0.053375244140625, 0.00030994415283203125, 0.00016582012176513672, 1.4185905456542969e-05, 0.00146484375, 0.006481170654296875, 0.05206298828125, 0.0751953125, 0.00013458728790283203, 0.02960205078125, 0.002716064453125, 0.396484375, 1.20703125, 0.07989501953125, 0.0036773681640625, 0.703125, 0.0001277923583984375, 0.08447265625, 0.01062774658203125, 0.45556640625, 0.004547119140625, 0.035430908203125, 0.006298065185546875, 0.058380126953125, 0.213134765625, 0.119873046875, 0.00403594970703125, 0.794921875, 0.0004355907440185547, 0.073486328125, 0.000823974609375, 0.0007190704345703125, 0.00579833984375, 0.0027256011962890625, 0.0009493827819824219, 0.00013113021850585938, 0.0017547607421875], "tokens": [334, 945, 907, 1158, 1756, 46, 652, 48, 18559, 81, 18260, 4135, 81, 26510, 81, 22771, 4153, 1139, 4509, 69, 280, 397, 12932, 885, 32, 1028, 440, 3108, 392, 313, 38275, 652, 392, 313, 7232, 392, 313, 2524, 392, 313, 3235, 392, 616, 313, 2018, 392, 313, 9833, 392, 313, 5494, 392]}
{"line_number": 1489, "line_type": "original", "code": "  static Node getAssignedValue(Node n) {", "entropy": 1.400390625, "is_bug_line": false, "sus_score": 0.7415366172790527, "per_token_entropy": [4.328125, 2.603515625, 2.4765625, 0.83642578125, 4.640625, 0.29296875, 0.013580322265625, 0.01007080078125, 0.1759033203125, 0.0158233642578125, 0.010467529296875], "tokens": [225, 907, 4004, 622, 28565, 882, 26, 1212, 310, 27, 301]}
{"line_number": 1489, "line_type": "generated", "code": "\n  /**\n   * Is this a CALL node?\n   */\n  static boolean isCall(Node n) {\n    return n.getType() == Token.CALL;\n  }\n\n  /**\n   * Is this a CALL node that is a function call?\n   */", "entropy": 0.2342529296875, "is_bug_line": false, "sus_score": 0.7415366172790527, "per_token_entropy": [0.237060546875, 0.249267578125, 0.054779052734375, 0.0006036758422851562, 0.77734375, 0.06707763671875, 1.076171875, 0.317626953125, 0.032073974609375, 0.04583740234375, 0.00867462158203125, 0.01934814453125, 0.01300811767578125, 0.011016845703125, 0.0004639625549316406, 4.947185516357422e-05, 0.0027256011962890625, 0.0009775161743164062, 0.0002639293670654297, 0.0009489059448242188, 0.00045418739318847656, 0.00048422813415527344, 0.00664520263671875, 0.005146026611328125, 0.0027408599853515625, 3.1948089599609375e-05, 0.00032448768615722656, 5.507469177246094e-05, 6.437301635742188e-05, 0.0001634359359741211, 7.748603820800781e-06, 0.00013554096221923828, 0.0016775131225585938, 0.0041961669921875, 0.00022423267364501953, 0.52783203125, 0.027587890625, 0.01319122314453125, 0.000446319580078125, 0.453369140625, 0.027740478515625, 0.38232421875, 0.89453125, 0.1541748046875, 2.173828125, 0.87451171875, 1.068359375, 1.2822265625, 0.59521484375, 0.357177734375, 0.065185546875, 0.343994140625], "tokens": [334, 1022, 664, 319, 3611, 458, 312, 16084, 1541, 49, 664, 569, 334, 907, 1905, 438, 1853, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 5038, 45, 334, 320, 719, 1022, 664, 319, 3611, 458, 312, 16084, 1541, 688, 438, 312, 667, 1476, 49, 664, 569]}
{"line_number": 1459, "line_type": "original", "code": "  /**", "entropy": 3.0546875, "is_bug_line": false, "sus_score": 0.7403481006622314, "per_token_entropy": [4.5078125, 1.6005859375], "tokens": [225, 1022]}
{"line_number": 1459, "line_type": "generated", "code": "\n   * Is this a CALL node?\n   */\n  static boolean isCall(Node n) {\n    return n.getType() == Token.CALL;\n  }\n\n  /**\n   * Is this a CALL node that is part of a new expression?\n   */", "entropy": 0.23779296875, "is_bug_line": false, "sus_score": 0.7403481006622314, "per_token_entropy": [0.178466796875, 0.0245208740234375, 0.429443359375, 0.0306243896484375, 0.384521484375, 1.9775390625, 0.2005615234375, 0.04803466796875, 0.0301971435546875, 0.0298309326171875, 0.005962371826171875, 0.006748199462890625, 0.0004444122314453125, 0.0001571178436279297, 0.004222869873046875, 0.0086669921875, 0.0006933212280273438, 0.00331878662109375, 0.0011930465698242188, 0.000789642333984375, 0.0093841552734375, 0.015625, 0.01000213623046875, 0.0007486343383789062, 0.00046563148498535156, 6.937980651855469e-05, 0.00012505054473876953, 0.0003521442413330078, 1.2040138244628906e-05, 5.3048133850097656e-05, 0.003398895263671875, 0.003269195556640625, 0.0003998279571533203, 0.1273193359375, 0.065185546875, 0.2464599609375, 0.0007710456848144531, 0.354736328125, 0.04168701171875, 0.25341796875, 0.70751953125, 0.2081298828125, 1.701171875, 0.7021484375, 1.9677734375, 0.0017642974853515625, 0.478271484375, 1.2080078125, 0.492431640625, 0.215087890625, 0.06365966796875, 0.12152099609375], "tokens": [664, 319, 3611, 458, 312, 16084, 1541, 49, 664, 569, 334, 907, 1905, 438, 1853, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 5038, 45, 334, 320, 719, 1022, 664, 319, 3611, 458, 312, 16084, 1541, 688, 438, 1742, 432, 312, 537, 6101, 49, 664, 569]}
{"line_number": 861, "line_type": "original", "code": "        return true;", "entropy": 2.564453125, "is_bug_line": false, "sus_score": 0.737554669380188, "per_token_entropy": [7.58984375, 0.71826171875, 1.9169921875, 0.02996826171875], "tokens": [351, 442, 861, 45]}
{"line_number": 861, "line_type": "generated", "code": "\n   */\n  static boolean constructorCallHasSideEffects(\n      Node callNode, Node parent, AbstractCompiler compiler) {\n    Preconditions.checkArgument(callNode.getType() == Token.NEW);\n\n    Node nameNode = callNode.getFirstChild();\n   ", "entropy": 0.303466796875, "is_bug_line": false, "sus_score": 0.737554669380188, "per_token_entropy": [1.306640625, 0.5361328125, 0.03985595703125, 0.276611328125, 0.04296875, 1.458984375, 0.067626953125, 0.062469482421875, 0.0277099609375, 0.0013275146484375, 0.0233154296875, 0.400634765625, 0.129150390625, 0.1260986328125, 0.0181884765625, 0.0033855438232421875, 1.873046875, 1.666015625, 0.2286376953125, 0.0677490234375, 0.0016679763793945312, 0.00018799304962158203, 0.0121612548828125, 0.0012559890747070312, 0.140869140625, 1.8564453125, 0.00041294097900390625, 0.0209503173828125, 0.47607421875, 0.00994110107421875, 0.86767578125, 0.0013418197631835938, 0.03594970703125, 0.398681640625, 0.0005087852478027344, 0.013458251953125, 0.0005822181701660156, 5.9604644775390625e-06, 0.60595703125, 0.1256103515625, 0.373779296875, 1.2744140625, 0.8330078125, 0.1214599609375, 0.01092529296875, 0.0190887451171875, 1.6689300537109375e-05, 7.140636444091797e-05, 0.0146026611328125, 2.8133392333984375e-05, 0.0042724609375, 0.20361328125], "tokens": [664, 569, 334, 907, 1905, 4374, 1853, 3993, 7427, 20126, 26, 397, 4004, 1476, 1212, 30, 4004, 2935, 30, 7400, 8115, 8980, 27, 301, 284, 40596, 32, 1553, 3484, 26, 1851, 1212, 32, 10272, 346, 610, 6512, 32, 11356, 293, 446, 4004, 636, 1212, 280, 1476, 1212, 32, 25657, 2931, 473, 284]}
{"line_number": 975, "line_type": "original", "code": "    return true;", "entropy": 3.16015625, "is_bug_line": false, "sus_score": 0.7362186908721924, "per_token_entropy": [4.5, 5.98828125, 2.14453125, 0.004734039306640625], "tokens": [264, 442, 861, 45]}
{"line_number": 975, "line_type": "generated", "code": "\n    }\n  }\n\n  /**\n   * Returns true if the current node's type implies that it has side effects.\n   *\n   * This is a non-recursive version of the may have side effects\n   * check; used to check wherever the current node", "entropy": 0.281494140625, "is_bug_line": false, "sus_score": 0.7362186908721924, "per_token_entropy": [0.1075439453125, 0.0078887939453125, 0.1529541015625, 0.0009288787841796875, 0.261474609375, 0.3671875, 0.060882568359375, 0.000324249267578125, 0.9443359375, 0.46630859375, 0.026580810546875, 0.341796875, 0.70556640625, 0.10418701171875, 0.81591796875, 0.126953125, 0.2587890625, 1.4462890625, 0.79248046875, 2.0703125, 2.04296875, 0.51220703125, 0.58837890625, 0.012939453125, 0.2044677734375, 0.290283203125, 0.004482269287109375, 0.62060546875, 0.2086181640625, 0.10357666015625, 0.56591796875, 0.000743865966796875, 0.001659393310546875, 0.021026611328125, 0.002498626708984375, 0.0184326171875, 0.204345703125, 0.00524139404296875, 0.0034351348876953125, 0.002826690673828125, 0.059173583984375, 0.0003960132598876953, 0.0023212432861328125, 0.031341552734375, 0.005779266357421875, 0.01062774658203125, 0.01259613037109375, 0.0313720703125, 0.0005850791931152344, 0.0035533905029296875, 0.005062103271484375, 0.0007991790771484375], "tokens": [284, 320, 334, 320, 719, 1022, 664, 319, 3759, 861, 415, 322, 1550, 1541, 1182, 827, 34506, 688, 561, 1401, 5209, 15987, 32, 664, 319, 664, 319, 1348, 438, 312, 2979, 31, 19100, 1503, 432, 322, 1631, 1159, 5209, 15987, 664, 319, 1505, 45, 1654, 372, 1505, 2154, 424, 322, 1550, 1541]}
{"line_number": 1496, "line_type": "original", "code": "    } else {", "entropy": 4.3125, "is_bug_line": false, "sus_score": 0.7357290983200073, "per_token_entropy": [6.65625, 3.189453125, 6.24609375, 1.15625], "tokens": [264, 320, 813, 301]}
{"line_number": 1496, "line_type": "generated", "code": "\n  /**\n   * @return Whether the node represents a FOR-OF loop.\n   */\n  static boolean isForOf(Node n) {\n    return n.getType() == Token.FOR_OF;\n  }\n\n  /**\n   * @return Whether the", "entropy": 0.1513671875, "is_bug_line": false, "sus_score": 0.7357290983200073, "per_token_entropy": [1.068359375, 0.66015625, 0.06353759765625, 0.001338958740234375, 0.8076171875, 0.07684326171875, 0.11199951171875, 0.059173583984375, 0.05609130859375, 0.097412109375, 0.120361328125, 0.5595703125, 0.74462890625, 0.281982421875, 0.023406982421875, 0.02435302734375, 0.004718780517578125, 0.004451751708984375, 0.0137481689453125, 0.01291656494140625, 0.0005664825439453125, 0.0005130767822265625, 0.0008730888366699219, 0.0007309913635253906, 0.0008435249328613281, 0.0008058547973632812, 0.0047760009765625, 0.0009813308715820312, 0.0009150505065917969, 0.016998291015625, 0.056671142578125, 0.1837158203125, 0.000812530517578125, 0.00408172607421875, 8.356571197509766e-05, 0.00044274330139160156, 0.0004055500030517578, 9.524822235107422e-05, 0.013946533203125, 0.9921875, 0.056427001953125, 0.433837890625, 0.027496337890625, 0.0014753341674804688, 0.5419921875, 0.07183837890625, 0.0169830322265625, 0.0005893707275390625, 0.474365234375, 0.048828125, 0.07745361328125, 0.045867919921875], "tokens": [334, 1022, 664, 319, 477, 601, 14071, 322, 1541, 10666, 312, 4786, 31, 2109, 5258, 32, 664, 569, 334, 907, 1905, 438, 1562, 1419, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 7321, 81, 2109, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322]}
{"line_number": 1501, "line_type": "original", "code": "  /**", "entropy": 4.5390625, "is_bug_line": false, "sus_score": 0.7356183528900146, "per_token_entropy": [3.552734375, 5.5234375], "tokens": [225, 1022]}
{"line_number": 1501, "line_type": "generated", "code": "\n    return n.getType() == Token.FOR\n        || n.getType() == Token.DO\n        || n.getType() == Token.WHILE;\n  }\n\n  /**\n   * Determines whether the given node is a FOR or WHILE node.\n  ", "entropy": 0.1551513671875, "is_bug_line": false, "sus_score": 0.7356183528900146, "per_token_entropy": [0.346923828125, 0.1654052734375, 0.384521484375, 0.0082855224609375, 0.009490966796875, 0.0015125274658203125, 0.011688232421875, 0.0013885498046875, 9.632110595703125e-05, 0.0655517578125, 0.4140625, 0.00315093994140625, 0.01340484619140625, 0.0002219676971435547, 0.00033164024353027344, 0.00013148784637451172, 4.0531158447265625e-05, 0.00015473365783691406, 0.00011396408081054688, 0.414794921875, 0.01264190673828125, 0.0011339187622070312, 0.002147674560546875, 8.320808410644531e-05, 0.0001417398452758789, 6.461143493652344e-05, 0.00012564659118652344, 0.00011050701141357422, 9.763240814208984e-05, 0.0007529258728027344, 8.344650268554688e-07, 0.033477783203125, 0.12457275390625, 0.0017986297607421875, 0.2384033203125, 0.0625, 0.018463134765625, 0.0004601478576660156, 0.63623046875, 0.0175628662109375, 0.09283447265625, 0.05633544921875, 0.08697509765625, 0.1512451171875, 0.215087890625, 1.9248046875, 1.3994140625, 0.98046875, 0.00030231475830078125, 0.09344482421875, 0.07403564453125, 0.006557464599609375], "tokens": [284, 442, 310, 32, 10272, 346, 610, 6512, 32, 7321, 291, 1276, 310, 32, 10272, 346, 610, 6512, 32, 1680, 291, 1276, 310, 32, 10272, 346, 610, 6512, 32, 11990, 5311, 45, 334, 320, 719, 1022, 664, 319, 34450, 4946, 322, 2702, 1541, 438, 312, 4786, 556, 8741, 5311, 1541, 32, 664]}
{"line_number": 1679, "line_type": "original", "code": "", "entropy": 4.30859375, "is_bug_line": false, "sus_score": 0.7284299731254578, "per_token_entropy": [4.30859375], "tokens": [203]}
{"line_number": 1679, "line_type": "generated", "code": "\n    return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && n == parent.getFirstChild();\n  }\n\n  /** Whether the node is a CATCH container BLOCK. */\n  static boolean isCatchNodeContainer(Node n", "entropy": 0.204345703125, "is_bug_line": false, "sus_score": 0.7284299731254578, "per_token_entropy": [0.265380859375, 0.324951171875, 0.2218017578125, 0.4599609375, 0.0246124267578125, 0.00014913082122802734, 0.0011320114135742188, 0.0003676414489746094, 1.1682510375976562e-05, 0.4873046875, 0.2427978515625, 0.371337890625, 0.0017633438110351562, 0.10986328125, 0.0114593505859375, 0.00023639202117919922, 0.1319580078125, 0.0013093948364257812, 0.32958984375, 0.2310791015625, 0.012359619140625, 0.50048828125, 0.170166015625, 0.006893157958984375, 0.001056671142578125, 0.54052734375, 0.0010557174682617188, 0.2054443359375, 0.08673095703125, 0.01287841796875, 0.261474609375, 0.08099365234375, 0.56982421875, 0.04473876953125, 0.1378173828125, 0.0258636474609375, 0.373291015625, 0.62841796875, 1.2314453125, 0.1572265625, 0.1656494140625, 0.0010089874267578125, 0.002750396728515625, 0.0256805419921875, 0.004425048828125, 0.007663726806640625, 0.9638671875, 0.81640625, 0.356201171875, 0.00568389892578125, 0.0008945465087890625, 0.0109100341796875], "tokens": [284, 442, 2935, 32, 10272, 346, 610, 6512, 32, 6582, 962, 2935, 32, 24213, 1534, 346, 610, 225, 37, 291, 962, 310, 610, 2935, 32, 25657, 2931, 473, 334, 320, 719, 1022, 14071, 322, 1541, 438, 312, 33413, 3851, 20313, 32, 569, 334, 907, 1905, 438, 20377, 1212, 2879, 26, 1212, 310]}
{"line_number": 1490, "line_type": "original", "code": "    Preconditions.checkState(isName(n));", "entropy": 1.869140625, "is_bug_line": false, "sus_score": 0.7211883068084717, "per_token_entropy": [2.5234375, 10.6015625, 0.07086181640625, 0.0258331298828125, 0.837890625, 0.0235595703125, 0.66748046875, 4.5625, 0.07440185546875, 0.37158203125, 0.80224609375], "tokens": [264, 40596, 32, 1553, 1078, 26, 297, 558, 26, 96, 876]}
{"line_number": 1490, "line_type": "generated", "code": "\n   * Is this a CALL node?\n   */\n  static boolean isCall(Node n) {\n    return n.getType() == Token.CALL;\n  }\n\n  /**\n   * Is this a CALL node for a function named {@code name}?\n   *", "entropy": 0.2265625, "is_bug_line": false, "sus_score": 0.7211883068084717, "per_token_entropy": [0.583984375, 0.1915283203125, 0.314697265625, 0.03302001953125, 0.79931640625, 0.09234619140625, 0.0167694091796875, 0.015838623046875, 0.04443359375, 0.01641845703125, 0.01064300537109375, 0.00423431396484375, 0.00026917457580566406, 5.2094459533691406e-05, 0.0019178390502929688, 0.0008721351623535156, 0.00018489360809326172, 0.0003762245178222656, 0.00036334991455078125, 0.0016431808471679688, 0.031768798828125, 0.00661468505859375, 0.0021953582763671875, 0.00029158592224121094, 0.0001550912857055664, 3.8743019104003906e-05, 5.054473876953125e-05, 0.00010859966278076172, 5.4836273193359375e-06, 0.00014674663543701172, 0.00104522705078125, 0.0036487579345703125, 0.00029087066650390625, 0.1815185546875, 0.027435302734375, 0.184326171875, 0.0005936622619628906, 0.354248046875, 0.0240020751953125, 0.43896484375, 1.3271484375, 0.185546875, 2.390625, 0.90625, 1.1455078125, 0.385986328125, 0.51416015625, 0.005496978759765625, 0.74169921875, 0.133056640625, 0.0196380615234375, 0.64013671875], "tokens": [664, 319, 3611, 458, 312, 16084, 1541, 49, 664, 569, 334, 907, 1905, 438, 1853, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 5038, 45, 334, 320, 719, 1022, 664, 319, 3611, 458, 312, 16084, 1541, 436, 312, 667, 8189, 3088, 687, 636, 37613, 664, 319]}
{"line_number": 2320, "line_type": "original", "code": "      Node propNode = Node.newString(Token.STRING, part, lineno, charno);", "entropy": 1.373046875, "is_bug_line": false, "sus_score": 0.7211364507675171, "per_token_entropy": [4.921875, 4.0625, 6.0234375, 0.1527099609375, 0.04388427734375, 1.189453125, 0.88232421875, 0.000621795654296875, 0.0006861686706542969, 0.00586700439453125, 0.47314453125, 0.0007882118225097656, 0.436767578125, 0.007350921630859375, 8.140625, 0.2467041015625, 2.12109375, 0.01136016845703125, 0.0919189453125, 0.0008120536804199219, 0.01332855224609375], "tokens": [647, 4004, 7018, 1212, 280, 4004, 32, 890, 652, 26, 1763, 32, 5203, 30, 1742, 30, 39997, 30, 1351, 1347, 293]}
{"line_number": 2320, "line_type": "generated", "code": "\n   * @param basisNode The node that represents the name as currently found in\n   *     the AST.\n   * @param originalName The original name of the item being represented by the\n   *     NAME node. Used for debugging information.\n   */\n ", "entropy": 0.048492431640625, "is_bug_line": false, "sus_score": 0.7211364507675171, "per_token_entropy": [0.202392578125, 0.2239990234375, 0.03497314453125, 0.00305938720703125, 0.13427734375, 0.06549072265625, 0.06671142578125, 0.1666259765625, 0.469482421875, 0.1182861328125, 0.01245880126953125, 0.2342529296875, 0.018768310546875, 0.01378631591796875, 0.018951416015625, 0.0100860595703125, 0.03839111328125, 0.00040078163146972656, 0.0241241455078125, 0.0005679130554199219, 0.01119232177734375, 0.030029296875, 0.2274169921875, 0.0149383544921875, 0.004863739013671875, 0.0011997222900390625, 0.01343536376953125, 0.001384735107421875, 0.00385284423828125, 0.0048675537109375, 0.0030460357666015625, 0.0046234130859375, 0.0012140274047851562, 0.01255035400390625, 0.01476287841796875, 0.0020465850830078125, 0.005268096923828125, 0.00872039794921875, 0.0038280487060546875, 3.325939178466797e-05, 0.0012044906616210938, 0.060272216796875, 0.057769775390625, 0.0052490234375, 0.058380126953125, 0.0005578994750976562, 0.00241851806640625, 0.0008592605590820312, 0.0027904510498046875, 0.044586181640625, 0.054168701171875, 0.006877899169921875], "tokens": [664, 319, 477, 753, 14977, 1212, 886, 1541, 688, 10666, 322, 636, 619, 5927, 2431, 328, 664, 319, 262, 322, 16095, 32, 664, 319, 477, 753, 4707, 558, 886, 4707, 636, 432, 322, 1623, 3998, 17718, 810, 322, 664, 319, 262, 8912, 1541, 32, 12781, 436, 15066, 2471, 32, 664, 569, 334]}
{"line_number": 1219, "line_type": "original", "code": "      case Token.MOD:", "entropy": 2.05078125, "is_bug_line": false, "sus_score": 0.7155875563621521, "per_token_entropy": [5.6484375, 0.0506591796875, 0.0002760887145996094, 0.000133514404296875, 6.6015625, 0.004055023193359375], "tokens": [647, 1135, 6512, 32, 6719, 44]}
{"line_number": 1219, "line_type": "generated", "code": "\n      case Token.LE:\n      case Token.GE:\n      // Conditional expressions\n      case Token.HOOK:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return", "entropy": 0.222900390625, "is_bug_line": false, "sus_score": 0.7155875563621521, "per_token_entropy": [0.1185302734375, 0.0191650390625, 7.998943328857422e-05, 7.3909759521484375e-06, 0.147705078125, 0.0001214742660522461, 0.005214691162109375, 0.00011277198791503906, 9.298324584960938e-06, 1.9431114196777344e-05, 0.002025604248046875, 0.00011456012725830078, 0.491943359375, 0.6201171875, 3.73046875, 1.67578125, 0.05438232421875, 0.002201080322265625, 3.337860107421875e-05, 6.186962127685547e-05, 0.17138671875, 0.00011730194091796875, 0.5, 0.017425537109375, 0.0008077621459960938, 0.00013566017150878906, 0.045623779296875, 0.98779296875, 8.225440979003906e-05, 4.208087921142578e-05, 1.056640625, 9.942054748535156e-05, 0.0294189453125, 0.34716796875, 0.01187896728515625, 0.0004572868347167969, 0.002349853515625, 3.135204315185547e-05, 0.00021207332611083984, 0.0011730194091796875, 0.006336212158203125, 0.257080078125, 0.0247955322265625, 0.009735107421875, 0.0096282958984375, 0.00548553466796875, 0.0026226043701171875, 1.1689453125, 0.0457763671875, 0.0027980804443359375, 0.00402069091796875, 0.01195526123046875], "tokens": [397, 1135, 6512, 32, 815, 44, 397, 1135, 6512, 32, 3055, 44, 397, 434, 40319, 15866, 397, 1135, 6512, 32, 29243, 44, 291, 442, 861, 45, 397, 1135, 6512, 32, 2474, 44, 291, 892, 636, 280, 310, 32, 7069, 473, 291, 415, 308, 426, 32, 3574, 440, 11126, 2131, 301, 616, 442]}
{"line_number": 1196, "line_type": "original", "code": "      new NumbericResultPredicate();", "entropy": 2.865234375, "is_bug_line": false, "sus_score": 0.7113603353500366, "per_token_entropy": [7.6484375, 6.0546875, 5.328125, 0.0130157470703125, 0.0034580230712890625, 0.0031261444091796875, 1.0146484375], "tokens": [647, 537, 5104, 295, 1394, 12688, 473]}
{"line_number": 1196, "line_type": "generated", "code": "\n\n  /**\n   * Returns true if the result of node evaluation is always a boolean\n   */\n  static boolean isBooleanResult(Node n) {\n    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n  }\n\n  static boolean isBooleanResult", "entropy": 0.0263824462890625, "is_bug_line": false, "sus_score": 0.7113603353500366, "per_token_entropy": [0.357421875, 0.2315673828125, 0.0156707763671875, 0.0002713203430175781, 0.038604736328125, 0.00817108154296875, 0.007411956787109375, 0.0165863037109375, 0.0203857421875, 0.0073394775390625, 0.037567138671875, 0.008148193359375, 0.0516357421875, 0.0599365234375, 0.08251953125, 0.05657958984375, 0.091796875, 0.0302734375, 0.0040435791015625, 0.006717681884765625, 0.001415252685546875, 0.0003707408905029297, 0.0005922317504882812, 0.00012755393981933594, 0.0006146430969238281, 0.000293731689453125, 0.0031909942626953125, 0.00028705596923828125, 0.0005421638488769531, 0.0135040283203125, 0.008758544921875, 0.005168914794921875, 1.0371208190917969e-05, 0.00027632713317871094, 0.00020647048950195312, 0.0004761219024658203, 0.021820068359375, 0.0003943443298339844, 0.004207611083984375, 0.001438140869140625, 0.0003993511199951172, 0.0008111000061035156, 0.0002932548522949219, 0.0027904510498046875, 0.0075225830078125, 0.0003476142883300781, 0.02374267578125, 0.12042236328125, 0.0096282958984375, 0.006816864013671875, 0.002300262451171875, 0.00026679039001464844], "tokens": [719, 1022, 664, 319, 3759, 861, 415, 322, 1056, 432, 1541, 11903, 438, 5182, 312, 1905, 664, 569, 334, 907, 1905, 438, 4709, 1394, 26, 1212, 310, 27, 301, 284, 442, 786, 2140, 26, 96, 30, 36143, 81, 6383, 81, 2883, 54, 31198, 293, 334, 320, 719, 907, 1905, 438, 4709, 1394]}
{"line_number": 1197, "line_type": "original", "code": "", "entropy": 5.73828125, "is_bug_line": false, "sus_score": 0.6949650645256042, "per_token_entropy": [5.73828125], "tokens": [203]}
{"line_number": 1197, "line_type": "generated", "code": "\n  /**\n   * Returns true if the result of node evaluation is always a boolean\n   */\n  static boolean isBooleanResult(Node n) {\n    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n  }\n\n  static boolean isBooleanResult", "entropy": 0.0217132568359375, "is_bug_line": false, "sus_score": 0.6949650645256042, "per_token_entropy": [0.09637451171875, 0.1561279296875, 0.0173797607421875, 0.00021946430206298828, 0.030914306640625, 0.0070037841796875, 0.00905609130859375, 0.0181427001953125, 0.0202484130859375, 0.006946563720703125, 0.037078857421875, 0.00792694091796875, 0.0455322265625, 0.061279296875, 0.0716552734375, 0.043212890625, 0.1080322265625, 0.0312042236328125, 0.006046295166015625, 0.0065460205078125, 0.000965118408203125, 0.0004336833953857422, 0.0005407333374023438, 0.00010585784912109375, 0.00041556358337402344, 0.0002598762512207031, 0.002162933349609375, 0.0002865791320800781, 0.0003039836883544922, 0.005916595458984375, 0.00894927978515625, 0.00504302978515625, 1.1086463928222656e-05, 8.630752563476562e-05, 0.0001424551010131836, 0.00106048583984375, 0.1551513671875, 0.000484466552734375, 0.00399017333984375, 0.001674652099609375, 0.0004878044128417969, 0.0007958412170410156, 0.00030732154846191406, 0.00432586669921875, 0.003131866455078125, 8.678436279296875e-05, 0.049591064453125, 0.0841064453125, 0.00865936279296875, 0.00662994384765625, 0.0013322830200195312, 0.00026607513427734375], "tokens": [334, 1022, 664, 319, 3759, 861, 415, 322, 1056, 432, 1541, 11903, 438, 5182, 312, 1905, 664, 569, 334, 907, 1905, 438, 4709, 1394, 26, 1212, 310, 27, 301, 284, 442, 786, 2140, 26, 96, 30, 36143, 81, 6383, 81, 2883, 54, 31198, 293, 334, 320, 719, 907, 1905, 438, 4709, 1394]}
{"line_number": 1503, "line_type": "original", "code": "   */", "entropy": 7.0625, "is_bug_line": false, "sus_score": 0.6941778659820557, "per_token_entropy": [7.765625, 6.36328125], "tokens": [261, 569]}
{"line_number": 1503, "line_type": "generated", "code": "\n      case Token.WHILE:\n      case Token.DO:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Determines whether the given node is a statement node.\n   */\n  static boolean isStatement(Node n", "entropy": 0.1900634765625, "is_bug_line": false, "sus_score": 0.6941778659820557, "per_token_entropy": [0.611328125, 0.023712158203125, 0.00014090538024902344, 1.990795135498047e-05, 1.2734375, 2.1457672119140625e-06, 8.749961853027344e-05, 0.375244140625, 0.0007648468017578125, 0.00014197826385498047, 2.9325485229492188e-05, 0.0005846023559570312, 0.0009179115295410156, 0.08697509765625, 0.0220794677734375, 0.004314422607421875, 7.021427154541016e-05, 0.347900390625, 0.02899169921875, 0.0003025531768798828, 0.005657196044921875, 0.00850677490234375, 0.0006036758422851562, 0.0001270771026611328, 0.00732421875, 0.0001399517059326172, 0.005466461181640625, 0.0006570816040039062, 0.1414794921875, 0.058441162109375, 0.035888671875, 0.0004775524139404297, 0.55712890625, 0.0216827392578125, 0.10650634765625, 0.061431884765625, 0.09051513671875, 0.150390625, 0.21875, 3.361328125, 1.75, 0.259765625, 0.053192138671875, 0.13671875, 0.001369476318359375, 0.0305938720703125, 0.0006146430969238281, 0.00012028217315673828, 0.002166748046875, 0.024169921875, 0.0021686553955078125, 0.00899505615234375], "tokens": [397, 1135, 6512, 32, 11990, 5311, 44, 397, 1135, 6512, 32, 1680, 44, 291, 442, 861, 45, 397, 1244, 44, 291, 442, 901, 45, 284, 320, 334, 320, 719, 1022, 664, 319, 34450, 4946, 322, 2702, 1541, 438, 312, 7603, 1541, 32, 664, 569, 334, 907, 1905, 438, 5495, 26, 1212, 310]}
