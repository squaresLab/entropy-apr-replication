{"line_number": 3041, "line_type": "original", "code": "", "entropy": 0.257080078125, "is_bug_line": false, "sus_score": 0.5866618752479553, "per_token_entropy": [0.257080078125], "tokens": [203]}
{"line_number": 3041, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5866618752479553, "per_token_entropy": [], "tokens": []}
{"line_number": 991, "line_type": "original", "code": "        if (rValue != null && rValue.isObjectLit()) {", "entropy": 1.3525390625, "is_bug_line": false, "sus_score": 0.5850121378898621, "per_token_entropy": [4.64453125, 1.4736328125, 0.340087890625, 9.71875, 0.2413330078125, 0.59228515625, 0.003284454345703125, 0.5517578125, 0.41796875, 0.0036983489990234375, 0.004993438720703125, 2.11328125, 0.0070037841796875, 0.133056640625, 0.032470703125], "tokens": [351, 415, 308, 100, 882, 863, 744, 962, 540, 882, 32, 37704, 27472, 1157, 301]}
{"line_number": 991, "line_type": "generated", "code": "\n     */\n    private void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkState(n.isName() || n.isGetProp());\n      Preconditions.checkState(\n          parent.isAssign()", "entropy": 0.24658203125, "is_bug_line": false, "sus_score": 0.5850121378898621, "per_token_entropy": [0.311279296875, 1.2138671875, 0.021270751953125, 0.0833740234375, 0.0092926025390625, 0.004741668701171875, 0.0167083740234375, 0.01142120361328125, 0.0828857421875, 0.007808685302734375, 8.559226989746094e-05, 0.0066375732421875, 0.00150299072265625, 0.00020062923431396484, 0.01494598388671875, 7.152557373046875e-07, 0.002643585205078125, 0.004375457763671875, 0.0753173828125, 0.0012731552124023438, 0.0040283203125, 0.005809783935546875, 0.083251953125, 0.75927734375, 0.0005445480346679688, 0.02252197265625, 0.91015625, 0.037017822265625, 0.7275390625, 0.032012939453125, 0.09521484375, 0.0621337890625, 0.13916015625, 0.018646240234375, 0.06463623046875, 0.0002694129943847656, 0.0266571044921875, 0.0140228271484375, 0.0017299652099609375, 0.41455078125, 0.3828125, 0.82177734375, 7.581710815429688e-05, 0.029205322265625, 0.1590576171875, 0.09564208984375, 2.171875, 1.783203125, 0.267578125, 0.146240234375, 1.666015625, 0.00783538818359375], "tokens": [275, 569, 284, 945, 763, 5597, 9490, 26, 1212, 310, 30, 4004, 2935, 30, 7750, 620, 827, 30, 1905, 43134, 27, 301, 397, 40596, 32, 1553, 1078, 26, 96, 32, 297, 558, 346, 1276, 310, 32, 297, 936, 6567, 1035, 397, 40596, 32, 1553, 1078, 26, 616, 2935, 32, 297, 9079, 346]}
{"line_number": 1004, "line_type": "original", "code": "              enumType.defineElement(keyName, key);", "entropy": 2.65234375, "is_bug_line": false, "sus_score": 0.584190309047699, "per_token_entropy": [8.3046875, 7.73828125, 0.88134765625, 1.31640625, 2.595703125, 2.779296875, 0.09063720703125, 1.208984375, 0.339111328125, 0.9375, 3.92578125, 1.716796875], "tokens": [2850, 3833, 620, 32, 1234, 1308, 26, 678, 558, 30, 1202, 293]}
{"line_number": 1004, "line_type": "generated", "code": "\n        Preconditions.checkArgument(\n            parent.isObjectLit());\n      }\n\n      // Only allow variables to be declared once.\n      if (scope.hasSlot(n)) {\n        return;\n      }\n\n      // Don't declare externs.\n      if (n", "entropy": 0.697265625, "is_bug_line": false, "sus_score": 0.584190309047699, "per_token_entropy": [1.1845703125, 0.421875, 0.0008716583251953125, 0.00241851806640625, 0.17578125, 0.01427459716796875, 0.8232421875, 0.6162109375, 0.0124969482421875, 0.23388671875, 0.0253448486328125, 1.556640625, 0.196533203125, 0.00034999847412109375, 0.175537109375, 1.537109375, 2.732421875, 0.7607421875, 3.365234375, 1.00390625, 0.155517578125, 0.7158203125, 1.7626953125, 0.3720703125, 0.085693359375, 0.8837890625, 0.19091796875, 2.109375, 0.03582763671875, 1.2607421875, 0.131591796875, 0.0020389556884765625, 0.024627685546875, 0.5068359375, 0.00421905517578125, 0.148681640625, 1.15625, 0.0015058517456054688, 0.01448822021484375, 0.00024259090423583984, 0.1322021484375, 1.3505859375, 2.626953125, 0.0005011558532714844, 1.5458984375, 3.279296875, 0.472412109375, 1.154296875, 0.1634521484375, 0.22998046875, 0.06683349609375, 0.8203125], "tokens": [291, 40596, 32, 1553, 3484, 26, 324, 2935, 32, 37704, 27472, 1035, 397, 320, 1687, 434, 9287, 2608, 4886, 372, 526, 17103, 5049, 32, 397, 415, 308, 3473, 32, 2040, 9490, 26, 96, 490, 301, 291, 442, 45, 397, 320, 1687, 434, 12029, 1330, 8864, 12098, 101, 32, 397, 415, 308, 96]}
{"line_number": 923, "line_type": "original", "code": "        }", "entropy": 9.25, "is_bug_line": false, "sus_score": 0.5836263298988342, "per_token_entropy": [5.55859375, 12.9375], "tokens": [351, 320]}
{"line_number": 923, "line_type": "generated", "code": "\n        JSDocInfo info, Node lValueNode) {\n      // If this is a literal object, then we want to\n      // create an enum type based on the values in the\n      // object.\n      if (rValue.isObjectLit()) {", "entropy": 0.62451171875, "is_bug_line": false, "sus_score": 0.5836263298988342, "per_token_entropy": [0.284912109375, 0.183837890625, 1.823902130126953e-05, 4.76837158203125e-07, 0.0007295608520507812, 0.003353118896484375, 0.01432037353515625, 0.1453857421875, 0.006206512451171875, 0.0020885467529296875, 0.00949859619140625, 0.11248779296875, 0.04931640625, 0.31640625, 1.8349609375, 2.65625, 1.2265625, 0.373046875, 1.31640625, 2.400390625, 1.318359375, 0.2822265625, 0.79443359375, 1.4248046875, 2.2578125, 0.08795166015625, 2.6328125, 0.0011148452758789062, 1.392578125, 0.50341796875, 0.30908203125, 0.464599609375, 1.83984375, 0.047271728515625, 0.62890625, 2.568359375, 1.287109375, 0.7841796875, 0.53955078125, 0.0045166015625, 0.492919921875, 0.5009765625, 0.259521484375, 0.76708984375, 0.0197296142578125, 0.1832275390625, 0.00010573863983154297, 0.030517578125, 0.012115478515625, 0.00676727294921875, 0.08160400390625, 0.0007967948913574219], "tokens": [291, 971, 3181, 542, 1120, 3099, 30, 4004, 456, 882, 1212, 27, 301, 397, 434, 1670, 458, 438, 312, 10652, 1300, 30, 1615, 996, 2637, 372, 397, 434, 1487, 600, 3833, 827, 4122, 544, 322, 2078, 328, 322, 397, 434, 1300, 32, 397, 415, 308, 100, 882, 32, 37704, 27472, 1157, 301]}
{"line_number": 3073, "line_type": "original", "code": "", "entropy": 0.257080078125, "is_bug_line": false, "sus_score": 0.5805816054344177, "per_token_entropy": [0.257080078125], "tokens": [203]}
{"line_number": 3073, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5805816054344177, "per_token_entropy": [], "tokens": []}
{"line_number": 1320, "line_type": "original", "code": "        FunctionType superCtor = getFunctionType(", "entropy": 1.4775390625, "is_bug_line": false, "sus_score": 0.5802348256111145, "per_token_entropy": [5.421875, 4.0859375, 0.00553131103515625, 3.0390625, 0.075439453125, 0.059814453125, 0.57861328125, 0.0261383056640625, 0.006679534912109375], "tokens": [351, 4540, 620, 2599, 30092, 280, 622, 44334, 26]}
{"line_number": 1320, "line_type": "generated", "code": "\n    }\n\n    /**\n     * @param delegateRelationship The delegate relationship to apply.\n     */\n    private void applyDelegateRelationship(DelegateRelationship delegateRelationship) {\n      FunctionType delegateType = getFunctionType(\n          scope.getVar(delegateRelationship.delegateName));\n     ", "entropy": 0.321533203125, "is_bug_line": false, "sus_score": 0.5802348256111145, "per_token_entropy": [0.57763671875, 0.058990478515625, 0.2005615234375, 0.689453125, 0.036956787109375, 0.0001443624496459961, 2.951171875, 0.291748046875, 0.2110595703125, 0.07891845703125, 1.28515625, 1.1025390625, 0.2529296875, 0.9482421875, 0.37353515625, 0.30615234375, 0.03485107421875, 0.1163330078125, 0.0012416839599609375, 0.12939453125, 0.007015228271484375, 0.0009355545043945312, 5.1975250244140625e-05, 3.933906555175781e-06, 0.00481414794921875, 1.0556640625, 3.4332275390625e-05, 0.1798095703125, 0.038787841796875, 0.0026111602783203125, 0.01959228515625, 0.072021484375, 1.646484375, 0.0030879974365234375, 1.076171875, 0.93310546875, 0.0167236328125, 0.8251953125, 0.01035308837890625, 0.0020122528076171875, 0.13427734375, 0.0259552001953125, 0.00021958351135253906, 0.008209228515625, 0.00226593017578125, 0.01039886474609375, 4.887580871582031e-06, 7.677078247070312e-05, 0.38525390625, 0.473388671875, 0.01296234130859375, 0.12286376953125], "tokens": [284, 320, 446, 1022, 275, 319, 477, 753, 11165, 13175, 886, 11165, 12112, 372, 4871, 32, 275, 569, 284, 945, 763, 4871, 8004, 13175, 26, 8004, 13175, 11165, 13175, 27, 301, 397, 4540, 620, 11165, 620, 280, 622, 44334, 26, 616, 4576, 32, 48086, 26, 14388, 13175, 32, 14388, 558, 876, 397]}
{"line_number": 987, "line_type": "original", "code": "        JSType elementsType =", "entropy": 3.6875, "is_bug_line": false, "sus_score": 0.5780428051948547, "per_token_entropy": [4.0625, 4.52734375, 0.007720947265625, 13.3671875, 0.02642822265625, 0.136474609375], "tokens": [351, 7750, 620, 4702, 620, 280]}
{"line_number": 987, "line_type": "generated", "code": "\n     * @param name the defining node. It must be a {@link Token#NAME}.\n     * @param parent the {@code name}'s parent.\n     * @param type the variable's type. It may be {@code null}, in which case", "entropy": 0.05859375, "is_bug_line": false, "sus_score": 0.5780428051948547, "per_token_entropy": [0.387451171875, 0.048187255859375, 0.270263671875, 0.015777587890625, 0.06878662109375, 0.0791015625, 0.055145263671875, 0.01107025146484375, 0.038970947265625, 0.200927734375, 0.075439453125, 0.0101776123046875, 0.0335693359375, 0.058197021484375, 0.007503509521484375, 0.004024505615234375, 0.0004062652587890625, 0.001194000244140625, 0.392333984375, 0.02532958984375, 0.00955963134765625, 0.00702667236328125, 0.0008144378662109375, 0.08203125, 0.005702972412109375, 0.01006317138671875, 0.0008525848388671875, 0.0013284683227539062, 0.0007948875427246094, 0.0004184246063232422, 0.00074005126953125, 0.0105133056640625, 0.0159454345703125, 0.34423828125, 0.00604248046875, 0.023162841796875, 0.271240234375, 0.024566650390625, 0.01068878173828125, 0.0016527175903320312, 0.0170135498046875, 0.06182861328125, 0.2080078125, 0.0428466796875, 0.0229644775390625, 0.0286712646484375, 0.002109527587890625, 0.0015087127685546875, 0.035125732421875, 0.0083770751953125, 0.0006046295166015625, 0.0062713623046875], "tokens": [275, 319, 477, 753, 636, 322, 20720, 1541, 32, 2030, 2298, 526, 312, 3088, 1204, 6512, 21, 2474, 4009, 275, 319, 477, 753, 2935, 322, 3088, 687, 636, 8129, 101, 2935, 32, 275, 319, 477, 753, 827, 322, 2677, 1182, 827, 32, 2030, 1631, 526, 3088, 687, 744, 835, 328, 1510, 1135]}
{"line_number": 3059, "line_type": "original", "code": "", "entropy": 0.257080078125, "is_bug_line": false, "sus_score": 0.5780289173126221, "per_token_entropy": [0.257080078125], "tokens": [203]}
{"line_number": 3059, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5780289173126221, "per_token_entropy": [], "tokens": []}
{"line_number": 678, "line_type": "original", "code": "     * Extracts type information from either the {@code @type} tag or from", "entropy": 2.056640625, "is_bug_line": false, "sus_score": 0.5774622559547424, "per_token_entropy": [5.38671875, 1.720703125, 8.7265625, 0.97412109375, 3.6171875, 0.251708984375, 0.2578125, 7.09765625, 1.0791015625, 0.74072265625, 0.0216827392578125, 0.1402587890625, 0.26416015625, 0.00962066650390625, 1.5556640625, 0.85107421875, 2.28515625], "tokens": [262, 319, 15218, 101, 827, 2471, 645, 3154, 322, 3088, 687, 477, 681, 111, 2604, 556, 645]}
{"line_number": 678, "line_type": "generated", "code": "\n        }\n        for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n          if (c.isName()) {\n            defineSlot(c, n, null);\n          }\n        }\n      } else {\n       ", "entropy": 0.2076416015625, "is_bug_line": false, "sus_score": 0.5774622559547424, "per_token_entropy": [0.7783203125, 0.0182037353515625, 0.83154296875, 0.47265625, 0.003032684326171875, 0.0090179443359375, 1.2109375, 0.00373077392578125, 0.0114288330078125, 0.00316619873046875, 0.00643157958984375, 0.0029659271240234375, 0.0625, 0.01019287109375, 0.0015964508056640625, 0.0013475418090820312, 0.0042724609375, 0.0251007080078125, 0.0017805099487304688, 0.0002498626708984375, 9.322166442871094e-05, 0.00011706352233886719, 0.0027618408203125, 0.00164794921875, 0.009552001953125, 1.630859375, 0.1558837890625, 0.343017578125, 0.055877685546875, 0.3681640625, 0.95654296875, 0.09197998046875, 0.0014657974243164062, 0.009735107421875, 0.7421875, 0.95654296875, 0.01232147216796875, 0.0233154296875, 0.0087127685546875, 0.1761474609375, 0.10137939453125, 0.5751953125, 0.2138671875, 0.06524658203125, 5.3763389587402344e-05, 0.4375, 3.063678741455078e-05, 0.09686279296875, 0.00040221214294433594, 0.01495361328125, 0.26318359375, 0.0266571044921875], "tokens": [291, 320, 291, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301, 616, 415, 308, 85, 32, 297, 558, 1157, 301, 324, 5597, 9490, 26, 85, 30, 310, 30, 744, 293, 616, 320, 291, 320, 397, 320, 813, 301, 291]}
{"line_number": 752, "line_type": "original", "code": "", "entropy": 4.56640625, "is_bug_line": false, "sus_score": 0.5764546394348145, "per_token_entropy": [4.56640625], "tokens": [203]}
{"line_number": 752, "line_type": "generated", "code": "\n      return true;\n    }\n\n    /**\n     * Creates a {@link FunctionType} from a function literal node.\n     * @param n The function literal node.\n     * @param functionName The function's declared name, if any.\n     * @param", "entropy": 0.37109375, "is_bug_line": false, "sus_score": 0.5764546394348145, "per_token_entropy": [0.0687255859375, 0.56982421875, 1.25, 0.0013666152954101562, 0.04327392578125, 0.0009589195251464844, 0.2105712890625, 0.1273193359375, 0.0472412109375, 0.00013017654418945312, 1.22265625, 0.127197265625, 0.91796875, 0.0631103515625, 0.01219940185546875, 0.0015878677368164062, 0.0360107421875, 0.984375, 1.4267578125, 0.7607421875, 0.7939453125, 1.1669921875, 0.27978515625, 0.09283447265625, 0.46826171875, 0.63916015625, 0.028717041015625, 0.634765625, 0.3291015625, 0.2802734375, 0.2427978515625, 0.1204833984375, 0.12481689453125, 0.0287933349609375, 0.01293182373046875, 0.00197601318359375, 0.0234222412109375, 0.44580078125, 0.003162384033203125, 0.04473876953125, 1.0556640625, 0.7265625, 1.1201171875, 0.10577392578125, 0.7841796875, 1.03515625, 0.56640625, 0.09161376953125, 0.113525390625, 0.00992584228515625, 0.038238525390625, 0.01502227783203125], "tokens": [397, 442, 861, 45, 284, 320, 446, 1022, 275, 319, 9301, 312, 3088, 1204, 4540, 620, 111, 645, 312, 667, 10652, 1541, 32, 275, 319, 477, 753, 310, 886, 667, 10652, 1541, 32, 275, 319, 477, 753, 667, 558, 886, 667, 1182, 17103, 636, 30, 415, 1346, 32, 275, 319, 477, 753]}
{"line_number": 491, "line_type": "original", "code": "        }", "entropy": 2.654296875, "is_bug_line": false, "sus_score": 0.5760437846183777, "per_token_entropy": [5.07421875, 0.2332763671875], "tokens": [351, 320]}
{"line_number": 491, "line_type": "generated", "code": "\n          }\n          break;\n\n        case Token.THIS:\n          if (parent.isAssign()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n\n        case Token.NEW:", "entropy": 0.2822265625, "is_bug_line": false, "sus_score": 0.5760437846183777, "per_token_entropy": [0.3740234375, 0.004852294921875, 0.1763916015625, 0.04010009765625, 0.00022983551025390625, 0.2447509765625, 0.043609619140625, 0.0005221366882324219, 0.00025463104248046875, 1.7138671875, 0.0001627206802368164, 0.083251953125, 1.3115234375, 0.260498046875, 0.8994140625, 0.0927734375, 0.1646728515625, 0.41748046875, 0.72509765625, 0.00040030479431152344, 0.0171661376953125, 1.783203125, 0.546875, 0.58154296875, 0.0079803466796875, 0.045074462890625, 0.0003604888916015625, 0.1837158203125, 0.002933502197265625, 0.0011949539184570312, 0.0003304481506347656, 1.1920928955078125e-07, -0.0, 4.76837158203125e-07, 0.00032711029052734375, 1.18359375, 0.0138702392578125, 0.42431640625, 0.1236572265625, 1.447265625, 0.0017480850219726562, 0.0301361083984375, 0.00010848045349121094, 0.09368896484375, 0.0292510986328125, 7.200241088867188e-05, 0.35986328125, 0.053558349609375, 0.0006561279296875, 0.0002231597900390625, 1.17578125, 0.007755279541015625], "tokens": [616, 320, 616, 1626, 45, 584, 1135, 6512, 32, 25339, 44, 616, 415, 308, 2544, 32, 297, 9079, 1157, 301, 324, 8762, 33052, 41340, 26, 102, 30, 310, 32, 371, 60, 3181, 542, 1120, 1026, 310, 30, 2935, 30, 744, 293, 616, 320, 616, 1626, 45, 584, 1135, 6512, 32, 11356, 44]}
{"line_number": 1656, "line_type": "original", "code": "", "entropy": 4.63671875, "is_bug_line": false, "sus_score": 0.5749815106391907, "per_token_entropy": [4.63671875], "tokens": [203]}
{"line_number": 1656, "line_type": "generated", "code": "\n   */\n  private static class StubDeclaration {\n    private final Node node;\n    private final String ownerName;\n    private final boolean isExtern;\n\n    StubDeclaration(Node node, String ownerName, boolean isExtern) {\n      this.node =", "entropy": 0.082275390625, "is_bug_line": false, "sus_score": 0.5749815106391907, "per_token_entropy": [0.22119140625, 0.20166015625, 0.0101470947265625, 0.498291015625, 0.08758544921875, 0.256103515625, 0.00286102294921875, 0.00028014183044433594, 0.029541015625, 0.034759521484375, 1.1318359375, 0.1090087890625, 0.2098388671875, 0.01064300537109375, 0.0005517005920410156, 0.053924560546875, 0.05029296875, 0.00969696044921875, 0.06634521484375, 0.0126800537109375, 0.0026149749755859375, 0.00014889240264892578, 0.0216217041015625, 0.022674560546875, 0.0152130126953125, 0.02685546875, 0.0007405281066894531, 0.00591278076171875, 1.9073486328125e-06, 0.00037097930908203125, 0.32470703125, 0.35986328125, 3.6954879760742188e-06, 0.002197265625, 0.08746337890625, 0.1510009765625, 0.007232666015625, 0.05804443359375, 0.0013980865478515625, 0.0141754150390625, 0.0187530517578125, 0.08978271484375, 0.0035457611083984375, 0.0005998611450195312, 2.0742416381835938e-05, 0.00037741661071777344, 0.0005326271057128906, 0.004673004150390625, 0.05230712890625, 6.079673767089844e-05, 0.0054168701171875, 0.0002225637435913086], "tokens": [664, 569, 334, 945, 907, 443, 32522, 10367, 301, 284, 945, 1158, 4004, 1541, 45, 284, 945, 1158, 892, 7423, 558, 45, 284, 945, 1158, 1905, 438, 571, 900, 45, 446, 32522, 10367, 26, 1212, 1541, 30, 892, 7423, 558, 30, 1905, 438, 571, 900, 27, 301, 397, 458, 32, 1251, 280]}
{"line_number": 963, "line_type": "original", "code": "     * This function will always create an enum type, so only call it if", "entropy": 3.03125, "is_bug_line": false, "sus_score": 0.5736444592475891, "per_token_entropy": [5.66796875, 3.1796875, 4.65234375, 3.58203125, 2.841796875, 3.88671875, 3.9765625, 1.9697265625, 0.908203125, 0.88427734375, 1.0947265625, 2.048828125, 6.50390625, 4.0546875, 2.03125, 1.232421875], "tokens": [262, 319, 1348, 667, 1098, 5182, 1487, 600, 3833, 827, 30, 1259, 1755, 1476, 561, 415]}
{"line_number": 963, "line_type": "generated", "code": "\n      }\n\n      if (lValueNode!= null) {\n        typeRegistry.declareType(\n            lValueNode.getQualifiedName(), enumType.getElementsType());\n      }\n\n      return enumType;\n    }\n\n    /**\n     * Creates a new typedef type,", "entropy": 0.30517578125, "is_bug_line": false, "sus_score": 0.5736444592475891, "per_token_entropy": [1.22265625, 0.03326416015625, 0.297119140625, 1.0859375, 0.037200927734375, 0.210205078125, 3.612041473388672e-05, 0.00036072731018066406, 0.06329345703125, 0.001220703125, 0.3359375, 0.000263214111328125, 0.01010894775390625, 2.685546875, 0.06060791015625, 0.0008320808410644531, 0.57958984375, 0.25048828125, 0.115234375, 0.95458984375, 1.0244140625, 0.00036978721618652344, 0.0015211105346679688, 0.263671875, 0.452880859375, 0.0151214599609375, 0.0177764892578125, 0.22509765625, 3.62396240234375e-05, 0.260986328125, 0.02618408203125, 1.1444091796875e-05, 0.076904296875, 0.26123046875, 5.53131103515625e-05, 0.2310791015625, 0.1328125, 0.0016765594482421875, 1.1920928955078125e-06, 0.0018482208251953125, 0.024932861328125, 0.0011386871337890625, 0.4658203125, 0.340087890625, 0.04437255859375, 0.00021326541900634766, 1.2119140625, 0.1455078125, 0.24755859375, 1.744140625, 0.423095703125, 0.289794921875], "tokens": [397, 320, 1687, 415, 308, 94, 882, 1212, 863, 744, 27, 301, 291, 827, 5378, 32, 8238, 620, 26, 324, 456, 882, 1212, 32, 371, 41340, 1026, 3833, 620, 32, 4649, 34035, 1035, 397, 320, 1687, 442, 3833, 620, 45, 284, 320, 446, 1022, 275, 319, 9301, 312, 537, 10338, 827, 30]}
{"line_number": 2063, "line_type": "original", "code": "", "entropy": 0.257080078125, "is_bug_line": false, "sus_score": 0.5728253722190857, "per_token_entropy": [0.257080078125], "tokens": [203]}
{"line_number": 2063, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5728253722190857, "per_token_entropy": [], "tokens": []}
{"line_number": 1178, "line_type": "original", "code": "            compiler.report(", "entropy": 3.35546875, "is_bug_line": false, "sus_score": 0.5727037191390991, "per_token_entropy": [6.59765625, 10.0, 0.0369873046875, 0.0965576171875, 0.056915283203125], "tokens": [1468, 8980, 32, 3734, 26]}
{"line_number": 1178, "line_type": "generated", "code": "\n        return scope.getScope(root.getString());\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Returns the global scope for the given node.\n     */\n    private Scope getGlobalScope(Node n) {\n      return scope", "entropy": 0.44140625, "is_bug_line": false, "sus_score": 0.5727037191390991, "per_token_entropy": [0.128662109375, 0.482666015625, 1.896484375, 0.8251953125, 0.609375, 0.13916015625, 0.59130859375, 0.1307373046875, 0.2445068359375, 0.007411956787109375, 0.14208984375, 0.04815673828125, 8.022785186767578e-05, 0.55908203125, 0.6494140625, 0.2235107421875, 0.185302734375, 0.10296630859375, 0.0003733634948730469, 0.003459930419921875, 6.532669067382812e-05, 0.01059722900390625, 0.0008497238159179688, 0.409423828125, 0.380859375, 0.047027587890625, 0.0004069805145263672, 2.40234375, 1.1826171875, 4.0078125, 0.450439453125, 1.7392578125, 0.546875, 0.351318359375, 0.9267578125, 0.415283203125, 0.282470703125, 0.149169921875, 0.000690460205078125, 0.08367919921875, 0.254150390625, 0.0254058837890625, 0.414794921875, 0.01506805419921875, 0.044281005859375, 0.0028533935546875, 0.0228424072265625, 0.0020999908447265625, 0.0004355907440185547, 0.1990966796875, 1.380859375, 0.2308349609375], "tokens": [291, 442, 4576, 32, 371, 5504, 26, 2388, 32, 7069, 1035, 397, 320, 813, 301, 291, 442, 744, 45, 397, 320, 284, 320, 446, 1022, 275, 319, 3759, 322, 3649, 4576, 436, 322, 2702, 1541, 32, 275, 569, 284, 945, 22148, 622, 4455, 5504, 26, 1212, 310, 27, 301, 397, 442, 4576]}
{"line_number": 1793, "line_type": "original", "code": "    }", "entropy": 4.0546875, "is_bug_line": false, "sus_score": 0.5705561637878418, "per_token_entropy": [6.4375, 1.6748046875], "tokens": [264, 320]}
{"line_number": 1793, "line_type": "generated", "code": "\n  } // end LocalScopeBuilder\n\n  /**\n   * A shallow traversal of a function body to find all arguments and\n   * local variables.\n   */\n  private final class FunctionScopeBuilder extends AbstractScopeBuilder {\n    /**\n     * @param scope The scope that", "entropy": 0.1888427734375, "is_bug_line": false, "sus_score": 0.5705561637878418, "per_token_entropy": [0.2332763671875, 0.0024738311767578125, 0.29052734375, 0.0147705078125, 0.034637451171875, 0.0012884140014648438, 0.0037479400634765625, 0.453857421875, 0.18798828125, 0.044219970703125, 0.0002498626708984375, 0.7578125, 1.3037109375, 0.0183868408203125, 0.1219482421875, 0.1922607421875, 0.8974609375, 0.93408203125, 0.1741943359375, 0.2041015625, 0.2259521484375, 0.60009765625, 0.185302734375, 0.1456298828125, 0.0003104209899902344, 0.0215911865234375, 0.0024700164794921875, 0.06591796875, 0.1156005859375, 0.036956787109375, 0.0033206939697265625, 0.0504150390625, 0.5078125, 0.0020999908447265625, 0.11663818359375, 0.5244140625, 0.0128326416015625, 0.0256195068359375, 0.193115234375, 0.0007543563842773438, 0.0002930164337158203, 0.01071929931640625, 0.073486328125, 0.238037109375, 0.271728515625, 0.00021505355834960938, 0.352783203125, 0.0005755424499511719, 0.060577392578125, 0.012939453125, 0.034210205078125, 0.056915283203125], "tokens": [334, 320, 434, 943, 7089, 5504, 1796, 719, 1022, 664, 319, 399, 25433, 34395, 432, 312, 667, 3361, 372, 2290, 1169, 4209, 461, 664, 319, 2196, 4886, 32, 664, 569, 334, 945, 1158, 443, 4540, 5504, 1796, 2026, 7400, 5504, 1796, 301, 284, 1022, 275, 319, 477, 753, 4576, 886, 4576, 688]}
{"line_number": 1622, "line_type": "original", "code": "        String propName = n.getLastChild().getString();", "entropy": 1.5869140625, "is_bug_line": false, "sus_score": 0.5704714059829712, "per_token_entropy": [4.390625, 7.55859375, 2.17578125, 0.11163330078125, 0.0312347412109375, 2.517578125, 0.0172882080078125, 2.087890625, 0.0005803108215332031, 0.0027675628662109375, 0.1536865234375, 0.004581451416015625], "tokens": [351, 892, 7018, 558, 280, 310, 32, 20197, 2931, 922, 7069, 473]}
{"line_number": 1622, "line_type": "generated", "code": "\n              break;\n            case Token.FUNCTION:\n              // Functions are only valid if they are immediately\n              // assigned to a property.\n              break;\n            default:\n              // Ignore\n          }\n        }\n      }\n\n      /**\n       * Collects a member declaration.\n      ", "entropy": 0.81298828125, "is_bug_line": false, "sus_score": 0.5704714059829712, "per_token_entropy": [0.345458984375, 1.0234375, 0.0009717941284179688, 0.492919921875, 0.316650390625, 0.0014562606811523438, 0.00011336803436279297, 2.4140625, 0.0009064674377441406, 0.1412353515625, 1.8046875, 2.9453125, 1.40625, 3.79296875, 2.439453125, 2.32421875, 0.370361328125, 0.4169921875, 2.822265625, 0.327392578125, 0.0016689300537109375, 0.40283203125, 0.152587890625, 0.222412109375, 0.260986328125, 0.869140625, 0.271240234375, 1.26171875, 0.0002199411392211914, 0.1458740234375, 0.1083984375, 0.0002791881561279297, 0.042083740234375, 1.6630859375, 1.875, 2.8515625, 0.0002694129943847656, 0.0224456787109375, 0.00011849403381347656, 0.233642578125, 0.00022649765014648438, 0.1473388671875, 0.5712890625, 0.0328369140625, 0.00012981891632080078, 1.7451171875, 0.2822265625, 0.86181640625, 0.81787109375, 2.021484375, 1.732421875, 0.30029296875], "tokens": [1090, 1626, 45, 324, 1135, 6512, 32, 9842, 44, 1090, 434, 14749, 884, 1755, 2080, 415, 2953, 884, 13282, 1090, 434, 11012, 372, 312, 2804, 32, 1090, 1626, 45, 324, 1244, 44, 1090, 434, 20419, 616, 320, 291, 320, 397, 320, 1687, 1022, 1568, 319, 19783, 101, 312, 5809, 13317, 32, 1568]}
{"line_number": 746, "line_type": "original", "code": "      // Any of these may be null.", "entropy": 2.91015625, "is_bug_line": false, "sus_score": 0.5677333474159241, "per_token_entropy": [4.12109375, 2.390625, 7.15625, 3.96875, 1.4501953125, 3.85546875, 1.021484375, 1.2841796875, 0.9404296875], "tokens": [647, 434, 6204, 432, 3282, 1631, 526, 744, 32]}
{"line_number": 746, "line_type": "generated", "code": "\n        return false;\n      }\n      if (type.isConstructor()) {\n        // Constructors are always assumed to be functions.\n        return true;\n      }\n      if (type.isInterface()) {\n        // Interfaces are always assumed to be functions.\n        return", "entropy": 0.36669921875, "is_bug_line": false, "sus_score": 0.5677333474159241, "per_token_entropy": [0.34326171875, 0.37060546875, 1.1904296875, 0.001979827880859375, 0.0712890625, 0.00013124942779541016, 0.85107421875, 0.6015625, 0.1826171875, 1.1533203125, 0.279541015625, 0.361328125, 0.446533203125, 0.345458984375, 0.0008025169372558594, 0.05401611328125, 1.419921875, 0.9912109375, 0.68310546875, 0.92578125, 2.134765625, 0.11297607421875, 0.1470947265625, 1.158203125, 0.49560546875, 0.0301055908203125, 0.05419921875, 0.0294952392578125, 8.177757263183594e-05, 0.00345611572265625, 3.254413604736328e-05, 0.2447509765625, 0.5859375, 0.184326171875, 1.0146484375, 0.01715087890625, 0.497802734375, 0.748046875, 0.225830078125, 0.00015234947204589844, 0.0076904296875, 0.1953125, 0.303466796875, 0.1419677734375, 0.252197265625, 0.048492431640625, 0.00220489501953125, 0.00887298583984375, 0.060638427734375, 0.05224609375, 0.007740020751953125, 0.021026611328125], "tokens": [291, 442, 901, 45, 397, 320, 397, 415, 308, 681, 32, 297, 7932, 1157, 301, 291, 434, 34758, 884, 5182, 20968, 372, 526, 4442, 32, 291, 442, 861, 45, 397, 320, 397, 415, 308, 681, 32, 297, 3041, 1157, 301, 291, 434, 45044, 884, 5182, 20968, 372, 526, 4442, 32, 291, 442]}
{"line_number": 2059, "line_type": "original", "code": "", "entropy": 0.257080078125, "is_bug_line": false, "sus_score": 0.5673006772994995, "per_token_entropy": [0.257080078125], "tokens": [203]}
{"line_number": 2059, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5673006772994995, "per_token_entropy": [], "tokens": []}
{"line_number": 1616, "line_type": "original", "code": "     */", "entropy": 6.28515625, "is_bug_line": false, "sus_score": 0.5668196082115173, "per_token_entropy": [8.21875, 4.3515625], "tokens": [262, 569]}
{"line_number": 1616, "line_type": "generated", "code": "\n            case Token.FUNCTION:\n              // Collect the function declaration and its name.\n              // Also register the function in the type registry.\n              String name = child.getFirstChild().getQualifiedName();\n              if (name!= null) {\n                typeRegistry.register", "entropy": 0.8232421875, "is_bug_line": false, "sus_score": 0.5668196082115173, "per_token_entropy": [0.46142578125, 0.234619140625, 0.03277587890625, 0.148193359375, 1.552734375, 0.002521514892578125, 0.25244140625, 2.099609375, 3.126953125, 1.494140625, 1.61328125, 2.525390625, 2.966796875, 2.451171875, 1.048828125, 0.6865234375, 0.047821044921875, 2.11328125, 3.5078125, 2.18359375, 0.8427734375, 0.465576171875, 2.072265625, 0.1865234375, 0.81591796875, 0.06671142578125, 0.3388671875, 0.0284576416015625, 1.6416015625, 1.787109375, 0.053009033203125, 0.486083984375, 0.0003440380096435547, 0.7744140625, 0.0004391670227050781, 0.005970001220703125, 0.6787109375, 0.01068878173828125, 0.00902557373046875, 0.03546142578125, 1.283203125, 0.12457275390625, 0.10931396484375, 0.28466796875, 0.00025844573974609375, 0.2265625, 0.0007452964782714844, 0.016937255859375, 1.7939453125, 0.0022373199462890625, 0.0009312629699707031, 0.12005615234375], "tokens": [324, 1135, 6512, 32, 9842, 44, 1090, 434, 19783, 322, 667, 13317, 461, 2819, 636, 32, 1090, 434, 8669, 3909, 322, 667, 328, 322, 827, 10880, 32, 1090, 892, 636, 280, 2838, 32, 25657, 2931, 922, 371, 41340, 473, 1090, 415, 308, 426, 863, 744, 27, 301, 400, 827, 5378, 32, 3317]}
{"line_number": 1329, "line_type": "original", "code": "          // superCtor and subCtor might be structural constructors", "entropy": 4.796875, "is_bug_line": false, "sus_score": 0.5663067698478699, "per_token_entropy": [5.89453125, 4.44140625, 8.3515625, 4.08984375, 3.779296875, 0.242431640625, 0.0021038055419921875, 4.1796875, 0.4677734375, 11.125, 10.203125], "tokens": [2033, 434, 2599, 30092, 461, 1361, 30092, 4796, 526, 40922, 30857]}
{"line_number": 1329, "line_type": "generated", "code": "\n              \"No type found for cast to {0}\", objectLiteralCast.typeName));\n        }\n      }\n    }\n\n    private void applyDelegateRelationship(DelegateRelationship relationship) {\n      String delegateClassName = relationship.delegateClassName;\n      String delegateTargetName = relationship", "entropy": 0.45166015625, "is_bug_line": false, "sus_score": 0.5663067698478699, "per_token_entropy": [0.182861328125, 0.46875, 2.896484375, 1.572265625, 1.0849609375, 0.31591796875, 1.12890625, 0.7763671875, 1.62890625, 0.052154541015625, 0.56982421875, 1.1240234375, 4.947185516357422e-05, 0.0011053085327148438, 0.0014009475708007812, 0.002094268798828125, 0.0187530517578125, 0.04071044921875, 6.198883056640625e-05, 0.02313232421875, 0.0003142356872558594, 0.916015625, 0.0006928443908691406, 0.138916015625, 0.95166015625, 0.187744140625, 0.450439453125, 0.025634765625, 6.568431854248047e-05, 0.0029163360595703125, 0.470458984375, 2.956390380859375e-05, 0.65771484375, 0.0009326934814453125, 0.015716552734375, 0.023956298828125, 1.7265625, 0.5888671875, 1.7041015625, 0.0108184814453125, 0.0594482421875, 0.000152587890625, 0.49658203125, 0.443359375, 0.00860595703125, 0.06268310546875, 0.494873046875, 0.73193359375, 1.10546875, 0.2900390625, 0.005580902099609375, 0.021026611328125], "tokens": [1090, 313, 2023, 827, 2431, 436, 9936, 372, 301, 34, 6553, 1300, 8208, 8946, 32, 24494, 876, 291, 320, 397, 320, 284, 320, 446, 945, 763, 4871, 8004, 13175, 26, 8004, 13175, 12112, 27, 301, 397, 892, 11165, 8469, 280, 12112, 32, 14388, 8469, 45, 397, 892, 11165, 2922, 558, 280, 12112]}
