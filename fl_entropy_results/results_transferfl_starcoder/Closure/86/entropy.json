{"line_number": 2465, "line_type": "original", "code": "        return true;", "entropy": 3.24609375, "is_bug_line": true, "sus_score": 0.5777479410171509, "per_token_entropy": [9.2265625, 1.470703125, 2.275390625, 0.01525115966796875], "tokens": [351, 442, 861, 45]}
{"line_number": 2465, "line_type": "generated", "code": "\n  static boolean isImmutableValue(Node value) {\n    return NodeUtil.isImmutableValue(value);\n  }\n\n  static boolean isImmutableValueType(Node value) {\n    return NodeUtil.isImmutableValueType(value);\n  }\n\n  static boolean is", "entropy": 0.357177734375, "is_bug_line": true, "sus_score": 0.5777479410171509, "per_token_entropy": [0.64111328125, 1.46484375, 0.2958984375, 0.5830078125, 1.3046875, 0.054840087890625, 0.01093292236328125, 0.00566864013671875, 0.64990234375, 0.006122589111328125, 0.00312042236328125, 0.037750244140625, 1.333984375, 1.75390625, 0.003459930419921875, 0.0001379251480102539, 0.037322998046875, 0.0267486572265625, 0.0034961700439453125, 0.0037631988525390625, 0.0041351318359375, 0.255615234375, 0.044952392578125, 0.0010061264038085938, 0.46728515625, 0.90234375, 0.06500244140625, 0.26953125, 1.87109375, 2.919921875, 0.0216064453125, 0.71435546875, 0.3994140625, 0.1949462890625, 0.0011920928955078125, 0.028106689453125, 0.55126953125, 0.4921875, 0.01151275634765625, 5.257129669189453e-05, 0.006908416748046875, 0.0021877288818359375, 0.012115478515625, 0.0002205371856689453, 0.0009455680847167969, 0.034423828125, 0.0189666748046875, 0.0002982616424560547, 0.35107421875, 0.490478515625, 0.06866455078125, 0.1544189453125], "tokens": [334, 907, 1905, 438, 15027, 882, 26, 1212, 786, 27, 301, 284, 442, 4004, 1733, 32, 297, 15027, 882, 26, 853, 293, 334, 320, 719, 907, 1905, 438, 15027, 17653, 26, 1212, 786, 27, 301, 284, 442, 4004, 1733, 32, 297, 15027, 17653, 26, 853, 293, 334, 320, 719, 907, 1905, 438]}
{"line_number": 2166, "line_type": "original", "code": "  /**", "entropy": 4.328125, "is_bug_line": false, "sus_score": 0.5760980248451233, "per_token_entropy": [4.03125, 4.62890625], "tokens": [225, 1022]}
{"line_number": 2166, "line_type": "generated", "code": "\n   */\n  static int getCount(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred) {\n    int count = 0;\n    if (pred.apply(node)) {\n      count++;\n    }\n\n    if", "entropy": 0.07220458984375, "is_bug_line": false, "sus_score": 0.5760980248451233, "per_token_entropy": [0.2041015625, 0.1640625, 0.012298583984375, 0.0230712890625, 0.0031261444091796875, 0.0005621910095214844, 0.0002796649932861328, 0.0003483295440673828, 0.217529296875, 0.015106201171875, 5.805492401123047e-05, 0.63525390625, 0.005130767822265625, 0.0012874603271484375, 6.496906280517578e-05, 1.5497207641601562e-06, 0.00434112548828125, 0.00017392635345458984, 0.0033416748046875, 0.0008091926574707031, 4.6133995056152344e-05, 5.91278076171875e-05, 4.6133995056152344e-05, 0.0012416839599609375, 0.0006361007690429688, 0.0012273788452148438, 0.0028057098388671875, 0.0018835067749023438, 0.04095458984375, 0.7451171875, 0.2120361328125, 0.0042266845703125, 0.2412109375, 0.003368377685546875, 0.00023257732391357422, 0.452880859375, 0.07659912109375, 0.10540771484375, 0.177978515625, 0.00030231475830078125, 3.600120544433594e-05, 2.4557113647460938e-05, 5.936622619628906e-05, 0.0082244873046875, 0.003055572509765625, 0.00897979736328125, 0.042266845703125, 0.198486328125, 0.002117156982421875, 0.00032520294189453125, 0.12408447265625, 0.00957489013671875], "tokens": [664, 569, 334, 907, 629, 622, 1534, 26, 1212, 1541, 30, 3486, 23426, 46, 1212, 48, 4626, 30, 3486, 23426, 46, 1212, 48, 29046, 7640, 7903, 27, 301, 284, 629, 2385, 280, 225, 34, 45, 284, 415, 308, 8293, 32, 4699, 26, 1251, 490, 301, 397, 2385, 3334, 284, 320, 446, 415]}
{"line_number": 2416, "line_type": "original", "code": "    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());", "entropy": 1.865234375, "is_bug_line": false, "sus_score": 0.5745316743850708, "per_token_entropy": [3.185546875, 5.43359375, 8.8984375, 0.098876953125, 0.01971435546875, 0.043243408203125, 0.08123779296875, 1.626953125, 8.4765625, 0.0013599395751953125, 0.77783203125, 0.0064544677734375, 0.0005350112915039062, 0.19384765625, 0.98388671875, 0.01165008544921875], "tokens": [264, 442, 43992, 40608, 882, 26, 853, 30, 14407, 29770, 5700, 1212, 48, 12149, 2700, 1035]}
{"line_number": 2416, "line_type": "generated", "code": "\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @return Whether the CALL node has a local result.\n   */\n  static boolean callHasLocalResult(Node call) {\n    return!NodeUtil.isImmutableValue(call)", "entropy": 0.3486328125, "is_bug_line": false, "sus_score": 0.5745316743850708, "per_token_entropy": [0.78125, 0.281982421875, 0.0012655258178710938, 0.0250701904296875, 0.266357421875, 1.6064453125, 0.00021767616271972656, 0.026275634765625, 0.0008254051208496094, 0.020111083984375, 0.0012054443359375, 0.34765625, 0.318359375, 0.0693359375, 0.0003490447998046875, 0.5712890625, 0.515625, 0.08843994140625, 0.349609375, 1.2529296875, 0.277587890625, 1.076171875, 0.166748046875, 0.4716796875, 0.2305908203125, 0.662109375, 0.17822265625, 0.07000732421875, 0.0017194747924804688, 0.3203125, 0.00537872314453125, 0.00531768798828125, 0.0006995201110839844, 0.00020229816436767578, 7.581710815429688e-05, 0.0006303787231445312, 0.0019931793212890625, 0.372314453125, 0.15478515625, 0.00020122528076171875, 0.0706787109375, 2.46875, 1.7900390625, 1.4150390625, 0.0036029815673828125, 0.00032210350036621094, 0.1943359375, 0.1085205078125, 0.0225677490234375, 0.001010894775390625, 0.02532958984375, 1.4970703125], "tokens": [397, 1244, 44, 291, 442, 861, 45, 284, 320, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 16084, 1541, 1401, 312, 2196, 1056, 32, 664, 569, 334, 907, 1905, 1476, 3993, 3325, 1394, 26, 1212, 1476, 27, 301, 284, 442, 653, 1212, 1733, 32, 297, 15027, 882, 26, 1851, 27]}
{"line_number": 335, "line_type": "original", "code": "   *     treated as literals.", "entropy": 5.1875, "is_bug_line": false, "sus_score": 0.5709773302078247, "per_token_entropy": [6.43359375, 6.61328125, 2.49609375, 17.546875, 0.35888671875, 1.9580078125, 0.89697265625], "tokens": [261, 319, 262, 23902, 619, 36388, 32]}
{"line_number": 335, "line_type": "generated", "code": "\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case", "entropy": 0.0848388671875, "is_bug_line": false, "sus_score": 0.5709773302078247, "per_token_entropy": [0.90771484375, 0.1126708984375, 0.00027251243591308594, 6.890296936035156e-05, 0.2117919921875, 0.1898193359375, 0.00035691261291503906, 0.296630859375, 0.0012521743774414062, 0.00012445449829101562, 1.9669532775878906e-05, 0.059051513671875, 0.00322723388671875, 3.4689903259277344e-05, 0.2086181640625, 0.002407073974609375, 9.429454803466797e-05, 9.02414321899414e-05, 0.67626953125, 0.00012826919555664062, 0.16552734375, 0.0024280548095703125, 0.00010335445404052734, 5.8650970458984375e-05, 0.14306640625, 9.97781753540039e-05, 0.090087890625, 0.0015878677368164062, 5.5789947509765625e-05, 5.6862831115722656e-05, 0.1656494140625, 0.002254486083984375, 0.0226593017578125, 0.0009045600891113281, 1.9788742065429688e-05, 4.1365623474121094e-05, 0.3046875, 4.7326087951660156e-05, 0.0065155029296875, 0.00013697147369384766, 2.6464462280273438e-05, 4.9948692321777344e-05, 0.016876220703125, 1.4781951904296875e-05, 0.0198516845703125, 1.2755393981933594e-05, 0.00011658668518066406, 5.3048133850097656e-05, 0.75830078125, 0.0005393028259277344, 0.035980224609375, 0.0013151168823242188], "tokens": [397, 1135, 6512, 32, 5670, 758, 44, 397, 1135, 6512, 32, 5670, 42417, 44, 397, 1135, 6512, 32, 47451, 44, 397, 1135, 6512, 32, 13888, 44, 397, 1135, 6512, 32, 2697, 44, 397, 1135, 6512, 32, 3055, 44, 397, 1135, 6512, 32, 11502, 44, 397, 1135, 6512, 32, 521, 44, 397, 1135]}
{"line_number": 2174, "line_type": "original", "code": "", "entropy": 3.82421875, "is_bug_line": false, "sus_score": 0.5709442496299744, "per_token_entropy": [3.82421875], "tokens": [203]}
{"line_number": 2174, "line_type": "generated", "code": "\n    if (!traverseChildrenPred.apply(n)) {\n      return total;\n    }\n\n    for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n      total += getCount(c, pred, traverseChildren", "entropy": 0.0284881591796875, "is_bug_line": false, "sus_score": 0.5709442496299744, "per_token_entropy": [0.3564453125, 0.078125, 0.2366943359375, 0.006214141845703125, 9.739398956298828e-05, 0.00039696693420410156, 0.00144195556640625, 0.00024259090423583984, 0.00022709369659423828, 0.0241851806640625, 0.007434844970703125, 0.0026378631591796875, 0.0099639892578125, 0.0038967132568359375, 0.00434112548828125, 0.0002849102020263672, 0.003772735595703125, 3.9696693420410156e-05, 0.59423828125, 0.01438140869140625, 0.003055572509765625, 0.0010318756103515625, 0.033111572265625, 0.002880096435546875, 0.0013742446899414062, 0.00017893314361572266, 0.0013933181762695312, 7.784366607666016e-05, 0.002105712890625, 0.002536773681640625, 0.000522613525390625, 0.0006380081176757812, 0.0014295578002929688, 0.001094818115234375, 0.000637054443359375, 0.0006771087646484375, 8.928775787353516e-05, 4.6372413635253906e-05, 0.0010929107666015625, 0.0036563873291015625, 0.00948333740234375, 0.02294921875, 0.0045166015625, 0.003749847412109375, 0.0002663135528564453, 0.0003032684326171875, 0.033966064453125, 0.0001418590545654297, 0.0014867782592773438, 0.0003490447998046875, 0.0017232894897460938, 2.6226043701171875e-06], "tokens": [284, 415, 1429, 33261, 7640, 7903, 32, 4699, 26, 96, 490, 301, 397, 442, 3380, 45, 284, 320, 446, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301, 397, 3380, 1454, 622, 1534, 26, 85, 30, 4626, 30, 29046, 7640]}
{"line_number": 2178, "line_type": "original", "code": "  static boolean isNameReferenced(Node node, String name) {", "entropy": 1.1455078125, "is_bug_line": false, "sus_score": 0.5679038763046265, "per_token_entropy": [4.109375, 6.05078125, 1.3642578125, 0.470458984375, 2.1484375, 0.439208984375, 0.1962890625, 0.1741943359375, 0.144287109375, 0.0195465087890625, 0.7744140625, 0.011383056640625, 0.0650634765625, 0.058807373046875], "tokens": [225, 907, 1905, 438, 558, 34481, 26, 1212, 1541, 30, 892, 636, 27, 301]}
{"line_number": 2178, "line_type": "generated", "code": "\n      }\n    }\n\n    return total;\n  }\n\n  /**\n   * Returns the last statement in a statement list.\n   */\n  static Node getStatementListLastStatement(Node statementList) {\n    Node lastStatement = null;\n    for (Node n =", "entropy": 0.462646484375, "is_bug_line": false, "sus_score": 0.5679038763046265, "per_token_entropy": [0.42626953125, 0.5439453125, 0.1126708984375, 0.0084381103515625, 0.113525390625, 0.00177001953125, 0.0003802776336669922, 0.0003974437713623047, 0.06097412109375, 0.0009007453918457031, 0.392333984375, 0.1422119140625, 0.044281005859375, 0.0003857612609863281, 2.443359375, 1.111328125, 2.724609375, 1.3349609375, 0.658203125, 0.7138671875, 1.96484375, 0.73876953125, 0.51025390625, 0.1339111328125, 0.2286376953125, 0.04852294921875, 0.150634765625, 0.0306854248046875, 1.615234375, 0.424072265625, 0.56689453125, 1.0625, 0.080810546875, 0.001995086669921875, 0.038055419921875, 1.1455078125, 0.03729248046875, 0.00913238525390625, 0.001476287841796875, 0.05224609375, 0.42431640625, 0.6826171875, 0.68896484375, 0.042327880859375, 0.5654296875, 0.0005211830139160156, 0.35595703125, 0.331787109375, 0.004871368408203125, 0.003253936767578125, 1.26953125, 0.0200653076171875], "tokens": [397, 320, 284, 320, 446, 442, 3380, 45, 334, 320, 719, 1022, 664, 319, 3759, 322, 2401, 7603, 328, 312, 7603, 1149, 32, 664, 569, 334, 907, 4004, 622, 5495, 720, 3267, 5495, 26, 1212, 7603, 720, 27, 301, 284, 4004, 2401, 5495, 280, 744, 45, 284, 436, 308, 1212, 310, 280]}
{"line_number": 2129, "line_type": "original", "code": "   */", "entropy": 6.1328125, "is_bug_line": false, "sus_score": 0.5588700771331787, "per_token_entropy": [5.921875, 6.34765625], "tokens": [261, 569]}
{"line_number": 2129, "line_type": "generated", "code": "\n    return has(node, new MatchNameNode(name), MatchNotFunction.INSTANCE);\n  }\n\n  /**\n   * Whether a simple name is referenced within the node tree.\n   */\n  static boolean isNameReferenced(Node node,\n                                  String name,", "entropy": 0.24755859375, "is_bug_line": false, "sus_score": 0.5588700771331787, "per_token_entropy": [0.61474609375, 0.05255126953125, 0.89599609375, 0.0083465576171875, 0.0222625732421875, 0.00036406517028808594, 0.023193359375, 0.002262115478515625, 0.003177642822265625, 0.00433349609375, 0.00075531005859375, 0.00048613548278808594, 0.32666015625, 0.62060546875, 0.90576171875, 0.00360107421875, 0.166748046875, 0.0355224609375, 0.0594482421875, 0.240966796875, 0.0015001296997070312, 0.1864013671875, 0.0535888671875, 0.04534912109375, 0.00010704994201660156, 1.0478515625, 0.76123046875, 1.2373046875, 0.0347900390625, 0.1072998046875, 1.1357421875, 0.466552734375, 0.073486328125, 0.08282470703125, 0.020599365234375, 0.2388916015625, 0.072021484375, 0.03436279296875, 0.0281524658203125, 0.035125732421875, 0.026702880859375, 0.02459716796875, 0.431884765625, 0.69970703125, 0.2078857421875, 0.0439453125, 0.079345703125, 0.032806396484375, 1.2939453125, 0.32373046875, 0.041534423828125, 0.019866943359375], "tokens": [284, 442, 1401, 26, 1251, 30, 537, 12253, 558, 1212, 26, 426, 471, 12253, 1337, 2447, 32, 12452, 293, 334, 320, 719, 1022, 664, 319, 14071, 312, 4281, 636, 438, 15167, 4797, 322, 1541, 4345, 32, 664, 569, 334, 907, 1905, 438, 558, 34481, 26, 1212, 1541, 30, 6619, 892, 636, 30]}
{"line_number": 2186, "line_type": "original", "code": "    return getCount(", "entropy": 3.53515625, "is_bug_line": false, "sus_score": 0.5557047724723816, "per_token_entropy": [4.28515625, 5.0078125, 7.85546875, 0.477294921875, 0.040435791015625], "tokens": [264, 442, 622, 1534, 26]}
{"line_number": 2186, "line_type": "generated", "code": "\n   */\n  static interface Visitor {\n    void visit(Node n);\n  }\n\n  /**\n   * Traverses the tree in pre-order.", "entropy": 0.432373046875, "is_bug_line": false, "sus_score": 0.5557047724723816, "per_token_entropy": [0.52783203125, 0.21435546875, 0.033843994140625, 1.1650390625, 0.25, 0.332763671875, 0.307373046875, 0.263427734375, 0.74853515625, 0.155517578125, 0.01454925537109375, 0.00942230224609375, 0.35009765625, 0.1798095703125, 0.1632080078125, 0.0025424957275390625, 0.30224609375, 0.142578125, 0.08087158203125, 0.0009665489196777344, 1.8271484375, 0.002887725830078125, 0.002613067626953125, 0.29345703125, 0.966796875, 1.8515625, 0.73583984375, 0.91259765625, 0.004596710205078125, 1.12890625], "tokens": [664, 569, 334, 907, 2568, 34982, 301, 284, 763, 7725, 26, 1212, 310, 293, 334, 320, 719, 1022, 664, 319, 1565, 15219, 1464, 322, 4345, 328, 1406, 31, 1174, 32]}
{"line_number": 2100, "line_type": "original", "code": "", "entropy": 3.966796875, "is_bug_line": false, "sus_score": 0.5553303956985474, "per_token_entropy": [3.966796875], "tokens": [203]}
{"line_number": 2100, "line_type": "generated", "code": "\n      return n.getType() == Token.RETURN\n          || n.getType() == Token.BREAK\n          || n.getType() == Token.CONTINUE\n          || n.getType() == Token.THROW\n          || n.getType() == Token.WITH\n          ||", "entropy": 0.1573486328125, "is_bug_line": false, "sus_score": 0.5553303956985474, "per_token_entropy": [0.233154296875, 0.314453125, 0.875, 0.02935791015625, 0.387939453125, 0.00884246826171875, 0.1556396484375, 0.00238800048828125, 9.012222290039062e-05, 1.3623046875, 0.387451171875, 0.00543975830078125, 0.06005859375, 0.00016510486602783203, 0.02362060546875, 0.00036025047302246094, 0.00024139881134033203, 0.00018358230590820312, 0.0002942085266113281, 1.169921875, 0.00640869140625, 0.0014057159423828125, 0.00818634033203125, 0.00038361549377441406, 0.002414703369140625, 0.00017952919006347656, 0.00016248226165771484, 0.00014007091522216797, 3.7670135498046875e-05, 0.276611328125, 0.25341796875, 0.00942230224609375, 0.1026611328125, 0.0013217926025390625, 0.01800537109375, 0.0003361701965332031, 0.0004878044128417969, 0.00013399124145507812, 8.475780487060547e-05, 0.369384765625, 0.316162109375, 0.00885772705078125, 0.13720703125, 0.0004515647888183594, 0.024261474609375, 0.0005841255187988281, 0.0012655258178710938, 0.00022101402282714844, 8.0108642578125e-05, 1.2412109375, 0.354736328125, 0.028045654296875], "tokens": [397, 442, 310, 32, 10272, 346, 610, 6512, 32, 10934, 616, 1276, 310, 32, 10272, 346, 610, 6512, 32, 26924, 616, 1276, 310, 32, 10272, 346, 610, 6512, 32, 45405, 616, 1276, 310, 32, 10272, 346, 610, 6512, 32, 24400, 616, 1276, 310, 32, 10272, 346, 610, 6512, 32, 12003, 616, 1276]}
{"line_number": 1298, "line_type": "original", "code": "      case Token.WHILE:", "entropy": 2.107421875, "is_bug_line": false, "sus_score": 0.5537674427032471, "per_token_entropy": [6.0390625, 4.40234375, 0.0265960693359375, 0.003643035888671875, 4.26953125, 0.0006198883056640625, 0.01517486572265625], "tokens": [647, 1135, 6512, 32, 11990, 5311, 44]}
{"line_number": 1298, "line_type": "generated", "code": "\n   * @return Whether the node is a declaration.\n   */\n  static boolean isDeclaration(Node n) {\n    Node parent = n.getParent();\n    // It is not possible to determine definitely if a node is a declaration\n    // or not if it", "entropy": 0.253173828125, "is_bug_line": false, "sus_score": 0.5537674427032471, "per_token_entropy": [1.0, 0.33056640625, 1.0205078125, 0.1712646484375, 0.2724609375, 0.1341552734375, 0.1416015625, 0.132080078125, 1.015625, 3.740234375, 0.85009765625, 0.0953369140625, 0.033294677734375, 0.00794219970703125, 0.02166748046875, 0.000957489013671875, 0.0006537437438964844, 0.02093505859375, 0.063232421875, 0.0024929046630859375, 0.00937652587890625, 0.0067138671875, 0.0014886856079101562, 0.033721923828125, 1.32421875, 0.0714111328125, 0.01165008544921875, 0.00785064697265625, 0.0006031990051269531, 0.00040078163146972656, 0.0005078315734863281, 0.030517578125, 1.712890625, 0.169189453125, 0.005619049072265625, 0.0066986083984375, 0.0017719268798828125, 0.00022780895233154297, 0.01122283935546875, 0.0806884765625, 0.005390167236328125, 0.0019435882568359375, 0.0025424957275390625, 0.00450897216796875, 0.032196044921875, 0.295166015625, 0.05133056640625, 0.0001800060272216797, 0.2154541015625, 0.002582550048828125, 0.006237030029296875, 0.0018854141235351562], "tokens": [664, 319, 477, 601, 14071, 322, 1541, 438, 312, 13317, 32, 664, 569, 334, 907, 1905, 438, 10367, 26, 1212, 310, 27, 301, 284, 4004, 2935, 280, 310, 32, 18789, 473, 284, 434, 2030, 438, 646, 4195, 372, 9921, 20561, 415, 312, 1541, 438, 312, 13317, 284, 434, 556, 646, 415, 561]}
{"line_number": 2111, "line_type": "original", "code": "  /**", "entropy": 2.7109375, "is_bug_line": false, "sus_score": 0.5450153350830078, "per_token_entropy": [2.33203125, 3.08984375], "tokens": [225, 1022]}
{"line_number": 2111, "line_type": "generated", "code": "\n  static int countType(Node n, int type) {\n    int count = 0;\n    if (n.getType() == type) {\n      count++;\n    }\n    for (Node child = n.getFirstChild(); child!= null;\n        ", "entropy": 0.2208251953125, "is_bug_line": false, "sus_score": 0.5450153350830078, "per_token_entropy": [0.205322265625, 0.4130859375, 0.161865234375, 0.83642578125, 1.244140625, 0.4697265625, 0.06475830078125, 0.99560546875, 0.002490997314453125, 0.07135009765625, 0.06982421875, 0.271728515625, 0.0028858184814453125, 0.030029296875, 1.060546875, 0.289306640625, 0.003631591796875, 0.1136474609375, 0.00336456298828125, 0.0008592605590820312, 0.11102294921875, 1.0361328125, 0.0110015869140625, 0.04608154296875, 0.1273193359375, 0.0015230178833007812, 0.0008168220520019531, 0.0037059783935546875, 0.005962371826171875, 0.029205322265625, 0.045806884765625, 0.05242919921875, 0.08612060546875, 0.237548828125, 0.00882720947265625, 0.0003345012664794922, 0.1917724609375, 0.04583740234375, 0.0148773193359375, 0.0032711029052734375, 0.83349609375, 0.8212890625, 0.003566741943359375, 2.0265579223632812e-05, 0.0007505416870117188, 0.00016689300537109375, 0.0039825439453125, 0.35888671875, 0.0010395050048828125, 0.0011577606201171875, 0.0055389404296875, 1.0869140625], "tokens": [334, 907, 629, 2385, 620, 26, 1212, 310, 30, 629, 827, 27, 301, 284, 629, 2385, 280, 225, 34, 45, 284, 415, 308, 96, 32, 10272, 346, 610, 827, 27, 301, 397, 2385, 3334, 284, 320, 284, 436, 308, 1212, 2838, 280, 310, 32, 25657, 2931, 473, 2838, 863, 744, 45, 276]}
{"line_number": 2198, "line_type": "original", "code": "    }", "entropy": 7.1640625, "is_bug_line": false, "sus_score": 0.5417894124984741, "per_token_entropy": [4.18359375, 10.140625], "tokens": [264, 320]}
{"line_number": 2198, "line_type": "generated", "code": "\n                     Predicate<Node> traverseChildrenPred) {\n    vistor.visit(node);\n\n    if (traverseChildrenPred.apply(node)) {\n      for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {", "entropy": 0.06719970703125, "is_bug_line": false, "sus_score": 0.5417894124984741, "per_token_entropy": [1.3779296875, 0.052276611328125, 0.008056640625, 0.0005478858947753906, 0.00015020370483398438, 0.29150390625, 0.009124755859375, 0.0231170654296875, 0.0443115234375, 0.01580810546875, 0.1317138671875, 0.45068359375, 2.384185791015625e-07, 0.00033926963806152344, 0.00038170814514160156, 0.0008978843688964844, 0.002262115478515625, 0.0007042884826660156, 0.497802734375, 0.04180908203125, 0.267578125, 0.0447998046875, 8.893013000488281e-05, 0.0002772808074951172, 0.004062652587890625, 0.0004410743713378906, 0.00020253658294677734, 0.0023193359375, 0.0032958984375, 0.0013141632080078125, 0.027557373046875, 0.0367431640625, 0.000904083251953125, 0.0008492469787597656, 0.129638671875, 0.001537322998046875, 0.0008726119995117188, 0.00026917457580566406, 0.00434112548828125, 0.00010013580322265625, 0.00206756591796875, 0.002826690673828125, 0.00048613548278808594, 0.0003044605255126953, 0.00397491455078125, 0.00484466552734375, 0.0004506111145019531, 0.00017964839935302734, 8.189678192138672e-05, 3.826618194580078e-05, 0.0006318092346191406, 0.0007824897766113281], "tokens": [3486, 23426, 46, 1212, 48, 29046, 7640, 7903, 27, 301, 284, 354, 10971, 32, 8275, 26, 1251, 293, 446, 415, 308, 33261, 7640, 7903, 32, 4699, 26, 1251, 490, 301, 397, 436, 308, 1212, 281, 280, 1541, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301]}
{"line_number": 2214, "line_type": "original", "code": "   * @return The number of times the the predicate is true for the node", "entropy": 2.08984375, "is_bug_line": false, "sus_score": 0.5348266363143921, "per_token_entropy": [6.58203125, 2.361328125, 0.99072265625, 2.814453125, 2.701171875, 1.75, 0.019805908203125, 2.552734375, 0.763671875, 7.75390625, 1.14453125, 1.3212890625, 0.424560546875, 1.0087890625, 0.8583984375, 0.395263671875], "tokens": [261, 319, 477, 601, 886, 1451, 432, 6496, 322, 322, 14094, 438, 861, 436, 322, 1541]}
{"line_number": 2214, "line_type": "generated", "code": "                     Predicate<Node> traverseChildrenPred) {\n    if (traverseChildrenPred.apply(node)) {\n      for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n        visitPostOrder(c, v", "entropy": 0.0411376953125, "is_bug_line": false, "sus_score": 0.5348266363143921, "per_token_entropy": [1.501953125, 0.014678955078125, 0.00974273681640625, 0.0018749237060546875, 0.0003426074981689453, 0.0118560791015625, 0.0009274482727050781, 0.0016880035400390625, 0.017608642578125, 0.0638427734375, 0.27783203125, 0.05743408203125, 0.004611968994140625, 0.003814697265625, 2.300739288330078e-05, 1.0013580322265625e-05, 0.0007996559143066406, 0.00019490718841552734, 0.0001703500747680664, 0.00096893310546875, 0.00044155120849609375, 0.0009360313415527344, 0.00970458984375, 0.0014133453369140625, 0.000308990478515625, 0.0005812644958496094, 0.0043487548828125, 0.0002378225326538086, 0.0006093978881835938, 0.0002713203430175781, 0.0132293701171875, 6.508827209472656e-05, 0.00032782554626464844, 0.0008878707885742188, 0.00010573863983154297, 0.00039577484130859375, 0.0004940032958984375, 0.0008487701416015625, 0.0004420280456542969, 0.00017786026000976562, 0.00012290477752685547, 3.826618194580078e-05, 0.00020456314086914062, 0.002471923828125, 0.08001708984375, 0.003292083740234375, 0.03515625, 6.091594696044922e-05, 0.001033782958984375, 0.0016641616821289062, 2.8371810913085938e-05, 0.008087158203125], "tokens": [6022, 23426, 46, 1212, 48, 29046, 7640, 7903, 27, 301, 284, 415, 308, 33261, 7640, 7903, 32, 4699, 26, 1251, 490, 301, 397, 436, 308, 1212, 281, 280, 1541, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301, 291, 7725, 3160, 2871, 26, 85, 30, 354]}
{"line_number": 2425, "line_type": "original", "code": "    switch (value.getType()) {", "entropy": 1.498046875, "is_bug_line": false, "sus_score": 0.49413707852363586, "per_token_entropy": [6.140625, 5.5625, 0.05096435546875, 0.07366943359375, 0.003238677978515625, 0.0321044921875, 0.0005159378051757812, 0.123291015625], "tokens": [264, 3578, 308, 853, 32, 10272, 1157, 301]}
{"line_number": 2425, "line_type": "generated", "code": "\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * @return Whether the CALL node has a local result.\n   */\n  static boolean callHasLocalResult(Node call) {\n    Node fn = call.getFirstChild();\n    if (!", "entropy": 0.293212890625, "is_bug_line": false, "sus_score": 0.49413707852363586, "per_token_entropy": [0.416748046875, 0.58349609375, 0.0009975433349609375, 0.0237274169921875, 0.265380859375, 0.255615234375, 0.000957489013671875, 0.45166015625, 0.020416259765625, 0.232177734375, 0.0034046173095703125, 0.4052734375, 0.38134765625, 0.09698486328125, 0.0003616809844970703, 0.54541015625, 0.24365234375, 0.10528564453125, 0.30029296875, 1.185546875, 0.202392578125, 1.1875, 0.1866455078125, 0.59716796875, 0.268310546875, 0.666015625, 0.1678466796875, 0.0689697265625, 0.0016536712646484375, 0.343505859375, 0.006000518798828125, 0.004688262939453125, 0.0006947517395019531, 0.00016260147094726562, 7.402896881103516e-05, 0.0005698204040527344, 0.0018157958984375, 0.46875, 0.2227783203125, 0.0002970695495605469, 0.0291290283203125, 0.97021484375, 1.974609375, 0.209716796875, 0.06292724609375, 0.003986358642578125, 0.06439208984375, 0.00099945068359375, 0.00740814208984375, 0.1121826171875, 0.84765625, 1.048828125], "tokens": [397, 1244, 44, 291, 442, 901, 45, 284, 320, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 16084, 1541, 1401, 312, 2196, 1056, 32, 664, 569, 334, 907, 1905, 1476, 3993, 3325, 1394, 26, 1212, 1476, 27, 301, 284, 4004, 2771, 280, 1476, 32, 25657, 2931, 473, 284, 415, 1429]}
{"line_number": 820, "line_type": "original", "code": "      case Token.THROW:", "entropy": 2.47265625, "is_bug_line": false, "sus_score": 0.48489469289779663, "per_token_entropy": [7.4453125, 1.810546875, 0.00250244140625, 0.000461578369140625, 5.56640625, 0.00769805908203125], "tokens": [647, 1135, 6512, 32, 24400, 44]}
{"line_number": 820, "line_type": "generated", "code": "\n        return false;\n\n      case Token.ASSIGN:\n        return true;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        // Getter and setters can be affected by side-effects.\n        return true;\n\n      case", "entropy": 0.48193359375, "is_bug_line": false, "sus_score": 0.48489469289779663, "per_token_entropy": [0.274169921875, 0.09637451171875, 0.05694580078125, 0.0012226104736328125, 0.6103515625, 0.5205078125, 0.0008206367492675781, 6.389617919921875e-05, 1.1181640625, 0.00899505615234375, 0.53173828125, 1.3701171875, 0.8994140625, 0.00041604042053222656, 0.3369140625, 0.39892578125, 0.0005202293395996094, 2.5391578674316406e-05, 2.55078125, 0.74951171875, 0.00010097026824951172, 0.002330780029296875, 0.00013387203216552734, 0.2890625, 0.0034656524658203125, 0.0001773834228515625, 1.0967254638671875e-05, 0.006855010986328125, 3.218650817871094e-05, 1.2636184692382812e-05, 2.944469451904297e-05, 0.00010728836059570312, 0.491455078125, 0.59912109375, 2.5234375, 0.7255859375, 1.6748046875, 0.006679534912109375, 1.6259765625, 1.1552734375, 2.681640625, 0.23583984375, 1.455078125, 0.1988525390625, 0.0399169921875, 0.86669921875, 0.256591796875, 0.11669921875, 0.02337646484375, 0.00023066997528076172, 0.12115478515625, 0.432861328125], "tokens": [291, 442, 901, 45, 1687, 1135, 6512, 32, 25620, 44, 291, 442, 861, 45, 1687, 1135, 6512, 32, 2788, 2916, 81, 4416, 44, 397, 1135, 6512, 32, 2695, 2916, 81, 4416, 44, 291, 434, 35587, 461, 739, 5725, 883, 526, 18802, 810, 5209, 31, 16423, 32, 291, 442, 861, 45, 1687, 1135]}
{"line_number": 414, "line_type": "original", "code": "      case Token.GETPROP:", "entropy": 2.931640625, "is_bug_line": false, "sus_score": 0.48096367716789246, "per_token_entropy": [3.90625, 0.046783447265625, 0.0008358955383300781, 0.000293731689453125, 6.6875, 4.11328125, 5.7578125], "tokens": [647, 1135, 6512, 32, 2788, 15262, 44]}
{"line_number": 414, "line_type": "generated", "code": "\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NEW:\n      case Token.OR:\n      case Token", "entropy": 0.07281494140625, "is_bug_line": false, "sus_score": 0.48096367716789246, "per_token_entropy": [0.280029296875, 0.0219268798828125, 0.00044655799865722656, 2.872943878173828e-05, 0.51318359375, 4.017353057861328e-05, 0.048919677734375, 0.0005545616149902344, 0.00010037422180175781, 1.7881393432617188e-05, 0.04779052734375, 0.00820159912109375, 4.0531158447265625e-06, 0.024627685546875, 0.0007452964782714844, 0.00020933151245117188, 5.3763389587402344e-05, 0.0011005401611328125, 1.919269561767578e-05, 0.047027587890625, 0.0008974075317382812, 0.0003342628479003906, 2.2530555725097656e-05, 0.2000732421875, 0.0001055002212524414, 0.03057861328125, 0.0005931854248046875, 0.0003876686096191406, 5.9485435485839844e-05, 0.015960693359375, 1.633167266845703e-05, 0.0419921875, 0.0007462501525878906, 0.00018358230590820312, 0.0003514289855957031, 0.3740234375, 1.2278556823730469e-05, 0.046173095703125, 0.0006279945373535156, 0.00013494491577148438, 6.0439109802246094e-05, 1.0615234375, 0.0016078948974609375, 0.07373046875, 0.0013074874877929688, 9.036064147949219e-05, 1.3232231140136719e-05, 0.7880859375, 0.00016820430755615234, 0.149658203125, 0.0021381378173828125, 0.000408172607421875], "tokens": [397, 1135, 6512, 32, 815, 44, 397, 1135, 6512, 32, 62, 2514, 44, 397, 1135, 6512, 32, 11704, 44, 397, 1135, 6512, 32, 6719, 44, 397, 1135, 6512, 32, 12769, 44, 397, 1135, 6512, 32, 3567, 44, 397, 1135, 6512, 32, 11356, 44, 397, 1135, 6512, 32, 758, 44, 397, 1135, 6512]}
{"line_number": 305, "line_type": "original", "code": "        // We assume here that programs don't change the value of the keyword", "entropy": 3.314453125, "is_bug_line": false, "sus_score": 0.4774990379810333, "per_token_entropy": [5.8984375, 0.62890625, 3.5546875, 4.84765625, 3.4375, 0.0755615234375, 11.8046875, 1.5556640625, 0.001773834228515625, 3.748046875, 1.421875, 2.986328125, 0.4384765625, 2.373046875, 6.94921875], "tokens": [351, 434, 2688, 10014, 2442, 688, 18335, 2800, 1330, 1539, 322, 786, 432, 322, 11659]}
{"line_number": 305, "line_type": "generated", "code": "\n            return false;\n          }\n        }\n        return true;\n\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      case Token.VOID:", "entropy": 0.0947265625, "is_bug_line": false, "sus_score": 0.4774990379810333, "per_token_entropy": [0.08538818359375, 0.30517578125, 0.00615692138671875, 0.0018529891967773438, 0.04510498046875, 0.0005059242248535156, 0.192626953125, 8.535385131835938e-05, 0.0282135009765625, 0.00572967529296875, 0.0006299018859863281, 7.104873657226562e-05, 0.048828125, 0.0219268798828125, 0.0001538991928100586, 3.409385681152344e-05, 1.154296875, 0.0037593841552734375, 0.379638671875, 0.0013570785522460938, 1.52587890625e-05, 0.0001327991485595703, 0.0194091796875, 1.4901161193847656e-05, 0.10943603515625, 0.0014047622680664062, 9.179115295410156e-06, 4.172325134277344e-05, 0.78271484375, 6.318092346191406e-06, 0.00940704345703125, 0.00024068355560302734, 6.67572021484375e-06, 3.2901763916015625e-05, 0.0203704833984375, 4.291534423828125e-06, 0.0017251968383789062, 8.976459503173828e-05, 5.9604644775390625e-06, 8.177757263183594e-05, 5.352497100830078e-05, 2.3603439331054688e-05, 0.234130859375, 0.032867431640625, 0.003391265869140625, 0.00019562244415283203, 0.09271240234375, 0.026031494140625, 9.846687316894531e-05, 2.777576446533203e-05, 1.310546875, 5.7220458984375e-05], "tokens": [324, 442, 901, 45, 616, 320, 291, 320, 291, 442, 861, 45, 1687, 1135, 6512, 32, 5203, 44, 397, 1135, 6512, 32, 10463, 44, 397, 1135, 6512, 32, 3293, 44, 397, 1135, 6512, 32, 6373, 44, 397, 1135, 6512, 32, 7347, 44, 291, 442, 861, 45, 1687, 1135, 6512, 32, 13572, 44]}
{"line_number": 2095, "line_type": "original", "code": "  /**", "entropy": 2.142578125, "is_bug_line": false, "sus_score": 0.47666844725608826, "per_token_entropy": [4.0234375, 0.26123046875], "tokens": [225, 1022]}
{"line_number": 2095, "line_type": "generated", "code": "\n  /**\n   * A predicate for matching function nodes.\n   */\n  static class MatchFunction implements Predicate<Node>{\n    public boolean apply(Node n) {\n      return isFunction(n);\n    }\n  }\n\n  /**\n   * A predicate for matching function", "entropy": 0.152587890625, "is_bug_line": false, "sus_score": 0.47666844725608826, "per_token_entropy": [0.56640625, 0.16015625, 0.0460205078125, 0.0004849433898925781, 0.8603515625, 0.06591796875, 0.053802490234375, 0.0845947265625, 1.599609375, 0.625, 0.78759765625, 0.02490234375, 0.03875732421875, 0.010406494140625, 0.21826171875, 0.05157470703125, 0.01084136962890625, 0.0178375244140625, 0.05035400390625, 0.0008044242858886719, 0.00043511390686035156, 0.00021529197692871094, 0.177490234375, 0.04046630859375, 0.0819091796875, 0.0010251998901367188, 0.0001709461212158203, 0.0006971359252929688, 0.00016248226165771484, 0.004085540771484375, 0.00616455078125, 0.00026106834411621094, 0.007038116455078125, 0.006710052490234375, 0.04486083984375, 0.003780364990234375, 0.006427764892578125, 7.82012939453125e-05, 0.01409912109375, 0.0009937286376953125, 0.0007038116455078125, 0.004596710205078125, 0.00032830238342285156, 0.445556640625, 0.060455322265625, 0.0178070068359375, 9.59634780883789e-05, 0.2073974609375, 0.0196380615234375, 0.0308074951171875, 0.037261962890625, 1.4375], "tokens": [334, 1022, 664, 319, 399, 14094, 436, 9215, 667, 5166, 32, 664, 569, 334, 907, 443, 12253, 2447, 4575, 23426, 46, 1212, 4178, 284, 562, 1905, 4871, 26, 1212, 310, 27, 301, 397, 442, 438, 2447, 26, 96, 293, 284, 320, 334, 320, 719, 1022, 664, 319, 399, 14094, 436, 9215, 667]}
{"line_number": 2527, "line_type": "original", "code": "    if (isGet(getNode)) {", "entropy": 1.6630859375, "is_bug_line": false, "sus_score": 0.4759798049926758, "per_token_entropy": [6.07421875, 2.306640625, 0.318603515625, 1.37109375, 1.8564453125, 1.3115234375, 0.99951171875, 0.65625, 0.07794189453125], "tokens": [264, 415, 308, 297, 936, 26, 17699, 490, 301]}
{"line_number": 2527, "line_type": "generated", "code": "\n\n  private static boolean isCallOrNew(Node call) {\n    return call.getType() == Token.CALL || call.getType() == Token.NEW;\n  }\n\n  private static boolean isFunction(Node function) {\n    return function.getType()", "entropy": 0.189208984375, "is_bug_line": false, "sus_score": 0.4759798049926758, "per_token_entropy": [0.75341796875, 1.478515625, 0.03692626953125, 0.128173828125, 0.430908203125, 1.5087890625, 0.065673828125, 0.004611968994140625, 0.0643310546875, 0.0011606216430664062, 1.2900390625, 0.327880859375, 0.003536224365234375, 0.1441650390625, 0.56591796875, 0.3837890625, 0.091064453125, 0.10064697265625, 0.0010709762573242188, 0.0033740997314453125, 0.0029392242431640625, 4.839897155761719e-05, 0.1585693359375, 0.17724609375, 0.055389404296875, 0.0001518726348876953, 0.0016689300537109375, 0.0007271766662597656, 0.00033783912658691406, 0.00046634674072265625, 1.2874603271484375e-05, 2.002716064453125e-05, 0.005130767822265625, 0.00644683837890625, 0.0005369186401367188, 0.0721435546875, 0.363525390625, 0.0062103271484375, 0.016021728515625, 0.05242919921875, 0.42724609375, 0.022735595703125, 0.0009355545043945312, 0.9033203125, 0.09686279296875, 0.0002899169921875, 0.004970550537109375, 0.0318603515625, 0.019439697265625, 0.01788330078125, 0.006092071533203125, 0.0005049705505371094], "tokens": [719, 945, 907, 1905, 438, 1853, 1527, 1812, 26, 1212, 1476, 27, 301, 284, 442, 1476, 32, 10272, 346, 610, 6512, 32, 5038, 1276, 1476, 32, 10272, 346, 610, 6512, 32, 11356, 45, 334, 320, 719, 945, 907, 1905, 438, 2447, 26, 1212, 667, 27, 301, 284, 442, 667, 32, 10272, 346]}
{"line_number": 960, "line_type": "original", "code": "      case Token.NAME:", "entropy": 2.017578125, "is_bug_line": false, "sus_score": 0.47594648599624634, "per_token_entropy": [4.69140625, 2.77734375, 0.004169464111328125, 0.0009407997131347656, 4.62109375, 0.003620147705078125], "tokens": [647, 1135, 6512, 32, 2474, 44]}
{"line_number": 960, "line_type": "generated", "code": "\n        return false;\n    }\n  }\n\n  /**\n   * Returns true if the operator is a comparison operator.\n   */\n  static boolean isComparisonOp(int type) {\n    switch (type) {\n      case Token.EQ:\n      case Token.NE", "entropy": 0.1424560546875, "is_bug_line": false, "sus_score": 0.47594648599624634, "per_token_entropy": [0.521484375, 0.0703125, 0.06878662109375, 0.0006737709045410156, 0.0162811279296875, 0.001079559326171875, 0.0115509033203125, 0.0012454986572265625, 0.333251953125, 0.434814453125, 0.053253173828125, 0.0009984970092773438, 0.54052734375, 0.51123046875, 0.038543701171875, 0.2025146484375, 0.497802734375, 0.1845703125, 0.9443359375, 0.6640625, 0.40625, 0.1961669921875, 0.013336181640625, 0.17236328125, 0.002155303955078125, 0.0296783447265625, 0.0024814605712890625, 0.0003046989440917969, 0.08367919921875, 0.71630859375, 0.0014820098876953125, 0.006622314453125, 0.050262451171875, 0.0013599395751953125, 0.0004572868347167969, 0.00962066650390625, 0.1405029296875, 0.01082611083984375, 0.0006628036499023438, 0.00011301040649414062, 0.0006961822509765625, 0.03521728515625, 0.0063323974609375, 0.0008020401000976562, 7.95125961303711e-05, 0.330078125, 0.0016508102416992188, 0.0201873779296875, 8.71419906616211e-05, 3.7550926208496094e-05, 4.4226646423339844e-05, 0.0714111328125], "tokens": [291, 442, 901, 45, 284, 320, 334, 320, 719, 1022, 664, 319, 3759, 861, 415, 322, 4134, 438, 312, 14828, 4134, 32, 664, 569, 334, 907, 1905, 438, 15021, 3397, 26, 410, 827, 27, 301, 284, 3578, 308, 681, 27, 301, 397, 1135, 6512, 32, 2697, 44, 397, 1135, 6512, 32, 3567]}
{"line_number": 588, "line_type": "original", "code": "        // check the children, since they aren't executed at declaration time.", "entropy": 3.75390625, "is_bug_line": false, "sus_score": 0.47594648599624634, "per_token_entropy": [5.6875, 3.078125, 10.203125, 2.755859375, 6.07421875, 3.130859375, 3.703125, 1.41796875, 4.78515625, 0.0005140304565429688, 5.6640625, 4.88671875, 3.615234375, 0.61767578125, 0.68212890625], "tokens": [351, 434, 1505, 322, 5713, 30, 4558, 2953, 15420, 1330, 10768, 821, 13317, 1133, 32]}
{"line_number": 588, "line_type": "generated", "code": "\n            return false;\n          }\n\n          if (isName(assignTarget.getFirstChild())) {\n            return true;\n          }\n\n          return false;\n        }\n\n        // All other nodes are considered to have side effects.\n        return true;\n    }\n\n    for (", "entropy": 0.356689453125, "is_bug_line": false, "sus_score": 0.47594648599624634, "per_token_entropy": [0.157470703125, 0.7138671875, 0.376953125, 0.004913330078125, 0.03509521484375, 0.00049591064453125, 0.30908203125, 1.4072265625, 0.177001953125, 0.90625, 1.6064453125, 0.2216796875, 0.084228515625, 0.00013887882232666016, 0.72802734375, 0.1929931640625, 4.7206878662109375e-05, 0.1600341796875, 0.0014333724975585938, 0.08538818359375, 0.79345703125, 0.08331298828125, 0.0005970001220703125, 0.02484130859375, 0.00019633769989013672, 0.59228515625, 0.67822265625, 0.10552978515625, 0.00013184547424316406, 0.08740234375, 0.0003209114074707031, 0.282470703125, 1.291015625, 2.15625, 0.09942626953125, 0.5439453125, 0.8955078125, 1.2822265625, 0.2259521484375, 0.044342041015625, 0.179931640625, 0.329345703125, 0.6328125, 0.11639404296875, 0.078857421875, 0.0033512115478515625, 0.0002942085266113281, 0.061248779296875, 0.0013217926025390625, 0.1317138671875, 0.65966796875, 0.0009374618530273438], "tokens": [324, 442, 901, 45, 616, 320, 5678, 415, 308, 297, 558, 26, 5157, 2922, 32, 25657, 2931, 5156, 301, 324, 442, 861, 45, 616, 320, 5678, 442, 901, 45, 291, 320, 584, 434, 3367, 1604, 5166, 884, 11870, 372, 1159, 5209, 15987, 32, 291, 442, 861, 45, 284, 320, 446, 436, 308]}
