{"line_number": 1045, "line_type": "original", "code": "            if (c > 0x1f && c <= 0x7f) {", "entropy": 1.490234375, "is_bug_line": true, "sus_score": 0.8801572322845459, "per_token_entropy": [7.32421875, 1.291015625, 0.044158935546875, 1.0908203125, 10.375, 0.2239990234375, 0.08294677734375, 0.18505859375, 0.07977294921875, 3.44140625, 0.25244140625, 0.0286407470703125, 3.830078125, 0.01483154296875, 0.00847625732421875, 0.06591796875, 0.059906005859375, 1.1796875, 0.09783935546875, 0.1207275390625], "tokens": [1468, 415, 308, 85, 848, 225, 34, 106, 35, 88, 962, 281, 2511, 225, 34, 106, 41, 88, 27, 301]}
{"line_number": 1045, "line_type": "generated", "code": "\n    }\n    return i;\n  }", "entropy": 0.1220703125, "is_bug_line": true, "sus_score": 0.8801572322845459, "per_token_entropy": [0.587890625, 0.215576171875, 0.0667724609375, 0.07037353515625, 0.003421783447265625, 0.00202178955078125, 0.0282440185546875, 0.0024967193603515625], "tokens": [284, 320, 284, 442, 595, 45, 334, 320]}
{"line_number": 1177, "line_type": "original", "code": "    if (Character.isSupplementaryCodePoint(codePoint)) {", "entropy": 0.66015625, "is_bug_line": false, "sus_score": 0.7903439402580261, "per_token_entropy": [4.33984375, 2.43359375, 0.241455078125, 2.28515625, 0.0008854866027832031, 0.12420654296875, 0.6865234375, 2.2649765014648438e-06, 6.318092346191406e-06, 0.00012302398681640625, 0.0011758804321289062, 0.003421783447265625, 0.320068359375, 0.013397216796875, 0.0611572265625, 0.054931640625], "tokens": [264, 415, 308, 6881, 32, 297, 33777, 727, 672, 1227, 1943, 26, 687, 1943, 490, 301]}
{"line_number": 1177, "line_type": "generated", "code": "\n  /**\n   * Returns a javascript representation of the character in a hex escaped\n   * format.\n   *\n   * @param c The character to append.\n   * @param out The buffer to which the hex representation should be appended.\n   */\n  private static", "entropy": 0.09271240234375, "is_bug_line": false, "sus_score": 0.7903439402580261, "per_token_entropy": [0.90283203125, 0.50341796875, 0.136962890625, 0.0008730888366699219, 1.0048828125, 0.23583984375, 0.1998291015625, 0.0404052734375, 0.002838134765625, 0.047576904296875, 0.332763671875, 0.0253753662109375, 0.01461029052734375, 0.0107574462890625, 0.0009455680847167969, 0.00545501708984375, 6.783008575439453e-05, 0.0011243820190429688, 0.020751953125, 0.039703369140625, 0.056610107421875, 0.01323699951171875, 0.0013217926025390625, 0.0217742919921875, 0.00730133056640625, 0.368896484375, 0.03155517578125, 0.419189453125, 0.01204681396484375, 0.08935546875, 0.01702880859375, 0.0051116943359375, 0.00576019287109375, 0.001987457275390625, 0.0136871337890625, 0.1341552734375, 0.0015411376953125, 0.0027008056640625, 0.0003311634063720703, 0.0007562637329101562, 0.00029730796813964844, 0.0019626617431640625, 0.0008153915405273438, 0.0008592605590820312, 0.0001595020294189453, 0.0009145736694335938, 0.0003151893615722656, 0.0006628036499023438, 0.025146484375, 0.0164794921875, 0.0355224609375, 0.00568389892578125], "tokens": [334, 1022, 664, 319, 3759, 312, 18778, 10293, 432, 322, 5341, 328, 312, 9960, 31253, 664, 319, 2179, 32, 664, 319, 664, 319, 477, 753, 281, 886, 5341, 372, 5489, 32, 664, 319, 477, 753, 963, 886, 3112, 372, 1510, 322, 9960, 10293, 1395, 526, 22363, 32, 664, 569, 334, 945, 907]}
{"line_number": 628, "line_type": "original", "code": "        if (childCount !=", "entropy": 2.564453125, "is_bug_line": false, "sus_score": 0.7858842015266418, "per_token_entropy": [6.78515625, 1.357421875, 0.1409912109375, 4.71875, 0.08172607421875, 2.30078125], "tokens": [351, 415, 308, 2661, 1534, 863]}
{"line_number": 628, "line_type": "generated", "code": "\n            addExpr(c.getFirstChild(), 1);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.REGEXP:\n        Preconditions.checkState", "entropy": 0.141357421875, "is_bug_line": false, "sus_score": 0.7858842015266418, "per_token_entropy": [0.4013671875, 1.3251953125, 0.5615234375, 0.096435546875, 0.0869140625, 0.0550537109375, 0.1192626953125, 0.0005059242248535156, 0.467529296875, 0.4482421875, 0.4970703125, 0.11376953125, 0.1883544921875, 0.0007920265197753906, 0.0552978515625, 0.001033782958984375, 0.062164306640625, 0.104736328125, 0.0029430389404296875, 0.00885009765625, 0.11053466796875, 0.01409912109375, 0.00044608116149902344, 0.003063201904296875, 1.633167266845703e-05, 1.430511474609375e-06, 4.76837158203125e-07, 0.00051116943359375, 0.0030975341796875, 0.0059814453125, 0.0128173828125, 0.0002827644348144531, 0.0013103485107421875, 0.007732391357421875, 0.0002180337905883789, 0.07720947265625, 0.07470703125, 0.0006551742553710938, 0.007843017578125, 0.0005702972412109375, 0.094970703125, 0.027862548828125, 0.0007228851318359375, 2.2649765014648438e-06, 0.9619140625, 0.013427734375, 0.0006208419799804688, 0.199462890625, 1.125, 0.0002872943878173828, 0.0001493692398071289, 0.0047149658203125], "tokens": [324, 1015, 6150, 26, 85, 32, 25657, 2931, 1026, 225, 35, 293, 616, 320, 291, 320, 291, 1015, 440, 13626, 291, 415, 308, 23800, 66, 586, 2425, 27, 301, 616, 1015, 440, 13372, 291, 320, 291, 1626, 45, 397, 320, 1687, 1135, 6512, 32, 4733, 12275, 44, 291, 40596, 32, 1553, 1078]}
{"line_number": 943, "line_type": "original", "code": "    for (int i = 0; i < s.length(); i++) {", "entropy": 0.46923828125, "is_bug_line": false, "sus_score": 0.7845516800880432, "per_token_entropy": [5.43359375, 1.5791015625, 0.0124969482421875, 0.0267791748046875, 0.0269622802734375, 0.0261383056640625, 0.0138397216796875, 0.000720977783203125, 0.47021484375, 0.006107330322265625, 0.315185546875, 0.3173828125, 0.003658294677734375, 0.0014200210571289062, 0.0167083740234375, 0.18115234375, 0.0033283233642578125, 0.01215362548828125], "tokens": [264, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309, 32, 1322, 473, 595, 1987, 301]}
{"line_number": 943, "line_type": "generated", "code": "\n    // we need to count the number of backslashes to see if we need to escape\n    // them or not.  We can't do this in the loop below because we don't know\n    // how many characters we will need for the escape sequences", "entropy": 1.060546875, "is_bug_line": false, "sus_score": 0.7845516800880432, "per_token_entropy": [0.1982421875, 2.36328125, 4.13671875, 2.0234375, 0.3154296875, 2.533203125, 0.385009765625, 1.31640625, 0.0081634521484375, 1.5888671875, 0.13671875, 0.001651763916015625, 1.5068359375, 2.1328125, 0.25439453125, 0.36865234375, 0.787109375, 0.1900634765625, 0.8583984375, 0.3583984375, 0.1844482421875, 0.90380859375, 1.73828125, 0.19140625, 1.0, 0.8583984375, 1.9765625, 2.052734375, 0.8349609375, 2.32421875, 0.5205078125, 1.6552734375, 0.908203125, 0.98291015625, 1.4599609375, 0.55126953125, 0.60009765625, 1.859375, 0.0005054473876953125, 0.61474609375, 0.07025146484375, 0.004978179931640625, 1.29296875, 0.338134765625, 2.087890625, 1.302734375, 1.2490234375, 1.53515625, 1.5966796875, 0.2587890625, 2.232421875, 0.51318359375], "tokens": [284, 434, 996, 1849, 372, 2385, 322, 1451, 432, 1751, 2003, 16670, 372, 2318, 415, 996, 1849, 372, 15820, 284, 434, 3026, 556, 646, 32, 225, 2688, 883, 1330, 745, 458, 328, 322, 5258, 4794, 3301, 996, 2800, 1330, 3702, 284, 434, 2624, 5075, 7125, 996, 1098, 1849, 436, 322, 15820, 17211]}
{"line_number": 993, "line_type": "original", "code": "    StringBuilder sb = new StringBuilder(s.length() + 2);", "entropy": 1.533203125, "is_bug_line": false, "sus_score": 0.7840090990066528, "per_token_entropy": [5.3984375, 10.1796875, 0.7138671875, 0.1942138671875, 0.03240966796875, 0.0035114288330078125, 1.3505859375, 0.259521484375, 0.011199951171875, 0.003910064697265625, 0.453125, 1.2568359375, 0.043426513671875, 1.9765625, 1.1162109375], "tokens": [264, 9706, 6115, 280, 537, 9706, 26, 101, 32, 1322, 346, 474, 225, 36, 293]}
{"line_number": 993, "line_type": "generated", "code": "\n            sb.append(c);\n          }\n          break;\n      }\n    }\n    sb.append(quote);\n    return sb.toString();\n  }\n\n  /**\n   * Appends the javascript representation of the given character to the given\n   * StringBuilder.\n  ", "entropy": 0.274169921875, "is_bug_line": false, "sus_score": 0.7840090990066528, "per_token_entropy": [0.59423828125, 0.1915283203125, 0.0005011558532714844, 0.00019049644470214844, 0.006412506103515625, 0.00817108154296875, 0.0010089874267578125, 0.1068115234375, 0.0010576248168945312, 0.8544921875, 0.006256103515625, 0.0005865097045898438, 0.0296478271484375, 0.00066375732421875, 0.06591796875, 0.0008220672607421875, 0.1363525390625, 0.0345458984375, 4.7206878662109375e-05, 6.473064422607422e-05, 0.0010547637939453125, 0.0004703998565673828, 0.0008311271667480469, 0.7109375, 0.0137786865234375, 0.1038818359375, 0.05438232421875, 0.0030364990234375, 0.0028076171875, 0.09979248046875, 0.0016946792602539062, 0.2479248046875, 0.57958984375, 0.5458984375, 0.0034999847412109375, 1.345703125, 0.0010395050048828125, 0.80126953125, 1.8984375, 0.52197265625, 0.1070556640625, 0.65869140625, 0.521484375, 0.55078125, 0.85009765625, 0.1612548828125, 0.6904296875, 0.05462646484375, 0.0012254714965820312, 0.98193359375, 0.2491455078125, 0.4521484375], "tokens": [324, 6115, 32, 1689, 26, 85, 293, 616, 320, 616, 1626, 45, 397, 320, 284, 320, 284, 6115, 32, 1689, 26, 7345, 293, 284, 442, 6115, 32, 3108, 473, 334, 320, 719, 1022, 664, 319, 1995, 1494, 322, 18778, 10293, 432, 322, 2702, 5341, 372, 322, 2702, 664, 319, 9706, 32, 664]}
{"line_number": 1160, "line_type": "original", "code": "      appendHexJavaScriptRepresentation(c, sb);", "entropy": 1.451171875, "is_bug_line": false, "sus_score": 0.7819864749908447, "per_token_entropy": [7.078125, 4.703125, 0.35400390625, 0.0006237030029296875, 0.01465606689453125, 0.0714111328125, 1.6953125, 0.1185302734375, 0.458251953125, 0.0215606689453125], "tokens": [647, 5489, 10226, 14575, 16541, 26, 85, 30, 6115, 293]}
{"line_number": 1160, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7819864749908447, "per_token_entropy": [], "tokens": []}
{"line_number": 1051, "line_type": "original", "code": "              appendHexJavaScriptRepresentation(sb, c);", "entropy": 2.271484375, "is_bug_line": false, "sus_score": 0.7817865014076233, "per_token_entropy": [10.0390625, 11.140625, 1.361328125, 0.003879547119140625, 0.01983642578125, 0.049560546875, 0.048797607421875, 0.005580902099609375, 0.0360107421875, 0.01178741455078125], "tokens": [2850, 5489, 10226, 14575, 16541, 26, 5682, 30, 281, 293]}
{"line_number": 1051, "line_type": "generated", "code": "\n    return n.getFirstChild();\n  }\n\n  /** Gets the last non-empty child of the given node. */\n  private static Node getLastNonEmptyChild(Node n) {\n    Node c = n.getLastChild();\n    while (c!= null", "entropy": 0.1336669921875, "is_bug_line": false, "sus_score": 0.7817865014076233, "per_token_entropy": [0.56005859375, 0.90966796875, 0.578125, 0.1846923828125, 0.02398681640625, 0.0002465248107910156, 0.024749755859375, 0.03192138671875, 0.0007686614990234375, 0.1832275390625, 0.327880859375, 0.7197265625, 0.046844482421875, 0.75732421875, 0.034942626953125, 0.0024127960205078125, 0.004138946533203125, 0.006702423095703125, 0.005069732666015625, 0.00888824462890625, 0.001331329345703125, 0.0023345947265625, 0.0328369140625, 0.002376556396484375, 0.0009698867797851562, 0.019989013671875, 0.0002932548522949219, 0.0006246566772460938, 0.0020751953125, 0.0005345344543457031, 0.0002295970916748047, 0.0020904541015625, 0.00044083595275878906, 0.0005407333374023438, 0.004550933837890625, 0.0017156600952148438, 0.0006709098815917969, 0.830078125, 0.322998046875, 0.30908203125, 0.03289794921875, 0.0875244140625, 0.00592041015625, 0.01119232177734375, 2.2530555725097656e-05, 0.0009565353393554688, 0.11846923828125, 0.55859375, 0.00885009765625, 0.01354217529296875, 0.1689453125, 0.0006761550903320312], "tokens": [284, 442, 310, 32, 25657, 2931, 473, 334, 320, 719, 1022, 7124, 322, 2401, 2979, 31, 2951, 2838, 432, 322, 2702, 1541, 32, 569, 334, 945, 907, 4004, 36695, 3910, 2766, 2931, 26, 1212, 310, 27, 301, 284, 4004, 281, 280, 310, 32, 20197, 2931, 473, 284, 2218, 308, 85, 863, 744]}
{"line_number": 1244, "line_type": "original", "code": "", "entropy": 0.1533203125, "is_bug_line": false, "sus_score": 0.7810857892036438, "per_token_entropy": [0.1533203125], "tokens": [203]}
{"line_number": 1244, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7810857892036438, "per_token_entropy": [], "tokens": []}
{"line_number": 996, "line_type": "original", "code": "      char c = s.charAt(i);", "entropy": 1.306640625, "is_bug_line": false, "sus_score": 0.7810384631156921, "per_token_entropy": [5.92578125, 6.17578125, 0.493408203125, 0.2607421875, 0.1732177734375, 0.007415771484375, 0.00159454345703125, 0.0026607513427734375, 0.009765625, 0.0194091796875], "tokens": [647, 1351, 281, 280, 309, 32, 15611, 26, 91, 293]}
{"line_number": 996, "line_type": "generated", "code": "\n              sb.append(c);\n            } else {\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }\n    }\n    sb.append(quote);\n    return sb.toString();\n  }\n\n  /**\n   * Appends a JavaScript", "entropy": 0.16064453125, "is_bug_line": false, "sus_score": 0.7810384631156921, "per_token_entropy": [0.25, 0.2398681640625, 0.0004379749298095703, 0.00028777122497558594, 0.02313232421875, 0.003559112548828125, 0.002166748046875, 0.2283935546875, 0.0021190643310546875, 0.00531768798828125, 0.0258941650390625, 0.04010009765625, 0.449951171875, 0.002826690673828125, 0.0007233619689941406, 9.942054748535156e-05, 0.00013267993927001953, 0.0005369186401367188, 6.377696990966797e-05, 0.0038013458251953125, 0.0003445148468017578, 0.007221221923828125, 0.00031280517578125, 0.018829345703125, 3.159046173095703e-05, 0.69970703125, 0.00484466552734375, 0.5869140625, 0.005695343017578125, 0.09368896484375, 0.039276123046875, 2.5033950805664062e-05, 0.00015866756439208984, 0.0019779205322265625, 0.001186370849609375, 0.0014047622680664062, 0.0499267578125, 0.00664520263671875, 0.002147674560546875, 0.0012063980102539062, 0.0003886222839355469, 0.001392364501953125, 0.0077056884765625, 0.0007467269897460938, 0.12939453125, 0.6591796875, 0.498291015625, 0.00347137451171875, 1.2626953125, 0.0009298324584960938, 1.1162109375, 1.8740234375], "tokens": [1090, 6115, 32, 1689, 26, 85, 293, 324, 320, 813, 301, 1090, 5489, 10226, 14575, 16541, 26, 5682, 30, 281, 293, 324, 320, 616, 320, 397, 320, 284, 320, 284, 6115, 32, 1689, 26, 7345, 293, 284, 442, 6115, 32, 3108, 473, 334, 320, 719, 1022, 664, 319, 1995, 1494, 312, 9657]}
{"line_number": 995, "line_type": "original", "code": "    for (int i = 0; i < s.length(); i++) {", "entropy": 0.7763671875, "is_bug_line": false, "sus_score": 0.7793212532997131, "per_token_entropy": [5.37109375, 5.078125, 0.203857421875, 0.292724609375, 2.021484375, 0.0272979736328125, 0.02862548828125, 0.0033721923828125, 0.175537109375, 0.0108184814453125, 0.04193115234375, 0.221923828125, 0.00707244873046875, 0.0023345947265625, 0.0095367431640625, 0.353759765625, 0.007373809814453125, 0.1231689453125], "tokens": [264, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309, 32, 1322, 473, 595, 1987, 301]}
{"line_number": 995, "line_type": "generated", "code": "\n            if (c >= 0x20 && c < 0x7f) {\n              sb.append(c);\n            } else {\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }", "entropy": 0.1710205078125, "is_bug_line": false, "sus_score": 0.7793212532997131, "per_token_entropy": [0.65283203125, 0.450927734375, 0.49462890625, 0.2364501953125, 1.1982421875, 0.341064453125, 0.55712890625, 0.208984375, 0.284423828125, 0.0083465576171875, 0.091796875, 0.0203399658203125, 0.75390625, 0.01096343994140625, 0.03668212890625, 0.00637054443359375, 0.134033203125, 0.533203125, 0.1978759765625, 0.042327880859375, 0.0631103515625, 0.0223388671875, 4.506111145019531e-05, 0.00016880035400390625, 0.01287078857421875, 0.00138092041015625, 0.00030541419982910156, 0.01285552978515625, 8.559226989746094e-05, 0.004749298095703125, 0.037689208984375, 0.0209808349609375, 0.451904296875, 0.0035495758056640625, 0.0008368492126464844, 0.00011742115020751953, 0.00016021728515625, 0.0003504753112792969, 4.851818084716797e-05, 0.0030879974365234375, 0.0003211498260498047, 0.006816864013671875, 0.00027060508728027344, 0.273681640625, 0.0024967193603515625, 0.85205078125, 0.0078277587890625], "tokens": [324, 415, 308, 85, 2377, 225, 34, 106, 36, 34, 962, 281, 333, 225, 34, 106, 41, 88, 27, 301, 1090, 6115, 32, 1689, 26, 85, 293, 324, 320, 813, 301, 1090, 5489, 10226, 14575, 16541, 26, 5682, 30, 281, 293, 324, 320, 616, 320, 397, 320]}
{"line_number": 1056, "line_type": "original", "code": "    sb.append(quote);", "entropy": 3.435546875, "is_bug_line": false, "sus_score": 0.7782957553863525, "per_token_entropy": [5.1796875, 8.171875, 0.06591796875, 0.04180908203125, 0.515625, 7.23046875, 2.84375], "tokens": [264, 6115, 32, 1689, 26, 7345, 293]}
{"line_number": 1056, "line_type": "generated", "code": "\n        }\n      } else if (c.getType()!= Token.EMPTY) {\n        return c;", "entropy": 0.05181884765625, "is_bug_line": false, "sus_score": 0.7782957553863525, "per_token_entropy": [0.65380859375, 0.03692626953125, 0.1148681640625, 0.0012273788452148438, 0.026611328125, 0.0127716064453125, 0.00196075439453125, 0.0004138946533203125, 0.0087432861328125, 0.000263214111328125, 0.0005254745483398438, 0.0028820037841796875, 0.00044345855712890625, 4.565715789794922e-05, 0.0003750324249267578, 0.002445220947265625, 0.0016269683837890625, 0.199462890625, 0.01276397705078125, 0.0009427070617675781, 0.0092315673828125], "tokens": [291, 320, 397, 320, 813, 415, 308, 85, 32, 10272, 346, 863, 6512, 32, 13073, 27, 301, 291, 442, 281, 45]}
{"line_number": 994, "line_type": "original", "code": "    sb.append(quote);", "entropy": 2.0234375, "is_bug_line": false, "sus_score": 0.7782957553863525, "per_token_entropy": [4.96875, 2.267578125, 0.003475189208984375, 0.0011320114135742188, 0.11767578125, 6.58203125, 0.2265625], "tokens": [264, 6115, 32, 1689, 26, 7345, 293]}
{"line_number": 994, "line_type": "generated", "code": "\n            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||\n                (c >= '0' && c <= '9')) {\n              sb.append(c);\n            } else", "entropy": 0.1363525390625, "is_bug_line": false, "sus_score": 0.7782957553863525, "per_token_entropy": [0.53662109375, 0.6962890625, 1.3388671875, 0.04840087890625, 0.73779296875, 0.6484375, 0.7216796875, 0.0178375244140625, 0.005802154541015625, 0.0018634796142578125, 0.00946807861328125, 0.0008935928344726562, 0.001293182373046875, 0.0037059783935546875, 0.0889892578125, 0.853515625, 0.003787994384765625, 0.002536773681640625, 0.0004220008850097656, 0.10601806640625, 0.0001304149627685547, 0.0018606185913085938, 0.0005025863647460938, 0.0025043487548828125, 0.00017023086547851562, 0.000225067138671875, 0.1275634765625, 0.0889892578125, 0.0869140625, 0.0195465087890625, 0.001983642578125, 0.0028629302978515625, 0.0006742477416992188, 0.0023212432861328125, 9.393692016601562e-05, 0.0006489753723144531, 0.00024962425231933594, 0.0018482208251953125, 0.0003304481506347656, 0.00144195556640625, 0.830078125, 0.0095672607421875, 0.036163330078125, 0.0136871337890625, 7.104873657226562e-05, 4.696846008300781e-05, 0.0016231536865234375, 0.0004410743713378906, 0.0001506805419921875, 0.025482177734375, 0.00014412403106689453, 0.006591796875], "tokens": [324, 415, 1833, 85, 2377, 330, 83, 25, 962, 281, 2511, 330, 108, 683, 1276, 308, 85, 2377, 330, 51, 25, 962, 281, 2511, 330, 76, 683, 1276, 400, 308, 85, 2377, 330, 34, 25, 962, 281, 2511, 330, 43, 2847, 301, 1090, 6115, 32, 1689, 26, 85, 293, 324, 320, 813]}
{"line_number": 1046, "line_type": "original", "code": "              sb.append(c);", "entropy": 3.03515625, "is_bug_line": false, "sus_score": 0.777768611907959, "per_token_entropy": [11.171875, 8.078125, 0.01448822021484375, 0.0302581787109375, 0.443359375, 0.50830078125, 1.0048828125], "tokens": [2850, 6115, 32, 1689, 26, 85, 293]}
{"line_number": 1046, "line_type": "generated", "code": "\n    return i;\n  }\n\n  /**\n   * @return The number of children of this node that are non empty.\n   */\n  private static int getNonEmptyChildCount(Node n) {\n    return getNonEmptyChildCount(n, Integer.", "entropy": 0.169189453125, "is_bug_line": false, "sus_score": 0.777768611907959, "per_token_entropy": [0.431884765625, 0.08734130859375, 0.0159149169921875, 0.005626678466796875, 0.01024627685546875, 0.0024814605712890625, 0.49560546875, 0.5693359375, 0.082763671875, 0.0008292198181152344, 1.5283203125, 0.546875, 1.1123046875, 1.078125, 0.00270843505859375, 0.44677734375, 0.07281494140625, 0.0312347412109375, 0.02630615234375, 0.463623046875, 0.06097412109375, 0.3046875, 0.0565185546875, 0.33349609375, 0.02972412109375, 0.0124359130859375, 0.00860595703125, 0.12188720703125, 0.05084228515625, 0.00330352783203125, 0.0128936767578125, 0.0027294158935546875, 0.0015048980712890625, 0.001743316650390625, 0.00047659873962402344, 0.005584716796875, 0.00399017333984375, 0.007068634033203125, 0.0020599365234375, 0.0007724761962890625, 0.0297088623046875, 0.494384765625, 0.0022373199462890625, 0.00012862682342529297, 2.2649765014648438e-06, 0.00010657310485839844, 2.9921531677246094e-05, 0.0003771781921386719, 0.0009560585021972656, 0.0002980232238769531, 0.2352294921875, 0.0007376670837402344], "tokens": [284, 442, 595, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 886, 1451, 432, 5713, 432, 458, 1541, 688, 884, 2979, 3502, 32, 664, 569, 334, 945, 907, 629, 622, 3910, 2766, 2931, 1534, 26, 1212, 310, 27, 301, 284, 442, 622, 3910, 2766, 2931, 1534, 26, 96, 30, 4401, 32]}
{"line_number": 933, "line_type": "original", "code": "    for (Node c = n; c != null; c = c.getNext()) {", "entropy": 0.90771484375, "is_bug_line": false, "sus_score": 0.7775791883468628, "per_token_entropy": [3.98046875, 6.140625, 0.03387451171875, 5.40234375, 0.2802734375, 0.09649658203125, 0.30810546875, 0.76611328125, 0.01343536376953125, 0.006092071533203125, 0.0038623809814453125, 0.042266845703125, 0.007358551025390625, 0.0036163330078125, 0.0036296844482421875, 0.0009274482727050781, 0.06927490234375, 0.0058746337890625, 0.09033203125], "tokens": [264, 436, 308, 1212, 281, 280, 310, 45, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301]}
{"line_number": 933, "line_type": "generated", "code": "\n    outputCharsetEncoder = outputCharsetEncoder == null\n       ? Charsets.UTF_8.newEncoder() : outputCharsetEncoder;\n  }\n\n  /**\n   * Escapes the given string to a single quoted (') JavaScript/JSON string\n   */\n ", "entropy": 0.29541015625, "is_bug_line": false, "sus_score": 0.7775791883468628, "per_token_entropy": [1.302734375, 1.759765625, 0.0060272216796875, 0.006435394287109375, 0.0161285400390625, 1.4443359375, 0.0005049705505371094, 0.002979278564453125, 0.58349609375, 0.00460052490234375, 1.0791015625, 0.003925323486328125, 1.6416015625, 0.0014848709106445312, 0.0016269683837890625, 1.0625, 0.0210418701171875, 0.057373046875, 0.01428985595703125, 0.0011911392211914062, 0.0016231536865234375, 0.04296875, 0.418212890625, 0.0208282470703125, 6.461143493652344e-05, 0.00093841552734375, 0.0260009765625, 1.2939453125, 0.2476806640625, 0.29345703125, 0.390380859375, 0.356689453125, 0.0018482208251953125, 0.51220703125, 0.0509033203125, 0.0036067962646484375, 0.56005859375, 0.0634765625, 0.0614013671875, 0.4033203125, 0.1474609375, 1.03515625, 0.024993896484375, 0.07928466796875, 0.0033416748046875, 0.028411865234375, 0.0631103515625, 0.00046753883361816406, 0.0017852783203125, 0.12841796875, 0.0494384765625, 0.0367431640625], "tokens": [284, 1688, 26082, 8770, 280, 1688, 26082, 8770, 610, 744, 291, 1018, 7687, 2021, 32, 6261, 81, 42, 32, 890, 8770, 346, 499, 1688, 26082, 8770, 45, 334, 320, 719, 1022, 664, 319, 516, 545, 10247, 322, 2702, 802, 372, 312, 3982, 34210, 308, 683, 9657, 33, 3265, 802, 664, 569, 334]}
{"line_number": 274, "line_type": "original", "code": "        if (childCount == 2) {", "entropy": 1.669921875, "is_bug_line": false, "sus_score": 0.7771682739257812, "per_token_entropy": [6.5078125, 3.62109375, 0.2254638671875, 3.234375, 0.05670166015625, 0.27392578125, 0.0032901763916015625, 2.5, 0.251708984375, 0.0265960693359375], "tokens": [351, 415, 308, 2661, 1534, 610, 225, 36, 27, 301]}
{"line_number": 274, "line_type": "generated", "code": "\n          add(\"get \");\n        } else {\n          add(\"set \");\n        }\n        addExpr(first.getLastChild().getFirstChild(), Context.STATEMENT);\n        add(\"(\");\n        add(last);\n        add(\")\");\n        break;\n\n      case", "entropy": 0.383056640625, "is_bug_line": false, "sus_score": 0.7771682739257812, "per_token_entropy": [0.2125244140625, 0.2359619140625, 1.0751953125, 0.61083984375, 0.321044921875, 0.640625, 0.021881103515625, 0.143310546875, 0.08203125, 0.3115234375, 0.2032470703125, 0.01000213623046875, 0.0004563331604003906, 0.00493621826171875, 0.023956298828125, 0.00025653839111328125, 0.64599609375, 0.2626953125, 0.70263671875, 0.0158233642578125, 0.2330322265625, 0.279296875, 0.943359375, 0.0002968311309814453, 1.62890625, 0.359619140625, 0.00010943412780761719, 0.0968017578125, 1.4404296875, 0.0006604194641113281, 2.5234375, 0.0014438629150390625, 0.050628662109375, 0.1861572265625, 1.0966796875, 0.96630859375, 1.0087890625, 0.04669189453125, 0.049285888671875, 0.2232666015625, 0.78125, 1.1982421875, 0.76025390625, 0.0169525146484375, 0.0218505859375, 0.005977630615234375, 0.1453857421875, 0.11932373046875, 0.1077880859375, 0.00011205673217773438, 0.0322265625, 0.0723876953125], "tokens": [616, 1015, 440, 371, 7170, 291, 320, 813, 301, 616, 1015, 440, 470, 7170, 291, 320, 291, 1015, 6150, 26, 2232, 32, 20197, 2931, 922, 25657, 2931, 1026, 7049, 32, 6103, 3480, 293, 291, 1015, 440, 440, 293, 291, 1015, 26, 2135, 293, 291, 1015, 440, 13372, 291, 1626, 45, 1687, 1135]}
{"line_number": 1246, "line_type": "original", "code": "", "entropy": 0.1533203125, "is_bug_line": false, "sus_score": 0.7733272910118103, "per_token_entropy": [0.1533203125], "tokens": [203]}
{"line_number": 1246, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7733272910118103, "per_token_entropy": [], "tokens": []}
{"line_number": 997, "line_type": "original", "code": "      switch (c) {", "entropy": 1.6748046875, "is_bug_line": false, "sus_score": 0.7724573016166687, "per_token_entropy": [5.1328125, 4.5546875, 0.158935546875, 0.1331787109375, 0.0186920166015625, 0.04632568359375], "tokens": [647, 3578, 308, 85, 27, 301]}
{"line_number": 997, "line_type": "generated", "code": "\n            } else {\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n          break;\n      }", "entropy": 0.164306640625, "is_bug_line": false, "sus_score": 0.7724573016166687, "per_token_entropy": [0.2364501953125, 0.0297088623046875, 0.010467529296875, 0.07171630859375, 0.030914306640625, 0.467529296875, 0.003875732421875, 0.0009021759033203125, 9.870529174804688e-05, 0.0001500844955444336, 0.0004775524139404297, 5.4955482482910156e-05, 0.00382232666015625, 0.0003867149353027344, 0.1302490234375, 0.0003643035888671875, 0.2183837890625, 9.083747863769531e-05, 0.89013671875, 0.01113128662109375, 0.01129150390625, 1.4150390625, 0.2451171875], "tokens": [324, 320, 813, 301, 1090, 5489, 10226, 14575, 16541, 26, 5682, 30, 281, 293, 324, 320, 616, 320, 616, 1626, 45, 397, 320]}
{"line_number": 895, "line_type": "original", "code": "        addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);", "entropy": 1.744140625, "is_bug_line": false, "sus_score": 0.7704616785049438, "per_token_entropy": [3.759765625, 9.25, 11.0546875, 1.298828125, 0.06207275390625, 0.464111328125, 0.03900146484375, 7.37890625, 0.02703857421875, 0.0013818740844726562, 0.00559234619140625, 0.11395263671875, 0.004917144775390625, 0.0173187255859375, 0.00428009033203125, 0.0031604766845703125, 0.0014295578002929688, 1.267578125, 1.833984375, 0.00379180908203125, 0.0206298828125], "tokens": [351, 1015, 3679, 6150, 26, 96, 30, 47985, 1527, 2447, 3484, 1018, 225, 35, 499, 225, 34, 30, 16020, 1222, 293]}
{"line_number": 895, "line_type": "generated", "code": "\n      }\n    }\n\n    // pick the optimal quote character\n    if (singleq == 0) {\n      return \"\\\"\" + s + \"\\\"\";\n    } else if (doubleq == 0) {\n      return \"'\" + s + \"'\";\n    } else", "entropy": 0.2626953125, "is_bug_line": false, "sus_score": 0.7704616785049438, "per_token_entropy": [0.44970703125, 0.04248046875, 0.0137481689453125, 0.00016677379608154297, 0.349365234375, 1.046875, 2.5625, 0.311767578125, 1.5068359375, 0.0772705078125, 0.195556640625, 0.266357421875, 0.7646484375, 0.090087890625, 0.27978515625, 0.00016570091247558594, 0.9638671875, 0.5283203125, 0.0033321380615234375, 0.53125, 0.0270843505859375, 0.033966064453125, 0.2208251953125, 2.2109375, 0.01528167724609375, 0.15478515625, 0.14208984375, 0.003887176513671875, 7.76052474975586e-05, 0.0333251953125, 0.0001430511474609375, 0.1405029296875, 0.252685546875, 0.003330230712890625, 0.034210205078125, 4.673004150390625e-05, 0.0101318359375, 0.0004801750183105469, 7.200241088867188e-05, 0.006496429443359375, 0.0008182525634765625, 0.004428863525390625, 0.0078277587890625, 0.1004638671875, 0.00038051605224609375, 0.005817413330078125, 0.00470733642578125, 0.0022640228271484375, 4.887580871582031e-06, 0.006282806396484375, 2.6106834411621094e-05, 0.245361328125], "tokens": [397, 320, 284, 320, 446, 434, 8298, 322, 24824, 15358, 5341, 284, 415, 308, 6270, 99, 610, 225, 34, 27, 301, 397, 442, 43888, 474, 309, 474, 12378, 866, 284, 320, 813, 415, 308, 2627, 99, 610, 225, 34, 27, 301, 397, 442, 37638, 474, 309, 474, 5335, 866, 284, 320, 813]}
{"line_number": 1250, "line_type": "original", "code": "", "entropy": 0.1533203125, "is_bug_line": false, "sus_score": 0.7699834108352661, "per_token_entropy": [0.1533203125], "tokens": [203]}
{"line_number": 1250, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7699834108352661, "per_token_entropy": [], "tokens": []}
{"line_number": 192, "line_type": "original", "code": "          addIdentifier(n.getString());", "entropy": 2.361328125, "is_bug_line": false, "sus_score": 0.7698377370834351, "per_token_entropy": [6.5078125, 2.236328125, 8.2890625, 1.0888671875, 0.6767578125, 0.016387939453125, 0.0106201171875, 0.069091796875], "tokens": [2033, 1015, 5541, 26, 96, 32, 7069, 1035]}
{"line_number": 192, "line_type": "generated", "code": "\n        //  !a[b]\n        // is not parsed as\n        //  !(a[b])\n        // because the precedence of '!' is higher than the precedence of '['.\n        if (NodeUtil.precedence(type) > NodeUtil", "entropy": 0.6005859375, "is_bug_line": false, "sus_score": 0.7698377370834351, "per_token_entropy": [0.4208984375, 0.373779296875, 2.7890625, 2.798828125, 1.07421875, 1.728515625, 1.1787109375, 0.427490234375, 0.375732421875, 0.00524139404296875, 1.1123046875, 1.9775390625, 1.91796875, 0.0279541015625, 0.333984375, 0.00220489501953125, 0.02191162109375, 0.7451171875, 0.0023899078369140625, 0.00528717041015625, 0.0007004737854003906, 0.01306915283203125, 0.03302001953125, 0.044342041015625, 1.1669921875, 1.2978515625, 0.7373046875, 0.43408203125, 1.9716796875, 0.0290679931640625, 0.1407470703125, 0.7373046875, 0.08026123046875, 1.0595703125, 0.03973388671875, 0.208251953125, 0.046905517578125, 0.369384765625, 0.1544189453125, 1.83984375, 0.093017578125, 1.146484375, 5.14984130859375e-05, 7.808208465576172e-05, 0.2437744140625, 8.821487426757812e-06, 0.003993988037109375, 0.4912109375, 0.0057525634765625, 1.27734375, 0.232421875, 3.528594970703125e-05], "tokens": [291, 434, 261, 653, 83, 77, 84, 79, 291, 434, 438, 646, 8436, 619, 291, 434, 261, 13685, 83, 77, 84, 1130, 291, 434, 3301, 322, 32787, 432, 330, 20149, 438, 12224, 2784, 322, 32787, 432, 35075, 32, 291, 415, 308, 1212, 1733, 32, 1001, 39939, 26, 681, 27, 848, 4004, 1733]}
{"line_number": 893, "line_type": "original", "code": "      boolean isFirst = n == firstInList;", "entropy": 2.537109375, "is_bug_line": false, "sus_score": 0.7687875032424927, "per_token_entropy": [6.0078125, 4.7109375, 1.8515625, 4.6640625, 0.2298583984375, 7.8046875, 1.662109375, 0.6083984375, 0.2342529296875, 0.07122802734375, 0.06390380859375], "tokens": [647, 1905, 438, 3472, 280, 310, 610, 1932, 383, 720, 45]}
{"line_number": 893, "line_type": "generated", "code": "\n    return s;\n  }\n\n  /** Outputs a js string, using the optimal (single/double) quote character */\n  static String jsString(String s) {\n    return jsString(s, CharsetUtil.UTF_8.newEncoder());\n ", "entropy": 0.27880859375, "is_bug_line": false, "sus_score": 0.7687875032424927, "per_token_entropy": [0.3955078125, 2.07421875, 2.6953125, 0.10400390625, 0.0250396728515625, 0.0010404586791992188, 0.1826171875, 0.72216796875, 1.7939453125, 0.111083984375, 0.83837890625, 0.444091796875, 0.2841796875, 0.1815185546875, 0.1461181640625, 0.1021728515625, 0.032623291015625, 0.0009317398071289062, 0.0021038055419921875, 0.00014698505401611328, 0.002613067626953125, 0.0021419525146484375, 0.00481414794921875, 0.06402587890625, 0.01183319091796875, 0.347412109375, 0.08770751953125, 0.03240966796875, 0.1185302734375, 0.065673828125, 0.06744384765625, 0.005641937255859375, 0.14794921875, 0.0016040802001953125, 0.0736083984375, 0.50634765625, 0.0206146240234375, 0.0005979537963867188, 0.0010347366333007812, 0.004848480224609375, 0.006664276123046875, 1.2431640625, 0.857421875, 0.0015039443969726562, 0.5380859375, 0.01313018798828125, 0.0306396484375, 0.0496826171875, 0.0013332366943359375, 0.0011730194091796875, 0.030853271484375, 0.01079559326171875], "tokens": [284, 442, 309, 45, 334, 320, 719, 1022, 40644, 312, 4060, 802, 30, 1471, 322, 24824, 308, 6270, 33, 2627, 27, 15358, 5341, 569, 334, 907, 892, 4060, 652, 26, 652, 309, 27, 301, 284, 442, 4060, 652, 26, 101, 30, 47048, 1733, 32, 6261, 81, 42, 32, 890, 8770, 1035, 334]}
