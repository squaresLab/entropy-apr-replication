{"line_number": 964, "line_type": "original", "code": "  static boolean referencesThis(Node n) {", "entropy": 2.2421875, "is_bug_line": false, "sus_score": 0.6617843508720398, "per_token_entropy": [3.369140625, 8.9375, 0.136962890625, 9.5703125, 0.10125732421875, 0.071533203125, 0.020477294921875, 0.045074462890625, 0.1605224609375, 0.0119476318359375], "tokens": [225, 907, 1905, 10647, 2272, 26, 1212, 310, 27, 301]}
{"line_number": 964, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Is this node a function expression?\n   */\n  static boolean isFunctionExpression(Node n) {\n    return n.getType() == Token.FUNCTION;\n  }\n\n  /**\n   * Is this node a function statement?\n   */", "entropy": 0.255615234375, "is_bug_line": false, "sus_score": 0.6617843508720398, "per_token_entropy": [0.1820068359375, 0.031097412109375, 0.147705078125, 0.143310546875, 0.020233154296875, 0.0002104043960571289, 1.00390625, 0.10833740234375, 1.34765625, 1.162109375, 2.283203125, 1.36328125, 0.626953125, 0.03692626953125, 0.52978515625, 0.0389404296875, 0.0164794921875, 0.0006194114685058594, 0.0014104843139648438, 0.04266357421875, 0.37109375, 0.004322052001953125, 0.0010595321655273438, 0.006378173828125, 0.004913330078125, 0.0005168914794921875, 0.0235137939453125, 0.1546630859375, 0.11212158203125, 0.00592041015625, 0.01454925537109375, 0.0006608963012695312, 0.00035834312438964844, 0.0007109642028808594, 1.0848045349121094e-05, 0.0019207000732421875, 0.1300048828125, 0.0771484375, 0.0003120899200439453, 0.061798095703125, 0.0789794921875, 0.01143646240234375, 0.000293731689453125, 0.458251953125, 0.04510498046875, 0.276611328125, 0.372314453125, 0.63232421875, 1.265625, 0.040740966796875, 0.0184326171875, 0.0341796875], "tokens": [334, 320, 719, 1022, 664, 319, 3611, 458, 1541, 312, 667, 6101, 49, 664, 569, 334, 907, 1905, 438, 2447, 3487, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 9842, 45, 334, 320, 719, 1022, 664, 319, 3611, 458, 1541, 312, 667, 7603, 49, 664, 569]}
{"line_number": 962, "line_type": "original", "code": "   * Returns true if the shallow scope contains references to 'this' keyword", "entropy": 4.69921875, "is_bug_line": false, "sus_score": 0.651901364326477, "per_token_entropy": [5.13671875, 3.94921875, 13.453125, 0.888671875, 0.118408203125, 1.064453125, 13.671875, 7.33984375, 2.875, 9.3125, 0.381103515625, 3.435546875, 0.484375, 1.0302734375, 7.375], "tokens": [261, 319, 3759, 861, 415, 322, 25433, 4576, 4304, 10647, 372, 330, 578, 25, 11659]}
{"line_number": 962, "line_type": "generated", "code": "\n    return false;\n  }\n\n  /**\n   * Is this a CALL node?\n   */\n  static boolean isCall(Node n) {\n    return n.getType() == Token.CALL;\n  }\n\n  /**\n   * Is this a CALL node?\n  ", "entropy": 0.16259765625, "is_bug_line": false, "sus_score": 0.651901364326477, "per_token_entropy": [0.53125, 0.265869140625, 1.43359375, 0.001407623291015625, 0.011383056640625, 0.0003325939178466797, 0.07415771484375, 0.1424560546875, 0.1375732421875, 0.0005369186401367188, 0.6123046875, 0.0841064453125, 0.7099609375, 1.1357421875, 0.1702880859375, 0.043182373046875, 0.0163421630859375, 0.06298828125, 0.0072479248046875, 0.007587432861328125, 0.0003147125244140625, 0.00033020973205566406, 0.0032501220703125, 0.004734039306640625, 0.0002989768981933594, 0.0022125244140625, 0.0015401840209960938, 0.0012845993041992188, 0.0165252685546875, 0.01213836669921875, 0.0069580078125, 0.0007328987121582031, 0.0007176399230957031, 0.00012731552124023438, 0.00015223026275634766, 0.00029587745666503906, 1.430511474609375e-05, 3.445148468017578e-05, 0.0034427642822265625, 0.0024890899658203125, 0.0001837015151977539, 0.0377197265625, 0.0791015625, 0.0748291015625, 0.001087188720703125, 0.250244140625, 0.03076171875, 0.232177734375, 0.3583984375, 0.264892578125, 1.560546875, 0.05865478515625], "tokens": [284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 3611, 458, 312, 16084, 1541, 49, 664, 569, 334, 907, 1905, 438, 1853, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 5038, 45, 334, 320, 719, 1022, 664, 319, 3611, 458, 312, 16084, 1541, 49, 664]}
{"line_number": 567, "line_type": "original", "code": "              current = current.getFirstChild();", "entropy": 2.61328125, "is_bug_line": false, "sus_score": 0.6513564586639404, "per_token_entropy": [11.4140625, 8.4609375, 0.1607666015625, 0.4677734375, 0.00302886962890625, 0.357177734375, 0.006420135498046875, 0.029205322265625], "tokens": [2850, 1550, 280, 1550, 32, 25657, 2931, 473]}
{"line_number": 567, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Do calls to this function have side effects?\n   *\n   * @param callNode - function call node\n   */\n  static boolean functionCallHasSideEffects(Node callNode, AbstractCompiler compiler) {\n    Preconditions.checkArgument", "entropy": 0.08526611328125, "is_bug_line": false, "sus_score": 0.6513564586639404, "per_token_entropy": [0.331787109375, 0.007720947265625, 0.0911865234375, 0.31689453125, 0.053985595703125, 0.0003447532653808594, 0.66748046875, 0.147705078125, 0.0340576171875, 0.2216796875, 0.0849609375, 0.098876953125, 0.03240966796875, 0.01119232177734375, 0.0153656005859375, 0.0207672119140625, 0.062042236328125, 0.1173095703125, 0.0011434555053710938, 0.09674072265625, 0.009063720703125, 0.08355712890625, 0.005092620849609375, 0.056549072265625, 0.211181640625, 0.0360107421875, 0.0270843505859375, 0.02069091796875, 0.08905029296875, 0.005077362060546875, 0.033172607421875, 0.0025348663330078125, 0.0027828216552734375, 0.0005130767822265625, 0.0004911422729492188, 0.00038909912109375, 7.62939453125e-05, 0.0016107559204101562, 0.0294189453125, 0.0013380050659179688, 0.0005483627319335938, 0.451171875, 0.24560546875, 0.00021409988403320312, 0.0005578994750976562, 0.0016851425170898438, 0.00418853759765625, 0.054962158203125, 0.63232421875, 0.000545501708984375, 0.0010833740234375, 0.01241302490234375], "tokens": [334, 320, 719, 1022, 664, 319, 3278, 7399, 372, 458, 667, 1159, 5209, 15987, 49, 664, 319, 664, 319, 477, 753, 1476, 1212, 429, 667, 1476, 1541, 664, 569, 334, 907, 1905, 667, 1853, 3993, 7427, 20126, 26, 1212, 1476, 1212, 30, 7400, 8115, 8980, 27, 301, 284, 40596, 32, 1553, 3484]}
{"line_number": 1013, "line_type": "original", "code": "    return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;", "entropy": 1.400390625, "is_bug_line": false, "sus_score": 0.6467649936676025, "per_token_entropy": [4.5390625, 6.87109375, 0.59423828125, 0.00647735595703125, 2.8046875, 0.005313873291015625, 0.004329681396484375, 0.0014848709106445312, 0.0007481575012207031, 6.8828125, 1.49609375, 1.578125, 0.024444580078125, 1.2373046875, 0.09820556640625, 0.11016845703125, 0.016387939453125, 0.047027587890625, 0.0263824462890625, 0.0099639892578125, 4.265625, 0.1949462890625], "tokens": [264, 442, 310, 32, 10272, 346, 610, 6512, 32, 2474, 962, 310, 32, 18789, 922, 10272, 346, 610, 6512, 32, 7416, 45]}
{"line_number": 1013, "line_type": "generated", "code": "\n   */\n  static boolean isExprCall(Node n) {\n    return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;\n  }\n\n  /**\n   * Is this an EQ node?", "entropy": 0.1365966796875, "is_bug_line": false, "sus_score": 0.6467649936676025, "per_token_entropy": [0.5625, 0.0494384765625, 0.0177459716796875, 0.0106964111328125, 0.0010242462158203125, 0.0013265609741210938, 0.1497802734375, 0.1807861328125, 0.0135955810546875, 0.0008654594421386719, 0.0006861686706542969, 0.003871917724609375, 0.00432586669921875, 0.095703125, 0.11041259765625, 0.035247802734375, 0.00028514862060546875, 0.0008797645568847656, 6.73532485961914e-05, 0.0002474784851074219, 0.00022649765014648438, 4.76837158203125e-06, 0.005584716796875, 7.510185241699219e-06, 5.137920379638672e-05, 0.148681640625, 0.0042572021484375, 0.36669921875, 0.0006628036499023438, 0.0233001708984375, 0.0005135536193847656, 0.0029144287109375, 0.00649261474609375, 0.00211334228515625, 0.003787994384765625, 0.0010576248168945312, 0.00020813941955566406, 0.006587982177734375, 0.006198883056640625, 0.0223236083984375, 0.0006270408630371094, 0.06781005859375, 0.021636962890625, 0.01922607421875, 0.0005950927734375, 0.1722412109375, 0.02264404296875, 1.2685546875, 3.396484375, 0.11932373046875, 0.1536865234375, 0.0214080810546875], "tokens": [664, 569, 334, 907, 1905, 438, 6150, 1853, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 17793, 81, 6383, 291, 962, 310, 32, 25657, 2931, 922, 10272, 346, 610, 6512, 32, 5038, 45, 334, 320, 719, 1022, 664, 319, 3611, 458, 600, 516, 67, 1541, 49]}
{"line_number": 1619, "line_type": "original", "code": "      parent.addChildToFront(var);", "entropy": 2.8828125, "is_bug_line": false, "sus_score": 0.6463186144828796, "per_token_entropy": [3.82421875, 9.515625, 3.9609375, 1.1806640625, 0.0174407958984375, 2.005859375, 0.0190277099609375, 4.7890625, 0.6416015625], "tokens": [647, 2935, 32, 21545, 705, 10112, 26, 869, 293]}
{"line_number": 1619, "line_type": "generated", "code": "\n    );\n    return function;\n  }\n\n  /** Creates var name_0 = value_0,..., name_n = value_n. */\n  public static Node newVarNode(List<Node> names, List<Node> values,\n      int", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.6463186144828796, "per_token_entropy": [1.1455078125, 0.6416015625, 0.1292724609375, 0.87744140625, 0.0180816650390625, 0.013336181640625, 0.0148773193359375, 0.0008134841918945312, 0.34814453125, 0.1875, 0.75244140625, 2.853515625, 0.9912109375, 1.0302734375, 0.053985595703125, 0.79150390625, 0.7236328125, 0.005878448486328125, 0.0022029876708984375, 0.2047119140625, 0.1282958984375, 0.1143798828125, 0.00449371337890625, 0.0265960693359375, 0.0055694580078125, 0.00872802734375, 0.0009965896606445312, 0.002300262451171875, 0.63671875, 0.0057525634765625, 0.0080718994140625, 0.10308837890625, 0.0008368492126464844, 0.00513458251953125, 0.02728271484375, 0.1494140625, 0.085693359375, 0.004581451416015625, 0.4443359375, 0.005695343017578125, 0.326171875, 4.184246063232422e-05, 0.80419921875, 0.098876953125, 0.058563232421875, 0.00893402099609375, 0.001659393310546875, 4.887580871582031e-06, 0.007091522216796875, 0.219482421875, 0.359375, 0.08758544921875], "tokens": [284, 1093, 284, 442, 667, 45, 334, 320, 719, 1022, 9301, 773, 636, 81, 34, 280, 786, 81, 34, 30, 28482, 636, 81, 96, 280, 786, 81, 96, 32, 569, 334, 562, 907, 4004, 537, 1881, 1212, 26, 720, 46, 1212, 48, 4467, 30, 1682, 46, 1212, 48, 2078, 30, 397, 629]}
{"line_number": 1595, "line_type": "original", "code": "  static boolean containsType(Node node, int type) {", "entropy": 1.6201171875, "is_bug_line": false, "sus_score": 0.6404848098754883, "per_token_entropy": [4.8046875, 9.265625, 1.1123046875, 3.3671875, 0.2073974609375, 0.0546875, 0.12646484375, 0.11572265625, 0.0231170654296875, 1.6728515625, 0.01511383056640625, 0.25341796875, 0.042694091796875], "tokens": [225, 907, 1905, 4304, 620, 26, 1212, 1541, 30, 629, 827, 27, 301]}
{"line_number": 1595, "line_type": "generated", "code": "\n      } else if (type == Token.FUNCTION) {\n        addingRoot = ancestor;\n        break;\n      }", "entropy": 0.314208984375, "is_bug_line": false, "sus_score": 0.6404848098754883, "per_token_entropy": [2.0234375, 0.08673095703125, 0.19140625, 0.09381103515625, 0.07049560546875, 0.1368408203125, 0.0504150390625, 0.0032329559326171875, 2.777576446533203e-05, 1.0390625, 0.355712890625, 0.01708984375, 0.09716796875, 0.337890625, 2.1338462829589844e-05, 0.000324249267578125, 0.048309326171875, 0.408447265625, 1.43359375, 0.399658203125, 0.00823974609375, 0.421630859375, 0.00118255615234375], "tokens": [397, 320, 813, 415, 308, 681, 610, 6512, 32, 9842, 27, 301, 291, 7165, 4058, 280, 39285, 45, 291, 1626, 45, 397, 320]}
{"line_number": 1430, "line_type": "original", "code": "        Node last = functionIndentifyingExpression.getLastChild();", "entropy": 2.078125, "is_bug_line": false, "sus_score": 0.6397291421890259, "per_token_entropy": [7.1875, 3.63671875, 4.6015625, 0.1300048828125, 5.296875, 3.75, 0.0009427070617675781, 0.0021820068359375, 0.2958984375, 0.00998687744140625, 0.0006079673767089844, 0.0182342529296875], "tokens": [351, 4004, 2401, 280, 667, 13491, 20911, 3487, 32, 20197, 2931, 473]}
{"line_number": 1430, "line_type": "generated", "code": "\n   * @param n The node to check.\n   * @return Whether the node is a valid L-value.\n   */\n  static boolean isLValue(Node n) {\n    return isAssign(n) || isVarDecl(n) ||", "entropy": 0.34619140625, "is_bug_line": false, "sus_score": 0.6397291421890259, "per_token_entropy": [0.1976318359375, 0.1639404296875, 0.75927734375, 0.2000732421875, 0.4404296875, 1.2900390625, 0.060455322265625, 0.354248046875, 0.474365234375, 0.5859375, 0.015380859375, 0.1824951171875, 0.01165008544921875, 0.055877685546875, 0.15625, 0.724609375, 0.07989501953125, 0.1273193359375, 1.3955078125, 1.8974609375, 0.82080078125, 0.250732421875, 0.029296875, 0.290283203125, 0.0208892822265625, 0.029083251953125, 0.0090484619140625, 0.06390380859375, 0.004791259765625, 0.33837890625, 0.2802734375, 0.052734375, 0.0211029052734375, 0.0019388198852539062, 0.0022258758544921875, 0.00478363037109375, 0.0068206787109375, 0.25537109375, 1.291015625, 0.8759765625, 0.51904296875, 0.29296875, 0.0162353515625, 0.180419921875, 0.245361328125, 0.326904296875, 0.22265625, 1.3544921875, 0.213623046875, 0.0007662773132324219, 0.72412109375, 0.08404541015625], "tokens": [664, 319, 477, 753, 310, 886, 1541, 372, 1505, 32, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2080, 498, 31, 853, 32, 664, 569, 334, 907, 1905, 438, 62, 882, 26, 1212, 310, 27, 301, 284, 442, 438, 9079, 26, 96, 27, 1276, 438, 1881, 5484, 26, 96, 27, 1276]}
{"line_number": 1521, "line_type": "original", "code": "      case Token.BITOR: return \"|\";", "entropy": 1.390625, "is_bug_line": false, "sus_score": 0.6397050023078918, "per_token_entropy": [5.67578125, 3.115234375, 0.0177001953125, 0.0025463104248046875, 4.48828125, 0.44384765625, 0.0103912353515625, 0.134033203125, 0.01290130615234375, 0.0032367706298828125], "tokens": [647, 1135, 6512, 32, 5670, 758, 44, 442, 29425, 866]}
{"line_number": 1521, "line_type": "generated", "code": "\n   * @return the string representation\n   */\n  static String opToStrF(int operator) {\n    String op = opToStr(operator);\n    if (op == null) {\n      throw new IllegalArgumentException(\"Not an operator: \" + operator);", "entropy": 0.197998046875, "is_bug_line": false, "sus_score": 0.6397050023078918, "per_token_entropy": [0.142822265625, 0.59033203125, 0.01052093505859375, 0.1171875, 0.014129638671875, 0.034393310546875, 0.0052337646484375, 0.2032470703125, 0.90771484375, 0.0116424560546875, 0.07196044921875, 0.0097808837890625, 0.04376220703125, 0.1995849609375, 0.010162353515625, 1.28515625, 0.1185302734375, 0.005214691162109375, 0.00238037109375, 0.002574920654296875, 0.00835418701171875, 0.025054931640625, 0.037933349609375, 1.7841796875, 0.2388916015625, 0.016571044921875, 0.0003535747528076172, 0.00012552738189697266, 0.0016422271728515625, 0.0003838539123535156, 0.0010051727294921875, 0.036712646484375, 0.210693359375, 0.003322601318359375, 0.004150390625, 0.27783203125, 0.0002200603485107422, 0.0038433074951171875, 0.0174560546875, 0.03228759765625, 0.241455078125, 0.043212890625, 0.9248046875, 0.3232421875, 1.744140625, 0.06494140625, 0.0077972412109375, 0.1920166015625, 0.01349639892578125, 0.0184326171875, 0.215576171875, 0.018402099609375], "tokens": [664, 319, 477, 601, 322, 802, 10293, 664, 569, 334, 907, 892, 3089, 705, 2007, 56, 26, 410, 4134, 27, 301, 284, 892, 3089, 280, 3089, 705, 2007, 26, 2989, 293, 284, 415, 308, 520, 610, 744, 27, 301, 397, 1422, 537, 12137, 440, 1337, 600, 4134, 44, 313, 474, 4134, 293]}
{"line_number": 1524, "line_type": "original", "code": "      case Token.AND: return \"&&\";", "entropy": 0.9560546875, "is_bug_line": false, "sus_score": 0.6353047490119934, "per_token_entropy": [5.84765625, 1.302734375, 0.0067291259765625, 0.006969451904296875, 2.0078125, 0.0034313201904296875, 0.291259765625, 0.06610107421875, 0.0217742919921875, 0.00572967529296875], "tokens": [647, 1135, 6512, 32, 3349, 44, 442, 313, 6007, 866]}
{"line_number": 1524, "line_type": "generated", "code": "\n  static String opToStrNotNull(int operator) {\n    String op = opToStr(operator);\n    if (op == null) {\n      throw new Error(\"Operator not found: \" + operator);\n    }\n    return op;\n  }", "entropy": 0.2314453125, "is_bug_line": false, "sus_score": 0.6353047490119934, "per_token_entropy": [0.268798828125, 0.10626220703125, 0.01102447509765625, 0.04595947265625, 0.1575927734375, 0.0102081298828125, 3.09375, 0.0033893585205078125, 0.004680633544921875, 0.0024776458740234375, 0.0006380081176757812, 0.023651123046875, 0.0265960693359375, 0.046875, 1.8603515625, 0.2232666015625, 0.01519012451171875, 0.0002143383026123047, 0.021759033203125, 0.0011091232299804688, 0.00041365623474121094, 0.0006380081176757812, 0.040557861328125, 0.143310546875, 0.002429962158203125, 0.0048065185546875, 0.2197265625, 0.00021970272064208984, 0.003509521484375, 0.01522064208984375, 0.05413818359375, 0.130859375, 0.1773681640625, 0.11248779296875, 0.06744384765625, 2.80078125, 0.6279296875, 0.78857421875, 0.254638671875, 0.0181884765625, 0.004608154296875, 0.2476806640625, 0.03375244140625, 0.0160369873046875, 0.0011854171752929688, 0.07568359375, 0.002437591552734375, 0.00041866302490234375, 0.0004611015319824219, 0.036285400390625, 0.0020122528076171875], "tokens": [334, 907, 892, 3089, 705, 2007, 4926, 26, 410, 4134, 27, 301, 284, 892, 3089, 280, 3089, 705, 2007, 26, 2989, 293, 284, 415, 308, 520, 610, 744, 27, 301, 397, 1422, 537, 3081, 440, 7145, 646, 2431, 44, 313, 474, 4134, 293, 284, 320, 284, 442, 3089, 45, 334, 320]}
{"line_number": 1003, "line_type": "original", "code": "", "entropy": 4.21875, "is_bug_line": false, "sus_score": 0.6322529315948486, "per_token_entropy": [4.21875], "tokens": [203]}
{"line_number": 1003, "line_type": "generated", "code": "\n   */\n  static boolean isAssign(Node n) {\n    return n.getType() == Token.ASSIGN;\n  }\n\n  /**\n   * Is this a CALL node?\n   */\n  static boolean isCall(Node n) {\n    return n.getType", "entropy": 0.0755615234375, "is_bug_line": false, "sus_score": 0.6322529315948486, "per_token_entropy": [0.1453857421875, 0.65625, 0.0124053955078125, 0.01000213623046875, 0.000492095947265625, 0.0012063980102539062, 0.00048804283142089844, 0.0032024383544921875, 0.0004892349243164062, 0.0020809173583984375, 0.0010042190551757812, 0.0018768310546875, 0.0269622802734375, 0.020233154296875, 0.007785797119140625, 0.002651214599609375, 0.0008320808410644531, 0.00010907649993896484, 0.00011348724365234375, 0.0001850128173828125, 0.0008268356323242188, 0.0001609325408935547, 0.00769805908203125, 0.0279388427734375, 0.00041413307189941406, 0.169189453125, 0.03204345703125, 0.0211181640625, 0.00023949146270751953, 0.346923828125, 0.035858154296875, 0.63720703125, 1.2314453125, 0.0953369140625, 0.03094482421875, 0.302978515625, 0.047943115234375, 0.0113677978515625, 0.0039825439453125, 0.00016045570373535156, 0.0001556873321533203, 0.0014696121215820312, 0.00637054443359375, 0.00032901763916015625, 0.0021038055419921875, 0.0008444786071777344, 0.0002880096435546875, 0.00443267822265625, 0.01023101806640625, 0.00574493408203125, 0.0003364086151123047, 0.00038933753967285156], "tokens": [664, 569, 334, 907, 1905, 438, 9079, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 25620, 45, 334, 320, 719, 1022, 664, 319, 3611, 458, 312, 16084, 1541, 49, 664, 569, 334, 907, 1905, 438, 1853, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272]}
{"line_number": 853, "line_type": "original", "code": "      case Token.POS:", "entropy": 2.6953125, "is_bug_line": false, "sus_score": 0.632234513759613, "per_token_entropy": [5.6484375, 2.556640625, 0.0167083740234375, 0.0073089599609375, 7.91015625, 0.03778076171875], "tokens": [647, 1135, 6512, 32, 8346, 44]}
{"line_number": 853, "line_type": "generated", "code": "\n    return false;\n  }\n\n  static boolean isComma(Node n) {\n    return n.getType() == Token.COMMA;\n  }\n\n  static boolean isHook(Node n) {\n    return n.getType() == Token.HOOK;\n  }", "entropy": 0.168701171875, "is_bug_line": false, "sus_score": 0.632234513759613, "per_token_entropy": [0.431884765625, 0.26171875, 0.307861328125, 0.0014820098876953125, 0.041168212890625, 0.00209808349609375, 0.20654296875, 0.437255859375, 0.1756591796875, 0.047271728515625, 1.9033203125, 0.50537109375, 0.283447265625, 0.01018524169921875, 0.0019817352294921875, 0.0007572174072265625, 0.2529296875, 0.091064453125, 0.12646484375, 0.07177734375, 0.1265869140625, 0.0015745162963867188, 0.0004627704620361328, 0.0006270408630371094, 9.107589721679688e-05, 0.00018906593322753906, 0.0178070068359375, 0.00788116455078125, 0.0008387565612792969, 0.1505126953125, 0.34033203125, 0.1456298828125, 0.04248046875, 2.568359375, 0.06683349609375, 0.0045013427734375, 0.0088043212890625, 0.0011968612670898438, 0.0005102157592773438, 0.0706787109375, 0.0361328125, 0.01430511474609375, 0.00015854835510253906, 0.0034847259521484375, 0.000278472900390625, 9.5367431640625e-05, 0.00010955333709716797, 3.0040740966796875e-05, 2.2649765014648438e-05, 0.001495361328125, 0.0031681060791015625, 0.0003418922424316406], "tokens": [284, 442, 901, 45, 334, 320, 719, 907, 1905, 438, 34010, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 47451, 45, 334, 320, 719, 907, 1905, 438, 9824, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 10272, 346, 610, 6512, 32, 29243, 45, 334, 320]}
{"line_number": 1651, "line_type": "original", "code": "", "entropy": 3.982421875, "is_bug_line": false, "sus_score": 0.632103681564331, "per_token_entropy": [3.982421875], "tokens": [203]}
{"line_number": 1651, "line_type": "generated", "code": "\n    return node;\n  }\n\n  /**\n   * Creates a node representing an anonymous function.\n   *\n   * @param params A list of parameter nodes.\n   * @param body The function body.\n   * @param name The name of the function.\n  ", "entropy": 0.38232421875, "is_bug_line": false, "sus_score": 0.632103681564331, "per_token_entropy": [0.0762939453125, 0.251953125, 0.00701904296875, 0.00524139404296875, 0.0972900390625, 0.002071380615234375, 0.51953125, 0.1649169921875, 0.461181640625, 0.0005397796630859375, 0.552734375, 0.1341552734375, 0.88427734375, 0.1094970703125, 1.8642578125, 1.8681640625, 0.072021484375, 0.8154296875, 0.14306640625, 0.038726806640625, 0.1673583984375, 0.0036525726318359375, 0.08905029296875, 0.01439666748046875, 0.72705078125, 0.798828125, 0.0882568359375, 0.00931549072265625, 1.2265625, 0.79638671875, 0.76513671875, 0.07891845703125, 0.00045418739318847656, 0.0029659271240234375, 0.002124786376953125, 0.005950927734375, 0.22412109375, 0.6796875, 0.150146484375, 0.2568359375, 0.017333984375, 0.0178985595703125, 0.0013113021850585938, 0.09918212890625, 2.353515625, 0.5087890625, 1.029296875, 0.343505859375, 0.11236572265625, 0.105712890625, 0.77783203125, 0.359130859375], "tokens": [284, 442, 1541, 45, 334, 320, 719, 1022, 664, 319, 9301, 312, 1541, 12681, 600, 23231, 667, 32, 664, 319, 664, 319, 477, 753, 2803, 399, 1149, 432, 3395, 5166, 32, 664, 319, 477, 753, 3361, 886, 667, 3361, 32, 664, 319, 477, 753, 636, 886, 636, 432, 322, 667, 32, 664]}
{"line_number": 797, "line_type": "original", "code": "   *  7 bitwise-and &", "entropy": 3.56640625, "is_bug_line": false, "sus_score": 0.6315151453018188, "per_token_entropy": [5.01171875, 8.9921875, 1.3984375, 4.64453125, 4.9921875, 0.02056884765625, 1.4599609375, 5.4375, 0.1275634765625], "tokens": [261, 319, 261, 41, 3493, 3767, 31, 363, 549]}
{"line_number": 797, "line_type": "generated", "code": "\n      case Token.NOT:\n      case Token.BITNOT: return 13;\n      case Token.CALL:\n      case Token.NEW:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.GET_REF:", "entropy": 0.10052490234375, "is_bug_line": false, "sus_score": 0.6315151453018188, "per_token_entropy": [0.389404296875, 0.07745361328125, 7.2479248046875e-05, 9.417533874511719e-06, 0.1702880859375, 0.0001264810562133789, 0.048797607421875, 0.00109100341796875, 2.288818359375e-05, 0.00017058849334716797, 0.07720947265625, 0.0004062652587890625, 0.00010573863983154297, 1.076171875, 0.0012769699096679688, 0.0005068778991699219, 0.2032470703125, 0.0011949539184570312, 0.1575927734375, 0.08123779296875, 0.0004794597625732422, 8.749961853027344e-05, 0.6171875, 0.00018894672393798828, 0.042083740234375, 0.0021820068359375, 0.000370025634765625, 2.6226043701171875e-05, 0.2119140625, 0.0008511543273925781, 0.061614990234375, 0.0018253326416015625, 0.0007448196411132812, 0.00012767314910888672, 0.5205078125, 0.09027099609375, 0.004512786865234375, 0.017608642578125, 0.0007109642028808594, 0.00010263919830322266, 0.00011515617370605469, 0.020050048828125, 0.0002789497375488281, 9.250640869140625e-05, 0.3134765625, 0.00579833984375, 0.0009627342224121094, 2.968311309814453e-05, 0.69384765625, 0.07012939453125, 0.229248046875, 0.031585693359375], "tokens": [397, 1135, 6512, 32, 3908, 44, 397, 1135, 6512, 32, 5670, 3908, 44, 442, 225, 35, 37, 45, 397, 1135, 6512, 32, 5038, 44, 397, 1135, 6512, 32, 11356, 44, 397, 1135, 6512, 32, 2788, 15262, 44, 397, 1135, 6512, 32, 2788, 32313, 44, 397, 1135, 6512, 32, 2788, 81, 4182, 44]}
{"line_number": 1652, "line_type": "original", "code": "    // make sure that the adding root looks ok", "entropy": 3.32421875, "is_bug_line": false, "sus_score": 0.6296766996383667, "per_token_entropy": [4.10546875, 2.466796875, 5.2109375, 0.267578125, 1.611328125, 1.3759765625, 8.84375, 1.2041015625, 5.8515625, 2.31640625], "tokens": [264, 434, 1930, 3654, 688, 322, 7165, 3051, 7780, 3835]}
{"line_number": 1652, "line_type": "generated", "code": "\n    return node;\n  }\n\n  /**\n   * Creates a node representing an anonymous function.\n   *\n   * @param body The body of the function.\n   * @param params The parameters of the function.\n   * @param lineno The source line offset.", "entropy": 0.36474609375, "is_bug_line": false, "sus_score": 0.6296766996383667, "per_token_entropy": [0.09130859375, 1.4208984375, 0.01904296875, 0.006015777587890625, 0.0246429443359375, 0.0009136199951171875, 0.439697265625, 0.15869140625, 0.494384765625, 0.0005712509155273438, 0.49169921875, 0.1395263671875, 0.89599609375, 0.1024169921875, 1.8759765625, 1.8076171875, 0.07391357421875, 0.83984375, 0.1556396484375, 0.035308837890625, 0.181396484375, 0.0035419464111328125, 0.102294921875, 0.0158538818359375, 2.017578125, 0.322265625, 0.9365234375, 0.058349609375, 0.0224609375, 0.52294921875, 0.47216796875, 0.08831787109375, 0.014862060546875, 0.0037746429443359375, 0.24560546875, 0.71923828125, 0.39697265625, 0.423095703125, 0.408447265625, 0.00580596923828125, 0.01103973388671875, 0.1883544921875, 0.10418701171875, 0.0187530517578125, 0.0056610107421875, 0.363525390625, 2.041015625, 0.00972747802734375, 0.07379150390625, 0.004364013671875, 0.08294677734375, 0.03167724609375], "tokens": [284, 442, 1541, 45, 334, 320, 719, 1022, 664, 319, 9301, 312, 1541, 12681, 600, 23231, 667, 32, 664, 319, 664, 319, 477, 753, 3361, 886, 3361, 432, 322, 667, 32, 664, 319, 477, 753, 2803, 886, 3377, 432, 322, 667, 32, 664, 319, 477, 753, 39997, 886, 1914, 1628, 3401, 32]}
{"line_number": 1070, "line_type": "original", "code": "  /**", "entropy": 5.13671875, "is_bug_line": false, "sus_score": 0.6287976503372192, "per_token_entropy": [4.82421875, 5.44921875], "tokens": [225, 1022]}
{"line_number": 1070, "line_type": "generated", "code": "        return false;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param n The node to test.\n   * @return Whether the specified node is a FUNCTION node.\n   */\n  static boolean isFunction(Node n) {\n   ", "entropy": 0.26416015625, "is_bug_line": false, "sus_score": 0.6287976503372192, "per_token_entropy": [1.32421875, 0.33447265625, 0.0450439453125, 0.002788543701171875, 0.2008056640625, 0.0003285408020019531, 0.1005859375, 0.00010406970977783203, 0.65087890625, 0.1668701171875, 0.0028171539306640625, 0.0002646446228027344, 0.04766845703125, 0.001407623291015625, 0.249267578125, 0.097412109375, 0.0310821533203125, 0.0005030632019042969, 1.1494140625, 1.3388671875, 0.1417236328125, 0.2080078125, 0.128662109375, 0.1356201171875, 1.85546875, 0.289794921875, 0.00714111328125, 0.00812530517578125, 0.0072021484375, 0.0294647216796875, 0.1727294921875, 0.25537109375, 0.697265625, 0.03741455078125, 0.360595703125, 0.6513671875, 2.38671875, 0.1357421875, 0.385986328125, 0.0236053466796875, 0.01142120361328125, 0.002056121826171875, 0.034942626953125, 0.00130462646484375, 9.083747863769531e-05, 0.00324249267578125, 0.0025196075439453125, 0.00080108642578125, 0.0001417398452758789, 0.0005083084106445312, 0.0013227462768554688, 0.01490020751953125], "tokens": [351, 442, 901, 45, 397, 320, 284, 320, 446, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 477, 753, 310, 886, 1541, 372, 894, 32, 664, 319, 477, 601, 14071, 322, 3191, 1541, 438, 312, 17747, 1541, 32, 664, 569, 334, 907, 1905, 438, 2447, 26, 1212, 310, 27, 301, 284]}
{"line_number": 1628, "line_type": "original", "code": "  static void copyNameAnnotations(Node source, Node destination) {", "entropy": 1.1416015625, "is_bug_line": false, "sus_score": 0.6273943185806274, "per_token_entropy": [3.3203125, 3.13671875, 3.98046875, 3.634765625, 0.14599609375, 0.006923675537109375, 0.0263824462890625, 0.07354736328125, 0.65087890625, 0.03936767578125, 0.111572265625, 0.78759765625, 0.00826263427734375, 0.063232421875], "tokens": [225, 907, 763, 1933, 558, 13041, 26, 1212, 1914, 30, 4004, 8050, 27, 301]}
{"line_number": 1628, "line_type": "generated", "code": "\n   * @param components\n   * @return\n   */\n  public static Node newQName(List<String> components) {\n    Preconditions.checkArgument(components.size() > 0);\n    Node qname = new Node(Token.NAME, components", "entropy": 0.426025390625, "is_bug_line": false, "sus_score": 0.6273943185806274, "per_token_entropy": [0.298095703125, 0.326904296875, 0.69091796875, 0.15576171875, 3.119140625, 2.85546875, 0.41357421875, 0.32275390625, 0.263671875, 2.001953125, 0.0252227783203125, 0.197998046875, 0.363037109375, 0.00475311279296875, 0.033966064453125, 0.43603515625, 0.77587890625, 1.375, 0.87451171875, 0.01471710205078125, 0.08282470703125, 9.572505950927734e-05, 0.003665924072265625, 0.2393798828125, 0.00637054443359375, 0.21240234375, 1.3251953125, 0.000530242919921875, 0.0118255615234375, 0.36181640625, 0.88330078125, 0.060821533203125, 0.3125, 0.0076751708984375, 0.0005888938903808594, 0.3125, 0.0002894401550292969, 0.037506103515625, 0.09375, 0.30322265625, 0.320556640625, 1.1513671875, 0.280029296875, 0.0863037109375, 0.533203125, 0.184814453125, 0.0018463134765625, 0.093994140625, 1.1324882507324219e-05, 0.5458984375, 0.07464599609375, 0.083251953125], "tokens": [664, 319, 477, 753, 6339, 664, 319, 477, 601, 664, 569, 334, 562, 907, 4004, 537, 25580, 26, 720, 46, 652, 48, 6339, 27, 301, 284, 40596, 32, 1553, 3484, 26, 3527, 32, 891, 346, 848, 225, 34, 293, 284, 4004, 2678, 426, 280, 537, 4004, 26, 1763, 32, 2474, 30, 6339]}
{"line_number": 2053, "line_type": "original", "code": "   */", "entropy": 6.859375, "is_bug_line": false, "sus_score": 0.6230791211128235, "per_token_entropy": [5.99609375, 7.71875], "tokens": [261, 569]}
{"line_number": 2053, "line_type": "generated", "code": "\n      for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n        visitPostOrder(c, vistor, traverseChildrenPred);\n      }\n    }\n\n    vistor.visit(node);\n  }\n\n  /**", "entropy": 0.0618896484375, "is_bug_line": false, "sus_score": 0.6230791211128235, "per_token_entropy": [0.68603515625, 0.050750732421875, 0.0029926300048828125, 0.003444671630859375, 0.00916290283203125, 0.0013322830200195312, 0.00922393798828125, 0.00028824806213378906, 0.05487060546875, 0.00014352798461914062, 0.0112457275390625, 0.0021648406982421875, 0.00035953521728515625, 0.00098419189453125, 0.007160186767578125, 0.00218963623046875, 0.00028777122497558594, 0.0006146430969238281, 0.001628875732421875, 8.380413055419922e-05, 0.0006594657897949219, 0.00994873046875, 0.046478271484375, 0.00640869140625, 0.0653076171875, 0.00015473365783691406, 0.0014820098876953125, 0.0017156600952148438, 0.00020134449005126953, 0.0136260986328125, 1.7881393432617188e-06, 0.0034427642822265625, 0.0014162063598632812, 1.3709068298339844e-05, 3.314018249511719e-05, 0.0007390975952148438, 0.07891845703125, 0.0008516311645507812, 0.70166015625, 0.0118408203125, 0.89990234375, 0.004451751708984375, 4.0531158447265625e-06, 0.00010037422180175781, 0.0005478858947753906, 0.0002359151840209961, 0.0008831024169921875, 0.00054931640625, 0.04290771484375, 0.002162933349609375, 0.322265625, 0.1539306640625], "tokens": [397, 436, 308, 1212, 281, 280, 1541, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017, 1157, 301, 291, 7725, 3160, 2871, 26, 85, 30, 354, 10971, 30, 29046, 7640, 7903, 293, 397, 320, 284, 320, 446, 354, 10971, 32, 8275, 26, 1251, 293, 334, 320, 719, 1022]}
{"line_number": 1634, "line_type": "original", "code": "  /**", "entropy": 4.69140625, "is_bug_line": false, "sus_score": 0.6197166442871094, "per_token_entropy": [3.513671875, 5.87109375], "tokens": [225, 1022]}
{"line_number": 1634, "line_type": "generated", "code": "\n    String[] parts = name.split(\"\\\\.\");\n    Node result = Node.newString(Token.NAME, parts[0], lineno, charno);\n    for (int i = 1; i < parts.length; i++) {\n      result", "entropy": 0.14208984375, "is_bug_line": false, "sus_score": 0.6197166442871094, "per_token_entropy": [0.52392578125, 1.6669921875, 0.07843017578125, 0.7021484375, 0.00286102294921875, 0.036285400390625, 0.0004925727844238281, 0.00113677978515625, 0.056671142578125, 0.1173095703125, 0.1468505859375, 0.2335205078125, 1.8076171875, 0.033538818359375, 1.0107421875, 0.0033359527587890625, 3.802776336669922e-05, 0.0015840530395507812, 0.0006279945373535156, 0.008819580078125, 2.9802322387695312e-06, 0.005634307861328125, 2.968311309814453e-05, 0.0126495361328125, 0.0033206939697265625, 0.0021305084228515625, 0.11480712890625, 0.003696441650390625, 0.0007944107055664062, 0.0012388229370117188, 0.0027866363525390625, 0.006603240966796875, 0.161376953125, 0.0928955078125, 0.0020160675048828125, 0.09967041015625, 0.034515380859375, 0.00811004638671875, 0.00012695789337158203, 0.00119781494140625, 0.025238037109375, 0.0007662773132324219, 0.0115814208984375, 6.246566772460938e-05, 1.537799835205078e-05, 0.00038170814514160156, 0.0030765533447265625, 0.1180419921875, 0.002094268798828125, 0.0005764961242675781, 0.01132965087890625, 0.2320556640625], "tokens": [284, 892, 1178, 8710, 280, 636, 32, 2998, 22899, 5368, 284, 4004, 1056, 280, 4004, 32, 890, 652, 26, 1763, 32, 2474, 30, 8710, 77, 34, 614, 39997, 30, 1351, 1347, 293, 284, 436, 308, 410, 595, 280, 225, 35, 45, 595, 333, 8710, 32, 1322, 45, 595, 1987, 301, 397, 1056]}
{"line_number": 1535, "line_type": "original", "code": "      case Token.URSH: return \">>>\";", "entropy": 2.138671875, "is_bug_line": false, "sus_score": 0.6197159886360168, "per_token_entropy": [5.9453125, 3.177734375, 0.036712646484375, 0.01092529296875, 7.88671875, 0.04241943359375, 0.0106964111328125, 1.4697265625, 3.515625, 1.40625, 0.007232666015625], "tokens": [647, 1135, 6512, 32, 1263, 2514, 44, 442, 313, 2005, 7857]}
{"line_number": 1535, "line_type": "generated", "code": "\n   */\n  static boolean hasType(Node n, int type) {\n    if (n.getType() == type) {\n      return true;\n    }\n    for (Node c = n.getFirstChild(); c!= null; c = c.getNext", "entropy": 0.06787109375, "is_bug_line": false, "sus_score": 0.6197159886360168, "per_token_entropy": [0.446533203125, 0.0489501953125, 0.0171356201171875, 0.14990234375, 0.0106201171875, 0.5126953125, 0.1595458984375, 0.04937744140625, 0.0209808349609375, 0.005889892578125, 0.0011129379272460938, 0.07171630859375, 0.045654296875, 0.03533935546875, 0.004955291748046875, 0.130859375, 0.50146484375, 0.0060272216796875, 0.05267333984375, 0.129638671875, 0.0034160614013671875, 0.0004420280456542969, 0.0032520294189453125, 0.00101470947265625, 0.00719451904296875, 0.0250396728515625, 0.047149658203125, 0.0007238388061523438, 0.00026154518127441406, 0.0002720355987548828, 0.0186004638671875, 9.453296661376953e-05, 0.44873046875, 0.16845703125, 0.0024890899658203125, 0.0022335052490234375, 0.351806640625, 0.012237548828125, 0.0032444000244140625, 0.000148773193359375, 0.0004818439483642578, 0.00024366378784179688, 0.002017974853515625, 0.0182647705078125, 0.0020160675048828125, 0.0005764961242675781, 0.00160980224609375, 0.0038661956787109375, 0.0011463165283203125, 0.0003256797790527344, 0.00081634521484375, 0.00018835067749023438], "tokens": [664, 569, 334, 907, 1905, 1401, 620, 26, 1212, 310, 30, 629, 827, 27, 301, 284, 415, 308, 96, 32, 10272, 346, 610, 827, 27, 301, 397, 442, 861, 45, 284, 320, 284, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 281, 32, 23017]}
{"line_number": 1620, "line_type": "original", "code": "    }", "entropy": 4.4765625, "is_bug_line": false, "sus_score": 0.619512140750885, "per_token_entropy": [2.232421875, 6.71875], "tokens": [264, 320]}
{"line_number": 1620, "line_type": "generated", "code": "\n    function.addChildToBack(parameterParen);", "entropy": 0.10711669921875, "is_bug_line": false, "sus_score": 0.619512140750885, "per_token_entropy": [0.35302734375, 0.44580078125, 0.0010442733764648438, 0.11834716796875, 0.00023937225341796875, 0.042510986328125, 0.0004940032958984375, 0.060211181640625, 9.524822235107422e-05, 0.049072265625], "tokens": [284, 667, 32, 21545, 705, 2495, 26, 5609, 44032, 293]}
{"line_number": 1440, "line_type": "original", "code": "", "entropy": 4.2421875, "is_bug_line": false, "sus_score": 0.6179879307746887, "per_token_entropy": [4.2421875], "tokens": [203]}
{"line_number": 1440, "line_type": "generated", "code": "\n   * Determines whether this node is a name node that is a property of an\n   * object.\n   *\n   * @param n The node\n   * @return True if n is a property name\n   */\n  static boolean isPropertyName(Node n) {", "entropy": 0.441650390625, "is_bug_line": false, "sus_score": 0.6179879307746887, "per_token_entropy": [0.305419921875, 0.04156494140625, 0.67138671875, 0.168701171875, 0.3310546875, 0.09429931640625, 0.10504150390625, 0.92626953125, 2.916015625, 1.556640625, 0.90576171875, 0.50048828125, 1.73828125, 2.345703125, 1.5, 0.744140625, 0.55712890625, 0.00030875205993652344, 0.36279296875, 0.74853515625, 0.583984375, 0.079345703125, 0.17236328125, 0.0008192062377929688, 0.314697265625, 0.0374755859375, 0.10626220703125, 0.13427734375, 0.048553466796875, 0.12091064453125, 0.0233917236328125, 0.00489044189453125, 0.446533203125, 0.447265625, 0.0188446044921875, 0.35986328125, 0.05010986328125, 0.265380859375, 0.49365234375, 1.076171875, 0.396240234375, 0.01082611083984375, 0.00855255126953125, 0.0418701171875, 0.0013780593872070312, 0.0018177032470703125, 1.1845703125, 0.00457763671875, 0.0019006729125976562, 0.00159454345703125, 0.005191802978515625, 0.000591278076171875], "tokens": [664, 319, 34450, 4946, 458, 1541, 438, 312, 636, 1541, 688, 438, 312, 2804, 432, 600, 664, 319, 1300, 32, 664, 319, 664, 319, 477, 753, 310, 886, 1541, 664, 319, 477, 601, 2933, 415, 310, 438, 312, 2804, 636, 664, 569, 334, 907, 1905, 438, 18413, 26, 1212, 310, 27, 301]}
