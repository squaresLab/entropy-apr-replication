{"line_number": 1417, "line_type": "original", "code": "  private static enum FoldArrayAction {", "entropy": 4.140625, "is_bug_line": false, "sus_score": 0.5890411734580994, "per_token_entropy": [5.03125, 10.53125, 1.18359375, 8.109375, 0.88330078125, 7.12109375, 0.06951904296875, 0.20654296875], "tokens": [225, 945, 907, 3833, 40809, 1261, 1711, 301]}
{"line_number": 1417, "line_type": "generated", "code": "\n        (pattern.isString() && pattern.getString().length() < 20) ||\n        (pattern.isRegExp() && pattern.getFirstChild().getString().length() < 20)) {\n      // is flags folded\n      if (null", "entropy": 0.395751953125, "is_bug_line": false, "sus_score": 0.5890411734580994, "per_token_entropy": [0.4833984375, 1.6806640625, 1.080078125, 0.022552490234375, 0.5498046875, 0.0655517578125, 0.36376953125, 0.50341796875, 0.0199737548828125, 0.0472412109375, 0.0303955078125, 0.55322265625, 0.00251007080078125, 0.75341796875, 0.1954345703125, 1.6337890625, 1.052734375, 0.454345703125, 1.3505859375, 0.221435546875, 0.83935546875, 0.12158203125, 0.0008130073547363281, 0.12139892578125, 0.54052734375, 0.10919189453125, 0.06451416015625, 0.296875, 0.00664520263671875, 0.50390625, 0.00010192394256591797, 0.03173828125, 0.2430419921875, 0.0227203369140625, 0.00647735595703125, 0.00428009033203125, 0.08343505859375, 0.01959228515625, 0.0179443359375, 0.0010442733764648438, 0.5009765625, 0.166259765625, 0.478759765625, 0.390625, 2.234375, 0.2548828125, 0.0777587890625, 5.316734313964844e-05, 0.6611328125, 0.8525390625, 0.08294677734375, 0.77197265625], "tokens": [291, 308, 5607, 32, 35690, 346, 962, 5257, 32, 7069, 922, 1322, 346, 333, 225, 36, 34, 27, 1276, 291, 308, 5607, 32, 297, 28258, 346, 962, 5257, 32, 25657, 2931, 922, 7069, 922, 1322, 346, 333, 225, 36, 34, 490, 301, 397, 434, 438, 5736, 14801, 981, 397, 415, 308, 1693]}
{"line_number": 1433, "line_type": "original", "code": "    } else {", "entropy": 3.716796875, "is_bug_line": false, "sus_score": 0.5890411734580994, "per_token_entropy": [6.7578125, 7.05859375, 0.414794921875, 0.63232421875], "tokens": [264, 320, 813, 301]}
{"line_number": 1433, "line_type": "generated", "code": "\n      String patternStr = pattern.getString();\n      if (isRegExp(patternStr)) {\n        patternStr = \"/\" + patternStr.replace(\"/\", \"\\\\/\") + \"/\";\n      }\n\n      // \"RegExp('foobar', 'gi')\" --> /foobar/gi", "entropy": 0.55810546875, "is_bug_line": false, "sus_score": 0.5890411734580994, "per_token_entropy": [0.09942626953125, 0.744140625, 1.1025390625, 1.6220703125, 0.0753173828125, 0.2410888671875, 0.004756927490234375, 0.042816162109375, 0.173828125, 0.11761474609375, 1.0498046875, 0.57861328125, 1.5693359375, 1.607421875, 1.9541015625, 0.30224609375, 0.04034423828125, 0.338623046875, 0.011016845703125, 0.173583984375, 1.486328125, 0.242919921875, 0.007732391357421875, 3.20703125, 0.0159912109375, 0.292724609375, 0.036102294921875, 0.78369140625, 0.62060546875, 0.51123046875, 0.004032135009765625, 0.08135986328125, 0.04632568359375, 0.0187530517578125, 0.0036373138427734375, 1.0087890625, 0.0003101825714111328, 1.205078125, 1.326171875, 1.5283203125, 0.59375, 0.252685546875, 2.24609375, 0.58349609375, 0.0127716064453125, 0.28076171875, 0.0101318359375, 0.057861328125, 0.68994140625, 0.0015125274658203125, 0.0002332925796508789, 0.00997161865234375], "tokens": [397, 892, 5257, 2007, 280, 5257, 32, 7069, 473, 397, 415, 308, 297, 28258, 26, 5607, 2007, 490, 301, 291, 5257, 2007, 280, 13189, 474, 5257, 2007, 32, 3227, 30706, 18474, 29594, 474, 2430, 866, 397, 320, 1687, 434, 313, 28258, 463, 26018, 370, 330, 5123, 27059, 1101, 517, 26018, 33, 5123]}
{"line_number": 1446, "line_type": "original", "code": "          // \"Array([args])\" --> \"[[args]]\"", "entropy": 2.423828125, "is_bug_line": false, "sus_score": 0.5832032561302185, "per_token_entropy": [7.0, 1.6875, 6.17578125, 4.19140625, 5.61328125, 5.7734375, 0.50244140625, 0.104736328125, 0.335205078125, 0.6318359375, 1.7216796875, 0.119140625, 0.0307769775390625, 0.0474853515625], "tokens": [2033, 434, 313, 1261, 2009, 1132, 1130, 20, 1101, 7185, 77, 1132, 3212, 20]}
{"line_number": 1446, "line_type": "generated", "code": "\n        }\n\n        regexLiteral = IR.regexp(pattern, flags);\n      }\n      regexLiteral.useSourceInfoIfMissingFromForTree(n);\n      parent.replaceChild(n, regexLiteral);\n      reportCodeChange();\n      return regexLiteral;", "entropy": 0.1436767578125, "is_bug_line": false, "sus_score": 0.5832032561302185, "per_token_entropy": [0.0867919921875, 0.00902557373046875, 1.5517578125, 0.38623046875, 0.00023746490478515625, 0.0003898143768310547, 0.0199127197265625, 0.00023090839385986328, 0.1748046875, 0.01465606689453125, 0.11016845703125, 0.004055023193359375, 0.2010498046875, 0.05718994140625, 0.137451171875, 0.000400543212890625, 1.1962890625, 1.2626953125, 0.0016469955444335938, 0.00826263427734375, 0.15234375, 0.0142364501953125, 0.00023233890533447266, 0.20947265625, 0.002223968505859375, 0.00041103363037109375, 0.457275390625, 0.0004608631134033203, 0.0005369186401367188, 0.1756591796875, 0.005950927734375, 0.232177734375, 0.359375, 8.153915405273438e-05, 0.0063018798828125, 5.435943603515625e-05, 4.76837158203125e-05, 0.036224365234375, 0.00012612342834472656, 0.002483367919921875, 0.0006432533264160156, 0.00115966796875, 0.07745361328125, 0.31982421875, 0.004093170166015625, 1.1444091796875e-05, 0.0012111663818359375, 0.15673828125, 0.019195556640625, 0.01184844970703125, 0.00018346309661865234, 0.00044465065002441406], "tokens": [291, 320, 584, 9667, 8208, 280, 14095, 32, 18349, 26, 5607, 30, 5736, 293, 397, 320, 397, 9667, 8208, 32, 539, 2028, 1120, 2797, 9085, 1792, 1562, 3350, 26, 96, 293, 397, 2935, 32, 3227, 2931, 26, 96, 30, 9667, 8208, 293, 397, 3639, 1227, 1791, 473, 397, 442, 9667, 8208, 45]}
{"line_number": 1023, "line_type": "original", "code": "      if (n.hasOneChild()) {", "entropy": 2.662109375, "is_bug_line": false, "sus_score": 0.49303382635116577, "per_token_entropy": [3.88671875, 11.515625, 0.1788330078125, 0.904296875, 0.1470947265625, 7.1015625, 0.0005688667297363281, 0.181396484375, 0.033050537109375], "tokens": [647, 415, 308, 96, 32, 41906, 2931, 1157, 301]}
{"line_number": 1023, "line_type": "generated", "code": "\n      int precedence) {\n    while (true) {\n      switch (n.getType()) {\n        case Token.HOOK:\n          // The precedence of? is the precedence of\n          // the second operand.\n          n = n.getLastChild();\n          continue;", "entropy": 0.420654296875, "is_bug_line": false, "sus_score": 0.49303382635116577, "per_token_entropy": [0.583984375, 0.323974609375, 0.434814453125, 0.07257080078125, 0.0044403076171875, 0.1253662109375, 1.1845703125, 0.0138092041015625, 0.426513671875, 0.00033092498779296875, 0.0033817291259765625, 0.048736572265625, 0.390625, 0.00862884521484375, 0.0022754669189453125, 8.559226989746094e-05, 0.0019350051879882812, 0.00011324882507324219, 0.00525665283203125, 0.1324462890625, 0.034454345703125, 0.0014619827270507812, 0.0019102096557617188, 1.1396484375, 0.0005254745483398438, 0.336181640625, 1.328125, 1.5712890625, 1.2646484375, 0.151611328125, 0.822265625, 0.2548828125, 1.298828125, 0.449462890625, 0.0672607421875, 1.615234375, 0.003841400146484375, 0.552734375, 2.919921875, 1.67578125, 1.1083984375, 0.12457275390625, 0.67529296875, 0.0019025802612304688, 0.013397216796875, 0.00039696693420410156, 0.1165771484375, 0.00980377197265625, 0.4697265625, 0.0310516357421875, 0.0653076171875, 0.00016748905181884766], "tokens": [397, 629, 32787, 27, 301, 284, 2218, 308, 1508, 27, 301, 397, 3578, 308, 96, 32, 10272, 1157, 301, 291, 1135, 6512, 32, 29243, 44, 616, 434, 886, 32787, 432, 1018, 438, 322, 32787, 432, 616, 434, 322, 3100, 19236, 32, 616, 310, 280, 310, 32, 20197, 2931, 473, 616, 4036, 45]}
{"line_number": 1003, "line_type": "original", "code": "    if (n.isReturn()) {", "entropy": 1.78515625, "is_bug_line": false, "sus_score": 0.49303382635116577, "per_token_entropy": [6.140625, 2.818359375, 0.10272216796875, 0.45751953125, 0.00897979736328125, 3.28125, 2.791015625, 0.388427734375, 0.0760498046875], "tokens": [264, 415, 308, 96, 32, 297, 2891, 1157, 301]}
{"line_number": 1003, "line_type": "generated", "code": "\n          }\n          return false;\n        case Token.SWITCH:\n          return false;\n        case Token.FOR:\n          return false;\n        case Token.WHILE:\n          return false;\n        case Token.DO:\n          return false;\n        case Token.TRY", "entropy": 0.254150390625, "is_bug_line": false, "sus_score": 0.49303382635116577, "per_token_entropy": [0.440673828125, 0.10174560546875, 0.640625, 1.373046875, 0.6572265625, 0.0024776458740234375, 0.6142578125, 0.067138671875, 0.0012769699096679688, 6.318092346191406e-06, 2.62109375, 0.00015985965728759766, 0.2587890625, 0.60107421875, 0.38818359375, 0.00318145751953125, 0.2486572265625, 0.19482421875, 0.0012645721435546875, 0.00017321109771728516, 1.76171875, 0.0008864402770996094, 0.65869140625, 0.54638671875, 0.0965576171875, 0.0002913475036621094, 0.07684326171875, 0.035614013671875, 0.0008816719055175781, 7.95125961303711e-05, 0.0802001953125, 2.1457672119140625e-06, 4.5180320739746094e-05, 0.0094146728515625, 0.01155853271484375, 0.0041351318359375, 0.0004363059997558594, 0.11944580078125, 0.08026123046875, 0.0016870498657226562, 0.00027871131896972656, 0.23388671875, 0.0002701282501220703, 0.06103515625, 0.103515625, 0.048004150390625, 0.000339508056640625, 0.1697998046875, 0.1400146484375, 0.0017938613891601562, 0.0002129077911376953, 0.7509765625], "tokens": [616, 320, 616, 442, 901, 45, 291, 1135, 6512, 32, 33124, 44, 616, 442, 901, 45, 291, 1135, 6512, 32, 7321, 44, 616, 442, 901, 45, 291, 1135, 6512, 32, 11990, 5311, 44, 616, 442, 901, 45, 291, 1135, 6512, 32, 1680, 44, 616, 442, 901, 45, 291, 1135, 6512, 32, 6582]}
{"line_number": 2133, "line_type": "original", "code": "", "entropy": 0.13525390625, "is_bug_line": false, "sus_score": 0.49303382635116577, "per_token_entropy": [0.13525390625], "tokens": [203]}
{"line_number": 2133, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.49303382635116577, "per_token_entropy": [], "tokens": []}
{"line_number": 861, "line_type": "original", "code": "        reportCodeChange();", "entropy": 2.57421875, "is_bug_line": false, "sus_score": 0.48674947023391724, "per_token_entropy": [6.17578125, 6.6015625, 0.059417724609375, 0.000621795654296875, 0.03887939453125], "tokens": [351, 3639, 1227, 1791, 473]}
{"line_number": 861, "line_type": "generated", "code": "\n      if (lastTrue!= lastFalse) {\n        return;\n      }\n      if (!lastTrue.isExprResult()) {\n        return;\n      }\n\n      Node trueExpr = lastTrue.getFirstChild();\n      Node falseExpr = lastFalse.getFirstChild", "entropy": 0.2296142578125, "is_bug_line": false, "sus_score": 0.48674947023391724, "per_token_entropy": [0.52001953125, 0.2347412109375, 0.5390625, 0.541015625, 0.055145263671875, 1.296875, 0.669921875, 0.004329681396484375, 0.3623046875, 0.00652313232421875, 0.0226898193359375, 1.048828125, 0.0008845329284667969, 0.014190673828125, 0.0015811920166015625, 1.7392578125, 0.280029296875, 0.68505859375, 0.325439453125, 0.00891876220703125, 0.0005545616149902344, 0.0469970703125, 0.447265625, 0.00116729736328125, 0.1749267578125, 0.0003581047058105469, 0.0047607421875, 0.077392578125, 0.0002092123031616211, 0.0019521713256835938, 6.401538848876953e-05, 0.96337890625, 0.341796875, 0.73583984375, 0.191650390625, 0.042755126953125, 0.269287109375, 0.00021398067474365234, 0.00334930419921875, 0.2037353515625, 0.0050811767578125, 0.0208282470703125, 0.005977630615234375, 0.01666259765625, 0.004711151123046875, 0.00026679039001464844, 0.00014317035675048828, 0.007617950439453125, 0.00559234619140625, 0.00012743473052978516, 0.0022411346435546875, 1.1205673217773438e-05], "tokens": [397, 415, 308, 2135, 1815, 863, 2401, 2700, 27, 301, 291, 442, 45, 397, 320, 397, 415, 1429, 2135, 1815, 32, 297, 6150, 1394, 1157, 301, 291, 442, 45, 397, 320, 1687, 4004, 861, 6150, 280, 2401, 1815, 32, 25657, 2931, 473, 397, 4004, 901, 6150, 280, 2401, 2700, 32, 25657, 2931]}
{"line_number": 860, "line_type": "original", "code": "        parent.replaceChild(n, var);", "entropy": 2.822265625, "is_bug_line": false, "sus_score": 0.48534610867500305, "per_token_entropy": [5.46484375, 9.0, 0.04156494140625, 1.2197265625, 0.00205230712890625, 0.005096435546875, 1.56640625, 0.0113983154296875, 10.8984375, 0.013763427734375], "tokens": [351, 2935, 32, 3227, 2931, 26, 96, 30, 773, 293]}
{"line_number": 860, "line_type": "generated", "code": "\n      if (!lastTrue.isExprResult()) {\n        break;\n      }\n\n      Node lastFalse = falseBranch.getLastChild();", "entropy": 0.14892578125, "is_bug_line": false, "sus_score": 0.48534610867500305, "per_token_entropy": [0.1668701171875, 0.220458984375, 0.634765625, 0.377197265625, 1.704692840576172e-05, 0.0023345947265625, 0.05035400390625, 0.61962890625, 0.0003578662872314453, 0.30126953125, 0.002105712890625, 0.0233154296875, 0.346435546875, 0.00034427642822265625, 0.0098419189453125, 0.00020611286163330078, 0.478759765625, 0.1610107421875, 0.39208984375, 0.217041015625, 0.003993988037109375, 0.007335662841796875, 7.3909759521484375e-06, 0.0005211830139160156, 0.00030517578125, 4.3511390686035156e-05, 0.0015630722045898438], "tokens": [397, 415, 1429, 2135, 1815, 32, 297, 6150, 1394, 1157, 301, 291, 1626, 45, 397, 320, 1687, 4004, 2401, 2700, 280, 901, 10094, 32, 20197, 2931, 473]}
{"line_number": 1012, "line_type": "original", "code": "  private Node getBlockReturnExpression(Node n) {", "entropy": 2.09765625, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [5.54296875, 7.6875, 3.322265625, 0.41650390625, 1.1484375, 4.7421875, 2.228515625, 0.03814697265625, 0.006877899169921875, 0.01415252685546875, 0.013702392578125, 0.01837158203125], "tokens": [225, 945, 4004, 622, 2227, 2891, 3487, 26, 1212, 310, 27, 301]}
{"line_number": 1012, "line_type": "generated", "code": "\n        case Token.DO:\n          return true;\n        default:\n          return false;\n      }\n    }\n  }\n\n  /**\n   * Does a statement end in a 'dangling else'? A statement ends in a\n   * 'dangling else' if", "entropy": 0.301513671875, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [0.298095703125, 0.291748046875, 0.0011434555053710938, 0.0009307861328125, 1.0693359375, 0.0010614395141601562, 0.1605224609375, 1.12890625, 0.5751953125, 0.0001552104949951172, 0.60595703125, 0.7294921875, 0.0011281967163085938, 0.0162811279296875, 0.11993408203125, 0.00395965576171875, 7.665157318115234e-05, 0.022247314453125, 0.0012950897216796875, 0.018157958984375, 0.000476837158203125, 0.0280914306640625, 0.00167083740234375, 0.3662109375, 0.1917724609375, 0.048126220703125, 0.0007786750793457031, 1.453125, 0.2626953125, 0.58447265625, 3.232421875, 1.5556640625, 0.1507568359375, 0.93212890625, 0.12286376953125, 0.0014657974243164062, 0.002971649169921875, 0.02606201171875, 0.03179931640625, 0.271728515625, 0.00887298583984375, 0.03411865234375, 0.3037109375, 0.72705078125, 0.048492431640625, 0.0007171630859375, 0.221923828125, 0.00025916099548339844, 6.556510925292969e-06, 0.001007080078125, 0.0030574798583984375, 0.021728515625], "tokens": [291, 1135, 6512, 32, 1680, 44, 616, 442, 861, 45, 291, 1244, 44, 616, 442, 901, 45, 397, 320, 284, 320, 334, 320, 719, 1022, 664, 319, 12894, 312, 7603, 943, 328, 312, 330, 86, 43237, 813, 25, 49, 399, 7603, 15564, 328, 312, 664, 319, 330, 86, 43237, 813, 25, 415]}
{"line_number": 1018, "line_type": "original", "code": "   * @return Whether the node is a block with a single statement that is", "entropy": 0.99462890625, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [6.2109375, 1.3564453125, 1.892578125, 0.17138671875, 0.38671875, 0.57763671875, 0.5126953125, 0.33642578125, 0.400390625, 1.2451171875, 0.732421875, 0.1690673828125, 0.1119384765625, 0.61474609375, 0.98046875, 0.2159423828125], "tokens": [261, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438]}
{"line_number": 1018, "line_type": "generated", "code": "\n  /**\n   * Does a statement potentially continue to the next statement?\n   * A statement potentially continues if it is a block or a\n   * statement-expression.\n   */\n  private boolean potentiallyContinues(Node n) {\n    return n.is", "entropy": 0.662109375, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [0.28173828125, 0.365478515625, 0.1396484375, 0.0023345947265625, 2.021484375, 0.36767578125, 0.59423828125, 3.515625, 3.130859375, 1.1171875, 1.3857421875, 0.08209228515625, 0.355224609375, 0.420654296875, 0.1571044921875, 0.60400390625, 1.1435546875, 0.1544189453125, 0.86962890625, 0.1356201171875, 0.80712890625, 0.79150390625, 0.82958984375, 1.2470703125, 0.82958984375, 1.84375, 1.0732421875, 2.654296875, 0.003215789794921875, 1.49609375, 1.3974609375, 1.71875, 0.6533203125, 0.276123046875, 0.091796875, 0.0140533447265625, 0.036865234375, 0.040435791015625, 0.703125, 0.06402587890625, 2.3603439331054688e-05, 9.5367431640625e-07, 0.193603515625, 0.00495147705078125, 0.00922393798828125, 0.007076263427734375, 0.0004050731658935547, 0.010406494140625, 0.57958984375, 0.17138671875, 0.0005612373352050781, 0.043121337890625], "tokens": [334, 1022, 664, 319, 12894, 312, 7603, 22035, 4036, 372, 322, 2354, 7603, 49, 664, 319, 399, 7603, 22035, 35002, 415, 561, 438, 312, 2163, 556, 312, 664, 319, 7603, 31, 7672, 32, 664, 569, 334, 945, 1905, 22035, 634, 266, 1032, 26, 1212, 310, 27, 301, 284, 442, 310, 32, 297]}
{"line_number": 1020, "line_type": "original", "code": "   */", "entropy": 4.66796875, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [5.83203125, 3.501953125], "tokens": [261, 569]}
{"line_number": 1020, "line_type": "generated", "code": "\n   * this expression?\n   */\n  private boolean hasLowerPrecedence(Node n, int precedence) {\n    while (true) {\n      switch (n.getType()) {\n        case Token.HOOK:\n          // The precedence of a? b : c", "entropy": 0.3212890625, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [0.155029296875, 0.06622314453125, 1.869140625, 0.501953125, 0.3564453125, 0.27880859375, 0.2490234375, 0.00913238525390625, 0.057403564453125, 0.081787109375, 0.272705078125, 0.130859375, 0.0213623046875, 0.00045490264892578125, 0.07012939453125, 0.1007080078125, 0.1317138671875, 0.66845703125, 0.57861328125, 1.349609375, 0.04876708984375, 0.006992340087890625, 0.052276611328125, 1.1435546875, 0.008880615234375, 0.2310791015625, 0.00012350082397460938, 0.0003407001495361328, 0.013153076171875, 0.65625, 0.00577545166015625, 0.002925872802734375, 3.445148468017578e-05, 0.0015916824340820312, 6.079673767089844e-05, 0.00020635128021240234, 0.0239105224609375, 0.0211944580078125, 0.0012521743774414062, 0.0008177757263183594, 1.078125, 0.00018143653869628906, 0.30029296875, 1.38671875, 1.537109375, 1.19921875, 0.08538818359375, 0.79833984375, 0.82763671875, 0.309814453125, 0.00907135009765625, 0.000644683837890625], "tokens": [664, 319, 458, 6101, 49, 664, 569, 334, 945, 1905, 1401, 6724, 2626, 39939, 26, 1212, 310, 30, 629, 32787, 27, 301, 284, 2218, 308, 1508, 27, 301, 397, 3578, 308, 96, 32, 10272, 1157, 301, 291, 1135, 6512, 32, 29243, 44, 616, 434, 886, 32787, 432, 312, 1018, 323, 499, 281]}
{"line_number": 1021, "line_type": "original", "code": "  private boolean isVarBlock(Node n) {", "entropy": 2.138671875, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [5.59375, 0.81640625, 0.1495361328125, 2.65625, 10.109375, 3.947265625, 0.1934814453125, 0.00489044189453125, 0.0136871337890625, 0.005207061767578125, 0.027099609375], "tokens": [225, 945, 1905, 438, 1881, 2227, 26, 1212, 310, 27, 301]}
{"line_number": 1021, "line_type": "generated", "code": "\n    if (n.getType() == Token.HOOK) {\n      // The? operator has the highest precedence.\n      return false;\n    }\n\n    while (true) {\n      switch (n.getType()) {\n        case Token.OR:\n          // The", "entropy": 0.330810546875, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [0.77392578125, 1.3330078125, 0.201171875, 0.453125, 0.036407470703125, 0.63916015625, 0.056060791015625, 0.1898193359375, 0.00392913818359375, 0.002574920654296875, 0.68017578125, 0.0198211669921875, 0.005931854248046875, 0.040191650390625, 1.599609375, 1.6865234375, 0.73095703125, 0.20166015625, 0.53857421875, 0.11962890625, 0.95166015625, 0.0260467529296875, 0.62060546875, 0.091796875, 0.042816162109375, 0.197265625, 0.0005040168762207031, 0.021148681640625, 0.0006604194641113281, 0.430419921875, 1.1005859375, 0.023040771484375, 0.361083984375, 0.00022518634796142578, 0.006832122802734375, 0.039520263671875, 0.81494140625, 0.013336181640625, 0.019622802734375, 0.00014507770538330078, 0.004077911376953125, 0.00011944770812988281, 0.02008056640625, 0.0316162109375, 0.03814697265625, 0.00035858154296875, 3.266334533691406e-05, 0.9677734375, 0.00167083740234375, 0.448974609375, 1.0625, 0.56005859375], "tokens": [284, 415, 308, 96, 32, 10272, 346, 610, 6512, 32, 29243, 27, 301, 397, 434, 886, 1018, 4134, 1401, 322, 18399, 32787, 32, 397, 442, 901, 45, 284, 320, 446, 2218, 308, 1508, 27, 301, 397, 3578, 308, 96, 32, 10272, 1157, 301, 291, 1135, 6512, 32, 758, 44, 616, 434, 886]}
{"line_number": 1022, "line_type": "original", "code": "    if (n.isBlock()) {", "entropy": 1.7744140625, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [4.61328125, 1.7578125, 0.15478515625, 0.48974609375, 0.0174560546875, 0.70166015625, 7.953125, 0.2685546875, 0.011962890625], "tokens": [264, 415, 308, 96, 32, 297, 2227, 1157, 301]}
{"line_number": 1022, "line_type": "generated", "code": "\n  private boolean hasLowerPrecedence(Node n, int precedence) {\n    if (n.isOperator()) {\n      return precedence < getPrecedence(n);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Does the", "entropy": 0.29638671875, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [1.0966796875, 0.1224365234375, 0.130126953125, 0.424072265625, 0.1837158203125, 0.031097412109375, 0.0011816024780273438, 0.0732421875, 0.1644287109375, 0.1524658203125, 0.15966796875, 0.268798828125, 0.59619140625, 0.0295867919921875, 0.01050567626953125, 0.1251220703125, 1.3193359375, 0.12353515625, 0.131103515625, 0.132080078125, 0.39208984375, 0.52294921875, 0.09661865234375, 0.00223541259765625, 0.03155517578125, 1.603515625, 0.6533203125, 0.55419921875, 0.93994140625, 0.0718994140625, 0.00014269351959228516, 0.0234527587890625, 0.006893157958984375, 0.26171875, 0.0096435546875, 0.0004665851593017578, 1.572265625, 0.9853515625, 0.0173797607421875, 0.6337890625, 0.086181640625, 0.00033402442932128906, 0.004520416259765625, 2.86102294921875e-05, 0.004924774169921875, 0.0020427703857421875, 0.2763671875, 0.0924072265625, 0.025970458984375, 0.0008897781372070312, 1.208984375, 0.054443359375], "tokens": [334, 945, 1905, 1401, 6724, 2626, 39939, 26, 1212, 310, 30, 629, 32787, 27, 301, 284, 415, 308, 96, 32, 297, 7145, 1157, 301, 397, 442, 32787, 333, 622, 2626, 39939, 26, 96, 293, 284, 320, 813, 301, 397, 442, 901, 45, 284, 320, 334, 320, 719, 1022, 664, 319, 12894, 322]}
{"line_number": 1004, "line_type": "original", "code": "      return n.hasOneChild();", "entropy": 2.576171875, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [4.1328125, 2.556640625, 3.330078125, 0.00585174560546875, 7.31640625, 0.005863189697265625, 0.68359375], "tokens": [647, 442, 310, 32, 41906, 2931, 473]}
{"line_number": 1004, "line_type": "generated", "code": "\n          n = n.getLastChild();\n          break;\n        case Token.WHILE:\n        case Token.DO:\n          if (n.getChildCount() < 2) {\n            return true;\n          }", "entropy": 0.1654052734375, "is_bug_line": false, "sus_score": 0.4849042594432831, "per_token_entropy": [0.410400390625, 0.994140625, 0.005084991455078125, 0.030242919921875, 8.165836334228516e-05, 0.2310791015625, 0.0007777214050292969, 0.1939697265625, 0.062408447265625, 0.40673828125, 0.0001081228256225586, 0.73486328125, 0.0494384765625, 0.0006885528564453125, 4.410743713378906e-06, 0.77001953125, 2.86102294921875e-06, 0.00018930435180664062, 0.70458984375, 0.0023479461669921875, 0.0003542900085449219, 4.0531158447265625e-05, 0.56689453125, 0.0022106170654296875, 0.63720703125, 1.0283203125, 0.00806427001953125, 0.0095367431640625, 0.00017726421356201172, 0.0092315673828125, 0.00021731853485107422, 0.00012385845184326172, 0.2218017578125, 0.00026917457580566406, 0.01088714599609375, 0.0009908676147460938, 0.001194000244140625, 0.003528594970703125, 0.0029850006103515625, 0.006988525390625, 0.00014925003051757812, 0.0037670135498046875, 4.184246063232422e-05], "tokens": [616, 310, 280, 310, 32, 20197, 2931, 473, 616, 1626, 45, 291, 1135, 6512, 32, 11990, 5311, 44, 291, 1135, 6512, 32, 1680, 44, 616, 415, 308, 96, 32, 24213, 1534, 346, 333, 225, 36, 27, 301, 324, 442, 861, 45, 616, 320]}
{"line_number": 2134, "line_type": "original", "code": "", "entropy": 0.13525390625, "is_bug_line": false, "sus_score": 0.48489856719970703, "per_token_entropy": [0.13525390625], "tokens": [203]}
{"line_number": 2134, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.48489856719970703, "per_token_entropy": [], "tokens": []}
{"line_number": 1025, "line_type": "original", "code": "        if (first.isVar()) {", "entropy": 2.888671875, "is_bug_line": false, "sus_score": 0.48481208086013794, "per_token_entropy": [4.07421875, 5.1640625, 0.1121826171875, 7.48046875, 1.2548828125, 1.3115234375, 5.80859375, 0.7529296875, 0.04583740234375], "tokens": [351, 415, 308, 2232, 32, 297, 1881, 1157, 301]}
{"line_number": 1025, "line_type": "generated", "code": "\n          return isLowerPrecedenceInExpression(child, precedence);\n        }\n      };\n\n      return NodeUtil.has(n, isLowerPrecedencePredicate);\n  }\n\n  /**\n   * Does the expression contain an operator with lower precedence than\n   * the argument", "entropy": 0.34228515625, "is_bug_line": false, "sus_score": 0.48481208086013794, "per_token_entropy": [2.0703125, 0.28076171875, 2.01171875, 0.322998046875, 0.019989013671875, 0.0001558065414428711, 1.5322265625, 0.01282501220703125, 0.05181884765625, 1.4912109375, 0.0194244384765625, 0.049285888671875, 0.02740478515625, 0.123779296875, 0.038482666015625, 0.3515625, 0.038177490234375, 1.1962890625, 0.5029296875, 1.4814453125, 0.0091094970703125, 0.0014867782592773438, 0.783203125, 0.11029052734375, 0.035125732421875, 0.01824951171875, 0.06884765625, 0.0006856918334960938, 8.308887481689453e-05, 1.1563301086425781e-05, 0.0005712509155273438, 0.042327880859375, 0.84912109375, 0.0016994476318359375, 0.3046875, 0.1258544921875, 0.0270843505859375, 0.0004305839538574219, 0.90478515625, 0.09832763671875, 0.51611328125, 0.1181640625, 0.3408203125, 0.14794921875, 0.053131103515625, 0.9189453125, 0.251708984375, 0.09808349609375, 0.0229034423828125, 0.0005412101745605469, 0.16943359375, 0.1484375], "tokens": [616, 442, 438, 6724, 2626, 39939, 383, 3487, 26, 2661, 30, 32787, 293, 291, 320, 397, 1472, 1687, 442, 4004, 1733, 32, 2040, 26, 96, 30, 438, 6724, 2626, 39939, 12688, 293, 334, 320, 719, 1022, 664, 319, 12894, 322, 6101, 4799, 600, 4134, 623, 7216, 32787, 2784, 664, 319, 322, 2793]}
{"line_number": 343, "line_type": "original", "code": "            nextNode.replaceChild(nextCond, newCond);", "entropy": 2.17578125, "is_bug_line": false, "sus_score": 0.4829132556915283, "per_token_entropy": [9.1328125, 13.84375, 1.21875, 1.2587890625, 2.01171875, 0.0171051025390625, 0.01090240478515625, 0.53173828125, 0.1002197265625, 0.0043182373046875, 0.1407470703125, 0.00626373291015625, 0.0078277587890625], "tokens": [1468, 2354, 1212, 32, 3227, 2931, 26, 1978, 21808, 30, 537, 21808, 293]}
{"line_number": 343, "line_type": "generated", "code": "\n        return false;\n    }\n  }\n\n  /**\n   * Use \"return x?1:2;\" in place of \"if(x)return 1;return 2;\"\n   */\n  private Node tryReplaceIf2(Node n) {\n\n   ", "entropy": 0.19677734375, "is_bug_line": false, "sus_score": 0.4829132556915283, "per_token_entropy": [0.1328125, 0.09454345703125, 0.0296630859375, 0.0007753372192382812, 0.02362060546875, 0.0001888275146484375, 0.0203094482421875, 0.00041937828063964844, 0.1514892578125, 0.6650390625, 0.079345703125, 0.0010509490966796875, 2.341796875, 0.208984375, 0.57373046875, 0.69873046875, 0.80810546875, 0.364990234375, 0.01259613037109375, 0.10540771484375, 0.039215087890625, 0.027252197265625, 0.0033111572265625, 0.0006337165832519531, 0.031524658203125, 0.2376708984375, 0.00506591796875, 0.0027866363525390625, 0.043670654296875, 0.10162353515625, 0.03839111328125, 0.0006618499755859375, 0.0030765533447265625, 0.230712890625, 0.0007724761962890625, 0.0015802383422851562, 0.00848388671875, 0.03582763671875, 0.08782958984375, 0.0187225341796875, 0.03204345703125, 0.051971435546875, 0.031097412109375, 0.294677734375, 0.385498046875, 1.65234375, 0.003383636474609375, 0.00040841102600097656, 0.007720947265625, 0.026397705078125, 0.000865936279296875, 0.51318359375], "tokens": [291, 442, 901, 45, 284, 320, 334, 320, 719, 1022, 664, 319, 4417, 313, 601, 816, 49, 35, 44, 36, 7879, 328, 3668, 432, 313, 325, 26, 106, 27, 601, 225, 35, 45, 601, 225, 36, 7879, 664, 569, 334, 945, 4004, 1596, 9388, 2797, 36, 26, 1212, 310, 27, 301, 446]}
{"line_number": 784, "line_type": "original", "code": "            n.removeChild(cond);", "entropy": 2.146484375, "is_bug_line": false, "sus_score": 0.4820631742477417, "per_token_entropy": [7.73828125, 3.0703125, 0.11334228515625, 2.544921875, 0.0009937286376953125, 1.5439453125, 0.00917816162109375], "tokens": [1468, 310, 32, 28878, 26, 1328, 293]}
{"line_number": 784, "line_type": "generated", "code": "\n        Node expr = NodeUtil.newExpr(IR.var(hookNode));\n        parent.replaceChild(n, expr);\n        reportCodeChange();\n        return expr;\n      }\n    }\n\n    // if(x)var y=1;else", "entropy": 0.162353515625, "is_bug_line": false, "sus_score": 0.4820631742477417, "per_token_entropy": [0.10406494140625, 0.347900390625, 0.943359375, 0.0276031494140625, 0.60009765625, 0.00016236305236816406, 1.3470649719238281e-05, 0.002666473388671875, 0.0030803680419921875, 0.0027103424072265625, 1.6904296875, 0.0009150505065917969, 0.028411865234375, 0.00611114501953125, 1.59765625, 0.0002963542938232422, 0.822265625, 0.03985595703125, 0.12164306640625, 9.02414321899414e-05, 0.003810882568359375, 0.00013017654418945312, 6.520748138427734e-05, 0.005847930908203125, 0.00013589859008789062, 0.0045318603515625, 0.0013179779052734375, 0.025848388671875, 0.03564453125, 0.00014889240264892578, 1.4066696166992188e-05, 0.0003924369812011719, 0.406982421875, 0.00885009765625, 0.004825592041015625, 0.0005335807800292969, 0.017547607421875, 4.2557716369628906e-05, 0.08966064453125, 0.00045990943908691406, 0.203125, 0.1617431640625, 0.1298828125, 0.050506591796875, 0.01093292236328125, 0.082275390625, 0.6435546875, 0.05047607421875, 0.09173583984375, 0.02838134765625, 0.0225372314453125, 0.0252532958984375], "tokens": [291, 4004, 9810, 280, 4004, 1733, 32, 890, 6150, 26, 3900, 32, 869, 26, 7133, 1212, 876, 291, 2935, 32, 3227, 2931, 26, 96, 30, 9810, 293, 291, 3639, 1227, 1791, 473, 291, 442, 9810, 45, 397, 320, 284, 320, 446, 434, 415, 26, 106, 27, 869, 533, 47, 35, 45, 1824]}
{"line_number": 785, "line_type": "original", "code": "            Node assignName = thenOp.removeFirstChild();", "entropy": 2.240234375, "is_bug_line": false, "sus_score": 0.4820631742477417, "per_token_entropy": [9.2265625, 2.337890625, 3.76171875, 4.2734375, 0.373779296875, 4.3046875, 1.6484375, 0.1221923828125, 0.7529296875, 0.0360107421875, 0.000606536865234375, 0.03851318359375], "tokens": [1468, 4004, 5313, 558, 280, 1615, 3397, 32, 2546, 3472, 2931, 473]}
{"line_number": 785, "line_type": "generated", "code": "\n        Node expr = NodeUtil.newExpr(var);\n        parent.replaceChild(n, expr);\n        reportCodeChange();\n        return expr;\n      }\n    }\n\n    // if(x)y=1;else var y=2  ->", "entropy": 0.10540771484375, "is_bug_line": false, "sus_score": 0.4820631742477417, "per_token_entropy": [0.1163330078125, 0.71923828125, 0.4990234375, 0.0134735107421875, 0.26904296875, 9.560585021972656e-05, 1.5020370483398438e-05, 0.0012216567993164062, 0.0024433135986328125, 0.0029430389404296875, 0.211181640625, 0.212890625, 0.01953125, 0.054718017578125, 5.2809715270996094e-05, 0.001346588134765625, 7.534027099609375e-05, 3.0279159545898438e-05, 0.0020084381103515625, 7.164478302001953e-05, 0.004070281982421875, 0.0008478164672851562, 0.0229339599609375, 0.0307159423828125, 0.00014257431030273438, 1.2278556823730469e-05, 0.00042748451232910156, 0.44775390625, 0.00669097900390625, 0.006427764892578125, 0.0004093647003173828, 0.013397216796875, 3.7670135498046875e-05, 0.080810546875, 0.00034356117248535156, 0.2188720703125, 0.1981201171875, 0.1153564453125, 0.042572021484375, 0.01007080078125, 0.07867431640625, 1.0546875, 0.03790283203125, 0.02618408203125, 0.00470733642578125, 0.0167694091796875, 0.414794921875, 0.080078125, 0.019500732421875, 0.038299560546875, 0.37939453125, 0.002811431884765625], "tokens": [291, 4004, 9810, 280, 4004, 1733, 32, 890, 6150, 26, 869, 293, 291, 2935, 32, 3227, 2931, 26, 96, 30, 9810, 293, 291, 3639, 1227, 1791, 473, 291, 442, 9810, 45, 397, 320, 284, 320, 446, 434, 415, 26, 106, 27, 107, 47, 35, 45, 1824, 773, 533, 47, 36, 225, 967]}
{"line_number": 790, "line_type": "original", "code": "            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);", "entropy": 0.9111328125, "is_bug_line": false, "sus_score": 0.4820631742477417, "per_token_entropy": [9.8359375, 2.193359375, 2.4609375, 0.33544921875, 0.036285400390625, 0.12359619140625, 0.0012950897216796875, 0.002414703369140625, 0.003948211669921875, 0.10107421875, 0.013519287109375, 0.4580078125, 0.416259765625, 0.00960540771484375, 0.0269775390625, 0.004108428955078125, 3.916015625, 0.00574493408203125, 0.0002262592315673828, 0.00347137451171875, 0.0821533203125, 0.0105133056640625], "tokens": [1468, 4004, 11962, 1212, 280, 14095, 32, 7133, 26, 1328, 30, 1615, 6150, 30, 813, 6150, 547, 1617, 612, 26, 96, 293]}
{"line_number": 790, "line_type": "generated", "code": "\n      // if(x)var y=1;else var z=2  ->  var y=x?1:2, z=2\n      if (name1.hasChildren()\n          && maybeName2.isVar()\n          && name", "entropy": 0.2344970703125, "is_bug_line": false, "sus_score": 0.4820631742477417, "per_token_entropy": [0.81982421875, 0.8720703125, 0.962890625, 0.2239990234375, 0.045989990234375, 0.07598876953125, 0.1878662109375, 0.1517333984375, 0.297607421875, 0.12744140625, 0.085205078125, 0.03399658203125, 0.77490234375, 0.57568359375, 0.0294189453125, 0.155517578125, 0.85595703125, 0.0049591064453125, 0.0650634765625, 0.097412109375, 0.1162109375, 0.051239013671875, 0.392822265625, 0.02545166015625, 0.01067352294921875, 0.0233612060546875, 0.33935546875, 0.455810546875, 0.791015625, 0.042724609375, 0.53759765625, 0.2037353515625, 0.61376953125, 0.05194091796875, 0.63916015625, 0.0005159378051757812, 0.0025768280029296875, 0.1171875, 0.0003066062927246094, 0.050628662109375, 0.2705078125, 0.00537872314453125, 0.41259765625, 0.0006046295166015625, 4.8279762268066406e-05, 0.001987457275390625, 0.1318359375, 0.032562255859375, 0.1322021484375, 0.00975799560546875, 0.00440216064453125, 0.2861328125], "tokens": [397, 434, 415, 26, 106, 27, 869, 533, 47, 35, 45, 1824, 773, 1288, 47, 36, 225, 967, 225, 773, 533, 47, 106, 49, 35, 44, 36, 30, 1288, 47, 36, 397, 415, 308, 426, 35, 32, 2040, 7640, 346, 616, 962, 8762, 558, 36, 32, 297, 1881, 346, 616, 962, 636]}
{"line_number": 1017, "line_type": "original", "code": "  /**", "entropy": 2.740234375, "is_bug_line": false, "sus_score": 0.48185253143310547, "per_token_entropy": [4.51953125, 0.96044921875], "tokens": [225, 1022]}
{"line_number": 1017, "line_type": "generated", "code": "\n  /**\n   * Does a statement consume a 'dangling catch'? A statement consumes\n   * a 'dangling catch' if a 'catch' token following the statement\n   * would be considered by the parser to be part of the statement.\n  ", "entropy": 0.1634521484375, "is_bug_line": false, "sus_score": 0.48185253143310547, "per_token_entropy": [1.4111328125, 0.3359375, 0.057464599609375, 0.0008893013000488281, 1.171875, 0.22119140625, 0.55419921875, 1.78125, 0.07794189453125, 0.31396484375, 0.262939453125, 0.00778961181640625, 1.521484375, 0.06231689453125, 0.0172882080078125, 0.1026611328125, 0.007595062255859375, 0.0190277099609375, 0.002777099609375, 0.0386962890625, 0.0001773834228515625, 0.0022144317626953125, 0.01302337646484375, 0.0007243156433105469, 1.2636184692382812e-05, 0.0085906982421875, 0.0012359619140625, 0.005329132080078125, 0.296875, 0.033477783203125, 0.032623291015625, 0.00492095947265625, 0.0513916015625, 0.006565093994140625, 0.00489044189453125, 0.01139068603515625, 0.0072784423828125, 0.000797271728515625, 0.004486083984375, 0.0010814666748046875, 0.0012178421020507812, 0.00814056396484375, 0.0001995563507080078, 0.0011138916015625, 0.0007796287536621094, 0.002597808837890625, 0.005382537841796875, 0.0003323554992675781, 0.00273895263671875, 0.0118408203125, 0.002796173095703125, 0.0042266845703125], "tokens": [334, 1022, 664, 319, 12894, 312, 7603, 16831, 312, 330, 86, 43237, 2368, 25, 49, 399, 7603, 16831, 101, 664, 319, 312, 330, 86, 43237, 2368, 25, 415, 312, 330, 5628, 25, 2404, 2412, 322, 7603, 664, 319, 2268, 526, 11870, 810, 322, 4118, 372, 526, 1742, 432, 322, 7603, 32, 664]}
