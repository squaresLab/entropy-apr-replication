{"line_number": 1716, "line_type": "original", "code": "", "entropy": 0.207763671875, "is_bug_line": false, "sus_score": 0.6554085612297058, "per_token_entropy": [0.207763671875], "tokens": [203]}
{"line_number": 1716, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6554085612297058, "per_token_entropy": [], "tokens": []}
{"line_number": 1715, "line_type": "original", "code": "", "entropy": 0.207763671875, "is_bug_line": false, "sus_score": 0.6488343477249146, "per_token_entropy": [0.207763671875], "tokens": [203]}
{"line_number": 1715, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.6488343477249146, "per_token_entropy": [], "tokens": []}
{"line_number": 1171, "line_type": "original", "code": "    if (objectType.getType() != Token.NAME) {", "entropy": 1.3544921875, "is_bug_line": false, "sus_score": 0.6154604554176331, "per_token_entropy": [4.33203125, 2.046875, 0.116455078125, 6.99609375, 0.62255859375, 0.10968017578125, 1.990234375, 0.004428863525390625, 0.9296875, 0.001018524169921875, 0.00018036365509033203, 1.33203125, 0.45849609375, 0.03289794921875], "tokens": [264, 415, 308, 1473, 620, 32, 10272, 346, 863, 6512, 32, 2474, 27, 301]}
{"line_number": 1171, "line_type": "generated", "code": "\n  private Node tryFoldKnownStringMethods(Node n) {\n    Preconditions.checkArgument(n.getType() == Token.CALL);\n\n    Node callee = n.getFirstChild();\n    if (callee.getType()!= Token.GETPROP) {", "entropy": 0.1514892578125, "is_bug_line": false, "sus_score": 0.6154604554176331, "per_token_entropy": [0.56640625, 0.27685546875, 0.03900146484375, 0.004878997802734375, 0.00170135498046875, 0.045684814453125, 0.0023345947265625, 0.0014057159423828125, 0.0029754638671875, 0.003345489501953125, 0.58740234375, 0.002994537353515625, 0.0028934478759765625, 0.09368896484375, 0.90576171875, 0.00032067298889160156, 0.0005817413330078125, 0.03045654296875, 0.001644134521484375, 0.07421875, 0.00159454345703125, 0.004718780517578125, 0.0008726119995117188, 0.0009326934814453125, 0.0008497238159179688, 5.14984130859375e-05, 0.00017964839935302734, 0.0150299072265625, 0.469970703125, 0.34326171875, 1.708984375, 9.012222290039062e-05, 0.04510498046875, 0.060638427734375, 0.00020492076873779297, 0.024261474609375, 5.328655242919922e-05, 0.018035888671875, 0.28515625, 0.73974609375, 0.7197265625, 0.0836181640625, 0.198974609375, 0.059967041015625, 0.0012407302856445312, 0.134765625, 0.00067138671875, 2.3365020751953125e-05, 0.1051025390625, 0.0157470703125, 0.1904296875, 0.0020351409912109375], "tokens": [334, 945, 4004, 1596, 15483, 19279, 652, 8891, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 3484, 26, 96, 32, 10272, 346, 610, 6512, 32, 5038, 293, 446, 4004, 2182, 13369, 280, 310, 32, 25657, 2931, 473, 284, 415, 308, 29203, 32, 10272, 346, 863, 6512, 32, 2788, 15262, 27, 301]}
{"line_number": 1194, "line_type": "original", "code": "", "entropy": 3.427734375, "is_bug_line": false, "sus_score": 0.6086399555206299, "per_token_entropy": [3.427734375], "tokens": [203]}
{"line_number": 1194, "line_type": "generated", "code": "\n    if (functionNameString.equals(\"indexOf\")) {\n      return tryFoldIndexOf(subtree);\n    } else if (functionNameString.equals(\"substring\")) {\n      return tryFoldSubstring(subtree);\n    } else if (functionNameString", "entropy": 0.08074951171875, "is_bug_line": false, "sus_score": 0.6086399555206299, "per_token_entropy": [0.27490234375, 0.431396484375, 0.26904296875, 0.1396484375, 0.0004096031188964844, 0.015411376953125, 0.0645751953125, 0.035247802734375, 0.10968017578125, 0.2313232421875, 0.2392578125, 0.00833892822265625, 0.05181884765625, 0.2340087890625, 0.12939453125, 0.02294921875, 0.28173828125, 0.07049560546875, 0.1253662109375, 1.2874603271484375e-05, 0.188720703125, 0.09332275390625, 0.0005292892456054688, 0.43359375, 0.006099700927734375, 0.00907135009765625, 0.017120361328125, 2.586841583251953e-05, 0.00154876708984375, 0.0007014274597167969, 0.003993988037109375, 0.00109100341796875, 0.3798828125, 0.119140625, 0.0009593963623046875, 0.00772857666015625, 0.01995849609375, 0.002803802490234375, 0.0018634796142578125, 0.058563232421875, 0.01561737060546875, 0.002956390380859375, 0.0005164146423339844, 0.01546478271484375, 0.00885772705078125, 0.0001251697540283203, 0.048919677734375, 0.0052947998046875, 0.00791168212890625, 0.00909423828125, 0.0017347335815429688, 0.0015316009521484375], "tokens": [284, 415, 308, 1126, 558, 652, 32, 3574, 440, 7142, 2131, 301, 397, 442, 1596, 15483, 15836, 26, 1113, 3242, 293, 284, 320, 813, 415, 308, 1126, 558, 652, 32, 3574, 440, 8723, 2131, 301, 397, 442, 1596, 15483, 20700, 26, 1113, 3242, 293, 284, 320, 813, 415, 308, 1126, 558, 652]}
{"line_number": 1172, "line_type": "original", "code": "      return n;", "entropy": 2.736328125, "is_bug_line": false, "sus_score": 0.5968350768089294, "per_token_entropy": [5.953125, 0.86474609375, 4.11328125, 0.01233673095703125], "tokens": [647, 442, 310, 45]}
{"line_number": 1172, "line_type": "generated", "code": "\n    return subtree;\n  }\n\n  /**\n   * Try to fold a call to Array.join()\n   */\n  private Node tryFoldArrayJoin(Node subtree) {\n    Preconditions.checkArgument(subtree.getType() == Token.CALL);\n\n    Node", "entropy": 0.2724609375, "is_bug_line": false, "sus_score": 0.5968350768089294, "per_token_entropy": [0.6572265625, 0.63623046875, 0.06695556640625, 0.0023860931396484375, 0.01236724853515625, 0.00048279762268066406, 0.0914306640625, 0.28564453125, 0.265625, 0.0004436969757080078, 0.309814453125, 0.013031005859375, 1.3876953125, 2.783203125, 0.748046875, 0.14453125, 1.1513671875, 0.03253173828125, 0.2783203125, 0.98486328125, 0.4931640625, 0.60400390625, 0.0179595947265625, 0.016754150390625, 0.007534027099609375, 0.00021386146545410156, 6.306171417236328e-05, 0.00023734569549560547, 6.0558319091796875e-05, 0.002216339111328125, 0.0015850067138671875, 0.322998046875, 0.0016202926635742188, 0.00087738037109375, 0.352294921875, 1.3466796875, 0.00031876564025878906, 0.0006175041198730469, 0.034942626953125, 0.002521514892578125, 0.14501953125, 4.0531158447265625e-06, 0.005908966064453125, 0.00604248046875, 0.0006318092346191406, 0.002208709716796875, 0.0007839202880859375, 5.900859832763672e-05, 0.000736236572265625, 0.0250244140625, 0.58740234375, 0.3388671875], "tokens": [284, 442, 37255, 45, 334, 320, 719, 1022, 664, 319, 8959, 372, 11426, 312, 1476, 372, 2629, 32, 2524, 346, 664, 569, 334, 945, 4004, 1596, 15483, 1261, 6249, 26, 1212, 37255, 27, 301, 284, 40596, 32, 1553, 3484, 26, 1113, 3242, 32, 10272, 346, 610, 6512, 32, 5038, 293, 446, 4004]}
{"line_number": 218, "line_type": "original", "code": "    for (Node c = n.getFirstChild(); c != null; c = next) {", "entropy": 0.5244140625, "is_bug_line": false, "sus_score": 0.5892795920372009, "per_token_entropy": [4.16796875, 4.14453125, 0.04925537109375, 0.138427734375, 0.1387939453125, 0.194580078125, 0.155517578125, 0.0255889892578125, 0.265869140625, 0.0008034706115722656, 0.096435546875, 0.049713134765625, 0.005893707275390625, 0.011993408203125, 0.0509033203125, 0.048248291015625, 0.0021991729736328125, 0.84033203125, 0.01507568359375, 0.0877685546875], "tokens": [264, 436, 308, 1212, 281, 280, 310, 32, 25657, 2931, 473, 281, 863, 744, 45, 281, 280, 2354, 27, 301]}
{"line_number": 218, "line_type": "generated", "code": "\n  private boolean mayHaveSideEffects(Node n) {\n    switch (n.getType()) {\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n        return mayHaveSideEffects(n.getLastChild());\n      case", "entropy": 0.1514892578125, "is_bug_line": false, "sus_score": 0.5892795920372009, "per_token_entropy": [0.6748046875, 0.76806640625, 1.10546875, 0.398193359375, 0.0220947265625, 0.00318145751953125, 0.0016126632690429688, 0.01454925537109375, 0.002201080322265625, 0.035919189453125, 0.004367828369140625, 0.003448486328125, 0.0281829833984375, 1.1337890625, 0.01282501220703125, 0.002544403076171875, 8.26120376586914e-05, 0.0006351470947265625, 6.306171417236328e-05, 0.002109527587890625, 0.032379150390625, 0.0318603515625, 0.0014047622680664062, 2.6702880859375e-05, 1.5380859375, 0.0007371902465820312, 0.04766845703125, 0.00036454200744628906, 3.0517578125e-05, 5.793571472167969e-05, 0.1817626953125, 9.763240814208984e-05, 0.198974609375, 0.002044677734375, 0.00012683868408203125, 1.3828277587890625e-05, 0.63525390625, 6.29425048828125e-05, 0.1627197265625, 0.1669921875, 0.1241455078125, 0.0004940032958984375, 0.0008187294006347656, 0.0009174346923828125, 0.00738525390625, 0.01198577880859375, 0.0002789497375488281, 0.1522216796875, 0.00019037723541259766, 0.1947021484375, 0.15576171875, 0.01336669921875], "tokens": [334, 945, 1905, 1631, 9037, 7427, 20126, 26, 1212, 310, 27, 301, 284, 3578, 308, 96, 32, 10272, 1157, 301, 397, 1135, 6512, 32, 3349, 44, 397, 1135, 6512, 32, 758, 44, 397, 1135, 6512, 32, 47451, 44, 291, 442, 1631, 9037, 7427, 20126, 26, 96, 32, 20197, 2931, 1035, 397, 1135]}
{"line_number": 975, "line_type": "original", "code": "            break;", "entropy": 4.15234375, "is_bug_line": false, "sus_score": 0.5814464688301086, "per_token_entropy": [9.515625, 2.9296875, 0.006732940673828125], "tokens": [1468, 1626, 45]}
{"line_number": 975, "line_type": "generated", "code": "\n\n      // We can only handle == and!= here.\n      // GT, LT, GE, LE depend on the type of \"this\" and how it will\n      // be converted to number.  The results are different depending on\n      // whether it is a", "entropy": 0.08270263671875, "is_bug_line": false, "sus_score": 0.5814464688301086, "per_token_entropy": [0.6943359375, 1.1103515625, 1.4228515625, 0.19140625, 0.143798828125, 0.0257415771484375, 0.066650390625, 0.0217132568359375, 0.0018243789672851562, 0.013671875, 0.078369140625, 0.0645751953125, 0.0479736328125, 0.08172607421875, 0.002132415771484375, 0.0008540153503417969, 0.0003762245178222656, 0.0009684562683105469, 0.0009427070617675781, 0.0010852813720703125, 0.00616455078125, 0.00021576881408691406, 0.009796142578125, 0.0362548828125, 0.00295257568359375, 0.05413818359375, 0.08648681640625, 0.0012273788452148438, 0.008697509765625, 0.001712799072265625, 0.0018148422241210938, 0.0028667449951171875, 0.04400634765625, 0.0003407001495361328, 0.0011157989501953125, 0.0004341602325439453, 0.00014793872833251953, 0.00797271728515625, 0.0027027130126953125, 0.027435302734375, 0.01001739501953125, 0.000682830810546875, 0.0008378028869628906, 0.0003986358642578125, 0.00035381317138671875, 0.0026531219482421875, 0.00644683837890625, 0.0003743171691894531, 0.002338409423828125, 0.004215240478515625, 0.00030732154846191406, 0.002593994140625], "tokens": [1687, 434, 2688, 883, 1755, 2887, 610, 461, 863, 2442, 32, 397, 434, 27450, 30, 33635, 30, 37961, 30, 11801, 3526, 544, 322, 827, 432, 313, 578, 20, 461, 2624, 561, 1098, 397, 434, 526, 12785, 372, 1451, 32, 225, 886, 3276, 884, 3449, 14714, 544, 397, 434, 4946, 561, 438, 312]}
{"line_number": 916, "line_type": "original", "code": "        } else {", "entropy": 4.078125, "is_bug_line": false, "sus_score": 0.5735621452331543, "per_token_entropy": [6.44921875, 8.65625, 0.6328125, 0.57568359375], "tokens": [351, 320, 813, 301]}
{"line_number": 916, "line_type": "generated", "code": "\n        result = compareToUndefined(right, op);\n        break;\n\n      case Token.STRING:\n        if (!rightLiteral) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:", "entropy": 0.1402587890625, "is_bug_line": false, "sus_score": 0.5735621452331543, "per_token_entropy": [0.041259765625, 0.2210693359375, 0.0005283355712890625, 0.962890625, 0.62109375, 0.10260009765625, 0.002216339111328125, 0.406494140625, 0.01641845703125, 0.0130157470703125, 0.01117706298828125, 0.0400390625, 0.0157318115234375, 0.0028057098388671875, 0.1173095703125, 0.03485107421875, 0.00016391277313232422, 8.344650268554688e-06, 0.82373046875, 0.037567138671875, 0.2418212890625, 0.32568359375, 0.796875, 0.09954833984375, 0.00482177734375, 0.12213134765625, 0.0022449493408203125, 0.01384735107421875, 0.04779052734375, 0.00330352783203125, 0.0001010894775390625, 0.203369140625, 0.0011358261108398438, 0.383056640625, 1.236328125, 0.01336669921875, 0.1488037109375, 0.00018215179443359375, 0.0007777214050292969, 0.018798828125, 0.01085662841796875, 0.0007719993591308594, 1.4901161193847656e-05, 0.118408203125, 4.76837158203125e-07, 5.412101745605469e-05, 0.023101806640625, 7.140636444091797e-05, 1.811981201171875e-05, 1.895427703857422e-05, 0.00330352783203125, 5.6743621826171875e-05], "tokens": [291, 1056, 280, 8868, 705, 14339, 26, 990, 30, 3089, 293, 291, 1626, 45, 1687, 1135, 6512, 32, 5203, 44, 291, 415, 1429, 990, 8208, 27, 301, 616, 442, 310, 45, 291, 320, 291, 3578, 308, 520, 27, 301, 616, 1135, 6512, 32, 27951, 67, 44, 616, 1135, 6512, 32, 2697, 44]}
{"line_number": 651, "line_type": "original", "code": "    Node result = performArithmeticOp(n.getType(), left, right);", "entropy": 2.03125, "is_bug_line": false, "sus_score": 0.573114812374115, "per_token_entropy": [4.77734375, 9.7734375, 0.83349609375, 0.244384765625, 7.31640625, 1.6923828125, 0.220947265625, 0.1842041015625, 4.28125, 1.923828125, 0.2020263671875, 0.032470703125, 0.88671875, 0.01030731201171875, 0.0770263671875, 0.038543701171875], "tokens": [264, 4004, 1056, 280, 4436, 37375, 3397, 26, 96, 32, 10272, 1026, 2841, 30, 2091, 293]}
{"line_number": 651, "line_type": "generated", "code": "\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.DIV:\n       ", "entropy": 0.031829833984375, "is_bug_line": false, "sus_score": 0.573114812374115, "per_token_entropy": [0.2454833984375, 0.6552734375, 0.01502227783203125, 0.1954345703125, 0.0018682479858398438, 0.006595611572265625, 0.0012540817260742188, 0.0311279296875, 0.06390380859375, 0.0196533203125, 0.0011997222900390625, 0.022430419921875, 0.001800537109375, 0.00014793872833251953, 1.6689300537109375e-06, 0.034881591796875, 0.0002853870391845703, 0.051361083984375, 0.00830078125, 0.00018155574798583984, 0.002960205078125, 1.4066696166992188e-05, 0.0007495880126953125, 0.00023877620697021484, 0.000286102294921875, 0.0010824203491210938, 0.0007181167602539062, 0.00012552738189697266, 0.0033283233642578125, 0.001865386962890625, 6.580352783203125e-05, 2.5033950805664062e-06, 0.08380126953125, 3.349781036376953e-05, 0.041290283203125, 0.009979248046875, 0.00020897388458251953, 0.0025005340576171875, 1.8596649169921875e-05, 0.001651763916015625, 2.9325485229492188e-05, 0.0003573894500732422, 0.0015192031860351562, 0.0027217864990234375, 3.8743019104003906e-05, 0.006076812744140625, 0.0044708251953125, 6.651878356933594e-05, 2.0265579223632812e-06, 0.04541015625, 0.00012922286987304688, 0.08709716796875], "tokens": [291, 1056, 280, 456, 695, 474, 42445, 45, 291, 1626, 45, 397, 1135, 6512, 32, 7100, 44, 291, 1056, 280, 456, 695, 429, 42445, 45, 291, 1626, 45, 397, 1135, 6512, 32, 12769, 44, 291, 1056, 280, 456, 695, 319, 42445, 45, 291, 1626, 45, 397, 1135, 6512, 32, 13888, 44, 291]}
{"line_number": 811, "line_type": "original", "code": "      Node result = tryFoldArithmeticOp(node, left, right);", "entropy": 1.88671875, "is_bug_line": false, "sus_score": 0.5720539093017578, "per_token_entropy": [3.333984375, 13.2734375, 1.5361328125, 0.346923828125, 3.00390625, 0.048553466796875, 1.90625, 0.2388916015625, 0.06500244140625, 3.529296875, 0.1900634765625, 0.62255859375, 0.040191650390625, 0.063720703125, 0.105712890625], "tokens": [647, 4004, 1056, 280, 1596, 15483, 37375, 3397, 26, 1251, 30, 2841, 30, 2091, 293]}
{"line_number": 811, "line_type": "generated", "code": "\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          result = (long) lvalInt >>> rvalInt;\n          break;\n        default:\n          throw new IllegalStateException();\n     ", "entropy": 0.1253662109375, "is_bug_line": false, "sus_score": 0.5720539093017578, "per_token_entropy": [0.30517578125, 1.1162109375, 0.0009775161743164062, 1.0728836059570312e-05, 0.0222320556640625, 0.00013196468353271484, 0.0022449493408203125, 0.024139404296875, 0.0211181640625, 0.0002040863037109375, 0.0176239013671875, 3.2186508178710938e-06, 0.004444122314453125, 0.124755859375, 9.238719940185547e-05, 0.00030541419982910156, 0.0004649162292480469, 0.01082611083984375, 0.006450653076171875, 0.000308990478515625, 0.3779296875, 0.90087890625, 0.00010156631469726562, 4.887580871582031e-06, 0.08843994140625, 2.9921531677246094e-05, 7.593631744384766e-05, 0.0181121826171875, 0.1240234375, 0.0001628398895263672, 0.5068359375, 0.73828125, 0.01506805419921875, 0.10986328125, 2.86102294921875e-06, 0.156005859375, 0.0215301513671875, 0.001842498779296875, 0.0010814666748046875, 0.00042176246643066406, 0.0279388427734375, 0.007083892822265625, 0.00020837783813476562, 0.07952880859375, 0.00673675537109375, 0.0015811920166015625, 0.0115966796875, 0.441650390625, 0.00510406494140625, 0.2449951171875, 0.9560546875, 0.0174560546875], "tokens": [291, 1135, 6512, 32, 68, 2514, 44, 616, 1056, 280, 456, 695, 1428, 3776, 42445, 1428, 45, 616, 1626, 45, 291, 1135, 6512, 32, 1263, 2514, 44, 616, 1056, 280, 308, 3222, 27, 456, 695, 1428, 8217, 42445, 1428, 45, 616, 1626, 45, 291, 1244, 44, 616, 1422, 537, 21665, 473, 397]}
{"line_number": 467, "line_type": "original", "code": "    } else if (NodeUtil.isCommutative(right.getType()) &&", "entropy": 1.24609375, "is_bug_line": false, "sus_score": 0.5715941786766052, "per_token_entropy": [1.6220703125, 3.400390625, 1.3701171875, 0.464111328125, 0.0867919921875, 1.9248046875, 0.004428863525390625, 0.0001277923583984375, 0.122802734375, 6.984375, 0.0003561973571777344, 0.0002562999725341797, 2.220703125, 0.54443359375, 1.28515625, 0.0153045654296875, 0.95458984375, 1.4169921875], "tokens": [264, 320, 813, 415, 308, 1212, 1733, 32, 297, 1233, 2278, 1353, 26, 990, 32, 10272, 1157, 962]}
{"line_number": 467, "line_type": "generated", "code": "    if (newType == Token.ASSIGN_ADD\n        &&!newNode.getFirstChild().isAssign()\n        && newNode.getFirstChild().isName()\n        && newNode.getLastChild().isNumber()) {\n      // try to fold constant addition\n      Node", "entropy": 0.7080078125, "is_bug_line": false, "sus_score": 0.5715941786766052, "per_token_entropy": [1.625, 1.587890625, 0.1966552734375, 0.98291015625, 0.368408203125, 0.2203369140625, 0.048309326171875, 0.0010614395141601562, 0.00942230224609375, 0.307373046875, 0.1346435546875, 1.376953125, 0.50537109375, 2.72265625, 2.337890625, 0.93212890625, 0.005107879638671875, 1.55859375, 0.00182342529296875, 0.0013341903686523438, 0.642578125, 0.96044921875, 0.4609375, 0.08721923828125, 0.013275146484375, 1.0908203125, 0.00047326087951660156, 0.44580078125, 7.140636444091797e-05, 0.01354217529296875, 0.7783203125, 1.029296875, 0.5576171875, 0.024322509765625, 0.004878997802734375, 0.226806640625, 3.0040740966796875e-05, 0.46630859375, 0.0003209114074707031, 0.00347900390625, 1.0458984375, 0.38330078125, 0.0031147003173828125, 0.11572265625, 0.994140625, 4.27734375, 0.442626953125, 1.078125, 1.671875, 1.7724609375, 1.240234375, 2.056640625], "tokens": [264, 415, 308, 890, 620, 610, 6512, 32, 25620, 81, 5363, 291, 962, 653, 890, 1212, 32, 25657, 2931, 922, 297, 9079, 346, 291, 962, 33202, 32, 25657, 2931, 922, 297, 558, 346, 291, 962, 33202, 32, 20197, 2931, 922, 42128, 1157, 301, 397, 434, 1596, 372, 11426, 8082, 10879, 397, 4004]}
{"line_number": 1193, "line_type": "original", "code": "      Node newString = Node.newString(stringValue);", "entropy": 1.6875, "is_bug_line": false, "sus_score": 0.570154070854187, "per_token_entropy": [6.71484375, 3.533203125, 2.171875, 1.2001953125, 0.372802734375, 2.609375, 1.6923828125, 0.00566864013671875, 0.0014276504516601562, 0.05792236328125, 1.8427734375, 0.049713134765625], "tokens": [647, 4004, 537, 652, 280, 4004, 32, 890, 652, 26, 35930, 293]}
{"line_number": 1193, "line_type": "generated", "code": "\n\n    return newString;\n  }\n\n  /**\n   * Try to evaluate known Array methods\n   *   .join()\n   */\n  private Node tryFoldArrayJoin(Node subtree) {\n    Preconditions.checkArgument(subtree.getType() == Token.CALL", "entropy": 0.1844482421875, "is_bug_line": false, "sus_score": 0.570154070854187, "per_token_entropy": [0.45458984375, 1.0634765625, 1.1875, 0.42236328125, 0.043731689453125, 0.032623291015625, 0.0010528564453125, 0.143798828125, 0.2822265625, 0.265869140625, 0.000896453857421875, 0.3828125, 0.019317626953125, 1.0439453125, 1.95703125, 0.56640625, 0.459716796875, 0.1669921875, 0.046661376953125, 0.27001953125, 0.0171966552734375, 0.0445556640625, 0.163818359375, 0.026336669921875, 0.033905029296875, 0.00839996337890625, 0.01284027099609375, 0.004119873046875, 0.00023603439331054688, 0.0009322166442871094, 0.0002732276916503906, 0.00014412403106689453, 0.0009326934814453125, 0.0015726089477539062, 0.1055908203125, 0.0019168853759765625, 0.00086212158203125, 0.0972900390625, 0.2132568359375, 8.702278137207031e-06, 0.00220489501953125, 0.00173187255859375, 0.0027294158935546875, 0.0214996337890625, 0.00023090839385986328, 0.006183624267578125, 0.003360748291015625, 0.00016510486602783203, 0.0008025169372558594, 0.0008192062377929688, 1.049041748046875e-05, 0.008636474609375], "tokens": [446, 442, 537, 652, 45, 334, 320, 719, 1022, 664, 319, 8959, 372, 13396, 8967, 2629, 4438, 664, 319, 264, 638, 2524, 346, 664, 569, 334, 945, 4004, 1596, 15483, 1261, 6249, 26, 1212, 37255, 27, 301, 284, 40596, 32, 1553, 3484, 26, 1113, 3242, 32, 10272, 346, 610, 6512, 32, 5038]}
{"line_number": 844, "line_type": "original", "code": "      // Convert the numbers to ints", "entropy": 3.935546875, "is_bug_line": false, "sus_score": 0.5692858695983887, "per_token_entropy": [4.6875, 3.25390625, 7.61328125, 2.494140625, 6.14453125, 0.11163330078125, 3.240234375], "tokens": [647, 434, 8125, 322, 7515, 372, 34713]}
{"line_number": 844, "line_type": "generated", "code": "\n      return n;\n    }\n\n    // Try to fold constant comparisons.\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n\n    boolean isLvalNan = Double.isNaN(lval);\n    boolean isRvalNan =", "entropy": 0.47705078125, "is_bug_line": false, "sus_score": 0.5692858695983887, "per_token_entropy": [0.12237548828125, 0.67919921875, 0.02227783203125, 0.0002593994140625, 0.01491546630859375, 0.00018465518951416016, 0.11285400390625, 1.71875, 2.541015625, 1.0029296875, 1.0908203125, 2.669921875, 0.9501953125, 1.1787109375, 0.267822265625, 0.97705078125, 0.428955078125, 0.10723876953125, 0.09576416015625, 0.034576416015625, 0.00023543834686279297, 0.00027942657470703125, 0.00372314453125, 0.004215240478515625, 0.005336761474609375, 0.0004436969757080078, 0.0002758502960205078, 0.000888824462890625, 1.7881393432617188e-05, 0.00011217594146728516, 8.225440979003906e-05, 0.56982421875, 1.9287109375, 2.0078125, 2.638671875, 1.404296875, 2.009765625, 0.07550048828125, 0.07965087890625, 0.0004725456237792969, 0.005710601806640625, 8.738040924072266e-05, 0.0014896392822265625, 4.76837158203125e-07, 0.0084381103515625, 0.005458831787109375, 0.0037326812744140625, 0.00020968914031982422, 0.033355712890625, 0.00212860107421875, 0.0003044605255126953, 7.593631744384766e-05], "tokens": [397, 442, 310, 45, 284, 320, 446, 434, 8959, 372, 11426, 8082, 43399, 32, 284, 2064, 456, 695, 280, 2841, 32, 37792, 473, 284, 2064, 42445, 280, 2091, 32, 37792, 473, 446, 1905, 438, 62, 695, 23490, 280, 6934, 32, 26821, 26, 94, 695, 293, 284, 1905, 438, 68, 695, 23490, 280]}
{"line_number": 973, "line_type": "original", "code": "          case Token.NE:", "entropy": 2.287109375, "is_bug_line": false, "sus_score": 0.5681339502334595, "per_token_entropy": [5.82421875, 3.916015625, 0.016937255859375, 0.0010805130004882812, 3.958984375, 0.01285552978515625], "tokens": [2033, 1135, 6512, 32, 3567, 44]}
{"line_number": 973, "line_type": "generated", "code": "\n        }\n        break;\n\n      case Token.NULL:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.NULL!= right.getType()) {\n          return n;  //", "entropy": 0.06964111328125, "is_bug_line": false, "sus_score": 0.5681339502334595, "per_token_entropy": [0.09039306640625, 0.00217437744140625, 0.037322998046875, 0.004505157470703125, 0.0009212493896484375, 0.11566162109375, 0.38671875, 0.0006442070007324219, 0.00044345855712890625, 0.7158203125, 0.0006117820739746094, 0.08056640625, 0.461669921875, 0.045745849609375, 0.18798828125, 0.0021991729736328125, 0.0192108154296875, 0.0006575584411621094, 0.01806640625, 0.053741455078125, 0.00012195110321044922, 0.041717529296875, 0.0006852149963378906, 0.00021708011627197266, 0.0002758502960205078, 0.005031585693359375, 5.888938903808594e-05, 0.0026683807373046875, 0.0021457672119140625, 0.025848388671875, 0.003345489501953125, 0.0002346038818359375, 0.00417327880859375, 0.00017714500427246094, 0.0204925537109375, 0.56982421875, 0.01338958740234375, 0.36474609375, 8.83340835571289e-05, 0.011566162109375, 0.06414794921875, 0.0007357597351074219, 0.00013184547424316406, 3.063678741455078e-05, 0.0214385986328125, 0.001705169677734375, 0.007602691650390625, 0.0384521484375, 0.03802490234375, 0.00031638145446777344, 0.1549072265625, 0.0012788772583007812], "tokens": [291, 320, 291, 1626, 45, 1687, 1135, 6512, 32, 3293, 44, 291, 415, 308, 6376, 4046, 27, 301, 616, 1056, 280, 8868, 705, 14339, 26, 1873, 30, 3089, 293, 616, 1626, 45, 291, 320, 291, 415, 308, 1763, 32, 3293, 863, 2091, 32, 10272, 1157, 301, 616, 442, 310, 45, 225, 434]}
{"line_number": 1312, "line_type": "original", "code": "      if ((secondArg.getNext() != null) ||", "entropy": 2.451171875, "is_bug_line": false, "sus_score": 0.5669059157371521, "per_token_entropy": [5.0703125, 2.095703125, 3.587890625, 10.8203125, 0.7265625, 0.74072265625, 4.8359375, 0.0229034423828125, 0.40380859375, 0.00238037109375, 0.165771484375, 0.9384765625], "tokens": [647, 415, 1833, 3090, 1765, 32, 23017, 346, 863, 744, 27, 1276]}
{"line_number": 1312, "line_type": "generated", "code": "\n          sb = new StringBuilder();\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n        foldedSize += NodeUtil.getStringValue(elem).length();\n      } else {\n        if (sb!= null) {\n          arrayFol", "entropy": 0.130126953125, "is_bug_line": false, "sus_score": 0.5669059157371521, "per_token_entropy": [0.363037109375, 0.5068359375, 0.00104522705078125, 0.019439697265625, 0.001064300537109375, 0.2288818359375, 0.36279296875, 0.004276275634765625, 0.182861328125, 0.312744140625, 0.00015163421630859375, 0.0002422332763671875, 0.004955291748046875, 0.1580810546875, 0.0082855224609375, 0.0004076957702636719, 0.204345703125, 0.00170135498046875, 0.002780914306640625, 0.00203704833984375, 0.01457977294921875, 0.58056640625, 0.54736328125, 1.1920928955078125e-07, 4.601478576660156e-05, 0.493408203125, 0.65966796875, 0.00038051605224609375, 0.0001455545425415039, 0.0240631103515625, 0.2413330078125, 0.020477294921875, 0.001220703125, 0.0014781951904296875, 0.0023937225341796875, 0.00461578369140625, 0.34814453125, 0.00112152099609375, 0.0158233642578125, 0.4296875, 0.05010986328125, 0.14111328125, 0.004058837890625, 0.048675537109375, 0.0109710693359375, 0.00010192394256591797, 0.0217437744140625, 0.0004165172576904297, 0.0733642578125, 0.6650390625, 0.00017535686492919922, 1.1920928955078125e-07], "tokens": [616, 6115, 280, 537, 9706, 473, 291, 320, 291, 6115, 32, 1689, 26, 1212, 1733, 32, 7069, 882, 26, 7613, 876, 291, 14801, 981, 1250, 1454, 4004, 1733, 32, 7069, 882, 26, 7613, 547, 1322, 473, 397, 320, 813, 301, 291, 415, 308, 5682, 863, 744, 27, 301, 616, 1417, 56, 362]}
{"line_number": 654, "line_type": "original", "code": "      n.getParent().replaceChild(n, result);", "entropy": 1.5634765625, "is_bug_line": false, "sus_score": 0.5663122534751892, "per_token_entropy": [5.05078125, 8.3046875, 0.167236328125, 1.3828125, 0.0037441253662109375, 0.10400390625, 0.007488250732421875, 0.007122039794921875, 0.08209228515625, 0.002704620361328125, 3.388671875, 0.25732421875], "tokens": [647, 310, 32, 18789, 922, 3227, 2931, 26, 96, 30, 1056, 293]}
{"line_number": 654, "line_type": "generated", "code": "\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.DIV:\n        result = lval / rval;\n        break;\n      case Token.MOD:\n       ", "entropy": 0.03131103515625, "is_bug_line": false, "sus_score": 0.5663122534751892, "per_token_entropy": [0.189697265625, 0.087890625, 0.0006365776062011719, 0.032318115234375, 7.402896881103516e-05, 0.00714111328125, 0.0003542900085449219, 0.007053375244140625, 0.05072021484375, 0.0033016204833984375, 0.0005755424499511719, 0.01361846923828125, 0.0033588409423828125, 4.947185516357422e-05, 5.9723854064941406e-05, 0.10076904296875, 4.9591064453125e-05, 0.204833984375, 0.01678466796875, 0.00025272369384765625, 0.004848480224609375, 3.3736228942871094e-05, 0.0026092529296875, 6.663799285888672e-05, 0.0006647109985351562, 0.0034351348876953125, 0.0033168792724609375, 0.00012564659118652344, 0.00823211669921875, 0.005504608154296875, 5.710124969482422e-05, 2.0265579223632812e-06, 0.053863525390625, 0.0001590251922607422, 0.339599609375, 0.2734375, 0.00033164024353027344, 0.049346923828125, 0.00010585784912109375, 0.0035114288330078125, 0.0005383491516113281, 0.0006814002990722656, 0.0103607177734375, 0.0108489990234375, 0.00019109249114990234, 0.0163726806640625, 0.0301971435546875, 7.331371307373047e-05, 8.702278137207031e-06, 0.01023101806640625, 0.00038242340087890625, 0.080078125], "tokens": [291, 1056, 280, 456, 695, 429, 42445, 45, 291, 1626, 45, 397, 1135, 6512, 32, 12769, 44, 291, 1056, 280, 456, 695, 319, 42445, 45, 291, 1626, 45, 397, 1135, 6512, 32, 13888, 44, 291, 1056, 280, 456, 695, 517, 42445, 45, 291, 1626, 45, 397, 1135, 6512, 32, 6719, 44, 291]}
{"line_number": 849, "line_type": "original", "code": "      }", "entropy": 5.8515625, "is_bug_line": false, "sus_score": 0.5631534457206726, "per_token_entropy": [7.25390625, 4.453125], "tokens": [647, 320]}
{"line_number": 849, "line_type": "generated", "code": "\n\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n\n    switch (n.getType()) {\n      case Token.EQ:\n        return Node.newBoolean(lval == rval);\n      case Token.NE:\n        return Node", "entropy": 0.142333984375, "is_bug_line": false, "sus_score": 0.5631534457206726, "per_token_entropy": [0.646484375, 1.2880859375, 0.9423828125, 0.12060546875, 0.0694580078125, 0.09881591796875, 0.016265869140625, 0.001644134521484375, 0.005138397216796875, 0.01178741455078125, 0.0106201171875, 0.0005831718444824219, 0.0002796649932861328, 0.0007085800170898438, 3.647804260253906e-05, 0.00015997886657714844, 0.0003197193145751953, 0.433837890625, 0.82666015625, 0.018890380859375, 0.002788543701171875, 2.7179718017578125e-05, 6.0677528381347656e-05, 4.5299530029296875e-05, 0.0010700225830078125, 0.0635986328125, 0.0288848876953125, 0.0014801025390625, 1.6689300537109375e-05, 0.58984375, 0.004436492919921875, 0.1077880859375, 1.20703125, 0.39404296875, 0.02349853515625, 0.0015764236450195312, 0.0012969970703125, 0.01271820068359375, 0.0968017578125, 0.00011336803436279297, 0.0014505386352539062, 0.00016570091247558594, 0.00536346435546875, 0.11199951171875, 0.0012998580932617188, 0.00010323524475097656, 3.2186508178710938e-06, 0.2386474609375, 5.412101745605469e-05, 0.00493621826171875, 0.0078277587890625, 0.0008091926574707031], "tokens": [446, 2064, 456, 695, 280, 2841, 32, 37792, 473, 284, 2064, 42445, 280, 2091, 32, 37792, 473, 446, 3578, 308, 96, 32, 10272, 1157, 301, 397, 1135, 6512, 32, 2697, 44, 291, 442, 4004, 32, 890, 4709, 26, 94, 695, 610, 42445, 293, 397, 1135, 6512, 32, 3567, 44, 291, 442, 4004]}
{"line_number": 1877, "line_type": "original", "code": "", "entropy": 0.207763671875, "is_bug_line": false, "sus_score": 0.5608206987380981, "per_token_entropy": [0.207763671875], "tokens": [203]}
{"line_number": 1877, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5608206987380981, "per_token_entropy": [], "tokens": []}
{"line_number": 157, "line_type": "original", "code": "      case Token.SHNE:", "entropy": 2.60546875, "is_bug_line": false, "sus_score": 0.5607241988182068, "per_token_entropy": [5.26953125, 0.296630859375, 0.0002999305725097656, 0.0005145072937011719, 7.43359375, 5.22265625, 0.0048675537109375], "tokens": [647, 1135, 6512, 32, 2514, 3567, 44]}
{"line_number": 157, "line_type": "generated", "code": "\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.MOD:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n     ", "entropy": 0.180908203125, "is_bug_line": false, "sus_score": 0.5607241988182068, "per_token_entropy": [0.30029296875, 0.50439453125, 0.68408203125, 0.00420379638671875, 0.005001068115234375, 0.005702972412109375, 0.10546875, 0.476806640625, 0.000335693359375, 0.004970550537109375, 0.0265655517578125, 0.1358642578125, 4.756450653076172e-05, 0.2032470703125, 0.12054443359375, 0.00023090839385986328, 2.86102294921875e-05, 1.1298828125, 0.001087188720703125, 0.29345703125, 0.395751953125, 0.92724609375, 0.050140380859375, 0.01302337646484375, 0.012786865234375, 0.0302581787109375, 0.2274169921875, 0.002902984619140625, 0.03216552734375, 0.052032470703125, 0.92333984375, 0.0001920461654663086, 0.1492919921875, 0.09112548828125, 0.00020551681518554688, 5.710124969482422e-05, 0.257568359375, 0.0004062652587890625, 0.1270751953125, 0.43408203125, 0.849609375, 0.00799560546875, 0.032562255859375, 0.01026153564453125, 0.00412750244140625, 0.0209197998046875, 0.00012290477752685547, 0.01351165771484375, 0.03729248046875, 0.375732421875, 0.00011837482452392578, 0.322998046875], "tokens": [291, 1596, 39993, 1918, 26, 96, 32, 20197, 2931, 1035, 291, 1626, 45, 397, 1135, 6512, 32, 6719, 44, 291, 1596, 39993, 1918, 26, 96, 32, 20197, 2931, 1035, 291, 1626, 45, 397, 1135, 6512, 32, 13888, 44, 291, 1596, 39993, 1918, 26, 96, 32, 20197, 2931, 1035, 291, 1626, 45, 397]}
{"line_number": 1307, "line_type": "original", "code": "      return n;", "entropy": 2.201171875, "is_bug_line": false, "sus_score": 0.5606656670570374, "per_token_entropy": [4.71484375, 4.0, 0.0811767578125, 0.006404876708984375], "tokens": [647, 442, 310, 45]}
{"line_number": 1307, "line_type": "generated", "code": "\n    for (Node child : arrayNode.children()) {\n      if (child.getType() == Token.STRING) {\n        if (sb == null) {\n          sb = new StringBuilder(joinString);\n        }\n        sb.append(child.getString", "entropy": 0.1895751953125, "is_bug_line": false, "sus_score": 0.5606656670570374, "per_token_entropy": [0.58447265625, 0.53076171875, 0.0026721954345703125, 0.0149993896484375, 1.0166015625, 0.105224609375, 0.1217041015625, 0.001354217529296875, 0.006000518798828125, 0.061126708984375, 0.032562255859375, 0.01409912109375, 0.031097412109375, 0.439697265625, 0.1455078125, 1.3603515625, 0.283447265625, 0.207275390625, 0.00043511390686035156, 0.2626953125, 0.0009021759033203125, 1.6808509826660156e-05, 0.56982421875, 0.0762939453125, 0.00023365020751953125, 0.01514434814453125, 0.6025390625, 0.0133514404296875, 0.239990234375, 0.0206756591796875, 8.130073547363281e-05, 0.004558563232421875, 0.0012073516845703125, 0.0135498046875, 0.06781005859375, 0.00011181831359863281, 0.004985809326171875, 0.0006866455078125, 1.4580078125, 0.60302734375, 2.8133392333984375e-05, 0.1141357421875, 0.174072265625, 7.987022399902344e-05, 0.29443359375, 0.2359619140625, 0.00017964839935302734, 0.00061798095703125, 0.0014820098876953125, 0.1181640625, 0.0017309188842773438, 0.0032482147216796875], "tokens": [284, 436, 308, 1212, 2838, 499, 1417, 1212, 32, 4915, 1157, 301, 397, 415, 308, 2661, 32, 10272, 346, 610, 6512, 32, 5203, 27, 301, 291, 415, 308, 5682, 610, 744, 27, 301, 616, 6115, 280, 537, 9706, 26, 2524, 652, 293, 291, 320, 291, 6115, 32, 1689, 26, 2661, 32, 7069]}
{"line_number": 800, "line_type": "original", "code": "    if (NodeUtil.mayBeString(node, true)) {", "entropy": 1.8720703125, "is_bug_line": false, "sus_score": 0.5602300763130188, "per_token_entropy": [5.69921875, 1.177734375, 0.0723876953125, 2.3515625, 0.0025272369384765625, 2.014636993408203e-05, 4.15234375, 0.9228515625, 0.19921875, 0.006626129150390625, 4.25390625, 6.65625, 2.39453125, 0.177734375, 0.005035400390625], "tokens": [264, 415, 308, 1212, 1733, 32, 17302, 1467, 652, 26, 1251, 30, 861, 490, 301]}
{"line_number": 800, "line_type": "generated", "code": "\n      if (rval!= Math.floor(rval)) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      // Convert the numbers to ints\n      int rvalInt = (int) rval;", "entropy": 0.26123046875, "is_bug_line": false, "sus_score": 0.5602300763130188, "per_token_entropy": [0.58984375, 1.3056640625, 0.06494140625, 2.154296875, 3.933906555175781e-06, 0.1856689453125, 0.853515625, 0.00264739990234375, 0.04534912109375, 0.00048160552978515625, 0.0008778572082519531, 8.344650268554688e-07, 0.038299560546875, 0.0009908676147460938, 0.01177978515625, 0.062347412109375, 0.002166748046875, 0.02227783203125, 0.00019299983978271484, 7.522106170654297e-05, 4.172325134277344e-06, 0.0185699462890625, 0.0001480579376220703, 5.984306335449219e-05, 0.0008411407470703125, 1.7881393432617188e-06, 0.0010919570922851562, 0.0093841552734375, 0.0006184577941894531, 0.00897216796875, 0.0020923614501953125, 0.0020694732666015625, 0.0004775524139404297, 0.004070281982421875, 0.00039958953857421875, 0.61083984375, 1.4619140625, 3.62890625, 0.97607421875, 1.091796875, 0.1986083984375, 0.06695556640625, 0.1075439453125, 0.024749755859375, 0.00209808349609375, 0.001125335693359375, 0.0007805824279785156, 0.004245758056640625, 0.00012755393981933594, 6.54458999633789e-05, 0.007354736328125, 0.0013484954833984375], "tokens": [397, 415, 308, 100, 695, 863, 4175, 32, 9121, 26, 100, 695, 490, 301, 291, 1048, 26, 4002, 8750, 726, 81, 5670, 10382, 81, 13357, 3349, 30, 2091, 293, 291, 442, 310, 45, 397, 320, 1687, 434, 8125, 322, 7515, 372, 34713, 397, 629, 42445, 1428, 280, 308, 410, 27, 42445, 45]}
