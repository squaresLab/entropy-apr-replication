{"line_number": 1412, "line_type": "original", "code": "          }", "entropy": 6.44140625, "is_bug_line": false, "sus_score": 0.6052510142326355, "per_token_entropy": [9.5625, 3.3203125], "tokens": [2033, 320]}
{"line_number": 1412, "line_type": "generated", "code": "\n   * Determines whether a name is externally referenceable.\n   *\n   * @param scope The scope in which the name occurs\n   * @param name The name\n   * @return Whether the name is externally referenceable\n   */\n  private boolean isEx", "entropy": 0.17529296875, "is_bug_line": false, "sus_score": 0.6052510142326355, "per_token_entropy": [0.453125, 0.07855224609375, 1.03515625, 0.044036865234375, 0.51953125, 1.447265625, 0.446533203125, 0.4033203125, 0.0004839897155761719, 0.1385498046875, 0.0009851455688476562, 0.73876953125, 0.6005859375, 0.1346435546875, 0.1624755859375, 0.000957489013671875, 0.19921875, 0.026519775390625, 0.0953369140625, 0.153564453125, 0.0596923828125, 0.358154296875, 0.0008859634399414062, 0.39404296875, 0.0469970703125, 0.114013671875, 0.11328125, 0.0007390975952148438, 0.0002646446228027344, 0.005420684814453125, 0.030731201171875, 0.10772705078125, 0.09478759765625, 0.380615234375, 0.0958251953125, 0.003841400146484375, 0.004901885986328125, 0.062469482421875, 0.0758056640625, 0.01032257080078125, 0.077880859375, 0.070068359375, 0.00043892860412597656, 0.0179290771484375, 0.0005574226379394531, 0.1234130859375, 0.00934600830078125, 0.016143798828125, 0.0782470703125, 0.084228515625, 0.0006103515625, 0.0002130270004272461], "tokens": [664, 319, 34450, 4946, 312, 636, 438, 12098, 1247, 4121, 444, 32, 664, 319, 664, 319, 477, 753, 4576, 886, 4576, 328, 1510, 322, 636, 12984, 664, 319, 477, 753, 636, 886, 636, 664, 319, 477, 601, 14071, 322, 636, 438, 12098, 1247, 4121, 444, 664, 569, 334, 945, 1905, 438, 571]}
{"line_number": 1003, "line_type": "original", "code": "", "entropy": 2.052734375, "is_bug_line": false, "sus_score": 0.5374560952186584, "per_token_entropy": [2.052734375], "tokens": [203]}
{"line_number": 1003, "line_type": "generated", "code": "\n  private class ProcessExternals extends AbstractShallowCallback {\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction()) {\n        // Assume that any function in an externs file can modify", "entropy": 0.472412109375, "is_bug_line": false, "sus_score": 0.5374560952186584, "per_token_entropy": [0.71435546875, 1.0283203125, 1.103515625, 0.360595703125, 0.003475189208984375, 0.00024020671844482422, 0.83203125, 0.298828125, 0.382568359375, 0.0709228515625, 0.2724609375, 0.08367919921875, 0.2568359375, 0.065185546875, 0.00010263919830322266, 0.005901336669921875, 0.0307464599609375, 0.00704193115234375, 0.0092926025390625, 0.0002562999725341797, 0.00040030479431152344, 0.011505126953125, 0.01277923583984375, 2.8014183044433594e-05, 0.00021696090698242188, 0.0209503173828125, 0.0035076141357421875, 0.00354766845703125, 0.00356292724609375, 0.00010693073272705078, 0.0010042190551757812, 0.004512786865234375, 0.456787109375, 0.2401123046875, 0.370361328125, 0.0036945343017578125, 1.322265625, 0.12548828125, 0.0007567405700683594, 0.00301361083984375, 1.888671875, 3.27734375, 0.4794921875, 2.2734375, 0.41357421875, 2.25, 0.60986328125, 0.096923828125, 0.11151123046875, 0.46484375, 2.248046875, 2.34375], "tokens": [334, 945, 443, 6833, 8384, 101, 2026, 7400, 1189, 4568, 3296, 301, 284, 477, 1788, 284, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 415, 308, 96, 32, 39504, 1157, 301, 291, 434, 41628, 688, 1346, 667, 328, 600, 12098, 101, 803, 883, 5351]}
{"line_number": 698, "line_type": "original", "code": "        parentName = parentName.substring(0, parentName.lastIndexOf('.'));", "entropy": 1.328125, "is_bug_line": false, "sus_score": 0.5346515774726868, "per_token_entropy": [4.171875, 6.21875, 6.328125, 0.284912109375, 2.0234375, 1.47265625, 0.5595703125, 0.45166015625, 0.00733184814453125, 0.07476806640625, 0.004558563232421875, 0.5634765625, 0.0108489990234375, 0.000762939453125, 0.335205078125, 0.05096435546875, 0.0194244384765625], "tokens": [351, 2935, 558, 280, 2935, 558, 32, 8723, 26, 34, 30, 2935, 558, 32, 27296, 3949, 4646]}
{"line_number": 698, "line_type": "generated", "code": "\n    }\n\n    @Override\n    public void process(Node externs, Node root) {\n      NodeTraversal.traverse(compiler, root, this);\n\n      // If there are any non-local references, then we need to keep all\n      // the nodes in", "entropy": 0.56201171875, "is_bug_line": false, "sus_score": 0.5346515774726868, "per_token_entropy": [0.72119140625, 0.005077362060546875, 0.048919677734375, 0.77978515625, 0.0008821487426757812, 0.007175445556640625, 0.005954742431640625, 0.287109375, 1.3828125, 0.025360107421875, 0.0070953369140625, 0.1798095703125, 0.05865478515625, 0.0020084381103515625, 0.00152587890625, 0.0241851806640625, 0.0005521774291992188, 0.0029010772705078125, 0.081298828125, 1.443359375, 0.33154296875, 0.035186767578125, 0.000823974609375, 0.051971435546875, 0.5478515625, 0.00013136863708496094, 0.0821533203125, 0.0003917217254638672, 0.32666015625, 0.004856109619140625, 0.9404296875, 0.95654296875, 3.923828125, 1.9755859375, 0.427490234375, 0.7900390625, 2.845703125, 0.040191650390625, 0.1162109375, 0.66552734375, 0.46484375, 0.60791015625, 0.87939453125, 0.92529296875, 0.0611572265625, 0.97216796875, 1.44921875, 0.4599609375, 0.0103607177734375, 1.2470703125, 1.3203125, 1.697265625], "tokens": [284, 320, 446, 477, 1788, 284, 562, 763, 2164, 26, 1212, 12098, 101, 30, 4004, 3051, 27, 301, 397, 4004, 35699, 32, 33261, 26, 10199, 30, 3051, 30, 458, 293, 1687, 434, 1670, 2017, 884, 1346, 2979, 31, 1696, 10647, 30, 1615, 996, 1849, 372, 4986, 1169, 397, 434, 322, 5166, 328]}
{"line_number": 1368, "line_type": "original", "code": "        NameInformation nameInfo = new NameInformation();", "entropy": 1.224609375, "is_bug_line": false, "sus_score": 0.5328998565673828, "per_token_entropy": [5.3984375, 6.6328125, 0.001819610595703125, 0.100830078125, 0.0062408447265625, 0.00933837890625, 0.089599609375, 0.0015039443969726562, 1.6808509826660156e-05, 0.0038280487060546875], "tokens": [351, 3270, 6606, 636, 1120, 280, 537, 3270, 6606, 473]}
{"line_number": 1368, "line_type": "generated", "code": "\n        return null;\n    }\n  }", "entropy": 0.07012939453125, "is_bug_line": false, "sus_score": 0.5328998565673828, "per_token_entropy": [0.25439453125, 0.22705078125, 0.00966644287109375, 0.0005559921264648438, 0.022705078125, 0.00034308433532714844, 0.04559326171875, 0.0009341239929199219], "tokens": [291, 442, 744, 45, 284, 320, 334, 320]}
{"line_number": 1585, "line_type": "original", "code": "", "entropy": 4.93359375, "is_bug_line": false, "sus_score": 0.5298005938529968, "per_token_entropy": [4.93359375], "tokens": [203]}
{"line_number": 1585, "line_type": "generated", "code": "\n      // parent writes to n; replace it with n's rhs + lhs\n      // subexpressions with side effects.\n      Node lhs = n.getFirstChild();\n      List<Node> replacements = getSideEffectNodes(lhs);\n      replacements.add", "entropy": 0.296630859375, "is_bug_line": false, "sus_score": 0.5298005938529968, "per_token_entropy": [0.10540771484375, 0.330322265625, 1.751953125, 1.65234375, 0.10723876953125, 0.1689453125, 0.93701171875, 0.366943359375, 0.1595458984375, 0.0232086181640625, 1.138671875, 0.04364013671875, 0.56982421875, 0.73779296875, 0.211669921875, 0.378662109375, 0.01180267333984375, 0.0272674560546875, 0.004184722900390625, 0.0222320556640625, 0.01412200927734375, 0.0018110275268554688, 0.1806640625, 0.04522705078125, 1.1875, 1.3671875, 0.05023193359375, 0.034942626953125, 0.000385284423828125, 0.1607666015625, 0.005893707275390625, 0.1622314453125, 0.04779052734375, 1.0869140625, 0.00021195411682128906, 0.0019702911376953125, 1.4424324035644531e-05, 0.1868896484375, 0.004154205322265625, 0.0083770751953125, 0.1964111328125, 0.6884765625, 0.00733184814453125, 0.003398895263671875, 0.002002716064453125, 0.044525146484375, 0.034576416015625, 0.09100341796875, 0.64892578125, 5.555152893066406e-05, 0.0032806396484375, 0.416015625], "tokens": [397, 434, 2935, 19408, 372, 310, 45, 7084, 561, 623, 310, 1182, 9322, 474, 16020, 397, 434, 1361, 23483, 623, 5209, 15987, 32, 397, 4004, 16020, 280, 310, 32, 25657, 2931, 473, 397, 1682, 46, 1212, 48, 15909, 101, 280, 622, 7427, 5559, 5909, 26, 16027, 293, 397, 15909, 101, 32, 669]}
{"line_number": 954, "line_type": "original", "code": "          scopes.get(parent) == referring) {", "entropy": 3.943359375, "is_bug_line": false, "sus_score": 0.5295894145965576, "per_token_entropy": [10.40625, 13.453125, 0.439453125, 3.513671875, 0.5283203125, 2.85546875, 3.787109375, 3.07421875, 4.03125, 1.1455078125, 0.1337890625], "tokens": [2033, 25353, 32, 371, 26, 2544, 27, 610, 39210, 27, 301]}
{"line_number": 954, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5295894145965576, "per_token_entropy": [], "tokens": []}
{"line_number": 931, "line_type": "original", "code": "     * prevent the removal of the function and its dependent values, but won't", "entropy": 3.908203125, "is_bug_line": false, "sus_score": 0.529577374458313, "per_token_entropy": [5.85546875, 5.4765625, 9.375, 0.7490234375, 1.8486328125, 0.11907958984375, 1.0078125, 4.1484375, 4.53125, 1.6337890625, 6.59375, 5.96484375, 3.685546875, 3.8046875, 7.7421875, 0.005435943603515625], "tokens": [262, 319, 9454, 322, 27230, 432, 322, 667, 461, 2819, 20109, 2078, 30, 1273, 7606, 1330]}
{"line_number": 931, "line_type": "generated", "code": "        add(condition);\n        Node trueBranch = condition.getNext();\n        Node falseBranch = trueBranch.getNext();\n        add(trueBranch);\n        add(falseBranch);\n      }\n\n      @Override\n      public void keepOriginalExpressionResult(Node original)", "entropy": 0.32958984375, "is_bug_line": false, "sus_score": 0.529577374458313, "per_token_entropy": [0.70556640625, 1.513671875, 0.79052734375, 0.1971435546875, 0.11981201171875, 0.72705078125, 0.55615234375, 2.908203125, 0.257568359375, 0.00595855712890625, 0.24072265625, 0.0007815361022949219, 0.002941131591796875, 0.01348114013671875, 0.276611328125, 0.90966796875, 0.031463623046875, 0.0003154277801513672, 0.005733489990234375, 0.189453125, 3.5762786865234375e-06, 0.0166778564453125, 6.783008575439453e-05, 0.004604339599609375, 0.46728515625, 0.28466796875, 0.1204833984375, 0.053497314453125, 7.867813110351562e-06, 0.0260009765625, 0.013824462890625, 0.0712890625, 0.00830841064453125, 0.004116058349609375, 4.649162292480469e-06, 0.00516510009765625, 0.3046875, 0.0001232624053955078, 0.12841796875, 0.1337890625, 0.0003352165222167969, 0.0012664794921875, 0.004528045654296875, 0.0579833984375, 0.50244140625, 2.548828125, 1.4541015625, 0.84912109375, 0.342041015625, 0.0262451171875, 0.15869140625, 0.10302734375], "tokens": [351, 1015, 26, 4742, 293, 291, 4004, 861, 10094, 280, 3700, 32, 23017, 473, 291, 4004, 901, 10094, 280, 861, 10094, 32, 23017, 473, 291, 1015, 26, 1508, 10094, 293, 291, 1015, 26, 1870, 10094, 293, 397, 320, 1687, 477, 1788, 397, 562, 763, 4986, 11296, 3487, 1394, 26, 1212, 4707, 27]}
{"line_number": 940, "line_type": "original", "code": "            rhs, NON_LOCAL_RESULT_PREDICATE));", "entropy": 4.7265625, "is_bug_line": false, "sus_score": 0.529577374458313, "per_token_entropy": [6.6171875, 10.5390625, 6.04296875, 15.4609375, 0.09149169921875, 1.7216796875, 1.0556640625, 5.8125, 1.8486328125, 8.3515625, 0.8017578125, 0.047210693359375, 3.03125], "tokens": [1468, 9322, 30, 11887, 81, 11144, 81, 6383, 81, 2883, 54, 31198, 876]}
{"line_number": 940, "line_type": "generated", "code": "\n      }\n\n      @Override\n      public void keep(Node n) {\n        add(n);\n      }\n\n      private void add(Node n) {\n        nodesToKeep.add(n);\n      }\n\n      private void addAllChildren(Node n) {", "entropy": 0.223388671875, "is_bug_line": false, "sus_score": 0.529577374458313, "per_token_entropy": [1.3642578125, 0.00202178955078125, 0.05853271484375, 0.2288818359375, 0.0005679130554199219, 0.001018524169921875, 0.0079193115234375, 0.11688232421875, 0.451904296875, 2.91796875, 0.046630859375, 0.77978515625, 0.188720703125, 0.0654296875, 0.08050537109375, 0.7900390625, 0.27734375, 0.003910064697265625, 0.010467529296875, 0.0714111328125, 0.00012385845184326172, 0.0802001953125, 1.365234375, 0.0655517578125, 0.0140228271484375, 0.70947265625, 0.0014867782592773438, 0.04351806640625, 0.0008411407470703125, 0.0003314018249511719, 0.03643798828125, 1.119140625, 0.00949859619140625, 0.0009751319885253906, 0.0019626617431640625, 0.013275146484375, 0.0009002685546875, 0.00890350341796875, 0.0084075927734375, 0.432861328125, 0.00025916099548339844, 0.0186614990234375, 0.0899658203125, 0.005123138427734375, 0.00333404541015625, 0.044403076171875, 0.006069183349609375, 0.000743865966796875, 0.0014295578002929688, 0.06591796875, 0.0004773139953613281, 0.00023758411407470703], "tokens": [397, 320, 1687, 477, 1788, 397, 562, 763, 4986, 26, 1212, 310, 27, 301, 291, 1015, 26, 96, 293, 397, 320, 1687, 945, 763, 1015, 26, 1212, 310, 27, 301, 291, 5166, 705, 16651, 32, 669, 26, 96, 293, 397, 320, 1687, 945, 763, 1015, 1934, 7640, 26, 1212, 310, 27, 301]}
{"line_number": 943, "line_type": "original", "code": "    }", "entropy": 1.99609375, "is_bug_line": false, "sus_score": 0.529577374458313, "per_token_entropy": [3.65234375, 0.339599609375], "tokens": [264, 320]}
{"line_number": 943, "line_type": "generated", "code": "      }\n\n      @Override\n      public void keepIfAfterLhs(Node ifNode) {\n        Node condition = ifNode.getFirstChild();\n        Node thenBranch = condition.getNext();\n        addAllChildren(condition);\n        addSimplifiedChildren(then", "entropy": 0.33447265625, "is_bug_line": false, "sus_score": 0.529577374458313, "per_token_entropy": [1.5986328125, 0.7587890625, 0.352294921875, 0.2105712890625, 0.0010213851928710938, 0.002437591552734375, 0.00322723388671875, 0.107421875, 0.490234375, 4.45703125, 1.7373046875, 1.0712890625, 0.923828125, 0.326416015625, 0.03485107421875, 0.837890625, 0.0955810546875, 0.27587890625, 0.00888824462890625, 0.03961181640625, 0.5830078125, 1.3369140625, 0.006748199462890625, 0.0187530517578125, 0.00010025501251220703, 0.0008149147033691406, 0.02142333984375, 0.001117706298828125, 0.01229095458984375, 0.00841522216796875, 0.128173828125, 0.1942138671875, 0.0214691162109375, 0.0009112358093261719, 0.01708984375, 0.00036263465881347656, 0.00031828880310058594, 0.0029296875, 0.036773681640625, 0.7900390625, 0.1326904296875, 0.00487518310546875, 0.0023097991943359375, 0.2236328125, 0.0297698974609375, 0.01496124267578125, 0.0516357421875, 0.40966796875, 2.0742416381835938e-05, 0.0022335052490234375, 0.002017974853515625, 0.0032215118408203125], "tokens": [647, 320, 1687, 477, 1788, 397, 562, 763, 4986, 2797, 5125, 62, 3914, 26, 1212, 415, 1212, 27, 301, 291, 4004, 3700, 280, 415, 1212, 32, 25657, 2931, 473, 291, 4004, 1615, 10094, 280, 3700, 32, 23017, 473, 291, 1015, 1934, 7640, 26, 4742, 293, 291, 1015, 35316, 1639, 7640, 26, 3356]}
{"line_number": 1787, "line_type": "original", "code": "          Node lhs = n.getFirstChild();", "entropy": 1.2919921875, "is_bug_line": false, "sus_score": 0.5285872220993042, "per_token_entropy": [9.1015625, 1.9814453125, 0.23193359375, 0.0268402099609375, 0.079833984375, 0.03289794921875, 0.119873046875, 0.0002753734588623047, 0.049957275390625], "tokens": [2033, 4004, 16020, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 1787, "line_type": "generated", "code": "\n\n  /**\n   * Extract a list of subexpressions that act as left hand sides.\n   */\n  private List<Node> getLhsSubexpressions(Node n) {\n    switch (n.getType()) {\n      case Token.EXPR_RESULT:\n       ", "entropy": 0.12310791015625, "is_bug_line": false, "sus_score": 0.5285872220993042, "per_token_entropy": [1.6689453125, 0.245849609375, 0.0310211181640625, 0.0007658004760742188, 1.958984375, 0.2841796875, 0.07513427734375, 0.002704620361328125, 0.20166015625, 0.01340484619140625, 0.0660400390625, 0.140869140625, 0.0014467239379882812, 0.8876953125, 0.01363372802734375, 0.01326751708984375, 0.052734375, 0.041259765625, 0.1064453125, 0.005870819091796875, 0.01354217529296875, 0.02142333984375, 0.0010395050048828125, 0.0041961669921875, 7.903575897216797e-05, 0.0008096694946289062, 0.00618743896484375, 0.00139617919921875, 0.02081298828125, 0.005859375, 0.0017299652099609375, 0.002536773681640625, 0.018218994140625, 0.01885986328125, 0.0027027130126953125, 0.06903076171875, 0.09405517578125, 0.0024547576904296875, 0.0005354881286621094, 3.886222839355469e-05, 8.535385131835938e-05, 1.1563301086425781e-05, 0.00016987323760986328, 0.006870269775390625, 0.00382232666015625, 0.00021338462829589844, 1.0848045349121094e-05, 0.2783203125, 2.6226043701171875e-06, 0.0003361701965332031, 7.605552673339844e-05, 0.0166473388671875], "tokens": [719, 1022, 664, 319, 15218, 312, 1149, 432, 1361, 23483, 688, 1712, 619, 2841, 4091, 29798, 32, 664, 569, 334, 945, 1682, 46, 1212, 48, 622, 62, 3914, 1721, 23483, 26, 1212, 310, 27, 301, 284, 3578, 308, 96, 32, 10272, 1157, 301, 397, 1135, 6512, 32, 17793, 81, 6383, 44, 291]}
{"line_number": 1788, "line_type": "original", "code": "          Node rhs = lhs.getNext();", "entropy": 2.412109375, "is_bug_line": false, "sus_score": 0.5285872220993042, "per_token_entropy": [9.875, 2.40234375, 0.27587890625, 0.03546142578125, 5.9453125, 0.123779296875, 0.5927734375, 0.051788330078125], "tokens": [2033, 4004, 9322, 280, 16020, 32, 23017, 473]}
{"line_number": 1788, "line_type": "generated", "code": "\n  /**\n   * Process an assignment node.\n   */\n  private Node processAssign(Node n, Node parent) {\n    Node lhs = n.getFirstChild();\n    Node rhs = n.getLastChild();\n\n    // if parent is a var node, then", "entropy": 0.65576171875, "is_bug_line": false, "sus_score": 0.5285872220993042, "per_token_entropy": [0.83837890625, 1.0986328125, 0.048126220703125, 0.0009388923645019531, 3.900390625, 2.19140625, 1.373046875, 1.4423828125, 0.80810546875, 0.59130859375, 0.51708984375, 0.0121002197265625, 0.0682373046875, 0.9384765625, 0.6005859375, 1.2431640625, 0.13623046875, 0.0271453857421875, 0.399169921875, 1.1171875, 0.61962890625, 0.34375, 0.3046875, 0.00568389892578125, 0.07366943359375, 1.203125, 0.671875, 0.05242919921875, 0.08544921875, 0.0011682510375976562, 0.06390380859375, 0.0009374618530273438, 0.03802490234375, 0.12200927734375, 0.414306640625, 0.052215576171875, 0.00890350341796875, 0.4052734375, 0.0007276535034179688, 0.004299163818359375, 0.00022685527801513672, 0.1123046875, 0.5498046875, 0.92333984375, 2.8125, 2.7109375, 0.194580078125, 0.962890625, 1.4794921875, 0.73876953125, 0.352783203125, 1.443359375], "tokens": [334, 1022, 664, 319, 6833, 600, 13807, 1541, 32, 664, 569, 334, 945, 4004, 2164, 9079, 26, 1212, 310, 30, 4004, 2935, 27, 301, 284, 4004, 16020, 280, 310, 32, 25657, 2931, 473, 284, 4004, 9322, 280, 310, 32, 20197, 2931, 473, 446, 434, 415, 2935, 438, 312, 773, 1541, 30, 1615]}
{"line_number": 686, "line_type": "original", "code": "        JsName parent = getName(parentName, true);", "entropy": 2.38671875, "is_bug_line": false, "sus_score": 0.5274728536605835, "per_token_entropy": [4.52734375, 9.359375, 2.017578125, 4.66015625, 0.5673828125, 0.9521484375, 0.09832763671875, 4.484375, 0.0692138671875, 0.7470703125, 1.15234375, 0.012725830078125], "tokens": [351, 22301, 558, 2935, 280, 16407, 26, 2544, 558, 30, 861, 293]}
{"line_number": 686, "line_type": "generated", "code": "\n        addAllChildren(child);\n      }\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()) {\n        // TODO(johnlenz): handle local variable names.", "entropy": 0.418212890625, "is_bug_line": false, "sus_score": 0.5274728536605835, "per_token_entropy": [0.08831787109375, 0.442138671875, 0.019744873046875, 0.004680633544921875, 0.002422332763671875, 0.00835418701171875, 0.0011453628540039062, 0.07843017578125, 0.0002048015594482422, 0.0303192138671875, 0.0003514289855957031, 0.044769287109375, 0.6298828125, 0.0008130073547363281, 0.006954193115234375, 0.00565338134765625, 0.1295166015625, 1.5625, 0.0182037353515625, 0.01549530029296875, 0.035919189453125, 0.020172119140625, 0.00040650367736816406, 0.0011987686157226562, 0.01093292236328125, 0.0109100341796875, 0.0110015869140625, 0.0017442703247070312, 0.0003504753112792969, 0.0014019012451171875, 0.4091796875, 0.416748046875, 0.1689453125, 0.382568359375, 0.0347900390625, 0.5869140625, 0.7001953125, 0.177490234375, 0.00133514404296875, 0.2091064453125, 2.3671875, 2.193359375, 0.06396484375, 0.08026123046875, 0.0011205673217773438, 0.00016582012176513672, 0.0217132568359375, 1.58984375, 3.388671875, 2.53125, 2.10546875, 1.1435546875], "tokens": [291, 1015, 1934, 7640, 26, 2661, 293, 397, 320, 284, 320, 446, 477, 1788, 284, 562, 763, 7725, 26, 1212, 35699, 273, 30, 4004, 310, 30, 4004, 2935, 27, 301, 397, 415, 308, 96, 32, 297, 558, 1157, 301, 291, 434, 4296, 26, 25172, 1657, 108, 711, 2887, 2196, 2677, 4467, 32]}
{"line_number": 1634, "line_type": "original", "code": "    } else if (n.isAssign() && !parent.isFor()) {", "entropy": 1.2001953125, "is_bug_line": false, "sus_score": 0.5259495973587036, "per_token_entropy": [3.640625, 2.267578125, 6.046875, 0.64208984375, 0.04364013671875, 1.2060546875, 0.0060577392578125, 1.0712890625, 0.05657958984375, 0.99462890625, 0.17333984375, 2.4921875, 2.734375, 0.0032711029052734375, 0.01561737060546875, 0.10614013671875, 0.064453125, 0.0494384765625], "tokens": [264, 320, 813, 415, 308, 96, 32, 297, 9079, 346, 962, 653, 2544, 32, 297, 1562, 1157, 301]}
{"line_number": 1634, "line_type": "generated", "code": "\n      // assignment appears in a RHS expression.  we have already\n      // considered names in the assignment's RHS as being referenced;\n      // replace the assignment with its RHS.\n      // TODO(user) make the pass smarter about these cases and/", "entropy": 0.06719970703125, "is_bug_line": false, "sus_score": 0.5259495973587036, "per_token_entropy": [0.267578125, 1.16015625, 1.3017578125, 0.09442138671875, 0.013427734375, 0.0154266357421875, 0.00939178466796875, 0.007015228271484375, 0.041900634765625, 0.048919677734375, 0.05352783203125, 0.01666259765625, 0.0014543533325195312, 0.0097503662109375, 0.0001081228256225586, 0.0034427642822265625, 0.002925872802734375, 0.0017108917236328125, 0.00081634521484375, 0.006591796875, 0.0008950233459472656, 0.0018415451049804688, 0.0012292861938476562, 0.0010671615600585938, 0.005863189697265625, 0.01141357421875, 0.0018911361694335938, 0.0007243156433105469, 0.0877685546875, 0.004364013671875, 0.006099700927734375, 0.0024013519287109375, 0.00714111328125, 0.01364898681640625, 0.0173492431640625, 0.032318115234375, 0.195068359375, 0.00646209716796875, 0.0011844635009765625, 0.00212860107421875, 0.0160369873046875, 0.00548553466796875, 0.00286102294921875, 0.0005574226379394531, 0.0017557144165039062, 1.6689300537109375e-05, 9.202957153320312e-05, 8.20159912109375e-05, 0.0003597736358642578, 0.00022661685943603516, 0.0076751708984375, 0.0009412765502929688], "tokens": [397, 434, 13807, 12929, 328, 312, 40892, 6101, 32, 225, 996, 1159, 3425, 397, 434, 11870, 4467, 328, 322, 13807, 1182, 40892, 619, 3998, 15167, 45, 397, 434, 7084, 322, 13807, 623, 2819, 40892, 32, 397, 434, 4296, 26, 496, 27, 1930, 322, 3097, 309, 3303, 391, 2625, 3282, 6792, 461, 33]}
{"line_number": 981, "line_type": "original", "code": "        Node thenBranch = condition.getNext();", "entropy": 3.01171875, "is_bug_line": false, "sus_score": 0.5257282853126526, "per_token_entropy": [7.8359375, 3.19921875, 10.5234375, 0.08612060546875, 0.84423828125, 4.5234375, 0.048736572265625, 0.005718231201171875, 0.03997802734375], "tokens": [351, 4004, 1615, 10094, 280, 3700, 32, 23017, 473]}
{"line_number": 981, "line_type": "generated", "code": "\n  public void process(Node externs, Node root) {\n    this.changeProxy.listenTo(externs);\n    this.changeProxy.listenTo(root);\n    this.changeProxy.setListener(new RemoveListener());\n    this.", "entropy": 0.275634765625, "is_bug_line": false, "sus_score": 0.5257282853126526, "per_token_entropy": [0.51611328125, 0.62744140625, 0.14111328125, 0.057098388671875, 0.13623046875, 0.019622802734375, 0.0791015625, 0.003704071044921875, 0.0048828125, 0.0164337158203125, 0.02606201171875, 0.0032024383544921875, 0.01181793212890625, 0.0726318359375, 2.298828125, 0.00856781005859375, 0.6787109375, 0.039947509765625, 0.05450439453125, 0.81103515625, 0.65673828125, 0.0120391845703125, 0.5908203125, 4.553794860839844e-05, 0.279052734375, 0.11712646484375, 0.3037109375, 7.736682891845703e-05, 0.0182647705078125, 0.0011768341064453125, 0.0003752708435058594, 0.0022716522216796875, 0.00015485286712646484, 0.000896453857421875, 0.0017261505126953125, 0.001384735107421875, 0.71728515625, 1.27734375, 0.0006465911865234375, 0.87939453125, 0.28515625, 0.004207611083984375, 1.138671875, 0.62451171875, 0.0064849853515625, 0.0609130859375, 0.004795074462890625, 0.00012135505676269531, 0.0168609619140625, 0.67626953125, 1.05078125, 0.0011310577392578125], "tokens": [334, 562, 763, 2164, 26, 1212, 12098, 101, 30, 4004, 3051, 27, 301, 284, 458, 32, 2342, 5392, 32, 12220, 705, 26, 4318, 101, 293, 284, 458, 32, 2342, 5392, 32, 12220, 705, 26, 2388, 293, 284, 458, 32, 2342, 5392, 32, 470, 2221, 26, 890, 6478, 2221, 1035, 284, 458, 32]}
{"line_number": 972, "line_type": "original", "code": "", "entropy": 4.43359375, "is_bug_line": false, "sus_score": 0.5255124568939209, "per_token_entropy": [4.43359375], "tokens": [203]}
{"line_number": 972, "line_type": "generated", "code": "\n   */\n  public NameAnalyzer(AbstractCompiler compiler, boolean removeUnreferenced) {\n    this.compiler = compiler;\n    this.removeUnreferenced = removeUnreferenced;", "entropy": 0.1287841796875, "is_bug_line": false, "sus_score": 0.5255124568939209, "per_token_entropy": [0.241943359375, 0.1583251953125, 0.0225677490234375, 0.5615234375, 1.67578125, 0.0151214599609375, 0.020416259765625, 0.088623046875, 0.00070953369140625, 0.0001895427703857422, 0.0295257568359375, 0.3095703125, 0.0038051605224609375, 0.0013713836669921875, 0.0002918243408203125, 0.02301025390625, 0.024169921875, 0.1055908203125, 0.09722900390625, 0.1361083984375, 0.094482421875, 0.000850677490234375, 0.0045318603515625, 0.00095367431640625, 0.2587890625, 0.12042236328125, 9.59634780883789e-05, 0.479248046875, 0.00885009765625, 0.0010557174682617188, 0.0074005126953125, 0.004985809326171875, 0.00011229515075683594, 7.748603820800781e-06, 0.00893402099609375], "tokens": [664, 569, 334, 562, 3270, 17412, 26, 5584, 8115, 8980, 30, 1905, 3345, 1061, 36307, 27, 301, 284, 458, 32, 10199, 280, 8980, 45, 284, 458, 32, 2546, 1061, 36307, 280, 3345, 1061, 36307, 45]}
{"line_number": 973, "line_type": "original", "code": "      @Override", "entropy": 4.6015625, "is_bug_line": false, "sus_score": 0.5255124568939209, "per_token_entropy": [7.01171875, 4.6796875, 2.111328125], "tokens": [647, 477, 1788]}
{"line_number": 973, "line_type": "generated", "code": "\n  public RemoveUnusedNames(AbstractCompiler compiler, boolean removeUnreferenced) {\n    this.compiler = compiler;\n    this.removeUnreferenced = removeUnreferenced;\n    this.nameFinder = new NameFinder(compiler, this);\n    this.name", "entropy": 0.39794921875, "is_bug_line": false, "sus_score": 0.5255124568939209, "per_token_entropy": [0.62744140625, 1.3837890625, 1.1552734375, 0.01258087158203125, 1.6708984375, 0.043548583984375, 0.09088134765625, 0.0009613037109375, 0.0003185272216796875, 0.06939697265625, 0.609375, 0.0097503662109375, 0.005619049072265625, 0.0004298686981201172, 0.013671875, 0.017578125, 0.1309814453125, 0.159912109375, 0.2154541015625, 0.096923828125, 0.0007653236389160156, 0.002689361572265625, 0.000919342041015625, 0.2366943359375, 0.1182861328125, 0.0001437664031982422, 0.4345703125, 0.023681640625, 0.0013751983642578125, 0.01099395751953125, 0.004955291748046875, 0.00021266937255859375, 8.225440979003906e-06, 0.0056915283203125, 0.97412109375, 0.396728515625, 0.00040650367736816406, 2.41796875, 3.041015625, 0.00800323486328125, 0.1441650390625, 0.36865234375, 0.1746826171875, 0.51611328125, 0.200927734375, 1.1337890625, 1.3681640625, 0.311279296875, 0.6103515625, 0.125244140625, 9.930133819580078e-05, 1.736328125], "tokens": [334, 562, 6478, 28694, 4109, 26, 5584, 8115, 8980, 30, 1905, 3345, 1061, 36307, 27, 301, 284, 458, 32, 10199, 280, 8980, 45, 284, 458, 32, 2546, 1061, 36307, 280, 3345, 1061, 36307, 45, 284, 458, 32, 426, 15882, 280, 537, 3270, 15882, 26, 10199, 30, 458, 293, 284, 458, 32, 426]}
{"line_number": 980, "line_type": "original", "code": "        Node condition = original.getFirstChild();", "entropy": 2.54296875, "is_bug_line": false, "sus_score": 0.5255124568939209, "per_token_entropy": [7.7265625, 3.060546875, 4.6484375, 1.10546875, 5.26953125, 0.68603515625, 0.358154296875, 0.0015306472778320312, 0.04010009765625], "tokens": [351, 4004, 3700, 280, 4707, 32, 25657, 2931, 473]}
{"line_number": 980, "line_type": "generated", "code": "\n  /**\n   * Sets the global names.\n   *\n   * @param names The global names.\n   */\n  public void setGlobalNames(String[] names) {\n    this.globalNames = names;\n  }\n\n  /**\n   * Sets the global names", "entropy": 0.3935546875, "is_bug_line": false, "sus_score": 0.5255124568939209, "per_token_entropy": [0.80517578125, 0.57177734375, 0.1358642578125, 0.0008907318115234375, 1.7607421875, 0.3193359375, 1.0234375, 0.310791015625, 1.07421875, 0.56005859375, 0.439697265625, 0.4072265625, 0.005153656005859375, 0.59228515625, 0.039337158203125, 1.6943359375, 0.79638671875, 0.74267578125, 0.076904296875, 0.6513671875, 0.125732421875, 0.050140380859375, 0.005001068115234375, 0.8310546875, 0.04205322265625, 0.019134521484375, 0.0102996826171875, 0.000637054443359375, 0.0264739990234375, 1.6875, 0.30126953125, 0.00409698486328125, 0.0011720657348632812, 0.0006389617919921875, 0.005584716796875, 0.8125, 3.039836883544922e-05, 0.0024662017822265625, 0.00015914440155029297, 0.0036334991455078125, 0.408203125, 0.068603515625, 0.049835205078125, 0.0005135536193847656, 0.4658203125, 0.0845947265625, 0.036651611328125, 0.00019860267639160156, 1.5478515625, 0.199951171875, 1.09765625, 0.5771484375], "tokens": [334, 1022, 664, 319, 9013, 322, 3649, 4467, 32, 664, 319, 664, 319, 477, 753, 4467, 886, 3649, 4467, 32, 664, 569, 334, 562, 763, 739, 4455, 4109, 26, 652, 1178, 4467, 27, 301, 284, 458, 32, 3264, 4109, 280, 4467, 45, 334, 320, 719, 1022, 664, 319, 9013, 322, 3649, 4467]}
{"line_number": 1969, "line_type": "original", "code": "", "entropy": 0.183349609375, "is_bug_line": false, "sus_score": 0.5241844654083252, "per_token_entropy": [0.183349609375], "tokens": [203]}
{"line_number": 1969, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5241844654083252, "per_token_entropy": [], "tokens": []}
{"line_number": 1795, "line_type": "original", "code": "          for (Node child : n.children()) {", "entropy": 1.16796875, "is_bug_line": false, "sus_score": 0.5238417983055115, "per_token_entropy": [7.8203125, 4.0625, 0.0247650146484375, 0.0209503173828125, 0.244140625, 0.373291015625, 0.1610107421875, 0.04150390625, 0.007793426513671875, 0.007534027099609375, 0.091552734375], "tokens": [2033, 436, 308, 1212, 2838, 499, 310, 32, 4915, 1157, 301]}
{"line_number": 1795, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5238417983055115, "per_token_entropy": [], "tokens": []}
{"line_number": 1796, "line_type": "original", "code": "            nodes.addAll(getRhsSubexpressions(child));", "entropy": 1.4189453125, "is_bug_line": false, "sus_score": 0.5238417983055115, "per_token_entropy": [9.7265625, 5.6171875, 0.020111083984375, 1.3125, 0.00909423828125, 0.089111328125, 2.8967857360839844e-05, 0.006359100341796875, 0.0008234977722167969, 0.0031490325927734375, 0.21826171875, 0.0294647216796875], "tokens": [1468, 5166, 32, 15120, 26, 43907, 3914, 1721, 23483, 26, 2661, 876]}
{"line_number": 1796, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5238417983055115, "per_token_entropy": [], "tokens": []}
{"line_number": 1599, "line_type": "original", "code": "    NodeTraversal.traverse(", "entropy": 2.21875, "is_bug_line": false, "sus_score": 0.5237448215484619, "per_token_entropy": [3.630859375, 3.306640625, 6.2109375, 0.06683349609375, 0.0176544189453125, 0.0821533203125], "tokens": [264, 4004, 35699, 32, 33261, 26]}
{"line_number": 1599, "line_type": "generated", "code": "\n   * Replace the top level expression with its RHS.\n   *\n   * @param parent Parent of n\n   * @param n Expression node to replace\n   */\n  private void replaceTopLevelExpressionWithRhs(Node parent, Node n) {\n    // expression", "entropy": 0.46923828125, "is_bug_line": false, "sus_score": 0.5237448215484619, "per_token_entropy": [0.6162109375, 0.1397705078125, 1.29296875, 1.4443359375, 0.69482421875, 0.67724609375, 0.2235107421875, 1.0390625, 0.56982421875, 1.4775390625, 1.0595703125, 0.404541015625, 0.87109375, 0.244384765625, 0.008087158203125, 1.2353515625, 0.03643798828125, 0.51220703125, 1.1572265625, 0.380126953125, 1.4609375, 0.2568359375, 0.010101318359375, 0.00043582916259765625, 0.0014190673828125, 0.0090789794921875, 0.951171875, 1.1259765625, 1.283203125, 0.288330078125, 0.18603515625, 0.0233612060546875, 0.01364898681640625, 0.0533447265625, 0.0104827880859375, 0.0013151168823242188, 0.0016965866088867188, 0.00011348724365234375, 0.0006389617919921875, 0.00013315677642822266, 2.384185791015625e-06, 0.0007596015930175781, 0.0172119140625, 0.005535125732421875, 4.2438507080078125e-05, 0.00513458251953125, 0.0006814002990722656, 0.0008625984191894531, 0.0011796951293945312, 0.1094970703125, 1.7333984375, 2.767578125], "tokens": [664, 319, 16695, 322, 2663, 3193, 6101, 623, 2819, 40892, 32, 664, 319, 664, 319, 477, 753, 2935, 15064, 432, 310, 664, 319, 477, 753, 310, 10292, 1541, 372, 7084, 664, 569, 334, 945, 763, 7084, 26412, 3487, 1554, 68, 3914, 26, 1212, 2935, 30, 4004, 310, 27, 301, 284, 434, 6101]}
