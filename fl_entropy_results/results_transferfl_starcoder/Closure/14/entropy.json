{"line_number": 767, "line_type": "original", "code": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);", "entropy": 2.9140625, "is_bug_line": true, "sus_score": 0.8877025246620178, "per_token_entropy": [10.5, 6.00390625, 0.1590576171875, 0.28857421875, 4.01171875, 0.157958984375, 0.03948974609375, 0.08355712890625, 0.0263824462890625, 0.01073455810546875, 12.484375, 0.298095703125, 1.064453125, 0.5234375, 0.314453125, 15.890625, 0.185546875, 0.4072265625], "tokens": [2850, 281, 1919, 32, 1297, 6530, 26, 1070, 1212, 30, 23745, 32, 1413, 20954, 30, 8295, 1212, 293]}
{"line_number": 767, "line_type": "generated", "code": "\n   */\n  static void connect(Node fromNode, Node toNode) {\n    if (fromNode.isConnectable() && toNode.isConnectable()) {\n      fromNode.addEdgeTo(toNode);\n    }\n  }\n\n  /**", "entropy": 0.316162109375, "is_bug_line": true, "sus_score": 0.8877025246620178, "per_token_entropy": [1.1259765625, 0.1885986328125, 0.0107421875, 0.492919921875, 0.037200927734375, 0.365966796875, 0.98828125, 0.1622314453125, 0.01369476318359375, 0.0068511962890625, 0.00090789794921875, 0.0091552734375, 0.0013990402221679688, 0.00015592575073242188, 0.404052734375, 0.01123046875, 0.201416015625, 1.2802734375, 0.11260986328125, 0.429931640625, 0.0009150505065917969, 1.4345703125, 1.0322265625, 2.794921875, 0.0016298294067382812, 0.32177734375, 0.1392822265625, 0.11279296875, 3.5762786865234375e-05, 0.01392364501953125, 0.008148193359375, 0.0016193389892578125, 5.936622619628906e-05, 0.07574462890625, 0.00377655029296875, 0.115234375, 1.1103515625, 0.0010576248168945312, 0.002544403076171875, 1.146484375, 0.68115234375, 0.1025390625, 0.003002166748046875, 0.033294677734375, 3.0875205993652344e-05, 0.095703125, 0.3603515625, 0.0018129348754882812, 0.2022705078125, 0.0033855438232421875, 0.53125, 0.26171875], "tokens": [664, 569, 334, 907, 763, 5008, 26, 1212, 645, 1212, 30, 4004, 372, 1212, 27, 301, 284, 415, 308, 1070, 1212, 32, 297, 6754, 444, 346, 962, 372, 1212, 32, 297, 6754, 444, 1157, 301, 397, 645, 1212, 32, 669, 6530, 705, 26, 452, 1212, 293, 284, 320, 334, 320, 719, 1022]}
{"line_number": 987, "line_type": "original", "code": "  static Node getCatchHandlerForBlock(Node block) {", "entropy": 1.5556640625, "is_bug_line": false, "sus_score": 0.8846727609634399, "per_token_entropy": [4.89453125, 6.390625, 5.2734375, 0.45068359375, 2.1015625, 0.05364990234375, 0.07232666015625, 0.08026123046875, 0.01483917236328125, 0.03350830078125, 0.8203125, 0.004291534423828125, 0.0301361083984375], "tokens": [225, 907, 4004, 622, 20377, 1972, 1562, 2227, 26, 1212, 2163, 27, 301]}
{"line_number": 987, "line_type": "generated", "code": "\n      } else {\n        return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return", "entropy": 0.0209197998046875, "is_bug_line": false, "sus_score": 0.8846727609634399, "per_token_entropy": [0.49658203125, 0.08544921875, 0.2249755859375, 0.00952911376953125, 0.03302001953125, 0.050018310546875, 0.040985107421875, 0.0029964447021484375, 0.00016951560974121094, 0.0015430450439453125, 0.00371551513671875, 2.9325485229492188e-05, 3.552436828613281e-05, 0.0005917549133300781, 0.00012958049774169922, 0.004619598388671875, 0.00030612945556640625, 0.0003151893615722656, 0.012939453125, 0.0017337799072265625, 0.00013506412506103516, 0.003009796142578125, 0.0014944076538085938, 0.0001379251480102539, 2.0742416381835938e-05, 0.00022542476654052734, 0.044342041015625, 0.0012598037719726562, 4.291534423828125e-06, 2.753734588623047e-05, 7.593631744384766e-05, 6.854534149169922e-05, 3.3855438232421875e-05, 0.0002193450927734375, 1.3589859008789062e-05, 0.0008821487426757812, 0.0007891654968261719, 1.4066696166992188e-05, 0.0032958984375, 8.499622344970703e-05, 1.2874603271484375e-05, 2.765655517578125e-05, 4.267692565917969e-05, 0.00013768672943115234, 0.0009398460388183594, 2.872943878173828e-05, 0.00013494491577148438, 8.106231689453125e-06, 5.042552947998047e-05, 0.00022876262664794922, 0.01274871826171875, 0.048126220703125], "tokens": [397, 320, 813, 301, 291, 442, 537, 34868, 46, 2820, 3406, 1212, 46, 1212, 30, 23745, 35660, 301, 616, 477, 1788, 616, 562, 629, 8868, 26, 1090, 6349, 3406, 1212, 46, 1212, 30, 23745, 48, 310, 35, 30, 6349, 3406, 1212, 46, 1212, 30, 23745, 48, 310, 36, 27, 301, 324, 442]}
{"line_number": 2751, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.8836880922317505, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 2751, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.8836880922317505, "per_token_entropy": [], "tokens": []}
{"line_number": 664, "line_type": "original", "code": "      finallyMap.put(lastJump, null);", "entropy": 2.73828125, "is_bug_line": false, "sus_score": 0.8767849802970886, "per_token_entropy": [3.830078125, 10.5546875, 0.05023193359375, 0.03497314453125, 7.1484375, 0.11444091796875, 5.4140625, 0.0224151611328125, 0.0039520263671875, 2.822265625, 0.12548828125], "tokens": [647, 8295, 1208, 32, 524, 26, 2135, 17861, 30, 744, 293]}
{"line_number": 664, "line_type": "generated", "code": "\n        node.isReturn()) {\n      if (cfa!= null) {\n        cfa.createEdge(fromNode, Branch.UNCOND, NodeUtil.newSymbol(\n            node, \"END_OF_FILE\"));\n      }\n      return NodeUtil", "entropy": 0.36279296875, "is_bug_line": false, "sus_score": 0.8767849802970886, "per_token_entropy": [0.68505859375, 0.84228515625, 0.2205810546875, 0.039154052734375, 0.06414794921875, 0.58837890625, 0.0103759765625, 0.12164306640625, 1.130859375, 0.01544189453125, 0.4541015625, 0.0836181640625, 0.00014972686767578125, 0.1585693359375, 0.0105743408203125, 0.1756591796875, 0.2435302734375, 8.463859558105469e-06, 0.0011444091796875, 0.984375, 0.11590576171875, 0.0123748779296875, 0.102294921875, 3.147125244140625e-05, 0.00042939186096191406, 0.01244354248046875, 7.462501525878906e-05, 0.398681640625, 0.0002033710479736328, 0.004085540771484375, 2.181640625, 0.261962890625, 0.006317138671875, 0.55078125, 0.57177734375, 0.4482421875, 0.9541015625, 0.8505859375, 0.280029296875, 1.8046875, 1.3681640625, 0.2197265625, 0.04779052734375, 0.0303955078125, 1.8759765625, 0.484130859375, 0.1990966796875, 0.0001157522201538086, 0.1595458984375, 0.046417236328125, 0.046600341796875, 0.00047326087951660156], "tokens": [291, 1541, 32, 297, 2891, 1157, 301, 397, 415, 308, 37059, 863, 744, 27, 301, 291, 281, 1919, 32, 1297, 6530, 26, 1070, 1212, 30, 23745, 32, 1413, 20954, 30, 4004, 1733, 32, 890, 6084, 26, 324, 1541, 30, 313, 3285, 81, 2109, 81, 3539, 2974, 397, 320, 397, 442, 4004, 1733]}
{"line_number": 296, "line_type": "original", "code": "    switch (n.getType()) {", "entropy": 1.3095703125, "is_bug_line": false, "sus_score": 0.8663187026977539, "per_token_entropy": [4.6171875, 5.69140625, 0.06634521484375, 0.046600341796875, 0.0009107589721679688, 0.004825592041015625, 0.0005049705505371094, 0.0491943359375], "tokens": [264, 3578, 308, 96, 32, 10272, 1157, 301]}
{"line_number": 296, "line_type": "generated", "code": "\n  }\n\n  private void handleIf(Node n) {\n    Preconditions.checkState(n.getType() == Token.IF);\n    Preconditions.checkState(n.getChildCount() == 3);\n\n    Node condition = n.getFirstChild();\n   ", "entropy": 0.250244140625, "is_bug_line": false, "sus_score": 0.8663187026977539, "per_token_entropy": [0.83203125, 0.007030487060546875, 0.54638671875, 1.0322265625, 0.1422119140625, 0.08428955078125, 0.861328125, 0.003753662109375, 0.00127410888671875, 0.336181640625, 0.0010128021240234375, 0.00858306884765625, 0.1806640625, 1.189453125, 0.0015888214111328125, 0.0028018951416015625, 0.264404296875, 0.016326904296875, 0.42919921875, 0.01385498046875, 0.89794921875, 0.000797271728515625, 0.0004584789276123047, 0.00023686885833740234, 1.0013580322265625e-05, 0.0006918907165527344, 0.040283203125, 0.493896484375, 1.1357421875, 0.001262664794921875, 0.0011854171752929688, 0.0199127197265625, 0.026611328125, 0.255615234375, 0.010711669921875, 0.98486328125, 0.00775146484375, 0.00019681453704833984, 0.0372314453125, 0.006702423095703125, 0.333740234375, 0.11492919921875, 0.80322265625, 0.71337890625, 0.84765625, 0.129150390625, 0.0281524658203125, 0.0003960132598876953, 0.0538330078125, 0.0003139972686767578, 0.03466796875, 0.07861328125], "tokens": [334, 320, 719, 945, 763, 2887, 2797, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 1078, 26, 96, 32, 10272, 346, 610, 6512, 32, 2952, 293, 284, 40596, 32, 1553, 1078, 26, 96, 32, 24213, 1534, 346, 610, 225, 37, 293, 446, 4004, 3700, 280, 310, 32, 25657, 2931, 473, 284]}
{"line_number": 675, "line_type": "original", "code": "    return computeFollowNode(node, node, cfa);", "entropy": 1.4375, "is_bug_line": false, "sus_score": 0.8545554876327515, "per_token_entropy": [4.25390625, 3.849609375, 0.62548828125, 0.01229095458984375, 0.0013217926025390625, 0.004741668701171875, 4.9375, 0.158203125, 3.369140625, 1.3330078125, 0.137939453125, 3.5762786865234375e-07, 0.0089874267578125], "tokens": [264, 442, 7596, 13052, 1212, 26, 1251, 30, 1541, 30, 281, 1919, 293]}
{"line_number": 675, "line_type": "generated", "code": "\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return computeFollowNode(fromNode, parent, cfa);\n\n      // The follow() of any of the path from a BLOCK would be what follows\n      //", "entropy": 0.31005859375, "is_bug_line": false, "sus_score": 0.8545554876327515, "per_token_entropy": [0.6416015625, 0.71435546875, 0.0007328987121582031, 5.4836273193359375e-05, 0.444580078125, 6.079673767089844e-06, 0.00033473968505859375, 0.7216796875, 0.0034046173095703125, 0.0014390945434570312, 0.0001609325408935547, 0.2261962890625, 0.0131988525390625, 0.63427734375, 0.007801055908203125, 0.0015439987182617188, 8.404254913330078e-05, 0.00856781005859375, 0.00258636474609375, 0.56103515625, 0.72607421875, 0.77197265625, 0.017578125, 0.003917694091796875, 0.00548553466796875, 0.040191650390625, 5.412101745605469e-05, 0.00015866756439208984, 0.054534912109375, 1.18359375, 0.010467529296875, -0.0, 0.01788330078125, 0.78466796875, 0.266357421875, 1.1396484375, 0.065673828125, 0.15625, 0.076416015625, 0.48779296875, 0.459716796875, 0.0307464599609375, 0.11553955078125, 0.0714111328125, 1.287109375, 2.322265625, 0.6650390625, 0.0355224609375, 0.916015625, 0.0274505615234375, 0.396240234375, 0.00899505615234375], "tokens": [397, 1135, 6512, 32, 11990, 5311, 44, 397, 1135, 6512, 32, 1680, 44, 397, 1135, 6512, 32, 7321, 44, 291, 442, 7596, 13052, 1212, 26, 1070, 1212, 30, 2935, 30, 281, 1919, 293, 1687, 434, 886, 1976, 346, 432, 1346, 432, 322, 1519, 645, 312, 20313, 2268, 526, 2769, 11588, 397, 434]}
{"line_number": 930, "line_type": "original", "code": "    return false;", "entropy": 3.302734375, "is_bug_line": false, "sus_score": 0.8518770337104797, "per_token_entropy": [5.09375, 0.259521484375, 7.85546875, 0.0055999755859375], "tokens": [264, 442, 901, 45]}
{"line_number": 930, "line_type": "generated", "code": "\n  }\n\n  /**\n   * Get the TRY block with a CATCH that would be run if the given block\n   * throws an exception.\n   * @return The CATCH node or null if it there isn't a CATCH before the\n   *     the function termin", "entropy": 0.19091796875, "is_bug_line": false, "sus_score": 0.8518770337104797, "per_token_entropy": [0.376708984375, 0.005657196044921875, 0.1876220703125, 0.1600341796875, 0.0237274169921875, 0.0002627372741699219, 1.0634765625, 0.08636474609375, 0.908203125, 9.143352508544922e-05, 0.126953125, 0.403076171875, 0.064208984375, 0.0345458984375, 0.216064453125, 0.0399169921875, 0.09130859375, 0.003963470458984375, 0.056732177734375, 1.4033203125, 0.76318359375, 1.154296875, 0.448486328125, 0.0010013580322265625, 0.68017578125, 0.0226898193359375, 0.00522613525390625, 0.0416259765625, 0.1259765625, 0.17724609375, 0.10784912109375, 0.112060546875, 0.01158905029296875, 0.01568603515625, 0.00844573974609375, 0.025146484375, 0.0019550323486328125, 0.007190704345703125, 0.1761474609375, 0.00809478759765625, 0.002857208251953125, 7.355213165283203e-05, 0.015869140625, 0.00897979736328125, 0.1163330078125, 0.02545166015625, 0.042449951171875, 0.00013005733489990234, 0.01392364501953125, 0.1590576171875, 0.393798828125, 0.006649017333984375], "tokens": [334, 320, 719, 1022, 664, 319, 1390, 322, 5223, 75, 2163, 623, 312, 33413, 688, 2268, 526, 1420, 415, 322, 2702, 2163, 664, 319, 2571, 600, 3756, 32, 664, 319, 477, 601, 886, 33413, 1541, 556, 744, 415, 561, 2017, 7735, 1330, 312, 33413, 2670, 322, 664, 319, 262, 322, 667, 9262]}
{"line_number": 2072, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.8420314788818359, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 2072, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.8420314788818359, "per_token_entropy": [], "tokens": []}
{"line_number": 493, "line_type": "original", "code": "", "entropy": 2.7265625, "is_bug_line": false, "sus_score": 0.8338508605957031, "per_token_entropy": [2.7265625], "tokens": [203]}
{"line_number": 493, "line_type": "generated", "code": "\n  private void handleTry(Node node) {\n    Preconditions.checkState(node.getChildCount() >= 2);\n    Node tryBlock = node.getFirstChild();\n    Preconditions.checkState(tryBlock.isBlock());\n    Node catchBlock =", "entropy": 0.28466796875, "is_bug_line": false, "sus_score": 0.8338508605957031, "per_token_entropy": [0.50927734375, 0.32177734375, 0.1591796875, 0.280517578125, 1.6787109375, 0.047637939453125, 0.001750946044921875, 0.0145111083984375, 0.004352569580078125, 0.005096435546875, 0.06658935546875, 1.052734375, 0.0007052421569824219, 0.0013275146484375, 0.04205322265625, 0.01337432861328125, 0.40771484375, 0.004550933837890625, 0.347412109375, 0.0007686614990234375, 0.0007891654968261719, 0.65283203125, 0.003387451171875, 0.97216796875, 0.04400634765625, 0.22509765625, 1.1826171875, 1.529296875, 0.28466796875, 0.0224151611328125, 0.0172882080078125, 0.0012578964233398438, 0.35400390625, 0.0007128715515136719, 0.2310791015625, 0.0853271484375, 1.0390625, 0.0005192756652832031, 0.00313568115234375, 0.0056915283203125, 0.004840850830078125, 0.068115234375, 6.878376007080078e-05, 0.044097900390625, 0.298583984375, 0.16748046875, 0.04931640625, 0.2459716796875, 1.22265625, 0.91357421875, 0.139404296875, 0.0253753662109375], "tokens": [334, 945, 763, 2887, 8296, 26, 1212, 1541, 27, 301, 284, 40596, 32, 1553, 1078, 26, 1251, 32, 24213, 1534, 346, 2377, 225, 36, 293, 284, 4004, 1596, 2227, 280, 1541, 32, 25657, 2931, 473, 284, 40596, 32, 1553, 1078, 26, 1270, 2227, 32, 297, 2227, 1035, 284, 4004, 2368, 2227, 280]}
{"line_number": 2759, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.7883526086807251, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 2759, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7883526086807251, "per_token_entropy": [], "tokens": []}
{"line_number": 2037, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.7868713736534119, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 2037, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7868713736534119, "per_token_entropy": [], "tokens": []}
{"line_number": 2750, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.7846699357032776, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 2750, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7846699357032776, "per_token_entropy": [], "tokens": []}
{"line_number": 1502, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.7838571667671204, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 1502, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7838571667671204, "per_token_entropy": [], "tokens": []}
{"line_number": 2768, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.7832570672035217, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 2768, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7832570672035217, "per_token_entropy": [], "tokens": []}
{"line_number": 989, "line_type": "original", "code": "        block.getParent().isTry() &&", "entropy": 3.35546875, "is_bug_line": false, "sus_score": 0.7826470732688904, "per_token_entropy": [2.734375, 14.7265625, 1.6845703125, 0.75341796875, 0.044647216796875, 4.98828125, 3.7265625, 0.4736328125, 1.0634765625], "tokens": [351, 2163, 32, 18789, 922, 297, 8296, 346, 962]}
{"line_number": 989, "line_type": "generated", "code": "\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n        };\n     ", "entropy": 0.0170745849609375, "is_bug_line": false, "sus_score": 0.7826470732688904, "per_token_entropy": [0.450927734375, 0.0711669921875, 0.0002880096435546875, 0.0067901611328125, 0.0037937164306640625, 0.00037407875061035156, 0.00010776519775390625, 0.000537872314453125, 0.063232421875, 0.001834869384765625, 2.2172927856445312e-05, 9.179115295410156e-06, 0.00016450881958007812, 7.557868957519531e-05, 0.0009341239929199219, 0.00032329559326171875, 9.5367431640625e-06, 0.0013189315795898438, 0.001861572265625, 3.2782554626464844e-05, 0.006656646728515625, 0.0001112222671508789, 2.3126602172851562e-05, 5.650520324707031e-05, 5.53131103515625e-05, 0.00019979476928710938, 0.0004954338073730469, 3.7550926208496094e-05, 0.00020170211791992188, 2.1457672119140625e-05, 8.809566497802734e-05, 0.00244140625, 0.0753173828125, 0.054931640625, 0.045989990234375, 0.0006809234619140625, 0.000522613525390625, 0.0001671314239501953, 0.0236358642578125, 0.0002586841583251953, 0.00043010711669921875, 0.00035572052001953125, 8.952617645263672e-05, 0.00010287761688232422, 3.7789344787597656e-05, 0.0015954971313476562, 0.00014638900756835938, 0.006061553955078125, 0.0008573532104492188, 0.0478515625, 0.0006160736083984375, 0.0143280029296875], "tokens": [616, 477, 1788, 616, 562, 629, 8868, 26, 1090, 6349, 3406, 1212, 46, 1212, 30, 23745, 48, 310, 35, 30, 6349, 3406, 1212, 46, 1212, 30, 23745, 48, 310, 36, 27, 301, 324, 442, 622, 2731, 26, 96, 36, 27, 429, 622, 2731, 26, 96, 35, 293, 616, 320, 291, 1472, 397]}
{"line_number": 1002, "line_type": "original", "code": "   * pre-order traversal of the AST.", "entropy": 2.16796875, "is_bug_line": false, "sus_score": 0.7814516425132751, "per_token_entropy": [6.0703125, 4.2734375, 9.4609375, 0.2236328125, 0.0149993896484375, 0.2236328125, 0.87060546875, 0.09375, 0.09771728515625, 0.339111328125], "tokens": [261, 319, 1406, 31, 1174, 34395, 432, 322, 16095, 32]}
{"line_number": 1002, "line_type": "generated", "code": "\n    private int getPosition(DiGraphNode<Node, Branch> n) {\n      return priorities.get(n);\n    }\n  }", "entropy": 0.07415771484375, "is_bug_line": false, "sus_score": 0.7814516425132751, "per_token_entropy": [0.403564453125, 0.131103515625, 0.0222015380859375, 0.00029015541076660156, 0.00027823448181152344, 0.0007767677307128906, 0.0236663818359375, 1.537799835205078e-05, 3.3974647521972656e-05, 0.00112152099609375, 0.00015592575073242188, 0.00011730194091796875, 0.0130462646484375, 7.283687591552734e-05, 0.352294921875, 0.0271453857421875, 0.0037021636962890625, 0.06903076171875, 0.6455078125, 0.033477783203125, 6.4373016357421875e-06, 0.0007495880126953125, 0.0039215087890625, 0.002414703369140625, 0.0059661865234375, 0.023529052734375, 0.07330322265625, 0.002735137939453125, 0.380126953125, 0.003292083740234375], "tokens": [284, 945, 629, 622, 2731, 26, 2820, 3406, 1212, 46, 1212, 30, 23745, 48, 310, 27, 301, 397, 442, 9553, 2105, 32, 371, 26, 96, 293, 284, 320, 334, 320]}
{"line_number": 990, "line_type": "original", "code": "        block.getParent().getFirstChild() == block) {", "entropy": 2.685546875, "is_bug_line": false, "sus_score": 0.7811707258224487, "per_token_entropy": [2.9375, 14.0625, 2.09375, 2.021484375, 0.07281494140625, 4.58203125, 0.004940032958984375, 0.8076171875, 1.841796875, 2.2421875, 1.451171875, 0.0947265625], "tokens": [351, 2163, 32, 18789, 922, 25657, 2931, 346, 610, 2163, 27, 301]}
{"line_number": 990, "line_type": "generated", "code": "\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n        };\n      }\n    }", "entropy": 0.0286407470703125, "is_bug_line": false, "sus_score": 0.7811707258224487, "per_token_entropy": [0.78125, 0.1539306640625, 0.001953125, 0.0007572174072265625, 0.0017423629760742188, 0.125, 0.0022220611572265625, 4.649162292480469e-05, 1.3113021850585938e-05, 0.0003402233123779297, 0.0001575946807861328, 0.0007991790771484375, 0.0006451606750488281, 1.7404556274414062e-05, 0.0017652511596679688, 0.0018367767333984375, 7.62939453125e-05, 0.013397216796875, 8.785724639892578e-05, 3.9696693420410156e-05, 0.00013566017150878906, 5.7220458984375e-06, 0.00017845630645751953, 0.000759124755859375, 8.058547973632812e-05, 0.00022614002227783203, 5.4836273193359375e-05, 0.00020313262939453125, 0.005466461181640625, 0.1124267578125, 0.06683349609375, 0.05596923828125, 0.0010232925415039062, 0.0007214546203613281, 0.0003037452697753906, 0.0225830078125, 0.00034308433532714844, 0.0004906654357910156, 0.0004987716674804688, 0.00019538402557373047, 0.0001647472381591797, 8.988380432128906e-05, 0.0032825469970703125, 0.0003020763397216797, 0.024658203125, 0.0011091232299804688, 0.054840087890625, 0.0007920265197753906, 0.0283203125, 6.198883056640625e-05, 0.0171356201171875, 0.0035610198974609375], "tokens": [616, 562, 629, 8868, 26, 1090, 6349, 3406, 1212, 46, 1212, 30, 23745, 48, 310, 35, 30, 6349, 3406, 1212, 46, 1212, 30, 23745, 48, 310, 36, 27, 301, 324, 442, 622, 2731, 26, 96, 36, 27, 429, 622, 2731, 26, 96, 35, 293, 616, 320, 291, 1472, 397, 320, 284, 320]}
{"line_number": 2041, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.7790715098381042, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 2041, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7790715098381042, "per_token_entropy": [], "tokens": []}
{"line_number": 1352, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.7759478092193604, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 1352, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7759478092193604, "per_token_entropy": [], "tokens": []}
{"line_number": 1534, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.7749624252319336, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 1534, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7749624252319336, "per_token_entropy": [], "tokens": []}
{"line_number": 1503, "line_type": "original", "code": "", "entropy": 0.185302734375, "is_bug_line": false, "sus_score": 0.7749089598655701, "per_token_entropy": [0.185302734375], "tokens": [203]}
{"line_number": 1503, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.7749089598655701, "per_token_entropy": [], "tokens": []}
