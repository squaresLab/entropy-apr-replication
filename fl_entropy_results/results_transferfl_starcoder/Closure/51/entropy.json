{"line_number": 241, "line_type": "original", "code": "    if ((long) x == x) {", "entropy": 3.46484375, "is_bug_line": true, "sus_score": 0.5685100555419922, "per_token_entropy": [6.03515625, 7.03125, 4.98828125, 9.0703125, 0.1595458984375, 1.7822265625, 1.9228515625, 3.265625, 0.314697265625, 0.0745849609375], "tokens": [264, 415, 1833, 3222, 27, 816, 610, 816, 27, 301]}
{"line_number": 241, "line_type": "generated", "code": "\n  void endFile() {\n    maybeEndStatement();\n    maybeCutLine();\n  }\n\n  /**\n   * Called when we're at the end of a block.\n   * @param n The node that ends the block.\n   */\n  void endBlock(", "entropy": 0.44970703125, "is_bug_line": true, "sus_score": 0.5685100555419922, "per_token_entropy": [0.1915283203125, 0.1456298828125, 1.5458984375, 0.06976318359375, 0.0160675048828125, 0.169677734375, 0.517578125, 0.81103515625, 0.2388916015625, 0.015045166015625, 0.03350830078125, 1.09765625, 1.5419921875, 0.5185546875, 0.00817108154296875, 0.0165557861328125, 0.31494140625, 0.0004603862762451172, 0.40576171875, 0.58642578125, 0.56005859375, 0.0012140274047851562, 1.9560546875, 0.451171875, 0.172119140625, 0.263916015625, 0.529296875, 0.035675048828125, 0.388916015625, 0.01288604736328125, 0.12359619140625, 1.6455078125, 0.66064453125, 0.548828125, 0.428955078125, 1.1552734375, 0.0958251953125, 0.458984375, 0.65234375, 0.60595703125, 1.3603515625, 1.560546875, 0.2203369140625, 0.054779052734375, 0.3447265625, 0.0792236328125, 0.66259765625, 0.043670654296875, 0.0421142578125, 0.0071258544921875, 0.00907135009765625, 0.0116119384765625], "tokens": [334, 763, 943, 974, 346, 301, 284, 8762, 2102, 5495, 473, 284, 8762, 18024, 1811, 473, 334, 320, 719, 1022, 664, 319, 18055, 1412, 996, 4484, 821, 322, 943, 432, 312, 2163, 32, 664, 319, 477, 753, 310, 886, 1541, 688, 15564, 322, 2163, 32, 664, 569, 334, 763, 943, 2227, 26]}
{"line_number": 1330, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.49247053265571594, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 1330, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.49247053265571594, "per_token_entropy": [], "tokens": []}
{"line_number": 250, "line_type": "original", "code": "      }", "entropy": 5.4453125, "is_bug_line": false, "sus_score": 0.49123576283454895, "per_token_entropy": [7.76953125, 3.123046875], "tokens": [647, 320]}
{"line_number": 250, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.49123576283454895, "per_token_entropy": [], "tokens": []}
{"line_number": 285, "line_type": "original", "code": "   */", "entropy": 6.49609375, "is_bug_line": false, "sus_score": 0.49051129817962646, "per_token_entropy": [8.421875, 4.5703125], "tokens": [261, 569]}
{"line_number": 285, "line_type": "generated", "code": "\n\n  /**\n   * @return Whether the a line break can be added after the specified\n   *         expression.\n   */\n  boolean breakAfterExpression(Node n, boolean statementContext) {\n    return statementContext;\n  }\n\n  /**\n   * @return Whether", "entropy": 0.40625, "is_bug_line": false, "sus_score": 0.49051129817962646, "per_token_entropy": [1.1064453125, 0.448974609375, 0.5615234375, 0.002452850341796875, 1.5859375, 0.2412109375, 0.5615234375, 0.81494140625, 0.951171875, 0.01305389404296875, 0.00722503662109375, 0.07501220703125, 0.005458831787109375, 0.0205535888671875, 0.626953125, 0.1575927734375, 0.066162109375, 1.5439453125, 0.01477813720703125, 2.1484375, 1.6591796875, 0.456298828125, 0.45166015625, 0.09051513671875, 0.06610107421875, 0.06854248046875, 0.059906005859375, 0.03485107421875, 1.0732421875, 0.1947021484375, 0.16650390625, 0.058868408203125, 0.74169921875, 0.05419921875, 1.0078125, 0.000659942626953125, 0.0202178955078125, 0.0035076141357421875, 0.045867919921875, 1.2158203125, 1.4033203125, 0.0003173351287841797, 0.16796875, 0.00962066650390625, 0.000522613525390625, 0.189208984375, 0.2049560546875, 0.136474609375, 0.00144195556640625, 0.413818359375, 0.0633544921875, 0.11419677734375], "tokens": [719, 1022, 664, 319, 477, 601, 14071, 322, 312, 1628, 1626, 883, 526, 3640, 2685, 322, 3191, 664, 319, 263, 6101, 32, 664, 569, 334, 1905, 1626, 5125, 3487, 26, 1212, 310, 30, 1905, 7603, 1222, 27, 301, 284, 442, 7603, 1222, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071]}
{"line_number": 1331, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.4879794120788574, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 1331, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.4879794120788574, "per_token_entropy": [], "tokens": []}
{"line_number": 1121, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.48782071471214294, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 1121, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.48782071471214294, "per_token_entropy": [], "tokens": []}
{"line_number": 1334, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.4870149493217468, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 1334, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.4870149493217468, "per_token_entropy": [], "tokens": []}
{"line_number": 1328, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.4869646430015564, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 1328, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.4869646430015564, "per_token_entropy": [], "tokens": []}
{"line_number": 169, "line_type": "original", "code": "    if (statementContext) {", "entropy": 2.396484375, "is_bug_line": false, "sus_score": 0.48575738072395325, "per_token_entropy": [4.19140625, 4.1015625, 0.2490234375, 4.76953125, 3.263671875, 0.08245849609375, 0.1259765625], "tokens": [264, 415, 308, 9849, 1222, 27, 301]}
{"line_number": 169, "line_type": "generated", "code": "\n    } else if (prev == '>' && first == '>') {\n      // Make sure that we don't emit >>", "entropy": 0.33154296875, "is_bug_line": false, "sus_score": 0.48575738072395325, "per_token_entropy": [0.81103515625, 0.0267791748046875, 0.83154296875, 0.2274169921875, 0.2236328125, 1.2060546875, 0.048919677734375, 2.134765625, 0.407470703125, 0.0555419921875, 0.167724609375, 0.02142333984375, 0.1453857421875, 0.044708251953125, 0.0015153884887695312, 0.122802734375, 0.277587890625, 0.955078125, 0.00209808349609375, 0.163330078125, 0.011749267578125, 0.01538848876953125, 2.467632293701172e-05, 0.0160980224609375, 0.371337890625], "tokens": [284, 320, 813, 415, 308, 5586, 610, 330, 6457, 962, 1932, 610, 330, 22639, 301, 397, 434, 6400, 3654, 688, 996, 2800, 1330, 9533, 3776]}
{"line_number": 254, "line_type": "original", "code": "        add(Long.toString(value));", "entropy": 1.7568359375, "is_bug_line": false, "sus_score": 0.4840036928653717, "per_token_entropy": [8.40625, 2.56640625, 0.35546875, 3.685546875, 0.0010004043579101562, 0.007099151611328125, 0.00518035888671875, 0.73291015625, 0.050079345703125], "tokens": [351, 1015, 26, 3952, 32, 3108, 26, 853, 876]}
{"line_number": 254, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.4840036928653717, "per_token_entropy": [], "tokens": []}
{"line_number": 226, "line_type": "original", "code": "    // operator on the other hand is not. We only line break after a bin op", "entropy": 4.0, "is_bug_line": false, "sus_score": 0.4786494970321655, "per_token_entropy": [3.966796875, 3.732421875, 11.671875, 5.36328125, 1.3779296875, 6.98046875, 2.91015625, 1.8193359375, 2.037109375, 2.115234375, 5.01171875, 4.22265625, 7.0625, 0.6552734375, 2.234375, 3.654296875, 3.8515625, 3.326171875], "tokens": [264, 434, 4134, 544, 322, 1604, 4091, 438, 646, 32, 2688, 1755, 1628, 1626, 2685, 312, 7395, 3089]}
{"line_number": 226, "line_type": "generated", "code": "\n   *\n   * @return true if a block should be added\n   */\n  boolean shouldAddBlock(Node n) {\n    // We do not want to add a block around an if statement that is a\n    // child of a while loop.  In", "entropy": 0.87158203125, "is_bug_line": false, "sus_score": 0.4786494970321655, "per_token_entropy": [0.2001953125, 0.51171875, 0.5498046875, 0.038238525390625, 0.958984375, 0.4560546875, 0.9423828125, 0.359375, 1.7255859375, 1.216796875, 0.931640625, 0.241455078125, 1.4052734375, 1.4501953125, 0.0203399658203125, 0.055328369140625, 0.2200927734375, 0.83544921875, 0.281982421875, 0.2666015625, 0.88232421875, 0.64697265625, 0.299560546875, 0.060699462890625, 0.00170135498046875, 0.1407470703125, 2.34375, 2.82421875, 2.98828125, 0.2254638671875, 1.04296875, 0.319580078125, 0.462158203125, 0.587890625, 0.0176849365234375, 1.2177734375, 2.25390625, 0.7978515625, 0.66650390625, 2.025390625, 2.265625, 2.13671875, 0.5576171875, 0.006473541259765625, 0.490966796875, 0.013519287109375, 0.40576171875, 1.55859375, 1.3349609375, 0.857421875, 0.93505859375, 2.287109375], "tokens": [664, 319, 664, 319, 477, 601, 861, 415, 312, 2163, 1395, 526, 3640, 664, 569, 334, 1905, 1395, 1103, 2227, 26, 1212, 310, 27, 301, 284, 434, 2688, 745, 646, 2637, 372, 1015, 312, 2163, 6835, 600, 415, 7603, 688, 438, 312, 284, 434, 2838, 432, 312, 2218, 5258, 32, 225, 701]}
{"line_number": 1294, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.4781579375267029, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 1294, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.4781579375267029, "per_token_entropy": [], "tokens": []}
{"line_number": 902, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.47736674547195435, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 902, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.47736674547195435, "per_token_entropy": [], "tokens": []}
{"line_number": 245, "line_type": "original", "code": "      if (Math.abs(x) >= 100) {", "entropy": 1.5068359375, "is_bug_line": false, "sus_score": 0.4768337607383728, "per_token_entropy": [8.0234375, 2.912109375, 0.18896484375, 5.375, 0.0113067626953125, 0.6650390625, 0.0186004638671875, 0.8173828125, 0.0732421875, 2.48046875, 0.11541748046875, 0.1302490234375, 1.0146484375, 0.47412109375, 1.7548828125, 0.054901123046875], "tokens": [647, 415, 308, 5717, 32, 3596, 26, 106, 27, 2377, 225, 35, 34, 34, 27, 301]}
{"line_number": 245, "line_type": "generated", "code": "\n  void add(String s) {\n    out.append(s);\n  }\n\n  void add(char c) {\n    out.append(c);\n  }\n\n  void add(boolean b) {\n    out.append(b);\n  }\n\n ", "entropy": 0.36572265625, "is_bug_line": false, "sus_score": 0.4768337607383728, "per_token_entropy": [0.65234375, 1.19921875, 1.357421875, 1.5576171875, 0.428955078125, 0.362060546875, 0.01666259765625, 0.02838134765625, 0.1097412109375, 2.66015625, 0.1849365234375, 0.1737060546875, 0.00388336181640625, 0.01593017578125, 0.01238250732421875, 0.12237548828125, 0.00020992755889892578, 0.1956787109375, 0.669921875, 0.6708984375, 1.421875, 0.5810546875, 0.89208984375, 0.0035839080810546875, 0.0004191398620605469, 0.00832366943359375, 0.1041259765625, 2.968311309814453e-05, 0.0006542205810546875, 0.003253936767578125, 0.0007700920104980469, 0.00018084049224853516, 0.002166748046875, 0.00018405914306640625, 0.11541748046875, 0.470703125, 0.74560546875, 1.29296875, 2.234375, 0.2181396484375, 0.0022430419921875, 0.0015668869018554688, 0.004940032958984375, 0.296142578125, 0.0031986236572265625, 0.00040078163146972656, 0.0029468536376953125, 0.051239013671875, 0.049652099609375, 0.0011548995971679688, 0.00022673606872558594, 0.08514404296875], "tokens": [334, 763, 1015, 26, 652, 309, 27, 301, 284, 963, 32, 1689, 26, 101, 293, 334, 320, 719, 763, 1015, 26, 1594, 281, 27, 301, 284, 963, 32, 1689, 26, 85, 293, 334, 320, 719, 763, 1015, 26, 4398, 323, 27, 301, 284, 963, 32, 1689, 26, 84, 293, 334, 320, 719]}
{"line_number": 990, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.47583910822868347, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 990, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.47583910822868347, "per_token_entropy": [], "tokens": []}
{"line_number": 1162, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.4745367169380188, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 1162, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.4745367169380188, "per_token_entropy": [], "tokens": []}
{"line_number": 181, "line_type": "original", "code": "  void add(String newcode) {", "entropy": 2.021484375, "is_bug_line": false, "sus_score": 0.47446131706237793, "per_token_entropy": [2.185546875, 8.375, 1.2919921875, 2.578125, 0.55078125, 2.82421875, 0.025390625, 0.339111328125, 0.02447509765625], "tokens": [225, 763, 1015, 26, 652, 537, 687, 27, 301]}
{"line_number": 181, "line_type": "generated", "code": "\n  }\n\n  void addComma() {\n    maybeEndStatement();\n    if (getLastChar() == ')') {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"f(1,2)\"\n      append(\"", "entropy": 0.415283203125, "is_bug_line": false, "sus_score": 0.47446131706237793, "per_token_entropy": [0.50634765625, 0.00399017333984375, 0.1531982421875, 0.53564453125, 0.7587890625, 2.296875, 0.296875, 0.0008983612060546875, 0.02099609375, 1.390625, 0.09051513671875, 0.0062408447265625, 0.01001739501953125, 0.60302734375, 1.6923828125, 0.1324462890625, 0.5283203125, 0.00304412841796875, 0.0012493133544921875, 0.289794921875, 1.3193359375, 0.00013184547424316406, 0.0091705322265625, 0.011383056640625, 0.71923828125, 2.63671875, 0.09442138671875, 0.1605224609375, 0.024566650390625, 0.00975799560546875, 0.15380859375, 0.9951171875, 0.03350830078125, 0.0853271484375, 0.07122802734375, 0.3251953125, 0.0124359130859375, 0.059295654296875, 0.10687255859375, 7.176399230957031e-05, 0.2227783203125, 0.01336669921875, 0.3671875, 1.2783203125, 0.0718994140625, 1.2275390625, 0.11175537109375, 0.99169921875, 0.496337890625, 0.54052734375, 0.041015625, 0.08660888671875], "tokens": [334, 320, 719, 763, 1015, 34010, 346, 301, 284, 8762, 2102, 5495, 473, 284, 415, 308, 20197, 2659, 346, 610, 11134, 683, 301, 397, 434, 1348, 438, 646, 10191, 23582, 32, 1348, 438, 372, 9454, 3980, 26801, 432, 397, 434, 6366, 2124, 313, 88, 26, 35, 30, 36, 4731, 397, 5489, 440]}
{"line_number": 247, "line_type": "original", "code": "          mantissa /= 10;", "entropy": 3.3515625, "is_bug_line": false, "sus_score": 0.4737548530101776, "per_token_entropy": [11.1875, 8.359375, 6.78125, 0.0006327629089355469, 3.447265625, 0.31201171875, 0.0018634796142578125, 0.0014324188232421875, 0.05975341796875], "tokens": [2033, 345, 29913, 2496, 14374, 225, 35, 34, 45]}
{"line_number": 247, "line_type": "generated", "code": "\n  /**\n   * @return Whether the a line break can be added after the specified node.\n   */\n  boolean breakAfter(Node n) {\n    return false;\n  }\n\n  /**\n   * @return Whether the a line break can be added before the", "entropy": 0.273193359375, "is_bug_line": false, "sus_score": 0.4737548530101776, "per_token_entropy": [0.84326171875, 1.228515625, 0.51123046875, 0.003475189208984375, 1.775390625, 0.3056640625, 0.71728515625, 0.92041015625, 0.96533203125, 0.016326904296875, 0.007701873779296875, 0.080078125, 0.007587432861328125, 0.025634765625, 0.473876953125, 0.1656494140625, 0.08026123046875, 0.97412109375, 0.1282958984375, 0.005405426025390625, 0.06304931640625, 0.005802154541015625, 0.07244873046875, 0.045806884765625, 0.03369140625, 0.052825927734375, 0.055908203125, 0.0279693603515625, 0.418701171875, 0.002773284912109375, 0.05194091796875, 1.376953125, 0.943359375, 0.0004210472106933594, 0.00795745849609375, 0.0008573532104492188, 0.14404296875, 0.331298828125, 0.2120361328125, 0.0009613037109375, 0.42333984375, 0.06585693359375, 0.130615234375, 0.1634521484375, 0.09954833984375, 0.005222320556640625, 0.0012998580932617188, 0.04541015625, 0.0033817291259765625, 0.01432037353515625, 0.1551513671875, 0.007694244384765625], "tokens": [334, 1022, 664, 319, 477, 601, 14071, 322, 312, 1628, 1626, 883, 526, 3640, 2685, 322, 3191, 1541, 32, 664, 569, 334, 1905, 1626, 5125, 26, 1212, 310, 27, 301, 284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 312, 1628, 1626, 883, 526, 3640, 2670, 322]}
{"line_number": 900, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.47319039702415466, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 900, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.47319039702415466, "per_token_entropy": [], "tokens": []}
{"line_number": 903, "line_type": "original", "code": "", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.47254812717437744, "per_token_entropy": [0.279296875], "tokens": [203]}
{"line_number": 903, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.47254812717437744, "per_token_entropy": [], "tokens": []}
{"line_number": 251, "line_type": "original", "code": "      if (exp > 2) {", "entropy": 2.921875, "is_bug_line": false, "sus_score": 0.47237759828567505, "per_token_entropy": [7.68359375, 2.90234375, 0.1773681640625, 8.6875, 2.111328125, 0.2705078125, 2.869140625, 1.5205078125, 0.07611083984375], "tokens": [647, 415, 308, 2832, 848, 225, 36, 27, 301]}
{"line_number": 251, "line_type": "generated", "code": "\n\n  /**\n   * @return The indentation level.\n   */\n  int getIndent() {\n    return indent;\n  }\n\n  /**\n   * @param indent The new indentation level.\n   */\n  void setIndent(int indent) {\n    this.indent =", "entropy": 0.366943359375, "is_bug_line": false, "sus_score": 0.47237759828567505, "per_token_entropy": [1.833984375, 0.76513671875, 0.47216796875, 0.0016422271728515625, 1.751953125, 0.333740234375, 1.861328125, 2.56640625, 1.47265625, 1.771484375, 0.377685546875, 0.02801513671875, 0.0038204193115234375, 0.246337890625, 0.256103515625, 0.60595703125, 0.7021484375, 0.0011720657348632812, 0.019561767578125, 0.0596923828125, 0.1246337890625, 0.4912109375, 0.0007681846618652344, 0.0007252693176269531, 0.0777587890625, 0.25732421875, 0.10797119140625, 0.0016040802001953125, 0.912109375, 0.76953125, 0.36962890625, 0.2919921875, 0.2303466796875, 0.056976318359375, 0.017791748046875, 0.09613037109375, 0.034393310546875, 0.0059356689453125, 0.00106048583984375, 0.0277099609375, 0.03955078125, 0.0006270408630371094, 0.00045418739318847656, 0.0020599365234375, 0.002552032470703125, 0.0003941059112548828, 0.000621795654296875, 0.0032520294189453125, 0.0262603759765625, 9.524822235107422e-05, 0.0010824203491210938, 0.0006804466247558594], "tokens": [719, 1022, 664, 319, 477, 601, 886, 33166, 3193, 32, 664, 569, 334, 629, 622, 13491, 346, 301, 284, 442, 10525, 45, 334, 320, 719, 1022, 664, 319, 477, 753, 10525, 886, 537, 33166, 3193, 32, 664, 569, 334, 763, 739, 13491, 26, 410, 10525, 27, 301, 284, 458, 32, 9378, 280]}
