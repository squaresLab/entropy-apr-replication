{"line_number": 1367, "line_type": "original", "code": "", "entropy": 0.1380615234375, "is_bug_line": false, "sus_score": 0.600878894329071, "per_token_entropy": [0.1380615234375], "tokens": [203]}
{"line_number": 1367, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.600878894329071, "per_token_entropy": [], "tokens": []}
{"line_number": 1368, "line_type": "original", "code": "", "entropy": 0.1380615234375, "is_bug_line": false, "sus_score": 0.600878894329071, "per_token_entropy": [0.1380615234375], "tokens": [203]}
{"line_number": 1368, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.600878894329071, "per_token_entropy": [], "tokens": []}
{"line_number": 1369, "line_type": "original", "code": "", "entropy": 0.1380615234375, "is_bug_line": false, "sus_score": 0.5979154706001282, "per_token_entropy": [0.1380615234375], "tokens": [203]}
{"line_number": 1369, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5979154706001282, "per_token_entropy": [], "tokens": []}
{"line_number": 1196, "line_type": "original", "code": "", "entropy": 0.1380615234375, "is_bug_line": false, "sus_score": 0.5809271931648254, "per_token_entropy": [0.1380615234375], "tokens": [203]}
{"line_number": 1196, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5809271931648254, "per_token_entropy": [], "tokens": []}
{"line_number": 1172, "line_type": "original", "code": "", "entropy": 0.1380615234375, "is_bug_line": false, "sus_score": 0.5784593224525452, "per_token_entropy": [0.1380615234375], "tokens": [203]}
{"line_number": 1172, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5784593224525452, "per_token_entropy": [], "tokens": []}
{"line_number": 918, "line_type": "original", "code": "", "entropy": 4.2578125, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [4.2578125], "tokens": [203]}
{"line_number": 918, "line_type": "generated", "code": "      // not a valid RegExp\n      return n;\n    }\n\n    String regexp = pattern.getString();\n\n    // Check for escaped forward slashes\n    regexp = regexp.replaceAll(\"\\\\\\\\/\", \"/\");\n\n    // Check for trailing forward slash\n    regexp = regexp.replaceAll", "entropy": 0.81787109375, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [1.310546875, 0.921875, 3.466796875, 1.021484375, 1.01953125, 0.98583984375, 2.392578125, 0.171630859375, 0.020355224609375, 0.0007352828979492188, 0.01441192626953125, 0.00014221668243408203, 0.183837890625, 1.1474609375, 2.1015625, 1.1357421875, 0.2218017578125, 0.005420684814453125, 0.09173583984375, 0.034210205078125, 1.1396484375, 1.326171875, 2.970703125, 1.0283203125, 3.28515625, 1.279296875, 0.260986328125, 0.0007562637329101562, 1.794921875, 1.94140625, 0.00360107421875, 0.0811767578125, 0.0036754608154296875, 0.25, 0.067626953125, 0.00279998779296875, 0.42578125, 0.1419677734375, 0.0005984306335449219, 0.203125, 0.63037109375, 1.0859375, 0.283203125, 4.33203125, 1.1591796875, 0.93359375, 0.60986328125, 0.91943359375, 0.006404876708984375, 0.04156494140625, 0.002010345458984375, 0.0679931640625], "tokens": [647, 434, 646, 312, 2080, 20368, 397, 442, 310, 45, 284, 320, 446, 892, 21189, 280, 5257, 32, 7069, 473, 446, 434, 3456, 436, 31253, 7386, 5439, 16670, 284, 21189, 280, 21189, 32, 23358, 440, 11468, 10590, 2430, 724, 446, 434, 3456, 436, 19938, 7386, 29659, 284, 21189, 280, 21189, 32, 23358]}
{"line_number": 1018, "line_type": "original", "code": "   * are the given flags valid regular expression flags?", "entropy": 2.66796875, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [6.57421875, 3.33984375, 7.50390625, 2.287109375, 0.5390625, 1.9951171875, 2.55078125, 4.15234375, 0.04010009765625, 0.2384033203125, 0.11724853515625], "tokens": [261, 319, 884, 322, 2702, 5736, 2080, 10605, 6101, 5736, 49]}
{"line_number": 1018, "line_type": "generated", "code": "\n  /**\n   * Returns true if {@code s} contains a unicode escape sequence.\n   */\n  private static boolean containsUnicodeEscape(String s) {\n    for (int i = 0; i < s.length(); i++) {\n      if (", "entropy": 0.277099609375, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [0.681640625, 0.66015625, 0.19384765625, 0.000644683837890625, 2.4140625, 0.71142578125, 0.126953125, 1.6337890625, 0.007244110107421875, 1.3203125, 0.017333984375, 0.0682373046875, 1.2041015625, 0.495849609375, 0.0430908203125, 1.2021484375, 0.421142578125, 0.1038818359375, 0.309326171875, 0.0074920654296875, 0.071044921875, 0.0953369140625, 0.0095977783203125, 0.0008296966552734375, 0.0001722574234008789, 6.556510925292969e-06, 0.001445770263671875, 0.0034503936767578125, 0.0043792724609375, 0.0008764266967773438, 0.0006299018859863281, 0.00875091552734375, 0.94384765625, 0.0012798309326171875, 0.00571441650390625, 0.023284912109375, 0.0024585723876953125, 0.016357421875, 0.02001953125, 0.11199951171875, 0.00039124488830566406, 0.0120697021484375, 0.0004379749298095703, 2.181529998779297e-05, 0.00012886524200439453, 0.0418701171875, 0.79931640625, 0.006053924560546875, 0.0005860328674316406, 0.005153656005859375, 0.46240234375, 0.14404296875], "tokens": [334, 1022, 664, 319, 3759, 861, 415, 3088, 687, 309, 111, 4304, 312, 15390, 15820, 6613, 32, 664, 569, 334, 945, 907, 1905, 4304, 14923, 19033, 26, 652, 309, 27, 301, 284, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 309, 32, 1322, 473, 595, 1987, 301, 397, 415, 308]}
{"line_number": 1024, "line_type": "original", "code": "  private static boolean areValidRegexpFlags(String flags) {", "entropy": 1.609375, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [4.23828125, 9.6796875, 0.08453369140625, 1.916015625, 4.48046875, 0.084716796875, 0.00856781005859375, 0.0005850791931152344, 0.01331329345703125, 0.0248870849609375, 0.315185546875, 0.013397216796875, 0.054534912109375], "tokens": [225, 945, 907, 1905, 884, 2303, 29583, 4629, 26, 652, 5736, 27, 301]}
{"line_number": 1024, "line_type": "generated", "code": "    return esc.length()!= s.length();\n  }\n\n  /**\n   * True if the given node is a GETPROP node whose first child is a NAME\n   * node whose value is \"RegExp\".\n   */\n  private boolean isRegExp(Node n", "entropy": 0.61962890625, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [1.5009765625, 0.35498046875, 0.5009765625, 0.08843994140625, 0.60986328125, 0.00255584716796875, 0.09088134765625, 0.00360107421875, 0.00033783912658691406, 0.0003485679626464844, 0.022247314453125, 0.052276611328125, 5.4717063903808594e-05, 0.72998046875, 0.468017578125, 0.05389404296875, 0.0007228851318359375, 4.0859375, 0.2120361328125, 0.7001953125, 1.4853515625, 1.5615234375, 0.49609375, 0.3359375, 3.296875, 0.7958984375, 1.1435546875, 1.25390625, 1.4267578125, 0.11871337890625, 0.09844970703125, 1.208984375, 0.974609375, 0.8935546875, 0.004642486572265625, 0.1339111328125, 1.3447265625, 0.90234375, 0.05352783203125, 0.671875, 1.16796875, 0.47705078125, 0.07989501953125, 0.055877685546875, 0.026885986328125, 0.2408447265625, 0.99267578125, 0.0198516845703125, 0.440185546875, 0.99462890625, 0.0007090568542480469, 0.048919677734375], "tokens": [264, 442, 15050, 32, 1322, 346, 863, 309, 32, 1322, 473, 334, 320, 719, 1022, 664, 319, 2933, 415, 322, 2702, 1541, 438, 312, 6272, 15262, 1541, 13696, 1932, 2838, 438, 312, 8912, 664, 319, 1541, 13696, 786, 438, 313, 28258, 2296, 664, 569, 334, 945, 1905, 438, 28258, 26, 1212, 310]}
{"line_number": 1025, "line_type": "original", "code": "    return REGEXP_FLAGS_RE.matcher(flags).matches();", "entropy": 1.923828125, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [3.37109375, 5.015625, 13.5390625, 0.035247802734375, 0.01080322265625, 2.43359375, 0.004093170166015625, 0.060211181640625, 0.0059814453125, 0.0941162109375, 0.00930023193359375, 3.103515625, 0.9677734375, 0.164306640625, 0.048736572265625], "tokens": [264, 442, 11752, 12275, 81, 6880, 81, 613, 32, 16937, 26, 4545, 547, 8933, 473]}
{"line_number": 1025, "line_type": "generated", "code": "\n    }\n    return false;\n  }\n\n  /**\n   * Converts a string to a regexp by escaping special characters.\n   *\n   * @param s The string to escape.\n   * @return An escaped string that can be used as a regexp.\n  ", "entropy": 0.5927734375, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [0.27734375, 0.005130767822265625, 0.094970703125, 0.053192138671875, 0.039154052734375, 0.0014677047729492188, 0.01375579833984375, 0.0011053085327148438, 0.83740234375, 0.64599609375, 0.06512451171875, 0.0005979537963867188, 4.37890625, 0.94873046875, 1.634765625, 1.2353515625, 0.4921875, 1.603515625, 1.98828125, 0.767578125, 0.00032067298889160156, 1.2880859375, 0.302978515625, 0.380859375, 0.174072265625, 0.330810546875, 1.63671875, 0.008026123046875, 1.0302734375, 0.24609375, 0.39404296875, 1.0703125, 0.1549072265625, 0.211669921875, 0.2900390625, 0.35205078125, 0.051666259765625, 0.04718017578125, 0.037811279296875, 0.05322265625, 1.3046875, 0.044891357421875, 0.43701171875, 1.8193359375, 0.56787109375, 0.399169921875, 0.62744140625, 0.54443359375, 0.356201171875, 0.75048828125, 0.7939453125, 0.0382080078125], "tokens": [284, 320, 284, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 25337, 312, 802, 372, 312, 21189, 810, 40777, 299, 7456, 7125, 32, 664, 319, 664, 319, 477, 753, 309, 886, 802, 372, 15820, 32, 664, 319, 477, 601, 2244, 31253, 802, 688, 883, 526, 1654, 619, 312, 21189, 32, 664]}
{"line_number": 929, "line_type": "original", "code": "      action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;", "entropy": 1.2080078125, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [5.0, 13.09375, 0.08428955078125, 0.2822265625, 0.09100341796875, 0.0002601146697998047, 0.0018768310546875, 0.01107025146484375, 0.00015604496002197266, 0.00018668174743652344, 1.3709068298339844e-05, 0.0003485679626464844, 0.0131988525390625, 1.939453125, 5.53131103515625e-05, 0.0009589195251464844, 0.0197601318359375], "tokens": [647, 2125, 280, 40809, 1261, 1711, 32, 24154, 81, 1407, 81, 42673, 81, 26510, 81, 12896, 45]}
{"line_number": 929, "line_type": "generated", "code": "\n\n        // make sure flags are all valid\n        && (null == flags\n            || isRegExpFlagsValid(flags.getString()))) {\n      // NOTE(nicksantos): We can't just return the new regexp, because\n      // the parent might be an", "entropy": 0.92236328125, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [1.35546875, 0.320556640625, 1.5146484375, 0.003185272216796875, 1.044921875, 0.58935546875, 1.75390625, 0.724609375, 0.2841796875, 0.042999267578125, 1.015625, 0.609375, 0.013336181640625, 0.0008597373962402344, 0.72265625, 0.04376220703125, 2.591796875, 1.3232421875, 1.5029296875, 1.73046875, 0.03533935546875, 0.13037109375, 0.39013671875, 0.0159454345703125, 0.375732421875, 0.00751495361328125, 0.57275390625, 1.005859375, 3.7890625, 0.1048583984375, 0.11846923828125, 0.00026345252990722656, 0.0005750656127929688, 1.2040138244628906e-05, 0.0175323486328125, 2.3046875, 1.66015625, 0.52880859375, 1.3056640625, 3.13671875, 0.8388671875, 1.3623046875, 1.537109375, 2.0078125, 0.7373046875, 0.78076171875, 0.002674102783203125, 1.482421875, 2.1875, 1.2490234375, 0.72314453125, 2.384765625], "tokens": [584, 434, 1930, 3654, 5736, 884, 1169, 2080, 291, 962, 308, 1693, 610, 5736, 324, 1276, 438, 28258, 4629, 2303, 26, 4545, 32, 7069, 28214, 301, 397, 434, 12114, 26, 96, 6758, 278, 10369, 711, 2688, 883, 1330, 2258, 442, 322, 537, 21189, 30, 3301, 397, 434, 322, 2935, 4796, 526, 600]}
{"line_number": 963, "line_type": "original", "code": "    if (!isASTNormalized()) {", "entropy": 3.07421875, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [7.625, 2.517578125, 2.109375, 2.427734375, 9.4140625, 0.0015201568603515625, 0.45849609375, 0.03857421875], "tokens": [264, 415, 1429, 297, 4375, 29814, 1157, 301]}
{"line_number": 963, "line_type": "generated", "code": "\n  }\n\n  private boolean areValidRegexpFlags(String flags) {\n    for (int i = 0; i < flags.length(); i++) {\n      char flag = flags.charAt(i);\n      if (flag!= 'g' && flag", "entropy": 0.171142578125, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [0.31591796875, 0.09832763671875, 0.215576171875, 0.92333984375, 1.3955078125, 0.6005859375, 0.392822265625, 0.004306793212890625, 2.9921531677246094e-05, 0.001056671142578125, 0.0036067962646484375, 0.300048828125, 0.08807373046875, 0.0008611679077148438, 0.0275726318359375, 0.7236328125, 0.005748748779296875, 0.0733642578125, 0.0260772705078125, 0.01849365234375, 0.00274658203125, 0.0013275146484375, 0.282958984375, 0.0014982223510742188, 0.031982421875, 0.0008187294006347656, 2.753734588623047e-05, 0.0004799365997314453, 0.0025348663330078125, 0.2181396484375, 0.0050048828125, 0.0014314651489257812, 0.00972747802734375, 0.90966796875, 0.6650390625, 0.0111083984375, 0.0138092041015625, 4.744529724121094e-05, 0.00482940673828125, 5.4001808166503906e-05, 0.00016939640045166016, 0.000392913818359375, 0.03302001953125, 0.1734619140625, 0.461669921875, 0.2127685546875, 0.2039794921875, 0.06915283203125, 0.244140625, 0.00142669677734375, 0.0303955078125, 0.0894775390625], "tokens": [334, 320, 719, 945, 1905, 884, 2303, 29583, 4629, 26, 652, 5736, 27, 301, 284, 436, 308, 410, 595, 280, 225, 34, 45, 595, 333, 5736, 32, 1322, 473, 595, 1987, 301, 397, 1351, 4655, 280, 5736, 32, 15611, 26, 91, 293, 397, 415, 308, 4555, 863, 330, 89, 25, 962, 4655]}
{"line_number": 966, "line_type": "original", "code": "", "entropy": 4.08203125, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [4.08203125], "tokens": [203]}
{"line_number": 966, "line_type": "generated", "code": "\n  private static boolean areValidRegexpFlags(String flags) {\n    return REGEXP_FLAGS_RE.matcher(flags).matches();\n  }\n\n  private static final Pattern SAFE_REGEXP_FLAGS_RE = Pattern.compile(\"^[gim", "entropy": 0.158203125, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [0.2095947265625, 0.43603515625, 0.74951171875, 0.147705078125, 0.023223876953125, 0.04193115234375, 0.0008783340454101562, 8.702278137207031e-06, 0.002460479736328125, 0.0042877197265625, 0.230712890625, 0.068359375, 0.0010976791381835938, 0.0210113525390625, 0.212890625, 0.31103515625, 5.364418029785156e-06, 9.226799011230469e-05, 6.73532485961914e-05, 2.574920654296875e-05, 5.614757537841797e-05, 0.0003826618194580078, 0.019195556640625, 0.00035190582275390625, 0.0018663406372070312, 0.0035648345947265625, 0.0261993408203125, 0.005645751953125, 0.006877899169921875, 0.00023925304412841797, 0.482666015625, 0.8740234375, 0.46630859375, 0.464111328125, 0.256103515625, 0.275634765625, 9.167194366455078e-05, 0.0008182525634765625, 0.67431640625, 0.01154327392578125, 0.0015192031860351562, 0.01241302490234375, 0.1356201171875, 0.04345703125, 0.045745849609375, 0.63232421875, 0.0295562744140625, 0.0005707740783691406, 0.314453125, 0.2110595703125, 0.47705078125, 0.291015625], "tokens": [334, 945, 907, 1905, 884, 2303, 29583, 4629, 26, 652, 5736, 27, 301, 284, 442, 11752, 12275, 81, 6880, 81, 613, 32, 16937, 26, 4545, 547, 8933, 473, 334, 320, 719, 945, 907, 1158, 13409, 19217, 4666, 81, 4733, 12275, 81, 6880, 81, 613, 280, 13409, 32, 6993, 29318, 77, 89, 449]}
{"line_number": 976, "line_type": "original", "code": "", "entropy": 3.9765625, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [3.9765625], "tokens": [203]}
{"line_number": 976, "line_type": "generated", "code": "\n  }\n\n  /**\n   * are the given flags safe to fold into the regexp literal?\n   * If not, we should leave them in the constructor call.\n   */\n  private static boolean areSafeFlagsToFold(String flags) {\n    return \"g", "entropy": 0.50341796875, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [0.226318359375, 0.06634521484375, 0.1202392578125, 0.30615234375, 0.0697021484375, 0.0001361370086669922, 0.8310546875, 0.1510009765625, 0.1278076171875, 0.05621337890625, 0.440673828125, 0.06573486328125, 0.03955078125, 0.62890625, 1.1982421875, 0.84814453125, 0.625, 0.22900390625, 0.07720947265625, 0.1722412109375, 3.177734375, 1.4296875, 0.054473876953125, 1.3291015625, 1.48828125, 1.8359375, 1.052734375, 1.3828125, 0.478515625, 1.26171875, 1.52734375, 1.0048828125, 0.06378173828125, 0.382080078125, 0.007251739501953125, 0.029296875, 0.1741943359375, 0.004058837890625, 0.0002675056457519531, 8.368492126464844e-05, 6.61611557006836e-05, 2.4199485778808594e-05, 1.0728836059570312e-06, 0.0001271963119506836, 0.0009150505065917969, 0.00679779052734375, 0.001987457275390625, 0.0005731582641601562, 0.036102294921875, 1.1259765625, 1.490234375, 0.54345703125], "tokens": [334, 320, 719, 1022, 664, 319, 884, 322, 2702, 5736, 10061, 372, 11426, 1991, 322, 21189, 10652, 49, 664, 319, 1670, 646, 30, 996, 1395, 11883, 3026, 328, 322, 4374, 1476, 32, 664, 569, 334, 945, 907, 1905, 884, 11691, 4629, 705, 15483, 26, 652, 5736, 27, 301, 284, 442, 313, 89]}
{"line_number": 977, "line_type": "original", "code": "        // NOTE(nicksantos): Make sure that the regexp isn't longer than", "entropy": 2.4140625, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [10.609375, 0.5390625, 6.3671875, 1.4638671875, 0.24267578125, 0.002483367919921875, 0.0001062154769897461, 0.000423431396484375, 0.02093505859375, 5.55859375, 0.50830078125, 1.9853515625, 1.6591796875, 3.162109375, 4.65625, 0.0007967948913574219, 6.171875, 0.498291015625], "tokens": [351, 434, 12114, 26, 96, 6758, 278, 10369, 711, 6400, 3654, 688, 322, 21189, 7735, 1330, 8928, 2784]}
{"line_number": 977, "line_type": "generated", "code": "\n  /**\n   * are the given flags safe to fold into a regular expression literal?\n   * This method is used to prevent the folding of regular expressions that\n   * contain flags that are not valid or safe to fold.\n   *\n   * For example,", "entropy": 0.80810546875, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [0.59619140625, 0.345703125, 0.087646484375, 0.0006771087646484375, 0.7734375, 0.1412353515625, 0.12420654296875, 0.0472412109375, 0.4326171875, 0.07452392578125, 0.03619384765625, 0.70556640625, 0.5068359375, 1.1201171875, 0.00699615478515625, 0.52294921875, 0.136474609375, 0.0187835693359375, 0.15576171875, 2.7421875, 2.275390625, 1.7509765625, 1.78515625, 0.5078125, 2.158203125, 2.099609375, 1.623046875, 0.0259246826171875, 0.042816162109375, 1.2099609375, 0.5263671875, 0.99951171875, 0.287353515625, 0.0001494884490966797, 2.080078125, 1.958984375, 0.498046875, 0.9794921875, 0.7841796875, 1.5869140625, 2.68359375, 1.7080078125, 0.406005859375, 0.06549072265625, 0.62646484375, 0.447021484375, 0.8349609375, 1.1064453125, 0.01131439208984375, 2.138671875, 0.1121826171875, 0.145751953125], "tokens": [334, 1022, 664, 319, 884, 322, 2702, 5736, 10061, 372, 11426, 1991, 312, 10605, 6101, 10652, 49, 664, 319, 1348, 1411, 438, 1654, 372, 9454, 322, 11426, 299, 432, 10605, 15866, 688, 664, 319, 4799, 5736, 688, 884, 646, 2080, 556, 10061, 372, 11426, 32, 664, 319, 664, 319, 2616, 2280, 30]}
{"line_number": 978, "line_type": "original", "code": "        // 100 chars, or it blows up the regexp parser in Opera 9.2.", "entropy": 3.005859375, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [9.421875, 1.2880859375, 3.947265625, 1.021484375, 2.05078125, 0.861328125, 4.7265625, 3.287109375, 4.35546875, 6.92578125, 7.98046875, 0.0016355514526367188, 0.442138671875, 2.6875, 3.541015625, 1.96875, 1.8046875, 5.37109375, 1.7294921875, 0.76220703125, 0.305908203125, 1.34765625, 3.29296875], "tokens": [351, 434, 225, 35, 34, 34, 16656, 30, 556, 561, 46882, 101, 973, 322, 21189, 4118, 328, 47129, 225, 43, 32, 36, 32]}
{"line_number": 978, "line_type": "generated", "code": "\n  private static boolean areSafeFlagsToFold(String flags) {\n    // don't fold flags if they're being used\n    if (flags.contains(\"g\")\n        || flags.contains(\"i\")\n        || flags.contains(\"m\")) {\n     ", "entropy": 0.46630859375, "is_bug_line": false, "sus_score": 0.5421396493911743, "per_token_entropy": [0.257568359375, 0.63818359375, 0.55615234375, 0.282470703125, 0.1893310546875, 0.0057525634765625, 0.002384185791015625, 0.0003795623779296875, 4.565715789794922e-05, 0.0005245208740234375, 0.003139495849609375, 0.0216064453125, 0.0048370361328125, 0.0020904541015625, 0.035980224609375, 1.484375, 3.787109375, 0.0005245208740234375, 0.375, 1.6474609375, 1.5419921875, 1.1396484375, 2.203125, 2.80859375, 0.39404296875, 1.5947265625, 1.0771484375, 0.18701171875, 0.388916015625, 0.01050567626953125, 0.72998046875, 0.02398681640625, 0.2197265625, 0.367919921875, 1.4912109375, 0.04315185546875, 0.0216522216796875, 2.205371856689453e-05, 0.00044274330139160156, 0.0006957054138183594, 0.10858154296875, 0.1800537109375, 0.0404052734375, 0.053314208984375, 0.025299072265625, 5.7816505432128906e-05, 0.0012788772583007812, 0.001094818115234375, 0.00555419921875, 0.256103515625, 0.0022068023681640625, 0.0300445556640625], "tokens": [334, 945, 907, 1905, 884, 11691, 4629, 705, 15483, 26, 652, 5736, 27, 301, 284, 434, 2800, 1330, 11426, 5736, 415, 2953, 4484, 3998, 1654, 284, 415, 308, 4545, 32, 4752, 440, 89, 657, 291, 1276, 5736, 32, 4752, 440, 91, 657, 291, 1276, 5736, 32, 4752, 440, 95, 2131, 301, 397]}
{"line_number": 980, "line_type": "original", "code": "", "entropy": 5.25, "is_bug_line": false, "sus_score": 0.5405203104019165, "per_token_entropy": [5.25], "tokens": [203]}
{"line_number": 980, "line_type": "generated", "code": "\n   *\n   * @param flags\n   * @return\n   */\n  private static boolean areSafeFlagsToFold(String flags) {\n    return \"g\".equals(flags) || \"gi\".equals(flags);\n  }\n\n  private static final Pattern UNICODE", "entropy": 0.35400390625, "is_bug_line": false, "sus_score": 0.5405203104019165, "per_token_entropy": [0.298095703125, 0.414794921875, 1.9951171875, 0.013092041015625, 2.2109375, 0.373046875, 0.03076171875, 1.3134765625, 0.2352294921875, 0.0791015625, 0.0037326812744140625, 0.443115234375, 0.0221099853515625, 0.012176513671875, 0.053985595703125, 0.299072265625, 0.00353240966796875, 0.0004367828369140625, 0.0001068115234375, 0.00018680095672607422, 8.118152618408203e-05, 6.67572021484375e-06, 0.0005612373352050781, 0.0014371871948242188, 0.00151824951171875, 0.0011930465698242188, 0.003314971923828125, 0.0894775390625, 0.99853515625, 1.75, 0.61181640625, 0.238525390625, 0.042144775390625, 0.0005102157592773438, 0.0045013427734375, 0.69775390625, 0.31298828125, 0.326171875, 0.59228515625, 0.0007805824279785156, 0.0002880096435546875, 8.344650268554688e-06, 8.499622344970703e-05, 0.24609375, 0.054443359375, 0.0018358230590820312, 0.345458984375, 1.14453125, 0.7001953125, 1.1689453125, 0.12030029296875, 1.1474609375], "tokens": [664, 319, 664, 319, 477, 753, 5736, 664, 319, 477, 601, 664, 569, 334, 945, 907, 1905, 884, 11691, 4629, 705, 15483, 26, 652, 5736, 27, 301, 284, 442, 313, 89, 2296, 3574, 26, 4545, 27, 1276, 313, 5123, 2296, 3574, 26, 4545, 293, 334, 320, 719, 945, 907, 1158, 13409, 49134]}
{"line_number": 821, "line_type": "original", "code": "      reportCodeChange();", "entropy": 1.9765625, "is_bug_line": false, "sus_score": 0.5391905307769775, "per_token_entropy": [6.640625, 3.1640625, 0.02923583984375, 0.00012576580047607422, 0.046142578125], "tokens": [647, 3639, 1227, 1791, 473]}
{"line_number": 821, "line_type": "generated", "code": "\n\n    // We don't want to fold the constructor of a local function\n    // because that would change the semantics of the program.\n    if (constructorNameNode.getType() == Token.NAME\n        &&!isLocalName(constructorNameNode.getString()))", "entropy": 0.7099609375, "is_bug_line": false, "sus_score": 0.5391905307769775, "per_token_entropy": [0.7109375, 1.279296875, 2.783203125, 2.17578125, 0.0001804828643798828, 1.1669921875, 0.032806396484375, 1.900390625, 2.267578125, 2.109375, 1.4482421875, 0.982421875, 0.6767578125, 0.267333984375, 1.66796875, 0.334716796875, 1.62109375, 1.2822265625, 1.220703125, 1.16796875, 0.208984375, 1.5419921875, 0.7109375, 0.26171875, 0.578125, 0.2734375, 0.08905029296875, 0.62353515625, 0.11273193359375, 0.2037353515625, 0.00356292724609375, 0.0012149810791015625, 0.1671142578125, 0.06585693359375, 0.0012874603271484375, 0.252197265625, 0.00041866302490234375, 1.9431114196777344e-05, 0.0301361083984375, 0.796875, 0.0309600830078125, 1.1962890625, 1.115234375, 0.81201171875, 1.6572265625, 0.2734375, 0.22314453125, 0.00016069412231445312, 7.259845733642578e-05, 0.379150390625, 0.025299072265625, 0.1834716796875], "tokens": [446, 434, 2688, 2800, 1330, 2637, 372, 11426, 322, 4374, 432, 312, 2196, 667, 284, 434, 3301, 688, 2268, 1539, 322, 26139, 432, 322, 3460, 32, 284, 415, 308, 9430, 558, 1212, 32, 10272, 346, 610, 6512, 32, 2474, 291, 962, 653, 297, 3325, 558, 26, 9430, 558, 1212, 32, 7069, 5156]}
{"line_number": 2190, "line_type": "original", "code": "", "entropy": 0.1380615234375, "is_bug_line": false, "sus_score": 0.5390111804008484, "per_token_entropy": [0.1380615234375], "tokens": [203]}
{"line_number": 2190, "line_type": "generated", "code": "", "entropy": "10", "is_bug_line": false, "sus_score": 0.5390111804008484, "per_token_entropy": [], "tokens": []}
{"line_number": 1017, "line_type": "original", "code": "  /**", "entropy": 3.01171875, "is_bug_line": false, "sus_score": 0.5389193892478943, "per_token_entropy": [4.88671875, 1.138671875], "tokens": [225, 1022]}
{"line_number": 1017, "line_type": "generated", "code": "\n\n  /**\n   * returns true if the given string contains a unicode escape.\n   */\n  private static boolean containsUnicodeEscape(String s) {\n    int slashU = s.indexOf(\"\\\\u\");\n    while (slashU!= -1) {\n      int", "entropy": 0.33056640625, "is_bug_line": false, "sus_score": 0.5389193892478943, "per_token_entropy": [0.435546875, 0.261474609375, 0.0535888671875, 0.00042366981506347656, 3.033203125, 0.64990234375, 0.15185546875, 0.525390625, 0.93408203125, 0.474609375, 0.1859130859375, 1.119140625, 0.17236328125, 0.06475830078125, 0.94873046875, 0.03851318359375, 0.372314453125, 0.0059661865234375, 0.037841796875, 0.06951904296875, 0.0076446533203125, 0.0005602836608886719, 0.0001653432846069336, 4.0531158447265625e-06, 0.0009202957153320312, 0.00157928466796875, 0.10382080078125, 0.0006518363952636719, 0.0006780624389648438, 0.00714874267578125, 1.8671875, 1.7880859375, 0.460205078125, 0.4658203125, 0.320556640625, 2.1576881408691406e-05, 0.088623046875, 0.2120361328125, 0.0004222393035888672, 0.022125244140625, 0.034912109375, 0.5361328125, 0.0399169921875, 0.012542724609375, 1.1920928955078125e-07, 0.5927734375, 0.00415802001953125, 0.0006847381591796875, 0.023223876953125, 0.000698089599609375, 0.016876220703125, 1.046875], "tokens": [719, 1022, 664, 319, 3217, 861, 415, 322, 2702, 802, 4304, 312, 15390, 15820, 32, 664, 569, 334, 945, 907, 1905, 4304, 14923, 19033, 26, 652, 309, 27, 301, 284, 629, 29659, 71, 280, 309, 32, 7142, 22899, 103, 724, 284, 2218, 308, 16227, 71, 863, 429, 35, 27, 301, 397, 629]}
{"line_number": 1036, "line_type": "original", "code": "  private static boolean areSafeFlagsToFold(String flags) {", "entropy": 0.58740234375, "is_bug_line": false, "sus_score": 0.538299024105072, "per_token_entropy": [5.12109375, 1.583984375, 0.315185546875, 0.76513671875, 0.33544921875, 0.01483917236328125, 0.0238037109375, 0.0002803802490234375, 4.1484832763671875e-05, 0.0008349418640136719, 0.01435089111328125, 0.03448486328125, 0.00518798828125, 0.0146026611328125], "tokens": [225, 945, 907, 1905, 884, 11691, 4629, 705, 15483, 26, 652, 5736, 27, 301]}
{"line_number": 1036, "line_type": "generated", "code": "\n  private static final Pattern SAFE_FLAGS_RE = Pattern.compile(\"^[gim]*$\");\n\n  /**\n   * true if the flags are safe to fold.\n   * This means that they are a subset of the flags that are recognized by\n  ", "entropy": 0.60986328125, "is_bug_line": false, "sus_score": 0.538299024105072, "per_token_entropy": [1.91796875, 0.99267578125, 0.402099609375, 0.916015625, 0.5634765625, 0.92578125, 2.3245811462402344e-05, 0.003753662109375, 0.77587890625, 0.1744384765625, 0.403076171875, 0.044677734375, 0.4990234375, 0.00299072265625, 0.00743865966796875, 0.322021484375, 0.2103271484375, 0.765625, 0.43017578125, 0.61962890625, 0.0311431884765625, 0.0012159347534179688, 0.29638671875, 0.14013671875, 0.0450439453125, 0.0007548332214355469, 1.5361328125, 0.0250701904296875, 0.364990234375, 1.3642578125, 1.1630859375, 0.62890625, 0.0634765625, 0.09124755859375, 1.4765625, 0.255859375, 0.4921875, 2.826171875, 1.35546875, 0.33056640625, 1.275390625, 1.134765625, 1.6181640625, 0.85498046875, 0.0083770751953125, 0.724609375, 0.95751953125, 0.49169921875, 0.87353515625, 0.55029296875, 0.60546875, 0.1412353515625], "tokens": [334, 945, 907, 1158, 13409, 19217, 4666, 81, 6880, 81, 613, 280, 13409, 32, 6993, 29318, 77, 89, 449, 6603, 22, 724, 719, 1022, 664, 319, 861, 415, 322, 5736, 884, 10061, 372, 11426, 32, 664, 319, 1348, 6058, 688, 2953, 884, 312, 17272, 432, 322, 5736, 688, 884, 27149, 810, 664]}
{"line_number": 972, "line_type": "original", "code": "    if (// is pattern folded", "entropy": 4.80859375, "is_bug_line": false, "sus_score": 0.5380942821502686, "per_token_entropy": [3.251953125, 6.34765625, 1.328125, 7.48046875, 3.3359375, 8.1875, 8.546875, 0.0008254051208496094], "tokens": [264, 415, 308, 306, 438, 5257, 14801, 981]}
{"line_number": 972, "line_type": "generated", "code": "\n   * flag, so we don't either.\n   *\n   * @param flags\n   * @return\n   */\n  private boolean areValidRegexpFlags(String flags) {\n    return REGEXP_FLAGS_RE.matcher(flags).matches();\n  }", "entropy": 0.334716796875, "is_bug_line": false, "sus_score": 0.5380942821502686, "per_token_entropy": [0.806640625, 0.046356201171875, 1.8740234375, 2.107421875, 1.4013671875, 1.0380859375, 1.013671875, 0.0004973411560058594, 1.142578125, 0.1256103515625, 0.313232421875, 1.126953125, 0.67041015625, 0.0206756591796875, 0.47021484375, 0.25, 0.08404541015625, 1.4697265625, 0.1746826171875, 0.1282958984375, 0.0045318603515625, 1.2421875, 0.00853729248046875, 0.01255035400390625, 0.1329345703125, 0.90966796875, 0.00087738037109375, 0.0004761219024658203, 0.0012407302856445312, 5.602836608886719e-06, 0.0035572052001953125, 0.003387451171875, 0.0035648345947265625, 0.0025634765625, 0.000598907470703125, 0.048492431640625, 0.345703125, 0.335205078125, 4.76837158203125e-06, 1.1563301086425781e-05, 6.818771362304688e-05, 3.5881996154785156e-05, 8.761882781982422e-05, 0.0003256797790527344, 0.03167724609375, 0.0004749298095703125, 0.0017910003662109375, 0.006439208984375, 0.0262603759765625, 0.006191253662109375, 0.00820159912109375, 0.0002639293670654297], "tokens": [664, 319, 4655, 30, 1259, 996, 2800, 1330, 3154, 32, 664, 319, 664, 319, 477, 753, 5736, 664, 319, 477, 601, 664, 569, 334, 945, 1905, 884, 2303, 29583, 4629, 26, 652, 5736, 27, 301, 284, 442, 11752, 12275, 81, 6880, 81, 613, 32, 16937, 26, 4545, 547, 8933, 473, 334, 320]}
