{"line_number": 1080, "line_type": "original", "code": "", "entropy": 5.01171875, "is_bug_line": false, "sus_score": 0.6041462421417236, "per_token_entropy": [5.01171875], "tokens": [203]}
{"line_number": 1080, "line_type": "generated", "code": "\n        if (isLowerPrecedence(n, Token.NOT)) {\n          Node child = n.getFirstChild();\n          if (child.getType() == Token.NOT) {\n            return child.getFirstChild();\n          }\n        }", "entropy": 0.40234375, "is_bug_line": false, "sus_score": 0.6041462421417236, "per_token_entropy": [0.1658935546875, 0.9814453125, 0.140869140625, 1.490234375, 0.2379150390625, 0.0009751319885253906, 1.1920928955078125e-06, 1.0625, 0.44140625, 0.46875, 1.6884765625, 0.059967041015625, 0.69580078125, 0.1673583984375, 0.0102386474609375, 0.1483154296875, 1.4453125, 1.95703125, 0.02215576171875, 0.05828857421875, 0.00048732757568359375, 0.0821533203125, 0.0027217864990234375, 0.0244293212890625, 0.278564453125, 0.6171875, 0.1490478515625, 0.28125, 0.059844970703125, 0.361083984375, 0.0028209686279296875, 0.0191497802734375, 0.07196044921875, 3.3736228942871094e-05, 1.2802734375, 0.137451171875, 0.0020008087158203125, 0.02618408203125, 1.7109375, 0.8818359375, 0.050689697265625, 0.072265625, 0.0002961158752441406, 0.55078125, 0.026702880859375, 9.524822235107422e-05, 1.369140625, 0.00634765625], "tokens": [291, 415, 308, 297, 6724, 2626, 39939, 26, 96, 30, 6512, 32, 3908, 490, 301, 616, 4004, 2838, 280, 310, 32, 25657, 2931, 473, 616, 415, 308, 2661, 32, 10272, 346, 610, 6512, 32, 3908, 27, 301, 324, 442, 2838, 32, 25657, 2931, 473, 616, 320, 291, 320]}
{"line_number": 1428, "line_type": "original", "code": "      action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;", "entropy": 0.92041015625, "is_bug_line": false, "sus_score": 0.6039078235626221, "per_token_entropy": [5.55078125, 9.140625, 0.07598876953125, 0.52587890625, 0.1793212890625, 0.0003743171691894531, 0.0038776397705078125, 0.00540924072265625, 0.0006461143493652344, 0.00030684471130371094, 2.2530555725097656e-05, 0.00040841102600097656, 0.04327392578125, 0.09515380859375, 1.0371208190917969e-05, 0.002246856689453125, 0.023468017578125], "tokens": [647, 2125, 280, 40809, 1261, 1711, 32, 24154, 81, 1407, 81, 42673, 81, 12003, 81, 12896, 45]}
{"line_number": 1428, "line_type": "generated", "code": "\n\n      // if the pattern is a single slash, we can fold it to //\n      if (\"/\".equals(pattern.getString())) {\n        pattern.setString(\"//\");\n      }\n\n      // if the pattern is a single forward slash, we can fold it to", "entropy": 0.7314453125, "is_bug_line": false, "sus_score": 0.6039078235626221, "per_token_entropy": [1.287109375, 0.8076171875, 3.841796875, 2.048828125, 1.4052734375, 0.72119140625, 1.859375, 2.16015625, 2.1953125, 0.287353515625, 2.77734375, 2.251953125, 1.3984375, 0.505859375, 1.4482421875, 1.46484375, 0.36474609375, 0.54736328125, 0.58984375, 0.1910400390625, 0.0206756591796875, 0.001171112060546875, 0.0006022453308105469, 0.0196685791015625, 0.0007491111755371094, 0.0024394989013671875, 0.0787353515625, 0.00389862060546875, 0.1324462890625, 0.99462890625, 0.1607666015625, 0.1068115234375, 0.1182861328125, 0.001644134521484375, 0.394287109375, 0.00038743019104003906, 0.384033203125, 0.493408203125, 1.091796875, 0.5849609375, 0.47216796875, 0.55322265625, 0.87744140625, 0.67724609375, 1.861328125, 0.2296142578125, 0.1866455078125, 0.2496337890625, 0.07025146484375, 0.06280517578125, 0.032470703125, 0.01155853271484375], "tokens": [1687, 434, 415, 322, 5257, 438, 312, 3982, 29659, 30, 996, 883, 11426, 561, 372, 434, 397, 415, 2884, 33, 2296, 3574, 26, 5607, 32, 7069, 5156, 301, 291, 5257, 32, 24353, 34203, 724, 397, 320, 1687, 434, 415, 322, 5257, 438, 312, 3982, 7386, 29659, 30, 996, 883, 11426, 561, 372]}
{"line_number": 1429, "line_type": "original", "code": "    } else {", "entropy": 3.716796875, "is_bug_line": false, "sus_score": 0.6039078235626221, "per_token_entropy": [6.7578125, 7.05859375, 0.414794921875, 0.63232421875], "tokens": [264, 320, 813, 301]}
{"line_number": 1429, "line_type": "generated", "code": "\n      if (!containsLineTerminator(pattern.getString())) {\n        if (null == flags) {\n          // \"RegExp('foobar')\" --> /foobar/\n          return IR.div(IR.regExp(pattern)).srcref(n);\n        }", "entropy": 0.45166015625, "is_bug_line": false, "sus_score": 0.6039078235626221, "per_token_entropy": [0.09942626953125, 1.759765625, 1.486328125, 1.6162109375, 0.434326171875, 0.0304412841796875, 0.0019664764404296875, 0.218994140625, 0.041717529296875, 0.02239990234375, 0.001911163330078125, 0.338134765625, 0.0141754150390625, 0.289306640625, 1.9375, 0.11871337890625, 0.5595703125, 0.69384765625, 0.0146026611328125, 0.0921630859375, 0.00716400146484375, 0.130615234375, 1.0654296875, 0.87841796875, 0.267822265625, 0.09368896484375, 1.9892578125, 0.0245361328125, 0.06781005859375, 0.445556640625, 0.0021610260009765625, 0.005390167236328125, 0.0458984375, 0.994140625, 0.2166748046875, 0.0005106925964355469, 2.134765625, 0.00946807861328125, 0.7470703125, 0.0004031658172607422, 1.931640625, 0.11737060546875, 0.01416015625, 0.281494140625, 1.1865234375, 0.4912109375, 0.0006461143493652344, 0.244140625, 0.23193359375, 0.06201171875, 0.0274505615234375, 0.0001615285873413086], "tokens": [397, 415, 1429, 4752, 1811, 14622, 717, 26, 5607, 32, 7069, 5156, 301, 291, 415, 308, 1693, 610, 5736, 27, 301, 616, 434, 313, 28258, 463, 26018, 27059, 1101, 517, 26018, 33, 616, 442, 14095, 32, 507, 26, 3900, 32, 1582, 3866, 26, 5607, 3427, 1617, 612, 26, 96, 293, 291, 320]}
{"line_number": 1452, "line_type": "original", "code": "    Node parent = n.getParent();", "entropy": 2.248046875, "is_bug_line": false, "sus_score": 0.6039078235626221, "per_token_entropy": [6.359375, 7.5390625, 3.78125, 0.10748291015625, 0.1912841796875, 0.007251739501953125, 0.003612518310546875, 0.0021343231201171875], "tokens": [264, 4004, 2935, 280, 310, 32, 18789, 473]}
{"line_number": 1452, "line_type": "generated", "code": "\n      return regexLiteral;\n    }\n    return n;\n  }\n\n  /**\n   * Returns true if the given string contains any Unicode escape sequences.\n   */\n  private boolean containsUnicodeEscape(String s) {\n    for (int i = 0; i", "entropy": 0.3330078125, "is_bug_line": false, "sus_score": 0.6039078235626221, "per_token_entropy": [0.8994140625, 0.06170654296875, 0.042083740234375, 1.3589859008789062e-05, 0.0070953369140625, 0.092041015625, 0.0003974437713623047, 1.28515625, 0.03411865234375, 0.00469207763671875, 0.0004074573516845703, 0.128173828125, 0.0034198760986328125, 0.40966796875, 0.9326171875, 0.1416015625, 0.0005207061767578125, 2.044921875, 1.03515625, 0.13623046875, 0.74462890625, 1.052734375, 0.8701171875, 0.7919921875, 1.544921875, 0.46142578125, 0.41455078125, 0.32666015625, 0.276611328125, 0.01947021484375, 0.326171875, 0.0027942657470703125, 0.059539794921875, 0.72705078125, 0.0014095306396484375, 0.0002830028533935547, 1.6450881958007812e-05, 0.0021152496337890625, 0.0047149658203125, 1.0107421875, 0.0009636878967285156, 0.0004825592041015625, 0.0068511962890625, 1.0830078125, 0.002101898193359375, 0.0166778564453125, 0.0272216796875, 0.005462646484375, 0.0171051025390625, 0.018035888671875, 0.23291015625, 0.0006251335144042969], "tokens": [397, 442, 9667, 8208, 45, 284, 320, 284, 442, 310, 45, 334, 320, 719, 1022, 664, 319, 3759, 861, 415, 322, 2702, 802, 4304, 1346, 23174, 15820, 17211, 32, 664, 569, 334, 945, 1905, 4304, 14923, 19033, 26, 652, 309, 27, 301, 284, 436, 308, 410, 595, 280, 225, 34, 45, 595]}
{"line_number": 1457, "line_type": "original", "code": "    if (null == pattern || (null != flags && null != flags.getNext())) {", "entropy": 1.3564453125, "is_bug_line": false, "sus_score": 0.6039078235626221, "per_token_entropy": [6.453125, 2.04296875, 0.2802734375, 2.576171875, 0.8193359375, 1.1572265625, 1.26171875, 4.94140625, 1.5185546875, 0.331787109375, 0.26318359375, 0.046844482421875, 2.6171875, 0.57470703125, 0.4130859375, 0.0144195556640625, 0.427490234375, 0.03466796875, 0.00965118408203125], "tokens": [264, 415, 308, 1693, 610, 5257, 1276, 308, 1693, 863, 5736, 962, 744, 863, 5736, 32, 23017, 5156, 301]}
{"line_number": 1457, "line_type": "generated", "code": "\n    // too few or too many arguments\n    return n;\n  }\n\n  private Node tryFoldArrayConstructor(Node n) {\n    Node arg = n.getFirstChild().getNext();\n    FoldArrayAction action = isSafeToFoldArrayConstructor(arg);", "entropy": 0.2568359375, "is_bug_line": false, "sus_score": 0.6039078235626221, "per_token_entropy": [1.5771484375, 1.396484375, 1.93359375, 0.04833984375, 0.045562744140625, 0.0007882118225097656, 0.0008358955383300781, 0.01062774658203125, 0.054931640625, 0.030731201171875, 0.0118408203125, 0.0006284713745117188, 0.0556640625, 0.0012416839599609375, 0.311767578125, 0.71533203125, 0.72119140625, 0.2451171875, 0.04534912109375, 1.5244140625, 0.64306640625, 0.07330322265625, 0.00821685791015625, 0.035675048828125, 0.07025146484375, 0.0011262893676757812, 0.051788330078125, 0.1787109375, 1.4189453125, 0.034698486328125, 0.06011962890625, 0.00074005126953125, 0.1453857421875, 0.005695343017578125, 0.81591796875, 0.00539398193359375, 0.006801605224609375, 0.576171875, 0.3974609375, 7.295608520507812e-05, 3.528594970703125e-05, 0.06695556640625, 0.015960693359375, 0.00936126708984375, 6.198883056640625e-06, 8.225440979003906e-06, 2.0265579223632812e-06, 2.3365020751953125e-05, 4.76837158203125e-07, 0.00029087066650390625, 0.0008864402770996094, 0.0008172988891601562], "tokens": [284, 434, 5133, 7002, 556, 5133, 5075, 4209, 284, 442, 310, 45, 334, 320, 719, 945, 4004, 1596, 15483, 1261, 7932, 26, 1212, 310, 27, 301, 284, 4004, 1638, 280, 310, 32, 25657, 2931, 922, 23017, 473, 284, 40809, 1261, 1711, 2125, 280, 438, 11691, 705, 15483, 1261, 7932, 26, 626, 293]}
{"line_number": 1446, "line_type": "original", "code": "      }", "entropy": 2.44921875, "is_bug_line": false, "sus_score": 0.5991976857185364, "per_token_entropy": [3.744140625, 1.154296875], "tokens": [647, 320]}
{"line_number": 1446, "line_type": "generated", "code": "\n      }\n\n      // Don't do this if the parent is a var, let, or const.\n      // This is because the var, let, or const may have been assigned to.\n      //\n      // Don't do this if the parent is an assignment", "entropy": 1.01171875, "is_bug_line": false, "sus_score": 0.5991976857185364, "per_token_entropy": [0.9130859375, 0.0662841796875, 0.478759765625, 1.91015625, 4.0, 0.0012807846069335938, 3.587890625, 0.728515625, 0.95166015625, 1.0576171875, 1.09765625, 0.302734375, 0.5517578125, 3.580078125, 1.751953125, 0.78662109375, 0.1368408203125, 0.136474609375, 0.1092529296875, 1.19921875, 0.341796875, 0.39697265625, 2.92578125, 1.0107421875, 0.96923828125, 1.740234375, 2.27734375, 0.421875, 0.01214599609375, 0.06573486328125, 0.1966552734375, 0.0004544258117675781, 1.9404296875, 1.404296875, 1.7607421875, 1.986328125, 0.50244140625, 2.275390625, 0.06103515625, 0.222412109375, 3.18359375, 0.0030460357666015625, 2.21484375, 0.0001964569091796875, 0.05255126953125, 0.09979248046875, 0.0997314453125, 0.1385498046875, 0.0712890625, 0.044158935546875, 1.7080078125, 1.150390625], "tokens": [397, 320, 1687, 434, 12029, 1330, 745, 458, 415, 322, 2935, 438, 312, 773, 30, 1207, 30, 556, 660, 32, 397, 434, 1348, 438, 3301, 322, 773, 30, 1207, 30, 556, 660, 1631, 1159, 2583, 11012, 372, 32, 397, 434, 397, 434, 12029, 1330, 745, 458, 415, 322, 2935, 438, 600, 13807]}
{"line_number": 1459, "line_type": "original", "code": "      return n;", "entropy": 1.9482421875, "is_bug_line": false, "sus_score": 0.58857262134552, "per_token_entropy": [6.66015625, 0.84326171875, 0.1944580078125, 0.0953369140625], "tokens": [647, 442, 310, 45]}
{"line_number": 1459, "line_type": "generated", "code": "\n    return n;\n  }\n\n  private Node reduceNullUndefined(Node n) {", "entropy": 0.29736328125, "is_bug_line": false, "sus_score": 0.58857262134552, "per_token_entropy": [0.5966796875, 0.86767578125, 0.11602783203125, 0.043060302734375, 0.01267242431640625, 0.0004949569702148438, 0.0750732421875, 0.256103515625, 0.2073974609375, 0.4912109375, 1.501953125, 0.81982421875, 0.04998779296875, 0.0008940696716308594, 0.00275421142578125, 0.01099395751953125, 0.00027942657470703125], "tokens": [284, 442, 310, 45, 334, 320, 719, 945, 4004, 11665, 1883, 14339, 26, 1212, 310, 27, 301]}
{"line_number": 1331, "line_type": "original", "code": "      \"Array\",", "entropy": 4.23046875, "is_bug_line": false, "sus_score": 0.5468072891235352, "per_token_entropy": [3.314453125, 7.06640625, 4.26953125, 2.275390625], "tokens": [647, 313, 1261, 392]}
{"line_number": 1331, "line_type": "generated", "code": "\n        newLiteralNode = IR.regex(n.getLastChild().detachFromParent(),\n            n.getLastChild().detachFromParent());\n\n      } else if (\"Error\".equals(className)) {\n        // \"Error(\"something\")\" --> new Error(\"something", "entropy": 0.342529296875, "is_bug_line": false, "sus_score": 0.5468072891235352, "per_token_entropy": [0.422119140625, 1.0771484375, 0.0005941390991210938, 0.0014467239379882812, 0.00145721435546875, 0.556640625, 0.0010471343994140625, 1.1865234375, 0.081787109375, 0.8525390625, 0.01026153564453125, 0.46240234375, 0.0009489059448242188, 0.5048828125, 0.564453125, 2.21875, 6.949901580810547e-05, 0.291015625, 0.6591796875, 0.2401123046875, 0.0014562606811523438, 0.544921875, 0.484130859375, 0.318115234375, 0.1417236328125, 0.0010271072387695312, 0.08123779296875, 0.2108154296875, 1.56640625, 0.01059722900390625, 0.006031036376953125, 0.042236328125, 0.140869140625, 0.3310546875, 0.0006542205810546875, 0.00037288665771484375, 2.0384788513183594e-05, 0.0005841255187988281, 0.0465087890625, 0.00044727325439453125, 0.08392333984375, 0.06353759765625, 0.37841796875, 0.01384735107421875, 0.59814453125, 2.90625, 0.298583984375, 0.01800537109375, 0.359130859375, 0.01297760009765625, 0.018463134765625, 0.003749847412109375], "tokens": [291, 537, 8208, 1212, 280, 14095, 32, 7920, 26, 96, 32, 20197, 2931, 922, 18723, 1792, 4433, 1026, 324, 310, 32, 20197, 2931, 922, 18723, 1792, 4433, 1035, 1687, 320, 813, 415, 2884, 924, 2296, 3574, 26, 8678, 490, 301, 291, 434, 313, 924, 440, 20282, 47988, 1101, 537, 3081, 440, 20282]}
{"line_number": 957, "line_type": "original", "code": "   */", "entropy": 4.74609375, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [8.90625, 0.58642578125], "tokens": [261, 569]}
{"line_number": 957, "line_type": "generated", "code": "\n  private Node getReturnExpression(Node n) {\n    Preconditions.checkState(isReturnBlock(n));\n    return n.getFirstChild().getFirstChild();\n  }\n\n  /**\n   * @return Whether the node is a block with a single statement that", "entropy": 0.12493896484375, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [0.07427978515625, 0.00930023193359375, 0.0028533935546875, 0.007129669189453125, 0.028289794921875, 0.01467132568359375, 0.003650665283203125, 0.0003898143768310547, 0.0265350341796875, 0.0017786026000976562, 0.0005011558532714844, 0.005397796630859375, 0.044891357421875, 8.082389831542969e-05, 0.00014698505401611328, 0.00888824462890625, 0.0005612373352050781, 0.01739501953125, 0.0192108154296875, 1.5859375, 0.00213623046875, 0.001239776611328125, 0.366455078125, 0.0289306640625, 0.25830078125, 0.14208984375, 0.0003600120544433594, 0.1134033203125, 0.051116943359375, 0.2470703125, 0.1483154296875, 0.0030765533447265625, 0.0206146240234375, 0.01003265380859375, 0.0015621185302734375, 0.2305908203125, 0.1226806640625, 0.041351318359375, 0.0012569427490234375, 0.7431640625, 0.060150146484375, 0.20556640625, 0.1038818359375, 0.1761474609375, 0.071533203125, 0.269287109375, 0.8701171875, 0.141357421875, 0.05731201171875, 0.0186767578125, 0.06671142578125, 0.06939697265625], "tokens": [334, 945, 4004, 622, 2891, 3487, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 1078, 26, 297, 2891, 2227, 26, 96, 876, 284, 442, 310, 32, 25657, 2931, 922, 25657, 2931, 473, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688]}
{"line_number": 974, "line_type": "original", "code": "", "entropy": 4.41796875, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [4.41796875], "tokens": [203]}
{"line_number": 974, "line_type": "generated", "code": "\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @return Whether the node is a VAR declaration of a single variable.\n   */\n  private boolean isVarExpression(Node n) {\n    if (n.isVar", "entropy": 0.095458984375, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [0.4033203125, 0.473388671875, 0.0221099853515625, 0.000492095947265625, 0.009918212890625, 0.00013184547424316406, 0.1885986328125, 0.00029730796813964844, 0.419189453125, 0.0020198822021484375, 0.0003483295440673828, 0.0010004043579101562, 0.017730712890625, 0.00010502338409423828, 0.057342529296875, 0.037078857421875, 0.005809783935546875, 0.00016689300537109375, 0.061676025390625, 0.012725830078125, 0.2330322265625, 0.022979736328125, 0.0609130859375, 0.026031494140625, 0.10101318359375, 0.6953125, 0.3349609375, 0.36181640625, 0.0345458984375, 0.005054473876953125, 0.0184326171875, 0.062408447265625, 0.0010995864868164062, 0.0035533905029296875, 0.0007567405700683594, 0.005023956298828125, 0.0027294158935546875, 0.00189208984375, 0.1175537109375, 0.873046875, 0.010772705078125, 0.0003542900085449219, 0.0023097991943359375, 0.00206756591796875, 0.0002467632293701172, 0.0601806640625, 0.1790771484375, 0.01824951171875, 0.009613037109375, 0.00012671947479248047, 0.0014543533325195312, 0.003173828125], "tokens": [291, 442, 901, 45, 397, 320, 284, 320, 446, 442, 901, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 10244, 13317, 432, 312, 3982, 2677, 32, 664, 569, 334, 945, 1905, 438, 1881, 3487, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 297, 1881]}
{"line_number": 984, "line_type": "original", "code": "      if (n.hasOneChild()) {", "entropy": 1.6064453125, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [6.3203125, 1.875, 0.02587890625, 0.3896484375, 0.0037860870361328125, 5.66796875, 0.0010890960693359375, 0.166748046875, 0.01076507568359375], "tokens": [647, 415, 308, 96, 32, 41906, 2931, 1157, 301]}
{"line_number": 984, "line_type": "generated", "code": "\n    Node first = n.getFirstChild();\n    return first;\n  }\n\n  /**\n   * @return Whether the node is a block with a single statement that is\n   *     a VAR declaration of a single variable.\n   */\n  private boolean isVarExpress", "entropy": 0.1907958984375, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [0.1016845703125, 1.7197265625, 0.2008056640625, 0.0080413818359375, 0.003963470458984375, 4.1604042053222656e-05, 0.006744384765625, 7.545948028564453e-05, 0.0026397705078125, 0.044525146484375, 1.15234375, 0.02227783203125, 0.194091796875, 0.033538818359375, 0.0005369186401367188, 0.093017578125, 0.036651611328125, 0.009307861328125, 0.0005431175231933594, 0.08111572265625, 0.01120758056640625, 0.52490234375, 0.03570556640625, 0.09515380859375, 0.0278167724609375, 0.1280517578125, 0.88671875, 0.06787109375, 0.0211029052734375, 0.01837158203125, 0.053466796875, 0.0491943359375, 0.05816650390625, 0.02978515625, 0.00021350383758544922, 0.0272064208984375, 0.3095703125, 1.0224609375, 0.0367431640625, 0.338623046875, 0.2078857421875, 0.017059326171875, 0.060211181640625, 0.498291015625, 0.0160675048828125, 0.00637054443359375, 0.0018815994262695312, 0.004421234130859375, 0.004421234130859375, 0.006317138671875, 0.6201171875, 1.0244140625], "tokens": [284, 4004, 1932, 280, 310, 32, 25657, 2931, 473, 284, 442, 1932, 45, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438, 664, 319, 262, 312, 10244, 13317, 432, 312, 3982, 2677, 32, 664, 569, 334, 945, 1905, 438, 1881, 12070]}
{"line_number": 985, "line_type": "original", "code": "        Node first = n.getFirstChild();", "entropy": 1.1640625, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [6.734375, 3.345703125, 0.339599609375, 0.0126495361328125, 0.0192413330078125, 0.0022373199462890625, 0.00983428955078125, 0.0005178451538085938, 0.01125335693359375], "tokens": [351, 4004, 1932, 280, 310, 32, 25657, 2931, 473]}
{"line_number": 985, "line_type": "generated", "code": "\n    return n.getFirstChild();\n  }\n\n  /**\n   * @return Whether the node is a single VAR declaration of a single\n   *     variable.\n   */\n  private boolean isVarExpression(Node n) {\n    if (n.isVar())", "entropy": 0.1533203125, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [0.0645751953125, 0.044525146484375, 0.159912109375, 0.004276275634765625, 0.010101318359375, 0.0002815723419189453, 0.025787353515625, 0.0102386474609375, 0.00014066696166992188, 0.0626220703125, 0.037841796875, 0.00788116455078125, 0.00033664703369140625, 0.08245849609375, 0.01280975341796875, 0.4306640625, 0.04473876953125, 0.1129150390625, 0.0312042236328125, 0.1429443359375, 2.0546875, 0.79736328125, 0.57373046875, 1.0234375, 0.0546875, 0.040618896484375, 0.7998046875, 0.00026226043701171875, 0.1268310546875, 0.0345458984375, 0.11968994140625, 0.00818634033203125, 0.0015172958374023438, 0.0008292198181152344, 0.004940032958984375, 0.002185821533203125, 0.00200653076171875, 0.1378173828125, 0.5498046875, 0.01041412353515625, 0.00038313865661621094, 0.0016088485717773438, 0.0018606185913085938, 0.001293182373046875, 0.09375, 0.19677734375, 0.017120361328125, 0.00975799560546875, 0.0001995563507080078, 0.001220703125, 0.0030727386474609375, 0.017822265625], "tokens": [284, 442, 310, 32, 25657, 2931, 473, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 3982, 10244, 13317, 432, 312, 3982, 664, 319, 262, 2677, 32, 664, 569, 334, 945, 1905, 438, 1881, 3487, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 297, 1881, 1157]}
{"line_number": 986, "line_type": "original", "code": "        if (first.isReturn()) {", "entropy": 1.705078125, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [6.44140625, 2.990234375, 0.08251953125, 0.89111328125, 0.012451171875, 0.2325439453125, 4.48046875, 0.183837890625, 0.03173828125], "tokens": [351, 415, 308, 2232, 32, 297, 2891, 1157, 301]}
{"line_number": 986, "line_type": "generated", "code": "\n  }\n\n  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an assignment.\n   */\n  private boolean isAssignBlock(Node n) {\n    if (n.isBlock()) {\n      if (n", "entropy": 0.13134765625, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [0.255859375, 0.1942138671875, 0.453857421875, 0.06610107421875, 0.0172119140625, 0.0010547637939453125, 0.14013671875, 0.0202789306640625, 0.2381591796875, 0.055145263671875, 0.1207275390625, 0.0357666015625, 0.1805419921875, 0.7138671875, 0.0867919921875, 0.025421142578125, 0.018035888671875, 0.057220458984375, 0.054443359375, 0.06396484375, 0.040679931640625, 0.00046753883361816406, 0.031524658203125, 1.142578125, 1.486328125, 0.95166015625, 0.0277557373046875, 0.0036792755126953125, 0.003177642822265625, 0.006557464599609375, 0.002399444580078125, 0.01715087890625, 0.1583251953125, 0.056915283203125, 0.0025997161865234375, 0.00016582012176513672, 0.000667572021484375, 0.0012464523315429688, 0.00044846534729003906, 0.00943756103515625, 0.04754638671875, 0.0033321380615234375, 0.00724029541015625, 0.00012004375457763672, 0.0006122589111328125, 0.00039315223693847656, 0.00560760498046875, 0.00022852420806884766, 0.0030307769775390625, 0.019439697265625, 0.0002956390380859375, 0.0006566047668457031], "tokens": [334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438, 664, 319, 262, 600, 13807, 32, 664, 569, 334, 945, 1905, 438, 9079, 2227, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 297, 2227, 1157, 301, 397, 415, 308, 96]}
{"line_number": 993, "line_type": "original", "code": "  }", "entropy": 3.75, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [2.390625, 5.109375], "tokens": [225, 320]}
{"line_number": 993, "line_type": "generated", "code": "\n  /**\n   * @return Whether the node is a block with a single statement that is\n   *     a statement that consumes a 'dangling else'.\n   */\n  private boolean isDanglingElseBlock(Node n) {\n    if (n.", "entropy": 0.279296875, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [1.5166015625, 0.75537109375, 0.02362060546875, 0.0005359649658203125, 0.67822265625, 0.09033203125, 0.0992431640625, 0.27392578125, 0.39208984375, 0.2607421875, 0.32421875, 1.25, 0.311279296875, 0.0992431640625, 0.06781005859375, 0.050323486328125, 0.3603515625, 0.2958984375, 0.06072998046875, 0.002475738525390625, 0.10150146484375, 0.6572265625, 3.322265625, 0.408935546875, 1.0859375, 0.01523590087890625, 0.1031494140625, 0.5224609375, 0.0036773681640625, 0.0013036727905273438, 0.0016832351684570312, 0.261474609375, 0.039794921875, 0.021148681640625, 0.037078857421875, 0.01453399658203125, 0.0036830902099609375, 0.0203399658203125, 0.38037109375, 0.01497650146484375, 0.025604248046875, 0.11444091796875, 0.003692626953125, 0.0006022453308105469, 0.0025386810302734375, 0.00589752197265625, 0.001155853271484375, 0.110107421875, 0.21826171875, 0.013641357421875, 0.09820556640625, 0.0004284381866455078], "tokens": [334, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438, 664, 319, 262, 312, 7603, 688, 16831, 101, 312, 330, 86, 43237, 813, 2473, 664, 569, 334, 945, 1905, 438, 54, 43237, 13222, 2227, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32]}
{"line_number": 994, "line_type": "original", "code": "", "entropy": 3.306640625, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [3.306640625], "tokens": [203]}
{"line_number": 994, "line_type": "generated", "code": "\n    return false;\n  }", "entropy": 0.2398681640625, "is_bug_line": false, "sus_score": 0.5439913868904114, "per_token_entropy": [0.60400390625, 0.6689453125, 0.1329345703125, 0.0009765625, 0.03167724609375, 0.0008749961853027344], "tokens": [284, 442, 901, 45, 334, 320]}
{"line_number": 944, "line_type": "original", "code": "          }", "entropy": 6.765625, "is_bug_line": false, "sus_score": 0.5436511039733887, "per_token_entropy": [12.125, 1.4091796875], "tokens": [2033, 320]}
{"line_number": 944, "line_type": "generated", "code": "\n\n  /**\n   * Folds an expression block into its parent.\n   */\n  private void foldBlock(Node n) {\n    Preconditions.checkState(isFoldableExpressBlock(n));\n\n    Node parent = n.getParent();\n    Node expr = get", "entropy": 0.40673828125, "is_bug_line": false, "sus_score": 0.5436511039733887, "per_token_entropy": [0.45849609375, 0.364501953125, 0.0465087890625, 0.0001512765884399414, 2.603515625, 0.306884765625, 2.822265625, 0.59326171875, 1.6279296875, 1.212890625, 1.0185546875, 0.343505859375, 1.0439453125, 0.365234375, 0.8525390625, 0.0023021697998046875, 0.15966796875, 0.056610107421875, 0.46240234375, 0.939453125, 0.7041015625, 0.01043701171875, 0.280517578125, 0.10040283203125, 0.00035071372985839844, 0.00957489013671875, 0.50927734375, 7.176399230957031e-05, 0.0013990402221679688, 0.082763671875, 0.005023956298828125, 0.11248779296875, 0.01131439208984375, 4.017353057861328e-05, 0.036712646484375, 7.700920104980469e-05, 0.00015485286712646484, 0.0008554458618164062, 0.09423828125, 0.8564453125, 0.13525390625, 0.6142578125, 0.00463104248046875, 0.0160980224609375, 0.0002092123031616211, 0.0005698204040527344, 0.0010585784912109375, 0.1485595703125, 0.70263671875, 1.0771484375, 0.260986328125, 0.0946044921875], "tokens": [719, 1022, 664, 319, 40809, 101, 600, 6101, 2163, 1991, 2819, 2935, 32, 664, 569, 334, 945, 763, 11426, 2227, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 1078, 26, 297, 15483, 444, 12070, 2227, 26, 96, 876, 446, 4004, 2935, 280, 310, 32, 18789, 473, 284, 4004, 9810, 280, 622]}
{"line_number": 945, "line_type": "original", "code": "", "entropy": 2.7734375, "is_bug_line": false, "sus_score": 0.5436511039733887, "per_token_entropy": [2.7734375], "tokens": [203]}
{"line_number": 945, "line_type": "generated", "code": "\n  private void tryFoldingReturn(Node n) {\n    if (!isReturnBlock(n)) {\n      return;\n    }\n\n    Node returnNode = n.getFirstChild();\n    Node expr = returnNode.getFirstChild();\n\n    if (expr!=", "entropy": 0.393310546875, "is_bug_line": false, "sus_score": 0.5436511039733887, "per_token_entropy": [0.37841796875, 0.8720703125, 0.73193359375, 1.21484375, 0.356689453125, 1.1865234375, 1.9228515625, 0.93505859375, 0.0182952880859375, 0.287353515625, 0.289306640625, 0.0010423660278320312, 0.0204925537109375, 1.1806640625, 0.392578125, 0.275390625, 0.13134765625, 0.2459716796875, 0.0012331008911132812, 0.0009822845458984375, 0.126953125, 0.00823974609375, 0.01001739501953125, 0.01500701904296875, 0.0038013458251953125, 0.01108551025390625, 0.00019085407257080078, 0.2222900390625, 0.10589599609375, 1.6650390625, 0.323974609375, 0.0015821456909179688, 0.3046875, 0.00020015239715576172, 0.0980224609375, 0.0280914306640625, 0.01041412353515625, 0.12109375, 0.273681640625, 1.4501953125, 0.3828125, 0.21044921875, 4.267692565917969e-05, 0.00025653839111328125, 0.279296875, 0.0017290115356445312, 0.0020694732666015625, 1.1484375, 1.08203125, 0.2130126953125, 0.3359375, 1.5751953125], "tokens": [334, 945, 763, 1596, 15483, 299, 2891, 26, 1212, 310, 27, 301, 284, 415, 1429, 297, 2891, 2227, 26, 96, 490, 301, 397, 442, 45, 284, 320, 446, 4004, 442, 1212, 280, 310, 32, 25657, 2931, 473, 284, 4004, 9810, 280, 442, 1212, 32, 25657, 2931, 473, 446, 415, 308, 3385, 863]}
{"line_number": 956, "line_type": "original", "code": "   * @return The expression node.", "entropy": 2.515625, "is_bug_line": false, "sus_score": 0.5436511039733887, "per_token_entropy": [6.8515625, 3.8359375, 0.92431640625, 0.12188720703125, 2.84375, 0.8662109375, 1.5009765625, 3.1796875], "tokens": [261, 319, 477, 601, 886, 6101, 1541, 32]}
{"line_number": 956, "line_type": "generated", "code": "\n   */\n  private Node getReturnExpression(Node n) {\n    Preconditions.checkState(isReturnExpression(n));\n    return n.getFirstChild();\n  }\n\n  /**\n   * @return Whether the node is a single return statement with no expression.", "entropy": 0.1749267578125, "is_bug_line": false, "sus_score": 0.5436511039733887, "per_token_entropy": [0.1162109375, 0.0318603515625, 0.00785064697265625, 0.0888671875, 0.2169189453125, 0.161865234375, 0.1510009765625, 0.034576416015625, 0.01482391357421875, 0.0004754066467285156, 0.01303863525390625, 0.00208282470703125, 0.0004699230194091797, 0.0016498565673828125, 0.044464111328125, 0.0001100301742553711, 6.818771362304688e-05, 0.007701873779296875, 0.0004906654357910156, 0.01522064208984375, 0.0179901123046875, 0.38134765625, 0.00038743019104003906, 0.00035572052001953125, 0.0135040283203125, 0.0175323486328125, 0.0272979736328125, 0.0053863525390625, 0.0013685226440429688, 0.330810546875, 0.01209259033203125, 0.0384521484375, 0.0009508132934570312, 5.6743621826171875e-05, 0.078857421875, 0.136962890625, 0.458251953125, 0.0028228759765625, 0.76611328125, 0.08148193359375, 0.069580078125, 0.0640869140625, 0.0975341796875, 0.056640625, 0.25634765625, 1.40625, 0.763671875, 0.06536865234375, 1.2265625, 0.89404296875, 0.82958984375, 0.0814208984375], "tokens": [664, 569, 334, 945, 4004, 622, 2891, 3487, 26, 1212, 310, 27, 301, 284, 40596, 32, 1553, 1078, 26, 297, 2891, 3487, 26, 96, 876, 284, 442, 310, 32, 25657, 2931, 473, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 3982, 442, 7603, 623, 1289, 6101, 32]}
{"line_number": 979, "line_type": "original", "code": "   * @return Whether the node is a block with a single statement that is", "entropy": 0.96044921875, "is_bug_line": false, "sus_score": 0.5436511039733887, "per_token_entropy": [7.875, 1.0654296875, 2.44921875, 0.170166015625, 0.34521484375, 0.059783935546875, 0.13134765625, 0.03277587890625, 0.1827392578125, 2.064453125, 0.1976318359375, 0.049407958984375, 0.07244873046875, 0.3681640625, 0.239990234375, 0.06707763671875], "tokens": [261, 319, 477, 601, 14071, 322, 1541, 438, 312, 2163, 623, 312, 3982, 7603, 688, 438]}
{"line_number": 979, "line_type": "generated", "code": "\n  /**\n   * @return Whether the node is a VAR declaration of a single variable.\n   */\n  private boolean isVarExpression(Node n) {\n    if (n.isVar()) {\n      return n.hasOneChild();\n    }\n    return false", "entropy": 0.10552978515625, "is_bug_line": false, "sus_score": 0.5436511039733887, "per_token_entropy": [0.9140625, 0.1326904296875, 0.10028076171875, 0.0006318092346191406, 0.214599609375, 0.020904541015625, 0.25390625, 0.035400390625, 0.08697509765625, 0.029205322265625, 0.140869140625, 0.7744140625, 0.420654296875, 0.4150390625, 0.05230712890625, 0.0108489990234375, 0.0496826171875, 0.192626953125, 0.007965087890625, 0.013214111328125, 0.011505126953125, 0.01418304443359375, 0.0033931732177734375, 0.00279998779296875, 0.1534423828125, 0.69775390625, 0.0092620849609375, 0.0005097389221191406, 0.00345611572265625, 0.002552032470703125, 0.0004911422729492188, 0.0078125, 0.269287109375, 0.0200347900390625, 0.0149688720703125, 0.00035452842712402344, 0.0022430419921875, 0.00372314453125, 0.0214385986328125, 0.0007963180541992188, 0.003528594970703125, 0.13818359375, 0.025054931640625, 3.4689903259277344e-05, 0.035186767578125, 0.00156402587890625, 0.0280609130859375, 0.0015287399291992188, 8.034706115722656e-05, 0.1466064453125, 0.0017557144165039062, 0.00033164024353027344], "tokens": [334, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 10244, 13317, 432, 312, 3982, 2677, 32, 664, 569, 334, 945, 1905, 438, 1881, 3487, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 297, 1881, 1157, 301, 397, 442, 310, 32, 41906, 2931, 473, 284, 320, 284, 442, 901]}
{"line_number": 958, "line_type": "original", "code": "  private Node getBlockExpression(Node n) {", "entropy": 1.7412109375, "is_bug_line": false, "sus_score": 0.5424479842185974, "per_token_entropy": [6.6875, 0.56201171875, 0.03326416015625, 0.1513671875, 9.3515625, 2.138671875, 0.1025390625, 0.0022640228271484375, 0.11163330078125, 0.005916595458984375, 0.00568389892578125], "tokens": [225, 945, 4004, 622, 2227, 3487, 26, 1212, 310, 27, 301]}
{"line_number": 958, "line_type": "generated", "code": "\n    Preconditions.checkState(isReturnExpressBlock(n));\n    return n.getFirstChild().getFirstChild();\n  }\n\n  /**\n   * @return Whether the node is a single return statement with the\n   *     specified value.\n   */\n  private boolean", "entropy": 0.28466796875, "is_bug_line": false, "sus_score": 0.5424479842185974, "per_token_entropy": [0.74951171875, 0.037872314453125, 0.0002613067626953125, 0.00012612342834472656, 0.004730224609375, 0.0007176399230957031, 0.0157623291015625, 0.0180206298828125, 1.3759765625, 0.0003829002380371094, 0.0011091232299804688, 0.004482269287109375, 0.0202789306640625, 0.016357421875, 0.1002197265625, 0.01328277587890625, 0.0005183219909667969, 0.056060791015625, 0.02197265625, 0.12255859375, 0.1796875, 0.00469970703125, 0.0129852294921875, 0.032501220703125, 0.0013294219970703125, 0.2039794921875, 0.15234375, 0.0287017822265625, 0.00040078163146972656, 0.87353515625, 0.046478271484375, 0.201904296875, 0.12396240234375, 0.2122802734375, 0.0743408203125, 0.262451171875, 1.3583984375, 0.66357421875, 0.1097412109375, 1.2529296875, 1.98046875, 1.03125, 0.0006546974182128906, 0.11376953125, 1.4541015625, 1.515625, 0.1944580078125, 0.0197601318359375, 0.004344940185546875, 0.09576416015625, 0.0274200439453125, 0.00421142578125], "tokens": [284, 40596, 32, 1553, 1078, 26, 297, 2891, 12070, 2227, 26, 96, 876, 284, 442, 310, 32, 25657, 2931, 922, 25657, 2931, 473, 334, 320, 719, 1022, 664, 319, 477, 601, 14071, 322, 1541, 438, 312, 3982, 442, 7603, 623, 322, 664, 319, 262, 3191, 786, 32, 664, 569, 334, 945, 1905]}
{"line_number": 981, "line_type": "original", "code": "   */", "entropy": 4.27734375, "is_bug_line": false, "sus_score": 0.5421282649040222, "per_token_entropy": [7.1328125, 1.4248046875], "tokens": [261, 569]}
{"line_number": 981, "line_type": "generated", "code": "\n  private boolean isVarExpressBlock(Node n) {\n    if (n.isBlock()) {\n      if (n.hasOneChild()) {\n        Node first = n.getFirstChild();\n        if (first.isVar()) {\n          return first.", "entropy": 0.0516357421875, "is_bug_line": false, "sus_score": 0.5421282649040222, "per_token_entropy": [0.3408203125, 0.07958984375, 0.0282745361328125, 0.017547607421875, 0.1619873046875, 1.15234375, 0.0180816650390625, 0.0033435821533203125, 0.0006299018859863281, 0.003231048583984375, 0.0028972625732421875, 0.0013628005981445312, 0.0192108154296875, 0.0660400390625, 0.00897979736328125, 0.01201629638671875, 0.00021970272064208984, 0.0014333724975585938, 0.007694244384765625, 0.0086822509765625, 0.00036025047302246094, 0.003971099853515625, 0.0297088623046875, 0.0008945465087890625, 0.0009708404541015625, 6.449222564697266e-05, 0.01036834716796875, 5.435943603515625e-05, 0.0009732246398925781, 0.00015842914581298828, 0.006313323974609375, 0.005748748779296875, 0.004955291748046875, 0.0018110275268554688, 0.0015659332275390625, 6.54458999633789e-05, 0.0011444091796875, 0.00023257732391357422, 0.0005321502685546875, 0.0226287841796875, 0.05743408203125, 0.003238677978515625, 0.005767822265625, 0.00019276142120361328, 0.00104522705078125, 0.003742218017578125, 0.033935546875, 0.0005965232849121094, 0.0163421630859375, 0.400390625, 0.1356201171875, 0.00037384033203125], "tokens": [334, 945, 1905, 438, 1881, 12070, 2227, 26, 1212, 310, 27, 301, 284, 415, 308, 96, 32, 297, 2227, 1157, 301, 397, 415, 308, 96, 32, 41906, 2931, 1157, 301, 291, 4004, 1932, 280, 310, 32, 25657, 2931, 473, 291, 415, 308, 2232, 32, 297, 1881, 1157, 301, 616, 442, 1932, 32]}
